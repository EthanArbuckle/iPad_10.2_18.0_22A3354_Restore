uint64_t sub_22E7CA8EC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  result = sub_22E7CA3E8(a1, a2);
  v5 = result;
  v6 = *(_DWORD *)(a3 + 8);
  if (v6 >= *(_DWORD *)(a3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v6) = v5;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

uint64_t sub_22E7CA950(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  v3 = a3;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  v6 = *(_QWORD **)(v5 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 8);
  if (v6)
  {
    v20 = a2;
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
    v19 = *(_QWORD *)(*(_QWORD *)v5 + 8);
    v18 = (*(uint64_t (**)(_QWORD))(*v6 + 80))(*(_QWORD *)(v5 + 8));
    v7 = v19;
    v5 = v21;
    a2 = v20;
    v3 = a3;
    v8 = v18 + v6[4] - v6[2];
  }
  else
  {
    v8 = 0;
  }
  v9 = *(unsigned int *)(v5 + 24) + 8 * (v8 + v7);
  v10 = *(unsigned int *)(a1 + 176);
  v11 = *(uint64_t **)(a1 + 16);
  if ((_DWORD)v10)
  {
    v13 = *(unsigned int **)(a1 + 168);
    v14 = *v11;
    v15 = 4 * v10;
    do
    {
      v16 = *v13;
      v17 = *(_QWORD *)(v14 + 8 * v16);
      if (v17)
        *(_QWORD *)(v14 + 8 * v16) = v9 - v17;
      ++v13;
      v15 -= 4;
    }
    while (v15);
  }
  *(_DWORD *)(a1 + 176) = 0;
  sub_22E742038(*(llvm::raw_ostream **)(*(_QWORD *)(a1 + 8) + 16), a2, (uint64_t)v11, v3);
  sub_22E80428C(a1);
  return v9;
}

uint64_t sub_22E7CAA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if ((a1 & 0x200000000000) == 0 || (*(_BYTE *)(a3 + 29) & 0x80) == 0)
    return a3;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
  if (v4)
  {
    v5 = v4;
    while (1)
    {
      if ((*(_BYTE *)(v5 + 29) & 0x80) != 0)
      {
        if (!*(_DWORD *)(v5 - 8))
          return a3;
      }
      else
      {
        v6 = *(_QWORD *)(v5 + 16);
        v7 = (_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
        if ((v6 & 4) != 0)
          v7 = (_QWORD *)*v7;
        v8 = sub_22EFCBB30((unint64_t)v7);
        v9 = *(_QWORD *)(a3 + 16);
        v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 4) != 0)
          v10 = (_QWORD *)*v10;
        v11 = sub_22EFCBB30((unint64_t)v10);
        if (v11)
        {
          v12 = v11;
          v13 = sub_22EFCC008(v8);
          if (v13 == sub_22EFCC008(v12))
            return v5;
        }
      }
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
      if (!v5)
        return a3;
    }
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  if (!v14)
    return a3;
  v5 = v14;
  if ((*(_BYTE *)(v14 + 29) & 0x80) != 0)
    return a3;
  return v5;
}

uint64_t sub_22E7CAB28(uint64_t a1, unint64_t a2, _DWORD **a3)
{
  uint64_t *v3;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  void *v21;
  void **v22;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t i;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  void **v37;
  uint64_t v38;
  unint64_t *v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char **v57;
  unint64_t v58;
  unint64_t *v59;
  BOOL v60;
  unint64_t v61;
  int v62;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t **v68;
  uint64_t **v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t **v78;
  int v79;
  uint64_t *v80;
  char v81;
  int v82;
  int v83;
  char *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  BOOL v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  void **v105;
  uint64_t *v106;
  void **v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  int v120;
  unint64_t v121;
  BOOL v122;
  _BYTE *v123;
  _BYTE *v124;
  uint64_t v126[2];
  uint64_t v127[2];
  uint64_t v128[2];
  char *v129;
  char *v130;
  uint64_t v131;
  int v132;
  _BYTE v133[64];
  char *v134;
  char *v135;
  uint64_t v136;
  int v137;
  _BYTE v138[64];
  _QWORD v139[2];
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char v143[8];
  uint64_t v144;
  void *v145;
  uint64_t v146;
  _BYTE v147[64];
  void *v148;
  uint64_t v149;
  _BYTE v150[64];
  void *__base;
  size_t __nel;
  _BYTE v153[128];
  uint64_t v154;
  void *v155;
  uint64_t v156;
  _BYTE v157[256];
  uint64_t v158;
  _QWORD v159[4];
  _QWORD v160[6];
  _QWORD v161[2];
  _QWORD *v162;
  uint64_t v163;

  v163 = *MEMORY[0x24BDAC8D0];
  v159[0] = 0;
  v159[1] = 0;
  v159[2] = v160;
  v159[3] = 0x400000000;
  v160[4] = v161;
  v160[5] = 0;
  v161[0] = 0;
  v161[1] = 0;
  v158 = 64;
  v6 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (!v6)
  {
    v7 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
LABEL_15:
    if (v8)
    {
      v14 = v7 + 8;
      v15 = 4;
    }
    else
    {
      v14 = *(_QWORD *)(v7 + 8);
      v15 = *(unsigned int *)(v7 + 16);
    }
    v12 = (unint64_t *)(v14 + 16 * v15);
    v10 = v12;
    if (!v8)
      goto LABEL_12;
    goto LABEL_20;
  }
  v162 = v6;
  v3 = &v154;
  v154 = a1;
  v124 = v157;
  v155 = v157;
  v156 = 0x4000000000;
  v123 = v153;
  __base = v153;
  __nel = 0x1000000000;
  v134 = v138;
  v135 = v138;
  v136 = 8;
  v137 = 0;
  v129 = v133;
  v130 = v133;
  v131 = 8;
  v132 = 0;
  v7 = sub_22EFCD52C((uint64_t *)a2);
  v8 = *(_DWORD *)v7;
  if (*(_DWORD *)v7 <= 1u)
    goto LABEL_15;
  if ((v8 & 1) != 0)
  {
    v9 = v7 + 8;
    v10 = (unint64_t *)(v7 + 72);
  }
  else
  {
    v9 = *(_QWORD *)(v7 + 8);
    v11 = *(unsigned int *)(v7 + 16);
    if (!(_DWORD)v11)
    {
      LODWORD(v13) = 0;
      v10 = *(unint64_t **)(v7 + 8);
      v12 = v10;
      goto LABEL_13;
    }
    v10 = (unint64_t *)(v9 + 16 * v11);
  }
  v12 = (unint64_t *)v9;
  while (*v12 >= 0xFFFFFFFFFFFFFFFELL)
  {
    v12 += 2;
    if (v12 == v10)
    {
      v12 = v10;
      break;
    }
  }
  if ((*(_DWORD *)v7 & 1) == 0)
  {
LABEL_12:
    v9 = *(_QWORD *)(v7 + 8);
    LODWORD(v13) = *(_DWORD *)(v7 + 16);
LABEL_13:
    v13 = v13;
    goto LABEL_21;
  }
LABEL_20:
  v9 = v7 + 8;
  v13 = 4;
LABEL_21:
  v16 = (unint64_t *)(v9 + 16 * v13);
  while (v12 != v16)
  {
    v53 = v12[1];
    if ((v53 & 2) != 0 && (*(_WORD *)(a2 + 8) & 0x200) != 0)
    {
      v58 = v53 & 0xFFFFFFFFFFFFFFFCLL;
      if (!v58)
        goto LABEL_105;
      while (1)
      {
        v59 = (unint64_t *)(v58 & 0xFFFFFFFFFFFFFFF8);
        v60 = (v58 & 0xFFFFFFFFFFFFFFF8) == 0 || (v58 & 4) == 0;
        v61 = v58 & 0xFFFFFFFFFFFFFFF8;
        if (!v60)
          v61 = *v59;
        v62 = *(_DWORD *)(sub_22E7CAA38(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 2000) + 20), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 2000) + 28), v61)+ 28);
        if ((v62 & 0x8000) == 0 || v60)
          break;
        v58 = v59[1];
        if (!v58)
          goto LABEL_105;
      }
      if ((v62 & 0x8000) != 0)
        goto LABEL_105;
      v53 = v12[1];
    }
    if (v53 >= 8)
    {
      v54 = *v12;
      v55 = *v12 & 7;
      if ((_DWORD)v55 == 7)
      {
        v56 = *(_DWORD *)(v54 & 0xFFFFFFFFFFFFFFF8);
        if (v56 >= 3)
          v56 = 3;
        LODWORD(v55) = v56 | 8;
      }
      if ((_DWORD)v55 == 3)
      {
        v57 = &v134;
        goto LABEL_99;
      }
      if ((_DWORD)v55 == 5)
      {
        v57 = &v129;
LABEL_99:
        sub_22E3BA850((uint64_t)v57, (const void *)*v12);
        goto LABEL_105;
      }
      v64 = __nel;
      if (__nel >= (unint64_t)HIDWORD(__nel))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v64 = __nel;
      }
      *((_QWORD *)__base + v64) = v54;
      LODWORD(__nel) = __nel + 1;
    }
LABEL_105:
    v65 = v12 + 2;
    while (v65 != v10)
    {
      v66 = *v65;
      v65 += 2;
      if (v66 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v12 = v65 - 2;
        goto LABEL_110;
      }
    }
    v12 = v10;
LABEL_110:
    ;
  }
  if (__nel >= 2)
    qsort(__base, __nel, 8uLL, (int (__cdecl *)(const void *, const void *))sub_22E7EF530);
  if (a2)
    v17 = a2 - 64;
  else
    v17 = 0;
  if (a2 && (*(_WORD *)(a2 + 8) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    v18 = *(_QWORD *)(a1 + 40);
    v19 = (_QWORD *)(v18 + 15224);
    v20 = sub_22EF6477C(v18, v17);
    v21 = (void *)sub_22EFC6A3C(v19, v20 & 7 | *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8));
    v22 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v134, v21);
    v23 = HIDWORD(v136);
    if (v135 == v134)
      v24 = HIDWORD(v136);
    else
      v24 = v136;
    if (v22 != (void **)&v135[8 * v24])
    {
      *v22 = (void *)-2;
      ++v137;
      v25 = __nel;
      if (__nel >= HIDWORD(__nel))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = __nel;
      }
      *((_QWORD *)__base + v25) = v21;
      LODWORD(__nel) = __nel + 1;
      v23 = HIDWORD(v136);
    }
    if (v23 != v137 || HIDWORD(v131) != v132)
    {
      if ((*(_WORD *)(v17 + 72) & 0x80) != 0)
        sub_22EFCC320(v17 + 64);
      for (i = *(_QWORD *)(v17 + 80); i; i = *(_QWORD *)(i + 8) & 0xFFFFFFFFFFFFFFF8)
      {
        if ((*(_DWORD *)(i + 28) & 0x7Fu) - 75 < 0xFFFFFFC2)
          continue;
        v102 = *(_QWORD *)(i + 40);
        v103 = v102 & 7;
        if (v103 == 7)
        {
          v104 = *(_DWORD *)(v102 & 0xFFFFFFFFFFFFFFF8);
          if (v104 >= 3)
            v104 = 3;
          v103 = v104 | 8;
        }
        if (v103 == 5)
        {
          v107 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v129, *(void **)(i + 40));
          if (v130 == v129)
            v108 = (uint64_t *)((char *)&v131 + 4);
          else
            v108 = &v131;
          if (v107 == (void **)&v130[8 * *(unsigned int *)v108])
            goto LABEL_191;
          *v107 = (void *)-2;
          ++v132;
        }
        else
        {
          if (v103 != 3)
            continue;
          v105 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v134, *(void **)(i + 40));
          if (v135 == v134)
            v106 = (uint64_t *)((char *)&v136 + 4);
          else
            v106 = &v136;
          if (v105 == (void **)&v135[8 * *(unsigned int *)v106])
            goto LABEL_191;
          *v105 = (void *)-2;
          ++v137;
        }
        v109 = __nel;
        if (__nel >= (unint64_t)HIDWORD(__nel))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v109 = __nel;
        }
        *((_QWORD *)__base + v109) = v102;
        LODWORD(__nel) = __nel + 1;
LABEL_191:
        if (HIDWORD(v136) == v137 && HIDWORD(v131) == v132)
          break;
      }
    }
  }
  v27 = (uint64_t)(v3 + 1);
  v28 = (uint64_t *)__base;
  v29 = __nel;
  if ((_DWORD)__nel)
  {
    v30 = 8 * __nel;
    do
    {
      v31 = *v28++;
      sub_22EFCE144(a2, v31);
      v30 -= 8;
    }
    while (v30);
    v28 = (uint64_t *)__base;
    v29 = __nel;
  }
  v148 = v150;
  v149 = 0x800000000;
  v145 = v147;
  v146 = 0x800000000;
  if (v29)
  {
    v32 = &v28[v29];
    while (1)
    {
      v33 = sub_22EFCE704(a2, *v28);
      v34 = *v28;
      v35 = *v28 & 7;
      if ((_DWORD)v35 == 7)
      {
        v36 = *(_DWORD *)(v34 & 0xFFFFFFFFFFFFFFF8);
        if (v36 >= 3)
          v36 = 3;
        LODWORD(v35) = v36 | 8;
      }
      if ((_DWORD)v35 == 3)
      {
        v37 = &v148;
      }
      else
      {
        if ((_DWORD)v35 != 5)
        {
          sub_22E76923C((uint64_t)v128, v34);
          v38 = v156;
          if (v33)
          {
            do
            {
              v39 = (unint64_t *)(v33 & 0xFFFFFFFFFFFFFFF8);
              v40 = (v33 & 0xFFFFFFFFFFFFFFF8) == 0 || (v33 & 4) == 0;
              v41 = v33 & 0xFFFFFFFFFFFFFFF8;
              if (!v40)
                v41 = *v39;
              v42 = v154;
              v43 = sub_22E7CAA38(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v154 + 40) + 2000) + 20), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v154 + 40) + 2000) + 28), v41);
              v44 = sub_22E7CA3E8(v42, v43);
              v45 = v156;
              if (v156 >= (unint64_t)HIDWORD(v156))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v45 = v156;
              }
              *((_DWORD *)v155 + v45) = v44;
              v46 = (v156 + 1);
              LODWORD(v156) = v156 + 1;
              if (v40)
                break;
              v33 = v39[1];
            }
            while (v33);
          }
          else
          {
            v46 = v156;
          }
          v139[0] = v38 | (v46 << 32);
          sub_22E7EF578((uint64_t)&v158, v128[0], v128[1], v139);
          goto LABEL_69;
        }
        v37 = &v145;
      }
      sub_22E7CB8C8((uint64_t)v37, v33, 0);
LABEL_69:
      if (++v28 == v32)
      {
        v47 = v149;
        if ((_DWORD)v149)
        {
          v48 = (uint64_t *)v148;
          sub_22E76923C((uint64_t)v127, *(_QWORD *)(*(_QWORD *)v148 + 40));
          v139[0] = sub_22E7CB9A0((uint64_t)&v154, v48, v47);
          sub_22E7EF578((uint64_t)&v158, v127[0], v127[1], v139);
        }
        break;
      }
    }
  }
  v49 = v146;
  if ((_DWORD)v146)
  {
    v50 = (uint64_t *)v145;
    sub_22E76923C((uint64_t)v126, *(_QWORD *)(*(_QWORD *)v145 + 40));
    v139[0] = sub_22E7CB9A0((uint64_t)&v154, v50, v49);
    sub_22E7EF578((uint64_t)&v158, v126[0], v126[1], v139);
  }
  v51 = *(_QWORD *)(a1 + 56);
  if (v51)
  {
    v67 = sub_22E784A4C(v51 + 3656, a2);
    if (*(_QWORD *)(v51 + 3656) + 24 * *(unsigned int *)(v51 + 3672) == v67)
      v52 = 0;
    else
      v52 = (uint64_t *)(v67 + 8);
  }
  else
  {
    v52 = 0;
  }
  sub_22F242C48((uint64_t)v139, (uint64_t)a3);
  *(_DWORD *)v143 = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)v139, v143);
  if (v52 && (v68 = (uint64_t **)sub_22E792774(v52)) != 0)
  {
    v69 = v68;
    *(_DWORD *)v143 = (unint64_t)((char *)v68[1] - (char *)*v68) >> 3;
    llvm::raw_ostream::write((llvm::raw_ostream *)v139, v143);
    v70 = *v69;
    v71 = v69[1];
    while (v70 != v71)
    {
      v72 = *v70++;
      *(_DWORD *)v143 = sub_22F2B4040(*(_QWORD *)(v154 + 56), v72);
      llvm::raw_ostream::write((llvm::raw_ostream *)v139, v143);
    }
    v96 = v69[3];
    v97 = *((unsigned int *)v69 + 10);
    v98 = &v96[6 * v97];
    if (*((_DWORD *)v69 + 8))
    {
      if ((_DWORD)v97)
      {
        v99 = 48 * v97;
        v100 = v69[3];
        while (1)
        {
          v101 = *(_DWORD *)v100 != -1 || (unint64_t)(v100[1] - 1) > 1;
          if (v101)
            break;
          v100 += 6;
          v99 -= 48;
          if (!v99)
            goto LABEL_170;
        }
      }
      else
      {
        v100 = v69[3];
      }
    }
    else
    {
LABEL_170:
      v100 = &v96[6 * v97];
    }
    v110 = &v96[6 * v97];
LABEL_197:
    while (v100 != v110)
    {
      v111 = *v100;
      v112 = v100[1];
      *(_QWORD *)v143 = *v100;
      v144 = v112;
      v113 = sub_22E76930C((uint64_t)v143);
      v114 = v162[2 * (((_DWORD)v158 - 1) & v113) + 1];
      if (v114)
      {
        while (*(_DWORD *)(v114 + 32) != v113 || *(_DWORD *)v114 != (_DWORD)v111 || *(_QWORD *)(v114 + 8) != v112)
        {
          v114 = *(_QWORD *)(v114 + 24);
          if (!v114)
            goto LABEL_205;
        }
      }
      else
      {
LABEL_205:
        v116 = *v100;
        v117 = v100[1];
        v118 = v156;
        sub_22E7EF718(v27, (uint64_t)v155 + 4 * v156, (char *)v100[2], (char *)(v100[2] + 4 * *((unsigned int *)v100 + 6)));
        *(_QWORD *)v143 = v118 | ((unint64_t)v156 << 32);
        sub_22E7EF578((uint64_t)&v158, v116, v117, v143);
      }
      v119 = v100 + 6;
      while (v119 != v98)
      {
        v120 = *(_DWORD *)v119;
        v121 = v119[1] - 1;
        v119 += 6;
        v122 = v120 != -1 || v121 >= 2;
        if (v122)
        {
          v100 = v119 - 6;
          goto LABEL_197;
        }
      }
      v100 = v98;
    }
  }
  else
  {
    *(_DWORD *)v143 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)v139, v143);
  }
  if (HIDWORD(v158) >= 3)
  {
    v74 = ((4 * HIDWORD(v158)) / 6uLL) | ((4 * HIDWORD(v158)) / 3uLL);
    v75 = v74 | (v74 >> 2) | ((v74 | (v74 >> 2)) >> 4);
    v73 = (((v75 | (v75 >> 8)) >> 16) | v75 | (v75 >> 8)) + 1;
  }
  else
  {
    v73 = 1;
  }
  if (v73 == (_DWORD)v158 || (sub_22E7EF63C((unsigned int *)&v158, v73), (_DWORD)v158))
  {
    v76 = 0;
    do
    {
      v77 = (char *)&v162[2 * v76];
      v78 = (uint64_t **)(v77 + 8);
      if (*((_QWORD *)v77 + 1))
      {
        v79 = (*(uint64_t (**)(_QWORD *))(v139[0] + 80))(v139);
        *(_DWORD *)v77 = v79 + (_DWORD)v142 - v140;
        *(_WORD *)v143 = *((_DWORD *)v77 + 1);
        llvm::raw_ostream::write((llvm::raw_ostream *)v139, v143);
        v80 = *v78;
        if (*v78)
        {
          *(_DWORD *)v143 = *((_DWORD *)v80 + 8);
          llvm::raw_ostream::write((llvm::raw_ostream *)v139, v143);
          if (*v80 > 0xB)
            v81 = 1;
          else
            v81 = byte_22F4602F0[(int)*v80];
          v83 = *((_DWORD *)v80 + 4);
          v82 = *((_DWORD *)v80 + 5);
          v84 = v142;
          if ((unint64_t)v142 >= v141)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v139);
          }
          else
          {
            ++v142;
            *v84 = v81;
          }
          v85 = (4 * (v82 - v83));
          do
          {
            v86 = v142;
            if ((unint64_t)v142 >= v141)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)v139);
            }
            else
            {
              ++v142;
              *v86 = v85 & 0x7F | ((v85 > 0x7F) << 7);
            }
            v101 = v85 > 0x7F;
            v85 >>= 7;
          }
          while (v101);
          v87 = *v80;
          v143[0] = *v80;
          llvm::raw_ostream::write((llvm::raw_ostream *)v139, v143);
          __asm { BR              X9 }
        }
      }
      ++v76;
    }
    while (v76 < v158);
  }
  v88 = (*(uint64_t (**)(_QWORD *))(v139[0] + 80))(v139);
  v89 = (_DWORD)v142 - v140 + v88;
  v90 = (v89 + 3) & 0x1FFFFFFFCLL;
  v91 = v90 - v89;
  if (v90 != v89)
  {
    v92 = v89 - v90;
    do
    {
      v143[0] = 0;
      llvm::raw_ostream::write((llvm::raw_ostream *)v139, v143);
      v122 = __CFADD__(v92++, 1);
    }
    while (!v122);
  }
  *(_DWORD *)v143 = v158;
  llvm::raw_ostream::write((llvm::raw_ostream *)v139, v143);
  *(_DWORD *)v143 = HIDWORD(v158);
  llvm::raw_ostream::write((llvm::raw_ostream *)v139, v143);
  if ((_DWORD)v158)
  {
    v93 = 0;
    v94 = 0;
    do
    {
      *(_DWORD *)v143 = v162[v93];
      llvm::raw_ostream::write((llvm::raw_ostream *)v139, v143);
      ++v94;
      v93 += 2;
    }
    while (v94 < v158);
  }
  **a3 = v91 + v89;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v139);
  if (v145 != v147)
    free(v145);
  if (v148 != v150)
    free(v148);
  if (v130 != v129)
    free(v130);
  if (v135 != v134)
    free(v135);
  if (__base != v123)
    free(__base);
  if (v155 != v124)
    free(v155);
  free(v162);
  sub_22E6188F4((uint64_t)v159);
  return sub_22E3B4EF4((uint64_t)v159);
}

uint64_t sub_22E7CB8C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v4 = a2;
  v5 = result;
  if (a2 == a3)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = 0;
      if ((v7 & 4) != 0)
      {
        v9 = v7 & 0xFFFFFFFFFFFFFFF8;
        if (v9)
          v8 = *(_QWORD *)(v9 + 8);
      }
      ++v6;
      v7 = v8;
    }
    while (v8 != a3);
  }
  v10 = *(unsigned int *)(result + 8);
  if (v6 + v10 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v11 = (_QWORD *)(*(_QWORD *)v5 + 8 * v10);
    do
    {
      v12 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((v4 & 4) != 0 && v12)
      {
        *v11 = *v12;
        v4 = v12[1];
      }
      else
      {
        v4 = 0;
        *v11 = v12;
      }
      ++v11;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v10 + v6;
  return result;
}

uint64_t sub_22E7CB9A0(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 2000);
      v9 = sub_22E7CAA38(*(_QWORD *)(v8 + 20), *(unsigned __int8 *)(v8 + 28), *a2);
      v10 = sub_22E7CA3E8(v7, v9);
      v11 = *(unsigned int *)(a1 + 16);
      if (v11 >= *(unsigned int *)(a1 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = *(unsigned int *)(a1 + 16);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v11) = v10;
      v12 = (*(_DWORD *)(a1 + 16) + 1);
      *(_DWORD *)(a1 + 16) = v12;
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  else
  {
    v12 = *(unsigned int *)(a1 + 16);
  }
  return v3 | (v12 << 32);
}

uint64_t sub_22E7CBA70()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  int v26;
  unint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t *v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t *v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v50;
  void *v51;
  __int128 v52;
  _QWORD v53[513];

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  v53[512] = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(v1 + 8) & 0x7F) == 0x10)
  {
    v6 = *(_QWORD *)(v0 + 56);
    if (v6)
    {
      if ((*(_BYTE *)(sub_22E7CBF08(v6, v1 - 48) + 29) & 0x80) != 0)
      {
        if ((*(_BYTE *)(v2 + 32) & 3) == 0)
        {
          v21 = sub_22E3CD31C((uint64_t *)(v2 + 32), v2 - 48);
          if (v21)
          {
            v22 = v21;
            while ((*(_BYTE *)(v22 + 29) & 0x80) != 0)
            {
              if ((*(_BYTE *)(v22 + 80) & 3) == 0)
              {
                v22 = sub_22E3CD31C((uint64_t *)(v22 + 80), v22);
                if (v22)
                  continue;
              }
              goto LABEL_22;
            }
            return 0;
          }
        }
LABEL_22:
        v51 = (void *)sub_22EFCC008(v2);
        sub_22E7CBFA4(v5 + 920, (uint64_t *)&v51);
        v15 = (uint64_t *)sub_22EFCC008(v2);
        v16 = (unsigned int *)sub_22EFCD52C(v15);
        v51 = (char *)&v52 + 8;
        *(_QWORD *)&v52 = 0x1000000000;
        if (!v16)
        {
          v23 = (uint64_t *)&v52 + 1;
          v24 = (char *)&v52 + 8;
          goto LABEL_60;
        }
        v17 = v16;
        v18 = *v16;
        if (*v16 >= 0x22)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v18 = *v17;
        }
        if (v18 <= 1)
        {
          if (v18)
          {
            v30 = v17 + 2;
            v31 = 4;
          }
          else
          {
            v30 = (unsigned int *)*((_QWORD *)v17 + 1);
            v31 = v17[4];
          }
          v27 = (unint64_t *)&v30[4 * v31];
          v19 = v27;
          if (v18)
            goto LABEL_42;
        }
        else
        {
          if ((v18 & 1) != 0)
          {
            v19 = (unint64_t *)(v17 + 2);
            v20 = (unint64_t *)(v17 + 18);
          }
          else
          {
            v19 = (unint64_t *)*((_QWORD *)v17 + 1);
            v25 = v17[4];
            if (!(_DWORD)v25)
            {
              v29 = 0;
              v27 = (unint64_t *)*((_QWORD *)v17 + 1);
              v28 = v27;
              goto LABEL_49;
            }
            v20 = &v19[2 * v25];
          }
          v26 = v18 & 1;
          v27 = v19;
          while (*v27 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v27 += 2;
            if (v27 == v20)
            {
              v27 = v20;
              break;
            }
          }
          v19 = v20;
          if (v26)
          {
LABEL_42:
            v28 = (unint64_t *)(v17 + 2);
            v29 = 4;
LABEL_49:
            v32 = &v28[2 * v29];
            v33 = v52;
LABEL_50:
            while (v27 != v32)
            {
              v34 = *v27;
              v35 = v27[1];
              if (v33 >= DWORD1(v52))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v33 = v52;
              }
              v36 = (unint64_t *)((char *)v51 + 16 * v33);
              *v36 = v34;
              v36[1] = v35 & 0xFFFFFFFFFFFFFFFCLL;
              v33 = v52 + 1;
              LODWORD(v52) = v52 + 1;
              v37 = v27 + 2;
              while (v37 != v19)
              {
                v38 = *v37;
                v37 += 2;
                if (v38 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v27 = v37 - 2;
                  goto LABEL_50;
                }
              }
              v27 = v19;
            }
            v24 = (char *)v51;
            v23 = (uint64_t *)((char *)v51 + 16 * v33);
            if (v33)
            {
              v39 = 126 - 2 * __clz(v33);
LABEL_61:
              sub_22E7EFB90((uint64_t)v24, v23, v39, 1);
              v40 = (char *)v51;
              if ((_DWORD)v52)
              {
                v41 = (char *)v51 + 16 * v52;
                do
                {
                  v42 = *(_QWORD *)v40 & 7;
                  if ((_DWORD)v42 != 3)
                  {
                    if ((_DWORD)v42 == 7)
                    {
                      v43 = *(_DWORD *)(*(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8);
                      if (v43 >= 3)
                        v43 = 3;
                      LODWORD(v42) = v43 | 8;
                    }
                    v44 = *((_QWORD *)v40 + 1);
                    if ((_DWORD)v42 != 5 && v44 != 0)
                    {
                      do
                      {
                        v46 = (unint64_t *)(v44 & 0xFFFFFFFFFFFFFFF8);
                        v47 = (v44 & 0xFFFFFFFFFFFFFFF8) == 0 || (v44 & 4) == 0;
                        v48 = v44 & 0xFFFFFFFFFFFFFFF8;
                        if (!v47)
                          v48 = *v46;
                        if ((*(_BYTE *)(v48 + 29) & 0x80) == 0)
                          sub_22E7CA3E8(v5, v48);
                        if (v47)
                          break;
                        v44 = v46[1];
                      }
                      while (v44);
                    }
                  }
                  v40 += 16;
                }
                while (v40 != v41);
                v40 = (char *)v51;
              }
              if (v40 != (char *)&v52 + 8)
                free(v40);
              return 0;
            }
LABEL_60:
            v39 = 0;
            goto LABEL_61;
          }
        }
        v28 = (unint64_t *)*((_QWORD *)v17 + 1);
        v29 = v17[4];
        goto LABEL_49;
      }
    }
  }
  if (sub_22EFCC008(v2) != v2)
    return 0;
  v7 = *(_WORD *)(v2 + 8) & 0x7F;
  v8 = v7 > 0x18 || ((1 << v7) & 0x1000006) == 0;
  if (!v8 || v7 - 52 < 6)
    return 0;
  v9 = 0;
  if (v7 == 5 || v7 == 12)
    return v9;
  if (v7 == 83 && (*(_BYTE *)(*(_QWORD *)(v4 + 2000) + 1) & 1) == 0)
    return 0;
  v10 = *(_QWORD *)(v5 + 16);
  v11 = *(_QWORD **)(v10 + 8);
  v12 = *(_QWORD *)(*(_QWORD *)v10 + 8);
  if (v11)
    v11 = (_QWORD *)((*(uint64_t (**)(_QWORD))(*v11 + 80))(*(_QWORD *)(v10 + 8)) + v11[4] - v11[2]);
  v13 = *(unsigned int *)(v10 + 24);
  v14 = (_DWORD *)sub_22EFCD52C((uint64_t *)v2);
  if (!v14 || *v14 < 2u)
    return 0;
  v9 = v13 + 8 * ((_QWORD)v11 + v12);
  v51 = v53;
  v52 = xmmword_22F45FB10;
  sub_22E7CAB28(v5, v2, (_DWORD **)&v51);
  v50 = 81;
  sub_22E74241C(*(llvm::raw_ostream **)(v5 + 16), *(_DWORD *)(v5 + 1832), (uint64_t)&v50, 1, (char *)v51, v52, 0);
  ++*(_DWORD *)(v5 + 1596);
  if (v51 != v53)
    free(v51);
  return v9;
}

uint64_t sub_22E7CBF08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v5;
  uint64_t v6;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if ((*(_BYTE *)(v3 + 29) & 0x80) != 0)
    return v3;
  v6 = 0;
  v5 = !sub_22E78F2B0(*(_QWORD *)(a1 + 10744), *(_DWORD *)(a1 + 10760), v3, &v6)
    || v6 == *(_QWORD *)(a1 + 10744) + 32 * *(unsigned int *)(a1 + 10760);
  if (v5 || !*(_DWORD *)(v6 + 16))
    return v3;
  else
    return sub_22E779FD8(a1, **(_DWORD **)(v6 + 8));
}

BOOL sub_22E7CBFA4(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  int v8;
  _BYTE v9[16];
  unsigned __int8 v10;

  sub_22E7EF8BC(a1, a2, (uint64_t)v9);
  v4 = v10;
  if (v10)
  {
    v6 = *a2;
    v7 = *(_DWORD *)(a1 + 144);
    if (v7 >= *(_DWORD *)(a1 + 148))
    {
      v8 = v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v4 = v8;
      v7 = *(_DWORD *)(a1 + 144);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v7) = v6;
    ++*(_DWORD *)(a1 + 144);
  }
  return v4 != 0;
}

void sub_22E7CC034(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  _QWORD v21[2];
  void *v22;
  uint64_t v23;
  _BYTE v24[512];
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[4];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v25 = v27;
  v26 = 0x200000000;
  v22 = v24;
  v23 = 0x4000000000;
  v2 = *(_QWORD *)(a1 + 1376) - *(_QWORD *)(a1 + 1368);
  if ((v2 & 0x7FFFFFFF8) != 0)
  {
    v3 = 0;
    v4 = (v2 >> 3);
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 1368) + 8 * v3);
      v6 = v23;
      v7 = v23;
      if (v23 >= HIDWORD(v23))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = v23;
      }
      *((_QWORD *)v22 + v7) = 0;
      LODWORD(v23) = v23 + 1;
      v8 = sub_22F257E10(v5);
      if (v8)
      {
        v9 = v8;
        v10 = 0;
        do
        {
          sub_22E7CA8EC(a1, v9, (uint64_t)&v22);
          v9 = *(_QWORD *)(v9 + 128);
          ++v10;
        }
        while (v9);
      }
      else
      {
        v10 = 0;
      }
      *((_QWORD *)v22 + v6) = v10;
      v21[0] = v5;
      if (v5)
      {
        if ((*(_BYTE *)(v5 + 29) & 0x80) != 0)
          v5 = *(unsigned int *)(v5 - 4);
        else
          v5 = *((unsigned int *)sub_22E4D1AD8((uint64_t *)(a1 + 208), v21) + 2);
      }
      v11 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v26;
      }
      v25[v11] = v5 | (v6 << 32);
      v12 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      ++v3;
    }
    while (v3 != v4);
    if (v12 >= 2)
      qsort(v25, v12, 8uLL, (int (__cdecl *)(const void *, const void *))sub_22F2D3148);
  }
  v13 = (char *)operator new(0x228uLL);
  *(_QWORD *)v13 = &unk_24FA715D0;
  *((_QWORD *)v13 + 1) = 0;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_OWORD *)(v13 + 184) = 0u;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_OWORD *)(v13 + 232) = 0u;
  *(_OWORD *)(v13 + 248) = 0u;
  *(_OWORD *)(v13 + 264) = 0u;
  *(_OWORD *)(v13 + 280) = 0u;
  *(_OWORD *)(v13 + 296) = 0u;
  *(_OWORD *)(v13 + 312) = 0u;
  *(_OWORD *)(v13 + 328) = 0u;
  *(_OWORD *)(v13 + 344) = 0u;
  *(_OWORD *)(v13 + 360) = 0u;
  *(_OWORD *)(v13 + 376) = 0u;
  *(_OWORD *)(v13 + 392) = 0u;
  *(_OWORD *)(v13 + 408) = 0u;
  *(_OWORD *)(v13 + 424) = 0u;
  *(_OWORD *)(v13 + 440) = 0u;
  *(_OWORD *)(v13 + 456) = 0u;
  *(_OWORD *)(v13 + 472) = 0u;
  *(_OWORD *)(v13 + 488) = 0u;
  *(_OWORD *)(v13 + 504) = 0u;
  *(_OWORD *)(v13 + 520) = 0u;
  *(_OWORD *)(v13 + 536) = 0u;
  *(_OWORD *)(v13 + 40) = xmmword_22F45FB20;
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = v13 + 40;
  *(_OWORD *)(v13 + 56) = xmmword_22F45E250;
  v14 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(v13 + 72) = xmmword_22F45E0D0;
  *((_QWORD *)v13 + 4) = 0x2000000003;
  v19 = v13 + 24;
  v20 = (std::__shared_weak_count *)v13;
  v15 = sub_22E74761C(v14, (uint64_t)&v19);
  v16 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v21[0] = 41;
  v21[1] = v26;
  sub_22E74241C(*(llvm::raw_ostream **)(a1 + 16), v15, (uint64_t)v21, 2, (char *)v25, (8 * v26), 0);
  sub_22E742038(*(llvm::raw_ostream **)(a1 + 16), 0x2Eu, (uint64_t)&v22, 0);
  if (v22 != v24)
    free(v22);
  if (v25 != v27)
    free(v25);
}

uint64_t sub_22E7CC36C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  v2 = result;
  if (a2)
  {
    v4 = (unsigned __int16 *)(a2 + 32);
    v5 = *(unsigned __int16 *)(a2 + 32) + 1;
    v7 = result + 16;
    v6 = *(_QWORD *)(result + 16);
    v8 = *(_DWORD *)(v6 + 8);
    if (v8 >= *(_DWORD *)(v6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v6 + 8 * v8) = v5;
    ++*(_DWORD *)(v6 + 8);
    sub_22E7CA0D0(*(_DWORD **)(v2 + 8), *(_QWORD *)a2, *(_QWORD *)(v2 + 16));
    sub_22E7CA0D0(*(_DWORD **)(v2 + 8), *(_QWORD *)(a2 + 8), *(_QWORD *)(v2 + 16));
    v9 = *(_QWORD *)(v2 + 8);
    v10 = *(_QWORD *)(v2 + 16);
    v11 = HIDWORD(*(_QWORD *)(a2 + 16));
    sub_22E7C9A94(v9, *(_QWORD *)(a2 + 16), v10);
    sub_22E7C9A94(v9, v11, v10);
    result = sub_22E7C9A94(*(_QWORD *)(v2 + 8), *(_DWORD *)(a2 + 24), *(_QWORD *)(v2 + 16));
    v12 = *(unsigned __int16 *)(a2 + 28);
    v13 = *(_QWORD *)(v2 + 16);
    v14 = *(_DWORD *)(v13 + 8);
    if (v14 >= *(_DWORD *)(v13 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = *(_DWORD *)(v13 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = v12;
    ++*(_DWORD *)(v13 + 8);
    v15 = *(_BYTE *)(a2 + 30) & 7;
    v16 = *(_QWORD *)v7;
    v17 = *(_DWORD *)(*(_QWORD *)v7 + 8);
    if (v17 >= *(_DWORD *)(*(_QWORD *)v7 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = *(_DWORD *)(v16 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v16 + 8 * v17) = v15;
    ++*(_DWORD *)(v16 + 8);
    v18 = (*(unsigned __int8 *)(a2 + 30) >> 3) & 0xF;
    v19 = *(_QWORD *)v7;
    v20 = *(_DWORD *)(*(_QWORD *)v7 + 8);
    if (v20 >= *(_DWORD *)(*(_QWORD *)v7 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v20 = *(_DWORD *)(v19 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = v18;
    ++*(_DWORD *)(v19 + 8);
    v21 = *v4;
    if ((unsigned __int16)v21 <= 0x1F1u)
      __asm { BR              X11 }
  }
  else
  {
    v22 = *(_QWORD *)(result + 16);
    v23 = *(_DWORD *)(v22 + 8);
    if (v23 >= *(_DWORD *)(v22 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = *(_DWORD *)(v22 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v22 + 8 * v23) = 0;
    ++*(_DWORD *)(v22 + 8);
  }
  return result;
}

uint64_t sub_22E7D2E84(uint64_t a1, unint64_t *a2)
{
  if (!a2)
    return sub_22E7E1FB4(*(_QWORD *)(a1 + 8), 0, *(_QWORD *)(a1 + 16));
  sub_22E7E1FB4(*(_QWORD *)(a1 + 8), *a2, *(_QWORD *)(a1 + 16));
  return sub_22E7E42B4(a1, *a2);
}

uint64_t sub_22E7D2ED0(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v10 = *(_QWORD *)(result + 16);
    v9 = a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v10;
    a3 = v9;
    v6 = *(_DWORD *)(v10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a3;
  ++*(_DWORD *)(v5 + 8);
  if (a3)
  {
    v7 = 8 * a3;
    do
    {
      v8 = *a2++;
      result = sub_22E7CC36C(v4, v8);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22E7D2F70(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_22E7F0760(a1, a3, a4);
    return *(_QWORD *)a1 + 8 * v8;
  }
  else
  {
    v10 = a4 - a3;
    if (a4 - a3 + v9 > (unint64_t)*(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_QWORD *)a1;
      v9 = *(unsigned int *)(a1 + 8);
    }
    v11 = (_BYTE *)(v7 + 8 * v8);
    v12 = (char *)(v7 + 8 * v9);
    v13 = (v12 - v11) >> 3;
    if (v13 >= v10)
    {
      sub_22F246808(a1, &v12[-8 * v10], (char *)(v7 + 8 * v9));
      if (&v12[-8 * v10] != v11)
        memmove(&v11[8 * v10], v11, &v12[-8 * v10] - v11);
      if (v5 != a4)
      {
        v18 = v11;
        do
        {
          v19 = *v5++;
          *v18++ = v19;
        }
        while (v5 != a4);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = v9 + v10;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * (v9 + v10) - 8 * v13), v11, v12 - v11);
        v14 = v11;
        do
        {
          v15 = *v5++;
          *v14++ = v15;
          --v13;
        }
        while (v13);
      }
      while (v5 != a4)
      {
        v16 = *v5++;
        *(_QWORD *)v12 = v16;
        v12 += 8;
      }
    }
  }
  return (uint64_t)v11;
}

uint64_t sub_22E7D30BC(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;

  v19 = *a2;
  v20 = 0;
  v21 = 0;
  if (sub_22E3B9914(a1, &v19, &v21))
  {
    v4 = *((_DWORD *)v21 + 2);
    v5 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v7 = sub_22E744928((_DWORD *)a1, (uint64_t)&v19, &v19, v21);
    *v7 = v19;
    *((_DWORD *)v7 + 2) = v20;
    v8 = *a2;
    v10 = *(char **)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v10 >= v9)
    {
      v12 = *(char **)(a1 + 24);
      v13 = (v10 - v12) >> 4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60)
        abort();
      v15 = v9 - (_QWORD)v12;
      if (v15 >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 60)
          sub_22E3B3F8C();
        v17 = (char *)operator new(16 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[16 * v13];
      *(_QWORD *)v18 = v8;
      *((_QWORD *)v18 + 1) = 0;
      v11 = v18 + 16;
      if (v10 != v12)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
          v18 -= 16;
          v10 -= 16;
        }
        while (v10 != v12);
        v10 = *(char **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v18;
      *(_QWORD *)(a1 + 32) = v11;
      *(_QWORD *)(a1 + 40) = &v17[16 * v16];
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_QWORD *)v10 = v8;
      *((_QWORD *)v10 + 1) = 0;
      v11 = v10 + 16;
    }
    *(_QWORD *)(a1 + 32) = v11;
    v5 = *(_QWORD *)(a1 + 24);
    v4 = (((unint64_t)v11 - v5) >> 4) - 1;
    *((_DWORD *)v7 + 2) = v4;
  }
  return v5 + 16 * v4 + 8;
}

uint64_t sub_22E7D3234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, char a7)
{
  _QWORD *v7;
  __int128 v9;
  uint64_t v10;
  int64x2_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v7 = a5;
  *(_QWORD *)a1 = &off_24FA72298;
  *(_QWORD *)(a1 + 8) = &unk_24FA723B8;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_BYTE *)(a1 + 120) = a7;
  *(_WORD *)(a1 + 121) = 0;
  *(_BYTE *)(a1 + 123) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 200) = 0x1200000012;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 0;
  *(int32x2_t *)(a1 + 288) = vdup_n_s32(0x12Cu);
  *(_DWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)&v9 = 0x100000001;
  *(_QWORD *)(a1 + 344) = 0x100000001;
  *(_DWORD *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 400) = 0x100000001;
  *(_DWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *((_QWORD *)&v9 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 552) = v9;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_DWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_DWORD *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 740) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_QWORD *)(a1 + 760) = a1 + 776;
  *(_QWORD *)(a1 + 768) = 0x1000000000;
  *(_QWORD *)(a1 + 840) = a1 + 856;
  *(_QWORD *)(a1 + 848) = 0x1000000000;
  *(_QWORD *)(a1 + 920) = 1;
  v10 = 928;
  v11 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(a1 + v10) = v11;
    v10 += 16;
  }
  while (v10 != 1056);
  *(_QWORD *)(a1 + 1056) = a1 + 1072;
  *(_QWORD *)(a1 + 1064) = 0x1000000000;
  *(_QWORD *)(a1 + 1200) = a1 + 1216;
  *(_QWORD *)(a1 + 1208) = 0x1000000000;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_DWORD *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_QWORD *)(a1 + 1392) = a1 + 1408;
  *(_QWORD *)(a1 + 1400) = 0x1000000000;
  v12 = (_QWORD *)(a1 + 1624);
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_DWORD *)(a1 + 1552) = 0;
  *(_DWORD *)(a1 + 1576) = 0;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_DWORD *)(a1 + 1616) = 0;
  *(_QWORD *)(a1 + 1640) = 0;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_QWORD *)(a1 + 1648) = a1 + 1664;
  *(_QWORD *)(a1 + 1656) = 0x600000000;
  *(_DWORD *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_DWORD *)(a1 + 1880) = 0;
  if (a6)
  {
    v13 = &a5[2 * a6];
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v7 + 56))(&v32, *v7, a1);
      v14 = v32;
      if (v32)
      {
        v15 = *(_QWORD **)(a1 + 1632);
        v16 = *(_QWORD *)(a1 + 1640);
        if ((unint64_t)v15 >= v16)
        {
          v18 = (_QWORD *)*v12;
          v19 = ((uint64_t)v15 - *v12) >> 3;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61)
            abort();
          v21 = v16 - (_QWORD)v18;
          if (v21 >> 2 > v20)
            v20 = v21 >> 2;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            if (v22 >> 61)
              sub_22E3B3F8C();
            v23 = (char *)operator new(8 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[8 * v19];
          v25 = &v23[8 * v22];
          v32 = 0;
          *(_QWORD *)v24 = v14;
          v17 = v24 + 8;
          if (v15 == v18)
          {
            *(_QWORD *)(a1 + 1624) = v24;
            *(_QWORD *)(a1 + 1632) = v17;
            *(_QWORD *)(a1 + 1640) = v25;
          }
          else
          {
            do
            {
              v26 = *--v15;
              *v15 = 0;
              *((_QWORD *)v24 - 1) = v26;
              v24 -= 8;
            }
            while (v15 != v18);
            v15 = *(_QWORD **)(a1 + 1624);
            v27 = *(_QWORD **)(a1 + 1632);
            *(_QWORD *)(a1 + 1624) = v24;
            *(_QWORD *)(a1 + 1632) = v17;
            *(_QWORD *)(a1 + 1640) = v25;
            while (v27 != v15)
            {
              v29 = *--v27;
              v28 = v29;
              *v27 = 0;
              if (v29)
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            }
          }
          if (v15)
            operator delete(v15);
        }
        else
        {
          v32 = 0;
          *v15 = v14;
          v17 = v15 + 1;
        }
        *(_QWORD *)(a1 + 1632) = v17;
        v30 = v32;
        v32 = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      }
      v7 += 2;
    }
    while (v7 != v13);
  }
  return a1;
}

uint64_t sub_22E7D35D0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  llvm *v22;
  void ***v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void **v27;
  void **v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;

  *(_QWORD *)a1 = &off_24FA72298;
  *(_QWORD *)(a1 + 8) = &unk_24FA723B8;
  v2 = *(void **)(a1 + 1792);
  if (v2)
  {
    *(_QWORD *)(a1 + 1800) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 1768);
  if (v3)
  {
    *(_QWORD *)(a1 + 1776) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 1744);
  if (v4)
  {
    *(_QWORD *)(a1 + 1752) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 1720);
  if (v5)
  {
    *(_QWORD *)(a1 + 1728) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 1648);
  if (v6 != (void *)(a1 + 1664))
    free(v6);
  v7 = *(_QWORD **)(a1 + 1624);
  if (v7)
  {
    v8 = *(_QWORD **)(a1 + 1632);
    v9 = *(void **)(a1 + 1624);
    if (v8 != v7)
    {
      do
      {
        v11 = *--v8;
        v10 = v11;
        *v8 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      while (v8 != v7);
      v9 = *(void **)(a1 + 1624);
    }
    *(_QWORD *)(a1 + 1632) = v7;
    operator delete(v9);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 1600), (void *)(16 * *(unsigned int *)(a1 + 1616)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1560), (void *)(16 * *(unsigned int *)(a1 + 1576)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 1536), (void *)(16 * *(unsigned int *)(a1 + 1552)));
  v12 = *(void **)(a1 + 1392);
  if (v12 != (void *)(a1 + 1408))
    free(v12);
  sub_22F2BBBBC(a1 + 1344);
  v13 = *(void **)(a1 + 1200);
  if (v13 != (void *)(a1 + 1216))
    free(v13);
  v14 = *(void **)(a1 + 1056);
  if (v14 != (void *)(a1 + 1072))
    free(v14);
  sub_22E7ECB74(a1 + 920);
  v15 = *(void **)(a1 + 840);
  if (v15 != (void *)(a1 + 856))
    free(v15);
  v16 = *(void **)(a1 + 760);
  if (v16 != (void *)(a1 + 776))
    free(v16);
  llvm::deallocate_buffer(*(llvm **)(a1 + 736), (void *)(16 * *(unsigned int *)(a1 + 752)));
  sub_22F2BBB70(a1 + 688);
  llvm::deallocate_buffer(*(llvm **)(a1 + 664), (void *)(16 * *(unsigned int *)(a1 + 680)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 640), (void *)(16 * *(unsigned int *)(a1 + 656)));
  v17 = *(void **)(a1 + 616);
  if (v17)
  {
    *(_QWORD *)(a1 + 624) = v17;
    operator delete(v17);
  }
  sub_22F271570(a1 + 568);
  v18 = *(void **)(a1 + 528);
  if (v18)
  {
    *(_QWORD *)(a1 + 536) = v18;
    operator delete(v18);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 504), (void *)(16 * *(unsigned int *)(a1 + 520)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 480), (void *)(8 * *(unsigned int *)(a1 + 496)));
  llvm::deallocate_buffer(*(llvm **)(a1 + 456), (void *)(16 * *(unsigned int *)(a1 + 472)));
  v19 = *(void **)(a1 + 432);
  if (v19)
  {
    *(_QWORD *)(a1 + 440) = v19;
    operator delete(v19);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 408), (void *)(16 * *(unsigned int *)(a1 + 424)));
  sub_22F244D40(a1 + 352);
  v20 = *(void **)(a1 + 320);
  if (v20)
  {
    *(_QWORD *)(a1 + 328) = v20;
    operator delete(v20);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 296), (void *)(16 * *(unsigned int *)(a1 + 312)));
  v21 = *(unsigned int *)(a1 + 280);
  v22 = *(llvm **)(a1 + 264);
  if ((_DWORD)v21)
  {
    v23 = (void ***)((char *)v22 + 8);
    v24 = 16 * v21;
    do
    {
      if ((*((_DWORD *)v23 - 2) + 1) >= 2)
        v23 = sub_22E7F1E9C(v23);
      v23 += 2;
      v24 -= 16;
    }
    while (v24);
    v22 = *(llvm **)(a1 + 264);
    v25 = (void *)(16 * *(unsigned int *)(a1 + 280));
  }
  else
  {
    v25 = 0;
  }
  llvm::deallocate_buffer(v22, v25);
  v26 = *(void **)(a1 + 232);
  if (v26)
  {
    *(_QWORD *)(a1 + 240) = v26;
    operator delete(v26);
  }
  llvm::deallocate_buffer(*(llvm **)(a1 + 208), (void *)(16 * *(unsigned int *)(a1 + 224)));
  v27 = *(void ***)(a1 + 160);
  v28 = *(void ***)(a1 + 168);
  *(_QWORD *)(a1 + 192) = 0;
  v29 = (char *)v28 - (char *)v27;
  if ((unint64_t)((char *)v28 - (char *)v27) >= 0x11)
  {
    do
    {
      operator delete(*v27);
      v28 = *(void ***)(a1 + 168);
      v27 = (void **)(*(_QWORD *)(a1 + 160) + 8);
      *(_QWORD *)(a1 + 160) = v27;
      v29 = (char *)v28 - (char *)v27;
    }
    while ((unint64_t)((char *)v28 - (char *)v27) > 0x10);
  }
  v30 = v29 >> 3;
  if (v30 == 1)
  {
    v31 = 128;
    goto LABEL_51;
  }
  if (v30 == 2)
  {
    v31 = 256;
LABEL_51:
    *(_QWORD *)(a1 + 184) = v31;
  }
  if (v27 != v28)
  {
    do
    {
      v32 = *v27++;
      operator delete(v32);
    }
    while (v27 != v28);
    v34 = *(_QWORD *)(a1 + 160);
    v33 = *(_QWORD *)(a1 + 168);
    if (v33 != v34)
      *(_QWORD *)(a1 + 168) = v33 + ((v34 - v33 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v35 = *(void **)(a1 + 152);
  if (v35)
    operator delete(v35);
  llvm::deallocate_buffer(*(llvm **)(a1 + 128), (void *)(16 * *(unsigned int *)(a1 + 144)));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  return a1;
}

void sub_22E7D3980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unsigned int v12;
  void **v13;
  void **v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  void **v33;
  char *v34;
  unint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  char *v55;
  unint64_t v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  _QWORD *v73;
  _OWORD *v74;
  _OWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _DWORD *v82;
  int v83;
  int v84;
  unint64_t v85;
  _DWORD *i;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  int v93;
  _DWORD *v94;
  int v95;
  _DWORD *v96;
  int v97;
  int v98;
  int *v99;
  unint64_t v100;
  _DWORD *v101;
  int *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  int *v108;
  int *v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  _DWORD *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  int v121;
  char *v122;
  unint64_t v123;
  _DWORD *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  int v132;
  int v133;
  int v134;
  int j;
  uint64_t v136;
  int v137;
  int v138;
  int k;
  uint64_t v140;
  int v141;
  int v142;
  int m;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  int n;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t *v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  llvm::raw_ostream *v197;
  unint64_t v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  unsigned int v202;
  std::__shared_weak_count *v203;
  unint64_t *p_shared_owners;
  unint64_t v205;
  char *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  _QWORD *v215;
  unsigned int *v216;
  unsigned int *ii;
  unsigned int *v218;
  unsigned int *jj;
  uint64_t v220;
  unint64_t *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t *kk;
  uint64_t v227;
  uint64_t *v228;
  char **v229;
  unsigned int v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  _QWORD *v241;
  unsigned int v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  BOOL v247;
  uint64_t v248;
  uint64_t *v249;
  char *v250;
  unint64_t v251;
  uint64_t *v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _DWORD *v277;
  unsigned int v278;
  int v279;
  BOOL v280;
  _DWORD *v281;
  char v282;
  const char *v283;
  __int16 v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t *v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  char *v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void **v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  int v312;
  uint64_t v313;
  int v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  char **v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  char *v325;
  unint64_t v326;
  unint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  llvm *v336;
  __int128 v337;
  __int128 v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  char v342;
  unsigned int *v343;
  unsigned int *v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t **v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  BOOL v365;
  _QWORD *v366;
  unsigned int v367;
  uint64_t v368;
  uint64_t *v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t **v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t *v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  BOOL v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  unint64_t v414;
  unsigned int v415;
  uint64_t v416;
  unint64_t v417;
  unsigned int v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  BOOL v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unsigned int v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  int v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  uint64_t v456;
  unint64_t v457;
  unsigned int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  BOOL v467;
  unint64_t v468;
  char *v469;
  uint64_t v470;
  char *v471;
  uint64_t v472;
  unsigned int v473;
  unsigned int v474;
  std::__shared_weak_count *v475;
  unint64_t *v476;
  unint64_t v477;
  char *v478;
  char *v479;
  uint64_t v480;
  char *v481;
  uint64_t v482;
  char *v483;
  uint64_t v484;
  unsigned int v485;
  std::__shared_weak_count *v486;
  unint64_t *v487;
  unint64_t v488;
  char *v489;
  uint64_t v490;
  char *v491;
  char *v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t v496;
  unsigned int *v497;
  unsigned int *v498;
  uint64_t v499;
  unsigned int *v500;
  unsigned int v501;
  uint64_t v502;
  uint64_t v503;
  char *v504;
  unsigned int *v505;
  unint64_t v506;
  uint64_t v507;
  unsigned int v508;
  char *v509;
  char *v510;
  unsigned int *v511;
  uint64_t v512;
  uint64_t v513;
  int *v514;
  int v515;
  int v516;
  char *v517;
  llvm::raw_ostream *v518;
  unsigned int v519;
  std::__shared_weak_count *v520;
  unint64_t *v521;
  unint64_t v522;
  uint64_t v523;
  llvm::raw_ostream *v524;
  _QWORD *v525;
  llvm::raw_ostream *v526;
  char *v527;
  std::__shared_weak_count *v528;
  unint64_t *v529;
  unint64_t v530;
  llvm::raw_ostream *v531;
  char *v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  llvm::raw_ostream *v536;
  char *v537;
  std::__shared_weak_count *v538;
  unint64_t *v539;
  unint64_t v540;
  uint64_t v541;
  llvm::raw_ostream *v542;
  _QWORD *v543;
  uint64_t v544;
  uint64_t *v545;
  char *v546;
  llvm::raw_ostream *v547;
  unsigned int v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  unsigned int v552;
  char *v553;
  uint64_t v554;
  char *v555;
  uint64_t v556;
  _QWORD *v557;
  _QWORD *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  _QWORD *v562;
  _QWORD *v563;
  int v564;
  _QWORD *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t mm;
  uint64_t v572;
  llvm::raw_ostream *v573;
  _QWORD *v574;
  uint64_t v575;
  _DWORD *v576;
  int v577;
  uint64_t v578;
  uint64_t v579;
  int v580;
  uint64_t v581;
  uint64_t v582;
  char *v583;
  void *v584;
  char *v585;
  void *v586;
  char *v587;
  int64_t v588;
  unint64_t v589;
  int64_t v590;
  unint64_t v591;
  char *v592;
  char *v593;
  int64_t v594;
  unint64_t v595;
  int64_t v596;
  unint64_t v597;
  char *v598;
  char *v599;
  int v600;
  unsigned int v601;
  int v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unsigned int v606;
  unint64_t v607;
  unint64_t v608;
  unint64_t v609;
  char *v610;
  llvm *v611;
  _BYTE *v613;
  _BYTE *v614;
  uint64_t v615;
  llvm::zlib *v616;
  const char *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unsigned int v622;
  unsigned int v623;
  int v624;
  unsigned int v625;
  unsigned int v626;
  uint64_t v627;
  uint64_t v628;
  int *v629;
  int *v630;
  uint64_t v631;
  unsigned int v632;
  unsigned int v633;
  uint64_t v634;
  llvm::raw_ostream *v635;
  char *v636;
  uint64_t v637;
  llvm::raw_ostream *v638;
  unsigned int v639;
  uint64_t v640;
  char *v641;
  int v642;
  unsigned int v643;
  int v644;
  uint64_t v645;
  int v646;
  int v647;
  BOOL v648;
  int v649;
  uint64_t v650;
  uint64_t v651;
  unsigned int v652;
  int v653;
  unsigned int v654;
  int v655;
  unsigned int v656;
  _QWORD *v657;
  _QWORD *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  unsigned int v662;
  unsigned int *v663;
  unsigned int *v664;
  uint64_t v665;
  unsigned int v666;
  uint64_t v667;
  _DWORD *v668;
  uint64_t v669;
  uint64_t v670;
  unsigned int v671;
  uint64_t v672;
  unsigned int v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  int v677;
  _QWORD *v678;
  unsigned __int8 *v679;
  uint64_t v680;
  unint64_t v681;
  uint64_t v682;
  unsigned int v683;
  unint64_t v684;
  unsigned int v685;
  unint64_t v686;
  _QWORD *v687;
  _QWORD *v688;
  uint64_t v689;
  unint64_t *v690;
  unint64_t *v691;
  uint64_t *v692;
  unint64_t v693;
  uint64_t v694;
  uint64_t v695;
  unint64_t *v696;
  unint64_t *v697;
  unint64_t *v698;
  unint64_t *v699;
  uint64_t v700;
  _QWORD *v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  _QWORD *v706;
  char *v707;
  uint64_t v708;
  unsigned int v709;
  std::__shared_weak_count *v710;
  unint64_t *v711;
  unint64_t v712;
  unint64_t v713;
  uint64_t v714;
  int v715;
  int v716;
  llvm::raw_ostream *v717;
  _QWORD *v718;
  uint64_t v719;
  uint64_t v720;
  int v721;
  int v722;
  int v723;
  uint64_t v724;
  unint64_t v725;
  int v726;
  int v727;
  uint64_t *v728;
  uint64_t *v729;
  int v730;
  int v731;
  _DWORD *v732;
  _DWORD *v733;
  int v734;
  uint64_t v735;
  uint64_t v736;
  llvm::raw_ostream *v737;
  unsigned int v738;
  int v739;
  int v740;
  _DWORD *v741;
  _DWORD *v742;
  uint64_t v743;
  unsigned int v744;
  uint64_t v745;
  unsigned int v746;
  char v747;
  unsigned int v748;
  unint64_t v749;
  unsigned int v750;
  unint64_t v751;
  size_t v752;
  const void *v753;
  llvm *v754;
  llvm *v755;
  unint64_t v756;
  size_t *v757;
  uint64_t v758;
  const void *v759;
  size_t v760;
  size_t v761;
  uint64_t v762;
  uint64_t v763;
  char *v764;
  llvm::raw_ostream *v765;
  unsigned int v766;
  unsigned int v767;
  std::__shared_weak_count *v768;
  unint64_t *v769;
  unint64_t v770;
  int v771;
  unsigned int v772;
  int v773;
  int v774;
  uint64_t v775;
  uint64_t v776;
  int v777;
  unsigned int v778;
  unsigned int v779;
  uint64_t v780;
  uint64_t v781;
  char *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  char *v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t *nn;
  uint64_t v790;
  uint64_t *v791;
  _BYTE *v792;
  unsigned int v794;
  uint64_t v795;
  _QWORD *v796;
  uint64_t v797;
  BOOL v798;
  uint64_t v799;
  uint64_t v800;
  char *v801;
  llvm::raw_ostream *v802;
  unsigned int v803;
  std::__shared_weak_count *v804;
  unint64_t *v805;
  unint64_t v806;
  char *v807;
  char *v808;
  char *v809;
  uint64_t v810;
  char *v811;
  uint64_t v812;
  unsigned int v813;
  std::__shared_weak_count *v814;
  unint64_t *v815;
  unint64_t v816;
  uint64_t v817;
  uint64_t v818;
  _QWORD *v819;
  _QWORD *v820;
  void **v821;
  unint64_t v822;
  llvm::raw_ostream *v823;
  _QWORD *v824;
  uint64_t v825;
  int v826;
  char v827;
  uint64_t v828;
  unsigned int v829;
  unint64_t v830;
  uint64_t v831;
  char v832;
  uint64_t v833;
  unsigned int v834;
  unint64_t v835;
  uint64_t v836;
  char *v837;
  _QWORD *v838;
  uint64_t v839;
  uint64_t v840;
  _BYTE *v841;
  unint64_t v842;
  unint64_t v843;
  uint64_t v844;
  int v845;
  int v846;
  llvm *v847;
  uint64_t v848;
  unint64_t v849;
  unsigned int v850;
  uint64_t v851;
  uint64_t *v852;
  uint64_t v853;
  unsigned int v854;
  uint64_t v855;
  uint64_t v856;
  unsigned int v857;
  uint64_t v858;
  unsigned int v859;
  uint64_t v860;
  void **v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  unsigned int v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  _DWORD *v869;
  _QWORD *v870;
  int v871;
  uint64_t v872;
  void *v873;
  uint64_t v874;
  uint64_t v875;
  unsigned int v876;
  unsigned int v877;
  unint64_t v878;
  uint64_t v879;
  uint64_t v880;
  unint64_t v881;
  unint64_t v882;
  llvm::raw_ostream *v883;
  _QWORD *v884;
  uint64_t v885;
  uint64_t v886;
  int v887;
  unint64_t v888;
  uint64_t v889;
  unsigned int v890;
  unint64_t v891;
  unsigned int v892;
  uint64_t v893;
  unsigned int v894;
  unint64_t v895;
  unsigned int v896;
  unsigned int v897;
  unint64_t v898;
  unsigned int v899;
  unint64_t v900;
  unsigned int v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t *v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  _QWORD *v913;
  uint64_t v914;
  char *v915;
  _DWORD *v916;
  char *v917;
  uint64_t v918;
  unint64_t v919;
  uint64_t v920;
  unint64_t v921;
  char *v922;
  char *v923;
  int v924;
  _QWORD *v925;
  void **v926;
  llvm::raw_ostream **v927;
  int v928;
  void *v929;
  uint64_t v930;
  unsigned int v931;
  uint64_t v932;
  unsigned int v933;
  uint64_t v934;
  uint64_t v935;
  __int128 v936;
  __int128 v937;
  __int128 v938;
  uint64_t v939;
  size_t v940;
  const void *v941;
  unint64_t v942;
  unint64_t v943;
  char *v944;
  char *v945;
  size_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  __int128 *v951;
  size_t v952;
  uint64_t v953;
  char *v954;
  char *v955;
  uint64_t v956;
  __int128 *v957;
  size_t v958;
  uint64_t v959;
  uint64_t v960;
  unint64_t v961;
  unsigned int v962;
  unint64_t v963;
  unsigned int v964;
  uint64_t v965;
  uint64_t v966;
  _QWORD *v967;
  __n128 *v968;
  __n128 *v969;
  unint64_t v970;
  unint64_t *v971;
  uint64_t v972;
  size_t v973;
  char *v974;
  unint64_t v975;
  char *v976;
  char *v977;
  char **v978;
  unint64_t v979;
  char *v980;
  uint64_t v981;
  char *v982;
  uint64_t v983;
  unint64_t v984;
  unint64_t v985;
  uint64_t v986;
  char *v987;
  uint64_t *v988;
  int v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t *v993;
  uint64_t v994;
  unsigned int v995;
  uint64_t v996;
  unint64_t v997;
  unint64_t v998;
  _BYTE *v999;
  unint64_t v1000;
  _BYTE *v1001;
  uint64_t v1002;
  llvm *v1003;
  int *v1004;
  int v1005;
  int Key;
  int v1007;
  uint64_t v1008;
  size_t v1009;
  const void *v1010;
  int v1011;
  llvm *v1012;
  llvm *v1013;
  uint64_t v1014;
  size_t v1015;
  const void *v1016;
  unsigned int v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  unsigned int v1024;
  uint64_t *i1;
  uint64_t v1027;
  uint64_t *v1028;
  uint64_t v1029;
  uint64_t v1030;
  int v1031;
  uint64_t v1032;
  int v1033;
  int v1034;
  unsigned int v1035;
  uint64_t v1036;
  int v1037;
  uint64_t v1038;
  uint64_t v1039;
  unint64_t v1040;
  unsigned int v1041;
  char *v1042;
  llvm::raw_ostream *v1043;
  unsigned int v1044;
  std::__shared_weak_count *v1045;
  unint64_t *v1046;
  unint64_t v1047;
  unint64_t v1048;
  llvm *v1049;
  llvm *v1050;
  uint64_t v1051;
  uint64_t v1052;
  void *v1053;
  unint64_t v1054;
  uint64_t v1055;
  unint64_t v1056;
  uint64_t v1057;
  unsigned int v1058;
  llvm *v1059;
  unsigned int v1060;
  int v1061;
  char *v1062;
  char *v1063;
  uint64_t v1064;
  unsigned int v1065;
  char *v1066;
  char *v1067;
  char *v1068;
  unint64_t v1069;
  char *v1070;
  BOOL v1071;
  unsigned int v1072;
  int v1073;
  char *v1074;
  int v1075;
  char *v1076;
  char **v1077;
  char *v1078;
  unint64_t v1079;
  unint64_t v1080;
  uint64_t v1081;
  char *v1082;
  uint64_t **v1083;
  int v1084;
  uint64_t *v1085;
  uint64_t v1086;
  unint64_t v1087;
  int v1088;
  _QWORD *v1089;
  unsigned int v1090;
  _QWORD *v1091;
  _QWORD *v1092;
  _QWORD *v1093;
  llvm *v1094;
  unint64_t v1095;
  llvm *v1096;
  uint64_t v1097;
  int v1098;
  int v1099;
  int v1100;
  _DWORD *v1101;
  unsigned int v1102;
  unsigned int v1103;
  uint64_t v1104;
  unsigned int v1105;
  uint64_t v1106;
  unint64_t v1107;
  uint64_t v1108;
  unint64_t v1109;
  _DWORD *v1110;
  __int16 v1111;
  unint64_t v1112;
  unint64_t v1113;
  _QWORD *v1114;
  unint64_t v1115;
  int v1116;
  int v1117;
  unsigned int v1118;
  uint64_t v1119;
  int v1120;
  uint64_t v1121;
  uint64_t v1122;
  unint64_t v1123;
  unsigned int v1124;
  char *v1125;
  llvm::raw_ostream *v1126;
  unsigned int v1127;
  std::__shared_weak_count *v1128;
  unint64_t *v1129;
  unint64_t v1130;
  char *v1131;
  llvm::raw_ostream *v1132;
  std::__shared_weak_count *v1133;
  unint64_t *v1134;
  unint64_t v1135;
  char *v1136;
  llvm *v1137;
  uint64_t v1138;
  char *v1139;
  uint64_t v1140;
  void *v1141;
  _BOOL4 v1143;
  uint64_t *v1144;
  uint64_t v1145;
  uint64_t *v1146;
  uint64_t *v1147;
  uint64_t *v1148;
  _BYTE *v1149;
  unint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  BOOL v1155;
  uint64_t v1156;
  char **v1157;
  uint64_t v1158;
  uint64_t v1159;
  BOOL v1160;
  int v1161;
  _DWORD *v1162;
  int v1163;
  unint64_t v1164;
  uint64_t v1165;
  unint64_t v1166;
  uint64_t v1167;
  uint64_t i2;
  _QWORD *v1169;
  unsigned int v1170;
  int v1171;
  char *v1172;
  uint64_t v1173;
  _DWORD *v1174;
  unsigned __int8 *v1175;
  uint64_t v1176;
  unsigned int v1177;
  int v1178;
  int v1179;
  char *v1180;
  unsigned int v1181;
  unint64_t v1182;
  unint64_t v1183;
  uint64_t v1184;
  char *v1185;
  int v1186;
  uint64_t v1187;
  uint64_t v1188;
  int v1189;
  int v1190;
  int v1191;
  _DWORD *v1192;
  unsigned int v1193;
  uint64_t v1194;
  BOOL v1195;
  int v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  unsigned int v1202;
  uint64_t v1203;
  _BOOL4 v1205;
  uint64_t v1206;
  unsigned int v1207;
  unint64_t v1208;
  _BYTE *v1209;
  unint64_t v1210;
  _BYTE *v1211;
  uint64_t *v1212;
  int v1213;
  int v1214;
  char v1215;
  __int16 v1216;
  uint64_t v1217;
  _BOOL4 v1219;
  void *v1220;
  unint64_t v1221;
  uint64_t v1222;
  char v1223;
  uint64_t v1224;
  unsigned int v1225;
  unint64_t v1226;
  uint64_t v1227;
  char *v1228;
  unint64_t *v1229;
  unsigned int v1230;
  uint64_t v1231;
  char *v1232;
  _BYTE *v1233;
  int v1234;
  int v1235;
  unsigned int v1236;
  uint64_t v1237;
  int v1238;
  uint64_t v1239;
  llvm::raw_ostream **v1240;
  uint64_t v1241;
  unint64_t v1242;
  unsigned int v1243;
  char *v1244;
  llvm::raw_ostream *v1245;
  unsigned int v1246;
  std::__shared_weak_count *v1247;
  unint64_t *v1248;
  unint64_t v1249;
  char *v1250;
  llvm::raw_ostream *v1251;
  unsigned int v1252;
  std::__shared_weak_count *v1253;
  unint64_t *v1254;
  unint64_t v1255;
  char *v1256;
  char *v1257;
  uint64_t v1258;
  char *v1259;
  uint64_t v1260;
  uint64_t v1261;
  char *v1262;
  llvm::raw_ostream *v1263;
  std::__shared_weak_count *v1264;
  unint64_t *v1265;
  unint64_t v1266;
  char *v1267;
  llvm::raw_ostream *v1268;
  std::__shared_weak_count *v1269;
  unint64_t *v1270;
  unint64_t v1271;
  char *v1272;
  llvm::raw_ostream *v1273;
  std::__shared_weak_count *v1274;
  unint64_t *v1275;
  unint64_t v1276;
  char *v1277;
  llvm::raw_ostream *v1278;
  unsigned int v1279;
  std::__shared_weak_count *v1280;
  unint64_t *v1281;
  unint64_t v1282;
  char *v1283;
  llvm::raw_ostream *v1284;
  std::__shared_weak_count *v1285;
  unint64_t *v1286;
  unint64_t v1287;
  char *v1288;
  llvm::raw_ostream *v1289;
  unsigned int v1290;
  std::__shared_weak_count *v1291;
  unint64_t *v1292;
  unint64_t v1293;
  char *v1294;
  llvm::raw_ostream *v1295;
  std::__shared_weak_count *v1296;
  unint64_t *v1297;
  unint64_t v1298;
  char *v1299;
  llvm::raw_ostream *v1300;
  std::__shared_weak_count *v1301;
  unint64_t *v1302;
  unint64_t v1303;
  char *v1304;
  llvm::raw_ostream *v1305;
  std::__shared_weak_count *v1306;
  unint64_t *v1307;
  unint64_t v1308;
  char *v1309;
  llvm::raw_ostream *v1310;
  std::__shared_weak_count *v1311;
  unint64_t *v1312;
  unint64_t v1313;
  char *v1314;
  llvm::raw_ostream *v1315;
  unsigned int v1316;
  std::__shared_weak_count *v1317;
  unint64_t *v1318;
  unint64_t v1319;
  char *v1320;
  llvm::raw_ostream *v1321;
  unsigned int v1322;
  std::__shared_weak_count *v1323;
  unint64_t *v1324;
  unint64_t v1325;
  char *v1326;
  llvm::raw_ostream *v1327;
  unsigned int v1328;
  std::__shared_weak_count *v1329;
  unint64_t *v1330;
  unint64_t v1331;
  char *v1332;
  llvm::raw_ostream *v1333;
  std::__shared_weak_count *v1334;
  unint64_t *v1335;
  unint64_t v1336;
  unsigned int v1337;
  uint64_t v1338;
  uint64_t v1339;
  int v1340;
  int v1341;
  int v1342;
  unsigned int v1343;
  unsigned int v1344;
  int v1345;
  int v1346;
  uint64_t v1347;
  llvm *v1348;
  uint64_t v1349;
  unsigned int v1350;
  char *v1351;
  char *v1352;
  unint64_t v1353;
  uint32x2_t v1354;
  int8x8_t v1355;
  __int128 v1356;
  int8x8_t v1357;
  uint32x2_t v1358;
  uint32x2_t v1359;
  char v1360;
  BOOL v1361;
  char *v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  char v1368;
  BOOL v1369;
  char *v1370;
  uint64_t v1371;
  uint64_t v1372;
  char *v1373;
  uint64_t v1374;
  char *v1375;
  uint64_t v1376;
  uint64_t v1377;
  unsigned int *v1378;
  unint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  unsigned int v1382;
  uint64_t v1383;
  char v1384;
  BOOL v1385;
  char *v1386;
  uint64_t v1387;
  uint64_t v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  uint64_t v1392;
  unint64_t v1393;
  unint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t *v1398;
  unsigned int v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t *v1403;
  unsigned int v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  unint64_t *v1408;
  unsigned int v1409;
  uint64_t v1410;
  unsigned int v1411;
  unint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  char v1416;
  BOOL v1417;
  char *v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t *v1421;
  uint64_t *v1422;
  char *v1423;
  uint64_t *v1424;
  uint64_t v1425;
  char v1426;
  int v1427;
  char *v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t i3;
  char v1433;
  BOOL v1434;
  char *v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  uint64_t v1439;
  int v1440;
  uint64_t v1441;
  unint64_t *v1442;
  uint64_t v1443;
  unsigned int v1444;
  uint64_t v1445;
  char *v1446;
  uint64_t v1447;
  uint64_t *v1448;
  uint64_t *v1449;
  uint64_t v1450;
  void **v1451;
  llvm *v1452;
  unint64_t v1453;
  unint64_t v1454;
  uint64_t v1455;
  void *v1456;
  uint64_t v1457;
  llvm::raw_ostream *v1458;
  int v1459;
  int v1460;
  int v1461;
  unsigned int v1462;
  int v1463;
  unsigned int v1464;
  int v1465;
  unsigned int v1466;
  unsigned int v1467;
  int v1468;
  int v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  unint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  char *v1479;
  unint64_t v1480;
  char *v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  unsigned int v1486;
  uint64_t v1487;
  unsigned int v1488;
  uint64_t v1489;
  char *v1490;
  char *v1491;
  char *v1492;
  uint64_t v1493;
  uint64_t v1494;
  char *i4;
  int v1496;
  int v1497;
  unsigned int v1498;
  int v1499;
  int v1500;
  int v1501;
  int v1502;
  unsigned int v1503;
  unint64_t v1504;
  unint64_t v1505;
  uint64_t v1506;
  __int128 v1507;
  __int128 v1508;
  uint64_t v1509;
  llvm::raw_ostream *v1510;
  _QWORD *v1511;
  uint64_t v1512;
  uint64_t v1513;
  _QWORD ***v1514;
  _QWORD ***i5;
  _QWORD **v1516;
  char *v1517;
  llvm::raw_ostream *v1518;
  unsigned int v1519;
  std::__shared_weak_count *v1520;
  unint64_t *v1521;
  unint64_t v1522;
  uint64_t v1523;
  unsigned int v1524;
  uint64_t v1525;
  unsigned int v1526;
  uint64_t v1527;
  unsigned int v1528;
  llvm *v1529;
  unsigned int v1530;
  llvm *v1531;
  llvm **v1532;
  size_t v1533;
  uint64_t v1534;
  _BYTE *v1535;
  unint64_t v1536;
  size_t v1537;
  llvm **v1538;
  size_t v1539;
  char *v1540;
  unsigned int v1541;
  llvm::raw_ostream *v1542;
  _QWORD *v1543;
  uint64_t v1544;
  llvm::raw_ostream *v1545;
  unint64_t v1546;
  uint64_t v1547;
  _QWORD *v1548;
  uint64_t v1549;
  uint64_t v1550;
  unsigned int v1551;
  unsigned int v1552;
  unint64_t v1553;
  unsigned int v1554;
  unint64_t v1555;
  unsigned int v1556;
  unint64_t v1557;
  unsigned int v1558;
  unint64_t v1559;
  unsigned int v1560;
  unint64_t v1561;
  unsigned int v1562;
  unint64_t v1563;
  unsigned int v1564;
  unint64_t v1565;
  unsigned int v1566;
  unint64_t v1567;
  unsigned int v1568;
  unint64_t v1569;
  unsigned int v1570;
  unint64_t v1571;
  unsigned int v1572;
  unint64_t v1573;
  unsigned int v1574;
  unint64_t v1575;
  unsigned int v1576;
  unint64_t v1577;
  unsigned int v1578;
  unint64_t v1579;
  unsigned int v1580;
  unint64_t v1581;
  unsigned int v1582;
  uint64_t v1583;
  unsigned int v1584;
  uint64_t v1585;
  unsigned int v1586;
  unint64_t v1587;
  unsigned int v1588;
  unint64_t v1589;
  unsigned int v1590;
  unint64_t v1591;
  unsigned int v1592;
  unint64_t v1593;
  unsigned int v1594;
  unint64_t v1595;
  unsigned int v1596;
  unint64_t v1597;
  unsigned int v1598;
  unint64_t v1599;
  unsigned int v1600;
  uint64_t v1601;
  unsigned int v1602;
  uint64_t v1603;
  unsigned int v1604;
  uint64_t v1605;
  unsigned int v1606;
  uint64_t v1607;
  unsigned int v1608;
  uint64_t v1609;
  unsigned int v1610;
  uint64_t v1611;
  unsigned int v1612;
  uint64_t v1613;
  unsigned int v1614;
  uint64_t v1615;
  unsigned int v1616;
  unint64_t v1617;
  unsigned int v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  char v1623;
  char *v1624;
  uint64_t v1625;
  unint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  char v1631;
  char *v1632;
  uint64_t v1633;
  uint64_t v1634;
  unsigned int v1635;
  _QWORD *v1636;
  uint64_t v1637;
  unsigned int v1638;
  unint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  char v1643;
  BOOL v1644;
  char *v1645;
  uint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  unsigned int v1650;
  char v1651;
  unsigned int v1652;
  unint64_t v1653;
  uint64_t v1654;
  unsigned int v1655;
  unint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  char v1660;
  char *v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  unint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  char v1668;
  BOOL v1669;
  char *v1670;
  uint64_t v1671;
  uint64_t v1672;
  llvm::raw_ostream *v1673;
  uint64_t v1674;
  uint64_t v1675;
  char *v1676;
  char *v1677;
  char v1678;
  char *v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t i6;
  uint64_t v1684;
  _BYTE *v1685;
  uint64_t v1686;
  unsigned int v1687;
  uint64_t v1688;
  uint64_t v1689;
  _QWORD *v1690;
  _QWORD *v1691;
  _QWORD *v1692;
  unsigned int v1693;
  unsigned int v1694;
  BOOL v1695;
  _QWORD *v1696;
  _QWORD *v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  _BYTE *v1701;
  uint64_t v1702;
  unsigned int *v1703;
  unsigned int v1704;
  int v1705;
  uint64_t v1706;
  char *v1707;
  llvm::raw_ostream *v1708;
  unsigned int v1709;
  std::__shared_weak_count *v1710;
  unint64_t *v1711;
  unint64_t v1712;
  llvm::raw_ostream *v1713;
  unsigned int v1714;
  unsigned int v1715;
  unint64_t v1716;
  uint64_t v1717;
  int v1718;
  unsigned int v1719;
  unint64_t v1720;
  unsigned int v1721;
  unsigned int v1722;
  char *v1723;
  uint64_t v1724;
  char *v1725;
  uint64_t v1726;
  uint64_t v1727;
  unint64_t v1728;
  uint64_t v1729;
  int v1730;
  int v1731;
  unsigned int v1732;
  unsigned int v1733;
  int v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  unsigned int v1740;
  uint64_t v1741;
  unsigned int v1742;
  unsigned int v1743;
  _QWORD *v1744;
  unsigned int v1745;
  uint64_t v1746;
  unsigned int v1747;
  unsigned int v1748;
  uint64_t v1749;
  char v1750;
  char *v1751;
  unsigned int v1752;
  unsigned int v1753;
  unsigned int v1754;
  int v1755;
  void **v1756;
  unsigned int v1757;
  int v1758;
  uint64_t v1759;
  unsigned int v1760;
  uint64_t v1761;
  int v1762;
  void **v1763;
  uint64_t v1764;
  unint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  int v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  void **v1774;
  void *v1775;
  unsigned int v1776;
  int v1777;
  unint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  unint64_t v1781;
  uint64_t v1782;
  unsigned int v1783;
  int v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  _QWORD *v1789;
  int v1790;
  unsigned int v1791;
  int v1792;
  unsigned int v1793;
  unsigned int v1794;
  char *v1795;
  uint64_t v1796;
  char *v1797;
  std::__shared_weak_count *v1798;
  char *v1799;
  std::__shared_weak_count *v1800;
  char *v1801;
  std::__shared_weak_count *v1802;
  char *v1803;
  std::__shared_weak_count *v1804;
  __int16 v1805;
  char v1806[8];
  std::__shared_weak_count *v1807;
  __int16 v1808;
  __int128 v1809;
  uint64_t v1810;
  unint64_t v1811;
  __int16 v1812;
  __int128 v1813;
  uint64_t v1814;
  uint64_t v1815;
  __int16 v1816;
  char *v1817;
  std::__shared_weak_count *v1818;
  char *v1819;
  std::__shared_weak_count *v1820;
  char *v1821;
  std::__shared_weak_count *v1822;
  char *v1823;
  std::__shared_weak_count *v1824;
  char *v1825;
  std::__shared_weak_count *v1826;
  char *v1827;
  std::__shared_weak_count *v1828;
  uint64_t v1829;
  void *v1830;
  uint64_t v1831;
  _BYTE v1832[512];
  void *v1833;
  uint64_t v1834;
  _BYTE v1835[256];
  void *v1836[2];
  _BYTE v1837[512];
  void *v1838;
  uint64_t v1839;
  _QWORD v1840[256];
  void *v1841;
  uint64_t v1842;
  _BYTE v1843[512];
  void *v1844;
  uint64_t v1845;
  _BYTE v1846[512];
  void *v1847;
  uint64_t v1848;
  _BYTE v1849[256];
  void *v1850;
  uint64_t v1851;
  _BYTE v1852[512];
  void *v1853;
  uint64_t v1854;
  _BYTE v1855[512];
  void *v1856;
  uint64_t v1857;
  _BYTE v1858[512];
  void *v1859;
  uint64_t v1860;
  _BYTE v1861[512];
  void *v1862;
  uint64_t v1863;
  _BYTE v1864[512];
  void *v1865;
  uint64_t v1866;
  _BYTE v1867[512];
  void *v1868;
  uint64_t v1869;
  _BYTE v1870[512];
  void *v1871;
  uint64_t v1872;
  _BYTE v1873[512];
  void *v1874;
  uint64_t v1875;
  _BYTE v1876[512];
  void *v1877;
  uint64_t v1878;
  _BYTE v1879[512];
  void *v1880;
  uint64_t v1881;
  _BYTE v1882[512];
  void *v1883;
  uint64_t v1884;
  _BYTE v1885[512];
  __int128 v1886;
  _OWORD v1887[32];
  void *v1888;
  uint64_t v1889;
  _QWORD v1890[4];
  void *v1891;
  __int128 v1892;
  char *v1893;
  __int128 v1894;
  __int128 v1895;
  uint64_t v1896;
  char *__s1[5];
  __int128 v1898;
  __int128 v1899;
  __int128 v1900;
  __int128 v1901;
  uint64_t v1902;
  _QWORD v1903[2];
  char **v1904;
  void *v1905;
  uint64_t v1906;
  void *v1907[16];
  void *v1908;
  uint64_t v1909;
  _BYTE v1910[3400];
  _BYTE v1911[32];
  uint64_t v1912;
  __int128 v1913;
  int v1914;
  _QWORD *v1915;
  uint64_t v1916;
  _QWORD v1917[2];
  void *v1918;
  void **v1919;
  void *v1920;
  uint64_t v1921;
  void *v1922[2];
  uint64_t v1923;
  void *__p[3];
  _BYTE *v1925;
  uint64_t v1926;
  _BYTE v1927[32];
  uint64_t *v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  void *v1932;
  uint64_t v1933;
  _QWORD v1934[2];
  llvm *v1935[6];
  char v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;

  v0 = MEMORY[0x24BDAC7A8]();
  v1773 = v2;
  v4 = v3;
  v6 = v5;
  v8 = (_BYTE *)v7;
  v9 = v1;
  v1738 = v0;
  v1940 = *MEMORY[0x24BDAC8D0];
  v1771 = *(_QWORD *)(v7 + 88);
  v1772 = *(_QWORD *)(v7 + 80);
  v10 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 88);
  v1778 = *(unsigned int *)(v10 + 192);
  v11 = (void **)*(unsigned int *)(v1 + 1656);
  if ((*(_DWORD *)(v1 + 1712) & 0x3F) != 0)
  {
    v1735 = *(_QWORD *)(v1 + 1648) + 8 * v11;
    *(_QWORD *)(v1735 - 8) |= -1 << (*(_DWORD *)(v1 + 1712) & 0x3F);
  }
  v12 = v11;
  v1744 = (_QWORD *)(v1 + 1648);
  *(_DWORD *)(v1 + 1712) = v1778;
  if ((_DWORD)v11 == (v1778 + 63) >> 6)
    goto LABEL_2508;
  v13 = (void **)((v1778 + 63) >> 6);
  if (v11 <= v13)
  {
    v14 = v11;
    if (v13 > *(_DWORD *)(v1 + 1660))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = (void **)*(unsigned int *)(v9 + 1656);
      v12 = *(_DWORD *)(v9 + 1656);
    }
    if (v13 != v11)
      memset((void *)(*v1744 + 8 * (_QWORD)v14), 255, 8 * ((char *)v13 - (char *)v11));
    v12 += (_DWORD)v13 - (_DWORD)v11;
    *(_DWORD *)(v9 + 1656) = v12;
    v15 = *(_DWORD *)(v9 + 1712);
    goto LABEL_10;
  }
  while (2)
  {
    *(_DWORD *)(v9 + 1656) = (_DWORD)v13;
    v12 = v13;
LABEL_2508:
    LOBYTE(v15) = v1778;
LABEL_10:
    v16 = v15 & 0x3F;
    if (v16)
      *(_QWORD *)(*v1744 + 8 * v12 - 8) &= ~(-1 << v16);
    v17 = *(_QWORD *)(v9 + 64);
    v1746 = (uint64_t)v8;
    if (v17)
    {
      v1756 = v6;
      v1759 = v4;
      v18 = *(_QWORD *)(v9 + 48);
      *(_QWORD *)&v1887[0] = 0;
      *((_QWORD *)&v1886 + 1) = 0;
      *(_QWORD *)&v1886 = (char *)&v1886 + 8;
      v1935[2] = 0;
      v1935[1] = 0;
      v1935[0] = (llvm *)&v1935[1];
      v1838 = v1840;
      v1840[0] = v17;
      v1839 = 0x600000001;
      v19 = *(_QWORD **)(v18 + 104);
      __s1[0] = (char *)&__s1[2];
      __s1[1] = (char *)0x1000000000;
      sub_22F1D1E6C(v19[6], (uint64_t)__s1);
      v20 = __s1[1];
      v21 = -1762037865 * ((v19[25] - v19[24]) >> 3);
      if (v21 < LODWORD(__s1[1]))
      {
        sub_22E7ED018((uint64_t)__s1, v21);
        v20 = __s1[1];
      }
      if (v20)
      {
        v37 = 0;
        v38 = v20;
        do
        {
          v39 = *(_QWORD *)&__s1[0][8 * v37];
          if (v39)
          {
            v40 = sub_22F13C01C(v19, *(_QWORD *)&__s1[0][8 * v37], 0);
            if (v40)
            {
              if ((v40->n128_u16[0] & 0xC0) != 0x40)
              {
                v41 = sub_22F40F630(v19, v39);
                if (v42)
                {
                  v43 = (_QWORD *)v41;
                  v44 = 8 * v42;
                  do
                  {
                    v45 = *v43 & 0xFFFFFFFFFFFFFFF8;
                    if (v45)
                    {
                      v46 = v1839;
                      if (v1839 >= (unint64_t)HIDWORD(v1839))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        v46 = v1839;
                      }
                      *((_QWORD *)v1838 + v46) = v45;
                      LODWORD(v1839) = v1839 + 1;
                    }
                    ++v43;
                    v44 -= 8;
                  }
                  while (v44);
                }
              }
            }
          }
          ++v37;
        }
        while (v37 != v38);
      }
      v1883 = *(void **)(v18 + 88);
      *(_QWORD *)v1911 = v1935;
      *(_QWORD *)&v1911[8] = v19 + 61;
      *(_QWORD *)&v1911[16] = &v1883;
      *(_QWORD *)&v1911[24] = &v1886;
      if ((_DWORD)v1839)
      {
        v22 = (unint64_t *)v1838;
        v23 = (unint64_t *)((char *)v1838 + 8 * v1839);
        do
        {
          v24 = *v22;
          sub_22E7ECBB8(v1911, *v22);
          v25 = *(unsigned int *)(v24 + 1392);
          if ((_DWORD)v25)
          {
            v26 = *(unint64_t **)(v24 + 1384);
            v27 = 8 * v25;
            do
            {
              v28 = *v26++;
              sub_22E7ECBB8(v1911, v28);
              v27 -= 8;
            }
            while (v27);
          }
          v29 = *(unsigned int *)(v24 + 1952);
          if ((_DWORD)v29)
          {
            v30 = *(unint64_t **)(v24 + 1944);
            v31 = 8 * v29;
            do
            {
              v32 = *v30++;
              sub_22E7ECBB8(v1911, v32);
              v31 -= 8;
            }
            while (v31);
          }
          ++v22;
        }
        while (v22 != v23);
      }
      if ((char **)__s1[0] != &__s1[2])
        free(__s1[0]);
      v8 = (_BYTE *)v1746;
      if (v1838 != v1840)
        free(v1838);
      sub_22F258024((_QWORD *)v1935[1]);
      v33 = (void **)(v9 + 1744);
      sub_22E6C5AA8(v9 + 1744, v1778);
      v1774 = (void **)(v9 + 1792);
      sub_22E6C5AA8(v9 + 1792, v1778);
      v34 = *(char **)(v9 + 1752);
      v35 = *(_QWORD *)(v9 + 1760);
      if ((unint64_t)v34 >= v35)
      {
        v47 = (char *)*v33;
        v48 = (v34 - (_BYTE *)*v33) >> 2;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 62)
          goto LABEL_2504;
        v50 = v35 - (_QWORD)v47;
        if (v50 >> 1 > v49)
          v49 = v50 >> 1;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          if (v51 >> 62)
            goto LABEL_2503;
          v52 = (char *)operator new(4 * v51);
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[4 * v48];
        *(_DWORD *)v53 = 0;
        v36 = v53 + 4;
        while (v34 != v47)
        {
          v54 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *((_DWORD *)v53 - 1) = v54;
          v53 -= 4;
        }
        *(_QWORD *)(v9 + 1744) = v53;
        *(_QWORD *)(v9 + 1752) = v36;
        *(_QWORD *)(v9 + 1760) = &v52[4 * v51];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *(_DWORD *)v34 = 0;
        v36 = v34 + 4;
      }
      *(_QWORD *)(v9 + 1752) = v36;
      v55 = *(char **)(v9 + 1800);
      v56 = *(_QWORD *)(v9 + 1808);
      v1763 = (void **)(v9 + 1744);
      if ((unint64_t)v55 >= v56)
      {
        v58 = (char *)*v1774;
        v59 = (v55 - (_BYTE *)*v1774) >> 2;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 62)
          goto LABEL_2504;
        v61 = v56 - (_QWORD)v58;
        if (v61 >> 1 > v60)
          v60 = v61 >> 1;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
          v62 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62)
        {
          if (v62 >> 62)
            goto LABEL_2503;
          v63 = (char *)operator new(4 * v62);
        }
        else
        {
          v63 = 0;
        }
        v64 = &v63[4 * v59];
        *(_DWORD *)v64 = 0;
        v57 = v64 + 4;
        while (v55 != v58)
        {
          v65 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v64 - 1) = v65;
          v64 -= 4;
        }
        *(_QWORD *)(v9 + 1792) = v64;
        *(_QWORD *)(v9 + 1800) = v57;
        *(_QWORD *)(v9 + 1808) = &v63[4 * v62];
        if (v58)
          operator delete(v58);
      }
      else
      {
        *(_DWORD *)v55 = 0;
        v57 = v55 + 4;
      }
      *(_QWORD *)(v9 + 1800) = v57;
      v66 = v1778;
      if ((_DWORD)v1778 != 1)
      {
        v1790 = 0;
        v1784 = 0;
        v67 = 1;
        do
        {
          v68 = *(_QWORD *)(v10 + 184);
          if ((*(_DWORD *)(v68 + 24 * v67) & 0x80000000) == 0)
          {
            v69 = *(_QWORD *)(v68 + 24 * v67 + 16);
            v70 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFFFF8) + 8);
            if (v70)
            {
              v71 = (v69 & 7) - 5 < 0xFFFFFFFE || *(_QWORD *)&v1887[0] == 0;
              if (!v71)
              {
                do
                {
                  v72 = *(_QWORD *)(v70 + 8);
                  v70 = v72 & 0xFFFFFFFFFFFFFFFCLL;
                }
                while ((v72 & 2) != 0 && v70);
                v73 = (_QWORD *)*((_QWORD *)&v1886 + 1);
                if (!*((_QWORD *)&v1886 + 1))
                  goto LABEL_96;
                v74 = (__int128 *)((char *)&v1886 + 8);
                do
                {
                  v75 = v74;
                  v76 = v73;
                  v77 = v73[4];
                  v78 = v73 + 1;
                  if (v77 >= v70)
                  {
                    v78 = v76;
                    v74 = v76;
                  }
                  v73 = (_QWORD *)*v78;
                }
                while (v73);
                if (v74 == (__int128 *)((char *)&v1886 + 8))
                  goto LABEL_96;
                if (v77 >= v70)
                  v75 = v76;
                if (*((_QWORD *)v75 + 4) > v70)
                {
LABEL_96:
                  *(_QWORD *)(*(_QWORD *)(v9 + 1648) + 8 * (v67 >> 6)) &= ~(1 << v67);
                  ++v1790;
                  v1784 += sub_22F1E37C0(v10, v67) + 1;
                  v79 = *(char **)(v9 + 1720);
                  v80 = *(char **)(v9 + 1728);
                  if (v79 == v80 || v67 - 1 != *((_DWORD *)v80 - 1))
                  {
                    v85 = *(_QWORD *)(v9 + 1736);
                    if ((unint64_t)v80 >= v85)
                    {
                      v87 = (v80 - v79) >> 2;
                      v88 = v87 + 1;
                      if ((unint64_t)(v87 + 1) >> 62)
                        goto LABEL_2504;
                      v89 = v85 - (_QWORD)v79;
                      if (v89 >> 1 > v88)
                        v88 = v89 >> 1;
                      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
                        v90 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v90 = v88;
                      if (v90)
                      {
                        if (v90 >> 62)
                          goto LABEL_2503;
                        v91 = (char *)operator new(4 * v90);
                      }
                      else
                      {
                        v91 = 0;
                      }
                      v92 = &v91[4 * v87];
                      *(_DWORD *)v92 = v67;
                      for (i = v92 + 4; v80 != v79; v92 -= 4)
                      {
                        v93 = *((_DWORD *)v80 - 1);
                        v80 -= 4;
                        *((_DWORD *)v92 - 1) = v93;
                      }
                      *(_QWORD *)(v9 + 1720) = v92;
                      *(_QWORD *)(v9 + 1728) = i;
                      *(_QWORD *)(v9 + 1736) = &v91[4 * v90];
                      if (v79)
                        operator delete(v79);
                    }
                    else
                    {
                      *(_DWORD *)v80 = v67;
                      i = v80 + 4;
                    }
                    *(_QWORD *)(v9 + 1728) = i;
                    v94 = sub_22E49F3DC((_QWORD *)v10, v67);
                    if (v94)
                      v95 = *v94 & 0x7FFFFFFF;
                    else
                      v95 = 0;
                    v96 = sub_22E49F3DC((_QWORD *)v10, v67);
                    if (v96)
                    {
                      v97 = *v96 & 0x7FFFFFFF;
                      v98 = v97 + sub_22F1E37C0(v10, v67);
                    }
                    else
                    {
                      v98 = 0;
                    }
                    v99 = *(int **)(v9 + 1776);
                    v100 = *(_QWORD *)(v9 + 1784);
                    if ((unint64_t)v99 >= v100)
                    {
                      v102 = *(int **)(v9 + 1768);
                      v103 = ((char *)v99 - (char *)v102) >> 3;
                      v104 = v103 + 1;
                      if ((unint64_t)(v103 + 1) >> 61)
                        goto LABEL_2504;
                      v105 = v100 - (_QWORD)v102;
                      if (v105 >> 2 > v104)
                        v104 = v105 >> 2;
                      if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8)
                        v106 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v106 = v104;
                      if (v106 >> 61)
LABEL_2503:
                        sub_22E3B3F8C();
                      v107 = (char *)operator new(8 * v106);
                      v108 = (int *)&v107[8 * v103];
                      *v108 = v95;
                      v108[1] = v98;
                      v109 = v108;
                      if (v99 == v102)
                      {
                        v8 = (_BYTE *)v1746;
                      }
                      else
                      {
                        v8 = (_BYTE *)v1746;
                        do
                        {
                          v110 = *((_QWORD *)v99 - 1);
                          v99 -= 2;
                          *((_QWORD *)v109 - 1) = v110;
                          v109 -= 2;
                        }
                        while (v99 != v102);
                      }
                      *(_QWORD *)(v9 + 1768) = v109;
                      v101 = v108 + 2;
                      *(_QWORD *)(v9 + 1776) = v108 + 2;
                      *(_QWORD *)(v9 + 1784) = &v107[8 * v106];
                      if (v102)
                        operator delete(v102);
                      v66 = v1778;
                    }
                    else
                    {
                      *v99 = v95;
                      v99[1] = v98;
                      v101 = v99 + 2;
                    }
                    *(_QWORD *)(v9 + 1776) = v101;
                    v111 = *(char **)(v9 + 1752);
                    v112 = *(_QWORD *)(v9 + 1760);
                    if ((unint64_t)v111 >= v112)
                    {
                      v114 = (char *)*v1763;
                      v115 = (v111 - (_BYTE *)*v1763) >> 2;
                      v116 = v115 + 1;
                      if ((unint64_t)(v115 + 1) >> 62)
                        goto LABEL_2504;
                      v117 = v112 - (_QWORD)v114;
                      if (v117 >> 1 > v116)
                        v116 = v117 >> 1;
                      if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
                        v118 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v118 = v116;
                      if (v118)
                      {
                        if (v118 >> 62)
                          goto LABEL_2503;
                        v119 = (char *)operator new(4 * v118);
                      }
                      else
                      {
                        v119 = 0;
                      }
                      v120 = &v119[4 * v115];
                      *(_DWORD *)v120 = v1790;
                      v113 = v120 + 4;
                      while (v111 != v114)
                      {
                        v121 = *((_DWORD *)v111 - 1);
                        v111 -= 4;
                        *((_DWORD *)v120 - 1) = v121;
                        v120 -= 4;
                      }
                      *(_QWORD *)(v9 + 1744) = v120;
                      *(_QWORD *)(v9 + 1752) = v113;
                      *(_QWORD *)(v9 + 1760) = &v119[4 * v118];
                      if (v114)
                        operator delete(v114);
                    }
                    else
                    {
                      *(_DWORD *)v111 = v1790;
                      v113 = v111 + 4;
                    }
                    *(_QWORD *)(v9 + 1752) = v113;
                    v122 = *(char **)(v9 + 1800);
                    v123 = *(_QWORD *)(v9 + 1808);
                    if ((unint64_t)v122 >= v123)
                    {
                      v125 = (char *)*v1774;
                      v126 = (v122 - (_BYTE *)*v1774) >> 2;
                      v127 = v126 + 1;
                      if ((unint64_t)(v126 + 1) >> 62)
LABEL_2504:
                        abort();
                      v128 = v123 - (_QWORD)v125;
                      if (v128 >> 1 > v127)
                        v127 = v128 >> 1;
                      if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL)
                        v129 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v129 = v127;
                      if (v129)
                      {
                        if (v129 >> 62)
                          goto LABEL_2503;
                        v130 = (char *)operator new(4 * v129);
                      }
                      else
                      {
                        v130 = 0;
                      }
                      v131 = &v130[4 * v126];
                      *(_DWORD *)v131 = v1784;
                      v124 = v131 + 4;
                      while (v122 != v125)
                      {
                        v132 = *((_DWORD *)v122 - 1);
                        v122 -= 4;
                        *((_DWORD *)v131 - 1) = v132;
                        v131 -= 4;
                      }
                      *(_QWORD *)(v9 + 1792) = v131;
                      *(_QWORD *)(v9 + 1800) = v124;
                      *(_QWORD *)(v9 + 1808) = &v130[4 * v129];
                      if (v125)
                        operator delete(v125);
                    }
                    else
                    {
                      *(_DWORD *)v122 = v1784;
                      v124 = v122 + 4;
                    }
                    *(_QWORD *)(v9 + 1800) = v124;
                  }
                  else
                  {
                    *((_DWORD *)v80 - 1) = v67;
                    v81 = *(_QWORD *)(v9 + 1776);
                    v82 = sub_22E49F3DC((_QWORD *)v10, v67);
                    if (v82)
                    {
                      v83 = *v82 & 0x7FFFFFFF;
                      v84 = v83 + sub_22F1E37C0(v10, v67);
                    }
                    else
                    {
                      v84 = 0;
                    }
                    *(_DWORD *)(v81 - 4) = v84;
                    *(_DWORD *)(*(_QWORD *)(v9 + 1752) - 4) = v1790;
                    *(_DWORD *)(*(_QWORD *)(v9 + 1800) - 4) = v1784;
                  }
                }
              }
            }
          }
          ++v67;
        }
        while (v66 != (_DWORD)v67);
      }
      sub_22F258024(*((_QWORD **)&v1886 + 1));
      v6 = v1756;
      v4 = v1759;
    }
    __s1[0] = (char *)sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v1771 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v1771 + 1960) + 80));
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 1;
    __s1[0] = *(char **)(v1771 + 1280);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 2;
    __s1[0] = *(char **)(v1771 + 1288);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 3;
    __s1[0] = *(char **)(v1771 + 1296);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 4;
    __s1[0] = *(char **)(v1771 + 1304);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 5;
    __s1[0] = *(char **)(v1771 + 1248);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 6;
    __s1[0] = *(char **)(v1771 + 1256);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 7;
    __s1[0] = *(char **)(v1771 + 1424);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 8;
    __s1[0] = *(char **)(v1771 + 1264);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 9;
    __s1[0] = *(char **)(v1771 + 18584);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 10;
    __s1[0] = *(char **)(v1771 + 1272);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 11;
    __s1[0] = *(char **)(v1771 + 18592);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 12;
    __s1[0] = *(char **)(v1771 + 1968);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 13;
    __s1[0] = *(char **)(v1771 + 1976);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 14;
    __s1[0] = *(char **)(v1771 + 1400);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 15;
    __s1[0] = *(char **)(v1771 + 1392);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 16;
    __s1[0] = *(char **)(v1771 + 1984);
    if (__s1[0])
      *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), __s1) + 2) = 17;
    v1883 = v1885;
    v1884 = 0x4000000000;
    v133 = *((_DWORD *)v8 + 700);
    if (v133)
    {
      v134 = 0;
      for (j = 0; j != v133; v134 = j)
      {
        if (v134 >= 0)
          v136 = *((_QWORD *)v8 + 349);
        else
          v136 = *((_QWORD *)v8 + 345) + 8 * *((unsigned int *)v8 + 692);
        sub_22E7CA8EC(v9, *(_QWORD *)(v136 + 8 * j++), (uint64_t)&v1883);
      }
    }
    v1880 = v1882;
    v1881 = 0x4000000000;
    if (v1773)
    {
      v1877 = v1879;
      v1878 = 0x4000000000;
    }
    else
    {
      v137 = *((_DWORD *)v8 + 728);
      if (v137)
      {
        v138 = 0;
        for (k = 0; k != v137; v138 = k)
        {
          if (v138 >= 0)
            v140 = *((_QWORD *)v8 + 363);
          else
            v140 = *((_QWORD *)v8 + 359) + 8 * *((unsigned int *)v8 + 720);
          sub_22E7CA8EC(v9, *(_QWORD *)(v140 + 8 * k++), (uint64_t)&v1880);
        }
      }
      v1877 = v1879;
      v1878 = 0x4000000000;
      v141 = *((_DWORD *)v8 + 744);
      if (v141)
      {
        v142 = 0;
        for (m = 0; m != v141; v142 = m)
        {
          if (v142 >= 0)
            v144 = *((_QWORD *)v8 + 371);
          else
            v144 = *((_QWORD *)v8 + 367) + 8 * *((unsigned int *)v8 + 736);
          sub_22E7CA8EC(v9, *(_QWORD *)(v144 + 8 * m++), (uint64_t)&v1877);
        }
      }
    }
    v1874 = v1876;
    v1875 = 0x4000000000;
    v145 = *((_QWORD *)v8 + 405);
    v146 = *((_QWORD *)v8 + 406);
    while (v145 != v146)
    {
      v147 = *(unsigned int *)(v145 + 56);
      if ((_DWORD)v147)
      {
        v148 = *(_QWORD *)v145;
        v149 = *(_QWORD *)(v145 + 48);
        v150 = v149 + 16 * v147;
        do
        {
          sub_22E7CA0D0((_DWORD *)v9, v148, (uint64_t)&v1874);
          sub_22E7CA0D0((_DWORD *)v9, *(_QWORD *)v149, (uint64_t)&v1874);
          sub_22E7C9A94(v9, *(_DWORD *)(v149 + 8), (uint64_t)&v1874);
          v149 += 16;
        }
        while (v149 != v150);
      }
      v145 += 80;
    }
    v1871 = v1873;
    v1872 = 0x4000000000;
    v151 = *(_DWORD *)(v1746 + 2240);
    if (v151)
    {
      v152 = 0;
      for (n = 0; n != v151; v152 = n)
      {
        if (v152 >= 0)
          v154 = *(_QWORD *)(v1746 + 2232);
        else
          v154 = *(_QWORD *)(v1746 + 2200) + 8 * *(unsigned int *)(v1746 + 2208);
        sub_22E7CA8EC(v9, *(_QWORD *)(v154 + 8 * n++), (uint64_t)&v1871);
      }
    }
    v1868 = v1870;
    v1869 = 0x4000000000;
    v155 = *(unsigned int *)(v1746 + 10376);
    if ((_DWORD)v155)
    {
      v175 = 0;
      v176 = 16 * v155;
      do
      {
        sub_22E7CA8EC(v9, *(_QWORD *)(*(_QWORD *)(v1746 + 10368) + v175), (uint64_t)&v1868);
        sub_22E7C9A94(v9, *(_DWORD *)(*(_QWORD *)(v1746 + 10368) + v175 + 8), (uint64_t)&v1868);
        v177 = *((unsigned __int8 *)sub_22F2D31F4((uint64_t *)(v1746 + 10640), (_QWORD *)(*(_QWORD *)(v1746 + 10368) + v175))+ 8);
        v178 = v1869;
        if (v1869 >= (unint64_t)HIDWORD(v1869))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v178 = v1869;
        }
        *((_QWORD *)v1868 + v178) = v177;
        LODWORD(v1869) = v1869 + 1;
        v175 += 16;
      }
      while (v176 != v175);
    }
    v1865 = v1867;
    v1866 = 0x4000000000;
    v156 = *(unsigned int *)(v1746 + 2600);
    if ((_DWORD)v156)
    {
      v157 = *(unint64_t **)(v1746 + 2592);
      v158 = 8 * v156;
      do
      {
        v159 = *v157++;
        sub_22E7CA8EC(v9, v159, (uint64_t)&v1865);
        v158 -= 8;
      }
      while (v158);
    }
    v1862 = v1864;
    v1863 = 0x4000000000;
    v160 = *(_QWORD *)(v1746 + 12168);
    if (*(_QWORD *)(v1746 + 12176) != v160)
    {
      v179 = *(_QWORD *)(v1746 + 12192);
      v180 = (_QWORD *)(v160 + 8 * (v179 >> 8));
      v181 = *v180 + 16 * v179;
      v182 = *(_QWORD *)(v160 + (((*(_QWORD *)(v1746 + 12200) + v179) >> 5) & 0x7FFFFFFFFFFFFF8))
           + 16 * (*(_BYTE *)(v1746 + 12200) + v179);
      while (v181 != v182)
      {
        sub_22E7CA8EC(v9, *(_QWORD *)v181, (uint64_t)&v1862);
        sub_22E7C9A94(v9, *(_DWORD *)(v181 + 8), (uint64_t)&v1862);
        v181 += 16;
        if (v181 - *v180 == 4096)
        {
          v183 = v180[1];
          ++v180;
          v181 = v183;
        }
      }
    }
    v1859 = v1861;
    v1860 = 0x4000000000;
    v161 = *(_QWORD *)(v1746 + 3352);
    if (v161 || *(_QWORD *)(v1746 + 3360) || *(_QWORD *)(v1746 + 3368))
    {
      if ((v161 & 1) != 0)
      {
        v161 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v1746 + 88) + 16048)
                                                                   + 16))(*(_QWORD *)(*(_QWORD *)(v1746 + 88) + 16048), v161 >> 1);
        *(_QWORD *)(v1746 + 3352) = v161;
      }
      sub_22E7CA8EC(v9, v161, (uint64_t)&v1859);
      v162 = *(_QWORD *)(v1746 + 3360);
      if ((v162 & 1) != 0)
      {
        v162 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v1746 + 88) + 16048)
                                                                   + 16))(*(_QWORD *)(*(_QWORD *)(v1746 + 88) + 16048), v162 >> 1);
        *(_QWORD *)(v1746 + 3360) = v162;
      }
      sub_22E7CA8EC(v9, v162, (uint64_t)&v1859);
      v163 = *(_QWORD *)(v1746 + 3368);
      if ((v163 & 1) != 0)
      {
        v163 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(v1746 + 88) + 16048)
                                                                   + 16))(*(_QWORD *)(*(_QWORD *)(v1746 + 88) + 16048), v163 >> 1);
        *(_QWORD *)(v1746 + 3368) = v163;
      }
      sub_22E7CA8EC(v9, v163, (uint64_t)&v1859);
    }
    v1856 = v1858;
    v1857 = 0x4000000000;
    v164 = *(_QWORD *)(v1771 + 1480);
    if (v164)
      sub_22E7CA8EC(v9, v164, (uint64_t)&v1856);
    v1853 = v1855;
    v1854 = 0x4000000000;
    v165 = *(_QWORD *)(v1746 + 10248);
    v166 = *(_QWORD *)(v1746 + 10256);
    while (v165 != v166)
    {
      if (!*(_BYTE *)(v165 + 8))
        sub_22E7CA8EC(v9, *(_QWORD *)v165, (uint64_t)&v1853);
      v165 += 16;
    }
    v1850 = v1852;
    v1851 = 0x4000000000;
    v1847 = v1849;
    v1848 = 0x1000000000;
    sub_22E900E54(v1746, (uint64_t)&v1847);
    if ((_DWORD)v1848)
    {
      v167 = (char *)v1847;
      v168 = (char *)v1847 + 16 * v1848;
      do
      {
        sub_22E7CA8EC(v9, *(_QWORD *)v167, (uint64_t)&v1850);
        sub_22E7C9A94(v9, *((_DWORD *)v167 + 2), (uint64_t)&v1850);
        v167 += 16;
      }
      while (v167 != v168);
    }
    v1844 = v1846;
    v1845 = 0x4000000000;
    if (!v1773)
    {
      v184 = *(_QWORD *)(v1746 + 2664);
      v185 = *(_QWORD *)(v1746 + 2672);
      while (v184 != v185)
      {
        sub_22E7CA8EC(v9, *(_QWORD *)v184, (uint64_t)&v1844);
        v186 = *(unsigned int *)(v184 + 16);
        v187 = v1845;
        if (v1845 >= (unint64_t)HIDWORD(v1845))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v187 = v1845;
        }
        *((_QWORD *)v1844 + v187) = v186;
        LODWORD(v1845) = v1845 + 1;
        v188 = *(unsigned int *)(v184 + 16);
        if ((_DWORD)v188)
        {
          v189 = *(_QWORD *)(v184 + 8);
          v190 = v189 + 8 * v188;
          do
          {
            sub_22E7C9A94(v9, *(_DWORD *)v189, (uint64_t)&v1844);
            v191 = *(unsigned __int8 *)(v189 + 4);
            v192 = v1845;
            if (v1845 >= (unint64_t)HIDWORD(v1845))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v192 = v1845;
            }
            *((_QWORD *)v1844 + v192) = v191;
            LODWORD(v1845) = v1845 + 1;
            v189 += 8;
          }
          while (v189 != v190);
        }
        v184 += 56;
      }
    }
    sub_22E7BE620(v9, v1772, (_QWORD *)v1771, v6, v4);
    v170 = (uint64_t *)(v9 + 16);
    v169 = *(_QWORD *)(v9 + 16);
    if (*(_DWORD *)(v169 + 24))
    {
      sub_22E740FDC(*(const char ****)(v9 + 16), *(_DWORD *)(v169 + 28));
      *(_QWORD *)(v169 + 24) = 0;
      v169 = *v170;
    }
    v171 = *(_QWORD **)(v169 + 8);
    v172 = *(_QWORD *)(*(_QWORD *)v169 + 8);
    if (v171)
    {
      v173 = (*(uint64_t (**)(_QWORD))(*v171 + 80))(*(_QWORD *)(v169 + 8)) + v171[4] - v171[2];
      v174 = *v170;
    }
    else
    {
      v173 = 0;
      v174 = v169;
    }
    *(_QWORD *)(v9 + 80) = *(unsigned int *)(v169 + 24) + 8 * (v173 + v172);
    sub_22E74181C(v174, 8u, 5u);
    v193 = *(_QWORD *)(v9 + 16);
    v194 = *(_QWORD **)(v193 + 8);
    v195 = *(_QWORD *)(*(_QWORD *)v193 + 8);
    if (v194)
    {
      v196 = (*(uint64_t (**)(_QWORD))(*v194 + 80))(*(_QWORD *)(v193 + 8)) + v194[4] - v194[2];
      v197 = (llvm::raw_ostream *)*v170;
    }
    else
    {
      v196 = 0;
      v197 = *(llvm::raw_ostream **)(v9 + 16);
    }
    *(_QWORD *)(v9 + 72) = *(unsigned int *)(v193 + 24) + 8 * (v196 + v195);
    __s1[0] = (char *)&__s1[2];
    __s1[2] = (char *)25;
    __s1[1] = (char *)0x4000000001;
    sub_22E742038(v197, 4u, (uint64_t)__s1, 0);
    if ((char **)__s1[0] != &__s1[2])
      free(__s1[0]);
    v198 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(*(_QWORD *)(v1771 + 1960) + 80) + 72), *(_QWORD *)(*(_QWORD *)(v1771 + 1960) + 80));
    v1841 = v1843;
    v1842 = 0x8000000000;
    v199 = *(_QWORD *)(v198 + 56);
    if (v199)
    {
      v230 = 0;
      do
      {
        v231 = *(_DWORD *)(v199 + 28);
        if ((v231 & 0x8000) == 0)
        {
          if (v230 >= HIDWORD(v1842))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v230 = v1842;
          }
          *((_DWORD *)v1841 + v230) = v231 & 0x7F;
          LODWORD(v1842) = v1842 + 1;
          v232 = sub_22E7CA3E8(v9, v199);
          v233 = v1842;
          if (v1842 >= (unint64_t)HIDWORD(v1842))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v233 = v1842;
          }
          *((_DWORD *)v1841 + v233) = v232;
          v230 = v1842 + 1;
          LODWORD(v1842) = v1842 + 1;
        }
        v199 = *(_QWORD *)(v199 + 8) & 0xFFFFFFFFFFFFFFF8;
      }
      while (v199);
    }
    v200 = (char *)operator new(0x228uLL);
    *(_QWORD *)v200 = &unk_24FA715D0;
    *((_QWORD *)v200 + 1) = 0;
    *(_OWORD *)(v200 + 72) = 0u;
    *(_OWORD *)(v200 + 88) = 0u;
    *(_OWORD *)(v200 + 104) = 0u;
    *(_OWORD *)(v200 + 120) = 0u;
    *(_OWORD *)(v200 + 136) = 0u;
    *(_OWORD *)(v200 + 152) = 0u;
    *(_OWORD *)(v200 + 168) = 0u;
    *(_OWORD *)(v200 + 184) = 0u;
    *(_OWORD *)(v200 + 200) = 0u;
    *(_OWORD *)(v200 + 216) = 0u;
    *(_OWORD *)(v200 + 232) = 0u;
    *(_OWORD *)(v200 + 248) = 0u;
    *(_OWORD *)(v200 + 264) = 0u;
    *(_OWORD *)(v200 + 280) = 0u;
    *(_OWORD *)(v200 + 296) = 0u;
    *(_OWORD *)(v200 + 312) = 0u;
    *(_OWORD *)(v200 + 328) = 0u;
    *(_OWORD *)(v200 + 344) = 0u;
    *(_OWORD *)(v200 + 360) = 0u;
    *(_OWORD *)(v200 + 376) = 0u;
    *(_OWORD *)(v200 + 392) = 0u;
    *(_OWORD *)(v200 + 408) = 0u;
    *(_OWORD *)(v200 + 424) = 0u;
    *(_OWORD *)(v200 + 440) = 0u;
    *(_OWORD *)(v200 + 456) = 0u;
    *(_OWORD *)(v200 + 472) = 0u;
    *(_OWORD *)(v200 + 488) = 0u;
    *(_OWORD *)(v200 + 504) = 0u;
    *(_OWORD *)(v200 + 40) = xmmword_22F45FB30;
    *(_OWORD *)(v200 + 520) = 0u;
    *(_OWORD *)(v200 + 536) = 0u;
    *((_QWORD *)v200 + 2) = 0;
    *((_QWORD *)v200 + 3) = v200 + 40;
    *(_OWORD *)(v200 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v200 + 4) = 0x2000000002;
    v201 = *v170;
    v1801 = v200 + 24;
    v1802 = (std::__shared_weak_count *)v200;
    v202 = sub_22E74761C(v201, (uint64_t)&v1801);
    v203 = v1802;
    if (v1802)
    {
      p_shared_owners = (unint64_t *)&v1802->__shared_owners_;
      do
        v205 = __ldaxr(p_shared_owners);
      while (__stlxr(v205 - 1, p_shared_owners));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
    __s1[0] = (char *)22;
    sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v202, (uint64_t)__s1, 1, (char *)v1841, 4 * v1842, 0);
    v206 = (char *)operator new(0x228uLL);
    *(_QWORD *)v206 = &unk_24FA715D0;
    *((_QWORD *)v206 + 1) = 0;
    *(_OWORD *)(v206 + 88) = 0u;
    *(_OWORD *)(v206 + 104) = 0u;
    *(_OWORD *)(v206 + 120) = 0u;
    *(_OWORD *)(v206 + 136) = 0u;
    *(_OWORD *)(v206 + 152) = 0u;
    *(_OWORD *)(v206 + 168) = 0u;
    *(_OWORD *)(v206 + 184) = 0u;
    *(_OWORD *)(v206 + 200) = 0u;
    *(_OWORD *)(v206 + 216) = 0u;
    *(_OWORD *)(v206 + 232) = 0u;
    *(_OWORD *)(v206 + 248) = 0u;
    *(_OWORD *)(v206 + 264) = 0u;
    *(_OWORD *)(v206 + 280) = 0u;
    *(_OWORD *)(v206 + 296) = 0u;
    *(_OWORD *)(v206 + 312) = 0u;
    *(_OWORD *)(v206 + 328) = 0u;
    *(_OWORD *)(v206 + 344) = 0u;
    *(_OWORD *)(v206 + 360) = 0u;
    *(_OWORD *)(v206 + 376) = 0u;
    *(_OWORD *)(v206 + 392) = 0u;
    *(_OWORD *)(v206 + 408) = 0u;
    *(_OWORD *)(v206 + 424) = 0u;
    *(_OWORD *)(v206 + 440) = 0u;
    *(_OWORD *)(v206 + 456) = 0u;
    *(_OWORD *)(v206 + 472) = 0u;
    *(_OWORD *)(v206 + 488) = 0u;
    *(_OWORD *)(v206 + 504) = 0u;
    *(_OWORD *)(v206 + 520) = 0u;
    *(_OWORD *)(v206 + 536) = 0u;
    *(_OWORD *)(v206 + 40) = xmmword_22F45FB40;
    *((_QWORD *)v206 + 2) = 0;
    *((_QWORD *)v206 + 3) = v206 + 40;
    *(_OWORD *)(v206 + 56) = xmmword_22F45E250;
    v207 = *(_QWORD *)(v9 + 16);
    *(_OWORD *)(v206 + 72) = xmmword_22F45E0D0;
    *((_QWORD *)v206 + 4) = 0x2000000003;
    v1799 = v206 + 24;
    v1800 = (std::__shared_weak_count *)v206;
    *(_DWORD *)(v9 + 1836) = sub_22E74761C(v207, (uint64_t)&v1799);
    v208 = v1800;
    if (v1800)
    {
      v209 = (unint64_t *)&v1800->__shared_owners_;
      do
        v210 = __ldaxr(v209);
      while (__stlxr(v210 - 1, v209));
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
        std::__shared_weak_count::__release_weak(v208);
      }
    }
    sub_22F2CFA98();
    if (*(_QWORD *)(v1771 + 1968))
      sub_22F2CFA98();
    v211 = *(_QWORD *)(v198 + 96);
    if (v211)
    {
      __s1[0] = (char *)v198;
      v212 = sub_22F2D07C8(v9 + 688, (uint64_t *)__s1);
      if (!*(_DWORD *)(v212 + 8))
      {
        v213 = v212;
        if (*(_DWORD *)(v212 + 12))
        {
          v214 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v214 = *(_DWORD *)(v213 + 8);
        }
        v215 = (_QWORD *)(*(_QWORD *)v213 + 16 * v214);
        *v215 = 2;
        v215[1] = v211;
        ++*(_DWORD *)(v213 + 8);
      }
    }
    v1778 = v9 + 16;
    v216 = *(unsigned int **)(v1771 + 1824);
    for (ii = *(unsigned int **)(v1771 + 1832); v216 != ii; v216 += 4)
    {
      if ((*(_BYTE *)(*(_QWORD *)v216 + 29) & 0x80) == 0)
      {
        __s1[0] = *(char **)v216;
        v234 = sub_22F2D07C8(v9 + 688, (uint64_t *)__s1);
        v235 = v216[2];
        v236 = *(unsigned int *)(v234 + 8);
        if (v236 >= *(unsigned int *)(v234 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v236 = *(unsigned int *)(v234 + 8);
        }
        v237 = (_QWORD *)(*(_QWORD *)v234 + 16 * v236);
        *v237 = 13;
        v237[1] = v235;
        ++*(_DWORD *)(v234 + 8);
      }
    }
    v218 = *(unsigned int **)(v1771 + 1872);
    for (jj = *(unsigned int **)(v1771 + 1880); v218 != jj; v218 += 4)
    {
      if ((*(_BYTE *)(*(_QWORD *)v218 + 29) & 0x80) == 0)
      {
        __s1[0] = *(char **)v218;
        v238 = sub_22F2D07C8(v9 + 688, (uint64_t *)__s1);
        v239 = v218[2];
        v240 = *(unsigned int *)(v238 + 8);
        if (v240 >= *(unsigned int *)(v238 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v240 = *(unsigned int *)(v238 + 8);
        }
        v241 = (_QWORD *)(*(_QWORD *)v238 + 16 * v240);
        *v241 = 14;
        v241[1] = v239;
        ++*(_DWORD *)(v238 + 8);
      }
    }
    v220 = *(unsigned int *)(v9 + 1208);
    if ((_DWORD)v220)
    {
      v221 = *(unint64_t **)(v9 + 1200);
      v222 = 8 * v220;
      do
      {
        v223 = *v221++;
        sub_22E7CA3E8(v9, v223);
        v222 -= 8;
      }
      while (v222);
    }
    v224 = (uint64_t *)(v9 + 16);
    if (!v1773 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 2000) + 1) & 1) == 0)
    {
      __s1[0] = (char *)&__s1[2];
      __s1[1] = (char *)0x10000000000;
      v225 = *(unsigned int *)(v1772 + 552);
      if ((_DWORD)v225)
      {
        for (kk = *(uint64_t **)(v1772 + 544); !*kk || *kk == -8; ++kk)
          ;
      }
      else
      {
        kk = *(uint64_t **)(v1772 + 544);
      }
      v227 = *(_QWORD *)(v1772 + 544) + 8 * v225;
      if (kk == (uint64_t *)v227)
      {
        v228 = (uint64_t *)&__s1[2];
        v229 = &__s1[2];
      }
      else
      {
        v243 = 0;
        v244 = *kk;
        do
        {
          v245 = *(_QWORD **)(v244 + 8);
          if (!*(_QWORD *)(v9 + 56) || (*v245 & 0x300000000) != 0x100000000)
          {
            if (v243 >= HIDWORD(__s1[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v243 = __s1[1];
            }
            *(_QWORD *)&__s1[0][8 * v243] = v245;
            v243 = ++LODWORD(__s1[1]);
          }
          do
          {
            v246 = kk[1];
            ++kk;
            v244 = v246;
            if (v246)
              v247 = v244 == -8;
            else
              v247 = 1;
          }
          while (v247);
        }
        while (kk != (uint64_t *)v227);
        v229 = (char **)__s1[0];
        v228 = (uint64_t *)&__s1[0][8 * v243];
        if (v243)
        {
          v248 = 126 - 2 * __clz(v243);
          v224 = (uint64_t *)(v9 + 16);
          goto LABEL_371;
        }
        v224 = (uint64_t *)(v9 + 16);
      }
      v248 = 0;
LABEL_371:
      sub_22E7ED3F0((uint64_t)v229, v228, v248, 1);
      v249 = (uint64_t *)__s1[0];
      if (LODWORD(__s1[1]))
      {
        v250 = &__s1[0][8 * LODWORD(__s1[1])];
        do
        {
          v251 = sub_22E8CEB58(v1746 + 3320, *v249);
          v1838 = (void *)v251;
          if (v251)
          {
            while ((v251 & 1) != 0)
            {
              sub_22E7CA3E8(v9, *(_QWORD *)(v251 & 0xFFFFFFFFFFFFFFFELL));
              sub_22E8CECFC((unint64_t *)&v1838);
              v251 = (unint64_t)v1838;
              if (!v1838)
                goto LABEL_378;
            }
            sub_22E7CA3E8(v9, v251);
          }
LABEL_378:
          ++v249;
        }
        while (v249 != (uint64_t *)v250);
        v249 = (uint64_t *)__s1[0];
        v224 = (uint64_t *)(v9 + 16);
      }
      if (v249 != (uint64_t *)&__s1[2])
        free(v249);
    }
    v1838 = v1840;
    v1839 = 0x10000000000;
    v252 = *(uint64_t **)(v9 + 592);
    v253 = *(uint64_t **)(v9 + 600);
    if (v252 != v253)
    {
      LODWORD(v254) = 0;
      do
      {
        v255 = *v252;
        if (v254 >= HIDWORD(v1839))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v254) = v1839;
        }
        *((_QWORD *)v1838 + v254) = v255;
        v254 = (v1839 + 1);
        LODWORD(v1839) = v1839 + 1;
        v252 += 2;
      }
      while (v252 != v253);
      if ((_DWORD)v254)
      {
        v256 = v1838;
        v257 = 8 * v254;
        do
        {
          v258 = *(_QWORD *)(v1746 + 8);
          if (v258)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v258 + 240))(v258, *v256);
          ++v256;
          v257 -= 8;
        }
        while (v257);
      }
    }
    v1836[0] = v1837;
    v1836[1] = (void *)0x4000000000;
    v259 = *(_QWORD *)(v1771 + 1400);
    if (v259)
      v259 = sub_22EF64680(v1771, v259, 0);
    sub_22E7E1FB4(v9, v259, (uint64_t)v1836);
    v260 = *(_QWORD *)(v1771 + 1432);
    if (v260)
    {
      v261 = *(_QWORD *)(v260 + 48);
      if (v261)
        v260 = v261 & 0xFFFFFFFFFFFFFFF0;
      else
        v260 = sub_22EF6462C(v1771, v260);
    }
    sub_22E7E1FB4(v9, v260, (uint64_t)v1836);
    v262 = *(_QWORD *)(v1771 + 1440);
    if (v262)
    {
      v263 = *(_QWORD *)(v262 + 48);
      if (v263)
        v262 = v263 & 0xFFFFFFFFFFFFFFF0;
      else
        v262 = sub_22EF6462C(v1771, v262);
    }
    sub_22E7E1FB4(v9, v262, (uint64_t)v1836);
    v264 = *(_QWORD *)(v1771 + 1448);
    if (v264)
    {
      v265 = *(_QWORD *)(v264 + 48);
      if (v265)
        v264 = v265 & 0xFFFFFFFFFFFFFFF0;
      else
        v264 = sub_22EF6462C(v1771, v264);
    }
    sub_22E7E1FB4(v9, v264, (uint64_t)v1836);
    sub_22E7E1FB4(v9, *(_QWORD *)(v1771 + 1320), (uint64_t)v1836);
    sub_22E7E1FB4(v9, *(_QWORD *)(v1771 + 1328), (uint64_t)v1836);
    sub_22E7E1FB4(v9, *(_QWORD *)(v1771 + 1336), (uint64_t)v1836);
    v266 = *(_QWORD *)(v1771 + 1456);
    if (v266)
    {
      v267 = *(_QWORD *)(v266 + 48);
      if (v267)
        v266 = v267 & 0xFFFFFFFFFFFFFFF0;
      else
        v266 = sub_22EF6462C(v1771, v266);
    }
    sub_22E7E1FB4(v9, v266, (uint64_t)v1836);
    if (*(_QWORD *)(v9 + 56))
    {
      v268 = (char *)operator new(0x228uLL);
      *(_QWORD *)v268 = &unk_24FA715D0;
      *((_QWORD *)v268 + 1) = 0;
      *(_OWORD *)(v268 + 72) = 0u;
      *(_OWORD *)(v268 + 88) = 0u;
      *(_OWORD *)(v268 + 104) = 0u;
      *(_OWORD *)(v268 + 120) = 0u;
      *(_OWORD *)(v268 + 136) = 0u;
      *(_OWORD *)(v268 + 152) = 0u;
      *(_OWORD *)(v268 + 168) = 0u;
      *(_OWORD *)(v268 + 184) = 0u;
      *(_OWORD *)(v268 + 200) = 0u;
      *(_OWORD *)(v268 + 216) = 0u;
      *(_OWORD *)(v268 + 232) = 0u;
      *(_OWORD *)(v268 + 248) = 0u;
      *(_OWORD *)(v268 + 264) = 0u;
      *(_OWORD *)(v268 + 280) = 0u;
      *(_OWORD *)(v268 + 296) = 0u;
      *(_OWORD *)(v268 + 312) = 0u;
      *(_OWORD *)(v268 + 328) = 0u;
      *(_OWORD *)(v268 + 344) = 0u;
      *(_OWORD *)(v268 + 360) = 0u;
      *(_OWORD *)(v268 + 376) = 0u;
      *(_OWORD *)(v268 + 392) = 0u;
      *(_OWORD *)(v268 + 408) = 0u;
      *(_OWORD *)(v268 + 424) = 0u;
      *(_OWORD *)(v268 + 440) = 0u;
      *(_OWORD *)(v268 + 456) = 0u;
      *(_OWORD *)(v268 + 472) = 0u;
      *(_OWORD *)(v268 + 488) = 0u;
      *(_OWORD *)(v268 + 504) = 0u;
      *(_OWORD *)(v268 + 520) = 0u;
      *(_OWORD *)(v268 + 536) = 0u;
      *(_OWORD *)(v268 + 40) = xmmword_22F45FB50;
      *((_QWORD *)v268 + 2) = 0;
      *((_QWORD *)v268 + 3) = v268 + 40;
      *(_OWORD *)(v268 + 56) = xmmword_22F45E0D0;
      *((_QWORD *)v268 + 4) = 0x2000000002;
      v269 = *v224;
      v1797 = v268 + 24;
      v1798 = (std::__shared_weak_count *)v268;
      v1791 = sub_22E74761C(v269, (uint64_t)&v1797);
      v270 = v1798;
      if (v1798)
      {
        v271 = (unint64_t *)&v1798->__shared_owners_;
        do
          v272 = __ldaxr(v271);
        while (__stlxr(v272 - 1, v271));
        if (!v272)
        {
          ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
          std::__shared_weak_count::__release_weak(v270);
        }
      }
      __s1[0] = (char *)&__s1[3];
      *(_OWORD *)&__s1[1] = xmmword_22F45FB60;
      sub_22F242C48((uint64_t)v1911, (uint64_t)__s1);
      v273 = *(_QWORD *)(v9 + 56);
      v274 = *(unsigned int *)(v273 + 152);
      if ((_DWORD)v274)
      {
        v275 = *(_QWORD *)(v273 + 144);
        v276 = 8 * v274;
        do
        {
          v277 = *(_DWORD **)v275;
          LOBYTE(v1935[0]) = *(_DWORD *)(*(_QWORD *)v275 + 4);
          llvm::raw_ostream::write((llvm::raw_ostream *)v1911, (const char *)v1935);
          v278 = v277[1];
          v1071 = v278 > 5;
          v279 = (1 << v278) & 0x23;
          v280 = v1071 || v279 == 0;
          v281 = v277 + 20;
          if (v280)
            v281 = v277 + 2;
          v282 = *((_BYTE *)v281 + 23);
          if (v282 >= 0)
            v283 = (const char *)v281;
          else
            v283 = *(const char **)v281;
          if (v282 >= 0)
            v284 = v282 & 0x7F;
          else
            v284 = *((_QWORD *)v281 + 1);
          LOWORD(v1935[0]) = v284;
          llvm::raw_ostream::write((llvm::raw_ostream *)v1911, (const char *)v1935);
          llvm::raw_ostream::write((llvm::raw_ostream *)v1911, v283);
          if (v277[390])
            LODWORD(v1935[0]) = v277[392];
          else
            LODWORD(v1935[0]) = -1;
          llvm::raw_ostream::write((llvm::raw_ostream *)v1911, (const char *)v1935);
          if (v277[418])
            LODWORD(v1935[0]) = v277[422];
          else
            LODWORD(v1935[0]) = -1;
          llvm::raw_ostream::write((llvm::raw_ostream *)v1911, (const char *)v1935);
          if (v277[528])
            LODWORD(v1935[0]) = v277[534];
          else
            LODWORD(v1935[0]) = -1;
          llvm::raw_ostream::write((llvm::raw_ostream *)v1911, (const char *)v1935);
          if (v277[646])
            LODWORD(v1935[0]) = v277[634];
          else
            LODWORD(v1935[0]) = -1;
          llvm::raw_ostream::write((llvm::raw_ostream *)v1911, (const char *)v1935);
          if (v277[652])
            LODWORD(v1935[0]) = v277[653];
          else
            LODWORD(v1935[0]) = -1;
          llvm::raw_ostream::write((llvm::raw_ostream *)v1911, (const char *)v1935);
          if (v277[662])
            LODWORD(v1935[0]) = v277[666];
          else
            LODWORD(v1935[0]) = -1;
          llvm::raw_ostream::write((llvm::raw_ostream *)v1911, (const char *)v1935);
          if (v277[768])
            LODWORD(v1935[0]) = v277[772];
          else
            LODWORD(v1935[0]) = -1;
          llvm::raw_ostream::write((llvm::raw_ostream *)v1911, (const char *)v1935);
          if (v277[802])
            LODWORD(v1935[0]) = v277[806];
          else
            LODWORD(v1935[0]) = -1;
          llvm::raw_ostream::write((llvm::raw_ostream *)v1911, (const char *)v1935);
          v275 += 8;
          v276 -= 8;
        }
        while (v276);
      }
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v1911);
      *(_QWORD *)v1911 = 39;
      v224 = (uint64_t *)(v9 + 16);
      sub_22E74241C(*(llvm::raw_ostream **)v1778, v1791, (uint64_t)v1911, 1, __s1[0], LODWORD(__s1[1]), 0);
      if ((char **)__s1[0] != &__s1[3])
        free(__s1[0]);
    }
    v1833 = v1835;
    v1834 = 0x4000000000;
    v285 = *(unsigned int *)(v1746 + 8944);
    if ((_DWORD)v285)
    {
      v290 = *(unint64_t **)(v1746 + 8936);
      v291 = 8 * v285;
      do
      {
        v292 = sub_22E7CA3E8(v9, *v290);
        v293 = v1834;
        if (v1834 >= (unint64_t)HIDWORD(v1834))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v293 = v1834;
        }
        *((_DWORD *)v1833 + v293) = v292;
        LODWORD(v1834) = v1834 + 1;
        ++v290;
        v291 -= 8;
      }
      while (v291);
    }
    v1830 = v1832;
    v1831 = 0x4000000000;
    sub_22E74181C(*v224, 0xBu, 5u);
    v286 = *v224;
    v287 = *(_QWORD **)(*v224 + 8);
    v288 = *(_QWORD *)(*(_QWORD *)*v224 + 8);
    if (v287)
      v289 = (*(uint64_t (**)(_QWORD))(*v287 + 80))(*(_QWORD *)(*v224 + 8)) + v287[4] - v287[2];
    else
      v289 = 0;
    *(_QWORD *)(v9 + 256) = *(unsigned int *)(v286 + 24) + 8 * (v289 + v288);
    v294 = (char *)operator new(0x228uLL);
    *(_QWORD *)v294 = &unk_24FA715D0;
    *((_QWORD *)v294 + 1) = 0;
    *(_OWORD *)(v294 + 88) = 0u;
    *(_OWORD *)(v294 + 104) = 0u;
    *(_OWORD *)(v294 + 120) = 0u;
    *(_OWORD *)(v294 + 136) = 0u;
    *(_OWORD *)(v294 + 152) = 0u;
    *(_OWORD *)(v294 + 168) = 0u;
    *(_OWORD *)(v294 + 184) = 0u;
    *(_OWORD *)(v294 + 200) = 0u;
    *(_OWORD *)(v294 + 216) = 0u;
    *(_OWORD *)(v294 + 232) = 0u;
    *(_OWORD *)(v294 + 248) = 0u;
    *(_OWORD *)(v294 + 264) = 0u;
    *(_OWORD *)(v294 + 280) = 0u;
    *(_OWORD *)(v294 + 296) = 0u;
    *(_OWORD *)(v294 + 312) = 0u;
    *(_OWORD *)(v294 + 328) = 0u;
    *(_OWORD *)(v294 + 344) = 0u;
    *(_OWORD *)(v294 + 360) = 0u;
    *(_OWORD *)(v294 + 376) = 0u;
    *(_OWORD *)(v294 + 392) = 0u;
    *(_OWORD *)(v294 + 408) = 0u;
    *(_OWORD *)(v294 + 424) = 0u;
    *(_OWORD *)(v294 + 440) = 0u;
    *(_OWORD *)(v294 + 456) = 0u;
    *(_OWORD *)(v294 + 472) = 0u;
    *(_OWORD *)(v294 + 488) = 0u;
    *(_OWORD *)(v294 + 504) = 0u;
    *(_OWORD *)(v294 + 520) = 0u;
    *(_OWORD *)(v294 + 536) = 0u;
    *(_OWORD *)(v294 + 40) = xmmword_22F45E070;
    *((_QWORD *)v294 + 2) = 0;
    *((_QWORD *)v294 + 3) = v294 + 40;
    *(_OWORD *)(v294 + 56) = xmmword_22F45E250;
    v295 = *(_QWORD *)(v9 + 16);
    *(_OWORD *)(v294 + 72) = xmmword_22F45FB70;
    *((_QWORD *)v294 + 4) = 0x2000000003;
    __s1[0] = v294 + 24;
    __s1[1] = v294;
    *(_DWORD *)(v9 + 1816) = sub_22E74761C(v295, (uint64_t)__s1);
    v296 = (std::__shared_weak_count *)__s1[1];
    if (__s1[1])
    {
      v297 = (unint64_t *)(__s1[1] + 8);
      do
        v298 = __ldaxr(v297);
      while (__stlxr(v298 - 1, v297));
      if (!v298)
      {
        ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
        std::__shared_weak_count::__release_weak(v296);
      }
    }
    v299 = (char *)operator new(0x228uLL);
    *(_QWORD *)v299 = &unk_24FA715D0;
    *((_QWORD *)v299 + 1) = 0;
    *(_OWORD *)(v299 + 328) = 0u;
    *(_OWORD *)(v299 + 344) = 0u;
    *(_OWORD *)(v299 + 360) = 0u;
    *(_OWORD *)(v299 + 376) = 0u;
    *(_OWORD *)(v299 + 392) = 0u;
    *(_OWORD *)(v299 + 408) = 0u;
    *(_OWORD *)(v299 + 424) = 0u;
    *(_OWORD *)(v299 + 440) = 0u;
    *(_OWORD *)(v299 + 456) = 0u;
    *(_OWORD *)(v299 + 472) = 0u;
    *(_OWORD *)(v299 + 488) = 0u;
    *(_OWORD *)(v299 + 504) = 0u;
    *(_OWORD *)(v299 + 40) = xmmword_22F45FB80;
    *(_OWORD *)(v299 + 520) = 0u;
    *(_OWORD *)(v299 + 536) = 0u;
    *((_QWORD *)v299 + 2) = 0;
    *((_QWORD *)v299 + 3) = v299 + 40;
    *(_OWORD *)(v299 + 56) = xmmword_22F45E250;
    *(_OWORD *)(v299 + 72) = xmmword_22F45E160;
    *(_OWORD *)(v299 + 88) = xmmword_22F45FB90;
    *(_OWORD *)(v299 + 104) = xmmword_22F45FB90;
    *(_OWORD *)(v299 + 120) = xmmword_22F45FBA0;
    *(_OWORD *)(v299 + 136) = xmmword_22F45FB90;
    *(_OWORD *)(v299 + 152) = xmmword_22F45FB90;
    *(_OWORD *)(v299 + 168) = xmmword_22F45FB90;
    *(_OWORD *)(v299 + 184) = xmmword_22F45E160;
    *(_OWORD *)(v299 + 200) = xmmword_22F45FB90;
    *(_OWORD *)(v299 + 216) = xmmword_22F45FB90;
    *(_OWORD *)(v299 + 232) = xmmword_22F45FB90;
    *(_OWORD *)(v299 + 248) = xmmword_22F45FB90;
    *((_QWORD *)v299 + 33) = 0;
    *((_OWORD *)v299 + 17) = xmmword_22F45FBB0;
    *((_OWORD *)v299 + 18) = xmmword_22F45F9F0;
    v300 = *(_QWORD *)(v9 + 16);
    *((int64x2_t *)v299 + 19) = vdupq_n_s64(6uLL);
    *((_QWORD *)v299 + 40) = 4;
    *((_DWORD *)v299 + 8) = 18;
    *((_DWORD *)v299 + 9) = 32;
    *(_QWORD *)v1911 = v299 + 24;
    *(_QWORD *)&v1911[8] = v299;
    *(_DWORD *)(v9 + 1820) = sub_22E74761C(v300, (uint64_t)v1911);
    v301 = *(std::__shared_weak_count **)&v1911[8];
    if (*(_QWORD *)&v1911[8])
    {
      v302 = (unint64_t *)(*(_QWORD *)&v1911[8] + 8);
      do
        v303 = __ldaxr(v302);
      while (__stlxr(v303 - 1, v302));
      if (!v303)
      {
        ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
        std::__shared_weak_count::__release_weak(v301);
      }
    }
    sub_22E7FA030(v9);
    v1741 = v9 + 688;
    v304 = v9 + 296;
    v305 = *(_QWORD *)(v9 + 712);
    v306 = *(_QWORD *)(v9 + 720);
    do
    {
      if (v305 != v306)
      {
        memset(&v1935[3], 0, 24);
        memset(__s1, 0, 20);
        memset(v1935, 0, 20);
        sub_22F2841C4((uint64_t)v1935, v1741);
        sub_22F2841C4(v1741, (uint64_t)__s1);
        llvm::deallocate_buffer((llvm *)__s1[0], (void *)(16 * LODWORD(__s1[2])));
        v335 = *(_QWORD *)(v9 + 712);
        v336 = v1935[5];
        v337 = *(_OWORD *)(v9 + 720);
        v338 = *(_OWORD *)&v1935[3];
        v1935[3] = (llvm *)v335;
        *(_OWORD *)(v9 + 712) = v338;
        *(_OWORD *)&v1935[4] = v337;
        *(_QWORD *)(v9 + 728) = v336;
        v339 = v337;
        v1749 = v337;
        while (v335 != v339)
        {
          v340 = *(_QWORD *)v335;
          __s1[0] = (char *)&__s1[2];
          __s1[1] = (char *)0x4000000000;
          *(_QWORD *)v1911 = *(_QWORD *)(v9 + 40);
          *(_QWORD *)&v1911[8] = v9;
          *(_QWORD *)&v1911[16] = __s1;
          *(_QWORD *)&v1911[24] = &v1913;
          v1912 = 0x1000000000;
          v1920 = v1922;
          v1921 = 0x800000000;
          v341 = *(unsigned int *)(v335 + 16);
          if ((_DWORD)v341)
          {
            v342 = 0;
            v343 = *(unsigned int **)(v335 + 8);
            v344 = &v343[4 * v341];
            v1764 = v340 + 64;
LABEL_518:
            v1750 = v342;
            do
            {
              v345 = *v343;
              if ((_DWORD)v345 == 3)
              {
                v343 += 4;
                v342 = 1;
                if (v343 != v344)
                  goto LABEL_518;
                goto LABEL_648;
              }
              v346 = *(_QWORD *)&v1911[16];
              v347 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
              if (v347 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v347 = *(unsigned int *)(v346 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v346 + 8 * v347) = v345;
              ++*(_DWORD *)(v346 + 8);
              switch((int)v345)
              {
                case 0:
                case 1:
                case 2:
                  v348 = sub_22E7CA3E8(v9, *((_QWORD *)v343 + 1));
                  goto LABEL_588;
                case 4:
                  if ((*(_DWORD *)(v340 + 28) & 0x7F) == 0x40)
                    v367 = 0;
                  else
                    v367 = (*(unsigned __int8 *)(v340 + 97) >> 5) & 1;
                  v413 = *(_QWORD *)&v1911[16];
                  v414 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                  if (v414 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v414 = *(unsigned int *)(v413 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v413 + 8 * v414) = v367;
                  ++*(_DWORD *)(v413 + 8);
                  if ((*(_DWORD *)(v340 + 28) & 0x7F) == 0x40)
                    v415 = 0;
                  else
                    v415 = (*(unsigned __int8 *)(v340 + 97) >> 6) & 1;
                  v416 = *(_QWORD *)&v1911[16];
                  v417 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                  if (v417 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v417 = *(unsigned int *)(v416 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v416 + 8 * v417) = v415;
                  ++*(_DWORD *)(v416 + 8);
                  sub_22E7E2024((uint64_t)v1911, v340);
                  goto LABEL_629;
                case 5:
                  sub_22E7C9A94(*(uint64_t *)&v1911[8], v343[2], *(uint64_t *)&v1911[16]);
                  goto LABEL_629;
                case 6:
                  *(_QWORD *)&v1886 = sub_22EFCC008(v1764);
                  sub_22E7CBFA4(v9 + 920, (uint64_t *)&v1886);
                  v395 = *(_QWORD *)(v340 + 72);
                  v396 = *(_QWORD *)&v1911[16];
                  v397 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                  if (v397 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v397 = *(unsigned int *)(v396 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v396 + 8 * v397) = (v395 >> 34) & 1;
                  ++*(_DWORD *)(v396 + 8);
                  v398 = *(_QWORD *)(v340 + 72);
                  v399 = *(_QWORD *)&v1911[16];
                  v400 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                  if (v400 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v400 = *(unsigned int *)(v399 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v399 + 8 * v400) = (v398 >> 35) & 3;
                  ++*(_DWORD *)(v399 + 8);
                  sub_22E7E2164((uint64_t)v1911, v340);
                  v402 = sub_22E7CA6B4(v9, v401, v1764);
                  sub_22E7E37E0((uint64_t)v1911, v402);
                  v403 = *(_QWORD *)(v340 + 136);
                  if ((v403 & 4) != 0 && (v404 = v403 & 0xFFFFFFFFFFFFFFF8, (v403 & 0xFFFFFFFFFFFFFFF8) != 0))
                  {
                    v405 = *(_QWORD *)v404;
                    v406 = *(_QWORD *)&v1911[16];
                    v407 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                    if (v407 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v407 = *(unsigned int *)(v406 + 8);
                    }
                    *(_QWORD *)(*(_QWORD *)v406 + 8 * v407) = ((v405 >> 1) & 3) + 1;
                    ++*(_DWORD *)(v406 + 8);
                    sub_22E7C9A94(*(uint64_t *)&v1911[8], *(_DWORD *)(v404 + 8), *(uint64_t *)&v1911[16]);
                  }
                  else
                  {
                    v418 = sub_22EFD5760(v340);
                    v419 = *(_QWORD *)&v1911[16];
                    v420 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                    if (v420 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v420 = *(unsigned int *)(v419 + 8);
                    }
                    *(_QWORD *)(*(_QWORD *)v419 + 8 * v420) = v418;
                    ++*(_DWORD *)(v419 + 8);
                    sub_22E7C9A94(*(uint64_t *)&v1911[8], *(_DWORD *)(v340 + 176), *(uint64_t *)&v1911[16]);
                    if ((*(_BYTE *)(v340 + 180) & 5) == 0)
                      goto LABEL_631;
                    v421 = *(_QWORD *)(v340 + 152);
                    v422 = v421 & 0xFFFFFFFFFFFFFFF8;
                    if ((v421 & 4) != 0 && v422)
                      v422 = *(_QWORD *)v422 | 4;
                    if ((v422 & 4) != 0 && (v423 = v422 & 0xFFFFFFFFFFFFFFF8, (v422 & 0xFFFFFFFFFFFFFFF8) != 0))
                    {
                      v424 = *(_QWORD *)&v1911[16];
                      v425 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                      if (v425 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        v425 = *(unsigned int *)(v424 + 8);
                      }
                      *(_QWORD *)(*(_QWORD *)v424 + 8 * v425) = 1;
                      ++*(_DWORD *)(v424 + 8);
                      sub_22E7CA8EC(*(uint64_t *)&v1911[8], v423, *(uint64_t *)&v1911[16]);
                      v426 = *(_QWORD *)(v340 + 152) & 0xFFFFFFFFFFFFFFF8;
                      if (v426)
                        v427 = (*(_QWORD *)(v340 + 152) & 4) == 0;
                      else
                        v427 = 1;
                      v428 = (uint64_t *)(v426 + 8);
                      if (v427)
                        v428 = (uint64_t *)(v340 + 168);
                      sub_22E7E3894((uint64_t)v1911, *v428);
                    }
                    else
                    {
LABEL_631:
                      v441 = *(_QWORD *)&v1911[16];
                      v442 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                      if (v442 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        v442 = *(unsigned int *)(v441 + 8);
                      }
                      *(_QWORD *)(*(_QWORD *)v441 + 8 * v442) = 0;
                      ++*(_DWORD *)(v441 + 8);
                    }
                  }
                  v443 = *(_DWORD *)(v340 + 72);
                  v444 = *(_QWORD *)&v1911[16];
                  v445 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                  if (v445 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v445 = *(unsigned int *)(v444 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v444 + 8 * v445) = (unsigned __int16)v443 >> 13;
                  ++*(_DWORD *)(v444 + 8);
                  sub_22E7C9A94(*(uint64_t *)&v1911[8], *(_DWORD *)(v340 + 24), *(uint64_t *)&v1911[16]);
                  sub_22E7C9A94(*(uint64_t *)&v1911[8], *(_DWORD *)(v340 + 56), *(uint64_t *)&v1911[16]);
                  v446 = *(_QWORD *)&v1911[8];
                  v447 = *(_QWORD *)&v1911[16];
                  v448 = HIDWORD(*(_QWORD *)(v340 + 112));
                  sub_22E7C9A94(*(uint64_t *)&v1911[8], *(_QWORD *)(v340 + 112), *(uint64_t *)&v1911[16]);
                  sub_22E7C9A94(v446, v448, v447);
                  v449 = *(unsigned int *)(v340 + 28);
                  v450 = *(_QWORD *)&v1911[16];
                  v451 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                  if (v451 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v451 = *(unsigned int *)(v450 + 8);
                  }
                  v224 = (uint64_t *)(v9 + 16);
                  *(_QWORD *)(*(_QWORD *)v450 + 8 * v451) = (v449 >> 8) & 1;
                  ++*(_DWORD *)(v450 + 8);
                  if ((*(_BYTE *)(v340 + 29) & 1) == 0)
                    goto LABEL_629;
                  sub_22EFC8E88(v340);
                  v408 = *(uint64_t **)v452;
                  v409 = *(unsigned int *)(v452 + 8);
                  goto LABEL_640;
                case 7:
                  v360 = sub_22EFBC5B4(*((_QWORD *)v343 + 1));
                  v361 = v360;
                  if (v360 && (*(_BYTE *)v360 & 0xFE) == 0xAC)
                    v361 = *(_QWORD *)(v360 + 16);
                  v362 = v1912;
                  if (v1912 >= (unint64_t)HIDWORD(v1912))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v362 = v1912;
                  }
                  *(_QWORD *)(*(_QWORD *)&v1911[24] + 8 * v362) = v361;
                  goto LABEL_575;
                case 8:
                  v363 = *((_QWORD *)v343 + 1);
                  v364 = *(_QWORD *)(v363 + 72) & 3;
                  if ((_DWORD)v364)
                    v365 = (_DWORD)v364 == 3;
                  else
                    v365 = 1;
                  if (v365)
                  {
                    v366 = 0;
                  }
                  else
                  {
                    v366 = (_QWORD *)(*(_QWORD *)(v363 + 72) & 0xFFFFFFFFFFFFFFFCLL);
                    if ((*(_BYTE *)(v363 + 68) & 1) != 0)
                      v366 = (_QWORD *)*v366;
                  }
                  goto LABEL_572;
                case 9:
                  sub_22E7CA8EC(*(uint64_t *)&v1911[8], *((_QWORD *)v343 + 1), *(uint64_t *)&v1911[16]);
                  v366 = *(_QWORD **)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v340 + 32))(v340) + 168);
LABEL_572:
                  v394 = v1912;
                  if (v1912 >= (unint64_t)HIDWORD(v1912))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v394 = v1912;
                  }
                  *(_QWORD *)(*(_QWORD *)&v1911[24] + 8 * v394) = v366;
LABEL_575:
                  LODWORD(v1912) = v1912 + 1;
                  goto LABEL_629;
                case 10:
                  v392 = *(_QWORD *)(*(_QWORD *)(v340 + 48) & 0xFFFFFFFFFFFFFFF0);
                  if (v392)
                    v393 = *(_BYTE *)(v392 + 16) == 26;
                  else
                    v393 = 0;
                  if (!v393)
                    v392 = sub_22F10CF48(v392);
                  sub_22E49F4DC(v392, (uint64_t)&v1886);
                  sub_22E7E394C((uint64_t)v1911, (unsigned int *)&v1886);
                  goto LABEL_629;
                case 11:
                  v348 = sub_22E7E3AA4(v9, *((_QWORD *)v343 + 1));
                  goto LABEL_588;
                case 13:
                case 14:
                  v349 = v343[2];
                  v350 = *(_QWORD *)&v1911[16];
                  v351 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                  if (v351 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v351 = *(unsigned int *)(v350 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v350 + 8 * v351) = v349;
                  ++*(_DWORD *)(v350 + 8);
                  goto LABEL_629;
                case 15:
                  sub_22EFC8E88(v340);
                  v353 = *v352;
                  v354 = *((unsigned int *)v352 + 2);
                  if ((_DWORD)v354 && *(_WORD *)(*v353 + 32) != 247)
                  {
                    v355 = 8 * v354 - 8;
                    v356 = *v352;
                    do
                    {
                      v357 = v356[1];
                      ++v356;
                      v355 -= 8;
                    }
                    while (*(_WORD *)(v357 + 32) != 247);
                  }
                  do
                  {
                    v359 = *v353++;
                    v358 = v359;
                  }
                  while (*(_WORD *)(v359 + 32) != 247);
                  goto LABEL_564;
                case 16:
                  if ((*(_BYTE *)(v340 + 29) & 1) == 0)
                    goto LABEL_619;
                  sub_22EFC8E88(v340);
                  v369 = *(uint64_t **)v368;
                  v370 = *(unsigned int *)(v368 + 8);
                  v371 = *(uint64_t **)v368;
                  if (!(_DWORD)v370)
                    goto LABEL_616;
                  v372 = 8 * v370;
                  v371 = *(uint64_t **)v368;
                  break;
                case 17:
                  sub_22EFC8E88(v340);
                  v374 = *v373;
                  v375 = *((unsigned int *)v373 + 2);
                  if ((_DWORD)v375 && *(_WORD *)(*v374 + 32) != 245)
                  {
                    v376 = 8 * v375 - 8;
                    v377 = *v373;
                    do
                    {
                      v378 = v377[1];
                      ++v377;
                      v376 -= 8;
                    }
                    while (*(_WORD *)(v378 + 32) != 245);
                  }
                  do
                  {
                    v380 = *v374++;
                    v379 = v380;
                  }
                  while (*(_WORD *)(v380 + 32) != 245);
                  v381 = *(unsigned int *)(v379 + 36);
                  v382 = *(_QWORD *)&v1911[16];
                  v383 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                  if (v383 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v383 = *(unsigned int *)(v382 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v382 + 8 * v383) = v381;
                  ++*(_DWORD *)(v382 + 8);
                  sub_22EFC8E88(v340);
                  v385 = *v384;
                  v386 = *((unsigned int *)v384 + 2);
                  if ((_DWORD)v386 && *(_WORD *)(*v385 + 32) != 245)
                  {
                    v387 = 8 * v386 - 8;
                    v388 = *v384;
                    do
                    {
                      v389 = v388[1];
                      ++v388;
                      v387 -= 8;
                    }
                    while (*(_WORD *)(v389 + 32) != 245);
                  }
                  do
                  {
                    v390 = *v385++;
                    v358 = v390;
                  }
                  while (*(_WORD *)(v390 + 32) != 245);
LABEL_564:
                  v391 = *(_QWORD *)(v358 + 16);
                  goto LABEL_627;
                case 18:
                  v348 = sub_22E7CA298(v9, *((_QWORD *)v343 + 1));
LABEL_588:
                  v410 = v348;
                  v411 = *(_QWORD *)&v1911[16];
                  v412 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
                  if (v412 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v412 = *(unsigned int *)(v411 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v411 + 8 * v412) = v410;
                  ++*(_DWORD *)(v411 + 8);
                  goto LABEL_628;
                case 19:
                  *(_QWORD *)&v1886 = *((_QWORD *)v343 + 1);
                  v408 = (uint64_t *)&v1886;
                  v409 = 1;
LABEL_640:
                  sub_22E7D2ED0((uint64_t)v1911, v408, v409);
                  goto LABEL_629;
                default:
                  goto LABEL_629;
              }
              while (*(_WORD *)(*v371 + 32) != 243)
              {
                ++v371;
                v372 -= 8;
                if (!v372)
                  goto LABEL_619;
              }
LABEL_616:
              if (v371 == &v369[v370])
              {
LABEL_619:
                v429 = 0;
                goto LABEL_620;
              }
              do
              {
                v430 = *v369++;
                v429 = v430;
              }
              while (*(_WORD *)(v430 + 32) != 243);
LABEL_620:
              v431 = *(unsigned int *)(v429 + 36);
              v432 = *(_QWORD *)&v1911[16];
              v433 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
              if (v433 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v433 = *(unsigned int *)(v432 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v432 + 8 * v433) = v431;
              ++*(_DWORD *)(v432 + 8);
              v434 = *(_QWORD *)(v429 + 40);
              v435 = v1912;
              if (v1912 >= (unint64_t)HIDWORD(v1912))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v435 = v1912;
              }
              *(_QWORD *)(*(_QWORD *)&v1911[24] + 8 * v435) = v434;
              v436 = v1912 + 1;
              LODWORD(v1912) = v436;
              v437 = *(_QWORD *)(v429 + 48);
              if (v436 >= HIDWORD(v1912))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v436 = v1912;
              }
              *(_QWORD *)(*(_QWORD *)&v1911[24] + 8 * v436) = v437;
              LODWORD(v1912) = v1912 + 1;
              v391 = *(_QWORD *)(v429 + 16);
LABEL_627:
              v438 = *(_QWORD *)&v1911[8];
              v439 = *(_QWORD *)&v1911[16];
              v440 = HIDWORD(v391);
              sub_22E7C9A94(*(uint64_t *)&v1911[8], v391, *(uint64_t *)&v1911[16]);
              sub_22E7C9A94(v438, v440, v439);
LABEL_628:
              v224 = (uint64_t *)(v9 + 16);
LABEL_629:
              v343 += 4;
            }
            while (v343 != v344);
            if ((v1750 & 1) == 0)
              goto LABEL_653;
LABEL_648:
            v453 = *(_QWORD *)&v1911[16];
            v454 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
            if (v454 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v454 = *(unsigned int *)(v453 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v453 + 8 * v454) = 3;
            ++*(_DWORD *)(v453 + 8);
            v455 = *(_QWORD *)(v340 + 80);
            v456 = *(_QWORD *)&v1911[16];
            v457 = *(unsigned int *)(*(_QWORD *)&v1911[16] + 8);
            if (v457 >= *(unsigned int *)(*(_QWORD *)&v1911[16] + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v457 = *(unsigned int *)(v456 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v456 + 8 * v457) = (v455 >> 16) & 1;
            ++*(_DWORD *)(v456 + 8);
            sub_22E7C9A94(*(uint64_t *)&v1911[8], *(_DWORD *)(v340 + 64), *(uint64_t *)&v1911[16]);
            sub_22E7F4AE4((uint64_t)v1911, v340);
          }
LABEL_653:
          v458 = sub_22E7CA3E8(v9, v340);
          v459 = v1831;
          if (v1831 >= (unint64_t)HIDWORD(v1831))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v459 = v1831;
          }
          *((_QWORD *)v1830 + v459) = v458;
          LODWORD(v1831) = v1831 + 1;
          v460 = sub_22E7CA950((uint64_t)v1911, 0x31u, 0);
          v461 = v1831;
          if (v1831 >= (unint64_t)HIDWORD(v1831))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v461 = v1831;
          }
          *((_QWORD *)v1830 + v461) = v460;
          LODWORD(v1831) = v1831 + 1;
          if (v1920 != v1922)
            free(v1920);
          if (*(__int128 **)&v1911[24] != &v1913)
            free(*(void **)&v1911[24]);
          if ((char **)__s1[0] != &__s1[2])
            free(__s1[0]);
          v335 += 40;
          v339 = v1749;
        }
        sub_22F2BBB70((uint64_t)v1935);
LABEL_665:
        v304 = v9 + 296;
      }
      while (1)
      {
        v307 = *(_QWORD *)(v9 + 192);
        if (!v307)
          break;
        v308 = *(void ***)(v9 + 160);
        v309 = *(_QWORD *)(v9 + 184);
        v310 = *(uint64_t *)((char *)v308 + ((v309 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v309;
        v311 = *(_QWORD *)v310;
        v312 = *(unsigned __int8 *)(v310 + 8);
        *(_QWORD *)(v9 + 184) = ++v309;
        *(_QWORD *)(v9 + 192) = v307 - 1;
        if (v309 >= 0x200)
        {
          operator delete(*v308);
          *(_QWORD *)(v9 + 160) += 8;
          *(_QWORD *)(v9 + 184) -= 256;
        }
        if (v312)
        {
          *(_QWORD *)&v1886 = v311;
          v313 = sub_22E7EE5E0(v304, (uint64_t *)&v1886);
          v314 = *(_DWORD *)(v313 + 8);
          if (!v314)
          {
            v314 = *(_DWORD *)(v9 + 292);
            *(_DWORD *)(v9 + 292) = v314 + 1;
            *(_DWORD *)(v313 + 8) = v314;
          }
          __s1[0] = (char *)v9;
          __s1[1] = (char *)&__s1[3];
          __s1[2] = (char *)0x4000000000;
          v1903[0] = *(_QWORD *)(v9 + 40);
          v1903[1] = v9;
          v1904 = &__s1[1];
          v1905 = v1907;
          v1906 = 0x1000000000;
          v1908 = v1910;
          v315 = (uint64_t *)(v311 & 0xFFFFFFFFFFFFFFF0);
          v1909 = 0x800000000;
          if ((v311 & 8) == 0)
          {
            v316 = *v315;
            v1935[0] = (llvm *)v1903;
            __asm { BR              X9 }
          }
          v317 = *(_QWORD *)((v311 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          sub_22E7E1FB4(v9, *v315 & 0xFFFFFFFFFFFFFFF0, (uint64_t)&__s1[1]);
          v318 = v1904;
          v319 = *((unsigned int *)v1904 + 2);
          if (v319 >= *((unsigned int *)v1904 + 3))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v319 = *((unsigned int *)v318 + 2);
          }
          *(_QWORD *)&(*v318)[8 * v319] = v317 | v311 & 7;
          ++*((_DWORD *)v318 + 2);
          v320 = sub_22E7CA950((uint64_t)v1903, 1u, *((_DWORD *)__s1[0] + 454));
          v321 = *(_QWORD *)(v9 + 256);
          if (v1908 != v1910)
            free(v1908);
          if (v1905 != v1907)
            free(v1905);
          if ((char **)__s1[1] != &__s1[3])
            free(__s1[1]);
          v322 = v320 - v321;
          v323 = (v314 - *(_DWORD *)(v9 + 288));
          v325 = *(char **)(v9 + 320);
          v324 = *(char **)(v9 + 328);
          v326 = (v324 - v325) >> 3;
          if (v326 != v323)
          {
            v462 = (v323 + 1);
            v463 = v462 - v326;
            if (v462 <= v326)
            {
              if (v462 < v326)
                *(_QWORD *)(v9 + 328) = &v325[8 * v462];
            }
            else
            {
              v464 = *(_QWORD *)(v9 + 336);
              if (v463 <= (v464 - (uint64_t)v324) >> 3)
              {
                bzero(*(void **)(v9 + 328), 8 * v463);
                *(_QWORD *)(v9 + 328) = &v324[8 * v463];
              }
              else
              {
                v465 = v464 - (_QWORD)v325;
                v466 = v465 >> 2;
                if (v465 >> 2 <= v462)
                  v466 = (v323 + 1);
                v467 = (unint64_t)v465 >= 0x7FFFFFFFFFFFFFF8;
                v468 = 0x1FFFFFFFFFFFFFFFLL;
                if (!v467)
                  v468 = v466;
                v1765 = v468;
                if (v468 >> 61)
                  goto LABEL_2503;
                v1751 = (char *)operator new(8 * v468);
                v469 = &v1751[8 * v326];
                bzero(v469, 8 * v463);
                if (v324 != v325)
                {
                  do
                  {
                    v470 = *((_QWORD *)v324 - 1);
                    v324 -= 8;
                    *((_QWORD *)v469 - 1) = v470;
                    v469 -= 8;
                  }
                  while (v324 != v325);
                  v324 = *(char **)(v9 + 320);
                }
                *(_QWORD *)(v9 + 320) = v469;
                *(_QWORD *)(v9 + 328) = &v1751[8 * v462];
                *(_QWORD *)(v9 + 336) = &v1751[8 * v1765];
                if (v324)
                  operator delete(v324);
              }
              v325 = *(char **)(v9 + 320);
            }
            *(_QWORD *)&v325[8 * v323] = v322;
            v224 = (uint64_t *)(v9 + 16);
            goto LABEL_665;
          }
          v327 = *(_QWORD *)(v9 + 336);
          if ((unint64_t)v324 >= v327)
          {
            v329 = v327 - (_QWORD)v325;
            if (v329 >> 2 <= v326 + 1)
              v330 = v326 + 1;
            else
              v330 = v329 >> 2;
            if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFF8)
              v331 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v331 = v330;
            if (v331 >> 61)
              goto LABEL_2503;
            v332 = (char *)operator new(8 * v331);
            v333 = &v332[8 * v326];
            *(_QWORD *)v333 = v322;
            v328 = v333 + 8;
            while (v324 != v325)
            {
              v334 = *((_QWORD *)v324 - 1);
              v324 -= 8;
              *((_QWORD *)v333 - 1) = v334;
              v333 -= 8;
            }
            *(_QWORD *)(v9 + 320) = v333;
            *(_QWORD *)(v9 + 328) = v328;
            *(_QWORD *)(v9 + 336) = &v332[8 * v331];
            if (v325)
              operator delete(v325);
            v224 = (uint64_t *)(v9 + 16);
          }
          else
          {
            *(_QWORD *)v324 = v322;
            v328 = v324 + 8;
          }
          *(_QWORD *)(v9 + 328) = v328;
        }
        else
        {
          sub_22E7FB90C(v9, v1771, v311);
        }
      }
      v305 = *(_QWORD *)(v9 + 712);
      v306 = *(_QWORD *)(v9 + 720);
    }
    while (v305 != v306);
    sub_22E7416F4(*(_QWORD *)(v9 + 16));
    *(_BYTE *)(v9 + 122) = 1;
    v471 = (char *)operator new(0x228uLL);
    *(_QWORD *)v471 = &unk_24FA715D0;
    *((_QWORD *)v471 + 1) = 0;
    *(_OWORD *)(v471 + 104) = 0u;
    *(_OWORD *)(v471 + 120) = 0u;
    *(_OWORD *)(v471 + 136) = 0u;
    *(_OWORD *)(v471 + 152) = 0u;
    *(_OWORD *)(v471 + 168) = 0u;
    *(_OWORD *)(v471 + 184) = 0u;
    *(_OWORD *)(v471 + 200) = 0u;
    *(_OWORD *)(v471 + 216) = 0u;
    *(_OWORD *)(v471 + 232) = 0u;
    *(_OWORD *)(v471 + 248) = 0u;
    *(_OWORD *)(v471 + 264) = 0u;
    *(_OWORD *)(v471 + 280) = 0u;
    *(_OWORD *)(v471 + 296) = 0u;
    *(_OWORD *)(v471 + 312) = 0u;
    *(_OWORD *)(v471 + 328) = 0u;
    *(_OWORD *)(v471 + 344) = 0u;
    *(_OWORD *)(v471 + 360) = 0u;
    *(_OWORD *)(v471 + 376) = 0u;
    *(_OWORD *)(v471 + 392) = 0u;
    *(_OWORD *)(v471 + 408) = 0u;
    *(_OWORD *)(v471 + 424) = 0u;
    *(_OWORD *)(v471 + 440) = 0u;
    *(_OWORD *)(v471 + 456) = 0u;
    *(_OWORD *)(v471 + 472) = 0u;
    *(_OWORD *)(v471 + 488) = 0u;
    *(_OWORD *)(v471 + 504) = 0u;
    *(_OWORD *)(v471 + 520) = 0u;
    *(_OWORD *)(v471 + 536) = 0u;
    *(_OWORD *)(v471 + 40) = xmmword_22F45E070;
    *((_QWORD *)v471 + 2) = 0;
    *((_QWORD *)v471 + 3) = v471 + 40;
    *(_OWORD *)(v471 + 56) = xmmword_22F45E080;
    *(_OWORD *)(v471 + 72) = xmmword_22F45E080;
    v472 = *(_QWORD *)(v9 + 16);
    *(_OWORD *)(v471 + 88) = xmmword_22F45E0D0;
    *((_QWORD *)v471 + 4) = 0x2000000004;
    *(_QWORD *)v1911 = v471 + 24;
    *(_QWORD *)&v1911[8] = v471;
    v473 = sub_22E74761C(v472, (uint64_t)v1911);
    v474 = v473;
    v475 = *(std::__shared_weak_count **)&v1911[8];
    if (*(_QWORD *)&v1911[8])
    {
      v476 = (unint64_t *)(*(_QWORD *)&v1911[8] + 8);
      do
        v477 = __ldaxr(v476);
      while (__stlxr(v477 - 1, v476));
      if (!v477)
      {
        ((void (*)(std::__shared_weak_count *))v475->__on_zero_shared)(v475);
        std::__shared_weak_count::__release_weak(v475);
      }
    }
    v478 = *(char **)(v9 + 320);
    v479 = (char *)(*(_DWORD *)(v9 + 288) - 300);
    v480 = *(_QWORD *)(v9 + 328) - (_QWORD)v478;
    __s1[0] = (char *)1;
    __s1[1] = (char *)(v480 >> 3);
    __s1[2] = v479;
    if (v480)
      v481 = v478;
    else
      v481 = 0;
    if (v480)
      v482 = v480;
    else
      v482 = 0;
    sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v474, (uint64_t)__s1, 3, v481, v482, 0);
    v483 = (char *)operator new(0x228uLL);
    *(_QWORD *)v483 = &unk_24FA715D0;
    *((_QWORD *)v483 + 1) = 0;
    *(_OWORD *)(v483 + 104) = 0u;
    *(_OWORD *)(v483 + 120) = 0u;
    *(_OWORD *)(v483 + 136) = 0u;
    *(_OWORD *)(v483 + 152) = 0u;
    *(_OWORD *)(v483 + 168) = 0u;
    *(_OWORD *)(v483 + 184) = 0u;
    *(_OWORD *)(v483 + 200) = 0u;
    *(_OWORD *)(v483 + 216) = 0u;
    *(_OWORD *)(v483 + 232) = 0u;
    *(_OWORD *)(v483 + 248) = 0u;
    *(_OWORD *)(v483 + 264) = 0u;
    *(_OWORD *)(v483 + 280) = 0u;
    *(_OWORD *)(v483 + 296) = 0u;
    *(_OWORD *)(v483 + 312) = 0u;
    *(_OWORD *)(v483 + 328) = 0u;
    *(_OWORD *)(v483 + 344) = 0u;
    *(_OWORD *)(v483 + 360) = 0u;
    *(_OWORD *)(v483 + 376) = 0u;
    *(_OWORD *)(v483 + 392) = 0u;
    *(_OWORD *)(v483 + 408) = 0u;
    *(_OWORD *)(v483 + 424) = 0u;
    *(_OWORD *)(v483 + 440) = 0u;
    *(_OWORD *)(v483 + 456) = 0u;
    *(_OWORD *)(v483 + 472) = 0u;
    *(_OWORD *)(v483 + 488) = 0u;
    *(_OWORD *)(v483 + 504) = 0u;
    *(_OWORD *)(v483 + 520) = 0u;
    *(_OWORD *)(v483 + 536) = 0u;
    *(_OWORD *)(v483 + 40) = xmmword_22F45E090;
    *((_QWORD *)v483 + 2) = 0;
    *((_QWORD *)v483 + 3) = v483 + 40;
    *(_OWORD *)(v483 + 56) = xmmword_22F45E080;
    *(_OWORD *)(v483 + 72) = xmmword_22F45E080;
    v484 = *(_QWORD *)(v9 + 16);
    *(_OWORD *)(v483 + 88) = xmmword_22F45E0D0;
    *((_QWORD *)v483 + 4) = 0x2000000004;
    v1935[0] = (llvm *)(v483 + 24);
    v1935[1] = (llvm *)v483;
    v485 = sub_22E74761C(v484, (uint64_t)v1935);
    v486 = (std::__shared_weak_count *)v1935[1];
    if (v1935[1])
    {
      v487 = (unint64_t *)((char *)v1935[1] + 8);
      do
        v488 = __ldaxr(v487);
      while (__stlxr(v488 - 1, v487));
      if (!v488)
      {
        ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
        std::__shared_weak_count::__release_weak(v486);
      }
    }
    v489 = *(char **)(v9 + 232);
    v490 = *(_QWORD *)(v9 + 240) - (_QWORD)v489;
    v491 = (char *)(*(_DWORD *)(v9 + 200) - 18);
    __s1[0] = (char *)2;
    __s1[1] = (char *)(0xAAAAAAAAAAAAAAABLL * (v490 >> 2));
    __s1[2] = v491;
    if (v490)
      v492 = v489;
    else
      v492 = 0;
    if (v490)
      v493 = v490;
    else
      v493 = 0;
    sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v485, (uint64_t)__s1, 3, v492, v493, 0);
    if ((_DWORD)v1831)
      sub_22E742038((llvm::raw_ostream *)*v224, 0x1Du, (uint64_t)&v1830, 0);
    __s1[0] = (char *)&__s1[2];
    __s1[1] = (char *)0x4000000000;
    v494 = *(_DWORD *)(v9 + 272);
    if (v494 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v494 = *(_DWORD *)(v9 + 272);
    }
    v495 = *(_QWORD *)(v9 + 264);
    v496 = *(unsigned int *)(v9 + 280);
    v497 = (unsigned int *)(v495 + 16 * v496);
    if (v494)
    {
      if ((_DWORD)v496)
      {
        v499 = 16 * v496;
        v498 = *(unsigned int **)(v9 + 264);
        while (*v498 + 1 <= 1)
        {
          v498 += 4;
          v499 -= 16;
          if (!v499)
            goto LABEL_715;
        }
      }
      else
      {
        v498 = *(unsigned int **)(v9 + 264);
      }
    }
    else
    {
LABEL_715:
      v498 = (unsigned int *)(v495 + 16 * v496);
    }
    v500 = (unsigned int *)(v495 + 16 * v496);
    v501 = __s1[1];
LABEL_717:
    while (v498 != v500)
    {
      v502 = *((_QWORD *)v498 + 1);
      v503 = *v498;
      if (v501 >= HIDWORD(__s1[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v501 = __s1[1];
      }
      v504 = &__s1[0][16 * v501];
      *(_QWORD *)v504 = v503;
      *((_QWORD *)v504 + 1) = v502;
      v501 = ++LODWORD(__s1[1]);
      v505 = v498 + 4;
      v498 = v497;
      if (v505 != v497)
      {
        v498 = v505;
        while (*v498 + 1 <= 1)
        {
          v498 += 4;
          if (v498 == v497)
          {
            v498 = v497;
            goto LABEL_717;
          }
        }
      }
    }
    v506 = 126 - 2 * __clz(v501);
    if (v501)
      v507 = v506;
    else
      v507 = 0;
    sub_22E7EE8B4((int *)__s1[0], (unint64_t)&__s1[0][16 * v501], v507, 1);
    *(_QWORD *)v1911 = &v1911[16];
    *(_QWORD *)&v1911[8] = 0x10000000000;
    if (LODWORD(__s1[1]))
    {
      v508 = 0;
      v509 = __s1[0];
      v510 = &__s1[0][16 * LODWORD(__s1[1])];
      do
      {
        v511 = (unsigned int *)*((_QWORD *)v509 + 1);
        v511[132] = v508;
        v512 = v511[2];
        if ((_DWORD)v512)
        {
          v513 = 8 * v512;
          v514 = (int *)(*(_QWORD *)v511 + 4);
          do
          {
            v516 = *v514;
            v514 += 2;
            v515 = v516;
            if (v508 >= *(_DWORD *)&v1911[12])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v508 = *(_DWORD *)&v1911[8];
            }
            *(_DWORD *)(*(_QWORD *)v1911 + 4 * v508) = v515;
            v508 = ++*(_DWORD *)&v1911[8];
            v513 -= 8;
          }
          while (v513);
        }
        v509 += 16;
      }
      while (v509 != v510);
    }
    v517 = (char *)operator new(0x228uLL);
    *(_QWORD *)v517 = &unk_24FA715D0;
    *((_QWORD *)v517 + 1) = 0;
    *(_OWORD *)(v517 + 88) = 0u;
    *(_OWORD *)(v517 + 104) = 0u;
    *(_OWORD *)(v517 + 120) = 0u;
    *(_OWORD *)(v517 + 136) = 0u;
    *(_OWORD *)(v517 + 152) = 0u;
    *(_OWORD *)(v517 + 168) = 0u;
    *(_OWORD *)(v517 + 184) = 0u;
    *(_OWORD *)(v517 + 200) = 0u;
    *(_OWORD *)(v517 + 216) = 0u;
    *(_OWORD *)(v517 + 232) = 0u;
    *(_OWORD *)(v517 + 248) = 0u;
    *(_OWORD *)(v517 + 264) = 0u;
    *(_OWORD *)(v517 + 280) = 0u;
    *(_OWORD *)(v517 + 296) = 0u;
    *(_OWORD *)(v517 + 312) = 0u;
    *(_OWORD *)(v517 + 328) = 0u;
    *(_OWORD *)(v517 + 344) = 0u;
    *(_OWORD *)(v517 + 360) = 0u;
    *(_OWORD *)(v517 + 376) = 0u;
    *(_OWORD *)(v517 + 392) = 0u;
    *(_OWORD *)(v517 + 408) = 0u;
    *(_OWORD *)(v517 + 424) = 0u;
    *(_OWORD *)(v517 + 440) = 0u;
    *(_OWORD *)(v517 + 456) = 0u;
    *(_OWORD *)(v517 + 472) = 0u;
    *(_OWORD *)(v517 + 488) = 0u;
    *(_OWORD *)(v517 + 504) = 0u;
    *(_OWORD *)(v517 + 520) = 0u;
    *(_OWORD *)(v517 + 536) = 0u;
    *(_OWORD *)(v517 + 40) = xmmword_22F45FBC0;
    *((_QWORD *)v517 + 2) = 0;
    *((_QWORD *)v517 + 3) = v517 + 40;
    *(_OWORD *)(v517 + 56) = xmmword_22F45E080;
    v518 = *(llvm::raw_ostream **)v1778;
    *(_OWORD *)(v517 + 72) = xmmword_22F45E0D0;
    *((_QWORD *)v517 + 4) = 0x2000000003;
    v1935[0] = (llvm *)(v517 + 24);
    v1935[1] = (llvm *)v517;
    v519 = sub_22E74761C((uint64_t)v518, (uint64_t)v1935);
    v520 = (std::__shared_weak_count *)v1935[1];
    if (v1935[1])
    {
      v521 = (unint64_t *)((char *)v1935[1] + 8);
      do
        v522 = __ldaxr(v521);
      while (__stlxr(v522 - 1, v521));
      if (!v522)
      {
        ((void (*)(std::__shared_weak_count *))v520->__on_zero_shared)(v520);
        std::__shared_weak_count::__release_weak(v520);
      }
    }
    *(_QWORD *)&v1886 = 42;
    *((_QWORD *)&v1886 + 1) = *(unsigned int *)&v1911[8];
    sub_22E74241C(*(llvm::raw_ostream **)v1778, v519, (uint64_t)&v1886, 2, *(char **)v1911, 4 * *(unsigned int *)&v1911[8], 0);
    if (*(_BYTE **)v1911 != &v1911[16])
      free(*(void **)v1911);
    if ((char **)__s1[0] != &__s1[2])
      free(__s1[0]);
    v523 = *(_QWORD *)(v1771 + 1992);
    __s1[0] = (char *)&__s1[2];
    __s1[1] = (char *)0x4000000000;
    sub_22E74181C(*(_QWORD *)v1778, 9u, 4u);
    v524 = *(llvm::raw_ostream **)v1778;
    v525 = *(_QWORD **)(*(_QWORD *)v1778 + 8);
    v1737 = *(_QWORD *)(**(_QWORD **)v1778 + 8);
    if (v525)
      v1736 = v525[2] - v525[4] - (*(uint64_t (**)(_QWORD *))(*v525 + 80))(v525);
    else
      v1736 = 0;
    v526 = *(llvm::raw_ostream **)v1778;
    v1739 = *((unsigned int *)v524 + 6);
    v527 = (char *)operator new(0x228uLL);
    *(_QWORD *)v527 = &unk_24FA715D0;
    *((_QWORD *)v527 + 1) = 0;
    *(_OWORD *)(v527 + 184) = 0u;
    *(_OWORD *)(v527 + 200) = 0u;
    *(_OWORD *)(v527 + 216) = 0u;
    *(_OWORD *)(v527 + 232) = 0u;
    *(_OWORD *)(v527 + 248) = 0u;
    *(_OWORD *)(v527 + 264) = 0u;
    *(_OWORD *)(v527 + 280) = 0u;
    *(_OWORD *)(v527 + 296) = 0u;
    *(_OWORD *)(v527 + 312) = 0u;
    *(_OWORD *)(v527 + 328) = 0u;
    *(_OWORD *)(v527 + 344) = 0u;
    *(_OWORD *)(v527 + 360) = 0u;
    *(_OWORD *)(v527 + 376) = 0u;
    *(_OWORD *)(v527 + 392) = 0u;
    *(_OWORD *)(v527 + 408) = 0u;
    *(_OWORD *)(v527 + 424) = 0u;
    *(_OWORD *)(v527 + 440) = 0u;
    *(_OWORD *)(v527 + 456) = 0u;
    *(_OWORD *)(v527 + 472) = 0u;
    *(_OWORD *)(v527 + 488) = 0u;
    *(_OWORD *)(v527 + 504) = 0u;
    *(_OWORD *)(v527 + 520) = 0u;
    *(_OWORD *)(v527 + 536) = 0u;
    *(_OWORD *)(v527 + 40) = xmmword_22F45E070;
    *((_QWORD *)v527 + 2) = 0;
    *((_QWORD *)v527 + 3) = v527 + 40;
    *(_OWORD *)(v527 + 56) = xmmword_22F45FB00;
    *(_OWORD *)(v527 + 72) = xmmword_22F45FB00;
    *(_OWORD *)(v527 + 88) = xmmword_22F45E0A0;
    *(_OWORD *)(v527 + 104) = xmmword_22F45E160;
    *(_OWORD *)(v527 + 120) = xmmword_22F45E250;
    *(_OWORD *)(v527 + 136) = xmmword_22F45FB00;
    *(_OWORD *)(v527 + 152) = xmmword_22F45FBD0;
    *(_OWORD *)(v527 + 168) = xmmword_22F45FB00;
    *((_QWORD *)v527 + 4) = 0x2000000009;
    *(_QWORD *)v1911 = v527 + 24;
    *(_QWORD *)&v1911[8] = v527;
    v1747 = sub_22E74761C((uint64_t)v526, (uint64_t)v1911);
    v528 = *(std::__shared_weak_count **)&v1911[8];
    if (*(_QWORD *)&v1911[8])
    {
      v529 = (unint64_t *)(*(_QWORD *)&v1911[8] + 8);
      do
        v530 = __ldaxr(v529);
      while (__stlxr(v530 - 1, v529));
      if (!v530)
      {
        ((void (*)(std::__shared_weak_count *))v528->__on_zero_shared)(v528);
        std::__shared_weak_count::__release_weak(v528);
      }
    }
    v531 = *(llvm::raw_ostream **)v1778;
    v532 = (char *)operator new(0x228uLL);
    *(_QWORD *)v532 = &unk_24FA715D0;
    *((_QWORD *)v532 + 1) = 0;
    *(_OWORD *)(v532 + 136) = 0u;
    *(_OWORD *)(v532 + 152) = 0u;
    *(_OWORD *)(v532 + 168) = 0u;
    *(_OWORD *)(v532 + 184) = 0u;
    *(_OWORD *)(v532 + 200) = 0u;
    *(_OWORD *)(v532 + 216) = 0u;
    *(_OWORD *)(v532 + 232) = 0u;
    *(_OWORD *)(v532 + 248) = 0u;
    *(_OWORD *)(v532 + 264) = 0u;
    *(_OWORD *)(v532 + 280) = 0u;
    *(_OWORD *)(v532 + 296) = 0u;
    *(_OWORD *)(v532 + 312) = 0u;
    *(_OWORD *)(v532 + 328) = 0u;
    *(_OWORD *)(v532 + 344) = 0u;
    *(_OWORD *)(v532 + 360) = 0u;
    *(_OWORD *)(v532 + 376) = 0u;
    *(_OWORD *)(v532 + 392) = 0u;
    *(_OWORD *)(v532 + 408) = 0u;
    *(_OWORD *)(v532 + 424) = 0u;
    *(_OWORD *)(v532 + 440) = 0u;
    *(_OWORD *)(v532 + 456) = 0u;
    *(_OWORD *)(v532 + 472) = 0u;
    *(_OWORD *)(v532 + 488) = 0u;
    *(_OWORD *)(v532 + 504) = 0u;
    *(_OWORD *)(v532 + 520) = 0u;
    *(_OWORD *)(v532 + 536) = 0u;
    *(_OWORD *)(v532 + 40) = xmmword_22F45E090;
    *((_QWORD *)v532 + 2) = 0;
    *((_QWORD *)v532 + 3) = v532 + 40;
    *(_OWORD *)(v532 + 56) = xmmword_22F45FB00;
    *(_OWORD *)(v532 + 72) = xmmword_22F45FB00;
    *(_OWORD *)(v532 + 88) = xmmword_22F45E0A0;
    *(_OWORD *)(v532 + 104) = xmmword_22F45E160;
    *(_OWORD *)(v532 + 120) = xmmword_22F45E0D0;
    *((_QWORD *)v532 + 4) = 0x2000000006;
    *(_QWORD *)v1911 = v532 + 24;
    *(_QWORD *)&v1911[8] = v532;
    v1757 = sub_22E74761C((uint64_t)v531, (uint64_t)v1911);
    v533 = *(std::__shared_weak_count **)&v1911[8];
    if (*(_QWORD *)&v1911[8])
    {
      v534 = (unint64_t *)(*(_QWORD *)&v1911[8] + 8);
      do
        v535 = __ldaxr(v534);
      while (__stlxr(v535 - 1, v534));
      if (!v535)
      {
        ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
        std::__shared_weak_count::__release_weak(v533);
      }
    }
    v1754 = sub_22E7C9DFC(*(_QWORD *)v1778, 0);
    v1752 = sub_22E7C9DFC(*(_QWORD *)v1778, 1);
    v536 = *(llvm::raw_ostream **)v1778;
    v537 = (char *)operator new(0x228uLL);
    *(_QWORD *)v537 = &unk_24FA715D0;
    *((_QWORD *)v537 + 1) = 0;
    *(_OWORD *)(v537 + 152) = 0u;
    *(_OWORD *)(v537 + 168) = 0u;
    *(_OWORD *)(v537 + 184) = 0u;
    *(_OWORD *)(v537 + 200) = 0u;
    *(_OWORD *)(v537 + 216) = 0u;
    *(_OWORD *)(v537 + 232) = 0u;
    *(_OWORD *)(v537 + 248) = 0u;
    *(_OWORD *)(v537 + 264) = 0u;
    *(_OWORD *)(v537 + 280) = 0u;
    *(_OWORD *)(v537 + 296) = 0u;
    *(_OWORD *)(v537 + 312) = 0u;
    *(_OWORD *)(v537 + 328) = 0u;
    *(_OWORD *)(v537 + 344) = 0u;
    *(_OWORD *)(v537 + 360) = 0u;
    *(_OWORD *)(v537 + 376) = 0u;
    *(_OWORD *)(v537 + 392) = 0u;
    *(_OWORD *)(v537 + 408) = 0u;
    *(_OWORD *)(v537 + 424) = 0u;
    *(_OWORD *)(v537 + 440) = 0u;
    *(_OWORD *)(v537 + 456) = 0u;
    *(_OWORD *)(v537 + 472) = 0u;
    *(_OWORD *)(v537 + 488) = 0u;
    *(_OWORD *)(v537 + 504) = 0u;
    *(_OWORD *)(v537 + 520) = 0u;
    *(_OWORD *)(v537 + 536) = 0u;
    *(_OWORD *)(v537 + 40) = xmmword_22F45E0E0;
    *((_QWORD *)v537 + 2) = 0;
    *((_QWORD *)v537 + 3) = v537 + 40;
    *(_OWORD *)(v537 + 56) = xmmword_22F45FB00;
    *(_OWORD *)(v537 + 72) = xmmword_22F45FB00;
    *(_OWORD *)(v537 + 88) = xmmword_22F45FB00;
    *(_OWORD *)(v537 + 104) = xmmword_22F45FB00;
    *(_OWORD *)(v537 + 120) = xmmword_22F45E160;
    *(_OWORD *)(v537 + 136) = xmmword_22F45E250;
    *((_QWORD *)v537 + 4) = 0x2000000007;
    *(_QWORD *)v1911 = v537 + 24;
    *(_QWORD *)&v1911[8] = v537;
    v1760 = sub_22E74761C((uint64_t)v536, (uint64_t)v1911);
    v538 = *(std::__shared_weak_count **)&v1911[8];
    if (*(_QWORD *)&v1911[8])
    {
      v539 = (unint64_t *)(*(_QWORD *)&v1911[8] + 8);
      do
        v540 = __ldaxr(v539);
      while (__stlxr(v540 - 1, v539));
      if (!v540)
      {
        ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
        std::__shared_weak_count::__release_weak(v538);
      }
    }
    v541 = 0;
    memset(__p, 0, sizeof(__p));
    v542 = *(llvm::raw_ostream **)v1778;
    v543 = *(_QWORD **)(*(_QWORD *)v1778 + 8);
    v544 = *(_QWORD *)(**(_QWORD **)v1778 + 8);
    if (v543)
      v541 = (*(uint64_t (**)(_QWORD))(*v543 + 80))(*(_QWORD *)(*(_QWORD *)v1778 + 8)) + v543[4] - v543[2];
    v1785 = *((unsigned int *)v542 + 6) + 8 * (v541 + v544);
    *(_QWORD *)v1911 = &v1911[16];
    *(_QWORD *)&v1911[8] = 0x4000000000;
    sub_22E6C5AA8((uint64_t)__p, (*(_DWORD *)(v523 + 192) - 1));
    v1792 = *(_DWORD *)(v523 + 192);
    if (v1792 != 1)
    {
      for (mm = 1; v1792 != (_DWORD)mm; ++mm)
      {
        v572 = *(_QWORD *)(v523 + 184);
        v573 = *(llvm::raw_ostream **)v1778;
        v574 = *(_QWORD **)(*(_QWORD *)v1778 + 8);
        v575 = *(_QWORD *)(**(_QWORD **)v1778 + 8);
        if (v574)
          v574 = (_QWORD *)((*(uint64_t (**)(_QWORD))(*v574 + 80))(*(_QWORD *)(*(_QWORD *)v1778 + 8))
                          + v574[4]
                          - v574[2]);
        v576 = (_DWORD *)(v572 + 24 * mm);
        v577 = *((_DWORD *)v573 + 6);
        if ((*v576 & 0x80000000) != 0)
        {
          v578 = 5;
        }
        else if (*(_QWORD *)((*(_QWORD *)(v572 + 24 * mm + 16) & 0xFFFFFFFFFFFFFFF8) + 8))
        {
          v578 = 1;
        }
        else
        {
          v578 = 2;
        }
        LODWORD(__s1[1]) = 0;
        if (HIDWORD(__s1[1]))
        {
          v579 = 0;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v579 = LODWORD(__s1[1]);
        }
        v580 = v577 - v1785 + 8 * ((_DWORD)v574 + v575);
        *(_QWORD *)&__s1[0][8 * v579] = v578;
        ++LODWORD(__s1[1]);
        v581 = v572 + 24 * mm + 8;
        if ((*v576 & 0x80000000) != 0)
        {
          v585 = (char *)__p[1];
          if (__p[1] >= __p[2])
          {
            v593 = (char *)__p[0];
            v594 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            v595 = v594 + 1;
            if ((unint64_t)(v594 + 1) >> 62)
              goto LABEL_2504;
            v596 = (char *)__p[2] - (char *)__p[0];
            if (((char *)__p[2] - (char *)__p[0]) >> 1 > v595)
              v595 = v596 >> 1;
            if ((unint64_t)v596 >= 0x7FFFFFFFFFFFFFFCLL)
              v597 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v597 = v595;
            if (v597)
            {
              if (v597 >> 62)
                goto LABEL_2503;
              v598 = (char *)operator new(4 * v597);
            }
            else
            {
              v598 = 0;
            }
            v641 = &v598[4 * v594];
            *(_DWORD *)v641 = v580;
            v586 = v641 + 4;
            while (v585 != v593)
            {
              v642 = *((_DWORD *)v585 - 1);
              v585 -= 4;
              *((_DWORD *)v641 - 1) = v642;
              v641 -= 4;
            }
            __p[0] = v641;
            __p[1] = v586;
            __p[2] = &v598[4 * v597];
            if (v593)
              operator delete(v593);
          }
          else
          {
            *(_DWORD *)__p[1] = v580;
            v586 = v585 + 4;
          }
          __p[1] = v586;
          v643 = *v576 & 0x7FFFFFFF;
          v644 = sub_22E7E3C1C((_QWORD *)v9, v643);
          v645 = LODWORD(__s1[1]);
          if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v645 = LODWORD(__s1[1]);
          }
          *(_QWORD *)&__s1[0][8 * v645] = v643 - v644 - 2;
          ++LODWORD(__s1[1]);
          v646 = *(_DWORD *)v581;
          if (!*(_DWORD *)v581)
            v646 = *(_DWORD *)(v581 + 4);
          sub_22E7C9A94(v9, v646, (uint64_t)__s1);
          sub_22E7C9A94(v9, *(_DWORD *)(v581 + 4), (uint64_t)__s1);
          v647 = *(_DWORD *)(v581 + 8);
          if (v647)
          {
            v648 = 1;
          }
          else
          {
            v647 = *(_DWORD *)(v581 + 4);
            v648 = v647 == 0;
          }
          if (v648)
            v649 = v647;
          else
            v649 = 0;
          sub_22E7C9A94(v9, v649, (uint64_t)__s1);
          v650 = *(unsigned __int8 *)(v581 + 12);
          v651 = LODWORD(__s1[1]);
          if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v651 = LODWORD(__s1[1]);
          }
          *(_QWORD *)&__s1[0][8 * v651] = v650;
          v652 = ++LODWORD(__s1[1]);
          if ((_DWORD)mm + 1 == v1792)
            v653 = *(_DWORD *)(v523 + 216);
          else
            v653 = *(_DWORD *)(*(_QWORD *)(v523 + 184) + 24 * (mm + 1)) & 0x7FFFFFFF;
          v654 = v653 - (*v576 & 0x7FFFFFFF);
          v655 = sub_22E7E3C1C((_QWORD *)v9, v654);
          if (v652 >= HIDWORD(__s1[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v652 = __s1[1];
          }
          *(_QWORD *)&__s1[0][8 * v652] = v654 + ~v655;
          ++LODWORD(__s1[1]);
          sub_22E74241C(*(llvm::raw_ostream **)v1778, v1760, (uint64_t)__s1[0], LODWORD(__s1[1]), 0, 0, 0);
          continue;
        }
        if (((*(_QWORD *)(*v1744 + 8 * (mm >> 6)) >> mm) & 1) != 0)
        {
          v582 = v523;
          v1779 = *(_QWORD *)(v581 + 8);
          v583 = (char *)__p[1];
          if (__p[1] >= __p[2])
          {
            v587 = (char *)__p[0];
            v588 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            v589 = v588 + 1;
            if ((unint64_t)(v588 + 1) >> 62)
              goto LABEL_2504;
            v590 = (char *)__p[2] - (char *)__p[0];
            if (((char *)__p[2] - (char *)__p[0]) >> 1 > v589)
              v589 = v590 >> 1;
            if ((unint64_t)v590 >= 0x7FFFFFFFFFFFFFFCLL)
              v591 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v591 = v589;
            if (v591)
            {
              if (v591 >> 62)
                goto LABEL_2503;
              v592 = (char *)operator new(4 * v591);
            }
            else
            {
              v592 = 0;
            }
            v599 = &v592[4 * v588];
            *(_DWORD *)v599 = v580;
            v584 = v599 + 4;
            while (v583 != v587)
            {
              v600 = *((_DWORD *)v583 - 1);
              v583 -= 4;
              *((_DWORD *)v599 - 1) = v600;
              v599 -= 4;
            }
            __p[0] = v599;
            __p[1] = v584;
            __p[2] = &v592[4 * v591];
            if (v587)
              operator delete(v587);
          }
          else
          {
            *(_DWORD *)__p[1] = v580;
            v584 = v583 + 4;
          }
          __p[1] = v584;
          v601 = *v576 & 0x7FFFFFFF;
          v602 = sub_22E7E3C1C((_QWORD *)v9, v601);
          v603 = LODWORD(__s1[1]);
          if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v603 = LODWORD(__s1[1]);
          }
          v523 = v582;
          *(_QWORD *)&__s1[0][8 * v603] = v601 - v602 - 2;
          ++LODWORD(__s1[1]);
          sub_22E7C9A94(v9, *(_DWORD *)v581, (uint64_t)__s1);
          v604 = *(_QWORD *)(v581 + 8);
          v605 = LODWORD(__s1[1]);
          if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v605 = LODWORD(__s1[1]);
          }
          *(_QWORD *)&__s1[0][8 * v605] = v604 & 7;
          v606 = LODWORD(__s1[1]) + 1;
          LODWORD(__s1[1]) = v606;
          v607 = *(unsigned int *)(v581 + 4);
          if (v606 >= HIDWORD(__s1[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v606 = __s1[1];
          }
          v608 = v1779 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)&__s1[0][8 * v606] = v607 >> 31;
          ++LODWORD(__s1[1]);
          v609 = *(_QWORD *)((v1779 & 0xFFFFFFFFFFFFFFF8) + 8);
          if (v609)
          {
            do
            {
              v619 = *(_QWORD *)(v609 + 8);
              v609 = v619 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while ((v619 & 2) != 0 && v609);
            v1935[0] = (llvm *)(v619 & 0xFFFFFFFFFFFFFFFCLL);
            v620 = *((unsigned int *)sub_22F2D22C8((uint64_t *)(v9 + 128), v1935) + 2);
            v621 = LODWORD(__s1[1]);
            if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v621 = LODWORD(__s1[1]);
            }
            *(_QWORD *)&__s1[0][8 * v621] = v620;
            v622 = ++LODWORD(__s1[1]);
            v623 = 0;
            v624 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 88) + 184) + 24 * mm + 12) & 0x7FFFFFFF;
            if (v624)
            {
              v625 = mm;
              do
              {
                v623 += (*(_QWORD *)(*v1744 + 8 * (v625 >> 6)) >> v625) & 1;
                ++v625;
                --v624;
              }
              while (v624);
            }
            if (v622 >= HIDWORD(__s1[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v622 = __s1[1];
            }
            *(_QWORD *)&__s1[0][8 * v622] = v623;
            v626 = ++LODWORD(__s1[1]);
            v627 = *(_QWORD *)(v9 + 264);
            v628 = *(unsigned int *)(v9 + 280);
            v629 = sub_22F2CF690(v627, *(_DWORD *)(v9 + 280), mm);
            if ((int *)(v627 + 16 * v628) == v629)
            {
              if (v626 >= HIDWORD(__s1[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v626 = __s1[1];
              }
              v634 = 0;
              *(_QWORD *)&__s1[0][8 * v626] = 0;
              v632 = HIDWORD(__s1[1]);
              v633 = ++LODWORD(__s1[1]);
            }
            else
            {
              v630 = v629;
              v631 = *(unsigned int *)(*((_QWORD *)v629 + 1) + 528);
              if (v626 >= HIDWORD(__s1[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v626 = __s1[1];
              }
              *(_QWORD *)&__s1[0][8 * v626] = v631;
              v632 = HIDWORD(__s1[1]);
              v633 = ++LODWORD(__s1[1]);
              v634 = *(unsigned int *)(*((_QWORD *)v630 + 1) + 8);
            }
            if (v633 >= v632)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v633 = __s1[1];
            }
            *(_QWORD *)&__s1[0][8 * v633] = v634;
            ++LODWORD(__s1[1]);
            sub_22E74241C(*(llvm::raw_ostream **)v1778, v1747, (uint64_t)__s1[0], LODWORD(__s1[1]), 0, 0, 0);
            if ((*(_BYTE *)(v608 + 48) & 5) == 0)
              continue;
          }
          else
          {
            sub_22F1E005C(v608, *(_QWORD *)(v1772 + 48), *(_QWORD *)(v1772 + 80), 0, v1935);
            if (LOBYTE(v1935[4]))
              v610 = (char *)v1935[2];
            else
              v610 = "";
            if (LOBYTE(v1935[4]))
              v611 = v1935[3];
            else
              v611 = 0;
            sub_22E74241C(*(llvm::raw_ostream **)v1778, v1757, (uint64_t)__s1[0], LODWORD(__s1[1]), v610, (uint64_t)v611 + 1, 0);
            if (v611 == (llvm *)10 && *(_QWORD *)v610 == 0x692D746C6975623CLL && *((_WORD *)v610 + 4) == 15982)
            {
              v613 = __p[1];
              v614 = __p[0];
              v615 = *(unsigned int *)&v1911[8];
              if (*(unsigned int *)&v1911[8] >= (unint64_t)*(unsigned int *)&v1911[12])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v615 = *(unsigned int *)&v1911[8];
              }
              *(_QWORD *)(*(_QWORD *)v1911 + 8 * v615) = (v613 - v614) >> 2;
              ++*(_DWORD *)&v1911[8];
            }
          }
          sub_22F1E005C(v608, *(_QWORD *)(v1772 + 48), *(_QWORD *)(v1772 + 80), 0, v1935);
          if (LOBYTE(v1935[4]))
          {
            v617 = (const char *)v1935[0];
            v618 = (uint64_t)v1935[1];
          }
          else
          {
            v617 = "<<<INVALID BUFFER>>>";
            v1935[0] = (llvm *)"<<<INVALID BUFFER>>>";
            v1935[1] = (llvm *)20;
            v1935[2] = (llvm *)"";
            v1935[3] = 0;
            v618 = 20;
            LOBYTE(v1935[4]) = 1;
          }
          v635 = *(llvm::raw_ostream **)v1778;
          *(_QWORD *)&v1886 = (char *)v1887 + 8;
          *((_QWORD *)&v1886 + 1) = 0;
          *(_QWORD *)&v1887[0] = 0;
          if (llvm::zlib::isAvailable(v616))
          {
            llvm::zlib::compress();
            v1891 = (void *)4;
            *(_QWORD *)&v1892 = v618;
            v637 = *((_QWORD *)&v1886 + 1);
            v636 = (char *)v1886;
            v638 = v635;
            v639 = v1752;
            v640 = 2;
          }
          else
          {
            v1891 = (void *)3;
            v638 = v635;
            v639 = v1754;
            v640 = 1;
            v636 = (char *)v617;
            v637 = v618 + 1;
          }
          sub_22E74241C(v638, v639, (uint64_t)&v1891, v640, v636, v637, 0);
          if ((_OWORD *)v1886 != (_OWORD *)((char *)v1887 + 8))
            free((void *)v1886);
        }
      }
    }
    v545 = (uint64_t *)(v9 + 16);
    sub_22E7416F4(*(_QWORD *)v1778);
    v6 = __p;
    if (__p[0] != __p[1])
    {
      v546 = (char *)operator new(0x228uLL);
      *(_QWORD *)v546 = &unk_24FA715D0;
      *((_QWORD *)v546 + 1) = 0;
      *(_OWORD *)(v546 + 120) = 0u;
      *(_OWORD *)(v546 + 136) = 0u;
      *(_OWORD *)(v546 + 152) = 0u;
      *(_OWORD *)(v546 + 168) = 0u;
      *(_OWORD *)(v546 + 184) = 0u;
      *(_OWORD *)(v546 + 200) = 0u;
      *(_OWORD *)(v546 + 216) = 0u;
      *(_OWORD *)(v546 + 232) = 0u;
      *(_OWORD *)(v546 + 248) = 0u;
      *(_OWORD *)(v546 + 264) = 0u;
      *(_OWORD *)(v546 + 280) = 0u;
      *(_OWORD *)(v546 + 296) = 0u;
      *(_OWORD *)(v546 + 312) = 0u;
      *(_OWORD *)(v546 + 328) = 0u;
      *(_OWORD *)(v546 + 344) = 0u;
      *(_OWORD *)(v546 + 360) = 0u;
      *(_OWORD *)(v546 + 376) = 0u;
      *(_OWORD *)(v546 + 392) = 0u;
      *(_OWORD *)(v546 + 408) = 0u;
      *(_OWORD *)(v546 + 424) = 0u;
      *(_OWORD *)(v546 + 440) = 0u;
      *(_OWORD *)(v546 + 456) = 0u;
      *(_OWORD *)(v546 + 472) = 0u;
      *(_OWORD *)(v546 + 488) = 0u;
      *(_OWORD *)(v546 + 504) = 0u;
      *(_OWORD *)(v546 + 520) = 0u;
      *(_OWORD *)(v546 + 536) = 0u;
      *(_OWORD *)(v546 + 40) = xmmword_22F45FBE0;
      *((_QWORD *)v546 + 2) = 0;
      *((_QWORD *)v546 + 3) = v546 + 40;
      *(_OWORD *)(v546 + 56) = xmmword_22F45E0C0;
      *(_OWORD *)(v546 + 72) = xmmword_22F45E0C0;
      *(_OWORD *)(v546 + 88) = xmmword_22F45FAF0;
      v547 = *(llvm::raw_ostream **)v1778;
      *(_OWORD *)(v546 + 104) = xmmword_22F45E0D0;
      *((_QWORD *)v546 + 4) = 0x2000000005;
      v1891 = v546 + 24;
      *(_QWORD *)&v1892 = v546;
      v548 = sub_22E74761C((uint64_t)v547, (uint64_t)&v1891);
      v549 = (std::__shared_weak_count *)v1892;
      if ((_QWORD)v1892)
      {
        v550 = (unint64_t *)(v1892 + 8);
        do
          v551 = __ldaxr(v550);
        while (__stlxr(v551 - 1, v550));
        if (!v551)
        {
          ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
          std::__shared_weak_count::__release_weak(v549);
        }
      }
      v1935[0] = (llvm *)14;
      v1935[1] = (llvm *)(((char *)__p[1] - (char *)__p[0]) >> 2);
      if (__p[1] == __p[0])
        v553 = 0;
      else
        v553 = (char *)__p[0];
      if (__p[1] == __p[0])
        v554 = 0;
      else
        v554 = (char *)__p[1] - (char *)__p[0];
      v552 = *(_DWORD *)(v523 + 216);
      v1935[2] = (llvm *)(v552 + ~sub_22E7E3C1C((_QWORD *)v9, v552));
      v1935[3] = (llvm *)(v1785 - v1739 + 8 * (v1736 - v1737));
      v555 = v553;
      v545 = (uint64_t *)(v9 + 16);
      sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v548, (uint64_t)v1935, 4, v555, v554, 0);
      sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 0xFu, (uint64_t)v1911, 0);
      if (*(_QWORD *)(v523 + 312))
      {
        v556 = sub_22F1E0AA0(v523);
        LODWORD(__s1[1]) = 0;
        memset(v1935, 0, 20);
        LODWORD(v1886) = -1;
        sub_22F2D2484((uint64_t)v1935, (unsigned int *)&v1886)[1] = -1;
        v557 = *(_QWORD **)(v556 + 144);
        v558 = (_QWORD *)(v556 + 152);
        if (v557 != (_QWORD *)(v556 + 152))
        {
          do
          {
            if ((v557[4] & 0x80000000) == 0)
            {
              v559 = v557[5];
              v560 = v557[6];
              while (v559 != v560)
              {
                LODWORD(v1888) = *(_DWORD *)(v559 + 8);
                HIDWORD(v1888) = LODWORD(v1935[1]) - 1;
                sub_22F2D27B0((uint64_t)&v1886, (uint64_t)v1935, &v1888, (_DWORD *)&v1888 + 1);
                if (LOBYTE(v1887[0]))
                {
                  v561 = *(_QWORD *)(*(_QWORD *)(v556 + 120) + 8 * *(unsigned int *)(v559 + 8));
                  sub_22F2CF4A0(v9, (_BYTE *)(v561 + 16), *(_QWORD *)v561, (uint64_t)__s1);
                }
                v559 += 20;
              }
            }
            v562 = (_QWORD *)v557[1];
            if (v562)
            {
              do
              {
                v563 = v562;
                v562 = (_QWORD *)*v562;
              }
              while (v562);
            }
            else
            {
              do
              {
                v563 = (_QWORD *)v557[2];
                v71 = *v563 == (_QWORD)v557;
                v557 = v563;
              }
              while (!v71);
            }
            v557 = v563;
          }
          while (v563 != v558);
        }
        v564 = (int)__s1[1];
        if (LODWORD(__s1[1]) >= HIDWORD(__s1[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v564 = (int)__s1[1];
        }
        *(_QWORD *)&__s1[0][8 * v564] = 0;
        ++LODWORD(__s1[1]);
        v565 = *(_QWORD **)(v556 + 144);
        if (v565 != v558)
        {
          do
          {
            v656 = *((_DWORD *)v565 + 8);
            if ((v656 & 0x80000000) == 0)
            {
              sub_22F2CF54C((_QWORD *)v9, v656, (uint64_t)__s1);
              v660 = v565[5];
              v659 = v565[6];
              v661 = LODWORD(__s1[1]);
              if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v661 = LODWORD(__s1[1]);
              }
              *(_QWORD *)&__s1[0][8 * v661] = 0xCCCCCCCCCCCCCCCDLL * ((v659 - v660) >> 2);
              v662 = ++LODWORD(__s1[1]);
              v663 = (unsigned int *)v565[5];
              v664 = (unsigned int *)v565[6];
              while (v663 != v664)
              {
                v665 = *v663;
                if (v662 >= HIDWORD(__s1[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v662 = __s1[1];
                }
                *(_QWORD *)&__s1[0][8 * v662] = v665;
                v666 = LODWORD(__s1[1]) + 1;
                LODWORD(__s1[1]) = v666;
                v667 = v663[1];
                if (v666 >= HIDWORD(__s1[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v666 = __s1[1];
                }
                *(_QWORD *)&__s1[0][8 * v666] = v667;
                ++LODWORD(__s1[1]);
                v668 = v663 + 2;
                v669 = (int)sub_22F2D289C((uint64_t)v1935, v668)[1];
                v670 = LODWORD(__s1[1]);
                if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v670 = LODWORD(__s1[1]);
                }
                *(_QWORD *)&__s1[0][8 * v670] = v669;
                v671 = LODWORD(__s1[1]) + 1;
                LODWORD(__s1[1]) = v671;
                v672 = v668[1];
                if (v671 >= HIDWORD(__s1[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v671 = __s1[1];
                }
                *(_QWORD *)&__s1[0][8 * v671] = v672;
                v673 = LODWORD(__s1[1]) + 1;
                LODWORD(__s1[1]) = v673;
                v674 = v668[2];
                if (v673 >= HIDWORD(__s1[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v673 = __s1[1];
                }
                *(_QWORD *)&__s1[0][8 * v673] = v674;
                v662 = ++LODWORD(__s1[1]);
                v663 = v668 + 3;
              }
            }
            v657 = (_QWORD *)v565[1];
            if (v657)
            {
              do
              {
                v658 = v657;
                v657 = (_QWORD *)*v657;
              }
              while (v657);
            }
            else
            {
              do
              {
                v658 = (_QWORD *)v565[2];
                v71 = *v658 == (_QWORD)v565;
                v565 = v658;
              }
              while (!v71);
            }
            v565 = v658;
          }
          while (v658 != v558);
        }
        v545 = (uint64_t *)(v9 + 16);
        sub_22E742038(*(llvm::raw_ostream **)v1778, 0x28u, (uint64_t)__s1, 0);
        llvm::deallocate_buffer(v1935[0], (void *)(8 * LODWORD(v1935[2])));
      }
    }
    if (*(_BYTE **)v1911 != &v1911[16])
      free(*(void **)v1911);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if ((char **)__s1[0] != &__s1[2])
      free(__s1[0]);
    sub_22E74181C(*(_QWORD *)(v9 + 16), 0xEu, 3u);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 32) + 193))
    {
      memset(v1911, 0, 20);
      __s1[0] = (char *)&__s1[2];
      __s1[1] = (char *)0x4000000000;
      v566 = *(_QWORD *)(v9 + 40);
      v567 = *(_QWORD *)(v566 + 16080);
      v568 = *(unsigned int *)(v566 + 16096);
      v569 = v567 + 32 * v568;
      if (*(_DWORD *)(v566 + 16088))
      {
        if ((_DWORD)v568)
        {
          v675 = 32 * v568;
          v570 = *(_QWORD *)(v566 + 16080);
          while ((*(_DWORD *)v570 + 1) <= 1)
          {
            v570 += 32;
            v675 -= 32;
            if (!v675)
              goto LABEL_949;
          }
        }
        else
        {
          v570 = *(_QWORD *)(v566 + 16080);
        }
      }
      else
      {
LABEL_949:
        v570 = v567 + 32 * v568;
      }
      v676 = v567 + 32 * v568;
      if (v570 != v676)
      {
        v677 = 0;
        do
        {
          v678 = *(_QWORD **)(v570 + 8);
          if (v678 != (_QWORD *)(v570 + 16))
          {
            do
            {
              v679 = (unsigned __int8 *)v678[5];
              v1935[0] = (llvm *)v679;
              LODWORD(__s1[1]) = 0;
              v680 = HIDWORD(*(_QWORD *)v679);
              sub_22E7C9A94(v9, *(_QWORD *)v679, (uint64_t)__s1);
              sub_22E7C9A94(v9, v680, (uint64_t)__s1);
              v681 = v679[32];
              v682 = LODWORD(__s1[1]);
              if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v682 = LODWORD(__s1[1]);
              }
              *(_QWORD *)&__s1[0][8 * v682] = (v681 >> 2) & 7;
              v683 = LODWORD(__s1[1]) + 1;
              LODWORD(__s1[1]) = v683;
              v684 = v679[32];
              if (v683 >= HIDWORD(__s1[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v683 = __s1[1];
              }
              *(_QWORD *)&__s1[0][8 * v683] = (v684 >> 6) & 1;
              v685 = LODWORD(__s1[1]) + 1;
              LODWORD(__s1[1]) = v685;
              v686 = v679[32];
              if (v685 >= HIDWORD(__s1[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v685 = __s1[1];
              }
              *(_QWORD *)&__s1[0][8 * v685] = v686 >> 7;
              ++LODWORD(__s1[1]);
              sub_22E742038(*(llvm::raw_ostream **)v1778, 0, (uint64_t)__s1, 0);
              *((_DWORD *)sub_22F29449C((uint64_t)v1911, (uint64_t *)v1935) + 2) = v677;
              v687 = (_QWORD *)v678[1];
              if (v687)
              {
                do
                {
                  v688 = v687;
                  v687 = (_QWORD *)*v687;
                }
                while (v687);
              }
              else
              {
                do
                {
                  v688 = (_QWORD *)v678[2];
                  v71 = *v688 == (_QWORD)v678;
                  v678 = v688;
                }
                while (!v71);
              }
              ++v677;
              v678 = v688;
            }
            while (v688 != (_QWORD *)(v570 + 16));
          }
          v689 = v570 + 32;
          v570 = v569;
          if (v689 != v569)
          {
            v570 = v689;
            while ((*(_DWORD *)v570 + 1) <= 1)
            {
              v570 += 32;
              if (v570 == v569)
              {
                v570 = v569;
                break;
              }
            }
          }
        }
        while (v570 != v676);
        v566 = *(_QWORD *)(v9 + 40);
        v6 = __p;
      }
      v690 = *(unint64_t **)(v566 + 16184);
      v691 = *(unint64_t **)(v566 + 16192);
      v545 = (uint64_t *)(v9 + 16);
      if (v690 != v691)
      {
        do
        {
          LODWORD(__s1[1]) = 0;
          v693 = *v690;
          v692 = (uint64_t *)(v690 + 1);
          sub_22E7CA8EC(v9, v693, (uint64_t)__s1);
          v694 = *((unsigned int *)sub_22F29449C((uint64_t)v1911, v692) + 2);
          v695 = LODWORD(__s1[1]);
          if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v695 = LODWORD(__s1[1]);
          }
          *(_QWORD *)&__s1[0][8 * v695] = v694;
          ++LODWORD(__s1[1]);
          sub_22E742038(*(llvm::raw_ostream **)v1778, 1u, (uint64_t)__s1, 0);
          v690 = (unint64_t *)(v692 + 1);
        }
        while (v690 != v691);
        v566 = *(_QWORD *)(v9 + 40);
      }
      v696 = *(unint64_t **)(v566 + 16232);
      v697 = *(unint64_t **)(v566 + 16240);
      if (v696 != v697)
      {
        do
        {
          LODWORD(__s1[1]) = 0;
          sub_22E7CA8EC(v9, *v696, (uint64_t)__s1);
          sub_22E7CA8EC(v9, v696[1], (uint64_t)__s1);
          sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 2u, (uint64_t)__s1, 0);
          v696 += 2;
        }
        while (v696 != v697);
        v566 = *(_QWORD *)(v9 + 40);
      }
      v698 = *(unint64_t **)(v566 + 16280);
      v699 = *(unint64_t **)(v566 + 16288);
      while (v698 != v699)
      {
        LODWORD(__s1[1]) = 0;
        sub_22E7CA8EC(v9, *v698, (uint64_t)__s1);
        sub_22E7CA8EC(v9, v698[1], (uint64_t)__s1);
        sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 3u, (uint64_t)__s1, 0);
        v698 += 2;
      }
      if ((char **)__s1[0] != &__s1[2])
        free(__s1[0]);
      llvm::deallocate_buffer(*(llvm **)v1911, (void *)(16 * *(unsigned int *)&v1911[16]));
    }
    sub_22E7416F4(*v545);
    v700 = *v545;
    v701 = *(_QWORD **)(*v545 + 8);
    v702 = *(_QWORD *)(*(_QWORD *)*v545 + 8);
    if (v701)
      v703 = (*(uint64_t (**)(_QWORD))(*v701 + 80))(*(_QWORD *)(*v545 + 8)) + v701[4] - v701[2];
    else
      v703 = 0;
    v704 = *(unsigned int *)(v700 + 24) + 8 * (v703 + v702);
    v705 = v1772;
    v706 = *(_QWORD **)(v1772 + 2768);
    v1761 = (uint64_t)v706;
    v1766 = v704;
    if (!v706 || ((v706[15] - v706[14]) & 0x7FFFFFFF8) == 0)
      goto LABEL_1078;
    __s1[0] = (char *)&__s1[2];
    __s1[1] = (char *)0x4000000000;
    sub_22E74181C(*v545, 0xCu, 3u);
    v707 = (char *)operator new(0x228uLL);
    *(_QWORD *)v707 = &unk_24FA715D0;
    *((_QWORD *)v707 + 1) = 0;
    *(_OWORD *)(v707 + 136) = 0u;
    *(_OWORD *)(v707 + 152) = 0u;
    *(_OWORD *)(v707 + 168) = 0u;
    *(_OWORD *)(v707 + 184) = 0u;
    *(_OWORD *)(v707 + 200) = 0u;
    *(_OWORD *)(v707 + 216) = 0u;
    *(_OWORD *)(v707 + 232) = 0u;
    *(_OWORD *)(v707 + 248) = 0u;
    *(_OWORD *)(v707 + 264) = 0u;
    *(_OWORD *)(v707 + 280) = 0u;
    *(_OWORD *)(v707 + 296) = 0u;
    *(_OWORD *)(v707 + 312) = 0u;
    *(_OWORD *)(v707 + 328) = 0u;
    *(_OWORD *)(v707 + 344) = 0u;
    *(_OWORD *)(v707 + 360) = 0u;
    *(_OWORD *)(v707 + 376) = 0u;
    *(_OWORD *)(v707 + 392) = 0u;
    *(_OWORD *)(v707 + 408) = 0u;
    *(_OWORD *)(v707 + 424) = 0u;
    *(_OWORD *)(v707 + 440) = 0u;
    *(_OWORD *)(v707 + 456) = 0u;
    *(_OWORD *)(v707 + 472) = 0u;
    *(_OWORD *)(v707 + 488) = 0u;
    *(_OWORD *)(v707 + 504) = 0u;
    *(_OWORD *)(v707 + 520) = 0u;
    *(_OWORD *)(v707 + 536) = 0u;
    *(_OWORD *)(v707 + 40) = xmmword_22F45E090;
    *((_QWORD *)v707 + 2) = 0;
    *((_QWORD *)v707 + 3) = v707 + 40;
    *(_OWORD *)(v707 + 56) = xmmword_22F45E080;
    *(_OWORD *)(v707 + 72) = xmmword_22F45E160;
    *(int64x2_t *)(v707 + 88) = vdupq_n_s64(2uLL);
    *(_OWORD *)(v707 + 104) = xmmword_22F45E160;
    v708 = *v545;
    *(_OWORD *)(v707 + 120) = xmmword_22F45E0D0;
    *((_QWORD *)v707 + 4) = 0x2000000006;
    *(_QWORD *)&v1886 = v707 + 24;
    *((_QWORD *)&v1886 + 1) = v707;
    v709 = sub_22E74761C(v708, (uint64_t)&v1886);
    v710 = (std::__shared_weak_count *)*((_QWORD *)&v1886 + 1);
    if (*((_QWORD *)&v1886 + 1))
    {
      v711 = (unint64_t *)(*((_QWORD *)&v1886 + 1) + 8);
      do
        v712 = __ldaxr(v711);
      while (__stlxr(v712 - 1, v711));
      if (!v712)
      {
        ((void (*)(std::__shared_weak_count *))v710->__on_zero_shared)(v710);
        std::__shared_weak_count::__release_weak(v710);
      }
    }
    if (*(_QWORD *)(v9 + 56))
      v713 = ((v706[18] - v706[17]) >> 3);
    else
      v713 = 0;
    *(_QWORD *)v1911 = &v1911[16];
    *(_QWORD *)&v1911[8] = 0x4000000000;
    v714 = (v706[15] - v706[14]) >> 3;
    if (!(_DWORD)v714)
    {
      sub_22E7416F4(*v545);
      v705 = v1772;
      goto LABEL_1074;
    }
    v715 = 0;
    v1775 = (void *)v713;
    v716 = v713;
    while (2)
    {
      *(_DWORD *)&v1911[8] = 0;
      v717 = *(llvm::raw_ostream **)v1778;
      v718 = *(_QWORD **)(*(_QWORD *)v1778 + 8);
      v719 = *(_QWORD *)(**(_QWORD **)v1778 + 8);
      if (v718)
        v720 = (*(uint64_t (**)(_QWORD))(*v718 + 80))(*(_QWORD *)(*(_QWORD *)v1778 + 8))
             + v718[4]
             - v718[2];
      else
        LODWORD(v720) = 0;
      v721 = v715;
      if (v715 < 0)
        v721 = v715 + ((*(_QWORD *)(v1761 + 144) - *(_QWORD *)(v1761 + 136)) >> 3);
      v722 = *((_DWORD *)v717 + 6) - v1766 + 8 * (v720 + v719);
      if (v715 >= 0)
        v723 = v721 + 1;
      else
        v723 = ~v721;
      v724 = sub_22F417C0C(v1761, v723);
      v725 = sub_22F2CF898((_QWORD *)v9, *(_QWORD *)(v724 + 4));
      sub_22F2CF824((uint64_t)__s1, v725, v722);
      v726 = v715;
      if (v715 < 0)
        v726 = v715 + ((*(_QWORD *)(v1761 + 144) - *(_QWORD *)(v1761 + 136)) >> 3);
      ++v716;
      if (v715 >= 0)
        v727 = v726 + 1;
      else
        v727 = ~v726;
      v728 = (uint64_t *)sub_22F417C0C(v1761, v727);
      if (*(_DWORD *)v728 == 2)
        v729 = v728;
      else
        v729 = 0;
      v1935[0] = (llvm *)v729;
      v6 = __p;
      if (v729)
      {
        *((_DWORD *)sub_22F29449C(v9 + 640, (uint64_t *)v1935) + 2) = v716;
        sub_22E7CA0D0((_DWORD *)v9, v729[2], (uint64_t)v1911);
        v737 = *(llvm::raw_ostream **)(v9 + 16);
        v738 = 1;
        goto LABEL_1062;
      }
      v730 = v715;
      if (v715 < 0)
        v730 = v715 + ((*(_QWORD *)(v1761 + 144) - *(_QWORD *)(v1761 + 136)) >> 3);
      if (v715 >= 0)
        v731 = v730 + 1;
      else
        v731 = ~v730;
      v732 = (_DWORD *)sub_22F417C0C(v1761, v731);
      if (*v732 != 1)
      {
        v739 = v715;
        if (v715 < 0)
          v739 = v715 + ((*(_QWORD *)(v1761 + 144) - *(_QWORD *)(v1761 + 136)) >> 3);
        if (v715 >= 0)
          v740 = v739 + 1;
        else
          v740 = ~v739;
        v741 = (_DWORD *)sub_22F417C0C(v1761, v740);
        if (*v741 != 3)
          goto LABEL_1063;
        v742 = v741;
        v743 = *(unsigned int *)&v1911[8];
        if (*(unsigned int *)&v1911[8] >= (unint64_t)*(unsigned int *)&v1911[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v743 = *(unsigned int *)&v1911[8];
        }
        *(_QWORD *)(*(_QWORD *)v1911 + 8 * v743) = 2;
        v744 = *(_DWORD *)&v1911[8] + 1;
        *(_DWORD *)&v1911[8] = v744;
        v745 = *((_QWORD *)v742 + 3);
        if (v744 >= *(_DWORD *)&v1911[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v744 = *(_DWORD *)&v1911[8];
        }
        *(_QWORD *)(*(_QWORD *)v1911 + 8 * v744) = v745;
        v746 = *(_DWORD *)&v1911[8] + 1;
        *(_DWORD *)&v1911[8] = v746;
        v747 = *((_BYTE *)v742 + 32);
        if (v746 >= *(_DWORD *)&v1911[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v746 = *(_DWORD *)&v1911[8];
        }
        *(_QWORD *)(*(_QWORD *)v1911 + 8 * v746) = v747 & 1;
        v748 = *(_DWORD *)&v1911[8] + 1;
        *(_DWORD *)&v1911[8] = v748;
        v749 = *((unsigned __int8 *)v742 + 32);
        if (v748 >= *(_DWORD *)&v1911[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v748 = *(_DWORD *)&v1911[8];
        }
        *(_QWORD *)(*(_QWORD *)v1911 + 8 * v748) = (v749 >> 1) & 3;
        v750 = *(_DWORD *)&v1911[8] + 1;
        *(_DWORD *)&v1911[8] = v750;
        v751 = *((unsigned __int8 *)v742 + 32);
        if (v750 >= *(_DWORD *)&v1911[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v750 = *(_DWORD *)&v1911[8];
        }
        *(_QWORD *)(*(_QWORD *)v1911 + 8 * v750) = (v751 >> 3) & 1;
        ++*(_DWORD *)&v1911[8];
        v1935[0] = (llvm *)&v1935[3];
        *(_OWORD *)&v1935[1] = xmmword_22F44E300;
        v753 = (const void *)*((_QWORD *)v742 + 2);
        v752 = *((_QWORD *)v742 + 3);
        if (v752 >= 0x41)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v754 = v1935[1];
        }
        else
        {
          v754 = 0;
          if (!v752)
            goto LABEL_1049;
        }
        memcpy((char *)v1935[0] + (unint64_t)v754, v753, v752);
        v754 = v1935[1];
LABEL_1049:
        v755 = (llvm *)((char *)v754 + v752);
        v1935[1] = (llvm *)((char *)v754 + v752);
        v756 = *((_QWORD *)v742 + 5);
        if (!v756)
          goto LABEL_1056;
        do
        {
          v757 = (size_t *)v756;
          v758 = *(_QWORD *)(v756 + 8);
          if ((v758 & 2) == 0)
            break;
          v756 = v758 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while (v756);
        v761 = *v757;
        v759 = v757 + 4;
        v760 = v761;
        if (v1935[2] < (llvm *)((char *)v755 + v761))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v755 = v1935[1];
          if (!v760)
            goto LABEL_1055;
        }
        else if (!v760)
        {
LABEL_1055:
          v755 = (llvm *)((char *)v755 + v760);
          v1935[1] = v755;
LABEL_1056:
          v6 = __p;
          sub_22E74241C(*(llvm::raw_ostream **)v1778, v709, *(uint64_t *)v1911, *(unsigned int *)&v1911[8], (char *)v1935[0], (uint64_t)v755, 0);
          if ((llvm **)v1935[0] != &v1935[3])
            free(v1935[0]);
          goto LABEL_1063;
        }
        memcpy((char *)v1935[0] + (unint64_t)v755, v759, v760);
        v755 = v1935[1];
        goto LABEL_1055;
      }
      v733 = v732;
      v734 = v732[4];
      v735 = *(unsigned int *)&v1911[8];
      if (*(unsigned int *)&v1911[8] >= (unint64_t)*(unsigned int *)&v1911[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v735 = *(unsigned int *)&v1911[8];
      }
      *(_QWORD *)(*(_QWORD *)v1911 + 8 * v735) = (v734 & 1) == 0;
      ++*(_DWORD *)&v1911[8];
      v736 = *((_QWORD *)v733 + 2);
      if ((v736 & 1) != 0)
      {
        v1935[0] = (llvm *)(v736 & 0xFFFFFFFFFFFFFFFELL);
        v762 = *((unsigned int *)sub_22F29449C(v9 + 640, (uint64_t *)v1935) + 2);
        v763 = *(unsigned int *)&v1911[8];
        if (*(unsigned int *)&v1911[8] >= (unint64_t)*(unsigned int *)&v1911[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v763 = *(unsigned int *)&v1911[8];
        }
        v6 = __p;
        *(_QWORD *)(*(_QWORD *)v1911 + 8 * v763) = v762;
        ++*(_DWORD *)&v1911[8];
      }
      else
      {
        sub_22E7CA0D0((_DWORD *)v9, v736 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v1911);
        v6 = __p;
      }
      v737 = *(llvm::raw_ostream **)v1778;
      v738 = 0;
LABEL_1062:
      sub_22E742038(v737, v738, (uint64_t)v1911, 0);
LABEL_1063:
      if (++v715 != (_DWORD)v714)
        continue;
      break;
    }
    sub_22E7416F4(*(_QWORD *)v1778);
    v764 = (char *)operator new(0x228uLL);
    *(_QWORD *)v764 = &unk_24FA715D0;
    *((_QWORD *)v764 + 1) = 0;
    *(_OWORD *)(v764 + 88) = 0u;
    *(_OWORD *)(v764 + 104) = 0u;
    *(_OWORD *)(v764 + 120) = 0u;
    *(_OWORD *)(v764 + 136) = 0u;
    *(_OWORD *)(v764 + 152) = 0u;
    *(_OWORD *)(v764 + 168) = 0u;
    *(_OWORD *)(v764 + 184) = 0u;
    *(_OWORD *)(v764 + 200) = 0u;
    *(_OWORD *)(v764 + 216) = 0u;
    *(_OWORD *)(v764 + 232) = 0u;
    *(_OWORD *)(v764 + 248) = 0u;
    *(_OWORD *)(v764 + 264) = 0u;
    *(_OWORD *)(v764 + 280) = 0u;
    *(_OWORD *)(v764 + 296) = 0u;
    *(_OWORD *)(v764 + 312) = 0u;
    *(_OWORD *)(v764 + 328) = 0u;
    *(_OWORD *)(v764 + 344) = 0u;
    *(_OWORD *)(v764 + 360) = 0u;
    *(_OWORD *)(v764 + 376) = 0u;
    *(_OWORD *)(v764 + 392) = 0u;
    *(_OWORD *)(v764 + 408) = 0u;
    *(_OWORD *)(v764 + 424) = 0u;
    *(_OWORD *)(v764 + 440) = 0u;
    *(_OWORD *)(v764 + 456) = 0u;
    *(_OWORD *)(v764 + 472) = 0u;
    *(_OWORD *)(v764 + 488) = 0u;
    *(_OWORD *)(v764 + 504) = 0u;
    *(_OWORD *)(v764 + 520) = 0u;
    *(_OWORD *)(v764 + 536) = 0u;
    *(_OWORD *)(v764 + 40) = xmmword_22F45FBF0;
    *((_QWORD *)v764 + 2) = 0;
    *((_QWORD *)v764 + 3) = v764 + 40;
    *(_OWORD *)(v764 + 56) = xmmword_22F45E080;
    v765 = *(llvm::raw_ostream **)v1778;
    *(_OWORD *)(v764 + 72) = xmmword_22F45E0D0;
    *((_QWORD *)v764 + 4) = 0x2000000003;
    v1935[0] = (llvm *)(v764 + 24);
    v1935[1] = (llvm *)v764;
    v766 = sub_22E74761C((uint64_t)v765, (uint64_t)v1935);
    v767 = v766;
    v768 = (std::__shared_weak_count *)v1935[1];
    v705 = v1772;
    if (v1935[1])
    {
      v769 = (unint64_t *)((char *)v1935[1] + 8);
      do
        v770 = __ldaxr(v769);
      while (__stlxr(v770 - 1, v769));
      if (!v770)
      {
        ((void (*)(std::__shared_weak_count *))v768->__on_zero_shared)(v768);
        std::__shared_weak_count::__release_weak(v768);
      }
    }
    __p[0] = (void *)18;
    __p[1] = v1775;
    v545 = (uint64_t *)(v9 + 16);
    sub_22E74241C(*(llvm::raw_ostream **)v1778, v767, (uint64_t)__p, 2, __s1[0], 12 * LODWORD(__s1[1]), 0);
LABEL_1074:
    if (*(_BYTE **)v1911 != &v1911[16])
      free(*(void **)v1911);
    if ((char **)__s1[0] != &__s1[2])
      free(__s1[0]);
LABEL_1078:
    v1935[0] = (llvm *)&v1935[2];
    v1935[1] = (llvm *)0x4000000000;
    *(_QWORD *)&v1886 = v1887;
    *((_QWORD *)&v1886 + 1) = 0x4000000000;
    if (*(_DWORD *)(v705 + 532))
    {
      __s1[0] = (char *)*(unsigned int *)(v705 + 532);
      sub_22F2CF6E8((int *)*v545, 0xDu, (unint64_t *)__s1);
    }
    v771 = *(_DWORD *)(v705 + 860);
    if (v771)
    {
      sub_22E7C9A94(v9, v771, (uint64_t)v1935);
      sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 0x43u, (uint64_t)v1935, 0);
      LODWORD(v1935[1]) = 0;
    }
    if (*(_DWORD *)(v705 + 1000) == 1 && *(_DWORD *)(v705 + 960))
    {
      v772 = v1935[1];
      if (*(_BYTE *)(v705 + 944))
      {
        v773 = *(_DWORD *)(v705 + 928);
        v774 = *(_DWORD *)(v705 + 932);
        v775 = *(unsigned __int8 *)(v705 + 936);
        v776 = *(unsigned __int8 *)(v705 + 937);
        v777 = *(_DWORD *)(v705 + 940);
        if (LODWORD(v1935[1]) >= HIDWORD(v1935[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v772 = v1935[1];
        }
        *((_QWORD *)v1935[0] + v772) = 1;
        ++LODWORD(v1935[1]);
        sub_22E7C9A94(v9, v773, (uint64_t)v1935);
        sub_22E7C9A94(v9, v774, (uint64_t)v1935);
        v778 = v1935[1];
        if (LODWORD(v1935[1]) >= HIDWORD(v1935[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v778 = v1935[1];
        }
        *((_QWORD *)v1935[0] + v778) = v775;
        v779 = LODWORD(v1935[1]) + 1;
        LODWORD(v1935[1]) = v779;
        if (v779 >= HIDWORD(v1935[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v779 = v1935[1];
        }
        *((_QWORD *)v1935[0] + v779) = v776;
        ++LODWORD(v1935[1]);
        sub_22E7C9A94(v9, v777, (uint64_t)v1935);
        v705 = v1772;
      }
      else
      {
        if (LODWORD(v1935[1]) >= HIDWORD(v1935[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v772 = v1935[1];
        }
        *((_QWORD *)v1935[0] + v772) = 0;
        ++LODWORD(v1935[1]);
      }
      v780 = *(unsigned int *)(v705 + 960);
      if ((_DWORD)v780)
      {
        v1482 = *(_QWORD *)(v1772 + 952);
        v1483 = v1482 + 8 * v780;
        do
        {
          sub_22E7C9A94(v9, *(_DWORD *)v1482, (uint64_t)v1935);
          v1484 = *(unsigned __int8 *)(v1482 + 4);
          v1485 = LODWORD(v1935[1]);
          if (LODWORD(v1935[1]) >= (unint64_t)HIDWORD(v1935[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v1485 = LODWORD(v1935[1]);
          }
          *((_QWORD *)v1935[0] + v1485) = v1484;
          v1486 = LODWORD(v1935[1]) + 1;
          LODWORD(v1935[1]) = v1486;
          v1487 = *(unsigned __int8 *)(v1482 + 5);
          if (v1486 >= HIDWORD(v1935[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v1486 = v1935[1];
          }
          *((_QWORD *)v1935[0] + v1486) = v1487;
          v1488 = LODWORD(v1935[1]) + 1;
          LODWORD(v1935[1]) = v1488;
          v1489 = *(unsigned __int8 *)(v1482 + 6);
          if (v1488 >= HIDWORD(v1935[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v1488 = v1935[1];
          }
          *((_QWORD *)v1935[0] + v1488) = v1489;
          ++LODWORD(v1935[1]);
          v1482 += 8;
        }
        while (v1482 != v1483);
      }
      sub_22E742038((llvm::raw_ostream *)*v545, 0x3Eu, (uint64_t)v1935, 0);
      LODWORD(v1935[1]) = 0;
      v705 = v1772;
    }
    sub_22E74181C(*v545, 0xAu, 3u);
    if (*(_QWORD *)(v705 + 512))
    {
      v781 = *(_QWORD *)(v705 + 48);
      *(_QWORD *)(v781 + 312) = 0x3B500000000;
      if (*(char *)(v781 + 311) < 0)
      {
        **(_BYTE **)(v781 + 288) = 0;
        *(_QWORD *)(v781 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v781 + 288) = 0;
        *(_BYTE *)(v781 + 311) = 0;
      }
      v782 = (char *)(v781 + 320);
      __s1[0] = (char *)(v781 + 320);
      __s1[1] = 0;
      __s1[2] = (char *)v781;
      LOWORD(__s1[3]) = 1;
      *(_BYTE *)(v781 + 320) = 0;
      *(_DWORD *)(v781 + 664) = 0;
      v783 = *(unsigned int *)(v781 + 776);
      if ((_DWORD)v783)
      {
        v784 = *(_QWORD *)(v781 + 768);
        v785 = 56 * v783;
        do
        {
          if (*(char *)(v784 + v785 - 9) < 0)
            operator delete(*(void **)(v784 + v785 - 32));
          v785 -= 56;
        }
        while (v785);
        v782 = __s1[0];
        *(_DWORD *)(v781 + 776) = 0;
        v705 = v1772;
        if (!v782)
        {
          v782 = (char *)sub_22E3B8AAC((uint64_t)__s1[1]);
          __s1[0] = v782;
        }
      }
      else
      {
        *(_DWORD *)(v781 + 776) = 0;
      }
      v782[*v782 + 1] = 2;
      v786 = __s1[0];
      v787 = *__s1[0];
      *__s1[0] = v787 + 1;
      *(_QWORD *)&v786[8 * v787 + 16] = v1773 != 0;
      sub_22E3BB0B8((uint64_t)__s1);
    }
    *(_QWORD *)v1911 = &v1911[16];
    *(_QWORD *)&v1911[8] = 0x8000000000;
    v788 = *(unsigned int *)(v705 + 552);
    if ((_DWORD)v788)
    {
      for (nn = *(uint64_t **)(v705 + 544); !*nn || *nn == -8; ++nn)
        ;
    }
    else
    {
      nn = *(uint64_t **)(v705 + 544);
    }
    v790 = *(_QWORD *)(v705 + 544) + 8 * v788;
    if (nn == (uint64_t *)v790)
    {
      v791 = (uint64_t *)&v1911[16];
      v792 = &v1911[16];
      goto LABEL_1133;
    }
    v794 = 0;
    v795 = *nn;
    do
    {
      v796 = *(_QWORD **)(v795 + 8);
      if ((*v796 & 0x4000000) != 0 && (*v796 & 0x300000000) != 0x100000000)
      {
        if (v794 >= *(_DWORD *)&v1911[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v794 = *(_DWORD *)&v1911[8];
        }
        *(_QWORD *)(*(_QWORD *)v1911 + 8 * v794) = v796;
        v794 = ++*(_DWORD *)&v1911[8];
      }
      do
      {
        v797 = nn[1];
        ++nn;
        v795 = v797;
        if (v797)
          v798 = v795 == -8;
        else
          v798 = 1;
      }
      while (v798);
    }
    while (nn != (uint64_t *)v790);
    v792 = *(_BYTE **)v1911;
    v791 = (uint64_t *)(*(_QWORD *)v1911 + 8 * v794);
    if (v794)
      v799 = 126 - 2 * __clz(v794);
    else
LABEL_1133:
      v799 = 0;
    sub_22E7ED3F0((uint64_t)v792, v791, v799, 1);
    if (*(_DWORD *)&v1911[8])
    {
      v821 = *(void ***)v1911;
      v1780 = *(_QWORD *)v1911 + 8 * *(unsigned int *)&v1911[8];
      while (1)
      {
        v1891 = *v821;
        v822 = sub_22F175F40(v1772, (uint64_t)v1891);
        v823 = *(llvm::raw_ostream **)v1778;
        v824 = *(_QWORD **)(*(_QWORD *)v1778 + 8);
        v1786 = *(_QWORD *)(**(_QWORD **)v1778 + 8);
        if (v824)
          v825 = (*(uint64_t (**)(_QWORD *))(*v824 + 80))(v824) + v824[4] - v824[2];
        else
          LODWORD(v825) = 0;
        v826 = *((_DWORD *)v823 + 6);
        if (!v1773 || *(_DWORD *)(*(_QWORD *)(v9 + 64) + 28) != 2)
        {
          if (!v822)
          {
LABEL_1182:
            v837 = (char *)v1891;
            if ((*((_BYTE *)v1891 + 4) & 8) != 0)
              (*(void (**)(_QWORD, void *))(**(_QWORD **)(v1772 + 120) + 24))(*(_QWORD *)(v1772 + 120), v1891);
            __s1[0] = v837;
            __p[0] = 0;
            if (sub_22E3B9914(v1772 + 1960, __s1, __p))
            {
              v838 = __p[0];
              v839 = *(_QWORD *)(v1772 + 1960);
              v840 = *(unsigned int *)(v1772 + 1976);
            }
            else
            {
              v839 = *(_QWORD *)(v1772 + 1960);
              v840 = *(unsigned int *)(v1772 + 1976);
              v838 = (_QWORD *)(v839 + 16 * v840);
            }
            if (v838 == (_QWORD *)(v839 + 16 * v840) || (v843 = v838[1], v841 = v838 + 1, v842 = v843, v843 < 8))
            {
              v841 = 0;
              v844 = 0;
            }
            else if ((v842 & 4) != 0)
            {
              v849 = v842 & 0xFFFFFFFFFFFFFFF8;
              v841 = *(_BYTE **)v849;
              v844 = *(unsigned int *)(v849 + 8);
            }
            else
            {
              v844 = 1;
            }
            __s1[0] = (char *)&__s1[2];
            __s1[1] = (char *)0x800000000;
            sub_22E5B5498((uint64_t)__s1, v841, &v841[8 * v844]);
            memset(__p, 0, 20);
            v845 = (int)__s1[1];
            v846 = (int)__s1[1];
            if (LODWORD(__s1[1]))
            {
              do
              {
                v856 = *(_QWORD *)&__s1[0][8 * v846 - 8];
                LODWORD(__s1[1]) = v846 - 1;
                v857 = sub_22E7CA298(v9, *(_QWORD *)(v856 + 24));
                v858 = DWORD2(v1886);
                if (DWORD2(v1886) >= (unint64_t)HIDWORD(v1886))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v858 = DWORD2(v1886);
                }
                *(_QWORD *)(v1886 + 8 * v858) = v857;
                ++DWORD2(v1886);
                v859 = sub_22F2CF76C(v9, *(_QWORD *)(v856 + 16), (uint64_t)v1891);
                v860 = DWORD2(v1886);
                if (DWORD2(v1886) >= (unint64_t)HIDWORD(v1886))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v860 = DWORD2(v1886);
                }
                *(_QWORD *)(v1886 + 8 * v860) = v859;
                ++DWORD2(v1886);
                v861 = (void **)(v856 + 40);
                v862 = *(unsigned int *)(v856 + 36);
                if ((_DWORD)v862)
                {
                  v863 = 8 * v862;
                  v864 = v856 + 40;
                  do
                  {
                    v865 = sub_22E7CA298(v9, *(_QWORD *)(*(_QWORD *)v864 + 24));
                    v866 = DWORD2(v1886);
                    if (DWORD2(v1886) >= (unint64_t)HIDWORD(v1886))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v866 = DWORD2(v1886);
                    }
                    *(_QWORD *)(v1886 + 8 * v866) = v865;
                    ++DWORD2(v1886);
                    v864 += 8;
                    v863 -= 8;
                  }
                  while (v863);
                }
                sub_22E742038(*(llvm::raw_ostream **)v1778, 5u, (uint64_t)&v1886, 0);
                DWORD2(v1886) = 0;
                v867 = *(unsigned int *)(v856 + 36);
                v6 = __p;
                if ((_DWORD)v867)
                {
                  v868 = 8 * v867;
                  do
                  {
                    v1888 = *v861;
                    v869 = v1888;
                    v870 = sub_22F2D2954((uint64_t)__p, (uint64_t *)&v1888);
                    v871 = *((_DWORD *)v870 + 2) + 1;
                    *((_DWORD *)v870 + 2) = v871;
                    if (v871 == v869[8])
                    {
                      v872 = LODWORD(__s1[1]);
                      if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                        v872 = LODWORD(__s1[1]);
                      }
                      *(_QWORD *)&__s1[0][8 * v872] = v869;
                      ++LODWORD(__s1[1]);
                    }
                    ++v861;
                    v868 -= 8;
                  }
                  while (v868);
                }
                v846 = (int)__s1[1];
              }
              while (LODWORD(__s1[1]));
              v848 = LODWORD(__p[2]);
              v847 = (llvm *)__p[0];
            }
            else
            {
              v847 = 0;
              v848 = 0;
            }
            llvm::deallocate_buffer(v847, (void *)(16 * v848));
            if ((char **)__s1[0] != &__s1[2])
              free(__s1[0]);
            if (!(LODWORD(v1935[1]) | v845))
              goto LABEL_1228;
            goto LABEL_1230;
          }
          while (2)
          {
            if (sub_22E7C9F48(v822, v1773 != 0, v1772))
              goto LABEL_1182;
            sub_22E7C9A94(v9, *(_DWORD *)(v822 + 8), (uint64_t)v1935);
            v832 = *(_BYTE *)(v822 + 12);
            v833 = LODWORD(v1935[1]);
            if (LODWORD(v1935[1]) >= (unint64_t)HIDWORD(v1935[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v833 = LODWORD(v1935[1]);
            }
            *((_QWORD *)v1935[0] + v833) = v832 & 3;
            v834 = ++LODWORD(v1935[1]);
            v835 = *(unsigned __int8 *)(v822 + 12);
            if ((v835 & 3) == 2)
            {
              v836 = (v835 >> 3) & 1;
LABEL_1178:
              if (v834 >= HIDWORD(v1935[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v834 = v1935[1];
              }
              *((_QWORD *)v1935[0] + v834) = v836;
              ++LODWORD(v1935[1]);
            }
            else if ((v835 & 3) == 0)
            {
              v836 = sub_22F2CF76C(v9, *(_QWORD *)(v822 + 16), (uint64_t)v1891);
              v834 = v1935[1];
              goto LABEL_1178;
            }
            v822 = *(_QWORD *)v822;
            if (!v822)
              goto LABEL_1182;
            continue;
          }
        }
        if (!v822 || sub_22E7C9F48(v822, 1, v1772) || (*(_BYTE *)(v822 + 12) & 3) == 1)
          goto LABEL_1228;
        sub_22E7C9A94(v9, *(_DWORD *)(v822 + 8), (uint64_t)v1935);
        v827 = *(_BYTE *)(v822 + 12);
        v828 = LODWORD(v1935[1]);
        if (LODWORD(v1935[1]) >= (unint64_t)HIDWORD(v1935[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v828 = LODWORD(v1935[1]);
        }
        *((_QWORD *)v1935[0] + v828) = v827 & 3;
        v829 = ++LODWORD(v1935[1]);
        v830 = *(unsigned __int8 *)(v822 + 12);
        if ((v830 & 3) == 2)
          break;
        if ((v830 & 3) == 0)
        {
          v831 = sub_22F2CF76C(v9, *(_QWORD *)(v822 + 16), (uint64_t)v1891);
          v829 = v1935[1];
LABEL_1196:
          if (v829 >= HIDWORD(v1935[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v829 = v1935[1];
          }
          *((_QWORD *)v1935[0] + v829) = v831;
          ++LODWORD(v1935[1]);
        }
        v850 = sub_22E7CA298(v9, *(_QWORD *)(v9 + 64));
        v851 = DWORD2(v1886);
        if (DWORD2(v1886) >= (unint64_t)HIDWORD(v1886))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v851 = DWORD2(v1886);
        }
        *(_QWORD *)(v1886 + 8 * v851) = v850;
        ++DWORD2(v1886);
        v852 = sub_22F14FEA4((uint64_t *)v822);
        if (v852)
          v853 = v852[2];
        else
          v853 = 0;
        v854 = sub_22F2CF76C(v9, v853, (uint64_t)v1891);
        v855 = DWORD2(v1886);
        if (DWORD2(v1886) >= (unint64_t)HIDWORD(v1886))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v855 = DWORD2(v1886);
        }
        *(_QWORD *)(v1886 + 8 * v855) = v854;
        ++DWORD2(v1886);
        sub_22E742038(*(llvm::raw_ostream **)v1778, 5u, (uint64_t)&v1886, 0);
        DWORD2(v1886) = 0;
LABEL_1230:
        *((_DWORD *)sub_22E7448C8((_DWORD *)(v9 + 456), &v1891) + 2) = v826 - v1766 + 8 * (v825 + v1786);
        sub_22E742038(*(llvm::raw_ostream **)v1778, 4u, (uint64_t)v1935, 0);
        LODWORD(v1935[1]) = 0;
LABEL_1228:
        if (++v821 == (void **)v1780)
          goto LABEL_1136;
      }
      v831 = (v830 >> 3) & 1;
      goto LABEL_1196;
    }
LABEL_1136:
    v1889 = 0;
    v1888 = 0;
    v1890[0] = 0;
    v800 = -1431655765 * ((*(_QWORD *)(v9 + 440) - *(_QWORD *)(v9 + 432)) >> 3);
    if ((_DWORD)v800)
    {
      v873 = 0;
      v874 = 0;
      while (1)
      {
        v875 = *(_QWORD *)(v9 + 432) + 24 * v874;
        v876 = *(_DWORD *)(v875 + 16);
        v877 = *(_DWORD *)(v9 + 400);
        v878 = v876 - v877;
        if (v876 >= v877)
          break;
LABEL_1266:
        if (++v874 == v800)
          goto LABEL_1137;
      }
      v879 = *(_QWORD *)v875;
      v880 = *(_QWORD *)(v875 + 8);
      v881 = (v1889 - (uint64_t)v873) >> 2;
      if (v881 <= v878)
      {
        v882 = (v878 + 1);
        if (v882 <= v881)
        {
          if (v882 < v881)
            v1889 = (uint64_t)v873 + 4 * v882;
        }
        else
        {
          sub_22E7EE02C((char **)&v1888, v882 - v881);
        }
      }
      v883 = *(llvm::raw_ostream **)v1778;
      v884 = *(_QWORD **)(*(_QWORD *)v1778 + 8);
      v885 = *(_QWORD *)(**(_QWORD **)v1778 + 8);
      if (v884)
        v886 = (*(uint64_t (**)(_QWORD))(*v884 + 80))(*(_QWORD *)(*(_QWORD *)v1778 + 8))
             + v884[4]
             - v884[2];
      else
        LODWORD(v886) = 0;
      v887 = *((_DWORD *)v883 + 6) - v1766 + 8 * (v886 + v885);
      v873 = v1888;
      *((_DWORD *)v1888 + v878) = v887;
      sub_22E7CA0D0((_DWORD *)v9, v879, (uint64_t)v1935);
      sub_22E7C9A94(v9, *(_DWORD *)v880, (uint64_t)v1935);
      sub_22E7C9A94(v9, *(_DWORD *)(v880 + 4), (uint64_t)v1935);
      v888 = *(unsigned __int16 *)(v880 + 36);
      v889 = LODWORD(v1935[1]);
      if (LODWORD(v1935[1]) >= (unint64_t)HIDWORD(v1935[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v889 = LODWORD(v1935[1]);
      }
      *((_QWORD *)v1935[0] + v889) = (v888 >> 7) & 1;
      v890 = LODWORD(v1935[1]) + 1;
      LODWORD(v1935[1]) = v890;
      v891 = *(unsigned __int16 *)(v880 + 36);
      if (v890 >= HIDWORD(v1935[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v890 = v1935[1];
      }
      *((_QWORD *)v1935[0] + v890) = (v891 >> 10) & 1;
      v892 = LODWORD(v1935[1]) + 1;
      LODWORD(v1935[1]) = v892;
      v893 = *(unsigned int *)(v880 + 28);
      if (v892 >= HIDWORD(v1935[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v892 = v1935[1];
      }
      *((_QWORD *)v1935[0] + v892) = v893;
      v894 = ++LODWORD(v1935[1]);
      v895 = *(unsigned __int16 *)(v880 + 36);
      if ((v895 & 2) != 0)
      {
        if (v894 >= HIDWORD(v1935[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v894 = v1935[1];
        }
        *((_QWORD *)v1935[0] + v894) = (v895 >> 2) & 1;
        v897 = LODWORD(v1935[1]) + 1;
        LODWORD(v1935[1]) = v897;
        v898 = *(unsigned __int16 *)(v880 + 36);
        if (v897 >= HIDWORD(v1935[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v897 = v1935[1];
        }
        *((_QWORD *)v1935[0] + v897) = (v898 >> 3) & 1;
        v899 = LODWORD(v1935[1]) + 1;
        LODWORD(v1935[1]) = v899;
        v900 = *(unsigned __int16 *)(v880 + 36);
        if (v899 >= HIDWORD(v1935[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v899 = v1935[1];
        }
        *((_QWORD *)v1935[0] + v899) = (v900 >> 5) & 1;
        v901 = LODWORD(v1935[1]) + 1;
        LODWORD(v1935[1]) = v901;
        v902 = *(unsigned int *)(v880 + 24);
        if (v901 >= HIDWORD(v1935[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v901 = v1935[1];
        }
        *((_QWORD *)v1935[0] + v901) = v902;
        ++LODWORD(v1935[1]);
        v903 = *(unsigned int *)(v880 + 24);
        if ((_DWORD)v903)
        {
          v904 = *(uint64_t **)(v880 + 8);
          v905 = 8 * v903;
          do
          {
            v906 = *v904++;
            sub_22E7CA0D0((_DWORD *)v9, v906, (uint64_t)v1935);
            v905 -= 8;
          }
          while (v905);
        }
        v896 = 2;
        if (!v1761)
          goto LABEL_1262;
      }
      else
      {
        v896 = 1;
        if (!v1761)
        {
LABEL_1262:
          sub_22E742038(*(llvm::raw_ostream **)v1778, v896, (uint64_t)v1935, 0);
          LODWORD(v1935[1]) = 0;
          v907 = *(unsigned int *)(v880 + 28);
          if ((_DWORD)v907)
          {
            v908 = 0;
            v909 = 24 * v907;
            do
            {
              sub_22E7CA170((_DWORD *)v9, *(_QWORD *)(v880 + 16) + v908, (uint64_t)v1935);
              sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 3u, (uint64_t)v1935, 0);
              LODWORD(v1935[1]) = 0;
              v908 += 24;
            }
            while (v909 != v908);
          }
          ++*(_DWORD *)(v9 + 1588);
          v6 = __p;
          goto LABEL_1266;
        }
      }
      __s1[0] = (char *)sub_22F417C34(v1761, v880);
      v910 = *((unsigned int *)sub_22F29449C(v9 + 640, (uint64_t *)__s1) + 2);
      v911 = LODWORD(v1935[1]);
      if (LODWORD(v1935[1]) >= (unint64_t)HIDWORD(v1935[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v911 = LODWORD(v1935[1]);
      }
      *((_QWORD *)v1935[0] + v911) = v910;
      ++LODWORD(v1935[1]);
      goto LABEL_1262;
    }
LABEL_1137:
    sub_22E7416F4(*(_QWORD *)v1778);
    v801 = (char *)operator new(0x228uLL);
    *(_QWORD *)v801 = &unk_24FA715D0;
    *((_QWORD *)v801 + 1) = 0;
    *(_OWORD *)(v801 + 120) = 0u;
    *(_OWORD *)(v801 + 136) = 0u;
    *(_OWORD *)(v801 + 152) = 0u;
    *(_OWORD *)(v801 + 168) = 0u;
    *(_OWORD *)(v801 + 184) = 0u;
    *(_OWORD *)(v801 + 200) = 0u;
    *(_OWORD *)(v801 + 216) = 0u;
    *(_OWORD *)(v801 + 232) = 0u;
    *(_OWORD *)(v801 + 248) = 0u;
    *(_OWORD *)(v801 + 264) = 0u;
    *(_OWORD *)(v801 + 280) = 0u;
    *(_OWORD *)(v801 + 296) = 0u;
    *(_OWORD *)(v801 + 312) = 0u;
    *(_OWORD *)(v801 + 328) = 0u;
    *(_OWORD *)(v801 + 344) = 0u;
    *(_OWORD *)(v801 + 360) = 0u;
    *(_OWORD *)(v801 + 376) = 0u;
    *(_OWORD *)(v801 + 392) = 0u;
    *(_OWORD *)(v801 + 408) = 0u;
    *(_OWORD *)(v801 + 424) = 0u;
    *(_OWORD *)(v801 + 440) = 0u;
    *(_OWORD *)(v801 + 456) = 0u;
    *(_OWORD *)(v801 + 472) = 0u;
    *(_OWORD *)(v801 + 488) = 0u;
    *(_OWORD *)(v801 + 504) = 0u;
    *(_OWORD *)(v801 + 520) = 0u;
    *(_OWORD *)(v801 + 536) = 0u;
    *(_OWORD *)(v801 + 40) = xmmword_22F45FC00;
    *((_QWORD *)v801 + 2) = 0;
    *((_QWORD *)v801 + 3) = v801 + 40;
    *(_OWORD *)(v801 + 56) = xmmword_22F45E080;
    *(_OWORD *)(v801 + 72) = xmmword_22F45E080;
    *(_OWORD *)(v801 + 88) = xmmword_22F45FAF0;
    v802 = *(llvm::raw_ostream **)v1778;
    *(_OWORD *)(v801 + 104) = xmmword_22F45E0D0;
    *((_QWORD *)v801 + 4) = 0x2000000005;
    *(_QWORD *)&v1813 = v801 + 24;
    *((_QWORD *)&v1813 + 1) = v801;
    v803 = sub_22E74761C((uint64_t)v802, (uint64_t)&v1813);
    v804 = (std::__shared_weak_count *)*((_QWORD *)&v1813 + 1);
    if (*((_QWORD *)&v1813 + 1))
    {
      v805 = (unint64_t *)(*((_QWORD *)&v1813 + 1) + 8);
      do
        v806 = __ldaxr(v805);
      while (__stlxr(v806 - 1, v805));
      if (!v806)
      {
        ((void (*)(std::__shared_weak_count *))v804->__on_zero_shared)(v804);
        std::__shared_weak_count::__release_weak(v804);
      }
    }
    v807 = (char *)(*(_DWORD *)(v9 + 400) - 1);
    v808 = (char *)(v1766 - *(_QWORD *)(v9 + 72));
    __s1[0] = (char *)47;
    __s1[1] = (char *)((v1889 - (uint64_t)v1888) >> 2);
    __s1[2] = v807;
    __s1[3] = v808;
    if ((void *)v1889 == v1888)
      v809 = 0;
    else
      v809 = (char *)v1888;
    if ((void *)v1889 == v1888)
      v810 = 0;
    else
      v810 = v1889 - (_QWORD)v1888;
    sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v803, (uint64_t)__s1, 4, v809, v810, 0);
    v811 = (char *)operator new(0x228uLL);
    *(_QWORD *)v811 = &unk_24FA715D0;
    *((_QWORD *)v811 + 1) = 0;
    *(_OWORD *)(v811 + 72) = 0u;
    *(_OWORD *)(v811 + 88) = 0u;
    *(_OWORD *)(v811 + 104) = 0u;
    *(_OWORD *)(v811 + 120) = 0u;
    *(_OWORD *)(v811 + 136) = 0u;
    *(_OWORD *)(v811 + 152) = 0u;
    *(_OWORD *)(v811 + 168) = 0u;
    *(_OWORD *)(v811 + 184) = 0u;
    *(_OWORD *)(v811 + 200) = 0u;
    *(_OWORD *)(v811 + 216) = 0u;
    *(_OWORD *)(v811 + 232) = 0u;
    *(_OWORD *)(v811 + 248) = 0u;
    *(_OWORD *)(v811 + 264) = 0u;
    *(_OWORD *)(v811 + 280) = 0u;
    *(_OWORD *)(v811 + 296) = 0u;
    *(_OWORD *)(v811 + 312) = 0u;
    *(_OWORD *)(v811 + 328) = 0u;
    *(_OWORD *)(v811 + 344) = 0u;
    *(_OWORD *)(v811 + 360) = 0u;
    *(_OWORD *)(v811 + 376) = 0u;
    *(_OWORD *)(v811 + 392) = 0u;
    *(_OWORD *)(v811 + 408) = 0u;
    *(_OWORD *)(v811 + 424) = 0u;
    *(_OWORD *)(v811 + 440) = 0u;
    *(_OWORD *)(v811 + 456) = 0u;
    *(_OWORD *)(v811 + 472) = 0u;
    *(_OWORD *)(v811 + 488) = 0u;
    *(_OWORD *)(v811 + 504) = 0u;
    *(_OWORD *)(v811 + 520) = 0u;
    *(_OWORD *)(v811 + 536) = 0u;
    *(_OWORD *)(v811 + 40) = xmmword_22F45FC10;
    *((_QWORD *)v811 + 2) = 0;
    *((_QWORD *)v811 + 3) = v811 + 40;
    *(_OWORD *)(v811 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v811 + 4) = 0x2000000002;
    v812 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)&v1809 = v811 + 24;
    *((_QWORD *)&v1809 + 1) = v811;
    v813 = sub_22E74761C(v812, (uint64_t)&v1809);
    v814 = (std::__shared_weak_count *)*((_QWORD *)&v1809 + 1);
    v10 = v1772;
    if (*((_QWORD *)&v1809 + 1))
    {
      v815 = (unint64_t *)(*((_QWORD *)&v1809 + 1) + 8);
      do
        v816 = __ldaxr(v815);
      while (__stlxr(v816 - 1, v815));
      if (!v816)
      {
        ((void (*)(std::__shared_weak_count *))v814->__on_zero_shared)(v814);
        std::__shared_weak_count::__release_weak(v814);
      }
    }
    __s1[0] = (char *)&__s1[3];
    *(_OWORD *)&__s1[1] = xmmword_22F45FB60;
    sub_22F242C48((uint64_t)__p, (uint64_t)__s1);
    v1892 = 0uLL;
    v1891 = 0;
    sub_22E6C5AA8((uint64_t)&v1891, *(unsigned int *)(v1772 + 1600));
    v817 = *(_QWORD *)(v1772 + 1592);
    v818 = *(unsigned int *)(v1772 + 1608);
    v819 = (_QWORD *)(v817 + 8 * v818);
    v1793 = v813;
    if (*(_DWORD *)(v1772 + 1600))
    {
      if ((_DWORD)v818)
      {
        v912 = 8 * v818;
        v820 = *(_QWORD **)(v1772 + 1592);
        while ((*v820 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v820;
          v912 -= 8;
          if (!v912)
            goto LABEL_1274;
        }
      }
      else
      {
        v820 = *(_QWORD **)(v1772 + 1592);
      }
    }
    else
    {
LABEL_1274:
      v820 = (_QWORD *)(v817 + 8 * v818);
    }
    v913 = (_QWORD *)(v817 + 8 * v818);
    while (v820 != v913)
    {
      v1803 = (char *)*v820;
      *(_QWORD *)v1806 = 0;
      if (sub_22E7ED0F8((uint64_t *)(v9 + 128), &v1803, v1806))
      {
        v914 = *(_QWORD *)v1806;
        if (*(_QWORD *)v1806 != *(_QWORD *)(v9 + 128) + 16 * *(unsigned int *)(v9 + 144))
        {
          v915 = (char *)v1892;
          if ((unint64_t)v1892 >= *((_QWORD *)&v1892 + 1))
          {
            v917 = (char *)v1891;
            v918 = (uint64_t)(v1892 - (_QWORD)v1891) >> 2;
            v919 = v918 + 1;
            if ((unint64_t)(v918 + 1) >> 62)
              goto LABEL_2504;
            v920 = *((_QWORD *)&v1892 + 1) - (_QWORD)v1891;
            if ((uint64_t)(*((_QWORD *)&v1892 + 1) - (_QWORD)v1891) >> 1 > v919)
              v919 = v920 >> 1;
            if ((unint64_t)v920 >= 0x7FFFFFFFFFFFFFFCLL)
              v921 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v921 = v919;
            if (v921)
            {
              if (v921 >> 62)
                goto LABEL_2503;
              v922 = (char *)operator new(4 * v921);
            }
            else
            {
              v922 = 0;
            }
            v923 = &v922[4 * v918];
            *(_DWORD *)v923 = *(_DWORD *)(v914 + 8);
            v916 = v923 + 4;
            while (v915 != v917)
            {
              v924 = *((_DWORD *)v915 - 1);
              v915 -= 4;
              *((_DWORD *)v923 - 1) = v924;
              v923 -= 4;
            }
            v1891 = v923;
            *(_QWORD *)&v1892 = v916;
            *((_QWORD *)&v1892 + 1) = &v922[4 * v921];
            if (v917)
              operator delete(v917);
            v10 = v1772;
            v6 = __p;
          }
          else
          {
            *(_DWORD *)v1892 = *(_DWORD *)(*(_QWORD *)v1806 + 8);
            v916 = v915 + 4;
            v10 = v1772;
          }
          *(_QWORD *)&v1892 = v916;
        }
      }
      v925 = v820 + 1;
      v820 = v819;
      if (v925 != v819)
      {
        v820 = v925;
        while ((*v820 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v820 == v819)
          {
            v820 = v819;
            break;
          }
        }
      }
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    *(_DWORD *)v1806 = ((_QWORD)v1892 - (_QWORD)v1891) >> 2;
    llvm::raw_ostream::write((llvm::raw_ostream *)__p, v1806);
    v13 = (void **)v1891;
    v926 = (void **)v1892;
    if (v1891 == (void *)v1892)
    {
      v927 = (llvm::raw_ostream **)(v9 + 16);
      v8 = &v1911[16];
      v4 = v1793;
      if (!v1891)
        goto LABEL_1310;
LABEL_1309:
      *(_QWORD *)&v1892 = v13;
      operator delete(v13);
      goto LABEL_1310;
    }
    v927 = (llvm::raw_ostream **)(v9 + 16);
    v8 = &v1911[16];
    v4 = v1793;
    do
    {
      v928 = *(_DWORD *)v13;
      v13 = (void **)((char *)v13 + 4);
      *(_DWORD *)v1806 = v928;
      llvm::raw_ostream::write((llvm::raw_ostream *)__p, v1806);
    }
    while (v13 != v926);
    v13 = (void **)v1891;
    if (v1891)
      goto LABEL_1309;
LABEL_1310:
    v1891 = (void *)66;
    sub_22E74241C(*v927, v4, (uint64_t)&v1891, 1, __s1[0], LODWORD(__s1[1]), 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)__p);
    if ((char **)__s1[0] != &__s1[3])
      free(__s1[0]);
    if (v1888)
      operator delete(v1888);
    if (*(_BYTE **)v1911 != &v1911[16])
      free(*(void **)v1911);
    if ((_OWORD *)v1886 != v1887)
      free((void *)v1886);
    if ((llvm **)v1935[0] != &v1935[2])
      free(v1935[0]);
    v1767 = *(_QWORD *)(v10 + 104);
    v1935[0] = (llvm *)v9;
    v1935[1] = (llvm *)&v1935[4];
    *(_OWORD *)&v1935[2] = xmmword_22F44E310;
    v1938 = 0;
    v1937 = 0;
    v1939 = 0x1000000000;
    __p[2] = 0;
    __p[1] = 0;
    v1925 = v1927;
    v1926 = 0x400000000;
    v1928 = &v1930;
    v1929 = 0;
    v1931 = 0;
    v1930 = 0;
    __p[0] = (void *)64;
    v929 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
    if (!v929)
    {
LABEL_2506:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      continue;
    }
    break;
  }
  v1794 = 0;
  v1932 = v929;
  v1888 = v1890;
  v1889 = 0x400000000;
  *(_WORD *)v1911 = 0;
  memset(&v1911[4], 0, 28);
  v1912 = (uint64_t)&v1913 + 8;
  *(_QWORD *)&v1913 = 0x200000000;
  v1920 = 0;
  v1919 = &v1920;
  v1921 = 0;
  v1922[0] = &v1923;
  v1922[1] = (void *)0x200000000;
  v930 = *(_QWORD *)(v9 + 64);
  if (!v930)
    goto LABEL_1384;
  v1794 = 0;
  *(_QWORD *)&v1886 = v1887;
  HIDWORD(v1886) = 16;
  *(_QWORD *)&v1887[0] = v930;
  v931 = 1;
  while (2)
  {
    while (1)
    {
      v932 = *(_QWORD *)(v1886 + 8 * v931-- - 8);
      DWORD2(v1886) = v931;
      if ((*(_BYTE *)(v932 + 1344) & 1) == 0)
        break;
      if (!v931)
        goto LABEL_1382;
    }
    sub_22F41274C(v1767 + 488, v932, 0, 0);
    v933 = *(_DWORD *)(v932 + 1176);
    v1787 = v932;
    if (v933)
    {
      v934 = *(_QWORD *)(v932 + 1168);
      v935 = v934 + 72 * v933;
      v1781 = v932 & 0xFFFFFFFFFFFFFFF9;
      while (1)
      {
        v1891 = *(void **)v934;
        if (*(char *)(v934 + 31) < 0)
        {
          sub_22E3BB2B4(&v1892, *(void **)(v934 + 8), *(_QWORD *)(v934 + 16));
        }
        else
        {
          v936 = *(_OWORD *)(v934 + 8);
          v1893 = *(char **)(v934 + 24);
          v1892 = v936;
        }
        v937 = *(_OWORD *)(v934 + 32);
        v938 = *(_OWORD *)(v934 + 48);
        v1896 = *(_QWORD *)(v934 + 64);
        v1894 = v937;
        v1895 = v938;
        if ((_BYTE)v938)
        {
          if ((_BYTE)v1896 || !*(_BYTE *)(v9 + 120))
            break;
        }
        v947 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 48);
        *(_DWORD *)(v947 + 312) = HIDWORD(v1891);
        *(_DWORD *)(v947 + 316) = 920;
        if (*(char *)(v947 + 311) < 0)
        {
          **(_BYTE **)(v947 + 288) = 0;
          *(_QWORD *)(v947 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v947 + 288) = 0;
          *(_BYTE *)(v947 + 311) = 0;
        }
        __s1[0] = (char *)(v947 + 320);
        __s1[1] = 0;
        __s1[2] = (char *)v947;
        LOWORD(__s1[3]) = 1;
        *(_BYTE *)(v947 + 320) = 0;
        *(_DWORD *)(v947 + 664) = 0;
        v948 = *(unsigned int *)(v947 + 776);
        if ((_DWORD)v948)
        {
          v949 = *(_QWORD *)(v947 + 768);
          v950 = 56 * v948;
          do
          {
            if (*(char *)(v949 + v950 - 9) < 0)
              operator delete(*(void **)(v949 + v950 - 32));
            v950 -= 56;
          }
          while (v950);
        }
        *(_DWORD *)(v947 + 776) = 0;
        sub_22F1D8A24(*(uint64_t **)(v9 + 64), 0, &v1813);
        if (v1814 >= 0)
          v951 = &v1813;
        else
          v951 = (__int128 *)v1813;
        if (v1814 >= 0)
          v952 = HIBYTE(v1814) & 0x7F;
        else
          v952 = *((_QWORD *)&v1813 + 1);
        sub_22E3B89A8((unsigned __int8 **)__s1, v951, v952);
        v953 = v1895;
        v954 = __s1[0];
        if (!__s1[0])
        {
          v954 = (char *)sub_22E3B8AAC((uint64_t)__s1[1]);
          __s1[0] = v954;
        }
        v954[*v954 + 1] = 2;
        v955 = __s1[0];
        v956 = *__s1[0];
        *__s1[0] = v956 + 1;
        *(_QWORD *)&v955[8 * v956 + 16] = v953;
        if (SHIBYTE(v1893) >= 0)
          v957 = &v1892;
        else
          v957 = (__int128 *)v1892;
        if (SHIBYTE(v1893) >= 0)
          v958 = HIBYTE(v1893) & 0x7F;
        else
          v958 = *((_QWORD *)&v1892 + 1);
        sub_22E3B89A8((unsigned __int8 **)__s1, v957, v958);
        if (SHIBYTE(v1814) < 0)
          operator delete((void *)v1813);
        sub_22E3BB0B8((uint64_t)__s1);
LABEL_1377:
        if (SHIBYTE(v1893) < 0)
          operator delete((void *)v1892);
        v934 += 72;
        if (v934 == v935)
          goto LABEL_1327;
      }
      v939 = *(_QWORD *)(v1787 + 40);
      v941 = *(const void **)v939;
      v940 = *(_QWORD *)(v939 + 8);
      __s1[0] = (char *)&__s1[3];
      *(_OWORD *)&__s1[1] = xmmword_22F44E310;
      if (v940 >= 0x81)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v942 = (unint64_t)__s1[1];
      }
      else
      {
        v942 = 0;
        if (!v940)
        {
LABEL_1338:
          __s1[1] = (char *)(v942 + v940);
          v1816 = 260;
          *(_QWORD *)&v1813 = &v1892;
          v1812 = 257;
          v1808 = 257;
          v1805 = 257;
          llvm::sys::path::append();
          sub_22E7C9C14(v9, (void **)__s1);
          v943 = (unint64_t)__s1[1];
          if (__s1[1] + 1 > __s1[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v943 = (unint64_t)__s1[1];
          }
          __s1[0][v943] = 0;
          v944 = strdup(__s1[0]);
          v945 = v944;
          if (v944)
            v946 = strlen(v944);
          else
            v946 = 0;
          v959 = v1889;
          if (v1889 >= (unint64_t)HIDWORD(v1889))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v959 = v1889;
          }
          *((_QWORD *)v1888 + v959) = v945;
          LODWORD(v1889) = v1889 + 1;
          *(_QWORD *)&v1813 = v945;
          *((_QWORD *)&v1813 + 1) = v946;
          if (*(_BYTE *)(v9 + 120))
            v960 = *((_QWORD *)&v1895 + 1);
          else
            v960 = 0;
          v1814 = *((_QWORD *)&v1894 + 1);
          v1815 = v960;
          *((_QWORD *)&v1809 + 1) = 0;
          v1810 = 0;
          v961 = qword_22F4603E0[(int)v1891] | v1781;
          *(_QWORD *)&v1809 = v1911;
          v1811 = v961;
          sub_22E7C9D40((uint64_t)__p, (uint64_t)&v1813, &v1809);
          if ((char **)__s1[0] != &__s1[3])
            free(__s1[0]);
          ++v1794;
          goto LABEL_1377;
        }
      }
      memcpy(&__s1[0][v942], v941, v940);
      v942 = (unint64_t)__s1[1];
      goto LABEL_1338;
    }
LABEL_1327:
    sub_22F2A7CF4((uint64_t)&v1886, *(char **)(v1787 + 200), *(char **)(v1787 + 208));
    v931 = DWORD2(v1886);
    v6 = __p;
    if (DWORD2(v1886))
      continue;
    break;
  }
LABEL_1382:
  if ((_OWORD *)v1886 != v1887)
    free((void *)v1886);
LABEL_1384:
  *(_QWORD *)&v1886 = v1887;
  *((_QWORD *)&v1886 + 1) = 0x1000000000;
  sub_22F1D1E6C(*(_QWORD *)(v1767 + 48), (uint64_t)&v1886);
  v962 = DWORD2(v1886);
  v963 = -1762037865 * ((*(_QWORD *)(v1767 + 200) - *(_QWORD *)(v1767 + 192)) >> 3);
  if (v963 < DWORD2(v1886))
  {
    sub_22E7ED018((uint64_t)&v1886, v963);
    v962 = DWORD2(v1886);
  }
  if (v962)
  {
    v965 = 0;
    v966 = v962;
    while (1)
    {
      v967 = *(_QWORD **)(v1886 + 8 * v965);
      if (v967)
        break;
LABEL_1394:
      if (++v965 == v966)
        goto LABEL_1387;
    }
    v968 = sub_22F13C01C((_QWORD *)v1767, *(_QWORD *)(v1886 + 8 * v965), *(_QWORD *)(v9 + 56) == 0);
    if (!v968 || (v969 = v968, (v968->n128_u16[0] & 0xC0) == 0x40))
    {
LABEL_1393:
      v6 = __p;
      goto LABEL_1394;
    }
    v970 = v967[11];
    do
    {
      v971 = (unint64_t *)v970;
      v972 = *(_QWORD *)(v970 + 8);
      if ((v972 & 2) == 0)
        break;
      v970 = v972 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v970);
    v975 = *v971;
    v974 = (char *)(v971 + 4);
    v973 = v975;
    __s1[0] = (char *)&__s1[3];
    *(_OWORD *)&__s1[1] = xmmword_22F44E310;
    if (v975 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v976 = __s1[1];
      v978 = (char **)__s1[0];
    }
    else
    {
      v976 = 0;
      v977 = 0;
      v978 = &__s1[3];
      if (!v973)
      {
LABEL_1402:
        __s1[1] = &v977[v973];
        if (sub_22E7C9C14(v9, (void **)__s1))
        {
          v979 = (unint64_t)__s1[1];
          if (__s1[1] + 1 > __s1[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
            v979 = (unint64_t)__s1[1];
          }
          __s1[0][v979] = 0;
          v980 = strdup(__s1[0]);
          v974 = v980;
          if (v980)
            v973 = strlen(v980);
          else
            v973 = 0;
          v981 = v1889;
          if (v1889 >= (unint64_t)HIDWORD(v1889))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v981 = v1889;
          }
          *((_QWORD *)v1888 + v981) = v974;
          LODWORD(v1889) = v1889 + 1;
        }
        v1891 = v974;
        *(_QWORD *)&v1892 = v973;
        *((_QWORD *)&v1892 + 1) = v967[3];
        if (*(_BYTE *)(v9 + 120))
          v982 = (char *)v967[4];
        else
          v982 = 0;
        v1893 = v982;
        *(_QWORD *)&v1813 = v969;
        *((_QWORD *)&v1813 + 1) = sub_22F4129A4((int32x2_t *)(v1767 + 488), (uint64_t)v967);
        v1814 = v983;
        v1815 = 0;
        sub_22E7C9D40((uint64_t)__p, (uint64_t)&v1891, &v1813);
        if ((char **)__s1[0] != &__s1[3])
          free(__s1[0]);
        ++v1794;
        goto LABEL_1393;
      }
    }
    memcpy(&v976[(_QWORD)v978], v974, v973);
    v977 = __s1[1];
    goto LABEL_1402;
  }
LABEL_1387:
  __s1[0] = (char *)&__s1[3];
  *(_OWORD *)&__s1[1] = xmmword_22F45FB10;
  sub_22F242C48((uint64_t)&v1891, (uint64_t)__s1);
  LODWORD(v1813) = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
  if (HIDWORD(__p[0]) >= 3)
  {
    v984 = ((4 * HIDWORD(__p[0])) / 6uLL) | ((4 * HIDWORD(__p[0])) / 3uLL);
    v985 = v984 | (v984 >> 2) | ((v984 | (v984 >> 2)) >> 4);
    v964 = (((v985 | (v985 >> 8)) >> 16) | v985 | (v985 >> 8)) + 1;
  }
  else
  {
    v964 = 1;
  }
  if (v964 == LODWORD(__p[0]) || (sub_22E7ED254((unsigned int *)__p, v964), LODWORD(__p[0])))
  {
    v986 = 0;
    while (1)
    {
      v1788 = v986;
      v987 = (char *)v1932 + 16 * v986;
      v988 = (uint64_t *)(v987 + 8);
      if (*((_QWORD *)v987 + 1))
      {
        v989 = (*((uint64_t (**)(void **))v1891 + 10))(&v1891);
        *(_DWORD *)v987 = v989 + v1894 - DWORD2(v1892);
        LOWORD(v1813) = *((_DWORD *)v987 + 1);
        llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
        v990 = *v988;
        if (*v988)
          break;
      }
LABEL_1482:
      v986 = v1788 + 1;
      if (v1788 + 1 >= (unint64_t)LODWORD(__p[0]))
        goto LABEL_1483;
    }
    while (2)
    {
      LODWORD(v1813) = *(_DWORD *)(v990 + 72);
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
      v991 = *(_QWORD *)(v990 + 8);
      v992 = *(_QWORD *)(v990 + 48);
      if (v992)
      {
        v993 = *(uint64_t **)(v990 + 40);
        v994 = 8 * v992;
        v995 = 9;
        do
        {
          v996 = *v993++;
          if (sub_22E7CA298((uint64_t)v1935[0], v996 & 0xFFFFFFFFFFFFFFF8))
            v995 += 4;
          v994 -= 8;
        }
        while (v994);
      }
      else
      {
        v995 = 9;
      }
      v997 = *(_QWORD *)(v990 + 56);
      v998 = (v991 + 17);
      do
      {
        v999 = (_BYTE *)v1894;
        if ((unint64_t)v1894 >= (unint64_t)v1893)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v1891);
        }
        else
        {
          *(_QWORD *)&v1894 = v1894 + 1;
          *v999 = v998 & 0x7F | ((v998 > 0x7F) << 7);
        }
        v1071 = v998 > 0x7F;
        v998 >>= 7;
      }
      while (v1071);
      if (v997 >= 8)
        v1000 = v995 + 4;
      else
        v1000 = v995;
      do
      {
        v1001 = (_BYTE *)v1894;
        if ((unint64_t)v1894 >= (unint64_t)v1893)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v1891);
        }
        else
        {
          *(_QWORD *)&v1894 = v1894 + 1;
          *v1001 = v1000 & 0x7F | ((v1000 > 0x7F) << 7);
        }
        v1071 = v1000 > 0x7F;
        v1000 >>= 7;
      }
      while (v1071);
      *(_QWORD *)&v1813 = *(_QWORD *)(v990 + 16);
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
      *(_QWORD *)&v1813 = *(_QWORD *)(v990 + 24);
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, *(const char **)v990);
      (*((void (**)(void **))v1891 + 10))(&v1891);
      LOBYTE(v1813) = (**(unsigned __int16 **)(v990 + 32) >> 1) & 0xE | ((**(_WORD **)(v990 + 32) & 0x200) != 0) | (16 * (__rbit32(**(unsigned __int16 **)(v990 + 32)) >> 30));
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
      v1002 = *(_QWORD *)(v990 + 32);
      if (*(_QWORD *)(v1002 + 8))
      {
        v1003 = v1935[0];
        *(_QWORD *)&v1813 = *(_QWORD *)(v1002 + 8);
        v1004 = (int *)sub_22E7D30BC((uint64_t)v1935[0] + 352, (uint64_t *)&v1813);
        v1005 = *v1004;
        if (!*v1004)
        {
          v1005 = *((_DWORD *)v1003 + 87);
          *((_DWORD *)v1003 + 87) = v1005 + 1;
          *v1004 = v1005;
        }
      }
      else
      {
        v1005 = *(_DWORD *)(v1002 + 4);
      }
      LODWORD(v1813) = v1005;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
      if (*(_QWORD *)(*(_QWORD *)(v990 + 32) + 24))
      {
        Key = llvm::StringMapImpl::FindKey();
        if (Key != -1 && Key != (unint64_t)v1938)
        {
          v1007 = *(_DWORD *)(*(_QWORD *)(v1937 + 8 * Key) + 8);
          goto LABEL_1473;
        }
        v1008 = *(_QWORD *)(v990 + 32);
        v1010 = *(const void **)(v1008 + 16);
        v1009 = *(_QWORD *)(v1008 + 24);
        v1011 = (int)v1935[2];
        if (v1935[3] < (llvm *)((char *)v1935[2] + v1009))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v1012 = v1935[2];
          if (v1009)
          {
LABEL_1456:
            memcpy((char *)v1935[1] + (unint64_t)v1012, v1010, v1009);
            v1012 = v1935[2];
          }
        }
        else
        {
          v1012 = v1935[2];
          if (v1009)
            goto LABEL_1456;
        }
        v1013 = (llvm *)((char *)v1012 + v1009);
        v1935[2] = v1013;
        if ((llvm *)((char *)v1013 + 1) > v1935[3])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v1013 = v1935[2];
        }
        *((_BYTE *)v1935[1] + (unint64_t)v1013) = 0;
        ++v1935[2];
        v1014 = *(_QWORD *)(v990 + 32);
        v1016 = *(const void **)(v1014 + 16);
        v1015 = *(_QWORD *)(v1014 + 24);
        v1017 = llvm::StringMapImpl::LookupBucketFor();
        v1018 = v1937;
        v1019 = v1017;
        v1020 = *(_QWORD *)(v1937 + 8 * v1017);
        if (v1020)
        {
          if (v1020 == -8)
          {
            LODWORD(v1939) = v1939 - 1;
            goto LABEL_1460;
          }
          v6 = __p;
        }
        else
        {
LABEL_1460:
          v1021 = MEMORY[0x23489D23C](v1015 + 17, 8);
          v1022 = v1021;
          v1023 = v1021 + 16;
          if (v1015)
            memcpy((void *)(v1021 + 16), v1016, v1015);
          *(_BYTE *)(v1023 + v1015) = 0;
          *(_QWORD *)v1022 = v1015;
          *(_DWORD *)(v1022 + 8) = 0;
          *(_QWORD *)(v1018 + 8 * v1019) = v1022;
          v6 = __p;
          ++HIDWORD(v1938);
          v1024 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v1937);
          for (i1 = (uint64_t *)(v1937 + 8 * v1024); ; ++i1)
          {
            v1020 = *i1;
            if (*i1 && v1020 != -8)
              break;
          }
        }
        v1007 = v1011 + 1;
        *(_DWORD *)(v1020 + 8) = v1011 + 1;
      }
      else
      {
        v1007 = 0;
      }
LABEL_1473:
      LODWORD(v1813) = v1007;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
      v1027 = *(_QWORD *)(v990 + 48);
      if (v1027)
      {
        v1028 = *(uint64_t **)(v990 + 40);
        v1029 = 8 * v1027;
        do
        {
          v1030 = *v1028;
          v1031 = sub_22E7CA298((uint64_t)v1935[0], *v1028 & 0xFFFFFFFFFFFFFFF8);
          if (v1031)
          {
            LODWORD(v1813) = v1030 & 7 | (8 * v1031);
            llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
          }
          ++v1028;
          v1029 -= 8;
        }
        while (v1029);
      }
      v1032 = *(_QWORD *)(v990 + 56);
      if ((v1032 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v1033 = sub_22E7CA298((uint64_t)v1935[0], v1032 & 0xFFFFFFFFFFFFFFF8);
        if (v1033)
        {
          LODWORD(v1813) = (v1032 >> 1) & 3 | (8 * v1033);
          llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
        }
      }
      v990 = *(_QWORD *)(v990 + 64);
      if (!v990)
        goto LABEL_1482;
      continue;
    }
  }
LABEL_1483:
  v1034 = (*((uint64_t (**)(void **))v1891 + 10))(&v1891);
  v1035 = v1894 - DWORD2(v1892) + v1034;
  v1036 = (v1035 + 3) & 0x1FFFFFFFCLL;
  v1037 = v1036 - v1035;
  if (v1036 != v1035)
  {
    v1038 = v1035 - v1036;
    do
    {
      LOBYTE(v1813) = 0;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
      v467 = __CFADD__(v1038++, 1);
    }
    while (!v467);
  }
  LODWORD(v1813) = __p[0];
  llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
  LODWORD(v1813) = HIDWORD(__p[0]);
  llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
  if (LODWORD(__p[0]))
  {
    v1039 = 0;
    v1040 = 0;
    do
    {
      LODWORD(v1813) = *(_DWORD *)((char *)v1932 + v1039);
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1813);
      ++v1040;
      v1039 += 16;
    }
    while (v1040 < LODWORD(__p[0]));
  }
  v1041 = v1037 + v1035;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v1891);
  v1042 = (char *)operator new(0x228uLL);
  *(_QWORD *)v1042 = &unk_24FA715D0;
  *((_QWORD *)v1042 + 1) = 0;
  *(_OWORD *)(v1042 + 120) = 0u;
  *(_OWORD *)(v1042 + 136) = 0u;
  *(_OWORD *)(v1042 + 152) = 0u;
  *(_OWORD *)(v1042 + 168) = 0u;
  *(_OWORD *)(v1042 + 184) = 0u;
  *(_OWORD *)(v1042 + 200) = 0u;
  *(_OWORD *)(v1042 + 216) = 0u;
  *(_OWORD *)(v1042 + 232) = 0u;
  *(_OWORD *)(v1042 + 248) = 0u;
  *(_OWORD *)(v1042 + 264) = 0u;
  *(_OWORD *)(v1042 + 280) = 0u;
  *(_OWORD *)(v1042 + 296) = 0u;
  *(_OWORD *)(v1042 + 312) = 0u;
  *(_OWORD *)(v1042 + 328) = 0u;
  *(_OWORD *)(v1042 + 344) = 0u;
  *(_OWORD *)(v1042 + 360) = 0u;
  *(_OWORD *)(v1042 + 376) = 0u;
  *(_OWORD *)(v1042 + 392) = 0u;
  *(_OWORD *)(v1042 + 408) = 0u;
  *(_OWORD *)(v1042 + 424) = 0u;
  *(_OWORD *)(v1042 + 440) = 0u;
  *(_OWORD *)(v1042 + 456) = 0u;
  *(_OWORD *)(v1042 + 472) = 0u;
  *(_OWORD *)(v1042 + 488) = 0u;
  *(_OWORD *)(v1042 + 504) = 0u;
  *(_OWORD *)(v1042 + 520) = 0u;
  *(_OWORD *)(v1042 + 536) = 0u;
  *(_OWORD *)(v1042 + 40) = xmmword_22F45FC20;
  *((_QWORD *)v1042 + 2) = 0;
  *((_QWORD *)v1042 + 3) = v1042 + 40;
  *(_OWORD *)(v1042 + 56) = xmmword_22F45E080;
  *(_OWORD *)(v1042 + 72) = xmmword_22F45E080;
  *(_OWORD *)(v1042 + 88) = xmmword_22F45E080;
  v1043 = *(llvm::raw_ostream **)v1778;
  *(_OWORD *)(v1042 + 104) = xmmword_22F45E0D0;
  *((_QWORD *)v1042 + 4) = 0x2000000005;
  *(_QWORD *)&v1813 = v1042 + 24;
  *((_QWORD *)&v1813 + 1) = v1042;
  v1044 = sub_22E74761C((uint64_t)v1043, (uint64_t)&v1813);
  v1045 = (std::__shared_weak_count *)*((_QWORD *)&v1813 + 1);
  if (*((_QWORD *)&v1813 + 1))
  {
    v1046 = (unint64_t *)(*((_QWORD *)&v1813 + 1) + 8);
    do
      v1047 = __ldaxr(v1046);
    while (__stlxr(v1047 - 1, v1046));
    if (!v1047)
    {
      ((void (*)(std::__shared_weak_count *))v1045->__on_zero_shared)(v1045);
      std::__shared_weak_count::__release_weak(v1045);
    }
  }
  v1891 = (void *)34;
  *(_QWORD *)&v1892 = v1041;
  v1048 = (unint64_t)__s1[1];
  *((_QWORD *)&v1892 + 1) = v1794;
  v1893 = __s1[1];
  v1049 = v1935[1];
  v1050 = v1935[2];
  if (__s1[2] < (char *)v1935[2] + (unint64_t)__s1[1])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v1048 = (unint64_t)__s1[1];
    if (v1050)
    {
LABEL_1497:
      memcpy(&__s1[0][v1048], v1049, (size_t)v1050);
      v1048 = (unint64_t)__s1[1];
    }
  }
  else if (v1935[2])
  {
    goto LABEL_1497;
  }
  __s1[1] = (char *)v1050 + v1048;
  sub_22E74241C(*(llvm::raw_ostream **)v1778, v1044, (uint64_t)&v1891, 4, __s1[0], (uint64_t)v1050 + v1048, 0);
  if ((_DWORD)v1889)
  {
    v1051 = 0;
    v1052 = 8 * v1889;
    do
    {
      free(*(void **)((char *)v1888 + v1051));
      v1051 += 8;
    }
    while (v1052 != v1051);
  }
  v4 = (uint64_t)&v1919;
  v8 = (_BYTE *)v1746;
  if ((char **)__s1[0] != &__s1[3])
    free(__s1[0]);
  v13 = &__p[1];
  if ((_OWORD *)v1886 != v1887)
    free((void *)v1886);
  sub_22E6C6A2C(v1922);
  sub_22E6C6AB4((uint64_t)&v1919, v1920);
  sub_22E6C6A2C((void **)&v1912);
  if (v1888 != v1890)
    free(v1888);
  free(v1932);
  sub_22E6188F4((uint64_t)&__p[1]);
  sub_22E3B4EF4((uint64_t)&__p[1]);
  sub_22E6C6358((uint64_t)&v1937);
  if ((llvm **)v1935[1] != &v1935[4])
    free(v1935[1]);
  v10 = v1772;
  if (!*(_DWORD *)(v1746 + 8568) && *(_QWORD *)(v9 + 592) == *(_QWORD *)(v9 + 600))
    goto LABEL_1645;
  *(_QWORD *)&v1911[16] = 0;
  *(_QWORD *)&v1911[8] = 0;
  *(_QWORD *)&v1911[24] = &v1913;
  v1912 = 0x400000000;
  v1915 = v1917;
  v1916 = 0;
  v1917[1] = 0;
  v1917[0] = 0;
  *(_QWORD *)v1911 = 64;
  v1053 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (!v1053)
    goto LABEL_2506;
  v1918 = v1053;
  v1054 = (*(_DWORD *)(v9 + 564) - *(_DWORD *)(v9 + 560));
  v1055 = *(_QWORD *)(v9 + 616);
  v1056 = (*(_QWORD *)(v9 + 624) - v1055) >> 2;
  if (v1054 <= v1056)
  {
    if (v1054 < v1056)
      *(_QWORD *)(v9 + 624) = v1055 + 4 * v1054;
  }
  else
  {
    sub_22E7EE02C((char **)(v9 + 616), v1054 - v1056);
  }
  v1057 = *(_QWORD *)(v9 + 592);
  v1768 = *(_QWORD *)(v9 + 600);
  if (v1057 == v1768)
  {
    v1776 = 0;
  }
  else
  {
    v1776 = 0;
    do
    {
      v1059 = *(llvm **)v1057;
      v1060 = *(_DWORD *)(v1057 + 8);
      v1935[0] = *(llvm **)v1057;
      __s1[0] = 0;
      v1061 = sub_22F2BB328((uint64_t *)(v1746 + 8560), v1935, __s1);
      v1062 = 0;
      v1063 = __s1[0];
      v1064 = *(_QWORD *)(v1746 + 8560);
      v1065 = *(_DWORD *)(v1746 + 8576);
      LODWORD(__s1[0]) = v1060;
      memset(&__s1[1], 0, 32);
      if (v1061)
      {
        v1066 = 0;
        v1067 = 0;
        v1068 = 0;
        if (v1063 != (char *)(v1064 + 40 * v1065))
        {
          v1068 = (char *)*((_QWORD *)v1063 + 1);
          v1066 = (char *)*((_QWORD *)v1063 + 2);
          __s1[1] = v1068;
          __s1[2] = v1066;
          v1067 = (char *)*((_QWORD *)v1063 + 3);
          v1062 = (char *)*((_QWORD *)v1063 + 4);
          __s1[3] = v1067;
          __s1[4] = v1062;
        }
      }
      else
      {
        v1066 = 0;
        v1067 = 0;
        v1068 = 0;
      }
      if (*(_QWORD *)(v9 + 56) && v1060 < *(_DWORD *)(v9 + 560))
      {
        v1069 = (unint64_t)&__s1[1];
        while (1)
        {
          v1070 = *(char **)v1069;
          if ((*(_QWORD *)v1069 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
            LOBYTE(v1069) = 0;
            goto LABEL_1545;
          }
          if ((*(_BYTE *)((*(_QWORD *)v1069 & 0xFFFFFFFFFFFFFFF8) + 29) & 0x80) == 0)
            break;
          v1069 = *(_QWORD *)(v1069 + 8) & 0xFFFFFFFFFFFFFFF8;
          if (!v1069)
            goto LABEL_1545;
        }
        __s1[1] = *(char **)v1069;
        v1066 = *(char **)(v1069 + 8);
        __s1[2] = v1066;
        LOBYTE(v1069) = 1;
        v1068 = v1070;
LABEL_1545:
        v1077 = &__s1[3];
        do
        {
          v1078 = *v1077;
          if (((unint64_t)*v1077 & 0xFFFFFFFFFFFFFFF8) == 0)
            break;
          if ((*(_BYTE *)(((unint64_t)*v1077 & 0xFFFFFFFFFFFFFFF8) + 29) & 0x80) == 0)
          {
            __s1[3] = *v1077;
            v1062 = v1077[1];
            __s1[4] = v1062;
            v1067 = v1078;
            goto LABEL_1538;
          }
          v1077 = (char **)((unint64_t)v1077[1] & 0xFFFFFFFFFFFFFFF8);
        }
        while (v1077);
        if ((v1069 & 1) != 0)
          goto LABEL_1538;
      }
      else
      {
        v1071 = (unint64_t)v1068 > 7 || (unint64_t)v1067 > 7;
        v1072 = v1776;
        if (v1071)
          v1072 = v1776 + 1;
        v1776 = v1072;
LABEL_1538:
        v1795 = v1067;
        v1073 = *(_DWORD *)v1911;
        ++*(_DWORD *)&v1911[4];
        if (3 * *(_DWORD *)v1911 <= (4 * *(_DWORD *)&v1911[4]))
        {
          sub_22E7EF378((unsigned int *)v1911, (2 * *(_DWORD *)v1911));
          v1073 = *(_DWORD *)v1911;
        }
        v1074 = (char *)v1918;
        v4 = sub_22E3CD3D4((uint64_t)&v1911[8], 64, 3);
        *(_QWORD *)v4 = v1059;
        *(_DWORD *)(v4 + 8) = v1060;
        *(_QWORD *)(v4 + 16) = v1068;
        *(_QWORD *)(v4 + 24) = v1066;
        *(_QWORD *)(v4 + 32) = v1795;
        *(_QWORD *)(v4 + 40) = v1062;
        *(_QWORD *)(v4 + 48) = 0;
        v1075 = sub_22E7506AC((uint64_t)v1059);
        *(_DWORD *)(v4 + 56) = v1075;
        v1076 = &v1074[16 * ((v1073 - 1) & v1075)];
        *(_QWORD *)(v4 + 48) = *((_QWORD *)v1076 + 1);
        ++*((_DWORD *)v1076 + 1);
        *((_QWORD *)v1076 + 1) = v4;
        v6 = __p;
      }
      v1057 += 16;
    }
    while (v1057 != v1768);
  }
  __s1[0] = (char *)&__s1[3];
  *(_OWORD *)&__s1[1] = xmmword_22F45FB10;
  sub_22F242C48((uint64_t)v1935, (uint64_t)__s1);
  LODWORD(v1886) = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
  if (*(_DWORD *)&v1911[4] >= 3u)
  {
    v1079 = ((4 * *(_DWORD *)&v1911[4]) / 6uLL) | ((4 * *(_DWORD *)&v1911[4]) / 3uLL);
    v1080 = v1079 | (v1079 >> 2) | ((v1079 | (v1079 >> 2)) >> 4);
    v1058 = (((v1080 | (v1080 >> 8)) >> 16) | v1080 | (v1080 >> 8)) + 1;
  }
  else
  {
    v1058 = 1;
  }
  if (v1058 == *(_DWORD *)v1911 || (sub_22E7EF378((unsigned int *)v1911, v1058), *(_DWORD *)v1911))
  {
    v1081 = 0;
    v4 = v9 + 208;
    while (1)
    {
      v1796 = v1081;
      v1082 = (char *)v1918 + 16 * v1081;
      v1083 = (uint64_t **)(v1082 + 8);
      if (*((_QWORD *)v1082 + 1))
      {
        v1084 = (*((uint64_t (**)(llvm **))v1935[0] + 10))(v1935);
        *(_DWORD *)v1082 = v1084 + LODWORD(v1935[4]) - LODWORD(v1935[2]);
        LOWORD(v1886) = *((_DWORD *)v1082 + 1);
        llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
        v1085 = *v1083;
        if (*v1083)
          break;
      }
LABEL_1618:
      v1081 = v1796 + 1;
      if (v1796 + 1 >= (unint64_t)*(unsigned int *)v1911)
        goto LABEL_1619;
    }
    while (2)
    {
      LODWORD(v1886) = *((_DWORD *)v1085 + 14);
      llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
      v1086 = *v1085 & 7;
      if (v1086 >= 2)
      {
        if ((_DWORD)v1086 == 2)
        {
          v1088 = 1;
        }
        else
        {
          v1088 = *(_DWORD *)(*v1085 & 0xFFFFFFFFFFFFFFF8) - 3;
          if (*(_DWORD *)(*v1085 & 0xFFFFFFFFFFFFFFF8) == 3)
            goto LABEL_1559;
        }
        v1087 = (4 * v1088) | 2u;
      }
      else
      {
LABEL_1559:
        v1087 = 6;
      }
      v1089 = v1085 + 2;
      v1090 = 8;
      v1091 = v1085 + 2;
      do
      {
        if ((*v1091 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_DWORD *)((*v1091 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x8000) == 0)
          v1090 += 4;
        v1091 = (_QWORD *)(v1091[1] & 0xFFFFFFFFFFFFFFF8);
      }
      while (v1091);
      v1092 = v1085 + 4;
      v1093 = v1085 + 4;
      do
      {
        if ((*v1093 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_DWORD *)((*v1093 & 0xFFFFFFFFFFFFFFF8) + 28) & 0x8000) == 0)
          v1090 += 4;
        v1093 = (_QWORD *)(v1093[1] & 0xFFFFFFFFFFFFFFF8);
      }
      while (v1093);
      do
      {
        v1094 = v1935[4];
        if (v1935[4] >= v1935[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v1935);
        }
        else
        {
          ++v1935[4];
          *(_BYTE *)v1094 = v1087 & 0x7F | ((v1087 > 0x7F) << 7);
        }
        v1071 = v1087 > 0x7F;
        v1087 >>= 7;
      }
      while (v1071);
      v1095 = v1090;
      do
      {
        v1096 = v1935[4];
        if (v1935[4] >= v1935[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v1935);
        }
        else
        {
          ++v1935[4];
          *(_BYTE *)v1096 = v1095 & 0x7F | ((v1095 > 0x7F) << 7);
        }
        v1071 = v1095 > 0x7F;
        v1095 >>= 7;
      }
      while (v1071);
      v1097 = *v1085;
      v1098 = (*((uint64_t (**)(llvm **))v1935[0] + 10))(v1935);
      v1099 = (int)v1935[4];
      v1100 = (int)v1935[2];
      *(_QWORD *)&v1886 = v1097;
      v1101 = (_DWORD *)sub_22F2D0558(v9 + 568, (unint64_t *)&v1886);
      v1102 = *(_DWORD *)(v9 + 560);
      if (*v1101 >= v1102)
        *(_DWORD *)(*(_QWORD *)(v9 + 616) + 4 * (*v1101 - v1102)) = v1098 + v1099 - v1100;
      if ((v1097 & 7u) >= 2)
      {
        if ((v1097 & 7) == 2)
          v1103 = 1;
        else
          v1103 = *(_DWORD *)(v1097 & 0xFFFFFFFFFFFFFFF8) - 3;
      }
      else
      {
        v1103 = 0;
      }
      LOWORD(v1886) = v1103;
      llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
      v1104 = 0;
      if (v1103 <= 1)
        v1105 = 1;
      else
        v1105 = v1103;
      v1106 = v1097 & 7;
      v1107 = v1097 & 0xFFFFFFFFFFFFFFF8;
      v1108 = 8 * v1105;
      do
      {
        v1109 = v1107;
        if (v1106 == 7)
          v1109 = *(_QWORD *)(v1107 + v1104 + 16);
        *(_QWORD *)&v1886 = v1109;
        if (v1109)
        {
          v1110 = (_DWORD *)sub_22E7D30BC(v9 + 352, (uint64_t *)&v1886);
          LODWORD(v1109) = *v1110;
          if (!*v1110)
          {
            LODWORD(v1109) = *(_DWORD *)(v9 + 348);
            *(_DWORD *)(v9 + 348) = v1109 + 1;
            *v1110 = v1109;
          }
        }
        LODWORD(v1886) = v1109;
        llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
        v1104 += 8;
      }
      while (v1108 != v1104);
      (*((void (**)(llvm **))v1935[0] + 10))(v1935);
      LODWORD(v1886) = *((_DWORD *)v1085 + 2);
      llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
      v1111 = 0;
      v1112 = (unint64_t)(v1085 + 2);
      do
      {
        v1113 = *(_QWORD *)v1112 & 0xFFFFFFFFFFFFFFF8;
        if (v1113)
          LOWORD(v1113) = (*(_BYTE *)(v1113 + 29) & 0x80) == 0;
        v1111 += v1113;
        v1112 = *(_QWORD *)(v1112 + 8) & 0xFFFFFFFFFFFFFFF8;
      }
      while (v1112);
      v1114 = v1085 + 4;
      do
      {
        v1115 = *v1114 & 0xFFFFFFFFFFFFFFF8;
        if (v1115)
          LODWORD(v1115) = (*(_BYTE *)(v1115 + 29) & 0x80) == 0;
        LODWORD(v1112) = v1112 + v1115;
        v1114 = (_QWORD *)(v1114[1] & 0xFFFFFFFFFFFFFFF8);
      }
      while (v1114);
      v1116 = v1085[4] & 4 | (8 * v1112) | (*((_DWORD *)v1085 + 10) >> 1) & 3;
      LOWORD(v1886) = v1085[2] & 4 | (8 * v1111) | (*((_DWORD *)v1085 + 6) >> 1) & 3;
      llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
      LOWORD(v1886) = v1116;
      llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
      do
      {
        if ((*v1089 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_BYTE *)((*v1089 & 0xFFFFFFFFFFFFFFF8) + 29) & 0x80) == 0)
        {
          *(_QWORD *)&v1886 = *v1089 & 0xFFFFFFFFFFFFFFF8;
          LODWORD(v1886) = *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), &v1886) + 2);
          llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
        }
        v1089 = (_QWORD *)(v1089[1] & 0xFFFFFFFFFFFFFFF8);
      }
      while (v1089);
      do
      {
        if ((*v1092 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(_BYTE *)((*v1092 & 0xFFFFFFFFFFFFFFF8) + 29) & 0x80) == 0)
        {
          *(_QWORD *)&v1886 = *v1092 & 0xFFFFFFFFFFFFFFF8;
          LODWORD(v1886) = *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), &v1886) + 2);
          llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
        }
        v1092 = (_QWORD *)(v1092[1] & 0xFFFFFFFFFFFFFFF8);
      }
      while (v1092);
      v1085 = (uint64_t *)v1085[6];
      v6 = __p;
      if (!v1085)
        goto LABEL_1618;
      continue;
    }
  }
LABEL_1619:
  v1117 = (*((uint64_t (**)(llvm **))v1935[0] + 10))(v1935);
  v1118 = LODWORD(v1935[4]) - LODWORD(v1935[2]) + v1117;
  v1119 = (v1118 + 3) & 0x1FFFFFFFCLL;
  v1120 = v1119 - v1118;
  if (v1119 != v1118)
  {
    v1121 = v1118 - v1119;
    do
    {
      LOBYTE(v1886) = 0;
      llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
      v467 = __CFADD__(v1121++, 1);
    }
    while (!v467);
  }
  LODWORD(v1886) = *(_DWORD *)v1911;
  llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
  LODWORD(v1886) = *(_DWORD *)&v1911[4];
  llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
  if (*(_DWORD *)v1911)
  {
    v1122 = 0;
    v1123 = 0;
    do
    {
      LODWORD(v1886) = *(_DWORD *)((char *)v1918 + v1122);
      llvm::raw_ostream::write((llvm::raw_ostream *)v1935, (const char *)&v1886);
      ++v1123;
      v1122 += 16;
    }
    while (v1123 < *(unsigned int *)v1911);
  }
  v1124 = v1120 + v1118;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v1935);
  v1125 = (char *)operator new(0x228uLL);
  *(_QWORD *)v1125 = &unk_24FA715D0;
  *((_QWORD *)v1125 + 1) = 0;
  *(_OWORD *)(v1125 + 104) = 0u;
  *(_OWORD *)(v1125 + 120) = 0u;
  *(_OWORD *)(v1125 + 136) = 0u;
  *(_OWORD *)(v1125 + 152) = 0u;
  *(_OWORD *)(v1125 + 168) = 0u;
  *(_OWORD *)(v1125 + 184) = 0u;
  *(_OWORD *)(v1125 + 200) = 0u;
  *(_OWORD *)(v1125 + 216) = 0u;
  *(_OWORD *)(v1125 + 232) = 0u;
  *(_OWORD *)(v1125 + 248) = 0u;
  *(_OWORD *)(v1125 + 264) = 0u;
  *(_OWORD *)(v1125 + 280) = 0u;
  *(_OWORD *)(v1125 + 296) = 0u;
  *(_OWORD *)(v1125 + 312) = 0u;
  *(_OWORD *)(v1125 + 328) = 0u;
  *(_OWORD *)(v1125 + 344) = 0u;
  *(_OWORD *)(v1125 + 360) = 0u;
  *(_OWORD *)(v1125 + 376) = 0u;
  *(_OWORD *)(v1125 + 392) = 0u;
  *(_OWORD *)(v1125 + 408) = 0u;
  *(_OWORD *)(v1125 + 424) = 0u;
  *(_OWORD *)(v1125 + 440) = 0u;
  *(_OWORD *)(v1125 + 456) = 0u;
  *(_OWORD *)(v1125 + 472) = 0u;
  *(_OWORD *)(v1125 + 488) = 0u;
  *(_OWORD *)(v1125 + 504) = 0u;
  *(_OWORD *)(v1125 + 520) = 0u;
  *(_OWORD *)(v1125 + 536) = 0u;
  *(_OWORD *)(v1125 + 40) = xmmword_22F45FC30;
  *((_QWORD *)v1125 + 2) = 0;
  *((_QWORD *)v1125 + 3) = v1125 + 40;
  *(_OWORD *)(v1125 + 56) = xmmword_22F45E080;
  *(_OWORD *)(v1125 + 72) = xmmword_22F45E080;
  v1126 = *(llvm::raw_ostream **)v1778;
  *(_OWORD *)(v1125 + 88) = xmmword_22F45E0D0;
  *((_QWORD *)v1125 + 4) = 0x2000000004;
  *(_QWORD *)&v1886 = v1125 + 24;
  *((_QWORD *)&v1886 + 1) = v1125;
  v1127 = sub_22E74761C((uint64_t)v1126, (uint64_t)&v1886);
  v1128 = (std::__shared_weak_count *)*((_QWORD *)&v1886 + 1);
  if (*((_QWORD *)&v1886 + 1))
  {
    v1129 = (unint64_t *)(*((_QWORD *)&v1886 + 1) + 8);
    do
      v1130 = __ldaxr(v1129);
    while (__stlxr(v1130 - 1, v1129));
    if (!v1130)
    {
      ((void (*)(std::__shared_weak_count *))v1128->__on_zero_shared)(v1128);
      std::__shared_weak_count::__release_weak(v1128);
    }
  }
  v1935[0] = (llvm *)12;
  v1935[1] = (llvm *)v1124;
  v1935[2] = (llvm *)v1776;
  sub_22E74241C(*(llvm::raw_ostream **)v1778, v1127, (uint64_t)v1935, 3, __s1[0], (uint64_t)__s1[1], 0);
  v1131 = (char *)operator new(0x228uLL);
  *(_QWORD *)v1131 = &unk_24FA715D0;
  *((_QWORD *)v1131 + 1) = 0;
  *(_OWORD *)(v1131 + 104) = 0u;
  *(_OWORD *)(v1131 + 120) = 0u;
  *(_OWORD *)(v1131 + 136) = 0u;
  *(_OWORD *)(v1131 + 152) = 0u;
  *(_OWORD *)(v1131 + 168) = 0u;
  *(_OWORD *)(v1131 + 184) = 0u;
  *(_OWORD *)(v1131 + 200) = 0u;
  *(_OWORD *)(v1131 + 216) = 0u;
  *(_OWORD *)(v1131 + 232) = 0u;
  *(_OWORD *)(v1131 + 248) = 0u;
  *(_OWORD *)(v1131 + 264) = 0u;
  *(_OWORD *)(v1131 + 280) = 0u;
  *(_OWORD *)(v1131 + 296) = 0u;
  *(_OWORD *)(v1131 + 312) = 0u;
  *(_OWORD *)(v1131 + 328) = 0u;
  *(_OWORD *)(v1131 + 344) = 0u;
  *(_OWORD *)(v1131 + 360) = 0u;
  *(_OWORD *)(v1131 + 376) = 0u;
  *(_OWORD *)(v1131 + 392) = 0u;
  *(_OWORD *)(v1131 + 408) = 0u;
  *(_OWORD *)(v1131 + 424) = 0u;
  *(_OWORD *)(v1131 + 440) = 0u;
  *(_OWORD *)(v1131 + 456) = 0u;
  *(_OWORD *)(v1131 + 472) = 0u;
  *(_OWORD *)(v1131 + 488) = 0u;
  *(_OWORD *)(v1131 + 504) = 0u;
  *(_OWORD *)(v1131 + 520) = 0u;
  *(_OWORD *)(v1131 + 536) = 0u;
  *(_OWORD *)(v1131 + 40) = xmmword_22F45FC40;
  *((_QWORD *)v1131 + 2) = 0;
  *((_QWORD *)v1131 + 3) = v1131 + 40;
  *(_OWORD *)(v1131 + 56) = xmmword_22F45E080;
  *(_OWORD *)(v1131 + 72) = xmmword_22F45E080;
  v1132 = *(llvm::raw_ostream **)v1778;
  *(_OWORD *)(v1131 + 88) = xmmword_22F45E0D0;
  *((_QWORD *)v1131 + 4) = 0x2000000004;
  __p[0] = v1131 + 24;
  __p[1] = v1131;
  LODWORD(v13) = sub_22E74761C((uint64_t)v1132, (uint64_t)__p);
  v1133 = (std::__shared_weak_count *)__p[1];
  v10 = v1772;
  v8 = (_BYTE *)v1746;
  if (__p[1])
  {
    v1134 = (unint64_t *)((char *)__p[1] + 8);
    do
      v1135 = __ldaxr(v1134);
    while (__stlxr(v1135 - 1, v1134));
    if (!v1135)
    {
      ((void (*)(std::__shared_weak_count *))v1133->__on_zero_shared)(v1133);
      std::__shared_weak_count::__release_weak(v1133);
    }
  }
  v1136 = *(char **)(v9 + 616);
  v1137 = (llvm *)(*(_DWORD *)(v9 + 560) - 1);
  v1138 = *(_QWORD *)(v9 + 624) - (_QWORD)v1136;
  v1935[0] = (llvm *)11;
  v1935[1] = (llvm *)(v1138 >> 2);
  v1935[2] = v1137;
  if (v1138)
    v1139 = v1136;
  else
    v1139 = 0;
  if (v1138)
    v1140 = v1138;
  else
    v1140 = 0;
  sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v13, (uint64_t)v1935, 3, v1139, v1140, 0);
  if ((char **)__s1[0] != &__s1[3])
    free(__s1[0]);
  free(v1918);
  sub_22E6188F4((uint64_t)&v1911[8]);
  sub_22E3B4EF4((uint64_t)&v1911[8]);
LABEL_1645:
  sub_22F2CF904(v9, *((_QWORD *)v8 + 1076), *((_QWORD *)v8 + 1077));
  sub_22F2CFE7C(v9, *((unint64_t **)v8 + 390), *((unint64_t **)v8 + 391));
  v1935[0] = (llvm *)&v1935[2];
  v1935[1] = (llvm *)0x4000000000;
  __p[2] = 0;
  __p[1] = 0;
  v1925 = v1927;
  v1926 = 0x400000000;
  v1928 = &v1930;
  v1929 = 0;
  v1931 = 0;
  v1930 = 0;
  __p[0] = (void *)64;
  v1141 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (!v1141)
    goto LABEL_2506;
  v1932 = v1141;
  v1143 = (**(_QWORD **)(*(_QWORD *)(v9 + 40) + 2000) & 0x100) == 0 || v1773 == 0;
  *(_QWORD *)v1911 = &v1911[16];
  *(_QWORD *)&v1911[8] = 0x8000000000;
  v1144 = *(uint64_t **)(v10 + 544);
  v1145 = *(unsigned int *)(v10 + 552);
  v1146 = v1144;
  if ((_DWORD)v1145)
  {
    while (!*v1146 || *v1146 == -8)
      ++v1146;
  }
  v1147 = &v1144[v1145];
  if (v1146 == v1147)
  {
    v1148 = (uint64_t *)&v1911[16];
    v1149 = &v1911[16];
    goto LABEL_1671;
  }
  LODWORD(v1151) = 0;
  v1152 = *v1146;
  do
  {
    v1153 = *(_QWORD *)(v1152 + 8);
    if (v1151 >= *(_DWORD *)&v1911[12])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v1151) = *(_DWORD *)&v1911[8];
    }
    *(_QWORD *)(*(_QWORD *)v1911 + 8 * v1151) = v1153;
    v1151 = ++*(_DWORD *)&v1911[8];
    do
    {
      v1154 = v1146[1];
      ++v1146;
      v1152 = v1154;
      if (v1154)
        v1155 = v1152 == -8;
      else
        v1155 = 1;
    }
    while (v1155);
  }
  while (v1146 != v1147);
  v1149 = *(_BYTE **)v1911;
  v1148 = (uint64_t *)(*(_QWORD *)v1911 + 8 * v1151);
  if ((_DWORD)v1151)
    v1156 = 126 - 2 * __clz(v1151);
  else
LABEL_1671:
    v1156 = 0;
  sub_22E7ED3F0((uint64_t)v1149, v1148, v1156, 1);
  if (*(_DWORD *)&v1911[8])
  {
    v1157 = *(char ***)v1911;
    v1158 = 8 * *(unsigned int *)&v1911[8];
    do
    {
      v1159 = *(_QWORD *)*v1157;
      if ((v1159 & 0x20000000) != 0
        || ((v1159 & 0x1FFFE00) != 0 ? (v1160 = v1773 == 0) : (v1160 = 0),
            v1160 ? (v1161 = 0) : (v1161 = 1),
            (v1159 & 0x400000000) != 0 || !v1161 || v1143 && *((_QWORD *)*v1157 + 1)))
      {
        __s1[0] = *v1157;
        v1162 = (_DWORD *)sub_22E7D30BC(v9 + 352, (uint64_t *)__s1);
        if (!*v1162)
        {
          v1163 = *(_DWORD *)(v9 + 348);
          *(_DWORD *)(v9 + 348) = v1163 + 1;
          *v1162 = v1163;
        }
      }
      ++v1157;
      v1158 -= 8;
    }
    while (v1158);
  }
  v1164 = (*(_DWORD *)(v9 + 348) - *(_DWORD *)(v9 + 344));
  v1165 = *(_QWORD *)(v9 + 528);
  v1166 = (*(_QWORD *)(v9 + 536) - v1165) >> 2;
  if (v1164 <= v1166)
  {
    if (v1164 < v1166)
      *(_QWORD *)(v9 + 536) = v1165 + 4 * v1164;
  }
  else
  {
    sub_22E7EE02C((char **)(v9 + 528), v1164 - v1166);
  }
  v1167 = *(_QWORD *)(v9 + 376);
  for (i2 = *(_QWORD *)(v9 + 384); v1167 != i2; v1167 += 16)
  {
    v1169 = *(_QWORD **)v1167;
    v1170 = *(_DWORD *)(v1167 + 8);
    if (v1170 >= *(_DWORD *)(v9 + 344) || !*(_QWORD *)(v9 + 56) || (*v1169 & 0x300000000) != 0x100000000)
    {
      ++HIDWORD(__p[0]);
      v1171 = (int)__p[0];
      if (3 * LODWORD(__p[0]) <= (4 * HIDWORD(__p[0])))
      {
        sub_22E7EF454((unsigned int *)__p, (2 * LODWORD(__p[0])));
        v1171 = (int)__p[0];
      }
      v1172 = (char *)v1932;
      v1173 = sub_22E3CD3D4((uint64_t)&__p[1], 32, 3);
      *(_QWORD *)v1173 = v1169;
      *(_DWORD *)(v1173 + 8) = v1170;
      *(_QWORD *)(v1173 + 16) = 0;
      v1174 = (_DWORD *)v1169[2];
      v1177 = *v1174;
      v1175 = (unsigned __int8 *)(v1174 + 4);
      v1176 = v1177;
      if (v1177)
      {
        v1178 = 5381;
        do
        {
          v1179 = *v1175++;
          v1178 = 33 * v1178 + v1179;
          --v1176;
        }
        while (v1176);
      }
      else
      {
        v1178 = 5381;
      }
      *(_DWORD *)(v1173 + 24) = v1178;
      v1180 = &v1172[16 * ((v1171 - 1) & v1178)];
      *(_QWORD *)(v1173 + 16) = *((_QWORD *)v1180 + 1);
      ++*((_DWORD *)v1180 + 1);
      *((_QWORD *)v1180 + 1) = v1173;
    }
  }
  __s1[0] = (char *)&__s1[3];
  *(_OWORD *)&__s1[1] = xmmword_22F45FB10;
  sub_22F242C48((uint64_t)&v1891, (uint64_t)__s1);
  LODWORD(v1886) = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1886);
  if (HIDWORD(__p[0]) >= 3)
  {
    v1182 = ((4 * HIDWORD(__p[0])) / 6uLL) | ((4 * HIDWORD(__p[0])) / 3uLL);
    v1183 = v1182 | (v1182 >> 2) | ((v1182 | (v1182 >> 2)) >> 4);
    v1181 = (((v1183 | (v1183 >> 8)) >> 16) | v1183 | (v1183 >> 8)) + 1;
  }
  else
  {
    v1181 = 1;
  }
  if (v1181 == LODWORD(__p[0]) || (sub_22E7EF454((unsigned int *)__p, v1181), LODWORD(__p[0])))
  {
    v1184 = 0;
    v1782 = v1746 + 3320;
    while (1)
    {
      v1769 = v1184;
      v1185 = (char *)v1932 + 16 * v1184;
      if (*((_QWORD *)v1185 + 1))
      {
        v1186 = (*((uint64_t (**)(void **))v1891 + 10))(&v1891);
        *(_DWORD *)v1185 = v1186 + v1894 - DWORD2(v1892);
        LOWORD(v1886) = *((_DWORD *)v1185 + 1);
        llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1886);
        v1187 = *((_QWORD *)v1185 + 1);
        if (v1187)
          break;
      }
LABEL_1814:
      v1184 = v1769 + 1;
      if (v1769 + 1 >= (unint64_t)LODWORD(__p[0]))
        goto LABEL_1815;
    }
    while (2)
    {
      LODWORD(v1886) = *(_DWORD *)(v1187 + 24);
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1886);
      v1188 = *(_QWORD *)v1187;
      v1189 = (*((uint64_t (**)(void **))v1891 + 10))(&v1891);
      v1190 = v1894;
      v1191 = DWORD2(v1892);
      *(_QWORD *)&v1886 = v1188;
      v1192 = (_DWORD *)sub_22E7D30BC(v9 + 352, (uint64_t *)&v1886);
      v1193 = *(_DWORD *)(v9 + 344);
      if (*v1192 >= v1193)
        *(_DWORD *)(*(_QWORD *)(v9 + 528) + 4 * (*v1192 - v1193)) = v1189 + v1190 - v1191;
      if (!v1143)
      {
        if ((*(_QWORD *)&v1886 = v1188, v1888 = 0, sub_22E3B9914(v9 + 456, &v1886, &v1888))
          && *((_DWORD *)v1888 + 2)
          || (v1194 = *(_QWORD *)v1188, (*(_QWORD *)v1188 & 0x20000000) != 0)
          || ((v1194 & 0x1FFFE00) != 0 ? (v1195 = v1773 == 0) : (v1195 = 0),
              v1195 ? (v1196 = 0) : (v1196 = 1),
              (v1194 & 0x400000000) != 0 || !v1196 || v1143 && *(_QWORD *)(v1188 + 8)))
        {
          v1197 = (*((uint64_t (**)(void **))v1891 + 10))(&v1891);
          v1198 = v1894;
          v1199 = *((_QWORD *)&v1892 + 1);
          v1200 = LODWORD(v1935[1]);
          if (LODWORD(v1935[1]) >= (unint64_t)HIDWORD(v1935[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v1200 = LODWORD(v1935[1]);
          }
          *((_QWORD *)v1935[0] + v1200) = v1197 + v1198 - v1199;
          ++LODWORD(v1935[1]);
        }
      }
      v1201 = **(_QWORD **)(v1188 + 16);
      *(_QWORD *)&v1886 = v1188;
      v1888 = 0;
      if (sub_22E3B9914(v9 + 456, &v1886, &v1888) && *((_DWORD *)v1888 + 2))
      {
        v1202 = 12;
        break;
      }
      v1203 = *(_QWORD *)v1188;
      if ((*(_QWORD *)v1188 & 0x20000000) != 0)
      {
        v1202 = 8;
      }
      else
      {
        v1205 = (v1203 & 0x1FFFE00) == 0 || v1773 != 0;
        v1202 = 8;
        if ((v1203 & 0x400000000) == 0 && v1205)
        {
          if (!v1143 || !*(_QWORD *)(v1188 + 8))
          {
            v1202 = 4;
            goto LABEL_1756;
          }
LABEL_1750:
          v1206 = sub_22E8CEB58(v1782, v1188);
          *(_QWORD *)&v1886 = v1206;
          if (v1206)
          {
            v1207 = v1202 + 4;
            while ((v1206 & 1) != 0)
            {
              sub_22E8CECFC((unint64_t *)&v1886);
              LOBYTE(v1206) = v1886;
              v1202 = v1207;
              v1207 += 4;
              if (!(_QWORD)v1886)
                goto LABEL_1756;
            }
            v1202 = v1207;
          }
LABEL_1756:
          v1208 = (v1201 + 1);
          do
          {
            v1209 = (_BYTE *)v1894;
            if ((unint64_t)v1894 >= (unint64_t)v1893)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v1891);
            }
            else
            {
              *(_QWORD *)&v1894 = v1894 + 1;
              *v1209 = v1208 & 0x7F | ((v1208 > 0x7F) << 7);
            }
            v1071 = v1208 > 0x7F;
            v1208 >>= 7;
          }
          while (v1071);
          v1210 = v1202;
          do
          {
            v1211 = (_BYTE *)v1894;
            if ((unint64_t)v1894 >= (unint64_t)v1893)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v1891);
            }
            else
            {
              *(_QWORD *)&v1894 = v1894 + 1;
              *v1211 = v1210 & 0x7F | ((v1210 > 0x7F) << 7);
            }
            v1071 = v1210 > 0x7F;
            v1210 >>= 7;
          }
          while (v1071);
          llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)(*(_QWORD *)(*(_QWORD *)v1187 + 16) + 16));
          v1212 = *(uint64_t **)v1187;
          v1213 = *(_DWORD *)(v1187 + 8);
          *(_QWORD *)&v1886 = *(_QWORD *)v1187;
          v1888 = 0;
          if ((sub_22E3B9914(v9 + 456, &v1886, &v1888) & 1) != 0 && (v1214 = *((_DWORD *)v1888 + 2)) != 0)
          {
            v1215 = 0;
            v1216 = 2;
LABEL_1782:
            LODWORD(v1886) = (2 * v1213) | 1;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1886);
            LOWORD(v1886) = (unint64_t)*v1212 >> 9;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1886);
            LOWORD(v1886) = ((*v1212 & 0x40000000) != 0) | (unsigned __int16)(2
                                                                            * ((*v1212 >> 28) & 2 | (4 * (((*v1212 & 0x8000000) != 0) | v1216)) | ((unint64_t)*v1212 >> 34) & 1));
            llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1886);
            if ((v1215 & 1) == 0)
            {
              LODWORD(v1886) = v1214;
              llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1886);
            }
            if (v1143)
            {
              v1220 = (void *)sub_22E8CEB58(v1782, (uint64_t)v1212);
              v1221 = (unint64_t)v1220;
              *(_QWORD *)&v1886 = v1887;
              *((_QWORD *)&v1886 + 1) = 0x1000000000;
              v1888 = v1220;
              if (v1220)
              {
                v1222 = 1;
                v1223 = (char)v1220;
                do
                {
                  v1224 = v1222;
                  if ((v1223 & 1) == 0)
                    break;
                  sub_22E8CECFC((unint64_t *)&v1888);
                  v1223 = (char)v1888;
                  v1222 = v1224 + 1;
                }
                while (v1888);
                v1225 = DWORD2(v1886);
                v1226 = HIDWORD(v1886);
              }
              else
              {
                v1225 = 0;
                v1224 = 0;
                v1226 = 16;
              }
              if (v1224 + (unint64_t)v1225 <= v1226)
              {
                v1227 = v1225;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v1227 = DWORD2(v1886);
                v1225 = DWORD2(v1886);
              }
              v1228 = (char *)v1886;
              v1888 = (void *)v1221;
              if (v1221)
              {
                v1229 = (unint64_t *)(v1886 + 8 * v1227);
                while ((v1221 & 1) != 0)
                {
                  *v1229++ = *(_QWORD *)(v1221 & 0xFFFFFFFFFFFFFFFELL);
                  sub_22E8CECFC((unint64_t *)&v1888);
                  v1221 = (unint64_t)v1888;
                  if (!v1888)
                    goto LABEL_1800;
                }
                *v1229 = v1221;
LABEL_1800:
                v1225 = DWORD2(v1886);
                v1228 = (char *)v1886;
              }
              v1230 = v1225 + v1224;
              DWORD2(v1886) = v1230;
              if (v1230)
              {
                v1231 = 8 * v1230;
                v1232 = v1228 - 8;
                do
                {
                  v1233 = (_BYTE *)sub_22E7CAA38(*(_QWORD *)(*(_QWORD *)(v1772 + 56) + 20), *(unsigned __int8 *)(*(_QWORD *)(v1772 + 56) + 28), *(_QWORD *)&v1232[v1231]);
                  v1888 = v1233;
                  if (v1233)
                  {
                    if ((v1233[29] & 0x80) != 0)
                      v1234 = *((_DWORD *)v1233 - 1);
                    else
                      v1234 = *((_DWORD *)sub_22E4D1AD8((uint64_t *)(v9 + 208), &v1888) + 2);
                  }
                  else
                  {
                    v1234 = 0;
                  }
                  LODWORD(v1888) = v1234;
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1888);
                  v1231 -= 8;
                }
                while (v1231);
                v1228 = (char *)v1886;
              }
              if (v1228 != (char *)v1887)
                free(v1228);
            }
          }
          else
          {
            v1217 = *v1212;
            if ((*v1212 & 0x20000000) != 0)
            {
              v1214 = 0;
              v1216 = 0;
              v1215 = 1;
              goto LABEL_1782;
            }
            v1214 = 0;
            v1219 = (v1217 & 0x1FFFE00) == 0 || v1773 != 0;
            v1215 = 1;
            v1216 = 0;
            if ((v1217 & 0x400000000) != 0 || !v1219)
              goto LABEL_1782;
            if (v1143 && v1212[1])
            {
              v1214 = 0;
              v1216 = 0;
              goto LABEL_1782;
            }
            LODWORD(v1886) = 2 * v1213;
            llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1886);
          }
          v1187 = *(_QWORD *)(v1187 + 16);
          if (!v1187)
            goto LABEL_1814;
          continue;
        }
      }
      break;
    }
    if (!v1143)
      goto LABEL_1756;
    goto LABEL_1750;
  }
LABEL_1815:
  v1235 = (*((uint64_t (**)(void **))v1891 + 10))(&v1891);
  v1236 = v1894 - DWORD2(v1892) + v1235;
  v1237 = (v1236 + 3) & 0x1FFFFFFFCLL;
  v1238 = v1237 - v1236;
  if (v1237 != v1236)
  {
    v1239 = v1236 - v1237;
    do
    {
      LOBYTE(v1886) = 0;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1886);
      v467 = __CFADD__(v1239++, 1);
    }
    while (!v467);
  }
  LODWORD(v1886) = __p[0];
  llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1886);
  LODWORD(v1886) = HIDWORD(__p[0]);
  llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1886);
  v1240 = (llvm::raw_ostream **)(v9 + 16);
  if (LODWORD(__p[0]))
  {
    v1241 = 0;
    v1242 = 0;
    do
    {
      LODWORD(v1886) = *(_DWORD *)((char *)v1932 + v1241);
      llvm::raw_ostream::write((llvm::raw_ostream *)&v1891, (const char *)&v1886);
      ++v1242;
      v1241 += 16;
    }
    while (v1242 < LODWORD(__p[0]));
  }
  v1243 = v1238 + v1236;
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v1891);
  v1244 = (char *)operator new(0x228uLL);
  *(_QWORD *)v1244 = &unk_24FA715D0;
  *((_QWORD *)v1244 + 1) = 0;
  *(_OWORD *)(v1244 + 88) = 0u;
  *(_OWORD *)(v1244 + 104) = 0u;
  *(_OWORD *)(v1244 + 120) = 0u;
  *(_OWORD *)(v1244 + 136) = 0u;
  *(_OWORD *)(v1244 + 152) = 0u;
  *(_OWORD *)(v1244 + 168) = 0u;
  *(_OWORD *)(v1244 + 184) = 0u;
  *(_OWORD *)(v1244 + 200) = 0u;
  *(_OWORD *)(v1244 + 216) = 0u;
  *(_OWORD *)(v1244 + 232) = 0u;
  *(_OWORD *)(v1244 + 248) = 0u;
  *(_OWORD *)(v1244 + 264) = 0u;
  *(_OWORD *)(v1244 + 280) = 0u;
  *(_OWORD *)(v1244 + 296) = 0u;
  *(_OWORD *)(v1244 + 312) = 0u;
  *(_OWORD *)(v1244 + 328) = 0u;
  *(_OWORD *)(v1244 + 344) = 0u;
  *(_OWORD *)(v1244 + 360) = 0u;
  *(_OWORD *)(v1244 + 376) = 0u;
  *(_OWORD *)(v1244 + 392) = 0u;
  *(_OWORD *)(v1244 + 408) = 0u;
  *(_OWORD *)(v1244 + 424) = 0u;
  *(_OWORD *)(v1244 + 440) = 0u;
  *(_OWORD *)(v1244 + 456) = 0u;
  *(_OWORD *)(v1244 + 472) = 0u;
  *(_OWORD *)(v1244 + 488) = 0u;
  *(_OWORD *)(v1244 + 504) = 0u;
  *(_OWORD *)(v1244 + 520) = 0u;
  *(_OWORD *)(v1244 + 536) = 0u;
  *(_OWORD *)(v1244 + 40) = xmmword_22F45E0E0;
  *((_QWORD *)v1244 + 2) = 0;
  *((_QWORD *)v1244 + 3) = v1244 + 40;
  *(_OWORD *)(v1244 + 56) = xmmword_22F45E080;
  v1245 = *(llvm::raw_ostream **)v1778;
  *(_OWORD *)(v1244 + 72) = xmmword_22F45E0D0;
  *((_QWORD *)v1244 + 4) = 0x2000000003;
  *(_QWORD *)&v1886 = v1244 + 24;
  *((_QWORD *)&v1886 + 1) = v1244;
  v1246 = sub_22E74761C((uint64_t)v1245, (uint64_t)&v1886);
  v1247 = (std::__shared_weak_count *)*((_QWORD *)&v1886 + 1);
  if (*((_QWORD *)&v1886 + 1))
  {
    v1248 = (unint64_t *)(*((_QWORD *)&v1886 + 1) + 8);
    do
      v1249 = __ldaxr(v1248);
    while (__stlxr(v1249 - 1, v1248));
    if (!v1249)
    {
      ((void (*)(std::__shared_weak_count *))v1247->__on_zero_shared)(v1247);
      std::__shared_weak_count::__release_weak(v1247);
    }
  }
  v1891 = (void *)5;
  *(_QWORD *)&v1892 = v1243;
  sub_22E74241C(*(llvm::raw_ostream **)v1778, v1246, (uint64_t)&v1891, 2, __s1[0], (uint64_t)__s1[1], 0);
  if ((char **)__s1[0] != &__s1[3])
    free(__s1[0]);
  if (*(_BYTE **)v1911 != &v1911[16])
    free(*(void **)v1911);
  free(v1932);
  sub_22E6188F4((uint64_t)&__p[1]);
  sub_22E3B4EF4((uint64_t)&__p[1]);
  v1250 = (char *)operator new(0x228uLL);
  *(_QWORD *)v1250 = &unk_24FA715D0;
  *((_QWORD *)v1250 + 1) = 0;
  *(_OWORD *)(v1250 + 104) = 0u;
  *(_OWORD *)(v1250 + 120) = 0u;
  *(_OWORD *)(v1250 + 136) = 0u;
  *(_OWORD *)(v1250 + 152) = 0u;
  *(_OWORD *)(v1250 + 168) = 0u;
  *(_OWORD *)(v1250 + 184) = 0u;
  *(_OWORD *)(v1250 + 200) = 0u;
  *(_OWORD *)(v1250 + 216) = 0u;
  *(_OWORD *)(v1250 + 232) = 0u;
  *(_OWORD *)(v1250 + 248) = 0u;
  *(_OWORD *)(v1250 + 264) = 0u;
  *(_OWORD *)(v1250 + 280) = 0u;
  *(_OWORD *)(v1250 + 296) = 0u;
  *(_OWORD *)(v1250 + 312) = 0u;
  *(_OWORD *)(v1250 + 328) = 0u;
  *(_OWORD *)(v1250 + 344) = 0u;
  *(_OWORD *)(v1250 + 360) = 0u;
  *(_OWORD *)(v1250 + 376) = 0u;
  *(_OWORD *)(v1250 + 392) = 0u;
  *(_OWORD *)(v1250 + 408) = 0u;
  *(_OWORD *)(v1250 + 424) = 0u;
  *(_OWORD *)(v1250 + 440) = 0u;
  *(_OWORD *)(v1250 + 456) = 0u;
  *(_OWORD *)(v1250 + 472) = 0u;
  *(_OWORD *)(v1250 + 488) = 0u;
  *(_OWORD *)(v1250 + 504) = 0u;
  *(_OWORD *)(v1250 + 520) = 0u;
  *(_OWORD *)(v1250 + 536) = 0u;
  *(_OWORD *)(v1250 + 40) = xmmword_22F45E110;
  *((_QWORD *)v1250 + 2) = 0;
  *((_QWORD *)v1250 + 3) = v1250 + 40;
  *(_OWORD *)(v1250 + 56) = xmmword_22F45E080;
  *(_OWORD *)(v1250 + 72) = xmmword_22F45E080;
  v1251 = *(llvm::raw_ostream **)v1778;
  *(_OWORD *)(v1250 + 88) = xmmword_22F45E0D0;
  *((_QWORD *)v1250 + 4) = 0x2000000004;
  *(_QWORD *)v1911 = v1250 + 24;
  *(_QWORD *)&v1911[8] = v1250;
  v1252 = sub_22E74761C((uint64_t)v1251, (uint64_t)v1911);
  v1253 = *(std::__shared_weak_count **)&v1911[8];
  if (*(_QWORD *)&v1911[8])
  {
    v1254 = (unint64_t *)(*(_QWORD *)&v1911[8] + 8);
    do
      v1255 = __ldaxr(v1254);
    while (__stlxr(v1255 - 1, v1254));
    if (!v1255)
    {
      ((void (*)(std::__shared_weak_count *))v1253->__on_zero_shared)(v1253);
      std::__shared_weak_count::__release_weak(v1253);
    }
  }
  v1256 = *(char **)(v9 + 528);
  v1257 = (char *)(*(_DWORD *)(v9 + 344) - 1);
  v1258 = *(_QWORD *)(v9 + 536) - (_QWORD)v1256;
  __s1[0] = (char *)3;
  __s1[1] = (char *)(v1258 >> 2);
  __s1[2] = v1257;
  if (v1258)
    v1259 = v1256;
  else
    v1259 = 0;
  if (v1258)
    v1260 = v1258;
  else
    v1260 = 0;
  sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v1252, (uint64_t)__s1, 3, v1259, v1260, 0);
  if (LODWORD(v1935[1]))
    sub_22E742038(*(llvm::raw_ostream **)v1778, 0x30u, (uint64_t)v1935, 0);
  if ((llvm **)v1935[0] != &v1935[2])
    free(v1935[0]);
  if (*(_QWORD *)(v1746 + 1296) == *(_QWORD *)(v1746 + 1288))
    v1261 = 0;
  else
    v1261 = *(_QWORD *)(v1746 + 1296);
  __s1[0] = (char *)__ROR8__(v1261, 32);
  sub_22F2CF6E8(*(int **)(v9 + 16), 0x23u, (unint64_t *)__s1);
  sub_22F2CFBE4(v9, v1746);
  if (*(_DWORD *)(v1746 + 12776))
  {
    __s1[0] = (char *)*(unsigned int *)(v1746 + 12776);
    sub_22F2CF6E8(*(int **)v1778, 0x39u, (unint64_t *)__s1);
  }
  if (v1773)
  {
    v1829 = v1773;
    sub_22E74181C(*(_QWORD *)v1778, 0xDu, 5u);
    v1262 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1262 = &unk_24FA715D0;
    *((_QWORD *)v1262 + 1) = 0;
    *(_OWORD *)(v1262 + 280) = 0u;
    *(_OWORD *)(v1262 + 296) = 0u;
    *(_OWORD *)(v1262 + 312) = 0u;
    *(_OWORD *)(v1262 + 328) = 0u;
    *(_OWORD *)(v1262 + 344) = 0u;
    *(_OWORD *)(v1262 + 360) = 0u;
    *(_OWORD *)(v1262 + 376) = 0u;
    *(_OWORD *)(v1262 + 392) = 0u;
    *(_OWORD *)(v1262 + 408) = 0u;
    *(_OWORD *)(v1262 + 424) = 0u;
    *(_OWORD *)(v1262 + 440) = 0u;
    *(_OWORD *)(v1262 + 456) = 0u;
    *(_OWORD *)(v1262 + 472) = 0u;
    *(_OWORD *)(v1262 + 488) = 0u;
    *(_OWORD *)(v1262 + 504) = 0u;
    *(_OWORD *)(v1262 + 520) = 0u;
    *(_OWORD *)(v1262 + 536) = 0u;
    *(_OWORD *)(v1262 + 40) = xmmword_22F45E070;
    *((_QWORD *)v1262 + 2) = 0;
    *((_QWORD *)v1262 + 3) = v1262 + 40;
    *(_OWORD *)(v1262 + 56) = xmmword_22F45E250;
    *(_OWORD *)(v1262 + 72) = xmmword_22F45E250;
    *(_OWORD *)(v1262 + 88) = xmmword_22F45E0A0;
    *(_OWORD *)(v1262 + 104) = xmmword_22F45E160;
    *(_OWORD *)(v1262 + 120) = xmmword_22F45E160;
    *(_OWORD *)(v1262 + 136) = xmmword_22F45E160;
    *(_OWORD *)(v1262 + 152) = xmmword_22F45E160;
    *(_OWORD *)(v1262 + 168) = xmmword_22F45E160;
    *(_OWORD *)(v1262 + 184) = xmmword_22F45E160;
    *(_OWORD *)(v1262 + 200) = xmmword_22F45E160;
    *(_OWORD *)(v1262 + 216) = xmmword_22F45E160;
    *(_OWORD *)(v1262 + 232) = xmmword_22F45E160;
    *(_OWORD *)(v1262 + 248) = xmmword_22F45E160;
    v1263 = *(llvm::raw_ostream **)v1778;
    *((_QWORD *)v1262 + 33) = 0;
    *((_QWORD *)v1262 + 34) = 10;
    *((_QWORD *)v1262 + 4) = 0x200000000FLL;
    *(_QWORD *)&v1886 = v1262 + 24;
    *((_QWORD *)&v1886 + 1) = v1262;
    v1783 = sub_22E74761C((uint64_t)v1263, (uint64_t)&v1886);
    v1264 = (std::__shared_weak_count *)*((_QWORD *)&v1886 + 1);
    if (*((_QWORD *)&v1886 + 1))
    {
      v1265 = (unint64_t *)(*((_QWORD *)&v1886 + 1) + 8);
      do
        v1266 = __ldaxr(v1265);
      while (__stlxr(v1266 - 1, v1265));
      if (!v1266)
      {
        ((void (*)(std::__shared_weak_count *))v1264->__on_zero_shared)(v1264);
        std::__shared_weak_count::__release_weak(v1264);
      }
    }
    v1267 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1267 = &unk_24FA715D0;
    *((_QWORD *)v1267 + 1) = 0;
    *(_OWORD *)(v1267 + 72) = 0u;
    *(_OWORD *)(v1267 + 88) = 0u;
    *(_OWORD *)(v1267 + 104) = 0u;
    *(_OWORD *)(v1267 + 120) = 0u;
    *(_OWORD *)(v1267 + 136) = 0u;
    *(_OWORD *)(v1267 + 152) = 0u;
    *(_OWORD *)(v1267 + 168) = 0u;
    *(_OWORD *)(v1267 + 184) = 0u;
    *(_OWORD *)(v1267 + 200) = 0u;
    *(_OWORD *)(v1267 + 216) = 0u;
    *(_OWORD *)(v1267 + 232) = 0u;
    *(_OWORD *)(v1267 + 248) = 0u;
    *(_OWORD *)(v1267 + 264) = 0u;
    *(_OWORD *)(v1267 + 280) = 0u;
    *(_OWORD *)(v1267 + 296) = 0u;
    *(_OWORD *)(v1267 + 312) = 0u;
    *(_OWORD *)(v1267 + 328) = 0u;
    *(_OWORD *)(v1267 + 344) = 0u;
    *(_OWORD *)(v1267 + 360) = 0u;
    *(_OWORD *)(v1267 + 376) = 0u;
    *(_OWORD *)(v1267 + 392) = 0u;
    *(_OWORD *)(v1267 + 408) = 0u;
    *(_OWORD *)(v1267 + 424) = 0u;
    *(_OWORD *)(v1267 + 440) = 0u;
    *(_OWORD *)(v1267 + 456) = 0u;
    *(_OWORD *)(v1267 + 472) = 0u;
    *(_OWORD *)(v1267 + 488) = 0u;
    *(_OWORD *)(v1267 + 504) = 0u;
    *(_OWORD *)(v1267 + 520) = 0u;
    *(_OWORD *)(v1267 + 536) = 0u;
    *(_OWORD *)(v1267 + 40) = xmmword_22F45E090;
    *((_QWORD *)v1267 + 2) = 0;
    *((_QWORD *)v1267 + 3) = v1267 + 40;
    *(_OWORD *)(v1267 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v1267 + 4) = 0x2000000002;
    v1268 = *(llvm::raw_ostream **)v1778;
    __p[0] = v1267 + 24;
    __p[1] = v1267;
    v1743 = sub_22E74761C((uint64_t)v1268, (uint64_t)__p);
    v1269 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v1270 = (unint64_t *)((char *)__p[1] + 8);
      do
        v1271 = __ldaxr(v1270);
      while (__stlxr(v1271 - 1, v1270));
      if (!v1271)
      {
        ((void (*)(std::__shared_weak_count *))v1269->__on_zero_shared)(v1269);
        std::__shared_weak_count::__release_weak(v1269);
      }
    }
    v1272 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1272 = &unk_24FA715D0;
    *((_QWORD *)v1272 + 1) = 0;
    *(_OWORD *)(v1272 + 72) = 0u;
    *(_OWORD *)(v1272 + 88) = 0u;
    *(_OWORD *)(v1272 + 104) = 0u;
    *(_OWORD *)(v1272 + 120) = 0u;
    *(_OWORD *)(v1272 + 136) = 0u;
    *(_OWORD *)(v1272 + 152) = 0u;
    *(_OWORD *)(v1272 + 168) = 0u;
    *(_OWORD *)(v1272 + 184) = 0u;
    *(_OWORD *)(v1272 + 200) = 0u;
    *(_OWORD *)(v1272 + 216) = 0u;
    *(_OWORD *)(v1272 + 232) = 0u;
    *(_OWORD *)(v1272 + 248) = 0u;
    *(_OWORD *)(v1272 + 264) = 0u;
    *(_OWORD *)(v1272 + 280) = 0u;
    *(_OWORD *)(v1272 + 296) = 0u;
    *(_OWORD *)(v1272 + 312) = 0u;
    *(_OWORD *)(v1272 + 328) = 0u;
    *(_OWORD *)(v1272 + 344) = 0u;
    *(_OWORD *)(v1272 + 360) = 0u;
    *(_OWORD *)(v1272 + 376) = 0u;
    *(_OWORD *)(v1272 + 392) = 0u;
    *(_OWORD *)(v1272 + 408) = 0u;
    *(_OWORD *)(v1272 + 424) = 0u;
    *(_OWORD *)(v1272 + 440) = 0u;
    *(_OWORD *)(v1272 + 456) = 0u;
    *(_OWORD *)(v1272 + 472) = 0u;
    *(_OWORD *)(v1272 + 488) = 0u;
    *(_OWORD *)(v1272 + 504) = 0u;
    *(_OWORD *)(v1272 + 520) = 0u;
    *(_OWORD *)(v1272 + 536) = 0u;
    *(_OWORD *)(v1272 + 40) = xmmword_22F45E110;
    *((_QWORD *)v1272 + 2) = 0;
    *((_QWORD *)v1272 + 3) = v1272 + 40;
    *(_OWORD *)(v1272 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v1272 + 4) = 0x2000000002;
    v1273 = *(llvm::raw_ostream **)v1778;
    v1891 = v1272 + 24;
    *(_QWORD *)&v1892 = v1272;
    v1777 = sub_22E74761C((uint64_t)v1273, (uint64_t)&v1891);
    v1274 = (std::__shared_weak_count *)v1892;
    if ((_QWORD)v1892)
    {
      v1275 = (unint64_t *)(v1892 + 8);
      do
        v1276 = __ldaxr(v1275);
      while (__stlxr(v1276 - 1, v1275));
      if (!v1276)
      {
        ((void (*)(std::__shared_weak_count *))v1274->__on_zero_shared)(v1274);
        std::__shared_weak_count::__release_weak(v1274);
      }
    }
    v1277 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1277 = &unk_24FA715D0;
    *((_QWORD *)v1277 + 1) = 0;
    *(_OWORD *)(v1277 + 72) = 0u;
    *(_OWORD *)(v1277 + 88) = 0u;
    *(_OWORD *)(v1277 + 104) = 0u;
    *(_OWORD *)(v1277 + 120) = 0u;
    *(_OWORD *)(v1277 + 136) = 0u;
    *(_OWORD *)(v1277 + 152) = 0u;
    *(_OWORD *)(v1277 + 168) = 0u;
    *(_OWORD *)(v1277 + 184) = 0u;
    *(_OWORD *)(v1277 + 200) = 0u;
    *(_OWORD *)(v1277 + 216) = 0u;
    *(_OWORD *)(v1277 + 232) = 0u;
    *(_OWORD *)(v1277 + 248) = 0u;
    *(_OWORD *)(v1277 + 264) = 0u;
    *(_OWORD *)(v1277 + 280) = 0u;
    *(_OWORD *)(v1277 + 296) = 0u;
    *(_OWORD *)(v1277 + 312) = 0u;
    *(_OWORD *)(v1277 + 328) = 0u;
    *(_OWORD *)(v1277 + 344) = 0u;
    *(_OWORD *)(v1277 + 360) = 0u;
    *(_OWORD *)(v1277 + 376) = 0u;
    *(_OWORD *)(v1277 + 392) = 0u;
    *(_OWORD *)(v1277 + 408) = 0u;
    *(_OWORD *)(v1277 + 424) = 0u;
    *(_OWORD *)(v1277 + 440) = 0u;
    *(_OWORD *)(v1277 + 456) = 0u;
    *(_OWORD *)(v1277 + 472) = 0u;
    *(_OWORD *)(v1277 + 488) = 0u;
    *(_OWORD *)(v1277 + 504) = 0u;
    *(_OWORD *)(v1277 + 520) = 0u;
    *(_OWORD *)(v1277 + 536) = 0u;
    *(_OWORD *)(v1277 + 40) = xmmword_22F45E120;
    *((_QWORD *)v1277 + 2) = 0;
    *((_QWORD *)v1277 + 3) = v1277 + 40;
    *(_OWORD *)(v1277 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v1277 + 4) = 0x2000000002;
    v1278 = *(llvm::raw_ostream **)v1778;
    v1888 = v1277 + 24;
    v1889 = (uint64_t)v1277;
    v1279 = sub_22E74761C((uint64_t)v1278, (uint64_t)&v1888);
    v1280 = (std::__shared_weak_count *)v1889;
    if (v1889)
    {
      v1281 = (unint64_t *)(v1889 + 8);
      do
        v1282 = __ldaxr(v1281);
      while (__stlxr(v1282 - 1, v1281));
      if (!v1282)
      {
        ((void (*)(std::__shared_weak_count *))v1280->__on_zero_shared)(v1280);
        std::__shared_weak_count::__release_weak(v1280);
      }
    }
    v1283 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1283 = &unk_24FA715D0;
    *((_QWORD *)v1283 + 1) = 0;
    *(_OWORD *)(v1283 + 72) = 0u;
    *(_OWORD *)(v1283 + 88) = 0u;
    *(_OWORD *)(v1283 + 104) = 0u;
    *(_OWORD *)(v1283 + 120) = 0u;
    *(_OWORD *)(v1283 + 136) = 0u;
    *(_OWORD *)(v1283 + 152) = 0u;
    *(_OWORD *)(v1283 + 168) = 0u;
    *(_OWORD *)(v1283 + 184) = 0u;
    *(_OWORD *)(v1283 + 200) = 0u;
    *(_OWORD *)(v1283 + 216) = 0u;
    *(_OWORD *)(v1283 + 232) = 0u;
    *(_OWORD *)(v1283 + 248) = 0u;
    *(_OWORD *)(v1283 + 264) = 0u;
    *(_OWORD *)(v1283 + 280) = 0u;
    *(_OWORD *)(v1283 + 296) = 0u;
    *(_OWORD *)(v1283 + 312) = 0u;
    *(_OWORD *)(v1283 + 328) = 0u;
    *(_OWORD *)(v1283 + 344) = 0u;
    *(_OWORD *)(v1283 + 360) = 0u;
    *(_OWORD *)(v1283 + 376) = 0u;
    *(_OWORD *)(v1283 + 392) = 0u;
    *(_OWORD *)(v1283 + 408) = 0u;
    *(_OWORD *)(v1283 + 424) = 0u;
    *(_OWORD *)(v1283 + 440) = 0u;
    *(_OWORD *)(v1283 + 456) = 0u;
    *(_OWORD *)(v1283 + 472) = 0u;
    *(_OWORD *)(v1283 + 488) = 0u;
    *(_OWORD *)(v1283 + 504) = 0u;
    *(_OWORD *)(v1283 + 520) = 0u;
    *(_OWORD *)(v1283 + 536) = 0u;
    *(_OWORD *)(v1283 + 40) = xmmword_22F45E0E0;
    *((_QWORD *)v1283 + 2) = 0;
    *((_QWORD *)v1283 + 3) = v1283 + 40;
    *(_OWORD *)(v1283 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v1283 + 4) = 0x2000000002;
    v1284 = *(llvm::raw_ostream **)v1778;
    *(_QWORD *)&v1813 = v1283 + 24;
    *((_QWORD *)&v1813 + 1) = v1283;
    v1740 = sub_22E74761C((uint64_t)v1284, (uint64_t)&v1813);
    v1285 = (std::__shared_weak_count *)*((_QWORD *)&v1813 + 1);
    if (*((_QWORD *)&v1813 + 1))
    {
      v1286 = (unint64_t *)(*((_QWORD *)&v1813 + 1) + 8);
      do
        v1287 = __ldaxr(v1286);
      while (__stlxr(v1287 - 1, v1286));
      if (!v1287)
      {
        ((void (*)(std::__shared_weak_count *))v1285->__on_zero_shared)(v1285);
        std::__shared_weak_count::__release_weak(v1285);
      }
    }
    v1288 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1288 = &unk_24FA715D0;
    *((_QWORD *)v1288 + 1) = 0;
    *(_OWORD *)(v1288 + 88) = 0u;
    *(_OWORD *)(v1288 + 104) = 0u;
    *(_OWORD *)(v1288 + 120) = 0u;
    *(_OWORD *)(v1288 + 136) = 0u;
    *(_OWORD *)(v1288 + 152) = 0u;
    *(_OWORD *)(v1288 + 168) = 0u;
    *(_OWORD *)(v1288 + 184) = 0u;
    *(_OWORD *)(v1288 + 200) = 0u;
    *(_OWORD *)(v1288 + 216) = 0u;
    *(_OWORD *)(v1288 + 232) = 0u;
    *(_OWORD *)(v1288 + 248) = 0u;
    *(_OWORD *)(v1288 + 264) = 0u;
    *(_OWORD *)(v1288 + 280) = 0u;
    *(_OWORD *)(v1288 + 296) = 0u;
    *(_OWORD *)(v1288 + 312) = 0u;
    *(_OWORD *)(v1288 + 328) = 0u;
    *(_OWORD *)(v1288 + 344) = 0u;
    *(_OWORD *)(v1288 + 360) = 0u;
    *(_OWORD *)(v1288 + 376) = 0u;
    *(_OWORD *)(v1288 + 392) = 0u;
    *(_OWORD *)(v1288 + 408) = 0u;
    *(_OWORD *)(v1288 + 424) = 0u;
    *(_OWORD *)(v1288 + 440) = 0u;
    *(_OWORD *)(v1288 + 456) = 0u;
    *(_OWORD *)(v1288 + 472) = 0u;
    *(_OWORD *)(v1288 + 488) = 0u;
    *(_OWORD *)(v1288 + 504) = 0u;
    *(_OWORD *)(v1288 + 520) = 0u;
    *(_OWORD *)(v1288 + 536) = 0u;
    *(_OWORD *)(v1288 + 40) = xmmword_22F45E150;
    *((_QWORD *)v1288 + 2) = 0;
    *((_QWORD *)v1288 + 3) = v1288 + 40;
    *(_OWORD *)(v1288 + 56) = xmmword_22F45E160;
    v1289 = *(llvm::raw_ostream **)v1778;
    *(_OWORD *)(v1288 + 72) = xmmword_22F45E0D0;
    *((_QWORD *)v1288 + 4) = 0x2000000003;
    *(_QWORD *)&v1809 = v1288 + 24;
    *((_QWORD *)&v1809 + 1) = v1288;
    v1290 = sub_22E74761C((uint64_t)v1289, (uint64_t)&v1809);
    v1291 = (std::__shared_weak_count *)*((_QWORD *)&v1809 + 1);
    if (*((_QWORD *)&v1809 + 1))
    {
      v1292 = (unint64_t *)(*((_QWORD *)&v1809 + 1) + 8);
      do
        v1293 = __ldaxr(v1292);
      while (__stlxr(v1293 - 1, v1292));
      if (!v1293)
      {
        ((void (*)(std::__shared_weak_count *))v1291->__on_zero_shared)(v1291);
        std::__shared_weak_count::__release_weak(v1291);
      }
    }
    v1294 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1294 = &unk_24FA715D0;
    *((_QWORD *)v1294 + 1) = 0;
    *(_OWORD *)(v1294 + 72) = 0u;
    *(_OWORD *)(v1294 + 88) = 0u;
    *(_OWORD *)(v1294 + 104) = 0u;
    *(_OWORD *)(v1294 + 120) = 0u;
    *(_OWORD *)(v1294 + 136) = 0u;
    *(_OWORD *)(v1294 + 152) = 0u;
    *(_OWORD *)(v1294 + 168) = 0u;
    *(_OWORD *)(v1294 + 184) = 0u;
    *(_OWORD *)(v1294 + 200) = 0u;
    *(_OWORD *)(v1294 + 216) = 0u;
    *(_OWORD *)(v1294 + 232) = 0u;
    *(_OWORD *)(v1294 + 248) = 0u;
    *(_OWORD *)(v1294 + 264) = 0u;
    *(_OWORD *)(v1294 + 280) = 0u;
    *(_OWORD *)(v1294 + 296) = 0u;
    *(_OWORD *)(v1294 + 312) = 0u;
    *(_OWORD *)(v1294 + 328) = 0u;
    *(_OWORD *)(v1294 + 344) = 0u;
    *(_OWORD *)(v1294 + 360) = 0u;
    *(_OWORD *)(v1294 + 376) = 0u;
    *(_OWORD *)(v1294 + 392) = 0u;
    *(_OWORD *)(v1294 + 408) = 0u;
    *(_OWORD *)(v1294 + 424) = 0u;
    *(_OWORD *)(v1294 + 440) = 0u;
    *(_OWORD *)(v1294 + 456) = 0u;
    *(_OWORD *)(v1294 + 472) = 0u;
    *(_OWORD *)(v1294 + 488) = 0u;
    *(_OWORD *)(v1294 + 504) = 0u;
    *(_OWORD *)(v1294 + 520) = 0u;
    *(_OWORD *)(v1294 + 536) = 0u;
    *(_OWORD *)(v1294 + 40) = xmmword_22F45FAC0;
    *((_QWORD *)v1294 + 2) = 0;
    *((_QWORD *)v1294 + 3) = v1294 + 40;
    *(_OWORD *)(v1294 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v1294 + 4) = 0x2000000002;
    v1295 = *(llvm::raw_ostream **)v1778;
    *(_QWORD *)v1806 = v1294 + 24;
    v1807 = (std::__shared_weak_count *)v1294;
    v1770 = sub_22E74761C((uint64_t)v1295, (uint64_t)v1806);
    v1296 = v1807;
    if (v1807)
    {
      v1297 = (unint64_t *)&v1807->__shared_owners_;
      do
        v1298 = __ldaxr(v1297);
      while (__stlxr(v1298 - 1, v1297));
      if (!v1298)
      {
        ((void (*)(std::__shared_weak_count *))v1296->__on_zero_shared)(v1296);
        std::__shared_weak_count::__release_weak(v1296);
      }
    }
    v1299 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1299 = &unk_24FA715D0;
    *((_QWORD *)v1299 + 1) = 0;
    *(_OWORD *)(v1299 + 72) = 0u;
    *(_OWORD *)(v1299 + 88) = 0u;
    *(_OWORD *)(v1299 + 104) = 0u;
    *(_OWORD *)(v1299 + 120) = 0u;
    *(_OWORD *)(v1299 + 136) = 0u;
    *(_OWORD *)(v1299 + 152) = 0u;
    *(_OWORD *)(v1299 + 168) = 0u;
    *(_OWORD *)(v1299 + 184) = 0u;
    *(_OWORD *)(v1299 + 200) = 0u;
    *(_OWORD *)(v1299 + 216) = 0u;
    *(_OWORD *)(v1299 + 232) = 0u;
    *(_OWORD *)(v1299 + 248) = 0u;
    *(_OWORD *)(v1299 + 264) = 0u;
    *(_OWORD *)(v1299 + 280) = 0u;
    *(_OWORD *)(v1299 + 296) = 0u;
    *(_OWORD *)(v1299 + 312) = 0u;
    *(_OWORD *)(v1299 + 328) = 0u;
    *(_OWORD *)(v1299 + 344) = 0u;
    *(_OWORD *)(v1299 + 360) = 0u;
    *(_OWORD *)(v1299 + 376) = 0u;
    *(_OWORD *)(v1299 + 392) = 0u;
    *(_OWORD *)(v1299 + 408) = 0u;
    *(_OWORD *)(v1299 + 424) = 0u;
    *(_OWORD *)(v1299 + 440) = 0u;
    *(_OWORD *)(v1299 + 456) = 0u;
    *(_OWORD *)(v1299 + 472) = 0u;
    *(_OWORD *)(v1299 + 488) = 0u;
    *(_OWORD *)(v1299 + 504) = 0u;
    *(_OWORD *)(v1299 + 520) = 0u;
    *(_OWORD *)(v1299 + 536) = 0u;
    *(_OWORD *)(v1299 + 40) = xmmword_22F45FBE0;
    *((_QWORD *)v1299 + 2) = 0;
    *((_QWORD *)v1299 + 3) = v1299 + 40;
    *(_OWORD *)(v1299 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v1299 + 4) = 0x2000000002;
    v1300 = *(llvm::raw_ostream **)v1778;
    v1803 = v1299 + 24;
    v1804 = (std::__shared_weak_count *)v1299;
    v1762 = sub_22E74761C((uint64_t)v1300, (uint64_t)&v1803);
    v1301 = v1804;
    if (v1804)
    {
      v1302 = (unint64_t *)&v1804->__shared_owners_;
      do
        v1303 = __ldaxr(v1302);
      while (__stlxr(v1303 - 1, v1302));
      if (!v1303)
      {
        ((void (*)(std::__shared_weak_count *))v1301->__on_zero_shared)(v1301);
        std::__shared_weak_count::__release_weak(v1301);
      }
    }
    v1304 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1304 = &unk_24FA715D0;
    *((_QWORD *)v1304 + 1) = 0;
    *(_OWORD *)(v1304 + 72) = 0u;
    *(_OWORD *)(v1304 + 88) = 0u;
    *(_OWORD *)(v1304 + 104) = 0u;
    *(_OWORD *)(v1304 + 120) = 0u;
    *(_OWORD *)(v1304 + 136) = 0u;
    *(_OWORD *)(v1304 + 152) = 0u;
    *(_OWORD *)(v1304 + 168) = 0u;
    *(_OWORD *)(v1304 + 184) = 0u;
    *(_OWORD *)(v1304 + 200) = 0u;
    *(_OWORD *)(v1304 + 216) = 0u;
    *(_OWORD *)(v1304 + 232) = 0u;
    *(_OWORD *)(v1304 + 248) = 0u;
    *(_OWORD *)(v1304 + 264) = 0u;
    *(_OWORD *)(v1304 + 280) = 0u;
    *(_OWORD *)(v1304 + 296) = 0u;
    *(_OWORD *)(v1304 + 312) = 0u;
    *(_OWORD *)(v1304 + 328) = 0u;
    *(_OWORD *)(v1304 + 344) = 0u;
    *(_OWORD *)(v1304 + 360) = 0u;
    *(_OWORD *)(v1304 + 376) = 0u;
    *(_OWORD *)(v1304 + 392) = 0u;
    *(_OWORD *)(v1304 + 408) = 0u;
    *(_OWORD *)(v1304 + 424) = 0u;
    *(_OWORD *)(v1304 + 440) = 0u;
    *(_OWORD *)(v1304 + 456) = 0u;
    *(_OWORD *)(v1304 + 472) = 0u;
    *(_OWORD *)(v1304 + 488) = 0u;
    *(_OWORD *)(v1304 + 504) = 0u;
    *(_OWORD *)(v1304 + 520) = 0u;
    *(_OWORD *)(v1304 + 536) = 0u;
    *(_OWORD *)(v1304 + 40) = xmmword_22F45FC50;
    *((_QWORD *)v1304 + 2) = 0;
    *((_QWORD *)v1304 + 3) = v1304 + 40;
    *(_OWORD *)(v1304 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v1304 + 4) = 0x2000000002;
    v1305 = *(llvm::raw_ostream **)v1778;
    v1827 = v1304 + 24;
    v1828 = (std::__shared_weak_count *)v1304;
    v1758 = sub_22E74761C((uint64_t)v1305, (uint64_t)&v1827);
    v1306 = v1828;
    if (v1828)
    {
      v1307 = (unint64_t *)&v1828->__shared_owners_;
      do
        v1308 = __ldaxr(v1307);
      while (__stlxr(v1308 - 1, v1307));
      if (!v1308)
      {
        ((void (*)(std::__shared_weak_count *))v1306->__on_zero_shared)(v1306);
        std::__shared_weak_count::__release_weak(v1306);
      }
    }
    v1309 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1309 = &unk_24FA715D0;
    *((_QWORD *)v1309 + 1) = 0;
    *(_OWORD *)(v1309 + 72) = 0u;
    *(_OWORD *)(v1309 + 88) = 0u;
    *(_OWORD *)(v1309 + 104) = 0u;
    *(_OWORD *)(v1309 + 120) = 0u;
    *(_OWORD *)(v1309 + 136) = 0u;
    *(_OWORD *)(v1309 + 152) = 0u;
    *(_OWORD *)(v1309 + 168) = 0u;
    *(_OWORD *)(v1309 + 184) = 0u;
    *(_OWORD *)(v1309 + 200) = 0u;
    *(_OWORD *)(v1309 + 216) = 0u;
    *(_OWORD *)(v1309 + 232) = 0u;
    *(_OWORD *)(v1309 + 248) = 0u;
    *(_OWORD *)(v1309 + 264) = 0u;
    *(_OWORD *)(v1309 + 280) = 0u;
    *(_OWORD *)(v1309 + 296) = 0u;
    *(_OWORD *)(v1309 + 312) = 0u;
    *(_OWORD *)(v1309 + 328) = 0u;
    *(_OWORD *)(v1309 + 344) = 0u;
    *(_OWORD *)(v1309 + 360) = 0u;
    *(_OWORD *)(v1309 + 376) = 0u;
    *(_OWORD *)(v1309 + 392) = 0u;
    *(_OWORD *)(v1309 + 408) = 0u;
    *(_OWORD *)(v1309 + 424) = 0u;
    *(_OWORD *)(v1309 + 440) = 0u;
    *(_OWORD *)(v1309 + 456) = 0u;
    *(_OWORD *)(v1309 + 472) = 0u;
    *(_OWORD *)(v1309 + 488) = 0u;
    *(_OWORD *)(v1309 + 504) = 0u;
    *(_OWORD *)(v1309 + 520) = 0u;
    *(_OWORD *)(v1309 + 536) = 0u;
    *(_OWORD *)(v1309 + 40) = xmmword_22F45FB80;
    *((_QWORD *)v1309 + 2) = 0;
    *((_QWORD *)v1309 + 3) = v1309 + 40;
    *(_OWORD *)(v1309 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v1309 + 4) = 0x2000000002;
    v1310 = *(llvm::raw_ostream **)v1778;
    v1825 = v1309 + 24;
    v1826 = (std::__shared_weak_count *)v1309;
    v1755 = sub_22E74761C((uint64_t)v1310, (uint64_t)&v1825);
    v1311 = v1826;
    if (v1826)
    {
      v1312 = (unint64_t *)&v1826->__shared_owners_;
      do
        v1313 = __ldaxr(v1312);
      while (__stlxr(v1313 - 1, v1312));
      if (!v1313)
      {
        ((void (*)(std::__shared_weak_count *))v1311->__on_zero_shared)(v1311);
        std::__shared_weak_count::__release_weak(v1311);
      }
    }
    v1314 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1314 = &unk_24FA715D0;
    *((_QWORD *)v1314 + 1) = 0;
    *(_OWORD *)(v1314 + 88) = 0u;
    *(_OWORD *)(v1314 + 104) = 0u;
    *(_OWORD *)(v1314 + 120) = 0u;
    *(_OWORD *)(v1314 + 136) = 0u;
    *(_OWORD *)(v1314 + 152) = 0u;
    *(_OWORD *)(v1314 + 168) = 0u;
    *(_OWORD *)(v1314 + 184) = 0u;
    *(_OWORD *)(v1314 + 200) = 0u;
    *(_OWORD *)(v1314 + 216) = 0u;
    *(_OWORD *)(v1314 + 232) = 0u;
    *(_OWORD *)(v1314 + 248) = 0u;
    *(_OWORD *)(v1314 + 264) = 0u;
    *(_OWORD *)(v1314 + 280) = 0u;
    *(_OWORD *)(v1314 + 296) = 0u;
    *(_OWORD *)(v1314 + 312) = 0u;
    *(_OWORD *)(v1314 + 328) = 0u;
    *(_OWORD *)(v1314 + 344) = 0u;
    *(_OWORD *)(v1314 + 360) = 0u;
    *(_OWORD *)(v1314 + 376) = 0u;
    *(_OWORD *)(v1314 + 392) = 0u;
    *(_OWORD *)(v1314 + 408) = 0u;
    *(_OWORD *)(v1314 + 424) = 0u;
    *(_OWORD *)(v1314 + 440) = 0u;
    *(_OWORD *)(v1314 + 456) = 0u;
    *(_OWORD *)(v1314 + 472) = 0u;
    *(_OWORD *)(v1314 + 488) = 0u;
    *(_OWORD *)(v1314 + 504) = 0u;
    *(_OWORD *)(v1314 + 520) = 0u;
    *(_OWORD *)(v1314 + 536) = 0u;
    *(_OWORD *)(v1314 + 40) = xmmword_22F45FAD0;
    *((_QWORD *)v1314 + 2) = 0;
    *((_QWORD *)v1314 + 3) = v1314 + 40;
    *(_OWORD *)(v1314 + 56) = xmmword_22F45E160;
    v1315 = *(llvm::raw_ostream **)v1778;
    *(_OWORD *)(v1314 + 72) = xmmword_22F45E0D0;
    *((_QWORD *)v1314 + 4) = 0x2000000003;
    v1823 = v1314 + 24;
    v1824 = (std::__shared_weak_count *)v1314;
    v1316 = sub_22E74761C((uint64_t)v1315, (uint64_t)&v1823);
    v1317 = v1824;
    if (v1824)
    {
      v1318 = (unint64_t *)&v1824->__shared_owners_;
      do
        v1319 = __ldaxr(v1318);
      while (__stlxr(v1319 - 1, v1318));
      if (!v1319)
      {
        ((void (*)(std::__shared_weak_count *))v1317->__on_zero_shared)(v1317);
        std::__shared_weak_count::__release_weak(v1317);
      }
    }
    v1320 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1320 = &unk_24FA715D0;
    *((_QWORD *)v1320 + 1) = 0;
    *(_OWORD *)(v1320 + 72) = 0u;
    *(_OWORD *)(v1320 + 88) = 0u;
    *(_OWORD *)(v1320 + 104) = 0u;
    *(_OWORD *)(v1320 + 120) = 0u;
    *(_OWORD *)(v1320 + 136) = 0u;
    *(_OWORD *)(v1320 + 152) = 0u;
    *(_OWORD *)(v1320 + 168) = 0u;
    *(_OWORD *)(v1320 + 184) = 0u;
    *(_OWORD *)(v1320 + 200) = 0u;
    *(_OWORD *)(v1320 + 216) = 0u;
    *(_OWORD *)(v1320 + 232) = 0u;
    *(_OWORD *)(v1320 + 248) = 0u;
    *(_OWORD *)(v1320 + 264) = 0u;
    *(_OWORD *)(v1320 + 280) = 0u;
    *(_OWORD *)(v1320 + 296) = 0u;
    *(_OWORD *)(v1320 + 312) = 0u;
    *(_OWORD *)(v1320 + 328) = 0u;
    *(_OWORD *)(v1320 + 344) = 0u;
    *(_OWORD *)(v1320 + 360) = 0u;
    *(_OWORD *)(v1320 + 376) = 0u;
    *(_OWORD *)(v1320 + 392) = 0u;
    *(_OWORD *)(v1320 + 408) = 0u;
    *(_OWORD *)(v1320 + 424) = 0u;
    *(_OWORD *)(v1320 + 440) = 0u;
    *(_OWORD *)(v1320 + 456) = 0u;
    *(_OWORD *)(v1320 + 472) = 0u;
    *(_OWORD *)(v1320 + 488) = 0u;
    *(_OWORD *)(v1320 + 504) = 0u;
    *(_OWORD *)(v1320 + 520) = 0u;
    *(_OWORD *)(v1320 + 536) = 0u;
    *(_OWORD *)(v1320 + 40) = xmmword_22F45FC40;
    *((_QWORD *)v1320 + 2) = 0;
    *((_QWORD *)v1320 + 3) = v1320 + 40;
    *(_OWORD *)(v1320 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v1320 + 4) = 0x2000000002;
    v1321 = *(llvm::raw_ostream **)v1778;
    v1821 = v1320 + 24;
    v1822 = (std::__shared_weak_count *)v1320;
    v1322 = sub_22E74761C((uint64_t)v1321, (uint64_t)&v1821);
    v1323 = v1822;
    if (v1822)
    {
      v1324 = (unint64_t *)&v1822->__shared_owners_;
      do
        v1325 = __ldaxr(v1324);
      while (__stlxr(v1325 - 1, v1324));
      if (!v1325)
      {
        ((void (*)(std::__shared_weak_count *))v1323->__on_zero_shared)(v1323);
        std::__shared_weak_count::__release_weak(v1323);
      }
    }
    v1748 = v1322;
    v1753 = v1316;
    v1326 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1326 = &unk_24FA715D0;
    *((_QWORD *)v1326 + 1) = 0;
    *(_OWORD *)(v1326 + 88) = 0u;
    *(_OWORD *)(v1326 + 104) = 0u;
    *(_OWORD *)(v1326 + 120) = 0u;
    *(_OWORD *)(v1326 + 136) = 0u;
    *(_OWORD *)(v1326 + 152) = 0u;
    *(_OWORD *)(v1326 + 168) = 0u;
    *(_OWORD *)(v1326 + 184) = 0u;
    *(_OWORD *)(v1326 + 200) = 0u;
    *(_OWORD *)(v1326 + 216) = 0u;
    *(_OWORD *)(v1326 + 232) = 0u;
    *(_OWORD *)(v1326 + 248) = 0u;
    *(_OWORD *)(v1326 + 264) = 0u;
    *(_OWORD *)(v1326 + 280) = 0u;
    *(_OWORD *)(v1326 + 296) = 0u;
    *(_OWORD *)(v1326 + 312) = 0u;
    *(_OWORD *)(v1326 + 328) = 0u;
    *(_OWORD *)(v1326 + 344) = 0u;
    *(_OWORD *)(v1326 + 360) = 0u;
    *(_OWORD *)(v1326 + 376) = 0u;
    *(_OWORD *)(v1326 + 392) = 0u;
    *(_OWORD *)(v1326 + 408) = 0u;
    *(_OWORD *)(v1326 + 424) = 0u;
    *(_OWORD *)(v1326 + 440) = 0u;
    *(_OWORD *)(v1326 + 456) = 0u;
    *(_OWORD *)(v1326 + 472) = 0u;
    *(_OWORD *)(v1326 + 488) = 0u;
    *(_OWORD *)(v1326 + 504) = 0u;
    *(_OWORD *)(v1326 + 520) = 0u;
    *(_OWORD *)(v1326 + 536) = 0u;
    *(_OWORD *)(v1326 + 40) = xmmword_22F45FC30;
    *((_QWORD *)v1326 + 2) = 0;
    *((_QWORD *)v1326 + 3) = v1326 + 40;
    *(_OWORD *)(v1326 + 56) = xmmword_22F45E250;
    v1327 = *(llvm::raw_ostream **)v1778;
    *(_OWORD *)(v1326 + 72) = xmmword_22F45E0D0;
    *((_QWORD *)v1326 + 4) = 0x2000000003;
    v1819 = v1326 + 24;
    v1820 = (std::__shared_weak_count *)v1326;
    v1328 = sub_22E74761C((uint64_t)v1327, (uint64_t)&v1819);
    v1329 = v1820;
    if (v1820)
    {
      v1330 = (unint64_t *)&v1820->__shared_owners_;
      do
        v1331 = __ldaxr(v1330);
      while (__stlxr(v1331 - 1, v1330));
      if (!v1331)
      {
        ((void (*)(std::__shared_weak_count *))v1329->__on_zero_shared)(v1329);
        std::__shared_weak_count::__release_weak(v1329);
      }
    }
    v1332 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1332 = &unk_24FA715D0;
    *((_QWORD *)v1332 + 1) = 0;
    *(_OWORD *)(v1332 + 72) = 0u;
    *(_OWORD *)(v1332 + 88) = 0u;
    *(_OWORD *)(v1332 + 104) = 0u;
    *(_OWORD *)(v1332 + 120) = 0u;
    *(_OWORD *)(v1332 + 136) = 0u;
    *(_OWORD *)(v1332 + 152) = 0u;
    *(_OWORD *)(v1332 + 168) = 0u;
    *(_OWORD *)(v1332 + 184) = 0u;
    *(_OWORD *)(v1332 + 200) = 0u;
    *(_OWORD *)(v1332 + 216) = 0u;
    *(_OWORD *)(v1332 + 232) = 0u;
    *(_OWORD *)(v1332 + 248) = 0u;
    *(_OWORD *)(v1332 + 264) = 0u;
    *(_OWORD *)(v1332 + 280) = 0u;
    *(_OWORD *)(v1332 + 296) = 0u;
    *(_OWORD *)(v1332 + 312) = 0u;
    *(_OWORD *)(v1332 + 328) = 0u;
    *(_OWORD *)(v1332 + 344) = 0u;
    *(_OWORD *)(v1332 + 360) = 0u;
    *(_OWORD *)(v1332 + 376) = 0u;
    *(_OWORD *)(v1332 + 392) = 0u;
    *(_OWORD *)(v1332 + 408) = 0u;
    *(_OWORD *)(v1332 + 424) = 0u;
    *(_OWORD *)(v1332 + 440) = 0u;
    *(_OWORD *)(v1332 + 456) = 0u;
    *(_OWORD *)(v1332 + 472) = 0u;
    *(_OWORD *)(v1332 + 488) = 0u;
    *(_OWORD *)(v1332 + 504) = 0u;
    *(_OWORD *)(v1332 + 520) = 0u;
    *(_OWORD *)(v1332 + 536) = 0u;
    *(_OWORD *)(v1332 + 40) = xmmword_22F45FC60;
    *((_QWORD *)v1332 + 2) = 0;
    *((_QWORD *)v1332 + 3) = v1332 + 40;
    *(_OWORD *)(v1332 + 56) = xmmword_22F45E0D0;
    *((_QWORD *)v1332 + 4) = 0x2000000002;
    v1333 = *(llvm::raw_ostream **)v1778;
    v1817 = v1332 + 24;
    v1818 = (std::__shared_weak_count *)v1332;
    v1742 = sub_22E74761C((uint64_t)v1333, (uint64_t)&v1817);
    v1334 = v1818;
    if (v1818)
    {
      v1335 = (unint64_t *)&v1818->__shared_owners_;
      do
        v1336 = __ldaxr(v1335);
      while (__stlxr(v1336 - 1, v1335));
      if (!v1336)
      {
        ((void (*)(std::__shared_weak_count *))v1334->__on_zero_shared)(v1334);
        std::__shared_weak_count::__release_weak(v1334);
      }
    }
    v1337 = sub_22E7CA398(v1829);
    v1338 = (*(_DWORD *)(v9 + 552) - 1);
    v1934[0] = v1337;
    v1934[1] = v1338;
    v1339 = *(_QWORD *)(v9 + 16);
    v1340 = *(_DWORD *)(v1339 + 32);
    v1341 = *(_DWORD *)(v1339 + 24);
    v1342 = *(_DWORD *)(v1339 + 28) | (3 << v1341);
    *(_DWORD *)(v1339 + 28) = v1342;
    v1343 = v1341 + v1340;
    if (v1343 >= 0x20)
    {
      sub_22E740FDC((const char ***)v1339, v1342);
      v1496 = *(_DWORD *)(v1339 + 24);
      if (v1496)
        v1342 = 3u >> -(char)v1496;
      else
        v1342 = 0;
      *(_DWORD *)(v1339 + 28) = v1342;
      v1343 = ((_BYTE)v1496 + (_BYTE)v1340) & 0x1F;
    }
    *(_DWORD *)(v1339 + 24) = v1343;
    if (v1343 >= 0x1A)
    {
      sub_22E740FDC((const char ***)v1339, v1342);
      v1342 = 0;
      v1344 = (*(_DWORD *)(v1339 + 24) + 6) & 0x1F;
    }
    else
    {
      v1344 = v1343 + 6;
    }
    v1345 = (2 << v1344) | v1342;
    *(_DWORD *)(v1339 + 24) = v1344;
    *(_DWORD *)(v1339 + 28) = v1345;
    if (v1344 >= 0x1A)
    {
      sub_22E740FDC((const char ***)v1339, v1345);
      v1497 = *(_DWORD *)(v1339 + 24);
      v1498 = 2u >> -(char)v1497;
      if (!v1497)
        v1498 = 0;
      *(_DWORD *)(v1339 + 28) = v1498;
      v1346 = ((_BYTE)v1497 + 6) & 0x1F;
    }
    else
    {
      v1346 = v1344 + 6;
    }
    v1347 = 0;
    *(_DWORD *)(v1339 + 24) = v1346;
    do
      sub_22E742298((llvm::raw_ostream *)v1339, v1934[v1347++], 6);
    while (v1347 != 2);
    memset(v1935, 0, sizeof(v1935));
    sub_22E7EE29C((uint64_t)v1935, &v1829);
    v1348 = v1935[5];
    if (v1935[5])
    {
      v1745 = v1290;
      do
      {
        v1349 = *(_QWORD *)(*(_QWORD *)((char *)v1935[1] + (((unint64_t)v1935[4] >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((uint64_t)v1935[4] & 0x1FF));
        v1935[5] = (llvm *)((char *)v1348 - 1);
        if (++v1935[4] >= (llvm *)0x400)
        {
          operator delete(*(void **)v1935[1]);
          v1935[1] = (llvm *)((char *)v1935[1] + 8);
          v1935[4] = (llvm *)((char *)v1935[4] - 512);
        }
        v1350 = sub_22E7CA298(v9, v1349);
        v1351 = *(char **)(v1349 + 32);
        if (v1351)
          v1351 = (char *)*((unsigned int *)sub_22F2D2BB8(v9 + 1600, (uint64_t *)(v1349 + 32)) + 2);
        __s1[0] = (char *)1;
        __s1[1] = (char *)v1350;
        v1352 = (char *)*(unsigned int *)(v1349 + 28);
        __s1[2] = v1351;
        __s1[3] = v1352;
        v1353 = *(unsigned __int16 *)(v1349 + 1344);
        v1354 = (uint32x2_t)vdup_n_s32(v1353);
        v1355 = vand_s8((int8x8_t)vshl_u32(v1354, (uint32x2_t)0xFFFFFFFBFFFFFFFCLL), (int8x8_t)0x100000001);
        *(_QWORD *)&v1356 = v1355.u32[0];
        *((_QWORD *)&v1356 + 1) = v1355.u32[1];
        v1898 = v1356;
        v1357 = vand_s8((int8x8_t)vshl_u32(v1354, (uint32x2_t)0xFFFFFFF9FFFFFFFALL), (int8x8_t)0x100000001);
        *(_QWORD *)&v1356 = v1357.u32[0];
        *((_QWORD *)&v1356 + 1) = v1357.u32[1];
        v1899 = v1356;
        v1358 = vshl_u32(v1354, (uint32x2_t)0xFFFFFFF6FFFFFFF7);
        *(_QWORD *)&v1356 = v1358.i32[0] & 0xFFFFFF01;
        *((_QWORD *)&v1356 + 1) = v1358.i32[1] & 0xFFFFFF01;
        v1900 = v1356;
        v1359 = vshl_u32(v1354, (uint32x2_t)0xFFFFFFF4FFFFFFF5);
        *(_QWORD *)&v1356 = v1359.i32[0] & 0xFFFFFF01;
        *((_QWORD *)&v1356 + 1) = v1359.i32[1] & 0xFFFFFF01;
        v1901 = v1356;
        __s1[4] = (char *)(v1353 >> 15);
        v1902 = (v1353 >> 14) & 1;
        v1360 = *(_BYTE *)(v1349 + 23);
        v1361 = v1360 < 0;
        if (v1360 >= 0)
          v1362 = (char *)v1349;
        else
          v1362 = *(char **)v1349;
        v1363 = v1360 & 0x7F;
        if (v1361)
          v1364 = *(_QWORD *)(v1349 + 8);
        else
          v1364 = v1363;
        sub_22E74241C(*v1240, v1783, (uint64_t)__s1, 14, v1362, v1364, 0);
        v1365 = *(unsigned int *)(v1349 + 1264);
        if ((_DWORD)v1365)
        {
          v1366 = *(_QWORD *)(v1349 + 1256);
          v1367 = 32 * v1365;
          do
          {
            __s1[0] = (char *)8;
            __s1[1] = (char *)*(unsigned __int8 *)(v1366 + 24);
            v1368 = *(_BYTE *)(v1366 + 23);
            v1369 = v1368 < 0;
            if (v1368 >= 0)
              v1370 = (char *)v1366;
            else
              v1370 = *(char **)v1366;
            v1371 = v1368 & 0x7F;
            if (v1369)
              v1372 = *(_QWORD *)(v1366 + 8);
            else
              v1372 = v1371;
            sub_22E74241C(*v1240, v1290, (uint64_t)__s1, 2, v1370, v1372, 0);
            v1366 += 32;
            v1367 -= 32;
          }
          while (v1367);
        }
        sub_22E72D044((char *)v1349, (uint64_t)__s1);
        if (*((_QWORD *)&v1898 + 1))
        {
          *(_QWORD *)v1911 = 2;
          if (SHIBYTE(__s1[2]) >= 0)
            v1375 = (char *)__s1;
          else
            v1375 = __s1[0];
          if (SHIBYTE(__s1[2]) >= 0)
            v1376 = HIBYTE(__s1[2]) & 0x7F;
          else
            v1376 = (uint64_t)__s1[1];
          sub_22E74241C(*v1240, v1743, (uint64_t)v1911, 1, v1375, v1376, 0);
        }
        else
        {
          sub_22F1D8DAC(v1349, (uint64_t)v1911);
          if (*((_QWORD *)&v1913 + 1))
          {
            v1933 = 5;
            if (v1911[23] >= 0)
              v1373 = v1911;
            else
              v1373 = *(char **)v1911;
            if (v1911[23] >= 0)
              v1374 = v1911[23] & 0x7F;
            else
              v1374 = *(_QWORD *)&v1911[8];
            sub_22E74241C(*v1240, v1740, (uint64_t)&v1933, 1, v1373, v1374, 0);
          }
          if (SBYTE7(v1913) < 0)
            operator delete(*(void **)&v1911[24]);
          if ((v1911[23] & 0x80000000) != 0)
            operator delete(*(void **)v1911);
        }
        if (SBYTE7(v1898) < 0)
          operator delete(__s1[3]);
        if (SHIBYTE(__s1[2]) < 0)
          operator delete(__s1[0]);
        v1377 = 0;
        *(_DWORD *)v1911 = 3;
        *(_DWORD *)&v1911[4] = v1777;
        *(_QWORD *)&v1911[8] = 0xE00000000;
        *(_QWORD *)&v1911[20] = 0xD00000001;
        *(_DWORD *)&v1911[16] = v1762;
        *(_DWORD *)&v1911[28] = v1758;
        v1912 = 0xF00000002;
        *(_QWORD *)((char *)&v1913 + 4) = 0x900000003;
        LODWORD(v1913) = v1755;
        HIDWORD(v1913) = v1770;
        v1914 = 4;
        do
        {
          v1378 = (unsigned int *)&v1911[12 * v1377];
          __s1[0] = (char *)*v1378;
          v1379 = v1349 + ((unint64_t)v1378[2] << 7);
          v1380 = *(unsigned int *)(v1379 + 448);
          if ((_DWORD)v1380)
          {
            v1381 = *(_QWORD *)(v1379 + 440);
            v1382 = *(_DWORD *)&v1911[12 * v1377 + 4];
            v1383 = 56 * v1380;
            do
            {
              v1384 = *(_BYTE *)(v1381 + 23);
              v1385 = v1384 < 0;
              if (v1384 >= 0)
                v1386 = (char *)v1381;
              else
                v1386 = *(char **)v1381;
              v1387 = v1384 & 0x7F;
              if (v1385)
                v1388 = *(_QWORD *)(v1381 + 8);
              else
                v1388 = v1387;
              sub_22E74241C(*(llvm::raw_ostream **)v1778, v1382, (uint64_t)__s1, 1, v1386, v1388, 0);
              v1381 += 56;
              v1383 -= 56;
            }
            while (v1383);
          }
          ++v1377;
        }
        while (v1377 != 5);
        v1389 = sub_22F1D8E98((_QWORD *)v1349, *(_QWORD *)(*(_QWORD *)(v9 + 48) + 80));
        __s1[0] = (char *)4;
        v1240 = (llvm::raw_ostream **)(v9 + 16);
        if (v1390)
        {
          v1391 = v1389;
          v1392 = v1389 + 8 * v1390;
          do
          {
            v1393 = *(_QWORD *)(*(_QWORD *)v1391 + 88);
            do
            {
              v1394 = v1393;
              v1395 = *(_QWORD *)(v1393 + 8);
              if ((v1395 & 2) == 0)
                break;
              v1393 = v1395 & 0xFFFFFFFFFFFFFFFCLL;
            }
            while (v1393);
            sub_22E74241C(*(llvm::raw_ostream **)v1778, v1279, (uint64_t)__s1, 1, (char *)(v1394 + 32), *(_QWORD *)v1394, 0);
            v1391 += 8;
          }
          while (v1391 != v1392);
        }
        v1396 = *(unsigned int *)(v1349 + 1392);
        if ((_DWORD)v1396)
        {
          __s1[0] = (char *)&__s1[2];
          __s1[1] = (char *)0x4000000000;
          v1397 = 8 * v1396;
          v1398 = *(uint64_t **)(v1349 + 1384);
          do
          {
            v1399 = sub_22E7CA298(v9, *v1398);
            v1400 = LODWORD(__s1[1]);
            if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v1400 = LODWORD(__s1[1]);
            }
            *(_QWORD *)&__s1[0][8 * v1400] = v1399;
            ++LODWORD(__s1[1]);
            ++v1398;
            v1397 -= 8;
          }
          while (v1397);
          sub_22E742038(*(llvm::raw_ostream **)v1778, 6u, (uint64_t)__s1, 0);
          if ((char **)__s1[0] != &__s1[2])
            free(__s1[0]);
        }
        v1401 = *(unsigned int *)(v1349 + 1448);
        if ((_DWORD)v1401)
        {
          __s1[0] = (char *)&__s1[2];
          __s1[1] = (char *)0x4000000000;
          v1402 = 8 * v1401;
          v1403 = *(uint64_t **)(v1349 + 1440);
          do
          {
            v1404 = sub_22E7CA298(v9, *v1403);
            v1405 = LODWORD(__s1[1]);
            if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v1405 = LODWORD(__s1[1]);
            }
            *(_QWORD *)&__s1[0][8 * v1405] = v1404;
            ++LODWORD(__s1[1]);
            ++v1403;
            v1402 -= 8;
          }
          while (v1402);
          sub_22E742038(*(llvm::raw_ostream **)v1778, 0x12u, (uint64_t)__s1, 0);
          if ((char **)__s1[0] != &__s1[2])
            free(__s1[0]);
        }
        v1406 = *(unsigned int *)(v1349 + 1480);
        if ((_DWORD)v1406)
        {
          __s1[0] = (char *)&__s1[2];
          __s1[1] = (char *)0x4000000000;
          v1407 = 8 * v1406;
          v1408 = *(unint64_t **)(v1349 + 1472);
          do
          {
            v1409 = sub_22E7CA298(v9, *v1408 & 0xFFFFFFFFFFFFFFF8);
            v1410 = LODWORD(__s1[1]);
            if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v1410 = LODWORD(__s1[1]);
            }
            *(_QWORD *)&__s1[0][8 * v1410] = v1409;
            v1411 = LODWORD(__s1[1]) + 1;
            LODWORD(__s1[1]) = v1411;
            v1412 = *v1408;
            if (v1411 >= HIDWORD(__s1[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v1411 = __s1[1];
            }
            *(_QWORD *)&__s1[0][8 * v1411] = (v1412 >> 2) & 1;
            ++LODWORD(__s1[1]);
            ++v1408;
            v1407 -= 8;
          }
          while (v1407);
          sub_22E742038(*(llvm::raw_ostream **)v1778, 7u, (uint64_t)__s1, 0);
          if ((char **)__s1[0] != &__s1[2])
            free(__s1[0]);
        }
        v1413 = *(unsigned int *)(v1349 + 1984);
        if ((_DWORD)v1413)
        {
          v1414 = *(_QWORD *)(v1349 + 1976);
          v1415 = 32 * v1413;
          do
          {
            __s1[0] = (char *)10;
            __s1[1] = (char *)*(unsigned __int8 *)(v1414 + 24);
            v1416 = *(_BYTE *)(v1414 + 23);
            v1417 = v1416 < 0;
            if (v1416 >= 0)
              v1418 = (char *)v1414;
            else
              v1418 = *(char **)v1414;
            v1419 = v1416 & 0x7F;
            if (v1417)
              v1420 = *(_QWORD *)(v1414 + 8);
            else
              v1420 = v1419;
            sub_22E74241C(*(llvm::raw_ostream **)v1778, v1753, (uint64_t)__s1, 2, v1418, v1420, 0);
            v1414 += 32;
            v1415 -= 32;
          }
          while (v1415);
        }
        v1421 = *(uint64_t **)(v1349 + 2112);
        v1422 = *(uint64_t **)(v1349 + 2120);
        while (v1421 != v1422)
        {
          __s1[0] = (char *)12;
          __s1[1] = (char *)sub_22E7CA298(v9, *v1421);
          v1425 = v1421[1];
          v1424 = v1421 + 1;
          v1423 = (char *)v1425;
          v1426 = *((_BYTE *)v1424 + 23);
          v1427 = v1426;
          if (v1426 >= 0)
            v1428 = (char *)v1424;
          else
            v1428 = v1423;
          v1429 = v1426 & 0x7F;
          if (v1427 >= 0)
            v1430 = v1429;
          else
            v1430 = v1424[1];
          sub_22E74241C(*(llvm::raw_ostream **)(v9 + 16), v1328, (uint64_t)__s1, 2, v1428, v1430, 0);
          v1421 = v1424 + 3;
        }
        v1431 = *(_QWORD *)(v1349 + 2064);
        for (i3 = *(_QWORD *)(v1349 + 2072); v1431 != i3; v1431 += 24)
        {
          __s1[0] = (char *)11;
          v1433 = *(_BYTE *)(v1431 + 23);
          v1434 = v1433 < 0;
          if (v1433 >= 0)
            v1435 = (char *)v1431;
          else
            v1435 = *(char **)v1431;
          v1436 = v1433 & 0x7F;
          if (v1434)
            v1437 = *(_QWORD *)(v1431 + 8);
          else
            v1437 = v1436;
          sub_22E74241C(*(llvm::raw_ostream **)v1778, v1748, (uint64_t)__s1, 1, v1435, v1437, 0);
        }
        __s1[0] = (char *)&__s1[2];
        __s1[1] = (char *)0x4000000000;
        v1438 = sub_22F367FCC(*(_QWORD *)(v9 + 40), v1349);
        if (v1439)
        {
          v1442 = (unint64_t *)v1438;
          v1443 = 8 * v1439;
          do
          {
            v1444 = sub_22E7CA3E8(v9, *v1442);
            v1445 = LODWORD(__s1[1]);
            if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v1445 = LODWORD(__s1[1]);
            }
            *(_QWORD *)&__s1[0][8 * v1445] = v1444;
            v1440 = ++LODWORD(__s1[1]);
            ++v1442;
            v1443 -= 8;
          }
          while (v1443);
        }
        else
        {
          v1440 = (int)__s1[1];
        }
        v1290 = v1745;
        if (v1440)
          sub_22E742038(*(llvm::raw_ostream **)v1778, 0x10u, (uint64_t)__s1, 0);
        v1441 = *(unsigned __int8 *)(v1349 + 175);
        if (*(char *)(v1349 + 175) < 0)
        {
          if (*(_QWORD *)(v1349 + 160))
            goto LABEL_2054;
        }
        else if (*(_BYTE *)(v1349 + 175))
        {
LABEL_2054:
          v1933 = 17;
          if ((v1441 & 0x80u) == 0)
            v1446 = (char *)(v1349 + 152);
          else
            v1446 = *(char **)(v1349 + 152);
          if ((v1441 & 0x80u) == 0)
            v1447 = v1441;
          else
            v1447 = *(_QWORD *)(v1349 + 160);
          sub_22E74241C(*(llvm::raw_ostream **)v1778, v1742, (uint64_t)&v1933, 1, v1446, v1447, 0);
        }
        v1448 = *(uint64_t **)(v1349 + 200);
        v1449 = *(uint64_t **)(v1349 + 208);
        while (v1448 != v1449)
        {
          v1450 = *v1448++;
          v1933 = v1450;
          sub_22E7EE29C((uint64_t)v1935, &v1933);
        }
        if ((char **)__s1[0] != &__s1[2])
          free(__s1[0]);
        v1348 = v1935[5];
      }
      while (v1935[5]);
    }
    sub_22E7416F4((uint64_t)*v1240);
    v1451 = (void **)v1935[1];
    v1452 = v1935[2];
    v1935[5] = 0;
    v1453 = v1935[2] - v1935[1];
    if ((llvm *)(v1935[2] - v1935[1]) >= (llvm *)0x11)
    {
      do
      {
        operator delete(*v1451);
        v1452 = v1935[2];
        v1451 = (void **)((char *)v1935[1] + 8);
        v1935[1] = (llvm *)v1451;
        v1453 = v1935[2] - (llvm *)v1451;
      }
      while ((llvm *)(v1935[2] - (llvm *)v1451) > (llvm *)0x10);
    }
    v1454 = v1453 >> 3;
    if (v1454 == 1)
    {
      v1455 = 256;
    }
    else
    {
      if (v1454 != 2)
        goto LABEL_2074;
      v1455 = 512;
    }
    v1935[4] = (llvm *)v1455;
LABEL_2074:
    if (v1451 != (void **)v1452)
    {
      do
      {
        v1456 = *v1451++;
        operator delete(v1456);
      }
      while (v1451 != (void **)v1452);
      if (v1935[2] != v1935[1])
        v1935[2] = (llvm *)((char *)v1935[2] + ((v1935[1] - v1935[2] + 7) & 0xFFFFFFFFFFFFFFF8));
    }
    if (v1935[0])
      operator delete(v1935[0]);
  }
  sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 7u, (uint64_t)v1836, 0);
  if (*(_DWORD *)(v9 + 768))
    sub_22F2D08E8(*(int **)(v9 + 16), 6u, v9 + 760);
  if (*(_DWORD *)(v9 + 848))
    sub_22F2D08E8(*(int **)(v9 + 16), 0x3Cu, v9 + 840);
  if ((_DWORD)v1884)
    sub_22E742038(*v1240, 9u, (uint64_t)&v1883, 0);
  if ((_DWORD)v1881)
    sub_22E742038(*v1240, 0x11u, (uint64_t)&v1880, 0);
  if ((_DWORD)v1875)
    sub_22E742038(*v1240, 0x19u, (uint64_t)&v1874, 0);
  if ((_DWORD)v1872)
    sub_22E742038(*v1240, 0x10u, (uint64_t)&v1871, 0);
  if ((_DWORD)v1869)
    sub_22E742038(*v1240, 0x13u, (uint64_t)&v1868, 0);
  if ((_DWORD)v1866)
    sub_22E742038(*v1240, 0x34u, (uint64_t)&v1865, 0);
  if ((_DWORD)v1863)
    sub_22E742038(*v1240, 0x1Au, (uint64_t)&v1862, 0);
  if ((_DWORD)v1860)
    sub_22E742038(*v1240, 0x18u, (uint64_t)&v1859, 0);
  v1457 = v1834;
  if ((_DWORD)v1834)
  {
    v1458 = *v1240;
    v1459 = *((_DWORD *)*v1240 + 8);
    v1460 = *((_DWORD *)*v1240 + 6);
    v1461 = *((_DWORD *)*v1240 + 7) | (3 << v1460);
    *((_DWORD *)*v1240 + 7) = v1461;
    v1462 = v1460 + v1459;
    if (v1462 >= 0x20)
    {
      sub_22E740FDC((const char ***)v1458, v1461);
      v1499 = *((_DWORD *)v1458 + 6);
      if (v1499)
        v1461 = 3u >> -(char)v1499;
      else
        v1461 = 0;
      v1462 = ((_BYTE)v1499 + (_BYTE)v1459) & 0x1F;
    }
    v1463 = (32 << v1462) | v1461;
    *((_DWORD *)v1458 + 6) = v1462;
    *((_DWORD *)v1458 + 7) = v1463;
    if (v1462 >= 0x1A)
    {
      sub_22E740FDC((const char ***)v1458, v1463);
      v1500 = *((_DWORD *)v1458 + 6);
      if (v1500)
        v1463 = 0x20u >> -(char)v1500;
      else
        v1463 = 0;
      v1464 = ((_BYTE)v1500 + 6) & 0x1F;
    }
    else
    {
      v1464 = v1462 + 6;
    }
    v1465 = (2 << v1464) | v1463;
    *((_DWORD *)v1458 + 6) = v1464;
    *((_DWORD *)v1458 + 7) = v1465;
    if (v1464 >= 0x1A)
    {
      sub_22E740FDC((const char ***)v1458, v1465);
      v1501 = *((_DWORD *)v1458 + 6);
      if (v1501)
        v1465 = 2u >> -(char)v1501;
      else
        v1465 = 0;
      v1466 = ((_BYTE)v1501 + 6) & 0x1F;
    }
    else
    {
      v1466 = v1464 + 6;
    }
    *((_DWORD *)v1458 + 6) = v1466;
    if (v1457 >= 0x20)
    {
      v1732 = v1457;
      do
      {
        v1733 = v1732 & 0x1F | 0x20;
        v1465 |= v1733 << v1466;
        *((_DWORD *)v1458 + 7) = v1465;
        if (v1466 >= 0x1A)
        {
          sub_22E740FDC((const char ***)v1458, v1465);
          v1734 = *((_DWORD *)v1458 + 6);
          if (v1734)
            v1465 = v1733 >> -(char)v1734;
          else
            v1465 = 0;
          *((_DWORD *)v1458 + 7) = v1465;
          v1466 = ((_BYTE)v1734 + 6) & 0x1F;
        }
        else
        {
          v1466 += 6;
        }
        *((_DWORD *)v1458 + 6) = v1466;
        v1467 = v1732 >> 5;
        v1071 = v1732 > 0x3FF;
        v1732 >>= 5;
      }
      while (v1071);
    }
    else
    {
      v1467 = v1457;
    }
    v1468 = (v1467 << v1466) | v1465;
    *((_DWORD *)v1458 + 7) = v1468;
    if (v1466 >= 0x1A)
    {
      sub_22E740FDC((const char ***)v1458, v1468);
      v1502 = *((_DWORD *)v1458 + 6);
      v1503 = v1467 >> -(char)v1502;
      if (!v1502)
        v1503 = 0;
      *((_DWORD *)v1458 + 7) = v1503;
      v1469 = ((_BYTE)v1502 + 6) & 0x1F;
    }
    else
    {
      v1469 = v1466 + 6;
    }
    v1470 = 0;
    *((_DWORD *)v1458 + 6) = v1469;
    do
      sub_22E742298(v1458, *((unsigned int *)v1833 + v1470++), 6);
    while (v1457 != v1470);
  }
  if ((_DWORD)v1857)
    sub_22E742038(*v1240, 0x21u, (uint64_t)&v1856, 0);
  if ((_DWORD)v1878)
    sub_22E742038(*v1240, 0x25u, (uint64_t)&v1877, 0);
  if ((_DWORD)v1854)
    sub_22E742038(*v1240, 0x26u, (uint64_t)&v1853, 0);
  if ((_DWORD)v1851)
    sub_22E742038(*v1240, 0x31u, (uint64_t)&v1850, 0);
  if ((_DWORD)v1845)
    sub_22E742038(*v1240, 0x36u, (uint64_t)&v1844, 0);
  v1471 = *(unsigned int *)(v9 + 1064);
  if ((_DWORD)v1471)
  {
    v1472 = *(_QWORD *)(v9 + 1056);
    v1473 = 8 * v1471;
    do
    {
      v1472 += 8;
      sub_22F2CFA98();
      v1473 -= 8;
    }
    while (v1473);
  }
  if (v1773)
  {
    sub_22E7CC034(v9);
    v1474 = v1746;
  }
  else
  {
    __s1[0] = (char *)&__s1[2];
    __s1[1] = (char *)0x4000000000;
    v1475 = *(_QWORD *)(v1771 + 1944);
    if (v1475)
    {
      do
      {
        *(_QWORD *)v1911 = *(_QWORD *)(v1475 + 40);
        v1476 = *((unsigned int *)sub_22F2D3484(v9 + 1600, (uint64_t *)v1911) + 2);
        v1477 = *(_QWORD *)(v1475 + 40);
        v1478 = LODWORD(__s1[1]);
        if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v1478 = LODWORD(__s1[1]);
        }
        v1479 = &__s1[0][16 * v1478];
        *(_QWORD *)v1479 = v1476;
        *((_QWORD *)v1479 + 1) = v1477;
        v1480 = ++LODWORD(__s1[1]);
        v1475 = *(_QWORD *)(v1475 + 48) & 0xFFFFFFFFFFFFFFF8;
      }
      while (v1475);
      v1481 = __s1[0];
      if ((_DWORD)v1480)
      {
        sub_22E7F0A60((uint64_t)__s1[0], (unint64_t *)&__s1[0][16 * v1480], 126 - 2 * __clz(v1480), 1);
        v1490 = __s1[0];
        v1491 = &__s1[0][16 * LODWORD(__s1[1])];
        v1492 = __s1[0];
        v1240 = (llvm::raw_ostream **)(v9 + 16);
        if (LODWORD(__s1[1]))
        {
          v1492 = __s1[0] - 16;
          v1493 = 16 * LODWORD(__s1[1]) - 16;
          while (v1493)
          {
            v1494 = *((_QWORD *)v1492 + 2);
            v1492 += 16;
            v1493 -= 16;
            if (v1494 == *((_QWORD *)v1492 + 2))
              goto LABEL_2146;
          }
        }
        else
        {
LABEL_2146:
          if (v1492 != v1491)
          {
            for (i4 = v1492 + 32; i4 != v1491; i4 += 16)
            {
              if (*(_QWORD *)v1492 != *(_QWORD *)i4)
              {
                *((_OWORD *)v1492 + 1) = *(_OWORD *)i4;
                v1492 += 16;
              }
            }
            v1491 = v1492 + 16;
          }
        }
        v1504 = v1491 - v1490;
        v1505 = (unint64_t)(v1491 - v1490) >> 4;
        LODWORD(__s1[1]) = v1505;
        *(_QWORD *)v1911 = &v1911[16];
        *(_QWORD *)&v1911[8] = 0x4000000000;
        if ((v1504 >> 4))
        {
          v1725 = &v1490[16 * v1505];
          do
          {
            v1726 = *(_QWORD *)v1490;
            v1727 = *(unsigned int *)&v1911[8];
            if (*(unsigned int *)&v1911[8] >= (unint64_t)*(unsigned int *)&v1911[12])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v1727 = *(unsigned int *)&v1911[8];
            }
            *(_QWORD *)(*(_QWORD *)v1911 + 8 * v1727) = v1726;
            ++*(_DWORD *)&v1911[8];
            v1728 = *(unsigned int *)(*((_QWORD *)v1490 + 1) + 432);
            v1729 = *(_QWORD *)(*(_QWORD *)(v1772 + 1584) + 24);
            if (v1728 >= (*(_QWORD *)(*(_QWORD *)(v1772 + 1584) + 32) - v1729) >> 2)
              v1730 = 0;
            else
              v1730 = *(_DWORD *)(v1729 + 4 * v1728);
            v1240 = (llvm::raw_ostream **)(v9 + 16);
            sub_22E7C9A94(v9, v1730, (uint64_t)v1911);
            v1490 += 16;
          }
          while (v1490 != v1725);
        }
        sub_22E742038(*v1240, 0x2Bu, (uint64_t)v1911, 0);
        if (*(_BYTE **)v1911 != &v1911[16])
          free(*(void **)v1911);
        v1481 = __s1[0];
      }
      else
      {
        v1240 = (llvm::raw_ostream **)(v9 + 16);
      }
      if (v1481 != (char *)&__s1[2])
        free(v1481);
    }
    sub_22E7CC034(v9);
    v1474 = v1746;
    sub_22F2CFFDC(v9, *(_DWORD *)(v1746 + 1688));
    sub_22F2D007C(*(llvm::raw_ostream **)(v9 + 16), *(_BYTE *)(v1746 + 240));
    sub_22F2D0108(v9, *(_DWORD *)(v1474 + 244), *(_DWORD *)(v1474 + 280));
  }
  sub_22F2D01B0(v9, v1474);
  sub_22F2D03AC(v9, v1474);
  v1506 = *(_QWORD *)(v9 + 1584);
  *(_QWORD *)&v1507 = v1506;
  *((_QWORD *)&v1507 + 1) = HIDWORD(v1506);
  v1508 = v1507;
  v1509 = *(_QWORD *)(v9 + 1592);
  *(_QWORD *)&v1507 = v1509;
  *((_QWORD *)&v1507 + 1) = HIDWORD(v1509);
  v1886 = v1508;
  v1887[0] = v1507;
  sub_22F2D09C0(*(int **)(v9 + 16), (uint64_t)&v1886);
  sub_22E7416F4(*(_QWORD *)(v9 + 16));
  v1510 = *(llvm::raw_ostream **)(v9 + 16);
  if (*((_DWORD *)v1510 + 6))
  {
    sub_22E740FDC(*(const char ****)(v9 + 16), *((_DWORD *)v1510 + 7));
    *((_QWORD *)v1510 + 3) = 0;
    v1510 = *v1240;
  }
  v1511 = (_QWORD *)*((_QWORD *)v1510 + 1);
  v1512 = *(_QWORD *)(*(_QWORD *)v1510 + 8);
  if (v1511)
    v1513 = (*(uint64_t (**)(_QWORD))(*v1511 + 80))(*((_QWORD *)v1510 + 1)) + v1511[4] - v1511[2];
  else
    v1513 = 0;
  *(_QWORD *)(v9 + 88) = *((unsigned int *)v1510 + 6) + 8 * (v1513 + v1512);
  v1514 = *(_QWORD ****)(v9 + 1624);
  for (i5 = *(_QWORD ****)(v9 + 1632); v1514 != i5; ++v1514)
  {
    v1516 = *v1514;
    sub_22E74181C((uint64_t)*v1240, 0x12u, 4u);
    v1517 = (char *)operator new(0x228uLL);
    *(_QWORD *)v1517 = &unk_24FA715D0;
    *((_QWORD *)v1517 + 1) = 0;
    *(_OWORD *)(v1517 + 136) = 0u;
    *(_OWORD *)(v1517 + 152) = 0u;
    *(_OWORD *)(v1517 + 168) = 0u;
    *(_OWORD *)(v1517 + 184) = 0u;
    *(_OWORD *)(v1517 + 200) = 0u;
    *(_OWORD *)(v1517 + 216) = 0u;
    *(_OWORD *)(v1517 + 232) = 0u;
    *(_OWORD *)(v1517 + 248) = 0u;
    *(_OWORD *)(v1517 + 264) = 0u;
    *(_OWORD *)(v1517 + 280) = 0u;
    *(_OWORD *)(v1517 + 296) = 0u;
    *(_OWORD *)(v1517 + 312) = 0u;
    *(_OWORD *)(v1517 + 328) = 0u;
    *(_OWORD *)(v1517 + 344) = 0u;
    *(_OWORD *)(v1517 + 360) = 0u;
    *(_OWORD *)(v1517 + 376) = 0u;
    *(_OWORD *)(v1517 + 392) = 0u;
    *(_OWORD *)(v1517 + 408) = 0u;
    *(_OWORD *)(v1517 + 424) = 0u;
    *(_OWORD *)(v1517 + 440) = 0u;
    *(_OWORD *)(v1517 + 456) = 0u;
    *(_OWORD *)(v1517 + 472) = 0u;
    *(_OWORD *)(v1517 + 488) = 0u;
    *(_OWORD *)(v1517 + 504) = 0u;
    *(_OWORD *)(v1517 + 40) = xmmword_22F45E070;
    *(_OWORD *)(v1517 + 520) = 0u;
    *(_OWORD *)(v1517 + 536) = 0u;
    *((_QWORD *)v1517 + 2) = 0;
    *((_QWORD *)v1517 + 3) = v1517 + 40;
    *(_OWORD *)(v1517 + 56) = xmmword_22F45E250;
    *(_OWORD *)(v1517 + 72) = xmmword_22F45E250;
    *(_OWORD *)(v1517 + 88) = xmmword_22F45E250;
    *(_OWORD *)(v1517 + 104) = xmmword_22F45E250;
    v1518 = *v1240;
    *(_OWORD *)(v1517 + 120) = xmmword_22F45E0D0;
    *((_QWORD *)v1517 + 4) = 0x2000000006;
    __p[0] = v1517 + 24;
    __p[1] = v1517;
    v1519 = sub_22E74761C((uint64_t)v1518, (uint64_t)__p);
    v1520 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v1521 = (unint64_t *)((char *)__p[1] + 8);
      do
        v1522 = __ldaxr(v1521);
      while (__stlxr(v1522 - 1, v1521));
      if (!v1522)
      {
        ((void (*)(std::__shared_weak_count *))v1520->__on_zero_shared)(v1520);
        std::__shared_weak_count::__release_weak(v1520);
      }
    }
    __s1[0] = (char *)&__s1[2];
    __s1[1] = (char *)0x4000000000;
    (*(void (**)(llvm **__return_ptr))(*v1516[1] + 40))(v1935);
    v1523 = LODWORD(__s1[1]);
    if (LODWORD(__s1[1]) >= (unint64_t)HIDWORD(__s1[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v1523 = LODWORD(__s1[1]);
    }
    *(_QWORD *)&__s1[0][8 * v1523] = 1;
    v1524 = LODWORD(__s1[1]) + 1;
    LODWORD(__s1[1]) = v1524;
    v1525 = LODWORD(v1935[3]);
    if (v1524 >= HIDWORD(__s1[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v1524 = __s1[1];
    }
    *(_QWORD *)&__s1[0][8 * v1524] = v1525;
    v1526 = LODWORD(__s1[1]) + 1;
    LODWORD(__s1[1]) = v1526;
    v1527 = HIDWORD(v1935[3]);
    if (v1526 >= HIDWORD(__s1[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v1526 = __s1[1];
    }
    *(_QWORD *)&__s1[0][8 * v1526] = v1527;
    v1528 = ++LODWORD(__s1[1]);
    if (SHIBYTE(v1935[2]) >= 0)
      v1529 = (llvm *)(HIBYTE(v1935[2]) & 0x7F);
    else
      v1529 = v1935[1];
    if (v1528 >= HIDWORD(__s1[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v1528 = __s1[1];
    }
    *(_QWORD *)&__s1[0][8 * v1528] = v1529;
    v1530 = ++LODWORD(__s1[1]);
    if (v1936 >= 0)
      v1531 = (llvm *)(v1936 & 0x7F);
    else
      v1531 = v1935[5];
    if (v1530 >= HIDWORD(__s1[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v1530 = __s1[1];
    }
    *(_QWORD *)&__s1[0][8 * v1530] = v1531;
    ++LODWORD(__s1[1]);
    *(_QWORD *)v1911 = &v1911[24];
    *(_OWORD *)&v1911[8] = xmmword_22F44E300;
    if (SHIBYTE(v1935[2]) >= 0)
      v1532 = v1935;
    else
      v1532 = (llvm **)v1935[0];
    if (SHIBYTE(v1935[2]) >= 0)
      v1533 = HIBYTE(v1935[2]) & 0x7F;
    else
      v1533 = (size_t)v1935[1];
    if (v1533 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v1534 = *(_QWORD *)&v1911[8];
      v1535 = *(_BYTE **)v1911;
    }
    else
    {
      v1534 = 0;
      if (!v1533)
      {
        v1536 = 64;
        goto LABEL_2220;
      }
      v1535 = &v1911[24];
    }
    memcpy(&v1535[v1534], v1532, v1533);
    v1534 = *(_QWORD *)&v1911[8];
    v1536 = *(_QWORD *)&v1911[16];
LABEL_2220:
    v1537 = v1534 + v1533;
    *(_QWORD *)&v1911[8] = v1537;
    if (v1936 >= 0)
      v1538 = &v1935[4];
    else
      v1538 = (llvm **)v1935[4];
    if (v1936 >= 0)
      v1539 = v1936 & 0x7F;
    else
      v1539 = (size_t)v1935[5];
    if (v1536 < v1539 + v1537)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v1537 = *(_QWORD *)&v1911[8];
    }
    v1540 = *(char **)v1911;
    if (v1539)
    {
      memcpy((void *)(*(_QWORD *)v1911 + v1537), v1538, v1539);
      v1537 = *(_QWORD *)&v1911[8];
      v1540 = *(char **)v1911;
    }
    *(_QWORD *)&v1911[8] = v1537 + v1539;
    v1541 = v1519;
    v1240 = (llvm::raw_ostream **)(v9 + 16);
    sub_22E74241C(*(llvm::raw_ostream **)v1778, v1541, (uint64_t)__s1[0], LODWORD(__s1[1]), v1540, v1537 + v1539, 0);
    ((void (*)(_QWORD **, uint64_t, _QWORD))(*v1516)[2])(v1516, v1746, *(_QWORD *)v1778);
    sub_22E7416F4(*(_QWORD *)v1778);
    if (*(_BYTE **)v1911 != &v1911[24])
      free(*(void **)v1911);
    if (v1936 < 0)
      operator delete(v1935[4]);
    if (SHIBYTE(v1935[2]) < 0)
      operator delete(v1935[0]);
    if ((char **)__s1[0] != &__s1[2])
      free(__s1[0]);
  }
  v1542 = *v1240;
  if (*((_DWORD *)*v1240 + 6))
  {
    sub_22E740FDC((const char ***)*v1240, *((_DWORD *)v1542 + 7));
    *((_QWORD *)v1542 + 3) = 0;
    v1542 = *v1240;
  }
  v1543 = (_QWORD *)*((_QWORD *)v1542 + 1);
  v1544 = *(_QWORD *)(*(_QWORD *)v1542 + 8);
  if (v1543)
  {
    v1543 = (_QWORD *)((*(uint64_t (**)(_QWORD))(*v1543 + 80))(*((_QWORD *)v1542 + 1)) + v1543[4] - v1543[2]);
    v1545 = *v1240;
  }
  else
  {
    v1545 = v1542;
  }
  v1546 = *((unsigned int *)v1542 + 6);
  v1935[0] = (llvm *)&v1935[2];
  v1935[1] = (llvm *)0x4000000000;
  v1547 = (uint64_t)sub_22E74181C((uint64_t)v1545, 0x13u, 5u);
  *(_QWORD *)v1738 = 0;
  *(_QWORD *)(v1738 + 8) = 0;
  *(_DWORD *)(v1738 + 16) = 0;
  if (*(_QWORD *)(v9 + 64) && (*(_WORD *)(**(_QWORD **)(v1772 + 104) + 848) & 0x800) != 0)
  {
    memset(v1911, 0, 20);
    sub_22F2CF398((uint64_t)__s1, **(_QWORD **)(v9 + 24), ((unint64_t)v1543 + v1544 + (v1546 >> 3)) & 0x1FFFFFFFFFFFFFFFLL, **(_QWORD **)(v9 + 24) + (*(_QWORD *)(v9 + 80) >> 3), (*(_QWORD *)(v9 + 88) >> 3) - (*(_QWORD *)(v9 + 80) >> 3));
    *(_OWORD *)v1911 = *(_OWORD *)__s1;
    v1731 = HIDWORD(__s1[4]);
    *(_DWORD *)&v1911[16] = __s1[2];
    *(_OWORD *)v1738 = *(_OWORD *)((char *)&__s1[2] + 4);
    *(_DWORD *)(v1738 + 16) = v1731;
    sub_22E7BE524((uint64_t)v1935, v1911, &v1911[20]);
    sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 2u, (uint64_t)v1935, 0);
    LODWORD(v1935[1]) = 0;
    sub_22E7BE524((uint64_t)v1935, (unsigned __int8 *)v1738, (unsigned __int8 *)(v1738 + 20));
    v1547 = (uint64_t)sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 1u, (uint64_t)v1935, 0);
    LODWORD(v1935[1]) = 0;
  }
  v1548 = *(_QWORD **)(*(_QWORD *)(v1771 + 1992) + 8);
  v1549 = v1548[5];
  v1550 = *(_DWORD *)(v1549 + 4) & 1;
  v1551 = v1935[1];
  if (LODWORD(v1935[1]) >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1551 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1551) = v1550;
  v1552 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1552;
  v1553 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 1) & 1;
  if (v1552 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1552 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1552) = v1553;
  v1554 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1554;
  v1555 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 2) & 1;
  if (v1554 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1554 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1554) = v1555;
  v1556 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1556;
  v1557 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 3) & 1;
  if (v1556 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1556 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1556) = v1557;
  v1558 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1558;
  v1559 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 4) & 1;
  if (v1558 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1558 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1558) = v1559;
  v1560 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1560;
  v1561 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 5) & 1;
  if (v1560 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1560 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1560) = v1561;
  v1562 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1562;
  v1563 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 6) & 1;
  if (v1562 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1562 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1562) = v1563;
  v1564 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1564;
  v1565 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 7) & 1;
  if (v1564 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1564 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1564) = v1565;
  v1566 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1566;
  v1567 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 8) & 1;
  if (v1566 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1566 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1566) = v1567;
  v1568 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1568;
  v1569 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 9) & 1;
  if (v1568 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1568 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1568) = v1569;
  v1570 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1570;
  v1571 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 10) & 1;
  if (v1570 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1570 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1570) = v1571;
  v1572 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1572;
  v1573 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 11) & 1;
  if (v1572 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1572 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1572) = v1573;
  v1574 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1574;
  v1575 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 12) & 1;
  if (v1574 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1574 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1574) = v1575;
  v1576 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1576;
  v1577 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 13) & 1;
  if (v1576 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1576 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1576) = v1577;
  v1578 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1578;
  v1579 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 14) & 1;
  if (v1578 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1578 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1578) = v1579;
  v1580 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1580;
  v1581 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 15) & 1;
  if (v1580 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1580 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1580) = v1581;
  v1582 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1582;
  v1583 = *(_WORD *)(v1549 + 6) & 3;
  if (v1582 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1582 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1582) = v1583;
  v1584 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1584;
  v1585 = *(_BYTE *)(v1549 + 40) & 3;
  if (v1584 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1584 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1584) = v1585;
  v1586 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1586;
  v1587 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 18) & 1;
  if (v1586 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1586 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1586) = v1587;
  v1588 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1588;
  v1589 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 19) & 1;
  if (v1588 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1588 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1588) = v1589;
  v1590 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1590;
  v1591 = ((unint64_t)*(unsigned __int8 *)(v1549 + 40) >> 2) & 1;
  if (v1590 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1590 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1590) = v1591;
  v1592 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1592;
  v1593 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 20) & 1;
  if (v1592 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1592 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1592) = v1593;
  v1594 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1594;
  v1595 = ((unint64_t)*(unsigned __int8 *)(v1549 + 40) >> 3) & 0xF;
  if (v1594 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1594 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1594) = v1595;
  v1596 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1596;
  v1597 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 21) & 1;
  if (v1596 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1596 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1596) = v1597;
  v1598 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1598;
  v1599 = ((unint64_t)*(unsigned int *)(v1549 + 4) >> 22) & 1;
  if (v1598 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1598 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1598) = v1599;
  v1600 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1600;
  v1601 = *(unsigned int *)(v1549 + 8);
  if (v1600 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1600 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1600) = v1601;
  v1602 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1602;
  v1603 = *(unsigned int *)(v1549 + 12);
  if (v1602 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1602 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1602) = v1603;
  v1604 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1604;
  v1605 = *(unsigned int *)(v1549 + 16);
  if (v1604 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1604 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1604) = v1605;
  v1606 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1606;
  v1607 = *(unsigned int *)(v1549 + 20);
  if (v1606 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1606 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1606) = v1607;
  v1608 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1608;
  v1609 = *(unsigned int *)(v1549 + 24);
  if (v1608 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1608 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1608) = v1609;
  v1610 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1610;
  v1611 = *(unsigned int *)(v1549 + 28);
  if (v1610 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1610 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1610) = v1611;
  v1612 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1612;
  v1613 = *(unsigned int *)(v1549 + 32);
  if (v1612 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1612 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1612) = v1613;
  v1614 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1614;
  v1615 = HIDWORD(*(_QWORD *)(v1549 + 32));
  if (v1614 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1614 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1614) = v1615;
  v1616 = LODWORD(v1935[1]) + 1;
  LODWORD(v1935[1]) = v1616;
  v1617 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1549 + 104) - *(_QWORD *)(v1549 + 96)) >> 3);
  if (v1616 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1616 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1616) = v1617;
  v1618 = ++LODWORD(v1935[1]);
  v1619 = -1431655765 * ((*(_QWORD *)(v1549 + 104) - *(_QWORD *)(v1549 + 96)) >> 3);
  if ((_DWORD)v1619)
  {
    v1620 = 0;
    v1621 = 24 * v1619;
    do
    {
      v1622 = *(_QWORD *)(v1549 + 96) + v1620;
      v1623 = *(_BYTE *)(v1622 + 23);
      if (v1623 >= 0)
        v1624 = (char *)(*(_QWORD *)(v1549 + 96) + v1620);
      else
        v1624 = *(char **)v1622;
      if (v1623 >= 0)
        v1625 = v1623 & 0x7F;
      else
        v1625 = *(_QWORD *)(v1622 + 8);
      v1547 = sub_22E7BE5A4(v1547, v1624, v1625, (uint64_t)v1935);
      v1620 += 24;
    }
    while (v1621 != v1620);
    v1618 = v1935[1];
  }
  v1626 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1549 + 152) - *(_QWORD *)(v1549 + 144)) >> 3);
  if (v1618 >= HIDWORD(v1935[1]))
  {
    v1547 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1618 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1618) = v1626;
  ++LODWORD(v1935[1]);
  v1627 = -1431655765 * ((*(_QWORD *)(v1549 + 152) - *(_QWORD *)(v1549 + 144)) >> 3);
  if ((_DWORD)v1627)
  {
    v1628 = 0;
    v1629 = 24 * v1627;
    do
    {
      v1630 = *(_QWORD *)(v1549 + 144) + v1628;
      v1631 = *(_BYTE *)(v1630 + 23);
      if (v1631 >= 0)
        v1632 = (char *)(*(_QWORD *)(v1549 + 144) + v1628);
      else
        v1632 = *(char **)v1630;
      if (v1631 >= 0)
        v1633 = v1631 & 0x7F;
      else
        v1633 = *(_QWORD *)(v1630 + 8);
      v1547 = sub_22E7BE5A4(v1547, v1632, v1633, (uint64_t)v1935);
      v1628 += 24;
    }
    while (v1629 != v1628);
  }
  v1634 = (uint64_t)sub_22E742038(*v1240, 3u, (uint64_t)v1935, 0);
  v1635 = 0;
  LODWORD(v1935[1]) = 0;
  v1636 = **(_QWORD ***)(v1772 + 104);
  v1637 = (uint64_t)(v1636[4] - v1636[3]) >> 5;
  if (!HIDWORD(v1935[1]))
  {
    v1634 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1635 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1635) = v1637;
  v1638 = ++LODWORD(v1935[1]);
  v1639 = v1636[4] - v1636[3];
  if ((v1639 & 0x1FFFFFFFE0) != 0)
  {
    v1640 = 0;
    v1641 = (v1639 >> 5);
    do
    {
      v1642 = v1636[3] + v1640;
      v1643 = *(_BYTE *)(v1642 + 23);
      v1644 = v1643 < 0;
      if (v1643 >= 0)
        v1645 = (char *)(v1636[3] + v1640);
      else
        v1645 = *(char **)v1642;
      v1646 = v1643 & 0x7F;
      if (v1644)
        v1647 = *(_QWORD *)(v1642 + 8);
      else
        v1647 = v1646;
      v1634 = sub_22E7BE5A4(v1634, v1645, v1647, (uint64_t)v1935);
      v1648 = *(unsigned int *)(v1642 + 24);
      v1649 = LODWORD(v1935[1]);
      if (LODWORD(v1935[1]) >= (unint64_t)HIDWORD(v1935[1]))
      {
        v1634 = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v1649 = LODWORD(v1935[1]);
      }
      *((_QWORD *)v1935[0] + v1649) = v1648;
      v1650 = LODWORD(v1935[1]) + 1;
      LODWORD(v1935[1]) = v1650;
      v1651 = *(_BYTE *)(v1642 + 28);
      if (v1650 >= HIDWORD(v1935[1]))
      {
        v1634 = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v1650 = v1935[1];
      }
      *((_QWORD *)v1935[0] + v1650) = v1651 & 1;
      v1652 = LODWORD(v1935[1]) + 1;
      LODWORD(v1935[1]) = v1652;
      v1653 = *(unsigned __int8 *)(v1642 + 28);
      if (v1652 >= HIDWORD(v1935[1]))
      {
        v1634 = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v1652 = v1935[1];
      }
      *((_QWORD *)v1935[0] + v1652) = (v1653 >> 1) & 1;
      v1638 = ++LODWORD(v1935[1]);
      v1640 += 32;
      --v1641;
    }
    while (v1641);
    v1240 = (llvm::raw_ostream **)(v9 + 16);
  }
  v1654 = (uint64_t)(v1636[7] - v1636[6]) >> 5;
  if (v1638 >= HIDWORD(v1935[1]))
  {
    v1634 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1638 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1638) = v1654;
  v1655 = ++LODWORD(v1935[1]);
  v1656 = v1636[7] - v1636[6];
  if ((v1656 & 0x1FFFFFFFE0) != 0)
  {
    v1657 = 0;
    v1658 = (v1656 >> 5);
    do
    {
      v1659 = v1636[6] + v1657;
      v1660 = *(_BYTE *)(v1659 + 23);
      if (v1660 >= 0)
        v1661 = (char *)(v1636[6] + v1657);
      else
        v1661 = *(char **)v1659;
      if (v1660 >= 0)
        v1662 = v1660 & 0x7F;
      else
        v1662 = *(_QWORD *)(v1659 + 8);
      v1634 = sub_22E7BE5A4(v1634, v1661, v1662, (uint64_t)v1935);
      v1663 = *(unsigned __int8 *)(v1636[6] + v1657 + 24);
      v1664 = LODWORD(v1935[1]);
      if (LODWORD(v1935[1]) >= (unint64_t)HIDWORD(v1935[1]))
      {
        v1634 = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v1664 = LODWORD(v1935[1]);
      }
      *((_QWORD *)v1935[0] + v1664) = v1663;
      v1655 = ++LODWORD(v1935[1]);
      v1657 += 32;
      --v1658;
    }
    while (v1658);
  }
  v1665 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1636[104] - v1636[103]) >> 3);
  if (v1655 >= HIDWORD(v1935[1]))
  {
    v1634 = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v1655 = v1935[1];
  }
  *((_QWORD *)v1935[0] + v1655) = v1665;
  ++LODWORD(v1935[1]);
  v1666 = v1636[103];
  v1667 = v1636[104];
  while (v1666 != v1667)
  {
    v1668 = *(_BYTE *)(v1666 + 23);
    v1669 = v1668 < 0;
    if (v1668 >= 0)
      v1670 = (char *)v1666;
    else
      v1670 = *(char **)v1666;
    v1671 = v1668 & 0x7F;
    if (v1669)
      v1672 = *(_QWORD *)(v1666 + 8);
    else
      v1672 = v1671;
    v1634 = sub_22E7BE5A4(v1634, v1670, v1672, (uint64_t)v1935);
    v1666 += 24;
  }
  v1673 = sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 4u, (uint64_t)v1935, 0);
  LODWORD(v1935[1]) = 0;
  v1674 = *(_QWORD *)(*(_QWORD *)(v1771 + 1992) + 16);
  v1677 = *(char **)(v1674 + 16);
  v1675 = v1674 + 16;
  v1676 = v1677;
  v1678 = *(_BYTE *)(v1675 + 23);
  if (v1678 >= 0)
    v1679 = (char *)v1675;
  else
    v1679 = v1676;
  v1680 = *(_QWORD *)(v1675 + 8);
  if (v1678 >= 0)
    v1681 = v1678 & 0x7F;
  else
    v1681 = v1680;
  sub_22E7BE5A4((uint64_t)v1673, v1679, v1681, (uint64_t)v1935);
  sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 5u, (uint64_t)v1935, 0);
  v1682 = *(_QWORD *)(v9 + 64);
  __s1[0] = (char *)1;
  for (i6 = 1; i6 != 129; i6 += 2)
    __s1[i6] = (char *)-4096;
  v1684 = 0;
  LODWORD(v1891) = 0;
  v1685 = &v1911[16];
  *(_QWORD *)v1911 = &v1911[16];
  *(_DWORD *)&v1911[12] = 64;
  v1686 = v1548[15];
  v1687 = *(unsigned __int8 *)(v1686 + 24);
  LODWORD(__p[0]) = v1687 & 1;
  LODWORD(v1688) = *(_DWORD *)(v1686 + 28);
  *(uint32x4_t *)((char *)__p + 4) = vmovl_u16((uint16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(v1687), (uint16x4_t)0xFFFCFFFDFFFEFFFFLL) & 0xFF01FF01FF01FF01));
  do
  {
    v1688 = *(_DWORD *)((char *)__p + v1684) | (2 * v1688);
    v1684 += 4;
  }
  while (v1684 != 20);
  *(_QWORD *)&v1911[16] = v1688;
  *(_DWORD *)&v1911[8] = 1;
  __p[0] = __s1;
  __p[1] = v1911;
  __p[2] = &v1891;
  sub_22E7CA478((uint64_t)__p, v1686, v1682 != 0);
  v1689 = *(unsigned int *)&v1911[8];
  if (*(_DWORD *)&v1911[8] >= *(_DWORD *)&v1911[12])
  {
    sub_22F27B40C((uint64_t)v1911);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)v1911 + 8 * *(unsigned int *)&v1911[8]) = 0;
    *(_DWORD *)&v1911[8] = v1689 + 1;
  }
  v1690 = v1548;
  v1691 = (_QWORD *)v1548[12];
  v1789 = v1690;
  v1692 = v1690 + 13;
  if (v1691 == v1690 + 13)
  {
    v1693 = 0;
  }
  else
  {
    v1693 = 0;
    do
    {
      v1694 = *((_DWORD *)v1691 + 8);
      if (v1694)
        v1695 = *((_BYTE *)v1691 + 52) == 0;
      else
        v1695 = 1;
      if (!v1695)
      {
        sub_22F2CF54C((_QWORD *)v9, v1694, (uint64_t)v1911);
        v1698 = *((unsigned int *)v1691 + 16);
        v1699 = *(unsigned int *)&v1911[8];
        if (*(unsigned int *)&v1911[8] >= (unint64_t)*(unsigned int *)&v1911[12])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v1699 = *(unsigned int *)&v1911[8];
        }
        ++v1693;
        *(_QWORD *)(*(_QWORD *)v1911 + 8 * v1699) = v1698;
        ++*(_DWORD *)&v1911[8];
        v1700 = *((unsigned int *)v1691 + 16);
        if ((_DWORD)v1700)
        {
          v1701 = v1685;
          v1702 = 16 * v1700;
          v1703 = (unsigned int *)(v1691[7] + 8);
          do
          {
            v1704 = *v1703;
            v1705 = sub_22E7E3C1C((_QWORD *)v9, *v1703);
            v1706 = *(unsigned int *)&v1911[8];
            if (*(unsigned int *)&v1911[8] >= (unint64_t)*(unsigned int *)&v1911[12])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v1706 = *(unsigned int *)&v1911[8];
            }
            *(_QWORD *)(*(_QWORD *)v1911 + 8 * v1706) = v1704 - v1705;
            ++*(_DWORD *)&v1911[8];
            sub_22E7CA478((uint64_t)__p, *((_QWORD *)v1703 - 1), 0);
            v1703 += 4;
            v1702 -= 16;
          }
          while (v1702);
          v1240 = (llvm::raw_ostream **)(v9 + 16);
          v1685 = v1701;
        }
      }
      v1696 = (_QWORD *)v1691[1];
      if (v1696)
      {
        do
        {
          v1697 = v1696;
          v1696 = (_QWORD *)*v1696;
        }
        while (v1696);
      }
      else
      {
        do
        {
          v1697 = (_QWORD *)v1691[2];
          v71 = *v1697 == (_QWORD)v1691;
          v1691 = v1697;
        }
        while (!v71);
      }
      v1691 = v1697;
    }
    while (v1697 != v1692);
  }
  *(_QWORD *)(*(_QWORD *)v1911 + 8 * v1689) = v1693;
  sub_22E7C9A94(v9, *((_DWORD *)v1789 + 34), (uint64_t)v1911);
  sub_22E7CA478((uint64_t)__p, v1789[16], 0);
  sub_22E742038(*(llvm::raw_ostream **)(v9 + 16), 6u, (uint64_t)v1911, 0);
  if (*(_BYTE **)v1911 != v1685)
    free(*(void **)v1911);
  if (((uint64_t)__s1[0] & 1) == 0)
    llvm::deallocate_buffer((llvm *)__s1[1], (void *)(16 * LODWORD(__s1[2])));
  sub_22F137A34(*(_QWORD *)(v1772 + 104), __s1);
  v1707 = (char *)operator new(0x228uLL);
  *(_QWORD *)v1707 = &unk_24FA715D0;
  *((_QWORD *)v1707 + 1) = 0;
  *(_OWORD *)(v1707 + 88) = 0u;
  *(_OWORD *)(v1707 + 104) = 0u;
  *(_OWORD *)(v1707 + 120) = 0u;
  *(_OWORD *)(v1707 + 136) = 0u;
  *(_OWORD *)(v1707 + 152) = 0u;
  *(_OWORD *)(v1707 + 168) = 0u;
  *(_OWORD *)(v1707 + 184) = 0u;
  *(_OWORD *)(v1707 + 200) = 0u;
  *(_OWORD *)(v1707 + 216) = 0u;
  *(_OWORD *)(v1707 + 232) = 0u;
  *(_OWORD *)(v1707 + 248) = 0u;
  *(_OWORD *)(v1707 + 264) = 0u;
  *(_OWORD *)(v1707 + 280) = 0u;
  *(_OWORD *)(v1707 + 296) = 0u;
  *(_OWORD *)(v1707 + 312) = 0u;
  *(_OWORD *)(v1707 + 328) = 0u;
  *(_OWORD *)(v1707 + 344) = 0u;
  *(_OWORD *)(v1707 + 360) = 0u;
  *(_OWORD *)(v1707 + 376) = 0u;
  *(_OWORD *)(v1707 + 392) = 0u;
  *(_OWORD *)(v1707 + 408) = 0u;
  *(_OWORD *)(v1707 + 424) = 0u;
  *(_OWORD *)(v1707 + 440) = 0u;
  *(_OWORD *)(v1707 + 456) = 0u;
  *(_OWORD *)(v1707 + 472) = 0u;
  *(_OWORD *)(v1707 + 488) = 0u;
  *(_OWORD *)(v1707 + 504) = 0u;
  *(_OWORD *)(v1707 + 520) = 0u;
  *(_OWORD *)(v1707 + 536) = 0u;
  *(_OWORD *)(v1707 + 40) = xmmword_22F45E140;
  *((_QWORD *)v1707 + 2) = 0;
  *((_QWORD *)v1707 + 3) = v1707 + 40;
  *(_OWORD *)(v1707 + 56) = xmmword_22F45E080;
  v1708 = *v1240;
  *(_OWORD *)(v1707 + 72) = xmmword_22F45E0D0;
  *((_QWORD *)v1707 + 4) = 0x2000000003;
  __p[0] = v1707 + 24;
  __p[1] = v1707;
  v1709 = sub_22E74761C((uint64_t)v1708, (uint64_t)__p);
  v1710 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v1711 = (unint64_t *)((char *)__p[1] + 8);
    do
      v1712 = __ldaxr(v1711);
    while (__stlxr(v1712 - 1, v1711));
    if (!v1712)
    {
      ((void (*)(std::__shared_weak_count *))v1710->__on_zero_shared)(v1710);
      std::__shared_weak_count::__release_weak(v1710);
    }
  }
  v1891 = (void *)7;
  *(char **)&v1892 = __s1[1];
  v1713 = *v1240;
  memset(v1911, 0, 24);
  std::string::reserve((std::string *)v1911, (unint64_t)__s1[1] >> 3);
  v1714 = __s1[1];
  if (LODWORD(__s1[1]))
  {
    v1715 = 0;
    v1716 = LODWORD(__s1[1]);
    do
    {
      v1717 = 0;
      v1718 = 0;
      v1719 = v1715;
      do
      {
        v1720 = v1715 + v1717;
        v1721 = v1717;
        v1718 |= ((*(_QWORD *)&__s1[0][(v1720 >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v1715
                                                                              + v1717)) & 1) << v1717;
        ++v1717;
      }
      while (v1721 <= 6 && v1720 + 1 < v1716);
      v1722 = v1715 + v1717;
      std::string::push_back((std::string *)v1911, v1718);
      v1715 = v1719 + v1717;
    }
    while (v1722 < v1714);
  }
  if (v1911[23] >= 0)
    v1723 = v1911;
  else
    v1723 = *(char **)v1911;
  if (v1911[23] >= 0)
    v1724 = v1911[23] & 0x7F;
  else
    v1724 = *(_QWORD *)&v1911[8];
  sub_22E74241C(v1713, v1709, (uint64_t)&v1891, 2, v1723, v1724, 0);
  if ((v1911[23] & 0x80000000) != 0)
    operator delete(*(void **)v1911);
  sub_22E7416F4(*(_QWORD *)v1778);
  if (__s1[0])
    operator delete(__s1[0]);
  if ((llvm **)v1935[0] != &v1935[2])
    free(v1935[0]);
  if (v1830 != v1832)
    free(v1830);
  if (v1833 != v1835)
    free(v1833);
  if (v1836[0] != v1837)
    free(v1836[0]);
  if (v1838 != v1840)
    free(v1838);
  if (v1841 != v1843)
    free(v1841);
  if (v1844 != v1846)
    free(v1844);
  if (v1847 != v1849)
    free(v1847);
  if (v1850 != v1852)
    free(v1850);
  if (v1853 != v1855)
    free(v1853);
  if (v1856 != v1858)
    free(v1856);
  if (v1859 != v1861)
    free(v1859);
  if (v1862 != v1864)
    free(v1862);
  if (v1865 != v1867)
    free(v1865);
  if (v1868 != v1870)
    free(v1868);
  if (v1871 != v1873)
    free(v1871);
  if (v1874 != v1876)
    free(v1874);
  if (v1877 != v1879)
    free(v1877);
  if (v1880 != v1882)
    free(v1880);
  if (v1883 != v1885)
    free(v1883);
}

uint64_t sub_22E7E1FB4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;

  result = sub_22E7E3AA4(a1, a2);
  v5 = *(_DWORD *)(a3 + 8);
  if (v5 >= *(_DWORD *)(a3 + 12))
  {
    v6 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v6;
    v5 = *(_DWORD *)(a3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = result;
  ++*(_DWORD *)(a3 + 8);
  return result;
}

unint64_t sub_22E7E2024(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  result = sub_22EFBC5B4(a2);
  if (result)
  {
    v8 = *(_QWORD *)(a2 + 88);
    v9 = 1;
    if ((v8 & 4) != 0)
    {
      v10 = (unsigned __int8 *)(v8 & 0xFFFFFFFFFFFFFFF8);
      if (v10)
      {
        v15 = *v10;
        v16 = 3;
        if ((v15 & 4) == 0)
          v16 = 1;
        v9 = v16 | (v15 >> 1) & 4;
      }
    }
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 8);
    if (v12 >= *(_DWORD *)(v11 + 12))
    {
      v17 = *(_QWORD *)(a1 + 16);
      v18 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = v17;
      result = v18;
      v12 = *(_DWORD *)(v17 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v9;
    ++*(_DWORD *)(v11 + 8);
    v7 = (_DWORD *)(a1 + 32);
    v13 = *(_DWORD *)(a1 + 32);
    v14 = (_QWORD *)(a1 + 24);
    if (v13 >= *(_DWORD *)(a1 + 36))
    {
      v19 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = (_QWORD *)(a1 + 24);
      result = v19;
      v13 = *(_DWORD *)(a1 + 32);
    }
    *(_QWORD *)(*v14 + 8 * v13) = result;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    v7 = (_DWORD *)(v5 + 8);
    v6 = *(_DWORD *)(v5 + 8);
    if (v6 >= *(_DWORD *)(v5 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(v5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = 0;
  }
  ++*v7;
  return result;
}

uint64_t sub_22E7E2164(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  uint64_t v140;
  unint64_t v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  unsigned int v174;
  _DWORD *v175;
  int v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  unsigned int v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  unsigned int v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unsigned int v196;
  unint64_t v197;
  uint64_t result;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t v207;
  unsigned int v208;
  uint64_t v209;
  unint64_t v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  unint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  int v234;
  unsigned int v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  int v241;

  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 104) + 96), *(_QWORD *)(a2 + 104));
  v4 = *(_QWORD *)(a2 + 128);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = ((unint64_t)*(unsigned __int8 *)(v4 + 10) >> 4) & 1;
  v7 = *(_DWORD *)(v5 + 8);
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v7) = v6;
  ++*(_DWORD *)(v5 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)v4 & 1;
  v10 = *(_DWORD *)(v8 + 8);
  if (v10 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v10) = v9;
  ++*(_DWORD *)(v8 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = (*(_QWORD *)v4 >> 1) & 0x3FLL;
  v13 = *(_DWORD *)(v11 + 8);
  if (v13 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v13 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v13) = v12;
  ++*(_DWORD *)(v11 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = (*(_QWORD *)v4 >> 7) & 1;
  v16 = *(_DWORD *)(v14 + 8);
  if (v16 >= *(_DWORD *)(v14 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v14 + 8 * v16) = v15;
  ++*(_DWORD *)(v14 + 8);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = (*(_QWORD *)v4 >> 8) & 1;
  v19 = *(_DWORD *)(v17 + 8);
  if (v19 >= *(_DWORD *)(v17 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = *(_DWORD *)(v17 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v17 + 8 * v19) = v18;
  ++*(_DWORD *)(v17 + 8);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = (*(_QWORD *)v4 >> 9) & 1;
  v22 = *(_DWORD *)(v20 + 8);
  if (v22 >= *(_DWORD *)(v20 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = *(_DWORD *)(v20 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v20 + 8 * v22) = v21;
  ++*(_DWORD *)(v20 + 8);
  v23 = *(_QWORD *)(a1 + 16);
  v24 = (*(_QWORD *)v4 >> 10) & 1;
  v25 = *(_DWORD *)(v23 + 8);
  if (v25 >= *(_DWORD *)(v23 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = *(_DWORD *)(v23 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v23 + 8 * v25) = v24;
  ++*(_DWORD *)(v23 + 8);
  v26 = *(_QWORD *)(a1 + 16);
  v27 = (*(_QWORD *)v4 >> 11) & 1;
  v28 = *(_DWORD *)(v26 + 8);
  if (v28 >= *(_DWORD *)(v26 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v28 = *(_DWORD *)(v26 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v26 + 8 * v28) = v27;
  ++*(_DWORD *)(v26 + 8);
  v29 = *(_QWORD *)(a1 + 16);
  v30 = (*(_QWORD *)v4 >> 12) & 1;
  v31 = *(_DWORD *)(v29 + 8);
  if (v31 >= *(_DWORD *)(v29 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v31 = *(_DWORD *)(v29 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v29 + 8 * v31) = v30;
  ++*(_DWORD *)(v29 + 8);
  v32 = *(_QWORD *)(a1 + 16);
  v33 = (*(_QWORD *)v4 >> 13) & 1;
  v34 = *(_DWORD *)(v32 + 8);
  if (v34 >= *(_DWORD *)(v32 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = *(_DWORD *)(v32 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v32 + 8 * v34) = v33;
  ++*(_DWORD *)(v32 + 8);
  v35 = *(_QWORD *)(a1 + 16);
  v36 = (*(_QWORD *)v4 >> 14) & 1;
  v37 = *(_DWORD *)(v35 + 8);
  if (v37 >= *(_DWORD *)(v35 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v37 = *(_DWORD *)(v35 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v35 + 8 * v37) = v36;
  ++*(_DWORD *)(v35 + 8);
  v38 = *(_QWORD *)(a1 + 16);
  v39 = (*(_QWORD *)v4 >> 15) & 1;
  v40 = *(_DWORD *)(v38 + 8);
  if (v40 >= *(_DWORD *)(v38 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v40 = *(_DWORD *)(v38 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v38 + 8 * v40) = v39;
  ++*(_DWORD *)(v38 + 8);
  v41 = *(_QWORD *)(a1 + 16);
  v42 = (*(_QWORD *)v4 >> 16) & 1;
  v43 = *(_DWORD *)(v41 + 8);
  if (v43 >= *(_DWORD *)(v41 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v43 = *(_DWORD *)(v41 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v41 + 8 * v43) = v42;
  ++*(_DWORD *)(v41 + 8);
  v44 = *(_QWORD *)(a1 + 16);
  v45 = (*(_QWORD *)v4 >> 17) & 1;
  v46 = *(_DWORD *)(v44 + 8);
  if (v46 >= *(_DWORD *)(v44 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v46 = *(_DWORD *)(v44 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v44 + 8 * v46) = v45;
  ++*(_DWORD *)(v44 + 8);
  v47 = *(_QWORD *)(a1 + 16);
  v48 = (*(_QWORD *)v4 >> 18) & 1;
  v49 = *(_DWORD *)(v47 + 8);
  if (v49 >= *(_DWORD *)(v47 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v49 = *(_DWORD *)(v47 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v47 + 8 * v49) = v48;
  ++*(_DWORD *)(v47 + 8);
  v50 = *(_QWORD *)(a1 + 16);
  v51 = (*(_QWORD *)v4 >> 19) & 1;
  v52 = *(_DWORD *)(v50 + 8);
  if (v52 >= *(_DWORD *)(v50 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v52 = *(_DWORD *)(v50 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v50 + 8 * v52) = v51;
  ++*(_DWORD *)(v50 + 8);
  v53 = *(_QWORD *)(a1 + 16);
  v54 = (*(_QWORD *)v4 >> 20) & 1;
  v55 = *(_DWORD *)(v53 + 8);
  if (v55 >= *(_DWORD *)(v53 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v55 = *(_DWORD *)(v53 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v53 + 8 * v55) = v54;
  ++*(_DWORD *)(v53 + 8);
  v56 = *(_QWORD *)(a1 + 16);
  v57 = (*(_QWORD *)v4 >> 21) & 1;
  v58 = *(_DWORD *)(v56 + 8);
  if (v58 >= *(_DWORD *)(v56 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v58 = *(_DWORD *)(v56 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v56 + 8 * v58) = v57;
  ++*(_DWORD *)(v56 + 8);
  v59 = *(_QWORD *)(a1 + 16);
  v60 = (*(_QWORD *)v4 >> 22) & 1;
  v61 = *(_DWORD *)(v59 + 8);
  if (v61 >= *(_DWORD *)(v59 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v61 = *(_DWORD *)(v59 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v59 + 8 * v61) = v60;
  ++*(_DWORD *)(v59 + 8);
  v62 = *(_QWORD *)(a1 + 16);
  v63 = (*(_QWORD *)v4 >> 23) & 1;
  v64 = *(_DWORD *)(v62 + 8);
  if (v64 >= *(_DWORD *)(v62 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v64 = *(_DWORD *)(v62 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v62 + 8 * v64) = v63;
  ++*(_DWORD *)(v62 + 8);
  v65 = *(_QWORD *)(a1 + 16);
  v66 = (*(_QWORD *)v4 >> 24) & 1;
  v67 = *(_DWORD *)(v65 + 8);
  if (v67 >= *(_DWORD *)(v65 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v67 = *(_DWORD *)(v65 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v65 + 8 * v67) = v66;
  ++*(_DWORD *)(v65 + 8);
  v68 = *(_QWORD *)(a1 + 16);
  v69 = (*(_QWORD *)v4 >> 25) & 1;
  v70 = *(_DWORD *)(v68 + 8);
  if (v70 >= *(_DWORD *)(v68 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v70 = *(_DWORD *)(v68 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v68 + 8 * v70) = v69;
  ++*(_DWORD *)(v68 + 8);
  v71 = *(_QWORD *)(a1 + 16);
  v72 = (*(_QWORD *)v4 >> 26) & 1;
  v73 = *(_DWORD *)(v71 + 8);
  if (v73 >= *(_DWORD *)(v71 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v73 = *(_DWORD *)(v71 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v71 + 8 * v73) = v72;
  ++*(_DWORD *)(v71 + 8);
  v74 = *(_QWORD *)(a1 + 16);
  v75 = (*(_QWORD *)v4 >> 27) & 1;
  v76 = *(_DWORD *)(v74 + 8);
  if (v76 >= *(_DWORD *)(v74 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v76 = *(_DWORD *)(v74 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v74 + 8 * v76) = v75;
  ++*(_DWORD *)(v74 + 8);
  v77 = *(_QWORD *)(a1 + 16);
  v78 = (*(_QWORD *)v4 >> 28) & 1;
  v79 = *(_DWORD *)(v77 + 8);
  if (v79 >= *(_DWORD *)(v77 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v79 = *(_DWORD *)(v77 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v77 + 8 * v79) = v78;
  ++*(_DWORD *)(v77 + 8);
  v80 = *(_QWORD *)(a1 + 16);
  v81 = (*(_QWORD *)v4 >> 29) & 1;
  v82 = *(_DWORD *)(v80 + 8);
  if (v82 >= *(_DWORD *)(v80 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v82 = *(_DWORD *)(v80 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v80 + 8 * v82) = v81;
  ++*(_DWORD *)(v80 + 8);
  v83 = *(_QWORD *)(a1 + 16);
  v84 = (*(_QWORD *)v4 >> 30) & 1;
  v85 = *(_DWORD *)(v83 + 8);
  if (v85 >= *(_DWORD *)(v83 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v85 = *(_DWORD *)(v83 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v83 + 8 * v85) = v84;
  ++*(_DWORD *)(v83 + 8);
  v86 = *(_QWORD *)(a1 + 16);
  v87 = (*(_QWORD *)v4 >> 31) & 1;
  v88 = *(_DWORD *)(v86 + 8);
  if (v88 >= *(_DWORD *)(v86 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v88 = *(_DWORD *)(v86 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v86 + 8 * v88) = v87;
  ++*(_DWORD *)(v86 + 8);
  v89 = *(_QWORD *)(a1 + 16);
  v90 = HIDWORD(*(_QWORD *)v4) & 1;
  v91 = *(_DWORD *)(v89 + 8);
  if (v91 >= *(_DWORD *)(v89 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v91 = *(_DWORD *)(v89 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v89 + 8 * v91) = v90;
  ++*(_DWORD *)(v89 + 8);
  v92 = *(_QWORD *)(a1 + 16);
  v93 = (*(_QWORD *)v4 >> 33) & 1;
  v94 = *(_DWORD *)(v92 + 8);
  if (v94 >= *(_DWORD *)(v92 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v94 = *(_DWORD *)(v92 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v92 + 8 * v94) = v93;
  ++*(_DWORD *)(v92 + 8);
  v95 = *(_QWORD *)(a1 + 16);
  v96 = (*(_QWORD *)v4 >> 34) & 1;
  v97 = *(_DWORD *)(v95 + 8);
  if (v97 >= *(_DWORD *)(v95 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v97 = *(_DWORD *)(v95 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v95 + 8 * v97) = v96;
  ++*(_DWORD *)(v95 + 8);
  v98 = *(_QWORD *)(a1 + 16);
  v99 = (*(_QWORD *)v4 >> 35) & 1;
  v100 = *(_DWORD *)(v98 + 8);
  if (v100 >= *(_DWORD *)(v98 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v100 = *(_DWORD *)(v98 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v98 + 8 * v100) = v99;
  ++*(_DWORD *)(v98 + 8);
  v101 = *(_QWORD *)(a1 + 16);
  v102 = (*(_QWORD *)v4 >> 36) & 1;
  v103 = *(_DWORD *)(v101 + 8);
  if (v103 >= *(_DWORD *)(v101 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v103 = *(_DWORD *)(v101 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v101 + 8 * v103) = v102;
  ++*(_DWORD *)(v101 + 8);
  v104 = *(_QWORD *)(a1 + 16);
  v105 = (*(_QWORD *)v4 >> 37) & 1;
  v106 = *(_DWORD *)(v104 + 8);
  if (v106 >= *(_DWORD *)(v104 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v106 = *(_DWORD *)(v104 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v104 + 8 * v106) = v105;
  ++*(_DWORD *)(v104 + 8);
  v107 = *(_QWORD *)(a1 + 16);
  v108 = (*(_QWORD *)v4 >> 38) & 1;
  v109 = *(_DWORD *)(v107 + 8);
  if (v109 >= *(_DWORD *)(v107 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v109 = *(_DWORD *)(v107 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v107 + 8 * v109) = v108;
  ++*(_DWORD *)(v107 + 8);
  v110 = *(_QWORD *)(a1 + 16);
  v111 = (*(_QWORD *)v4 >> 39) & 0x3FLL;
  v112 = *(_DWORD *)(v110 + 8);
  if (v112 >= *(_DWORD *)(v110 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v112 = *(_DWORD *)(v110 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v110 + 8 * v112) = v111;
  ++*(_DWORD *)(v110 + 8);
  v113 = *(_QWORD *)(a1 + 16);
  v114 = (*(_QWORD *)v4 >> 45) & 0x3FLL;
  v115 = *(_DWORD *)(v113 + 8);
  if (v115 >= *(_DWORD *)(v113 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v115 = *(_DWORD *)(v113 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v113 + 8 * v115) = v114;
  ++*(_DWORD *)(v113 + 8);
  v116 = *(_QWORD *)(a1 + 16);
  v117 = (*(_QWORD *)v4 >> 51) & 0x3FLL;
  v118 = *(_DWORD *)(v116 + 8);
  if (v118 >= *(_DWORD *)(v116 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v118 = *(_DWORD *)(v116 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v116 + 8 * v118) = v117;
  ++*(_DWORD *)(v116 + 8);
  v119 = *(_QWORD *)(a1 + 16);
  v120 = (*(_QWORD *)v4 >> 57) & 0x3FLL;
  v121 = *(_DWORD *)(v119 + 8);
  if (v121 >= *(_DWORD *)(v119 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v121 = *(_DWORD *)(v119 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v119 + 8 * v121) = v120;
  ++*(_DWORD *)(v119 + 8);
  v122 = *(_QWORD *)(a1 + 16);
  v123 = *(_QWORD *)v4 >> 63;
  v124 = *(_DWORD *)(v122 + 8);
  if (v124 >= *(_DWORD *)(v122 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v124 = *(_DWORD *)(v122 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v122 + 8 * v124) = v123;
  ++*(_DWORD *)(v122 + 8);
  v125 = *(_QWORD *)(a1 + 16);
  v126 = *(_WORD *)(v4 + 8) & 1;
  v127 = *(_DWORD *)(v125 + 8);
  if (v127 >= *(_DWORD *)(v125 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v127 = *(_DWORD *)(v125 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v125 + 8 * v127) = v126;
  ++*(_DWORD *)(v125 + 8);
  v128 = *(_QWORD *)(a1 + 16);
  v129 = ((unint64_t)*(unsigned __int16 *)(v4 + 8) >> 1) & 1;
  v130 = *(_DWORD *)(v128 + 8);
  if (v130 >= *(_DWORD *)(v128 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v130 = *(_DWORD *)(v128 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v128 + 8 * v130) = v129;
  ++*(_DWORD *)(v128 + 8);
  v131 = *(_QWORD *)(a1 + 16);
  v132 = ((unint64_t)*(unsigned __int16 *)(v4 + 8) >> 2) & 1;
  v133 = *(_DWORD *)(v131 + 8);
  if (v133 >= *(_DWORD *)(v131 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v133 = *(_DWORD *)(v131 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v131 + 8 * v133) = v132;
  ++*(_DWORD *)(v131 + 8);
  v134 = *(_QWORD *)(a1 + 16);
  v135 = ((unint64_t)*(unsigned __int16 *)(v4 + 8) >> 3) & 1;
  v136 = *(_DWORD *)(v134 + 8);
  if (v136 >= *(_DWORD *)(v134 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v136 = *(_DWORD *)(v134 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v134 + 8 * v136) = v135;
  ++*(_DWORD *)(v134 + 8);
  v137 = *(_QWORD *)(a1 + 16);
  v138 = ((unint64_t)*(unsigned __int16 *)(v4 + 8) >> 4) & 1;
  v139 = *(_DWORD *)(v137 + 8);
  if (v139 >= *(_DWORD *)(v137 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v139 = *(_DWORD *)(v137 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v137 + 8 * v139) = v138;
  ++*(_DWORD *)(v137 + 8);
  v140 = *(_QWORD *)(a1 + 16);
  v141 = ((unint64_t)*(unsigned __int16 *)(v4 + 8) >> 5) & 1;
  v142 = *(_DWORD *)(v140 + 8);
  if (v142 >= *(_DWORD *)(v140 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v142 = *(_DWORD *)(v140 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v140 + 8 * v142) = v141;
  ++*(_DWORD *)(v140 + 8);
  v143 = *(_QWORD *)(a1 + 16);
  v144 = ((unint64_t)*(unsigned __int16 *)(v4 + 8) >> 6) & 1;
  v145 = *(_DWORD *)(v143 + 8);
  if (v145 >= *(_DWORD *)(v143 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v145 = *(_DWORD *)(v143 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v143 + 8 * v145) = v144;
  ++*(_DWORD *)(v143 + 8);
  v146 = *(_QWORD *)(a1 + 16);
  v147 = ((unint64_t)*(unsigned __int16 *)(v4 + 8) >> 7) & 1;
  v148 = *(_DWORD *)(v146 + 8);
  if (v148 >= *(_DWORD *)(v146 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v148 = *(_DWORD *)(v146 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v146 + 8 * v148) = v147;
  ++*(_DWORD *)(v146 + 8);
  v149 = *(_QWORD *)(a1 + 16);
  v150 = *(_WORD *)(v4 + 9) & 0x3F;
  v151 = *(_DWORD *)(v149 + 8);
  if (v151 >= *(_DWORD *)(v149 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v151 = *(_DWORD *)(v149 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v149 + 8 * v151) = v150;
  ++*(_DWORD *)(v149 + 8);
  v152 = *(_QWORD *)(a1 + 16);
  v153 = ((unint64_t)*(unsigned __int16 *)(v4 + 8) >> 14) & 1;
  v154 = *(_DWORD *)(v152 + 8);
  if (v154 >= *(_DWORD *)(v152 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v154 = *(_DWORD *)(v152 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v152 + 8 * v154) = v153;
  ++*(_DWORD *)(v152 + 8);
  v155 = *(_QWORD *)(a1 + 16);
  v156 = (unint64_t)*(unsigned __int16 *)(v4 + 8) >> 15;
  v157 = *(_DWORD *)(v155 + 8);
  if (v157 >= *(_DWORD *)(v155 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v157 = *(_DWORD *)(v155 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v155 + 8 * v157) = v156;
  ++*(_DWORD *)(v155 + 8);
  v158 = *(_QWORD *)(a1 + 16);
  v159 = *(_BYTE *)(v4 + 10) & 1;
  v160 = *(_DWORD *)(v158 + 8);
  if (v160 >= *(_DWORD *)(v158 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v160 = *(_DWORD *)(v158 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v158 + 8 * v160) = v159;
  ++*(_DWORD *)(v158 + 8);
  v161 = *(_QWORD *)(a1 + 16);
  v162 = ((unint64_t)*(unsigned __int8 *)(v4 + 10) >> 1) & 1;
  v163 = *(_DWORD *)(v161 + 8);
  if (v163 >= *(_DWORD *)(v161 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v163 = *(_DWORD *)(v161 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v161 + 8 * v163) = v162;
  ++*(_DWORD *)(v161 + 8);
  v164 = *(_QWORD *)(a1 + 16);
  v165 = ((unint64_t)*(unsigned __int8 *)(v4 + 10) >> 2) & 1;
  v166 = *(_DWORD *)(v164 + 8);
  if (v166 >= *(_DWORD *)(v164 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v166 = *(_DWORD *)(v164 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v164 + 8 * v166) = v165;
  ++*(_DWORD *)(v164 + 8);
  v167 = *(_QWORD *)(a1 + 16);
  v168 = ((unint64_t)*(unsigned __int8 *)(v4 + 10) >> 3) & 1;
  v169 = *(_DWORD *)(v167 + 8);
  if (v169 >= *(_DWORD *)(v167 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v169 = *(_DWORD *)(v167 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v167 + 8 * v169) = v168;
  ++*(_DWORD *)(v167 + 8);
  v170 = *(_QWORD *)(a1 + 16);
  v171 = sub_22EFD0E14(a2);
  v172 = *(_DWORD *)(v170 + 8);
  if (v172 >= *(_DWORD *)(v170 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v172 = *(_DWORD *)(v170 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v170 + 8 * v172) = v171;
  ++*(_DWORD *)(v170 + 8);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 2000) + 140) & 0x400000000) == 0)
  {
    v173 = *(_QWORD *)(a1 + 16);
    v175 = (_DWORD *)(v173 + 8);
    v174 = *(_DWORD *)(v173 + 8);
    if (v174 >= *(_DWORD *)(v173 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v174 = *(_DWORD *)(v173 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v173 + 8 * v174) = 0;
LABEL_123:
    ++*v175;
    goto LABEL_124;
  }
  v176 = sub_22EFC7ADC(a2 + 64);
  v177 = v176;
  v178 = v176 ^ 1u;
  v179 = *(_QWORD *)(a1 + 16);
  v180 = *(_DWORD *)(v179 + 8);
  if (v180 >= *(_DWORD *)(v179 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v180 = *(_DWORD *)(v179 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v179 + 8 * v180) = v178;
  ++*(_DWORD *)(v179 + 8);
  if ((v177 & 1) == 0)
  {
    v181 = *(_QWORD *)(a1 + 8);
    v182 = sub_22E7CA3E8(v181, a2);
    v175 = (_DWORD *)(v181 + 848);
    v183 = *(_DWORD *)(v181 + 848);
    if (v183 >= *(_DWORD *)(v181 + 852))
    {
      v241 = v182;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v182 = v241;
      v183 = *(_DWORD *)(v181 + 848);
    }
    *(_DWORD *)(*(_QWORD *)(v181 + 840) + 4 * v183) = v182;
    goto LABEL_123;
  }
LABEL_124:
  v184 = *(_QWORD *)(a1 + 16);
  v185 = *(unsigned int *)(v4 + 16);
  v186 = *(_DWORD *)(v184 + 8);
  if (v186 >= *(_DWORD *)(v184 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v186 = *(_DWORD *)(v184 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v184 + 8 * v186) = v185;
  ++*(_DWORD *)(v184 + 8);
  v187 = *(_DWORD *)(v4 + 16);
  if (v187)
  {
    v188 = *(_QWORD *)(v4 + 24);
    if ((v188 & 1) != 0)
    {
      v188 = sub_22EFCF510(v4);
      v187 = *(_DWORD *)(v4 + 16);
    }
    sub_22E7E5618(a1, v188, v187);
  }
  v189 = *(_QWORD *)(a1 + 16);
  v190 = *(unsigned int *)(v4 + 20);
  v191 = *(_DWORD *)(v189 + 8);
  if (v191 >= *(_DWORD *)(v189 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v191 = *(_DWORD *)(v189 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v189 + 8 * v191) = v190;
  ++*(_DWORD *)(v189 + 8);
  v192 = *(_DWORD *)(v4 + 20);
  if (v192)
  {
    v193 = *(_QWORD *)(v4 + 32);
    if ((v193 & 1) != 0)
    {
      v193 = sub_22F3B1908(v4);
      v192 = *(_DWORD *)(v4 + 20);
    }
    sub_22E7E5618(a1, v193, v192);
  }
  if ((*(_BYTE *)(v4 + 56) & 4) != 0)
    sub_22F3B1894(v4 + 40, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
  sub_22E7E5388(a1, (_QWORD *)(v4 + 40));
  v194 = *(_QWORD *)(a1 + 16);
  v195 = ((unint64_t)*(unsigned __int8 *)(v4 + 10) >> 6) & 1;
  v196 = *(_DWORD *)(v194 + 8);
  if (v196 >= *(_DWORD *)(v194 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v196 = *(_DWORD *)(v194 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v194 + 8 * v196) = v195;
  ++*(_DWORD *)(v194 + 8);
  if (((*(unsigned __int16 *)(v4 + 8) | (*(unsigned __int8 *)(v4 + 10) << 16)) & 0x400000) != 0)
  {
    if ((*(_BYTE *)(v4 + 80) & 4) != 0)
      sub_22F3B1894(v4 + 64, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40));
    sub_22E7E5388(a1, (_QWORD *)(v4 + 64));
  }
  v197 = sub_22EFD9E18(a2);
  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 8), v197, *(_QWORD *)(a1 + 16));
  if (((*(unsigned __int16 *)(v4 + 8) | (*(unsigned __int8 *)(v4 + 10) << 16)) & 0x100000) != 0)
  {
    v199 = *(_QWORD *)(a2 + 128);
    v200 = *(_QWORD *)(a1 + 16);
    v201 = *(_DWORD *)(v199 + 104) & 3;
    v202 = *(_DWORD *)(v200 + 8);
    if (v202 >= *(_DWORD *)(v200 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v202 = *(_DWORD *)(v200 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v200 + 8 * v202) = v201;
    ++*(_DWORD *)(v200 + 8);
    v203 = *(_QWORD *)(a1 + 16);
    v204 = ((unint64_t)*(unsigned int *)(v199 + 104) >> 2) & 1;
    v205 = *(_DWORD *)(v203 + 8);
    if (v205 >= *(_DWORD *)(v203 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v205 = *(_DWORD *)(v203 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v203 + 8 * v205) = v204;
    ++*(_DWORD *)(v203 + 8);
    v206 = *(_QWORD *)(a1 + 16);
    v207 = ((unint64_t)*(unsigned int *)(v199 + 104) >> 3) & 3;
    v208 = *(_DWORD *)(v206 + 8);
    if (v208 >= *(_DWORD *)(v206 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v208 = *(_DWORD *)(v206 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v206 + 8 * v208) = v207;
    ++*(_DWORD *)(v206 + 8);
    v209 = *(_QWORD *)(a1 + 16);
    v210 = ((unint64_t)*(unsigned int *)(v199 + 104) >> 5) & 0x7FFF;
    v211 = *(_DWORD *)(v209 + 8);
    if (v211 >= *(_DWORD *)(v209 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v211 = *(_DWORD *)(v209 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v209 + 8 * v211) = v210;
    ++*(_DWORD *)(v209 + 8);
    v212 = *(_QWORD *)(a1 + 16);
    v213 = *(_WORD *)(v199 + 108) & 0x1FFF;
    v214 = *(_DWORD *)(v212 + 8);
    if (v214 >= *(_DWORD *)(v212 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v214 = *(_DWORD *)(v212 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v212 + 8 * v214) = v213;
    ++*(_DWORD *)(v212 + 8);
    v215 = *(_QWORD *)(a1 + 16);
    v216 = ((unint64_t)*(unsigned __int16 *)(v199 + 108) >> 13) & 1;
    v217 = *(_DWORD *)(v215 + 8);
    if (v217 >= *(_DWORD *)(v215 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v217 = *(_DWORD *)(v215 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v215 + 8 * v217) = v216;
    ++*(_DWORD *)(v215 + 8);
    v218 = *(_QWORD *)(a1 + 16);
    v219 = *(_DWORD *)(v199 + 112) & 0x7FFFFFFF;
    v220 = *(_DWORD *)(v218 + 8);
    if (v220 >= *(_DWORD *)(v218 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v220 = *(_DWORD *)(v218 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v218 + 8 * v220) = v219;
    ++*(_DWORD *)(v218 + 8);
    v221 = *(_QWORD *)(a1 + 16);
    v222 = sub_22EFD4B78(a2);
    v223 = *(_DWORD *)(v221 + 8);
    if (v223 >= *(_DWORD *)(v221 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v223 = *(_DWORD *)(v221 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v221 + 8 * v223) = v222;
    ++*(_DWORD *)(v221 + 8);
    v224 = sub_22F3B1CF4(a2);
    sub_22E7CA8EC(*(_QWORD *)(a1 + 8), v224, *(_QWORD *)(a1 + 16));
    result = sub_22E7D2E84(a1, *(unint64_t **)(v199 + 136));
    v225 = ((unint64_t)*(unsigned int *)(v199 + 104) >> 5) & 0x7FFF;
    if ((_DWORD)v225)
    {
      v226 = 0;
      v227 = 16 * v225;
      do
      {
        v228 = *(_QWORD *)(v199 + 128);
        result = sub_22E7C9A94(*(_QWORD *)(a1 + 8), *(_DWORD *)(v228 + v226 + 8), *(_QWORD *)(a1 + 16));
        v229 = *(_QWORD *)(a1 + 16);
        v230 = *(_QWORD *)(v228 + v226);
        v231 = *(unsigned int *)(v229 + 8);
        if (v231 >= *(unsigned int *)(v229 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v231 = *(unsigned int *)(v229 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v229 + 8 * v231) = v230 & 1;
        ++*(_DWORD *)(v229 + 8);
        v232 = *(_QWORD *)(v228 + v226);
        v233 = *(_QWORD *)(a1 + 16);
        if ((v232 & 2) != 0)
          v234 = 2;
        else
          v234 = 3;
        if ((v232 & 0xFFFFFFFFFFFFFFFCLL) == 4)
          v235 = (v232 & 2) >> 1;
        else
          v235 = v234;
        if (v232 >= 4)
          v236 = v235;
        else
          v236 = 4;
        v237 = *(unsigned int *)(v233 + 8);
        if (v237 >= *(unsigned int *)(v233 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v237 = *(unsigned int *)(v233 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v233 + 8 * v237) = v236;
        ++*(_DWORD *)(v233 + 8);
        v238 = *(_QWORD *)(v228 + v226);
        if (v238 >= 4 && (v238 & 0xFFFFFFFFFFFFFFFCLL) != 4)
        {
          v239 = v238 & 0xFFFFFFFFFFFFFFF8;
          if (v239)
          {
            if ((*(_DWORD *)(v239 + 28) & 0x7Fu) - 60 >= 7)
              v240 = 0;
            else
              v240 = v239;
          }
          else
          {
            v240 = 0;
          }
          sub_22E7CA8EC(*(_QWORD *)(a1 + 8), v240, *(_QWORD *)(a1 + 16));
          result = sub_22E7C9A94(*(_QWORD *)(a1 + 8), *(_DWORD *)(v228 + v226 + 12), *(_QWORD *)(a1 + 16));
        }
        v226 += 16;
      }
      while (v227 != v226);
    }
  }
  return result;
}

uint64_t sub_22E7E37E0(uint64_t result, uint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v3 = *(_DWORD *)(*(_QWORD *)(result + 16) + 8);
  v4 = *(_DWORD *)(result + 176);
  if (v4 >= *(_DWORD *)(result + 180))
  {
    v7 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v7;
    v4 = *(_DWORD *)(v7 + 176);
  }
  *(_DWORD *)(*(_QWORD *)(result + 168) + 4 * v4) = v3;
  ++*(_DWORD *)(result + 176);
  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a2;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

void sub_22E7E3894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int *)(a2 + 8);
  v6 = *(_DWORD *)(v4 + 8);
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v6) = v5;
  ++*(_DWORD *)(v4 + 8);
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 24 * v7;
    do
    {
      v10 = (__int128 *)(*(_QWORD *)a2 + v8);
      v11 = *v10;
      v13 = *((_QWORD *)v10 + 2);
      v12 = v11;
      sub_22E7EC0BC(a1, (unsigned int *)&v12);
      v8 += 24;
    }
    while (v9 != v8);
  }
}

uint64_t sub_22E7E394C(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *a2;
  v3 = *(_QWORD *)(result + 16);
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    v15 = result;
    v16 = *a2;
    v9 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    result = v15;
    v2 = v16;
    a2 = v9;
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  v5 = *a2;
  if (*a2 == 2)
    return sub_22E7ECAD0(result, *((unint64_t **)a2 + 1), *((_QWORD *)a2 + 2));
  if (v5 - 6 > 2)
  {
    if (v5 == 9)
    {
      v6 = *((_QWORD *)a2 + 4);
      v7 = *(_QWORD *)(result + 16);
      v8 = *(_QWORD *)(result + 8);
    }
    else
    {
      if (v5 != 10)
        return result;
      v13 = result;
      v14 = a2;
      sub_22E7CA8EC(*(_QWORD *)(result + 8), *((_QWORD *)a2 + 4), *(_QWORD *)(result + 16));
      v6 = *((_QWORD *)v14 + 5);
      v8 = *(_QWORD *)(v13 + 8);
      v7 = *(_QWORD *)(v13 + 16);
    }
    return sub_22E7CA8EC(v8, v6, v7);
  }
  v10 = *((_QWORD *)a2 + 3);
  v11 = *(_DWORD *)(result + 32);
  v12 = result;
  if (v11 >= *(_DWORD *)(result + 36))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(v12 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8 * v11) = v10;
  ++*(_DWORD *)(v12 + 32);
  return result;
}

uint64_t sub_22E7E3AA4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  __n128 v14;
  unint64_t v15;

  if (a2 < 0x10)
    return 0;
  v2 = a2 & 7;
  v4 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 8) == 0)
  {
    v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    if (v5)
      v6 = *(_BYTE *)(v5 + 16) == 11;
    else
      v6 = 0;
    if (v6)
    {
      v8 = sub_22E750684(v5);
      if (v8 == -1)
        return 0xFFFFFFFFLL;
      else
        return v2 | (8 * v8);
    }
    v7 = *(_QWORD *)(a1 + 40);
    if (v4 == *(_QWORD *)(v7 + 18568))
      return v2 | 0xF8;
    if (v4 == *(_QWORD *)(v7 + 18576))
      return v2 | 0x100;
  }
  v15 = a2 & 0xFFFFFFFFFFFFFFF8;
  if (v4 >= 0x10)
  {
    v9 = sub_22E7EE5E0(a1 + 296, (uint64_t *)&v15);
    v10 = *(_DWORD *)(v9 + 8);
    if (!v10)
    {
      if (*(_BYTE *)(a1 + 122))
        return v2;
      v12 = v9;
      v13 = *(_DWORD *)(a1 + 292);
      *(_DWORD *)(a1 + 292) = v13 + 1;
      *(_DWORD *)(v9 + 8) = v13;
      v14.n128_u64[0] = v4;
      v14.n128_u8[8] = 1;
      sub_22E7F1A00((_QWORD *)(a1 + 152), &v14);
      v10 = *(_DWORD *)(v12 + 8);
    }
    if (v10 == -1)
      return 0xFFFFFFFFLL;
    else
      return v2 | (8 * v10);
  }
  return v2;
}

uint64_t sub_22E7E3BB4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  int *v7;
  _DWORD *v8;
  int v9;

  if ((_DWORD)a2)
  {
    if ((a2 & 0x80000000) == 0)
    {
      v2 = a1[215];
      v3 = a1[216];
      if (v2 != v3)
      {
        v4 = (v3 - v2) >> 2;
        v5 = (_DWORD *)a1[215];
        do
        {
          v6 = v4 >> 1;
          v7 = &v5[v4 >> 1];
          v9 = *v7;
          v8 = v7 + 1;
          v4 += ~(v4 >> 1);
          if (v9 < (int)a2)
            v5 = v8;
          else
            v4 = v6;
        }
        while (v4);
        return (a2 - *(_DWORD *)(a1[218] + (((unint64_t)v5 - v2) & 0x3FFFFFFFCLL)));
      }
    }
  }
  return a2;
}

uint64_t sub_22E7E3C1C(_QWORD *a1, unsigned int a2)
{
  char *v2;
  char *v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;

  v2 = (char *)a1[221];
  v3 = (char *)a1[222];
  if (v2 == v3 || *(_DWORD *)(*(_QWORD *)(a1[6] + 88) + 220) <= a2)
    return 0;
  if ((*((_DWORD *)v3 - 1) & 0x7FFFFFFFu) >= a2)
  {
    if ((*(_DWORD *)v2 & 0x7FFFFFFFu) <= a2)
    {
      v7 = (v3 - v2) >> 3;
      v8 = a1[221];
      do
      {
        v9 = v7 >> 1;
        v10 = v8 + 8 * (v7 >> 1);
        v11 = *(_DWORD *)(v10 + 4) & 0x7FFFFFFF;
        v12 = v10 + 8;
        v7 += ~(v7 >> 1);
        if (v11 < a2)
          v8 = v12;
        else
          v7 = v9;
      }
      while (v7);
      v13 = v8 - (_QWORD)v2;
      v5 = a1 + 224;
      v6 = (v13 >> 3);
      return *(unsigned int *)(*v5 + 4 * v6);
    }
    return 0;
  }
  v5 = a1 + 225;
  v6 = -1;
  return *(unsigned int *)(*v5 + 4 * v6);
}

uint64_t sub_22E7E3CC8(llvm::APFloatBase *a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;

  v3 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (llvm::APFloatBase::PPCDoubleDouble(a1) == v4)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v3);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt(v3);
  result = sub_22E7EBE98((uint64_t)a1, (uint64_t)&v6);
  if (v7 >= 0x41)
  {
    result = v6;
    if (v6)
      return MEMORY[0x2348A0E84](v6, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_22E7E3D58(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;

  v4 = result;
  switch(a2)
  {
    case 1:
      result = sub_22E7D2E84(result, *a3 & 0xFFFFFFFFFFFFFFFCLL);
      break;
    case 5:
      sub_22E7E3E60(result, *(_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFFCLL), *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFCLL) + 8));
      v7 = *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFFCLL) + 16);
      goto LABEL_7;
    case 6:
      sub_22E7E3E60(result, *(_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFFCLL), *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFCLL) + 8));
      sub_22E7C9A94(*(_QWORD *)(v4 + 8), *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFFCLL) + 16), *(_QWORD *)(v4 + 16));
      v7 = *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFFCLL) + 20);
LABEL_7:
      result = sub_22E7C9A94(*(_QWORD *)(v4 + 8), v7, *(_QWORD *)(v4 + 16));
      break;
    case 7:
      v5 = *a3 & 0xFFFFFFFFFFFFFFFCLL;
      v6 = *(_DWORD *)(result + 32);
      if (v6 >= *(_DWORD *)(result + 36))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = *(_DWORD *)(v4 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v6) = v5;
      ++*(_DWORD *)(v4 + 32);
      break;
    default:
      return result;
  }
  return result;
}

void sub_22E7E3E60(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int i;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[17];

  v39[16] = *MEMORY[0x24BDAC8D0];
  v37 = v39;
  v38 = 0x800000000;
  if (a2)
  {
    v5 = a2;
    LODWORD(v6) = 0;
    do
    {
      if (v6 >= HIDWORD(v38))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v6) = v38;
      }
      v7 = (unint64_t *)((char *)v37 + 16 * v6);
      *v7 = v5;
      v7[1] = a3;
      v6 = (v38 + 1);
      LODWORD(v38) = v38 + 1;
      v5 = *(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v6;
  ++*(_DWORD *)(v8 + 8);
  for (i = v38; (_DWORD)v38; i = v38)
  {
    LODWORD(v38) = i - 1;
    v11 = *((_OWORD *)v37 + i - 1);
    v36 = v11;
    v12 = v11;
    v13 = *(_QWORD *)(v11 + 16);
    if (v13)
    {
      v14 = (*(_QWORD *)(v11 + 8) >> 1) & 3;
      if (v14 == 2)
      {
        v14 = 3;
      }
      else if (v14 == 1)
      {
        v33 = *(_DWORD *)(v13 + 28) & 0x7F;
        v34 = v33 - 35;
        if (v33 == 16)
          v35 = 1;
        else
          v35 = 2;
        if (v34 >= 3)
          v14 = v35;
        else
          v14 = 6;
      }
      else if (v14)
      {
        v14 = 4;
      }
    }
    else
    {
      v14 = 5;
    }
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(unsigned int *)(v15 + 8);
    if (v16 >= *(unsigned int *)(v15 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v16 = *(unsigned int *)(v15 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v15 + 8 * v16) = v14;
    ++*(_DWORD *)(v15 + 8);
    switch(v14)
    {
      case 0:
        if ((*(_BYTE *)(v12 + 8) & 6) != 0)
          v27 = 0;
        else
          v27 = *(_QWORD *)(v12 + 16);
        sub_22E7CA0D0(*(_DWORD **)(a1 + 8), v27, *(_QWORD *)(a1 + 16));
        goto LABEL_34;
      case 1:
        if ((*(_QWORD *)(v12 + 8) & 6) != 2)
          goto LABEL_38;
        v25 = *(_QWORD *)(v12 + 16);
        v26 = (*(_DWORD *)(v25 + 28) & 0x7F) == 16;
        goto LABEL_27;
      case 2:
        if ((*(_QWORD *)(v12 + 8) & 6) == 2)
        {
          v25 = *(_QWORD *)(v12 + 16);
          v26 = (*(_DWORD *)(v25 + 28) & 0x7F) == 17;
LABEL_27:
          if (v26)
            v28 = v25;
          else
            v28 = 0;
        }
        else
        {
LABEL_38:
          v28 = 0;
        }
        goto LABEL_31;
      case 3:
      case 4:
        v17 = *(_QWORD *)(a1 + 16);
        v18 = *(unsigned int *)(v17 + 8);
        if (v18 >= *(unsigned int *)(v17 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v18 = *(unsigned int *)(v17 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v14 == 4;
        ++*(_DWORD *)(v17 + 8);
        v19 = sub_22F0AB4E0((uint64_t)&v36);
        sub_22E7E1FB4(*(_QWORD *)(a1 + 8), v19, *(_QWORD *)(a1 + 16));
        v20 = sub_22F0AB4E0((uint64_t)&v36);
        sub_22E7E42B4(a1, v20, v21);
        goto LABEL_20;
      case 5:
LABEL_20:
        v22 = sub_22F0AB364((uint64_t *)&v36) >> 32;
        v23 = *(_QWORD *)(a1 + 8);
        v24 = *(_QWORD *)(a1 + 16);
        goto LABEL_35;
      case 6:
        v28 = sub_22F0AABF8(v12);
LABEL_31:
        sub_22E7CA8EC(*(_QWORD *)(a1 + 8), v28, *(_QWORD *)(a1 + 16));
LABEL_34:
        v29 = sub_22F0AB364((uint64_t *)&v36);
        v30 = *(_QWORD *)(a1 + 8);
        v31 = *(_QWORD *)(a1 + 16);
        v32 = HIDWORD(v29);
        sub_22E7C9A94(v30, v29, v31);
        v23 = v30;
        LODWORD(v22) = v32;
        v24 = v31;
LABEL_35:
        sub_22E7C9A94(v23, v22, v24);
        break;
      default:
        continue;
    }
  }
  if (v37 != v39)
    free(v37);
}

void sub_22E7E41DC(uint64_t a1, __int128 *a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  sub_22E7EC0BC(a1, (unsigned int *)&v14);
  v4 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 != 7)
    goto LABEL_2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v7 = v5 == v6;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    v12 = v5 == v6;
    v13 = *(_QWORD *)(a1 + 16);
    v10 = *((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v11 = *((_QWORD *)a2 + 1);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v11;
    v7 = v12;
    v6 = v10;
    v8 = v13;
    v9 = *(_DWORD *)(v13 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  if (v5 != v6)
  {
    v4 = *(_DWORD *)a2;
LABEL_2:
    *(_QWORD *)&v14 = *((_QWORD *)a2 + 3);
    sub_22E7E3D58(a1, v4, &v14);
  }
}

uint64_t sub_22E7E42B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a2)
  {
    v2 = a2;
    do
    {
      if ((v2 & 0xF) == 0)
        __asm { BR              X9 }
      result = sub_22F115B7C(v2);
      v2 = result;
    }
    while (result);
  }
  return result;
}

void sub_22E7E4BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  unsigned int *v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  _DWORD *v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  _DWORD *v44;
  unint64_t v45;
  int v46;

  v3 = *(_DWORD *)(a2 + 24);
  if (v3)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    if ((v6 & 4) != 0)
      v7 = *(_QWORD *)(v7 + 8);
    v8 = *(_WORD *)(v7 + 8) & 0x7F;
    v9 = v8 == 83 || v8 == 16;
    if (v9 && (*(_DWORD *)(a2 + 28) & 0x7F) != 0x20 && (*(_DWORD *)(a2 + 28) & 0x7F) != 0x40)
    {
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_QWORD *)(v10 + 1992);
      if (v3 < 0)
        v3 = sub_22F423AE4(*(_QWORD *)(v10 + 1992), *(_DWORD *)(a2 + 24));
      v12 = sub_22E677168(v11, v3);
      v13 = v12;
      v46 = v12;
      if ((_DWORD)v12)
      {
        v14 = *(_DWORD *)(a1 + 280);
        if (v14)
        {
          v15 = *(_QWORD *)(a1 + 264);
          v16 = v14 - 1;
          v17 = v16 & v12;
          v18 = (_DWORD *)(v15 + 16 * (v16 & v12));
          v19 = *v18;
          if (*v18 == (_DWORD)v12)
          {
LABEL_16:
            v20 = *((_QWORD *)v18 + 1);
            if (!v20)
            {
              v20 = operator new();
              bzero((void *)(v20 + 16), 0x208uLL);
              *(_QWORD *)v20 = v20 + 16;
              *(_QWORD *)(v20 + 8) = 0x4000000000;
              v21 = (void **)*((_QWORD *)v18 + 1);
              *((_QWORD *)v18 + 1) = v20;
              if (v21)
              {
                if (*v21 != v21 + 2)
                  free(*v21);
                MEMORY[0x2348A0E9C](v21, 0x1080C40B1E5C937);
                v20 = *((_QWORD *)v18 + 1);
              }
            }
            v22 = HIDWORD(v13);
            v23 = *(unsigned int *)(v20 + 8);
            if ((_DWORD)v23
              && (v24 = *(char **)v20, v25 = *(_QWORD *)v20 + 8 * v23, *(_DWORD *)(v25 - 8) > v22))
            {
              v26 = *(unsigned int *)(v20 + 8);
              v27 = *(char **)v20;
              do
              {
                v28 = v26 >> 1;
                v29 = (unsigned int *)&v27[8 * (v26 >> 1)];
                v31 = *v29;
                v30 = (char *)(v29 + 2);
                v26 += ~(v26 >> 1);
                if (v31 > v22)
                  v26 = v28;
                else
                  v27 = v30;
              }
              while (v26);
              if ((char *)v25 != v27)
              {
                v32 = (v27 - v24) >> 3;
                if (v23 >= *(_DWORD *)(v20 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v24 = *(char **)v20;
                  v23 = *(unsigned int *)(v20 + 8);
                }
                v33 = &v24[8 * v32];
                *(_QWORD *)&v24[8 * v23] = *(_QWORD *)&v24[8 * v23 - 8];
                v34 = *(unsigned int *)(v20 + 8);
                v35 = (char *)(*(_QWORD *)v20 + 8 * v34 - 8);
                if (v35 != v33)
                {
                  v36 = *(_QWORD *)v20 + 8 * v34 - 8;
                  do
                  {
                    v37 = *(_DWORD *)(v36 - 8);
                    v36 -= 8;
                    v38 = *((_DWORD *)v35 - 1);
                    *(_DWORD *)v35 = v37;
                    *((_DWORD *)v35 + 1) = v38;
                    v35 = (char *)v36;
                  }
                  while ((char *)v36 != v33);
                }
                *(_DWORD *)(v20 + 8) = v34 + 1;
                *(_DWORD *)v33 = v22;
                *((_DWORD *)v33 + 1) = a3;
                return;
              }
              v45 = v22 | (a3 << 32);
              if (v23 >= *(_DWORD *)(v20 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v24 = *(char **)v20;
                v23 = *(unsigned int *)(v20 + 8);
              }
              *(_QWORD *)&v24[8 * v23] = v45;
            }
            else
            {
              v39 = v22 | (a3 << 32);
              if (v23 >= *(_DWORD *)(v20 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                LODWORD(v23) = *(_DWORD *)(v20 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v20 + 8 * v23) = v39;
            }
            ++*(_DWORD *)(v20 + 8);
            return;
          }
          v40 = 0;
          v41 = 1;
          while (v19)
          {
            if (v40)
              v42 = 0;
            else
              v42 = v19 == -1;
            if (v42)
              v40 = v18;
            v43 = v17 + v41++;
            v17 = v43 & v16;
            v18 = (_DWORD *)(v15 + 16 * v17);
            v19 = *v18;
            if (*v18 == (_DWORD)v12)
              goto LABEL_16;
          }
          if (v40)
            v44 = v40;
          else
            v44 = v18;
        }
        else
        {
          v44 = 0;
        }
        v18 = sub_22F2D34F0(a1 + 264, &v46, v44);
        *v18 = v13;
        *((_QWORD *)v18 + 1) = 0;
        goto LABEL_16;
      }
    }
  }
}

uint64_t sub_22E7E4EBC(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;

  v4 = (uint64_t *)(a1 + 664);
  v15 = a2;
  v16 = 0;
  v5 = sub_22F25AFD8((uint64_t *)(a1 + 664), &v15, &v16);
  v6 = v16;
  if (!v5)
    v6 = *(_QWORD *)(a1 + 664) + 16 * *(unsigned int *)(a1 + 680);
  if (v6 == *(_QWORD *)(a1 + 664) + 16 * *(unsigned int *)(a1 + 680))
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = v7 & 0xFFFFFFFFFFFFFFF8;
    if ((v7 & 4) != 0)
      v8 = *(_QWORD *)(v8 + 8);
    if ((*(_WORD *)(v8 + 8) & 0x80) != 0)
      sub_22EFCC320(v8);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = 0;
      while (1)
      {
        v11 = *(_DWORD *)(v9 + 28) & 0x7F;
        if (v11 != 8)
          break;
        v13 = *(_QWORD *)(v9 + 40);
        if ((v13 & 4) == 0)
        {
          v12 = v13 & 0xFFFFFFFFFFFFFFF8;
          if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v11 = *(_DWORD *)(v12 + 28) & 0x7F;
            goto LABEL_12;
          }
        }
LABEL_15:
        v9 = *(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (!v9)
          goto LABEL_20;
      }
      v12 = v9;
LABEL_12:
      if ((v11 - 13) <= 0x3D && sub_22E750738(v12))
      {
        v16 = v12;
        *((_DWORD *)sub_22E4D1AD8(v4, &v16) + 2) = v10++;
      }
      goto LABEL_15;
    }
LABEL_20:
    v15 = a2;
    v16 = 0;
    if ((sub_22F25AFD8(v4, &v15, &v16) & 1) != 0)
      v6 = v16;
    else
      v6 = *(_QWORD *)(a1 + 664) + 16 * *(unsigned int *)(a1 + 680);
  }
  return *(unsigned int *)(v6 + 8);
}

uint64_t sub_22E7E5008(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3 & 7;
  if (v3 == 7)
  {
    v4 = *(_DWORD *)(a3 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >= 3)
      v4 = 3;
    v3 = v4 | 8;
  }
  if ((v3 - 3) < 3)
    return sub_22E7D2E84(result, *(unint64_t **)a2);
  if (v3 == 6)
  {
    v5 = *(_DWORD *)(a2 + 4);
    v6 = *(_QWORD *)(result + 8);
    v7 = *(_QWORD *)(result + 16);
    sub_22E7C9A94(v6, *(_DWORD *)a2, v7);
    return sub_22E7C9A94(v6, v5, v7);
  }
  else if (v3 == 9)
  {
    return sub_22E7C9A94(*(_QWORD *)(result + 8), *(_DWORD *)a2, *(_QWORD *)(result + 16));
  }
  return result;
}

uint64_t sub_22E7E50C0(uint64_t a1, uint64_t a2)
{
  sub_22E7EC5E4(a1, *(_QWORD *)a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 8), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 16));
  return sub_22E7E5008(a1, a2 + 16, *(_QWORD *)a2);
}

uint64_t sub_22E7E5100(uint64_t a1, int *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  sub_22E7C9A94(*(_QWORD *)(a1 + 8), *a2, *(_QWORD *)(a1 + 16));
  sub_22E7C9A94(*(_QWORD *)(a1 + 8), a2[1], *(_QWORD *)(a1 + 16));
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 8), a2[2], *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  v6 = a2[3] & 0x1FFFFFFF;
  v7 = *(_DWORD *)(v5 + 8);
  if (v7 >= *(_DWORD *)(v5 + 12))
  {
    v19 = *(_QWORD *)(a1 + 16);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v19;
    v7 = *(_DWORD *)(v19 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v7) = v6;
  ++*(_DWORD *)(v5 + 8);
  v8 = a2[3];
  if ((v8 & 0x1FFFFFFF) != 0)
  {
    v9 = 8 * (v8 & 0x1FFFFFFF);
    v10 = (unint64_t *)(a2 + 4);
    do
    {
      v11 = *v10++;
      result = sub_22E7CA8EC(*(_QWORD *)(a1 + 8), v11, *(_QWORD *)(a1 + 16));
      v9 -= 8;
    }
    while (v9);
    v8 = a2[3];
  }
  if ((v8 & 0x40000000) != 0 && (v15 = *(_QWORD *)&a2[2 * (v8 & 0x1FFFFFFF) + 4]) != 0)
  {
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 8);
    if (v17 >= *(_DWORD *)(v16 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = *(_DWORD *)(v16 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v16 + 8 * v17) = 1;
    ++*(_DWORD *)(v16 + 8);
    v18 = *(_DWORD *)(a1 + 32);
    if (v18 >= *(_DWORD *)(a1 + 36))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(_DWORD *)(a1 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v18) = v15;
    v14 = (_DWORD *)(a1 + 32);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v14 = (_DWORD *)(v12 + 8);
    v13 = *(_DWORD *)(v12 + 8);
    if (v13 >= *(_DWORD *)(v12 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(_DWORD *)(v12 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = 0;
  }
  ++*v14;
  return result;
}

void sub_22E7E52C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;

  sub_22E7C9A94(*(_QWORD *)(a1 + 8), *(_DWORD *)a2, *(_QWORD *)(a1 + 16));
  sub_22E7C9A94(*(_QWORD *)(a1 + 8), *(_DWORD *)(a2 + 4), *(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int *)(a2 + 8);
  v6 = *(_DWORD *)(v4 + 8);
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    v10 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned int *)(a2 + 8);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v9;
    v4 = v10;
    v6 = *(_DWORD *)(v10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v6) = v5;
  ++*(_DWORD *)(v4 + 8);
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    v8 = (__int128 *)(a2 + 16);
    do
    {
      sub_22E7E41DC(a1, v8);
      v8 += 2;
      --v7;
    }
    while (v7);
  }
}

uint64_t sub_22E7E5388(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = result;
  v3 = *(_QWORD *)(result + 16);
  v4 = ((a2[1] - *a2) >> 3);
  v5 = *(_DWORD *)(v3 + 8);
  if (v5 >= *(_DWORD *)(v3 + 12))
  {
    v13 = *(_QWORD *)(result + 16);
    v11 = a2;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v3 = v13;
    a2 = v11;
    v5 = *(_DWORD *)(v13 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v5) = v4;
  ++*(_DWORD *)(v3 + 8);
  v6 = (uint64_t *)*a2;
  v7 = (uint64_t *)a2[1];
  while (v6 != v7)
  {
    result = sub_22E7CA8EC(*(_QWORD *)(v2 + 8), *v6 & 0xFFFFFFFFFFFFFFFCLL, *(_QWORD *)(v2 + 16));
    v8 = *(_QWORD *)(v2 + 16);
    v9 = *v6;
    v10 = *(unsigned int *)(v8 + 8);
    if (v10 >= *(unsigned int *)(v8 + 12))
    {
      v12 = *v6;
      v14 = *(_QWORD *)(v2 + 16);
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      LOBYTE(v9) = v12;
      v8 = v14;
      v10 = *(unsigned int *)(v14 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v10) = v9 & 3;
    ++*(_DWORD *)(v8 + 8);
    ++v6;
  }
  return result;
}

uint64_t sub_22E7E5488(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a2 + 12) & 1;
  v6 = *(_DWORD *)(v4 + 8);
  if (v6 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v6) = v5;
  ++*(_DWORD *)(v4 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = ((unint64_t)*(unsigned __int8 *)(a2 + 12) >> 1) & 1;
  v9 = *(_DWORD *)(v7 + 8);
  if (v9 >= *(_DWORD *)(v7 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v7 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v9) = v8;
  ++*(_DWORD *)(v7 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = ((unint64_t)*(unsigned __int8 *)(a2 + 12) >> 2) & 3;
  v12 = *(_DWORD *)(v10 + 8);
  if (v12 >= *(_DWORD *)(v10 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v10 + 8 * v12) = v11;
  ++*(_DWORD *)(v10 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(unsigned __int8 *)(a2 + 12);
  v15 = *(_DWORD *)(v13 + 8);
  if (v15 >= *(_DWORD *)(v13 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(v13 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v13 + 8 * v15) = (v14 >> 4) & 1;
  ++*(_DWORD *)(v13 + 8);
  sub_22E7D2E84(a1, *(unint64_t **)(a2 + 16));
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = HIDWORD(*(_QWORD *)a2);
  sub_22E7C9A94(v16, *(_QWORD *)a2, v17);
  sub_22E7C9A94(v16, v18, v17);
  return sub_22E7C9A94(*(_QWORD *)(a1 + 8), *(_DWORD *)(a2 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t sub_22E7E5618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  void *v10;
  uint64_t v11;
  _BYTE v12[128];
  void *v13;
  uint64_t v14;
  _BYTE v15[32];
  void *v16[2];
  _QWORD v17[65];

  v17[64] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v16[0] = v17;
  v9[0] = *(_QWORD *)(v4 + 40);
  v9[1] = v4;
  v9[2] = v16;
  v10 = v12;
  v11 = 0x1000000000;
  v13 = v15;
  v14 = 0x800000000;
  v17[0] = a3;
  v16[1] = (void *)0x4000000001;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      sub_22E7E5488((uint64_t)v9, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  v7 = sub_22E7CA950((uint64_t)v9, 0x76u, 0);
  if (v13 != v15)
    free(v13);
  if (v10 != v12)
    free(v10);
  if (v16[0] != v17)
    free(v16[0]);
  return sub_22E7E37E0(a1, v7);
}

uint64_t sub_22E7E5758(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t i;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void **v17;
  unint64_t v18;
  unint64_t v19;
  void **v20;
  unint64_t v21;
  void **v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  unint64_t v28;
  uint64_t v29;
  void **v31;
  unint64_t v32;
  void **v33;
  unint64_t *v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[128];
  void *v42;
  uint64_t v43;
  _BYTE v44[32];
  void *v45[2];
  _QWORD v46[66];

  v46[64] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v45[0] = v46;
  v36 = *(_QWORD *)(v4 + 40);
  v37 = v4;
  v38 = v45;
  v39 = v41;
  v40 = 0x1000000000;
  v42 = v44;
  v43 = 0x800000000;
  v46[0] = a3;
  v45[1] = (void *)0x4000000001;
  if (a3)
  {
    for (i = 8 * a3; i; i -= 8)
    {
      v7 = *a2;
      v8 = **a2 & 6;
      if (v8 == 2)
      {
        v9 = v38;
        v10 = *((unsigned int *)v38 + 2);
        if (v10 >= *((unsigned int *)v38 + 3))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = *((unsigned int *)v9 + 2);
        }
        *((_QWORD *)*v9 + v10) = 2;
        ++*((_DWORD *)v9 + 2);
        v11 = *v7 & 0xFFFFFFFFFFFFFFF8;
        v12 = (*v7 & 6) == 2;
      }
      else
      {
        if (!v8)
        {
          v22 = v38;
          v23 = *((unsigned int *)v38 + 2);
          v24 = *((unsigned int *)v38 + 3);
          if ((*((_WORD *)v7 + 14) & 1) != 0)
          {
            v33 = v38;
            if (v23 >= v24)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v23 = *((unsigned int *)v33 + 2);
            }
            *((_QWORD *)*v33 + v23) = 1;
            ++*((_DWORD *)v33 + 2);
            if ((*v7 & 6) != 0)
              v34 = 0;
            else
              v34 = (unint64_t *)(*v7 & 0xFFFFFFFFFFFFFFF8);
            sub_22E7D2E84((uint64_t)&v36, v34);
          }
          else
          {
            if (v23 >= v24)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v23 = *((unsigned int *)v22 + 2);
            }
            *((_QWORD *)*v22 + v23) = 0;
            ++*((_DWORD *)v22 + 2);
            if ((*v7 & 6) != 0)
              v25 = 0;
            else
              v25 = (unint64_t *)(*v7 & 0xFFFFFFFFFFFFFFF8);
            sub_22E7D2E84((uint64_t)&v36, v25);
            v26 = *((unsigned __int16 *)v7 + 14);
            v27 = v38;
            v28 = *((unsigned int *)v38 + 2);
            if (v28 >= *((unsigned int *)v38 + 3))
            {
              v35 = v38;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = v35;
              v28 = *((unsigned int *)v35 + 2);
            }
            *((_QWORD *)*v27 + v28) = (v26 >> 1) & 1;
            ++*((_DWORD *)v27 + 2);
          }
          goto LABEL_11;
        }
        v31 = v38;
        v32 = *((unsigned int *)v38 + 2);
        if (v32 >= *((unsigned int *)v38 + 3))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = *((unsigned int *)v31 + 2);
        }
        *((_QWORD *)*v31 + v32) = 3;
        ++*((_DWORD *)v31 + 2);
        v11 = *v7 & 0xFFFFFFFFFFFFFFF8;
        v12 = (*v7 & 6) == 4;
      }
      if (v12)
        v13 = v11;
      else
        v13 = 0;
      sub_22E7CA8EC(v37, v13, (uint64_t)v38);
LABEL_11:
      sub_22E7C9A94(v37, *((_DWORD *)v7 + 4), (uint64_t)v38);
      v14 = v7[1];
      v15 = v40;
      if (v40 >= (unint64_t)HIDWORD(v40))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = v40;
      }
      *((_QWORD *)v39 + v15) = v14;
      LODWORD(v40) = v40 + 1;
      sub_22E7C9A94(v37, *((_DWORD *)v7 + 5), (uint64_t)v38);
      sub_22E7C9A94(v37, *((_DWORD *)v7 + 6), (uint64_t)v38);
      v16 = *((unsigned __int16 *)v7 + 14);
      v17 = v38;
      v18 = *((unsigned int *)v38 + 2);
      if (v18 >= *((unsigned int *)v38 + 3))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = *((unsigned int *)v17 + 2);
      }
      *((_QWORD *)*v17 + v18) = (v16 >> 2) & 1;
      ++*((_DWORD *)v17 + 2);
      v19 = *((unsigned __int16 *)v7 + 14);
      if ((v19 & 4) != 0)
      {
        v20 = v38;
        v21 = *((unsigned int *)v38 + 2);
        if (v21 >= *((unsigned int *)v38 + 3))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v21 = *((unsigned int *)v20 + 2);
        }
        *((_QWORD *)*v20 + v21) = v19 >> 3;
        ++*((_DWORD *)v20 + 2);
      }
      ++a2;
    }
  }
  v29 = sub_22E7CA950((uint64_t)&v36, 0x77u, 0);
  if (v42 != v44)
    free(v42);
  if (v39 != v41)
    free(v39);
  if (v45[0] != v46)
    free(v45[0]);
  return sub_22E7E37E0(a1, v29);
}

unsigned int *sub_22E7E5B78(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int *result;
  uint64_t v5;

  v5 = a3;
  result = (unsigned int *)sub_22E7D30BC(a1 + 352, &v5);
  if (*result < a2)
    *result = a2;
  return result;
}

uint64_t sub_22E7E5BBC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = a3;
  result = sub_22E7F14A0(a1 + 408, &v5);
  if (*(_DWORD *)(result + 8) < a2)
    *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_22E7E5C00(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  v5 = a3;
  result = sub_22E7EE5E0(a1 + 296, &v5);
  if (*(_DWORD *)(result + 8) <= a2)
    *(_DWORD *)(result + 8) = a2;
  return result;
}

double sub_22E7E5C44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  double result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((!v2 || !*(_BYTE *)(v2 + 7330))
    && (*(_DWORD *)(a2 + 28) & 0x8000) != 0
    && a2
    && (*(_DWORD *)(a2 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD)
  {
    v7 = a2;
    v3 = sub_22F2D07C8(a1 + 688, &v7);
    v4 = *(_DWORD *)(v3 + 8);
    if (v4 >= *(_DWORD *)(v3 + 12))
    {
      v6 = v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v3 = v6;
      v4 = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)&result = 6;
    *(_OWORD *)(*(_QWORD *)v3 + 16 * v4) = xmmword_22F45FC70;
    ++*(_DWORD *)(v3 + 8);
  }
  return result;
}

double sub_22E7E5CE4(uint64_t a1, uint64_t a2)
{
  return sub_22E7E5C44(a1 - 8, a2);
}

uint64_t sub_22E7E5CEC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int i;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;

  v4 = result;
  v29 = a2;
  v5 = *(_QWORD *)(result + 56);
  if (v5 && *(_BYTE *)(v5 + 7330))
    return result;
  v6 = *(_WORD *)(a2 + 8) & 0x7F;
  if (v6 == 16)
  {
    v7 = *(_DWORD *)(a3 + 28);
    if ((v7 & 0x1800000) == 0 && (*(_DWORD *)(a3 + 28) & 0x7F) != 29)
      return result;
  }
  else
  {
    if (v6 == 83)
      return result;
    v7 = *(_DWORD *)(a3 + 28);
  }
  if ((v7 & 0x8000) != 0)
    return result;
  v9 = -40;
  if ((*(_WORD *)(a2 + 8) & 0x7Fu) > 0x46)
  {
    if (v6 == 71)
    {
      v9 = -56;
      goto LABEL_27;
    }
    if (v6 == 81)
      goto LABEL_27;
LABEL_22:
    v10 = v6 - 52;
    v11 = v6 - 33 >= 5;
    v12 = -48;
    if (!v11)
      v12 = -64;
    if (v10 >= 6)
      v9 = v12;
    else
      v9 = -72;
    goto LABEL_27;
  }
  if (v6 > 0x18)
    goto LABEL_21;
  if (v6 != 16)
  {
    if (((1 << v6) & 0x1066) != 0)
      goto LABEL_27;
    if (v6 != 24)
    {
LABEL_21:
      if (v6 == 70)
      {
        v9 = -64;
        goto LABEL_27;
      }
      goto LABEL_22;
    }
  }
  v9 = -48;
LABEL_27:
  v13 = a2 + v9;
  if ((*(_DWORD *)(a2 + v9 + 28) & 0x8000) != 0)
    goto LABEL_58;
  if ((*(_DWORD *)(a2 + v9 + 28) & 0x7F) == 0x53)
  {
    v21 = a2 + v9;
  }
  else
  {
    v14 = *(_QWORD *)(v13 + 16);
    v15 = v14 & 0xFFFFFFFFFFFFFFF8;
    if ((v14 & 4) != 0)
      v15 = *(_QWORD *)v15;
    for (i = *(_WORD *)(v15 + 8) & 0x7F; i != 83; i = *(_WORD *)(v15 + 8) & 0x7F)
    {
      v17 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v17 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_42;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_41;
        if (i == 16)
          goto LABEL_35;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_48;
        if (i == 24)
        {
LABEL_35:
          v17 = -48;
        }
        else
        {
LABEL_41:
          if (i != 70)
          {
LABEL_42:
            v18 = i - 52;
            if ((i - 33) >= 5)
              v19 = -48;
            else
              v19 = -64;
            if (v18 >= 6)
              v17 = v19;
            else
              v17 = -72;
            goto LABEL_48;
          }
          v17 = -64;
        }
      }
LABEL_48:
      v20 = *(_QWORD *)(v15 + v17 + 16);
      v15 = v20 & 0xFFFFFFFFFFFFFFF8;
      if ((v20 & 4) != 0)
        v15 = *(_QWORD *)v15;
    }
    v21 = v15 - 40;
  }
  v22 = *(_QWORD *)(v21 + 88);
  v23 = *(_QWORD *)(v22 + 18584);
  if (!v23)
  {
    result = sub_22EF6D84C(v22);
    v23 = *(_QWORD *)(v22 + 18584);
  }
  if (v23 == v13)
  {
LABEL_58:
    result = sub_22E7CBFA4(v4 + 920, &v29);
    if (!(_DWORD)result)
    {
LABEL_75:
      v28 = *(_DWORD *)(v4 + 1208);
      if (v28 >= *(_DWORD *)(v4 + 1212))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = *(_DWORD *)(v4 + 1208);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 1200) + 8 * v28) = a3;
      ++*(_DWORD *)(v4 + 1208);
      return result;
    }
    v24 = v29;
    v25 = *(_WORD *)(v29 + 8);
    v26 = v25 & 0x7F;
    v27 = -40;
    if (v26 > 0x46)
    {
      switch(v26)
      {
        case 'S':
          goto LABEL_74;
        case 'G':
          v27 = -56;
          goto LABEL_74;
        case 'Q':
LABEL_74:
          if ((*(_BYTE *)(v29 + v27 + 29) & 0x80) == 0)
          {
            if ((v25 & 0x80) != 0)
              sub_22EFCC320(v29);
            result = sub_22F2D365C(v4 + 1200, *(_QWORD *)(v24 + 16));
          }
          goto LABEL_75;
      }
    }
    else
    {
      if (v26 <= 0x18)
      {
        if (v26 == 16)
        {
LABEL_62:
          v27 = -48;
          goto LABEL_74;
        }
        if (((1 << v26) & 0x1066) != 0)
          goto LABEL_74;
        if (v26 == 24)
          goto LABEL_62;
      }
      if (v26 == 70)
      {
LABEL_72:
        v27 = -64;
        goto LABEL_74;
      }
    }
    if (v26 - 52 >= 6)
    {
      if (v26 - 33 >= 5)
        goto LABEL_62;
      goto LABEL_72;
    }
    v27 = -72;
    goto LABEL_74;
  }
  return result;
}

uint64_t sub_22E7E604C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E5CEC(a1 - 8, a2, a3);
}

uint64_t sub_22E7E6054(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int i;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = result;
  v6 = *(_QWORD *)(result + 56);
  if (v6 && *(_BYTE *)(v6 + 7330))
    return result;
  v7 = *(_DWORD *)(a3 + 28);
  if ((v7 & 0x8000) != 0)
    return result;
  if ((*(_DWORD *)(a2 + 28) & 0x8000) != 0)
    goto LABEL_36;
  v8 = a2;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
  {
    v9 = *(_QWORD *)(a2 + 16);
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = *(_QWORD *)v10;
    for (i = *(_WORD *)(v10 + 8) & 0x7F; i != 83; i = *(_WORD *)(v10 + 8) & 0x7F)
    {
      v12 = -40;
      if (i > 70)
      {
        if (i == 71)
        {
          v12 = -56;
        }
        else if (i != 81)
        {
          goto LABEL_19;
        }
      }
      else
      {
        if (i > 0x18)
          goto LABEL_18;
        if (i == 16)
          goto LABEL_12;
        if (((1 << i) & 0x1066) != 0)
          goto LABEL_25;
        if (i == 24)
        {
LABEL_12:
          v12 = -48;
        }
        else
        {
LABEL_18:
          if (i != 70)
          {
LABEL_19:
            v13 = i - 52;
            if ((i - 33) >= 5)
              v14 = -48;
            else
              v14 = -64;
            if (v13 >= 6)
              v12 = v14;
            else
              v12 = -72;
            goto LABEL_25;
          }
          v12 = -64;
        }
      }
LABEL_25:
      v15 = *(_QWORD *)(v10 + v12 + 16);
      v10 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 4) != 0)
        v10 = *(_QWORD *)v10;
    }
    v8 = v10 - 40;
  }
  v16 = *(_QWORD *)(v8 + 88);
  v17 = *(_QWORD *)(v16 + 18584);
  if (!v17)
  {
    result = sub_22EF6D84C(v16);
    v17 = *(_QWORD *)(v16 + 18584);
  }
  if (v17 == a2)
  {
    v7 = *(_DWORD *)(a3 + 28);
LABEL_36:
    if ((v7 & 0x7Eu) - 54 <= 3)
    {
      v21 = a2;
      result = sub_22F2D07C8(v5 + 688, &v21);
      v18 = result;
      v19 = *(_DWORD *)(result + 8);
      if (v19 >= *(_DWORD *)(result + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v19 = *(_DWORD *)(v18 + 8);
      }
      v20 = (_QWORD *)(*(_QWORD *)v18 + 16 * v19);
      *v20 = 0;
      v20[1] = a3;
      ++*(_DWORD *)(v18 + 8);
    }
  }
  return result;
}

uint64_t sub_22E7E6234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E6054(a1 - 8, a2, a3);
}

uint64_t sub_22E7E623C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(result + 56);
  if (v2 && !*(_BYTE *)(v2 + 7330))
  {
    v3 = result;
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v5 = v4;
    if ((*(_BYTE *)(v4 + 29) & 0x80) != 0)
    {
      v19 = v4;
      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v6)
        v7 = *(_BYTE *)(v6 + 16) == 26;
      else
        v7 = 0;
      if (!v7)
        v6 = sub_22F10CF48(v6);
      if (((*(_QWORD *)(v6 + 16) >> 54) & 0xF) - 9 <= 1)
      {
        v8 = sub_22F2D07C8(v3 + 688, &v19);
        v9 = *(_DWORD *)(v8 + 8);
        if (v9 >= *(_DWORD *)(v8 + 12))
        {
          v18 = v8;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v8 = v18;
          v9 = *(_DWORD *)(v18 + 8);
        }
        *(_OWORD *)(*(_QWORD *)v8 + 16 * v9) = xmmword_22F45FC80;
        ++*(_DWORD *)(v8 + 8);
      }
    }
    v19 = 0;
    result = sub_22E78F2B0(*(_QWORD *)(v2 + 10744), *(_DWORD *)(v2 + 10760), v5, &v19);
    if ((_DWORD)result)
      v10 = v19 == *(_QWORD *)(v2 + 10744) + 32 * *(unsigned int *)(v2 + 10760);
    else
      v10 = 1;
    if (!v10)
    {
      v11 = *(unsigned int *)(v19 + 16);
      if ((_DWORD)v11)
      {
        v12 = *(unsigned int **)(v19 + 8);
        v13 = v3 + 688;
        v14 = 4 * v11;
        do
        {
          v19 = sub_22E779FD8(v2, *v12);
          result = *(_QWORD *)(*(_QWORD *)(v19 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (result)
            v15 = *(_BYTE *)(result + 16) == 26;
          else
            v15 = 0;
          if (!v15)
            result = sub_22F10CF48(result);
          if (((*(_QWORD *)(result + 16) >> 54) & 0xF) - 9 <= 1)
          {
            result = sub_22F2D07C8(v13, &v19);
            v16 = result;
            v17 = *(unsigned int *)(result + 8);
            if (v17 >= *(unsigned int *)(result + 12))
            {
              result = llvm::SmallVectorBase<unsigned int>::grow_pod();
              v17 = *(unsigned int *)(v16 + 8);
            }
            *(_OWORD *)(*(_QWORD *)v16 + 16 * v17) = xmmword_22F45FC80;
            ++*(_DWORD *)(v16 + 8);
          }
          ++v12;
          v14 -= 4;
        }
        while (v14);
      }
    }
  }
  return result;
}

uint64_t sub_22E7E6428(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)(result + 56);
  if (v3 && !*(_BYTE *)(v3 + 7330))
  {
    v5 = result;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v7 = v6;
    if ((*(_BYTE *)(v6 + 29) & 0x80) != 0)
    {
      v20 = v6;
      v8 = sub_22F2D07C8(v5 + 688, &v20);
      v9 = *(_DWORD *)(v8 + 8);
      if (v9 >= *(_DWORD *)(v8 + 12))
      {
        v19 = v8;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v19;
        v9 = *(_DWORD *)(v19 + 8);
      }
      v10 = (_QWORD *)(*(_QWORD *)v8 + 16 * v9);
      *v10 = 11;
      v10[1] = a3;
      ++*(_DWORD *)(v8 + 8);
    }
    v20 = 0;
    result = sub_22E78F2B0(*(_QWORD *)(v3 + 10744), *(_DWORD *)(v3 + 10760), v7, &v20);
    if ((_DWORD)result)
      v11 = v20 == *(_QWORD *)(v3 + 10744) + 32 * *(unsigned int *)(v3 + 10760);
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *(unsigned int *)(v20 + 16);
      if ((_DWORD)v12)
      {
        v13 = *(unsigned int **)(v20 + 8);
        v14 = v5 + 688;
        v15 = 4 * v12;
        do
        {
          v20 = sub_22E779FD8(v3, *v13);
          result = sub_22F2D07C8(v14, &v20);
          v16 = result;
          v17 = *(unsigned int *)(result + 8);
          if (v17 >= *(unsigned int *)(result + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v17 = *(unsigned int *)(v16 + 8);
          }
          v18 = (_QWORD *)(*(_QWORD *)v16 + 16 * v17);
          *v18 = 11;
          v18[1] = a3;
          ++*(_DWORD *)(v16 + 8);
          ++v13;
          v15 -= 4;
        }
        while (v15);
      }
    }
  }
  return result;
}

uint64_t sub_22E7E65AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)(result + 56);
  if (v3 && !*(_BYTE *)(v3 + 7330))
  {
    v5 = result;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v7 = v6;
    if ((*(_BYTE *)(v6 + 29) & 0x80) != 0)
    {
      v20 = v6;
      v8 = sub_22F2D07C8(v5 + 688, &v20);
      v9 = *(_DWORD *)(v8 + 8);
      if (v9 >= *(_DWORD *)(v8 + 12))
      {
        v19 = v8;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v19;
        v9 = *(_DWORD *)(v19 + 8);
      }
      v10 = (_QWORD *)(*(_QWORD *)v8 + 16 * v9);
      *v10 = 9;
      v10[1] = a3;
      ++*(_DWORD *)(v8 + 8);
    }
    v20 = 0;
    result = sub_22E78F2B0(*(_QWORD *)(v3 + 10744), *(_DWORD *)(v3 + 10760), v7, &v20);
    if ((_DWORD)result)
      v11 = v20 == *(_QWORD *)(v3 + 10744) + 32 * *(unsigned int *)(v3 + 10760);
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *(unsigned int *)(v20 + 16);
      if ((_DWORD)v12)
      {
        v13 = *(unsigned int **)(v20 + 8);
        v14 = v5 + 688;
        v15 = 4 * v12;
        do
        {
          v20 = sub_22E779FD8(v3, *v13);
          result = sub_22F2D07C8(v14, &v20);
          v16 = result;
          v17 = *(unsigned int *)(result + 8);
          if (v17 >= *(unsigned int *)(result + 12))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v17 = *(unsigned int *)(v16 + 8);
          }
          v18 = (_QWORD *)(*(_QWORD *)v16 + 16 * v17);
          *v18 = 9;
          v18[1] = a3;
          ++*(_DWORD *)(v16 + 8);
          ++v13;
          v15 -= 4;
        }
        while (v15);
      }
    }
  }
  return result;
}

double sub_22E7E6730(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  double result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((!v2 || !*(_BYTE *)(v2 + 7330)) && (*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    v7 = a2;
    v3 = sub_22F2D07C8(a1 + 688, &v7);
    v4 = *(_DWORD *)(v3 + 8);
    if (v4 >= *(_DWORD *)(v3 + 12))
    {
      v6 = v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v3 = v6;
      v4 = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)&result = 3;
    *(_OWORD *)(*(_QWORD *)v3 + 16 * v4) = xmmword_22F45FC90;
    ++*(_DWORD *)(v3 + 8);
  }
  return result;
}

double sub_22E7E67C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  double result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((!v2 || !*(_BYTE *)(v2 + 7330)) && (*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    v7 = a2;
    v3 = sub_22F2D07C8(a1 + 688, &v7);
    v4 = *(_DWORD *)(v3 + 8);
    if (v4 >= *(_DWORD *)(v3 + 12))
    {
      v6 = v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v3 = v6;
      v4 = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)&result = 4;
    *(_OWORD *)(*(_QWORD *)v3 + 16 * v4) = xmmword_22F45F9F0;
    ++*(_DWORD *)(v3 + 8);
  }
  return result;
}

double sub_22E7E6850(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  double result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  if ((!v2 || !*(_BYTE *)(v2 + 7330)) && (*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    v7 = a2;
    v3 = sub_22F2D07C8(a1 + 688, &v7);
    v4 = *(_DWORD *)(v3 + 8);
    if (v4 >= *(_DWORD *)(v3 + 12))
    {
      v6 = v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v3 = v6;
      v4 = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)&result = 3;
    *(_OWORD *)(*(_QWORD *)v3 + 16 * v4) = xmmword_22F45FC90;
    ++*(_DWORD *)(v3 + 8);
  }
  return result;
}

uint64_t sub_22E7E68E0(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  unint64_t v14;

  v3 = result;
  v4 = *(_QWORD *)(result + 56);
  if ((!v4 || !*(_BYTE *)(v4 + 7330)) && (*(_DWORD *)(a2 + 28) & 0x8000) != 0)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
    {
      v9 = sub_22EFBE4A0(a2);
    }
    else
    {
      v5 = *(_QWORD *)(a2 + 144) & 6;
      v6 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if (v5 == 4 && v6 != 0)
      {
        v10 = (unsigned int *)(v6 + 40);
LABEL_18:
        v9 = *v10;
        goto LABEL_19;
      }
      if (v5 == 2 && v6 != 0)
      {
        v10 = (unsigned int *)(v6 + 8);
        goto LABEL_18;
      }
      v9 = 0;
    }
LABEL_19:
    v14 = a2;
    result = sub_22F2D07C8(v3 + 688, (uint64_t *)&v14);
    v11 = result;
    v12 = *(_DWORD *)(result + 8);
    if (v12 >= *(_DWORD *)(result + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(v11 + 8);
    }
    v13 = (_QWORD *)(*(_QWORD *)v11 + 16 * v12);
    *v13 = 5;
    v13[1] = v9;
    ++*(_DWORD *)(v11 + 8);
  }
  return result;
}

uint64_t sub_22E7E69E8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(result + 56);
  if ((!v3 || !*(_BYTE *)(v3 + 7330)) && (*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    v7 = a2;
    result = sub_22F2D07C8(result + 688, &v7);
    v4 = *(_DWORD *)(result + 8);
    if (v4 >= *(_DWORD *)(result + 12))
    {
      v6 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      result = v6;
      v4 = *(_DWORD *)(v6 + 8);
    }
    v5 = (_QWORD *)(*(_QWORD *)result + 16 * v4);
    *v5 = 7;
    v5[1] = a2;
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_22E7E6A84(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    v6 = a2;
    result = sub_22F2D07C8(result + 688, &v6);
    v3 = *(_DWORD *)(result + 8);
    if (v3 >= *(_DWORD *)(result + 12))
    {
      v5 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      result = v5;
      v3 = *(_DWORD *)(v5 + 8);
    }
    v4 = (_QWORD *)(*(_QWORD *)result + 16 * v3);
    *v4 = 8;
    v4[1] = a2;
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_22E7E6B0C(uint64_t a1, uint64_t a2)
{
  return sub_22E7E6A84(a1 - 8, a2);
}

BOOL sub_22E7E6B14(_BOOL8 result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(result + 56);
  if ((!v4 || !*(_BYTE *)(v4 + 7330)) && (*(_BYTE *)(a3 + 29) & 0x80) != 0)
  {
    v5 = (_QWORD *)(result + 1344);
    v6 = *(_QWORD *)(a3 + 120);
    if (!v6)
    {
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a3 + 96) + 88), *(_QWORD *)(a3 + 96));
      v6 = *(_QWORD *)(a3 + 120);
    }
    if (v6 < 8)
      v7 = 0;
    else
      v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8);
    v8 = v7;
    return sub_22E77A874(v5, &v8);
  }
  return result;
}

double sub_22E7E6B98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v9 = a2;
  v3 = *(_QWORD *)(a1 + 56);
  if (!v3 || !*(_BYTE *)(v3 + 7330))
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    if (v4)
    {
      v5 = v4;
      while (!sub_22E7E6C6C(a1, v5))
      {
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
        if (!v5)
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      v7 = sub_22F2D07C8(a1 + 688, &v9);
      v8 = *(_DWORD *)(v7 + 8);
      if (v8 >= *(_DWORD *)(v7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = *(_DWORD *)(v7 + 8);
      }
      *(_QWORD *)&result = 12;
      *(_OWORD *)(*(_QWORD *)v7 + 16 * v8) = xmmword_22F45FCA0;
      ++*(_DWORD *)(v7 + 8);
    }
  }
  return result;
}

BOOL sub_22E7E6C6C(uint64_t a1, uint64_t a2)
{
  int v3;
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a2 + 29) & 0x80) != 0)
    return 0;
  v5 = a2;
  v6 = 0;
  v3 = sub_22F25AFD8((uint64_t *)(a1 + 208), &v5, &v6);
  result = 1;
  if (v3)
  {
    if (v6 != *(_QWORD *)(a1 + 208) + 16 * *(unsigned int *)(a1 + 224))
      return *(_DWORD *)(v6 + 8) > 0x11u;
  }
  return result;
}

double sub_22E7E6CE4(uint64_t a1, uint64_t a2)
{
  return sub_22E7E6B98(a1 - 8, a2);
}

double sub_22E7E6CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  double result;
  uint64_t v6;
  uint64_t v7;

  v7 = a2;
  v2 = *(_QWORD *)(a1 + 56);
  if ((!v2 || !*(_BYTE *)(v2 + 7330)) && (*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    v3 = sub_22F2D07C8(a1 + 688, &v7);
    v4 = *(_DWORD *)(v3 + 8);
    if (v4 >= *(_DWORD *)(v3 + 12))
    {
      v6 = v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v3 = v6;
      v4 = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)&result = 15;
    *(_OWORD *)(*(_QWORD *)v3 + 16 * v4) = xmmword_22F45FCB0;
    ++*(_DWORD *)(v3 + 8);
  }
  return result;
}

uint64_t sub_22E7E6D7C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(result + 56);
  if ((!v4 || !*(_BYTE *)(v4 + 7330)) && (*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    result = sub_22F2D07C8(result + 688, &v8);
    v5 = *(_DWORD *)(result + 8);
    if (v5 >= *(_DWORD *)(result + 12))
    {
      v7 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      result = v7;
      v5 = *(_DWORD *)(v7 + 8);
    }
    v6 = (_QWORD *)(*(_QWORD *)result + 16 * v5);
    *v6 = 16;
    v6[1] = a3;
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_22E7E6E18(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(result + 56);
  if ((!v4 || !*(_BYTE *)(v4 + 7330)) && (*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    result = sub_22F2D07C8(result + 688, &v8);
    v5 = *(_DWORD *)(result + 8);
    if (v5 >= *(_DWORD *)(result + 12))
    {
      v7 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      result = v7;
      v5 = *(_DWORD *)(v7 + 8);
    }
    v6 = (_QWORD *)(*(_QWORD *)result + 16 * v5);
    *v6 = 17;
    v6[1] = a3;
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_22E7E6EB4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(result + 56);
  if (!v4 || !*(_BYTE *)(v4 + 7330))
  {
    v8 = a2;
    result = sub_22F2D07C8(result + 688, &v8);
    v5 = *(_DWORD *)(result + 8);
    if (v5 >= *(_DWORD *)(result + 12))
    {
      v7 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      result = v7;
      v5 = *(_DWORD *)(v7 + 8);
    }
    v6 = (_QWORD *)(*(_QWORD *)result + 16 * v5);
    *v6 = 18;
    v6[1] = a3;
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_22E7E6F48(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(result + 56);
  if ((!v4 || !*(_BYTE *)(v4 + 7330)) && (*(_BYTE *)(a3 + 29) & 0x80) != 0)
  {
    v8 = a3;
    result = sub_22F2D07C8(result + 688, &v8);
    v5 = *(_DWORD *)(result + 8);
    if (v5 >= *(_DWORD *)(result + 12))
    {
      v7 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      result = v7;
      v5 = *(_DWORD *)(v7 + 8);
    }
    v6 = (_QWORD *)(*(_QWORD *)result + 16 * v5);
    *v6 = 19;
    v6[1] = a2;
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_22E7E6FE4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a3;
  v4 = *(_QWORD *)(result + 56);
  if (!v4 || !*(_BYTE *)(v4 + 7330))
  {
    result = sub_22F2D07C8(result + 688, &v8);
    v5 = *(_DWORD *)(result + 8);
    if (v5 >= *(_DWORD *)(result + 12))
    {
      v7 = result;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      result = v7;
      v5 = *(_DWORD *)(v7 + 8);
    }
    v6 = (_QWORD *)(*(_QWORD *)result + 16 * v5);
    *v6 = 19;
    v6[1] = a2;
    ++*(_DWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_22E7E7078(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 72) + 29) & 0x80) != 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 56);
    if (!v5 || !*(_BYTE *)(v5 + 7330))
    {
      v6 = *(_DWORD *)(result + 1208);
      if (v6 >= *(_DWORD *)(result + 1212))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = *(_DWORD *)(v4 + 1208);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 1200) + 8 * v6) = a3;
      ++*(_DWORD *)(v4 + 1208);
    }
  }
  return result;
}

uint64_t sub_22E7E70F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22E7E7078(a1 - 8, a2, a3);
}

uint64_t sub_22E7E7100(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 72) + 29) & 0x80) != 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 56);
    if (!v5 || !*(_BYTE *)(v5 + 7330))
    {
      v6 = *(_DWORD *)(result + 1208);
      if (v6 >= *(_DWORD *)(result + 1212))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = *(_DWORD *)(v4 + 1208);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 1200) + 8 * v6) = a3;
      ++*(_DWORD *)(v4 + 1208);
    }
  }
  return result;
}

uint64_t sub_22E7E7180(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 72) + 29) & 0x80) != 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 56);
    if (!v5 || !*(_BYTE *)(v5 + 7330))
    {
      v6 = *(_DWORD *)(result + 1208);
      if (v6 >= *(_DWORD *)(result + 1212))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = *(_DWORD *)(v4 + 1208);
      }
      *(_QWORD *)(*(_QWORD *)(v4 + 1200) + 8 * v6) = a3;
      ++*(_DWORD *)(v4 + 1208);
    }
  }
  return result;
}

uint64_t sub_22E7E7200(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  char v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  unsigned int v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unsigned int v352;
  uint64_t v353;
  uint64_t v354;
  unsigned int v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  uint64_t v382;
  uint64_t v383;
  unsigned int v384;
  uint64_t v385;
  uint64_t v386;
  unsigned int v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v392;
  uint64_t v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  unsigned int v397;
  uint64_t v398;
  uint64_t v399;
  unsigned int v400;
  uint64_t v401;
  uint64_t v402;
  unsigned int v403;
  uint64_t i;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unsigned int v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  int v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  unsigned int v436;
  uint64_t v437;
  uint64_t v438;
  unsigned int v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t *v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unsigned int v449;
  uint64_t v450;
  uint64_t v451;
  unsigned int v452;
  uint64_t v453;
  uint64_t v454;
  unsigned int v455;
  uint64_t v456;
  uint64_t v457;
  unsigned int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t *v468;
  uint64_t v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t *v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  int v478;
  int j;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t *v492;
  uint64_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t *v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t *v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t *v517;
  unint64_t v518;
  uint64_t *v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t *v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t *v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t *v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t *v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t *v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t *v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t *v564;
  unint64_t v565;
  unsigned int *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  unsigned int *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t *v582;
  unint64_t v583;
  unsigned int *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t v589;
  unsigned int *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  unint64_t v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  uint64_t *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  uint64_t v603;
  uint64_t *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  unint64_t v608;
  uint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  uint64_t v615;
  uint64_t *v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  uint64_t v627;
  uint64_t *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  unint64_t v632;
  uint64_t v633;
  uint64_t *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unint64_t *v642;
  unint64_t v643;
  unsigned int *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  unint64_t v648;
  uint64_t v649;
  unsigned int *v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  uint64_t v655;
  int v656;
  uint64_t v657;
  uint64_t *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  uint64_t v663;
  uint64_t *v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unint64_t v668;
  uint64_t v669;
  unint64_t *v670;
  unint64_t *v671;
  uint64_t v672;
  unint64_t v673;
  unint64_t v674;
  unint64_t v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  unint64_t *v680;
  unint64_t v681;
  unsigned int *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t v687;
  unsigned int *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  uint64_t v693;
  int v694;
  uint64_t v695;
  uint64_t *v696;
  uint64_t *v697;
  uint64_t v698;
  uint64_t v699;
  unint64_t v700;
  uint64_t v701;
  unint64_t *v702;
  unint64_t *v703;
  uint64_t v704;
  unint64_t v705;
  unint64_t v706;
  unint64_t v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t *v712;
  unint64_t v713;
  unsigned int *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  unint64_t v718;
  uint64_t v719;
  unsigned int *v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t v724;
  uint64_t v725;
  int v726;
  uint64_t v727;
  uint64_t *v728;
  uint64_t *v729;
  uint64_t v730;
  uint64_t v731;
  unint64_t v732;
  uint64_t v733;
  uint64_t v734;
  unsigned int v735;
  uint64_t v736;
  uint64_t v737;
  unint64_t *v738;
  unint64_t v739;
  unsigned int *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  unsigned int *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  unint64_t v750;
  uint64_t v751;
  int v752;
  uint64_t v753;
  uint64_t *v754;
  uint64_t *v755;
  uint64_t v756;
  uint64_t v757;
  unint64_t v758;
  uint64_t v759;
  uint64_t *v760;
  uint64_t *v761;
  uint64_t v762;
  uint64_t v763;
  unint64_t v764;
  uint64_t v765;
  uint64_t *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  uint64_t v771;
  uint64_t *v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  unint64_t v776;
  uint64_t v777;
  uint64_t *v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  unint64_t v782;
  uint64_t v783;
  uint64_t *v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  unint64_t v788;
  uint64_t v789;
  uint64_t *v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  unint64_t v794;
  uint64_t v795;
  uint64_t *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  unint64_t v800;
  uint64_t v801;
  uint64_t *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  unint64_t *v810;
  unint64_t v811;
  unsigned int *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  unint64_t v816;
  uint64_t v817;
  unsigned int *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  uint64_t v823;
  int v824;
  uint64_t v825;
  uint64_t *v826;
  uint64_t *v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t v831;
  uint64_t *v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t v837;
  uint64_t *v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  unint64_t v842;
  uint64_t v843;
  uint64_t *v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  unint64_t v848;
  uint64_t v849;
  uint64_t v850;
  unsigned int v851;
  uint64_t v852;
  uint64_t v853;
  unsigned int v854;
  uint64_t v855;
  uint64_t *v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  unint64_t v860;
  uint64_t v861;
  uint64_t *v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  unint64_t v866;
  uint64_t v867;
  uint64_t *v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  unint64_t v872;
  uint64_t v873;
  uint64_t *v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  unint64_t v878;
  uint64_t v879;
  uint64_t *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t v884;
  uint64_t v885;
  uint64_t *v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  unint64_t v890;
  uint64_t v891;
  uint64_t *v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  unint64_t v896;
  uint64_t v897;
  uint64_t *v898;
  unint64_t v899;

  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v203 = *(unsigned int *)(a2 + 16);
      v204 = *(_QWORD *)(*a1 + 16);
      v205 = *(_DWORD *)(v204 + 8);
      if (v205 >= *(_DWORD *)(v204 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v205 = *(_DWORD *)(v204 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v204 + 8 * v205) = v203;
      ++*(_DWORD *)(v204 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v206 = *a1;
      v207 = (uint64_t *)(a2 + 24);
      v208 = *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16));
      v209 = *(_DWORD *)(*a1 + 32);
      if (v209 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v209 = *(_DWORD *)(v206 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v206 + 24) + 8 * v209) = v208;
      ++*(_DWORD *)(v206 + 32);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 20), *(_QWORD *)(*a1 + 16));
      v210 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v210)
      {
        v211 = 8 * v210;
        do
        {
          v212 = *v207;
          v213 = *a1;
          v214 = *(unsigned int *)(*a1 + 32);
          if (v214 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v214 = *(unsigned int *)(v213 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v213 + 24) + 8 * v214) = v212;
          ++*(_DWORD *)(v213 + 32);
          ++v207;
          v211 -= 8;
        }
        while (v211);
      }
      break;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v12 = *a1;
      v13 = *(_QWORD *)(a2 + 16);
      v14 = *(_DWORD *)(*a1 + 32);
      if (v14 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = *(_DWORD *)(v12 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v12 + 24) + 8 * v14) = v13;
      ++*(_DWORD *)(v12 + 32);
      goto LABEL_12;
    case 5:
      v194 = *(unsigned int *)(a2 + 16);
      v195 = *(_QWORD *)(*a1 + 16);
      v196 = *(_DWORD *)(v195 + 8);
      if (v196 >= *(_DWORD *)(v195 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v196 = *(_DWORD *)(v195 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v195 + 8 * v196) = v194;
      ++*(_DWORD *)(v195 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 20), *(_QWORD *)(*a1 + 16));
      v197 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v197)
      {
        v198 = 8 * v197;
        v199 = (uint64_t *)(a2 + 24);
        do
        {
          v200 = *v199;
          v201 = *a1;
          v202 = *(unsigned int *)(*a1 + 32);
          if (v202 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v202 = *(unsigned int *)(v201 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v201 + 24) + 8 * v202) = v200;
          ++*(_DWORD *)(v201 + 32);
          ++v199;
          v198 -= 8;
        }
        while (v198);
        v503 = *(unsigned int *)(a2 + 16);
      }
      else
      {
        v503 = 0;
      }
      v733 = *a1;
      v734 = *(_QWORD *)(a2 + 24 + 8 * v503);
      v735 = *(_DWORD *)(*a1 + 32);
      if (v735 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v735 = *(_DWORD *)(v733 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v733 + 24) + 8 * v735) = v734;
      ++*(_DWORD *)(v733 + 32);
      break;
    case 6:
      v231 = *(unsigned int *)(a2 + 16);
      v232 = *(_QWORD *)(*a1 + 16);
      v233 = *(_DWORD *)(v232 + 8);
      if (v233 >= *(_DWORD *)(v232 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v233 = *(_DWORD *)(v232 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v232 + 8 * v233) = v231;
      ++*(_DWORD *)(v232 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 32), *(_QWORD *)(*a1 + 16));
      v234 = *a1;
      v235 = *(_QWORD *)(a2 + 24);
      v236 = *(_DWORD *)(*a1 + 32);
      if (v236 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v236 = *(_DWORD *)(v234 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v234 + 24) + 8 * v236) = v235;
      ++*(_DWORD *)(v234 + 32);
      v237 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v237)
      {
        v238 = (uint64_t *)(a2 + 40);
        v239 = 8 * v237;
        do
        {
          v240 = *v238;
          v241 = *a1;
          v242 = *(unsigned int *)(*a1 + 32);
          if (v242 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v242 = *(unsigned int *)(v241 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v241 + 24) + 8 * v242) = v240;
          ++*(_DWORD *)(v241 + 32);
          ++v238;
          v239 -= 8;
        }
        while (v239);
      }
      break;
    case 9:
    case 0xA:
    case 0x10:
    case 0x3B:
    case 0x40:
      v15 = *a1;
      v16 = *(unsigned int *)(a2 + 16);
      goto LABEL_14;
    case 0xE:
      v302 = *(unsigned int *)(a2 + 16);
      v303 = *(_QWORD *)(*a1 + 16);
      v304 = *(_DWORD *)(v303 + 8);
      if (v304 >= *(_DWORD *)(v303 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v304 = *(_DWORD *)(v303 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v303 + 8 * v304) = v302;
      ++*(_DWORD *)(v303 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v305 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v305)
      {
        v306 = a2 + 24;
        v307 = 8 * v305;
        v308 = (uint64_t *)(a2 + 24);
        do
        {
          v309 = *v308;
          v310 = *a1;
          v311 = *(unsigned int *)(*a1 + 32);
          if (v311 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v311 = *(unsigned int *)(v310 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v310 + 24) + 8 * v311) = v309;
          ++*(_DWORD *)(v310 + 32);
          ++v308;
          v307 -= 8;
        }
        while (v307);
        v530 = *(unsigned int *)(a2 + 16);
        if ((_DWORD)v530)
        {
          v531 = 8 * v530;
          v532 = (uint64_t *)(v306 + 8 * v530);
          do
          {
            v533 = *v532;
            v534 = *a1;
            v535 = *(unsigned int *)(*a1 + 32);
            if (v535 >= *(unsigned int *)(*a1 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v535 = *(unsigned int *)(v534 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v534 + 24) + 8 * v535) = v533;
            ++*(_DWORD *)(v534 + 32);
            ++v532;
            v531 -= 8;
          }
          while (v531);
          v627 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v627)
          {
            v628 = (uint64_t *)(v306 + 8 * v627 + 8 * v627);
            v629 = 8 * v627;
            do
            {
              v630 = *v628;
              v631 = *a1;
              v632 = *(unsigned int *)(*a1 + 32);
              if (v632 >= *(unsigned int *)(*a1 + 36))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v632 = *(unsigned int *)(v631 + 32);
              }
              *(_QWORD *)(*(_QWORD *)(v631 + 24) + 8 * v632) = v630;
              ++*(_DWORD *)(v631 + 32);
              ++v628;
              v629 -= 8;
            }
            while (v629);
            v789 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v789)
            {
              v790 = (uint64_t *)(v306 + 8 * v789 + 8 * v789 + 8 * v789);
              v791 = 8 * v789;
              do
              {
                v792 = *v790;
                v793 = *a1;
                v794 = *(unsigned int *)(*a1 + 32);
                if (v794 >= *(unsigned int *)(*a1 + 36))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v794 = *(unsigned int *)(v793 + 32);
                }
                *(_QWORD *)(*(_QWORD *)(v793 + 24) + 8 * v794) = v792;
                ++*(_DWORD *)(v793 + 32);
                ++v790;
                v791 -= 8;
              }
              while (v791);
            }
          }
        }
      }
      break;
    case 0xF:
      v164 = *(unsigned int *)(a2 + 16);
      v165 = *(_QWORD *)(*a1 + 16);
      v166 = *(_DWORD *)(v165 + 8);
      if (v166 >= *(_DWORD *)(v165 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v166 = *(_DWORD *)(v165 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v165 + 8 * v166) = v164;
      ++*(_DWORD *)(v165 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v167 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v167)
      {
        v168 = a2 + 24;
        v169 = 8 * v167;
        v170 = (uint64_t *)(a2 + 24);
        do
        {
          v171 = *v170;
          v172 = *a1;
          v173 = *(unsigned int *)(*a1 + 32);
          if (v173 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v173 = *(unsigned int *)(v172 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v172 + 24) + 8 * v173) = v171;
          ++*(_DWORD *)(v172 + 32);
          ++v170;
          v169 -= 8;
        }
        while (v169);
        v497 = *(unsigned int *)(a2 + 16);
        if ((_DWORD)v497)
        {
          v498 = 8 * v497;
          v499 = (uint64_t *)(v168 + 8 * v497);
          do
          {
            v500 = *v499;
            v501 = *a1;
            v502 = *(unsigned int *)(*a1 + 32);
            if (v502 >= *(unsigned int *)(*a1 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v502 = *(unsigned int *)(v501 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v501 + 24) + 8 * v502) = v500;
            ++*(_DWORD *)(v501 + 32);
            ++v499;
            v498 -= 8;
          }
          while (v498);
          v603 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v603)
          {
            v604 = (uint64_t *)(v168 + 8 * v603 + 8 * v603);
            v605 = 8 * v603;
            do
            {
              v606 = *v604;
              v607 = *a1;
              v608 = *(unsigned int *)(*a1 + 32);
              if (v608 >= *(unsigned int *)(*a1 + 36))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v608 = *(unsigned int *)(v607 + 32);
              }
              *(_QWORD *)(*(_QWORD *)(v607 + 24) + 8 * v608) = v606;
              ++*(_DWORD *)(v607 + 32);
              ++v604;
              v605 -= 8;
            }
            while (v605);
            v765 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v765)
            {
              v766 = (uint64_t *)(v168 + 8 * v765 + 8 * v765 + 8 * v765);
              v767 = 8 * v765;
              do
              {
                v768 = *v766;
                v769 = *a1;
                v770 = *(unsigned int *)(*a1 + 32);
                if (v770 >= *(unsigned int *)(*a1 + 36))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v770 = *(unsigned int *)(v769 + 32);
                }
                *(_QWORD *)(*(_QWORD *)(v769 + 24) + 8 * v770) = v768;
                ++*(_DWORD *)(v769 + 32);
                ++v766;
                v767 -= 8;
              }
              while (v767);
            }
          }
        }
      }
      break;
    case 0x11:
      v215 = *(unsigned int *)(a2 + 24);
      v216 = *(_QWORD *)(*a1 + 16);
      v217 = *(_DWORD *)(v216 + 8);
      if (v217 >= *(_DWORD *)(v216 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v217 = *(_DWORD *)(v216 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v216 + 8 * v217) = v215;
      ++*(_DWORD *)(v216 + 8);
      v218 = *(unsigned int *)(a2 + 16);
      v219 = *(_QWORD *)(*a1 + 16);
      v220 = *(_DWORD *)(v219 + 8);
      if (v220 >= *(_DWORD *)(v219 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v220 = *(_DWORD *)(v219 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v219 + 8 * v220) = v218;
      ++*(_DWORD *)(v219 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v192 = *a1;
      v193 = *(_DWORD *)(a2 + 20);
      goto LABEL_175;
    case 0x12:
      v350 = *(unsigned int *)(a2 + 16);
      v351 = *(_QWORD *)(*a1 + 16);
      v352 = *(_DWORD *)(v351 + 8);
      if (v352 >= *(_DWORD *)(v351 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v352 = *(_DWORD *)(v351 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v351 + 8 * v352) = v350;
      ++*(_DWORD *)(v351 + 8);
      v353 = *(unsigned int *)(a2 + 32);
      v354 = *(_QWORD *)(*a1 + 16);
      v355 = *(_DWORD *)(v354 + 8);
      if (v355 >= *(_DWORD *)(v354 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v355 = *(_DWORD *)(v354 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v354 + 8 * v355) = v353;
      ++*(_DWORD *)(v354 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v356 = *a1;
      v357 = (uint64_t *)(a2 + 40);
      v358 = *(_QWORD *)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
      v359 = *(_DWORD *)(*a1 + 32);
      if (v359 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v359 = *(_DWORD *)(v356 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v356 + 24) + 8 * v359) = v358;
      ++*(_DWORD *)(v356 + 32);
      v360 = *(unsigned int *)(a2 + 20);
      v361 = *(_QWORD *)(*a1 + 16);
      v362 = *(_DWORD *)(v361 + 8);
      if (v362 >= *(_DWORD *)(v361 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v362 = *(_DWORD *)(v361 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v361 + 8 * v362) = v360;
      ++*(_DWORD *)(v361 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 24), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 28), *(_QWORD *)(*a1 + 16));
      v363 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v363)
      {
        v364 = 8 * v363;
        do
        {
          v365 = *v357;
          v366 = *a1;
          v367 = *(unsigned int *)(*a1 + 32);
          if (v367 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v367 = *(unsigned int *)(v366 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v366 + 24) + 8 * v367) = v365;
          ++*(_DWORD *)(v366 + 32);
          ++v357;
          v364 -= 8;
        }
        while (v364);
      }
      v368 = *(unsigned int *)(a2 + 32);
      if ((_DWORD)v368)
      {
        v369 = a2 + 48;
        do
        {
          v370 = *a1;
          v371 = *(_QWORD *)(v369 + 8 * *(unsigned int *)(a2 + 16));
          v372 = *(unsigned int *)(*a1 + 32);
          if (v372 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v372 = *(unsigned int *)(v370 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v370 + 24) + 8 * v372) = v371;
          ++*(_DWORD *)(v370 + 32);
          v369 += 8;
          --v368;
        }
        while (v368);
      }
      break;
    case 0x14:
    case 0x58:
      v19 = *a1;
      v20 = *(_QWORD *)(a2 + 24);
      v21 = *(_DWORD *)(*a1 + 32);
      if (v21 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v21 = *(_DWORD *)(v19 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v19 + 24) + 8 * v21) = v20;
      ++*(_DWORD *)(v19 + 32);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v10 = *a1;
      v11 = *(_DWORD *)(a2 + 16);
      goto LABEL_315;
    case 0x16:
      sub_22E7ECEFC((uint64_t)a1, (uint64_t *)(a2 + 16));
      v186 = *(unsigned int *)(a2 + 32);
      v187 = *(_QWORD *)(*a1 + 16);
      v188 = *(_DWORD *)(v187 + 8);
      if (v188 >= *(_DWORD *)(v187 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v188 = *(_DWORD *)(v187 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v187 + 8 * v188) = v186;
      ++*(_DWORD *)(v187 + 8);
      v189 = *a1;
      v190 = *(_QWORD *)(a2 + 40);
      v191 = *(_DWORD *)(*a1 + 32);
      if (v191 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v191 = *(_DWORD *)(v189 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v189 + 24) + 8 * v191) = v190;
      ++*(_DWORD *)(v189 + 32);
      v192 = *a1;
      v193 = *(_DWORD *)(a2 + 36);
LABEL_175:
      sub_22E7C9A94(*(_QWORD *)(v192 + 8), v193, *(_QWORD *)(v192 + 16));
      goto LABEL_8;
    case 0x18:
      sub_22E7ECEFC((uint64_t)a1, (uint64_t *)(a2 + 16));
      v278 = *(unsigned int *)(a2 + 32);
      v279 = *(_QWORD *)(*a1 + 16);
      v280 = *(_DWORD *)(v279 + 8);
      if (v280 >= *(_DWORD *)(v279 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v280 = *(_DWORD *)(v279 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v279 + 8 * v280) = v278;
      ++*(_DWORD *)(v279 + 8);
      v281 = *a1;
      v282 = *(_QWORD *)(a2 + 48);
      v283 = *(_DWORD *)(*a1 + 32);
      if (v283 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v283 = *(_DWORD *)(v281 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v281 + 24) + 8 * v283) = v282;
      ++*(_DWORD *)(v281 + 32);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 28), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 36), *(_QWORD *)(*a1 + 16));
      v10 = *a1;
      v11 = *(_DWORD *)(a2 + 40);
      goto LABEL_315;
    case 0x1A:
      v174 = *(unsigned int *)(a2 + 16);
      v175 = *(_QWORD *)(*a1 + 16);
      v176 = *(_DWORD *)(v175 + 8);
      if (v176 >= *(_DWORD *)(v175 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v176 = *(_DWORD *)(v175 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v175 + 8 * v176) = v174;
      ++*(_DWORD *)(v175 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v177 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v177)
      {
        v178 = (uint64_t *)(a2 + 24);
        v179 = 8 * v177;
        do
        {
          v180 = *v178;
          v181 = *a1;
          v182 = *(unsigned int *)(*a1 + 32);
          if (v182 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v182 = *(unsigned int *)(v181 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v181 + 24) + 8 * v182) = v180;
          ++*(_DWORD *)(v181 + 32);
          ++v178;
          v179 -= 8;
        }
        while (v179);
      }
      break;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      sub_22E7ECEFC((uint64_t)a1, (uint64_t *)(a2 + 16));
      goto LABEL_5;
    case 0x1D:
      v135 = *(unsigned int *)(a2 + 16);
      v136 = *(_QWORD *)(*a1 + 16);
      v137 = *(_DWORD *)(v136 + 8);
      if (v137 >= *(_DWORD *)(v136 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v137 = *(_DWORD *)(v136 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v136 + 8 * v137) = v135;
      ++*(_DWORD *)(v136 + 8);
      sub_22E7ECEFC((uint64_t)a1, (uint64_t *)(a2 + 24));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v138 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v138)
      {
        v139 = a2 + 40;
        v140 = 8 * v138;
        v141 = (uint64_t *)(a2 + 40);
        do
        {
          v142 = *v141;
          v143 = *a1;
          v144 = *(unsigned int *)(*a1 + 32);
          if (v144 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v144 = *(unsigned int *)(v143 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v143 + 24) + 8 * v144) = v142;
          ++*(_DWORD *)(v143 + 32);
          ++v141;
          v140 -= 8;
        }
        while (v140);
        v490 = *(unsigned int *)(a2 + 16);
        if ((_DWORD)v490)
        {
          v491 = 8 * v490;
          v492 = (uint64_t *)(v139 + 8 * v490);
          do
          {
            v493 = *v492;
            v494 = *a1;
            v495 = *(unsigned int *)(*a1 + 32);
            if (v495 >= *(unsigned int *)(*a1 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v495 = *(unsigned int *)(v494 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v494 + 24) + 8 * v495) = v493;
            ++*(_DWORD *)(v494 + 32);
            ++v492;
            v491 -= 8;
          }
          while (v491);
          v597 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v597)
          {
            v598 = (uint64_t *)(v139 + 8 * v597 + 8 * v597);
            v599 = 8 * v597;
            do
            {
              v600 = *v598;
              v601 = *a1;
              v602 = *(unsigned int *)(*a1 + 32);
              if (v602 >= *(unsigned int *)(*a1 + 36))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v602 = *(unsigned int *)(v601 + 32);
              }
              *(_QWORD *)(*(_QWORD *)(v601 + 24) + 8 * v602) = v600;
              ++*(_DWORD *)(v601 + 32);
              ++v598;
              v599 -= 8;
            }
            while (v599);
          }
        }
      }
      break;
    case 0x1E:
      v284 = *(unsigned int *)(a2 + 16);
      v285 = *(_QWORD *)(*a1 + 16);
      v286 = *(_DWORD *)(v285 + 8);
      if (v286 >= *(_DWORD *)(v285 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v286 = *(_DWORD *)(v285 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v285 + 8 * v286) = v284;
      ++*(_DWORD *)(v285 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v287 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v287)
      {
        v288 = (uint64_t *)(a2 + 24);
        v289 = 8 * v287;
        do
        {
          v290 = *v288;
          v291 = *a1;
          v292 = *(unsigned int *)(*a1 + 32);
          if (v292 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v292 = *(unsigned int *)(v291 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v291 + 24) + 8 * v292) = v290;
          ++*(_DWORD *)(v291 + 32);
          ++v288;
          v289 -= 8;
        }
        while (v289);
      }
      break;
    case 0x1F:
      v109 = *(unsigned int *)(a2 + 16);
      v110 = *(_QWORD *)(*a1 + 16);
      v111 = *(_DWORD *)(v110 + 8);
      if (v111 >= *(_DWORD *)(v110 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v111 = *(_DWORD *)(v110 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v110 + 8 * v111) = v109;
      ++*(_DWORD *)(v110 + 8);
      v112 = *(unsigned int *)(a2 + 20);
      v113 = *(_QWORD *)(*a1 + 16);
      v114 = *(_DWORD *)(v113 + 8);
      if (v114 >= *(_DWORD *)(v113 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v114 = *(_DWORD *)(v113 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v113 + 8 * v114) = v112;
      ++*(_DWORD *)(v113 + 8);
      v115 = *(unsigned int *)(a2 + 24);
      v116 = *(_QWORD *)(*a1 + 16);
      v117 = *(_DWORD *)(v116 + 8);
      if (v117 >= *(_DWORD *)(v116 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v117 = *(_DWORD *)(v116 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v116 + 8 * v117) = v115;
      ++*(_DWORD *)(v116 + 8);
      v118 = *(unsigned int *)(a2 + 28);
      v119 = *(_QWORD *)(*a1 + 16);
      v120 = *(_DWORD *)(v119 + 8);
      if (v120 >= *(_DWORD *)(v119 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v120 = *(_DWORD *)(v119 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v119 + 8 * v120) = v118;
      ++*(_DWORD *)(v119 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v121 = 0;
      v122 = 1;
      do
      {
        v123 = v122;
        v124 = a2 + 4 * v121;
        v125 = *(unsigned int *)(v124 + 80);
        v126 = *(_QWORD *)(*a1 + 16);
        v127 = *(unsigned int *)(v126 + 8);
        if (v127 >= *(unsigned int *)(v126 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v127 = *(unsigned int *)(v126 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v126 + 8 * v127) = v125;
        ++*(_DWORD *)(v126 + 8);
        sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(v124 + 88), *(_QWORD *)(*a1 + 16));
        v122 = 0;
        v121 = 1;
      }
      while ((v123 & 1) != 0);
      sub_22E7E3E60(*a1, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
      sub_22E7E50C0(*a1, a2 + 56);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 96), *(_QWORD *)(*a1 + 16));
      v128 = a2 + 104;
      v129 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v129)
        goto LABEL_472;
      v130 = 8 * v129;
      v131 = (uint64_t *)(a2 + 104);
      do
      {
        v132 = *v131;
        v133 = *a1;
        v134 = *(unsigned int *)(*a1 + 32);
        if (v134 >= *(unsigned int *)(*a1 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v134 = *(unsigned int *)(v133 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v133 + 24) + 8 * v134) = v132;
        ++*(_DWORD *)(v133 + 32);
        ++v131;
        v130 -= 8;
      }
      while (v130);
      v484 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v484)
      {
        v485 = 8 * v484;
        v486 = (uint64_t *)(v128 + 8 * v484);
        do
        {
          v487 = *v486;
          v488 = *a1;
          v489 = *(unsigned int *)(*a1 + 32);
          if (v489 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v489 = *(unsigned int *)(v488 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v488 + 24) + 8 * v489) = v487;
          ++*(_DWORD *)(v488 + 32);
          ++v486;
          v485 -= 8;
        }
        while (v485);
        v579 = (2 * *(_DWORD *)(a2 + 16));
      }
      else
      {
LABEL_472:
        v579 = 0;
      }
      v580 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v580)
      {
        v581 = 8 * v580;
        v582 = (unint64_t *)(v128 + 8 * v579);
        do
        {
          v583 = *v582++;
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v583, *(_QWORD *)(*a1 + 16));
          v581 -= 8;
        }
        while (v581);
        v580 = *(unsigned int *)(a2 + 20);
        v579 = (2 * *(_DWORD *)(a2 + 16));
        if ((_DWORD)v580)
        {
          v584 = (unsigned int *)(v128 + 8 * v579 + 8 * v580);
          v585 = 4 * v580;
          do
          {
            v586 = *v584;
            v587 = *(_QWORD *)(*a1 + 16);
            v588 = *(unsigned int *)(v587 + 8);
            if (v588 >= *(unsigned int *)(v587 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v588 = *(unsigned int *)(v587 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v587 + 8 * v588) = v586;
            ++*(_DWORD *)(v587 + 8);
            ++v584;
            v585 -= 4;
          }
          while (v585);
          LODWORD(v580) = *(_DWORD *)(a2 + 20);
          v579 = (2 * *(_DWORD *)(a2 + 16));
        }
      }
      v589 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v589)
      {
        v590 = (unsigned int *)(v128 + 8 * v579 + 8 * v580 + 4 * v580);
        v591 = 4 * v589;
        do
        {
          v592 = *v590;
          v593 = *(_QWORD *)(*a1 + 16);
          v594 = *(unsigned int *)(v593 + 8);
          if (v594 >= *(unsigned int *)(v593 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v594 = *(unsigned int *)(v593 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v593 + 8 * v594) = v592;
          ++*(_DWORD *)(v593 + 8);
          ++v590;
          v591 -= 4;
        }
        while (v591);
        v595 = *(unsigned int *)(a2 + 20);
        v596 = *(_DWORD *)(a2 + 24);
        v579 = (2 * *(_DWORD *)(a2 + 16));
        LODWORD(v580) = *(_DWORD *)(a2 + 20);
      }
      else
      {
        v596 = 0;
        v595 = v580;
      }
      v701 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v701)
      {
        v702 = (unint64_t *)((v128 + 8 * v579 + 8 * v595 + 4 * (v580 + v596) + 7) & 0xFFFFFFFFFFFFFFF8);
        v703 = &v702[2 * v701];
        do
        {
          v704 = *a1;
          v705 = *v702;
          v706 = *(unsigned int *)(*a1 + 32);
          if (v706 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v706 = *(unsigned int *)(v704 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v704 + 24) + 8 * v706) = v705 & 0xFFFFFFFFFFFFFFFCLL;
          ++*(_DWORD *)(v704 + 32);
          v707 = *v702;
          v708 = *(_QWORD *)(*a1 + 16);
          v709 = *(unsigned int *)(v708 + 8);
          if (v709 >= *(unsigned int *)(v708 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v709 = *(unsigned int *)(v708 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v708 + 8 * v709) = (v707 >> 1) & 1;
          ++*(_DWORD *)(v708 + 8);
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v702[1], *(_QWORD *)(*a1 + 16));
          v702 += 2;
        }
        while (v702 != v703);
      }
      break;
    case 0x22:
      v90 = *(unsigned int *)(a2 + 16);
      v91 = *(_QWORD *)(*a1 + 16);
      v92 = *(_DWORD *)(v91 + 8);
      if (v92 >= *(_DWORD *)(v91 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v92 = *(_DWORD *)(v91 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v91 + 8 * v92) = v90;
      ++*(_DWORD *)(v91 + 8);
      v93 = *(unsigned int *)(a2 + 20);
      v94 = *(_QWORD *)(*a1 + 16);
      v95 = *(_DWORD *)(v94 + 8);
      if (v95 >= *(_DWORD *)(v94 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v95 = *(_DWORD *)(v94 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v94 + 8 * v95) = v93;
      ++*(_DWORD *)(v94 + 8);
      v96 = *(unsigned int *)(a2 + 24);
      v97 = *(_QWORD *)(*a1 + 16);
      v98 = *(_DWORD *)(v97 + 8);
      if (v98 >= *(_DWORD *)(v97 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v98 = *(_DWORD *)(v97 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v97 + 8 * v98) = v96;
      ++*(_DWORD *)(v97 + 8);
      v99 = *(unsigned int *)(a2 + 28);
      v100 = *(_QWORD *)(*a1 + 16);
      v101 = *(_DWORD *)(v100 + 8);
      if (v101 >= *(_DWORD *)(v100 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v101 = *(_DWORD *)(v100 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v100 + 8 * v101) = v99;
      ++*(_DWORD *)(v100 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v102 = a2 + 80;
      v103 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v103)
      {
        v104 = 8 * v103;
        v105 = (uint64_t *)(a2 + 80);
        do
        {
          v106 = *v105;
          v107 = *a1;
          v108 = *(unsigned int *)(*a1 + 32);
          if (v108 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v108 = *(unsigned int *)(v107 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v107 + 24) + 8 * v108) = v106;
          ++*(_DWORD *)(v107 + 32);
          ++v105;
          v104 -= 8;
        }
        while (v104);
        v483 = *(unsigned int *)(a2 + 16);
      }
      else
      {
        v483 = 0;
      }
      v678 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v678)
      {
        v679 = 8 * v678;
        v680 = (unint64_t *)(v102 + 8 * v483);
        do
        {
          v681 = *v680++;
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v681, *(_QWORD *)(*a1 + 16));
          v679 -= 8;
        }
        while (v679);
        v483 = *(unsigned int *)(a2 + 16);
        v678 = *(unsigned int *)(a2 + 20);
        if ((_DWORD)v678)
        {
          v682 = (unsigned int *)(v102 + 8 * v483 + 8 * v678);
          v683 = 4 * v678;
          do
          {
            v684 = *v682;
            v685 = *(_QWORD *)(*a1 + 16);
            v686 = *(unsigned int *)(v685 + 8);
            if (v686 >= *(unsigned int *)(v685 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v686 = *(unsigned int *)(v685 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v685 + 8 * v686) = v684;
            ++*(_DWORD *)(v685 + 8);
            ++v682;
            v683 -= 4;
          }
          while (v683);
          v483 = *(unsigned int *)(a2 + 16);
          LODWORD(v678) = *(_DWORD *)(a2 + 20);
        }
      }
      v687 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v687)
      {
        v688 = (unsigned int *)(v102 + 8 * v483 + 8 * v678 + 4 * v678);
        v689 = 4 * v687;
        do
        {
          v690 = *v688;
          v691 = *(_QWORD *)(*a1 + 16);
          v692 = *(unsigned int *)(v691 + 8);
          if (v692 >= *(unsigned int *)(v691 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v692 = *(unsigned int *)(v691 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v691 + 8 * v692) = v690;
          ++*(_DWORD *)(v691 + 8);
          ++v688;
          v689 -= 4;
        }
        while (v689);
        v483 = *(unsigned int *)(a2 + 16);
        v693 = *(unsigned int *)(a2 + 20);
        v694 = *(_DWORD *)(a2 + 24);
        LODWORD(v678) = *(_DWORD *)(a2 + 20);
      }
      else
      {
        v694 = 0;
        v693 = v678;
      }
      v695 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v695)
      {
        v696 = (uint64_t *)((v102 + 8 * v483 + 8 * v693 + 4 * (v678 + v694) + 7) & 0xFFFFFFFFFFFFFFF8);
        v697 = &v696[2 * v695];
        do
        {
          v698 = *a1;
          v699 = *v696;
          v700 = *(unsigned int *)(*a1 + 32);
          if (v700 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v700 = *(unsigned int *)(v698 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v698 + 24) + 8 * v700) = v699 & 0xFFFFFFFFFFFFFFFCLL;
          ++*(_DWORD *)(v698 + 32);
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v696[1], *(_QWORD *)(*a1 + 16));
          v696 += 2;
        }
        while (v696 != v697);
      }
      break;
    case 0x24:
      sub_22E7ECEFC((uint64_t)a1, (uint64_t *)(a2 + 16));
      v183 = *(int *)(a2 + 44);
      v184 = *(_QWORD *)(*a1 + 16);
      v185 = *(_DWORD *)(v184 + 8);
      if (v185 >= *(_DWORD *)(v184 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v185 = *(_DWORD *)(v184 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v184 + 8 * v185) = v183;
      ++*(_DWORD *)(v184 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 48), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 40), *(_QWORD *)(*a1 + 16));
LABEL_5:
      v7 = *a1;
      v8 = *(_QWORD *)(a2 + 32);
      v9 = *(_DWORD *)(*a1 + 32);
      if (v9 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = *(_DWORD *)(v7 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v9) = v8;
      ++*(_DWORD *)(v7 + 32);
LABEL_8:
      v10 = *a1;
      v11 = *(_DWORD *)(a2 + 28);
      goto LABEL_315;
    case 0x25:
      v221 = *(unsigned int *)(a2 + 16);
      v222 = *(_QWORD *)(*a1 + 16);
      v223 = *(_DWORD *)(v222 + 8);
      if (v223 >= *(_DWORD *)(v222 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v223 = *(_DWORD *)(v222 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v222 + 8 * v223) = v221;
      ++*(_DWORD *)(v222 + 8);
      sub_22E7ECFB0(a1, (uint64_t *)(a2 + 24));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 48), *(_QWORD *)(*a1 + 16));
      sub_22E7E3E60(*a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      sub_22E7E50C0(*a1, a2 + 72);
      v224 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v224)
      {
        v225 = a2 + 96;
        v226 = 8 * v224;
        v227 = (uint64_t *)(a2 + 96);
        do
        {
          v228 = *v227;
          v229 = *a1;
          v230 = *(unsigned int *)(*a1 + 32);
          if (v230 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v230 = *(unsigned int *)(v229 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v229 + 24) + 8 * v230) = v228;
          ++*(_DWORD *)(v229 + 32);
          ++v227;
          v226 -= 8;
        }
        while (v226);
        v504 = *(unsigned int *)(a2 + 16);
        if ((_DWORD)v504)
        {
          v505 = 8 * v504;
          v506 = (uint64_t *)(v225 + 8 * v504);
          do
          {
            v507 = *v506;
            v508 = *a1;
            v509 = *(unsigned int *)(*a1 + 32);
            if (v509 >= *(unsigned int *)(*a1 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v509 = *(unsigned int *)(v508 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v508 + 24) + 8 * v509) = v507;
            ++*(_DWORD *)(v508 + 32);
            ++v506;
            v505 -= 8;
          }
          while (v505);
          v609 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v609)
          {
            v610 = (uint64_t *)(v225 + 8 * v609 + 8 * v609);
            v611 = 8 * v609;
            do
            {
              v612 = *v610;
              v613 = *a1;
              v614 = *(unsigned int *)(*a1 + 32);
              if (v614 >= *(unsigned int *)(*a1 + 36))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v614 = *(unsigned int *)(v613 + 32);
              }
              *(_QWORD *)(*(_QWORD *)(v613 + 24) + 8 * v614) = v612;
              ++*(_DWORD *)(v613 + 32);
              ++v610;
              v611 -= 8;
            }
            while (v611);
            v771 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v771)
            {
              v772 = (uint64_t *)(v225 + 8 * v771 + 8 * v771 + 8 * v771);
              v773 = 8 * v771;
              do
              {
                v774 = *v772;
                v775 = *a1;
                v776 = *(unsigned int *)(*a1 + 32);
                if (v776 >= *(unsigned int *)(*a1 + 36))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v776 = *(unsigned int *)(v775 + 32);
                }
                *(_QWORD *)(*(_QWORD *)(v775 + 24) + 8 * v776) = v774;
                ++*(_DWORD *)(v775 + 32);
                ++v772;
                v773 -= 8;
              }
              while (v773);
              v831 = *(unsigned int *)(a2 + 16);
              if ((_DWORD)v831)
              {
                v832 = (uint64_t *)(v225 + 8 * v831 + 8 * v831 + 8 * v831 + 8 * v831);
                v833 = 8 * v831;
                do
                {
                  v834 = *v832;
                  v835 = *a1;
                  v836 = *(unsigned int *)(*a1 + 32);
                  if (v836 >= *(unsigned int *)(*a1 + 36))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v836 = *(unsigned int *)(v835 + 32);
                  }
                  *(_QWORD *)(*(_QWORD *)(v835 + 24) + 8 * v836) = v834;
                  ++*(_DWORD *)(v835 + 32);
                  ++v832;
                  v833 -= 8;
                }
                while (v833);
                v891 = *(unsigned int *)(a2 + 16);
                if ((_DWORD)v891)
                {
                  v892 = (uint64_t *)(v225 + 8 * v891 + 8 * v891 + 8 * v891 + 8 * v891 + 8 * v891);
                  v893 = 8 * v891;
                  do
                  {
                    v894 = *v892;
                    v895 = *a1;
                    v896 = *(unsigned int *)(*a1 + 32);
                    if (v896 >= *(unsigned int *)(*a1 + 36))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v896 = *(unsigned int *)(v895 + 32);
                    }
                    *(_QWORD *)(*(_QWORD *)(v895 + 24) + 8 * v896) = v894;
                    ++*(_DWORD *)(v895 + 32);
                    ++v892;
                    v893 -= 8;
                  }
                  while (v893);
                }
              }
            }
          }
        }
      }
      break;
    case 0x27:
      v322 = *(unsigned int *)(a2 + 16);
      v323 = *(_QWORD *)(*a1 + 16);
      v324 = *(_DWORD *)(v323 + 8);
      if (v324 >= *(_DWORD *)(v323 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v324 = *(_DWORD *)(v323 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v323 + 8 * v324) = v322;
      ++*(_DWORD *)(v323 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v325 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v325)
      {
        v326 = (uint64_t *)(a2 + 24);
        v327 = 8 * v325;
        do
        {
          v328 = *v326;
          v329 = *a1;
          v330 = *(unsigned int *)(*a1 + 32);
          if (v330 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v330 = *(unsigned int *)(v329 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v329 + 24) + 8 * v330) = v328;
          ++*(_DWORD *)(v329 + 32);
          ++v326;
          v327 -= 8;
        }
        while (v327);
      }
      break;
    case 0x29:
      v22 = *(unsigned int *)(a2 + 16);
      v23 = *(_QWORD *)(*a1 + 16);
      v24 = *(_DWORD *)(v23 + 8);
      if (v24 >= *(_DWORD *)(v23 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v24 = *(_DWORD *)(v23 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v23 + 8 * v24) = v22;
      ++*(_DWORD *)(v23 + 8);
      v25 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v25)
      {
        v26 = (uint64_t *)(a2 + 32);
        v27 = 8 * v25;
        do
        {
          v28 = *v26;
          v29 = *a1;
          v30 = *(unsigned int *)(*a1 + 32);
          if (v30 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v30 = *(unsigned int *)(v29 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v29 + 24) + 8 * v30) = v28;
          ++*(_DWORD *)(v29 + 32);
          ++v26;
          v27 -= 8;
        }
        while (v27);
      }
      v31 = *(unsigned __int8 *)(a2 + 24);
      v32 = *(_QWORD *)(*a1 + 16);
      v33 = *(_DWORD *)(v32 + 8);
      if (v33 >= *(_DWORD *)(v32 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v33 = *(_DWORD *)(v32 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v32 + 8 * v33) = v31;
      ++*(_DWORD *)(v32 + 8);
      v15 = *a1;
      v16 = *(unsigned __int8 *)(a2 + 25);
LABEL_14:
      v17 = *(_QWORD *)(v15 + 16);
      v18 = *(_DWORD *)(v17 + 8);
      if (v18 >= *(_DWORD *)(v17 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = *(_DWORD *)(v17 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v16;
      ++*(_DWORD *)(v17 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v10 = *a1;
      v11 = *(_DWORD *)(a2 + 20);
      goto LABEL_315;
    case 0x2A:
      v145 = *(unsigned int *)(a2 + 16);
      v146 = *(_QWORD *)(*a1 + 16);
      v147 = *(_DWORD *)(v146 + 8);
      if (v147 >= *(_DWORD *)(v146 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v147 = *(_DWORD *)(v146 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v146 + 8 * v147) = v145;
      ++*(_DWORD *)(v146 + 8);
      v148 = *(unsigned int *)(a2 + 20);
      v149 = *(_QWORD *)(*a1 + 16);
      v150 = *(_DWORD *)(v149 + 8);
      if (v150 >= *(_DWORD *)(v149 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v150 = *(_DWORD *)(v149 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v149 + 8 * v150) = v148;
      ++*(_DWORD *)(v149 + 8);
      v151 = *(unsigned int *)(a2 + 24);
      v152 = *(_QWORD *)(*a1 + 16);
      v153 = *(_DWORD *)(v152 + 8);
      if (v153 >= *(_DWORD *)(v152 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v153 = *(_DWORD *)(v152 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v152 + 8 * v153) = v151;
      ++*(_DWORD *)(v152 + 8);
      v154 = *(unsigned int *)(a2 + 28);
      v155 = *(_QWORD *)(*a1 + 16);
      v156 = *(_DWORD *)(v155 + 8);
      if (v156 >= *(_DWORD *)(v155 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v156 = *(_DWORD *)(v155 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v155 + 8 * v156) = v154;
      ++*(_DWORD *)(v155 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v157 = a2 + 80;
      v158 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v158)
      {
        v159 = 8 * v158;
        v160 = (uint64_t *)(a2 + 80);
        do
        {
          v161 = *v160;
          v162 = *a1;
          v163 = *(unsigned int *)(*a1 + 32);
          if (v163 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v163 = *(unsigned int *)(v162 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v162 + 24) + 8 * v163) = v161;
          ++*(_DWORD *)(v162 + 32);
          ++v160;
          v159 -= 8;
        }
        while (v159);
        v496 = *(unsigned int *)(a2 + 16);
      }
      else
      {
        v496 = 0;
      }
      v710 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v710)
      {
        v711 = 8 * v710;
        v712 = (unint64_t *)(v157 + 8 * v496);
        do
        {
          v713 = *v712++;
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v713, *(_QWORD *)(*a1 + 16));
          v711 -= 8;
        }
        while (v711);
        v496 = *(unsigned int *)(a2 + 16);
        v710 = *(unsigned int *)(a2 + 20);
        if ((_DWORD)v710)
        {
          v714 = (unsigned int *)(v157 + 8 * v496 + 8 * v710);
          v715 = 4 * v710;
          do
          {
            v716 = *v714;
            v717 = *(_QWORD *)(*a1 + 16);
            v718 = *(unsigned int *)(v717 + 8);
            if (v718 >= *(unsigned int *)(v717 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v718 = *(unsigned int *)(v717 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v717 + 8 * v718) = v716;
            ++*(_DWORD *)(v717 + 8);
            ++v714;
            v715 -= 4;
          }
          while (v715);
          v496 = *(unsigned int *)(a2 + 16);
          LODWORD(v710) = *(_DWORD *)(a2 + 20);
        }
      }
      v719 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v719)
      {
        v720 = (unsigned int *)(v157 + 8 * v496 + 8 * v710 + 4 * v710);
        v721 = 4 * v719;
        do
        {
          v722 = *v720;
          v723 = *(_QWORD *)(*a1 + 16);
          v724 = *(unsigned int *)(v723 + 8);
          if (v724 >= *(unsigned int *)(v723 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v724 = *(unsigned int *)(v723 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v723 + 8 * v724) = v722;
          ++*(_DWORD *)(v723 + 8);
          ++v720;
          v721 -= 4;
        }
        while (v721);
        v496 = *(unsigned int *)(a2 + 16);
        v725 = *(unsigned int *)(a2 + 20);
        v726 = *(_DWORD *)(a2 + 24);
        LODWORD(v710) = *(_DWORD *)(a2 + 20);
      }
      else
      {
        v726 = 0;
        v725 = v710;
      }
      v727 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v727)
      {
        v728 = (uint64_t *)((v157 + 8 * v496 + 8 * v725 + 4 * (v710 + v726) + 7) & 0xFFFFFFFFFFFFFFF8);
        v729 = &v728[2 * v727];
        do
        {
          v730 = *a1;
          v731 = *v728;
          v732 = *(unsigned int *)(*a1 + 32);
          if (v732 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v732 = *(unsigned int *)(v730 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v730 + 24) + 8 * v732) = v731 & 0xFFFFFFFFFFFFFFFCLL;
          ++*(_DWORD *)(v730 + 32);
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v728[1], *(_QWORD *)(*a1 + 16));
          v728 += 2;
        }
        while (v728 != v729);
      }
      break;
    case 0x2B:
      v243 = *(unsigned int *)(a2 + 16);
      v244 = *(_QWORD *)(*a1 + 16);
      v245 = *(_DWORD *)(v244 + 8);
      if (v245 >= *(_DWORD *)(v244 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v245 = *(_DWORD *)(v244 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v244 + 8 * v245) = v243;
      ++*(_DWORD *)(v244 + 8);
      sub_22E7ECFB0(a1, (uint64_t *)(a2 + 24));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v246 = *(unsigned int *)(a2 + 48);
      v247 = *(_QWORD *)(*a1 + 16);
      v248 = *(_DWORD *)(v247 + 8);
      if (v248 >= *(_DWORD *)(v247 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v248 = *(_DWORD *)(v247 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v247 + 8 * v248) = v246;
      ++*(_DWORD *)(v247 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 52), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 56), *(_QWORD *)(*a1 + 16));
      v249 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v249)
      {
        v250 = a2 + 64;
        v251 = 8 * v249;
        v252 = (uint64_t *)(a2 + 64);
        do
        {
          v253 = *v252;
          v254 = *a1;
          v255 = *(unsigned int *)(*a1 + 32);
          if (v255 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v255 = *(unsigned int *)(v254 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v254 + 24) + 8 * v255) = v253;
          ++*(_DWORD *)(v254 + 32);
          ++v252;
          v251 -= 8;
        }
        while (v251);
        v510 = *(unsigned int *)(a2 + 16);
        if ((_DWORD)v510)
        {
          v511 = 8 * v510;
          v512 = (uint64_t *)(v250 + 8 * v510);
          do
          {
            v513 = *v512;
            v514 = *a1;
            v515 = *(unsigned int *)(*a1 + 32);
            if (v515 >= *(unsigned int *)(*a1 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v515 = *(unsigned int *)(v514 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v514 + 24) + 8 * v515) = v513;
            ++*(_DWORD *)(v514 + 32);
            ++v512;
            v511 -= 8;
          }
          while (v511);
          v615 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v615)
          {
            v616 = (uint64_t *)(v250 + 8 * v615 + 8 * v615);
            v617 = 8 * v615;
            do
            {
              v618 = *v616;
              v619 = *a1;
              v620 = *(unsigned int *)(*a1 + 32);
              if (v620 >= *(unsigned int *)(*a1 + 36))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v620 = *(unsigned int *)(v619 + 32);
              }
              *(_QWORD *)(*(_QWORD *)(v619 + 24) + 8 * v620) = v618;
              ++*(_DWORD *)(v619 + 32);
              ++v616;
              v617 -= 8;
            }
            while (v617);
            v777 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v777)
            {
              v778 = (uint64_t *)(v250 + 8 * v777 + 8 * v777 + 8 * v777);
              v779 = 8 * v777;
              do
              {
                v780 = *v778;
                v781 = *a1;
                v782 = *(unsigned int *)(*a1 + 32);
                if (v782 >= *(unsigned int *)(*a1 + 36))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v782 = *(unsigned int *)(v781 + 32);
                }
                *(_QWORD *)(*(_QWORD *)(v781 + 24) + 8 * v782) = v780;
                ++*(_DWORD *)(v781 + 32);
                ++v778;
                v779 -= 8;
              }
              while (v779);
              v837 = *(unsigned int *)(a2 + 16);
              if ((_DWORD)v837)
              {
                v838 = (uint64_t *)(v250 + 8 * v837 + 8 * v837 + 8 * v837 + 8 * v837);
                v839 = 8 * v837;
                do
                {
                  v840 = *v838;
                  v841 = *a1;
                  v842 = *(unsigned int *)(*a1 + 32);
                  if (v842 >= *(unsigned int *)(*a1 + 36))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v842 = *(unsigned int *)(v841 + 32);
                  }
                  *(_QWORD *)(*(_QWORD *)(v841 + 24) + 8 * v842) = v840;
                  ++*(_DWORD *)(v841 + 32);
                  ++v838;
                  v839 -= 8;
                }
                while (v839);
              }
            }
          }
        }
      }
      break;
    case 0x2C:
      v265 = *(unsigned int *)(a2 + 16);
      v266 = *(_QWORD *)(*a1 + 16);
      v267 = *(_DWORD *)(v266 + 8);
      if (v267 >= *(_DWORD *)(v266 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v267 = *(_DWORD *)(v266 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v266 + 8 * v267) = v265;
      ++*(_DWORD *)(v266 + 8);
      sub_22E7ECFB0(a1, (uint64_t *)(a2 + 24));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 56), *(_QWORD *)(*a1 + 16));
      v268 = *(unsigned int *)(a2 + 48);
      v269 = *(_QWORD *)(*a1 + 16);
      v270 = *(_DWORD *)(v269 + 8);
      if (v270 >= *(_DWORD *)(v269 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v270 = *(_DWORD *)(v269 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v269 + 8 * v270) = v268;
      ++*(_DWORD *)(v269 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 52), *(_QWORD *)(*a1 + 16));
      v271 = a2 + 64;
      v272 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v272)
        goto LABEL_754;
      v273 = 8 * v272;
      v274 = (uint64_t *)(a2 + 64);
      do
      {
        v275 = *v274;
        v276 = *a1;
        v277 = *(unsigned int *)(*a1 + 32);
        if (v277 >= *(unsigned int *)(*a1 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v277 = *(unsigned int *)(v276 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v276 + 24) + 8 * v277) = v275;
        ++*(_DWORD *)(v276 + 32);
        ++v274;
        v273 -= 8;
      }
      while (v273);
      v524 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v524)
        goto LABEL_754;
      v525 = 8 * v524;
      v526 = (uint64_t *)(v271 + 8 * v524);
      do
      {
        v527 = *v526;
        v528 = *a1;
        v529 = *(unsigned int *)(*a1 + 32);
        if (v529 >= *(unsigned int *)(*a1 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v529 = *(unsigned int *)(v528 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v528 + 24) + 8 * v529) = v527;
        ++*(_DWORD *)(v528 + 32);
        ++v526;
        v525 -= 8;
      }
      while (v525);
      v621 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v621)
        goto LABEL_754;
      v622 = (uint64_t *)(v271 + 8 * v621 + 8 * v621);
      v623 = 8 * v621;
      do
      {
        v624 = *v622;
        v625 = *a1;
        v626 = *(unsigned int *)(*a1 + 32);
        if (v626 >= *(unsigned int *)(*a1 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v626 = *(unsigned int *)(v625 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v625 + 24) + 8 * v626) = v624;
        ++*(_DWORD *)(v625 + 32);
        ++v622;
        v623 -= 8;
      }
      while (v623);
      v783 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v783)
        goto LABEL_754;
      v784 = (uint64_t *)(v271 + 8 * v783 + 8 * v783 + 8 * v783);
      v785 = 8 * v783;
      do
      {
        v786 = *v784;
        v787 = *a1;
        v788 = *(unsigned int *)(*a1 + 32);
        if (v788 >= *(unsigned int *)(*a1 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v788 = *(unsigned int *)(v787 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v787 + 24) + 8 * v788) = v786;
        ++*(_DWORD *)(v787 + 32);
        ++v784;
        v785 -= 8;
      }
      while (v785);
      v843 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v843)
      {
        v844 = (uint64_t *)(v271 + 8 * v843 + 8 * v843 + 8 * v843 + 8 * v843);
        v845 = 8 * v843;
        do
        {
          v846 = *v844;
          v847 = *a1;
          v848 = *(unsigned int *)(*a1 + 32);
          if (v848 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v848 = *(unsigned int *)(v847 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v847 + 24) + 8 * v848) = v846;
          ++*(_DWORD *)(v847 + 32);
          ++v844;
          v845 -= 8;
        }
        while (v845);
        v897 = *(unsigned int *)(a2 + 16);
      }
      else
      {
LABEL_754:
        v897 = 0;
      }
      v849 = *a1;
      v850 = *(_QWORD *)(v271 + 8 * v897 + 8 * v897 + 8 * v897 + 8 * v897 + 8 * v897);
      v851 = *(_DWORD *)(*a1 + 32);
      if (v851 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v851 = *(_DWORD *)(v849 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v849 + 24) + 8 * v851) = v850;
      ++*(_DWORD *)(v849 + 32);
      v852 = *a1;
      v853 = *(_QWORD *)(v271
                       + 8 * *(unsigned int *)(a2 + 16)
                       + 8 * *(unsigned int *)(a2 + 16)
                       + 8 * *(unsigned int *)(a2 + 16)
                       + 8 * *(unsigned int *)(a2 + 16)
                       + 8 * *(unsigned int *)(a2 + 16)
                       + 8);
      v854 = *(_DWORD *)(*a1 + 32);
      if (v854 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v854 = *(_DWORD *)(v852 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v852 + 24) + 8 * v854) = v853;
      ++*(_DWORD *)(v852 + 32);
      v855 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v855 != -1)
      {
        v856 = (uint64_t *)(v271 + 8 * v855 + 8 * v855 + 8 * v855 + 8 * v855 + 8 * v855 + 16);
        v857 = 8 * (v855 + 1);
        do
        {
          v858 = *v856;
          v859 = *a1;
          v860 = *(unsigned int *)(*a1 + 32);
          if (v860 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v860 = *(unsigned int *)(v859 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v859 + 24) + 8 * v860) = v858;
          ++*(_DWORD *)(v859 + 32);
          ++v856;
          v857 -= 8;
        }
        while (v857);
      }
      break;
    case 0x2E:
      v392 = *(unsigned int *)(a2 + 16);
      v393 = *(_QWORD *)(*a1 + 16);
      v394 = *(_DWORD *)(v393 + 8);
      if (v394 >= *(_DWORD *)(v393 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v394 = *(_DWORD *)(v393 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v393 + 8 * v394) = v392;
      ++*(_DWORD *)(v393 + 8);
      v395 = *(unsigned int *)(a2 + 20);
      v396 = *(_QWORD *)(*a1 + 16);
      v397 = *(_DWORD *)(v396 + 8);
      if (v397 >= *(_DWORD *)(v396 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v397 = *(_DWORD *)(v396 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v396 + 8 * v397) = v395;
      ++*(_DWORD *)(v396 + 8);
      v398 = *(unsigned int *)(a2 + 24);
      v399 = *(_QWORD *)(*a1 + 16);
      v400 = *(_DWORD *)(v399 + 8);
      if (v400 >= *(_DWORD *)(v399 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v400 = *(_DWORD *)(v399 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v399 + 8 * v400) = v398;
      ++*(_DWORD *)(v399 + 8);
      v401 = *(unsigned int *)(a2 + 28);
      v402 = *(_QWORD *)(*a1 + 16);
      v403 = *(_DWORD *)(v402 + 8);
      if (v403 >= *(_DWORD *)(v402 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v403 = *(_DWORD *)(v402 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v402 + 8 * v403) = v401;
      ++*(_DWORD *)(v402 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      for (i = 0; i != 20; i += 4)
      {
        v405 = *(unsigned int *)(a2 + i + 80);
        v406 = *(_QWORD *)(*a1 + 16);
        v407 = *(unsigned int *)(v406 + 8);
        if (v407 >= *(unsigned int *)(v406 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v407 = *(unsigned int *)(v406 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v406 + 8 * v407) = v405;
        ++*(_DWORD *)(v406 + 8);
        sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + i + 100), *(_QWORD *)(*a1 + 16));
      }
      sub_22E7E3E60(*a1, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
      sub_22E7E50C0(*a1, a2 + 56);
      v408 = *(unsigned int *)(a2 + 120);
      v409 = *(_QWORD *)(*a1 + 16);
      v410 = *(_DWORD *)(v409 + 8);
      if (v410 >= *(_DWORD *)(v409 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v410 = *(_DWORD *)(v409 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v409 + 8 * v410) = v408;
      ++*(_DWORD *)(v409 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 128), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 132), *(_QWORD *)(*a1 + 16));
      v411 = a2 + 136;
      v412 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v412)
        goto LABEL_473;
      v413 = 8 * v412;
      v414 = (uint64_t *)(a2 + 136);
      do
      {
        v415 = *v414;
        v416 = *a1;
        v417 = *(unsigned int *)(*a1 + 32);
        if (v417 >= *(unsigned int *)(*a1 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v417 = *(unsigned int *)(v416 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v416 + 24) + 8 * v417) = v415;
        ++*(_DWORD *)(v416 + 32);
        ++v414;
        v413 -= 8;
      }
      while (v413);
      v543 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v543)
      {
        v544 = 8 * v543;
        v545 = (uint64_t *)(v411 + 8 * v543);
        do
        {
          v546 = *v545;
          v547 = *a1;
          v548 = *(unsigned int *)(*a1 + 32);
          if (v548 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v548 = *(unsigned int *)(v547 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v547 + 24) + 8 * v548) = v546;
          ++*(_DWORD *)(v547 + 32);
          ++v545;
          v544 -= 8;
        }
        while (v544);
        v639 = (2 * *(_DWORD *)(a2 + 16));
      }
      else
      {
LABEL_473:
        v639 = 0;
      }
      v640 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v640)
      {
        v641 = 8 * v640;
        v642 = (unint64_t *)(v411 + 8 * v639);
        do
        {
          v643 = *v642++;
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v643, *(_QWORD *)(*a1 + 16));
          v641 -= 8;
        }
        while (v641);
        v640 = *(unsigned int *)(a2 + 20);
        v639 = (2 * *(_DWORD *)(a2 + 16));
        if ((_DWORD)v640)
        {
          v644 = (unsigned int *)(v411 + 8 * v639 + 8 * v640);
          v645 = 4 * v640;
          do
          {
            v646 = *v644;
            v647 = *(_QWORD *)(*a1 + 16);
            v648 = *(unsigned int *)(v647 + 8);
            if (v648 >= *(unsigned int *)(v647 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v648 = *(unsigned int *)(v647 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v647 + 8 * v648) = v646;
            ++*(_DWORD *)(v647 + 8);
            ++v644;
            v645 -= 4;
          }
          while (v645);
          LODWORD(v640) = *(_DWORD *)(a2 + 20);
          v639 = (2 * *(_DWORD *)(a2 + 16));
        }
      }
      v649 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v649)
      {
        v650 = (unsigned int *)(v411 + 8 * v639 + 8 * v640 + 4 * v640);
        v651 = 4 * v649;
        do
        {
          v652 = *v650;
          v653 = *(_QWORD *)(*a1 + 16);
          v654 = *(unsigned int *)(v653 + 8);
          if (v654 >= *(unsigned int *)(v653 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v654 = *(unsigned int *)(v653 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v653 + 8 * v654) = v652;
          ++*(_DWORD *)(v653 + 8);
          ++v650;
          v651 -= 4;
        }
        while (v651);
        v655 = *(unsigned int *)(a2 + 20);
        v656 = *(_DWORD *)(a2 + 24);
        v639 = (2 * *(_DWORD *)(a2 + 16));
        LODWORD(v640) = *(_DWORD *)(a2 + 20);
      }
      else
      {
        v656 = 0;
        v655 = v640;
      }
      v759 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v759)
      {
        v760 = (uint64_t *)((v411 + 8 * v639 + 8 * v655 + 4 * (v640 + v656) + 7) & 0xFFFFFFFFFFFFFFF8);
        v761 = &v760[2 * v759];
        do
        {
          v762 = *a1;
          v763 = *v760;
          v764 = *(unsigned int *)(*a1 + 32);
          if (v764 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v764 = *(unsigned int *)(v762 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v762 + 24) + 8 * v764) = v763 & 0xFFFFFFFFFFFFFFFCLL;
          ++*(_DWORD *)(v762 + 32);
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v760[1], *(_QWORD *)(*a1 + 16));
          v760 += 2;
        }
        while (v760 != v761);
      }
      break;
    case 0x35:
      v256 = *(unsigned int *)(a2 + 16);
      v257 = *(_QWORD *)(*a1 + 16);
      v258 = *(_DWORD *)(v257 + 8);
      if (v258 >= *(_DWORD *)(v257 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v258 = *(_DWORD *)(v257 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v257 + 8 * v258) = v256;
      ++*(_DWORD *)(v257 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v259 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v259)
      {
        v260 = 8 * v259;
        v261 = (uint64_t *)(a2 + 24);
        do
        {
          v262 = *v261;
          v263 = *a1;
          v264 = *(unsigned int *)(*a1 + 32);
          if (v264 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v264 = *(unsigned int *)(v263 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v263 + 24) + 8 * v264) = v262;
          ++*(_DWORD *)(v263 + 32);
          ++v261;
          v260 -= 8;
        }
        while (v260);
        v516 = *(unsigned int *)(a2 + 16);
        v517 = (uint64_t *)(a2 + 24 + 8 * v516);
        v898 = v517;
        v899 = 0;
        if ((_DWORD)v516)
        {
          v518 = 0;
          v519 = &v517[v516];
          do
          {
            v520 = v517;
            if ((v518 & 3) != 0)
            {
              if ((v518 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                v520 = (uint64_t *)((v518 & 0xFFFFFFFFFFFFFFFCLL) + 40);
              else
                v520 = (uint64_t *)sub_22F3AC1A8(*v517);
            }
            v521 = *v520;
            v522 = *a1;
            v523 = *(unsigned int *)(*a1 + 32);
            if (v523 >= *(unsigned int *)(*a1 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v523 = *(unsigned int *)(v522 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v522 + 24) + 8 * v523) = v521;
            ++*(_DWORD *)(v522 + 32);
            if ((v518 & 3) != 0)
            {
              if (v518 < 4)
                sub_22F3F2FE0((uint64_t)&v898, 1);
              else
                sub_22F0D8720((uint64_t)&v898);
            }
            else
            {
              v898 = v517 + 1;
            }
            v517 = v898;
            v518 = v899;
          }
          while (v898 != v519 || v899);
        }
      }
      break;
    case 0x3C:
      v78 = *(unsigned int *)(a2 + 24);
      v79 = *(_QWORD *)(*a1 + 16);
      v80 = *(_DWORD *)(v79 + 8);
      if (v80 >= *(_DWORD *)(v79 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v80 = *(_DWORD *)(v79 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v79 + 8 * v80) = v78;
      ++*(_DWORD *)(v79 + 8);
      v81 = *a1;
      v82 = *(_QWORD *)(a2 + 16);
      v83 = *(_DWORD *)(*a1 + 32);
      if (v83 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v83 = *(_DWORD *)(v81 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v81 + 24) + 8 * v83) = v82;
      ++*(_DWORD *)(v81 + 32);
      v84 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v84)
      {
        v85 = 8 * v84;
        v86 = (uint64_t *)(a2 + 32);
        do
        {
          v87 = *v86;
          v88 = *a1;
          v89 = *(unsigned int *)(*a1 + 32);
          if (v89 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v89 = *(unsigned int *)(v88 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v88 + 24) + 8 * v89) = v87;
          ++*(_DWORD *)(v88 + 32);
          ++v86;
          v85 -= 8;
        }
        while (v85);
        v478 = *(_DWORD *)(a2 + 24);
        if (v478)
        {
          for (j = 0; j != v478; ++j)
          {
            v480 = *a1;
            v481 = *(_QWORD *)(a2 + 32 + 8 * (j + *(_DWORD *)(a2 + 24)));
            v482 = *(unsigned int *)(*a1 + 32);
            if (v482 >= *(unsigned int *)(*a1 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v482 = *(unsigned int *)(v480 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v480 + 24) + 8 * v482) = v481;
            ++*(_DWORD *)(v480 + 32);
          }
        }
      }
      goto LABEL_12;
    case 0x3F:
      v34 = *(unsigned int *)(a2 + 16);
      v35 = *(_QWORD *)(*a1 + 16);
      v36 = *(_DWORD *)(v35 + 8);
      if (v36 >= *(_DWORD *)(v35 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v36 = *(_DWORD *)(v35 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v35 + 8 * v36) = v34;
      ++*(_DWORD *)(v35 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v37 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v37)
      {
        v38 = 8 * v37;
        v39 = (uint64_t *)(a2 + 24);
        do
        {
          v40 = *v39;
          v41 = *a1;
          v42 = *(unsigned int *)(*a1 + 32);
          if (v42 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v42 = *(unsigned int *)(v41 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v41 + 24) + 8 * v42) = v40;
          ++*(_DWORD *)(v41 + 32);
          ++v39;
          v38 -= 8;
        }
        while (v38);
        v466 = *(unsigned int *)(a2 + 16);
        if ((_DWORD)v466)
        {
          v467 = 8 * v466;
          v468 = (uint64_t *)(a2 + 24 + 8 * v466);
          do
          {
            v469 = *v468;
            v470 = *a1;
            v471 = *(unsigned int *)(*a1 + 32);
            if (v471 >= *(unsigned int *)(*a1 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v471 = *(unsigned int *)(v470 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v470 + 24) + 8 * v471) = v469;
            ++*(_DWORD *)(v470 + 32);
            ++v468;
            v467 -= 8;
          }
          while (v467);
        }
      }
      break;
    case 0x42:
      v434 = *(unsigned int *)(a2 + 16);
      v435 = *(_QWORD *)(*a1 + 16);
      v436 = *(_DWORD *)(v435 + 8);
      if (v436 >= *(_DWORD *)(v435 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v436 = *(_DWORD *)(v435 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v435 + 8 * v436) = v434;
      ++*(_DWORD *)(v435 + 8);
      v437 = *(unsigned int *)(a2 + 48);
      v438 = *(_QWORD *)(*a1 + 16);
      v439 = *(_DWORD *)(v438 + 8);
      if (v439 >= *(_DWORD *)(v438 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v439 = *(_DWORD *)(v438 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v438 + 8 * v439) = v437;
      ++*(_DWORD *)(v438 + 8);
      sub_22E7ECFB0(a1, (uint64_t *)(a2 + 24));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 52), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 56), *(_QWORD *)(*a1 + 16));
      sub_22E7E3E60(*a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72));
      sub_22E7E50C0(*a1, a2 + 80);
      v440 = a2 + 104;
      v441 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v441)
      {
        v442 = 8 * v441;
        v443 = (uint64_t *)(a2 + 104);
        do
        {
          v444 = *v443;
          v445 = *a1;
          v446 = *(unsigned int *)(*a1 + 32);
          if (v446 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v446 = *(unsigned int *)(v445 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v445 + 24) + 8 * v446) = v444;
          ++*(_DWORD *)(v445 + 32);
          ++v443;
          v442 -= 8;
        }
        while (v442);
        v549 = *(unsigned int *)(a2 + 16);
        if ((_DWORD)v549)
        {
          v550 = 8 * v549;
          v551 = (uint64_t *)(v440 + 8 * v549);
          do
          {
            v552 = *v551;
            v553 = *a1;
            v554 = *(unsigned int *)(*a1 + 32);
            if (v554 >= *(unsigned int *)(*a1 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v554 = *(unsigned int *)(v553 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v553 + 24) + 8 * v554) = v552;
            ++*(_DWORD *)(v553 + 32);
            ++v551;
            v550 -= 8;
          }
          while (v550);
          v657 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v657)
          {
            v658 = (uint64_t *)(v440 + 8 * v657 + 8 * v657);
            v659 = 8 * v657;
            do
            {
              v660 = *v658;
              v661 = *a1;
              v662 = *(unsigned int *)(*a1 + 32);
              if (v662 >= *(unsigned int *)(*a1 + 36))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v662 = *(unsigned int *)(v661 + 32);
              }
              *(_QWORD *)(*(_QWORD *)(v661 + 24) + 8 * v662) = v660;
              ++*(_DWORD *)(v661 + 32);
              ++v658;
              v659 -= 8;
            }
            while (v659);
            v801 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v801)
            {
              v802 = (uint64_t *)(v440 + 8 * v801 + 8 * v801 + 8 * v801);
              v803 = 8 * v801;
              do
              {
                v804 = *v802;
                v805 = *a1;
                v806 = *(unsigned int *)(*a1 + 32);
                if (v806 >= *(unsigned int *)(*a1 + 36))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v806 = *(unsigned int *)(v805 + 32);
                }
                *(_QWORD *)(*(_QWORD *)(v805 + 24) + 8 * v806) = v804;
                ++*(_DWORD *)(v805 + 32);
                ++v802;
                v803 -= 8;
              }
              while (v803);
              v867 = *(unsigned int *)(a2 + 16);
              if ((_DWORD)v867)
              {
                v868 = (uint64_t *)(v440 + 8 * v867 + 8 * v867 + 8 * v867 + 8 * v867);
                v869 = 8 * v867;
                do
                {
                  v870 = *v868;
                  v871 = *a1;
                  v872 = *(unsigned int *)(*a1 + 32);
                  if (v872 >= *(unsigned int *)(*a1 + 36))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v872 = *(unsigned int *)(v871 + 32);
                  }
                  *(_QWORD *)(*(_QWORD *)(v871 + 24) + 8 * v872) = v870;
                  ++*(_DWORD *)(v871 + 32);
                  ++v868;
                  v869 -= 8;
                }
                while (v869);
              }
            }
          }
        }
      }
      if (*(_DWORD *)(a2 + 48) == 1)
      {
        v873 = *(unsigned int *)(a2 + 16);
        if ((_DWORD)v873)
        {
          v874 = (uint64_t *)(v440 + 8 * v873 + 8 * v873 + 8 * v873 + 8 * v873 + 8 * v873);
          v875 = 8 * v873;
          do
          {
            v876 = *v874;
            v877 = *a1;
            v878 = *(unsigned int *)(*a1 + 32);
            if (v878 >= *(unsigned int *)(*a1 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v878 = *(unsigned int *)(v877 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v877 + 24) + 8 * v878) = v876;
            ++*(_DWORD *)(v877 + 32);
            ++v874;
            v875 -= 8;
          }
          while (v875);
          v879 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v879)
          {
            v880 = (uint64_t *)(v440 + 8 * v879 + 8 * v879 + 8 * v879 + 8 * v879 + 8 * v879 + 8 * v879);
            v881 = 8 * v879;
            do
            {
              v882 = *v880;
              v883 = *a1;
              v884 = *(unsigned int *)(*a1 + 32);
              if (v884 >= *(unsigned int *)(*a1 + 36))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v884 = *(unsigned int *)(v883 + 32);
              }
              *(_QWORD *)(*(_QWORD *)(v883 + 24) + 8 * v884) = v882;
              ++*(_DWORD *)(v883 + 32);
              ++v880;
              v881 -= 8;
            }
            while (v881);
            v885 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v885)
            {
              v886 = (uint64_t *)(v440 + 8 * v885 + 8 * v885 + 8 * v885 + 8 * v885 + 8 * v885 + 8 * v885 + 8 * v885);
              v887 = 8 * v885;
              do
              {
                v888 = *v886;
                v889 = *a1;
                v890 = *(unsigned int *)(*a1 + 32);
                if (v890 >= *(unsigned int *)(*a1 + 36))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v890 = *(unsigned int *)(v889 + 32);
                }
                *(_QWORD *)(*(_QWORD *)(v889 + 24) + 8 * v890) = v888;
                ++*(_DWORD *)(v889 + 32);
                ++v886;
                v887 -= 8;
              }
              while (v887);
            }
          }
        }
      }
      break;
    case 0x47:
      sub_22E7ECEFC((uint64_t)a1, (uint64_t *)(a2 + 16));
      v379 = *(unsigned int *)(a2 + 32);
      v380 = *(_QWORD *)(*a1 + 16);
      v381 = *(_DWORD *)(v380 + 8);
      if (v381 >= *(_DWORD *)(v380 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v381 = *(_DWORD *)(v380 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v380 + 8 * v381) = v379;
      ++*(_DWORD *)(v380 + 8);
      v382 = *(unsigned int *)(a2 + 36);
      v383 = *(_QWORD *)(*a1 + 16);
      v384 = *(_DWORD *)(v383 + 8);
      if (v384 >= *(_DWORD *)(v383 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v384 = *(_DWORD *)(v383 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v383 + 8 * v384) = v382;
      ++*(_DWORD *)(v383 + 8);
      v385 = *(unsigned int *)(a2 + 40);
      v386 = *(_QWORD *)(*a1 + 16);
      v387 = *(_DWORD *)(v386 + 8);
      if (v387 >= *(_DWORD *)(v386 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v387 = *(_DWORD *)(v386 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v386 + 8 * v387) = v385;
      ++*(_DWORD *)(v386 + 8);
      v388 = *a1;
      v389 = *(_QWORD *)(a2 + 64);
      v390 = *(_DWORD *)(*a1 + 32);
      if (v390 >= *(_DWORD *)(*a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v390 = *(_DWORD *)(v388 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v388 + 24) + 8 * v390) = v389;
      ++*(_DWORD *)(v388 + 32);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 28), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 44), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 48), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 52), *(_QWORD *)(*a1 + 16));
      v10 = *a1;
      v11 = *(_DWORD *)(a2 + 56);
      goto LABEL_315;
    case 0x49:
      v69 = *(unsigned int *)(a2 + 16);
      v70 = *(_QWORD *)(*a1 + 16);
      v71 = *(_DWORD *)(v70 + 8);
      if (v71 >= *(_DWORD *)(v70 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v71 = *(_DWORD *)(v70 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v70 + 8 * v71) = v69;
      ++*(_DWORD *)(v70 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v72 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v72)
      {
        v73 = (uint64_t *)(a2 + 24);
        v74 = 8 * v72;
        do
        {
          v75 = *v73;
          v76 = *a1;
          v77 = *(unsigned int *)(*a1 + 32);
          if (v77 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v77 = *(unsigned int *)(v76 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v76 + 24) + 8 * v77) = v75;
          ++*(_DWORD *)(v76 + 32);
          ++v73;
          v74 -= 8;
        }
        while (v74);
      }
      break;
    case 0x4C:
      v293 = *(unsigned int *)(a2 + 16);
      v294 = *(_QWORD *)(*a1 + 16);
      v295 = *(_DWORD *)(v294 + 8);
      if (v295 >= *(_DWORD *)(v294 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v295 = *(_DWORD *)(v294 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v294 + 8 * v295) = v293;
      ++*(_DWORD *)(v294 + 8);
      v296 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v296)
      {
        v297 = (uint64_t *)(a2 + 24);
        v298 = 8 * v296;
        do
        {
          v299 = *v297;
          v300 = *a1;
          v301 = *(unsigned int *)(*a1 + 32);
          if (v301 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v301 = *(unsigned int *)(v300 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v300 + 24) + 8 * v301) = v299;
          ++*(_DWORD *)(v300 + 32);
          ++v297;
          v298 -= 8;
        }
        while (v298);
      }
LABEL_12:
      v10 = *a1;
      v11 = *(_DWORD *)(a2 + 12);
LABEL_315:
      sub_22E7C9A94(*(_QWORD *)(v10 + 8), v11, *(_QWORD *)(v10 + 16));
      break;
    case 0x4D:
      v312 = *(unsigned int *)(a2 + 16);
      v313 = *(_QWORD *)(*a1 + 16);
      v314 = *(_DWORD *)(v313 + 8);
      if (v314 >= *(_DWORD *)(v313 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v314 = *(_DWORD *)(v313 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v313 + 8 * v314) = v312;
      ++*(_DWORD *)(v313 + 8);
      sub_22E7ECFB0(a1, (uint64_t *)(a2 + 24));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 48), *(_QWORD *)(*a1 + 16));
      sub_22E7E3E60(*a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      sub_22E7E50C0(*a1, a2 + 72);
      v315 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v315)
      {
        v316 = a2 + 96;
        v317 = 8 * v315;
        v318 = (uint64_t *)(a2 + 96);
        do
        {
          v319 = *v318;
          v320 = *a1;
          v321 = *(unsigned int *)(*a1 + 32);
          if (v321 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v321 = *(unsigned int *)(v320 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v320 + 24) + 8 * v321) = v319;
          ++*(_DWORD *)(v320 + 32);
          ++v318;
          v317 -= 8;
        }
        while (v317);
        v536 = *(unsigned int *)(a2 + 16);
        if ((_DWORD)v536)
        {
          v537 = 8 * v536;
          v538 = (uint64_t *)(v316 + 8 * v536);
          do
          {
            v539 = *v538;
            v540 = *a1;
            v541 = *(unsigned int *)(*a1 + 32);
            if (v541 >= *(unsigned int *)(*a1 + 36))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v541 = *(unsigned int *)(v540 + 32);
            }
            *(_QWORD *)(*(_QWORD *)(v540 + 24) + 8 * v541) = v539;
            ++*(_DWORD *)(v540 + 32);
            ++v538;
            v537 -= 8;
          }
          while (v537);
          v633 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v633)
          {
            v634 = (uint64_t *)(v316 + 8 * v633 + 8 * v633);
            v635 = 8 * v633;
            do
            {
              v636 = *v634;
              v637 = *a1;
              v638 = *(unsigned int *)(*a1 + 32);
              if (v638 >= *(unsigned int *)(*a1 + 36))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v638 = *(unsigned int *)(v637 + 32);
              }
              *(_QWORD *)(*(_QWORD *)(v637 + 24) + 8 * v638) = v636;
              ++*(_DWORD *)(v637 + 32);
              ++v634;
              v635 -= 8;
            }
            while (v635);
            v795 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v795)
            {
              v796 = (uint64_t *)(v316 + 8 * v795 + 8 * v795 + 8 * v795);
              v797 = 8 * v795;
              do
              {
                v798 = *v796;
                v799 = *a1;
                v800 = *(unsigned int *)(*a1 + 32);
                if (v800 >= *(unsigned int *)(*a1 + 36))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v800 = *(unsigned int *)(v799 + 32);
                }
                *(_QWORD *)(*(_QWORD *)(v799 + 24) + 8 * v800) = v798;
                ++*(_DWORD *)(v799 + 32);
                ++v796;
                v797 -= 8;
              }
              while (v797);
              v861 = *(unsigned int *)(a2 + 16);
              if ((_DWORD)v861)
              {
                v862 = (uint64_t *)(v316 + 8 * v861 + 8 * v861 + 8 * v861 + 8 * v861);
                v863 = 8 * v861;
                do
                {
                  v864 = *v862;
                  v865 = *a1;
                  v866 = *(unsigned int *)(*a1 + 32);
                  if (v866 >= *(unsigned int *)(*a1 + 36))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v866 = *(unsigned int *)(v865 + 32);
                  }
                  *(_QWORD *)(*(_QWORD *)(v865 + 24) + 8 * v866) = v864;
                  ++*(_DWORD *)(v865 + 32);
                  ++v862;
                  v863 -= 8;
                }
                while (v863);
              }
            }
          }
        }
      }
      break;
    case 0x51:
      v43 = *(unsigned int *)(a2 + 16);
      v44 = *(_QWORD *)(*a1 + 16);
      v45 = *(_DWORD *)(v44 + 8);
      if (v45 >= *(_DWORD *)(v44 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v45 = *(_DWORD *)(v44 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v44 + 8 * v45) = v43;
      ++*(_DWORD *)(v44 + 8);
      v46 = *(unsigned int *)(a2 + 20);
      v47 = *(_QWORD *)(*a1 + 16);
      v48 = *(_DWORD *)(v47 + 8);
      if (v48 >= *(_DWORD *)(v47 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = *(_DWORD *)(v47 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v47 + 8 * v48) = v46;
      ++*(_DWORD *)(v47 + 8);
      v49 = *(unsigned int *)(a2 + 24);
      v50 = *(_QWORD *)(*a1 + 16);
      v51 = *(_DWORD *)(v50 + 8);
      if (v51 >= *(_DWORD *)(v50 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v51 = *(_DWORD *)(v50 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v50 + 8 * v51) = v49;
      ++*(_DWORD *)(v50 + 8);
      v52 = *(unsigned int *)(a2 + 28);
      v53 = *(_QWORD *)(*a1 + 16);
      v54 = *(_DWORD *)(v53 + 8);
      if (v54 >= *(_DWORD *)(v53 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v54 = *(_DWORD *)(v53 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v53 + 8 * v54) = v52;
      ++*(_DWORD *)(v53 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v55 = 0;
      v56 = 1;
      do
      {
        v57 = v56;
        v58 = a2 + 4 * v55;
        v59 = *(unsigned int *)(v58 + 80);
        v60 = *(_QWORD *)(*a1 + 16);
        v61 = *(unsigned int *)(v60 + 8);
        if (v61 >= *(unsigned int *)(v60 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v61 = *(unsigned int *)(v60 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v60 + 8 * v61) = v59;
        ++*(_DWORD *)(v60 + 8);
        sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(v58 + 88), *(_QWORD *)(*a1 + 16));
        v56 = 0;
        v55 = 1;
      }
      while ((v57 & 1) != 0);
      sub_22E7E3E60(*a1, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
      sub_22E7E50C0(*a1, a2 + 56);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 96), *(_QWORD *)(*a1 + 16));
      v62 = a2 + 104;
      v63 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v63)
        goto LABEL_471;
      v64 = 8 * v63;
      v65 = (uint64_t *)(a2 + 104);
      do
      {
        v66 = *v65;
        v67 = *a1;
        v68 = *(unsigned int *)(*a1 + 32);
        if (v68 >= *(unsigned int *)(*a1 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v68 = *(unsigned int *)(v67 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v67 + 24) + 8 * v68) = v66;
        ++*(_DWORD *)(v67 + 32);
        ++v65;
        v64 -= 8;
      }
      while (v64);
      v472 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v472)
      {
        v473 = 8 * v472;
        v474 = (uint64_t *)(v62 + 8 * v472);
        do
        {
          v475 = *v474;
          v476 = *a1;
          v477 = *(unsigned int *)(*a1 + 32);
          if (v477 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v477 = *(unsigned int *)(v476 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v476 + 24) + 8 * v477) = v475;
          ++*(_DWORD *)(v476 + 32);
          ++v474;
          v473 -= 8;
        }
        while (v473);
        v561 = (2 * *(_DWORD *)(a2 + 16));
      }
      else
      {
LABEL_471:
        v561 = 0;
      }
      v562 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v562)
      {
        v563 = 8 * v562;
        v564 = (unint64_t *)(v62 + 8 * v561);
        do
        {
          v565 = *v564++;
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v565, *(_QWORD *)(*a1 + 16));
          v563 -= 8;
        }
        while (v563);
        v562 = *(unsigned int *)(a2 + 20);
        v561 = (2 * *(_DWORD *)(a2 + 16));
        if ((_DWORD)v562)
        {
          v566 = (unsigned int *)(v62 + 8 * v561 + 8 * v562);
          v567 = 4 * v562;
          do
          {
            v568 = *v566;
            v569 = *(_QWORD *)(*a1 + 16);
            v570 = *(unsigned int *)(v569 + 8);
            if (v570 >= *(unsigned int *)(v569 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v570 = *(unsigned int *)(v569 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v569 + 8 * v570) = v568;
            ++*(_DWORD *)(v569 + 8);
            ++v566;
            v567 -= 4;
          }
          while (v567);
          LODWORD(v562) = *(_DWORD *)(a2 + 20);
          v561 = (2 * *(_DWORD *)(a2 + 16));
        }
      }
      v571 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v571)
      {
        v572 = (unsigned int *)(v62 + 8 * v561 + 8 * v562 + 4 * v562);
        v573 = 4 * v571;
        do
        {
          v574 = *v572;
          v575 = *(_QWORD *)(*a1 + 16);
          v576 = *(unsigned int *)(v575 + 8);
          if (v576 >= *(unsigned int *)(v575 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v576 = *(unsigned int *)(v575 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v575 + 8 * v576) = v574;
          ++*(_DWORD *)(v575 + 8);
          ++v572;
          v573 -= 4;
        }
        while (v573);
        v577 = *(unsigned int *)(a2 + 20);
        v578 = *(_DWORD *)(a2 + 24);
        v561 = (2 * *(_DWORD *)(a2 + 16));
        LODWORD(v562) = *(_DWORD *)(a2 + 20);
      }
      else
      {
        v578 = 0;
        v577 = v562;
      }
      v669 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v669)
      {
        v670 = (unint64_t *)((v62 + 8 * v561 + 8 * v577 + 4 * (v562 + v578) + 7) & 0xFFFFFFFFFFFFFFF8);
        v671 = &v670[2 * v669];
        do
        {
          v672 = *a1;
          v673 = *v670;
          v674 = *(unsigned int *)(*a1 + 32);
          if (v674 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v674 = *(unsigned int *)(v672 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v672 + 24) + 8 * v674) = v673 & 0xFFFFFFFFFFFFFFFCLL;
          ++*(_DWORD *)(v672 + 32);
          v675 = *v670;
          v676 = *(_QWORD *)(*a1 + 16);
          v677 = *(unsigned int *)(v676 + 8);
          if (v677 >= *(unsigned int *)(v676 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v677 = *(unsigned int *)(v676 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v676 + 8 * v677) = (v675 >> 1) & 1;
          ++*(_DWORD *)(v676 + 8);
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v670[1], *(_QWORD *)(*a1 + 16));
          v670 += 2;
        }
        while (v670 != v671);
      }
      break;
    case 0x57:
      v373 = *(unsigned __int8 *)(a2 + 12);
      v374 = *(_QWORD *)(*a1 + 16);
      v375 = *(_DWORD *)(v374 + 8);
      if (v375 >= *(_DWORD *)(v374 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v375 = *(_DWORD *)(v374 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v374 + 8 * v375) = v373;
      ++*(_DWORD *)(v374 + 8);
      if (*(_BYTE *)(a2 + 12))
      {
        sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 16), *(_QWORD *)(*a1 + 16));
        sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 20), *(_QWORD *)(*a1 + 16));
        v376 = *(unsigned int *)(a2 + 16 + 8 * *(unsigned __int8 *)(a2 + 12));
        v377 = *(_QWORD *)(*a1 + 16);
        v378 = *(_DWORD *)(v377 + 8);
        if (v378 >= *(_DWORD *)(v377 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v378 = *(_DWORD *)(v377 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v377 + 8 * v378) = v376;
        ++*(_DWORD *)(v377 + 8);
      }
      break;
    case 0x59:
      v331 = *(unsigned int *)(a2 + 16);
      v332 = *(_QWORD *)(*a1 + 16);
      v333 = *(_DWORD *)(v332 + 8);
      if (v333 >= *(_DWORD *)(v332 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v333 = *(_DWORD *)(v332 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v332 + 8 * v333) = v331;
      ++*(_DWORD *)(v332 + 8);
      v334 = *(unsigned int *)(a2 + 20);
      v335 = *(_QWORD *)(*a1 + 16);
      v336 = *(_DWORD *)(v335 + 8);
      if (v336 >= *(_DWORD *)(v335 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v336 = *(_DWORD *)(v335 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v335 + 8 * v336) = v334;
      ++*(_DWORD *)(v335 + 8);
      v337 = *(unsigned int *)(a2 + 24);
      v338 = *(_QWORD *)(*a1 + 16);
      v339 = *(_DWORD *)(v338 + 8);
      if (v339 >= *(_DWORD *)(v338 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v339 = *(_DWORD *)(v338 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v338 + 8 * v339) = v337;
      ++*(_DWORD *)(v338 + 8);
      v340 = *(unsigned int *)(a2 + 28);
      v341 = *(_QWORD *)(*a1 + 16);
      v342 = *(_DWORD *)(v341 + 8);
      if (v342 >= *(_DWORD *)(v341 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v342 = *(_DWORD *)(v341 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v341 + 8 * v342) = v340;
      ++*(_DWORD *)(v341 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v343 = a2 + 80;
      v344 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v344)
      {
        v345 = 8 * v344;
        v346 = (uint64_t *)(a2 + 80);
        do
        {
          v347 = *v346;
          v348 = *a1;
          v349 = *(unsigned int *)(*a1 + 32);
          if (v349 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v349 = *(unsigned int *)(v348 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v348 + 24) + 8 * v349) = v347;
          ++*(_DWORD *)(v348 + 32);
          ++v346;
          v345 -= 8;
        }
        while (v345);
        v542 = *(unsigned int *)(a2 + 16);
      }
      else
      {
        v542 = 0;
      }
      v736 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v736)
      {
        v737 = 8 * v736;
        v738 = (unint64_t *)(v343 + 8 * v542);
        do
        {
          v739 = *v738++;
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v739, *(_QWORD *)(*a1 + 16));
          v737 -= 8;
        }
        while (v737);
        v542 = *(unsigned int *)(a2 + 16);
        v736 = *(unsigned int *)(a2 + 20);
        if ((_DWORD)v736)
        {
          v740 = (unsigned int *)(v343 + 8 * v542 + 8 * v736);
          v741 = 4 * v736;
          do
          {
            v742 = *v740;
            v743 = *(_QWORD *)(*a1 + 16);
            v744 = *(unsigned int *)(v743 + 8);
            if (v744 >= *(unsigned int *)(v743 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v744 = *(unsigned int *)(v743 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v743 + 8 * v744) = v742;
            ++*(_DWORD *)(v743 + 8);
            ++v740;
            v741 -= 4;
          }
          while (v741);
          v542 = *(unsigned int *)(a2 + 16);
          LODWORD(v736) = *(_DWORD *)(a2 + 20);
        }
      }
      v745 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v745)
      {
        v746 = (unsigned int *)(v343 + 8 * v542 + 8 * v736 + 4 * v736);
        v747 = 4 * v745;
        do
        {
          v748 = *v746;
          v749 = *(_QWORD *)(*a1 + 16);
          v750 = *(unsigned int *)(v749 + 8);
          if (v750 >= *(unsigned int *)(v749 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v750 = *(unsigned int *)(v749 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v749 + 8 * v750) = v748;
          ++*(_DWORD *)(v749 + 8);
          ++v746;
          v747 -= 4;
        }
        while (v747);
        v542 = *(unsigned int *)(a2 + 16);
        v751 = *(unsigned int *)(a2 + 20);
        v752 = *(_DWORD *)(a2 + 24);
        LODWORD(v736) = *(_DWORD *)(a2 + 20);
      }
      else
      {
        v752 = 0;
        v751 = v736;
      }
      v753 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v753)
      {
        v754 = (uint64_t *)((v343 + 8 * v542 + 8 * v751 + 4 * (v736 + v752) + 7) & 0xFFFFFFFFFFFFFFF8);
        v755 = &v754[2 * v753];
        do
        {
          v756 = *a1;
          v757 = *v754;
          v758 = *(unsigned int *)(*a1 + 32);
          if (v758 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v758 = *(unsigned int *)(v756 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v756 + 24) + 8 * v758) = v757 & 0xFFFFFFFFFFFFFFFCLL;
          ++*(_DWORD *)(v756 + 32);
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v754[1], *(_QWORD *)(*a1 + 16));
          v754 += 2;
        }
        while (v754 != v755);
      }
      break;
    case 0x5A:
      v447 = *(unsigned int *)(a2 + 16);
      v448 = *(_QWORD *)(*a1 + 16);
      v449 = *(_DWORD *)(v448 + 8);
      if (v449 >= *(_DWORD *)(v448 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v449 = *(_DWORD *)(v448 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v448 + 8 * v449) = v447;
      ++*(_DWORD *)(v448 + 8);
      v450 = *(unsigned int *)(a2 + 20);
      v451 = *(_QWORD *)(*a1 + 16);
      v452 = *(_DWORD *)(v451 + 8);
      if (v452 >= *(_DWORD *)(v451 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v452 = *(_DWORD *)(v451 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v451 + 8 * v452) = v450;
      ++*(_DWORD *)(v451 + 8);
      v453 = *(unsigned int *)(a2 + 24);
      v454 = *(_QWORD *)(*a1 + 16);
      v455 = *(_DWORD *)(v454 + 8);
      if (v455 >= *(_DWORD *)(v454 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v455 = *(_DWORD *)(v454 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v454 + 8 * v455) = v453;
      ++*(_DWORD *)(v454 + 8);
      v456 = *(unsigned int *)(a2 + 28);
      v457 = *(_QWORD *)(*a1 + 16);
      v458 = *(_DWORD *)(v457 + 8);
      if (v458 >= *(_DWORD *)(v457 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v458 = *(_DWORD *)(v457 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v457 + 8 * v458) = v456;
      ++*(_DWORD *)(v457 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v459 = a2 + 80;
      v460 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v460)
        goto LABEL_573;
      v461 = 8 * v460;
      v462 = (uint64_t *)(a2 + 80);
      do
      {
        v463 = *v462;
        v464 = *a1;
        v465 = *(unsigned int *)(*a1 + 32);
        if (v465 >= *(unsigned int *)(*a1 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v465 = *(unsigned int *)(v464 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v464 + 24) + 8 * v465) = v463;
        ++*(_DWORD *)(v464 + 32);
        ++v462;
        v461 -= 8;
      }
      while (v461);
      v555 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v555)
        goto LABEL_573;
      v556 = 8 * v555;
      v557 = (uint64_t *)(v459 + 8 * v555);
      do
      {
        v558 = *v557;
        v559 = *a1;
        v560 = *(unsigned int *)(*a1 + 32);
        if (v560 >= *(unsigned int *)(*a1 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v560 = *(unsigned int *)(v559 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v559 + 24) + 8 * v560) = v558;
        ++*(_DWORD *)(v559 + 32);
        ++v557;
        v556 -= 8;
      }
      while (v556);
      v663 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v663)
      {
        v664 = (uint64_t *)(v459 + 8 * v663 + 8 * v663);
        v665 = 8 * v663;
        do
        {
          v666 = *v664;
          v667 = *a1;
          v668 = *(unsigned int *)(*a1 + 32);
          if (v668 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v668 = *(unsigned int *)(v667 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v667 + 24) + 8 * v668) = v666;
          ++*(_DWORD *)(v667 + 32);
          ++v664;
          v665 -= 8;
        }
        while (v665);
        v807 = (3 * *(_DWORD *)(a2 + 16));
      }
      else
      {
LABEL_573:
        v807 = 0;
      }
      v808 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v808)
      {
        v809 = 8 * v808;
        v810 = (unint64_t *)(v459 + 8 * v807);
        do
        {
          v811 = *v810++;
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v811, *(_QWORD *)(*a1 + 16));
          v809 -= 8;
        }
        while (v809);
        v808 = *(unsigned int *)(a2 + 20);
        v807 = (3 * *(_DWORD *)(a2 + 16));
        if ((_DWORD)v808)
        {
          v812 = (unsigned int *)(v459 + 8 * v807 + 8 * v808);
          v813 = 4 * v808;
          do
          {
            v814 = *v812;
            v815 = *(_QWORD *)(*a1 + 16);
            v816 = *(unsigned int *)(v815 + 8);
            if (v816 >= *(unsigned int *)(v815 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v816 = *(unsigned int *)(v815 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v815 + 8 * v816) = v814;
            ++*(_DWORD *)(v815 + 8);
            ++v812;
            v813 -= 4;
          }
          while (v813);
          LODWORD(v808) = *(_DWORD *)(a2 + 20);
          v807 = (3 * *(_DWORD *)(a2 + 16));
        }
      }
      v817 = *(unsigned int *)(a2 + 24);
      if ((_DWORD)v817)
      {
        v818 = (unsigned int *)(v459 + 8 * v807 + 8 * v808 + 4 * v808);
        v819 = 4 * v817;
        do
        {
          v820 = *v818;
          v821 = *(_QWORD *)(*a1 + 16);
          v822 = *(unsigned int *)(v821 + 8);
          if (v822 >= *(unsigned int *)(v821 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v822 = *(unsigned int *)(v821 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v821 + 8 * v822) = v820;
          ++*(_DWORD *)(v821 + 8);
          ++v818;
          v819 -= 4;
        }
        while (v819);
        v823 = *(unsigned int *)(a2 + 20);
        v824 = *(_DWORD *)(a2 + 24);
        v807 = (3 * *(_DWORD *)(a2 + 16));
        LODWORD(v808) = *(_DWORD *)(a2 + 20);
      }
      else
      {
        v824 = 0;
        v823 = v808;
      }
      v825 = *(unsigned int *)(a2 + 28);
      if ((_DWORD)v825)
      {
        v826 = (uint64_t *)((v459 + 8 * v807 + 8 * v823 + 4 * (v808 + v824) + 7) & 0xFFFFFFFFFFFFFFF8);
        v827 = &v826[2 * v825];
        do
        {
          v828 = *a1;
          v829 = *v826;
          v830 = *(unsigned int *)(*a1 + 32);
          if (v830 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v830 = *(unsigned int *)(v828 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v828 + 24) + 8 * v830) = v829 & 0xFFFFFFFFFFFFFFFCLL;
          ++*(_DWORD *)(v828 + 32);
          sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v826[1], *(_QWORD *)(*a1 + 16));
          v826 += 2;
        }
        while (v826 != v827);
      }
      break;
    case 0x5B:
      v418 = *(unsigned int *)(a2 + 16);
      v419 = *(_QWORD *)(*a1 + 16);
      v420 = *(_DWORD *)(v419 + 8);
      if (v420 >= *(_DWORD *)(v419 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v420 = *(_DWORD *)(v419 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v419 + 8 * v420) = v418;
      ++*(_DWORD *)(v419 + 8);
      sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 12), *(_QWORD *)(*a1 + 16));
      v421 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v421)
      {
        v422 = 0;
        v423 = a2 + 24;
        v424 = 2 * v421;
        do
        {
          v425 = *(_QWORD *)(v423 + 8 * v422);
          v426 = *(_QWORD *)(v423 + 8 * (v422 + 1));
          v427 = v423 + 8 * (2 * *(_DWORD *)(a2 + 16));
          v428 = *(_DWORD *)(v427 + 4 * v422);
          v429 = *(_DWORD *)(v427 + 4 * (v422 + 1));
          v430 = *a1;
          v431 = *(unsigned int *)(*a1 + 32);
          if (v431 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v431 = *(unsigned int *)(v430 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v430 + 24) + 8 * v431) = v425;
          ++*(_DWORD *)(v430 + 32);
          v432 = *a1;
          v433 = *(unsigned int *)(*a1 + 32);
          if (v433 >= *(unsigned int *)(*a1 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v433 = *(unsigned int *)(v432 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v432 + 24) + 8 * v433) = v426;
          ++*(_DWORD *)(v432 + 32);
          sub_22E7C9A94(*(_QWORD *)(*a1 + 8), v428, *(_QWORD *)(*a1 + 16));
          sub_22E7C9A94(*(_QWORD *)(*a1 + 8), v429, *(_QWORD *)(*a1 + 16));
          v422 += 2;
        }
        while (v424 != v422);
      }
      break;
    default:
      break;
  }
  sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)a2, *(_QWORD *)(*a1 + 16));
  return sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a2 + 4), *(_QWORD *)(*a1 + 16));
}

uint64_t sub_22E7EBB0C(uint64_t result, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v3 = result;
    v4 = *a2;
    v5 = *(_QWORD *)(result + 16);
    v6 = *(_DWORD *)(v5 + 8);
    if (v6 >= *(_DWORD *)(v5 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v6 = *(_DWORD *)(v5 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
    ++*(_DWORD *)(v5 + 8);
    v7 = a2[1];
    v8 = *(_QWORD *)(v3 + 16);
    v9 = *(_DWORD *)(v8 + 8);
    if (v9 >= *(_DWORD *)(v8 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(v8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
    ++*(_DWORD *)(v8 + 8);
    v10 = *((unsigned __int8 *)a2 + 8);
    v11 = *(_QWORD *)(v3 + 16);
    v12 = *(_DWORD *)(v11 + 8);
    if (v12 >= *(_DWORD *)(v11 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(v11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
    ++*(_DWORD *)(v11 + 8);
    v13 = *a2;
    if ((_DWORD)v13)
    {
      v14 = (uint64_t *)(a2 + 4);
      do
      {
        v15 = *v14++;
        v23 = v3;
        result = sub_22E7E7200(&v23, v15);
        --v13;
      }
      while (v13);
    }
    if (*((_BYTE *)a2 + 8))
    {
      v16 = *(_QWORD *)&a2[2 * *a2 + 4 + 2 * a2[1]];
      v17 = *(_DWORD *)(v3 + 32);
      if (v17 >= *(_DWORD *)(v3 + 36))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = *(_DWORD *)(v3 + 32);
      }
      *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * v17) = v16;
      ++*(_DWORD *)(v3 + 32);
    }
    v18 = a2[1];
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = *(_DWORD *)(v3 + 32);
      v21 = 8 * v18;
      do
      {
        v22 = *(_QWORD *)&a2[2 * *a2 + 4 + v19 / 4];
        if (v20 >= *(_DWORD *)(v3 + 36))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v20 = *(_DWORD *)(v3 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * v20) = v22;
        v20 = *(_DWORD *)(v3 + 32) + 1;
        *(_DWORD *)(v3 + 32) = v20;
        v19 += 8;
      }
      while (v21 != v19);
    }
  }
  return result;
}

uint64_t sub_22E7EBD10(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[1024];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x41)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)v9 = v10;
        *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
        v9 += 16;
      }
      v8 += 16;
    }
    while (v8 != 1024);
    if (a2 > 0x40)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F2D0F40(a1, (uint64_t)v14, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x40)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F2D0F40(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

uint64_t sub_22E7EBE98(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(unsigned int *)(a2 + 8);
  v3 = *(_QWORD *)(result + 16);
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    v17 = *(unsigned int *)(a2 + 8);
    v19 = result;
    v13 = *(_QWORD *)(result + 16);
    v15 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v2 = v17;
    result = v19;
    v3 = v13;
    a2 = v15;
    v4 = *(_DWORD *)(v13 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  v5 = *(unsigned int *)(a2 + 8);
  v6 = *(uint64_t **)a2;
  if (v5 < 0x41)
    v6 = (uint64_t *)a2;
  if ((_DWORD)v5)
  {
    v7 = (v5 + 63) >> 6;
    do
    {
      v9 = *v6++;
      v8 = v9;
      v10 = *(_QWORD *)(result + 16);
      v11 = *(unsigned int *)(v10 + 8);
      if (v11 >= *(unsigned int *)(v10 + 12))
      {
        v20 = result;
        v14 = v6;
        v16 = *(_QWORD *)(result + 16);
        v18 = v7;
        v12 = v8;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
        v6 = v14;
        v7 = v18;
        result = v20;
        v10 = v16;
        v11 = *(unsigned int *)(v16 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = v8;
      ++*(_DWORD *)(v10 + 8);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22E7EBF8C(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  result = sub_22E7CA8EC(*(_QWORD *)(a1 + 8), a2 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = (a2 >> 2) & 1;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

uint64_t sub_22E7EC000(uint64_t result, __int128 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v10 = *(_QWORD *)(result + 16);
    v9 = a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v10;
    a3 = v9;
    v6 = *(_DWORD *)(v10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a3;
  ++*(_DWORD *)(v5 + 8);
  if (a3)
  {
    v7 = 24 * a3;
    do
    {
      v8 = *a2;
      v12 = *((_QWORD *)a2 + 2);
      v11 = v8;
      result = sub_22E7EC0BC(v4, &v11);
      a2 = (__int128 *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
  }
  return result;
}

void sub_22E7EC0BC(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  __asm { BR              X9 }
}

uint64_t sub_22E7EC214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_22E7EC2F0(v0, *(_QWORD *)(v1 + 8));
  v2 = sub_22F0EECD8(v1);
  if ((v2 & 0xFF00000000) != 0)
    v3 = v2 | 0x100000000;
  else
    v3 = 0;
  return sub_22F2D216C(v0, v3);
}

void sub_22E7EC250()
{
  uint64_t v0;
  uint64_t v1;

  sub_22E7CA8EC(*(_QWORD *)(v0 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v0 + 16));
  JUMPOUT(0x22E7EC118);
}

uint64_t sub_22E7EC27C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = *(unsigned __int8 *)(a2 + 12);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  return sub_22E7EBE98(a1, a2);
}

void sub_22E7EC2F0(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v6 = a2;
  v3 = sub_22F0F084C(&v6);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned int *)(v4 + 8);
  if (v5 >= *(unsigned int *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(unsigned int *)(v4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v5) = v3;
  ++*(_DWORD *)(v4 + 8);
  __asm { BR              X8 }
}

void sub_22E7EC418()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5[2];
  uint64_t v6;

  v2 = 0;
  if ((v1 & 6) == 2 && (v1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    if ((~*(_DWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) & 3) != 0)
      v2 = 0;
    else
      v2 = v1 & 0xFFFFFFFFFFFFFFF8;
  }
  sub_22E7CA8EC(*(_QWORD *)(v0 + 8), *(_QWORD *)(v2 + 16), *(_QWORD *)(v0 + 16));
  v3 = *(_QWORD *)(v2 + 24);
  v4 = *(_DWORD *)v2 >> 2;
  v5[0] = 8;
  v5[1] = v4;
  v6 = v3;
  sub_22E7EC0BC(v0, v5);
}

void sub_22E7EC5E4(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  v2 = a2 & 7;
  if (v2 == 7)
  {
    v3 = *(_DWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
    if (v3 >= 3)
      v3 = 3;
    v2 = v3 | 8;
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 >= *(_DWORD *)(v4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(v4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v5) = v2;
  ++*(_DWORD *)(v4 + 8);
  __asm { BR              X10 }
}

void sub_22E7EC7EC(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[9];

  v23[8] = *MEMORY[0x24BDAC8D0];
  v22 = 0x800000000;
  if (a2)
  {
    LODWORD(v3) = 0;
    do
    {
      if (v3 >= HIDWORD(v22))
      {
        v3 = a2;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        a2 = v3;
        LODWORD(v3) = v22;
      }
      v23[v3] = a2;
      v3 = (v22 + 1);
      LODWORD(v22) = v22 + 1;
      a2 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
    while (a2);
  }
  else
  {
    v3 = 0;
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 >= *(_DWORD *)(v4 + 12))
  {
    v20 = *(_QWORD *)(a1 + 16);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v20;
    v5 = *(_DWORD *)(v20 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v4 + 8 * v5) = v3;
  ++*(_DWORD *)(v4 + 8);
  for (i = v22; (_DWORD)v22; i = v22)
  {
    v7 = v23[i - 1];
    LODWORD(v22) = i - 1;
    v8 = *(_QWORD *)(v7 + 16);
    if (v8)
    {
      v9 = (*(_QWORD *)(v7 + 8) >> 1) & 3;
      if (v9 == 2)
      {
        v9 = 3u;
      }
      else if (v9 == 1)
      {
        v13 = *(_DWORD *)(v8 + 28) & 0x7F;
        v14 = v13 - 35;
        v15 = v13 == 16;
        v16 = 1;
        if (!v15)
          v16 = 2;
        v17 = v14 >= 3;
        v9 = 6;
        if (v17)
          v9 = v16;
      }
      else if (v9)
      {
        v9 = 4u;
      }
    }
    else
    {
      v9 = 5u;
    }
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(unsigned int *)(v10 + 8);
    if (v11 >= *(unsigned int *)(v10 + 12))
    {
      v19 = *(_QWORD *)(a1 + 16);
      v21 = v7;
      v18 = v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = v18;
      v10 = v19;
      v7 = v21;
      v11 = *(unsigned int *)(v19 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = v9;
    ++*(_DWORD *)(v10 + 8);
    if ((unint64_t)(v9 - 3) >= 2)
      __asm { BR              X8 }
    if ((*(_BYTE *)(v7 + 8) & 4) != 0)
      v12 = *(_QWORD *)(v7 + 16);
    else
      v12 = 0;
    sub_22E7E1FB4(*(_QWORD *)(a1 + 8), v12 & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(a1 + 16));
  }
}

uint64_t sub_22E7ECAD0(uint64_t result, unint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v10 = *(_QWORD *)(result + 16);
    v9 = a3;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v10;
    a3 = v9;
    v6 = *(_DWORD *)(v10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a3;
  ++*(_DWORD *)(v5 + 8);
  if (a3)
  {
    v7 = 8 * a3;
    do
    {
      v8 = *a2++;
      result = sub_22E7E1FB4(*(_QWORD *)(v4 + 8), v8, *(_QWORD *)(v4 + 16));
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_22E7ECB74(uint64_t result)
{
  uint64_t v1;

  if ((*(_BYTE *)result & 1) == 0)
  {
    v1 = result;
    llvm::deallocate_buffer(*(llvm **)(result + 8), (void *)(8 * *(unsigned int *)(result + 16)));
    return v1;
  }
  return result;
}

_DWORD *sub_22E7ECBB8(_DWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *v26;
  unsigned int v27;
  unsigned int v28;
  _DWORD *v29;
  unint64_t v30;
  uint64_t v31;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = (uint64_t **)*v3;
      v6 = (uint64_t **)(*v3 + 8);
      v5 = *v6;
      if (*v6)
      {
        while (1)
        {
          while (1)
          {
            v7 = (uint64_t **)v5;
            v8 = v5[4];
            if (v8 <= v2)
              break;
            v5 = *v7;
            v6 = v7;
            if (!*v7)
              goto LABEL_11;
          }
          if (v8 >= v2)
            break;
          v5 = v7[1];
          if (!v5)
          {
            v6 = v7 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
        v7 = (uint64_t **)(*v3 + 8);
LABEL_11:
        v9 = (uint64_t *)operator new(0x28uLL);
        v9[4] = v2;
        *v9 = 0;
        v9[1] = 0;
        v9[2] = (uint64_t)v7;
        *v6 = v9;
        v10 = (uint64_t *)**v4;
        if (v10)
        {
          *v4 = v10;
          v11 = *v6;
        }
        else
        {
          v11 = v9;
        }
        sub_22E49FD00(v4[1], v11);
        v4[2] = (uint64_t *)((char *)v4[2] + 1);
        result = sub_22F152B7C(v3[1], v2);
        if (result)
        {
          v12 = (unint64_t)result;
          v13 = (uint64_t *)v3[2];
          v31 = v3[3];
          sub_22E7ECE38(&v31, (unint64_t)result);
          do
          {
            v14 = *(_QWORD *)(v12 + 8);
            v12 = v14 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while ((v14 & 2) != 0 && v12);
          v15 = sub_22F1E1A48(*v13, v14 & 0xFFFFFFFFFFFFFFFCLL);
          v16 = (_QWORD *)*v13;
          while (1)
          {
            result = sub_22E49F3DC(v16, v15);
            if (!result)
              break;
            v17 = result[2];
            if (!v17)
              break;
            v18 = *v13;
            v19 = *(_DWORD *)(*v13 + 304);
            v20 = v19 + 1;
            if (v19 + 1 > 1)
            {
              if ((v19 & 0x80000000) != 0)
              {
                v22 = -2 - v19;
                if (((*(_QWORD *)(*(_QWORD *)(v18 + 224) + 8 * ((-2 - v19) >> 6)) >> (-2 - v19)) & 1) != 0)
                  v21 = (_DWORD *)(*(_QWORD *)(v18 + 200) + 24 * v22);
                else
                  v21 = (_DWORD *)sub_22F1E1134(*v13, v22, 0);
              }
              else
              {
                v21 = (_DWORD *)(*(_QWORD *)(v18 + 184) + 24 * v19);
              }
            }
            else
            {
              v21 = *(_DWORD **)(v18 + 184);
            }
            v23 = v17 & 0x7FFFFFFF;
            if ((*v21 & 0x7FFFFFFFu) <= v23
              && (v19 == -2
               || (v20 != *(_DWORD *)(v18 + 192)
                 ? ((v20 & 0x80000000) != 0
                  ? ((v27 = -3 - v19,
                      ((*(_QWORD *)(*(_QWORD *)(v18 + 224) + 8 * ((-3 - v19) >> 6)) >> (-3 - v19)) & 1) == 0)
                   ? (v26 = (_DWORD *)sub_22F1E1134(v18, v27, 0))
                   : (v26 = (_DWORD *)(*(_QWORD *)(v18 + 200) + 24 * v27)))
                  : (v26 = (_DWORD *)(*(_QWORD *)(v18 + 184) + 24 * v20)),
                    v25 = *v26 & 0x7FFFFFFF)
                 : (v25 = *(_DWORD *)(v18 + 216)),
                   v25 > v23)))
            {
              v24 = *(_DWORD *)(v18 + 304);
            }
            else
            {
              v24 = sub_22F1E1EE8(v18, v23);
            }
            v28 = v24;
            v29 = sub_22E49F3DC((_QWORD *)*v13, v24);
            if (v29)
              v30 = *(_QWORD *)((*((_QWORD *)v29 + 2) & 0xFFFFFFFFFFFFFFF8) + 8);
            else
              v30 = 0;
            sub_22E7ECE38(&v31, v30);
            v16 = (_QWORD *)*v13;
            v15 = v28;
          }
        }
      }
      v2 = *(_QWORD *)(v2 + 32);
    }
    while (v2);
  }
  return result;
}

uint64_t *sub_22E7ECE38(uint64_t *result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = *result;
  do
  {
    v4 = *(_QWORD *)(a2 + 8);
    a2 = v4 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v4 & 2) != 0 && a2);
  v6 = (uint64_t **)(v3 + 8);
  v5 = *(uint64_t **)(v3 + 8);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_12;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(v3 + 8);
LABEL_12:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a2;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = **(_QWORD **)v3;
    if (v10)
    {
      *(_QWORD *)v3 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    result = sub_22E49FD00(*(uint64_t **)(v3 + 8), v11);
    ++*(_QWORD *)(v3 + 16);
  }
  return result;
}

uint64_t sub_22E7ECEFC(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v3 = (uint64_t *)result;
  v4 = *((int *)a2 + 2);
  v5 = *(_QWORD *)(*(_QWORD *)result + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *v3;
  v8 = *a2;
  v9 = *(_DWORD *)(v7 + 32);
  if (v9 >= *(_DWORD *)(v7 + 36))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v7 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v9) = v8;
  ++*(_DWORD *)(v7 + 32);
  return result;
}

uint64_t sub_22E7ECFB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  result = sub_22E7ECEFC((uint64_t)a1, a2);
  v5 = *a1;
  v6 = a2[2];
  v7 = *(_DWORD *)(v5 + 32);
  if (v7 >= *(_DWORD *)(v5 + 36))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v5 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v7) = v6;
  ++*(_DWORD *)(v5 + 32);
  return result;
}

void sub_22E7ED018(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

BOOL sub_22E7ED088(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[2];
  if (*a1 != v2)
    *a1 = v1 + 24;
  return v1 != v2;
}

BOOL sub_22E7ED0AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = v1 + 24;
  return v1 != v2;
}

uint64_t sub_22E7ED0D0(_QWORD *a1)
{
  if (*a1 == a1[2])
    return 0;
  else
    return *a1;
}

uint64_t sub_22E7ED0E4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 24))
    return 0;
  else
    return *(_QWORD *)(a1 + 8);
}

uint64_t sub_22E7ED0F8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_13;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_13:
  *a3 = v7;
  return result;
}

_QWORD *sub_22E7ED194(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2D23D8(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22E7ED254(unsigned int *a1, size_t count)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v4 = (char *)malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4 || !count && (v4 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v5 = *a1;
    v6 = (_QWORD *)*((_QWORD *)a1 + 13);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = v6[2 * i + 1];
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 64);
            v10 = &v4[16 * ((count - 1) & *(_DWORD *)(v8 + 72))];
            *(_QWORD *)(v8 + 64) = *((_QWORD *)v10 + 1);
            ++*((_DWORD *)v10 + 1);
            *((_QWORD *)v10 + 1) = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    free(v6);
    *a1 = count;
    *((_QWORD *)a1 + 13) = v4;
  }
  else
  {
    v11 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    sub_22E7ED330(v11);
  }
}

_DWORD *sub_22E7ED330(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x23489D23C](8 * v8, 4);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2D26D0(a1, v4, &v4[2 * v3]);
    return (_DWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(8 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result = 0x7FFFFFFF;
        result += 2;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E7ED3F0(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL4 v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  int64_t v91;
  uint64_t *v92;

  v6 = (uint64_t *)result;
LABEL_2:
  v88 = a2 - 1;
  v85 = a2 - 3;
  v86 = a2 - 2;
  v7 = v6;
  v92 = a2;
  while (2)
  {
    v6 = v7;
    v8 = (char *)a2 - (char *)v7;
    v9 = a2 - v7;
    switch(v9)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v39 = *(a2 - 1);
        v40 = *v6;
        result = sub_22E7EDDA8(*(unsigned int **)(v39 + 16), *(unsigned int **)(*v6 + 16));
        if ((_DWORD)result)
        {
          *v6 = v39;
          *(a2 - 1) = v40;
        }
        return result;
      case 3:
        return sub_22E7EDB58(v6, v6 + 1, v88);
      case 4:
        return sub_22E7EDE08(v6, v6 + 1, v6 + 2, v88);
      case 5:
        return sub_22E7EDEA4(v6, v6 + 1, v6 + 2, v6 + 3, v88);
      default:
        if (v8 <= 191)
        {
          v41 = v6 + 1;
          v43 = v6 == a2 || v41 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v6;
              do
              {
                v47 = *v45;
                v46 = v45[1];
                v45 = v41;
                result = sub_22E7EDDA8(*(unsigned int **)(v46 + 16), *(unsigned int **)(v47 + 16));
                if ((_DWORD)result)
                {
                  v48 = v44;
                  while (1)
                  {
                    *(uint64_t *)((char *)v6 + v48 + 8) = v47;
                    if (!v48)
                      break;
                    v47 = *(uint64_t *)((char *)v6 + v48 - 8);
                    result = sub_22E7EDDA8(*(unsigned int **)(v46 + 16), *(unsigned int **)(v47 + 16));
                    v48 -= 8;
                    if ((result & 1) == 0)
                    {
                      v49 = (uint64_t *)((char *)v6 + v48 + 8);
                      goto LABEL_76;
                    }
                  }
                  v49 = v6;
LABEL_76:
                  *v49 = v46;
                }
                v41 = v45 + 1;
                v44 += 8;
              }
              while (v45 + 1 != a2);
            }
          }
          else if (!v43)
          {
            do
            {
              v83 = *v6;
              v82 = v6[1];
              v6 = v41;
              result = sub_22E7EDDA8(*(unsigned int **)(v82 + 16), *(unsigned int **)(v83 + 16));
              if ((_DWORD)result)
              {
                v84 = v6;
                do
                {
                  *v84 = v83;
                  v83 = *(v84 - 2);
                  result = sub_22E7EDDA8(*(unsigned int **)(v82 + 16), *(unsigned int **)(v83 + 16));
                  --v84;
                }
                while ((result & 1) != 0);
                *v84 = v82;
              }
              v41 = v6 + 1;
            }
            while (v6 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 != a2)
          {
            v50 = (unint64_t)(v9 - 2) >> 1;
            v51 = v50;
            v87 = v6;
            do
            {
              v52 = v51;
              if (v50 >= v51)
              {
                v91 = v51;
                v53 = (2 * v51) | 1;
                v54 = &v6[v53];
                if (2 * v51 + 2 >= v9)
                {
                  v56 = *v54;
                }
                else
                {
                  v55 = *v54;
                  v56 = v54[1];
                  v57 = sub_22E7EDDA8(*(unsigned int **)(*v54 + 16), *(unsigned int **)(v56 + 16));
                  if (v57)
                    ++v54;
                  else
                    v56 = v55;
                  if (v57)
                    v53 = 2 * v52 + 2;
                }
                v58 = &v6[v52];
                v59 = *v58;
                result = sub_22E7EDDA8(*(unsigned int **)(v56 + 16), *(unsigned int **)(*v58 + 16));
                if ((result & 1) == 0)
                {
                  do
                  {
                    *v58 = v56;
                    v58 = v54;
                    if (v50 < v53)
                      break;
                    v60 = (2 * v53) | 1;
                    v54 = &v6[v60];
                    v53 = 2 * v53 + 2;
                    if (v53 >= v9)
                    {
                      v56 = *v54;
                      v53 = v60;
                    }
                    else
                    {
                      v56 = *v54;
                      v61 = v54[1];
                      v62 = sub_22E7EDDA8(*(unsigned int **)(*v54 + 16), *(unsigned int **)(v61 + 16));
                      if (v62)
                      {
                        v56 = v61;
                        ++v54;
                      }
                      v6 = v87;
                      if (!v62)
                        v53 = v60;
                    }
                    result = sub_22E7EDDA8(*(unsigned int **)(v56 + 16), *(unsigned int **)(v59 + 16));
                  }
                  while (!(_DWORD)result);
                  *v58 = v59;
                  v52 = v91;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            v63 = v92;
            do
            {
              v64 = 0;
              v89 = *v6;
              v65 = v9 - 2;
              if (v9 < 2)
                v65 = v9 - 1;
              v66 = v65 >> 1;
              v67 = v6;
              do
              {
                v68 = (uint64_t)&v67[v64 + 1];
                v69 = (2 * v64) | 1;
                v70 = 2 * v64 + 2;
                if (v70 >= v9)
                {
                  v73 = *(_QWORD *)v68;
                  v64 = (2 * v64) | 1;
                }
                else
                {
                  v71 = *(_QWORD *)v68;
                  v72 = v67[v64 + 2];
                  result = sub_22E7EDDA8(*(unsigned int **)(*(_QWORD *)v68 + 16), *(unsigned int **)(v72 + 16));
                  if ((_DWORD)result)
                    v73 = v72;
                  else
                    v73 = v71;
                  if ((_DWORD)result)
                  {
                    v68 += 8;
                    v64 = v70;
                  }
                  else
                  {
                    v64 = v69;
                  }
                }
                *v67 = v73;
                v67 = (_QWORD *)v68;
              }
              while (v64 <= v66);
              v74 = v63 - 1;
              if ((uint64_t *)v68 == v63 - 1)
              {
                --v63;
                v75 = v9 - 1;
                *(_QWORD *)v68 = v89;
              }
              else
              {
                *(_QWORD *)v68 = *v74;
                --v63;
                v75 = v9 - 1;
                *v74 = v89;
                v76 = v68 - (_QWORD)v6 + 8;
                if (v76 >= 9)
                {
                  v77 = (((unint64_t)v76 >> 3) - 2) >> 1;
                  v78 = &v6[v77];
                  v79 = *v78;
                  v80 = *(_QWORD *)v68;
                  result = sub_22E7EDDA8(*(unsigned int **)(*v78 + 16), *(unsigned int **)(*(_QWORD *)v68 + 16));
                  if ((_DWORD)result)
                  {
                    do
                    {
                      *(_QWORD *)v68 = v79;
                      v68 = (uint64_t)v78;
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = &v6[v77];
                      v79 = *v78;
                      result = sub_22E7EDDA8(*(unsigned int **)(*v78 + 16), *(unsigned int **)(v80 + 16));
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v68 = v80;
                  }
                }
              }
              v81 = v9 <= 2;
              v9 = v75;
            }
            while (!v81);
          }
          return result;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = &v6[(unint64_t)v9 >> 1];
        if ((unint64_t)v8 < 0x401)
        {
          sub_22E7EDB58(v11, v6, v88);
        }
        else
        {
          sub_22E7EDB58(v6, v11, v88);
          sub_22E7EDB58(v6 + 1, v11 - 1, v86);
          sub_22E7EDB58(v6 + 2, &v6[v10 + 1], v85);
          sub_22E7EDB58(v11 - 1, v11, &v6[v10 + 1]);
          v12 = *v6;
          *v6 = *v11;
          *v11 = v12;
        }
        --a3;
        v13 = *v6;
        if ((a4 & 1) == 0)
        {
          v14 = *(unsigned int **)(v13 + 16);
          if (sub_22E7EDDA8(*(unsigned int **)(*(v6 - 1) + 16), v14))
            goto LABEL_12;
          result = sub_22E7EDDA8(v14, *(unsigned int **)(*v88 + 16));
          if ((result & 1) != 0)
          {
            v7 = v6;
            do
            {
              v29 = v7[1];
              ++v7;
              result = sub_22E7EDDA8(v14, *(unsigned int **)(v29 + 16));
            }
            while ((result & 1) == 0);
          }
          else
          {
            v30 = v6 + 1;
            do
            {
              v7 = v30;
              if (v30 >= a2)
                break;
              ++v30;
              result = sub_22E7EDDA8(v14, *(unsigned int **)(*v7 + 16));
            }
            while (!(_DWORD)result);
          }
          v31 = a2;
          if (v7 < a2)
          {
            v31 = a2;
            do
            {
              v32 = *--v31;
              result = sub_22E7EDDA8(v14, *(unsigned int **)(v32 + 16));
            }
            while ((result & 1) != 0);
          }
          if (v7 < v31)
          {
            v33 = *v7;
            v34 = *v31;
            do
            {
              *v7 = v34;
              *v31 = v33;
              v35 = *(unsigned int **)(v13 + 16);
              do
              {
                v36 = v7[1];
                ++v7;
                v33 = v36;
              }
              while (!sub_22E7EDDA8(v35, *(unsigned int **)(v36 + 16)));
              do
              {
                v37 = *--v31;
                v34 = v37;
                result = sub_22E7EDDA8(v35, *(unsigned int **)(v37 + 16));
              }
              while ((result & 1) != 0);
            }
            while (v7 < v31);
          }
          v38 = v7 - 1;
          if (v7 - 1 != v6)
            *v6 = *v38;
          a4 = 0;
          *v38 = v13;
          a2 = v92;
          continue;
        }
        v14 = *(unsigned int **)(v13 + 16);
LABEL_12:
        v15 = 0;
        do
          v16 = v6[++v15];
        while (sub_22E7EDDA8(*(unsigned int **)(v16 + 16), v14));
        v17 = &v6[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while (!sub_22E7EDDA8(*(unsigned int **)(v20 + 16), v14));
        }
        else
        {
          do
            v19 = *--v18;
          while (!sub_22E7EDDA8(*(unsigned int **)(v19 + 16), v14));
        }
        if (v17 >= v18)
        {
          v27 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = &v6[v15];
          v23 = v18;
          do
          {
            *v22 = v21;
            *v23 = v16;
            v24 = *(unsigned int **)(v13 + 16);
            do
            {
              v25 = v22[1];
              ++v22;
              v16 = v25;
            }
            while (sub_22E7EDDA8(*(unsigned int **)(v25 + 16), v24));
            do
            {
              v26 = *--v23;
              v21 = v26;
            }
            while (!sub_22E7EDDA8(*(unsigned int **)(v26 + 16), v24));
          }
          while (v22 < v23);
          v27 = v22 - 1;
          a2 = v92;
        }
        if (v27 != v6)
          *v6 = *v27;
        *v27 = v13;
        if (v17 < v18)
        {
LABEL_33:
          result = sub_22E7ED3F0(v6, v27, a3, a4 & 1);
          a4 = 0;
          v7 = v27 + 1;
          continue;
        }
        v28 = sub_22E7EDC24(v6, v27);
        v7 = v27 + 1;
        result = sub_22E7EDC24(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_22E7EDB58(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  BOOL v9;
  uint64_t v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = *a1;
  v8 = *(unsigned int **)(*a2 + 16);
  v9 = sub_22E7EDDA8(v8, *(unsigned int **)(*a1 + 16));
  v10 = *a3;
  result = sub_22E7EDDA8(*(unsigned int **)(*a3 + 16), v8);
  if (v9)
  {
    if (result)
    {
      *a1 = v10;
    }
    else
    {
      *a1 = v6;
      *a2 = v7;
      v14 = *a3;
      result = sub_22E7EDDA8(*(unsigned int **)(*a3 + 16), *(unsigned int **)(v7 + 16));
      if (!result)
        return result;
      *a2 = v14;
    }
    *a3 = v7;
  }
  else if (result)
  {
    *a2 = v10;
    *a3 = v6;
    v12 = *a2;
    v13 = *a1;
    result = sub_22E7EDDA8(*(unsigned int **)(*a2 + 16), *(unsigned int **)(*a1 + 16));
    if (result)
    {
      *a1 = v12;
      *a2 = v13;
    }
  }
  return result;
}

BOOL sub_22E7EDC24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (sub_22E7EDDA8(*(unsigned int **)(v6 + 16), *(unsigned int **)(*a1 + 16)))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      sub_22E7EDB58(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_22E7EDE08(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_22E7EDEA4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_22E7EDB58(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (sub_22E7EDDA8(*(unsigned int **)(*v9 + 16), *(unsigned int **)(v13 + 16)))
    {
      v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v16 = sub_22E7EDDA8(*(unsigned int **)(v12 + 16), *(unsigned int **)(v13 + 16));
        v14 = v15;
        if (!v16)
        {
          v17 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

BOOL sub_22E7EDDA8(unsigned int *a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  int v5;
  int v6;

  v2 = *a1;
  v3 = *a2;
  if (v3 >= v2)
    v4 = *a1;
  else
    v4 = *a2;
  if (v4 && (v5 = memcmp(a1 + 4, a2 + 4, v4)) != 0)
  {
    v6 = (v5 >> 31) | 1;
  }
  else
  {
    if (v2 < v3)
      v6 = -1;
    else
      v6 = 1;
    if (v2 == v3)
      v6 = 0;
  }
  return v6 == -1;
}

BOOL sub_22E7EDE08(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_22E7EDB58(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  result = sub_22E7EDDA8(*(unsigned int **)(*a4 + 16), *(unsigned int **)(*a3 + 16));
  if (result)
  {
    *a3 = v8;
    *a4 = v9;
    v11 = *a3;
    v12 = *a2;
    result = sub_22E7EDDA8(*(unsigned int **)(*a3 + 16), *(unsigned int **)(*a2 + 16));
    if (result)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = *a2;
      v14 = *a1;
      result = sub_22E7EDDA8(*(unsigned int **)(*a2 + 16), *(unsigned int **)(*a1 + 16));
      if (result)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL sub_22E7EDEA4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_22E7EDE08(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  result = sub_22E7EDDA8(*(unsigned int **)(*a5 + 16), *(unsigned int **)(*a4 + 16));
  if (result)
  {
    *a4 = v10;
    *a5 = v11;
    v13 = *a4;
    v14 = *a3;
    result = sub_22E7EDDA8(*(unsigned int **)(*a4 + 16), *(unsigned int **)(*a3 + 16));
    if (result)
    {
      *a3 = v13;
      *a4 = v14;
      v15 = *a3;
      v16 = *a2;
      result = sub_22E7EDDA8(*(unsigned int **)(*a3 + 16), *(unsigned int **)(*a2 + 16));
      if (result)
      {
        *a2 = v15;
        *a3 = v16;
        v17 = *a2;
        v18 = *a1;
        result = sub_22E7EDDA8(*(unsigned int **)(*a2 + 16), *(unsigned int **)(*a1 + 16));
        if (result)
        {
          *a1 = v17;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_22E7EDF6C(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2D2B04(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22E7EE02C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 2)
  {
    if (a2)
    {
      bzero(a1[1], 4 * a2);
      v5 += 4 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 2);
    if (v8 >> 62)
      abort();
    v9 = v4 - v6;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 62)
        sub_22E3B3F8C();
      v11 = (char *)operator new(4 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * (v7 >> 2)];
    v13 = &v11[4 * v10];
    bzero(v12, 4 * a2);
    while (v5 != v6)
    {
      v14 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    *a1 = v12;
    a1[1] = &v11[4 * a2 + v7];
    a1[2] = v13;
    if (v6)
      operator delete(v6);
  }
}

uint64_t sub_22E7EE148(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_22E7EE1DC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2D2CD4(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22E7EE29C(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *i;
  char *v47;
  __int128 v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v30 = *(char **)(a1 + 24);
      v31 = (uint64_t)&v30[-*(_QWORD *)a1];
      if (v6 < v31)
      {
        if (v30 != v5)
        {
          *(_QWORD *)&v57 = operator new(0x1000uLL);
          sub_22F2D2D80(a1, &v57);
          goto LABEL_25;
        }
        *(_QWORD *)&v57 = operator new(0x1000uLL);
        sub_22F2D2EA4((void **)a1, &v57);
        v32 = *(_QWORD **)(a1 + 8);
        v33 = *(char **)(a1 + 16);
        v36 = *v32;
        v34 = (char *)(v32 + 1);
        v35 = v36;
        *(_QWORD *)(a1 + 8) = v34;
        if (v33 == *(char **)(a1 + 24))
        {
          v37 = *(char **)a1;
          if ((unint64_t)v34 <= *(_QWORD *)a1)
          {
            if (v33 == v37)
              v49 = 1;
            else
              v49 = (v33 - v37) >> 2;
            if (v49 >> 61)
              goto LABEL_57;
            v50 = (char *)operator new(8 * v49);
            v51 = &v50[8 * (v49 >> 2)];
            v52 = v33 - v34;
            v25 = v33 == v34;
            v33 = v51;
            if (!v25)
            {
              v33 = &v51[v52 & 0xFFFFFFFFFFFFFFF8];
              v53 = 8 * (v52 >> 3);
              v54 = &v50[8 * (v49 >> 2)];
              do
              {
                v55 = *(_QWORD *)v34;
                v34 += 8;
                *(_QWORD *)v54 = v55;
                v54 += 8;
                v53 -= 8;
              }
              while (v53);
            }
            *(_QWORD *)a1 = v50;
            *(_QWORD *)(a1 + 8) = v51;
            *(_QWORD *)(a1 + 16) = v33;
            *(_QWORD *)(a1 + 24) = &v50[8 * v49];
            if (v37)
            {
              operator delete(v37);
              v33 = *(char **)(a1 + 16);
            }
          }
          else
          {
            v38 = (uint64_t)&v34[-*(_QWORD *)a1] >> 3;
            if (v38 >= -1)
              v39 = v38 + 1;
            else
              v39 = v38 + 2;
            v40 = -(v39 >> 1);
            v41 = v39 >> 1;
            v42 = &v34[-8 * v41];
            v43 = v33 - v34;
            if (v43)
            {
              memmove(&v34[-8 * v41], v34, v43);
              v34 = *(char **)(a1 + 8);
            }
            v33 = &v42[v43];
            *(_QWORD *)(a1 + 8) = &v34[8 * v40];
            *(_QWORD *)(a1 + 16) = v33;
          }
        }
        *(_QWORD *)v33 = v35;
        goto LABEL_24;
      }
      v44 = v31 >> 2;
      if (v30 == *(char **)a1)
        v45 = 1;
      else
        v45 = v44;
      v59 = a1 + 24;
      if (!(v45 >> 61))
      {
        *(_QWORD *)&v57 = operator new(8 * v45);
        *((_QWORD *)&v57 + 1) = v57 + v6;
        *(_QWORD *)&v58 = v57 + v6;
        *((_QWORD *)&v58 + 1) = v57 + 8 * v45;
        v56 = operator new(0x1000uLL);
        sub_22F2C31E8((uint64_t)&v57, &v56);
        for (i = *(_QWORD **)(a1 + 16); i != *(_QWORD **)(a1 + 8); sub_22F2D2EA4((void **)&v57, i))
          --i;
        v47 = *(char **)a1;
        v48 = v58;
        *(_OWORD *)a1 = v57;
        *(_OWORD *)(a1 + 16) = v48;
        if (v47)
          operator delete(v47);
        goto LABEL_25;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      *(_QWORD *)(a1 + 8) = v11;
      if (v5 != *(char **)(a1 + 24))
      {
LABEL_23:
        *(_QWORD *)v5 = v12;
LABEL_24:
        *(_QWORD *)(a1 + 16) += 8;
LABEL_25:
        v4 = *(char **)(a1 + 8);
        v8 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(a1 + 32) + v8;
        goto LABEL_26;
      }
      v14 = *(char **)a1;
      if ((unint64_t)v11 > *(_QWORD *)a1)
      {
        v15 = (uint64_t)&v11[-*(_QWORD *)a1] >> 3;
        if (v15 >= -1)
          v16 = v15 + 1;
        else
          v16 = v15 + 2;
        v17 = -(v16 >> 1);
        v18 = v16 >> 1;
        v19 = &v11[-8 * v18];
        v20 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v18], v11, v5 - v11);
          v5 = *(char **)(a1 + 8);
        }
        v21 = &v5[8 * v17];
        v5 = &v19[v20];
        *(_QWORD *)(a1 + 8) = v21;
        *(_QWORD *)(a1 + 16) = &v19[v20];
        goto LABEL_23;
      }
      if (v5 == v14)
        v22 = 1;
      else
        v22 = (v5 - v14) >> 2;
      if (!(v22 >> 61))
      {
        v23 = (char *)operator new(8 * v22);
        v24 = &v23[8 * (v22 >> 2)];
        v26 = v5 - v11;
        v25 = v5 == v11;
        v5 = v24;
        if (!v25)
        {
          v5 = &v24[v26 & 0xFFFFFFFFFFFFFFF8];
          v27 = 8 * (v26 >> 3);
          v28 = &v23[8 * (v22 >> 2)];
          do
          {
            v29 = *(_QWORD *)v11;
            v11 += 8;
            *(_QWORD *)v28 = v29;
            v28 += 8;
            v27 -= 8;
          }
          while (v27);
        }
        *(_QWORD *)a1 = v23;
        *(_QWORD *)(a1 + 8) = v24;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = &v23[8 * v22];
        if (v14)
        {
          operator delete(v14);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_23;
      }
    }
LABEL_57:
    sub_22E3B3F8C();
  }
LABEL_26:
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  *(_QWORD *)(a1 + 40) = v8 + 1;
}

uint64_t sub_22E7EE5E0(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_22E7EE6C4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_22E7EE748(a1, v7);
    v8 = 0;
    sub_22E7EE6C4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)result != 1)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_22E7EE6C4(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != 1)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == 2;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_22E7EE748(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E7EE808(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = 1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E7EE808(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = 1;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((unint64_t)(*(_QWORD *)a2 - 1) >= 2)
    {
      v11 = 0;
      result = sub_22E7EE6C4(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

int *sub_22E7EE8B4(int *result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v39 = *(_DWORD *)(a2 - 16);
        v40 = *(_DWORD *)v8;
        if (v39 < *(_DWORD *)v8)
        {
          *(_DWORD *)v8 = v39;
          *(_DWORD *)(a2 - 16) = v40;
          v41 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v41;
        }
        return result;
      case 3:
        return sub_22E7EEFAC((int *)v8, (int *)(v8 + 16), (int *)(a2 - 16));
      case 4:
        return sub_22E7EF1EC(v8, v8 + 16, v8 + 32, a2 - 16);
      case 5:
        return sub_22E7EF298(v8, v8 + 16, v8 + 32, v8 + 48, a2 - 16);
      default:
        if (v9 <= 383)
        {
          v42 = v8 + 16;
          v44 = v8 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v8;
              do
              {
                v47 = v42;
                v48 = *(_DWORD *)(v46 + 16);
                v49 = *(_DWORD *)v46;
                if (v48 < *(_DWORD *)v46)
                {
                  v50 = *(_QWORD *)(v46 + 24);
                  v51 = v45;
                  while (1)
                  {
                    v52 = v8 + v51;
                    *(_DWORD *)(v52 + 16) = v49;
                    *(_QWORD *)(v52 + 24) = *(_QWORD *)(v8 + v51 + 8);
                    if (!v51)
                      break;
                    v49 = *(_DWORD *)(v52 - 16);
                    v51 -= 16;
                    if (v48 >= v49)
                    {
                      v53 = v8 + v51 + 16;
                      goto LABEL_75;
                    }
                  }
                  v53 = v8;
LABEL_75:
                  *(_DWORD *)v53 = v48;
                  *(_QWORD *)(v53 + 8) = v50;
                }
                v42 = v47 + 16;
                v45 += 16;
                v46 = v47;
              }
              while (v47 + 16 != a2);
            }
          }
          else if (!v44)
          {
            v81 = (_QWORD *)(v8 + 24);
            do
            {
              v82 = v42;
              v83 = *(_DWORD *)(v7 + 16);
              v84 = *(_DWORD *)v7;
              if (v83 < *(_DWORD *)v7)
              {
                v85 = *(_QWORD *)(v7 + 24);
                v86 = v81;
                do
                {
                  v87 = v86;
                  *((_DWORD *)v86 - 2) = v84;
                  v88 = *(v86 - 2);
                  v86 -= 2;
                  *v87 = v88;
                  v84 = *((_DWORD *)v87 - 10);
                }
                while (v83 < v84);
                *((_DWORD *)v86 - 2) = v83;
                *v86 = v85;
              }
              v42 = v82 + 16;
              v81 += 2;
              v7 = v82;
            }
            while (v82 + 16 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v54 = (unint64_t)(v10 - 2) >> 1;
            v55 = v54;
            do
            {
              v56 = v55;
              if (v54 >= v55)
              {
                v57 = (2 * v55) | 1;
                v58 = v8 + 16 * v57;
                if (2 * v56 + 2 >= v10)
                {
                  v59 = *(_DWORD *)v58;
                }
                else
                {
                  v59 = *(_DWORD *)(v58 + 16);
                  v60 = *(_DWORD *)v58 < v59;
                  if (*(_DWORD *)v58 > v59)
                    v59 = *(_DWORD *)v58;
                  if (v60)
                  {
                    v58 += 16;
                    v57 = 2 * v56 + 2;
                  }
                }
                v61 = v8 + 16 * v56;
                v62 = *(_DWORD *)v61;
                if (v59 >= *(_DWORD *)v61)
                {
                  v63 = *(_QWORD *)(v61 + 8);
                  do
                  {
                    v64 = v61;
                    v61 = v58;
                    *(_DWORD *)v64 = v59;
                    *(_QWORD *)(v64 + 8) = *(_QWORD *)(v58 + 8);
                    if (v54 < v57)
                      break;
                    v65 = (2 * v57) | 1;
                    v58 = v8 + 16 * v65;
                    v57 = 2 * v57 + 2;
                    if (v57 >= v10)
                    {
                      v59 = *(_DWORD *)v58;
                      v57 = v65;
                    }
                    else
                    {
                      v59 = *(_DWORD *)v58;
                      result = (int *)(v58 + 16);
                      v66 = *(_DWORD *)(v58 + 16);
                      if (*(_DWORD *)v58 <= v66)
                        v59 = *(_DWORD *)(v58 + 16);
                      if (*(_DWORD *)v58 >= v66)
                        v57 = v65;
                      else
                        v58 += 16;
                    }
                  }
                  while (v59 >= v62);
                  *(_DWORD *)v61 = v62;
                  *(_QWORD *)(v61 + 8) = v63;
                }
              }
              v55 = v56 - 1;
            }
            while (v56);
            do
            {
              v67 = 0;
              v68 = *(_DWORD *)v8;
              v69 = *(_QWORD *)(v8 + 8);
              v70 = v8;
              do
              {
                v71 = v70 + 16 * v67 + 16;
                v72 = (2 * v67) | 1;
                v67 = 2 * v67 + 2;
                if (v67 >= v10)
                {
                  v73 = *(_DWORD *)v71;
                  v67 = v72;
                }
                else
                {
                  v73 = *(_DWORD *)v71;
                  result = (int *)*(unsigned int *)(v71 + 16);
                  if (*(_DWORD *)v71 <= (int)result)
                    v73 = *(_DWORD *)(v71 + 16);
                  if (*(_DWORD *)v71 >= (int)result)
                    v67 = v72;
                  else
                    v71 += 16;
                }
                *(_DWORD *)v70 = v73;
                *(_QWORD *)(v70 + 8) = *(_QWORD *)(v71 + 8);
                v70 = v71;
              }
              while (v67 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v71 == a2 - 16)
              {
                *(_DWORD *)v71 = v68;
                *(_QWORD *)(v71 + 8) = v69;
              }
              else
              {
                *(_DWORD *)v71 = *(_DWORD *)(a2 - 16);
                *(_QWORD *)(v71 + 8) = *(_QWORD *)(a2 - 8);
                *(_DWORD *)(a2 - 16) = v68;
                *(_QWORD *)(a2 - 8) = v69;
                v74 = v71 - v8 + 16;
                if (v74 >= 17)
                {
                  v75 = (((unint64_t)v74 >> 4) - 2) >> 1;
                  v76 = v8 + 16 * v75;
                  v77 = *(_DWORD *)v76;
                  v78 = *(_DWORD *)v71;
                  if (*(_DWORD *)v76 < *(_DWORD *)v71)
                  {
                    v79 = *(_QWORD *)(v71 + 8);
                    do
                    {
                      v80 = v71;
                      v71 = v76;
                      *(_DWORD *)v80 = v77;
                      *(_QWORD *)(v80 + 8) = *(_QWORD *)(v76 + 8);
                      if (!v75)
                        break;
                      v75 = (v75 - 1) >> 1;
                      v76 = v8 + 16 * v75;
                      v77 = *(_DWORD *)v76;
                    }
                    while (*(_DWORD *)v76 < v78);
                    *(_DWORD *)v71 = v78;
                    *(_QWORD *)(v71 + 8) = v79;
                  }
                }
              }
              a2 -= 16;
              v60 = v10-- <= 2;
            }
            while (!v60);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 16 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_22E7EEFAC((int *)(v7 + 16 * ((unint64_t)v10 >> 1)), (int *)v7, (int *)(a2 - 16));
        }
        else
        {
          sub_22E7EEFAC((int *)v7, (int *)(v7 + 16 * ((unint64_t)v10 >> 1)), (int *)(a2 - 16));
          sub_22E7EEFAC((int *)(v7 + 16), (int *)(v12 - 16), (int *)(a2 - 32));
          sub_22E7EEFAC((int *)(v7 + 32), (int *)(v7 + 16 + 16 * v11), (int *)(a2 - 48));
          result = sub_22E7EEFAC((int *)(v12 - 16), (int *)v12, (int *)(v7 + 16 + 16 * v11));
          v13 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v13;
          v14 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = v14;
        }
        --a3;
        v15 = *(_DWORD *)v7;
        if ((a4 & 1) == 0 && *(_DWORD *)(v7 - 16) >= v15)
        {
          if (v15 >= *(_DWORD *)(a2 - 16))
          {
            v30 = v7 + 16;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              v30 += 16;
            }
            while (v15 >= *(_DWORD *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = *(_DWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v15 >= v29);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
            {
              v32 = *(_DWORD *)(v31 - 16);
              v31 -= 16;
            }
            while (v15 < v32);
          }
          v33 = *(_QWORD *)(v7 + 8);
          if (v8 < v31)
          {
            v34 = *(_DWORD *)v8;
            v35 = *(_DWORD *)v31;
            do
            {
              *(_DWORD *)v8 = v35;
              *(_DWORD *)v31 = v34;
              v36 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = *(_QWORD *)(v31 + 8);
              *(_QWORD *)(v31 + 8) = v36;
              do
              {
                v37 = *(_DWORD *)(v8 + 16);
                v8 += 16;
                v34 = v37;
              }
              while (v15 >= v37);
              do
              {
                v38 = *(_DWORD *)(v31 - 16);
                v31 -= 16;
                v35 = v38;
              }
              while (v15 < v38);
            }
            while (v8 < v31);
          }
          if (v8 - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v15;
          *(_QWORD *)(v8 - 8) = v33;
          continue;
        }
        v16 = 0;
        v17 = *(_QWORD *)(v7 + 8);
        do
        {
          v18 = *(_DWORD *)(v7 + v16 + 16);
          v16 += 16;
        }
        while (v18 < v15);
        v19 = v7 + v16;
        v20 = (int *)a2;
        if (v16 == 16)
        {
          v20 = (int *)a2;
          do
          {
            if (v19 >= (unint64_t)v20)
              break;
            v22 = *(v20 - 4);
            v20 -= 4;
          }
          while (v22 >= v15);
        }
        else
        {
          do
          {
            v21 = *(v20 - 4);
            v20 -= 4;
          }
          while (v21 >= v15);
        }
        if (v19 >= (unint64_t)v20)
        {
          v8 = v7 + v16;
        }
        else
        {
          v23 = *v20;
          v8 = v7 + v16;
          v24 = v20;
          do
          {
            *(_DWORD *)v8 = v23;
            *v24 = v18;
            v25 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *((_QWORD *)v24 + 1);
            *((_QWORD *)v24 + 1) = v25;
            do
            {
              v26 = *(_DWORD *)(v8 + 16);
              v8 += 16;
              v18 = v26;
            }
            while (v26 < v15);
            do
            {
              v27 = *(v24 - 4);
              v24 -= 4;
              v23 = v27;
            }
            while (v27 >= v15);
          }
          while (v8 < (unint64_t)v24);
        }
        if (v8 - 16 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 16) = v15;
        *(_QWORD *)(v8 - 8) = v17;
        if (v19 < (unint64_t)v20)
        {
LABEL_32:
          result = (int *)sub_22E7EE8B4(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = sub_22E7EF06C(v7, v8 - 16);
        result = (int *)sub_22E7EF06C(v8, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 16;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

int *sub_22E7EEFAC(int *result, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v7 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v7;
      v8 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v8;
        v9 = *((_QWORD *)result + 1);
        *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v9;
      }
    }
  }
  else if (v5 >= v3)
  {
    *result = v3;
    *a2 = v4;
    v10 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v10;
    if (*a3 < v4)
    {
      *a2 = *a3;
      *a3 = v4;
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v10;
    }
  }
  else
  {
    *result = v5;
    *a3 = v4;
    v6 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v6;
  }
  return result;
}

BOOL sub_22E7EF06C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 16);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        v8 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      sub_22E7EEFAC((int *)a1, (int *)(a1 + 16), (int *)(a2 - 16));
      return 1;
    case 4:
      sub_22E7EF1EC(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_22E7EF298(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v9 = (int *)(a1 + 32);
      sub_22E7EEFAC((int *)a1, (int *)(a1 + 16), (int *)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)v10;
    v14 = *v9;
    if (*(_DWORD *)v10 < *v9)
    {
      v15 = *(_QWORD *)(v10 + 8);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_DWORD *)(v17 + 48) = v14;
        *(_QWORD *)(v17 + 56) = *(_QWORD *)(a1 + v16 + 40);
        if (v16 == -32)
          break;
        v14 = *(_DWORD *)(v17 + 16);
        v16 -= 16;
        if (v13 >= v14)
        {
          v18 = a1 + v16 + 48;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_DWORD *)v18 = v13;
      *(_QWORD *)(v18 + 8) = v15;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = (int *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

int *sub_22E7EF1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  result = sub_22E7EEFAC((int *)a1, (int *)a2, (int *)a3);
  v9 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v10;
    v11 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v11;
      v12 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v12;
      v13 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v13;
        v14 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v14;
      }
    }
  }
  return result;
}

int *sub_22E7EF298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  result = sub_22E7EF1EC(a1, a2, a3, a4);
  v11 = *(_DWORD *)a4;
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v11;
    v12 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v12;
    v13 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v13;
      v14 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v14;
      v15 = *(_DWORD *)a2;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v15;
        v16 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v16;
        v17 = *(_DWORD *)a1;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v17;
          v18 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v18;
        }
      }
    }
  }
  return result;
}

void sub_22E7EF378(unsigned int *a1, size_t count)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  size_t v12;

  v4 = (char *)malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4 || !count && (v4 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v5 = *a1;
    v6 = (_QWORD *)*((_QWORD *)a1 + 13);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = v6[2 * i + 1];
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 48);
            v10 = &v4[16 * ((count - 1) & *(_DWORD *)(v8 + 56))];
            *(_QWORD *)(v8 + 48) = *((_QWORD *)v10 + 1);
            ++*((_DWORD *)v10 + 1);
            *((_QWORD *)v10 + 1) = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    free(v6);
    *a1 = count;
    *((_QWORD *)a1 + 13) = v4;
  }
  else
  {
    v11 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    sub_22E7EF454(v11, v12);
  }
}

void sub_22E7EF454(unsigned int *a1, size_t count)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v4 = (char *)malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4 || !count && (v4 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v5 = *a1;
    v6 = (_QWORD *)*((_QWORD *)a1 + 13);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = v6[2 * i + 1];
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 16);
            v10 = &v4[16 * ((count - 1) & *(_DWORD *)(v8 + 24))];
            *(_QWORD *)(v8 + 16) = *((_QWORD *)v10 + 1);
            ++*((_DWORD *)v10 + 1);
            *((_QWORD *)v10 + 1) = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    free(v6);
    *a1 = count;
    *((_QWORD *)a1 + 13) = v4;
  }
  else
  {
    v11 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    sub_22E7EF530(v11);
  }
}

uint64_t sub_22E7EF530(uint64_t *a1, uint64_t *a2)
{
  if ((sub_22EFC5BC0(*a1, *a2) & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  else
    return sub_22EFC5BC0(*a2, *a1) >> 31;
}

unint64_t sub_22E7EF578(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  uint64_t v13;
  _QWORD v14[2];

  v8 = *(_DWORD *)a1;
  v9 = *(_DWORD *)(a1 + 4) + 1;
  *(_DWORD *)(a1 + 4) = v9;
  if (3 * v8 <= 4 * v9)
  {
    sub_22E7EF63C((unsigned int *)a1, 2 * v8);
    v8 = *(_DWORD *)a1;
  }
  v10 = *(_QWORD *)(a1 + 104);
  v11 = sub_22E3CD3D4(a1 + 8, 40, 3);
  *(_QWORD *)v11 = a2;
  *(_QWORD *)(v11 + 8) = a3;
  *(_QWORD *)(v11 + 16) = *a4;
  *(_QWORD *)(v11 + 24) = 0;
  v14[0] = a2;
  v14[1] = a3;
  result = sub_22E76930C((uint64_t)v14);
  *(_DWORD *)(v11 + 32) = result;
  v13 = v10 + 16 * ((v8 - 1) & result);
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v13 + 8);
  ++*(_DWORD *)(v13 + 4);
  *(_QWORD *)(v13 + 8) = v11;
  return result;
}

void sub_22E7EF63C(unsigned int *a1, size_t count)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v4 = (char *)malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4 || !count && (v4 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v5 = *a1;
    v6 = (_QWORD *)*((_QWORD *)a1 + 13);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = v6[2 * i + 1];
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 24);
            v10 = &v4[16 * ((count - 1) & *(_DWORD *)(v8 + 32))];
            *(_QWORD *)(v8 + 24) = *((_QWORD *)v10 + 1);
            ++*((_DWORD *)v10 + 1);
            *((_QWORD *)v10 + 1) = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    free(v6);
    *a1 = count;
    *((_QWORD *)a1 + 13) = v4;
  }
  else
  {
    v11 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    sub_22E7EF718(v11, v12, v13, v14);
  }
}

_BYTE *sub_22E7EF718(uint64_t a1, uint64_t a2, char *__src, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unsigned int v18;
  _DWORD *v19;
  int v20;
  _BYTE *__srca;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 2;
  v9 = *(unsigned int *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 12);
  v11 = a4 - __src;
  v12 = v9 + ((a4 - __src) >> 2);
  if (*(_QWORD *)a1 + 4 * v9 == a2)
  {
    if (v12 > v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v9) = *(_DWORD *)(a1 + 8);
      v7 = *(_QWORD *)a1;
    }
    if (v5 != a4)
    {
      memcpy((void *)(v7 + 4 * v9), v5, v11);
      LODWORD(v9) = *(_DWORD *)(a1 + 8);
      v7 = *(_QWORD *)a1;
    }
    *(_DWORD *)(a1 + 8) = v9 + (v11 >> 2);
    return (_BYTE *)(v7 + 4 * v8);
  }
  else
  {
    v15 = (uint64_t)v11 >> 2;
    if (v12 > v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_QWORD *)a1;
      v9 = *(unsigned int *)(a1 + 8);
    }
    v16 = (_BYTE *)(v7 + 4 * v9);
    __srca = (_BYTE *)(v7 + 4 * v8);
    v17 = (v16 - __srca) >> 2;
    if (v17 >= v15)
    {
      sub_22F2C49DC(a1, &v16[-4 * v15], (char *)(v7 + 4 * v9));
      if (&v16[-4 * v15] != __srca)
        memmove(&__srca[4 * v15], __srca, &v16[-4 * v15] - __srca);
      if (v5 != a4)
      {
        v13 = __srca;
        memmove(__srca, v5, v11);
        return v13;
      }
    }
    else
    {
      v18 = v9 + (v11 >> 2);
      *(_DWORD *)(a1 + 8) = v18;
      if (v8 != v9)
      {
        v19 = (_DWORD *)(v7 + 4 * v8);
        memcpy((void *)(v7 + 4 * v18 - 4 * v17), __srca, v16 - __srca);
        do
        {
          v20 = *(_DWORD *)v5;
          v5 += 4;
          *v19++ = v20;
          --v17;
        }
        while (v17);
      }
      if (v5 != a4)
        memcpy(v16, v5, a4 - v5);
    }
    return __srca;
  }
}

_QWORD *sub_22E7EF8BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_22E7EF974(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 16;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_22F2D2FD0((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 16;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_22E7EF974(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_22E7EFA24(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = v14;
    for (i = 8; i != 136; i += 8)
    {
      v10 = *(_QWORD *)(a1 + i);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
        *v8++ = v10;
    }
    if (a2 > 0x10)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F2D308C(a1, v14, v8);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](8 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F2D308C(a1, v6, (_QWORD *)v6 + v7);
    return llvm::deallocate_buffer(v6, (void *)(8 * v7));
  }
}

uint64_t sub_22E7EFB90(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t *v92;
  __int128 v93;
  __int128 v94;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  v87 = a2 - 4;
  v9 = a2 - 6;
  v10 = v7;
  v92 = a2;
  while (2)
  {
    v7 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_22EFC5BC0(*(a2 - 2), *v7);
        if ((result & 0x80000000) != 0)
        {
          v39 = *v7;
          *v7 = *(a2 - 2);
          *(a2 - 2) = v39;
          v40 = v7[1];
          v7[1] = *(a2 - 1);
          *(a2 - 1) = v40;
        }
        return result;
      case 3:
        return sub_22E7F02E4(v7, v7 + 2, v8);
      case 4:
        return sub_22E7F059C(v7, v7 + 2, v7 + 4, v8);
      case 5:
        return sub_22E7F0660(v7, v7 + 2, v7 + 4, v7 + 6, v8);
      default:
        if (v11 <= 383)
        {
          v41 = v7 + 2;
          v43 = v7 == a2 || v41 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v7;
              do
              {
                v46 = v45[2];
                v47 = *v45;
                v45 = v41;
                result = sub_22EFC5BC0(v46, v47);
                if ((result & 0x80000000) != 0)
                {
                  v93 = *(_OWORD *)v45;
                  v48 = *v45;
                  v49 = v44;
                  while (1)
                  {
                    v50 = (char *)v7 + v49;
                    v51 = *(uint64_t *)((char *)v7 + v49 + 8);
                    *((_QWORD *)v50 + 2) = *(uint64_t *)((char *)v7 + v49);
                    *((_QWORD *)v50 + 3) = v51;
                    if (!v49)
                      break;
                    result = sub_22EFC5BC0(v48, *((_QWORD *)v50 - 2));
                    v49 -= 16;
                    if ((result & 0x80000000) == 0)
                    {
                      v52 = (uint64_t *)((char *)v7 + v49 + 16);
                      goto LABEL_73;
                    }
                  }
                  v52 = v7;
LABEL_73:
                  *(_OWORD *)v52 = v93;
                }
                v41 = v45 + 2;
                v44 += 16;
              }
              while (v45 + 2 != a2);
            }
          }
          else if (!v43)
          {
            v80 = v7 + 3;
            do
            {
              v81 = v7[2];
              v82 = *v7;
              v7 = v41;
              result = sub_22EFC5BC0(v81, v82);
              if ((result & 0x80000000) != 0)
              {
                v94 = *(_OWORD *)v7;
                v83 = *v7;
                v84 = v80;
                do
                {
                  v85 = v84;
                  *(v84 - 1) = *(v84 - 3);
                  v86 = *(v84 - 2);
                  v84 -= 2;
                  *v85 = v86;
                  result = sub_22EFC5BC0(v83, *(v85 - 5));
                }
                while ((result & 0x80000000) != 0);
                *(_OWORD *)(v84 - 1) = v94;
              }
              v41 = v7 + 2;
              v80 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v53 = (unint64_t)(v12 - 2) >> 1;
            v54 = v53;
            do
            {
              v55 = v54;
              if (v53 >= v54)
              {
                v56 = (2 * v54) | 1;
                v57 = &v7[2 * v56];
                if (2 * v54 + 2 < v12)
                {
                  v58 = sub_22EFC5BC0(*v57, v57[2]);
                  if (v58 < 0)
                    v57 += 2;
                  a2 = v92;
                  if (v58 < 0)
                    v56 = 2 * v55 + 2;
                }
                v59 = &v7[2 * v55];
                result = sub_22EFC5BC0(*v57, *v59);
                if ((result & 0x80000000) == 0)
                {
                  v89 = *(_OWORD *)v59;
                  v60 = *v59;
                  do
                  {
                    v61 = v59;
                    v59 = v57;
                    *v61 = *v57;
                    v61[1] = v57[1];
                    if (v53 < v56)
                      break;
                    v62 = (2 * v56) | 1;
                    v57 = &v7[2 * v62];
                    v63 = 2 * v56 + 2;
                    if (v63 < v12 && (int)sub_22EFC5BC0(*v57, v57[2]) < 0)
                    {
                      v57 += 2;
                      v62 = v63;
                    }
                    result = sub_22EFC5BC0(*v57, v60);
                    v56 = v62;
                  }
                  while ((result & 0x80000000) == 0);
                  *(_OWORD *)v59 = v89;
                  a2 = v92;
                }
              }
              v54 = v55 - 1;
            }
            while (v55);
            do
            {
              v64 = a2;
              v65 = 0;
              v66 = v7[1];
              v90 = *v7;
              v67 = v12 - 2;
              if (v12 < 2)
                v67 = v12 - 1;
              v68 = v67 >> 1;
              v69 = v7;
              do
              {
                v70 = &v69[2 * v65 + 2];
                v71 = (2 * v65) | 1;
                v72 = 2 * v65 + 2;
                if (v72 < v12)
                {
                  result = sub_22EFC5BC0(*v70, v69[2 * v65 + 4]);
                  if ((int)result < 0)
                  {
                    v70 += 2;
                    v71 = v72;
                  }
                }
                *v69 = *v70;
                v69[1] = v70[1];
                v69 = v70;
                v65 = v71;
              }
              while (v71 <= v68);
              v73 = v64 - 2;
              if (v70 == v64 - 2)
              {
                *v70 = v90;
                v70[1] = v66;
              }
              else
              {
                *v70 = *(v64 - 2);
                v70[1] = *(v64 - 1);
                *(v64 - 2) = v90;
                *(v64 - 1) = v66;
                v74 = (char *)v70 - (char *)v7 + 16;
                if (v74 >= 17)
                {
                  v75 = (((unint64_t)v74 >> 4) - 2) >> 1;
                  v76 = &v7[2 * v75];
                  result = sub_22EFC5BC0(*v76, *v70);
                  if ((result & 0x80000000) != 0)
                  {
                    v91 = *(_OWORD *)v70;
                    v77 = *v70;
                    do
                    {
                      v78 = v70;
                      v70 = v76;
                      *v78 = *v76;
                      v78[1] = v76[1];
                      if (!v75)
                        break;
                      v75 = (v75 - 1) >> 1;
                      v76 = &v7[2 * v75];
                      result = sub_22EFC5BC0(*v76, v77);
                    }
                    while ((result & 0x80000000) != 0);
                    *(_OWORD *)v70 = v91;
                  }
                }
              }
              a2 = v73;
            }
            while (v12-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v7[2 * ((unint64_t)v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          sub_22E7F02E4(v14, v7, v8);
        }
        else
        {
          sub_22E7F02E4(v7, v14, v8);
          sub_22E7F02E4(v7 + 2, v14 - 2, v87);
          sub_22E7F02E4(v7 + 4, &v7[2 * v13 + 2], v9);
          sub_22E7F02E4(v14 - 2, v14, &v7[2 * v13 + 2]);
          v15 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v15;
        }
        --a3;
        if ((a4 & 1) == 0 && (sub_22EFC5BC0(*(v7 - 2), *v7) & 0x80000000) == 0)
        {
          v29 = *v7;
          v30 = v7[1];
          result = sub_22EFC5BC0(*v7, *v8);
          if ((result & 0x80000000) != 0)
          {
            v10 = v7;
            do
            {
              v32 = v10[2];
              v10 += 2;
              result = sub_22EFC5BC0(v29, v32);
            }
            while ((result & 0x80000000) == 0);
          }
          else
          {
            v31 = v7 + 2;
            do
            {
              v10 = v31;
              if (v31 >= a2)
                break;
              v31 += 2;
              result = sub_22EFC5BC0(v29, *v10);
            }
            while ((result & 0x80000000) == 0);
          }
          v33 = a2;
          if (v10 < a2)
          {
            v33 = a2;
            do
            {
              v34 = *(v33 - 2);
              v33 -= 2;
              result = sub_22EFC5BC0(v29, v34);
            }
            while ((result & 0x80000000) != 0);
          }
          while (v10 < v33)
          {
            v35 = *v10;
            *v10 = *v33;
            *v33 = v35;
            v36 = v10[1];
            v10[1] = v33[1];
            v33[1] = v36;
            do
            {
              v37 = v10[2];
              v10 += 2;
            }
            while ((sub_22EFC5BC0(v29, v37) & 0x80000000) == 0);
            do
            {
              v38 = *(v33 - 2);
              v33 -= 2;
              result = sub_22EFC5BC0(v29, v38);
            }
            while ((result & 0x80000000) != 0);
          }
          if (v10 - 2 != v7)
          {
            *v7 = *(v10 - 2);
            v7[1] = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v29;
          *(v10 - 1) = v30;
          continue;
        }
        v16 = 0;
        v88 = *(_OWORD *)v7;
        v17 = *v7;
        do
        {
          v18 = sub_22EFC5BC0(v7[v16 + 2], v17);
          v16 += 2;
        }
        while (v18 < 0);
        v19 = &v7[v16];
        if (v16 == 2)
        {
          a2 = v92;
          do
          {
            if (v19 >= a2)
              break;
            v21 = *(a2 - 2);
            a2 -= 2;
          }
          while ((sub_22EFC5BC0(v21, v17) & 0x80000000) == 0);
        }
        else
        {
          do
          {
            v20 = *(a2 - 2);
            a2 -= 2;
          }
          while ((sub_22EFC5BC0(v20, v17) & 0x80000000) == 0);
        }
        v10 = &v7[v16];
        if (v19 < a2)
        {
          v22 = a2;
          do
          {
            v23 = *v10;
            *v10 = *v22;
            *v22 = v23;
            v24 = v10[1];
            v10[1] = v22[1];
            v22[1] = v24;
            do
            {
              v25 = v10[2];
              v10 += 2;
            }
            while ((sub_22EFC5BC0(v25, v17) & 0x80000000) != 0);
            do
            {
              v26 = *(v22 - 2);
              v22 -= 2;
            }
            while ((sub_22EFC5BC0(v26, v17) & 0x80000000) == 0);
          }
          while (v10 < v22);
        }
        if (v10 - 2 != v7)
        {
          *v7 = *(v10 - 2);
          v7[1] = *(v10 - 1);
        }
        *((_OWORD *)v10 - 1) = v88;
        v27 = v19 >= a2;
        a2 = v92;
        if (!v27)
        {
LABEL_31:
          result = sub_22E7EFB90(v7, v10 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = sub_22E7F03F4(v7, v10 - 2);
        result = sub_22E7F03F4(v10, v92);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_31;
        }
        a2 = v10 - 2;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_22E7F02E4(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v6 = sub_22EFC5BC0(*a2, *a1);
  result = sub_22EFC5BC0(*a3, *a2);
  if (v6 < 0)
  {
    v13 = *a1;
    if ((result & 0x80000000) != 0)
    {
      *a1 = *a3;
      *a3 = v13;
      v17 = a3 + 1;
      v12 = a1 + 1;
    }
    else
    {
      *a1 = *a2;
      v14 = a2[1];
      *a2 = v13;
      v15 = a1[1];
      a1[1] = v14;
      a2[1] = v15;
      result = sub_22EFC5BC0(*a3, *a2);
      if ((result & 0x80000000) == 0)
        return result;
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = a3 + 1;
      v12 = a2 + 1;
    }
    v10 = v17;
    goto LABEL_10;
  }
  if ((result & 0x80000000) != 0)
  {
    v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    v10 = a2 + 1;
    v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    result = sub_22EFC5BC0(*a2, *a1);
    if ((result & 0x80000000) != 0)
    {
      v11 = *a1;
      *a1 = *a2;
      v12 = a1 + 1;
      *a2 = v11;
LABEL_10:
      v18 = *v12;
      *v12 = *v10;
      *v10 = v18;
    }
  }
  return result;
}

BOOL sub_22E7F03F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 v17;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((sub_22EFC5BC0(*(a2 - 2), *a1) & 0x80000000) != 0)
      {
        v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      sub_22E7F02E4(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_22E7F059C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_22E7F0660(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v8 = a1 + 4;
      sub_22E7F02E4(a1, a1 + 2, a1 + 4);
      v9 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if ((sub_22EFC5BC0(*v9, *v8) & 0x80000000) != 0)
    {
      v17 = *(_OWORD *)v9;
      v12 = *v9;
      v13 = v10;
      while (1)
      {
        v14 = (uint64_t *)((char *)a1 + v13);
        v15 = *(uint64_t *)((char *)a1 + v13 + 40);
        v14[6] = *(uint64_t *)((char *)a1 + v13 + 32);
        v14[7] = v15;
        if (v13 == -32)
          break;
        v13 -= 16;
        if ((sub_22EFC5BC0(v12, v14[2]) & 0x80000000) == 0)
        {
          v16 = (uint64_t *)((char *)a1 + v13 + 48);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(_OWORD *)v16 = v17;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

uint64_t sub_22E7F059C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_22E7F02E4(a1, a2, a3);
  result = sub_22EFC5BC0(*a4, *a3);
  if ((result & 0x80000000) != 0)
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    result = sub_22EFC5BC0(*a3, *a2);
    if ((result & 0x80000000) != 0)
    {
      v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      result = sub_22EFC5BC0(*a2, *a1);
      if ((result & 0x80000000) != 0)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t sub_22E7F0660(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_22E7F059C(a1, a2, a3, a4);
  result = sub_22EFC5BC0(*a5, *a4);
  if ((result & 0x80000000) != 0)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    result = sub_22EFC5BC0(*a4, *a3);
    if ((result & 0x80000000) != 0)
    {
      v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      v14 = a3[1];
      a3[1] = a4[1];
      a4[1] = v14;
      result = sub_22EFC5BC0(*a3, *a2);
      if ((result & 0x80000000) != 0)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        v16 = a2[1];
        a2[1] = a3[1];
        a3[1] = v16;
        result = sub_22EFC5BC0(*a2, *a1);
        if ((result & 0x80000000) != 0)
        {
          v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
          v18 = a1[1];
          a1[1] = a2[1];
          a2[1] = v18;
        }
      }
    }
  }
  return result;
}

uint64_t sub_22E7F0760(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2;
  v5 = result;
  v6 = (_DWORD)a3 - (_DWORD)a2;
  v7 = *(unsigned int *)(result + 8);
  if (a3 - a2 + v7 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *v4++;
      *v8++ = v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + v6;
  return result;
}

_QWORD *sub_22E7F07E0(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2D3304(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E7F08A0(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = sub_22E7F0910(a1, a2);
  }
  else
  {
    *v3 = *(_QWORD *)a2;
    v3[1] = v3 + 3;
    v3[2] = 0x100000000;
    if (*(_DWORD *)(a2 + 16))
      sub_22E78F7E0((uint64_t)(v3 + 1), (const void **)(a2 + 8));
    result = (uint64_t)(v3 + 5);
  }
  a1[1] = result;
  return result;
}

uint64_t sub_22E7F0910(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *i;
  char *v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v5 = 0x666666666666666;
  else
    v5 = v3;
  v19 = a1 + 2;
  if (v5 > 0x666666666666666)
    sub_22E3B3F8C();
  v7 = 5 * v5;
  v8 = (char *)operator new(40 * v5);
  v9 = &v8[40 * v2];
  __p = v8;
  v16 = v9;
  v18 = &v8[8 * v7];
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_QWORD *)v9 + 1) = v9 + 24;
  *((_QWORD *)v9 + 2) = 0x100000000;
  if (*(_DWORD *)(a2 + 16))
    sub_22E78F7E0((uint64_t)(v9 + 8), (const void **)(a2 + 8));
  v17 = v9 + 40;
  sub_22F2D33B8(a1, &__p);
  v10 = a1[1];
  v11 = v16;
LABEL_11:
  for (i = v17; i != v11; i -= 40)
  {
    v17 = i - 40;
    v13 = (char *)*((_QWORD *)i - 4);
    if (v13 != i - 16)
    {
      free(v13);
      goto LABEL_11;
    }
  }
  if (__p)
    operator delete(__p);
  return v10;
}

void sub_22E7F0A60(uint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  unint64_t v33;
  __int128 *v34;
  __int128 *v35;
  __int128 *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unint64_t *v42;
  BOOL v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  BOOL v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;

__int128 *sub_22E7F1158(__int128 *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_QWORD *)result)
  {
    if (v4 < v3)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *(_QWORD *)result)
      {
        v7 = *result;
        *result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v8 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *result;
      *result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL sub_22E7F11FC(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      sub_22E7F1158((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      sub_22E7F1404((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      v17 = (__int128 *)(a1 + 16);
      v18 = (__int128 *)(a1 + 32);
      v19 = (__int128 *)(a1 + 48);
      sub_22E7F1404((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)(a1 + 48));
      v21 = *(a2 - 2);
      v20 = (__int128 *)(a2 - 2);
      if (v21 < *(_QWORD *)(a1 + 48))
      {
        v22 = *v19;
        *v19 = *v20;
        *v20 = v22;
        if (*(_QWORD *)v19 < *(_QWORD *)v18)
        {
          v23 = *v18;
          *v18 = *v19;
          *v19 = v23;
          if (*(_QWORD *)v18 < *(_QWORD *)v17)
          {
            v24 = *v17;
            *v17 = *v18;
            *v18 = v24;
            if (*(_QWORD *)(a1 + 16) < *(_QWORD *)a1)
            {
              v25 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *v17 = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      sub_22E7F1158((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_13:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 sub_22E7F1404(__int128 *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  __n128 result;

  sub_22E7F1158(a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t sub_22E7F14A0(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_22E7B57A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_22E7F1580(a1, v7);
    v8 = 0;
    sub_22E7B57A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)result != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

_QWORD *sub_22E7F1580(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E7F1640(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E7F1640(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_22E7B57A0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_22E7F16EC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BOOL8 v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)a3, *(_QWORD *)(*a1 + 16));
  result = sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *(_DWORD *)(a3 + 4), *(_QWORD *)(*a1 + 16));
  v6 = *(_QWORD *)(a3 + 8) != 0;
  v7 = *(_QWORD *)(*a1 + 16);
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v6;
  ++*(_DWORD *)(v7 + 8);
  v9 = *(_QWORD *)(a3 + 8);
  if (v9)
  {
    v10 = *a1;
    v11 = *(_DWORD *)(v10 + 32);
    if (v11 >= *(_DWORD *)(v10 + 36))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = *(_DWORD *)(v10 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8 * v11) = v9;
    ++*(_DWORD *)(v10 + 32);
  }
  return result;
}

uint64_t sub_22E7F17CC(_QWORD *a1)
{
  int v1;
  unsigned int v2;
  BOOL v4;
  uint64_t v5;

  v1 = (*(_DWORD *)(*a1 + 16) >> 19) & 0x1FF;
  v2 = v1 - 181;
  if ((v1 - 173) >= 5 && v2 >= 0x25 && v1 != 179 && v1 != 168)
    return 0;
  if ((v1 - 173) < 5)
  {
    v5 = 4;
  }
  else
  {
    v4 = v2 < 0x25 || v1 == 179 || v1 == 168;
    v5 = 4;
    if (!v4)
      v5 = 1;
  }
  return *(_WORD *)(a1[1] + ((v5 + 7) & -v5)) >> 6;
}

uint64_t sub_22E7F1850(_QWORD *a1)
{
  int v1;
  unsigned int v2;
  BOOL v4;
  uint64_t v5;

  v1 = (*(_DWORD *)(*a1 + 16) >> 19) & 0x1FF;
  v2 = v1 - 181;
  if ((v1 - 173) >= 5 && v2 >= 0x25 && v1 != 179 && v1 != 168)
    return 0;
  if ((v1 - 173) < 5)
  {
    v5 = 4;
  }
  else
  {
    v4 = v2 < 0x25 || v1 == 179 || v1 == 168;
    v5 = 4;
    if (!v4)
      v5 = 1;
  }
  return *(_BYTE *)(a1[1] + ((v5 + 7) & -v5) + 1) & 3;
}

uint64_t sub_22E7F18D8(uint64_t *a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;

  sub_22E7C9A94(*(_QWORD *)(*a1 + 8), *a3, *(_QWORD *)(*a1 + 16));
  sub_22E7C9A94(*(_QWORD *)(*a1 + 8), a3[1], *(_QWORD *)(*a1 + 16));
  sub_22E7C9A94(*(_QWORD *)(*a1 + 8), a3[2], *(_QWORD *)(*a1 + 16));
  LODWORD(v6) = 0;
  v7 = *a1;
  if (a2)
  {
    v8 = 0;
    if (*(_BYTE *)(a2 + 16) == 26)
    {
      v9 = *(_QWORD *)(a2 + 16);
      if ((v9 & 0x3C0000000000000) != 0)
      {
        v10 = (unsigned __int16)(v9 >> 38);
        if (*(_QWORD *)(a2 + 16) == 25)
          v10 = 0;
        v11 = *(_QWORD *)&a3[2 * v10 + 4];
        v8 = v11;
        v6 = HIDWORD(v11);
      }
      else
      {
        LODWORD(v6) = 0;
        v8 = 0;
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v12 = *(_QWORD *)(v7 + 8);
  v13 = *(_QWORD *)(v7 + 16);
  sub_22E7C9A94(v12, v8, v13);
  sub_22E7C9A94(v12, v6, v13);
  result = sub_22E7C9A94(*(_QWORD *)(*a1 + 8), a3[3], *(_QWORD *)(*a1 + 16));
  if (*(_BYTE *)(a2 + 16) != 25)
  {
    v15 = *(_QWORD *)(a2 + 16);
    if ((v15 & 0x3FFFC000000000) != 0)
    {
      v16 = (unint64_t *)(a3 + 4);
      v17 = (unsigned __int16)(v15 >> 38);
      do
      {
        v18 = *v16++;
        result = sub_22E7CA8EC(*(_QWORD *)(*a1 + 8), v18, *(_QWORD *)(*a1 + 16));
        --v17;
      }
      while (v17);
    }
  }
  return result;
}

__n128 sub_22E7F1A00(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_22E7F1A88((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[4] + a1[5];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_22E7F1A88(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *i;
  char *v40;
  __int128 v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_20:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v18 = 1;
      else
        v18 = (v6 - v10) >> 2;
      if (!(v18 >> 61))
      {
        v19 = (char *)operator new(8 * v18);
        v20 = &v19[8 * (v18 >> 2)];
        v21 = &v19[8 * v18];
        v23 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v23 & 0xFFFFFFFFFFFFFFF8];
          v24 = 8 * (v23 >> 3);
          v25 = &v19[8 * (v18 >> 2)];
          do
          {
            v26 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v25 = v26;
            v25 += 8;
            v24 -= 8;
          }
          while (v24);
        }
        goto LABEL_18;
      }
LABEL_44:
      sub_22E3B3F8C();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_20;
  }
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 - *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v29 - *(_QWORD *)a1;
  if (v28 < v30)
  {
    if (v29 != v27)
    {
      *(_QWORD *)&v43 = operator new(0x1000uLL);
      sub_22F2C31E8(a1, &v43);
      return;
    }
    *(_QWORD *)&v43 = operator new(0x1000uLL);
    sub_22F2C331C((const void **)a1, &v43);
    v31 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v32 = *v31;
    v7 = (char *)(v31 + 1);
    v8 = v32;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_20;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v33 = 1;
      else
        v33 = (v6 - v10) >> 2;
      if (!(v33 >> 61))
      {
        v19 = (char *)operator new(8 * v33);
        v20 = &v19[8 * (v33 >> 2)];
        v21 = &v19[8 * v33];
        v34 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v34 & 0xFFFFFFFFFFFFFFF8];
          v35 = 8 * (v34 >> 3);
          v36 = &v19[8 * (v33 >> 2)];
          do
          {
            v37 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v36 = v37;
            v36 += 8;
            v35 -= 8;
          }
          while (v35);
        }
LABEL_18:
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v20;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v21;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_20;
      }
      goto LABEL_44;
    }
    goto LABEL_5;
  }
  if (v29 == *(_QWORD *)a1)
    v38 = 1;
  else
    v38 = v30 >> 2;
  v45 = a1 + 24;
  if (v38 >> 61)
    goto LABEL_44;
  *(_QWORD *)&v43 = operator new(8 * v38);
  *((_QWORD *)&v43 + 1) = v43 + v28;
  *(_QWORD *)&v44 = v43 + v28;
  *((_QWORD *)&v44 + 1) = v43 + 8 * v38;
  v42 = operator new(0x1000uLL);
  sub_22F2C31E8((uint64_t)&v43, &v42);
  for (i = *(_QWORD **)(a1 + 16); i != *(_QWORD **)(a1 + 8); sub_22F2C331C((const void **)&v43, i))
    --i;
  v40 = *(char **)a1;
  v41 = v44;
  *(_OWORD *)a1 = v43;
  *(_OWORD *)(a1 + 16) = v41;
  if (v40)
    operator delete(v40);
}

_DWORD *sub_22E7F1D18(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  void ***v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  void **v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_DWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = 0;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (void ***)v4;
      do
      {
        v13 = *(_DWORD *)v12;
        if ((*(_DWORD *)v12 + 1) >= 2)
        {
          v14 = *(_DWORD *)(a1 + 16) - 1;
          v15 = v14 & v13;
          v16 = *(_QWORD *)a1 + 16 * (v14 & v13);
          v17 = *(_DWORD *)v16;
          if (v13 != *(_DWORD *)v16)
          {
            v19 = 0;
            v20 = 1;
            while (v17)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v17 == -1;
              if (v21)
                v19 = v16;
              v22 = v15 + v20++;
              v15 = v22 & v14;
              v16 = *(_QWORD *)a1 + 16 * (v22 & v14);
              v17 = *(_DWORD *)v16;
              if (v13 == *(_DWORD *)v16)
                goto LABEL_12;
            }
            if (v19)
              v16 = v19;
          }
LABEL_12:
          v18 = v12[1];
          *(_DWORD *)v16 = v13;
          v12[1] = 0;
          *(_QWORD *)(v16 + 8) = v18;
          ++*(_DWORD *)(a1 + 8);
          sub_22E7F1E9C(v12 + 1);
        }
        v12 += 2;
      }
      while (v12 != (void ***)((char *)v4 + 16 * v3));
    }
    return (_DWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v23 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v23)
    {
      v24 = 16 * v23;
      do
      {
        *result = 0;
        result += 4;
        v24 -= 16;
      }
      while (v24);
    }
  }
  return result;
}

void ***sub_22E7F1E9C(void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    MEMORY[0x2348A0E9C](v2, 0x1080C40B1E5C937);
  }
  return a1;
}

void sub_22E7F1EF4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_22E7F1F4C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t result;

  sub_22E7F4DC8((uint64_t *)v0, v1);
  result = sub_22E7C9A94(*(_QWORD *)(v0 + 24), *(_DWORD *)(v1 + 36), *(_QWORD *)(v0 + 32));
  *(_DWORD *)(v0 + 232) = 101;
  return result;
}

uint64_t sub_22E7F4AE4(uint64_t a1, unint64_t a2)
{
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD **v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  unsigned int v29;

  sub_22E7FE5CC(*(_QWORD *)(a1 + 8) + 1560);
  if ((sub_22EFC7ADC(a2 + 72) & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(v5 + 64);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 28);
      v8 = 1;
      v9 = v7 > 4;
      v10 = (1 << v7) & 0x1A;
      if (v9 || v10 == 0)
      {
        v12 = 0;
        v4 = 0;
      }
      else
      {
        v12 = sub_22EF72FFC(*(_QWORD **)(v5 + 40), a2);
        v8 = 0;
        v4 = v12 == 3;
        v5 = *(_QWORD *)(a1 + 8);
      }
    }
    else
    {
      v12 = 0;
      v4 = 0;
      v8 = 1;
    }
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 2000) + 140) & 0x200000000) != 0)
      goto LABEL_21;
    if ((*(_BYTE *)(a2 + 29) & 1) != 0)
    {
      sub_22EFC8E88(a2);
      v14 = *((unsigned int *)v13 + 2);
      if ((_DWORD)v14)
      {
        v15 = 8 * v14;
        v16 = *v13;
        while (*(_WORD *)(*(_QWORD *)v16 + 32) != 155)
        {
          v16 += 8;
          v15 -= 8;
          if (!v15)
            goto LABEL_25;
        }
      }
      else
      {
        v16 = *v13;
      }
      if (v16 != *v13 + 8 * v14
        && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 2000) + 20) & 0x2000000000000) != 0)
      {
LABEL_21:
        if (!sub_22E46A45C(a2))
        {
          if (v8)
            v12 = sub_22EF72FFC(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 40), a2);
          v4 = v12 > 1;
        }
      }
    }
  }
LABEL_25:
  v17 = *(_QWORD *)(a1 + 16);
  v18 = *(_DWORD *)(v17 + 8);
  if (v18 >= *(_DWORD *)(v17 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(v17 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v4;
  ++*(_DWORD *)(v17 + 8);
  if (v4)
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = sub_22E7CA3E8(v19, a2);
    v21 = *(_DWORD *)(v19 + 848);
    if (v21 >= *(_DWORD *)(v19 + 852))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = *(_DWORD *)(v19 + 848);
    }
    *(_DWORD *)(*(_QWORD *)(v19 + 840) + 4 * v21) = v20;
    ++*(_DWORD *)(v19 + 848);
  }
  if (a2 && (*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = (*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL;
    v24 = *(_DWORD *)(v22 + 8);
    if (v24 >= *(_DWORD *)(v22 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = *(_DWORD *)(v22 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v22 + 8 * v24) = v23;
    ++*(_DWORD *)(v22 + 8);
    if ((*(_DWORD *)(a2 + 84) & 0x1FFFFF00) != 0)
    {
      v25 = (_QWORD **)sub_22EFD7ED0(a2);
      v26 = sub_22EFD7ED0(a2);
      sub_22E7E5758(a1, v25, (uint64_t)(v26 + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL) - (_QWORD)v25) >> 3);
    }
  }
  result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
  v28 = result;
  v29 = *(_DWORD *)(a1 + 32);
  if (v29 >= *(_DWORD *)(a1 + 36))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v29 = *(_DWORD *)(a1 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v29) = v28;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

uint64_t sub_22E7F4DC8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __n128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _BOOL8 v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t result;
  uint64_t i;
  _QWORD *v61;
  uint64_t v62;
  _WORD *v63;
  uint64_t v64;
  unint64_t v65;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0)
    v5 = *(_QWORD *)v5;
  if (v5)
  {
    v6 = *(_WORD *)(v5 + 8) & 0x7F;
    v7 = -40;
    if (v6 > 0x46)
    {
      if (v6 != 83)
      {
        if (v6 == 71)
        {
          v7 = -56;
          goto LABEL_21;
        }
        if (v6 == 81)
          goto LABEL_21;
LABEL_16:
        if (v6 - 52 < 6)
        {
          v7 = -72;
        }
        else
        {
          v7 = -48;
          if (v6 - 33 < 5)
            v7 = -64;
        }
      }
    }
    else
    {
      if (v6 > 0x18)
        goto LABEL_15;
      if (v6 != 16)
      {
        if (((1 << v6) & 0x1066) != 0)
          goto LABEL_21;
        if (v6 != 24)
        {
LABEL_15:
          if (v6 == 70)
          {
            v7 = -64;
            goto LABEL_21;
          }
          goto LABEL_16;
        }
      }
      v7 = -48;
    }
LABEL_21:
    v8 = v5 + v7;
    goto LABEL_22;
  }
  v8 = 0;
LABEL_22:
  sub_22E7CA8EC(a1[3], v8, a1[4]);
  v9 = *(_QWORD *)(a2 + 16);
  if ((v9 & 4) != 0)
  {
    v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
    v12 = *v10;
    v11 = v10[1];
    if (v12 != v11)
    {
      if (!v11)
      {
        v17 = 0;
LABEL_46:
        sub_22E7CA8EC(a1[3], v17, a1[4]);
        goto LABEL_47;
      }
      v13 = *(_WORD *)(v11 + 8) & 0x7F;
      v14 = -40;
      if (v13 > 0x46)
      {
        if (v13 != 83)
        {
          if (v13 == 71)
          {
            v14 = -56;
            goto LABEL_45;
          }
          if (v13 == 81)
            goto LABEL_45;
LABEL_40:
          if (v13 - 52 < 6)
          {
            v14 = -72;
          }
          else
          {
            v14 = -48;
            if (v13 - 33 < 5)
              v14 = -64;
          }
        }
      }
      else
      {
        if (v13 > 0x18)
          goto LABEL_39;
        if (v13 != 16)
        {
          if (((1 << v13) & 0x1066) != 0)
            goto LABEL_45;
          if (v13 != 24)
          {
LABEL_39:
            if (v13 == 70)
            {
              v14 = -64;
              goto LABEL_45;
            }
            goto LABEL_40;
          }
        }
        v14 = -48;
      }
LABEL_45:
      v17 = v11 + v14;
      goto LABEL_46;
    }
  }
  v15 = a1[4];
  v16 = *(_DWORD *)(v15 + 8);
  if (v16 >= *(_DWORD *)(v15 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = *(_DWORD *)(v15 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v15 + 8 * v16) = 0;
  ++*(_DWORD *)(v15 + 8);
LABEL_47:
  v18 = ((unint64_t)*(unsigned int *)(a2 + 28) >> 7) & 1;
  v19 = a1[4];
  v20 = *(_DWORD *)(v19 + 8);
  if (v20 >= *(_DWORD *)(v19 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(v19 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = v18;
  ++*(_DWORD *)(v19 + 8);
  if ((*(_BYTE *)(a2 + 29) & 1) != 0)
  {
    v22.n128_f64[0] = sub_22EFC8E88(a2);
    v23 = *(uint64_t **)v21;
    v24 = *(unsigned int *)(v21 + 8);
    v25 = *(uint64_t **)v21;
    if ((_DWORD)v24)
    {
      v26 = 8 * v24;
      v25 = *(uint64_t **)v21;
      while (*(_WORD *)(*v25 + 32) != 159)
      {
        ++v25;
        v26 -= 8;
        if (!v26)
          goto LABEL_58;
      }
    }
    if (v25 != &v23[v24])
    {
      do
        v27 = *v23++;
      while (*(_WORD *)(v27 + 32) != 159);
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)*a1 + 264))(*a1, v22);
      sub_22E7F5414(a2);
    }
  }
LABEL_58:
  v28 = ((unint64_t)*(unsigned int *)(a2 + 28) >> 8) & 1;
  v29 = a1[4];
  v30 = *(_DWORD *)(v29 + 8);
  if (v30 >= *(_DWORD *)(v29 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v30 = *(_DWORD *)(v29 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v29 + 8 * v30) = v28;
  ++*(_DWORD *)(v29 + 8);
  v31 = *(_DWORD *)(a2 + 28);
  if ((v31 & 0x100) != 0)
  {
    sub_22EFC8E88(a2);
    sub_22E7D2ED0((uint64_t)(a1 + 2), *(uint64_t **)v32, *(unsigned int *)(v32 + 8));
    v31 = *(_DWORD *)(a2 + 28);
  }
  v33 = (v31 >> 9) & 1;
  v34 = a1[4];
  v35 = *(_DWORD *)(v34 + 8);
  if (v35 >= *(_DWORD *)(v34 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v35 = *(_DWORD *)(v34 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v34 + 8 * v35) = v33;
  ++*(_DWORD *)(v34 + 8);
  v36 = sub_22EFC9084(a2, 0);
  v37 = a1[4];
  v38 = *(_DWORD *)(v37 + 8);
  if (v38 >= *(_DWORD *)(v37 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v38 = *(_DWORD *)(v37 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v37 + 8 * v38) = v36;
  ++*(_DWORD *)(v37 + 8);
  if ((*(_BYTE *)(a2 + 29) & 8) != 0)
  {
    v39 = 1;
  }
  else
  {
    v39 = 1;
    v40 = (_BYTE *)a2;
    while ((v40[29] & 8) == 0)
    {
      v40 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v40 + 40))(v40);
      if (v40 == (_BYTE *)a2 || v40 == 0)
      {
        v39 = 0;
        break;
      }
    }
  }
  v42 = a1[4];
  v43 = *(_DWORD *)(v42 + 8);
  if (v43 >= *(_DWORD *)(v42 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v43 = *(_DWORD *)(v42 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v42 + 8 * v43) = v39;
  ++*(_DWORD *)(v42 + 8);
  v44 = ((unint64_t)*(unsigned int *)(a2 + 28) >> 12) & 1;
  v45 = a1[4];
  v46 = *(_DWORD *)(v45 + 8);
  if (v46 >= *(_DWORD *)(v45 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v46 = *(_DWORD *)(v45 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v45 + 8 * v46) = v44;
  ++*(_DWORD *)(v45 + 8);
  v47 = ((unint64_t)*(unsigned int *)(a2 + 28) >> 13) & 3;
  v48 = a1[4];
  v49 = *(_DWORD *)(v48 + 8);
  if (v49 >= *(_DWORD *)(v48 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v49 = *(_DWORD *)(v48 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v48 + 8 * v49) = v47;
  ++*(_DWORD *)(v48 + 8);
  v50 = (~*(_DWORD *)(a2 + 8) & 6) == 0;
  v51 = a1[4];
  v52 = *(_DWORD *)(v51 + 8);
  if (v52 >= *(_DWORD *)(v51 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v52 = *(_DWORD *)(v51 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v51 + 8 * v52) = v50;
  ++*(_DWORD *)(v51 + 8);
  v53 = *a1;
  v54 = *(_QWORD *)(a2 + 8) & 6;
  if ((*(_BYTE *)(a2 + 29) & 0x80) != 0)
  {
    if (v54)
    {
      v55 = sub_22EFC7594(a2);
      goto LABEL_90;
    }
  }
  else if (v54)
  {
    v55 = *(_QWORD *)(a2 - 8);
    goto LABEL_90;
  }
  v55 = 0;
LABEL_90:
  v56 = sub_22E7CA298(v53, v55);
  v57 = a1[4];
  v58 = *(_DWORD *)(v57 + 8);
  if (v58 >= *(_DWORD *)(v57 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v58 = *(_DWORD *)(v57 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v57 + 8 * v58) = v56;
  ++*(_DWORD *)(v57 + 8);
  result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((_DWORD)result)
  {
    for (i = *(_QWORD *)(a2 + 16); ; i = *(_QWORD *)(v62 - 32))
    {
      v61 = (_QWORD *)(i & 0xFFFFFFFFFFFFFFF8);
      if ((i & 4) != 0)
        v61 = (_QWORD *)*v61;
      result = sub_22EFCBB30((unint64_t)v61);
      if (!result)
        break;
      v62 = result;
      v63 = (_WORD *)(result + 8);
      if ((*(_WORD *)(result + 8) & 0x7F) != 0x10)
        break;
      if ((*(_BYTE *)(result - 19) & 0x80) == 0)
        break;
      v64 = *a1 + 920;
      v65 = sub_22EFCC008(result);
      result = sub_22E7CBFA4(v64, (uint64_t *)&v65);
      if ((*v63 & 0x7F) != 0x10 || (*(_BYTE *)(v62 + 56) & 4) == 0)
        break;
    }
  }
  return result;
}

void sub_22E7F5414(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if ((*(_BYTE *)(a1 + 29) & 1) != 0)
  {
    sub_22EFC8E88(a1);
    v3 = *(char **)v2;
    v4 = *(unsigned int *)(v2 + 8);
    if ((_DWORD)v4)
    {
      v5 = &v3[8 * v4];
      v6 = 8 * v4 - 8;
      v7 = *(char **)v2;
      v8 = *(char **)v2;
      while (1)
      {
        v9 = *(_QWORD *)v8;
        v8 += 8;
        if (*(_WORD *)(v9 + 32) == 159)
          break;
        v6 -= 8;
        v7 = v8;
        if (v8 == v5)
          goto LABEL_15;
      }
      if (v8 == v5)
      {
        v5 = v7;
      }
      else
      {
        v10 = 8;
        v5 = v7;
        do
        {
          v11 = *(_QWORD *)&v7[v10];
          if (*(_WORD *)(v11 + 32) != 159)
          {
            *(_QWORD *)v5 = v11;
            v5 += 8;
          }
          v10 += 8;
          v6 -= 8;
        }
        while (v6);
        v3 = *(char **)v2;
      }
    }
    else
    {
      v5 = *(char **)v2;
    }
LABEL_15:
    v12 = (unint64_t)(v5 - v3) >> 3;
    *(_DWORD *)(v2 + 8) = v12;
    if (!(_DWORD)v12)
      *(_DWORD *)(a1 + 28) &= ~0x100u;
  }
}

uint64_t sub_22E7F54E0(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  sub_22E7F4DC8(a1, a2);
  sub_22E7EC5E4((uint64_t)(a1 + 2), *(_QWORD *)(a2 + 40));
  result = sub_22E750738(a2);
  if ((_DWORD)result)
  {
    result = sub_22E7E4EBC(*a1, a2);
    v5 = result;
  }
  else
  {
    v5 = 0;
  }
  v6 = a1[4];
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  return result;
}

uint64_t sub_22E7F5574(uint64_t *a1, unint64_t a2)
{
  sub_22E7F54E0(a1, a2);
  sub_22E7C9A94(a1[3], *(_DWORD *)(a2 + 56), a1[4]);
  return sub_22E7E1FB4(a1[3], *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0, a1[4]);
}

uint64_t sub_22E7F55B0(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  __int128 v31;
  void **v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[128];
  void *v36;
  uint64_t v37;
  _BYTE v38[40];
  void *v39;
  uint64_t v40;
  _QWORD v41[66];

  if (a2)
    v4 = (uint64_t *)(a2 + 64);
  else
    v4 = 0;
  v41[64] = *MEMORY[0x24BDAC8D0];
  v5 = v4[1];
  if (a2)
    v6 = (uint64_t)(v4 - 8);
  else
    v6 = 0;
  v7 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v5 + 72) + 64), *(_QWORD *)(v5 + 72));
  if (v7 == v5)
  {
    v23 = *(_QWORD *)(a1 + 32);
    v24 = *(_DWORD *)(v23 + 8);
    if (v24 >= *(_DWORD *)(v23 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v24 = *(_DWORD *)(v23 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v23 + 8 * v24) = 0;
    ++*(_DWORD *)(v23 + 8);
  }
  else
  {
    v8 = v7;
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v5, *(_QWORD *)(a1 + 32));
    v9 = sub_22E7F9F84(*(_QWORD *)a1, v6);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(unsigned int *)(v10 + 8);
    if (v6 == v9)
    {
      v25 = *(unsigned int *)(v10 + 8);
      if (v11 >= *(_DWORD *)(v10 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = *(unsigned int *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v25) = 0;
      ++*(_DWORD *)(v10 + 8);
      if (*(_QWORD *)(*(_QWORD *)a1 + 56))
        sub_22E7FCEF0((uint64_t *)a1, v6, 0);
      *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8 * v11) = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8) - v11;
      v39 = v41;
      v40 = 0x4000000000;
      v31 = *(_OWORD *)(a1 + 16);
      v32 = &v39;
      v33 = v35;
      v34 = 0x1000000000;
      v36 = v38;
      v37 = 0x800000000;
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
      if (v26 != v6)
      {
        v27 = (_BYTE *)v26;
        do
        {
          if ((v27[29] & 0x80) == 0)
            sub_22E7CA8EC(*((uint64_t *)&v31 + 1), (unint64_t)v27, (uint64_t)v32);
          v27 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v27 + 48))(v27);
        }
        while (v27 != (_BYTE *)v6);
      }
      if ((_DWORD)v40)
      {
        v28 = sub_22E7CA950((uint64_t)&v31, 0x32u, 0);
        sub_22E7E37E0(a1 + 16, v28);
      }
      else
      {
        v29 = *(_QWORD *)(a1 + 32);
        v30 = *(_DWORD *)(v29 + 8);
        if (v30 >= *(_DWORD *)(v29 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v30 = *(_DWORD *)(v29 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v29 + 8 * v30) = 0;
        ++*(_DWORD *)(v29 + 8);
      }
      if (v36 != v38)
        free(v36);
      if (v33 != v35)
        free(v33);
      if (v39 != v41)
        free(v39);
    }
    else
    {
      v12 = v9;
      if (v11 >= *(_DWORD *)(v10 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v11) = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = 0;
      ++*(_DWORD *)(v10 + 8);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v12, *(_QWORD *)(a1 + 32));
    }
    v13 = *(_QWORD *)a1;
    if ((*(_BYTE *)v4 & 3) != 0)
      v14 = 0;
    else
      v14 = sub_22E3CD31C(v4, (uint64_t)(v4 - 8));
    sub_22E7CA3E8(v13, v14);
    sub_22E7CA3E8(*(_QWORD *)a1, v8);
  }
  sub_22E7F5574((uint64_t *)a1, a2);
  v15 = *(_QWORD *)(a2 + 80);
  v16 = (unint64_t *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0)
    v16 = (unint64_t *)*v16;
  sub_22E7D2E84(a1 + 16, v16);
  v17 = (*(_QWORD *)(a2 + 80) >> 2) & 1;
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_DWORD *)(v18 + 8);
  if (v19 >= *(_DWORD *)(v18 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = *(_DWORD *)(v18 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = v17;
  ++*(_DWORD *)(v18 + 8);
  v20 = *(_QWORD *)(a2 + 80);
  if ((v20 & 4) != 0)
    sub_22E7E1FB4(*(_QWORD *)(a1 + 24), *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(a1 + 32));
  v21 = sub_22EFB6D64(a2, 0);
  return sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v21, *(_QWORD *)(a1 + 32));
}

void sub_22E7F5994(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  void **v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[128];
  void *v58;
  uint64_t v59;
  _BYTE v60[40];
  void *v61;
  uint64_t v62;
  _QWORD v63[66];

  if (a2)
    v4 = (uint64_t *)(a2 + 96);
  else
    v4 = 0;
  v63[64] = *MEMORY[0x24BDAC8D0];
  v5 = v4[1];
  if (a2)
    v6 = (uint64_t)(v4 - 12);
  else
    v6 = 0;
  v7 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v5 + 104) + 96), *(_QWORD *)(v5 + 104));
  if (v7 == v5)
  {
    v38 = *(_QWORD *)(a1 + 32);
    v39 = *(_DWORD *)(v38 + 8);
    if (v39 >= *(_DWORD *)(v38 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v39 = *(_DWORD *)(v38 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v38 + 8 * v39) = 0;
    ++*(_DWORD *)(v38 + 8);
  }
  else
  {
    v8 = v7;
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v5, *(_QWORD *)(a1 + 32));
    v9 = sub_22E7F9F84(*(_QWORD *)a1, v6);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(unsigned int *)(v10 + 8);
    if (v6 == v9)
    {
      v40 = *(unsigned int *)(v10 + 8);
      if (v11 >= *(_DWORD *)(v10 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v40 = *(unsigned int *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v40) = 0;
      ++*(_DWORD *)(v10 + 8);
      if (*(_QWORD *)(*(_QWORD *)a1 + 56))
        sub_22E7FCEF0((uint64_t *)a1, v6, 0);
      *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8 * v11) = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8) - v11;
      v61 = v63;
      v62 = 0x4000000000;
      v53 = *(_OWORD *)(a1 + 16);
      v54 = &v61;
      v55 = v57;
      v56 = 0x1000000000;
      v58 = v60;
      v59 = 0x800000000;
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
      if (v41 != v6)
      {
        v42 = (_BYTE *)v41;
        do
        {
          if ((v42[29] & 0x80) == 0)
            sub_22E7CA8EC(*((uint64_t *)&v53 + 1), (unint64_t)v42, (uint64_t)v54);
          v42 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v42 + 48))(v42);
        }
        while (v42 != (_BYTE *)v6);
      }
      if ((_DWORD)v62)
      {
        v43 = sub_22E7CA950((uint64_t)&v53, 0x32u, 0);
        sub_22E7E37E0(a1 + 16, v43);
      }
      else
      {
        v44 = *(_QWORD *)(a1 + 32);
        v45 = *(_DWORD *)(v44 + 8);
        if (v45 >= *(_DWORD *)(v44 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v45 = *(_DWORD *)(v44 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v44 + 8 * v45) = 0;
        ++*(_DWORD *)(v44 + 8);
      }
      if (v58 != v60)
        free(v58);
      if (v55 != v57)
        free(v55);
      if (v61 != v63)
        free(v61);
    }
    else
    {
      v12 = v9;
      if (v11 >= *(_DWORD *)(v10 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v11) = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = 0;
      ++*(_DWORD *)(v10 + 8);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v12, *(_QWORD *)(a1 + 32));
    }
    v13 = *(_QWORD *)a1;
    if ((*(_BYTE *)v4 & 3) != 0)
      v14 = 0;
    else
      v14 = sub_22E3CD31C(v4, (uint64_t)(v4 - 12));
    sub_22E7CA3E8(v13, v14);
    sub_22E7CA3E8(*(_QWORD *)a1, v8);
  }
  sub_22E7F5574((uint64_t *)a1, a2);
  v15 = *(_WORD *)(a2 + 30) & 0x3FFF;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_DWORD *)(v16 + 8);
  if (v17 >= *(_DWORD *)(v16 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = *(_DWORD *)(v16 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v16 + 8 * v17) = v15;
  ++*(_DWORD *)(v16 + 8);
  v18 = (unsigned __int16)*(_DWORD *)(a2 + 72) >> 13;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_DWORD *)(v19 + 8);
  if (v20 >= *(_DWORD *)(v19 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(v19 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = v18;
  ++*(_DWORD *)(v19 + 8);
  if ((*(_DWORD *)(a2 + 28) & 0x7Fu) - 35 >= 3)
  {
    v48 = ((unint64_t)*(unsigned int *)(a2 + 72) >> 16) & 1;
    v49 = *(_QWORD *)(a1 + 32);
    v50 = *(_DWORD *)(v49 + 8);
    if (v50 >= *(_DWORD *)(v49 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v50 = *(_DWORD *)(v49 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v49 + 8 * v50) = v48;
    ++*(_DWORD *)(v49 + 8);
  }
  v21 = ((unint64_t)*(unsigned int *)(a2 + 72) >> 18) & 1;
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(_DWORD *)(v22 + 8);
  if (v23 >= *(_DWORD *)(v22 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = *(_DWORD *)(v22 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v22 + 8 * v23) = v21;
  ++*(_DWORD *)(v22 + 8);
  v24 = ((unint64_t)*(unsigned int *)(a2 + 72) >> 19) & 1;
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(_DWORD *)(v25 + 8);
  if (v26 >= *(_DWORD *)(v25 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v26 = *(_DWORD *)(v25 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v25 + 8 * v26) = v24;
  ++*(_DWORD *)(v25 + 8);
  v27 = ((unint64_t)*(unsigned int *)(a2 + 72) >> 21) & 1;
  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(_DWORD *)(v28 + 8);
  if (v29 >= *(_DWORD *)(v28 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v29 = *(_DWORD *)(v28 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v28 + 8 * v29) = v27;
  ++*(_DWORD *)(v28 + 8);
  v30 = *(_QWORD *)(a1 + 24);
  v31 = *(_QWORD *)(a1 + 32);
  v32 = HIDWORD(*(_QWORD *)(a2 + 112));
  sub_22E7C9A94(v30, *(_QWORD *)(a2 + 112), v31);
  sub_22E7C9A94(v30, v32, v31);
  v33 = *(_QWORD *)(a2 + 120);
  if ((v33 & 4) != 0)
  {
    v46 = *(_QWORD *)(a1 + 32);
    v47 = *(_DWORD *)(v46 + 8);
    if (v47 >= *(_DWORD *)(v46 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = *(_DWORD *)(v46 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v46 + 8 * v47) = 1;
    ++*(_DWORD *)(v46 + 8);
    sub_22F2D0AE4(a1 + 16, *(_QWORD *)(a2 + 120) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    v34 = *(_QWORD *)(a1 + 32);
    v35 = *(_DWORD *)(v34 + 8);
    v36 = *(_DWORD *)(v34 + 12);
    v37 = v33 & 0xFFFFFFFFFFFFFFF8;
    if ((v33 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (v35 >= v36)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v35 = *(_DWORD *)(v34 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v34 + 8 * v35) = 2;
      ++*(_DWORD *)(v34 + 8);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v37, *(_QWORD *)(a1 + 32));
      v51 = *(_QWORD *)(v37 + 40);
      if ((v51 & 7) != 0)
        v52 = 0;
      else
        v52 = v51 & 0xFFFFFFFFFFFFFFF8;
      sub_22E7CA0D0(*(_DWORD **)(a1 + 24), v52, *(_QWORD *)(a1 + 32));
    }
    else
    {
      if (v35 >= v36)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v35 = *(_DWORD *)(v34 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v34 + 8 * v35) = 0;
      ++*(_DWORD *)(v34 + 8);
    }
  }
}

void sub_22E7F6044(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  int v47;

  sub_22E7F5994(a1, a2);
  v4 = (*(_QWORD *)(a2 + 72) >> 23) & 1;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = (*(_QWORD *)(a2 + 72) >> 24) & 1;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = (*(_QWORD *)(a2 + 72) >> 25) & 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
  ++*(_DWORD *)(v11 + 8);
  v13 = (*(_QWORD *)(a2 + 72) >> 26) & 1;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_DWORD *)(v14 + 8);
  if (v15 >= *(_DWORD *)(v14 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v13;
  ++*(_DWORD *)(v14 + 8);
  v16 = (*(_QWORD *)(a2 + 72) >> 28) & 1;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_DWORD *)(v17 + 8);
  if (v18 >= *(_DWORD *)(v17 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(v17 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v16;
  ++*(_DWORD *)(v17 + 8);
  v19 = (*(_QWORD *)(a2 + 72) >> 29) & 1;
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(_DWORD *)(v20 + 8);
  if (v21 >= *(_DWORD *)(v20 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v21 = *(_DWORD *)(v20 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v20 + 8 * v21) = v19;
  ++*(_DWORD *)(v20 + 8);
  v22 = (*(_QWORD *)(a2 + 72) >> 30) & 1;
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(_DWORD *)(v23 + 8);
  if (v24 >= *(_DWORD *)(v23 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v24 = *(_DWORD *)(v23 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v23 + 8 * v24) = v22;
  ++*(_DWORD *)(v23 + 8);
  v25 = (*(_QWORD *)(a2 + 72) >> 31) & 1;
  v26 = *(_QWORD *)(a1 + 32);
  v27 = *(_DWORD *)(v26 + 8);
  if (v27 >= *(_DWORD *)(v26 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v27 = *(_DWORD *)(v26 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v26 + 8 * v27) = v25;
  ++*(_DWORD *)(v26 + 8);
  v28 = HIDWORD(*(_QWORD *)(a2 + 72)) & 1;
  v29 = *(_QWORD *)(a1 + 32);
  v30 = *(_DWORD *)(v29 + 8);
  if (v30 >= *(_DWORD *)(v29 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v30 = *(_DWORD *)(v29 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v29 + 8 * v30) = v28;
  ++*(_DWORD *)(v29 + 8);
  v31 = (*(_QWORD *)(a2 + 72) >> 33) & 1;
  v32 = *(_QWORD *)(a1 + 32);
  v33 = *(_DWORD *)(v32 + 8);
  if (v33 >= *(_DWORD *)(v32 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v33 = *(_DWORD *)(v32 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v32 + 8 * v33) = v31;
  ++*(_DWORD *)(v32 + 8);
  v34 = (*(_QWORD *)(a2 + 72) >> 34) & 1;
  v35 = *(_QWORD *)(a1 + 32);
  v36 = *(_DWORD *)(v35 + 8);
  if (v36 >= *(_DWORD *)(v35 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v36 = *(_DWORD *)(v35 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v35 + 8 * v36) = v34;
  ++*(_DWORD *)(v35 + 8);
  v37 = (*(_QWORD *)(a2 + 72) >> 35) & 3;
  v38 = *(_QWORD *)(a1 + 32);
  v39 = *(_DWORD *)(v38 + 8);
  if (v39 >= *(_DWORD *)(v38 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v39 = *(_DWORD *)(v38 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v38 + 8 * v39) = v37;
  ++*(_DWORD *)(v38 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 2000) + 1) & 1) != 0)
    v40 = 0;
  else
    v40 = sub_22F3ACEE0(a2);
  v41 = *(_QWORD *)(a1 + 32);
  v42 = *(_DWORD *)(v41 + 8);
  if (v42 >= *(_DWORD *)(v41 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v42 = *(_DWORD *)(v41 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v41 + 8 * v42) = v40;
  ++*(_DWORD *)(v41 + 8);
  v43 = *(_QWORD *)(a2 + 16);
  if (((v43 & 4) == 0 || *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF8) == *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF8) + 8))
    && (*(_BYTE *)(a2 + 29) & 3) == 0
    && (sub_22EFC9084(a2, 0) & 1) == 0
    && *(_QWORD *)(a2 + 120) <= 3uLL)
  {
    v44 = *(_QWORD *)(a2 + 104);
    if (v44 == sub_22E3CD31C((uint64_t *)(v44 + 96), v44) && (*(_WORD *)(a2 + 28) & 0x880) == 0)
    {
      v45 = (_BYTE *)a2;
      while ((v45[29] & 8) == 0)
      {
        v45 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v45 + 40))(v45);
        if (v45 == (_BYTE *)a2 || v45 == 0)
        {
          v47 = *(_DWORD *)(a2 + 28);
          if ((v47 & 0x7000) == 0x6000
            && (~*(_DWORD *)(a2 + 8) & 6) != 0
            && (v47 & 0x7Fu) - 35 >= 3
            && (sub_22E750738(a2) & 1) == 0
            && (*(_BYTE *)(a2 + 40) & 7) == 0)
          {
            *(_DWORD *)(a1 + 236) = *(_DWORD *)(*(_QWORD *)a1 + 1840);
          }
          break;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 232) = 54;
}

uint64_t sub_22E7F6524(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7E1FB4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 64), *(_QWORD *)(a1 + 32));
  v4 = (*(_QWORD *)(a2 + 56) >> 2) & 1;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    v14 = *(_QWORD *)(a1 + 32);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v14;
    v6 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = *(_QWORD *)(a2 + 56);
  if ((v7 & 4) != 0)
  {
    v11 = v7 & 0xFFFFFFFFFFFFFFF8;
    sub_22F2D0AE4(a1 + 16, v7 & 0xFFFFFFFFFFFFFFF8);
    v12 = *(_QWORD *)(v11 + 40);
    v13 = *(_DWORD *)(a1 + 48);
    if (v13 >= *(_DWORD *)(a1 + 52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v13) = v12;
    ++*(_DWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a2 + 56);
  }
  if ((v7 & 4) != 0)
  {
    v8 = *(unint64_t **)((v7 & 0xFFFFFFFFFFFFFFF8) + 32);
    if (v8)
      goto LABEL_7;
LABEL_13:
    v9 = 0;
    return sub_22E7E1FB4(*(_QWORD *)(a1 + 24), v9, *(_QWORD *)(a1 + 32));
  }
  if (v7 < 8)
    goto LABEL_13;
  v8 = (unint64_t *)(v7 & 0xFFFFFFFFFFFFFFF8);
LABEL_7:
  v9 = *v8;
  return sub_22E7E1FB4(*(_QWORD *)(a1 + 24), v9, *(_QWORD *)(a1 + 32));
}

uint64_t sub_22E7F664C(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unint64_t *v89;
  uint64_t result;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  _BOOL8 v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  __int128 *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  __int128 v155;
  void **v156;
  void *v157;
  uint64_t v158;
  _BYTE v159[128];
  void *v160;
  uint64_t v161;
  _BYTE v162[40];
  void *v163;
  uint64_t v164;
  _QWORD v165[66];

  if (a2)
    v4 = a2 + 13;
  else
    v4 = 0;
  v165[64] = *MEMORY[0x24BDAC8D0];
  v5 = v4[1];
  if (a2)
    v6 = (uint64_t)(v4 - 13);
  else
    v6 = 0;
  v7 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v5 + 112) + 104), *(_QWORD *)(v5 + 112));
  if (v7 == v5)
  {
    v94 = *(_QWORD *)(a1 + 32);
    v95 = *(_DWORD *)(v94 + 8);
    if (v95 >= *(_DWORD *)(v94 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v95 = *(_DWORD *)(v94 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v94 + 8 * v95) = 0;
    ++*(_DWORD *)(v94 + 8);
  }
  else
  {
    v8 = v7;
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v5, *(_QWORD *)(a1 + 32));
    v9 = sub_22E7F9F84(*(_QWORD *)a1, v6);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(unsigned int *)(v10 + 8);
    if (v6 == v9)
    {
      v98 = *(unsigned int *)(v10 + 8);
      if (v11 >= *(_DWORD *)(v10 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v98 = *(unsigned int *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v98) = 0;
      ++*(_DWORD *)(v10 + 8);
      if (*(_QWORD *)(*(_QWORD *)a1 + 56))
        sub_22E7FCEF0((uint64_t *)a1, v6, 0);
      *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8 * v11) = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8) - v11;
      v163 = v165;
      v164 = 0x4000000000;
      v155 = *(_OWORD *)(a1 + 16);
      v156 = &v163;
      v157 = v159;
      v158 = 0x1000000000;
      v160 = v162;
      v161 = 0x800000000;
      v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
      if (v99 != v6)
      {
        v100 = (_BYTE *)v99;
        do
        {
          if ((v100[29] & 0x80) == 0)
            sub_22E7CA8EC(*((uint64_t *)&v155 + 1), (unint64_t)v100, (uint64_t)v156);
          v100 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v100 + 48))(v100);
        }
        while (v100 != (_BYTE *)v6);
      }
      if ((_DWORD)v164)
      {
        v101 = sub_22E7CA950((uint64_t)&v155, 0x32u, 0);
        sub_22E7E37E0(a1 + 16, v101);
      }
      else
      {
        v114 = *(_QWORD *)(a1 + 32);
        v115 = *(_DWORD *)(v114 + 8);
        if (v115 >= *(_DWORD *)(v114 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v115 = *(_DWORD *)(v114 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v114 + 8 * v115) = 0;
        ++*(_DWORD *)(v114 + 8);
      }
      if (v160 != v162)
        free(v160);
      if (v157 != v159)
        free(v157);
      if (v163 != v165)
        free(v163);
    }
    else
    {
      v12 = v9;
      if (v11 >= *(_DWORD *)(v10 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v11) = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = 0;
      ++*(_DWORD *)(v10 + 8);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v12, *(_QWORD *)(a1 + 32));
    }
    v13 = *(_QWORD *)a1;
    if ((*(_BYTE *)v4 & 3) != 0)
      v14 = 0;
    else
      v14 = sub_22E3CD31C(v4, (uint64_t)(v4 - 13));
    sub_22E7CA3E8(v13, v14);
    sub_22E7CA3E8(*(_QWORD *)a1, v8);
  }
  sub_22E7F6524(a1, (unint64_t)a2);
  sub_22E7E5008(a1 + 16, (uint64_t)(a2 + 19), a2[5]);
  v15 = *((_WORD *)a2 + 15) & 0x3FFF;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_DWORD *)(v16 + 8);
  if (v17 >= *(_DWORD *)(v16 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = *(_DWORD *)(v16 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v16 + 8 * v17) = v15;
  ++*(_DWORD *)(v16 + 8);
  v18 = (unsigned __int16)a2[10] >> 13;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_DWORD *)(v19 + 8);
  if (v20 >= *(_DWORD *)(v19 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(v19 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = v18;
  ++*(_DWORD *)(v19 + 8);
  v21 = (a2[10] >> 17) & 1;
  v22 = *(_QWORD *)(a1 + 32);
  v23 = *(_DWORD *)(v22 + 8);
  if (v23 >= *(_DWORD *)(v22 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v23 = *(_DWORD *)(v22 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v22 + 8 * v23) = v21;
  ++*(_DWORD *)(v22 + 8);
  v24 = (a2[10] >> 16) & 1;
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(_DWORD *)(v25 + 8);
  if (v26 >= *(_DWORD *)(v25 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v26 = *(_DWORD *)(v25 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v25 + 8 * v26) = v24;
  ++*(_DWORD *)(v25 + 8);
  v27 = (a2[10] >> 18) & 1;
  v28 = *(_QWORD *)(a1 + 32);
  v29 = *(_DWORD *)(v28 + 8);
  if (v29 >= *(_DWORD *)(v28 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v29 = *(_DWORD *)(v28 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v28 + 8 * v29) = v27;
  ++*(_DWORD *)(v28 + 8);
  v30 = (a2[10] >> 19) & 1;
  v31 = *(_QWORD *)(a1 + 32);
  v32 = *(_DWORD *)(v31 + 8);
  if (v32 >= *(_DWORD *)(v31 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v32 = *(_DWORD *)(v31 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v31 + 8 * v32) = v30;
  ++*(_DWORD *)(v31 + 8);
  v33 = (a2[10] >> 20) & 1;
  v34 = *(_QWORD *)(a1 + 32);
  v35 = *(_DWORD *)(v34 + 8);
  if (v35 >= *(_DWORD *)(v34 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v35 = *(_DWORD *)(v34 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v34 + 8 * v35) = v33;
  ++*(_DWORD *)(v34 + 8);
  v36 = (a2[10] >> 21) & 1;
  v37 = *(_QWORD *)(a1 + 32);
  v38 = *(_DWORD *)(v37 + 8);
  if (v38 >= *(_DWORD *)(v37 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v38 = *(_DWORD *)(v37 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v37 + 8 * v38) = v36;
  ++*(_DWORD *)(v37 + 8);
  v39 = (a2[10] >> 22) & 1;
  v40 = *(_QWORD *)(a1 + 32);
  v41 = *(_DWORD *)(v40 + 8);
  if (v41 >= *(_DWORD *)(v40 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v41 = *(_DWORD *)(v40 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v40 + 8 * v41) = v39;
  ++*(_DWORD *)(v40 + 8);
  v42 = (a2[10] >> 23) & 1;
  v43 = *(_QWORD *)(a1 + 32);
  v44 = *(_DWORD *)(v43 + 8);
  if (v44 >= *(_DWORD *)(v43 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v44 = *(_DWORD *)(v43 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v43 + 8 * v44) = v42;
  ++*(_DWORD *)(v43 + 8);
  v45 = (a2[10] >> 24) & 1;
  v46 = *(_QWORD *)(a1 + 32);
  v47 = *(_DWORD *)(v46 + 8);
  if (v47 >= *(_DWORD *)(v46 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v47 = *(_DWORD *)(v46 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v46 + 8 * v47) = v45;
  ++*(_DWORD *)(v46 + 8);
  v48 = (a2[10] >> 25) & 1;
  v49 = *(_QWORD *)(a1 + 32);
  v50 = *(_DWORD *)(v49 + 8);
  if (v50 >= *(_DWORD *)(v49 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v50 = *(_DWORD *)(v49 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v49 + 8 * v50) = v48;
  ++*(_DWORD *)(v49 + 8);
  v51 = (a2[10] >> 26) & 1;
  v52 = *(_QWORD *)(a1 + 32);
  v53 = *(_DWORD *)(v52 + 8);
  if (v53 >= *(_DWORD *)(v52 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v53 = *(_DWORD *)(v52 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v52 + 8 * v53) = v51;
  ++*(_DWORD *)(v52 + 8);
  v54 = (a2[10] >> 28) & 1;
  v55 = *(_QWORD *)(a1 + 32);
  v56 = *(_DWORD *)(v55 + 8);
  if (v56 >= *(_DWORD *)(v55 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v56 = *(_DWORD *)(v55 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v55 + 8 * v56) = v54;
  ++*(_DWORD *)(v55 + 8);
  v57 = a2[10] >> 30;
  v58 = *(_QWORD *)(a1 + 32);
  v59 = *(_DWORD *)(v58 + 8);
  if (v59 >= *(_DWORD *)(v58 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v59 = *(_DWORD *)(v58 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v58 + 8 * v59) = v57;
  ++*(_DWORD *)(v58 + 8);
  v60 = (a2[10] >> 33) & 1;
  v61 = *(_QWORD *)(a1 + 32);
  v62 = *(_DWORD *)(v61 + 8);
  if (v62 >= *(_DWORD *)(v61 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v62 = *(_DWORD *)(v61 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v61 + 8 * v62) = v60;
  ++*(_DWORD *)(v61 + 8);
  v63 = (a2[10] >> 34) & 1;
  v64 = *(_QWORD *)(a1 + 32);
  v65 = *(_DWORD *)(v64 + 8);
  if (v65 >= *(_DWORD *)(v64 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v65 = *(_DWORD *)(v64 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v64 + 8 * v65) = v63;
  ++*(_DWORD *)(v64 + 8);
  v66 = (*(_QWORD *)((*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2) + 80) >> 36) & 1;
  v67 = *(_QWORD *)(a1 + 32);
  v68 = *(_DWORD *)(v67 + 8);
  if (v68 >= *(_DWORD *)(v67 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v68 = *(_DWORD *)(v67 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v67 + 8 * v68) = v66;
  ++*(_DWORD *)(v67 + 8);
  v69 = (a2[10] >> 29) & 1;
  v70 = *(_QWORD *)(a1 + 32);
  v71 = *(_DWORD *)(v70 + 8);
  if (v71 >= *(_DWORD *)(v70 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v71 = *(_DWORD *)(v70 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v70 + 8 * v71) = v69;
  ++*(_DWORD *)(v70 + 8);
  v72 = sub_22EFB948C((uint64_t)a2);
  v73 = *(_QWORD *)(a1 + 32);
  v74 = *(_DWORD *)(v73 + 8);
  if (v74 >= *(_DWORD *)(v73 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v74 = *(_DWORD *)(v73 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v73 + 8 * v74) = v72;
  ++*(_DWORD *)(v73 + 8);
  v75 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), SHIDWORD(v75), *(_QWORD *)(a1 + 32));
  v76 = sub_22EFC2C24((uint64_t)a2);
  v77 = *(_QWORD *)(a1 + 32);
  v78 = *(_DWORD *)(v77 + 8);
  if (v78 >= *(_DWORD *)(v77 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v78 = *(_DWORD *)(v77 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v77 + 8 * v78) = v76;
  ++*(_DWORD *)(v77 + 8);
  v79 = a2[10];
  if ((v79 & 0x2000000) != 0)
  {
    if ((v79 & 0x8000000) != 0 && (v139 = (unsigned int *)a2[16]) != 0)
    {
      v140 = (uint64_t *)(v139 + 2);
      v141 = *v139;
      v142 = *(_QWORD *)(a1 + 32);
      v143 = *(_DWORD *)(v142 + 8);
      if (v143 >= *(_DWORD *)(v142 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v143 = *(_DWORD *)(v142 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v142 + 8 * v143) = v141;
      ++*(_DWORD *)(v142 + 8);
      v144 = *v139;
      if ((_DWORD)v144)
      {
        v145 = 8 * v144;
        do
        {
          v146 = *v140;
          sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *v140 & 0xFFFFFFFFFFFFFFFCLL, *(_QWORD *)(a1 + 32));
          v147 = *(_QWORD *)(a1 + 32);
          v148 = *(unsigned int *)(v147 + 8);
          if (v148 >= *(unsigned int *)(v147 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v148 = *(unsigned int *)(v147 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v147 + 8 * v148) = v146 & 3;
          ++*(_DWORD *)(v147 + 8);
          ++v140;
          v145 -= 8;
        }
        while (v145);
      }
    }
    else
    {
      v102 = *(_QWORD *)(a1 + 32);
      v103 = *(_DWORD *)(v102 + 8);
      if (v103 >= *(_DWORD *)(v102 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v103 = *(_DWORD *)(v102 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v102 + 8 * v103) = 0;
      ++*(_DWORD *)(v102 + 8);
    }
  }
  if (a2[18] >= 8uLL)
  {
    v96 = a2[18] & 6;
    if (v96 == 4)
    {
      v80 = 3;
    }
    else if (v96)
    {
      if (v96 == 2)
        v80 = 2;
      else
        v80 = 4;
    }
    else
    {
      v80 = 1;
    }
  }
  else
  {
    v80 = 0;
  }
  v81 = *(_QWORD *)(a1 + 32);
  v82 = *(_DWORD *)(v81 + 8);
  if (v82 >= *(_DWORD *)(v81 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v82 = *(_DWORD *)(v81 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v81 + 8 * v82) = v80;
  ++*(_DWORD *)(v81 + 8);
  v83 = a2[18];
  if (v83 >= 8)
  {
    if ((a2[18] & 6) == 4)
    {
      v104 = sub_22F3ABD90((uint64_t)a2);
      sub_22E7F76C0((uint64_t *)a1, *(_QWORD *)(v104 + 16) & 0xFFFFFFFFFFFFFFF8, (uint64_t)a2);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(v104 + 16) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 32));
      v105 = ((*(_QWORD *)(v104 + 16) >> 1) & 3) + 1;
      v106 = *(_QWORD *)(a1 + 32);
      v107 = *(_DWORD *)(v106 + 8);
      if (v107 >= *(_DWORD *)(v106 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v107 = *(_DWORD *)(v106 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v106 + 8 * v107) = v105;
      ++*(_DWORD *)(v106 + 8);
      sub_22E7E3894(a1 + 16, *(_QWORD *)(v104 + 24));
      v108 = *(_QWORD *)(v104 + 32) != 0;
      v109 = *(_QWORD *)(a1 + 32);
      v110 = *(_DWORD *)(v109 + 8);
      if (v110 >= *(_DWORD *)(v109 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v110 = *(_DWORD *)(v109 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v109 + 8 * v110) = v108;
      ++*(_DWORD *)(v109 + 8);
      v111 = *(_QWORD *)(v104 + 32);
      if (v111)
      {
        v121 = *(unsigned int *)(v111 + 8);
        v122 = *(_QWORD *)(a1 + 32);
        v123 = *(_DWORD *)(v122 + 8);
        if (v123 >= *(_DWORD *)(v122 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v123 = *(_DWORD *)(v122 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v122 + 8 * v123) = v121;
        ++*(_DWORD *)(v122 + 8);
        v124 = *(_QWORD *)(v104 + 32);
        v125 = *(unsigned int *)(v124 + 8);
        if ((_DWORD)v125)
        {
          v137 = 0;
          v138 = 32 * v125;
          do
          {
            sub_22E7E41DC(a1 + 16, (__int128 *)(*(_QWORD *)(v104 + 32) + v137 + 16));
            v137 += 32;
          }
          while (v138 != v137);
          v124 = *(_QWORD *)(v104 + 32);
        }
        sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)v124, *(_QWORD *)(a1 + 32));
        sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(*(_QWORD *)(v104 + 32) + 4), *(_QWORD *)(a1 + 32));
      }
      sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(v104 + 40), *(_QWORD *)(a1 + 32));
      if ((*(_BYTE *)(v104 + 8) & 4) != 0 && (v149 = *(_QWORD *)(v104 + 48)) != 0)
      {
        v150 = *(_QWORD *)(a1 + 32);
        v151 = *(_DWORD *)(v150 + 8);
        if (v151 >= *(_DWORD *)(v150 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v151 = *(_DWORD *)(v150 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v150 + 8 * v151) = 1;
        ++*(_DWORD *)(v150 + 8);
        sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)v149 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 32));
        v152 = ((*(_QWORD *)v149 >> 1) & 3) + 1;
        v153 = *(_QWORD *)(a1 + 32);
        v154 = *(_DWORD *)(v153 + 8);
        if (v154 >= *(_DWORD *)(v153 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v154 = *(_DWORD *)(v153 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v153 + 8 * v154) = v152;
        ++*(_DWORD *)(v153 + 8);
        sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(v149 + 8), *(_QWORD *)(a1 + 32));
      }
      else
      {
        v112 = *(_QWORD *)(a1 + 32);
        v113 = *(_DWORD *)(v112 + 8);
        if (v113 >= *(_DWORD *)(v112 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v113 = *(_DWORD *)(v112 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v112 + 8 * v113) = 0;
        ++*(_DWORD *)(v112 + 8);
      }
      if ((_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 32))(a2) != a2)
        goto LABEL_63;
      v97 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v104 + 16) & 0xFFFFFFFFFFFFFFF8)
                                                        + 32))(*(_QWORD *)(v104 + 16) & 0xFFFFFFFFFFFFFFF8);
    }
    else
    {
      if ((v83 & 6) != 0)
      {
        if ((a2[18] & 6) == 2)
        {
          v116 = sub_22EFC1FE0((uint64_t)a2);
          sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)v116 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 32));
          v117 = ((*(_QWORD *)v116 >> 1) & 3) + 1;
          v118 = *(_QWORD *)(a1 + 32);
          v119 = *(_DWORD *)(v118 + 8);
          if (v119 >= *(_DWORD *)(v118 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v119 = *(_DWORD *)(v118 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v118 + 8 * v119) = v117;
          ++*(_DWORD *)(v118 + 8);
          v120 = *(_DWORD *)(v116 + 8);
        }
        else
        {
          v126 = (unsigned int *)sub_22EFC2420((uint64_t)a2);
          v127 = *v126;
          v128 = *(_QWORD *)(a1 + 32);
          v129 = *(_DWORD *)(v128 + 8);
          if (v129 >= *(_DWORD *)(v128 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v129 = *(_DWORD *)(v128 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v128 + 8 * v129) = v127;
          ++*(_DWORD *)(v128 + 8);
          v130 = *v126;
          if ((_DWORD)v130)
          {
            v131 = v126 + 4;
            do
            {
              sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)&v131[8 * v126[1]], *(_QWORD *)(a1 + 32));
              v131 += 2;
              --v130;
            }
            while (v130);
          }
          v132 = v126[1];
          v133 = *(_QWORD *)(a1 + 32);
          v134 = *(_DWORD *)(v133 + 8);
          if (v134 >= *(_DWORD *)(v133 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v134 = *(_DWORD *)(v133 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v133 + 8 * v134) = v132;
          ++*(_DWORD *)(v133 + 8);
          v135 = v126[1];
          if ((_DWORD)v135)
          {
            v136 = (__int128 *)(v126 + 4);
            do
            {
              sub_22E7E41DC(a1 + 16, v136);
              v136 += 2;
              --v135;
            }
            while (v135);
          }
          sub_22E7C9A94(*(_QWORD *)(a1 + 24), v126[2], *(_QWORD *)(a1 + 32));
          v120 = v126[3];
        }
        sub_22E7C9A94(*(_QWORD *)(a1 + 24), v120, *(_QWORD *)(a1 + 32));
        goto LABEL_63;
      }
      v97 = v83 & 0xFFFFFFFFFFFFFFF8;
    }
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v97, *(_QWORD *)(a1 + 32));
  }
LABEL_63:
  v84 = *(_QWORD *)(a2[6] & 0xFFFFFFFFFFFFFFF0);
  if (v84)
    v85 = *(_BYTE *)(v84 + 16) == 26;
  else
    v85 = 0;
  if (v85
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v84 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (v84 = sub_22F10CF48(v84)) != 0)
  {
    v86 = (unsigned __int16)(*(_QWORD *)(v84 + 16) >> 38);
  }
  else
  {
    v86 = 0;
  }
  v87 = *(_QWORD *)(a1 + 32);
  v88 = *(_DWORD *)(v87 + 8);
  if (v88 >= *(_DWORD *)(v87 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v88 = *(_DWORD *)(v87 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v87 + 8 * v88) = v86;
  ++*(_DWORD *)(v87 + 8);
  v89 = (unint64_t *)a2[15];
  result = *(_QWORD *)(a2[6] & 0xFFFFFFFFFFFFFFF0);
  if (result && *(_BYTE *)(result + 16) == 26
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
    && (result = sub_22F10CF48(result)) != 0)
  {
    v91 = *(_QWORD *)(result + 16);
    if ((v91 & 0x3FFFC000000000) != 0)
    {
      v92 = 8 * (unsigned __int16)(v91 >> 38);
      do
      {
        v93 = *v89++;
        result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v93, *(_QWORD *)(a1 + 32));
        v92 -= 8;
      }
      while (v92);
    }
  }
  *(_DWORD *)(a1 + 232) = 56;
  return result;
}

uint64_t sub_22E7F76C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v9 = result;
  if ((*(_BYTE *)(result + 29) & 0x80) != 0)
  {
    result = sub_22E7F9F84(*a1, a3);
    if (result == a3)
    {
      result = sub_22F2D07C8(*a1 + 688, &v9);
      v6 = *(_DWORD *)(result + 8);
      if (v6 >= *(_DWORD *)(result + 12))
      {
        v8 = result;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        result = v8;
        v6 = *(_DWORD *)(v8 + 8);
      }
      v7 = (_QWORD *)(*(_QWORD *)result + 16 * v6);
      *v7 = 1;
      v7[1] = a3;
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_22E7F7774(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  v3 = result & 0xFFFFFFFFFFFFFFFCLL;
  v4 = ((result & 0xFFFFFFFFFFFFFFFCLL) != 0) | (2 * (result & 3));
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  if (v3)
  {
    v7 = *(_DWORD *)(a2 + 32);
    if (v7 >= *(_DWORD *)(a2 + 36))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(a2 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v7) = v3;
    ++*(_DWORD *)(a2 + 32);
  }
  return result;
}

uint64_t sub_22E7F7824(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  void **v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[128];
  void *v27;
  uint64_t v28;
  _BYTE v29[32];
  void *v30;
  uint64_t v31;
  _QWORD v32[65];

  v32[64] = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 96) + 88), *(_QWORD *)(v4 + 96));
  if (a2)
    v6 = (uint64_t)(a2 - 11);
  else
    v6 = 0;
  if (result == v4)
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_DWORD *)(v12 + 8);
    if (v13 >= *(_DWORD *)(v12 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(_DWORD *)(v12 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = 0;
    ++*(_DWORD *)(v12 + 8);
  }
  else
  {
    v7 = result;
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v4, *(_QWORD *)(a1 + 32));
    v8 = sub_22E7F9F84(*(_QWORD *)a1, v6);
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(unsigned int *)(v9 + 8);
    if (v6 == v8)
    {
      v14 = *(unsigned int *)(v9 + 8);
      if (v10 >= *(_DWORD *)(v9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = *(unsigned int *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v14) = 0;
      ++*(_DWORD *)(v9 + 8);
      if (*(_QWORD *)(*(_QWORD *)a1 + 56))
        sub_22E7FCEF0((uint64_t *)a1, v6, 0);
      *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8 * v10) = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8) - v10;
      v30 = v32;
      v31 = 0x4000000000;
      v22 = *(_OWORD *)(a1 + 16);
      v23 = &v30;
      v24 = v26;
      v25 = 0x1000000000;
      v27 = v29;
      v28 = 0x800000000;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
      if (v15 != v6)
      {
        v16 = (_BYTE *)v15;
        do
        {
          if ((v16[29] & 0x80) == 0)
            sub_22E7CA8EC(*((uint64_t *)&v22 + 1), (unint64_t)v16, (uint64_t)v23);
          v16 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v16 + 48))(v16);
        }
        while (v16 != (_BYTE *)v6);
      }
      if ((_DWORD)v31)
      {
        v17 = sub_22E7CA950((uint64_t)&v22, 0x32u, 0);
        sub_22E7E37E0(a1 + 16, v17);
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 32);
        v19 = *(_DWORD *)(v18 + 8);
        if (v19 >= *(_DWORD *)(v18 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v19 = *(_DWORD *)(v18 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = 0;
        ++*(_DWORD *)(v18 + 8);
      }
      if (v27 != v29)
        free(v27);
      if (v24 != v26)
        free(v24);
      if (v30 != v32)
        free(v30);
    }
    else
    {
      v11 = v8;
      if (v10 >= *(_DWORD *)(v9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v10) = *(_DWORD *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = 0;
      ++*(_DWORD *)(v9 + 8);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v11, *(_QWORD *)(a1 + 32));
    }
    v20 = *(_QWORD *)a1;
    if ((*(_BYTE *)a2 & 3) != 0)
      v21 = 0;
    else
      v21 = sub_22E3CD31C(a2, (uint64_t)(a2 - 11));
    sub_22E7CA3E8(v20, v21);
    return sub_22E7CA3E8(*(_QWORD *)a1, v7);
  }
  return result;
}

uint64_t sub_22E7F7B5C(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  result = sub_22E7F6524(a1, a2);
  v5 = ((unint64_t)*(unsigned int *)(a2 + 68) >> 1) & 1;
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(v6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = *(_QWORD *)(a2 + 72) & 3;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  if ((_DWORD)v8)
  {
    if ((_DWORD)v8 == 3)
    {
      if ((~*(_DWORD *)(a2 + 72) & 3) != 0)
        v11 = 0;
      else
        v11 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFF0;
      result = sub_22E7E1FB4(*(_QWORD *)(a1 + 24), v11, *(_QWORD *)(a1 + 32));
    }
    else
    {
      v12 = 0;
      if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
      {
        v12 = (_QWORD *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL);
        if ((*(_BYTE *)(a2 + 68) & 1) != 0)
          v12 = (_QWORD *)*v12;
      }
      v13 = *(_DWORD *)(a1 + 48);
      if (v13 >= *(_DWORD *)(a1 + 52))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = *(_DWORD *)(a1 + 48);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v13) = v12;
      ++*(_DWORD *)(a1 + 48);
    }
  }
  if ((*(_BYTE *)(a2 + 68) & 1) != 0)
  {
    v14 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
    if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
      v14 = *(_QWORD *)(v14 + 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = *(_DWORD *)(a1 + 48);
  if (v15 >= *(_DWORD *)(a1 + 52))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v15) = v14;
  ++*(_DWORD *)(a1 + 48);
  if (!*(_QWORD *)(a2 + 40))
  {
    v17 = sub_22F3686A8(*(_QWORD *)(a1 + 8), a2);
    result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v17, *(_QWORD *)(a1 + 32));
  }
  v16 = *(_QWORD *)(a2 + 16);
  if (((v16 & 4) == 0 || *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8) == *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 8))
    && (*(_BYTE *)(a2 + 29) & 3) == 0)
  {
    result = sub_22EFC9084(a2, 0);
    if ((result & 1) == 0 && (*(_WORD *)(a2 + 28) & 0x880) == 0)
    {
      result = a2;
      do
      {
        if ((*(_BYTE *)(result + 29) & 8) != 0)
          goto LABEL_32;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      }
      while (result != a2 && result != 0);
      if ((*(_DWORD *)(a2 + 28) & 0x1000) != 0 || (~*(_DWORD *)(a2 + 8) & 6) == 0)
        goto LABEL_32;
      v19 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
        v20 = *(_QWORD *)(a2 + 72) & 3;
        if ((v19 & 3) != 0 && (_DWORD)v20 != 3)
          v21 = *(_QWORD *)(v21 + 8);
        if (v21)
          goto LABEL_32;
      }
      else
      {
        LODWORD(v20) = v19 & 3;
      }
      if (((_DWORD)v20 == 3 || !(_DWORD)v20)
        && (~(_BYTE)v19 & 3) != 0
        && (*(_DWORD *)(a2 + 28) & 0x7E) != 0x32
        && (*(_QWORD *)(a2 + 56) & 4) == 0
        && *(_QWORD *)(a2 + 40))
      {
        *(_DWORD *)(a1 + 236) = *(_DWORD *)(*(_QWORD *)a1 + 1852);
      }
    }
  }
LABEL_32:
  *(_DWORD *)(a1 + 232) = 68;
  return result;
}

uint64_t sub_22E7F7E3C(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  _DWORD *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t result;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  _QWORD *v117;
  int v118;
  unsigned int v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  void **v125;
  void *v126;
  uint64_t v127;
  _BYTE v128[128];
  void *v129;
  uint64_t v130;
  _BYTE v131[40];
  void *v132;
  uint64_t v133;
  _QWORD v134[66];

  if (a2)
    v4 = (uint64_t *)(a2 + 72);
  else
    v4 = 0;
  v134[64] = *MEMORY[0x24BDAC8D0];
  v5 = v4[1];
  if (a2)
    v6 = (uint64_t)(v4 - 9);
  else
    v6 = 0;
  v7 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v5 + 80) + 72), *(_QWORD *)(v5 + 80));
  if (v7 == v5)
  {
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_DWORD *)(v13 + 8);
    if (v14 >= *(_DWORD *)(v13 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = *(_DWORD *)(v13 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = 0;
    ++*(_DWORD *)(v13 + 8);
  }
  else
  {
    v8 = v7;
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v5, *(_QWORD *)(a1 + 32));
    v9 = sub_22E7F9F84(*(_QWORD *)a1, v6);
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(unsigned int *)(v10 + 8);
    if (v6 == v9)
    {
      v15 = *(unsigned int *)(v10 + 8);
      if (v11 >= *(_DWORD *)(v10 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = *(unsigned int *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v15) = 0;
      ++*(_DWORD *)(v10 + 8);
      if (*(_QWORD *)(*(_QWORD *)a1 + 56))
        sub_22E7FCEF0((uint64_t *)a1, v6, 0);
      *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8 * v11) = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8) - v11;
      v132 = v134;
      v133 = 0x4000000000;
      v124 = *(_OWORD *)(a1 + 16);
      v125 = &v132;
      v126 = v128;
      v127 = 0x1000000000;
      v129 = v131;
      v130 = 0x800000000;
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
      if (v16 != v6)
      {
        v17 = (_BYTE *)v16;
        do
        {
          if ((v17[29] & 0x80) == 0)
            sub_22E7CA8EC(*((uint64_t *)&v124 + 1), (unint64_t)v17, (uint64_t)v125);
          v17 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v17 + 48))(v17);
        }
        while (v17 != (_BYTE *)v6);
      }
      if ((_DWORD)v133)
      {
        v18 = sub_22E7CA950((uint64_t)&v124, 0x32u, 0);
        sub_22E7E37E0(a1 + 16, v18);
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 32);
        v20 = *(_DWORD *)(v19 + 8);
        if (v20 >= *(_DWORD *)(v19 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v20 = *(_DWORD *)(v19 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = 0;
        ++*(_DWORD *)(v19 + 8);
      }
      if (v129 != v131)
        free(v129);
      if (v126 != v128)
        free(v126);
      if (v132 != v134)
        free(v132);
    }
    else
    {
      v12 = v9;
      if (v11 >= *(_DWORD *)(v10 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v11) = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v11) = 0;
      ++*(_DWORD *)(v10 + 8);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v12, *(_QWORD *)(a1 + 32));
    }
    v21 = *(_QWORD *)a1;
    if ((*(_BYTE *)v4 & 3) != 0)
      v22 = 0;
    else
      v22 = sub_22E3CD31C(v4, (uint64_t)(v4 - 9));
    sub_22E7CA3E8(v21, v22);
    sub_22E7CA3E8(*(_QWORD *)a1, v8);
  }
  sub_22E7F6524(a1, a2);
  v23 = *(_BYTE *)(a2 + 96) & 7;
  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(_DWORD *)(v24 + 8);
  if (v25 >= *(_DWORD *)(v24 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = *(_DWORD *)(v24 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v24 + 8 * v25) = v23;
  ++*(_DWORD *)(v24 + 8);
  v26 = ((unint64_t)*(unsigned __int8 *)(a2 + 96) >> 3) & 3;
  v27 = *(_QWORD *)(a1 + 32);
  v28 = *(_DWORD *)(v27 + 8);
  if (v28 >= *(_DWORD *)(v27 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v28 = *(_DWORD *)(v27 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v27 + 8 * v28) = v26;
  ++*(_DWORD *)(v27 + 8);
  v29 = ((unint64_t)*(unsigned __int8 *)(a2 + 96) >> 5) & 3;
  v30 = *(_QWORD *)(a1 + 32);
  v31 = *(_DWORD *)(v30 + 8);
  if (v31 >= *(_DWORD *)(v30 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v31 = *(_DWORD *)(v30 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v30 + 8 * v31) = v29;
  ++*(_DWORD *)(v30 + 8);
  v32 = (unint64_t)*(unsigned __int8 *)(a2 + 96) >> 7;
  v33 = *(_QWORD *)(a1 + 32);
  v34 = *(_DWORD *)(v33 + 8);
  if (v34 >= *(_DWORD *)(v33 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = *(_DWORD *)(v33 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v33 + 8 * v34) = v32;
  ++*(_DWORD *)(v33 + 8);
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40)
  {
    v35 = ((unint64_t)*(unsigned int *)(a2 + 96) >> 8) & 1;
    v36 = *(_QWORD *)(a1 + 32);
    v37 = *(_DWORD *)(v36 + 8);
    if (v37 >= *(_DWORD *)(v36 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v37 = *(_DWORD *)(v36 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v36 + 8 * v37) = v35;
    ++*(_DWORD *)(v36 + 8);
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      v38 = 0;
    else
      v38 = (*(unsigned __int8 *)(a2 + 97) >> 1) & 1;
    v39 = v38;
    v40 = *(_QWORD *)(a1 + 32);
    v41 = *(_DWORD *)(v40 + 8);
    if (v41 >= *(_DWORD *)(v40 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v41 = *(_DWORD *)(v40 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v40 + 8 * v41) = v39;
    ++*(_DWORD *)(v40 + 8);
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      v42 = 0;
    else
      v42 = (*(unsigned __int8 *)(a2 + 97) >> 2) & 1;
    v43 = v42;
    v44 = *(_QWORD *)(a1 + 32);
    v45 = *(_DWORD *)(v44 + 8);
    if (v45 >= *(_DWORD *)(v44 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v45 = *(_DWORD *)(v44 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v44 + 8 * v45) = v43;
    ++*(_DWORD *)(v44 + 8);
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      v46 = 0;
    else
      v46 = (*(unsigned __int8 *)(a2 + 97) >> 3) & 1;
    v47 = v46;
    v48 = *(_QWORD *)(a1 + 32);
    v49 = *(_DWORD *)(v48 + 8);
    if (v49 >= *(_DWORD *)(v48 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v49 = *(_DWORD *)(v48 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v48 + 8 * v49) = v47;
    ++*(_DWORD *)(v48 + 8);
    v50 = ((unint64_t)*(unsigned int *)(a2 + 96) >> 12) & 1;
    v51 = *(_QWORD *)(a1 + 32);
    v52 = *(_DWORD *)(v51 + 8);
    if (v52 >= *(_DWORD *)(v51 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v52 = *(_DWORD *)(v51 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v51 + 8 * v52) = v50;
    ++*(_DWORD *)(v51 + 8);
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      v53 = 0;
    else
      v53 = (*(unsigned __int8 *)(a2 + 97) >> 5) & 1;
    v54 = v53;
    v55 = *(_QWORD *)(a1 + 32);
    v56 = *(_DWORD *)(v55 + 8);
    if (v56 >= *(_DWORD *)(v55 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v56 = *(_DWORD *)(v55 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v55 + 8 * v56) = v54;
    ++*(_DWORD *)(v55 + 8);
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      v57 = 0;
    else
      v57 = (*(unsigned __int8 *)(a2 + 97) >> 6) & 1;
    v58 = v57;
    v59 = *(_QWORD *)(a1 + 32);
    v60 = *(_DWORD *)(v59 + 8);
    if (v60 >= *(_DWORD *)(v59 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v60 = *(_DWORD *)(v59 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v59 + 8 * v60) = v58;
    ++*(_DWORD *)(v59 + 8);
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      v61 = 0;
    else
      v61 = *(unsigned __int8 *)(a2 + 97) >> 7;
    v62 = v61;
    v63 = *(_QWORD *)(a1 + 32);
    v64 = *(_DWORD *)(v63 + 8);
    if (v64 >= *(_DWORD *)(v63 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v64 = *(_DWORD *)(v63 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v63 + 8 * v64) = v62;
    ++*(_DWORD *)(v63 + 8);
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      v65 = 0;
    else
      v65 = *(_BYTE *)(a2 + 98) & 1;
    v66 = v65;
    v67 = *(_QWORD *)(a1 + 32);
    v68 = *(_DWORD *)(v67 + 8);
    if (v68 >= *(_DWORD *)(v67 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v68 = *(_DWORD *)(v67 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v67 + 8 * v68) = v66;
    ++*(_DWORD *)(v67 + 8);
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      v69 = 0;
    else
      v69 = (*(unsigned __int8 *)(a2 + 98) >> 1) & 1;
    v70 = v69;
    v71 = *(_QWORD *)(a1 + 32);
    v72 = *(_DWORD *)(v71 + 8);
    if (v72 >= *(_DWORD *)(v71 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v72 = *(_DWORD *)(v71 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v71 + 8 * v72) = v70;
    ++*(_DWORD *)(v71 + 8);
    if (a2 && (*(_DWORD *)(a2 + 28) & 0x7F) == 0x3E)
    {
      v73 = ((unint64_t)*(unsigned int *)(a2 + 96) >> 18) & 7;
      v74 = *(_QWORD *)(a1 + 32);
      v75 = *(_DWORD *)(v74 + 8);
      v76 = *(_DWORD *)(v74 + 12);
      v77 = v73;
    }
    else
    {
      v73 = 0;
      v77 = 0;
      v74 = *(_QWORD *)(a1 + 32);
      v75 = *(_DWORD *)(v74 + 8);
      v76 = *(_DWORD *)(v74 + 12);
    }
    if (v75 >= v76)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v75 = *(_DWORD *)(v74 + 8);
      v77 = v73;
    }
    *(_QWORD *)(*(_QWORD *)v74 + 8 * v75) = v77;
    ++*(_DWORD *)(v74 + 8);
    if (sub_22E49C868(a2))
      v78 = (*(unsigned __int8 *)(a2 + 98) >> 5) & 1;
    else
      v78 = 0;
    v79 = v78;
    v80 = *(_QWORD *)(a1 + 32);
    v81 = *(_DWORD *)(v80 + 8);
    if (v81 >= *(_DWORD *)(v80 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v81 = *(_DWORD *)(v80 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v80 + 8 * v81) = v79;
    ++*(_DWORD *)(v80 + 8);
  }
  v82 = sub_22EFB948C(a2);
  v83 = *(_QWORD *)(a1 + 32);
  v84 = *(_DWORD *)(v83 + 8);
  if (v84 >= *(_DWORD *)(v83 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v84 = *(_DWORD *)(v83 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v83 + 8 * v84) = v82;
  ++*(_DWORD *)(v83 + 8);
  sub_22E7E2024(a1 + 16, a2);
  if (sub_22E49C868(a2))
  {
    v85 = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0));
    if (v85)
    {
      if ((*(_DWORD *)(v85 + 28) & 0x7Fu) - 35 <= 2)
      {
        v86 = sub_22F368D84(*(_QWORD *)(*(_QWORD *)a1 + 40), a2);
        v87 = v86 & 0xFFFFFFFFFFFFFFFCLL;
        v88 = *(_DWORD *)(a1 + 48);
        if (v88 >= *(_DWORD *)(a1 + 52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v88 = *(_DWORD *)(a1 + 48);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v88) = v87;
        ++*(_DWORD *)(a1 + 48);
        if (v87)
        {
          v89 = (v86 >> 1) & 1;
          v90 = *(_QWORD *)(a1 + 32);
          v91 = *(_DWORD *)(v90 + 8);
          if (v91 >= *(_DWORD *)(v90 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v91 = *(_DWORD *)(v90 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v90 + 8 * v91) = v89;
          ++*(_DWORD *)(v90 + 8);
        }
      }
    }
  }
  if (!sub_22E3CB5E0(a2) && (*(_BYTE *)(a2 + 96) & 0x18) == 0)
  {
    if (!*(_QWORD *)(*(_QWORD *)a1 + 64))
      goto LABEL_120;
    if (sub_22EFB6870(a2))
      goto LABEL_120;
    if (sub_22EFBE104(a2))
      goto LABEL_120;
    v92 = *(_DWORD *)(a2 + 28);
    if ((v92 & 0x7Fu) - 65 < 2)
      goto LABEL_120;
    v111 = *(_QWORD *)a1;
    v112 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 64) + 28);
    if (v112 > 4 || ((1 << v112) & 0x1A) == 0)
    {
      if ((v92 & 0x100) == 0)
        goto LABEL_120;
      sub_22EFC8E88(a2);
      v121 = *((unsigned int *)v120 + 2);
      if ((_DWORD)v121)
      {
        v122 = 8 * v121;
        v123 = *v120;
        while (*(_WORD *)(*(_QWORD *)v123 + 32) != 155)
        {
          v123 += 8;
          v122 -= 8;
          if (!v122)
            goto LABEL_120;
        }
      }
      else
      {
        v123 = *v120;
      }
      if (v123 == *v120 + 8 * v121
        || (v111 = *(_QWORD *)a1,
            (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 2000) + 20) & 0x2000000000000) == 0))
      {
LABEL_120:
        v93 = *(_QWORD *)(a1 + 32);
        v95 = (_DWORD *)(v93 + 8);
        v94 = *(_DWORD *)(v93 + 8);
        if (v94 >= *(_DWORD *)(v93 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v94 = *(_DWORD *)(v93 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v93 + 8 * v94) = 0;
LABEL_123:
        ++*v95;
        goto LABEL_124;
      }
    }
    v113 = sub_22EF732CC(*(_QWORD **)(v111 + 40), a2);
    v114 = *(_QWORD *)(a1 + 32);
    v115 = *(_DWORD *)(v114 + 8);
    if (v115 >= *(_DWORD *)(v114 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v115 = *(_DWORD *)(v114 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v114 + 8 * v115) = v113 == 3;
    ++*(_DWORD *)(v114 + 8);
    if (v113 == 3)
    {
      v116 = *(_QWORD *)a1;
      v117 = (_QWORD *)(*(_QWORD *)a1 + 840);
      v118 = sub_22E7CA3E8(*(_QWORD *)a1, a2);
      v95 = (_DWORD *)(v116 + 848);
      v119 = *(_DWORD *)(v116 + 848);
      if (v119 >= *(_DWORD *)(v116 + 852))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v119 = *(_DWORD *)(v116 + 848);
      }
      *(_DWORD *)(*v117 + 4 * v119) = v118;
      goto LABEL_123;
    }
  }
LABEL_124:
  v96 = sub_22EFB6870(a2);
  if (v96)
  {
    v97 = v96;
    v98 = *(_QWORD *)(a1 + 32);
    v99 = *(_DWORD *)(v98 + 8);
    if (v99 >= *(_DWORD *)(v98 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v99 = *(_DWORD *)(v98 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v98 + 8 * v99) = 1;
    ++*(_DWORD *)(v98 + 8);
    result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v97, *(_QWORD *)(a1 + 32));
  }
  else
  {
    result = sub_22EFBE104(a2);
    v101 = *(_QWORD *)(a1 + 32);
    v102 = *(_DWORD *)(v101 + 8);
    v103 = *(_DWORD *)(v101 + 12);
    if (result)
    {
      v104 = result;
      if (v102 >= v103)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v102 = *(_DWORD *)(v101 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v101 + 8 * v102) = 2;
      ++*(_DWORD *)(v101 + 8);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)v104 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 32));
      v105 = ((*(_QWORD *)v104 >> 1) & 3) + 1;
      v106 = *(_QWORD *)(a1 + 32);
      v107 = *(_DWORD *)(v106 + 8);
      if (v107 >= *(_DWORD *)(v106 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v107 = *(_DWORD *)(v106 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v106 + 8 * v107) = v105;
      ++*(_DWORD *)(v106 + 8);
      result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(v104 + 8), *(_QWORD *)(a1 + 32));
    }
    else
    {
      if (v102 >= v103)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v102 = *(_DWORD *)(v101 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v101 + 8 * v102) = 0;
      ++*(_DWORD *)(v101 + 8);
    }
  }
  v108 = *(_QWORD *)(a2 + 16);
  if (((v108 & 4) == 0 || *(_QWORD *)(v108 & 0xFFFFFFFFFFFFFFF8) == *(_QWORD *)((v108 & 0xFFFFFFFFFFFFFFF8) + 8))
    && (*(_BYTE *)(a2 + 29) & 3) == 0)
  {
    result = sub_22EFC9084(a2, 0);
    if ((result & 1) == 0 && (*(_WORD *)(a2 + 28) & 0x880) == 0)
    {
      result = a2;
      while ((*(_BYTE *)(result + 29) & 8) == 0)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
        if (result == a2 || result == 0)
        {
          if ((*(_DWORD *)(a2 + 28) & 0x7000) == 0x6000 && (~*(_DWORD *)(a2 + 8) & 6) != 0)
          {
            result = sub_22E750738(a2);
            if ((result & 1) == 0 && (*(_BYTE *)(a2 + 40) & 7) == 0 && (*(_BYTE *)(a2 + 56) & 4) == 0)
            {
              v110 = *(_QWORD *)(a2 + 80);
              result = sub_22E3CD31C((uint64_t *)(v110 + 72), v110);
              if (v110 == result
                && (*(_DWORD *)(a2 + 28) & 0x7F) == 0x3C
                && (*(_DWORD *)(a2 + 96) & 0x3A000) == 0
                && (!sub_22E49C868(a2)
                 || (result = sub_22F10C2A4(*(_QWORD *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF0))) == 0
                 || (*(_DWORD *)(result + 28) & 0x7Fu) - 35 >= 3))
              {
                result = sub_22E49C868(a2);
                if (!(_DWORD)result || (*(_BYTE *)(a2 + 98) & 0x20) == 0)
                {
                  result = sub_22E3CB5E0(a2);
                  if ((result & 1) != 0 || (*(_BYTE *)(a2 + 96) & 0x18) != 0)
                  {
                    result = sub_22EFBE104(a2);
                    if (!result)
                      *(_DWORD *)(a1 + 236) = *(_DWORD *)(*(_QWORD *)a1 + 1848);
                  }
                }
              }
            }
          }
          break;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 232) = 72;
  return result;
}

uint64_t sub_22E7F8D1C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  void **v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[128];
  void *v27;
  uint64_t v28;
  _BYTE v29[32];
  void *v30;
  uint64_t v31;
  _QWORD v32[65];

  v32[64] = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  result = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v4 + 56) + 48), *(_QWORD *)(v4 + 56));
  if (a2)
    v6 = (uint64_t)(a2 - 6);
  else
    v6 = 0;
  if (result == v4)
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_DWORD *)(v12 + 8);
    if (v13 >= *(_DWORD *)(v12 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = *(_DWORD *)(v12 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = 0;
    ++*(_DWORD *)(v12 + 8);
  }
  else
  {
    v7 = result;
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v4, *(_QWORD *)(a1 + 32));
    v8 = sub_22E7F9F84(*(_QWORD *)a1, v6);
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(unsigned int *)(v9 + 8);
    if (v6 == v8)
    {
      v14 = *(unsigned int *)(v9 + 8);
      if (v10 >= *(_DWORD *)(v9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = *(unsigned int *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v14) = 0;
      ++*(_DWORD *)(v9 + 8);
      if (*(_QWORD *)(*(_QWORD *)a1 + 56))
        sub_22E7FCEF0((uint64_t *)a1, v6, 0);
      *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8 * v10) = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8) - v10;
      v30 = v32;
      v31 = 0x4000000000;
      v22 = *(_OWORD *)(a1 + 16);
      v23 = &v30;
      v24 = v26;
      v25 = 0x1000000000;
      v27 = v29;
      v28 = 0x800000000;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
      if (v15 != v6)
      {
        v16 = (_BYTE *)v15;
        do
        {
          if ((v16[29] & 0x80) == 0)
            sub_22E7CA8EC(*((uint64_t *)&v22 + 1), (unint64_t)v16, (uint64_t)v23);
          v16 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v16 + 48))(v16);
        }
        while (v16 != (_BYTE *)v6);
      }
      if ((_DWORD)v31)
      {
        v17 = sub_22E7CA950((uint64_t)&v22, 0x32u, 0);
        sub_22E7E37E0(a1 + 16, v17);
      }
      else
      {
        v18 = *(_QWORD *)(a1 + 32);
        v19 = *(_DWORD *)(v18 + 8);
        if (v19 >= *(_DWORD *)(v18 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v19 = *(_DWORD *)(v18 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = 0;
        ++*(_DWORD *)(v18 + 8);
      }
      if (v27 != v29)
        free(v27);
      if (v24 != v26)
        free(v24);
      if (v30 != v32)
        free(v30);
    }
    else
    {
      v11 = v8;
      if (v10 >= *(_DWORD *)(v9 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v10) = *(_DWORD *)(v9 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = 0;
      ++*(_DWORD *)(v9 + 8);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v11, *(_QWORD *)(a1 + 32));
    }
    v20 = *(_QWORD *)a1;
    if ((*(_BYTE *)a2 & 3) != 0)
      v21 = 0;
    else
      v21 = sub_22E3CD31C(a2, (uint64_t)(a2 - 6));
    sub_22E7CA3E8(v20, v21);
    return sub_22E7CA3E8(*(_QWORD *)a1, v7);
  }
  return result;
}

void sub_22E7F9054(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_22E7F6044(a1, a2);
  v4 = *(_QWORD *)(a2 + 136);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0 && v5)
  {
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_DWORD *)(v14 + 8);
    if (v15 >= *(_DWORD *)(v14 + 12))
    {
      v21 = *(_QWORD *)(a1 + 32);
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v21;
      v15 = *(_DWORD *)(v21 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = 1;
    ++*(_DWORD *)(v14 + 8);
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v5, *(_QWORD *)(a1 + 32));
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_DWORD *)(v6 + 8);
    v8 = *(_DWORD *)(v6 + 12);
    if (v5)
      v9 = (*(_QWORD *)(a2 + 136) & 4) == 0;
    else
      v9 = 1;
    if (v9)
    {
      if (v7 >= v8)
      {
        v19 = *(_QWORD *)(a1 + 32);
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = v19;
        v7 = *(_DWORD *)(v19 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = 0;
      ++*(_DWORD *)(v6 + 8);
    }
    else
    {
      if (v7 >= v8)
      {
        v22 = *(_QWORD *)(a1 + 32);
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = v22;
        v7 = *(_DWORD *)(v22 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = 2;
      ++*(_DWORD *)(v6 + 8);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 32));
      v16 = ((*(_QWORD *)v5 >> 1) & 3) + 1;
      v17 = *(_QWORD *)(a1 + 32);
      v18 = *(_DWORD *)(v17 + 8);
      if (v18 >= *(_DWORD *)(v17 + 12))
      {
        v23 = *(_QWORD *)(a1 + 32);
        v20 = ((*(_QWORD *)v5 >> 1) & 3) + 1;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v20;
        v17 = v23;
        v18 = *(_DWORD *)(v23 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v16;
      ++*(_DWORD *)(v17 + 8);
      sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(v5 + 8), *(_QWORD *)(a1 + 32));
    }
  }
  v10 = ((unint64_t)*(unsigned int *)(a2 + 72) >> 16) & 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 >= *(_DWORD *)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(v11 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v10;
  ++*(_DWORD *)(v11 + 8);
  if ((*(_BYTE *)(a2 + 74) & 1) != 0)
  {
    sub_22E7E2164(a1 + 16, a2);
    if ((*(_BYTE *)(a2 + 74) & 1) != 0)
    {
      v13 = sub_22F0CB980(*(_QWORD *)(a1 + 8), a2);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v13, *(_QWORD *)(a1 + 32));
    }
  }
  *(_DWORD *)(a1 + 232) = 95;
}

uint64_t sub_22E7F9290(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;

  sub_22E7F664C(a1, (_QWORD *)a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (result == a2)
  {
    v5 = sub_22EFD7260(a2);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_DWORD *)(v6 + 8);
    if (v7 >= *(_DWORD *)(v6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
    ++*(_DWORD *)(v6 + 8);
    result = sub_22EFD7394(a2);
    if ((unint64_t *)result != v8)
    {
      v13 = (unint64_t *)result;
      do
      {
        v14 = *v13++;
        v15 = v8;
        result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v14, *(_QWORD *)(a1 + 32));
        v8 = v15;
      }
      while (v13 != v15);
    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_DWORD *)(v11 + 8);
    if (v12 >= *(_DWORD *)(v11 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = *(_DWORD *)(v11 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = 0;
    ++*(_DWORD *)(v11 + 8);
  }
  v9 = *(_QWORD *)(a2 + 16);
  if ((v9 & 4) == 0 || *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8) == *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8))
  {
    v10 = *(_QWORD *)(a2 + 112);
    result = sub_22E3CD31C((uint64_t *)(v10 + 104), v10);
    if (v10 == result
      && (*(_WORD *)(a2 + 28) & 0x1180) == 0
      && (*(_BYTE *)(a2 + 40) & 7) == 0
      && (*(_BYTE *)(a2 + 56) & 4) == 0
      && (*(_QWORD *)(a2 + 80) & 0x300000) == 0x200000)
    {
      *(_DWORD *)(a1 + 236) = *(_DWORD *)(*(_QWORD *)a1 + 1864);
    }
  }
  *(_DWORD *)(a1 + 232) = 97;
  return result;
}

uint64_t sub_22E7F941C(uint64_t a1, unint64_t a2)
{
  _BYTE *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  __int128 v32;
  void **v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[128];
  void *v37;
  uint64_t v38;
  _BYTE v39[40];
  void *v40;
  uint64_t v41;
  _QWORD v42[66];

  v4 = (_BYTE *)(a2 + 64);
  if (a2)
    v5 = (uint64_t *)(a2 + 64);
  else
    v5 = 0;
  v42[64] = *MEMORY[0x24BDAC8D0];
  v6 = v5[1];
  if (a2)
    v7 = (uint64_t)(v5 - 8);
  else
    v7 = 0;
  v8 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v6 + 72) + 64), *(_QWORD *)(v6 + 72));
  if (v8 == v6)
  {
    v21 = *(_QWORD *)(a1 + 32);
    v22 = *(_DWORD *)(v21 + 8);
    if (v22 >= *(_DWORD *)(v21 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v22 = *(_DWORD *)(v21 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v21 + 8 * v22) = 0;
    ++*(_DWORD *)(v21 + 8);
  }
  else
  {
    v9 = v8;
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v6, *(_QWORD *)(a1 + 32));
    v10 = sub_22E7F9F84(*(_QWORD *)a1, v7);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(unsigned int *)(v11 + 8);
    if (v7 == v10)
    {
      v23 = *(unsigned int *)(v11 + 8);
      if (v12 >= *(_DWORD *)(v11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v23 = *(unsigned int *)(v11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v11 + 8 * v23) = 0;
      ++*(_DWORD *)(v11 + 8);
      if (*(_QWORD *)(*(_QWORD *)a1 + 56))
        sub_22E7FCEF0((uint64_t *)a1, v7, 0);
      *(_QWORD *)(**(_QWORD **)(a1 + 32) + 8 * v12) = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8) - v12;
      v40 = v42;
      v41 = 0x4000000000;
      v32 = *(_OWORD *)(a1 + 16);
      v33 = &v40;
      v34 = v36;
      v35 = 0x1000000000;
      v37 = v39;
      v38 = 0x800000000;
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
      if (v24 != v7)
      {
        v25 = (_BYTE *)v24;
        do
        {
          if ((v25[29] & 0x80) == 0)
            sub_22E7CA8EC(*((uint64_t *)&v32 + 1), (unint64_t)v25, (uint64_t)v33);
          v25 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v25 + 48))(v25);
        }
        while (v25 != (_BYTE *)v7);
      }
      if ((_DWORD)v41)
      {
        v26 = sub_22E7CA950((uint64_t)&v32, 0x32u, 0);
        sub_22E7E37E0(a1 + 16, v26);
      }
      else
      {
        v30 = *(_QWORD *)(a1 + 32);
        v31 = *(_DWORD *)(v30 + 8);
        if (v31 >= *(_DWORD *)(v30 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v31 = *(_DWORD *)(v30 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v30 + 8 * v31) = 0;
        ++*(_DWORD *)(v30 + 8);
      }
      if (v37 != v39)
        free(v37);
      if (v34 != v36)
        free(v34);
      if (v40 != v42)
        free(v40);
    }
    else
    {
      v13 = v10;
      if (v12 >= *(_DWORD *)(v11 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v12) = *(_DWORD *)(v11 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = 0;
      ++*(_DWORD *)(v11 + 8);
      sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v13, *(_QWORD *)(a1 + 32));
    }
    v14 = *(_QWORD *)a1;
    if ((*(_BYTE *)v5 & 3) != 0)
      v15 = 0;
    else
      v15 = sub_22E3CD31C(v5, (uint64_t)(v5 - 8));
    sub_22E7CA3E8(v14, v15);
    sub_22E7CA3E8(*(_QWORD *)a1, v9);
  }
  if ((*v4 & 3) != 0)
  {
    v16 = (_QWORD *)sub_22EFE9368(a2);
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *v16 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 32));
    if (*(_QWORD *)sub_22EFE9368(a2) >= 8uLL)
    {
      v27 = (*(_QWORD *)sub_22EFE9368(a2) >> 2) & 1;
      v28 = *(_QWORD *)(a1 + 32);
      v29 = *(_DWORD *)(v28 + 8);
      if (v29 >= *(_DWORD *)(v28 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v29 = *(_DWORD *)(v28 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v28 + 8 * v29) = v27;
      ++*(_DWORD *)(v28 + 8);
    }
  }
  sub_22E7F54E0((uint64_t *)a1, a2);
  sub_22E7CA8EC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 48), *(_QWORD *)(a1 + 32));
  result = sub_22E7E5100(a1 + 16, *(int **)(a2 + 56));
  v18 = *(unsigned int *)(a2 + 28);
  v19 = *(_QWORD *)(a1 + 32);
  v20 = *(_DWORD *)(v19 + 8);
  if (v20 >= *(_DWORD *)(v19 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = *(_DWORD *)(v19 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = (v18 >> 16) & 0x3FFF;
  ++*(_DWORD *)(v19 + 8);
  return result;
}

void sub_22E7F9868(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EFE9368(a2);
  v5 = v4;
  v6 = *(_QWORD *)(*a1 + 56);
  if (v6)
    v7 = v6 + 24;
  else
    v7 = 0;
  if (v7 != *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 16048) && *(_QWORD *)(v4 + 8))
    sub_22EFE95D4(a2);
  v8 = *(char **)(v5 + 8);
  if (v8)
  {
    v25 = *(_DWORD *)v8;
    v8 += 4;
    v9 = v25;
  }
  else
  {
    v9 = 0;
  }
  v10 = a1[4];
  v11 = *(unsigned int *)(v10 + 8);
  v12 = v11;
  if (v11 >= *(_DWORD *)(v10 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(unsigned int *)(v10 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v10 + 8 * v12) = 0;
  ++*(_DWORD *)(v10 + 8);
  v26 = 0;
  v13 = *(unsigned int *)(v5 + 40);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v22 = *(uint64_t **)(v5 + 32);
    v23 = 8 * v13;
    do
    {
      v24 = *v22;
      if (v14 >= 0x10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v26;
      }
      v27[v14] = v24;
      v14 = ++v26;
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  else
  {
    v14 = 0;
  }
  v15 = *(unsigned int *)(v5 + 136);
  if ((_DWORD)v15)
  {
    v19 = *(uint64_t **)(v5 + 128);
    v20 = 8 * v15;
    do
    {
      v21 = *v19;
      if (v14 >= 0x10)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v26;
      }
      v27[v14] = v21;
      v14 = ++v26;
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  if (v14)
  {
    v16 = v27;
    v17 = 8 * v14;
    do
    {
      v18 = *v16++;
      sub_22E7FCEF0(a1, v18, 1);
      v17 -= 8;
    }
    while (v17);
  }
  sub_22E7FD160(a1[4], v8, &v8[4 * v9]);
  *(_QWORD *)(*(_QWORD *)a1[4] + 8 * v11) = *(unsigned int *)(a1[4] + 8) + ~v11;
}

uint64_t sub_22E7F9AC4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BOOL8 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t **v23;
  unint64_t *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v4 = *(_QWORD *)(a2 + 152);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0 && v5)
  {
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)v5 + 152);
      v5 = v6 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v6 & 4) != 0 && v5);
  }
  sub_22E7F76C0((uint64_t *)a1, v5, a2);
  sub_22E7F9054(a1, a2);
  v7 = *(_QWORD *)(a2 + 152);
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 4) != 0 && v8)
    v8 = *(_QWORD *)v8 | 4;
  v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  if ((v8 & 4) != 0 || !v9)
  {
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v9, *(_QWORD *)(a1 + 32));
    v10 = *(_QWORD *)(a2 + 152) & 0xFFFFFFFFFFFFFFF8;
    if (v10)
      v11 = (*(_QWORD *)(a2 + 152) & 4) == 0;
    else
      v11 = 1;
    v12 = (uint64_t *)(v10 + 8);
    if (v11)
      v12 = (uint64_t *)(a2 + 168);
    sub_22E7E3894(a1 + 16, *v12);
  }
  else
  {
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v9, *(_QWORD *)(a1 + 32));
  }
  sub_22E7E3894(a1 + 16, *(_QWORD *)(a2 + 168));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 176), *(_QWORD *)(a1 + 32));
  v13 = *(_BYTE *)(a2 + 180) & 7;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_DWORD *)(v14 + 8);
  if (v15 >= *(_DWORD *)(v14 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = *(_DWORD *)(v14 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v13;
  ++*(_DWORD *)(v14 + 8);
  v16 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) == a2;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_DWORD *)(v17 + 8);
  if (v18 >= *(_DWORD *)(v17 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = *(_DWORD *)(v17 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v17 + 8 * v18) = v16;
  ++*(_DWORD *)(v17 + 8);
  if ((*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) == a2)
  {
    v19 = *(_QWORD *)(a2 + 152);
    v20 = v19 & 0xFFFFFFFFFFFFFFF8;
    if ((v19 & 4) != 0 && v20)
    {
      do
      {
        v21 = *(_QWORD *)(*(_QWORD *)v20 + 152);
        v20 = v21 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v21 & 4) != 0 && v20);
    }
    v22 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v20 + 32))(v20);
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v22, *(_QWORD *)(a1 + 32));
  }
  v23 = *(unint64_t ***)(a2 + 160);
  if (v23)
    v24 = *v23;
  else
    v24 = 0;
  result = sub_22E7D2E84(a1 + 16, v24);
  v26 = *(_QWORD *)(a2 + 160);
  if (v26 && *(_QWORD *)v26)
  {
    sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(v26 + 8), *(_QWORD *)(a1 + 32));
    v27 = *(_QWORD *)(a2 + 160);
    if (v27)
      v28 = *(_DWORD *)(v27 + 12);
    else
      v28 = 0;
    result = sub_22E7C9A94(*(_QWORD *)(a1 + 24), v28, *(_QWORD *)(a1 + 32));
  }
  *(_DWORD *)(a1 + 232) = 105;
  return result;
}

uint64_t sub_22E7F9D00(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t *v11;
  unint64_t **v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL8 v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a2 + 112);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) != 0 && v5)
  {
    do
    {
      v30 = *(_QWORD *)(*(_QWORD *)v5 + 112);
      v5 = v30 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((v30 & 4) != 0 && v5);
  }
  sub_22E7F76C0((uint64_t *)a1, v5, a2);
  sub_22E7F7E3C(a1, a2);
  v6 = *(_QWORD *)(a2 + 112);
  v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 4) != 0 && v7)
    v7 = *(_QWORD *)v7 | 4;
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 4) != 0 || !v8)
  {
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v8, *(_QWORD *)(a1 + 32));
    v9 = *(_QWORD *)(a2 + 112) & 0xFFFFFFFFFFFFFFF8;
    if (v9)
      v10 = (*(_QWORD *)(a2 + 112) & 4) == 0;
    else
      v10 = 1;
    v11 = (uint64_t *)(v9 + 8);
    if (v10)
      v11 = (uint64_t *)(a2 + 128);
    sub_22E7E3894(a1 + 16, *v11);
  }
  else
  {
    sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v8, *(_QWORD *)(a1 + 32));
  }
  v12 = *(unint64_t ***)(a2 + 120);
  if (v12)
    v13 = *v12;
  else
    v13 = 0;
  sub_22E7D2E84(a1 + 16, v13);
  v14 = *(_QWORD *)(a2 + 120);
  if (v14 && *(_QWORD *)v14)
  {
    sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(v14 + 8), *(_QWORD *)(a1 + 32));
    v15 = *(_QWORD *)(a2 + 120);
    if (v15)
      v16 = *(_DWORD *)(v15 + 12);
    else
      v16 = 0;
    sub_22E7C9A94(*(_QWORD *)(a1 + 24), v16, *(_QWORD *)(a1 + 32));
  }
  sub_22E7E3894(a1 + 16, *(_QWORD *)(a2 + 128));
  sub_22E7C9A94(*(_QWORD *)(a1 + 24), *(_DWORD *)(a2 + 416), *(_QWORD *)(a1 + 32));
  v17 = *(_BYTE *)(a2 + 420) & 7;
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_DWORD *)(v18 + 8);
  if (v19 >= *(_DWORD *)(v18 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v19 = *(_DWORD *)(v18 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = v17;
  ++*(_DWORD *)(v18 + 8);
  v20 = ((unint64_t)*(unsigned __int8 *)(a2 + 420) >> 3) & 1;
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(_DWORD *)(v21 + 8);
  if (v22 >= *(_DWORD *)(v21 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v22 = *(_DWORD *)(v21 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v21 + 8 * v22) = v20;
  ++*(_DWORD *)(v21 + 8);
  v23 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2) == a2;
  v24 = *(_QWORD *)(a1 + 32);
  v25 = *(_DWORD *)(v24 + 8);
  if (v25 >= *(_DWORD *)(v24 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = *(_DWORD *)(v24 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v24 + 8 * v25) = v23;
  ++*(_DWORD *)(v24 + 8);
  result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (result == a2)
  {
    v27 = *(_QWORD *)(a2 + 112);
    v28 = v27 & 0xFFFFFFFFFFFFFFF8;
    if ((v27 & 4) != 0 && v28)
    {
      do
      {
        v31 = *(_QWORD *)(*(_QWORD *)v28 + 112);
        v28 = v31 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v31 & 4) != 0 && v28);
    }
    v29 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v28 + 32))(v28);
    result = sub_22E7CA8EC(*(_QWORD *)(a1 + 24), v29, *(_QWORD *)(a1 + 32));
  }
  *(_DWORD *)(a1 + 232) = 108;
  return result;
}

uint64_t sub_22E7F9F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a2;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v8 = v4;
  if (!sub_22E7E6C6C(a1, v4))
  {
    v6 = sub_22F2D6D20(a1 + 1536, &v8);
    v4 = v6[1];
    if (!v4)
    {
      v7 = v6;
      v4 = v2;
      do
      {
        if (sub_22E7E6C6C(a1, v2))
          v4 = v2;
        v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
      }
      while (v2);
      v7[1] = v4;
    }
  }
  return v4;
}

void sub_22E7FA030(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  __int128 v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  __int128 v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  int64x2_t v77;
  __int128 v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  __int128 v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  char *v100;
  __int128 v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  __int128 v116;
  unsigned int v117;
  unsigned int v118;
  __int128 v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  char *v162;
  std::__shared_weak_count *v163;
  char *v164;
  std::__shared_weak_count *v165;
  char *v166;
  std::__shared_weak_count *v167;
  char *v168;
  std::__shared_weak_count *v169;
  char *v170;
  std::__shared_weak_count *v171;
  char *v172;
  std::__shared_weak_count *v173;
  char *v174;
  std::__shared_weak_count *v175;
  char *v176;
  std::__shared_weak_count *v177;
  char *v178;
  std::__shared_weak_count *v179;
  char *v180;
  std::__shared_weak_count *v181;
  char *v182;
  std::__shared_weak_count *v183;
  char *v184;
  std::__shared_weak_count *v185;
  char *v186;
  std::__shared_weak_count *v187;
  char *v188;
  std::__shared_weak_count *v189;

  v2 = (char *)operator new(0x228uLL);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &unk_24FA715D0;
  *((_QWORD *)v2 + 1) = 0;
  *(_OWORD *)(v2 + 56) = xmmword_22F45E250;
  *(_OWORD *)(v2 + 72) = xmmword_22F45FB90;
  *(_OWORD *)(v2 + 88) = xmmword_22F45FB90;
  *(_OWORD *)(v2 + 104) = xmmword_22F45FB90;
  *(_OWORD *)(v2 + 120) = xmmword_22F45FB90;
  *(_OWORD *)(v2 + 136) = xmmword_22F45FB90;
  *(_OWORD *)(v2 + 152) = xmmword_22F45FB90;
  *(_OWORD *)(v2 + 168) = xmmword_22F45FB90;
  *(int64x2_t *)(v2 + 184) = vdupq_n_s64(2uLL);
  *(_OWORD *)(v2 + 200) = xmmword_22F45FB90;
  *(_OWORD *)(v2 + 216) = xmmword_22F45E250;
  *(_OWORD *)(v2 + 232) = xmmword_22F45FB90;
  *(_OWORD *)(v2 + 248) = xmmword_22F45E250;
  *((_QWORD *)v2 + 33) = 0;
  *((_OWORD *)v2 + 17) = xmmword_22F45FBB0;
  *((_OWORD *)v2 + 18) = xmmword_22F4604F0;
  *((_OWORD *)v2 + 19) = xmmword_22F45F9F0;
  *((_OWORD *)v2 + 20) = xmmword_22F45FBB0;
  *((_OWORD *)v2 + 21) = xmmword_22F460500;
  *((_OWORD *)v2 + 22) = xmmword_22F460510;
  *((_OWORD *)v2 + 23) = xmmword_22F460520;
  *((int64x2_t *)v2 + 24) = vdupq_n_s64(6uLL);
  *((_QWORD *)v2 + 50) = 4;
  *((_DWORD *)v2 + 8) = 23;
  *((_DWORD *)v2 + 9) = 32;
  v189 = (std::__shared_weak_count *)v2;
  *(_OWORD *)(v2 + 40) = xmmword_22F4604E0;
  *((_QWORD *)v2 + 3) = v2 + 40;
  v3 = v2 + 24;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 520) = 0u;
  *(_OWORD *)(v2 + 536) = 0u;
  v4 = *(_QWORD *)(a1 + 16);
  v188 = v3;
  *(_DWORD *)(a1 + 1852) = sub_22E74761C(v4, (uint64_t)&v188);
  v5 = v189;
  if (v189)
  {
    p_shared_owners = (unint64_t *)&v189->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (char *)operator new(0x228uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &unk_24FA715D0;
  *(int64x2_t *)(v8 + 184) = vdupq_n_s64(2uLL);
  *((_OWORD *)v8 + 25) = xmmword_22F45F9F0;
  *((int64x2_t *)v8 + 26) = vdupq_n_s64(6uLL);
  *(_OWORD *)(v8 + 56) = xmmword_22F45E250;
  *(_OWORD *)(v8 + 72) = xmmword_22F45FB90;
  *(_OWORD *)(v8 + 88) = xmmword_22F45FB90;
  *(_OWORD *)(v8 + 104) = xmmword_22F45FB90;
  *(_OWORD *)(v8 + 120) = xmmword_22F45FB90;
  *(_OWORD *)(v8 + 136) = xmmword_22F45FB90;
  *(_OWORD *)(v8 + 152) = xmmword_22F45FB90;
  *(_OWORD *)(v8 + 168) = xmmword_22F45FB90;
  *(_OWORD *)(v8 + 200) = xmmword_22F45FB90;
  *(_OWORD *)(v8 + 216) = xmmword_22F45E250;
  *(_OWORD *)(v8 + 232) = xmmword_22F45FB90;
  *(_OWORD *)(v8 + 248) = xmmword_22F45E250;
  *((_QWORD *)v8 + 33) = 0;
  *((_OWORD *)v8 + 17) = xmmword_22F45FBB0;
  *((_OWORD *)v8 + 18) = xmmword_22F4604F0;
  *((_OWORD *)v8 + 19) = xmmword_22F45F9F0;
  *((_OWORD *)v8 + 20) = xmmword_22F45FBB0;
  *((_OWORD *)v8 + 21) = xmmword_22F460500;
  *((_OWORD *)v8 + 22) = xmmword_22F460510;
  *((_OWORD *)v8 + 23) = xmmword_22F45FBB0;
  *((_OWORD *)v8 + 24) = xmmword_22F4604F0;
  *((_QWORD *)v8 + 54) = 4;
  *((_DWORD *)v8 + 8) = 25;
  *((_DWORD *)v8 + 9) = 32;
  *(_OWORD *)(v8 + 40) = xmmword_22F460530;
  v187 = (std::__shared_weak_count *)v8;
  *((_QWORD *)v8 + 3) = v8 + 40;
  v9 = v8 + 24;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 536) = 0u;
  v10 = *(_QWORD *)(a1 + 16);
  v186 = v9;
  *(_DWORD *)(a1 + 1860) = sub_22E74761C(v10, (uint64_t)&v186);
  v11 = v187;
  if (v187)
  {
    v12 = (unint64_t *)&v187->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (char *)operator new(0x228uLL);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &unk_24FA715D0;
  *(_OWORD *)(v14 + 40) = xmmword_22F460540;
  *((_QWORD *)v14 + 3) = v14 + 40;
  *(_OWORD *)(v14 + 56) = xmmword_22F45FB90;
  *(_OWORD *)(v14 + 72) = xmmword_22F45E250;
  *(_OWORD *)(v14 + 88) = xmmword_22F45FB90;
  *(_OWORD *)(v14 + 104) = xmmword_22F45FB90;
  *(_OWORD *)(v14 + 120) = xmmword_22F45FB90;
  *(_OWORD *)(v14 + 136) = xmmword_22F45FB90;
  *(_OWORD *)(v14 + 152) = xmmword_22F45FB90;
  *(_OWORD *)(v14 + 168) = xmmword_22F45FB90;
  *(_OWORD *)(v14 + 184) = xmmword_22F45FB90;
  *(_OWORD *)(v14 + 200) = xmmword_22F45E110;
  *(_OWORD *)(v14 + 216) = xmmword_22F45FB90;
  *(_OWORD *)(v14 + 232) = xmmword_22F45E250;
  *(_OWORD *)(v14 + 248) = xmmword_22F45FB90;
  *((_QWORD *)v14 + 33) = 6;
  *((_OWORD *)v14 + 17) = xmmword_22F45F9F0;
  *((_OWORD *)v14 + 18) = xmmword_22F45FBB0;
  *((_OWORD *)v14 + 19) = xmmword_22F4604F0;
  *((_OWORD *)v14 + 20) = xmmword_22F4604F0;
  *((_OWORD *)v14 + 21) = xmmword_22F4604F0;
  *((_OWORD *)v14 + 22) = xmmword_22F460500;
  *((_OWORD *)v14 + 23) = xmmword_22F460550;
  *((_OWORD *)v14 + 24) = xmmword_22F460550;
  *((_OWORD *)v14 + 25) = xmmword_22F460550;
  *((_OWORD *)v14 + 26) = xmmword_22F460560;
  *((_OWORD *)v14 + 27) = xmmword_22F4604F0;
  *((_OWORD *)v14 + 28) = xmmword_22F45F9F0;
  *((_OWORD *)v14 + 29) = xmmword_22F45FBB0;
  *((_OWORD *)v14 + 30) = xmmword_22F4604F0;
  *((_OWORD *)v14 + 31) = xmmword_22F4604F0;
  *((_OWORD *)v14 + 32) = xmmword_22F4604F0;
  *((_OWORD *)v14 + 33) = xmmword_22F4604F0;
  *((_QWORD *)v14 + 68) = 4;
  *((_DWORD *)v14 + 8) = 32;
  *((_DWORD *)v14 + 9) = 32;
  llvm::SmallVectorBase<unsigned int>::grow_pod();
  v15 = xmmword_22F45E160;
  *(_OWORD *)(*((_QWORD *)v14 + 3) + 16 * *((unsigned int *)v14 + 8)) = xmmword_22F45E160;
  v16 = *((_DWORD *)v14 + 9);
  v17 = *((_DWORD *)v14 + 8) + 1;
  *((_DWORD *)v14 + 8) = v17;
  if (v17 >= v16)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = xmmword_22F45E160;
    v17 = *((_DWORD *)v14 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v14 + 3) + 16 * v17) = v15;
  v18 = *((_DWORD *)v14 + 9);
  v19 = *((_DWORD *)v14 + 8) + 1;
  *((_DWORD *)v14 + 8) = v19;
  v20 = xmmword_22F45E250;
  if (v19 >= v18)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = xmmword_22F45E160;
    v20 = xmmword_22F45E250;
    v19 = *((_DWORD *)v14 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v14 + 3) + 16 * v19) = v15;
  v21 = *((_DWORD *)v14 + 9);
  v22 = *((_DWORD *)v14 + 8) + 1;
  *((_DWORD *)v14 + 8) = v22;
  if (v22 >= v21)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = xmmword_22F45E250;
    v22 = *((_DWORD *)v14 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v14 + 3) + 16 * v22) = xmmword_22F45E080;
  v23 = *((_DWORD *)v14 + 9);
  v24 = *((_DWORD *)v14 + 8) + 1;
  *((_DWORD *)v14 + 8) = v24;
  if (v24 >= v23)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = xmmword_22F45E250;
    v24 = *((_DWORD *)v14 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v14 + 3) + 16 * v24) = v20;
  v25 = *((_DWORD *)v14 + 9);
  v26 = *((_DWORD *)v14 + 8) + 1;
  *((_DWORD *)v14 + 8) = v26;
  if (v26 >= v25)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = xmmword_22F45E250;
    v26 = *((_DWORD *)v14 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v14 + 3) + 16 * v26) = v20;
  v27 = *((_DWORD *)v14 + 9);
  v28 = *((_DWORD *)v14 + 8) + 1;
  *((_DWORD *)v14 + 8) = v28;
  if (v28 >= v27)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = xmmword_22F45E250;
    v28 = *((_DWORD *)v14 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v14 + 3) + 16 * v28) = v20;
  ++*((_DWORD *)v14 + 8);
  v29 = *(_QWORD *)(a1 + 16);
  v184 = v14 + 24;
  v185 = (std::__shared_weak_count *)v14;
  *(_DWORD *)(a1 + 1856) = sub_22E74761C(v29, (uint64_t)&v184);
  v30 = v185;
  if (v185)
  {
    v31 = (unint64_t *)&v185->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (char *)operator new(0x228uLL);
  *((_QWORD *)v33 + 1) = 0;
  *((_QWORD *)v33 + 2) = 0;
  *(_QWORD *)v33 = &unk_24FA715D0;
  *(_OWORD *)(v33 + 40) = xmmword_22F460570;
  *((_QWORD *)v33 + 3) = v33 + 40;
  *(_OWORD *)(v33 + 56) = xmmword_22F45FB90;
  *(_OWORD *)(v33 + 72) = xmmword_22F45E250;
  *(_OWORD *)(v33 + 88) = xmmword_22F45FB90;
  *(_OWORD *)(v33 + 104) = xmmword_22F45FB90;
  *(_OWORD *)(v33 + 120) = xmmword_22F45FB90;
  *(_OWORD *)(v33 + 136) = xmmword_22F45FB90;
  *(_OWORD *)(v33 + 152) = xmmword_22F45FB90;
  *(_OWORD *)(v33 + 168) = xmmword_22F45FB90;
  *(_OWORD *)(v33 + 184) = xmmword_22F45FB90;
  *(_OWORD *)(v33 + 200) = xmmword_22F45E110;
  *(_OWORD *)(v33 + 216) = xmmword_22F45FB90;
  *(_OWORD *)(v33 + 232) = xmmword_22F45E250;
  *(_OWORD *)(v33 + 248) = xmmword_22F45FB90;
  *((_QWORD *)v33 + 33) = 6;
  *((_OWORD *)v33 + 17) = xmmword_22F45F9F0;
  *((_OWORD *)v33 + 18) = xmmword_22F45FBB0;
  *((_OWORD *)v33 + 19) = xmmword_22F4604F0;
  *((_OWORD *)v33 + 20) = xmmword_22F4604F0;
  *((_OWORD *)v33 + 21) = xmmword_22F4604F0;
  *((_OWORD *)v33 + 22) = xmmword_22F460500;
  *((_OWORD *)v33 + 23) = xmmword_22F460550;
  *((_OWORD *)v33 + 24) = xmmword_22F460550;
  *((_OWORD *)v33 + 25) = xmmword_22F460550;
  *((_OWORD *)v33 + 26) = xmmword_22F460560;
  *((_OWORD *)v33 + 27) = xmmword_22F4604F0;
  *((_OWORD *)v33 + 28) = xmmword_22F45F9F0;
  *((_OWORD *)v33 + 29) = xmmword_22F460580;
  *((_OWORD *)v33 + 30) = xmmword_22F460550;
  *((_OWORD *)v33 + 31) = xmmword_22F460550;
  *((_OWORD *)v33 + 32) = xmmword_22F460550;
  *((_OWORD *)v33 + 33) = xmmword_22F460550;
  *((_QWORD *)v33 + 68) = 2;
  *((_DWORD *)v33 + 8) = 32;
  *((_DWORD *)v33 + 9) = 32;
  llvm::SmallVectorBase<unsigned int>::grow_pod();
  v34 = xmmword_22F45E160;
  *(_OWORD *)(*((_QWORD *)v33 + 3) + 16 * *((unsigned int *)v33 + 8)) = xmmword_22F45E160;
  v35 = *((_DWORD *)v33 + 9);
  v36 = *((_DWORD *)v33 + 8) + 1;
  *((_DWORD *)v33 + 8) = v36;
  if (v36 >= v35)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = xmmword_22F45E160;
    v36 = *((_DWORD *)v33 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v33 + 3) + 16 * v36) = v34;
  v37 = *((_DWORD *)v33 + 9);
  v38 = *((_DWORD *)v33 + 8) + 1;
  *((_DWORD *)v33 + 8) = v38;
  if (v38 >= v37)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = xmmword_22F45E160;
    v38 = *((_DWORD *)v33 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v33 + 3) + 16 * v38) = v34;
  v39 = *((_DWORD *)v33 + 9);
  v40 = *((_DWORD *)v33 + 8) + 1;
  *((_DWORD *)v33 + 8) = v40;
  if (v40 >= v39)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = xmmword_22F45E160;
    v40 = *((_DWORD *)v33 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v33 + 3) + 16 * v40) = v34;
  v41 = *((_DWORD *)v33 + 9);
  v42 = *((_DWORD *)v33 + 8) + 1;
  *((_DWORD *)v33 + 8) = v42;
  if (v42 >= v41)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = xmmword_22F45E160;
    v42 = *((_DWORD *)v33 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v33 + 3) + 16 * v42) = v34;
  v43 = *((_DWORD *)v33 + 9);
  v44 = *((_DWORD *)v33 + 8) + 1;
  *((_DWORD *)v33 + 8) = v44;
  if (v44 >= v43)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v34 = xmmword_22F45E160;
    v44 = *((_DWORD *)v33 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v33 + 3) + 16 * v44) = v34;
  v45 = *((_DWORD *)v33 + 9);
  v46 = *((_DWORD *)v33 + 8) + 1;
  *((_DWORD *)v33 + 8) = v46;
  if (v46 >= v45)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v46 = *((_DWORD *)v33 + 8);
  }
  *(int64x2_t *)(*((_QWORD *)v33 + 3) + 16 * v46) = vdupq_n_s64(2uLL);
  v47 = *((_DWORD *)v33 + 9);
  v48 = *((_DWORD *)v33 + 8) + 1;
  *((_DWORD *)v33 + 8) = v48;
  if (v48 >= v47)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v48 = *((_DWORD *)v33 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v33 + 3) + 16 * v48) = xmmword_22F460590;
  v49 = *((_DWORD *)v33 + 9);
  v50 = *((_DWORD *)v33 + 8) + 1;
  *((_DWORD *)v33 + 8) = v50;
  if (v50 >= v49)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v50 = *((_DWORD *)v33 + 8);
  }
  v51 = xmmword_22F45E250;
  *(_OWORD *)(*((_QWORD *)v33 + 3) + 16 * v50) = xmmword_22F45E250;
  v52 = *((_DWORD *)v33 + 9);
  v53 = *((_DWORD *)v33 + 8) + 1;
  *((_DWORD *)v33 + 8) = v53;
  if (v53 >= v52)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v51 = xmmword_22F45E250;
    v53 = *((_DWORD *)v33 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v33 + 3) + 16 * v53) = v51;
  ++*((_DWORD *)v33 + 8);
  v54 = *(_QWORD *)(a1 + 16);
  v182 = v33 + 24;
  v183 = (std::__shared_weak_count *)v33;
  *(_DWORD *)(a1 + 1840) = sub_22E74761C(v54, (uint64_t)&v182);
  v55 = v183;
  if (v183)
  {
    v56 = (unint64_t *)&v183->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (char *)operator new(0x228uLL);
  *((_QWORD *)v58 + 1) = 0;
  *((_QWORD *)v58 + 2) = 0;
  *(_QWORD *)v58 = &unk_24FA715D0;
  *(_OWORD *)(v58 + 40) = xmmword_22F4605A0;
  *((_QWORD *)v58 + 3) = v58 + 40;
  *(_OWORD *)(v58 + 56) = xmmword_22F45FB90;
  *(_OWORD *)(v58 + 72) = xmmword_22F45E250;
  *(_OWORD *)(v58 + 88) = xmmword_22F45FB90;
  *(_OWORD *)(v58 + 104) = xmmword_22F45FB90;
  *(_OWORD *)(v58 + 120) = xmmword_22F45FB90;
  *(_OWORD *)(v58 + 136) = xmmword_22F45FB90;
  *(_OWORD *)(v58 + 152) = xmmword_22F45FB90;
  *(_OWORD *)(v58 + 168) = xmmword_22F45FB90;
  *(_OWORD *)(v58 + 184) = xmmword_22F45FB90;
  *(_OWORD *)(v58 + 200) = xmmword_22F45E110;
  *(_OWORD *)(v58 + 216) = xmmword_22F45FB90;
  *(_OWORD *)(v58 + 232) = xmmword_22F45E250;
  *(_OWORD *)(v58 + 248) = xmmword_22F45FB90;
  *((_QWORD *)v58 + 33) = 6;
  *((_OWORD *)v58 + 17) = xmmword_22F45F9F0;
  *((_OWORD *)v58 + 18) = xmmword_22F45FBB0;
  *((_OWORD *)v58 + 19) = xmmword_22F4604F0;
  *((_OWORD *)v58 + 20) = xmmword_22F45F9F0;
  *((_OWORD *)v58 + 21) = xmmword_22F45FBB0;
  *((_OWORD *)v58 + 22) = xmmword_22F45F9F0;
  *((_OWORD *)v58 + 23) = xmmword_22F460520;
  *((_OWORD *)v58 + 24) = xmmword_22F460520;
  *((_OWORD *)v58 + 25) = xmmword_22F460580;
  *((_OWORD *)v58 + 26) = xmmword_22F460510;
  *((_OWORD *)v58 + 27) = xmmword_22F460520;
  *((_OWORD *)v58 + 28) = xmmword_22F460520;
  *((_OWORD *)v58 + 29) = xmmword_22F460580;
  *((_OWORD *)v58 + 30) = xmmword_22F460510;
  *((_OWORD *)v58 + 31) = xmmword_22F45FBB0;
  *((_OWORD *)v58 + 32) = xmmword_22F45F9F0;
  *((_OWORD *)v58 + 33) = xmmword_22F460520;
  *((_QWORD *)v58 + 68) = 255;
  *((_DWORD *)v58 + 8) = 32;
  *((_DWORD *)v58 + 9) = 32;
  llvm::SmallVectorBase<unsigned int>::grow_pod();
  v59 = xmmword_22F45FB90;
  *(_OWORD *)(*((_QWORD *)v58 + 3) + 16 * *((unsigned int *)v58 + 8)) = xmmword_22F45FB90;
  v60 = *((_DWORD *)v58 + 9);
  v61 = *((_DWORD *)v58 + 8) + 1;
  *((_DWORD *)v58 + 8) = v61;
  if (v61 >= v60)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v59 = xmmword_22F45FB90;
    v61 = *((_DWORD *)v58 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v58 + 3) + 16 * v61) = v59;
  v62 = *((_DWORD *)v58 + 9);
  v63 = *((_DWORD *)v58 + 8) + 1;
  *((_DWORD *)v58 + 8) = v63;
  if (v63 >= v62)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v63 = *((_DWORD *)v58 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v58 + 3) + 16 * v63) = xmmword_22F4605B0;
  v64 = *((_DWORD *)v58 + 9);
  v65 = *((_DWORD *)v58 + 8) + 1;
  *((_DWORD *)v58 + 8) = v65;
  if (v65 >= v64)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v65 = *((_DWORD *)v58 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v58 + 3) + 16 * v65) = xmmword_22F45E250;
  ++*((_DWORD *)v58 + 8);
  v66 = *(_QWORD *)(a1 + 16);
  v180 = v58 + 24;
  v181 = (std::__shared_weak_count *)v58;
  *(_DWORD *)(a1 + 1824) = sub_22E74761C(v66, (uint64_t)&v180);
  v67 = v181;
  if (v181)
  {
    v68 = (unint64_t *)&v181->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (char *)operator new(0x228uLL);
  *((_QWORD *)v70 + 1) = 0;
  *((_QWORD *)v70 + 2) = 0;
  *(_QWORD *)v70 = &unk_24FA715D0;
  *(int64x2_t *)(v70 + 200) = vdupq_n_s64(2uLL);
  *((int64x2_t *)v70 + 21) = vdupq_n_s64(6uLL);
  *(_OWORD *)(v70 + 56) = xmmword_22F45FB90;
  *(_OWORD *)(v70 + 72) = xmmword_22F45E250;
  *(_OWORD *)(v70 + 88) = xmmword_22F45FB90;
  *(_OWORD *)(v70 + 104) = xmmword_22F45FB90;
  *(_OWORD *)(v70 + 120) = xmmword_22F45FB90;
  *(_OWORD *)(v70 + 136) = xmmword_22F45FB90;
  *(_OWORD *)(v70 + 152) = xmmword_22F45E160;
  *(_OWORD *)(v70 + 168) = xmmword_22F45E160;
  *(_OWORD *)(v70 + 184) = xmmword_22F45FB90;
  *(_OWORD *)(v70 + 216) = xmmword_22F45FB90;
  *(_OWORD *)(v70 + 232) = xmmword_22F45E250;
  *(_OWORD *)(v70 + 248) = xmmword_22F45FB90;
  *((_QWORD *)v70 + 33) = 6;
  *((_OWORD *)v70 + 17) = xmmword_22F45F9F0;
  *((_OWORD *)v70 + 18) = xmmword_22F45FBB0;
  *((_OWORD *)v70 + 19) = xmmword_22F4604F0;
  *((_OWORD *)v70 + 20) = xmmword_22F45F9F0;
  *((_QWORD *)v70 + 44) = 4;
  *((_DWORD *)v70 + 8) = 20;
  *((_DWORD *)v70 + 9) = 32;
  v179 = (std::__shared_weak_count *)v70;
  *(_OWORD *)(v70 + 40) = xmmword_22F4605C0;
  *((_QWORD *)v70 + 3) = v70 + 40;
  v71 = v70 + 24;
  *(_OWORD *)(v70 + 360) = 0u;
  *(_OWORD *)(v70 + 376) = 0u;
  *(_OWORD *)(v70 + 392) = 0u;
  *(_OWORD *)(v70 + 408) = 0u;
  *(_OWORD *)(v70 + 424) = 0u;
  *(_OWORD *)(v70 + 440) = 0u;
  *(_OWORD *)(v70 + 456) = 0u;
  *(_OWORD *)(v70 + 472) = 0u;
  *(_OWORD *)(v70 + 488) = 0u;
  *(_OWORD *)(v70 + 504) = 0u;
  *(_OWORD *)(v70 + 520) = 0u;
  *(_OWORD *)(v70 + 536) = 0u;
  v72 = *(_QWORD *)(a1 + 16);
  v178 = v71;
  *(_DWORD *)(a1 + 1844) = sub_22E74761C(v72, (uint64_t)&v178);
  v73 = v179;
  if (v179)
  {
    v74 = (unint64_t *)&v179->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (char *)operator new(0x228uLL);
  *((_QWORD *)v76 + 1) = 0;
  *((_QWORD *)v76 + 2) = 0;
  *(_OWORD *)(v76 + 40) = xmmword_22F4605D0;
  *((_QWORD *)v76 + 3) = v76 + 40;
  *(_QWORD *)v76 = &unk_24FA715D0;
  *(_OWORD *)(v76 + 56) = xmmword_22F45FB90;
  *(_OWORD *)(v76 + 72) = xmmword_22F45E250;
  *(_OWORD *)(v76 + 88) = xmmword_22F45FB90;
  *(_OWORD *)(v76 + 104) = xmmword_22F45FB90;
  *(_OWORD *)(v76 + 120) = xmmword_22F45FB90;
  *(_OWORD *)(v76 + 136) = xmmword_22F45FB90;
  *(_OWORD *)(v76 + 152) = xmmword_22F45FB90;
  *(_OWORD *)(v76 + 168) = xmmword_22F45FB90;
  *(_OWORD *)(v76 + 184) = xmmword_22F45FB90;
  *(_OWORD *)(v76 + 200) = xmmword_22F45E110;
  *(_OWORD *)(v76 + 216) = xmmword_22F45FB90;
  *(_OWORD *)(v76 + 232) = xmmword_22F45E250;
  *(_OWORD *)(v76 + 248) = xmmword_22F45FB90;
  *((_QWORD *)v76 + 33) = 6;
  *((_OWORD *)v76 + 17) = xmmword_22F45F9F0;
  *((_OWORD *)v76 + 18) = xmmword_22F45FBB0;
  *((_OWORD *)v76 + 19) = xmmword_22F4604F0;
  *((_OWORD *)v76 + 20) = xmmword_22F45F9F0;
  *((_OWORD *)v76 + 21) = xmmword_22F45FBB0;
  *((_OWORD *)v76 + 22) = xmmword_22F4605E0;
  v77 = vdupq_n_s64(2uLL);
  *((int64x2_t *)v76 + 23) = v77;
  *((int64x2_t *)v76 + 24) = v77;
  *((_OWORD *)v76 + 25) = xmmword_22F460550;
  *((_OWORD *)v76 + 26) = xmmword_22F460550;
  *((_OWORD *)v76 + 27) = xmmword_22F460550;
  *((_OWORD *)v76 + 28) = xmmword_22F460550;
  *((_OWORD *)v76 + 29) = xmmword_22F460550;
  *((_OWORD *)v76 + 30) = xmmword_22F460550;
  *((_OWORD *)v76 + 31) = xmmword_22F460510;
  *((_OWORD *)v76 + 32) = xmmword_22F460520;
  *((_OWORD *)v76 + 33) = xmmword_22F460520;
  *((_QWORD *)v76 + 68) = 255;
  *((_DWORD *)v76 + 8) = 32;
  *((_DWORD *)v76 + 9) = 32;
  llvm::SmallVectorBase<unsigned int>::grow_pod();
  v78 = xmmword_22F45FB90;
  *(_OWORD *)(*((_QWORD *)v76 + 3) + 16 * *((unsigned int *)v76 + 8)) = xmmword_22F45FB90;
  v79 = *((_DWORD *)v76 + 9);
  v80 = *((_DWORD *)v76 + 8) + 1;
  *((_DWORD *)v76 + 8) = v80;
  if (v80 >= v79)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v78 = xmmword_22F45FB90;
    v80 = *((_DWORD *)v76 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v76 + 3) + 16 * v80) = v78;
  v81 = *((_DWORD *)v76 + 9);
  v82 = *((_DWORD *)v76 + 8) + 1;
  *((_DWORD *)v76 + 8) = v82;
  if (v82 >= v81)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v78 = xmmword_22F45FB90;
    v82 = *((_DWORD *)v76 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v76 + 3) + 16 * v82) = v78;
  v83 = *((_DWORD *)v76 + 9);
  v84 = *((_DWORD *)v76 + 8) + 1;
  *((_DWORD *)v76 + 8) = v84;
  if (v84 >= v83)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v78 = xmmword_22F45FB90;
    v84 = *((_DWORD *)v76 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v76 + 3) + 16 * v84) = v78;
  v85 = *((_DWORD *)v76 + 9);
  v86 = *((_DWORD *)v76 + 8) + 1;
  *((_DWORD *)v76 + 8) = v86;
  if (v86 >= v85)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v86 = *((_DWORD *)v76 + 8);
  }
  v87 = xmmword_22F45E0A0;
  *(_OWORD *)(*((_QWORD *)v76 + 3) + 16 * v86) = xmmword_22F45E0A0;
  v88 = *((_DWORD *)v76 + 9);
  v89 = *((_DWORD *)v76 + 8) + 1;
  *((_DWORD *)v76 + 8) = v89;
  if (v89 >= v88)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v87 = xmmword_22F45E0A0;
    v89 = *((_DWORD *)v76 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v76 + 3) + 16 * v89) = v87;
  v90 = *((_DWORD *)v76 + 9);
  v91 = *((_DWORD *)v76 + 8) + 1;
  *((_DWORD *)v76 + 8) = v91;
  if (v91 >= v90)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v91 = *((_DWORD *)v76 + 8);
  }
  *(int64x2_t *)(*((_QWORD *)v76 + 3) + 16 * v91) = vdupq_n_s64(2uLL);
  v92 = *((_DWORD *)v76 + 9);
  v93 = *((_DWORD *)v76 + 8) + 1;
  *((_DWORD *)v76 + 8) = v93;
  if (v93 >= v92)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v93 = *((_DWORD *)v76 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v76 + 3) + 16 * v93) = xmmword_22F4605B0;
  v94 = *((_DWORD *)v76 + 9);
  v95 = *((_DWORD *)v76 + 8) + 1;
  *((_DWORD *)v76 + 8) = v95;
  if (v95 >= v94)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v95 = *((_DWORD *)v76 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v76 + 3) + 16 * v95) = xmmword_22F45E250;
  ++*((_DWORD *)v76 + 8);
  v96 = *(_QWORD *)(a1 + 16);
  v176 = v76 + 24;
  v177 = (std::__shared_weak_count *)v76;
  *(_DWORD *)(a1 + 1848) = sub_22E74761C(v96, (uint64_t)&v176);
  v97 = v177;
  if (v177)
  {
    v98 = (unint64_t *)&v177->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = (char *)operator new(0x228uLL);
  *((_QWORD *)v100 + 1) = 0;
  *((_QWORD *)v100 + 2) = 0;
  *(_QWORD *)v100 = &unk_24FA715D0;
  *(_OWORD *)(v100 + 40) = xmmword_22F4605F0;
  *((_QWORD *)v100 + 3) = v100 + 40;
  *(_OWORD *)(v100 + 56) = xmmword_22F45FB90;
  *(_OWORD *)(v100 + 72) = xmmword_22F45E250;
  *(_OWORD *)(v100 + 88) = xmmword_22F45FB90;
  *(_OWORD *)(v100 + 104) = xmmword_22F45FB90;
  *(_OWORD *)(v100 + 120) = xmmword_22F45FB90;
  *(_OWORD *)(v100 + 136) = xmmword_22F45E160;
  *(_OWORD *)(v100 + 152) = xmmword_22F45E160;
  *(_OWORD *)(v100 + 168) = xmmword_22F45E160;
  *(_OWORD *)(v100 + 184) = xmmword_22F45FB90;
  *(int64x2_t *)(v100 + 200) = vdupq_n_s64(2uLL);
  *(_OWORD *)(v100 + 216) = xmmword_22F45E160;
  *(_OWORD *)(v100 + 232) = xmmword_22F45E250;
  *(_OWORD *)(v100 + 248) = xmmword_22F45FB90;
  *((_QWORD *)v100 + 33) = 6;
  *((_OWORD *)v100 + 17) = xmmword_22F45F9F0;
  *((_OWORD *)v100 + 18) = xmmword_22F45FBB0;
  *((_OWORD *)v100 + 19) = xmmword_22F4604F0;
  *((_OWORD *)v100 + 20) = xmmword_22F45F9F0;
  *((_OWORD *)v100 + 21) = xmmword_22F45FBB0;
  *((_OWORD *)v100 + 22) = xmmword_22F460600;
  *((_OWORD *)v100 + 23) = xmmword_22F4555B0;
  *((_OWORD *)v100 + 24) = xmmword_22F460550;
  *((_OWORD *)v100 + 25) = xmmword_22F460550;
  *((_OWORD *)v100 + 26) = xmmword_22F460550;
  *((_OWORD *)v100 + 27) = xmmword_22F460550;
  *((_OWORD *)v100 + 28) = xmmword_22F460510;
  *((_OWORD *)v100 + 29) = xmmword_22F460580;
  *((_OWORD *)v100 + 30) = xmmword_22F460580;
  *((_OWORD *)v100 + 31) = xmmword_22F460550;
  *((_OWORD *)v100 + 32) = xmmword_22F460550;
  *((_OWORD *)v100 + 33) = xmmword_22F460550;
  *((_QWORD *)v100 + 68) = 2;
  *((_DWORD *)v100 + 8) = 32;
  *((_DWORD *)v100 + 9) = 32;
  llvm::SmallVectorBase<unsigned int>::grow_pod();
  v101 = xmmword_22F45E160;
  *(_OWORD *)(*((_QWORD *)v100 + 3) + 16 * *((unsigned int *)v100 + 8)) = xmmword_22F45E160;
  v102 = *((_DWORD *)v100 + 9);
  v103 = *((_DWORD *)v100 + 8) + 1;
  *((_DWORD *)v100 + 8) = v103;
  if (v103 >= v102)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v101 = xmmword_22F45E160;
    v103 = *((_DWORD *)v100 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v100 + 3) + 16 * v103) = v101;
  v104 = *((_DWORD *)v100 + 9);
  v105 = *((_DWORD *)v100 + 8) + 1;
  *((_DWORD *)v100 + 8) = v105;
  if (v105 >= v104)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v101 = xmmword_22F45E160;
    v105 = *((_DWORD *)v100 + 8);
  }
  *(int64x2_t *)(*((_QWORD *)v100 + 3) + 16 * v105) = vdupq_n_s64(2uLL);
  v106 = *((_DWORD *)v100 + 9);
  v107 = *((_DWORD *)v100 + 8) + 1;
  *((_DWORD *)v100 + 8) = v107;
  if (v107 >= v106)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v101 = xmmword_22F45E160;
    v107 = *((_DWORD *)v100 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v100 + 3) + 16 * v107) = v101;
  v108 = *((_DWORD *)v100 + 9);
  v109 = *((_DWORD *)v100 + 8) + 1;
  *((_DWORD *)v100 + 8) = v109;
  if (v109 >= v108)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v101 = xmmword_22F45E160;
    v109 = *((_DWORD *)v100 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v100 + 3) + 16 * v109) = v101;
  v110 = *((_DWORD *)v100 + 9);
  v111 = *((_DWORD *)v100 + 8) + 1;
  *((_DWORD *)v100 + 8) = v111;
  if (v111 >= v110)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v101 = xmmword_22F45E160;
    v111 = *((_DWORD *)v100 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v100 + 3) + 16 * v111) = v101;
  v112 = *((_DWORD *)v100 + 9);
  v113 = *((_DWORD *)v100 + 8) + 1;
  *((_DWORD *)v100 + 8) = v113;
  if (v113 >= v112)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v101 = xmmword_22F45E160;
    v113 = *((_DWORD *)v100 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v100 + 3) + 16 * v113) = v101;
  v114 = *((_DWORD *)v100 + 9);
  v115 = *((_DWORD *)v100 + 8) + 1;
  *((_DWORD *)v100 + 8) = v115;
  if (v115 >= v114)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v115 = *((_DWORD *)v100 + 8);
  }
  v116 = xmmword_22F45E0A0;
  *(_OWORD *)(*((_QWORD *)v100 + 3) + 16 * v115) = xmmword_22F45E0A0;
  v117 = *((_DWORD *)v100 + 9);
  v118 = *((_DWORD *)v100 + 8) + 1;
  *((_DWORD *)v100 + 8) = v118;
  if (v118 >= v117)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v116 = xmmword_22F45E0A0;
    v118 = *((_DWORD *)v100 + 8);
  }
  v119 = xmmword_22F45E250;
  *(_OWORD *)(*((_QWORD *)v100 + 3) + 16 * v118) = xmmword_22F45E250;
  v120 = *((_DWORD *)v100 + 9);
  v121 = *((_DWORD *)v100 + 8) + 1;
  *((_DWORD *)v100 + 8) = v121;
  if (v121 >= v120)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v116 = xmmword_22F45E0A0;
    v119 = xmmword_22F45E250;
    v121 = *((_DWORD *)v100 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v100 + 3) + 16 * v121) = xmmword_22F45E080;
  v122 = *((_DWORD *)v100 + 9);
  v123 = *((_DWORD *)v100 + 8) + 1;
  *((_DWORD *)v100 + 8) = v123;
  if (v123 >= v122)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v116 = xmmword_22F45E0A0;
    v119 = xmmword_22F45E250;
    v123 = *((_DWORD *)v100 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v100 + 3) + 16 * v123) = v116;
  v124 = *((_DWORD *)v100 + 9);
  v125 = *((_DWORD *)v100 + 8) + 1;
  *((_DWORD *)v100 + 8) = v125;
  if (v125 >= v124)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v119 = xmmword_22F45E250;
    v125 = *((_DWORD *)v100 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v100 + 3) + 16 * v125) = xmmword_22F4605B0;
  v126 = *((_DWORD *)v100 + 9);
  v127 = *((_DWORD *)v100 + 8) + 1;
  *((_DWORD *)v100 + 8) = v127;
  if (v127 >= v126)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v119 = xmmword_22F45E250;
    v127 = *((_DWORD *)v100 + 8);
  }
  *(_OWORD *)(*((_QWORD *)v100 + 3) + 16 * v127) = v119;
  ++*((_DWORD *)v100 + 8);
  v128 = *(_QWORD *)(a1 + 16);
  v174 = v100 + 24;
  v175 = (std::__shared_weak_count *)v100;
  *(_DWORD *)(a1 + 1864) = sub_22E74761C(v128, (uint64_t)&v174);
  v129 = v175;
  if (v175)
  {
    v130 = (unint64_t *)&v175->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (char *)operator new(0x228uLL);
  *(_QWORD *)v132 = &unk_24FA715D0;
  *((_QWORD *)v132 + 1) = 0;
  *(_OWORD *)(v132 + 312) = 0u;
  *(_OWORD *)(v132 + 328) = 0u;
  *(_OWORD *)(v132 + 344) = 0u;
  *(_OWORD *)(v132 + 360) = 0u;
  *(_OWORD *)(v132 + 376) = 0u;
  *(_OWORD *)(v132 + 392) = 0u;
  *(_OWORD *)(v132 + 408) = 0u;
  *(_OWORD *)(v132 + 424) = 0u;
  *(_OWORD *)(v132 + 440) = 0u;
  *(_OWORD *)(v132 + 456) = 0u;
  *(_OWORD *)(v132 + 472) = 0u;
  *(_OWORD *)(v132 + 488) = 0u;
  *(_OWORD *)(v132 + 504) = 0u;
  *(_OWORD *)(v132 + 520) = 0u;
  *(_OWORD *)(v132 + 536) = 0u;
  *(_OWORD *)(v132 + 40) = xmmword_22F460610;
  *((_QWORD *)v132 + 2) = 0;
  *((_QWORD *)v132 + 3) = v132 + 40;
  *(_OWORD *)(v132 + 56) = xmmword_22F45E250;
  *(_OWORD *)(v132 + 72) = xmmword_22F45E160;
  *(_OWORD *)(v132 + 88) = xmmword_22F45E160;
  *(_OWORD *)(v132 + 104) = xmmword_22F45E160;
  *(_OWORD *)(v132 + 120) = xmmword_22F45E160;
  *(_OWORD *)(v132 + 136) = xmmword_22F45E160;
  *(_OWORD *)(v132 + 152) = xmmword_22F45E0A0;
  *(_OWORD *)(v132 + 168) = xmmword_22F45E0A0;
  *(_OWORD *)(v132 + 184) = xmmword_22F45E160;
  *(_OWORD *)(v132 + 200) = xmmword_22F45E160;
  *(_OWORD *)(v132 + 216) = xmmword_22F45E160;
  *(_OWORD *)(v132 + 232) = xmmword_22F45E160;
  *(_OWORD *)(v132 + 248) = xmmword_22F45FB90;
  *((_QWORD *)v132 + 33) = 0;
  v133 = *(_QWORD *)(a1 + 16);
  *((_OWORD *)v132 + 17) = xmmword_22F45FBB0;
  *((_OWORD *)v132 + 18) = xmmword_22F4604F0;
  *((_QWORD *)v132 + 38) = 4;
  *((_DWORD *)v132 + 8) = 17;
  *((_DWORD *)v132 + 9) = 32;
  v172 = v132 + 24;
  v173 = (std::__shared_weak_count *)v132;
  *(_DWORD *)(a1 + 1868) = sub_22E74761C(v133, (uint64_t)&v172);
  v134 = v173;
  if (v173)
  {
    v135 = (unint64_t *)&v173->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = (char *)operator new(0x228uLL);
  *(_QWORD *)v137 = &unk_24FA715D0;
  *((_QWORD *)v137 + 1) = 0;
  *(_OWORD *)(v137 + 232) = 0u;
  *(_OWORD *)(v137 + 248) = 0u;
  *(_OWORD *)(v137 + 264) = 0u;
  *(_OWORD *)(v137 + 280) = 0u;
  *(_OWORD *)(v137 + 296) = 0u;
  *(_OWORD *)(v137 + 312) = 0u;
  *(_OWORD *)(v137 + 328) = 0u;
  *(_OWORD *)(v137 + 344) = 0u;
  *(_OWORD *)(v137 + 360) = 0u;
  *(_OWORD *)(v137 + 376) = 0u;
  *(_OWORD *)(v137 + 392) = 0u;
  *(_OWORD *)(v137 + 408) = 0u;
  *(_OWORD *)(v137 + 424) = 0u;
  *(_OWORD *)(v137 + 440) = 0u;
  *(_OWORD *)(v137 + 456) = 0u;
  *(_OWORD *)(v137 + 472) = 0u;
  *(_OWORD *)(v137 + 488) = 0u;
  *(_OWORD *)(v137 + 504) = 0u;
  *(_OWORD *)(v137 + 520) = 0u;
  *(_OWORD *)(v137 + 536) = 0u;
  *(_OWORD *)(v137 + 40) = xmmword_22F460620;
  *((_QWORD *)v137 + 2) = 0;
  *((_QWORD *)v137 + 3) = v137 + 40;
  *(_OWORD *)(v137 + 56) = xmmword_22F45E250;
  *(_OWORD *)(v137 + 72) = xmmword_22F45E160;
  *(_OWORD *)(v137 + 88) = xmmword_22F45E160;
  *(_OWORD *)(v137 + 104) = xmmword_22F45E160;
  *(_OWORD *)(v137 + 120) = xmmword_22F45E160;
  *(_OWORD *)(v137 + 136) = xmmword_22F45E160;
  *(_OWORD *)(v137 + 152) = xmmword_22F45E0A0;
  *(_OWORD *)(v137 + 168) = xmmword_22F45E0A0;
  *(_OWORD *)(v137 + 184) = xmmword_22F45E250;
  *(_OWORD *)(v137 + 200) = xmmword_22F460630;
  v138 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(v137 + 216) = xmmword_22F45E250;
  *((_QWORD *)v137 + 4) = 0x200000000CLL;
  v170 = v137 + 24;
  v171 = (std::__shared_weak_count *)v137;
  *(_DWORD *)(a1 + 1876) = sub_22E74761C(v138, (uint64_t)&v170);
  v139 = v171;
  if (v171)
  {
    v140 = (unint64_t *)&v171->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  v142 = (char *)operator new(0x228uLL);
  *(_QWORD *)v142 = &unk_24FA715D0;
  *((_QWORD *)v142 + 1) = 0;
  *(_OWORD *)(v142 + 232) = 0u;
  *(_OWORD *)(v142 + 248) = 0u;
  *(_OWORD *)(v142 + 264) = 0u;
  *(_OWORD *)(v142 + 280) = 0u;
  *(_OWORD *)(v142 + 296) = 0u;
  *(_OWORD *)(v142 + 312) = 0u;
  *(_OWORD *)(v142 + 328) = 0u;
  *(_OWORD *)(v142 + 344) = 0u;
  *(_OWORD *)(v142 + 360) = 0u;
  *(_OWORD *)(v142 + 376) = 0u;
  *(_OWORD *)(v142 + 392) = 0u;
  *(_OWORD *)(v142 + 408) = 0u;
  *(_OWORD *)(v142 + 424) = 0u;
  *(_OWORD *)(v142 + 440) = 0u;
  *(_OWORD *)(v142 + 456) = 0u;
  *(_OWORD *)(v142 + 472) = 0u;
  *(_OWORD *)(v142 + 488) = 0u;
  *(_OWORD *)(v142 + 504) = 0u;
  *(_OWORD *)(v142 + 40) = xmmword_22F460640;
  *(_OWORD *)(v142 + 520) = 0u;
  *(_OWORD *)(v142 + 536) = 0u;
  *((_QWORD *)v142 + 2) = 0;
  *((_QWORD *)v142 + 3) = v142 + 40;
  *(_OWORD *)(v142 + 56) = xmmword_22F45E250;
  *(_OWORD *)(v142 + 72) = xmmword_22F45E160;
  *(_OWORD *)(v142 + 88) = xmmword_22F45E160;
  *(_OWORD *)(v142 + 104) = xmmword_22F45E160;
  *(_OWORD *)(v142 + 120) = xmmword_22F45E160;
  *(_OWORD *)(v142 + 136) = xmmword_22F45E160;
  *(_OWORD *)(v142 + 152) = xmmword_22F45E0A0;
  *(_OWORD *)(v142 + 168) = xmmword_22F45E0A0;
  *(_OWORD *)(v142 + 184) = xmmword_22F45E250;
  *(_OWORD *)(v142 + 200) = xmmword_22F45E250;
  v143 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(v142 + 216) = xmmword_22F45E0A0;
  *((_QWORD *)v142 + 4) = 0x200000000CLL;
  v168 = v142 + 24;
  v169 = (std::__shared_weak_count *)v142;
  *(_DWORD *)(a1 + 1872) = sub_22E74761C(v143, (uint64_t)&v168);
  v144 = v169;
  if (v169)
  {
    v145 = (unint64_t *)&v169->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = (char *)operator new(0x228uLL);
  *(_QWORD *)v147 = &unk_24FA715D0;
  *((_QWORD *)v147 + 1) = 0;
  *(_OWORD *)(v147 + 248) = 0u;
  *(_OWORD *)(v147 + 264) = 0u;
  *(_OWORD *)(v147 + 280) = 0u;
  *(_OWORD *)(v147 + 296) = 0u;
  *(_OWORD *)(v147 + 312) = 0u;
  *(_OWORD *)(v147 + 328) = 0u;
  *(_OWORD *)(v147 + 344) = 0u;
  *(_OWORD *)(v147 + 360) = 0u;
  *(_OWORD *)(v147 + 376) = 0u;
  *(_OWORD *)(v147 + 392) = 0u;
  *(_OWORD *)(v147 + 408) = 0u;
  *(_OWORD *)(v147 + 424) = 0u;
  *(_OWORD *)(v147 + 440) = 0u;
  *(_OWORD *)(v147 + 456) = 0u;
  *(_OWORD *)(v147 + 472) = 0u;
  *(_OWORD *)(v147 + 488) = 0u;
  *(_OWORD *)(v147 + 504) = 0u;
  *(_OWORD *)(v147 + 520) = 0u;
  *(_OWORD *)(v147 + 536) = 0u;
  *(_OWORD *)(v147 + 40) = xmmword_22F460650;
  *((_QWORD *)v147 + 2) = 0;
  *((_QWORD *)v147 + 3) = v147 + 40;
  *(_OWORD *)(v147 + 56) = xmmword_22F45E250;
  *(_OWORD *)(v147 + 72) = xmmword_22F45E160;
  *(_OWORD *)(v147 + 88) = xmmword_22F45E160;
  *(_OWORD *)(v147 + 104) = xmmword_22F45E160;
  *(_OWORD *)(v147 + 120) = xmmword_22F45E160;
  *(_OWORD *)(v147 + 136) = xmmword_22F45E160;
  *(_OWORD *)(v147 + 152) = xmmword_22F45E0A0;
  *(_OWORD *)(v147 + 168) = xmmword_22F45E0A0;
  *(_OWORD *)(v147 + 184) = xmmword_22F45FB90;
  *(_OWORD *)(v147 + 200) = xmmword_22F45E160;
  *(_OWORD *)(v147 + 216) = xmmword_22F460660;
  v148 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(v147 + 232) = xmmword_22F45E160;
  *((_QWORD *)v147 + 4) = 0x200000000DLL;
  v166 = v147 + 24;
  v167 = (std::__shared_weak_count *)v147;
  *(_DWORD *)(a1 + 1880) = sub_22E74761C(v148, (uint64_t)&v166);
  v149 = v167;
  if (v167)
  {
    v150 = (unint64_t *)&v167->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  v152 = (char *)operator new(0x228uLL);
  *(_QWORD *)v152 = &unk_24FA715D0;
  *((_QWORD *)v152 + 1) = 0;
  *(_OWORD *)(v152 + 72) = 0u;
  *(_OWORD *)(v152 + 88) = 0u;
  *(_OWORD *)(v152 + 104) = 0u;
  *(_OWORD *)(v152 + 120) = 0u;
  *(_OWORD *)(v152 + 136) = 0u;
  *(_OWORD *)(v152 + 152) = 0u;
  *(_OWORD *)(v152 + 168) = 0u;
  *(_OWORD *)(v152 + 184) = 0u;
  *(_OWORD *)(v152 + 200) = 0u;
  *(_OWORD *)(v152 + 216) = 0u;
  *(_OWORD *)(v152 + 232) = 0u;
  *(_OWORD *)(v152 + 248) = 0u;
  *(_OWORD *)(v152 + 264) = 0u;
  *(_OWORD *)(v152 + 280) = 0u;
  *(_OWORD *)(v152 + 296) = 0u;
  *(_OWORD *)(v152 + 312) = 0u;
  *(_OWORD *)(v152 + 328) = 0u;
  *(_OWORD *)(v152 + 344) = 0u;
  *(_OWORD *)(v152 + 360) = 0u;
  *(_OWORD *)(v152 + 376) = 0u;
  *(_OWORD *)(v152 + 392) = 0u;
  *(_OWORD *)(v152 + 408) = 0u;
  *(_OWORD *)(v152 + 424) = 0u;
  *(_OWORD *)(v152 + 440) = 0u;
  *(_OWORD *)(v152 + 456) = 0u;
  *(_OWORD *)(v152 + 472) = 0u;
  *(_OWORD *)(v152 + 488) = 0u;
  *(_OWORD *)(v152 + 504) = 0u;
  *(_OWORD *)(v152 + 40) = xmmword_22F460670;
  *(_OWORD *)(v152 + 520) = 0u;
  *(_OWORD *)(v152 + 536) = 0u;
  *((_QWORD *)v152 + 2) = 0;
  *((_QWORD *)v152 + 3) = v152 + 40;
  *(_OWORD *)(v152 + 56) = xmmword_22F45E0D0;
  *((_QWORD *)v152 + 4) = 0x2000000002;
  v153 = *(_QWORD *)(a1 + 16);
  v164 = v152 + 24;
  v165 = (std::__shared_weak_count *)v152;
  *(_DWORD *)(a1 + 1828) = sub_22E74761C(v153, (uint64_t)&v164);
  v154 = v165;
  if (v165)
  {
    v155 = (unint64_t *)&v165->__shared_owners_;
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
    }
  }
  v157 = (char *)operator new(0x228uLL);
  *(_QWORD *)v157 = &unk_24FA715D0;
  *((_QWORD *)v157 + 1) = 0;
  *(_OWORD *)(v157 + 72) = 0u;
  *(_OWORD *)(v157 + 88) = 0u;
  *(_OWORD *)(v157 + 104) = 0u;
  *(_OWORD *)(v157 + 120) = 0u;
  *(_OWORD *)(v157 + 136) = 0u;
  *(_OWORD *)(v157 + 152) = 0u;
  *(_OWORD *)(v157 + 168) = 0u;
  *(_OWORD *)(v157 + 184) = 0u;
  *(_OWORD *)(v157 + 200) = 0u;
  *(_OWORD *)(v157 + 216) = 0u;
  *(_OWORD *)(v157 + 232) = 0u;
  *(_OWORD *)(v157 + 248) = 0u;
  *(_OWORD *)(v157 + 264) = 0u;
  *(_OWORD *)(v157 + 280) = 0u;
  *(_OWORD *)(v157 + 296) = 0u;
  *(_OWORD *)(v157 + 312) = 0u;
  *(_OWORD *)(v157 + 328) = 0u;
  *(_OWORD *)(v157 + 344) = 0u;
  *(_OWORD *)(v157 + 360) = 0u;
  *(_OWORD *)(v157 + 376) = 0u;
  *(_OWORD *)(v157 + 392) = 0u;
  *(_OWORD *)(v157 + 408) = 0u;
  *(_OWORD *)(v157 + 424) = 0u;
  *(_OWORD *)(v157 + 440) = 0u;
  *(_OWORD *)(v157 + 456) = 0u;
  *(_OWORD *)(v157 + 472) = 0u;
  *(_OWORD *)(v157 + 488) = 0u;
  *(_OWORD *)(v157 + 504) = 0u;
  *(_OWORD *)(v157 + 520) = 0u;
  *(_OWORD *)(v157 + 536) = 0u;
  *(_OWORD *)(v157 + 40) = xmmword_22F460680;
  *((_QWORD *)v157 + 2) = 0;
  *((_QWORD *)v157 + 3) = v157 + 40;
  *(_OWORD *)(v157 + 56) = xmmword_22F45E0D0;
  *((_QWORD *)v157 + 4) = 0x2000000002;
  v158 = *(_QWORD *)(a1 + 16);
  v162 = v157 + 24;
  v163 = (std::__shared_weak_count *)v157;
  *(_DWORD *)(a1 + 1832) = sub_22E74761C(v158, (uint64_t)&v162);
  v159 = v163;
  if (v163)
  {
    v160 = (unint64_t *)&v163->__shared_owners_;
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 - 1, v160));
    if (!v161)
    {
      ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
      std::__shared_weak_count::__release_weak(v159);
    }
  }
}

void sub_22E7FB90C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  void **v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  _DWORD *v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  uint64_t v62;
  unsigned int *v63;
  char *v64;
  unsigned int v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD v68[5];
  int v69;
  const char *v70;
  unint64_t v71;
  const char *v72;
  __int16 v73;
  uint64_t v74[4];
  __int16 v75;
  char v76[40];
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  void **v80;
  void *v81;
  uint64_t v82;
  _BYTE v83[128];
  void *v84;
  uint64_t v85;
  _BYTE v86[32];
  uint64_t v87;
  void *v88[2];
  _QWORD v89[66];

  v89[64] = *MEMORY[0x24BDAC8D0];
  v71 = a3;
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v68[0] = &unk_24FAC2E78;
  v68[3] = a2;
  v68[4] = a3;
  v69 = 0;
  v70 = "serializing";
  v6 = sub_22E4D1AD8((uint64_t *)(a1 + 208), &v71);
  v7 = *((unsigned int *)v6 + 2);
  if (!(_DWORD)v7)
  {
    v7 = *(unsigned int *)(a1 + 204);
    *(_DWORD *)(a1 + 204) = v7 + 1;
    *((_DWORD *)v6 + 2) = v7;
  }
  v88[0] = v89;
  v88[1] = (void *)0x4000000000;
  v77 = a1;
  v78 = a2;
  v79[0] = *(_QWORD *)(a1 + 40);
  v79[1] = a1;
  v80 = v88;
  v81 = v83;
  v82 = 0x1000000000;
  v84 = v86;
  v85 = 0x800000000;
  v87 = 0;
  v8 = v71;
  sub_22E7F1EF4((uint64_t)&v77, v71);
  v9 = *(_DWORD *)(v8 + 28);
  if (v8 && (*(_DWORD *)(v8 + 28) & 0x7Fu) - 67 >= 0xFFFFFFEE)
  {
    v10 = *(_QWORD *)(v8 + 56);
    v11 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 4) != 0)
      v11 = (uint64_t *)v11[4];
    if (v11)
    {
      sub_22E7E42B4((uint64_t)v79, *v11);
      v9 = *(_DWORD *)(v8 + 28);
    }
  }
  if (v8 && (v9 & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v12 = *(_QWORD *)(v8 + 80);
    if ((v12 & 0x8000000) != 0 || !*(_QWORD *)(v8 + 128))
      v13 = (v12 >> 29) & 1;
    else
      v13 = 1;
    v14 = v80;
    v15 = *((_DWORD *)v80 + 2);
    if (v15 >= *((_DWORD *)v80 + 3))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = *((_DWORD *)v14 + 2);
    }
    *((_QWORD *)*v14 + v15) = v13;
    ++*((_DWORD *)v14 + 2);
    v16 = *(_QWORD *)(v8 + 80);
    if ((v16 & 0x8000000) == 0)
    {
      if (!(*(_QWORD *)(v8 + 128) | *(_QWORD *)(v8 + 80) & 0x20000000))
        goto LABEL_20;
      goto LABEL_19;
    }
    if ((v16 & 0x20000000) != 0)
LABEL_19:
      sub_22E7F4AE4((uint64_t)v79, v8);
  }
LABEL_20:
  v17 = *(_DWORD *)(v8 + 28) & 0x7F;
  if (v17 <= 0x39 && ((1 << v17) & 0x3F0003E01011066) != 0
    || v17 - 70 <= 0xD && ((1 << (v17 - 70)) & 0x2803) != 0
    || v17 - 19 <= 4)
  {
    v18 = sub_22EFCAE04(v8);
    v19 = sub_22E7CA6B4(v77, v78, v18);
    sub_22E7E37E0((uint64_t)v79, v19);
    v20 = sub_22E7CBA70();
    sub_22E7E37E0((uint64_t)v79, v20);
  }
  v67 = (_QWORD *)a2;
  if (!(_DWORD)v87)
  {
    v61 = sub_22F3AEA44(v71);
    v75 = 773;
    v74[0] = (uint64_t)"unexpected declaration kind '";
    v74[1] = 29;
    v74[2] = (uint64_t)v61;
    v72 = "'";
    v73 = 259;
    sub_22F2BB324(v74, (uint64_t *)&v72, (uint64_t)v76);
    v62 = llvm::report_fatal_error();
    sub_22E7FC024(v62, v63);
    return;
  }
  v21 = sub_22E7CA950((uint64_t)v79, v87, HIDWORD(v87));
  v22 = v21;
  v23 = *(_DWORD *)(v71 + 24);
  v24 = (v7 - *(_DWORD *)(a1 + 200));
  v25 = *(_BYTE **)(a1 + 232);
  v26 = *(_DWORD **)(a1 + 240);
  v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - v25) >> 2);
  if (v27 != v24)
  {
    v66 = v21;
    v33 = (v24 + 1);
    v34 = v33 - v27;
    if (v33 <= v27)
    {
      if (v33 < v27)
        *(_QWORD *)(a1 + 240) = &v25[12 * v33];
      v32 = v67;
      v43 = v21;
    }
    else
    {
      v35 = *(_QWORD *)(a1 + 248);
      if (0xAAAAAAAAAAAAAAABLL * ((v35 - (uint64_t)v26) >> 2) >= v34)
      {
        bzero(v26, 12 * ((12 * v34 - 12) / 0xC) + 12);
        *(_QWORD *)(a1 + 240) = &v26[3 * v34];
        v43 = v66;
      }
      else
      {
        v65 = v7;
        v36 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (uint64_t)v25) >> 2);
        v37 = 2 * v36;
        if (2 * v36 <= v33)
          v37 = (v24 + 1);
        if (v36 >= 0xAAAAAAAAAAAAAAALL)
          v38 = 0x1555555555555555;
        else
          v38 = v37;
        if (v38 > 0x1555555555555555)
          goto LABEL_97;
        v39 = 3 * v38;
        v40 = (char *)operator new(12 * v38);
        v41 = &v40[4 * (((char *)v26 - v25) >> 2)];
        v64 = &v40[4 * v39];
        bzero(v41, 12 * ((12 * v34 - 12) / 0xC) + 12);
        v42 = &v40[12 * v33];
        if (v26 == (_DWORD *)v25)
        {
          v43 = v66;
        }
        else
        {
          v43 = v66;
          do
          {
            v44 = *(_QWORD *)(v26 - 3);
            v26 -= 3;
            v45 = v26[2];
            *(_QWORD *)(v41 - 12) = v44;
            v41 -= 12;
            *((_DWORD *)v41 + 2) = v45;
          }
          while (v26 != (_DWORD *)v25);
          v26 = *(_DWORD **)(a1 + 232);
        }
        v7 = v65;
        *(_QWORD *)(a1 + 232) = v41;
        *(_QWORD *)(a1 + 240) = v42;
        *(_QWORD *)(a1 + 248) = v64;
        if (v26)
          operator delete(v26);
      }
      v25 = *(_BYTE **)(a1 + 232);
      v32 = v67;
    }
    if (v23)
      v46 = v23 - sub_22E7E3C1C((_QWORD *)a1, v23 & 0x7FFFFFFF);
    else
      v46 = 0;
    *(_DWORD *)&v25[12 * v24] = v46;
    *(_QWORD *)&v25[12 * v24 + 4] = v43 - *(_QWORD *)(a1 + 256);
    if (!v23)
      goto LABEL_62;
LABEL_60:
    if (*(_DWORD *)(v32[249] + 220) > (v23 & 0x7FFFFFFFu))
      sub_22E7E4BA8(a1, v71, v7);
    goto LABEL_62;
  }
  if (v23)
    v28 = v23 - sub_22E7E3C1C((_QWORD *)a1, v23 & 0x7FFFFFFF);
  else
    v28 = 0;
  v29 = *(_QWORD *)(a1 + 248);
  if ((unint64_t)v26 < v29)
  {
    v30 = v22 - *(_QWORD *)(a1 + 256);
    *v26 = v28;
    *(_QWORD *)(v26 + 1) = v30;
    v31 = v26 + 3;
    v32 = v67;
    goto LABEL_29;
  }
  v51 = v27 + 1;
  if (v27 + 1 > 0x1555555555555555)
    abort();
  v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (_QWORD)v25) >> 2);
  if (2 * v52 > v51)
    v51 = 2 * v52;
  if (v52 >= 0xAAAAAAAAAAAAAAALL)
    v53 = 0x1555555555555555;
  else
    v53 = v51;
  if (v53 > 0x1555555555555555)
LABEL_97:
    sub_22E3B3F8C();
  v54 = v22;
  v55 = 3 * v53;
  v56 = (char *)operator new(12 * v53);
  v57 = &v56[4 * (((char *)v26 - v25) >> 2)];
  v58 = v54 - *(_QWORD *)(a1 + 256);
  *(_DWORD *)v57 = v28;
  *(_QWORD *)(v57 + 4) = v58;
  v31 = v57 + 12;
  if (v26 == (_DWORD *)v25)
  {
    v32 = v67;
  }
  else
  {
    v32 = v67;
    do
    {
      v59 = *(_QWORD *)(v26 - 3);
      v26 -= 3;
      v60 = v26[2];
      *(_QWORD *)(v57 - 12) = v59;
      v57 -= 12;
      *((_DWORD *)v57 + 2) = v60;
    }
    while (v26 != (_DWORD *)v25);
  }
  *(_QWORD *)(a1 + 232) = v57;
  *(_QWORD *)(a1 + 240) = v31;
  *(_QWORD *)(a1 + 248) = &v56[4 * v55];
  if (v25)
    operator delete(v25);
LABEL_29:
  *(_QWORD *)(a1 + 240) = v31;
  if (v23)
    goto LABEL_60;
LABEL_62:
  v47 = v71;
  v48 = *(_DWORD *)(v71 + 28) & 0x7F;
  v49 = v48 == 7 || (*(_DWORD *)(v71 + 28) & 0x7E) == 20;
  if (v49
    || (!*(_QWORD *)(a1 + 64) || v48 != 10 && ((v48 - 60) > 6 || (sub_22EFBC2B0(v71) & 0xFFFFFFFD) != 0))
    && sub_22EF736B8(v32, v47))
  {
    v50 = *(_DWORD *)(a1 + 768);
    if (v50 >= *(_DWORD *)(a1 + 772))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v50 = *(_DWORD *)(a1 + 768);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 760) + 4 * v50) = v7;
    ++*(_DWORD *)(a1 + 768);
  }
  if (v84 != v86)
    free(v84);
  if (v81 != v83)
    free(v81);
  if (v88[0] != v89)
    free(v88[0]);
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v68);
}

void sub_22E7FC024(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  __asm { BR              X9 }
}

unint64_t sub_22E7FCCCC(uint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;

  v4 = (unint64_t *)a2[1];
  v3 = a2[2];
  v5 = *a2;
  result = sub_22E7E1FB4(a1[1], *a2, a1[2]);
  v7 = a1[2];
  v8 = *(_DWORD *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = *(_DWORD *)(v7 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v7 + 8 * v8) = v3;
  ++*(_DWORD *)(v7 + 8);
  if (v3)
  {
    v9 = *a1;
    v10 = 8 * v3;
    do
    {
      v11 = *v4;
      v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v12 && *(_BYTE *)(v12 + 16) == 45)
      {
        v13 = a1[2];
        v14 = *(unsigned int *)(v13 + 8);
        if (v14 >= *(unsigned int *)(v13 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v14 = *(unsigned int *)(v13 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = (v11 >> 2) & 1;
        ++*(_DWORD *)(v13 + 8);
        v15 = *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 28);
        result = sub_22E7CA8EC(a1[1], v11 & 0xFFFFFFFFFFFFFFF8, a1[2]);
        if ((v11 & 0xFFFFFFFFFFFFFFF8) != 0 && (v15 & 0x7Fu) - 38 >= 0xFFFFFFFD)
        {
          result = sub_22EF6477C(v9, v11 & 0xFFFFFFFFFFFFFFF8);
          v5 = result;
        }
        else
        {
          v5 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 48);
        }
      }
      else
      {
        v16 = a1[2];
        v17 = *(unsigned int *)(v16 + 8);
        if (v17 >= *(unsigned int *)(v16 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v17 = *(unsigned int *)(v16 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v16 + 8 * v17) = v11;
        ++*(_DWORD *)(v16 + 8);
        result = sub_22EF5C728(v9, v5);
        v5 = *(_QWORD *)(result + 32);
      }
      ++v4;
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

char **sub_22E7FCE7C(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 72 * v3;
    v5 = v2 - 72;
    do
    {
      if (*(_DWORD *)&v5[v4] >= 2u)
        sub_22EF53BC0((uint64_t *)&v5[v4]);
      v4 -= 72;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_22E7FCEF0(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _BYTE *v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v10;
  llvm *v11[2];
  unsigned int v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;

  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  if (!v5)
    return llvm::deallocate_buffer(v11[0], (void *)(16 * v12));
  v6 = (_BYTE *)v5;
  do
  {
    if ((v6[29] & 0x80) != 0)
    {
      v10 = sub_22E783560(*(_QWORD *)(*a1 + 56), (uint64_t)v6);
LABEL_5:
      *(_QWORD *)sub_22E7FCFE8((uint64_t)v11, &v10) = v6;
      goto LABEL_6;
    }
    if (a3)
    {
      v10 = 0;
      goto LABEL_5;
    }
LABEL_6:
    v6 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 48))(v6);
  }
  while (v6);
  v7 = v13;
  v8 = v14;
  if (v13 != v14)
  {
    do
    {
      sub_22E7CA8EC(a1[3], v7[1], a1[4]);
      v7 += 2;
    }
    while (v7 != v8);
    v7 = v13;
  }
  if (v7)
  {
    v14 = v7;
    operator delete(v7);
  }
  return llvm::deallocate_buffer(v11[0], (void *)(16 * v12));
}

uint64_t sub_22E7FCFE8(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v19;
  int v20;
  _QWORD *v21;

  v19 = *a2;
  v20 = 0;
  v21 = 0;
  if (sub_22E3B9914(a1, &v19, &v21))
  {
    v17 = *((_DWORD *)v21 + 2);
    v16 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v4 = sub_22E744928((_DWORD *)a1, (uint64_t)&v19, &v19, v21);
    *v4 = v19;
    *((_DWORD *)v4 + 2) = v20;
    v5 = *a2;
    v7 = *(char **)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v7 < v6)
    {
      *(_QWORD *)v7 = v5;
      *((_QWORD *)v7 + 1) = 0;
      v15 = v7 + 16;
    }
    else
    {
      v8 = *(char **)(a1 + 24);
      v9 = (v7 - v8) >> 4;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60)
        abort();
      v11 = v6 - (_QWORD)v8;
      if (v11 >> 3 > v10)
        v10 = v11 >> 3;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 60)
          sub_22E3B3F8C();
        v13 = (char *)operator new(16 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[16 * v9];
      *(_QWORD *)v14 = v5;
      *((_QWORD *)v14 + 1) = 0;
      v15 = v14 + 16;
      if (v7 != v8)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v7 - 1);
          v14 -= 16;
          v7 -= 16;
        }
        while (v7 != v8);
        v7 = *(char **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v14;
      *(_QWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = &v13[16 * v12];
      if (v7)
        operator delete(v7);
    }
    *(_QWORD *)(a1 + 32) = v15;
    v16 = *(_QWORD *)(a1 + 24);
    v17 = (((unint64_t)v15 - v16) >> 4) - 1;
    *((_DWORD *)v4 + 2) = v17;
  }
  return v16 + 16 * v17 + 8;
}

uint64_t sub_22E7FD160(uint64_t result, char *a2, char *a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;

  v3 = a3 - a2;
  v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 2) > (unint64_t)*(unsigned int *)(result + 12))
  {
    v9 = a3 - a2;
    v10 = result;
    v7 = a3;
    v8 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v8;
    v3 = v9;
    a3 = v7;
    result = v10;
    v4 = *(unsigned int *)(v10 + 8);
  }
  if (a2 != a3)
  {
    v5 = (_QWORD *)(*(_QWORD *)result + 8 * v4);
    do
    {
      v6 = *(_DWORD *)a2;
      a2 += 4;
      *v5++ = v6;
    }
    while (a2 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + (v3 >> 2);
  return result;
}

_QWORD *sub_22E7FD1F0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2D6E38(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

void sub_22E7FD2B0(uint64_t a1, int *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;

  sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[2], *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *a2, *(_QWORD *)(a1 + 24));
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[1], *(_QWORD *)(a1 + 24));
  if (a2[3])
  {
    v6 = 0;
    v7 = a1 + 8;
    do
      sub_22E7E41DC(v7, (__int128 *)(a3 + 32 * v6++));
    while (v6 != a2[3]);
  }
}

uint64_t *sub_22E7FD334(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  unint64_t v13;

  sub_22E7FD480(a1, (unsigned int *)a2);
  sub_22E7C9A94(*(_QWORD *)(a1 + 16), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 24));
  v4 = 0;
  v5 = (uint64_t *)(a2 + 24);
  v6 = (uint64_t *)(a2 + 56);
  v12 = (uint64_t *)(a2 + 24);
  v13 = 0;
  do
  {
    result = v5;
    if ((v4 & 3) != 0)
    {
      if ((v4 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        result = (uint64_t *)((v4 & 0xFFFFFFFFFFFFFFFCLL) + 40);
      else
        result = (uint64_t *)sub_22F3AC1A8(*v5);
    }
    v8 = *result;
    v9 = *(unsigned int *)(a1 + 40);
    if (v9 >= *(unsigned int *)(a1 + 44))
    {
      result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(unsigned int *)(a1 + 40);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v8;
    ++*(_DWORD *)(a1 + 40);
    if ((v4 & 3) != 0)
    {
      if (v4 < 4)
        result = (uint64_t *)sub_22F3F2FE0((uint64_t)&v12, 1);
      else
        result = (uint64_t *)sub_22F0D8720((uint64_t)&v12);
    }
    else
    {
      v12 = v5 + 1;
    }
    v5 = v12;
    v4 = v13;
  }
  while (v12 != v6 || v13);
  v10 = *v6;
  v11 = *(_DWORD *)(a1 + 40);
  if (v11 >= *(_DWORD *)(a1 + 44))
  {
    result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11) = v10;
  ++*(_DWORD *)(a1 + 40);
  return result;
}

uint64_t sub_22E7FD480(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  result = sub_22E7E1FB4(*(_QWORD *)(a1 + 16), *((_QWORD *)a2 + 1), *(_QWORD *)(a1 + 24));
  v5 = ((unint64_t)*a2 >> 15) & 1;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    v26 = ((unint64_t)*a2 >> 15) & 1;
    v32 = *(_QWORD *)(a1 + 24);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = v26;
    v6 = v32;
    v7 = *(_DWORD *)(v32 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = ((unint64_t)*a2 >> 16) & 1;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    v27 = ((unint64_t)*a2 >> 16) & 1;
    v33 = *(_QWORD *)(a1 + 24);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = v27;
    v9 = v33;
    v10 = *(_DWORD *)(v33 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  v11 = ((unint64_t)*a2 >> 14) & 1;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_DWORD *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
  {
    v28 = ((unint64_t)*a2 >> 14) & 1;
    v34 = *(_QWORD *)(a1 + 24);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = v28;
    v12 = v34;
    v13 = *(_DWORD *)(v34 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = v11;
  ++*(_DWORD *)(v12 + 8);
  v14 = ((unint64_t)*a2 >> 13) & 1;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_DWORD *)(v15 + 8);
  if (v16 >= *(_DWORD *)(v15 + 12))
  {
    v29 = ((unint64_t)*a2 >> 13) & 1;
    v35 = *(_QWORD *)(a1 + 24);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = v29;
    v15 = v35;
    v16 = *(_DWORD *)(v35 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v15 + 8 * v16) = v14;
  ++*(_DWORD *)(v15 + 8);
  v17 = ((unint64_t)*a2 >> 17) & 1;
  v18 = *(_QWORD *)(a1 + 24);
  v19 = *(_DWORD *)(v18 + 8);
  if (v19 >= *(_DWORD *)(v18 + 12))
  {
    v30 = ((unint64_t)*a2 >> 17) & 1;
    v36 = *(_QWORD *)(a1 + 24);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = v30;
    v18 = v36;
    v19 = *(_DWORD *)(v36 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = v17;
  ++*(_DWORD *)(v18 + 8);
  v20 = ((unint64_t)*a2 >> 8) & 3;
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_DWORD *)(v21 + 8);
  if (v22 >= *(_DWORD *)(v21 + 12))
  {
    v31 = ((unint64_t)*a2 >> 8) & 3;
    v37 = *(_QWORD *)(a1 + 24);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v20 = v31;
    v21 = v37;
    v22 = *(_DWORD *)(v37 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v21 + 8 * v22) = v20;
  ++*(_DWORD *)(v21 + 8);
  v23 = *a2;
  v24 = *(_QWORD *)(a1 + 24);
  v25 = *(_DWORD *)(v24 + 8);
  if (v25 >= *(_DWORD *)(v24 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v25 = *(_DWORD *)(v24 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v24 + 8 * v25) = (v23 >> 10) & 7;
  ++*(_DWORD *)(v24 + 8);
  return result;
}

uint64_t sub_22E7FD6E0(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v3 = result;
  v4 = a2[1] & 1;
  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  if ((a2[1] & 1) == 0)
  {
    v7 = *a2;
    v8 = *(_QWORD *)(v3 + 16);
    v9 = *(_DWORD *)(v8 + 8);
    if (v9 >= *(_DWORD *)(v8 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(v8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
    ++*(_DWORD *)(v8 + 8);
    if (*a2)
    {
      v10 = 16 * *a2;
      v11 = a2 + 3;
      do
      {
        v12 = *(v11 - 1);
        v13 = *(unsigned int *)(v3 + 32);
        if (v13 >= *(unsigned int *)(v3 + 36))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v13 = *(unsigned int *)(v3 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * v13) = v12;
        ++*(_DWORD *)(v3 + 32);
        if ((*v11 & 2) != 0)
          v14 = 0;
        else
          v14 = *v11 & 0xFFFFFFFFFFFFFFFCLL;
        v15 = *(_QWORD *)(v3 + 16);
        v16 = *(unsigned int *)(v15 + 8);
        if (v16 >= *(unsigned int *)(v15 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = *(unsigned int *)(v15 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v15 + 8 * v16) = v14 == 0;
        ++*(_DWORD *)(v15 + 8);
        if (v14)
        {
          v17 = *(unsigned int *)(v3 + 32);
          if (v17 >= *(unsigned int *)(v3 + 36))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v17 = *(unsigned int *)(v3 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8 * v17) = v14;
          ++*(_DWORD *)(v3 + 32);
        }
        else
        {
          v18 = *v11 & 0xFFFFFFFFFFFFFFFCLL;
          sub_22E7C9A94(*(_QWORD *)(v3 + 8), *(_DWORD *)v18, *(_QWORD *)(v3 + 16));
          result = sub_22E7BE5A4(*(_QWORD *)(v3 + 8), *(char **)(v18 + 8), *(_QWORD *)(v18 + 16), *(_QWORD *)(v3 + 16));
        }
        v11 += 2;
        v10 -= 16;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t sub_22E7FD8D0(uint64_t a1, uint64_t a2)
{
  sub_22E7BE5A4(*(_QWORD *)(a1 + 8), *(char **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 16));
  sub_22E7C9A94(*(_QWORD *)(a1 + 8), *(_DWORD *)(a2 + 16), *(_QWORD *)(a1 + 16));
  return sub_22E7BE5A4(*(_QWORD *)(a1 + 8), *(char **)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a1 + 16));
}

uint64_t sub_22E7FD918(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  result = sub_22E7FD480(a1, a2);
  v5 = a2[1];
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    v30 = *(_QWORD *)(a1 + 24);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = v30;
    v7 = *(_DWORD *)(v30 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = a2[4];
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    v31 = *(_QWORD *)(a1 + 24);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = v31;
    v10 = *(_DWORD *)(v31 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  v11 = ((unint64_t)*a2 >> 21) & 7;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_DWORD *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
  {
    v32 = *(_QWORD *)(a1 + 24);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = v32;
    v13 = *(_DWORD *)(v32 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = v11;
  ++*(_DWORD *)(v12 + 8);
  v14 = ((unint64_t)*a2 >> 18) & 7;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_DWORD *)(v15 + 8);
  if (v16 >= *(_DWORD *)(v15 + 12))
  {
    v33 = *(_QWORD *)(a1 + 24);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v33;
    v16 = *(_DWORD *)(v33 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v15 + 8 * v16) = v14;
  ++*(_DWORD *)(v15 + 8);
  v17 = ((unint64_t)*a2 >> 24) & 1;
  v18 = *(_QWORD *)(a1 + 24);
  v19 = *(_DWORD *)(v18 + 8);
  if (v19 >= *(_DWORD *)(v18 + 12))
  {
    v34 = *(_QWORD *)(a1 + 24);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v18 = v34;
    v19 = *(_DWORD *)(v34 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = v17;
  ++*(_DWORD *)(v18 + 8);
  v20 = a2[1];
  if ((_DWORD)v20)
  {
    v22 = (int *)(a2 + 5);
    do
    {
      v23 = *v22++;
      result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), v23, *(_QWORD *)(a1 + 24));
      --v20;
    }
    while (v20);
    v21 = a2[1];
  }
  else
  {
    v21 = 0;
  }
  v24 = ((*a2 >> 21) & 7) * a2[4];
  if ((_DWORD)v24)
  {
    v25 = &a2[v21 + 5];
    do
    {
      v27 = *(char *)v25;
      v25 = (unsigned int *)((char *)v25 + 1);
      v26 = v27;
      v28 = *(_QWORD *)(a1 + 24);
      v29 = *(unsigned int *)(v28 + 8);
      if (v29 >= *(unsigned int *)(v28 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v29 = *(unsigned int *)(v28 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v28 + 8 * v29) = v26;
      ++*(_DWORD *)(v28 + 8);
      --v24;
    }
    while (v24);
  }
  *(_DWORD *)(a1 + 224) = 167;
  return result;
}

uint64_t sub_22E7FDB78(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_22E7FD480(a1, a2);
  v4 = *a2;
  v5 = (v4 >> 24) & 1;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    v23 = *(_QWORD *)(a1 + 24);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = (v4 >> 24) & 1;
    v6 = v23;
    v7 = *(_DWORD *)(v23 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = *((_QWORD *)a2 + 2);
  v9 = *(_DWORD *)(a1 + 40);
  if (v9 >= *(_DWORD *)(a1 + 44))
  {
    v24 = *((_QWORD *)a2 + 2);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = v24;
    v9 = *(_DWORD *)(a1 + 40);
  }
  v10 = v4 & 0x1000000;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 40);
  v11 = ((unint64_t)*a2 >> 18) & 0x1F;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_DWORD *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
  {
    v21 = ((unint64_t)*a2 >> 18) & 0x1F;
    v25 = *(_QWORD *)(a1 + 24);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = v21;
    v12 = v25;
    v13 = *(_DWORD *)(v25 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = v11;
  ++*(_DWORD *)(v12 + 8);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[1], *(_QWORD *)(a1 + 24));
  v15 = ((unint64_t)*a2 >> 23) & 1;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_DWORD *)(v16 + 8);
  if (v17 >= *(_DWORD *)(v16 + 12))
  {
    v22 = ((unint64_t)*a2 >> 23) & 1;
    v26 = *(_QWORD *)(a1 + 24);
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v15 = v22;
    v16 = v26;
    v17 = *(_DWORD *)(v26 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v16 + 8 * v17) = v15;
  ++*(_DWORD *)(v16 + 8);
  if (v10)
  {
    v18 = __ROR8__(*((_QWORD *)a2 + 3), 32);
    v19 = *(_QWORD *)(a1 + 24);
    v20 = *(_DWORD *)(v19 + 8);
    if (v20 >= *(_DWORD *)(v19 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v20 = *(_DWORD *)(v19 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = v18;
    ++*(_DWORD *)(v19 + 8);
  }
  *(_DWORD *)(a1 + 224) = 171;
  return result;
}

uint64_t sub_22E7FDD4C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;

  sub_22E7FD480(a1, a2);
  v4 = a2[4];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = ((unint64_t)*a2 >> 20) & 1;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[5], *(_QWORD *)(a1 + 24));
  v11 = *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3));
  v12 = *(_DWORD *)(a1 + 40);
  if (v12 >= *(_DWORD *)(a1 + 44))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v12) = v11;
  v13 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v13;
  v14 = *a2;
  v15 = a2[4];
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    v17 = (v14 >> 24) + 8 * ((v14 >> 18) & 1) + 8;
    do
    {
      v18 = *(_QWORD *)((char *)a2 + v17);
      if (v13 >= *(_DWORD *)(a1 + 44))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v13 = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v18;
      v13 = *(_DWORD *)(a1 + 40) + 1;
      *(_DWORD *)(a1 + 40) = v13;
      v17 += 8;
      v16 -= 8;
    }
    while (v16);
    LODWORD(v14) = *a2;
  }
  v19 = (v14 >> 19) & 1;
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_DWORD *)(v20 + 8);
  if (v21 >= *(_DWORD *)(v20 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v21 = *(_DWORD *)(v20 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v20 + 8 * v21) = v19;
  ++*(_DWORD *)(v20 + 8);
  v22 = *a2;
  if ((v22 & 0x100000) != 0)
  {
    v23 = __ROR8__(*(_QWORD *)((char *)&a2[2 * ((v22 >> 18) & 1) + 2 + 2 * a2[4]] + (v22 >> 24)), 32);
    v24 = *(_QWORD *)(a1 + 24);
    v25 = *(_DWORD *)(v24 + 8);
    if (v25 >= *(_DWORD *)(v24 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = *(_DWORD *)(v24 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v24 + 8 * v25) = v23;
    ++*(_DWORD *)(v24 + 8);
  }
  *(_DWORD *)(a1 + 224) = 176;
  return result;
}

uint64_t *sub_22E7FDF8C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  sub_22E7FD480(a1, a2);
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = ((unint64_t)*a2 >> 26) & 1;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = *((_QWORD *)a2 + 2);
  v11 = *(_DWORD *)(a1 + 40);
  if (v11 >= *(_DWORD *)(a1 + 44))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v11 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11) = v10;
  ++*(_DWORD *)(a1 + 40);
  v12 = ((unint64_t)*a2 >> 18) & 0x7F;
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_DWORD *)(v13 + 8);
  if (v14 >= *(_DWORD *)(v13 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(v13 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = v12;
  ++*(_DWORD *)(v13 + 8);
  result = (uint64_t *)sub_22EFFB554((unsigned __int8 *)a2);
  v16 = a2[1];
  if ((_DWORD)v16)
  {
    v20 = result;
    v21 = 8 * v16;
    do
    {
      v22 = *v20++;
      result = (uint64_t *)sub_22E7E5488(a1 + 8, v22);
      v21 -= 8;
    }
    while (v21);
  }
  if ((*((_BYTE *)a2 + 3) & 4) != 0)
  {
    result = (uint64_t *)sub_22EFFB618((unsigned __int8 *)a2);
    v17 = __ROR8__(*result, 32);
    v18 = *(_QWORD *)(a1 + 24);
    v19 = *(_DWORD *)(v18 + 8);
    if (v19 >= *(_DWORD *)(v18 + 12))
    {
      result = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod();
      v19 = *(_DWORD *)(v18 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v18 + 8 * v19) = v17;
    ++*(_DWORD *)(v18 + 8);
  }
  return result;
}

uint64_t sub_22E7FE164(uint64_t a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_22E7FD480(a1, a2);
  v4 = *a2;
  v5 = (v4 >> 24) & 1;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 >= *(_DWORD *)(v6 + 12))
  {
    v24 = *(_QWORD *)(a1 + 24);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = (v4 >> 24) & 1;
    v6 = v24;
    v7 = *(_DWORD *)(v24 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
  ++*(_DWORD *)(v6 + 8);
  v8 = ((unint64_t)*a2 >> 18) & 0x3F;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_DWORD *)(v9 + 8);
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    v22 = ((unint64_t)*a2 >> 18) & 0x3F;
    v25 = *(_QWORD *)(a1 + 24);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v8 = v22;
    v9 = v25;
    v10 = *(_DWORD *)(v25 + 8);
  }
  v11 = v4 & 0x1000000;
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = v8;
  ++*(_DWORD *)(v9 + 8);
  v12 = *((_QWORD *)a2 + 2);
  v13 = *(_DWORD *)(a1 + 40);
  if (v13 >= *(_DWORD *)(a1 + 44))
  {
    v23 = *((_QWORD *)a2 + 2);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v12 = v23;
    v13 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v12;
  v14 = *(_DWORD *)(a1 + 44);
  v15 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 40) = v15;
  v16 = *((_QWORD *)a2 + 3);
  if (v15 >= v14)
  {
    v26 = *((_QWORD *)a2 + 3);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v16 = v26;
    v15 = *(_DWORD *)(a1 + 40);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v15) = v16;
  ++*(_DWORD *)(a1 + 40);
  result = sub_22E7C9A94(*(_QWORD *)(a1 + 16), a2[1], *(_QWORD *)(a1 + 24));
  if (v11)
  {
    v18 = 8;
    if (*(_BYTE *)a2 == 113)
      v18 = 12;
    v19 = __ROR8__(*(_QWORD *)&a2[v18], 32);
    v20 = *(_QWORD *)(a1 + 24);
    v21 = *(_DWORD *)(v20 + 8);
    if (v21 >= *(_DWORD *)(v20 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v21 = *(_DWORD *)(v20 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v20 + 8 * v21) = v19;
    ++*(_DWORD *)(v20 + 8);
  }
  *(_DWORD *)(a1 + 224) = 178;
  return result;
}

uint64_t sub_22E7FE33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  sub_22E7FDF8C(a1, (unsigned int *)a2);
  sub_22E7D2E84(a1 + 8, *(unint64_t **)(a2 + 24));
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = HIDWORD(*(_QWORD *)(a2 + 32));
  sub_22E7C9A94(v4, *(_QWORD *)(a2 + 32), v5);
  sub_22E7C9A94(v4, v6, v5);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = HIDWORD(v7);
  sub_22E7C9A94(v8, v7, v9);
  return sub_22E7C9A94(v8, v10, v9);
}

void sub_22E7FE3D0(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  BOOL v17;
  unsigned int *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  sub_22E7FD480(a1, a2);
  v4 = a2[1];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 >= *(_DWORD *)(v5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(v5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v4;
  ++*(_DWORD *)(v5 + 8);
  v7 = ((unint64_t)*a2 >> 18) & 1;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(v8 + 8);
  if (v9 >= *(_DWORD *)(v8 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v9 = *(_DWORD *)(v8 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v7;
  ++*(_DWORD *)(v8 + 8);
  v10 = *a2;
  if ((*a2 & 0x40000) != 0)
  {
    if (v10 == 211)
      v11 = a2 + 16;
    else
      v11 = a2 + 20;
    v12 = &v11[2 * a2[1]];
    v13 = v12[3];
    v14 = *(_QWORD *)(a1 + 24);
    v15 = *(_DWORD *)(v14 + 8);
    if (v15 >= *(_DWORD *)(v14 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = *(_DWORD *)(v14 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v13;
    ++*(_DWORD *)(v14 + 8);
    if (*(unsigned __int8 *)a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    sub_22E7FD2B0(a1, (int *)v12, (uint64_t)&v16[4 * (((unint64_t)*a2 >> 18) & 1) + 2 * a2[1]]);
    v10 = *(unsigned __int8 *)a2;
  }
  v17 = v10 == 211;
  if (v10 == 211)
    v18 = a2;
  else
    v18 = 0;
  v19 = (uint64_t *)(v18 + 16);
  if (v17)
    v20 = v19;
  else
    v20 = (uint64_t *)(a2 + 20);
  v21 = a2[1];
  if ((_DWORD)v21)
  {
    v22 = 8 * v21;
    do
    {
      sub_22E7CA8EC(*(_QWORD *)(a1 + 16), *v20 & 0xFFFFFFFFFFFFFFFCLL, *(_QWORD *)(a1 + 24));
      v23 = *v20;
      v24 = *(_QWORD *)(a1 + 24);
      v25 = *(unsigned int *)(v24 + 8);
      if (v25 >= *(unsigned int *)(v24 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = *(unsigned int *)(v24 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v24 + 8 * v25) = v23 & 3;
      ++*(_DWORD *)(v24 + 8);
      ++v20;
      v22 -= 8;
    }
    while (v22);
  }
  v26 = a1 + 8;
  sub_22E7E50C0(v26, (uint64_t)(a2 + 4));
  sub_22E7E3E60(v26, *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6));
}

uint64_t sub_22E7FE5CC(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 > 4 * *(_DWORD *)(result + 8) && v1 >= 0x41)
    {
      return sub_22E5867C8(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
  }
  return result;
}

void sub_22E7FE61C(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int *v9;
  int v10;
  int v11;
  llvm::raw_ostream *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int **v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int **v41;
  _QWORD v42[2];
  uint64_t v43;
  void **v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[32];
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[65];

  v54[64] = *MEMORY[0x24BDAC8D0];
  v52 = v54;
  v53 = 0x4000000000;
  v3 = *(_QWORD *)(a1 + 40);
  v42[0] = a1;
  v42[1] = v3;
  v43 = a1;
  v44 = &v52;
  v45 = v47;
  v46 = 0x1000000000;
  v48 = v50;
  v49 = 0x800000000;
  v51 = 139;
  ++*(_DWORD *)(a1 + 1584);
  if (a2)
  {
    v5 = *(unsigned int *)(a1 + 520);
    if (!(_DWORD)v5)
      goto LABEL_10;
    v6 = *(_QWORD *)(a1 + 504);
    LODWORD(v7) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (unsigned int **)(v6 + 16 * v7);
    v9 = *v8;
    if (*v8 != a2)
    {
      v10 = 1;
      while (v9 != (unsigned int *)-4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & (v5 - 1);
        v9 = *(unsigned int **)(v6 + 16 * v7);
        if (v9 == a2)
        {
          v8 = (unsigned int **)(v6 + 16 * v7);
          goto LABEL_8;
        }
      }
LABEL_10:
      sub_22E7FE9A4((uint64_t)v42, a2);
      v14 = HIDWORD(v51);
      v15 = v51;
      v16 = v46;
      if ((_DWORD)v46)
      {
        do
          sub_22E7FE61C(v43, *((_QWORD *)v45 + --v16));
        while (v16);
      }
      LODWORD(v46) = 0;
      v17 = *(_QWORD *)(v43 + 16);
      v18 = *(_QWORD *)(v17 + 8);
      v19 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      if (v18)
      {
        v40 = *(_QWORD *)(v43 + 16);
        v30 = *(_QWORD *)(v17 + 8);
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 80))(v18);
        v17 = v40;
        v18 = v31 + *(_QWORD *)(v30 + 32) - *(_QWORD *)(v30 + 16);
      }
      v20 = (uint64_t)v44;
      if ((_DWORD)v49)
      {
        v32 = *(unsigned int *)(v17 + 24) + 8 * (v18 + v19);
        v33 = (unsigned int *)v48;
        v34 = *v44;
        v35 = 4 * v49;
        do
        {
          v36 = *v33;
          v37 = v34[v36];
          if (v37)
            v34[v36] = v32 - v37;
          ++v33;
          v35 -= 4;
        }
        while (v35);
      }
      LODWORD(v49) = 0;
      sub_22E742038(*(llvm::raw_ostream **)(v43 + 16), v15, v20, v14);
      v21 = *(_QWORD *)(v43 + 16);
      v22 = *(_QWORD **)(v21 + 8);
      v23 = *(_QWORD *)(*(_QWORD *)v21 + 8);
      if (v22)
      {
        v38 = *(_QWORD *)(*(_QWORD *)v21 + 8);
        v39 = (*(uint64_t (**)(_QWORD))(*v22 + 80))(*(_QWORD *)(v21 + 8));
        v23 = v38;
        v24 = v39 + v22[4] - v22[2];
      }
      else
      {
        v24 = 0;
      }
      v25 = *(unsigned int *)(v21 + 24) + 8 * (v24 + v23);
      v41 = 0;
      v26 = sub_22E8046B4(*(_QWORD *)(a1 + 504), *(_DWORD *)(a1 + 520), (uint64_t)a2, &v41);
      v27 = v41;
      if ((v26 & 1) != 0)
        goto LABEL_23;
      v28 = *(_DWORD *)(a1 + 512);
      v29 = *(_DWORD *)(a1 + 520);
      if (4 * v28 + 4 >= 3 * v29)
      {
        v29 *= 2;
      }
      else if (v29 + ~v28 - *(_DWORD *)(a1 + 516) > v29 >> 3)
      {
LABEL_20:
        ++*(_DWORD *)(a1 + 512);
        if (*v27 != (unsigned int *)-4096)
          --*(_DWORD *)(a1 + 516);
        *v27 = a2;
        v27[1] = 0;
LABEL_23:
        v27[1] = (unsigned int *)v25;
        goto LABEL_26;
      }
      sub_22E80473C(a1 + 504, v29);
      v41 = 0;
      sub_22E8046B4(*(_QWORD *)(a1 + 504), *(_DWORD *)(a1 + 520), (uint64_t)a2, &v41);
      v27 = v41;
      goto LABEL_20;
    }
LABEL_8:
    if (v8 == (unsigned int **)(v6 + 16 * v5))
      goto LABEL_10;
    v54[0] = v8[1];
    LODWORD(v53) = 1;
    v12 = *(llvm::raw_ostream **)(a1 + 16);
    v13 = 140;
  }
  else
  {
    v12 = *(llvm::raw_ostream **)(a1 + 16);
    v13 = 139;
  }
  sub_22E742038(v12, v13, (uint64_t)&v52, 0);
LABEL_26:
  if (v48 != v50)
    free(v48);
  if (v45 != v47)
    free(v45);
  if (v52 != v54)
    free(v52);
}

uint64_t sub_22E7FE9A4(uint64_t a1, unsigned int *a2)
{
  int v2;
  unsigned int v3;
  uint64_t result;

  v2 = *(unsigned __int8 *)a2;
  if ((v2 & 0xFE) == 0x70)
  {
    v3 = *a2;
    switch((*a2 >> 18) & 0x3F)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x20u:
        return sub_22E7FE164(a1, a2);
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
        return sub_22F2D9CC0(a1, (uint64_t)a2);
      default:
        goto LABEL_7;
    }
  }
  if (v2 == 233)
  {
    v3 = *a2;
    switch((*a2 >> 18) & 0x1F)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
        return sub_22E7FDB78(a1, a2);
      default:
LABEL_7:
        v2 = v3;
        break;
    }
  }
  __asm { BR              X10 }
  return result;
}

uint64_t sub_22E80428C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::raw_ostream *v5;
  uint64_t v6[2];

  v1 = result;
  v2 = *(unsigned int *)(result + 32);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 8 * v2;
    do
    {
      sub_22E7FE61C(*(_QWORD *)(v1 + 8), *(unsigned int **)(*(_QWORD *)(v1 + 24) + v3));
      v5 = *(llvm::raw_ostream **)(*(_QWORD *)(v1 + 8) + 16);
      v6[0] = 0;
      v6[1] = 0;
      sub_22E804320(v5, 0x8Au, v6, 0);
      sub_22E80454C(*(_QWORD *)(v1 + 8) + 504);
      result = sub_22E8048A0(*(_QWORD *)(v1 + 8) + 480);
      v3 += 8;
    }
    while (v4 != v3);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

llvm::raw_ostream *sub_22E804320(llvm::raw_ostream *result, unsigned int a2, uint64_t *a3, unsigned int a4)
{
  unsigned int v5;
  llvm::raw_ostream *v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v5 = a2;
  v6 = result;
  if (a4)
    return sub_22E743328(result, a4, *a3, a3[1], 0, 0, a2 | 0x100000000);
  v7 = *((_DWORD *)a3 + 2);
  v8 = *((_DWORD *)result + 8);
  v9 = *((_DWORD *)result + 6);
  v10 = *((_DWORD *)result + 7) | (3 << v9);
  *((_DWORD *)result + 7) = v10;
  v11 = v9 + v8;
  if (v11 >= 0x20)
  {
    result = sub_22E740FDC((const char ***)result, v10);
    v21 = *((_DWORD *)v6 + 6);
    if (v21)
      v10 = 3u >> -(char)v21;
    else
      v10 = 0;
    v11 = ((_BYTE)v21 + (_BYTE)v8) & 0x1F;
  }
  *((_DWORD *)v6 + 6) = v11;
  if (v5 >= 0x20)
  {
    do
    {
      v18 = v5 & 0x1F | 0x20;
      v10 |= v18 << v11;
      *((_DWORD *)v6 + 7) = v10;
      if (v11 >= 0x1A)
      {
        result = sub_22E740FDC((const char ***)v6, v10);
        v20 = *((_DWORD *)v6 + 6);
        if (v20)
          v10 = v18 >> -(char)v20;
        else
          v10 = 0;
        *((_DWORD *)v6 + 7) = v10;
        v11 = ((_BYTE)v20 + 6) & 0x1F;
      }
      else
      {
        v11 += 6;
      }
      *((_DWORD *)v6 + 6) = v11;
      v12 = v5 >> 5;
      v19 = v5 > 0x3FF;
      v5 >>= 5;
    }
    while (v19);
  }
  else
  {
    v12 = v5;
  }
  v13 = (v12 << v11) | v10;
  *((_DWORD *)v6 + 7) = v13;
  if (v11 >= 0x1A)
  {
    result = sub_22E740FDC((const char ***)v6, v13);
    v22 = *((_DWORD *)v6 + 6);
    if (v22)
      v13 = v12 >> -(char)v22;
    else
      v13 = 0;
    *((_DWORD *)v6 + 7) = v13;
    v14 = ((_BYTE)v22 + 6) & 0x1F;
  }
  else
  {
    v14 = v11 + 6;
  }
  *((_DWORD *)v6 + 6) = v14;
  v15 = v7;
  if (v7 >= 0x20)
  {
    v15 = v7;
    do
    {
      v25 = v15;
      result = sub_22E740F64(v6, v15 & 0x1F | 0x20, 6);
      v15 >>= 5;
    }
    while (v25 > 0x3FF);
    v14 = *((_DWORD *)v6 + 6);
    v13 = *((_DWORD *)v6 + 7);
  }
  v16 = (v15 << v14) | v13;
  *((_DWORD *)v6 + 7) = v16;
  v17 = v14 + 6;
  if (v17 >= 0x20)
  {
    result = sub_22E740FDC((const char ***)v6, v16);
    v23 = *((_DWORD *)v6 + 6);
    v24 = v15 >> -(char)v23;
    if (!v23)
      v24 = 0;
    *((_DWORD *)v6 + 7) = v24;
    v17 = ((_BYTE)v23 + 6) & 0x1F;
  }
  *((_DWORD *)v6 + 6) = v17;
  if (v7)
  {
    v26 = 0;
    v27 = 4 * v7;
    do
    {
      result = sub_22E742298(v6, *(unsigned int *)(*a3 + v26), 6);
      v26 += 4;
    }
    while (v27 != v26);
  }
  return result;
}

uint64_t sub_22E80454C(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 > 4 * *(_DWORD *)(result + 8) && v1 >= 0x41)
    {
      return sub_22E600FF4(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t sub_22E80459C(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 0x4000000) != 0)
    return 0;
  v2 = (_QWORD *)(a1 + 16);
  if ((v1 & 0x1000000) != 0)
    v2 = (_QWORD *)(*v2 + 40);
  v3 = *v2;
  if ((v3 & 7) == 1)
    return 1;
  if ((v3 & 7u) < 2)
    return 0;
  if ((v3 & 7) == 2)
    return 1;
  else
    return (*(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFF8) - 3);
}

_QWORD *sub_22E8045F4(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22F2DF2F8(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E8046B4(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t result;
  BOOL v11;
  unsigned int v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_14:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v11 = 0;
        else
          v11 = v7 == -8192;
        if (v11)
          v8 = v6;
        v12 = v5 + v9++;
        v5 = v12 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v12 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_14;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_22E80473C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E8047FC(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E8047FC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_22E8046B4(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      v11 = a2[1];
      *v12 = *a2;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22E8048A0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 <= 4 * *(_DWORD *)(result + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
    else
    {
      return sub_22E63C00C(result);
    }
  }
  return result;
}

uint64_t sub_22E8048F0(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, size_t __len, void *a6, size_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, char a11, char a12, char a13)
{
  void *v20;
  size_t v21;
  size_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = &off_24FA724D0;
  *(_QWORD *)(a1 + 16) = a2;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_21;
  if (__len >= 0x17)
  {
    v21 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v21 = __len | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    *(_QWORD *)(a1 + 32) = __len;
    *(_QWORD *)(a1 + 40) = v22 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v20;
    goto LABEL_8;
  }
  v20 = (void *)(a1 + 24);
  *(_BYTE *)(a1 + 47) = __len;
  if (__len)
LABEL_8:
    memmove(v20, __src, __len);
  *((_BYTE *)v20 + __len) = 0;
  v23 = (_QWORD *)(a1 + 48);
  if (a6)
  {
    if (a7 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a7 >= 0x17)
      {
        v24 = (a7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a7 | 7) != 0x17)
          v24 = a7 | 7;
        v25 = v24 + 1;
        v23 = operator new(v24 + 1);
        *(_QWORD *)(a1 + 56) = a7;
        *(_QWORD *)(a1 + 64) = v25 | 0x8000000000000000;
        *(_QWORD *)(a1 + 48) = v23;
      }
      else
      {
        *(_BYTE *)(a1 + 71) = a7;
        if (!a7)
          goto LABEL_19;
      }
      memmove(v23, a6, a7);
LABEL_19:
      *((_BYTE *)v23 + a7) = 0;
      goto LABEL_20;
    }
LABEL_21:
    abort();
  }
  *v23 = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
LABEL_20:
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a8;
  *(_QWORD *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  v26 = *(_QWORD *)(a1 + 80) + 24;
  *(_QWORD *)(a1 + 96) = v26;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0x20000000;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 2;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  sub_22E7D3234(a1 + 208, a1 + 96, v26, a3, a9, a10, a12);
  *(_BYTE *)(a1 + 2096) = a11;
  *(_BYTE *)(a1 + 2097) = a13;
  *(_BYTE *)(*(_QWORD *)(a1 + 80) + 48) = 0;
  return a1;
}

uint64_t sub_22E804ABC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = &off_24FA724D0;
  sub_22E7D35D0(a1 + 208);
  sub_22E6C6130(a1 + 96);
  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t *sub_22E804B4C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = a1[1];
  if (v2)
    MEMORY[0x2348A0E9C](v2, 0x1050C407EF653B9);
  sub_22E6C6358((uint64_t)(a1 + 167));
  llvm::deallocate_buffer((llvm *)a1[164], (void *)(16 * *((unsigned int *)a1 + 332)));
  sub_22E80808C(a1[2], a1[2] + 80 * *((unsigned int *)a1 + 6));
  v3 = (uint64_t *)a1[2];
  if (v3 != a1 + 4)
    free(v3);
  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_22E804BE4(void *__src@<X0>, size_t __n@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  std::error_code v9;
  llvm::MemoryBuffer *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  llvm *v14;
  int v15;
  llvm *v16;
  __n128 v17;
  char v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  void **v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _BYTE *v46;
  std::string::size_type v47;
  std::string::size_type v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  void *v65;
  char *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *i;
  char *v75;
  char *v77;
  void *v78;
  const char *v79;
  void *v80;
  llvm *TimeTraceProfilerInstance;
  llvm::MemoryBuffer *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::string *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  llvm::StringMapImpl *v93;
  unint64_t *v94;
  __int128 v95;
  uint64_t v96[2];
  char *v97;
  std::string v98;
  __int16 v99;
  uint64_t v100[4];
  __int16 v101;
  uint64_t v102[4];
  __int16 v103;
  uint64_t v104[2];
  uint64_t v105;
  uint64_t v106;
  __int16 v107;
  _OWORD v108[2];
  uint64_t v109;
  void *v110[3];
  char *v111[2];
  _QWORD v112[34];
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  void *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  llvm::MemoryBuffer *v123;
  std::error_code v124;
  void *v125;
  __int128 v126;
  _BYTE v127[128];
  void *__p[2];
  __int128 v129;
  __int128 v130;
  void *v131;
  uint64_t v132;
  _BYTE v133[24];
  char *v134;
  char v135;
  void *v136;
  uint64_t v137;
  _BYTE v138[16];
  __int16 v139;
  std::string v140;
  uint64_t v141;
  std::error_code v142;

  v141 = *MEMORY[0x24BDAC8D0];
  v125 = v127;
  v126 = xmmword_22F44E310;
  if (__n < 0x81)
  {
    v6 = 0;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v6 = v126;
  if (__n)
  {
LABEL_3:
    memcpy((char *)v125 + v6, __src, __n);
    v6 = v126;
  }
LABEL_4:
  *(_QWORD *)&v126 = v6 + __n;
  v136 = "modules.idx";
  v139 = 259;
  LOWORD(v115) = 257;
  LOWORD(v130) = 257;
  v107 = 257;
  llvm::sys::path::append();
  v7 = v126;
  if ((unint64_t)(v126 + 1) > *((_QWORD *)&v126 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v7 = v126;
  }
  *((_BYTE *)v125 + v7) = 0;
  v8 = 1;
  HIBYTE(v139) = 1;
  if (*(_BYTE *)v125)
  {
    v136 = v125;
    v8 = 3;
  }
  LOBYTE(v139) = v8;
  llvm::MemoryBuffer::getFile();
  if (((uint64_t)v124.__cat_ & 1) != 0)
  {
    *(_QWORD *)&v9.__val_ = *(_QWORD *)&v124.__val_;
    llvm::errorCodeToError(v123, v9);
    *a3 = 0;
  }
  else
  {
    v10 = v123;
    v123 = 0;
    llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)&v95, v10);
    v11 = 0;
    v113 = v95;
    v114 = 0uLL;
    v115 = 0x200000000;
    v116 = 0;
    v118 = 0;
    v117 = 0;
    v119 = (char *)&v121;
    v120 = 0x800000000;
    v122 = 0;
    LODWORD(__p[0]) = 1229407042;
    while (1)
    {
      v12 = (void *)*((unsigned __int8 *)__p + v11);
      sub_22E745EC8((uint64_t)&v113, 8u, (uint64_t)&v136);
      if ((v137 & 1) != 0)
      {
        v78 = v136;
        *a3 = 0;
        a3[1] = v78;
        goto LABEL_129;
      }
      if (v136 != v12)
        break;
      if (++v11 == 4)
      {
        v13 = (_QWORD *)operator new();
        v108[0] = v113;
        v108[1] = v114;
        v109 = v115;
        memset(v110, 0, sizeof(v110));
        v14 = (llvm *)sub_22E6C95B8(v110, v116, v117, (v117 - (_BYTE *)v116) >> 4);
        v111[0] = (char *)v112;
        v111[1] = (char *)0x800000000;
        if ((_DWORD)v120)
          v14 = (llvm *)sub_22E747DF0((uint64_t)v111, (uint64_t)&v119);
        v112[32] = v122;
        *v13 = v10;
        v13[1] = 0;
        v13[2] = v13 + 4;
        v94 = v13 + 2;
        v13[3] = 0x1000000000;
        *((_OWORD *)v13 + 82) = 0u;
        *((_DWORD *)v13 + 332) = 0;
        v13[169] = 0x1000000000;
        v93 = (llvm::StringMapImpl *)(v13 + 167);
        *(_OWORD *)(v13 + 167) = 0u;
        v13[171] = 0;
        if (llvm::getTimeTraceProfilerInstance(v14))
          llvm::timeTraceProfilerBegin();
        v15 = 0;
LABEL_18:
        v92 = v15;
        while (1)
        {
          sub_22E748020((uint64_t)v108, 0, (uint64_t)&v140);
          if ((v140.__r_.__value_.__s.__data_[8] & 1) != 0)
          {
            v83 = v140.__r_.__value_.__r.__words[0];
            v140.__r_.__value_.__r.__words[0] = 0;
            v84 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 16))(*v13);
            v107 = 1283;
            v104[0] = (uint64_t)"Module index '";
            v105 = v84;
            v106 = v85;
            v102[0] = (uint64_t)"' failed: ";
            v103 = 259;
            sub_22F2BB324(v104, v102, (uint64_t)__p);
            v96[0] = v83;
            v86 = (std::string *)v96;
            goto LABEL_143;
          }
          if (LODWORD(v140.__r_.__value_.__l.__data_) == 3)
          {
            if ((v15 & 1) == 0)
              goto LABEL_125;
          }
          else
          {
            if (LODWORD(v140.__r_.__value_.__l.__data_) < 2)
              goto LABEL_125;
            if (LODWORD(v140.__r_.__value_.__l.__data_) == 2)
            {
              if (v15 & 1 | (HIDWORD(v140.__r_.__value_.__r.__words[0]) != 8))
              {
                sub_22E746760((uint64_t)v108, v96);
                if (v96[0])
                {
LABEL_146:
                  v90 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 16))(*v13);
                  v107 = 1283;
                  v104[0] = (uint64_t)"Module index '";
                  v105 = v90;
                  v106 = v91;
                  v102[0] = (uint64_t)"' failed: ";
                  v103 = 259;
                  sub_22F2BB324(v104, v102, (uint64_t)__p);
                  v140.__r_.__value_.__r.__words[0] = v96[0];
                  v96[0] = 0;
                  v86 = &v140;
LABEL_143:
                  sub_22F2432A8(&v86->__r_.__value_.__l.__data_, &v98);
                  v101 = 260;
                  v100[0] = (uint64_t)&v98;
                  sub_22F2BB324((uint64_t *)__p, v100, (uint64_t)&v136);
LABEL_145:
                  llvm::report_fatal_error();
                }
              }
              else
              {
                llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)v108, 8, 0);
                if (v96[0])
                  goto LABEL_146;
                v15 = 1;
              }
              goto LABEL_18;
            }
          }
          v136 = v138;
          v137 = 0x4000000000;
          v96[0] = 0;
          v96[1] = 0;
          llvm::BitstreamCursor::readRecord();
          if ((v135 & 1) != 0)
          {
            v87 = v134;
            v134 = 0;
            v88 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v13 + 16))(*v13);
            v103 = 1283;
            v102[0] = (uint64_t)"Module index '";
            v102[2] = v88;
            v102[3] = v89;
            v100[0] = (uint64_t)"' failed: ";
            v101 = 259;
            sub_22F2BB324(v102, v100, (uint64_t)v104);
            v97 = v87;
            sub_22F2432A8(&v97, &v140);
            v99 = 260;
            v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
            sub_22F2BB324(v104, (uint64_t *)&v98, (uint64_t)__p);
            goto LABEL_145;
          }
          v17 = 0uLL;
          if ((_DWORD)v134 == 2)
            break;
          if ((_DWORD)v134 == 1)
          {
            v19 = *(_QWORD *)v136;
            v20 = *(_QWORD *)v136;
            v21 = *((unsigned int *)v13 + 6);
            if ((_DWORD)v21 == v20)
            {
              v130 = 0uLL;
              v129 = 0uLL;
              *(_OWORD *)__p = 0uLL;
              v131 = v133;
              v132 = 0x400000000;
              v22 = v13[2];
              if (*((_DWORD *)v13 + 7) > v19)
                goto LABEL_34;
              if (v22 <= (unint64_t)__p && v22 + 80 * v20 > (unint64_t)__p)
              {
                v75 = (char *)__p - v22;
                sub_22F2DF848((uint64_t)v94);
                v22 = *v94;
                v23 = (void **)&v75[*v94];
              }
              else
              {
                sub_22F2DF848((uint64_t)v94);
                v22 = *v94;
LABEL_34:
                v23 = __p;
              }
              v24 = v22 + 80 * *((unsigned int *)v13 + 6);
              *(_QWORD *)v24 = *v23;
              v25 = *(_OWORD *)(v23 + 1);
              *(_QWORD *)(v24 + 24) = v23[3];
              *(_OWORD *)(v24 + 8) = v25;
              v23[2] = 0;
              v23[3] = 0;
              v23[1] = 0;
              v26 = *((_OWORD *)v23 + 2);
              v27 = (void *)(v24 + 64);
              *(_QWORD *)(v24 + 48) = v24 + 64;
              v28 = v24 + 48;
              *(_OWORD *)(v28 - 16) = v26;
              *(_QWORD *)(v28 + 8) = 0x400000000;
              v29 = *((_DWORD *)v23 + 14);
              if (v29 && (void **)v28 != v23 + 6)
              {
                v30 = (void **)v23[6];
                if (v30 == v23 + 8)
                {
                  if (v29 < 5)
                  {
                    v31 = *((unsigned int *)v23 + 14);
                    goto LABEL_40;
                  }
                  *(_DWORD *)(v28 + 8) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v31 = *((unsigned int *)v23 + 14);
                  if ((_DWORD)v31)
                  {
                    v30 = (void **)v23[6];
                    v27 = *(void **)v28;
LABEL_40:
                    memcpy(v27, v30, 4 * v31);
                  }
                  *(_DWORD *)(v28 + 8) = v29;
                }
                else
                {
                  if (v27 != (void *)(v28 + 16))
                  {
                    free(v27);
                    v30 = (void **)v23[6];
                    v29 = *((_DWORD *)v23 + 14);
                  }
                  *(_QWORD *)v28 = v30;
                  *(_DWORD *)(v28 + 8) = v29;
                  *(_DWORD *)(v28 + 12) = *((_DWORD *)v23 + 15);
                  v23[6] = v23 + 8;
                  *((_DWORD *)v23 + 15) = 0;
                }
                *((_DWORD *)v23 + 14) = 0;
              }
              ++*((_DWORD *)v13 + 6);
              if (v131 != v133)
                free(v131);
              if (SHIBYTE(v129) < 0)
                operator delete(__p[1]);
            }
            else
            {
              v38 = (v19 + 1);
              if (v38 != v21)
              {
                if (v38 >= v21)
                {
                  if (v38 > *((unsigned int *)v13 + 7))
                  {
                    sub_22F2DF848((uint64_t)v94);
                    v17 = 0uLL;
                    v21 = *((unsigned int *)v13 + 6);
                  }
                  if (v21 != v38)
                  {
                    v39 = *v94 + 80 * v38;
                    v40 = *v94 + 80 * v21;
                    do
                    {
                      *(__n128 *)(v40 + 16) = v17;
                      *(__n128 *)(v40 + 32) = v17;
                      *(__n128 *)v40 = v17;
                      *(_QWORD *)(v40 + 48) = v40 + 64;
                      *(_QWORD *)(v40 + 56) = 0x400000000;
                      v40 += 80;
                    }
                    while (v40 != v39);
                  }
                }
                else
                {
                  sub_22E80808C(*v94 + 80 * v38, *v94 + 80 * v21);
                }
                *((_DWORD *)v13 + 6) = v19 + 1;
              }
            }
            v41 = v136;
            v42 = *v94 + 80 * v20;
            *(_QWORD *)(v42 + 32) = *((_QWORD *)v136 + 1);
            *(_QWORD *)(v42 + 40) = v41[2];
            v43 = v41[3];
            v44 = v42 + 8;
            v45 = *(char *)(v42 + 31);
            if (v45 < 0)
            {
              v49 = *(_QWORD *)(v44 + 16);
              v48 = (v49 & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v48 >= v43)
              {
                v50 = HIBYTE(v49);
              }
              else
              {
                v47 = *(_QWORD *)(v44 + 8);
LABEL_63:
                std::string::__grow_by((std::string *)v44, v48, v43 - v48, v47, 0, v47, 0);
                *(_QWORD *)(v44 + 8) = 0;
                LOBYTE(v50) = *(_BYTE *)(v44 + 23);
              }
              v46 = (_BYTE *)v44;
              if ((v50 & 0x80) != 0)
                v46 = *(_BYTE **)v44;
            }
            else
            {
              v46 = (_BYTE *)v44;
              if (v43 > 0x16uLL)
              {
                v47 = v45;
                v48 = 22;
                goto LABEL_63;
              }
            }
            if ((_DWORD)v43)
            {
              v51 = v41 + 4;
              v52 = 8 * v43;
              do
              {
                v53 = *v51++;
                *v46++ = v53;
                v52 -= 8;
              }
              while (v52);
            }
            *v46 = 0;
            if (*(char *)(v44 + 23) < 0)
              *(_QWORD *)(v44 + 8) = v43;
            else
              *(_BYTE *)(v44 + 23) = v43 & 0x7F;
            v54 = (char *)v136;
            v55 = *((unsigned int *)v136 + 2 * (v43 + 4));
            v56 = *v94 + 80 * v20;
            v57 = v56 + 48;
            v58 = *(unsigned int *)(v56 + 56);
            if (v55 + v58 > (unint64_t)*(unsigned int *)(v56 + 60))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v58 = *(unsigned int *)(v57 + 8);
              if (v55)
                goto LABEL_75;
            }
            else if (*((_DWORD *)v136 + 2 * (v43 + 4)))
            {
LABEL_75:
              v59 = &v54[8 * (v43 + 5)];
              v60 = (_DWORD *)(*(_QWORD *)v57 + 4 * v58);
              v61 = 8 * v55;
              do
              {
                v62 = *(_QWORD *)v59;
                v59 += 8;
                *v60++ = v62;
                v61 -= 8;
              }
              while (v61);
              LODWORD(v58) = *(_DWORD *)(v57 + 8);
            }
            *(_DWORD *)(v57 + 8) = v58 + v55;
            __p[0] = (void *)llvm::sys::path::stem();
            __p[1] = v63;
            LOBYTE(v104[0]) = 45;
            v64 = (char *)llvm::StringRef::rfind();
            if (v64 == (char *)-1)
            {
              v65 = __p[0];
              v66 = (char *)__p[1];
            }
            else
            {
              v65 = __p[0];
              if (__p[1] >= v64)
                v66 = v64;
              else
                v66 = (char *)__p[1];
            }
            __p[0] = v65;
            __p[1] = v66;
            v67 = llvm::StringMapImpl::LookupBucketFor();
            v68 = *(_QWORD *)v93;
            v69 = v67;
            v70 = *(_QWORD *)(*(_QWORD *)v93 + 8 * v67);
            if (v70)
            {
              if (v70 == -8)
              {
                --*((_DWORD *)v13 + 338);
                goto LABEL_84;
              }
            }
            else
            {
LABEL_84:
              v71 = MEMORY[0x23489D23C](v66 + 17, 8);
              v72 = v71;
              v73 = v71 + 16;
              if (v66)
                memcpy((void *)(v71 + 16), v65, (size_t)v66);
              v66[v73] = 0;
              *(_QWORD *)v72 = v66;
              *(_DWORD *)(v72 + 8) = 0;
              *(_QWORD *)(v68 + 8 * v69) = v72;
              ++*((_DWORD *)v13 + 337);
              for (i = (uint64_t *)(v13[167] + 8 * llvm::StringMapImpl::RehashTable(v93)); ; ++i)
              {
                v70 = *i;
                if (*i && v70 != -8)
                  break;
              }
            }
            *(_DWORD *)(v70 + 8) = v19;
            v15 = v92;
LABEL_106:
            if ((v135 & 1) != 0)
            {
              v77 = v134;
              v134 = 0;
              if (v77)
                (*(void (**)(char *, __n128))(*(_QWORD *)v77 + 8))(v77, v17);
            }
            v18 = 1;
            goto LABEL_110;
          }
          if ((_DWORD)v134 || (_DWORD)v137 && *(_QWORD *)v136 == 1)
            goto LABEL_106;
          v18 = 0;
LABEL_110:
          v16 = (llvm *)v136;
          if (v136 != v138)
            free(v136);
          if ((v18 & 1) == 0)
          {
LABEL_125:
            TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance(v16);
            if (TimeTraceProfilerInstance)
              llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
            *a3 = v13;
            a3[1] = 0;
            sub_22E746F74(v111);
            v10 = 0;
            if (v110[0])
            {
              sub_22E3B485C((uint64_t *)v110);
              operator delete(v110[0]);
              v10 = 0;
            }
            goto LABEL_129;
          }
        }
        v32 = *(_QWORD *)v136;
        if (*(_QWORD *)v136)
        {
          v33 = v96[0];
          v34 = v96[0] + 4;
          v35 = v96[0] + v32 + 8;
          v36 = *(_QWORD *)(v96[0] + v32);
          v37 = (_QWORD *)operator new();
          *v37 = v36;
          v37[1] = v35;
          v37[2] = v33;
          v37[4] = v34;
          v13[1] = v37;
        }
        goto LABEL_106;
      }
    }
    *(_QWORD *)&v142.__val_ = std::generic_category();
    v142.__cat_ = (const std::error_category *)"expected signature BCGI";
    llvm::createStringError((llvm *)0x5C, v142, v79);
    *a3 = 0;
    if ((v137 & 1) != 0)
    {
      v80 = v136;
      v136 = 0;
      if (v80)
        (*(void (**)(void *))(*(_QWORD *)v80 + 8))(v80);
    }
LABEL_129:
    sub_22E746F74(&v119);
    if (v116)
    {
      sub_22E3B485C((uint64_t *)&v116);
      operator delete(v116);
      if (!v10)
        goto LABEL_132;
      goto LABEL_131;
    }
    if (v10)
LABEL_131:
      (*(void (**)(llvm::MemoryBuffer *))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_132:
  if (((uint64_t)v124.__cat_ & 1) == 0)
  {
    v82 = v123;
    v123 = 0;
    if (v82)
      (*(void (**)(llvm::MemoryBuffer *))(*(_QWORD *)v82 + 8))(v82);
  }
  if (v125 != v127)
    free(v125);
}

uint64_t sub_22E805850(uint64_t a1, unsigned __int8 *__s2, size_t __n, llvm::SmallPtrSetImplBase *this)
{
  void *v8;
  uint64_t v9;
  int v10;
  size_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  int v19;
  _WORD *v20;
  BOOL v21;
  uint64_t v23;
  unsigned int v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  unsigned int v32;
  _BYTE v33[8];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8 != *(void **)this)
  {
    v23 = *((unsigned int *)this + 4);
    if (v23 >= 0x21 && 4 * (*((_DWORD *)this + 5) - *((_DWORD *)this + 6)) < v23)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear(this);
      goto LABEL_3;
    }
    memset(v8, 255, 8 * v23);
  }
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
LABEL_3:
  v9 = *(_QWORD *)(a1 + 8);
  if (!v9)
    return 0;
  ++*(_DWORD *)(a1 + 1368);
  v10 = 5381;
  if (__n)
  {
    v11 = __n;
    v12 = __s2;
    do
    {
      v13 = *v12++;
      v10 = 33 * v10 + v13;
      --v11;
    }
    while (v11);
  }
  v14 = *(unsigned int *)(*(_QWORD *)(v9 + 8) + 4 * ((*(_DWORD *)v9 - 1) & v10));
  if (!(_DWORD)v14)
    return 0;
  v15 = (_WORD *)(*(_QWORD *)(v9 + 16) + v14);
  v16 = (unsigned __int16)*v15;
  if (!*v15)
    return 0;
  v17 = v15 + 1;
  while (1)
  {
    v18 = (unsigned __int16)v17[2];
    v19 = (unsigned __int16)v17[3];
    v20 = v17 + 4;
    v21 = *(_DWORD *)v17 == v10 && __n == v18;
    if (v21 && (!__n || !memcmp(v17 + 4, __s2, __n)))
      break;
    v17 = (_WORD *)((char *)v20 + (v19 + v18));
    if (!--v16)
      return 0;
  }
  v32 = 0;
  if (v19)
  {
    v25 = 0;
    v26 = (int *)((char *)v20 + __n);
    do
    {
      v28 = *v26++;
      v27 = v28;
      if (v25 >= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v32;
      }
      *(_DWORD *)&v33[4 * v25] = v27;
      v25 = ++v32;
      v19 -= 4;
    }
    while (v19);
    if (v25)
    {
      v29 = 0;
      v30 = 4 * v25;
      do
      {
        v31 = *(const void **)(*(_QWORD *)(a1 + 16) + 80 * *(unsigned int *)&v33[v29]);
        if (v31)
          sub_22E3BA850((uint64_t)this, v31);
        v29 += 4;
      }
      while (v30 != v29);
    }
  }
  ++*(_DWORD *)(a1 + 1372);
  return 1;
}

uint64_t sub_22E805A94(uint64_t a1, uint64_t a2)
{
  int Key;
  uint64_t v5;
  uint64_t v6;
  llvm *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;

  v19 = a2;
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    return 1;
  v5 = Key;
  if (Key == (unint64_t)*(unsigned int *)(a1 + 1344))
    return 1;
  v6 = *(_QWORD *)(a1 + 1336);
  v7 = *(llvm **)(v6 + 8 * Key);
  v8 = *((_DWORD *)v7 + 2);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a2 + 216);
  v11 = v10;
  do
  {
    v12 = *(_QWORD *)(v11 + 8);
    v11 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v12 & 2) != 0 && v11);
  v13 = (_QWORD *)(v9 + 80 * v8);
  if (*(_QWORD *)(v11 + 24) != v13[4])
    goto LABEL_14;
  do
  {
    v14 = *(_QWORD *)(v10 + 8);
    v10 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v14 & 2) != 0 && v10);
  if (*(_QWORD *)(v10 + 32) == *(_QWORD *)(v9 + 80 * v8 + 40))
  {
    *v13 = a2;
    v15 = *(_DWORD *)(*(_QWORD *)(v6 + 8 * Key) + 8);
    v16 = sub_22E7448C8((_DWORD *)(a1 + 1312), &v19);
    v17 = 0;
    *((_DWORD *)v16 + 2) = v15;
    v7 = *(llvm **)(v6 + 8 * v5);
  }
  else
  {
LABEL_14:
    v17 = 1;
  }
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v7, (void *)(*(_QWORD *)v7 + 17));
  return v17;
}

void sub_22E805BD8()
{
  uint64_t v0;
  unint64_t v1;
  size_t v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int State;
  const char *v12;
  std::error_code v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  const std::error_category *v22;
  char v23;
  const void *v24;
  size_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  int v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  char *v48;
  unint64_t *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t **v63;
  uint64_t **v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  void *v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  char *v74;
  int v75;
  int v76;
  _DWORD *v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  const void *v81;
  size_t v82;
  int v83;
  unsigned int v84;
  uint64_t **v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  uint64_t *k;
  unsigned __int16 *v93;
  BOOL v94;
  unint64_t v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  llvm::MemoryBuffer *v108;
  std::__shared_weak_count *v109;
  unint64_t *p_shared_owners;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t **v115;
  __int128 v116;
  _QWORD *v117;
  uint64_t *v121;
  uint64_t **v122;
  int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  int v129;
  int v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  char v137;
  const char *v138;
  char **v139;
  char **v140;
  void *v141;
  char *v142;
  const char *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  char **v150;
  char **v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t **v168;
  llvm::raw_ostream *v169;
  unsigned int v170;
  uint64_t *v172;
  const void **v173;
  uint64_t v174;
  int v175;
  unsigned __int8 *v176;
  char *v177;
  uint64_t v178;
  void *v179;
  void **v180;
  unsigned int v181;
  uint64_t v182;
  int j;
  int v184;
  char *v185;
  uint64_t *v186;
  BOOL v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  char *v191;
  int v192;
  uint64_t i;
  __int16 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v204;
  unint64_t v205;
  unsigned int v206;
  char *v207;
  unsigned int v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  char *v212;
  void **v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  _QWORD *v219;
  unint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  unint64_t v223;
  unint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  unint64_t v227;
  llvm *v228;
  llvm *TimeTraceProfilerInstance;
  unsigned int v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  _BYTE *v234;
  int v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  unsigned __int16 *v239;
  int v240;
  void *v241;
  uint64_t *v242;
  uint64_t **v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  char v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  uint64_t v249;
  const std::error_category *v250;
  uint64_t v251;
  uint64_t v252;
  llvm *v253;
  uint64_t v254;
  unsigned int v255;
  void *v256;
  char **v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t **v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  void *__p;
  std::__shared_weak_count *v268;
  uint64_t v269;
  void *v270;
  char v271;
  _BYTE v272[32];
  __int16 v273;
  void *v274;
  __int128 v275;
  _BYTE v276[128];
  void *v277;
  char v278;
  void *v279[3];
  unint64_t v280;
  int v281;
  int v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  uint64_t v287;
  __int128 v288;
  int v289;
  uint64_t v290;
  char v291;
  unsigned int v292[2];
  char v293;
  void *v294;
  unint64_t v295;
  uint64_t v296;
  void **v297;
  uint64_t v298;
  void *v299[3];
  char *v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD v303[2];
  void *v304;
  uint64_t v305;
  llvm::MemoryBuffer *v306;
  std::error_code v307;
  _BYTE v308[32];
  __int128 v309;
  void *v310;
  uint64_t v311;
  _QWORD v312[5];
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char v318;
  uint64_t v319;
  int v320;
  void **p_p;
  void **v322;
  __int128 v323;
  _WORD v324[8];
  uint64_t v325;
  std::error_code v326;
  std::error_code v327;
  std::error_code v328;
  std::error_code v329;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v9 = v8;
  v325 = *MEMORY[0x24BDAC8D0];
  v274 = v276;
  v275 = xmmword_22F44E310;
  if (v1 < 0x81)
  {
    v10 = 0;
    if (!v1)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
  v10 = v275;
  if (v2)
  {
LABEL_3:
    memcpy((char *)v274 + v10, v4, v2);
    v10 = v275;
  }
LABEL_4:
  *(_QWORD *)&v275 = v10 + v2;
  *(_QWORD *)v308 = "modules.idx";
  LOWORD(v309) = 259;
  v273 = 257;
  LOWORD(v298) = 257;
  LOWORD(v281) = 257;
  llvm::sys::path::append();
  MEMORY[0x23489CF18](v272, v274, v275);
  State = llvm::LockFileManager::getState((llvm::LockFileManager *)v272);
  if (State == 1)
  {
    *(_QWORD *)&v13.__val_ = std::generic_category();
    v13.__cat_ = (const std::error_category *)"someone else is building the index";
    v14 = 16;
    goto LABEL_8;
  }
  if (State == 2)
  {
    *(_QWORD *)&v13.__val_ = std::generic_category();
    v13.__cat_ = (const std::error_category *)"LFS error";
    v14 = 5;
LABEL_8:
    llvm::createStringError((llvm *)v14, v13, v12);
    goto LABEL_9;
  }
  v251 = v7;
  v252 = v6;
  v253 = 0;
  v254 = 0;
  v255 = 0;
  v256 = 0;
  v257 = 0;
  v260 = 0;
  v261 = 0;
  v258 = 0;
  v259 = &v260;
  v262 = 0;
  v263 = 0;
  v264 = 0x2000000000;
  LODWORD(v249) = 0;
  v250 = std::system_category();
  LOWORD(v309) = 261;
  *(_QWORD *)v308 = v4;
  *(_QWORD *)&v308[8] = v2;
  sub_22F2A7E34((uint64_t)&v247, (const char **)v308, &v249, 1);
  v244 = 0;
  v245 = 0;
  v246 = 1;
  v15 = sub_22E6D5D28(&v247, &v244);
  v242 = v9;
  if ((v15 & 1) != 0 || (_DWORD)v249)
  {
LABEL_155:
    v109 = v245;
    if (v245)
    {
      p_shared_owners = (unint64_t *)&v245->__shared_owners_;
      do
        v111 = __ldaxr(p_shared_owners);
      while (__stlxr(v111 - 1, p_shared_owners));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    v112 = v248;
    if (v248)
    {
      v113 = (unint64_t *)&v248->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v322 = (void **)v324;
    v323 = xmmword_22F44E350;
    v279[0] = &v322;
    v279[1] = 0;
    v279[2] = (void *)0x20000000;
    v280 = 0;
    v281 = 2;
    v283 = 0u;
    v284 = 0u;
    v285 = 0u;
    v286 = 0u;
    v287 = 0;
    v115 = v259;
    if (v259 != &v260)
    {
      do
      {
        v116 = *((_OWORD *)v115 + 3);
        *(_OWORD *)v308 = *((_OWORD *)v115 + 2);
        *(_OWORD *)&v308[16] = v116;
        v309 = *((_OWORD *)v115 + 4);
        v117 = *(_QWORD **)v308;
        v15 = sub_22E8078D8((uint64_t)&v251, *(void **)v308);
        if (*(_OWORD *)(v15 + 40) == 0 && *(_DWORD *)(v15 + 56) == 0)
        {
          if (*(_QWORD *)&v308[8] != v117[3] || *(_QWORD *)&v308[16] != v117[4])
            goto LABEL_207;
        }
        else
        {
          v15 = sub_22E8078D8((uint64_t)&v251, v117);
          if (*(_QWORD *)(v15 + 40) != *(_QWORD *)&v308[24]
            || *(_QWORD *)(v15 + 48) != (_QWORD)v309
            || *(_DWORD *)(v15 + 56) != (unint64_t)DWORD2(v309))
          {
LABEL_207:
            *(_QWORD *)&v328.__val_ = std::generic_category();
            v328.__cat_ = (const std::error_category *)"failed writing index";
            llvm::createStringError((llvm *)5, v328, v138);
            sub_22E6C6130((uint64_t)v279);
            goto LABEL_208;
          }
        }
        v121 = v115[1];
        if (v121)
        {
          do
          {
            v122 = (uint64_t **)v121;
            v121 = (uint64_t *)*v121;
          }
          while (v121);
        }
        else
        {
          do
          {
            v122 = (uint64_t **)v115[2];
            v21 = *v122 == (uint64_t *)v115;
            v115 = v122;
          }
          while (!v21);
        }
        v115 = v122;
      }
      while (v122 != &v260);
    }
    if (llvm::getTimeTraceProfilerInstance((llvm *)v15))
      llvm::timeTraceProfilerBegin();
    v123 = HIDWORD(v280) | (66 << v280);
    HIDWORD(v280) = v123;
    v124 = v280 + 8;
    if ((v280 + 8) >= 0x20)
    {
      sub_22E740FDC((const char ***)v279, v123);
      if ((_DWORD)v280)
        v123 = 0x42u >> -(char)v280;
      else
        v123 = 0;
      v124 = ((_BYTE)v280 + 8) & 0x1F;
    }
    v125 = (67 << v124) | v123;
    v280 = __PAIR64__(v125, v124);
    if (v124 >= 0x18)
    {
      sub_22E740FDC((const char ***)v279, v125);
      if ((_DWORD)v280)
        v125 = 0x43u >> -(char)v280;
      else
        v125 = 0;
      v126 = ((_BYTE)v280 + 8) & 0x1F;
    }
    else
    {
      v126 = v124 + 8;
    }
    v127 = (71 << v126) | v125;
    v280 = __PAIR64__(v127, v126);
    if (v126 >= 0x18)
    {
      sub_22E740FDC((const char ***)v279, v127);
      if ((_DWORD)v280)
        v127 = 0x47u >> -(char)v280;
      else
        v127 = 0;
      v128 = ((_BYTE)v280 + 8) & 0x1F;
    }
    else
    {
      v128 = v126 + 8;
    }
    v129 = (73 << v128) | v127;
    v280 = __PAIR64__(v129, v128);
    if (v128 >= 0x18)
    {
      sub_22E740FDC((const char ***)v279, v129);
      v230 = 0x49u >> -(char)v280;
      if (!(_DWORD)v280)
        v230 = 0;
      HIDWORD(v280) = v230;
      v130 = ((_BYTE)v280 + 8) & 0x1F;
    }
    else
    {
      v130 = v128 + 8;
    }
    LODWORD(v280) = v130;
    *(_QWORD *)v308 = &v308[16];
    *(_QWORD *)&v308[8] = 0x4000000000;
    sub_22E74181C((uint64_t)v279, 0, 2u);
    v282 = -1;
    v131 = (uint64_t *)v286;
    if (*((_QWORD *)&v286 + 1) != (_QWORD)v286)
    {
      v132 = (uint64_t *)(*((_QWORD *)&v286 + 1) - 24);
      do
      {
        if (*v132)
        {
          sub_22E3B485C(v132);
          operator delete((void *)*v132);
        }
        v133 = v132 - 1;
        v132 -= 4;
      }
      while (v133 != v131);
    }
    v134 = 0;
    *((_QWORD *)&v286 + 1) = v131;
    *(_DWORD *)&v308[8] = 0;
    if (!*(_DWORD *)&v308[12])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v134 = *(_DWORD *)&v308[8];
    }
    *(_QWORD *)(*(_QWORD *)v308 + 8 * v134) = 8;
    ++*(_DWORD *)&v308[8];
    v135 = 1u;
    sub_22E742038((llvm::raw_ostream *)v279, 1u, (uint64_t)v308, 0);
    v136 = 0;
    *(_DWORD *)&v308[8] = 0;
    v137 = 71;
    do
    {
      if (v136 >= *(_DWORD *)&v308[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v136 = *(_DWORD *)&v308[8];
      }
      *(_QWORD *)(*(_QWORD *)v308 + 8 * v136) = v137;
      v136 = ++*(_DWORD *)&v308[8];
      v137 = aGlobalIndexBlo[v135++];
    }
    while (v135 != 19);
    sub_22E742038((llvm::raw_ostream *)v279, 2u, (uint64_t)v308, 0);
    sub_22E741190(0, "INDEX_METADATA", (llvm::raw_ostream *)v279, (uint64_t)v308);
    sub_22E741190(1u, "MODULE", (llvm::raw_ostream *)v279, (uint64_t)v308);
    sub_22E741190(2u, "IDENTIFIER_INDEX", (llvm::raw_ostream *)v279, (uint64_t)v308);
    sub_22E7416F4((uint64_t)v279);
    if (*(_BYTE **)v308 != &v308[16])
      free(*(void **)v308);
    sub_22E74181C((uint64_t)v279, 8u, 3u);
    v310 = v312;
    v312[0] = 1;
    v311 = 0x200000001;
    sub_22E807D8C((int *)v279, 0, (uint64_t)&v310);
    v150 = (char **)v256;
    v151 = v257;
    while (v150 != v151)
    {
      LODWORD(v311) = 0;
      v152 = *((unsigned int *)v150 + 2);
      if (HIDWORD(v311))
      {
        v153 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v153 = v311;
      }
      *((_QWORD *)v310 + v153) = v152;
      v154 = v311 + 1;
      LODWORD(v311) = v154;
      v155 = *((_QWORD *)*v150 + 3);
      if (v154 >= HIDWORD(v311))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v154 = v311;
      }
      *((_QWORD *)v310 + v154) = v155;
      v156 = v311 + 1;
      LODWORD(v311) = v156;
      v157 = *((_QWORD *)*v150 + 4);
      if (v156 >= HIDWORD(v311))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v156 = v311;
      }
      *((_QWORD *)v310 + v156) = v157;
      v158 = v311 + 1;
      LODWORD(v311) = v311 + 1;
      v159 = *((_QWORD *)*v150 + 11);
      do
      {
        v160 = (_QWORD *)v159;
        v161 = *(_QWORD *)(v159 + 8);
        if ((v161 & 2) == 0)
          break;
        v159 = v161 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v159);
      v164 = *v160;
      v163 = (char *)(v160 + 4);
      v162 = v164;
      if (v158 >= HIDWORD(v311))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v158 = v311;
      }
      *((_QWORD *)v310 + v158) = v162;
      LODWORD(v311) = v311 + 1;
      sub_22E7F0760((uint64_t)&v310, v163, &v163[v162]);
      v165 = *((unsigned int *)v150 + 6);
      v166 = v311;
      if (v311 >= (unint64_t)HIDWORD(v311))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v166 = v311;
      }
      *((_QWORD *)v310 + v166) = v165;
      LODWORD(v311) = v311 + 1;
      sub_22F2DF7BC((uint64_t)&v310, v150[2], &v150[2][4 * *((unsigned int *)v150 + 6)]);
      sub_22E807D8C((int *)v279, 1u, (uint64_t)&v310);
      v150 += 9;
    }
    v296 = 0;
    v295 = 0;
    v297 = v299;
    v298 = 0x400000000;
    v301 = (uint64_t)v303;
    v302 = 0;
    v303[1] = 0;
    v303[0] = 0;
    v294 = (void *)64;
    v167 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
    if (!v167)
    {
      v231 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      sub_22E8078D8(v231, v232);
      return;
    }
    v304 = v167;
    v168 = v262;
    if ((_DWORD)v263)
    {
      while (!*v168 || *v168 + 1 == 0)
        ++v168;
    }
    v243 = &v262[v263];
    if (v168 == v243)
    {
LABEL_251:
      *(_QWORD *)v308 = &v308[24];
      *(_OWORD *)&v308[8] = xmmword_22F45FB10;
      v169 = (llvm::raw_ostream *)sub_22F242C48((uint64_t)&v313, (uint64_t)v308);
      LODWORD(v306) = 0;
      llvm::raw_ostream::write(v169, (const char *)&v306);
      if (HIDWORD(v294) >= 3)
      {
        v188 = ((4 * HIDWORD(v294)) / 6uLL) | ((4 * HIDWORD(v294)) / 3uLL);
        v189 = v188 | (v188 >> 2) | ((v188 | (v188 >> 2)) >> 4);
        v170 = (((v189 | (v189 >> 8)) >> 16) | v189 | (v189 >> 8)) + 1;
      }
      else
      {
        v170 = 1;
      }
      if (v170 == (_DWORD)v294 || (sub_22E807E44((unsigned int *)&v294, v170), (_DWORD)v294))
      {
        v190 = 0;
        do
        {
          v191 = (char *)v304 + 16 * v190;
          if (*((_QWORD *)v191 + 1))
          {
            v192 = (*(uint64_t (**)(uint64_t *))(v313 + 80))(&v313);
            *(_DWORD *)v191 = v192 + v317 - v315;
            LOWORD(v306) = *((_DWORD *)v191 + 1);
            llvm::raw_ostream::write((llvm::raw_ostream *)&v313, (const char *)&v306);
            for (i = *((_QWORD *)v191 + 1); i; i = *(_QWORD *)(i + 40))
            {
              LODWORD(v306) = *(_DWORD *)(i + 48);
              llvm::raw_ostream::write((llvm::raw_ostream *)&v313, (const char *)&v306);
              v194 = *(_WORD *)(i + 24);
              LOWORD(v306) = *(_QWORD *)(i + 8);
              llvm::raw_ostream::write((llvm::raw_ostream *)&v313, (const char *)&v306);
              LOWORD(v306) = 4 * v194;
              llvm::raw_ostream::write((llvm::raw_ostream *)&v313, (const char *)&v306);
              llvm::raw_ostream::write((llvm::raw_ostream *)&v313, *(const char **)i);
              v195 = *(unsigned int *)(i + 24);
              if ((_DWORD)v195)
              {
                v196 = 0;
                v197 = 4 * v195;
                do
                {
                  LODWORD(v306) = *(_DWORD *)(*(_QWORD *)(i + 16) + v196);
                  llvm::raw_ostream::write((llvm::raw_ostream *)&v313, (const char *)&v306);
                  v196 += 4;
                }
                while (v197 != v196);
              }
            }
          }
          ++v190;
        }
        while (v190 < v294);
      }
      v198 = (*(uint64_t (**)(uint64_t *))(v313 + 80))(&v313);
      v199 = v317 - v315 + v198;
      v200 = (v199 + 3) & 0x1FFFFFFFCLL;
      v201 = v200 - v199;
      if (v200 != v199)
      {
        v202 = v199 - v200;
        do
        {
          LOBYTE(v306) = 0;
          llvm::raw_ostream::write((llvm::raw_ostream *)&v313, (const char *)&v306);
        }
        while (!__CFADD__(v202++, 1));
      }
      LODWORD(v306) = (_DWORD)v294;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v313, (const char *)&v306);
      LODWORD(v306) = HIDWORD(v294);
      llvm::raw_ostream::write((llvm::raw_ostream *)&v313, (const char *)&v306);
      if ((_DWORD)v294)
      {
        v204 = 0;
        v205 = 0;
        do
        {
          LODWORD(v306) = *(_DWORD *)((char *)v304 + v204);
          llvm::raw_ostream::write((llvm::raw_ostream *)&v313, (const char *)&v306);
          ++v205;
          v204 += 16;
        }
        while (v205 < v294);
      }
      v206 = v201 + v199;
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v313);
      v207 = (char *)operator new(0x228uLL);
      *(_QWORD *)v207 = &unk_24FA715D0;
      *((_QWORD *)v207 + 1) = 0;
      *(_OWORD *)(v207 + 88) = 0u;
      *(_OWORD *)(v207 + 104) = 0u;
      *(_OWORD *)(v207 + 120) = 0u;
      *(_OWORD *)(v207 + 136) = 0u;
      *(_OWORD *)(v207 + 152) = 0u;
      *(_OWORD *)(v207 + 168) = 0u;
      *(_OWORD *)(v207 + 184) = 0u;
      *(_OWORD *)(v207 + 200) = 0u;
      *(_OWORD *)(v207 + 216) = 0u;
      *(_OWORD *)(v207 + 232) = 0u;
      *(_OWORD *)(v207 + 248) = 0u;
      *(_OWORD *)(v207 + 264) = 0u;
      *(_OWORD *)(v207 + 280) = 0u;
      *(_OWORD *)(v207 + 296) = 0u;
      *(_OWORD *)(v207 + 312) = 0u;
      *(_OWORD *)(v207 + 328) = 0u;
      *(_OWORD *)(v207 + 344) = 0u;
      *(_OWORD *)(v207 + 360) = 0u;
      *(_OWORD *)(v207 + 376) = 0u;
      *(_OWORD *)(v207 + 392) = 0u;
      *(_OWORD *)(v207 + 408) = 0u;
      *(_OWORD *)(v207 + 424) = 0u;
      *(_OWORD *)(v207 + 440) = 0u;
      *(_OWORD *)(v207 + 456) = 0u;
      *(_OWORD *)(v207 + 472) = 0u;
      *(_OWORD *)(v207 + 488) = 0u;
      *(_OWORD *)(v207 + 504) = 0u;
      *(_OWORD *)(v207 + 520) = 0u;
      *(_OWORD *)(v207 + 536) = 0u;
      *(_OWORD *)(v207 + 40) = xmmword_22F45E090;
      *((_QWORD *)v207 + 2) = 0;
      *((_QWORD *)v207 + 3) = v207 + 40;
      *(_OWORD *)(v207 + 56) = xmmword_22F45E080;
      *(_OWORD *)(v207 + 72) = xmmword_22F45E0D0;
      *((_QWORD *)v207 + 4) = 0x2000000003;
      __p = v207 + 24;
      v268 = (std::__shared_weak_count *)v207;
      v208 = sub_22E74761C((uint64_t)v279, (uint64_t)&__p);
      v209 = v268;
      if (v268)
      {
        v210 = (unint64_t *)&v268->__shared_owners_;
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
          std::__shared_weak_count::__release_weak(v209);
        }
      }
      v313 = 2;
      v314 = v206;
      sub_22E74241C((llvm::raw_ostream *)v279, v208, (uint64_t)&v313, 2, *(char **)v308, *(uint64_t *)&v308[8], 0);
      if (*(_BYTE **)v308 != &v308[24])
        free(*(void **)v308);
      free(v304);
      if ((_DWORD)v298)
      {
        v212 = (char *)v297;
        v213 = &v297[v298];
        do
        {
          v214 = *(_QWORD *)v212;
          if (*(void **)v212 == v297[v298 - 1])
          {
            v216 = v295;
          }
          else
          {
            v215 = ((unint64_t)(v212 - (char *)v297) >> 10) & 0x1FFFFFF;
            if (v215 >= 0x1E)
              LOBYTE(v215) = 30;
            v216 = v214 + (4096 << v215);
          }
          v217 = (v214 + 7) & 0xFFFFFFFFFFFFFFF8;
          if (v217 + 56 <= v216)
          {
            v218 = (_QWORD *)(v217 + 32);
            do
            {
              v219 = (_QWORD *)*(v218 - 2);
              if (v218 != v219)
                free(v219);
              v220 = (unint64_t)(v218 + 10);
              v218 += 7;
            }
            while (v220 <= v216);
          }
          v212 += 8;
        }
        while (v212 != (char *)v213);
      }
      if ((_DWORD)v302)
      {
        v221 = (_QWORD *)v301;
        v222 = (_QWORD *)(v301 + 16 * v302);
        do
        {
          v223 = (*v221 + 7) & 0xFFFFFFFFFFFFFFF8;
          v224 = *v221 + v221[1];
          if (v223 + 56 <= v224)
          {
            v225 = (_QWORD *)(v223 + 32);
            do
            {
              v226 = (_QWORD *)*(v225 - 2);
              if (v225 != v226)
                free(v226);
              v227 = (unint64_t)(v225 + 10);
              v225 += 7;
            }
            while (v227 <= v224);
          }
          v221 += 2;
        }
        while (v221 != v222);
      }
      sub_22E6188F4((uint64_t)&v295);
      sub_22E3B4EF4((uint64_t)&v295);
      sub_22E7416F4((uint64_t)v279);
      v228 = (llvm *)v310;
      if (v310 != v312)
        free(v310);
      TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance(v228);
      if (TimeTraceProfilerInstance)
        llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
      sub_22E6C6130((uint64_t)v279);
      LOWORD(v309) = 773;
      *(_QWORD *)v308 = v274;
      *(_QWORD *)&v308[8] = v275;
      *(_QWORD *)&v308[16] = "-%%%%%%%%";
      llvm::Twine::str((llvm::Twine *)v308);
      llvm::writeFileAtomically();
      if (SHIBYTE(v296) < 0)
        operator delete(v294);
LABEL_208:
      if (v322 != (void **)v324)
        free(v322);
      goto LABEL_210;
    }
    v172 = *v168;
    while (1)
    {
      v173 = (const void **)(v172 + 1);
      v174 = *v172;
      v175 = (int)v294;
      ++HIDWORD(v294);
      if (3 * (int)v294 <= (4 * HIDWORD(v294)))
      {
        sub_22E807E44((unsigned int *)&v294, (2 * (_DWORD)v294));
        v175 = (int)v294;
      }
      v176 = (unsigned __int8 *)(v172 + 4);
      v177 = (char *)v304;
      v178 = sub_22E3CD3D4((uint64_t)&v295, 56, 3);
      *(_QWORD *)v178 = v172 + 4;
      *(_QWORD *)(v178 + 8) = v174;
      v179 = (void *)(v178 + 32);
      *(_QWORD *)(v178 + 16) = v178 + 32;
      v180 = (void **)(v178 + 16);
      *(_QWORD *)(v178 + 24) = 0x200000000;
      v181 = *((_DWORD *)v172 + 4);
      if (!v181 || v180 == (void **)v173)
        goto LABEL_270;
      if (v181 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v182 = *((unsigned int *)v172 + 4);
        if (!(_DWORD)v182)
          goto LABEL_269;
        v179 = *v180;
      }
      else
      {
        v182 = *((unsigned int *)v172 + 4);
      }
      memcpy(v179, *v173, 4 * v182);
LABEL_269:
      *(_DWORD *)(v178 + 24) = v181;
LABEL_270:
      *(_QWORD *)(v178 + 40) = 0;
      for (j = 5381; v174; --v174)
      {
        v184 = *v176++;
        j = 33 * j + v184;
      }
      *(_DWORD *)(v178 + 48) = j;
      v185 = &v177[16 * ((v175 - 1) & j)];
      *(_QWORD *)(v178 + 40) = *((_QWORD *)v185 + 1);
      ++*((_DWORD *)v185 + 1);
      *((_QWORD *)v185 + 1) = v178;
      do
      {
        v186 = v168[1];
        ++v168;
        v172 = v186;
        if (v186)
          v187 = v172 + 1 == 0;
        else
          v187 = 1;
      }
      while (v187);
      if (v168 == v243)
        goto LABEL_251;
    }
  }
  v16 = &v308[16];
  v238 = MEMORY[0x24BED83D8] + 16;
  v237 = v7;
  while (1)
  {
    v17 = (_DWORD *)llvm::sys::path::extension();
    if (v18 != 4 || *v17 != 1835233326)
      break;
    v23 = *(_BYTE *)(v247 + 31);
    if (v23 >= 0)
      v24 = (const void *)(v247 + 8);
    else
      v24 = *(const void **)(v247 + 8);
    if (v23 >= 0)
      v25 = v23 & 0x7F;
    else
      v25 = *(_QWORD *)(v247 + 16);
    sub_22F1D07D8(v7, v24, v25, 0, 1, (uint64_t)&v270);
    if ((v271 & 1) != 0)
      goto LABEL_22;
    v241 = v270;
    sub_22F1D1980(v251, (uint64_t)v270, 1, 1, 0, (uint64_t)&v306);
    if (((uint64_t)v307.__cat_ & 1) != 0)
    {
      *(_QWORD *)&v326.__val_ = *(_QWORD *)&v307.__val_;
      v326.__cat_ = (const std::error_category *)"failed getting buffer for module file";
      llvm::createStringError(v306, v326, v26);
    }
    else
    {
      v27 = v252;
      llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)&v310, v306);
      v28 = 0;
      v294 = (void *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v27 + 24))(v27, &v310);
      v295 = v29;
      v296 = 0;
      v297 = 0;
      v298 = 0x200000000;
      memset(v299, 0, sizeof(v299));
      v300 = (char *)&v302;
      v301 = 0x800000000;
      v305 = 0;
      LODWORD(v279[0]) = 1212371011;
      while (1)
      {
        v30 = *((unsigned __int8 *)v279 + v28);
        sub_22E745EC8((uint64_t)&v294, 8u, (uint64_t)v308);
        if ((v308[8] & 1) != 0)
        {
          *v9 = *(_QWORD *)v308;
          goto LABEL_148;
        }
        if (*(_QWORD *)v308 != v30)
          break;
        if (++v28 == 4)
        {
          v240 = 0;
          v235 = *(_DWORD *)sub_22E8078D8((uint64_t)&v251, v241);
          v234 = v16;
          while (1)
          {
            sub_22E748020((uint64_t)&v294, 0, (uint64_t)v292);
            if ((v293 & 1) != 0)
            {
              v33 = 0;
              v34 = *(_QWORD *)v292;
              *(_QWORD *)v292 = 0;
              *v9 = v34;
              v32 = 1;
            }
            else
            {
              v31 = (unint64_t *)v292[1];
              v32 = 4;
              v33 = 1;
              switch(v292[0])
              {
                case 0u:
                  break;
                case 1u:
                  goto LABEL_40;
                case 2u:
                  if (v292[1] == 8)
                  {
                    llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)&v294, 8, 0);
                    v33 = 0;
                    v35 = *v9 == 0;
                    v99 = 2;
                  }
                  else
                  {
                    if (v292[1] != 19)
                    {
                      if (v292[1] == 15)
                      {
                        llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)&v294, 15, 0);
                        v33 = 0;
                        v35 = *v9 == 0;
                        v36 = v240;
                        if (!*v9)
                          v36 = 1;
                        v240 = v36;
                      }
                      else
                      {
                        sub_22E746760((uint64_t)&v294, v9);
                        v33 = 0;
                        v35 = *v9 == 0;
                      }
                      goto LABEL_119;
                    }
                    llvm::BitstreamCursor::EnterSubBlock((llvm::BitstreamCursor *)&v294, 19, 0);
                    v33 = 0;
                    v35 = *v9 == 0;
                    v99 = 3;
                  }
                  v100 = v240;
                  if (v35)
                    v100 = v99;
                  v240 = v100;
LABEL_119:
                  if (v35)
                    v32 = 4;
                  else
                    v32 = 1;
                  break;
                case 3u:
                  if (v240)
                    goto LABEL_49;
                  llvm::BitstreamCursor::skipRecord((llvm::BitstreamCursor *)&v294);
                  if ((v308[8] & 1) != 0)
                  {
                    *v9 = *(_QWORD *)v308;
                    v32 = 1;
                  }
LABEL_40:
                  v33 = 0;
                  v240 = 0;
                  break;
                default:
LABEL_49:
                  *(_QWORD *)v308 = v16;
                  *(_QWORD *)&v308[8] = 0x4000000000;
                  v265 = 0;
                  v266 = 0;
                  llvm::BitstreamCursor::readRecord();
                  if ((v291 & 1) != 0)
                  {
                    v71 = v290;
                    v290 = 0;
                    *v9 = v71;
                    v32 = 1;
                    goto LABEL_131;
                  }
                  v37 = v290;
                  v31 = &v280;
                  if (v240 == 1 && (_DWORD)v290 == 2)
                  {
                    v38 = 0;
                    v39 = *(_DWORD *)&v308[8];
                    while (1)
                    {
                      if (v38 >= v39)
                      {
                        v32 = 4;
                        goto LABEL_123;
                      }
                      v40 = 0;
                      v41 = *(_QWORD *)v308;
                      v42 = *(_QWORD *)(*(_QWORD *)v308 + 8 * (v38 + 2));
                      v43 = *(_QWORD *)(*(_QWORD *)v308 + 8 * (v38 + 3));
                      v44 = *(_QWORD *)v308 + 8 * (v38 + 4);
                      v288 = 0uLL;
                      v289 = 0;
                      do
                      {
                        *((_BYTE *)&v288 + v40) = *(_QWORD *)(v44 + 8 * v40);
                        ++v40;
                      }
                      while (v40 != 20);
                      v45 = v38 + *(_QWORD *)(v41 + 8 * (v38 + 24));
                      v46 = v45 + 26;
                      v47 = *(_QWORD *)(v41 + 8 * (v45 + 25));
                      v279[0] = &v280;
                      *(_OWORD *)&v279[1] = xmmword_22F44E310;
                      if (v47 >= 0x81uLL)
                        break;
                      v48 = 0;
                      v50 = 0;
                      v49 = &v280;
                      if ((_DWORD)v47)
                        goto LABEL_59;
LABEL_62:
                      v55 = &v50[v47];
                      v279[1] = v55;
                      v56 = v46 + v47;
                      v57 = *(_QWORD *)(v41 + 8 * v56);
                      sub_22F1D07D8(v251, v31, (size_t)v55, 0, 0, (uint64_t)&v277);
                      v58 = v278;
                      if ((v278 & 1) != 0)
                      {
                        v68 = v279[1];
                        v9 = v242;
                        if ((char *)v279[1] + 1 > v279[2])
                        {
                          llvm::SmallVectorBase<unsigned long long>::grow_pod();
                          v68 = v279[1];
                        }
                        *((_BYTE *)v279[0] + (unint64_t)v68) = 0;
                        v69 = v279[0];
                        std::generic_category();
                        __p = 0;
                        v268 = 0;
                        v269 = 0;
                        LODWORD(v314) = 0;
                        v318 = 0;
                        v319 = 0;
                        v320 = 1;
                        v316 = 0;
                        v317 = 0;
                        v315 = 0;
                        v313 = v238;
                        p_p = &__p;
                        llvm::raw_ostream::SetBufferAndMode();
                        v322 = (void **)&unk_24FA6EF60;
                        *(_QWORD *)&v323 = "imported file \"%s\" not found";
                        *((_QWORD *)&v323 + 1) = v69;
                        llvm::raw_ostream::operator<<();
                        v70 = p_p;
                        operator new();
                        v324[4] = 260;
                        v322 = v70;
                        *v242 = llvm::StringError::StringError();
                        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v313);
                        if (SHIBYTE(v269) < 0)
                          operator delete(__p);
                        v31 = &v280;
                      }
                      else
                      {
                        v59 = (unint64_t)v277;
                        v60 = (char *)operator new(0x50uLL);
                        v61 = (uint64_t *)v60;
                        *((_QWORD *)v60 + 4) = v59;
                        *((_QWORD *)v60 + 5) = v42;
                        *((_QWORD *)v60 + 6) = v43;
                        *(_OWORD *)(v60 + 56) = v288;
                        *((_DWORD *)v60 + 18) = v289;
                        v62 = v260;
                        v63 = &v260;
                        v9 = v242;
                        v64 = &v260;
                        if (v260)
                        {
                          do
                          {
                            while (1)
                            {
                              v64 = (uint64_t **)v62;
                              if (v59 >= v62[4])
                                break;
                              v62 = (uint64_t *)*v62;
                              v63 = v64;
                              if (!*v64)
                                goto LABEL_69;
                            }
                            v62 = (uint64_t *)v62[1];
                          }
                          while (v62);
                          v63 = v64 + 1;
                        }
LABEL_69:
                        *(_QWORD *)v60 = 0;
                        *((_QWORD *)v60 + 1) = 0;
                        *((_QWORD *)v60 + 2) = v64;
                        *v63 = (uint64_t *)v60;
                        if (*v259)
                        {
                          v259 = (uint64_t **)*v259;
                          v61 = *v63;
                        }
                        sub_22E49FD00(v260, v61);
                        ++v261;
                        v65 = *(_DWORD *)sub_22E8078D8((uint64_t)&v251, v277);
                        v66 = sub_22E8078D8((uint64_t)&v251, v241);
                        v67 = *(unsigned int *)(v66 + 16);
                        if (v67 >= *(unsigned int *)(v66 + 20))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v67 = *(unsigned int *)(v66 + 16);
                        }
                        v31 = &v280;
                        *(_DWORD *)(*(_QWORD *)(v66 + 8) + 4 * v67) = v65;
                        ++*(_DWORD *)(v66 + 16);
                      }
                      if (v279[0] != &v280)
                      {
                        free(v279[0]);
                        v31 = &v280;
                      }
                      v38 = v56 + v57 + 1;
                      if ((v58 & 1) != 0)
                      {
                        v32 = 1;
LABEL_123:
                        v7 = v237;
                        v16 = v234;
                        goto LABEL_131;
                      }
                    }
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                    v48 = (char *)v279[1];
                    v49 = (unint64_t *)v279[0];
LABEL_59:
                    v51 = &v48[(_QWORD)v49];
                    v52 = 8 * v47;
                    v53 = (uint64_t *)(v41 + 8 * v46);
                    do
                    {
                      v54 = *v53++;
                      *v51++ = v54;
                      v52 -= 8;
                    }
                    while (v52);
                    v50 = (char *)v279[1];
                    v31 = (unint64_t *)v279[0];
                    v41 = *(_QWORD *)v308;
                    goto LABEL_62;
                  }
                  if (v240 != 2 || (_DWORD)v290 != 5)
                    goto LABEL_125;
                  if (**(_QWORD **)v308)
                  {
                    v72 = v265;
                    v73 = (int *)(v265 + **(_QWORD **)v308);
                    v74 = (char *)(v265 + 4);
                    v75 = *v73;
                    v76 = v73[1];
                    v77 = v73 + 2;
                    v78 = operator new();
                    *(_DWORD *)v78 = v75;
                    *(_DWORD *)(v78 + 4) = v76;
                    *(_QWORD *)(v78 + 8) = v77;
                    *(_QWORD *)(v78 + 16) = v72;
                    *(_QWORD *)(v78 + 32) = v74;
                    v233 = v78;
                    v279[0] = v74;
                    LODWORD(v279[1]) = 0;
                    HIDWORD(v279[1]) = v76;
                    v279[2] = (void *)(v78 + 24);
                    if (v76)
                    {
                      v79 = 0;
                      while (1)
                      {
                        v239 = (unsigned __int16 *)v74;
                        v313 = (uint64_t)&v74[2 * (v79 == 0) + 4];
                        v80 = sub_22E78CDE0(&v313);
                        sub_22E78CDE0(&v313);
                        v81 = (const void *)v313;
                        v82 = v80 - 1;
                        v83 = *(_DWORD *)(v313 + v80);
                        v84 = llvm::StringMapImpl::LookupBucketFor();
                        v85 = v262;
                        v86 = v84;
                        v87 = v262[v84];
                        if (!v87)
                          goto LABEL_90;
                        if (v87 == (uint64_t *)-8)
                          break;
                        v93 = v239;
                        v7 = v237;
LABEL_101:
                        if ((v83 & 1) != 0)
                        {
                          v95 = *((unsigned int *)v87 + 4);
                          if (v95 >= *((unsigned int *)v87 + 5))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                            v95 = *((unsigned int *)v87 + 4);
                            v79 = (int)v279[1];
                            v93 = (unsigned __int16 *)v279[0];
                          }
                          *(_DWORD *)(v87[1] + 4 * v95) = v235;
                          ++*((_DWORD *)v87 + 4);
                        }
                        if (!v79)
                        {
                          v96 = *v93++;
                          LODWORD(v279[1]) = v96;
                        }
                        v279[0] = v93 + 2;
                        v97 = sub_22E78CDE0((uint64_t *)v279);
                        v98 = sub_22E78CDE0((uint64_t *)v279);
                        v74 = (char *)v279[0] + v98 + v97;
                        v279[0] = v74;
                        v79 = LODWORD(v279[1]) - 1;
                        v21 = HIDWORD(v279[1]) == 1;
                        --LODWORD(v279[1]);
                        --HIDWORD(v279[1]);
                        if (v21)
                          goto LABEL_124;
                      }
                      LODWORD(v264) = v264 - 1;
LABEL_90:
                      v236 = v83;
                      v88 = MEMORY[0x23489D23C](v82 + 33, 8);
                      v89 = (uint64_t *)v88;
                      v90 = v88 + 32;
                      if (v82)
                        memcpy((void *)(v88 + 32), v81, v82);
                      *(_BYTE *)(v90 + v82) = 0;
                      *v89 = v82;
                      v89[1] = (uint64_t)(v89 + 3);
                      v89[2] = 0x200000000;
                      v85[v86] = v89;
                      ++HIDWORD(v263);
                      v91 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v262);
                      for (k = (uint64_t *)&v262[v91]; ; ++k)
                      {
                        v87 = (uint64_t *)*k;
                        v94 = !*k || v87 + 1 == 0;
                        v7 = v237;
                        v93 = v239;
                        LOBYTE(v83) = v236;
                        if (!v94)
                          break;
                      }
                      goto LABEL_101;
                    }
LABEL_124:
                    MEMORY[0x2348A0E9C](v233, 0x1050C407EF653B9);
                    v9 = v242;
                    v16 = v234;
                    v37 = 5;
LABEL_125:
                    v32 = 0;
                    if (v240 == 3 && v37 == 1)
                    {
                      v101 = 0;
                      v102 = *(_QWORD *)v308;
                      memset(v279, 0, 20);
                      do
                      {
                        *((_BYTE *)v279 + v101) = *(_QWORD *)(v102 + 8 * v101);
                        ++v101;
                      }
                      while (v101 != 20);
                      v103 = sub_22E8078D8((uint64_t)&v251, v241);
                      v32 = 0;
                      *(_OWORD *)(v103 + 40) = *(_OWORD *)v279;
                      *(_DWORD *)(v103 + 56) = v279[2];
                    }
                  }
                  else
                  {
                    v32 = 0;
                  }
LABEL_131:
                  if ((v291 & 1) != 0)
                  {
                    v104 = v290;
                    v290 = 0;
                    if (v104)
                      (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
                  }
                  if (*(_BYTE **)v308 != v16)
                    free(*(void **)v308);
                  v33 = 0;
                  break;
              }
            }
            if ((v293 & 1) != 0)
            {
              v105 = *(_QWORD *)v292;
              *(_QWORD *)v292 = 0;
              if (v105)
                (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v105 + 8))(v105, v31);
            }
            if ((v32 | 4) != 4)
              goto LABEL_148;
            if (v33)
            {
              *v9 = 0;
              goto LABEL_148;
            }
          }
        }
      }
      *(_QWORD *)&v327.__val_ = std::generic_category();
      v327.__cat_ = (const std::error_category *)"expected signature CPCH";
      llvm::createStringError((llvm *)0x5C, v327, v106);
      if ((v308[8] & 1) != 0)
      {
        v107 = *(_QWORD *)v308;
        *(_QWORD *)v308 = 0;
        if (v107)
          (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
      }
LABEL_148:
      sub_22E746F74(&v300);
      if (v299[0])
      {
        sub_22E3B485C((uint64_t *)v299);
        operator delete(v299[0]);
      }
    }
    if (((uint64_t)v307.__cat_ & 1) == 0)
    {
      v108 = v306;
      v306 = 0;
      if (v108)
        (*(void (**)(llvm::MemoryBuffer *))(*(_QWORD *)v108 + 8))(v108);
    }
    if (*v9)
      goto LABEL_219;
LABEL_22:
    v249 = llvm::sys::fs::detail::directory_iterator_increment();
    v250 = v22;
    v15 = sub_22E6D5D28(&v247, &v244);
    if ((v15 & 1) != 0 || (_DWORD)v249)
      goto LABEL_155;
  }
  v19 = llvm::sys::path::extension();
  if (v20 != 9)
    goto LABEL_22;
  v21 = *(_QWORD *)v19 == 0x636F6C2E6D63702ELL && *(_BYTE *)(v19 + 8) == 107;
  if (!v21)
    goto LABEL_22;
  *(_QWORD *)&v329.__val_ = std::generic_category();
  v329.__cat_ = (const std::error_category *)"someone else is building the index";
  llvm::createStringError((llvm *)0x10, v329, v143);
LABEL_219:
  v144 = v245;
  if (v245)
  {
    v145 = (unint64_t *)&v245->__shared_owners_;
    do
      v146 = __ldaxr(v145);
    while (__stlxr(v146 - 1, v145));
    if (!v146)
    {
      ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
      std::__shared_weak_count::__release_weak(v144);
    }
  }
  v147 = v248;
  if (v248)
  {
    v148 = (unint64_t *)&v248->__shared_owners_;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }
LABEL_210:
  sub_22E807F20((uint64_t)&v262);
  sub_22E807FBC(v260);
  v139 = (char **)v256;
  if (v256)
  {
    v140 = v257;
    v141 = v256;
    if (v257 != v256)
    {
      do
      {
        v142 = *(v140 - 7);
        if (v140 - 5 != (char **)v142)
          free(v142);
        v140 -= 9;
      }
      while (v140 != v139);
      v141 = v256;
    }
    v257 = v139;
    operator delete(v141);
  }
  llvm::deallocate_buffer(v253, (void *)(16 * v255));
LABEL_9:
  MEMORY[0x23489CF24](v272);
  if (v274 != v276)
    free(v274);
}

uint64_t sub_22E8078D8(uint64_t a1, void *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  void **v30;
  unsigned int v31;
  BOOL v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void *v44;
  int v45;
  void *v46[2];
  _OWORD v47[3];
  _DWORD *v48;
  int v49;
  void *v50;
  uint64_t v51;
  _BYTE v52[16];
  __int128 v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v46[0] = a2;
  v48 = 0;
  if (!sub_22E7ED0F8((uint64_t *)(a1 + 16), v46, &v48)
    || v48 == (_DWORD *)(*(_QWORD *)(a1 + 16) + 16 * *(unsigned int *)(a1 + 32)))
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v5 = v48[2];
    v6 = *(_QWORD *)(a1 + 40);
    v7 = v6 + 72 * v5;
    if (v7 != *(_QWORD *)(a1 + 48))
      return v6 + 72 * v5 + 8;
  }
  v44 = a2;
  v45 = 0;
  sub_22F2DF724((uint64_t)&v42, v4, &v44, &v45);
  v9 = v42;
  if (!v43)
  {
    v18 = *(_DWORD *)(v42 + 8);
    v19 = *(_QWORD *)(a1 + 40);
    goto LABEL_60;
  }
  v46[0] = 0;
  memset(v47, 0, sizeof(v47));
  v46[1] = (char *)v47 + 8;
  DWORD1(v47[0]) = 4;
  v48 = a2;
  v49 = 0;
  v50 = v52;
  v51 = 0x400000000;
  v53 = 0uLL;
  v54 = 0;
  v11 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  if (v11 < v10)
  {
    *(_QWORD *)v11 = a2;
    *(_DWORD *)(v11 + 8) = 0;
    v12 = (void *)(v11 + 32);
    *(_QWORD *)(v11 + 16) = v11 + 32;
    *(_QWORD *)(v11 + 24) = 0x400000000;
    if ((_DWORD **)v11 == &v48)
      goto LABEL_16;
    v13 = v51;
    if (!(_DWORD)v51)
      goto LABEL_16;
    if (v50 != v52)
    {
      *(_QWORD *)(v11 + 16) = v50;
      *(_DWORD *)(v11 + 24) = v13;
      *(_DWORD *)(v11 + 28) = HIDWORD(v51);
      v50 = v52;
      HIDWORD(v51) = 0;
      goto LABEL_15;
    }
    if (v51 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v51;
      if (!(_DWORD)v51)
        goto LABEL_14;
      v14 = v50;
      v12 = *(void **)(v11 + 16);
    }
    else
    {
      v14 = v52;
      v15 = v51;
    }
    memcpy(v12, v14, 4 * v15);
LABEL_14:
    *(_DWORD *)(v11 + 24) = v13;
LABEL_15:
    LODWORD(v51) = 0;
LABEL_16:
    v16 = v53;
    *(_DWORD *)(v11 + 64) = v54;
    *(_OWORD *)(v11 + 48) = v16;
    v17 = (char *)(v11 + 72);
    goto LABEL_55;
  }
  v20 = *(_QWORD *)(a1 + 40);
  v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v11 - v20) >> 3) + 1;
  if (v21 > 0x38E38E38E38E38ELL)
    abort();
  v22 = 0x8E38E38E38E38E39 * ((uint64_t)(v10 - v20) >> 3);
  if (2 * v22 > v21)
    v21 = 2 * v22;
  if (v22 >= 0x1C71C71C71C71C7)
    v23 = 0x38E38E38E38E38ELL;
  else
    v23 = v21;
  if (v23)
  {
    if (v23 > 0x38E38E38E38E38ELL)
      sub_22E3B3F8C();
    v24 = (char *)operator new(72 * v23);
  }
  else
  {
    v24 = 0;
  }
  v25 = &v24[8 * ((uint64_t)(v11 - v20) >> 3)];
  *(_QWORD *)v25 = a2;
  *((_DWORD *)v25 + 2) = 0;
  *((_QWORD *)v25 + 2) = v25 + 32;
  *((_QWORD *)v25 + 3) = 0x400000000;
  *((_QWORD *)v25 + 6) = 0;
  *((_QWORD *)v25 + 7) = 0;
  *((_DWORD *)v25 + 16) = 0;
  v17 = v25 + 72;
  if (v11 == v20)
  {
    *(_QWORD *)(a1 + 40) = v25;
    *(_QWORD *)(a1 + 48) = v17;
    *(_QWORD *)(a1 + 56) = &v24[72 * v23];
    goto LABEL_53;
  }
  v39 = &v24[72 * v23];
  v40 = v9;
  v41 = v7;
  v26 = 0;
  do
  {
    v27 = (char *)(v11 + v26);
    v28 = &v25[v26];
    *((_QWORD *)v28 - 9) = *(_QWORD *)(v11 + v26 - 72);
    *((_DWORD *)v28 - 16) = *(_DWORD *)(v11 + v26 - 64);
    v29 = &v25[v26 - 40];
    *(_QWORD *)&v25[v26 - 56] = v29;
    v30 = (void **)&v25[v26 - 56];
    *((_QWORD *)v28 - 6) = 0x400000000;
    v31 = *(_DWORD *)(v11 + v26 - 48);
    if (v31)
      v32 = v28 == v27;
    else
      v32 = 1;
    if (!v32)
    {
      v33 = (char *)*((_QWORD *)v27 - 7);
      if (v27 - 40 != v33)
      {
        *v30 = v33;
        *((_DWORD *)v28 - 12) = v31;
        *((_DWORD *)v28 - 11) = *(_DWORD *)(v11 + v26 - 44);
        *((_QWORD *)v27 - 7) = v27 - 40;
        *(_DWORD *)(v11 + v26 - 44) = 0;
        goto LABEL_39;
      }
      if (v31 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v34 = *((unsigned int *)v27 - 12);
        if (!(_DWORD)v34)
          goto LABEL_38;
        v33 = (char *)*((_QWORD *)v27 - 7);
        v29 = (char *)*v30;
      }
      else
      {
        v34 = *(unsigned int *)(v11 + v26 - 48);
      }
      memcpy(v29, v33, 4 * v34);
LABEL_38:
      *((_DWORD *)v28 - 12) = v31;
LABEL_39:
      *((_DWORD *)v27 - 12) = 0;
    }
    v35 = *(_OWORD *)(v27 - 24);
    *((_DWORD *)v28 - 2) = *((_DWORD *)v27 - 2);
    *(_OWORD *)(v28 - 24) = v35;
    v26 -= 72;
  }
  while (v11 + v26 != v20);
  v11 = *(_QWORD *)(a1 + 40);
  v36 = *(_QWORD *)(a1 + 48);
  v17 = v25 + 72;
  *(_QWORD *)(a1 + 40) = &v25[v26];
  *(_QWORD *)(a1 + 48) = v25 + 72;
  *(_QWORD *)(a1 + 56) = v39;
  if (v36 == v11)
  {
    v9 = v40;
    v7 = v41;
  }
  else
  {
    v9 = v40;
    v7 = v41;
    do
    {
      v37 = *(void **)(v36 - 56);
      if ((void *)(v36 - 40) != v37)
        free(v37);
      v36 -= 72;
    }
    while (v36 != v11);
  }
LABEL_53:
  if (v11)
    operator delete((void *)v11);
LABEL_55:
  *(_QWORD *)(a1 + 48) = v17;
  if (v50 != v52)
    free(v50);
  if (v46[1] != (char *)v47 + 8)
    free(v46[1]);
  v19 = *(_QWORD *)(a1 + 40);
  v18 = 954437177 * ((unint64_t)(*(_QWORD *)(a1 + 48) - v19) >> 3) - 1;
  *(_DWORD *)(v9 + 8) = v18;
LABEL_60:
  v38 = v19 + 72 * v18;
  *(_DWORD *)(v38 + 8) = 954437177 * ((unint64_t)(v7 - v6) >> 3);
  return v38 + 8;
}

llvm::raw_ostream *sub_22E807D8C(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  llvm::raw_ostream *result;
  uint64_t v11;
  uint64_t v12;

  v6 = *(unsigned int *)(a3 + 8);
  sub_22E740F64((llvm::raw_ostream *)a1, 3u, a1[8]);
  sub_22E740F64((llvm::raw_ostream *)a1, a2, 6);
  v7 = v6;
  if (v6 >= 0x20)
  {
    v8 = v6;
    do
    {
      sub_22E740F64((llvm::raw_ostream *)a1, v8 & 0x1F | 0x20, 6);
      v7 = v8 >> 5;
      v9 = v8 > 0x3FF;
      v8 >>= 5;
    }
    while (v9);
  }
  result = sub_22E740F64((llvm::raw_ostream *)a1, v7, 6);
  if ((_DWORD)v6)
  {
    v11 = 0;
    v12 = 8 * v6;
    do
    {
      result = sub_22E742298((llvm::raw_ostream *)a1, *(_QWORD *)(*(_QWORD *)a3 + v11), 6);
      v11 += 8;
    }
    while (v12 != v11);
  }
  return result;
}

void sub_22E807E44(unsigned int *a1, size_t count)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v4 = (char *)malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (v4 || !count && (v4 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
  {
    v5 = *a1;
    v6 = (_QWORD *)*((_QWORD *)a1 + 13);
    if ((_DWORD)v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v8 = v6[2 * i + 1];
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 40);
            v10 = &v4[16 * ((count - 1) & *(_DWORD *)(v8 + 48))];
            *(_QWORD *)(v8 + 40) = *((_QWORD *)v10 + 1);
            ++*((_DWORD *)v10 + 1);
            *((_QWORD *)v10 + 1) = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    free(v6);
    *a1 = count;
    *((_QWORD *)a1 + 13) = v4;
  }
  else
  {
    v11 = llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    sub_22E807F20(v11);
  }
}

uint64_t sub_22E807F20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5)
          v6 = (llvm *)((char *)v5 + 8) == 0;
        else
          v6 = 1;
        if (!v6)
        {
          v8 = *(_QWORD *)v5;
          v7 = (_QWORD *)*((_QWORD *)v5 + 1);
          if (v7 != (_QWORD *)((char *)v5 + 24))
            free(v7);
          llvm::deallocate_buffer(v5, (void *)(v8 + 33));
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_22E807FBC(_QWORD *a1)
{
  if (a1)
  {
    sub_22E807FBC(*a1);
    sub_22E807FBC(a1[1]);
    operator delete(a1);
  }
}

void sub_22E807FF8()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E80800C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned __int16 *v3;
  int v4;
  int v5;
  uint64_t v6;

  v1 = *(_DWORD *)(a1 + 20);
  if (v1 == *(_DWORD *)(a1 + 44))
    return 0;
  v3 = *(unsigned __int16 **)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 16);
  v2 = (uint64_t)&v3[(v4 == 0) + 4];
  if (!v4)
  {
    v5 = *v3++;
    v4 = v5;
    *(_DWORD *)(a1 + 16) = v5;
  }
  *(_QWORD *)(a1 + 8) = v3 + 2;
  v6 = v3[2];
  *(_QWORD *)(a1 + 8) = v3 + 3;
  *(_QWORD *)(a1 + 8) = (char *)v3 + v3[3] + v6 + 8;
  *(_DWORD *)(a1 + 16) = v4 - 1;
  *(_DWORD *)(a1 + 20) = v1 - 1;
  return v2;
}

void sub_22E80808C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v4 = *(void **)(v2 - 32);
      if ((void *)(v2 - 16) != v4)
        free(v4);
      if (*(char *)(v2 - 49) < 0)
        operator delete(*(void **)(v2 - 72));
      v2 -= 80;
    }
    while (v2 != a1);
  }
}

uint64_t sub_22E8080E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  void **v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (result != a2)
  {
    v5 = result;
    for (i = 0; v5 + i != a2; i += 80)
    {
      v7 = a3 + i;
      v8 = v5 + i;
      *(_QWORD *)v7 = *(_QWORD *)(v5 + i);
      v9 = *(_OWORD *)(v5 + i + 8);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v5 + i + 24);
      *(_OWORD *)(v7 + 8) = v9;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_OWORD *)(v7 + 32) = *(_OWORD *)(v5 + i + 32);
      v10 = (void *)(a3 + i + 64);
      *(_QWORD *)(a3 + i + 48) = v10;
      v11 = (void **)(a3 + i + 48);
      *(_QWORD *)(v7 + 56) = 0x400000000;
      v12 = *(_DWORD *)(v5 + i + 56);
      if (!v12 || v8 == v7)
        continue;
      v13 = *(void **)(v8 + 48);
      v14 = v5 + i;
      v15 = v5 + i + 64;
      if ((void *)v15 != v13)
      {
        *v11 = v13;
        v17 = *(_DWORD *)(v14 + 60);
        *(_DWORD *)(v7 + 56) = v12;
        *(_DWORD *)(v7 + 60) = v17;
        *(_QWORD *)(v8 + 48) = v15;
        *(_DWORD *)(v14 + 60) = 0;
        goto LABEL_10;
      }
      if (v12 >= 5)
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = *(unsigned int *)(v8 + 56);
        if (!(_DWORD)v16)
          goto LABEL_9;
        v13 = *(void **)(v8 + 48);
        v10 = *v11;
      }
      else
      {
        v16 = *(unsigned int *)(v5 + i + 56);
      }
      result = (uint64_t)memcpy(v10, v13, 4 * v16);
LABEL_9:
      *(_DWORD *)(v7 + 56) = v12;
LABEL_10:
      *(_DWORD *)(v8 + 56) = 0;
    }
  }
  return result;
}

uint64_t sub_22E808214(uint64_t a1)
{
  int Key;
  uint64_t v4;

  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 16))
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * Key);
  if (*(_BYTE *)(v4 + 16))
    return 3;
  if (*(_QWORD *)(v4 + 8))
    return 1;
  return 2;
}

uint64_t sub_22E808280(uint64_t a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v4 = *a4;
  *a4 = 0;
  v9 = v4;
  v10 = 0;
  v5 = sub_22E808354((llvm::StringMapImpl *)(a1 + 8), a2, a3, &v9);
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    v8 = v5;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v5 = v8;
  }
  return *(_QWORD *)(*v5 + 8);
}

BOOL sub_22E8082EC(uint64_t a1)
{
  int Key;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1)
    v3 = *(unsigned int *)(a1 + 16);
  else
    v3 = Key;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (!*(_BYTE *)(v4 + 16))
  {
    v6 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 8) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return v5 != 0;
}

uint64_t *sub_22E808354(llvm::StringMapImpl *a1, const void *a2, size_t a3, uint64_t *a4)
{
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v9 = *i;
  if (*i)
  {
    if (v9 != -8)
    {
      while (!v9 || v9 == -8)
      {
        v16 = i[1];
        ++i;
        v9 = v16;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v10 = MEMORY[0x23489D23C](a3 + 25, 8);
  v11 = v10;
  v12 = v10 + 24;
  if (a3)
    memcpy((void *)(v10 + 24), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  v13 = *a4;
  *a4 = 0;
  *(_QWORD *)v11 = a3;
  *(_QWORD *)(v11 + 8) = v13;
  *(_BYTE *)(v11 + 16) = *((_BYTE *)a4 + 8);
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22E808464(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v2 = *(_QWORD *)(a1 + 1736);
  if (v2)
    MEMORY[0x2348A0E9C](v2, 0x1070C40D0300D62);
  v3 = *(_QWORD *)(a1 + 2600);
  if (v3)
    MEMORY[0x2348A0E9C](v3, 0x1070C40D0300D62);
  v4 = *(_QWORD *)(a1 + 2712);
  if (v4)
    MEMORY[0x2348A0E9C](v4, 0x1070C404B58E6C8);
  sub_22F257CF8(a1 + 3392);
  sub_22F257CF8(a1 + 3344);
  v5 = *(void **)(a1 + 3264);
  if (v5 != (void *)(a1 + 3280))
    free(v5);
  v6 = *(void **)(a1 + 3232);
  if (v6 != (void *)(a1 + 3248))
    free(v6);
  v7 = *(void **)(a1 + 3184);
  if (v7 != (void *)(a1 + 3200))
    free(v7);
  llvm::deallocate_buffer(*(llvm **)(a1 + 3128), (void *)(16 * *(unsigned int *)(a1 + 3144)));
  v8 = *(void **)(a1 + 3096);
  if (v8 != (void *)(a1 + 3112))
    free(v8);
  sub_22E746F74((char **)(a1 + 2784));
  if (*(_QWORD *)(a1 + 2760))
  {
    sub_22E3B485C((uint64_t *)(a1 + 2760));
    operator delete(*(void **)(a1 + 2760));
  }
  v9 = *(void **)(a1 + 2672);
  if (v9 != (void *)(a1 + 2688))
    free(v9);
  v10 = *(void **)(a1 + 2616);
  if (v10 != (void *)(a1 + 2632))
    free(v10);
  v11 = *(void **)(a1 + 2544);
  if (v11 != (void *)(a1 + 2560))
    free(v11);
  sub_22E746F74((char **)(a1 + 2248));
  if (*(_QWORD *)(a1 + 2224))
  {
    sub_22E3B485C((uint64_t *)(a1 + 2224));
    operator delete(*(void **)(a1 + 2224));
  }
  v12 = *(void **)(a1 + 2144);
  if (v12 != (void *)(a1 + 2160))
    free(v12);
  sub_22E746F74((char **)(a1 + 1832));
  if (*(_QWORD *)(a1 + 1808))
  {
    sub_22E3B485C((uint64_t *)(a1 + 1808));
    operator delete(*(void **)(a1 + 1808));
  }
  v13 = *(void **)(a1 + 1744);
  if (v13)
  {
    *(_QWORD *)(a1 + 1752) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 1696);
  if (v14 != (void *)(a1 + 1712))
    free(v14);
  v15 = *(void **)(a1 + 1640);
  if (v15 != (void *)(a1 + 1656))
    free(v15);
  v16 = *(void **)(a1 + 1592);
  if (v16 != (void *)(a1 + 1608))
    free(v16);
  sub_22E746F74((char **)(a1 + 1272));
  if (*(_QWORD *)(a1 + 1248))
  {
    sub_22E3B485C((uint64_t *)(a1 + 1248));
    operator delete(*(void **)(a1 + 1248));
  }
  v17 = *(_QWORD *)(a1 + 1168);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 1176);
    v19 = *(void **)(a1 + 1168);
    if (v18 != v17)
    {
      do
      {
        if (*(char *)(v18 - 33) < 0)
          operator delete(*(void **)(v18 - 56));
        v18 -= 56;
      }
      while (v18 != v17);
      v19 = *(void **)(a1 + 1168);
    }
    *(_QWORD *)(a1 + 1176) = v17;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 1144);
  if (v20)
  {
    *(_QWORD *)(a1 + 1152) = v20;
    operator delete(v20);
  }
  sub_22E746F74((char **)(a1 + 856));
  if (*(_QWORD *)(a1 + 832))
  {
    sub_22E3B485C((uint64_t *)(a1 + 832));
    operator delete(*(void **)(a1 + 832));
  }
  v21 = *(_QWORD **)(a1 + 752);
  if (v21)
  {
    v22 = *(_QWORD **)(a1 + 760);
    v23 = *(void **)(a1 + 752);
    if (v22 != v21)
    {
      do
      {
        v25 = *--v22;
        v24 = v25;
        *v22 = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      while (v22 != v21);
      v23 = *(void **)(a1 + 752);
    }
    *(_QWORD *)(a1 + 760) = v21;
    operator delete(v23);
  }
  sub_22E746F74((char **)(a1 + 456));
  if (*(_QWORD *)(a1 + 432))
  {
    sub_22E3B485C((uint64_t *)(a1 + 432));
    operator delete(*(void **)(a1 + 432));
  }
  v26 = *(void **)(a1 + 264);
  if (v26 != (void *)(a1 + 280))
    free(v26);
  if (*(char *)(a1 + 207) < 0)
    operator delete(*(void **)(a1 + 184));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_22E808808(_QWORD *result, size_t a2, uint64_t *a3)
{
  const void *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _DWORD *v13;
  llvm::raw_ostream *v14;
  _DWORD *v15;
  _BYTE *v16;

  if (*((_DWORD *)a3 + 2))
  {
    v5 = result;
    v6 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    v7 = v6;
    v8 = (_WORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v8 > 1uLL)
    {
      *v8 = 8224;
      result = (_QWORD *)(*((_QWORD *)v6 + 4) + 2);
      *((_QWORD *)v7 + 4) = result;
    }
    else
    {
      v7 = (llvm::raw_ostream *)llvm::raw_ostream::write(v6, "  ");
      result = (_QWORD *)*((_QWORD *)v7 + 4);
    }
    if (a2 <= *((_QWORD *)v7 + 3) - (_QWORD)result)
    {
      if (a2)
      {
        memcpy(result, v5, a2);
        result = (_QWORD *)(*((_QWORD *)v7 + 4) + a2);
        *((_QWORD *)v7 + 4) = result;
      }
    }
    else
    {
      v7 = (llvm::raw_ostream *)llvm::raw_ostream::write(v7, (const char *)v5);
      result = (_QWORD *)*((_QWORD *)v7 + 4);
    }
    if (*((_QWORD *)v7 + 3) - (_QWORD)result > 1uLL)
    {
      *(_WORD *)result = 2618;
      *((_QWORD *)v7 + 4) += 2;
    }
    else
    {
      result = (_QWORD *)llvm::raw_ostream::write(v7, ":\n");
    }
    v9 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v9)
    {
      v10 = *a3;
      v11 = *a3 + 8 * v9;
      do
      {
        v12 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
        v13 = (_DWORD *)*((_QWORD *)v12 + 4);
        if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 3uLL)
        {
          *v13 = 538976288;
          *((_QWORD *)v12 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v12, "    ");
        }
        v14 = (llvm::raw_ostream *)llvm::raw_ostream::operator<<();
        v15 = (_DWORD *)*((_QWORD *)v14 + 4);
        if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 3uLL)
        {
          *v15 = 540945696;
          *((_QWORD *)v14 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v14, " -> ");
        }
        result = (_QWORD *)llvm::raw_ostream::operator<<();
        v16 = (_BYTE *)result[4];
        if ((_BYTE *)result[3] == v16)
        {
          result = (_QWORD *)llvm::raw_ostream::write((llvm::raw_ostream *)result, "\n");
        }
        else
        {
          *v16 = 10;
          ++result[4];
        }
        v10 += 8;
      }
      while (v10 != v11);
    }
  }
  return result;
}

uint64_t sub_22E808A04(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  sub_22F1D07D8(*(_QWORD *)(a1 + 120), a2, a3, 0, 0, (uint64_t)&v10);
  if ((v11 & 1) != 0)
    return 0;
  v8 = 0;
  v9 = v10;
  if (sub_22F25AFD8((uint64_t *)(a1 + 96), &v9, &v8))
  {
    v4 = v8;
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(unsigned int *)(a1 + 112);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(unsigned int *)(a1 + 112);
    v4 = v5 + 16 * v6;
  }
  if (v4 == v5 + 16 * v6)
    return 0;
  else
    return *(_QWORD *)(v4 + 8);
}

uint64_t sub_22E808AC0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = sub_22F1502C8((uint64_t *)(*(_QWORD *)(a1 + 144) + 488));
  if (result)
  {
    do
    {
      v3 = result;
      result = *(_QWORD *)(result + 32);
    }
    while (result);
    v4 = *(_QWORD *)(v3 + 256);
    if (!v4)
      return 0;
    do
    {
      v5 = *(_QWORD *)(v4 + 8);
      v4 = v5 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v5 & 2) != 0 && v4);
    if (v4
      && ((v9 = 0, v10 = v5 & 0xFFFFFFFFFFFFFFFCLL, !sub_22F25AFD8((uint64_t *)(a1 + 96), &v10, &v9))
        ? (v7 = *(_QWORD *)(a1 + 96), v8 = *(unsigned int *)(a1 + 112), v6 = v7 + 16 * v8)
        : (v6 = v9, v7 = *(_QWORD *)(a1 + 96), v8 = *(unsigned int *)(a1 + 112)),
          v6 != v7 + 16 * v8))
    {
      return *(_QWORD *)(v6 + 8);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_22E808B68(uint64_t a1, _BYTE *a2, size_t a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, __int128 *a10, void (*a11)(_QWORD *__return_ptr), uint64_t *a12, uint64_t a13)
{
  uint64_t v21;
  unint64_t v22;
  std::string::size_type v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int Key;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  size_t *v38;
  uint64_t v39;
  const void *v40;
  size_t v41;
  size_t v42;
  char v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  std::string *p_dst;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  char v52;
  int v53;
  size_t v54;
  size_t v55;
  std::error_code *p_p;
  const void *v57;
  std::error_code *v58;
  const std::error_category *cat;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  llvm::MemoryBuffer *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v76;
  uint64_t v77;
  char v78;
  _QWORD *v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  int v84;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v102;
  char *v103;
  uint64_t *v104;
  _BYTE v105[32];
  std::string::size_type v106;
  uint64_t v107;
  std::error_code __p;
  char v109;
  uint64_t v110;
  std::chrono::system_clock::time_point __t;
  __int128 v112;
  int v113;
  _QWORD v114[2];
  std::string __dst;
  uint64_t v116;
  int v117;
  __int16 v118;
  __int128 v119;
  int v120;
  __int128 v121;
  int v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  *a12 = 0;
  if ((a4 & 0xFFFFFFFB) == 1)
    v21 = 0;
  else
    v21 = a9;
  if (a3 == 1 && *a2 == 45)
  {
LABEL_27:
    v22 = 0;
    v28 = 0;
    v29 = 1;
    goto LABEL_28;
  }
  sub_22F1D0894(*(_QWORD *)(a1 + 120), a2, a3, 1, 0, (uint64_t)&__dst);
  v22 = sub_22E6D5834(&__dst);
  if ((__dst.__r_.__value_.__s.__data_[8] & 1) != 0)
  {
    v23 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v23)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v23 + 8))(v23);
  }
  if (!v22)
  {
    v31 = *(_QWORD *)(a1 + 128);
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1
      || Key == (unint64_t)*(unsigned int *)(v31 + 16)
      || (v90 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 8) + 8 * Key) + 8)) == 0
      || (v22 = sub_22F1D1104(*(_QWORD *)(a1 + 120), a2, a3, *(_QWORD *)(v90 + 16) - *(_QWORD *)(v90 + 8), 0)) == 0)
    {
      if (a3 != 1 || *a2 != 45)
      {
        MEMORY[0x2348A0C14](a13, "module file not found");
        return 2;
      }
      goto LABEL_27;
    }
  }
  if (a8)
  {
    v24 = v22;
    do
    {
      v25 = *(_QWORD *)(v24 + 8);
      v24 = v25 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v25 & 2) != 0 && v24);
    if (*(_QWORD *)(v24 + 24) != a8)
      goto LABEL_33;
  }
  if (v21)
  {
    v26 = v22;
    do
    {
      v27 = *(_QWORD *)(v26 + 8);
      v26 = v27 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v27 & 2) != 0 && v26);
    if (*(_QWORD *)(v26 + 32) != v21)
    {
LABEL_33:
      MEMORY[0x2348A0C14](a13, "module file out of date");
      return 3;
    }
  }
  v28 = v22;
  v29 = 0;
  do
  {
    v30 = *(_QWORD *)(v28 + 8);
    v28 = v30 & 0xFFFFFFFFFFFFFFFCLL;
  }
  while ((v30 & 2) != 0 && v28);
LABEL_28:
  __dst.__r_.__value_.__r.__words[0] = v28;
  *(_QWORD *)&__p.__val_ = 0;
  v104 = (uint64_t *)(a1 + 96);
  if ((sub_22F25AFD8((uint64_t *)(a1 + 96), &__dst, &__p) & 1) != 0)
  {
    v33 = *(_QWORD *)(*(_QWORD *)&__p.__val_ + 8);
    if (v33)
    {
      if ((v29 & 1) != 0)
      {
        v34 = 0;
      }
      else
      {
        v34 = v22;
        do
        {
          v36 = *(_QWORD *)(v34 + 8);
          v34 = v36 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v36 & 2) != 0 && v34);
      }
      if (a4)
        goto LABEL_39;
      v37 = *(_QWORD *)(v34 + 88);
      do
      {
        v38 = (size_t *)v37;
        v39 = *(_QWORD *)(v37 + 8);
        if ((v39 & 2) == 0)
          break;
        v37 = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while (v37);
      v42 = *v38;
      v40 = v38 + 4;
      v41 = v42;
      v43 = *(_BYTE *)(v33 + 31);
      if (v43 >= 0)
        v44 = (const void *)(v33 + 8);
      else
        v44 = *(const void **)(v33 + 8);
      v45 = *(_QWORD *)(v33 + 16);
      if (v43 >= 0)
        v45 = v43 & 0x7F;
      if (v41 == v45 && (!v41 || !memcmp(v40, v44, v41)))
      {
LABEL_39:
        v121 = *(_OWORD *)(v33 + 224);
        v122 = *(_DWORD *)(v33 + 240);
        v119 = *a10;
        v120 = *((_DWORD *)a10 + 4);
        if ((sub_22E80985C((uint64_t)&v121, (uint64_t)&v119, a13) & 1) == 0)
        {
          *a12 = v33;
          sub_22E809914(v33, a6, a5);
          return 0;
        }
        return 3;
      }
    }
  }
  v46 = operator new();
  *(_DWORD *)v46 = 0;
  *(_DWORD *)(v46 + 4) = a4;
  *(_OWORD *)(v46 + 8) = 0u;
  *(_OWORD *)(v46 + 24) = 0u;
  *(_OWORD *)(v46 + 40) = 0u;
  *(_OWORD *)(v46 + 56) = 0u;
  *(_OWORD *)(v46 + 72) = 0u;
  *(_OWORD *)(v46 + 88) = 0u;
  *(_OWORD *)(v46 + 104) = 0u;
  *(_OWORD *)(v46 + 120) = 0u;
  *(_OWORD *)(v46 + 136) = 0u;
  *(_OWORD *)(v46 + 152) = 0u;
  *(_OWORD *)(v46 + 164) = 0u;
  *(_QWORD *)(v46 + 184) = 0;
  *(_OWORD *)(v46 + 192) = 0u;
  *(_DWORD *)(v46 + 207) = 0;
  *(_OWORD *)(v46 + 216) = 0u;
  *(_OWORD *)(v46 + 232) = 0u;
  *(_OWORD *)(v46 + 248) = 0u;
  *(_QWORD *)(v46 + 264) = v46 + 280;
  *(_QWORD *)(v46 + 272) = 0x600000000;
  *(_DWORD *)(v46 + 328) = 0;
  *(_BYTE *)(v46 + 336) = 0;
  *(_DWORD *)(v46 + 340) = a7;
  *(_OWORD *)(v46 + 352) = 0u;
  *(_OWORD *)(v46 + 368) = 0u;
  *(_OWORD *)(v46 + 384) = 0u;
  *(_OWORD *)(v46 + 400) = 0u;
  *(_OWORD *)(v46 + 412) = 0u;
  *(_DWORD *)(v46 + 428) = 2;
  *(_OWORD *)(v46 + 432) = 0u;
  *(_QWORD *)(v46 + 448) = 0;
  *(_QWORD *)(v46 + 456) = v46 + 472;
  *(_QWORD *)(v46 + 464) = 0x800000000;
  *(_DWORD *)(v46 + 744) = 0;
  *(_OWORD *)(v46 + 728) = 0u;
  *(_OWORD *)(v46 + 752) = 0u;
  *(_OWORD *)(v46 + 768) = 0u;
  *(_OWORD *)(v46 + 784) = 0u;
  *(_OWORD *)(v46 + 800) = 0u;
  *(_OWORD *)(v46 + 812) = 0u;
  *(_DWORD *)(v46 + 828) = 2;
  *(_OWORD *)(v46 + 832) = 0u;
  *(_QWORD *)(v46 + 848) = 0;
  *(_QWORD *)(v46 + 856) = v46 + 872;
  *(_QWORD *)(v46 + 864) = 0x800000000;
  *(_OWORD *)(v46 + 1128) = 0u;
  *(_OWORD *)(v46 + 1144) = 0u;
  *(_OWORD *)(v46 + 1160) = 0u;
  *(_OWORD *)(v46 + 1176) = 0u;
  *(_DWORD *)(v46 + 1192) = 0;
  *(_OWORD *)(v46 + 1228) = 0u;
  *(_OWORD *)(v46 + 1216) = 0u;
  *(_OWORD *)(v46 + 1200) = 0u;
  *(_DWORD *)(v46 + 1244) = 2;
  *(_OWORD *)(v46 + 1248) = 0u;
  *(_QWORD *)(v46 + 1264) = 0;
  *(_QWORD *)(v46 + 1272) = v46 + 1288;
  *(_QWORD *)(v46 + 1280) = 0x800000000;
  *(_DWORD *)(v46 + 1568) = 0;
  *(_QWORD *)(v46 + 1560) = 0;
  *(_OWORD *)(v46 + 1544) = 0u;
  *(_OWORD *)(v46 + 1576) = 0u;
  *(_QWORD *)(v46 + 1592) = v46 + 1608;
  *(_QWORD *)(v46 + 1600) = 0x400000000;
  *(_QWORD *)(v46 + 1640) = v46 + 1656;
  *(_QWORD *)(v46 + 1648) = 0x200000000;
  *(_DWORD *)(v46 + 1672) = 0;
  *(_QWORD *)(v46 + 1680) = 0;
  *(_DWORD *)(v46 + 1688) = 0;
  *(_QWORD *)(v46 + 1696) = v46 + 1712;
  *(_QWORD *)(v46 + 1704) = 0x200000000;
  *(_OWORD *)(v46 + 1788) = 0u;
  *(_OWORD *)(v46 + 1776) = 0u;
  *(_OWORD *)(v46 + 1760) = 0u;
  *(_OWORD *)(v46 + 1744) = 0u;
  *(_OWORD *)(v46 + 1728) = 0u;
  *(_DWORD *)(v46 + 1804) = 2;
  *(_QWORD *)(v46 + 1824) = 0;
  *(_OWORD *)(v46 + 1808) = 0u;
  *(_QWORD *)(v46 + 1832) = v46 + 1848;
  *(_QWORD *)(v46 + 1840) = 0x800000000;
  *(_QWORD *)(v46 + 2104) = 0;
  *(_DWORD *)(v46 + 2112) = 0;
  *(_DWORD *)(v46 + 2136) = 0;
  *(_OWORD *)(v46 + 2120) = 0u;
  *(_QWORD *)(v46 + 2144) = v46 + 2160;
  *(_QWORD *)(v46 + 2152) = 0x200000000;
  *(_OWORD *)(v46 + 2204) = 0u;
  *(_OWORD *)(v46 + 2192) = 0u;
  *(_OWORD *)(v46 + 2176) = 0u;
  *(_DWORD *)(v46 + 2220) = 2;
  *(_QWORD *)(v46 + 2240) = 0;
  *(_OWORD *)(v46 + 2224) = 0u;
  *(_QWORD *)(v46 + 2248) = v46 + 2264;
  *(_QWORD *)(v46 + 2256) = 0x800000000;
  *(_DWORD *)(v46 + 2536) = 0;
  *(_OWORD *)(v46 + 2520) = 0u;
  *(_QWORD *)(v46 + 2544) = v46 + 2560;
  *(_QWORD *)(v46 + 2552) = 0x200000000;
  *(_QWORD *)(v46 + 2608) = 0;
  *(_OWORD *)(v46 + 2592) = 0u;
  *(_OWORD *)(v46 + 2576) = 0u;
  *(_QWORD *)(v46 + 2616) = v46 + 2632;
  *(_QWORD *)(v46 + 2624) = 0x200000000;
  *(_DWORD *)(v46 + 2648) = 0;
  *(_QWORD *)(v46 + 2656) = 0;
  *(_DWORD *)(v46 + 2664) = 0;
  *(_QWORD *)(v46 + 2672) = v46 + 2688;
  *(_QWORD *)(v46 + 2680) = 0x200000000;
  *(_DWORD *)(v46 + 2752) = 0;
  *(_OWORD *)(v46 + 2736) = 0u;
  *(_OWORD *)(v46 + 2720) = 0u;
  *(_OWORD *)(v46 + 2704) = 0u;
  *(_DWORD *)(v46 + 2756) = 2;
  *(_QWORD *)(v46 + 2776) = 0;
  *(_OWORD *)(v46 + 2760) = 0u;
  *(_QWORD *)(v46 + 2784) = v46 + 2800;
  *(_QWORD *)(v46 + 2792) = 0x800000000;
  *(_QWORD *)(v46 + 3080) = 0;
  *(_DWORD *)(v46 + 3088) = 0;
  *(_DWORD *)(v46 + 3072) = 0;
  *(_OWORD *)(v46 + 3056) = 0u;
  *(_QWORD *)(v46 + 3096) = v46 + 3112;
  *(_QWORD *)(v46 + 3104) = 0x200000000;
  *(_QWORD *)(v46 + 3152) = 0;
  *(_DWORD *)(v46 + 3160) = 0;
  *(_QWORD *)(v46 + 3168) = 0;
  *(_DWORD *)(v46 + 3176) = 0;
  *(_DWORD *)(v46 + 3144) = 0;
  *(_OWORD *)(v46 + 3128) = 0u;
  *(_QWORD *)(v46 + 3184) = v46 + 3200;
  *(_QWORD *)(v46 + 3192) = 0x100000000;
  *(_DWORD *)(v46 + 3208) = 0;
  *(_QWORD *)(v46 + 3216) = 0;
  *(_DWORD *)(v46 + 3224) = 0;
  *(_QWORD *)(v46 + 3232) = v46 + 3248;
  *(_QWORD *)(v46 + 3240) = 0x200000000;
  *(_QWORD *)(v46 + 3264) = v46 + 3280;
  *(_QWORD *)(v46 + 3272) = 0x800000000;
  *(_DWORD *)(v46 + 3360) = 0;
  *(_OWORD *)(v46 + 3344) = 0u;
  *(_OWORD *)(v46 + 3396) = 0u;
  *(_OWORD *)(v46 + 3384) = 0u;
  *(_OWORD *)(v46 + 3368) = 0u;
  *(_QWORD *)(v46 + 3424) = 0;
  *(_QWORD *)(v46 + 3416) = 0;
  *(_QWORD *)(v46 + 3432) = 0;
  v110 = v46;
  *(_DWORD *)v46 = *(_DWORD *)(a1 + 8);
  if (!a2)
  {
    v48 = v46;
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_63;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v49 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v49 = a3 | 7;
    v50 = v49 + 1;
    p_dst = (std::string *)operator new(v49 + 1);
    __dst.__r_.__value_.__l.__size_ = a3;
    __dst.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
    p_dst = &__dst;
    if (!a3)
      goto LABEL_62;
  }
  memmove(p_dst, a2, a3);
LABEL_62:
  p_dst->__r_.__value_.__s.__data_[a3] = 0;
  v48 = v110;
LABEL_63:
  v51 = (void **)(v48 + 8);
  if (*(char *)(v48 + 31) < 0)
    operator delete(*v51);
  *(_OWORD *)v51 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  *(_QWORD *)(v48 + 24) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
  *(_QWORD *)(v48 + 216) = v22;
  *(_DWORD *)(v48 + 740) = a5;
  *(_QWORD *)(v48 + 1200) = 0;
  if (!*(_DWORD *)(v48 + 4))
  {
    v52 = *(_BYTE *)(v48 + 31);
    v53 = v52;
    v54 = v52 & 0x7F;
    if (v53 >= 0)
      v55 = v54;
    else
      v55 = *(_QWORD *)(v48 + 16);
    sub_22E3B8BF4((uint64_t)&__p, v55 + 10);
    if (v109 >= 0)
      p_p = &__p;
    else
      p_p = *(std::error_code **)&__p.__val_;
    if (v55)
    {
      if (*(char *)(v48 + 31) >= 0)
        v57 = (const void *)(v48 + 8);
      else
        v57 = *(const void **)(v48 + 8);
      memmove(p_p, v57, v55);
    }
    strcpy((char *)p_p + v55, ".timestamp");
    memset(&__dst, 0, sizeof(__dst));
    v116 = 0;
    v117 = 0;
    v118 = 0;
    if (v109 >= 0)
      v58 = &__p;
    else
      v58 = *(std::error_code **)&__p.__val_;
    if (v109 >= 0)
      cat = (const std::error_category *)(v109 & 0x7F);
    else
      cat = __p.__cat_;
    if (!sub_22F1D1C98(*(_QWORD *)(a1 + 120), v58, (size_t)cat, (uint64_t)&__dst))
    {
      __t.__d_.__rep_ = v116 / 1000;
      *(_QWORD *)(v48 + 1200) = std::chrono::system_clock::to_time_t(&__t);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (v109 < 0)
      operator delete(*(void **)&__p.__val_);
  }
  sub_22F1D07D8(*(_QWORD *)(a1 + 120), a2, a3, 0, 0, (uint64_t)&__dst);
  if ((__dst.__r_.__value_.__s.__data_[16] & 1) != 0)
  {
    v63 = (uint64_t *)(a1 + 128);
    v62 = *(_QWORD *)(a1 + 128);
  }
  else
  {
    v60 = sub_22E80A354(a1 + 152, (uint64_t *)&__dst);
    v61 = v60[1];
    v60[1] = 0;
    v63 = (uint64_t *)(a1 + 128);
    v62 = *(_QWORD *)(a1 + 128);
    if (v61)
    {
      v107 = v61;
      *(_QWORD *)(v48 + 344) = sub_22F2DF8D0(v62, a2, a3, &v107);
      v91 = v107;
      v107 = 0;
      if (v91)
        (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
      v92 = v22;
      v72 = a10;
      do
      {
        v93 = *(_QWORD *)(v92 + 8);
        v92 = v93 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v93 & 2) != 0 && v92);
      v71 = *(_QWORD *)(v92 + 72);
      *(_QWORD *)(v92 + 72) = 0;
      if (!v71)
      {
LABEL_109:
        v73 = *(_QWORD *)(a1 + 136);
        llvm::MemoryBufferRef::MemoryBufferRef((llvm::MemoryBufferRef *)v105, *(const llvm::MemoryBuffer **)(v48 + 344));
        *(_QWORD *)(v48 + 376) = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v73 + 24))(v73, v105);
        *(_QWORD *)(v48 + 384) = v74;
        if (*v72 != 0 || *((_DWORD *)v72 + 4) != 0)
        {
          a11(v114);
          v112 = *v72;
          v113 = *((_DWORD *)v72 + 4);
          if (sub_22E80985C((uint64_t)v114, (uint64_t)&v112, a13))
          {
            v110 = 0;
            v35 = 3;
LABEL_161:
            v100 = sub_22E808464(v48);
            MEMORY[0x2348A0E9C](v100, 0x10F2C40804127A3);
            return v35;
          }
        }
        if (v22)
        {
          v76 = a12;
          do
          {
            v77 = *(_QWORD *)(v22 + 8);
            v22 = v77 & 0xFFFFFFFFFFFFFFFCLL;
          }
          while ((v77 & 2) != 0 && v22);
        }
        else
        {
          v76 = a12;
        }
        *(_QWORD *)&__p.__val_ = v22;
        __dst.__r_.__value_.__r.__words[0] = 0;
        v78 = sub_22F25AFD8(v104, &__p, &__dst);
        v79 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if ((v78 & 1) != 0)
        {
LABEL_130:
          v79[1] = v48;
          *v76 = v48;
          sub_22E809914(v48, a6, a5);
          v82 = *(_DWORD *)(v48 + 4);
          v83 = v82 > 5;
          v84 = (1 << v82) & 0x23;
          if (v83 || v84 == 0)
          {
            v94 = *(_DWORD *)(a1 + 40);
            if (v94 >= *(_DWORD *)(a1 + 44))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v94 = *(_DWORD *)(a1 + 40);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v94) = v48;
            ++*(_DWORD *)(a1 + 40);
            if (a6)
              goto LABEL_158;
          }
          else if (a6)
          {
LABEL_158:
            v95 = *(unsigned int *)(a1 + 8);
            v96 = *(_QWORD *)a1;
            v97 = &v110;
            if (v95 >= *(_DWORD *)(a1 + 12))
            {
              v102 = v96 + 8 * v95 > (unint64_t)&v110;
              if (v96 <= (unint64_t)&v110 && v102)
              {
                v103 = (char *)&v110 - v96;
                sub_22F2E006C(a1);
                v96 = *(_QWORD *)a1;
                v97 = (uint64_t *)&v103[*(_QWORD *)a1];
              }
              else
              {
                sub_22F2E006C(a1);
                v96 = *(_QWORD *)a1;
                v97 = &v110;
              }
            }
            v98 = *(unsigned int *)(a1 + 8);
            v99 = *v97;
            *v97 = 0;
            *(_QWORD *)(v96 + 8 * v98) = v99;
            *(_DWORD *)(a1 + 8) = v98 + 1;
            v35 = 1;
            v48 = v110;
            goto LABEL_160;
          }
          v86 = *(_DWORD *)(a1 + 72);
          if (v86 >= *(_DWORD *)(a1 + 76))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v86 = *(_DWORD *)(a1 + 72);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v86) = v48;
          ++*(_DWORD *)(a1 + 72);
          goto LABEL_158;
        }
        v80 = *(_DWORD *)(a1 + 104);
        v81 = *(_DWORD *)(a1 + 112);
        if (4 * v80 + 4 >= 3 * v81)
        {
          v81 *= 2;
        }
        else if (v81 + ~v80 - *(_DWORD *)(a1 + 108) > v81 >> 3)
        {
LABEL_127:
          ++*(_DWORD *)(a1 + 104);
          if (*v79 != -4096)
            --*(_DWORD *)(a1 + 108);
          *v79 = *(_QWORD *)&__p.__val_;
          v79[1] = 0;
          goto LABEL_130;
        }
        sub_22E66BD44((uint64_t)v104, v81);
        __dst.__r_.__value_.__r.__words[0] = 0;
        sub_22F25AFD8(v104, &__p, &__dst);
        v79 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_127;
      }
LABEL_108:
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      goto LABEL_109;
    }
  }
  v64 = llvm::StringMapImpl::FindKey();
  if (v64 != -1 && v64 != (unint64_t)*(unsigned int *)(v62 + 16))
  {
    v87 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 8) + 8 * v64) + 8);
    if (v87)
    {
      *(_QWORD *)(v48 + 344) = v87;
      v88 = v22;
      do
      {
        v89 = *(_QWORD *)(v88 + 8);
        v88 = v89 & 0xFFFFFFFFFFFFFFFCLL;
      }
      while ((v89 & 2) != 0 && v88);
      v71 = *(_QWORD *)(v88 + 72);
      *(_QWORD *)(v88 + 72) = 0;
LABEL_107:
      v72 = a10;
      if (!v71)
        goto LABEL_109;
      goto LABEL_108;
    }
  }
  if (sub_22E808214(*v63) == 2)
  {
    do
    {
      v65 = *(_QWORD *)(v22 + 8);
      v22 = v65 & 0xFFFFFFFFFFFFFFFCLL;
    }
    while ((v65 & 2) != 0 && v22);
    v66 = *(_QWORD *)(v22 + 72);
    *(_QWORD *)(v22 + 72) = 0;
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    v35 = 3;
  }
  else
  {
    v67 = (llvm::MemoryBuffer *)std::system_category();
    if (a3 == 1 && *a2 == 45)
    {
      llvm::MemoryBuffer::getSTDIN(v67);
    }
    else
    {
      v68 = *(_QWORD *)(v48 + 216);
      if (v68)
      {
        do
        {
          v69 = *(_QWORD *)(v68 + 8);
          v68 = v69 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v69 & 2) != 0 && v68);
      }
      sub_22F1D1980(*(_QWORD *)(a1 + 120), v68, 1, 0, 0, (uint64_t)&__dst);
    }
    if ((__dst.__r_.__value_.__s.__data_[16] & 1) == 0)
    {
      v70 = *v63;
      v106 = __dst.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v48 + 344) = sub_22E808280(v70, a2, a3, (uint64_t *)&v106);
      v71 = v106;
      v106 = 0;
      goto LABEL_107;
    }
    __p = *(std::error_code *)&__dst.__r_.__value_.__l.__data_;
    std::error_code::message(&__dst, &__p);
    if (*(char *)(a13 + 23) < 0)
      operator delete(*(void **)a13);
    *(std::string *)a13 = __dst;
    v35 = 2;
  }
LABEL_160:
  v110 = 0;
  if (v48)
    goto LABEL_161;
  return v35;
}

uint64_t sub_22E80985C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4;
  const char *v6;

  if (*(_OWORD *)a2 == 0 && *(_DWORD *)(a2 + 16) == 0)
    return 0;
  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 && *(_DWORD *)(a1 + 16) == (unint64_t)*(unsigned int *)(a2 + 16))
    return 0;
  if (*(_QWORD *)a1 | *(_QWORD *)(a1 + 8) | *(unsigned int *)(a1 + 16))
    v6 = "signature mismatch";
  else
    v6 = "could not read module signature";
  MEMORY[0x2348A0C14](a3, v6);
  return 1;
}

void sub_22E809914(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  if (a2)
  {
    sub_22E679DA0(a1 + 3344, &v5);
    v4 = a1;
    sub_22E679DA0(v5 + 3392, &v4);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 336))
      *(_DWORD *)(a1 + 740) = a3;
    *(_BYTE *)(a1 + 336) = 1;
  }
}

void sub_22E809978(uint64_t a1, const void **a2, uint64_t a3)
{
  const void **v3;
  const void **i;
  const void *v7;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void **v12;
  void *v13;
  void **v14;
  unsigned int *v15;
  uint64_t v16;
  void **v17;
  _BYTE *v18;
  const void **v19;
  const void *v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void **v28;
  const void **v29;
  const void **v30;
  unint64_t v31;
  uint64_t v32;
  const void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  _BYTE v43[4];
  _BYTE v44[44];
  _QWORD *v45;

  v3 = (const void **)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8));
  if (v3 != a2)
  {
    *(_DWORD *)(a1 + 184) = 0;
    sub_22F2E00D8((uint64_t)&v41, a2, a3, v3);
    for (i = *(const void ***)a1; i != a2; ++i)
    {
      sub_22E809C50((uint64_t)*i + 3392, (uint64_t)&v41);
      v7 = *i;
      sub_22E809C50((uint64_t)v7 + 3344, (uint64_t)&v41);
    }
    v8 = *(void ***)(a1 + 64);
    v9 = *(unsigned int *)(a1 + 72);
    if (!(_DWORD)v9)
      goto LABEL_23;
    v10 = &v8[v9];
    v11 = 8 * v9 - 8;
    v12 = *(void ***)(a1 + 64);
    do
    {
      v13 = *v12++;
      v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v41, v13);
      v15 = (unsigned int *)(v42 == v41 ? v44 : v43);
      if (v14 != (void **)&v42[8 * *v15])
        break;
      v11 -= 8;
      v8 = v12;
    }
    while (v12 != v10);
    if (v12 == v10)
    {
LABEL_23:
      v10 = v8;
    }
    else
    {
      v16 = 1;
      v10 = v8;
      do
      {
        v17 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)&v41, v8[v16]);
        if (v42 == v41)
          v18 = v44;
        else
          v18 = v43;
        if (v17 == (void **)&v42[8 * *(unsigned int *)v18])
          *v10++ = v8[v16];
        ++v16;
        v11 -= 8;
      }
      while (v11);
    }
    *(_DWORD *)(a1 + 72) = ((unint64_t)v10 - *(_QWORD *)(a1 + 64)) >> 3;
    v19 = a2;
    while (1)
    {
      v20 = *v19;
      v21 = *((_DWORD *)*v19 + 1);
      v22 = v21 > 5;
      v23 = (1 << v21) & 0x23;
      if (v22 || v23 == 0)
        break;
      if (++v19 == v3)
        goto LABEL_38;
    }
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v26)
    {
      v27 = 8 * v26;
      v28 = *(const void ***)(a1 + 32);
      v29 = (const void **)(v25 + 8 * v26);
      while (*v28 != v20)
      {
        ++v28;
        v27 -= 8;
        if (!v27)
        {
          v28 = v29;
          break;
        }
      }
    }
    else
    {
      v28 = *(const void ***)(a1 + 32);
    }
    *(_DWORD *)(a1 + 40) = ((unint64_t)v28 - v25) >> 3;
LABEL_38:
    v30 = a2;
    do
    {
      v31 = *((_QWORD *)*v30 + 27);
      if (v31)
      {
        do
        {
          v32 = *(_QWORD *)(v31 + 8);
          v31 = v32 & 0xFFFFFFFFFFFFFFFCLL;
        }
        while ((v32 & 2) != 0 && v31);
      }
      v40 = v31;
      v45 = 0;
      if (sub_22F25AFD8((uint64_t *)(a1 + 96), &v40, &v45))
      {
        *v45 = -8192;
        *(int32x2_t *)(a1 + 104) = vadd_s32(*(int32x2_t *)(a1 + 104), (int32x2_t)0x1FFFFFFFFLL);
      }
      ++v30;
    }
    while (v30 != v3);
    v33 = *(const void ***)a1;
    v34 = ((uint64_t)a2 - *(_QWORD *)a1) >> 3;
    v35 = *(unsigned int *)(a1 + 8);
    if (v34 != v35)
    {
      v36 = 8 * v34 - 8 * v35;
      v37 = (uint64_t *)&v33[v35 - 1];
      do
      {
        v38 = *v37;
        *v37 = 0;
        if (v38)
        {
          v39 = sub_22E808464(v38);
          MEMORY[0x2348A0E9C](v39, 0x10F2C40804127A3);
        }
        --v37;
        v36 += 8;
      }
      while (v36);
      v33 = *(const void ***)a1;
    }
    *(_DWORD *)(a1 + 8) = (unint64_t)((char *)a2 - (char *)v33) >> 3;
    if (v42 != v41)
      free(v42);
  }
}

uint64_t sub_22E809C50(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  _QWORD v6[2];

  v2 = result;
  v3 = *(void ***)(result + 24);
  v4 = *(void ***)(result + 32);
  v6[0] = a2;
  v6[1] = result;
  if (v3 != v4)
  {
    while (1)
    {
      result = sub_22E80A63C((uint64_t)v6, v3);
      v5 = v3 + 1;
      if ((_DWORD)result)
        break;
      ++v3;
      if (v5 == v4)
      {
        v3 = v4;
        goto LABEL_9;
      }
    }
    while (v5 != v4)
    {
      result = sub_22E80A63C((uint64_t)v6, v5);
      if ((result & 1) == 0)
        *v3++ = *v5;
      ++v5;
    }
  }
LABEL_9:
  if (v3 != *(void ***)(v2 + 32))
    *(_QWORD *)(v2 + 32) = v3;
  return result;
}

uint64_t sub_22E809CEC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = result;
  *(_QWORD *)(result + 272) = a2;
  if (a2)
  {
    v3 = *(unsigned int *)(result + 8);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)result;
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        result = sub_22E805A94(*(_QWORD *)(v2 + 272), *v4);
        if ((result & 1) == 0)
        {
          v7 = *(unsigned int *)(v2 + 232);
          if (v7 >= *(unsigned int *)(v2 + 236))
          {
            result = llvm::SmallVectorBase<unsigned int>::grow_pod();
            v7 = *(unsigned int *)(v2 + 232);
          }
          *(_QWORD *)(*(_QWORD *)(v2 + 224) + 8 * v7) = v6;
          ++*(_DWORD *)(v2 + 232);
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
  }
  else
  {
    *(_DWORD *)(result + 232) = 0;
  }
  return result;
}

uint64_t sub_22E809D9C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;

  result = *(_QWORD *)(a1 + 272);
  if (result)
  {
    result = sub_22E805A94(result, a2);
    if ((result & 1) == 0)
    {
      v5 = *(_DWORD *)(a1 + 232);
      if (v5 >= *(_DWORD *)(a1 + 236))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a1 + 232);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v5) = a2;
      ++*(_DWORD *)(a1 + 232);
    }
  }
  return result;
}

uint64_t *sub_22E809E0C(uint64_t a1, unsigned int (*a2)(uint64_t, unsigned int *), uint64_t a3, llvm::SmallPtrSetImplBase *a4)
{
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int i;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t j;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int **v44;
  unsigned int **v45;
  uint64_t *v46;
  unsigned int *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[16];
  void *v61;
  uint64_t v62;
  _QWORD v63[5];

  v63[4] = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)(a1 + 176);
  v7 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 184) != v7)
  {
    v8 = a3;
    *(_DWORD *)(a1 + 184) = 0;
    if (*(_DWORD *)(a1 + 188) < v7)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    v61 = v63;
    v62 = 0x400000000;
    if (v7 >= 5)
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    v58 = v60;
    v59 = 0x400000000;
    v9 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v9)
    {
      if (v9 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v59;
      }
      else
      {
        v10 = 0;
      }
      bzero((char *)v58 + 4 * v10, 4 * (v9 - v10));
      LODWORD(v59) = v9;
      v11 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v11)
      {
        v12 = 8 * v11;
        v13 = *(_QWORD *)a1 - 8;
        do
        {
          v14 = *(unsigned int **)(v13 + v12);
          v15 = (*((_QWORD *)v14 + 422) - *((_QWORD *)v14 + 421)) >> 3;
          *((_DWORD *)v58 + *v14) = v15;
          if (!(_DWORD)v15)
          {
            v16 = v62;
            if (v62 >= (unint64_t)HIDWORD(v62))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v16 = v62;
            }
            *((_QWORD *)v61 + v16) = v14;
            LODWORD(v62) = v62 + 1;
          }
          v12 -= 8;
        }
        while (v12);
      }
    }
    for (i = v62; (_DWORD)v62; i = v62)
    {
      v18 = *((_QWORD *)v61 + i - 1);
      LODWORD(v62) = i - 1;
      v19 = *(unsigned int *)(a1 + 184);
      if (v19 >= *(unsigned int *)(a1 + 188))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v19 = *(unsigned int *)(a1 + 184);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v19) = v18;
      ++*(_DWORD *)(a1 + 184);
      v20 = *(_QWORD *)(v18 + 3424);
      v21 = *(_QWORD *)(v18 + 3416);
      while (v20 != v21)
      {
        v23 = *(unsigned int **)(v20 - 8);
        v20 -= 8;
        v22 = v23;
        v24 = *v23;
        v25 = *((_DWORD *)v58 + v24);
        if (v25)
        {
          v26 = v25 - 1;
          *((_DWORD *)v58 + v24) = v26;
          if (!v26)
          {
            v27 = v62;
            if (v62 >= (unint64_t)HIDWORD(v62))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = v62;
            }
            *((_QWORD *)v61 + v27) = v22;
            LODWORD(v62) = v62 + 1;
          }
        }
      }
    }
    sub_22E80A2DC((uint64_t *)(a1 + 280), 0);
    if (v58 != v60)
      free(v58);
    if (v61 != v63)
      free(v61);
    a3 = v8;
  }
  v28 = (uint64_t *)(a1 + 280);
  v29 = *(uint64_t **)(a1 + 280);
  v54 = a3;
  v55 = (uint64_t *)(a1 + 280);
  if (v29)
  {
    *v28 = 0;
    v30 = v29[11];
    v29[11] = 0;
    sub_22E80A2DC(v28, v30);
  }
  else
  {
    v53 = *(_DWORD *)(a1 + 8);
    v29 = (uint64_t *)operator new();
    sub_22F2E013C((uint64_t)v29, v53);
  }
  v61 = v29;
  v31 = *((_DWORD *)v29 + 20);
  *((_DWORD *)v29 + 20) = v31 + 1;
  if (a4)
  {
    v32 = *(unsigned int *)(a1 + 232);
    if ((_DWORD)v32)
    {
      v33 = 0;
      v34 = 8 * v32;
      do
      {
        v35 = *(unsigned int **)(*(_QWORD *)(a1 + 224) + v33);
        v36 = sub_22E3BA914(a4, v35);
        v37 = *((_QWORD *)a4 + 1);
        if (v37 == *(_QWORD *)a4)
          v38 = 20;
        else
          v38 = 16;
        if (v36 == (void **)(v37 + 8 * *(unsigned int *)((char *)a4 + v38)))
          *(_DWORD *)(v29[6] + 4 * *v35) = v31;
        v33 += 8;
      }
      while (v34 != v33);
    }
  }
  v39 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v39)
  {
    for (j = 0; j != v39; ++j)
    {
      v41 = *(unsigned int **)(*v6 + 8 * j);
      v42 = *v41;
      v43 = v29[6];
      if (*(_DWORD *)(v43 + 4 * v42) != v31)
      {
        *(_DWORD *)(v43 + 4 * v42) = v31;
        if (a2(v54, v41))
        {
          while (1)
          {
            v44 = (unsigned int **)*((_QWORD *)v41 + 427);
            v45 = (unsigned int **)*((_QWORD *)v41 + 428);
            v46 = v29;
            while (v44 != v45)
            {
              v47 = *v44;
              if (*(_DWORD *)(v46[6] + 4 * **v44) != v31)
              {
                v48 = *((unsigned int *)v46 + 2);
                if (v48 >= *((unsigned int *)v46 + 3))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v48 = *((unsigned int *)v46 + 2);
                  v29 = (uint64_t *)v61;
                }
                *(_QWORD *)(*v46 + 8 * v48) = v47;
                ++*((_DWORD *)v46 + 2);
                *(_DWORD *)(v29[6] + 4 * **v44) = v31;
                v46 = v29;
              }
              ++v44;
            }
            v49 = *((unsigned int *)v29 + 2);
            if (!(_DWORD)v49)
              break;
            v41 = *(unsigned int **)(*v29 + 8 * v49 - 8);
            *((_DWORD *)v29 + 2) = v49 - 1;
          }
        }
      }
    }
  }
  v61 = 0;
  v57 = v29;
  v50 = *v55;
  *v55 = 0;
  sub_22E80A2DC(v29 + 11, v50);
  v51 = (uint64_t)v57;
  v57 = 0;
  sub_22E80A2DC(v55, v51);
  sub_22E80A2DC((uint64_t *)&v57, 0);
  return sub_22E80A2DC((uint64_t *)&v61, 0);
}

uint64_t *sub_22E80A2DC(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_22E80A2DC(v2 + 88, 0);
    v3 = *(void **)(v2 + 48);
    if (v3 != (void *)(v2 + 64))
      free(v3);
    if (*(_QWORD *)v2 != v2 + 16)
      free(*(void **)v2);
    JUMPOUT(0x2348A0E9CLL);
  }
  return result;
}

uint64_t *sub_22E80A354(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_22E7B57A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_22E80A430(a1, v7);
    v8 = 0;
    sub_22E7B57A0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

_QWORD *sub_22E80A430(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22E80A4F0(a1, v4, &v4[2 * v3]);
    return (_QWORD *)llvm::deallocate_buffer((llvm *)v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22E80A4F0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_22E7B57A0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      *v12 = *a2;
      v11 = a2[1];
      a2[1] = 0;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_22E80A5BC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)result;
    v4 = 8 * v2;
    v5 = v4;
    do
    {
      v6 = *v3;
      *v3++ = 0;
      *a2++ = v6;
      v5 -= 8;
    }
    while (v5);
    v7 = *(_QWORD *)result - 8;
    do
    {
      result = *(_QWORD *)(v7 + v4);
      *(_QWORD *)(v7 + v4) = 0;
      if (result)
      {
        v9 = v7;
        v10 = v4;
        v8 = sub_22E808464(result);
        result = MEMORY[0x2348A0E9C](v8, 0x10F2C40804127A3);
        v7 = v9;
        v4 = v10;
      }
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

BOOL sub_22E80A63C(uint64_t a1, void **a2)
{
  llvm::SmallPtrSetImplBase *v4;
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  int32x2_t *v10;
  _QWORD *v12;

  v4 = *(llvm::SmallPtrSetImplBase **)a1;
  v5 = sub_22E3BA914(*(llvm::SmallPtrSetImplBase **)a1, *a2);
  v6 = v5;
  v7 = *((_QWORD *)v4 + 1);
  v8 = 16;
  if (v7 == *(_QWORD *)v4)
    v8 = 20;
  v9 = (void **)(v7 + 8 * *(unsigned int *)((char *)v4 + v8));
  if (v5 != v9)
  {
    v10 = *(int32x2_t **)(a1 + 8);
    v12 = 0;
    if (sub_22E67A334((uint64_t)v10, a2, &v12))
    {
      *v12 = -8192;
      v10[1] = vadd_s32(v10[1], (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  return v6 != v9;
}

uint64_t sub_22E80A6E8(uint64_t result, unint64_t a2, int a3)
{
  _DWORD **v5;
  _DWORD *v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;

  v5 = (_DWORD **)result;
  if (*(unsigned int *)(result + 12) >= a2)
  {
    v9 = *(_DWORD **)result;
    v8 = (_DWORD *)(result + 8);
    v10 = *(unsigned int *)(result + 8);
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = *(unsigned int *)(result + 8);
    if (v11)
    {
      v12 = *(_DWORD **)result;
      do
      {
        *v12++ = a3;
        --v11;
      }
      while (v11);
      v10 = *v8;
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = &v9[v10];
      do
        *v14++ = a3;
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    *(_DWORD *)(result + 8) = 0;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
    v8 = v5 + 1;
  }
  *v8 = a2;
  return result;
}

uint64_t sub_22E80A79C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

_QWORD *sub_22E80A7A4(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *a1 = &off_24FA72628;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_22E80A820(_QWORD *a1)
{
  sub_22E80A7A4(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E80A844(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  if (*(_BYTE *)(v2 + 48))
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(result + 32), *(const char **)(v2 + 24));
    result = *(_QWORD *)(v1 + 32);
    if (*(_QWORD *)(result + 32) != *(_QWORD *)(result + 16))
      result = llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)result);
  }
  *(_QWORD *)(*(_QWORD *)(v1 + 16) + 32) = 0;
  return result;
}

uint64_t sub_22E80A898@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v6;
  int v7;
  size_t v8;
  size_t v9;
  uint64_t result;
  char *v11;
  const void *v12;
  char *v13;

  v6 = *((_BYTE *)a1 + 23);
  v7 = v6;
  v8 = v6 & 0x7F;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = (size_t)a1[1];
  result = sub_22E3B8BF4(a3, v9 + 1);
  if (*(char *)(result + 23) >= 0)
    v11 = (char *)result;
  else
    v11 = *(char **)result;
  if (v9)
  {
    if (*((char *)a1 + 23) >= 0)
      v12 = a1;
    else
      v12 = *a1;
    result = (uint64_t)memmove(v11, v12, v9);
  }
  v13 = &v11[v9];
  *v13 = a2;
  v13[1] = 0;
  return result;
}

const char **sub_22E80A92C(const char **a1, const char **a2, uint64_t a3)
{
  const char **v3;
  const void *v5;
  size_t v6;
  size_t v7;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8);
    while (1)
    {
      v7 = *v3 ? strlen(*v3) : 0;
      if (v7 == v6 && (!v6 || !memcmp(*v3, v5, v6)))
        break;
      if (++v3 == a2)
        return a2;
    }
  }
  return v3;
}

_QWORD *sub_22E80A9B4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!sub_22E78C8FC(v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_22E78C8FC(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_22E80AA50()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253E4D390);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253E4D390))
  {
    qword_253E4D388 = (uint64_t)sub_22E80AAA8();
    __cxa_guard_release(&qword_253E4D390);
  }
  return qword_253E4D388;
}

llvm::opt::OptTable *sub_22E80AAA8()
{
  llvm::opt::OptTable *v0;
  llvm::opt::OptTable *v1;

  v0 = (llvm::opt::OptTable *)operator new();
  v1 = (llvm::opt::OptTable *)llvm::opt::OptTable::OptTable();
  llvm::opt::OptTable::addValues(v1, "-analyzer-checker", aDebugAnalysiso_0);
  llvm::opt::OptTable::addValues(v0, "-std=", "c89,c90,iso9899:1990,iso9899:199409,gnu89,gnu90,c99,iso9899:1999,c9x,iso9899:199x,gnu99,gnu9x,c11,iso9899:2011,c1x,iso9899:201x,gnu11,gnu1x,c17,iso9899:2017,c18,iso9899:2018,gnu17,gnu18,c2x,gnu2x,c++98,c++03,gnu++98,gnu++03,c++11,c++0x,gnu++11,gnu++0x,c++14,c++1y,gnu++14,gnu++1y,c++17,c++1z,gnu++17,gnu++1z,c++20,c++2a,gnu++20,gnu++2a,c++2b,gnu++2b,cl1.0,cl,cl1.1,cl1.2,cl2.0,cl3.0,clc++1.0,clc++,clc++2021,CL,CL1.1,CL1.2,CL2.0,CL3.0,CLC++,CLC++1.0,CLC++2021,ios-metal1.0,ios-metal1.1,ios-metal1.2,ios-metal2.0,ios-metal2.1,ios-metal2.2,ios-metal2.3,ios-metal2.4,macos-metal1.0,macos-metal1.1,macos-metal1.2,macos-metal2.0,macos-metal2.1,macos-metal2.2,macos-metal2.3,macos-metal2.4,osx-metal1.0,osx-metal1.1,osx-metal1.2,osx-metal2.0,metal3.0,metal3.1,metal3.2,cuda,hip,hlsl,hlsl2015,hlsl2016,hlsl2017,hlsl2018,hlsl2021,hlsl202x,");
  llvm::opt::OptTable::addValues(v0, "--std=", "c89,c90,iso9899:1990,iso9899:199409,gnu89,gnu90,c99,iso9899:1999,c9x,iso9899:199x,gnu99,gnu9x,c11,iso9899:2011,c1x,iso9899:201x,gnu11,gnu1x,c17,iso9899:2017,c18,iso9899:2018,gnu17,gnu18,c2x,gnu2x,c++98,c++03,gnu++98,gnu++03,c++11,c++0x,gnu++11,gnu++0x,c++14,c++1y,gnu++14,gnu++1y,c++17,c++1z,gnu++17,gnu++1z,c++20,c++2a,gnu++20,gnu++2a,c++2b,gnu++2b,cl1.0,cl,cl1.1,cl1.2,cl2.0,cl3.0,clc++1.0,clc++,clc++2021,CL,CL1.1,CL1.2,CL2.0,CL3.0,CLC++,CLC++1.0,CLC++2021,ios-metal1.0,ios-metal1.1,ios-metal1.2,ios-metal2.0,ios-metal2.1,ios-metal2.2,ios-metal2.3,ios-metal2.4,macos-metal1.0,macos-metal1.1,macos-metal1.2,macos-metal2.0,macos-metal2.1,macos-metal2.2,macos-metal2.3,macos-metal2.4,osx-metal1.0,osx-metal1.1,osx-metal1.2,osx-metal2.0,metal3.0,metal3.1,metal3.2,cuda,hip,hlsl,hlsl2015,hlsl2016,hlsl2017,hlsl2018,hlsl2021,hlsl202x,");
  return v0;
}

BOOL sub_22E80AB38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  signed __int8 v2;
  uint64_t v3;
  signed __int8 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v13;
  BOOL v14;
  _BOOL8 v15;

  v2 = a1[23];
  if (v2 >= 0)
    v3 = v2 & 0x7F;
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = v4;
  v6 = v4 & 0x7F;
  if (v5 < 0)
    v6 = *((_QWORD *)a2 + 1);
  if (v3 != v6)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((a1[23] & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if ((v2 & 0x7F) == 0)
    return 1;
  v7 = (v2 & 0x7F) - 1;
  do
  {
    v9 = *a1++;
    v8 = v9;
    v11 = *a2++;
    v10 = v11;
    v13 = v7-- != 0;
    v14 = v8 == v10;
    v15 = v8 == v10;
  }
  while (v14 && v13);
  return v15;
}

uint64_t *sub_22E80ABE0(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i)
  {
    if (v7 != -8)
    {
      while (!v7 || v7 == -8)
      {
        v8 = i[1];
        ++i;
        v7 = v8;
      }
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  v9 = MEMORY[0x23489D23C](a3 + 17, 8);
  v10 = v9;
  v11 = v9 + 16;
  if (a3)
    memcpy((void *)(v9 + 16), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  *(_QWORD *)v10 = a3;
  *(_BYTE *)(v10 + 8) = 0;
  *i = v10;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t sub_22E80ACDC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  const char **v8;
  int AsSignedInteger;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  size_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  void *__p[2];
  char v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  v6 = sub_22E721714(a1, a2);
  if (v6)
  {
    v7 = v6;
    v8 = *(const char ***)(v6 + 48);
    if (*v8)
      strlen(*v8);
    v22 = 0;
    AsSignedInteger = llvm::getAsSignedInteger();
    if (AsSignedInteger)
      a3 = a3;
    else
      a3 = v22;
    if (a4 && AsSignedInteger)
    {
      *(_QWORD *)(a4 + 312) = 0x17500000000;
      if (*(char *)(a4 + 311) < 0)
      {
        **(_BYTE **)(a4 + 288) = 0;
        *(_QWORD *)(a4 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(a4 + 288) = 0;
        *(_BYTE *)(a4 + 311) = 0;
      }
      v22 = (unsigned __int8 *)(a4 + 320);
      v23 = 0;
      v24 = a4;
      v25 = 1;
      *(_BYTE *)(a4 + 320) = 0;
      *(_DWORD *)(a4 + 664) = 0;
      v10 = *(unsigned int *)(a4 + 776);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(a4 + 768);
        v12 = 56 * v10;
        do
        {
          if (*(char *)(v11 + v12 - 9) < 0)
            operator delete(*(void **)(v11 + v12 - 32));
          v12 -= 56;
        }
        while (v12);
      }
      *(_DWORD *)(a4 + 776) = 0;
      llvm::opt::Arg::getAsString();
      if (v21 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if (v21 >= 0)
        v14 = v21 & 0x7F;
      else
        v14 = (size_t)__p[1];
      sub_22E3B89A8(&v22, v13, v14);
      v15 = **(_QWORD **)(v7 + 48);
      v16 = v22;
      if (!v22)
      {
        v16 = (unsigned __int8 *)sub_22E3B8AAC(v23);
        v22 = v16;
      }
      v16[*v16 + 1] = 1;
      v17 = v22;
      v18 = *v22;
      *v22 = v18 + 1;
      *(_QWORD *)&v17[8 * v18 + 16] = v15;
      if (v21 < 0)
        operator delete(__p[0]);
      sub_22E3BB0B8((uint64_t)&v22);
    }
  }
  return a3;
}

uint64_t sub_22E80AE90(uint64_t a1)
{
  char v2;
  _QWORD **v3;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD ***)a1;
  *(_QWORD *)a1 = 0;
  if ((v2 & 1) != 0)
  {
    if (v3)
      ((void (*)(_QWORD **))(*v3)[1])(v3);
  }
  else if (v3)
  {
    sub_22F2E06C8((uint64_t)(v3 + 3), v3[4]);
    MEMORY[0x2348A0E9C](v3, 0x1020C401F42C5C2);
  }
  return a1;
}

char *sub_22E80AF00(uint64_t *a1, uint64_t a2, char *__src, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  _BYTE *v16;
  char v17;
  size_t __n;

  v5 = __src;
  v7 = *a1;
  v8 = a1[1];
  v9 = a2 - *a1;
  v10 = a4 - __src;
  v11 = v8 + a4 - __src;
  v12 = a1[2];
  if (*a1 + v8 == a2)
  {
    if (v12 < v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v7 = *a1;
      v8 = a1[1];
    }
    if (v5 != a4)
    {
      memcpy((void *)(v7 + v8), v5, v10);
      v7 = *a1;
      v8 = a1[1];
    }
    a1[1] = v8 + v10;
    return (char *)(v7 + v9);
  }
  else
  {
    if (v12 < v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v7 = *a1;
      v8 = a1[1];
    }
    v13 = (char *)(v7 + v9);
    v15 = (char *)(v7 + v8);
    if (v8 - v9 < v10)
    {
      __n = v8 - v9;
      a1[1] = v8 + v10;
      if (v9 != v8)
        memcpy((void *)(v7 + v10 + v9), v13, v8 - v9);
      if (__n)
      {
        v16 = v13;
        do
        {
          v17 = *v5++;
          *v16++ = v17;
          --__n;
        }
        while (__n);
      }
      if (v5 != a4)
        memcpy(v15, v5, a4 - v5);
    }
    else
    {
      sub_22E80B090(a1, &v15[-v10], (char *)(v7 + v8));
      if (&v15[-v10] != v13)
        memmove(&v13[v10], v13, &v15[-v10] - v13);
      if (v5 != a4)
        memmove(v13, v5, v10);
    }
  }
  return v13;
}

_QWORD *sub_22E80B090(_QWORD *result, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = a3 - a2;
  v4 = result[1];
  if (result[2] < (unint64_t)(v4 + a3 - a2))
  {
    v9 = a3 - a2;
    v10 = result;
    v7 = a3;
    v8 = a2;
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
    a2 = v8;
    v3 = v9;
    a3 = v7;
    result = v10;
    v4 = v10[1];
  }
  if (a2 != a3)
  {
    v5 = (_BYTE *)(*result + v4);
    do
    {
      v6 = *a2++;
      *v5++ = v6;
    }
    while (a2 != a3);
    v4 = result[1];
  }
  result[1] = v4 + v3;
  return result;
}

uint64_t sub_22E80B11C(uint64_t a1, const char **a2)
{
  const char *v3;
  size_t v4;
  unsigned int v5;
  const char **v6;

  v3 = *a2;
  if (*a2)
    v4 = strlen(*a2);
  else
    v4 = 0;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a1 + 8);
  }
  v6 = (const char **)(*(_QWORD *)a1 + 16 * v5);
  *v6 = v3;
  v6[1] = (const char *)v4;
  LODWORD(v6) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v6;
  return *(_QWORD *)a1 + 16 * v6 - 16;
}

void sub_22E80B1A8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80))
  {
    sub_22F2E0858(a1 + 56);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 80) = 0;
  }
}

void *sub_22E80B1EC(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)llvm::deallocate_buffer(*(llvm **)a1, (void *)(32 * *(unsigned int *)(a1 + 16)));
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)MEMORY[0x23489D23C](32 * v5, 4);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 32 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

_QWORD *sub_22E80B260(_QWORD *__dst, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v13;
  int v14;
  int v15;

  if (*((char *)a2 + 23) < 0)
  {
    sub_22E3BB2B4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v13 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v13;
  }
  __dst[3] = a3;
  __dst[4] = a4;
  __dst[5] = a5;
  __dst[6] = a6;
  __dst[7] = 0;
  __dst[8] = 0;
  *((_DWORD *)__dst + 18) = 0;
  __dst[7] = *(_QWORD *)a7;
  *(_QWORD *)a7 = 0;
  *((_DWORD *)__dst + 16) = *(_DWORD *)(a7 + 8);
  *(_DWORD *)(a7 + 8) = 0;
  v14 = *((_DWORD *)__dst + 17);
  *((_DWORD *)__dst + 17) = *(_DWORD *)(a7 + 12);
  *(_DWORD *)(a7 + 12) = v14;
  v15 = *((_DWORD *)__dst + 18);
  *((_DWORD *)__dst + 18) = *(_DWORD *)(a7 + 16);
  *(_DWORD *)(a7 + 16) = v15;
  return __dst;
}

uint64_t sub_22E80B318(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((__int128 *)a2 != a3)
  {
    sub_22E80B390(a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

__int128 *sub_22E80B390(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;
  __int128 v6;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      v6 = *v4;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 2);
      *(_OWORD *)a3 = v6;
      a3 += 24;
      *((_BYTE *)v4 + 23) = 0;
      *(_BYTE *)v4 = 0;
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_22E80B400(uint64_t a1, int a2, uint64_t a3)
{
  char v4;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  llvm *v11;
  llvm::CrashRecoveryContext *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  llvm *v16;
  uint64_t v17;
  llvm *v18;
  llvm *TimeTraceProfilerInstance;
  uint64_t v20;
  llvm *v21;
  llvm **v22;
  llvm **i;
  llvm *v25;
  llvm *v26;
  llvm::CrashRecoveryContext *v27;
  uint64_t Current;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm **v32;
  llvm::raw_ostream *v33;
  llvm *v34;
  uint64_t *v35;
  llvm **v36;
  int v37;
  uint64_t v38;
  _QWORD v39[4];

  v4 = a2;
  if (a2)
  {
    sub_22F3AEA5C();
    sub_22F3F18BC();
  }
  v6 = *(_BYTE *)(a1 + 200);
  *(_BYTE *)(a1 + 200) = v4;
  v7 = *(_QWORD **)(a1 + 11968);
  v8 = *(_QWORD **)(a1 + 11976);
  while (v7 != v8)
  {
    if (*v7)
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 16))(*v7, a1);
    ++v7;
  }
  v9 = *(_QWORD *)(a1 + 96);
  v10 = (uint64_t *)operator new();
  v11 = (llvm *)sub_22F2F1248(v10, *(_QWORD *)(a1 + 80), a1, a3);
  v12 = (llvm::CrashRecoveryContext *)llvm::SavePrettyStackState(v11);
  if (v12 && (v27 = v12, (Current = llvm::CrashRecoveryContext::GetCurrent(v12)) != 0))
  {
    v29 = Current;
    v13 = operator new();
    *(_BYTE *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = v27;
    *(_QWORD *)v13 = &off_24FAA48B8;
    *(_QWORD *)(v13 + 8) = v29;
    llvm::CrashRecoveryContext::registerCleanup();
    v14 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v39[0] = &off_24FAA4890;
  v39[3] = v10;
  v15 = sub_22F2E08E0((uint64_t)v10);
  if (v15)
    llvm::CrashRecoveryContext::registerCleanup();
  sub_22F18E430(*(_QWORD *)(a1 + 80));
  v16 = *(llvm **)(*(_QWORD *)(a1 + 88) + 16048);
  if (v16)
    v16 = (llvm *)(*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)v16 + 176))(v16, v9);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 1016);
  if (!v17)
    goto LABEL_20;
  if (llvm::getTimeTraceProfilerInstance(v16))
    llvm::timeTraceProfilerBegin();
  sub_22F2F1314((uint64_t)v10);
  v38 = 0;
  v37 = 0;
  sub_22EB48CC8(a1, 6, 0, 3);
  if ((sub_22E88657C((uint64_t)v10, &v38, &v37) & 1) != 0)
  {
LABEL_18:
    v18 = (llvm *)sub_22EB48E64(a1);
    TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance(v18);
    if (TimeTraceProfilerInstance)
      llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
LABEL_20:
    v20 = *(unsigned int *)(a1 + 3296);
    if ((_DWORD)v20)
    {
      v35 = *(uint64_t **)(a1 + 3288);
      v30 = 8 * v20;
      do
      {
        v31 = *v35++;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, v31);
        v30 -= 8;
      }
      while (v30);
    }
    v21 = (llvm *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 48))(v9, *(_QWORD *)(a1 + 88));
    v22 = *(llvm ***)(a1 + 11968);
    for (i = *(llvm ***)(a1 + 11976); v22 != i; i = v36)
    {
      v36 = i;
      v32 = v22;
      v21 = *v22;
      if (*v22)
        v21 = (llvm *)(*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)v21 + 24))(v21, a1);
      v22 = v32 + 1;
    }
    *(_BYTE *)(a1 + 200) = v6;
    if ((v4 & 1) != 0)
    {
      v33 = (llvm::raw_ostream *)llvm::errs(v21);
      sub_22E47DAC0(v33, "\nSTATISTICS:\n");
      if (v17)
        sub_22F308AC0(v10[11]);
      v34 = (llvm *)sub_22F365698(*(_QWORD *)(a1 + 88));
      sub_22F3AEA6C(v34);
      sub_22F3F1724();
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 152))(v9);
    }
    goto LABEL_24;
  }
  while (!v38 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9))
  {
    if ((sub_22E88668C((uint64_t)v10, &v38, &v37) & 1) != 0)
      goto LABEL_18;
  }
  v25 = (llvm *)sub_22EB48E64(a1);
  v26 = (llvm *)llvm::getTimeTraceProfilerInstance(v25);
  if (v26)
    llvm::timeTraceProfilerEnd(v26);
LABEL_24:
  if (v15 && !*(_BYTE *)(v15 + 16))
    llvm::CrashRecoveryContext::unregisterCleanup();
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v39);
  if ((v14 & 1) == 0 && !*(_BYTE *)(v13 + 16))
    llvm::CrashRecoveryContext::unregisterCleanup();
  return (*(uint64_t (**)(uint64_t *))(*v10 + 8))(v10);
}

void sub_22E80B77C(llvm::PrettyStackTraceEntry *a1)
{
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry(a1);
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22E80B7A0(_QWORD *result, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  size_t v10;
  char *v11;
  unint64_t v12;
  const char *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  int v18;

  v2 = this;
  v3 = result[3];
  if (*(_WORD *)(v3 + 32) == 1)
  {
    v4 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v4 <= 0x1BuLL)
      return (_QWORD *)llvm::raw_ostream::write(this, "<eof> parser at end of file\n");
    qmemcpy(v4, "<eof> parser at end of file\n", 28);
    v15 = *((_QWORD *)this + 4) + 28;
    goto LABEL_16;
  }
  if (!*(_DWORD *)(v3 + 16))
  {
    v5 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v5 <= 0x24uLL)
      return (_QWORD *)llvm::raw_ostream::write(this, "<unknown> parser at unknown location\n");
    qmemcpy(v5, "<unknown> parser at unknown location\n", 37);
    v15 = *((_QWORD *)this + 4) + 37;
LABEL_16:
    *((_QWORD *)v2 + 4) = v15;
    return result;
  }
  v6 = result;
  v7 = *(_QWORD *)(v3 + 8);
  v18 = *(_DWORD *)(v3 + 16);
  result = sub_22F422CEC(&v18, this, *(_QWORD **)(v7 + 88));
  if (*(unsigned __int16 *)(v3 + 32) - 399 <= 0x28)
  {
    v8 = (void *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v8 <= 0x15uLL)
      return (_QWORD *)llvm::raw_ostream::write(v2, ": at annotation token\n");
    qmemcpy(v8, ": at annotation token\n", 22);
    v15 = *((_QWORD *)v2 + 4) + 22;
    goto LABEL_16;
  }
  v17 = 0;
  v9 = *(uint64_t **)(*(_QWORD *)(v6[3] + 8) + 88);
  v10 = *(unsigned int *)(v3 + 20);
  result = sub_22F1E2D38(v9, *(_DWORD *)(v3 + 16), &v17);
  v11 = (char *)*((_QWORD *)v2 + 4);
  v12 = *((_QWORD *)v2 + 3) - (_QWORD)v11;
  if (v17)
  {
    if (v12 > 0x1E)
    {
      qmemcpy(v11, ": unknown current parser token\n", 31);
      v15 = *((_QWORD *)v2 + 4) + 31;
      goto LABEL_16;
    }
    v13 = ": unknown current parser token\n";
    v14 = v2;
  }
  else
  {
    v16 = result;
    if (v12 > 0x17)
    {
      qmemcpy(v11, ": current parser token '", 24);
      result = (_QWORD *)(*((_QWORD *)v2 + 4) + 24);
      *((_QWORD *)v2 + 4) = result;
    }
    else
    {
      v2 = (llvm::raw_ostream *)llvm::raw_ostream::write(v2, ": current parser token '");
      result = (_QWORD *)*((_QWORD *)v2 + 4);
    }
    if (*((_QWORD *)v2 + 3) - (_QWORD)result >= v10)
    {
      if ((_DWORD)v10)
      {
        memcpy(result, v16, v10);
        result = (_QWORD *)(*((_QWORD *)v2 + 4) + v10);
        *((_QWORD *)v2 + 4) = result;
      }
    }
    else
    {
      v2 = (llvm::raw_ostream *)llvm::raw_ostream::write(v2, (const char *)v16);
      result = (_QWORD *)*((_QWORD *)v2 + 4);
    }
    if (*((_QWORD *)v2 + 3) - (_QWORD)result > 1uLL)
    {
      *(_WORD *)result = 2599;
      v15 = *((_QWORD *)v2 + 4) + 2;
      goto LABEL_16;
    }
    v13 = "'\n";
    v14 = v2;
  }
  return (_QWORD *)llvm::raw_ostream::write(v14, v13);
}

void sub_22E80BA3C(llvm::CrashRecoveryContextCleanup *a1)
{
  llvm::CrashRecoveryContextCleanup::~CrashRecoveryContextCleanup(a1);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E80BA60(uint64_t a1, const void *a2)
{
  return llvm::RestorePrettyStackState(*(llvm **)(a1 + 40), a2);
}

unint64_t sub_22E80BA68(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7)
{
  unsigned int v7;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  _QWORD *v61;
  uint64_t v62;
  size_t v63;
  char *v64;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _QWORD v73[13];

  v7 = a7;
  v73[12] = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a5 + 8);
  if (v14)
  {
    v15 = *(void **)v14;
    v16 = *(unsigned int *)(v14 + 8);
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v17 = *(_QWORD **)(a1 + 88);
  v18 = (uint64_t *)v17[1611];
  if ((*(_BYTE *)(*(_QWORD *)a4 + 4) & 0x10) != 0)
  {
    v19 = sub_22EACFAB8((uint64_t)v17, v18, a4, v15, v16, v16, a7, (uint64_t)a6);
    if (v19)
    {
LABEL_9:
      sub_22E830518((_QWORD *)a1, a4, v19);
      v20 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    v19 = sub_22EAACA38(v17, v18, a2, (_QWORD **)a4, (int **)v15, v16, 0, a6, 0);
    if (v19)
    {
      sub_22EA63DD8(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v19, a3, 1);
      sub_22E9114FC(*(_QWORD **)(a1 + 88), v19);
      if (v7)
        sub_22EAD1204(*(_QWORD **)(a1 + 88), v19, v7);
      goto LABEL_9;
    }
  }
  v20 = 1;
LABEL_11:
  if (!*(_BYTE *)(a4 + 2048))
  {
    sub_22EA7E84C(*(_QWORD **)(a4 + 1688), *(_QWORD *)(a4 + 2040), (unsigned int *)v19);
    *(_BYTE *)(a4 + 2048) = 1;
  }
  if (*(_WORD *)(a1 + 32) != 63)
  {
    if (*(_BYTE *)(a1 + 2625)
      && ((v20 & 1) != 0 || sub_22EA30968(*(_QWORD *)(a1 + 88), v19))
      && sub_22E87A070(a1))
    {
      sub_22F31E348(*(_QWORD *)(a1 + 88), v19);
      return v19;
    }
    if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 148) & 0x1000) != 0
      && (*(_WORD *)(a4 + 1088) & 0xC) == 4
      && (*(_BYTE *)(*(_QWORD *)a4 + 4) & 0x60) == 0)
    {
      if ((v20 & 1) != 0)
        goto LABEL_26;
      if (!v19 || (v66 = v19, (*(_DWORD *)(v19 + 28) & 0x7Eu) - 58 <= 0xFFFFFFF9))
      {
        if ((*(_DWORD *)(v19 + 28) & 0x7F) != 0x1D)
          goto LABEL_26;
        v66 = *(_QWORD *)(v19 + 48);
        if (!v66)
          goto LABEL_26;
      }
      v67 = *(_QWORD *)(*(_QWORD *)(v66 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (!v67 || *(unsigned __int8 *)(v67 + 16) - 27 <= 0xFFFFFFFD)
        v67 = sub_22F10CF48(v67);
      v68 = *(_QWORD *)(*(_QWORD *)(v67 + 24) & 0xFFFFFFFFFFFFFFF0);
      LOBYTE(v71) = 0;
      v69 = sub_22F110500((uint64_t)&v71, v68);
      if (!v69 || *(_BYTE *)(v69 + 16) != 14)
      {
LABEL_26:
        if (((sub_22EFC7ADC(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 216)) & 1) != 0 || (*(_DWORD *)a5 | 2) != 2)
          && (sub_22ED73440(*(_QWORD *)(a1 + 88)) & 1) == 0)
        {
          v71 = v73;
          v72 = 0x400000000;
          sub_22F2F00B4((unsigned __int16 *)a1, (uint64_t)&v71);
          if ((v20 & 1) == 0)
          {
            if (!v19 || (v70 = v19, (*(_DWORD *)(v19 + 28) & 0x7Eu) - 58 <= 0xFFFFFFF9))
            {
              if ((*(_DWORD *)(v19 + 28) & 0x7F) == 0x1D)
                v70 = *(_QWORD *)(v19 + 48);
              else
                v70 = 0;
            }
            sub_22EA30480(*(_QWORD **)(a1 + 88), v70, 0, 0);
            sub_22F346CB4(*(_QWORD *)(a1 + 88), v70, v19, (uint64_t)&v71);
          }
          if (v71 != v73)
            free(v71);
          return v19;
        }
      }
    }
    v21 = operator new();
    *(_QWORD *)v21 = &off_24FAA49E0;
    *(_QWORD *)(v21 + 8) = a1;
    *(_QWORD *)(v21 + 16) = v19;
    *(_QWORD *)(v21 + 24) = v21 + 40;
    v22 = v21 + 24;
    *(_QWORD *)(v21 + 32) = 0x400000000;
    *(_BYTE *)(v21 + 136) = 0;
    v23 = *(_QWORD *)(a1 + 2680) + *(_QWORD *)(a1 + 2672) - 1;
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2648) + ((v23 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v23 & 0x1FF));
    v25 = *(_DWORD *)(v24 + 24);
    if (v25 >= *(_DWORD *)(v24 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = *(_DWORD *)(v24 + 24);
    }
    *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * v25) = v21;
    ++*(_DWORD *)(v24 + 24);
    v26 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888) + 8);
    if (((v20 | (v26 >> 7)) & 1) != 0)
    {
      v27 = v26 >> 7;
    }
    else if ((*(_DWORD *)(v19 + 28) & 0x7F) == 0x1D)
    {
      v27 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v19 + 56)
                                            + 8 * ((*(_DWORD *)(*(_QWORD *)(v19 + 56) + 12) & 0x1FFFFFFFu) - 1)
                                            + 16)
                                + 29) >> 1) & 1;
    }
    else
    {
      LOBYTE(v27) = 0;
    }
    *(_BYTE *)(v21 + 136) = v27;
    v43 = *(unsigned __int16 *)(a1 + 32);
    if (sub_22E80C35C(a1, v22))
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 752))
      {
        v44 = *(unsigned int *)(v21 + 32);
        if ((_DWORD)v44)
        {
          v45 = (unsigned __int16 *)(*(_QWORD *)(v21 + 24) + 16);
          v46 = 24 * v44;
          do
          {
            v47 = *v45;
            v45 += 12;
            if (v47 == 3)
              return v19;
            v46 -= 24;
          }
          while (v46);
        }
      }
      sub_22F2E2198(a1);
    }
    else
    {
      sub_22E80F398((unsigned __int16 *)a1, 24, 24, v22, 0, 1);
      if (v43 == 151)
      {
        while (*(_WORD *)(a1 + 32) == 129)
        {
          sub_22E80F398((unsigned __int16 *)a1, 23, 23, v22, 0, 1);
          sub_22E80F398((unsigned __int16 *)a1, 24, 24, v22, 0, 1);
        }
      }
      if ((v20 & 1) == 0)
      {
        if (!v19 || (v53 = v19, (*(_DWORD *)(v19 + 28) & 0x7Eu) - 58 <= 0xFFFFFFF9))
        {
          if ((*(_DWORD *)(v19 + 28) & 0x7F) == 0x1D)
            v53 = *(_QWORD *)(v19 + 48);
          else
            v53 = 0;
        }
        sub_22EA30480(*(_QWORD **)(a1 + 88), v53, 0, 0);
        *(_QWORD *)(v53 + 80) |= 0x800000000uLL;
        return v19;
      }
    }
    v48 = *(_QWORD *)(a1 + 2680) + *(_QWORD *)(a1 + 2672) - 1;
    v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2648) + ((v48 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v48 & 0x1FF));
    v50 = *(unsigned int *)(v49 + 24);
    v51 = *(_QWORD *)(*(_QWORD *)(v49 + 16) + 8 * v50 - 8);
    if (v51)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      v52 = *(_QWORD *)(a1 + 2680) + *(_QWORD *)(a1 + 2672) - 1;
      v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2648) + ((v52 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v52 & 0x1FF));
      LODWORD(v50) = *(_DWORD *)(v49 + 24);
    }
    *(_DWORD *)(v49 + 24) = v50 - 1;
    return v19;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (v20)
  {
    LOWORD(v71) = 62;
    sub_22E885940(a1, (unsigned __int16 *)&v71, 1, 0);
    return 0;
  }
  v28 = *(unsigned __int16 *)(a1 + 32);
  if ((v28 - 399) > 0x28)
  {
    v32 = *(_DWORD *)(a1 + 16);
    v31 = v32 + *(_DWORD *)(a1 + 20) - 1;
    if (v28 == 82)
    {
      *(_DWORD *)(a1 + 40) = v32;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v30 = *(_DWORD *)(a1 + 40);
    }
    else
    {
      if (v28 == 132)
      {
        *(_DWORD *)(a1 + 40) = v32;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v30 = *(_DWORD *)(a1 + 40);
        if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
          v33 = 1927;
        else
          v33 = 1807;
        v34 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v34 + 312) = v30;
        *(_DWORD *)(v34 + 316) = v33;
        if (*(char *)(v34 + 311) < 0)
        {
          **(_BYTE **)(v34 + 288) = 0;
          *(_QWORD *)(v34 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v34 + 288) = 0;
          *(_BYTE *)(v34 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v71, v34);
        v35 = (unsigned __int8 *)v71;
        if (!v71)
        {
          v35 = (unsigned __int8 *)sub_22E3B8AAC(v72);
          v71 = v35;
        }
        v35[*v35 + 1] = 2;
        v36 = v71;
        v37 = *(unsigned __int8 *)v71;
        *(_BYTE *)v71 = v37 + 1;
        v38 = 1;
        v36[v37 + 2] = 1;
        sub_22E3BB0B8((uint64_t)&v71);
        sub_22EAB9ED0(*(_QWORD **)(a1 + 88), v19, v30);
        v39 = (*(_DWORD *)(v19 + 28) & 0x7E) - 58;
        v40 = 1;
        v41 = 1;
        v42 = 1;
        goto LABEL_76;
      }
      v30 = 0;
    }
  }
  else
  {
    v29 = *(_DWORD *)(a1 + 20);
    if (!v29)
      v29 = *(_DWORD *)(a1 + 16);
    v30 = 0;
    v31 = v29 - 1;
  }
  if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
    v54 = 1927;
  else
    v54 = 1807;
  v55 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v55 + 312) = v30;
  *(_DWORD *)(v55 + 316) = v54;
  if (*(char *)(v55 + 311) < 0)
  {
    **(_BYTE **)(v55 + 288) = 0;
    *(_QWORD *)(v55 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v55 + 288) = 0;
    *(_BYTE *)(v55 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&v71, v55);
  v56 = (unsigned __int8 *)v71;
  if (!v71)
  {
    v56 = (unsigned __int8 *)sub_22E3B8AAC(v72);
    v71 = v56;
  }
  v56[*v56 + 1] = 2;
  v57 = v71;
  v58 = *(unsigned __int8 *)v71;
  *(_BYTE *)v71 = v58 + 1;
  v57[v58 + 2] = 0;
  sub_22E3BB0B8((uint64_t)&v71);
  sub_22EAD04B8(*(_QWORD *)(a1 + 88), v19, v30);
  v38 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v39 = (*(_DWORD *)(v19 + 28) & 0x7E) - 58;
LABEL_76:
  if (v39 >= 0xFFFFFFFA)
  {
    *(_DWORD *)(v19 + 140) = v31;
    v41 = v38;
    v42 = v40;
  }
  if (*(_WORD *)(a1 + 32) == 65)
  {
    v59 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v59 + 312) = v30;
    *(_DWORD *)(v59 + 316) = 1471;
    if (*(char *)(v59 + 311) < 0)
    {
      **(_BYTE **)(v59 + 288) = 0;
      *(_QWORD *)(v59 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v59 + 288) = 0;
      *(_BYTE *)(v59 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v71, v59);
    v60 = (unsigned __int8 *)v71;
    if (!v71)
    {
      v60 = (unsigned __int8 *)sub_22E3B8AAC(v72);
      v71 = v60;
    }
    v60[*v60 + 1] = 2;
    v61 = v71;
    v62 = *(unsigned __int8 *)v71;
    *(_BYTE *)v71 = v62 + 1;
    v61[v62 + 2] = v42;
    sub_22E3BB0B8((uint64_t)&v71);
    LOWORD(v71) = 62;
    goto LABEL_92;
  }
  if (v41)
    v63 = 6;
  else
    v63 = 7;
  if (v41)
    v64 = "delete";
  else
    v64 = "default";
  if (sub_22E8847B4(a1, 0x3Eu, 16, v64, v63))
  {
    LOWORD(v71) = 62;
LABEL_92:
    sub_22E885940(a1, (unsigned __int16 *)&v71, 1, 0);
  }
  return v19;
}

uint64_t sub_22E80C35C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  __int128 *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  __int128 v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  unint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  __int128 v104;
  __int16 v105;
  __int16 v106;
  __int16 v107;
  unsigned int v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  unsigned __int16 v113;

  v4 = a1 + 16;
  v5 = *(unsigned __int16 *)(a1 + 32);
  if (v5 == 151)
  {
    v6 = sub_22E4EF088(a2, v4, 1);
    v7 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v8 = *(_OWORD *)v6;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
    *(_OWORD *)v7 = v8;
    ++*(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
    v5 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v5 != 61)
  {
    sub_22E80F398((unsigned __int16 *)a1, 23, 24, a2, 1, 0);
    if (*(_WORD *)(a1 + 32) == 23)
      goto LABEL_56;
LABEL_63:
    v66 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v66 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v66 + 316) = 15;
    if (*(char *)(v66 + 311) < 0)
    {
      **(_BYTE **)(v66 + 288) = 0;
      *(_QWORD *)(v66 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v66 + 288) = 0;
      *(_BYTE *)(v66 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v111, v66);
    v67 = (unsigned __int8 *)v111;
    if (!(_QWORD)v111)
    {
      v67 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v111 + 1));
      *(_QWORD *)&v111 = v67;
    }
    v68 = &v67[*v67];
    goto LABEL_68;
  }
  v9 = sub_22E4EF088(a2, v4, 1);
  v10 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
  v11 = *(_OWORD *)v9;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
  v12 = 0;
  v13 = (__int128 *)(a1 + 48);
  while (2)
  {
    while (2)
    {
      v14 = *(unsigned __int16 *)(a1 + 32);
      do
      {
        if (v14 == 162)
        {
          v15 = sub_22E4EF088(a2, v4, 1);
          v16 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
          v17 = *(_OWORD *)v15;
          *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
          *(_OWORD *)v16 = v17;
          ++*(_DWORD *)(a2 + 8);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
          if (*(_WORD *)(a1 + 32) != 21)
          {
            v62 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v62 + 312) = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(v62 + 316) = 1510;
            if (*(char *)(v62 + 311) < 0)
            {
              **(_BYTE **)(v62 + 288) = 0;
              *(_QWORD *)(v62 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v62 + 288) = 0;
              *(_BYTE *)(v62 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v111, v62);
            v63 = (unsigned __int8 *)v111;
            if (!(_QWORD)v111)
            {
              v63 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v111 + 1));
              *(_QWORD *)&v111 = v63;
            }
            v61 = 1;
            v63[*v63 + 1] = 1;
            v64 = v111;
            v65 = *(unsigned __int8 *)v111;
            *(_BYTE *)v111 = v65 + 1;
            *(_QWORD *)(v64 + 8 * v65 + 16) = "decltype";
            sub_22E3BB0B8((uint64_t)&v111);
            return v61;
          }
          v18 = *(_DWORD *)(a1 + 40);
          v19 = sub_22E4EF088(a2, v4, 1);
          v20 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
          v21 = *(_OWORD *)v19;
          *(_QWORD *)(v20 + 16) = *(_QWORD *)(v19 + 16);
          *(_OWORD *)v20 = v21;
          ++*(_DWORD *)(a2 + 8);
          sub_22E80F720(a1);
          if (sub_22E80F398((unsigned __int16 *)a1, 22, 22, a2, 1, 1))
          {
            v14 = *(unsigned __int16 *)(a1 + 32);
            goto LABEL_10;
          }
          v73 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v73 + 312) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(v73 + 316) = 15;
          if (*(char *)(v73 + 311) < 0)
          {
            **(_BYTE **)(v73 + 288) = 0;
            *(_QWORD *)(v73 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v73 + 288) = 0;
            *(_BYTE *)(v73 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v111, v73);
          v74 = (unsigned __int8 *)v111;
          if (!(_QWORD)v111)
          {
            v74 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v111 + 1));
            *(_QWORD *)&v111 = v74;
          }
          v74[*v74 + 1] = 4;
          v75 = v111;
          v76 = *(unsigned __int8 *)v111;
          *(_BYTE *)v111 = v76 + 1;
          *(_QWORD *)(v75 + 8 * v76 + 16) = 22;
          sub_22E3BB0B8((uint64_t)&v111);
          v77 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v77 + 312) = v18;
          v78 = 104;
LABEL_74:
          *(_DWORD *)(v77 + 316) = v78;
          if (*(char *)(v77 + 311) < 0)
          {
            **(_BYTE **)(v77 + 288) = 0;
            *(_QWORD *)(v77 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v77 + 288) = 0;
            *(_BYTE *)(v77 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v111, v77);
          v79 = (unsigned __int8 *)v111;
          if (!(_QWORD)v111)
          {
            v79 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v111 + 1));
            *(_QWORD *)&v111 = v79;
          }
          v79[*v79 + 1] = 4;
          v80 = v111;
          v81 = *(unsigned __int8 *)v111;
          *(_BYTE *)v111 = v81 + 1;
          v71 = v80 + 8 * v81;
          v72 = 21;
          goto LABEL_79;
        }
        while (1)
        {
LABEL_10:
          if (v14 == 71)
          {
            v22 = sub_22E4EF088(a2, v4, 1);
            v23 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
            v24 = *(_OWORD *)v22;
            *(_QWORD *)(v23 + 16) = *(_QWORD *)(v22 + 16);
            *(_OWORD *)v23 = v24;
            ++*(_DWORD *)(a2 + 8);
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
            v14 = *(unsigned __int16 *)(a1 + 32);
            if (v14 == 147)
            {
              v25 = sub_22E4EF088(a2, v4, 1);
              v26 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
              v27 = *(_OWORD *)v25;
              *(_QWORD *)(v26 + 16) = *(_QWORD *)(v25 + 16);
              *(_OWORD *)v26 = v27;
              ++*(_DWORD *)(a2 + 8);
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
              v14 = *(unsigned __int16 *)(a1 + 32);
            }
          }
          if (v14 != 5)
            break;
          v28 = sub_22E4EF088(a2, v4, 1);
          v29 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
          v30 = *(_OWORD *)v28;
          *(_QWORD *)(v29 + 16) = *(_QWORD *)(v28 + 16);
          *(_OWORD *)v29 = v30;
          ++*(_DWORD *)(a2 + 8);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
          v14 = 71;
          if (*(_WORD *)(a1 + 32) != 71)
          {
            v14 = *(unsigned __int16 *)(a1 + 32);
            break;
          }
        }
        if (v14 != 3)
          break;
        v31 = sub_22E4EF088(a2, v4, 1);
        v32 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
        v33 = *(_OWORD *)v31;
        *(_QWORD *)(v32 + 16) = *(_QWORD *)(v31 + 16);
        *(_OWORD *)v32 = v33;
        ++*(_DWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
        v14 = *(unsigned __int16 *)(a1 + 32);
      }
      while (v14 == 5 || v14 == 71 || v14 == 162);
      if (v14 == 65)
      {
LABEL_21:
        v34 = sub_22E4EF088(a2, v4, 1);
        v35 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
        v36 = *(_OWORD *)v34;
        *(_QWORD *)(v35 + 16) = *(_QWORD *)(v34 + 16);
        *(_OWORD *)v35 = v36;
        ++*(_DWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
        continue;
      }
      break;
    }
    v12 |= v14 == 46;
    if ((v12 & 1) == 0)
    {
      if ((v14 | 2) == 0x17)
        goto LABEL_26;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) == 0)
      {
        v77 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v77 + 312) = *(_DWORD *)(a1 + 16);
        v78 = 15;
        goto LABEL_74;
      }
      v96 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v96 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v96 + 316) = 18;
      if (*(char *)(v96 + 311) < 0)
      {
        **(_BYTE **)(v96 + 288) = 0;
        *(_QWORD *)(v96 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v96 + 288) = 0;
        *(_BYTE *)(v96 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v111, v96);
      v97 = (unsigned __int8 *)v111;
      if (!(_QWORD)v111)
      {
        v97 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v111 + 1));
        *(_QWORD *)&v111 = v97;
      }
      v97[*v97 + 1] = 4;
      v98 = v111;
      v99 = *(unsigned __int8 *)v111;
      *(_BYTE *)v111 = v99 + 1;
      *(_QWORD *)(v98 + 8 * v99 + 16) = 21;
      v68 = (unsigned __int8 *)(v98 + (v99 + 1));
LABEL_68:
      v68[1] = 4;
      v69 = v111;
      v70 = *(unsigned __int8 *)v111;
      *(_BYTE *)v111 = v70 + 1;
      v71 = v69 + 8 * v70;
      v72 = 23;
LABEL_79:
      *(_QWORD *)(v71 + 16) = v72;
LABEL_80:
      sub_22E3BB0B8((uint64_t)&v111);
      return 1;
    }
    if (!sub_22E80F398((unsigned __int16 *)a1, 21, 23, a2, 1, 0))
      goto LABEL_63;
    v14 = *(unsigned __int16 *)(a1 + 32);
LABEL_26:
    v37 = sub_22E4EF088(a2, v4, 1);
    v38 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
    v39 = *(_OWORD *)v37;
    *(_QWORD *)(v38 + 16) = *(_QWORD *)(v37 + 16);
    *(_OWORD *)v38 = v39;
    ++*(_DWORD *)(a2 + 8);
    v108 = *(_DWORD *)v4;
    if (v14 == 21)
    {
      sub_22E80F720(a1);
      v40 = 22;
      goto LABEL_44;
    }
    sub_22E80CED8(a1);
    v41 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v41 + 56) + 1) & 2) == 0)
      return 0;
    if ((v12 & 1) != 0)
    {
      v40 = 24;
      goto LABEL_44;
    }
    v40 = 24;
    v42 = *(unsigned __int16 *)(*(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8) - 32);
    v43 = v42 > 0x34;
    v44 = (1 << v42) & 0x18000000000020;
    if (v43 || v44 == 0)
    {
      v46 = *(_OWORD *)(a1 + 64);
      v111 = *v13;
      v112 = v46;
      v109 = *(_OWORD *)v4;
      v110 = *(_QWORD *)(v4 + 16);
      v47 = *(unsigned int *)(a1 + 2344);
      v105 = *(_WORD *)(a1 + 80);
      v106 = *(_WORD *)(a1 + 82);
      v107 = *(_WORD *)(a1 + 84);
      sub_22F1629F8(v41);
      v113 = 24;
      if (sub_22E885940(a1, &v113, 1, 0))
      {
        v48 = *(unsigned __int16 *)(a1 + 32) - 23;
        if (v48 > 0x2A || ((1 << v48) & 0x40000000009) == 0)
        {
          v100 = *(_QWORD *)(a1 + 8);
          v101 = *(_QWORD *)(v100 + 2832);
          *(_QWORD *)(v100 + 2816) = *(_QWORD *)(v101 - 8);
          *(_QWORD *)(v100 + 2832) = v101 - 8;
          v102 = *(_QWORD *)(v100 + 1008);
          if (v102)
          {
            if (*(_QWORD *)(v102 + 224))
              v103 = 3;
            else
              v103 = 0;
          }
          else if (*(_QWORD *)(v100 + 1040))
          {
            v103 = 1;
          }
          else
          {
            v103 = 2;
          }
          *(_DWORD *)(v100 + 1048) = v103;
          v104 = v112;
          *v13 = v111;
          *(_OWORD *)(a1 + 64) = v104;
          *(_OWORD *)v4 = v109;
          *(_QWORD *)(v4 + 16) = v110;
          sub_22E80FADC(a1 + 2336, v47);
          v61 = 0;
          *(_WORD *)(a1 + 80) = v105;
          *(_WORD *)(a1 + 82) = v106;
          *(_WORD *)(a1 + 84) = v107;
          return v61;
        }
      }
      v49 = *(_QWORD *)(a1 + 8);
      v50 = *(_QWORD *)(v49 + 2832);
      *(_QWORD *)(v49 + 2816) = *(_QWORD *)(v50 - 8);
      *(_QWORD *)(v49 + 2832) = v50 - 8;
      v51 = *(_QWORD *)(v49 + 1008);
      if (v51)
      {
        if (*(_QWORD *)(v51 + 224))
          v52 = 3;
        else
          v52 = 0;
      }
      else
      {
        if (*(_QWORD *)(v49 + 1040))
        {
          *(_DWORD *)(v49 + 1048) = 1;
          goto LABEL_43;
        }
        v52 = 2;
      }
      *(_DWORD *)(v49 + 1048) = v52;
LABEL_43:
      v53 = v112;
      *v13 = v111;
      *(_OWORD *)(a1 + 64) = v53;
      *(_OWORD *)v4 = v109;
      *(_QWORD *)(v4 + 16) = v110;
      sub_22E80FADC(a1 + 2336, v47);
      *(_WORD *)(a1 + 80) = v105;
      *(_WORD *)(a1 + 82) = v106;
      v40 = 24;
      *(_WORD *)(a1 + 84) = v107;
    }
LABEL_44:
    if ((sub_22E80F398((unsigned __int16 *)a1, v40, v40, a2, 1, 1) & 1) == 0)
    {
      sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v111);
      v83 = (unsigned __int8 *)v111;
      if (!(_QWORD)v111)
      {
        v83 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v111 + 1));
        *(_QWORD *)&v111 = v83;
      }
      v83[*v83 + 1] = 4;
      v84 = v111;
      v85 = *(unsigned __int8 *)v111;
      *(_BYTE *)v111 = v85 + 1;
      *(_QWORD *)(v84 + 8 * v85 + 16) = v40;
      sub_22E3BB0B8((uint64_t)&v111);
      v86 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v86 + 312) = v108;
      *(_DWORD *)(v86 + 316) = 104;
      if (*(char *)(v86 + 311) < 0)
      {
        **(_BYTE **)(v86 + 288) = 0;
        *(_QWORD *)(v86 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v86 + 288) = 0;
        *(_BYTE *)(v86 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v111, v86);
      v87 = (unsigned __int8 *)v111;
      if (!(_QWORD)v111)
      {
        v87 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v111 + 1));
        *(_QWORD *)&v111 = v87;
      }
      v87[*v87 + 1] = 4;
      v88 = v111;
      v89 = *(unsigned __int8 *)v111;
      *(_BYTE *)v111 = v89 + 1;
      *(_QWORD *)(v88 + 8 * v89 + 16) = v14;
      goto LABEL_80;
    }
    v54 = *(unsigned __int16 *)(a1 + 32);
    if (v54 == 26)
    {
      v55 = sub_22E4EF088(a2, v4, 1);
      v56 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
      v57 = *(_OWORD *)v55;
      *(_QWORD *)(v56 + 16) = *(_QWORD *)(v55 + 16);
      *(_OWORD *)v56 = v57;
      ++*(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
      v54 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v54 == 65)
      goto LABEL_21;
    if (v54 != 23)
    {
      if ((v12 & 1) != 0)
        continue;
      v90 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v90 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v90 + 316) = 18;
      if (*(char *)(v90 + 311) < 0)
      {
        **(_BYTE **)(v90 + 288) = 0;
        *(_QWORD *)(v90 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v90 + 288) = 0;
        *(_BYTE *)(v90 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v111, v90);
      v91 = (unsigned __int8 *)v111;
      if (!(_QWORD)v111)
      {
        v91 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v111 + 1));
        *(_QWORD *)&v111 = v91;
      }
      v91[*v91 + 1] = 4;
      v92 = v111;
      v93 = *(unsigned __int8 *)v111;
      *(_BYTE *)v111 = v93 + 1;
      *(_QWORD *)(v92 + 8 * v93 + 16) = 23;
      *(_BYTE *)(v92 + (v93 + 1) + 1) = 4;
      v94 = v111;
      v95 = *(unsigned __int8 *)v111;
      *(_BYTE *)v111 = v95 + 1;
      v71 = v94 + 8 * v95;
      v72 = 65;
      goto LABEL_79;
    }
    break;
  }
LABEL_56:
  v58 = sub_22E4EF088(a2, v4, 1);
  v59 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
  v60 = *(_OWORD *)v58;
  *(_QWORD *)(v59 + 16) = *(_QWORD *)(v58 + 16);
  *(_OWORD *)v59 = v60;
  ++*(_DWORD *)(a2 + 8);
  sub_22E80CED8(a1);
  return 0;
}

uint64_t sub_22E80CED8(uint64_t a1)
{
  __int16 v2;
  unsigned int *v3;
  unsigned int v4;

  if (*(_WORD *)(a1 + 32) == 23)
  {
    v2 = *(_WORD *)(a1 + 84) + 1;
LABEL_5:
    *(_WORD *)(a1 + 84) = v2;
    goto LABEL_6;
  }
  if (*(_WORD *)(a1 + 84))
  {
    sub_22E80F8BC(a1 + 2416, (unsigned __int16 *)a1);
    v2 = *(_WORD *)(a1 + 84) - 1;
    goto LABEL_5;
  }
LABEL_6:
  v4 = *(_DWORD *)(a1 + 16);
  v3 = (unsigned int *)(a1 + 16);
  v3[6] = v4;
  sub_22F18FB4C(*((_QWORD *)v3 - 1), v3);
  return v3[6];
}

uint64_t sub_22E80CF40(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int *v6;
  int v7;
  __int128 v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  unsigned __int16 *v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  char v46;
  char v47;
  uint64_t v48;
  _BYTE *v49;
  char v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  char v56;
  char v57;
  char v58;
  int v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  BOOL v63;
  _BYTE v64[88];
  void *v65;
  _QWORD v66[15];

  v6 = (unsigned int *)(a1 + 16);
  v66[13] = *MEMORY[0x24BDAC8D0];
  if (a3 == 1)
    v7 = 62;
  else
    v7 = 22;
  v8 = 0uLL;
  v9 = 1;
  while (1)
  {
    while (1)
    {
      v62 = v8;
      while (1)
      {
        result = 0;
        v11 = *(unsigned __int16 *)(a1 + 32);
        if (v11 > 0x32)
          break;
        v8 = v62;
        switch(*(_WORD *)(a1 + 32))
        {
          case 1:
            return result;
          case 2:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xF:
            goto LABEL_39;
          case 3:
          case 0xD:
          case 0xE:
          case 0x10:
          case 0x11:
          case 0x12:
            goto LABEL_40;
          case 0x13:
            v34 = sub_22E4EF088(a2, (unint64_t)v6, 1);
            v35 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
            v36 = *(_OWORD *)v34;
            *(_QWORD *)(v35 + 16) = *(_QWORD *)(v34 + 16);
            *(_OWORD *)v35 = v36;
            ++*(_DWORD *)(a2 + 8);
            sub_22E80F788(a1);
            v37 = (unsigned __int16 *)a1;
            v38 = 20;
            v39 = 20;
            goto LABEL_48;
          case 0x14:
            if (((*(_WORD *)(a1 + 82) != 0) & ~v9) != 0)
              return 0;
            v12 = sub_22E4EF088(a2, (unint64_t)v6, 1);
            v13 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
            v14 = *(_OWORD *)v12;
            *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
            *(_OWORD *)v13 = v14;
            ++*(_DWORD *)(a2 + 8);
            sub_22E80F788(a1);
            continue;
          case 0x15:
            v40 = sub_22E4EF088(a2, (unint64_t)v6, 1);
            v41 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
            v42 = *(_OWORD *)v40;
            *(_QWORD *)(v41 + 16) = *(_QWORD *)(v40 + 16);
            *(_OWORD *)v41 = v42;
            ++*(_DWORD *)(a2 + 8);
            sub_22E80F720(a1);
            v37 = (unsigned __int16 *)a1;
            v38 = 22;
            v39 = 22;
            goto LABEL_48;
          case 0x16:
            if (!a3)
              return 1;
            if (((*(_WORD *)(a1 + 80) != 0) & ~v9) != 0)
              return 0;
            v15 = sub_22E4EF088(a2, (unint64_t)v6, 1);
            v16 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
            v17 = *(_OWORD *)v15;
            *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
            *(_OWORD *)v16 = v17;
            ++*(_DWORD *)(a2 + 8);
            sub_22E80F720(a1);
            continue;
          case 0x17:
            v43 = sub_22E4EF088(a2, (unint64_t)v6, 1);
            v44 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
            v45 = *(_OWORD *)v43;
            *(_QWORD *)(v44 + 16) = *(_QWORD *)(v43 + 16);
            *(_OWORD *)v44 = v45;
            ++*(_DWORD *)(a2 + 8);
            sub_22E80CED8(a1);
            v37 = (unsigned __int16 *)a1;
            v38 = 24;
            v39 = 24;
LABEL_48:
            sub_22E80F398(v37, v38, v39, a2, 0, 1);
            goto LABEL_41;
          case 0x18:
            if (((*(_WORD *)(a1 + 84) != 0) & ~v9) != 0)
              return 0;
            v18 = sub_22E4EF088(a2, (unint64_t)v6, 1);
            v19 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
            v20 = *(_OWORD *)v18;
            *(_QWORD *)(v19 + 16) = *(_QWORD *)(v18 + 16);
            *(_OWORD *)v19 = v20;
            ++*(_DWORD *)(a2 + 8);
            sub_22E80CED8(a1);
            break;
          default:
            if (v11 == 46)
              DWORD1(v8) = DWORD1(v62) + 1;
            goto LABEL_39;
        }
      }
      v8 = v62;
      if (*(unsigned __int16 *)(a1 + 32) <= 0x8Cu)
        break;
      if (v11 - 436 < 3)
        return result;
      if (v11 == 141)
      {
        v30 = sub_22E4EF088(a2, (unint64_t)v6, 1);
        v31 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
        v32 = *(_OWORD *)v30;
        *(_QWORD *)(v31 + 16) = *(_QWORD *)(v30 + 16);
        *(_OWORD *)v31 = v32;
        ++*(_DWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
        v8 = v62;
        v9 = 0;
        v33 = *(unsigned __int16 *)(a1 + 32) - 46;
        if (v33 <= 0x1C && ((1 << v33) & 0x10080061) != 0)
          goto LABEL_40;
      }
      else
      {
        if (v11 != 147)
          goto LABEL_39;
        v21 = sub_22E4EF088(a2, (unint64_t)v6, 1);
        v22 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
        v23 = *(_OWORD *)v21;
        *(_QWORD *)(v22 + 16) = *(_QWORD *)(v21 + 16);
        *(_OWORD *)v22 = v23;
        ++*(_DWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
        v8 = v62;
        v9 = 0;
        if (*(_WORD *)(a1 + 32) == 5)
        {
          v24 = sub_22E4EF088(a2, (unint64_t)v6, 1);
          v25 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
          v26 = *(_OWORD *)v24;
          *(_QWORD *)(v25 + 16) = *(_QWORD *)(v24 + 16);
          *(_OWORD *)v25 = v26;
          ++*(_DWORD *)(a2 + 8);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
          v8 = v62;
          v9 = 0;
          if (*(_WORD *)(a1 + 32) == 46)
          {
            *(int32x2_t *)&v8 = vadd_s32(*(int32x2_t *)&v62, (int32x2_t)0x100000001);
            goto LABEL_39;
          }
        }
      }
    }
    if (*(unsigned __int16 *)(a1 + 32) > 0x3Du)
      break;
    switch(v11)
    {
      case '3':
        goto LABEL_32;
      case '4':
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) != 0)
          goto LABEL_31;
LABEL_39:
        v62 = v8;
LABEL_40:
        v27 = sub_22E4EF088(a2, (unint64_t)v6, 1);
        v28 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 8);
        v29 = *(_OWORD *)v27;
        *(_QWORD *)(v28 + 16) = *(_QWORD *)(v27 + 16);
        *(_OWORD *)v28 = v29;
        ++*(_DWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
LABEL_41:
        v8 = v62;
        v9 = 0;
        break;
      case '<':
        v46 = sub_22F2E0DC0(a1, a2);
        v8 = v62;
        v47 = v46;
        v9 = 0;
        result = 0;
        if ((v47 & 1) == 0)
          return result;
        break;
      default:
        goto LABEL_39;
    }
  }
  if (v11 == 62)
  {
    if (a3 == 1)
      return 1;
    goto LABEL_39;
  }
  if (v11 != 65)
  {
    if (v11 != 74 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) == 0)
      goto LABEL_39;
    *(uint32x2_t *)&v8 = vqsub_u32(*(uint32x2_t *)&v62, (uint32x2_t)0x100000001);
LABEL_31:
    *(uint32x2_t *)&v8 = vqsub_u32(*(uint32x2_t *)&v8, (uint32x2_t)0x100000001);
LABEL_32:
    *(uint32x2_t *)&v8 = vqsub_u32(*(uint32x2_t *)&v8, (uint32x2_t)0x100000001);
    goto LABEL_39;
  }
  if (DWORD1(v62))
  {
    if (!(_DWORD)v62)
    {
      sub_22F2E1204((uint64_t)v64, a1, v7);
      v48 = *(_QWORD *)(a1 + 88);
      v49 = (_BYTE *)(v48 + 10664);
      v58 = *(_BYTE *)(v48 + 11952);
      v59 = *(_DWORD *)(v48 + 8456);
      v57 = *(_BYTE *)(v48 + 10664);
      v61 = *(_DWORD *)(*(_QWORD *)(v48 + 104) + 180);
      v60 = v48;
      sub_22EE03478(v48);
      if (!v50)
        v49[1288] = 1;
      *v49 = 1;
      v56 = v49[1368];
      v49[1368] = 1;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
      if (a3)
      {
        if (a3 == 1)
        {
          v51 = sub_22F2F0554(a1);
          if (v51 == 2)
          {
            if (*(_WORD *)(a1 + 32) == 62)
              v51 = 2;
            else
              v51 = 1;
          }
        }
        else
        {
          v51 = 3;
        }
      }
      else
      {
        v63 = 0;
        v51 = sub_22E883ED8(a1, &v63, 1);
        if (v63)
          v52 = 1;
        else
          v52 = 2;
        if (v51 == 2)
          v51 = v52;
      }
      v55 = v51;
      sub_22F2E0EE4((uint64_t)v64);
      v49[1368] = v56;
      *(_DWORD *)(v60 + 8456) = v59;
      v49[1288] = v58;
      *v49 = v57;
      v53 = *(_QWORD *)(v60 + 104);
      if (*(_DWORD *)(v53 + 180) == 5)
        *(_BYTE *)(v53 + 170) = 1;
      if (v61)
        v54 = 3;
      else
        v54 = 0;
      *(_DWORD *)(v53 + 180) = v54;
      if (v65 != v66)
        free(v65);
      result = 1;
      if ((v55 & 0xFFFFFFFD) != 1)
        return result;
      v8 = v62;
      LODWORD(v8) = 1;
    }
    goto LABEL_39;
  }
  return 1;
}

void sub_22E80D63C(uint64_t a1, char *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *a2;
  if ((*a2 & 3) == 2)
  {
    sub_22E885C30(a1, 128);
    v7 = (_DWORD *)(a1 + 952);
    sub_22EABF260(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *((_QWORD *)a2 + 1));
    ++*(_DWORD *)(a1 + 952);
    v4 = *a2;
    v6 = -1;
    v5 = a1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = (_DWORD *)(a1 + 952);
  }
  if ((v4 & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    sub_22E885C30(a1, 40);
    sub_22F3282C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *((_QWORD *)a2 + 1));
    v8 = a1;
  }
  if (*((_DWORD *)a2 + 6))
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v9);
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      ++v9;
    }
    while (v9 < *((unsigned int *)a2 + 6));
  }
  if ((v4 & 1) == 0)
    sub_22F3282F8(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *((_QWORD *)a2 + 1));
  if (v8)
    sub_22E885CF4(v8);
  *v7 += v6;
  if (v5)
    sub_22E885CF4(v5);
}

void sub_22E80D77C(uint64_t a1, char *a2)
{
  int v2;
  char v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  char v15;

  v5 = *a2;
  if ((*a2 & 3) == 2)
  {
    sub_22E885C30(a1, 128);
    v8 = (_DWORD *)(a1 + 952);
    sub_22EABF260(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *((_QWORD *)a2 + 1));
    ++*(_DWORD *)(a1 + 952);
    v5 = *a2;
    v7 = -1;
    v6 = a1;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = (_DWORD *)(a1 + 952);
  }
  if ((v5 & 1) != 0)
  {
    v9 = *(_QWORD *)(a1 + 88);
    v10 = *(_QWORD *)(v9 + 12888);
    if (v10)
    {
      v2 = *(_DWORD *)(v10 + 8);
      sub_22E8FB7FC(*(_QWORD *)(v9 + 12888), *(_QWORD *)v10, 40);
    }
    v11 = 0;
  }
  else
  {
    sub_22E885C30(a1, 40);
    sub_22F3282C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *((_QWORD *)a2 + 1));
    v10 = 0;
    v11 = a1;
  }
  if (*((_DWORD *)a2 + 6))
  {
    sub_22EBBBB24((uint64_t)v14, *(_QWORD *)(a1 + 88), *((_QWORD *)a2 + 1), 0, 1);
    if (*((_DWORD *)a2 + 6))
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v12);
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
        ++v12;
      }
      while (v12 < *((unsigned int *)a2 + 6));
    }
    if (v15)
      *(_QWORD *)(v14[0] + 10288) = v14[1];
  }
  if ((v5 & 1) == 0)
    sub_22F3282F8(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *((_QWORD *)a2 + 1));
  sub_22EABB2E0(*(_QWORD *)(a1 + 88));
  if (v10)
    sub_22E8FB7FC(v10, *(_QWORD *)v10, v2);
  if (v11)
    sub_22E885CF4(v11);
  *v8 += v7;
  if (v6)
    sub_22E885CF4(v6);
}

void sub_22E80D938(uint64_t a1, char *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *a2;
  if ((*a2 & 3) == 2)
  {
    sub_22E885C30(a1, 128);
    v7 = (_DWORD *)(v3 + 952);
    sub_22EABF260(*(_QWORD *)(v3 + 88), *(_QWORD *)(*(_QWORD *)(v3 + 88) + 12888), *((_QWORD *)a2 + 1));
    ++*(_DWORD *)(v3 + 952);
    v4 = *a2;
    v6 = -1;
    v5 = v3;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = (_DWORD *)(a1 + 952);
  }
  if ((v4 & 1) != 0)
    v3 = 0;
  else
    sub_22E885C30(v3, 40);
  if (*((_DWORD *)a2 + 6))
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
      ++v8;
    }
    while (v8 < *((unsigned int *)a2 + 6));
  }
  if (v3)
    sub_22E885CF4(v3);
  *v7 += v6;
  if (v5)
    sub_22E885CF4(v5);
}

void sub_22E80DA40(uint64_t a1, char *a2)
{
  int v2;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a2;
  if ((*a2 & 3) == 2)
  {
    sub_22E885C30(a1, 128);
    sub_22EABF260(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *((_QWORD *)a2 + 1));
    v5 = *a2;
    v6 = a1;
  }
  else
  {
    v6 = 0;
  }
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 88);
    v8 = *(_QWORD *)(v7 + 12888);
    if (v8)
    {
      v2 = *(_DWORD *)(v8 + 8);
      sub_22E8FB7FC(*(_QWORD *)(v7 + 12888), *(_QWORD *)v8, 40);
    }
    v9 = 0;
  }
  else
  {
    sub_22E885C30(a1, 40);
    sub_22F3282C0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *((_QWORD *)a2 + 1));
    v8 = 0;
    v9 = a1;
  }
  v10 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 8 * v10;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)a2 + 2) + v11) + 40))(*(_QWORD *)(*((_QWORD *)a2 + 2) + v11));
      v11 += 8;
    }
    while (v12 != v11);
  }
  if ((v5 & 1) == 0)
    sub_22F3282F8(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *((_QWORD *)a2 + 1));
  if (v8)
    sub_22E8FB7FC(v8, *(_QWORD *)v8, v2);
  if (v9)
    sub_22E885CF4(v9);
  if (v6)
    sub_22E885CF4(v6);
}

void sub_22E80DBA8(uint64_t a1, char *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *a2;
  if ((*a2 & 3) == 2)
  {
    sub_22E885C30(a1, 128);
    v7 = (_DWORD *)(v3 + 952);
    sub_22EABF260(*(_QWORD *)(v3 + 88), *(_QWORD *)(*(_QWORD *)(v3 + 88) + 12888), *((_QWORD *)a2 + 1));
    ++*(_DWORD *)(v3 + 952);
    v4 = *a2;
    v6 = -1;
    v5 = v3;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = (_DWORD *)(a1 + 952);
  }
  if ((v4 & 1) != 0)
    v3 = 0;
  else
    sub_22E885C30(v3, 40);
  v8 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v8)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 2);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
      v10 -= 8;
    }
    while (v10);
  }
  if (v3)
    sub_22E885CF4(v3);
  *v7 += v6;
  if (v5)
    sub_22E885CF4(v5);
}

void sub_22E80DCA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void **v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  __int16 v77;
  __int16 v78;
  unsigned int *v79;
  int v80[8];
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  char v85;
  _QWORD v86[2];
  int v87;
  _BYTE v88[32];
  int *v89;
  uint64_t v90;
  _DWORD v91[8];
  unint64_t *v92;
  uint64_t v93;
  _QWORD v94[6];

  v1 = a1;
  v94[4] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 24))
  {
    sub_22E885C30(*(_QWORD *)(a1 + 8), 128);
    if (*(_BYTE *)(v1 + 24))
    {
      sub_22EABF260(*(_QWORD *)(v2 + 88), *(_QWORD *)(*(_QWORD *)(v2 + 88) + 12888), *(_QWORD *)(v1 + 16));
      ++*(_DWORD *)(v2 + 952);
      v73 = -1;
    }
    else
    {
      v73 = 0;
    }
    v74 = v2;
  }
  else
  {
    v74 = 0;
    v73 = 0;
  }
  sub_22E885C30(v2, 776);
  v3 = *(unsigned int *)(v1 + 40);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v79 = (unsigned int *)(v2 + 16);
    v75 = v1;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 16 * v4);
      v6 = *(_DWORD *)(v5 + 96);
      sub_22EABF5B0(*(_QWORD *)(v2 + 88), *(_QWORD *)(*(_QWORD *)(v2 + 88) + 12888), (_QWORD *)v5);
      v7 = *(_QWORD *)(v1 + 32) + 16 * v4;
      v8 = *(void ***)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      if (v8)
      {
        v77 = *(_WORD *)(v2 + 82);
        v78 = *(_WORD *)(v2 + 80);
        v76 = *(_WORD *)(v2 + 84);
        v9 = (uint64_t)*v8 + 24 * *((unsigned int *)v8 + 2);
        v10 = *(_DWORD *)(v9 - 24);
        v11 = *(_DWORD *)(v9 - 20);
        LODWORD(v9) = *(unsigned __int16 *)(v9 - 8);
        v89 = 0;
        v90 = v5;
        v12 = v9 - 399;
        v13 = v11 + v10;
        if (v11)
          v10 = v11;
        if (v12 >= 0x29)
          v14 = v13;
        else
          v14 = v10;
        v91[0] = 1;
        LODWORD(v89) = v14;
        v15 = sub_22E4EF088((uint64_t)v8, (unint64_t)&v89, 1);
        v16 = (uint64_t)*v8 + 24 * *((unsigned int *)v8 + 2);
        v17 = *(_OWORD *)v15;
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
        *(_OWORD *)v16 = v17;
        ++*((_DWORD *)v8 + 2);
        v18 = sub_22E4EF088((uint64_t)v8, (unint64_t)v79, 1);
        v19 = (uint64_t)*v8 + 24 * *((unsigned int *)v8 + 2);
        v20 = *(_OWORD *)v18;
        *(_QWORD *)(v19 + 16) = *(_QWORD *)(v18 + 16);
        *(_OWORD *)v19 = v20;
        v21 = (*((_DWORD *)v8 + 2) + 1);
        *((_DWORD *)v8 + 2) = v21;
        sub_22F1735E4(*(_QWORD *)(v2 + 8), *v8, v21, 1, 0, 1);
        sub_22E80F0F0(v2, 0);
        *(_DWORD *)(v2 + 40) = *(_DWORD *)(v2 + 16);
        sub_22F18FB4C(*(_QWORD *)(v2 + 8), v79);
        v22 = *(_DWORD *)(v2 + 40);
        v23 = *(_QWORD *)(v2 + 88);
        LODWORD(v86[0]) = 7;
        v92 = (unint64_t *)v5;
        LODWORD(v84[0]) = 3;
        *(_QWORD *)v80 = *(unsigned int *)(v23 + 1704);
        sub_22EB4DDB8(v23 + 3688, (int *)v86, v80, (__int16 *)(v23 + 1693), (uint64_t *)&v92, (int *)v84);
        v24 = *(unsigned int *)(v23 + 3696);
        v25 = v24 - 2;
        v26 = *(_QWORD *)(v23 + 3688);
        v27 = *(_DWORD *)(v26 + 576 * (v24 - 2));
        if (v27 == 5)
        {
          *(_BYTE *)(v26 + 576 * v24 - 4) = *(_BYTE *)(v26 + 576 * v25 + 572);
          v28 = 1;
        }
        else if (v27 == 2)
        {
          *(_BYTE *)(v26 + 576 * v24 - 4) = 1;
          v28 = *(_BYTE *)(v26 + 576 * v25 + 573) != 0;
        }
        else
        {
          v28 = 0;
          *(_BYTE *)(v26 + 576 * v24 - 4) = 0;
        }
        v29 = v26 + 576 * v24;
        *(_BYTE *)(v29 - 3) = v28;
        *(_WORD *)(v23 + 1693) = 0;
        if (*(_DWORD *)(v23 + 1848))
        {
          llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v29 - 560));
          sub_22EAEAE08(v23 + 1840, (uint64_t *)(v29 - 496));
        }
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 56) + 1) & 2) != 0 && *(_WORD *)(v2 + 32) == 23)
        {
          sub_22E884578(v2, (int *)v79, 1932, (uint64_t)v88);
          sub_22E3BB0B8((uint64_t)v88);
          v30 = sub_22E84AF40(v2);
        }
        else
        {
          v30 = sub_22E83766C(v2, 0);
        }
        v31 = v30;
        if ((v30 & 1) == 0)
          v31 = (unint64_t)sub_22EBBCB14(*(_QWORD *)(v2 + 88), (_DWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v92);
        if ((v31 & 1) != 0)
        {
          sub_22F327884(*(_QWORD *)(v2 + 88), v5, v22);
        }
        else
        {
          if (*(_WORD *)(v2 + 32) != 1 || *(_QWORD *)(v2 + 24) != v5)
          {
            v32 = *(_QWORD *)(v2 + 96);
            *(_DWORD *)(v32 + 312) = *(_DWORD *)(v2 + 16);
            *(_DWORD *)(v32 + 316) = 1470;
            v33 = v3;
            if (*(char *)(v32 + 311) < 0)
            {
              **(_BYTE **)(v32 + 288) = 0;
              *(_QWORD *)(v32 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v32 + 288) = 0;
              *(_BYTE *)(v32 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v92, v32);
            v34 = *v79;
            v35 = *((unsigned int *)*v8 + 6 * *((unsigned int *)v8 + 2) - 18);
            v36 = v92;
            if (!v92)
            {
              v36 = (unint64_t *)sub_22E3B8AAC(v93);
              v92 = v36;
            }
            sub_22E4D6448((uint64_t)(v36 + 42), v34 | (v35 << 32), 1);
            sub_22E3BB0B8((uint64_t)&v92);
            v3 = v33;
          }
          sub_22EAA41A8(*(_QWORD *)(v2 + 88), v5, v22, v31 & 0xFFFFFFFFFFFFFFFELL);
        }
        while (*(_WORD *)(v2 + 32) != 1)
          sub_22E80F0F0(v2, 0);
        if (*(_QWORD *)(v2 + 24) == v5)
          sub_22E80F0F0(v2, 0);
        sub_22EB48E64(v23);
        sub_22E80F8BC(v2 + 2416, (unsigned __int16 *)v2);
        *(_WORD *)(v2 + 80) = v78;
        *(_WORD *)(v2 + 82) = v77;
        *(_WORD *)(v2 + 84) = v76;
        if (*v8 != v8 + 2)
          free(*v8);
        MEMORY[0x2348A0E9C](v8, 0x1080C4070FE8099);
        v1 = v75;
      }
      else if ((v6 & 0x600) == 0x200)
      {
        v37 = *(_QWORD *)(v1 + 16);
        if (v37 && (*(_DWORD *)(v37 + 28) & 0x7F) == 0x1D)
          v37 = *(_QWORD *)(v37 + 48);
        if ((*(_BYTE *)(v37 + 104) & 3) == 0)
        {
          v38 = sub_22E3CD31C((uint64_t *)(v37 + 104), v37);
          if (v38)
          {
            v39 = *(_QWORD *)(*(_QWORD *)(v38 + 120) + 8 * v4);
            if ((*(_DWORD *)(v39 + 96) & 0x600) == 0x400)
            {
              v40 = *(_QWORD *)(v39 + 88) & 0xFFFFFFFFFFFFFFF8;
              *(_DWORD *)(v5 + 96) = *(_DWORD *)(v5 + 96) & 0xFFFFF9FF | 0x400;
            }
            else
            {
              v41 = sub_22EFBC5B4(v39);
              *(_DWORD *)(v5 + 96) |= 0x600u;
              v40 = v41 & 0xFFFFFFFFFFFFFFFBLL;
            }
            *(_QWORD *)(v5 + 88) = v40;
          }
        }
      }
      ++v4;
    }
    while (v4 != v3);
  }
  v42 = *(void ***)(v1 + 176);
  if (v42)
  {
    v43 = *(_WORD *)(v2 + 80);
    v44 = *(_WORD *)(v2 + 82);
    v45 = *(_WORD *)(v2 + 84);
    v46 = (uint64_t)*v42 + 24 * *((unsigned int *)v42 + 2);
    v47 = *(_DWORD *)(v46 - 24);
    v48 = *(_DWORD *)(v46 - 20);
    v49 = *(unsigned __int16 *)(v46 - 8);
    v50 = v48 + v47;
    if (v48)
      v47 = v48;
    v51 = *(_QWORD *)(v1 + 16);
    v86[0] = 0;
    v86[1] = v51;
    if ((v49 - 399) >= 0x29)
      v47 = v50;
    v87 = 1;
    LODWORD(v86[0]) = v47;
    v52 = sub_22E4EF088((uint64_t)v42, (unint64_t)v86, 1);
    v53 = (uint64_t)*v42 + 24 * *((unsigned int *)v42 + 2);
    v54 = *(_OWORD *)v52;
    *(_QWORD *)(v53 + 16) = *(_QWORD *)(v52 + 16);
    *(_OWORD *)v53 = v54;
    ++*((_DWORD *)v42 + 2);
    v55 = sub_22E4EF088((uint64_t)v42, v2 + 16, 1);
    v56 = (uint64_t)*v42 + 24 * *((unsigned int *)v42 + 2);
    v57 = *(_OWORD *)v55;
    *(_QWORD *)(v56 + 16) = *(_QWORD *)(v55 + 16);
    *(_OWORD *)v56 = v57;
    v58 = (*((_DWORD *)v42 + 2) + 1);
    *((_DWORD *)v42 + 2) = v58;
    sub_22F1735E4(*(_QWORD *)(v2 + 8), *v42, v58, 1, 0, 1);
    sub_22E80F0F0(v2, 0);
    v59 = *(_QWORD *)(v1 + 16);
    v60 = *(_DWORD *)(v59 + 28);
    if (v59 && (*(_DWORD *)(v59 + 28) & 0x7F) == 0x1D)
    {
      v59 = *(_QWORD *)(v59 + 48);
      v60 = *(_DWORD *)(v59 + 28);
    }
    if ((v60 & 0x7Eu) - 54 >= 4)
    {
      v66 = 0;
      v68 = 0;
      v67 = 0;
      v63 = *(_QWORD *)(v2 + 88);
LABEL_74:
      sub_22EBBBB24((uint64_t)v84, v63, v66, v67, v68);
      v82 = 0;
      v83 = 0;
      v92 = v94;
      v93 = 0x400000000;
      v89 = v91;
      v90 = 0x400000000;
      v81 = 0;
      v69 = sub_22E834248(v2, 0, (uint64_t)&v83, (uint64_t)&v92, (uint64_t)&v89, &v82, &v81);
      if (*(_WORD *)(v2 + 32) != 1 || (v70 = *(_QWORD *)(v2 + 24), v70 != *(_QWORD *)(v1 + 16)))
      {
        v71 = *(_QWORD *)(v2 + 96);
        *(_DWORD *)(v71 + 312) = *(_DWORD *)(v2 + 16);
        *(_DWORD *)(v71 + 316) = 1485;
        if (*(char *)(v71 + 311) < 0)
        {
          **(_BYTE **)(v71 + 288) = 0;
          *(_QWORD *)(v71 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v71 + 288) = 0;
          *(_BYTE *)(v71 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v80, v71);
        sub_22E3BB0B8((uint64_t)v80);
        v70 = *(_QWORD *)(v1 + 16);
      }
      if (v82 <= 1)
        v72 = 0;
      else
        v72 = v82 & 0xFFFFFFFFFFFFFFFELL;
      sub_22EADEFEC(*(_QWORD *)(v2 + 88), v70, v69, v83, v92, v93, v89, v90, v72);
      while (*(_WORD *)(v2 + 32) != 1)
        sub_22E80F0F0(v2, 0);
      if (*(_QWORD *)(v2 + 24) == *(_QWORD *)(v1 + 16))
        sub_22E80F0F0(v2, 0);
      if (*v42 != v42 + 2)
        free(*v42);
      MEMORY[0x2348A0E9C](v42, 0x1080C4070FE8099);
      *(_QWORD *)(v1 + 176) = 0;
      if (v89 != v91)
        free(v89);
      if (v92 != v94)
        free(v92);
      if (v85)
        *(_QWORD *)(v84[0] + 10288) = v84[1];
      sub_22E80F8BC(v2 + 2416, (unsigned __int16 *)v2);
      *(_WORD *)(v2 + 80) = v43;
      *(_WORD *)(v2 + 82) = v44;
      *(_WORD *)(v2 + 84) = v45;
      goto LABEL_96;
    }
    v61 = *(_WORD *)(v59 + 80) & 0x7F;
    v62 = -40;
    if (v61 > 0x46)
    {
      switch(v61)
      {
        case 'S':
          goto LABEL_66;
        case 'G':
          v62 = -56;
          goto LABEL_66;
        case 'Q':
          goto LABEL_66;
      }
    }
    else
    {
      if (v61 <= 0x18)
      {
        if (v61 == 16)
          goto LABEL_65;
        if (((1 << v61) & 0x1066) != 0)
          goto LABEL_66;
        if (v61 == 24)
        {
LABEL_65:
          v62 = -48;
LABEL_66:
          v63 = *(_QWORD *)(v2 + 88);
          v64 = *(_QWORD *)(v59 + 72 + v62 + 16);
          v65 = (_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF8);
          if ((v64 & 4) != 0)
            v65 = (_QWORD *)*v65;
          if (v65)
            v66 = (uint64_t)(v65 - 8);
          else
            v66 = 0;
          v67 = sub_22E46BB88(v59);
          v68 = (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 56) + 1) >> 1) & 1;
          goto LABEL_74;
        }
      }
      if (v61 == 70)
      {
LABEL_109:
        v62 = -64;
        goto LABEL_66;
      }
    }
    if (v61 - 52 < 6)
    {
      v62 = -72;
      goto LABEL_66;
    }
    if (v61 - 33 < 5)
      goto LABEL_109;
    goto LABEL_65;
  }
LABEL_96:
  sub_22E885CF4(v2);
  sub_22EABF5FC(*(_QWORD *)(v2 + 88), *(_QWORD *)(*(_QWORD *)(v2 + 88) + 12888), *(_QWORD *)(v1 + 16));
  *(_DWORD *)(v2 + 952) += v73;
  if (v74)
    sub_22E885CF4(v74);
}

void sub_22E80E62C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD v25[2];
  int v26;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 136))
  {
    sub_22E885C30(*(_QWORD *)(a1 + 8), 128);
    if (*(_BYTE *)(a1 + 136))
    {
      sub_22EABF260(*(_QWORD *)(v2 + 88), *(_QWORD *)(*(_QWORD *)(v2 + 88) + 12888), *(_QWORD *)(a1 + 16));
      ++*(_DWORD *)(v2 + 952);
      v4 = -1;
    }
    else
    {
      v4 = 0;
    }
    v3 = v2;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = *(_WORD *)(v2 + 80);
  v6 = *(_WORD *)(v2 + 82);
  v7 = *(_WORD *)(v2 + 84);
  v8 = *(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 32);
  v9 = *(_DWORD *)(v8 - 24);
  v10 = *(_DWORD *)(v8 - 20);
  v11 = *(unsigned __int16 *)(v8 - 8);
  v12 = v10 + v9;
  if (v10)
    v9 = v10;
  v13 = *(_QWORD *)(a1 + 16);
  v25[0] = 0;
  v25[1] = v13;
  if ((v11 - 399) >= 0x29)
    v9 = v12;
  v26 = 1;
  LODWORD(v25[0]) = v9;
  v14 = sub_22E4EF088(a1 + 24, (unint64_t)v25, 1);
  v15 = *(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 32);
  v16 = *(_OWORD *)v14;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
  *(_OWORD *)v15 = v16;
  ++*(_DWORD *)(a1 + 32);
  v17 = sub_22E4EF088(a1 + 24, v2 + 16, 1);
  v18 = *(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 32);
  v19 = *(_OWORD *)v17;
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
  *(_OWORD *)v18 = v19;
  v20 = (*(_DWORD *)(a1 + 32) + 1);
  *(_DWORD *)(a1 + 32) = v20;
  sub_22F1735E4(*(_QWORD *)(v2 + 8), *(_BYTE **)(a1 + 24), v20, 1, 0, 1);
  sub_22E80F0F0(v2, 1);
  v24 = v2;
  sub_22E885C30(v2, 4194313);
  sub_22EA2F2FC(*(_QWORD *)(v2 + 88), *(uint64_t **)(*(_QWORD *)(v2 + 88) + 12888), *(_QWORD *)(a1 + 16), 0, 0);
  v21 = *(unsigned __int16 *)(v2 + 32);
  if (v21 == 61)
  {
    sub_22E8338EC(v2, *(_QWORD *)(a1 + 16));
    if (*(_WORD *)(v2 + 32) == 23)
    {
LABEL_10:
      sub_22E8798D0(v2, *(_QWORD *)(a1 + 16), &v24);
      while (*(_WORD *)(v2 + 32) != 1)
        sub_22E80F0F0(v2, 0);
      v22 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v2 + 24) == v22)
      {
        sub_22E80F0F0(v2, 0);
        v22 = *(_QWORD *)(a1 + 16);
      }
      if (v22)
      {
        v23 = *(_DWORD *)(v22 + 28);
        if ((v23 & 0x7Eu) - 52 <= 5 && ((v23 & 0x7Eu) - 54 < 4 || (v23 & 0x800000) != 0))
          (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 88) + 96) + 32))(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 96));
      }
      goto LABEL_18;
    }
    sub_22E885CF4(v2);
    v24 = 0;
    sub_22EA30A38(*(_QWORD *)(v2 + 88), *(_QWORD *)(a1 + 16), 0, 0);
    while (*(_WORD *)(v2 + 32) != 1)
      sub_22E80F0F0(v2, 0);
  }
  else
  {
    if (v21 != 151)
    {
      sub_22EAB2DB0(*(_QWORD **)(v2 + 88), *(_QWORD *)(a1 + 16));
      goto LABEL_10;
    }
    sub_22E879A28(v2, *(_QWORD *)(a1 + 16), &v24);
    while (*(_WORD *)(v2 + 32) != 1)
      sub_22E80F0F0(v2, 0);
  }
  if (*(_QWORD *)(v2 + 24) == *(_QWORD *)(a1 + 16))
    sub_22E80F0F0(v2, 0);
LABEL_18:
  if (v24)
    sub_22E885CF4(v24);
  sub_22E80F8BC(v2 + 2416, (unsigned __int16 *)v2);
  *(_WORD *)(v2 + 80) = v5;
  *(_WORD *)(v2 + 82) = v6;
  *(_WORD *)(v2 + 84) = v7;
  *(_DWORD *)(v2 + 952) += v4;
  if (v3)
    sub_22E885CF4(v3);
}

_WORD *sub_22E80E970(_WORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  _BYTE v15[36];
  int v16;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2 && (*(_BYTE *)(v2 + 28) & 0x80) == 0)
  {
    v4 = (uint64_t)result;
    v5 = result[40];
    v6 = result[41];
    v7 = result[42];
    v8 = sub_22E4EF088(a2 + 24, (unint64_t)(result + 8), 1);
    v9 = *(_QWORD *)(a2 + 24) + 24 * *(unsigned int *)(a2 + 32);
    v10 = *(_OWORD *)v8;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v8 + 16);
    *(_OWORD *)v9 = v10;
    v11 = (*(_DWORD *)(a2 + 32) + 1);
    *(_DWORD *)(a2 + 32) = v11;
    sub_22F1735E4(*(_QWORD *)(v4 + 8), *(_BYTE **)(a2 + 24), v11, 1, 0, 1);
    sub_22E80F0F0(v4, 1);
    v16 = 0;
    sub_22E904974(*(_QWORD *)(v4 + 88));
    v12 = sub_22F2E3FBC(v4, *(_QWORD *)(a2 + 16), 0, &v16);
    sub_22EAADC1C();
    if (*(_WORD *)(v4 + 32) != 1)
    {
      if ((v12 & 1) != 0)
        goto LABEL_11;
      v13 = sub_22F141A3C(*(unsigned int *)(v4 + 40), 0, *(_QWORD **)(*(_QWORD *)(v4 + 8) + 88), *(_DWORD **)(*(_QWORD *)(v4 + 8) + 56));
      if (!v13)
        v13 = *(_DWORD *)(v4 + 16);
      v14 = *(_QWORD *)(v4 + 96);
      *(_DWORD *)(v14 + 312) = v13;
      *(_DWORD *)(v14 + 316) = 1532;
      if (*(char *)(v14 + 311) < 0)
      {
        **(_BYTE **)(v14 + 288) = 0;
        *(_QWORD *)(v14 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v14 + 288) = 0;
        *(_BYTE *)(v14 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v15, v14);
      sub_22E3BB0B8((uint64_t)v15);
      while (*(_WORD *)(v4 + 32) != 1)
LABEL_11:
        sub_22E80F0F0(v4, 0);
    }
    if (*(_QWORD *)(v4 + 24) == *(_QWORD *)(a2 + 16))
      sub_22E80F0F0(v4, 0);
    result = (_WORD *)sub_22E80F8BC(v4 + 2416, (unsigned __int16 *)v4);
    *(_WORD *)(v4 + 80) = v5;
    *(_WORD *)(v4 + 82) = v6;
    *(_WORD *)(v4 + 84) = v7;
  }
  return result;
}

uint64_t *sub_22E80EB28(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  unsigned int v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;

  v9 = (int *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 16);
  v10 = a2 + 16;
  v60 = *(_QWORD *)(a2 + 16);
  v61 = 1;
  v59 = v8;
  v11 = sub_22E4EF088(a2 + 16, (unint64_t)&v59, 1);
  v12 = *(_QWORD *)v10 + 24 * *(unsigned int *)(v10 + 8);
  v13 = *(_OWORD *)v11;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v11 + 16);
  *(_OWORD *)v12 = v13;
  ++*(_DWORD *)(v10 + 8);
  v14 = sub_22E4EF088(v10, (unint64_t)v9, 1);
  v15 = *(_QWORD *)v10 + 24 * *(unsigned int *)(v10 + 8);
  v16 = *(_OWORD *)v14;
  *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
  *(_OWORD *)v15 = v16;
  v17 = (*(_DWORD *)(v10 + 8) + 1);
  *(_DWORD *)(v10 + 8) = v17;
  sub_22F1735E4(*(_QWORD *)(a1 + 8), *(_BYTE **)v10, v17, 1, 0, 1);
  sub_22E80F0F0(a1, 1);
  v55 = 0;
  v56 = 0;
  v57 = a1 + 960;
  v58 = 0;
  if (!*(_DWORD *)(v10 + 144))
  {
    sub_22E884578(a1, v9, 1890, (uint64_t)&v52);
    sub_22E3B89A8(&v52, (void *)(*(_QWORD *)(*(_QWORD *)(a2 + 128) + 16) + 16), **(unsigned int **)(*(_QWORD *)(a2 + 128) + 16));
    sub_22E3BB0B8((uint64_t)&v52);
    if (!a4)
      goto LABEL_56;
    goto LABEL_38;
  }
  v18 = **(_QWORD **)(a2 + 152);
  if ((*(_DWORD *)(v18 + 28) & 0x7Fu) - 13 >= 0x3E)
    v19 = 0;
  else
    v19 = **(_QWORD **)(a2 + 152);
  v20 = *(_QWORD *)(v18 + 16);
  v21 = v20 & 0xFFFFFFFFFFFFFFF8;
  if ((v20 & 4) != 0)
    v21 = *(_QWORD *)v21;
  if (v21)
  {
    v22 = (*(_WORD *)(v21 + 8) & 0x7E) - 34;
    v23 = v21 - 64;
    if (v22 >= 4)
      v24 = 0;
    else
      v24 = v23;
  }
  else
  {
    v24 = 0;
  }
  v25 = *(_QWORD *)(a1 + 88);
  if (v19)
    v26 = sub_22EFBAEF8(v19);
  else
    v26 = 0;
  sub_22EBBBB24((uint64_t)&v52, v25, v24, 0, v26);
  if (*(_DWORD *)(a2 + 160) != 1)
  {
    sub_22E81199C(a1, *(_QWORD *)(a2 + 128), *(unsigned int *)(a2 + 144), &v55, 0, 0, 0, 0, 0);
    goto LABEL_36;
  }
  if (a3)
  {
    v27 = *(_DWORD *)(v18 + 28) & 0x7F;
    v28 = v27 - 26 < 7;
    if (v27 - 26 > 6)
    {
      v29 = 0;
    }
    else
    {
      sub_22E885C30(a1, 128);
      sub_22EABF260(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v18);
      v27 = *(_DWORD *)(v18 + 28) & 0x7F;
      v29 = a1;
    }
    if (v27 - 52 < 6 || v27 == 29)
    {
      sub_22E885C30(a1, 4194313);
      v30 = a1;
    }
    else
    {
      v30 = 0;
    }
    if (v27 > 0x39 || ((1 << v27) & 0x3F0000020000000) == 0)
      goto LABEL_28;
    sub_22F31D0D4(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v18);
    sub_22E81199C(a1, *(_QWORD *)(a2 + 128), *(unsigned int *)(a2 + 144), &v55, 0, 0, 0, 0, 0);
    v46 = *(_QWORD *)(a1 + 88);
    v47 = *(_QWORD *)(v46 + 216);
    v48 = *(_WORD *)(v47 + 8) & 0x7F;
    v49 = -40;
    if (v48 > 0x46)
    {
      switch(v48)
      {
        case 'S':
          goto LABEL_83;
        case 'G':
          v49 = -56;
          goto LABEL_83;
        case 'Q':
          goto LABEL_83;
      }
    }
    else
    {
      if (v48 <= 0x18)
      {
        if (v48 == 16)
          goto LABEL_67;
        if (((1 << v48) & 0x1066) != 0)
          goto LABEL_83;
        if (v48 == 24)
        {
LABEL_67:
          v49 = -48;
LABEL_83:
          v50 = *(_QWORD *)(v47 + v49 + 16);
          v51 = v50 & 0xFFFFFFFFFFFFFFF8;
          if ((v50 & 4) != 0)
            v51 = *(_QWORD *)(v51 + 8);
          *(_QWORD *)(v46 + 216) = v51;
          if (v30)
          {
            sub_22E885CF4(v30);
            v30 = 0;
          }
          goto LABEL_29;
        }
      }
      if (v48 == 70)
      {
LABEL_81:
        v49 = -64;
        goto LABEL_83;
      }
    }
    if (v48 - 52 < 6)
    {
      v49 = -72;
      goto LABEL_83;
    }
    if (v48 - 33 < 5)
      goto LABEL_81;
    goto LABEL_67;
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
LABEL_28:
  sub_22E81199C(a1, *(_QWORD *)(a2 + 128), *(unsigned int *)(a2 + 144), &v55, 0, 0, 0, 0, 0);
LABEL_29:
  if (v28 && v29)
  {
    sub_22E885CF4(v29);
    v29 = 0;
  }
  if (v30)
    sub_22E885CF4(v30);
  if (v29)
    sub_22E885CF4(v29);
LABEL_36:
  if (v54)
  {
    *((_QWORD *)v52 + 1286) = v53;
    if (!a4)
      goto LABEL_56;
  }
  else if (!a4)
  {
    goto LABEL_56;
  }
LABEL_38:
  v31 = v56;
  if (v56 < 8)
    goto LABEL_56;
  v32 = (_DWORD *)(v56 & 0xFFFFFFFFFFFFFFF8);
  if ((v56 & 4) != 0 && v32)
  {
    if (!v32[2])
      goto LABEL_56;
  }
  else if ((v56 & 4) == 0)
  {
    v33 = *(unsigned __int16 *)(v56 + 28) | (*(unsigned __int8 *)(v56 + 30) << 16);
    if ((v33 & 0x70000) == 0x10000 || (v33 & 0x5FFFF) == 0x50011)
      goto LABEL_56;
    goto LABEL_52;
  }
  v34 = *(unsigned __int16 *)(**(_QWORD **)v32 + 28) | (*(unsigned __int8 *)(**(_QWORD **)v32 + 30) << 16);
  v35 = v34 & 0x70000;
  v36 = v34 & 0x5FFFF;
  if (v35 == 0x10000 || v36 == 327697)
    goto LABEL_56;
  v31 = **(_QWORD **)v32;
LABEL_52:
  if ((*(_BYTE *)(*(_QWORD *)(v31 + 72) + 12) & 2) != 0)
  {
    sub_22E884578(a1, v9, 1891, (uint64_t)&v52);
    v38 = *(_QWORD *)(a2 + 128);
    v39 = v52;
    if (!v52)
    {
      v39 = (unsigned __int8 *)sub_22E3B8AAC(v53);
      v52 = v39;
    }
    v39[*v39 + 1] = 5;
    v40 = v52;
    v41 = *v52;
    *v52 = v41 + 1;
    *(_QWORD *)&v40[8 * v41 + 16] = v38;
    sub_22E3BB0B8((uint64_t)&v52);
  }
LABEL_56:
  v42 = *(unsigned int *)(a2 + 160);
  if ((_DWORD)v42)
  {
    v43 = 0;
    v44 = 8 * v42;
    do
    {
      sub_22EA32ECC(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *(_QWORD *)(*(_QWORD *)(a2 + 152) + v43), (uint64_t)&v55);
      v43 += 8;
    }
    while (v44 != v43);
  }
  while (*(_WORD *)(a1 + 32) != 1)
    sub_22E80F0F0(a1, 0);
  if (*(_QWORD *)(a1 + 24) == v60)
    sub_22E80F0F0(a1, 0);
  sub_22E8D1BC4(v57, (uint64_t)&v57);
  sub_22E80F94C(&v58);
  return sub_22E80F94C((uint64_t *)&v56);
}

uint64_t sub_22E80F0F0(uint64_t a1, int a2)
{
  unsigned int v3;
  unsigned int *v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned __int16 *)(a1 + 32);
  if (v3 - 21 <= 1)
    return sub_22E80F720(a1);
  if (v3 - 19 <= 1)
    return sub_22E80F788(a1);
  if (v3 - 23 <= 1)
    return sub_22E80CED8(a1);
  if (v3 <= 0x12 && ((1 << v3) & 0x76000) != 0)
  {
    v9 = a1 + 16;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    return *(unsigned int *)(v9 + 24);
  }
  v6 = (unsigned int *)(a1 + 16);
  if (v3 != 3)
  {
    v10 = *v6;
    if (v3 - 399 <= 0x28)
    {
      v8 = *(_DWORD *)(a1 + 20);
      if (!v8)
        v8 = *v6;
      *(_DWORD *)(a1 + 40) = v8;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
      return v10;
    }
    *(_DWORD *)(a1 + 40) = v10;
    goto LABEL_12;
  }
  if (a2)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
LABEL_12:
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
    return *(unsigned int *)(a1 + 40);
  }
  return sub_22F2F124C(a1);
}

uint64_t sub_22E80F20C(uint64_t result, _QWORD *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;

  v5 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 8 * v5;
    do
    {
      v14 = a5;
      v15 = a4;
      v16 = result;
      v8 = a2;
      v9 = *a2;
      v10 = a3;
      if (a3)
      {
        v11 = *(_QWORD *)(v9 + v6);
        v12 = *(unsigned int *)(v11 + 160);
        if (v12 >= *(unsigned int *)(v11 + 164))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = *(unsigned int *)(v11 + 160);
        }
        *(_QWORD *)(*(_QWORD *)(v11 + 152) + 8 * v12) = v10;
        ++*(_DWORD *)(v11 + 160);
        v9 = *v8;
      }
      sub_22E80EB28(v16, *(_QWORD *)(v9 + v6), v15, v14);
      v13 = *(_QWORD *)(*v8 + v6);
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v6 += 8;
      a5 = v14;
      a4 = v15;
      a2 = v8;
      a3 = v10;
      result = v16;
    }
    while (v7 != v6);
  }
  *((_DWORD *)a2 + 2) = 0;
  return result;
}

char *sub_22E80F2F4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7;

  if (*(_DWORD *)(a1 + 908))
  {
    v7 = operator new[]();
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
    return sub_22F1735E4(a1, (_BYTE *)v7, 1, 1, 1, a3);
  }
  else
  {
    sub_22F162A44((char *)a1);
    return (char *)sub_22E80F9C0(a1 + 2776, *(_QWORD *)(a1 + 2776) + 24 * *(_QWORD *)(a1 + 2816), a2);
  }
}

uint64_t sub_22E80F398(unsigned __int16 *a1, int a2, int a3, uint64_t a4, char a5, int a6)
{
  unint64_t v9;
  int v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;

  v9 = (unint64_t)(a1 + 8);
  v10 = a1[16];
  if (v10 != a2 && v10 != a3)
  {
    v19 = 1;
    while (1)
    {
      v12 = 0;
      if (v10 <= 61)
      {
        switch(v10)
        {
          case 19:
            v20 = sub_22E4EF088(a4, v9, 1);
            v21 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
            v22 = *(_OWORD *)v20;
            *(_QWORD *)(v21 + 16) = *(_QWORD *)(v20 + 16);
            *(_OWORD *)v21 = v22;
            ++*(_DWORD *)(a4 + 8);
            sub_22E80F788((uint64_t)a1);
            v23 = a1;
            v24 = 20;
            v25 = 20;
            goto LABEL_20;
          case 20:
            if (((a1[41] != 0) & ~v19) != 0)
              return 0;
            v26 = sub_22E4EF088(a4, v9, 1);
            v27 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
            v28 = *(_OWORD *)v26;
            *(_QWORD *)(v27 + 16) = *(_QWORD *)(v26 + 16);
            *(_OWORD *)v27 = v28;
            ++*(_DWORD *)(a4 + 8);
            sub_22E80F788((uint64_t)a1);
            goto LABEL_27;
          case 21:
            v29 = sub_22E4EF088(a4, v9, 1);
            v30 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
            v31 = *(_OWORD *)v29;
            *(_QWORD *)(v30 + 16) = *(_QWORD *)(v29 + 16);
            *(_OWORD *)v30 = v31;
            ++*(_DWORD *)(a4 + 8);
            sub_22E80F720((uint64_t)a1);
            v23 = a1;
            v24 = 22;
            v25 = 22;
            goto LABEL_20;
          case 22:
            if (((a1[40] != 0) & ~v19) != 0)
              return 0;
            v32 = sub_22E4EF088(a4, v9, 1);
            v33 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
            v34 = *(_OWORD *)v32;
            *(_QWORD *)(v33 + 16) = *(_QWORD *)(v32 + 16);
            *(_OWORD *)v33 = v34;
            ++*(_DWORD *)(a4 + 8);
            sub_22E80F720((uint64_t)a1);
            goto LABEL_27;
          case 23:
            v35 = sub_22E4EF088(a4, v9, 1);
            v36 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
            v37 = *(_OWORD *)v35;
            *(_QWORD *)(v36 + 16) = *(_QWORD *)(v35 + 16);
            *(_OWORD *)v36 = v37;
            ++*(_DWORD *)(a4 + 8);
            sub_22E80CED8((uint64_t)a1);
            v23 = a1;
            v24 = 24;
            v25 = 24;
LABEL_20:
            sub_22E80F398(v23, v24, v25, a4, 0, 1);
            goto LABEL_27;
          case 24:
            if (((a1[42] != 0) & ~v19) != 0)
              return 0;
            v38 = sub_22E4EF088(a4, v9, 1);
            v39 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
            v40 = *(_OWORD *)v38;
            *(_QWORD *)(v39 + 16) = *(_QWORD *)(v38 + 16);
            *(_OWORD *)v39 = v40;
            ++*(_DWORD *)(a4 + 8);
            sub_22E80CED8((uint64_t)a1);
            goto LABEL_27;
          default:
            if (v10 != 1)
              goto LABEL_26;
            return v12;
        }
      }
      if (v10 == 62)
      {
        if ((a5 & 1) != 0)
          return 0;
      }
      else if ((v10 - 436) < 3)
      {
        return v12;
      }
LABEL_26:
      v41 = sub_22E4EF088(a4, v9, 1);
      v42 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
      v43 = *(_OWORD *)v41;
      *(_QWORD *)(v42 + 16) = *(_QWORD *)(v41 + 16);
      *(_OWORD *)v42 = v43;
      ++*(_DWORD *)(a4 + 8);
      sub_22E80F0F0((uint64_t)a1, 1);
LABEL_27:
      v10 = a1[16];
      if (v10 != a2)
      {
        v19 = 0;
        if (v10 != a3)
          continue;
      }
      break;
    }
  }
  v12 = 1;
  if (a6)
  {
    v13 = sub_22E4EF088(a4, v9, 1);
    v14 = *(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8);
    v15 = *(_OWORD *)v13;
    *(_QWORD *)(v14 + 16) = *(_QWORD *)(v13 + 16);
    *(_OWORD *)v14 = v15;
    ++*(_DWORD *)(a4 + 8);
    sub_22E80F0F0((uint64_t)a1, 0);
  }
  return v12;
}

uint64_t sub_22E80F720(uint64_t a1)
{
  __int16 v2;
  unsigned int *v3;
  unsigned int v4;

  if (*(_WORD *)(a1 + 32) == 21)
  {
    v2 = *(_WORD *)(a1 + 80) + 1;
LABEL_5:
    *(_WORD *)(a1 + 80) = v2;
    goto LABEL_6;
  }
  if (*(_WORD *)(a1 + 80))
  {
    sub_22E80F8BC(a1 + 2416, (unsigned __int16 *)a1);
    v2 = *(_WORD *)(a1 + 80) - 1;
    goto LABEL_5;
  }
LABEL_6:
  v4 = *(_DWORD *)(a1 + 16);
  v3 = (unsigned int *)(a1 + 16);
  v3[6] = v4;
  sub_22F18FB4C(*((_QWORD *)v3 - 1), v3);
  return v3[6];
}

uint64_t sub_22E80F788(uint64_t a1)
{
  __int16 v2;
  unsigned int *v3;
  unsigned int v4;

  if (*(_WORD *)(a1 + 32) == 19)
  {
    v2 = *(_WORD *)(a1 + 82) + 1;
LABEL_5:
    *(_WORD *)(a1 + 82) = v2;
    goto LABEL_6;
  }
  if (*(_WORD *)(a1 + 82))
  {
    sub_22E80F8BC(a1 + 2416, (unsigned __int16 *)a1);
    v2 = *(_WORD *)(a1 + 82) - 1;
    goto LABEL_5;
  }
LABEL_6:
  v4 = *(_DWORD *)(a1 + 16);
  v3 = (unsigned int *)(a1 + 16);
  v3[6] = v4;
  sub_22F18FB4C(*((_QWORD *)v3 - 1), v3);
  return v3[6];
}

void sub_22E80F7F0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24FAA49E0;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

void sub_22E80F840(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24FAA4A28;
  v2 = *(char **)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = v2 - 8;
    v5 = 16 * v3;
    do
    {
      sub_22E80FBD8((void ***)&v4[v5]);
      v5 -= 16;
    }
    while (v5);
    v2 = *(char **)(a1 + 32);
  }
  if (v2 != (char *)(a1 + 48))
    free(v2);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E80F8BC(uint64_t result, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = a2[40];
    v4 = a2[41];
    v5 = a2[42];
    v6 = v2 - 1;
    v7 = *(_QWORD *)result + 24 * v2 - 10;
    v8 = (unsigned __int16 *)v7;
    do
    {
      v10 = *v8;
      v8 -= 12;
      v9 = v10;
      if ((v3 != v10 || v4 != *(unsigned __int16 *)(v7 + 2) || v5 != *(unsigned __int16 *)(v7 + 4))
        && v3 <= v9
        && v4 <= *(unsigned __int16 *)(v7 + 2)
        && v5 <= *(unsigned __int16 *)(v7 + 4))
      {
        break;
      }
      *(_DWORD *)(result + 8) = v6--;
      v7 = (uint64_t)v8;
    }
    while (v6 != -1);
  }
  return result;
}

uint64_t *sub_22E80F94C(uint64_t *a1)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v3 != v3 + 2)
        free(*v3);
      MEMORY[0x2348A0E9C]();
    }
  }
  return a1;
}

uint64_t sub_22E80F9C0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _BOOL4 v14;
  unint64_t v15;
  __int128 v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;

  if (*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8) == a2)
  {
    v17 = sub_22E4EF088(a1, a3, 1);
    v18 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    v19 = *(_OWORD *)v17;
    *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 16);
    *(_OWORD *)v18 = v19;
    LODWORD(v18) = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v18;
    return *(_QWORD *)a1 + 24 * v18 - 24;
  }
  else
  {
    v4 = a2 - *(_QWORD *)a1;
    v5 = sub_22E4EF088(a1, a3, 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + v4);
    v7 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 - 8);
    *(_OWORD *)v7 = *(_OWORD *)(v7 - 24);
    v8 = *(_QWORD *)a1;
    v9 = *(_DWORD *)(a1 + 8);
    v10 = *(_QWORD *)a1 + 24 * v9 - 24;
    if ((_QWORD *)v10 != v6)
    {
      memmove(v6 + 3, v6, v10 - (_QWORD)v6);
      v9 = *(_DWORD *)(a1 + 8);
      v8 = *(_QWORD *)a1;
    }
    v11 = v9 + 1;
    *(_DWORD *)(a1 + 8) = v11;
    v12 = v8 + 24 * v11;
    v14 = v5 >= (unint64_t)v6 && v5 < v12;
    v15 = v5 + 24 * v14;
    v16 = *(_OWORD *)v15;
    v6[2] = *(_QWORD *)(v15 + 16);
    *(_OWORD *)v6 = v16;
  }
  return (uint64_t)v6;
}

void sub_22E80FADC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_22E80FB6C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24FAA4A28;
  v2 = *(char **)(a1 + 32);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    v4 = v2 - 8;
    v5 = 16 * v3;
    do
    {
      sub_22E80FBD8((void ***)&v4[v5]);
      v5 -= 16;
    }
    while (v5);
    v2 = *(char **)(a1 + 32);
  }
  if (v2 != (char *)(a1 + 48))
    free(v2);
  return a1;
}

void ***sub_22E80FBD8(void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    MEMORY[0x2348A0E9C](v2, 0x1080C4070FE8099);
  }
  return a1;
}

unint64_t sub_22E80FC30(uint64_t a1, _QWORD *a2, int a3, int a4, uint64_t *a5, uint64_t a6)
{
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  void *v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (a3 == 12)
  {
    v12 = 6;
  }
  else if (a3 == 7)
  {
    v12 = 1;
  }
  else if (a3)
  {
    v11 = a3 & 0xFFFFFFFE;
    if ((a3 & 0xFFFFFFFE) == 0x16)
    {
      v12 = 7;
    }
    else if (v11 == 24)
    {
      v12 = 4;
    }
    else if (v11 == 20)
    {
      v12 = 3;
    }
    else
    {
      v12 = 2;
    }
  }
  else
  {
    v12 = 5;
  }
  v26[0] = 0;
  v26[2] = 0;
  v26[3] = 0;
  v27 = 0;
  v28 = a1 + 960;
  v40 = 0;
  v29 = 0u;
  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0;
  if (a6)
  {
    v22 = (uint64_t *)(a6 + 8);
    v21 = *(_QWORD *)(a6 + 8);
    if ((v21 & 4) != 0)
    {
      v24 = v21 & 0xFFFFFFFFFFFFFFF8;
      v22 = *(uint64_t **)v24;
      v23 = (uint64_t *)(*(_QWORD *)v24 + 8 * *(unsigned int *)(v24 + 8));
    }
    else
    {
      v23 = &v22[v21 > 7];
    }
    if (v22 != v23)
    {
      if (v22 + 1 == v23)
      {
        v27 = *v22 & 0xFFFFFFFFFFFFFFFBLL;
      }
      else
      {
        v25 = operator new();
        *(_QWORD *)v25 = v25 + 16;
        *(_QWORD *)(v25 + 8) = 0x400000000;
        v27 = v25 | 4;
        sub_22F2E2AB8((unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8), v22, v23);
      }
    }
  }
  sub_22E80FF64(a1, (uint64_t)v26, a4, v12, 0);
  v13 = v26[0];
  if (a5)
    *a5 = v26[1] & ((uint64_t)(v26[0] << 42) >> 63);
  v41 = v26;
  v45 = 0;
  v46 = 0;
  v42 = 0u;
  v43 = 0u;
  v44 = 0;
  v47 = *((_QWORD *)&v31 + 1);
  v49 = 0u;
  v48 = a3;
  v50 = 0;
  v51 = &v53;
  v52 = 0x800000000;
  v54 = (*(_QWORD *)&v13 & 0x3F000) == 204800;
  v55 = 0u;
  v56 = v28;
  v60 = 0;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  sub_22E8227E4(a1, (uint64_t)&v41, (unint64_t)sub_22E823490, 0);
  if (a2)
    *a2 = v47;
  if ((v54 & 1) != 0 || (*v41 & 0x3F000) == 0x32000)
    v19 = 0;
  else
    v19 = sub_22EE89FC0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v41, v14, v15, v16, v17, v18);
  sub_22E827F78((uint64_t)&v41);
  if (DWORD1(v31))
    free(v30[1]);
  sub_22E8D1BC4(v28, (uint64_t)&v28);
  sub_22E80F94C((uint64_t *)&v29);
  sub_22E80F94C((uint64_t *)&v27);
  return v19;
}

uint64_t sub_22E80FF64(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  char v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  _BYTE v27[32];
  _BYTE v28[32];
  _BYTE v29[32];
  char v30;
  char v31;
  _BYTE v32[32];
  _BYTE v33[32];
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;

  LODWORD(v34) = 0;
  v35 = 0;
  v36 = 0;
  sub_22E818334(a1, a2, (int *)&v34, a3, a4, a5, 1);
  result = sub_22E8AD5F4((uint64_t *)a2);
  v9 = result;
  if (((1 << a4) & 0x363) == 0 && (*(_DWORD *)a2 & 0x3FFC0) == 0)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1542, (uint64_t)v33);
    result = sub_22E3BB0B8((uint64_t)v33);
    *(_QWORD *)a2 = *(_QWORD *)a2 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
    *(_DWORD *)(a2 + 120) = 0;
    *(_DWORD *)(a2 + 132) = 0;
    if ((v9 & 1) == 0)
      goto LABEL_11;
    goto LABEL_5;
  }
  if ((_DWORD)result)
  {
    if ((result & 1) == 0)
      goto LABEL_11;
LABEL_5:
    v10 = *(_DWORD *)(a2 + 96);
    if (v10)
    {
      v11 = &v31;
    }
    else
    {
      v10 = *(_DWORD *)(a2 + 100);
      v11 = &v30;
    }
    v12 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v12 + 312) = v10;
    *(_DWORD *)(v12 + 316) = 1756;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    v13 = sub_22E78E558((uint64_t)v11, v12);
    result = sub_22E3BB0B8(v13);
    *(_QWORD *)a2 &= 0xFFFFFFFFFFFFFFC0;
    *(_QWORD *)(a2 + 96) = 0;
LABEL_11:
    if ((v9 & 8) != 0)
    {
      v14 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x300000000) != 0)
      {
        if ((v14 & 0x100000000) != 0)
          v15 = (_DWORD *)(a2 + 164);
        else
          v15 = (_DWORD *)(a2 + 184);
        v16 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v16 + 312) = *v15;
        *(_DWORD *)(v16 + 316) = 1755;
        if (*(char *)(v16 + 311) < 0)
        {
          **(_BYTE **)(v16 + 288) = 0;
          *(_QWORD *)(v16 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v16 + 288) = 0;
          *(_BYTE *)(v16 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v29, v16);
        result = sub_22E3BB0B8((uint64_t)v29);
        v14 = *(_QWORD *)a2;
      }
      if ((v14 & 0x400000000) != 0)
      {
        v17 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v17 + 312) = *(_DWORD *)(a2 + 168);
        *(_DWORD *)(v17 + 316) = 1755;
        if (*(char *)(v17 + 311) < 0)
        {
          **(_BYTE **)(v17 + 288) = 0;
          *(_QWORD *)(v17 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v17 + 288) = 0;
          *(_BYTE *)(v17 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v28, v17);
        result = sub_22E3BB0B8((uint64_t)v28);
      }
      if (*(_QWORD *)(a2 + 16))
      {
        v18 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v18 + 312) = *(_DWORD *)(a2 + 172);
        *(_DWORD *)(v18 + 316) = 1755;
        if (*(char *)(v18 + 311) < 0)
        {
          **(_BYTE **)(v18 + 288) = 0;
          *(_QWORD *)(v18 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v18 + 288) = 0;
          *(_BYTE *)(v18 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v27, v18);
        result = sub_22E3BB0B8((uint64_t)v27);
      }
      v19 = *(_QWORD *)a2;
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 184) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_QWORD *)(a2 + 176) = 0;
      *(_QWORD *)a2 = v19 & 0xFFFFFFF0FFFFFFFFLL;
      *(_DWORD *)(a2 + 164) = 0;
    }
    goto LABEL_34;
  }
  v20 = *(_QWORD *)(a2 + 32);
  if (v20 < 8 || (v20 & 4) != 0 && (v21 = v20 & 0xFFFFFFFFFFFFFFF8) != 0 && !*(_DWORD *)(v21 + 8))
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1758, (uint64_t)v32);
    result = sub_22E3BB0B8((uint64_t)v32);
    if ((*(_QWORD *)a2 & 0x3FFC0) == 0)
    {
      *(_QWORD *)a2 = *(_QWORD *)a2 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
      *(_DWORD *)(a2 + 120) = 0;
      *(_DWORD *)(a2 + 132) = 0;
    }
  }
LABEL_34:
  if (a4 != 9 && (*(_QWORD *)a2 & 0x6000000000) != 0)
  {
    v22 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v22 + 312) = *(_DWORD *)(a2 + 196);
    *(_DWORD *)(v22 + 316) = 1754;
    if (*(char *)(v22 + 311) < 0)
    {
      **(_BYTE **)(v22 + 288) = 0;
      *(_QWORD *)(v22 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v22 + 288) = 0;
      *(_BYTE *)(v22 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v34, v22);
    v23 = (*(_QWORD *)a2 >> 37) & 3;
    v24 = v34;
    if (!v34)
    {
      v24 = (unsigned __int8 *)sub_22E3B8AAC(v35);
      v34 = v24;
    }
    v24[*v24 + 1] = 2;
    v25 = v34;
    v26 = *v34;
    *v34 = v26 + 1;
    *(_QWORD *)&v25[8 * v26 + 16] = v23;
    result = sub_22E3BB0B8((uint64_t)&v34);
    *(_QWORD *)a2 &= 0xFFFFFF9FFFFFFFFFLL;
    *(_DWORD *)(a2 + 196) = 0;
  }
  return result;
}

void sub_22E8102D8(uint64_t a1, uint64_t a2)
{
  sub_22E8227E4(a1, a2, (unint64_t)sub_22E823490, 0);
}

void sub_22E8102E8(uint64_t a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  char v10;

  do
  {
    while (1)
    {
      if ((a2 & 4) != 0)
      {
        v10 = sub_22E8103B4(a1, a3, 0);
        if ((a2 & 1) == 0)
          goto LABEL_7;
      }
      else
      {
        v10 = 0;
        if ((a2 & 1) == 0)
          goto LABEL_7;
      }
      if (*(_WORD *)(a1 + 32) == 186)
      {
        sub_22E810414(a1, a3, a4, 0, a5);
        v10 = 1;
      }
LABEL_7:
      if ((a2 & 2) == 0
        || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 3) & 0x10) == 0
        || *(_WORD *)(a1 + 32) != 302)
      {
        break;
      }
      sub_22E815DDC(a1, a3);
    }
  }
  while ((v10 & 1) != 0);
}

uint64_t sub_22E8103B4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t result;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 20) & 0x1000000000) == 0)
    return 0;
  v5 = sub_22E8836FC(a1, 0, a3);
  result = 0;
  if (v5)
  {
    sub_22E835FD0(a1, a2);
    return 1;
  }
  return result;
}

uint64_t sub_22E810414(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  unsigned int v21;
  _BOOL4 v22;
  int v23;
  char v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  BOOL v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v56;
  char v58;
  BOOL v60;
  char v62;
  BOOL v63;
  BOOL v64;
  char v66;
  BOOL v67;
  BOOL v68;
  char v70;
  BOOL v72;
  char v74;
  BOOL v75;
  char v77;
  BOOL v78;
  BOOL v79;
  char v81;
  BOOL v82;
  char v84;
  BOOL v85;
  unint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  __int128 v104;
  int v105;
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v110;
  int v111;
  _QWORD *v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  _DWORD *v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  _DWORD *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  _DWORD *v127;
  unsigned int v128;
  unsigned int v129;
  _DWORD *v130;
  unsigned int v131;
  int v132;
  unint64_t v133;
  int v134;
  unsigned int v135;
  const void *v136;
  size_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  BOOL v143;
  unint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v149;
  uint64_t v151;
  unint64_t v153;
  unint64_t v155;
  _QWORD v156[2];
  int v157;
  int v158;

  v5 = a2;
  v6 = (unsigned int *)(result + 16);
  v158 = *(_DWORD *)(result + 16);
  v7 = v158;
  v8 = v158;
  if (*(_WORD *)(result + 32) == 186)
  {
    v9 = a5;
    v10 = a3;
    v11 = result;
    v151 = v158;
    while (1)
    {
      *(_DWORD *)(v11 + 40) = *(_DWORD *)(v11 + 16);
      sub_22F18FB4C(*(_QWORD *)(v11 + 8), v6);
      v12 = v5[1];
      if (v12 < 8)
        goto LABEL_4;
      v14 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
      {
        if (v14)
          break;
      }
      if ((v12 & 4) != 0)
        v13 = *(unsigned int *)(v14 + 8);
      else
        v13 = 1;
LABEL_12:
      v155 = *(unsigned int *)(v11 + 40);
      if (v10)
        v15 = *(unsigned int *)(v10 + 8);
      else
        v15 = 0;
      if (sub_22E8847B4(v11, 0x15u, 1510, "attribute", 9uLL)
        || (sub_22E8847B4(v11, 0x15u, 1510, "(", 1uLL) & 1) != 0)
      {
        LOWORD(v156[0]) = 22;
        return sub_22E885940(v11, (unsigned __int16 *)v156, 1, 1);
      }
      v153 = v15;
LABEL_18:
      v16 = *(unsigned __int16 *)(v11 + 32);
      while (1)
      {
        if (v16 == 65)
        {
          *(_DWORD *)(v11 + 40) = *(_DWORD *)(v11 + 16);
          sub_22F18FB4C(*(_QWORD *)(v11 + 8), v6);
          goto LABEL_18;
        }
        if (v16 - 399 < 0x29)
          goto LABEL_306;
        if (v16 == 3)
          break;
        if (v16 - 7 < 6 || v16 <= 0x12 && ((1 << v16) & 0x7E002) != 0)
          goto LABEL_306;
        v17 = *(_QWORD *)(v11 + 24);
        if (!v17)
          goto LABEL_306;
        *(_DWORD *)(v11 + 40) = *(_DWORD *)(v11 + 16);
        sub_22F18FB4C(*(_QWORD *)(v11 + 8), v6);
        v18 = *(unsigned int *)(v11 + 40);
        if (*(_WORD *)(v11 + 32) == 21)
        {
          if (!v10)
            goto LABEL_285;
          v19 = sub_22E815BCC((_WORD *)(*(_QWORD *)(v17 + 16) + 16), **(unsigned int **)(v17 + 16));
          if (v20 != 18)
          {
            v21 = 0;
            v22 = 1;
            v23 = 0;
            v24 = 0;
            v25 = 0;
            switch(v20)
            {
              case 14:
                v26 = bswap64(*(_QWORD *)v19);
                v27 = 0x6163717569726564;
                if (v26 == 0x6163717569726564
                  && (v27 = 0x65645F6166746572, v26 = bswap64(*(_QWORD *)(v19 + 3)), v26 == 0x65645F6166746572))
                {
                  v28 = 0;
                  v25 = 0;
                  v24 = 0;
                }
                else
                {
                  v25 = 0;
                  v24 = 0;
                  if (v26 < v27)
                    v28 = -1;
                  else
                    v28 = 1;
                }
                v23 = 1;
                goto LABEL_60;
              case 15:
                v31 = bswap64(*(_QWORD *)v19);
                v32 = 0x6163717569726564;
                if (v31 == 0x6163717569726564
                  && (v32 = 0x645F6265666F7265,
                      v31 = bswap64(*(_QWORD *)((char *)v19 + 7)),
                      v31 == 0x645F6265666F7265))
                {
                  v33 = 0;
                  v21 = 0;
                  v34 = 0;
                  v23 = 0;
                  v24 = 0;
                  v25 = 0;
                  v35 = 0;
                }
                else
                {
                  v21 = 0;
                  v34 = 0;
                  v23 = 0;
                  v24 = 0;
                  v25 = 0;
                  v35 = 0;
                  if (v31 < v32)
                    v33 = -1;
                  else
                    v33 = 1;
                }
                v38 = 1;
                goto LABEL_135;
              case 16:
              case 18:
              case 19:
              case 21:
              case 22:
              case 24:
                goto LABEL_63;
              case 17:
                v36 = bswap64(*(_QWORD *)v19);
                v37 = 0x6173736572745F63;
                if (v36 == 0x6173736572745F63)
                {
                  v37 = 0x61706162696C6974;
                  v36 = bswap64(*((_QWORD *)v19 + 1));
                  if (v36 == 0x61706162696C6974)
                  {
                    v21 = 0;
                    v34 = 0;
                    v23 = 0;
                    v24 = 0;
                    v25 = 0;
                    v38 = 0;
                    v35 = 0;
                    v33 = *((unsigned __int8 *)v19 + 16) - 121;
                    goto LABEL_135;
                  }
                }
                v21 = 0;
                v34 = 0;
                v23 = 0;
                v24 = 0;
                v25 = 0;
                v38 = 0;
                v35 = 0;
                break;
              case 20:
                v29 = bswap64(*(_QWORD *)v19);
                v30 = 0x7368617265645F6CLL;
                if (v29 != 0x7368617265645F6CLL)
                  goto LABEL_57;
                v30 = 0x6F636B5F66756E63;
                v29 = bswap64(*((_QWORD *)v19 + 1));
                if (v29 != 0x6F636B5F66756E63)
                  goto LABEL_57;
                v29 = bswap32(*((_DWORD *)v19 + 4));
                if ((_DWORD)v29 == 1953066862)
                  goto LABEL_37;
                v30 = 1953066862;
                goto LABEL_57;
              case 23:
                v39 = 0x6578636C75736976;
                v40 = bswap64(*(_QWORD *)v19);
                if (v40 == 0x6578636C75736976
                  && (v39 = 0x655F6C6F636B5F66, v40 = bswap64(*((_QWORD *)v19 + 1)), v40 == 0x655F6C6F636B5F66)
                  && (v39 = 0x66756E6374696F6ELL,
                      v40 = bswap64(*(_QWORD *)((char *)v19 + 15)),
                      v40 == 0x66756E6374696F6ELL))
                {
                  v28 = 0;
                  v25 = 0;
                  v23 = 0;
                }
                else
                {
                  v25 = 0;
                  v23 = 0;
                  if (v40 < v39)
                    v28 = -1;
                  else
                    v28 = 1;
                }
                v24 = 1;
                goto LABEL_60;
              case 25:
                v41 = bswap64(*(_QWORD *)v19);
                v42 = 0x616371756972655FLL;
                if (v41 == 0x616371756972655FLL
                  && (v42 = 0x7368617265645F63, v41 = bswap64(*((_QWORD *)v19 + 1)), v41 == 0x7368617265645F63)
                  && (v42 = 0x61706162696C6974, v41 = bswap64(*((_QWORD *)v19 + 2)), v41 == 0x61706162696C6974))
                {
                  v24 = 0;
                  v23 = 0;
                  v28 = *((unsigned __int8 *)v19 + 24) - 121;
                }
                else
                {
                  v24 = 0;
                  v23 = 0;
                  if (v41 < v42)
                    v28 = -1;
                  else
                    v28 = 1;
                }
                v25 = 1;
                goto LABEL_60;
              default:
                v23 = 0;
                v24 = 0;
                v25 = 0;
                goto LABEL_63;
            }
LABEL_131:
            v50 = v36 >= v37;
LABEL_132:
            if (v50)
              v33 = 1;
            else
              v33 = -1;
LABEL_135:
            v52 = 0;
            v51 = 0;
            v56 = v33 == 0;
LABEL_136:
            if (v56)
              v21 = 257;
            goto LABEL_138;
          }
          v29 = bswap64(*(_QWORD *)v19);
          v30 = 0x616371756972655FLL;
          if (v29 == 0x616371756972655FLL)
          {
            v29 = bswap64(*((_QWORD *)v19 + 1));
            v30 = 0x6361706162696C69;
            if (v29 == 0x6361706162696C69)
            {
              v29 = bswap32((unsigned __int16)v19[8]) >> 16;
              if ((_DWORD)v29 == 29817)
              {
LABEL_37:
                v28 = 0;
                v25 = 0;
                v24 = 0;
                v23 = 0;
LABEL_60:
                v22 = v28 != 0;
                if (v28)
                  v21 = 0;
                else
                  v21 = 257;
LABEL_63:
                v35 = v20 == 24;
                if (v20 == 24 && v22)
                {
                  v46 = bswap64(*(_QWORD *)v19);
                  v47 = 0x6173736572745F73;
                  if (v46 == 0x6173736572745F73
                    && (v46 = bswap64(*((_QWORD *)v19 + 1)), v47 = 0x68617265645F6361, v46 == 0x68617265645F6361)
                    && (v47 = 0x706162696C697479, v46 = bswap64(*((_QWORD *)v19 + 2)), v46 == 0x706162696C697479))
                  {
                    v33 = 0;
                    v34 = 0;
                    v38 = 0;
                  }
                  else
                  {
                    v34 = 0;
                    v38 = 0;
                    if (v46 < v47)
                      v33 = -1;
                    else
                      v33 = 1;
                  }
                  v35 = 1;
                  goto LABEL_135;
                }
                v34 = v20 == 21;
                if (v20 != 21)
                  v22 = 0;
                if (v22)
                {
                  v44 = bswap64(*(_QWORD *)v19);
                  v45 = 0x6173736572745F65;
                  if (v44 == 0x6173736572745F65
                    && (v45 = 0x78636C7573697665, v44 = bswap64(*((_QWORD *)v19 + 1)), v44 == 0x78636C7573697665)
                    && (v45 = 0x6976655F6C6F636BLL,
                        v44 = bswap64(*(_QWORD *)((char *)v19 + 13)),
                        v44 == 0x6976655F6C6F636BLL))
                  {
                    v33 = 0;
                    v38 = 0;
                  }
                  else
                  {
                    v38 = 0;
                    if (v44 < v45)
                      v33 = -1;
                    else
                      v33 = 1;
                  }
                  v34 = 1;
                  goto LABEL_135;
                }
                if (v20 == 18 && v21 <= 0xFF)
                {
                  v48 = bswap64(*(_QWORD *)v19);
                  v49 = 0x6173736572745F73;
                  if (v48 != 0x6173736572745F73)
                    goto LABEL_89;
                  v48 = bswap64(*((_QWORD *)v19 + 1));
                  v49 = 0x68617265645F6C6FLL;
                  if (v48 != 0x68617265645F6C6FLL)
                    goto LABEL_89;
                  v48 = bswap32((unsigned __int16)v19[8]) >> 16;
                  if ((_DWORD)v48 != 25451)
                  {
                    v49 = 25451;
LABEL_89:
                    v38 = 0;
                    v50 = v48 >= v49;
                    goto LABEL_132;
                  }
LABEL_98:
                  v33 = 0;
                  v38 = 0;
                  goto LABEL_135;
                }
                if (v20 == 11 && v21 <= 0xFF)
                {
                  v37 = 0x646961676E6F7365;
                  v36 = bswap64(*(_QWORD *)v19);
                  if (v36 != 0x646961676E6F7365
                    || (v37 = 0x676E6F73655F6966,
                        v36 = bswap64(*(_QWORD *)((char *)v19 + 3)),
                        v36 != 0x676E6F73655F6966))
                  {
                    v38 = 0;
                    goto LABEL_131;
                  }
                  goto LABEL_98;
                }
                v51 = v20 == 26;
                if (v20 == 26 && v21 <= 0xFF)
                {
                  v52 = 0;
                  v38 = 0;
                  if (v19[12] == 28271
                    && *((_QWORD *)v19 + 2) == 0x6974636E75665F6BLL
                    && *((_QWORD *)v19 + 1) == 0x636F6C7972745F65
                    && *(_QWORD *)v19 == 0x766973756C637865)
                  {
                    v21 = 257;
                  }
                  v51 = 1;
                }
                else
                {
                  if (v20 == 10 && v21 <= 0xFF)
                  {
                    v52 = 0;
                    v38 = 0;
                    v56 = v19[4] == 31074 && *(_QWORD *)v19 == 0x5F64656472617567;
                    goto LABEL_136;
                  }
                  v38 = 0;
                  v52 = v20 == 13;
                  if (v20 == 13 && v21 <= 0xFF)
                  {
                    v38 = 0;
                    if (*(_QWORD *)((char *)v19 + 5) == 0x64656E7275746572 && *(_QWORD *)v19 == 0x7465725F6B636F6CLL)
                      v21 = 257;
                    v52 = 1;
                  }
                }
LABEL_138:
                if (v23
                  && v21 <= 0xFF
                  && *(_QWORD *)(v19 + 3) == 0x646564756C637865
                  && *(_QWORD *)v19 == 0x78655F736B636F6CLL)
                {
                  v21 = 257;
                }
                v58 = !v52;
                if (v21 > 0xFF)
                  v58 = 1;
                if ((v58 & 1) == 0
                  && *(_QWORD *)((char *)v19 + 5) == 0x79625F6465647261
                  && *(_QWORD *)v19 == 0x64726175675F7470)
                {
                  v21 = 257;
                }
                if (v20 == 18 && v21 <= 0xFF)
                {
                  v60 = v19[8] == 31092 && *((_QWORD *)v19 + 1) == 0x696C696261706163;
                  if (v60 && *(_QWORD *)v19 == 0x5F657361656C6572)
                    v21 = 257;
                }
                v62 = v25 ^ 1;
                if (v21 > 0xFF)
                  v62 = 1;
                if ((v62 & 1) == 0)
                {
                  v63 = *((_BYTE *)v19 + 24) == 121 && *((_QWORD *)v19 + 2) == 0x74696C6962617061;
                  v64 = v63 && *((_QWORD *)v19 + 1) == 0x635F646572616873;
                  if (v64 && *(_QWORD *)v19 == 0x5F657361656C6572)
                    v21 = 257;
                }
                v66 = !v51;
                if (v21 > 0xFF)
                  v66 = 1;
                if ((v66 & 1) == 0)
                {
                  v67 = v19[12] == 31092 && *((_QWORD *)v19 + 2) == 0x696C696261706163;
                  v68 = v67 && *((_QWORD *)v19 + 1) == 0x5F636972656E6567;
                  if (v68 && *(_QWORD *)v19 == 0x5F657361656C6572)
                    v21 = 257;
                }
                v70 = v38 ^ 1;
                if (v21 > 0xFF)
                  v70 = 1;
                if ((v70 & 1) == 0
                  && *(_QWORD *)((char *)v19 + 7) == 0x6E6F6974636E7566
                  && *(_QWORD *)v19 == 0x665F6B636F6C6E75)
                {
                  v21 = 257;
                }
                if (v20 == 19 && v21 <= 0xFF)
                {
                  v72 = *(_QWORD *)((char *)v19 + 11) == 0x7974696C69626170
                     && *((_QWORD *)v19 + 1) == 0x6C6962617061635FLL;
                  if (v72 && *(_QWORD *)v19 == 0x7365726975716572)
                    v21 = 257;
                }
                v74 = !v35;
                if (v21 > 0xFF)
                  v74 = 1;
                if ((v74 & 1) == 0)
                {
                  v75 = *((_QWORD *)v19 + 2) == 0x6465726975716572 && *((_QWORD *)v19 + 1) == 0x5F736B636F6C5F65;
                  if (v75 && *(_QWORD *)v19 == 0x766973756C637865)
                    v21 = 257;
                }
                v77 = !v51;
                if (v21 > 0xFF)
                  v77 = 1;
                if ((v77 & 1) == 0)
                {
                  v78 = v19[12] == 31092 && *((_QWORD *)v19 + 2) == 0x696C696261706163;
                  v79 = v78 && *((_QWORD *)v19 + 1) == 0x5F6465726168735FLL;
                  if (v79 && *(_QWORD *)v19 == 0x7365726975716572)
                    v21 = 257;
                }
                v81 = !v34;
                if (v21 > 0xFF)
                  v81 = 1;
                if ((v81 & 1) == 0)
                {
                  v82 = *(_QWORD *)((char *)v19 + 13) == 0x6465726975716572
                     && *((_QWORD *)v19 + 1) == 0x7165725F736B636FLL;
                  if (v82 && *(_QWORD *)v19 == 0x6C5F646572616873)
                    v21 = 257;
                }
                v84 = v24 ^ 1;
                if (v21 > 0xFF)
                  v84 = 1;
                if ((v84 & 1) == 0)
                {
                  v85 = *(_QWORD *)((char *)v19 + 15) == 0x6E6F6974636E7566
                     && *((_QWORD *)v19 + 1) == 0x665F6B636F6C7972;
                  if (v85 && *(_QWORD *)v19 == 0x745F646572616873)
                    v21 = 257;
                }
                if (v20 == 22 && v21 <= 0xFF)
                {
                  v87 = *(_QWORD *)v19;
                  v88 = *((_QWORD *)v19 + 1);
                  v89 = *(_QWORD *)(v19 + 7) == 0x7974696C69626170;
                  v90 = 0x617061635F657269;
                  goto LABEL_265;
                }
                v91 = v21 >> 8;
                if (v20 == 29 && v21 <= 0xFF)
                {
                  v87 = *(_QWORD *)v19;
                  v88 = *((_QWORD *)v19 + 1);
                  v89 = *(_QWORD *)((char *)v19 + 21) == 0x7974696C69626170
                     && *((_QWORD *)v19 + 2) == 0x62617061635F6465;
                  v90 = 0x726168735F657269;
LABEL_265:
                  if (v89 && v88 == v90 && v87 == 0x757163615F797274)
                    v21 = 257;
                  v91 = v21 >> 8;
                }
                if (v91 && (_BYTE)v21 && !v9)
                {
                  v94 = operator new();
                  v95 = v10;
                  v96 = v94;
                  *(_QWORD *)(v94 + 16) = v94 + 32;
                  v97 = v94 + 16;
                  *(_QWORD *)v94 = &off_24FAA4950;
                  *(_QWORD *)(v94 + 8) = v11;
                  *(_QWORD *)(v94 + 24) = 0x400000000;
                  *(_QWORD *)(v94 + 128) = v17;
                  *(_QWORD *)(v94 + 136) = 0;
                  *(_DWORD *)(v94 + 144) = v18;
                  *(_QWORD *)(v94 + 152) = v94 + 168;
                  *(_QWORD *)(v94 + 160) = 0x200000000;
                  *(_DWORD *)(v94 + 184) = 0;
                  v98 = *(unsigned int *)(v95 + 8);
                  if (v98 >= *(unsigned int *)(v95 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v98 = *(unsigned int *)(a3 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)a3 + 8 * v98) = v96;
                  ++*(_DWORD *)(a3 + 8);
                  v99 = *(_QWORD *)(v11 + 2680);
                  if (v99 && !*(_BYTE *)(a3 + 32))
                  {
                    v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 2648)
                                                 + (((unint64_t)(v99 + *(_QWORD *)(v11 + 2672) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                     + 8 * ((v99 + *(_QWORD *)(v11 + 2672) - 1) & 0x1FF));
                    v101 = *(unsigned int *)(v100 + 24);
                    if (v101 >= *(unsigned int *)(v100 + 28))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v101 = *(unsigned int *)(v100 + 24);
                    }
                    *(_QWORD *)(*(_QWORD *)(v100 + 16) + 8 * v101) = v96;
                    ++*(_DWORD *)(v100 + 24);
                    v9 = a5;
                  }
                  v102 = sub_22E4EF088(v97, (unint64_t)v6, 1);
                  v103 = *(_QWORD *)(v96 + 16) + 24 * *(unsigned int *)(v96 + 24);
                  v104 = *(_OWORD *)v102;
                  *(_QWORD *)(v103 + 16) = *(_QWORD *)(v102 + 16);
                  *(_OWORD *)v103 = v104;
                  ++*(_DWORD *)(v96 + 24);
                  sub_22E80F720(v11);
                  sub_22E80F398((unsigned __int16 *)v11, 22, 22, v97, 1, 1);
                  v156[0] = 0;
                  v156[1] = 0;
                  v105 = *(_DWORD *)(v11 + 16);
                  v157 = 0;
                  LODWORD(v156[0]) = v105;
                  v106 = sub_22E4EF088(v97, (unint64_t)v156, 1);
                  v107 = *(_QWORD *)(v96 + 16) + 24 * *(unsigned int *)(v96 + 24);
                  v108 = *(_OWORD *)v106;
                  *(_QWORD *)(v107 + 16) = *(_QWORD *)(v106 + 16);
                  *(_OWORD *)v107 = v108;
                  ++*(_DWORD *)(v96 + 24);
                  v10 = a3;
                  goto LABEL_286;
                }
LABEL_285:
                sub_22E81199C(v11, v17, v18, (uint64_t)v5, (unsigned int *)&v158, 0, 0, 0, a4);
                goto LABEL_286;
              }
              v30 = 29817;
            }
          }
LABEL_57:
          v25 = 0;
          v24 = 0;
          v23 = 0;
          if (v29 < v30)
            v28 = -1;
          else
            v28 = 1;
          goto LABEL_60;
        }
        sub_22E8118E4((uint64_t)v5, v17, v18 | (v18 << 32), 0, v18, 0, 0, 0, 0);
LABEL_286:
        v16 = 65;
        if (*(_WORD *)(v11 + 32) != 65)
          goto LABEL_306;
      }
      v110 = *(_QWORD *)(v11 + 8);
      if (*(_QWORD *)(v110 + 752))
      {
        *(_BYTE *)(v110 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v110 + 48) + 6) = 1;
      }
      *(_WORD *)(v11 + 32) = 1;
      sub_22F313954(*(char ***)(v11 + 88), 0, 0, 0);
LABEL_306:
      if (sub_22E8847B4(v11, 0x16u, 15, "", 0))
      {
        LOWORD(v156[0]) = 22;
        sub_22E885940(v11, (unsigned __int16 *)v156, 1, 1);
      }
      v111 = *(_DWORD *)(v11 + 16);
      if (sub_22E8847B4(v11, 0x16u, 15, "", 0))
      {
        LOWORD(v156[0]) = 22;
        sub_22E885940(v11, (unsigned __int16 *)v156, 1, 1);
      }
      v158 = v111;
      v112 = *(_QWORD **)(*(_QWORD *)(v11 + 8) + 88);
      v113 = v155;
      if ((v155 & 0x80000000) != 0)
        v113 = sub_22F1E238C(*(_QWORD **)(*(_QWORD *)(v11 + 8) + 88), v155);
      result = sub_22E688274((uint64_t)v112, v113);
      if ((result & 1) == 0 && (v155 & 0x80000000) != 0 && v111 < 0)
      {
        v149 = *(_QWORD *)(v11 + 8);
        v114 = *(_QWORD *)(v149 + 88);
        v115 = *(_DWORD *)(v114 + 304);
        v116 = v115 + 1;
        if (v115 + 1 > 1)
        {
          if ((v115 & 0x80000000) != 0)
          {
            v118 = -2 - v115;
            if (((*(_QWORD *)(*(_QWORD *)(v114 + 224) + 8 * ((-2 - v115) >> 6)) >> (-2 - v115)) & 1) != 0)
              v117 = (_DWORD *)(*(_QWORD *)(v114 + 200) + 24 * v118);
            else
              v117 = (_DWORD *)sub_22F1E1134(*(_QWORD *)(v149 + 88), v118, 0);
          }
          else
          {
            v117 = (_DWORD *)(*(_QWORD *)(v114 + 184) + 24 * v115);
          }
        }
        else
        {
          v117 = *(_DWORD **)(v114 + 184);
        }
        v119 = v155 & 0x7FFFFFFF;
        if ((*v117 & 0x7FFFFFFFu) <= (v155 & 0x7FFFFFFF)
          && (v115 == -2
           || (v116 != *(_DWORD *)(v114 + 192)
             ? ((v116 & 0x80000000) != 0
              ? ((v124 = -3 - v115,
                  ((*(_QWORD *)(*(_QWORD *)(v114 + 224) + 8 * ((-3 - v115) >> 6)) >> (-3 - v115)) & 1) == 0)
               ? (v123 = (_DWORD *)sub_22F1E1134(v114, v124, 0))
               : (v123 = (_DWORD *)(*(_QWORD *)(v114 + 200) + 24 * v124)))
              : (v123 = (_DWORD *)(*(_QWORD *)(v114 + 184) + 24 * v116)),
                v122 = *v123 & 0x7FFFFFFF)
             : (v122 = *(_DWORD *)(v114 + 216)),
               v122 > v119)))
        {
          v121 = *(_DWORD *)(v114 + 304);
          v120 = v121;
        }
        else
        {
          v120 = sub_22F1E1EE8(v114, v119);
          v121 = *(_DWORD *)(v114 + 304);
        }
        v125 = v121;
        v126 = v121 + 1;
        if (v121 + 1 > 1)
        {
          if ((v121 & 0x80000000) != 0)
          {
            v128 = -2 - v121;
            if (((*(_QWORD *)(*(_QWORD *)(v114 + 224) + 8 * ((-2 - v121) >> 6)) >> (-2 - v121)) & 1) != 0)
              v127 = (_DWORD *)(*(_QWORD *)(v114 + 200) + 24 * v128);
            else
              v127 = (_DWORD *)sub_22F1E1134(v114, v128, 0);
          }
          else
          {
            v127 = (_DWORD *)(*(_QWORD *)(v114 + 184) + 24 * v121);
          }
        }
        else
        {
          v127 = *(_DWORD **)(v114 + 184);
        }
        if ((*v127 & 0x7FFFFFFFu) <= (v111 & 0x7FFFFFFFu)
          && (v125 == -2
           || (v126 != *(_DWORD *)(v114 + 192)
             ? ((v126 & 0x80000000) != 0
              ? ((v131 = -3 - v125,
                  ((*(_QWORD *)(*(_QWORD *)(v114 + 224) + 8 * ((-3 - v125) >> 6)) >> (-3 - v125)) & 1) == 0)
               ? (v130 = (_DWORD *)sub_22F1E1134(v114, v131, 0))
               : (v130 = (_DWORD *)(*(_QWORD *)(v114 + 200) + 24 * v131)))
              : (v130 = (_DWORD *)(*(_QWORD *)(v114 + 184) + 24 * v126)),
                v129 = *v130 & 0x7FFFFFFF)
             : (v129 = *(_DWORD *)(v114 + 216)),
               v129 > (v111 & 0x7FFFFFFFu))))
        {
          result = *(unsigned int *)(v114 + 304);
        }
        else
        {
          result = sub_22F1E1EE8(v114, v111 & 0x7FFFFFFF);
        }
        v7 = v151;
        v5 = a2;
        v9 = a5;
        if (v120 != (_DWORD)result)
        {
          v10 = a3;
          goto LABEL_375;
        }
        v132 = sub_22F141B98(v155, v114, *(_QWORD *)(v149 + 56), 0);
        result = sub_22F141AE0(v111, (_QWORD *)v114, *(_DWORD **)(v149 + 56), 0);
        if (!v132 || !(_DWORD)result)
        {
          v10 = a3;
          v7 = v151;
          goto LABEL_375;
        }
        v133 = sub_22F1E2828(v112, v155);
        v134 = v133;
        v147 = v147 & 0xFFFFFFFF00000000 | v135;
        v136 = (const void *)sub_22F142368(v133, v147, v112, *(_DWORD **)(*(_QWORD *)(v11 + 8) + 56), 0);
        result = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v11 + 8) + 544), v136, v137);
        v138 = a2[1];
        v139 = v138 & 0xFFFFFFFFFFFFFFF8;
        v7 = v151;
        while (2)
        {
          if (v138 < 8)
          {
LABEL_356:
            v140 = 0;
            goto LABEL_364;
          }
          if ((((v138 & 0xFFFFFFFFFFFFFFF8) != 0) & (v138 >> 2)) != 0)
          {
            v140 = *(unsigned int *)(v139 + 8);
            if (!(_DWORD)v140)
              goto LABEL_356;
LABEL_364:
            if (v13 >= v140)
            {
LABEL_370:
              v10 = a3;
              if (a3)
              {
                v142 = *(unsigned int *)(a3 + 8);
                v143 = v142 > v153;
                v144 = v142 - v153;
                if (v143)
                {
                  v145 = (uint64_t *)(*(_QWORD *)a3 + 8 * v153);
                  do
                  {
                    v146 = *v145++;
                    *(_QWORD *)(v146 + 136) = result;
                    --v144;
                  }
                  while (v144);
                }
              }
              break;
            }
            v141 = v138 & 0xFFFFFFFFFFFFFFF8;
            if ((v138 & 4) != 0)
              v141 = *(_QWORD *)(*(_QWORD *)v139 + 8 * v13);
          }
          else
          {
            if ((v138 & 4) != 0)
            {
              v140 = *(unsigned int *)(v139 + 8);
              goto LABEL_364;
            }
            v141 = v138 & 0xFFFFFFFFFFFFFFF8;
            if (v13)
              goto LABEL_370;
          }
          *(_QWORD *)(v141 + 32) = result;
          *(_DWORD *)(v141 + 40) = v134;
          ++v13;
          continue;
        }
      }
LABEL_375:
      if (*(_WORD *)(v11 + 32) != 186)
      {
        v8 = v158;
        goto LABEL_382;
      }
    }
    v13 = *(unsigned int *)(v14 + 8);
    if ((_DWORD)v13)
      goto LABEL_12;
LABEL_4:
    v13 = 0;
    goto LABEL_12;
  }
LABEL_382:
  *v5 = v7 | (v8 << 32);
  return result;
}

uint64_t sub_22E8118E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, const void *a6, unsigned int a7, unsigned int a8, int a9)
{
  uint64_t v17;

  v17 = sub_22E8D1AC4(*(_QWORD *)(a1 + 16), 8 * a7 + 80);
  sub_22E828690(v17, a2, a3, a4, a5, a6, a7, a8, a9);
  sub_22E828580(a1 + 24, v17);
  sub_22E828580(a1 + 8, v17);
  return v17;
}

void sub_22E81199C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int *a5, uint64_t a6, int a7, unsigned int a8, uint64_t a9)
{
  int v17;
  unsigned int *v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  int *v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD **v37;
  _QWORD *v38;
  unsigned int *v39;

  v17 = sub_22F1ACD3C(a2, a6, a8, 0);
  if (v17 <= 311)
  {
    if (v17 == 38)
    {
      sub_22E81444C(a1, a2, a3, a4, a5, a6, a7, a8);
      return;
    }
    if (v17 == 102)
    {
      sub_22E814FCC(a1, a2, a3, a4, a5, a6, a7, a8);
      return;
    }
  }
  else
  {
    switch(v17)
    {
      case 426:
        sub_22E81551C(a1, a2, a3, a4, a5, a6, a7, a8);
        return;
      case 445:
        sub_22E81586C(a1, a2, a3, a4, a5, a6, a7, a8);
        return;
      case 312:
        sub_22F2E1828(a1, a2, a3, a4, a5, a6, a7, a8);
        return;
    }
  }
  v18 = *(unsigned int **)(a2 + 16);
  if (sub_22E813C18(v18))
  {
    sub_22F2E133C(a1, a2, a3, a4, a6, a7, a8);
  }
  else
  {
    v39 = a5;
    v19 = sub_22E815BCC((_WORD *)v18 + 8, *v18);
    if (v20 == 9)
    {
      v21 = 0;
      v23 = *(_QWORD *)v19 != 0x695F656C62616E65 || *((_BYTE *)v19 + 8) != 102;
      LOBYTE(v24) = 1;
      if (a9 && !v23)
      {
        v25 = *(unsigned int *)(a9 + 120);
        if ((_DWORD)v25)
        {
          v26 = *(int **)(a9 + 112);
          v27 = *(unsigned int *)(a9 + 120);
          while (1)
          {
            v29 = *v26;
            v26 += 30;
            v28 = v29;
            if (v29 != 6)
              break;
            v21 = 0;
            if (!--v27)
              goto LABEL_27;
          }
          LOBYTE(v24) = 1;
          v21 = 0;
          if (((1 << v28) & 0xB7) == 0)
          {
            v30 = 0;
            v31 = *(int **)(a9 + 112);
            while (1)
            {
              v33 = *v31;
              v31 += 30;
              v32 = v33;
              if (v33 != 6)
                break;
              if (v25 == ++v30)
              {
                v34 = 0;
                goto LABEL_42;
              }
            }
            if (((1 << v32) & 0xB7) != 0)
              v34 = 0;
            else
              v34 = v30;
LABEL_42:
            v35 = *(_QWORD *)(a9 + 112) + 120 * v34;
            v24 = *(unsigned int *)(v35 + 48);
            v36 = *(_QWORD *)(v35 + 72);
            sub_22E885C30(a1, 776);
            if ((_DWORD)v24)
            {
              v37 = (_QWORD **)(v36 + 16);
              do
              {
                v38 = *v37;
                v37 += 4;
                sub_22EABF5B0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v38);
                --v24;
              }
              while (v24);
            }
            v21 = a1;
          }
        }
        else
        {
          v21 = 0;
        }
      }
    }
    else
    {
      v21 = 0;
      LOBYTE(v24) = 1;
    }
LABEL_27:
    sub_22E8120E0(a1, a2, a3, a4, v39, a6, a7, a8);
    if ((v24 & 1) == 0)
    {
      if (v21)
        sub_22E885CF4(v21);
    }
  }
}

uint64_t sub_22E811D4C(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;

  v2 = (unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(unsigned __int16 *)(a1 + 32);
  if ((v4 - 7) < 6 || ((v4 - 13) >= 6 ? (v5 = v4 == 1) : (v5 = 1), v5))
    v8 = 0;
  else
    v8 = *(_QWORD *)(a1 + 24);
  v6 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 2032, 16, 3);
  *(_DWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = v8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v2);
  return v6;
}

uint64_t sub_22E811DE8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  uint64_t (*v6)(_QWORD *);
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(unsigned __int16 *)(a1 + 24);
  if (*(unsigned __int16 *)(v1 + 32) != v2)
    return 1;
  v3 = (unsigned __int16 *)(v1 + 84);
  if (v2 != 23)
    v3 = (unsigned __int16 *)(v1 + 82);
  if (v2 == 21)
    v4 = (unsigned __int16 *)(v1 + 80);
  else
    v4 = v3;
  if (*v4 >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 8) + 56) + 184))
    return sub_22E88C4A0(a1);
  v6 = *(uint64_t (**)(_QWORD *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (_QWORD *)(v1 + (v7 >> 1));
  if ((v7 & 1) != 0)
    v6 = *(uint64_t (**)(_QWORD *))(*v8 + v6);
  v9 = v6(v8);
  result = 0;
  *(_DWORD *)(a1 + 48) = v9;
  return result;
}

uint64_t sub_22E811E8C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t (*v5)(_QWORD *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28[4];

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned __int16 *)(a1 + 26);
  v4 = *(unsigned __int16 *)(v2 + 32);
  if (v4 != v3)
  {
    if (v4 != 62)
      return sub_22E88C758(a1);
    v9 = *(_QWORD *)(v2 + 8);
    v10 = *(_QWORD *)(v9 + 2816);
    if (v10 >= *(unsigned int *)(v9 + 2784))
    {
      v11 = sub_22F162D2C(v9, 1u);
      v3 = *(unsigned __int16 *)(a1 + 26);
    }
    else
    {
      v11 = *(_QWORD *)(v9 + 2776) + 24 * v10;
    }
    if (*(unsigned __int16 *)(v11 + 16) != v3)
      return sub_22E88C758(a1);
    v12 = *(unsigned int **)(a1 + 16);
    v13 = v12[4];
    v12 += 4;
    v12[6] = v13;
    sub_22F18FB4C(*((_QWORD *)v12 - 1), v12);
    v14 = v12[6];
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96);
    *(_DWORD *)(v15 + 312) = v14;
    *(_DWORD *)(v15 + 316) = 1766;
    if (*(char *)(v15 + 311) < 0)
    {
      **(_BYTE **)(v15 + 288) = 0;
      *(_QWORD *)(v15 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v15 + 288) = 0;
      *(_BYTE *)(v15 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v28, v15);
    v16 = *(unsigned __int16 *)(a1 + 26);
    v17 = (unsigned __int8 *)v28[0];
    if (!v28[0])
    {
      v17 = (unsigned __int8 *)sub_22E3B8AAC(v28[1]);
      v28[0] = (uint64_t)v17;
    }
    v17[*v17 + 1] = 4;
    v18 = v28[0];
    v19 = *(unsigned __int8 *)v28[0];
    *(_BYTE *)v28[0] = v19 + 1;
    *(_QWORD *)(v18 + 8 * v19 + 16) = v16;
    v23 = 0;
    v22 = 0;
    v25 = 0;
    v26 = 0;
    __p = 0;
    v27 = 0;
    v20 = v14 | (v14 << 32);
    v21 = 1;
    sub_22E6D82D0(v28, &v20);
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
    sub_22E3BB0B8((uint64_t)v28);
    v2 = *(_QWORD *)(a1 + 16);
  }
  v5 = *(uint64_t (**)(_QWORD *))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (_QWORD *)(v2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *))(*v7 + v5);
  *(_DWORD *)(a1 + 52) = v5(v7);
  return 0;
}

uint64_t sub_22E812030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, const void *a7, uint64_t a8, unsigned int a9)
{
  uint64_t v17;

  v17 = sub_22E8D1AC4(*(_QWORD *)(a1 + 16), 8 * a8 + 96);
  sub_22F2E2D04(v17, a2, a3, a4, a5, a6, a7, a8, a9);
  sub_22E828580(a1 + 24, v17);
  return sub_22E828580(a1 + 8, v17);
}

uint64_t sub_22E8120E0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int *a5, uint64_t a6, int a7, unsigned int a8)
{
  unsigned int *v11;
  unint64_t v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t v15;
  _WORD *v16;
  _BOOL4 v17;
  uint64_t v18;
  _BOOL4 v19;
  char v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  BOOL v26;
  _WORD *v27;
  _WORD *v28;
  uint64_t v29;
  BOOL v30;
  _BOOL4 v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  char v50;
  _BOOL4 v51;
  _BOOL4 v52;
  _BOOL4 v53;
  BOOL v54;
  BOOL v56;
  _BOOL4 v57;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  char v69;
  char v70;
  char v73;
  char v78;
  char v80;
  char v82;
  char v83;
  BOOL v84;
  BOOL v85;
  char v87;
  char v89;
  char v92;
  char v93;
  BOOL v94;
  BOOL v96;
  char v99;
  BOOL v100;
  char v102;
  char v104;
  BOOL v106;
  char v108;
  char v109;
  BOOL v112;
  char v113;
  char v115;
  unint64_t v118;
  BOOL v119;
  uint64_t v120;
  char v122;
  char v123;
  char v126;
  char v128;
  BOOL v129;
  char v131;
  char v133;
  BOOL v134;
  char v136;
  char v138;
  char v139;
  BOOL v140;
  BOOL v142;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  unsigned int v150;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  int v156;
  unsigned int *v158;
  uint64_t v159;
  uint64_t v160;
  _BOOL4 v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  _QWORD *v175;
  uint64_t v176;
  BOOL v177;
  BOOL v178;
  _BOOL4 v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  BOOL v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  unsigned __int8 **v190;
  uint64_t v191;
  _WORD *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unsigned __int8 *v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v207;
  unsigned int *v211;
  _QWORD v212[4];
  int v213;
  void *v214;
  uint64_t v215;
  _BYTE v216[96];
  void *v217[2];
  _BYTE v218[80];
  char *v219;
  uint64_t v220;
  _QWORD v221[14];

  v221[12] = *MEMORY[0x24BDAC8D0];
  sub_22E80F720(a1);
  v11 = *(unsigned int **)(a2 + 16);
  v13 = v11 + 4;
  v12 = *v11;
  v14 = sub_22E815BCC((_WORD *)v11 + 8, v12);
  v16 = v14;
  v17 = v15 == 8;
  if (v15 != 8)
  {
    v21 = v15;
    v22 = sub_22E813C18(v11);
    v19 = v22;
    if (v21 == 12)
    {
      v24 = *(_QWORD *)v16 == 0x707369645F757063 && *((_DWORD *)v16 + 2) == 1751348321;
      v25 = 257;
      if (!v24)
      {
        if (*(_QWORD *)v16 ^ 0x636570735F757063 | *((unsigned int *)v16 + 2) ^ 0x63696669)
          v25 = 0;
        else
          v25 = 257;
      }
      if ((_BYTE)v25)
        v26 = v25 > 0xFF;
      else
        v26 = 0;
      v20 = v26;
      goto LABEL_21;
    }
LABEL_25:
    v17 = 0;
    v20 = 0;
    v219 = (char *)v221;
    v220 = 0xC00000000;
    v27 = (_WORD *)(a1 + 32);
    v211 = (unsigned int *)(a1 + 16);
    if (*(_WORD *)(a1 + 32) != 5)
      goto LABEL_489;
    goto LABEL_26;
  }
  v18 = *(_QWORD *)v14;
  v19 = sub_22E813C18(v11);
  if (v18 != 0x6B6361626C6C6163)
    goto LABEL_25;
  if (*(_WORD *)(a1 + 32) == 148)
    *(_WORD *)(a1 + 32) = 5;
  v20 = 1;
LABEL_21:
  v219 = (char *)v221;
  v220 = 0xC00000000;
  v27 = (_WORD *)(a1 + 32);
  v211 = (unsigned int *)(a1 + 16);
  if (*(_WORD *)(a1 + 32) != 5)
    goto LABEL_489;
  if ((v20 & 1) != 0)
  {
    v20 = 1;
    if (sub_22F1ACD3C(a2, a6, a8, 0) - 479 > 1)
    {
LABEL_488:
      *(_QWORD *)&v219[8 * v220] = sub_22E811D4C(a1) | 2;
      LODWORD(v220) = v220 + 1;
      goto LABEL_489;
    }
    goto LABEL_479;
  }
LABEL_26:
  v28 = sub_22E815BCC(v13, v12);
  if (v29 == 9)
  {
    v31 = v19;
    v36 = bswap64(*(_QWORD *)v28);
    v37 = v36 >= 0x696E746572727570;
    if (v36 == 0x696E746572727570)
    {
      v35 = *((unsigned __int8 *)v28 + 8) - 116;
      goto LABEL_64;
    }
    goto LABEL_61;
  }
  v30 = 0;
  if (v29 <= 20)
  {
    if (v29 != 6)
    {
      v31 = v19;
      v32 = 0;
      if (v29 != 12)
        goto LABEL_68;
      v38 = 0x617661696C616269;
      v39 = bswap64(*(_QWORD *)v28);
      if (v39 == 0x617661696C616269
        && (v38 = 1818850425, v39 = bswap32(*((_DWORD *)v28 + 2)), (_DWORD)v39 == 1818850425))
      {
        v40 = 0;
      }
      else if (v39 < v38)
      {
        v40 = -1;
      }
      else
      {
        v40 = 1;
      }
      v47 = 1;
LABEL_87:
      v52 = 0;
      v30 = 0;
      v51 = v40 != 0;
      if (v40)
        v32 = 0;
      else
        v32 = 257;
LABEL_90:
      v54 = v29 == 19;
      if (v29 == 19 && v51)
      {
        v53 = 0;
        if (*(_QWORD *)((char *)v28 + 11) == 0x7361696C615F6E69
          && *((_QWORD *)v28 + 1) == 0x6C615F6E69746C69
          && *(_QWORD *)v28 == 0x75625F676E616C63)
        {
          v32 = 257;
        }
        v54 = 1;
      }
      else
      {
        v53 = v29 == 5;
        if (v29 != 5)
          v51 = 0;
        if (v51)
        {
          if (*((_BYTE *)v28 + 4) == 100 && *(_DWORD *)v28 == 1918989671)
            v32 = 257;
          v53 = 1;
        }
      }
      goto LABEL_110;
    }
    v48 = 1651273571;
    v49 = bswap32(*(_DWORD *)v28);
    if (v49 == 1651273571 && (v49 = bswap32((unsigned __int16)v28[2]) >> 16, v48 = 27507, v49 == 27507))
    {
      v31 = v19;
      v43 = 0;
      v50 = 0;
    }
    else
    {
      v31 = v19;
      v50 = 0;
      if (v49 < v48)
        v43 = -1;
      else
        v43 = 1;
    }
    v44 = 1;
LABEL_80:
    v56 = 0;
    v53 = 0;
    LOBYTE(v52) = 0;
    v47 = 0;
    v30 = 0;
    v54 = 0;
    v24 = v43 == 0;
    v57 = v43 != 0;
    if (v24)
      v32 = 257;
    else
      v32 = 0;
    goto LABEL_126;
  }
  if (v29 == 21)
  {
    v41 = 0x706F696E7465725FLL;
    v42 = bswap64(*(_QWORD *)v28);
    if (v42 == 0x706F696E7465725FLL
      && (v41 = 0x776974685F747970, v42 = bswap64(*((_QWORD *)v28 + 1)), v42 == 0x776974685F747970)
      && (v41 = 0x747970655F746167, v42 = bswap64(*(_QWORD *)((char *)v28 + 13)), v42 == 0x747970655F746167))
    {
      v31 = v19;
      v43 = 0;
      v44 = 0;
    }
    else
    {
      v31 = v19;
      v44 = 0;
      if (v42 < v41)
        v43 = -1;
      else
        v43 = 1;
    }
    v50 = 1;
    goto LABEL_80;
  }
  if (v29 == 25)
  {
    v45 = 0x5F5F636C616E675FLL;
    v46 = bswap64(*(_QWORD *)v28);
    if (v46 == 0x5F5F636C616E675FLL
      && (v45 = 0x61726D5F6275696CLL, v46 = bswap64(*((_QWORD *)v28 + 1)), v46 == 0x61726D5F6275696CLL)
      && (v45 = 0x74696E5F616C6961, v46 = bswap64(*((_QWORD *)v28 + 2)), v46 == 0x74696E5F616C6961))
    {
      v31 = v19;
      v47 = 0;
      v40 = *((unsigned __int8 *)v28 + 24) - 115;
    }
    else
    {
      v31 = v19;
      v47 = 0;
      if (v46 < v45)
        v40 = -1;
      else
        v40 = 1;
    }
    goto LABEL_87;
  }
  v31 = v19;
  v32 = 0;
  if (v29 != 22)
    goto LABEL_68;
  v33 = 0x617267756D656E74;
  v34 = bswap64(*(_QWORD *)v28);
  if (v34 == 0x617267756D656E74)
  {
    v33 = 0x5F776974685F7479;
    v34 = bswap64(*((_QWORD *)v28 + 1));
    if (v34 == 0x5F776974685F7479)
    {
      v33 = 0x747970655F746167;
      v34 = bswap64(*(_QWORD *)(v28 + 7));
      if (v34 == 0x747970655F746167)
      {
        v35 = 0;
        goto LABEL_64;
      }
    }
  }
  v37 = v34 >= v33;
LABEL_61:
  if (v37)
    v35 = 1;
  else
    v35 = -1;
LABEL_64:
  if (v35)
    v32 = 0;
  else
    v32 = 257;
  v30 = v29 != 9;
LABEL_68:
  v47 = 0;
  v51 = v32 < 0x100;
  v52 = v29 == 13;
  if (v29 != 13 || v32 > 0xFF)
    goto LABEL_90;
  v53 = 0;
  v47 = 0;
  v54 = 0;
  if (*(_QWORD *)((char *)v28 + 5) == 0x7361696C615F6E69 && *(_QWORD *)v28 == 0x5F6E69746C697562)
    v32 = 257;
  v52 = 1;
LABEL_110:
  if (v52
    && v32 <= 0xFF
    && *(_QWORD *)((char *)v28 + 5) == 0x6E6568775F656C62
    && *(_QWORD *)v28 == 0x656C62616C6C6163)
  {
    v32 = 257;
  }
  v50 = 0;
  v57 = v32 < 0x100;
  v56 = v29 == 10;
  if (v29 == 10 && v32 <= 0xFF)
  {
    v62 = 0;
    v63 = 0;
    v50 = 0;
    v64 = 0;
    v65 = 0;
    if (v28[4] == 25964 && *(_QWORD *)v28 == 0x62616D75736E6F63)
      v32 = 257;
    v56 = 1;
    goto LABEL_187;
  }
  v44 = 0;
LABEL_126:
  v63 = v29 == 18;
  if (v29 == 18 && v57)
  {
    if (v28[8] == 31092 && *((_QWORD *)v28 + 1) == 0x696C696269736E65 && *(_QWORD *)v28 == 0x7478655F6D756E65)
      v32 = 257;
    v63 = 1;
  }
  v69 = v44 ^ 1;
  if (v32 > 0xFF)
    v70 = 1;
  else
    v70 = v44 ^ 1;
  if ((v70 & 1) == 0 && v28[2] == 29793 && *(_DWORD *)v28 == 1836216166)
    v32 = 257;
  if (v32 > 0xFF)
    v69 = 1;
  if ((v69 & 1) == 0 && v28[2] == 29285 && *(_DWORD *)v28 == 1684105331)
    v32 = 257;
  v62 = v29 == 4;
  if (v29 == 4 && v32 <= 0xFF && *(_DWORD *)v28 == 1886351212)
    v32 = 257;
  v73 = v44 ^ 1;
  if (v32 > 0xFF)
    v73 = 1;
  if ((v73 & 1) == 0 && v28[2] == 27756 && *(_DWORD *)v28 == 1869770357)
    v32 = 257;
  if (v29 == 8 && v32 <= 0xFF)
  {
    v64 = 0;
    v65 = 0;
    if (*(_QWORD *)v28 == 0x6C6C6F726E756F6ELL)
      v32 = 257;
  }
  else
  {
    v65 = v29 == 14;
    if (v29 == 14 && v32 <= 0xFF)
    {
      v64 = 0;
      if (*(_QWORD *)(v28 + 3) == 0x6D616A5F646E615FLL && *(_QWORD *)v28 == 0x615F6C6C6F726E75)
        v32 = 257;
      v65 = 1;
    }
    else
    {
      v64 = v29 == 16;
      if (v29 == 16 && v32 <= 0xFF)
      {
        if (*((_QWORD *)v28 + 1) == 0x6D616A5F646E615FLL && *(_QWORD *)v28 == 0x6C6C6F726E756F6ELL)
          v32 = 257;
        v64 = 1;
      }
    }
  }
LABEL_187:
  if (v53 && v32 <= 0xFF && *((_BYTE *)v28 + 4) == 104 && *(_DWORD *)v28 == 1953523044)
    v32 = 257;
  v78 = v47 ^ 1;
  if (v32 > 0xFF)
    v78 = 1;
  if ((v78 & 1) == 0 && *((_DWORD *)v28 + 2) == 1852795252 && *(_QWORD *)v28 == 0x6365737265746E69)
    v32 = 257;
  v80 = !v53;
  if (v32 > 0xFF)
    v80 = 1;
  if ((v80 & 1) == 0 && *((_BYTE *)v28 + 4) == 104 && *(_DWORD *)v28 == 1668571504)
    v32 = 257;
  v82 = !v62;
  if (v32 > 0xFF)
    v82 = 1;
  if ((v82 & 1) != 0)
  {
    if (v29 == 9 && v32 <= 0xFF)
    {
      v84 = 0;
      v85 = *((_BYTE *)v28 + 8) == 116 && *(_QWORD *)v28 == 0x7075727265746E69;
LABEL_224:
      if (v85)
        v32 = 257;
      goto LABEL_235;
    }
  }
  else if (*(_DWORD *)v28 == 1919251317)
  {
    v32 = 257;
  }
  v83 = !v62;
  if (v32 > 0xFF)
    v83 = 1;
  if ((v83 & 1) == 0)
  {
    v84 = 0;
    v85 = *(_DWORD *)v28 == 1701080941;
    goto LABEL_224;
  }
  v84 = v29 == 15;
  if (v29 == 15 && v32 <= 0xFF)
  {
    if (*(_QWORD *)((char *)v28 + 7) == 0x6E69616D6F645F72 && *(_QWORD *)v28 == 0x726F7272655F736ELL)
      v32 = 257;
    v84 = 1;
  }
LABEL_235:
  v87 = v47 ^ 1;
  if (v32 > 0xFF)
    v87 = 1;
  if ((v87 & 1) == 0 && *((_DWORD *)v28 + 2) == 1684892019 && *(_QWORD *)v28 == 0x206572616C636564)
    v32 = 257;
  v89 = !v65;
  if (v32 > 0xFF)
    v89 = 1;
  if ((v89 & 1) == 0 && *(_QWORD *)(v28 + 3) == 0x7465677261742065 && *(_QWORD *)v28 == 0x206572616C636564)
    v32 = 257;
  if (v29 == 11
    && v32 <= 0xFF
    && *(_QWORD *)((char *)v28 + 3) == 0x6567646972625F63
    && *(_QWORD *)v28 == 0x6972625F636A626FLL)
  {
    v32 = 257;
  }
  v92 = !v54;
  v93 = v32 > 0xFF || !v54;
  if ((v93 & 1) == 0)
  {
    v94 = *(_QWORD *)((char *)v28 + 11) == 0x656C626174756D5FLL && *((_QWORD *)v28 + 1) == 0x6174756D5F656764;
    if (v94 && *(_QWORD *)v28 == 0x6972625F636A626FLL)
      v32 = 257;
  }
  if (v32 > 0xFF)
    v92 = 1;
  if ((v92 & 1) == 0)
  {
    v96 = *(_QWORD *)((char *)v28 + 11) == 0x646574616C65725FLL && *((_QWORD *)v28 + 1) == 0x616C65725F656764;
    if (v96 && *(_QWORD *)v28 == 0x6972625F636A626FLL)
      v32 = 257;
  }
  if (v29 == 7 && v32 <= 0xFF && *(_DWORD *)((char *)v28 + 3) == 1667719011 && *(_DWORD *)v28 == 1667916399)
    v32 = 257;
  v99 = !v63;
  if (v32 > 0xFF)
    v99 = 1;
  if ((v99 & 1) == 0)
  {
    v100 = v28[8] == 31084 && *((_QWORD *)v28 + 1) == 0x696D61665F646F68;
    if (v100 && *(_QWORD *)v28 == 0x74656D5F636A626FLL)
      v32 = 257;
  }
  v102 = !v65;
  if (v32 > 0xFF)
    v102 = 1;
  if ((v102 & 1) == 0 && *(_QWORD *)(v28 + 3) == 0x7069687372656E77 && *(_QWORD *)v28 == 0x6E776F5F636A626FLL)
    v32 = 257;
  v104 = !v84;
  if (v32 > 0xFF)
    v104 = 1;
  if ((v104 & 1) == 0 && *(_QWORD *)((char *)v28 + 7) == 0x73646C6F685F7069 && *(_QWORD *)v28 == 0x69687372656E776FLL)
    v32 = 257;
  if (v29 == 17 && v32 <= 0xFF)
  {
    v106 = *((_BYTE *)v28 + 16) == 115 && *((_QWORD *)v28 + 1) == 0x6E72757465725F70;
    if (v106 && *(_QWORD *)v28 == 0x69687372656E776FLL)
      v32 = 257;
  }
  v108 = !v84;
  v109 = v32 > 0xFF || !v84;
  if ((v109 & 1) == 0 && *(_QWORD *)((char *)v28 + 7) == 0x73656B61745F7069 && *(_QWORD *)v28 == 0x69687372656E776FLL)
    v32 = 257;
  if (v32 > 0xFF)
    v108 = 1;
  if ((v108 & 1) == 0 && *(_QWORD *)((char *)v28 + 7) == 0x6574617473657079 && *(_QWORD *)v28 == 0x79745F6D61726170)
    v32 = 257;
  if (v29 == 3 && v32 <= 0xFF)
  {
    v112 = *((_BYTE *)v28 + 2) == 115 && *v28 == 25456;
  }
  else
  {
    if (v29 != 9 || v32 > 0xFF)
      goto LABEL_354;
    v112 = *((_BYTE *)v28 + 8) == 116 && *(_QWORD *)v28 == 0x7075727265746E69;
  }
  if (v112)
    v32 = 257;
LABEL_354:
  v113 = !v64;
  if (v32 > 0xFF)
    v113 = 1;
  if ((v113 & 1) == 0 && *((_QWORD *)v28 + 1) == 0x6574617473657079 && *(_QWORD *)v28 == 0x745F6E7275746572)
    v32 = 257;
  v115 = !v52;
  if (v32 > 0xFF)
    v115 = 1;
  if ((v115 & 1) == 0 && *(_QWORD *)((char *)v28 + 5) == 0x6574617473657079 && *(_QWORD *)v28 == 0x657079745F746573)
    v32 = 257;
  if (v29 == 11 && v32 <= 0xFF)
  {
    if (*(_QWORD *)((char *)v28 + 3) == 0x636E7973615F7466 && *(_QWORD *)v28 == 0x73615F7466697773)
      v32 = 257;
  }
  else if (v29 == 17 && v32 <= 0xFF)
  {
    v118 = *(_QWORD *)v28;
    v119 = *((_BYTE *)v28 + 16) == 114 && *((_QWORD *)v28 + 1) == 0x6F7272655F636E79;
    v120 = 0x73615F7466697773;
    goto LABEL_386;
  }
  if (v29 != 11 || v32 > 0xFF)
    goto LABEL_391;
  v118 = *(_QWORD *)v28;
  v119 = *(_QWORD *)((char *)v28 + 3) == 0x726F7272655F7466;
  v120 = 0x72655F7466697773;
LABEL_386:
  if (v119 && v118 == v120)
    v32 = 257;
LABEL_391:
  v122 = !v52;
  if (v32 > 0xFF)
    v123 = 1;
  else
    v123 = v122;
  if ((v123 & 1) == 0 && *(_QWORD *)((char *)v28 + 5) == 0x6570797477656E5FLL && *(_QWORD *)v28 == 0x656E5F7466697773)
    v32 = 257;
  if (v32 > 0xFF)
    v122 = 1;
  if ((v122 & 1) == 0 && *(_QWORD *)((char *)v28 + 5) == 0x726570706172775FLL && *(_QWORD *)v28 == 0x72775F7466697773)
    v32 = 257;
  v126 = !v65;
  if (v32 > 0xFF)
    v126 = 1;
  if ((v126 & 1) == 0 && *(_QWORD *)(v28 + 3) == 0x6574617473657079 && *(_QWORD *)v28 == 0x7079745F74736574)
    v32 = 257;
  v128 = v50 ^ 1;
  if (v32 > 0xFF)
    v128 = 1;
  if ((v128 & 1) == 0)
  {
    v129 = *(_QWORD *)((char *)v28 + 13) == 0x6570797461746164 && *((_QWORD *)v28 + 1) == 0x7461645F726F665FLL;
    if (v129 && *(_QWORD *)v28 == 0x6761745F65707974)
      v32 = 257;
  }
  v131 = !v84;
  if (v32 > 0xFF)
    v131 = 1;
  if ((v131 & 1) == 0 && *(_QWORD *)((char *)v28 + 7) == 0x7974696C69626973 && *(_QWORD *)v28 == 0x7369765F65707974)
    v32 = 257;
  v133 = !v30;
  if (v32 > 0xFF)
    v133 = 1;
  if ((v133 & 1) == 0)
  {
    v134 = *(_QWORD *)(v28 + 7) == 0x7265746E696F705FLL && *((_QWORD *)v28 + 1) == 0x705F656C62617476;
    if (v134 && *(_QWORD *)v28 == 0x5F68747561727470)
      v32 = 257;
  }
  v136 = !v56;
  if (v32 > 0xFF)
    v136 = 1;
  if ((v136 & 1) == 0 && v28[4] == 31092 && *(_QWORD *)v28 == 0x696C696269736976)
    v32 = 257;
  v138 = !v54;
  v139 = v32 > 0xFF || !v54;
  if ((v139 & 1) == 0)
  {
    v140 = *(_QWORD *)((char *)v28 + 11) == 0x736369746E616D65 && *((_QWORD *)v28 + 1) == 0x746E616D65735F65;
    if (v140 && *(_QWORD *)v28 == 0x676173755F756E78)
      v32 = 257;
  }
  if (v32 > 0xFF)
    v138 = 1;
  if ((v138 & 1) == 0)
  {
    v142 = *(_QWORD *)((char *)v28 + 11) == 0x736765725F646573 && *((_QWORD *)v28 + 1) == 0x725F646573755F6CLL;
    if (v142 && *(_QWORD *)v28 == 0x6C61635F6F72657ALL)
      v32 = 257;
  }
  if (sub_22F1ACD3C(a2, a6, a8, 0) - 479 < 2)
  {
    v20 = 0;
    v19 = v31;
LABEL_479:
    v144 = *(_QWORD *)(a1 + 8);
    v145 = *(_QWORD *)(v144 + 2816);
    if (v145 >= *(unsigned int *)(v144 + 2784))
      v146 = sub_22F162D2C(v144, 1u);
    else
      v146 = *(_QWORD *)(v144 + 2776) + 24 * v145;
    v147 = *(unsigned __int16 *)(v146 + 16);
    if (v147 == 22 || v147 == 65)
      goto LABEL_488;
    goto LABEL_489;
  }
  v20 = 0;
  if (v32 >> 8)
  {
    v24 = v32 == 0;
    v19 = v31;
    if (!v24)
      goto LABEL_488;
  }
  else
  {
    v19 = v31;
  }
LABEL_489:
  v148 = (unsigned __int16)*v27;
  v207 = a8;
  if ((_DWORD)v220)
  {
    if (v148 == 65)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v211);
      goto LABEL_508;
    }
LABEL_493:
    v149 = 0;
    goto LABEL_494;
  }
  if (v148 == 22)
    goto LABEL_493;
LABEL_508:
  if (!v19)
  {
    if ((v20 & 1) == 0)
    {
      v174 = *(unsigned int **)(a2 + 16);
      v175 = sub_22E815BCC((_WORD *)v174 + 8, *v174);
      if (v176 != 22
        || (*v175 == 0x5F68747561727470 ? (v177 = v175[1] == 0x705F656C62617476) : (v177 = 0),
            v177 ? (v178 = *(_QWORD *)((char *)v175 + 14) == 0x7265746E696F705FLL) : (v178 = 0),
            !v178))
      {
        v179 = sub_22E813D7C(v174);
        v180 = *(_QWORD *)(a1 + 88);
        if (v179)
          v181 = 0;
        else
          v181 = 4;
        LODWORD(v212[0]) = v181;
        v214 = 0;
        v213 = 3;
        v217[0] = (void *)*(unsigned int *)(v180 + 1704);
        sub_22EB4DDB8(v180 + 3688, (int *)v212, (int *)v217, (__int16 *)(v180 + 1693), (uint64_t *)&v214, &v213);
        v182 = *(unsigned int *)(v180 + 3696);
        v183 = v182 - 2;
        v184 = *(_QWORD *)(v180 + 3688);
        v185 = *(_DWORD *)(v184 + 576 * (v182 - 2));
        if (v185 == 5)
        {
          *(_BYTE *)(v184 + 576 * v182 - 4) = *(_BYTE *)(v184 + 576 * v183 + 572);
          v186 = 1;
        }
        else if (v185 == 2)
        {
          *(_BYTE *)(v184 + 576 * v182 - 4) = 1;
          v186 = *(_BYTE *)(v184 + 576 * v183 + 573) != 0;
        }
        else
        {
          v186 = 0;
          *(_BYTE *)(v184 + 576 * v182 - 4) = 0;
        }
        v187 = v184 + 576 * v182;
        *(_BYTE *)(v187 - 3) = v186;
        *(_WORD *)(v180 + 1693) = 0;
        if (*(_DWORD *)(v180 + 1848))
        {
          llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v180 + 1776), (llvm::SmallPtrSetImplBase *)(v187 - 560));
          sub_22EAEAE08(v180 + 1840, (uint64_t *)(v187 - 496));
        }
        v217[0] = v218;
        v217[1] = (void *)0x1400000000;
        v214 = v216;
        v215 = 0xC00000000;
        if ((sub_22E83EFC4(a1, (uint64_t)&v214, (uint64_t)v217, 0, 0, 1, 1) & 1) != 0)
          goto LABEL_577;
        v188 = v215;
        v189 = (uint64_t *)v214;
        if ((_DWORD)v215)
        {
          v190 = (unsigned __int8 **)v214;
          v191 = v215;
          while (1)
          {
            if (**v190 == 213)
            {
              v192 = sub_22E815BCC((_WORD *)(*(_QWORD *)(a2 + 16) + 16), **(unsigned int **)(a2 + 16));
              if (v193 != 8 || *(_QWORD *)v192 != 0x657461746F6E6E61)
                break;
            }
            ++v190;
            if (!--v191)
              goto LABEL_562;
          }
          v200 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v200 + 312) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(v200 + 316) = 1442;
          if (*(char *)(v200 + 311) < 0)
          {
            **(_BYTE **)(v200 + 288) = 0;
            *(_QWORD *)(v200 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v200 + 288) = 0;
            *(_BYTE *)(v200 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v212, v200);
          v201 = (unsigned __int8 *)v212[0];
          if (!v212[0])
          {
            v201 = (unsigned __int8 *)sub_22E3B8AAC(v212[1]);
            v212[0] = v201;
          }
          v201[*v201 + 1] = 5;
          v202 = v212[0];
          v203 = *(unsigned __int8 *)v212[0];
          *(_BYTE *)v212[0] = v203 + 1;
          *(_QWORD *)(v202 + 8 * v203 + 16) = a2;
          sub_22E3BB0B8((uint64_t)v212);
LABEL_577:
          LOWORD(v212[0]) = 22;
          sub_22E885940(a1, (unsigned __int16 *)v212, 1, 1);
          if (v214 != v216)
            free(v214);
          if (v217[0] != v218)
            free(v217[0]);
          v199 = v180;
LABEL_582:
          sub_22EB48E64(v199);
          goto LABEL_583;
        }
LABEL_562:
        v194 = v219;
        v195 = v220;
        if ((unint64_t)v220 + v188 > HIDWORD(v220))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v195 = v220;
          v194 = v219;
          if ((_DWORD)v188)
          {
LABEL_564:
            v196 = 8 * v188;
            v197 = (unint64_t *)&v194[8 * v195];
            do
            {
              v198 = *v189++;
              *v197++ = v198 & 0xFFFFFFFFFFFFFFFDLL;
              v196 -= 8;
            }
            while (v196);
          }
        }
        else if ((_DWORD)v188)
        {
          goto LABEL_564;
        }
        LODWORD(v220) = v195 + v188;
        v19 = 0;
        if (v214 != v216)
          free(v214);
        if (v217[0] != v218)
          free(v217[0]);
        sub_22EB48E64(v180);
        goto LABEL_493;
      }
    }
    while (1)
    {
      v156 = (unsigned __int16)*v27;
      if (v156 == 148 && v17)
        break;
      v158 = *(unsigned int **)(a2 + 16);
      if (v156 == 5)
        goto LABEL_518;
      v161 = sub_22E813D7C(v158);
      v162 = *(_QWORD *)(a1 + 88);
      if (v161)
        v163 = 0;
      else
        v163 = 4;
      LODWORD(v212[0]) = v163;
      v214 = 0;
      v213 = 3;
      v217[0] = (void *)*(unsigned int *)(v162 + 1704);
      sub_22EB4DDB8(v162 + 3688, (int *)v212, (int *)v217, (__int16 *)(v162 + 1693), (uint64_t *)&v214, &v213);
      v164 = *(unsigned int *)(v162 + 3696);
      v165 = v164 - 2;
      v166 = *(_QWORD *)(v162 + 3688);
      v167 = *(_DWORD *)(v166 + 576 * (v164 - 2));
      if (v167 == 5)
      {
        *(_BYTE *)(v166 + 576 * v164 - 4) = *(_BYTE *)(v166 + 576 * v165 + 572);
        v168 = 1;
      }
      else if (v167 == 2)
      {
        *(_BYTE *)(v166 + 576 * v164 - 4) = 1;
        v168 = *(_BYTE *)(v166 + 576 * v165 + 573) != 0;
      }
      else
      {
        v168 = 0;
        *(_BYTE *)(v166 + 576 * v164 - 4) = 0;
      }
      v169 = v166 + 576 * v164;
      *(_BYTE *)(v169 - 3) = v168;
      *(_WORD *)(v162 + 1693) = 0;
      if (*(_DWORD *)(v162 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v162 + 1776), (llvm::SmallPtrSetImplBase *)(v169 - 560));
        sub_22EAEAE08(v162 + 1840, (uint64_t *)(v169 - 496));
      }
      v170 = *(_QWORD *)(a1 + 88);
      v171 = sub_22E83766C(a1, 0);
      v172 = v171;
      if ((v171 & 1) == 0)
        v172 = (unint64_t)sub_22EBBCB14(v170, (_DWORD *)(v171 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v214);
      if ((v172 & 1) != 0)
      {
        LOWORD(v214) = 22;
        sub_22E885940(a1, (unsigned __int16 *)&v214, 1, 1);
        v199 = v162;
        goto LABEL_582;
      }
      v173 = v220;
      if (v220 >= (unint64_t)HIDWORD(v220))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v173 = v220;
      }
      *(_QWORD *)&v219[8 * v173] = v172 & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v220) = v220 + 1;
      sub_22EB48E64(v162);
LABEL_535:
      if (*v27 != 65)
      {
        v149 = 0;
        v19 = 0;
        goto LABEL_494;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v211);
    }
    *v27 = 5;
    v158 = *(unsigned int **)(a2 + 16);
LABEL_518:
    sub_22E815BCC((_WORD *)v158 + 8, *v158);
    v159 = sub_22E811D4C(a1) | 2;
    v160 = v220;
    if (v220 >= (unint64_t)HIDWORD(v220))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v160 = v220;
    }
    *(_QWORD *)&v219[8 * v160] = v159;
    LODWORD(v220) = v220 + 1;
    goto LABEL_535;
  }
  v154 = sub_22E80FC30(a1, 0, 5, 3, 0, 0, v23);
  if (v155)
  {
    LOWORD(v214) = 22;
    sub_22E885940(a1, (unsigned __int16 *)&v214, 1, 1);
LABEL_583:
    v153 = 0;
    goto LABEL_584;
  }
  v149 = v154;
LABEL_494:
  v150 = *(_DWORD *)(a1 + 16);
  if ((sub_22E8847B4(a1, 0x16u, 15, "", 0) & 1) == 0)
  {
    if (v149 > 0xF && v19)
    {
      sub_22F2E1498(a4, a2, a3 | ((unint64_t)v150 << 32), a6, a7, v149, v207);
    }
    else
    {
      if (a7)
        v152 = a7;
      else
        v152 = a3;
      sub_22E8118E4(a4, a2, v152 | ((unint64_t)v150 << 32), a6, a7, v219, v220, v207, 0);
    }
  }
  if (a5)
    *a5 = v150;
  if (v149 <= 0xF)
    v153 = v220;
  else
    v153 = (v220 + 1);
LABEL_584:
  if (v219 != (char *)v221)
    free(v219);
  return v153;
}

BOOL sub_22E813C18(unsigned int *a1)
{
  _WORD *v1;
  _BOOL8 result;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = sub_22E815BCC((_WORD *)a1 + 8, *a1);
  result = 0;
  switch(v3)
  {
    case 5:
      v4 = *(_DWORD *)v1;
      v5 = *((unsigned __int8 *)v1 + 4);
      v6 = v4 == 1701738319;
      v7 = 114;
      goto LABEL_22;
    case 7:
      v8 = *(_DWORD *)v1;
      v5 = *(_DWORD *)((char *)v1 + 3);
      v6 = v8 == 1852403536;
      v7 = 1919251566;
      goto LABEL_22;
    case 13:
      v9 = *(_QWORD *)v1;
      v10 = *(_QWORD *)((char *)v1 + 5);
      return v9 == 0x657079745F636576 && v10 == 0x746E69685F657079;
    case 14:
      v12 = *(_QWORD *)v1;
      v13 = *(_QWORD *)(v1 + 3);
      v14 = v12 == 0x6572726566657270;
      v15 = 0x656D616E5F646572;
      goto LABEL_12;
    case 15:
      v16 = *(_QWORD *)v1;
      v13 = *(_QWORD *)((char *)v1 + 7);
      v14 = v16 == 0x6F6C626567616D69;
      v15 = 0x617461645F6B636FLL;
LABEL_12:
      if (!v14 || v13 != v15)
        goto LABEL_26;
      goto LABEL_17;
    case 18:
      v18 = *(_QWORD *)v1;
      v19 = *((_QWORD *)v1 + 1);
      v5 = (unsigned __int16)v1[8];
      v6 = v18 == 0x74656C74756F6269 && v19 == 0x697463656C6C6F63;
      v7 = 28271;
LABEL_22:
      if (v6 && v5 == v7)
LABEL_17:
        result = 1;
      else
LABEL_26:
        result = 0;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_22E813D7C(unsigned int *a1)
{
  _WORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  BOOL v20;
  BOOL v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  BOOL v37;
  BOOL v46;
  BOOL v47;
  BOOL v52;
  BOOL v53;
  BOOL v55;
  BOOL v56;

  v1 = sub_22E815BCC((_WORD *)a1 + 8, *a1);
  v2 = 0;
  switch(v3)
  {
    case 10:
      return *(_QWORD *)v1 == 0x5F64656472617567 && v1[4] == 31074;
    case 13:
      if (*(_QWORD *)v1 == 0x7465725F6B636F6CLL && *(_QWORD *)((char *)v1 + 5) == 0x64656E7275746572)
        return 1;
      v6 = *(_QWORD *)((char *)v1 + 5);
      v7 = *(_QWORD *)v1 == 0x64726175675F7470;
      v8 = 0x79625F6465647261;
      return v7 && v6 == v8;
    case 14:
      if (*(_QWORD *)v1 == 0x6465726975716361 && *(_QWORD *)(v1 + 3) == 0x72657466615F6465)
        return 1;
      v6 = *(_QWORD *)(v1 + 3);
      v7 = *(_QWORD *)v1 == 0x78655F736B636F6CLL;
      v8 = 0x646564756C637865;
      return v7 && v6 == v8;
    case 15:
      if (*(_QWORD *)v1 == 0x6465726975716361 && *(_QWORD *)((char *)v1 + 7) == 0x65726F6665625F64)
        return 1;
      v12 = *(_QWORD *)((char *)v1 + 7);
      v13 = *(_QWORD *)v1 == 0x665F6B636F6C6E75;
      v14 = 0x6E6F6974636E7566;
      return v13 && v12 == v14;
    case 17:
      v15 = *((unsigned __int8 *)v1 + 16);
      v16 = *(_QWORD *)v1 == 0x635F747265737361 && *((_QWORD *)v1 + 1) == 0x74696C6962617061;
      v17 = 121;
      return v16 && v15 == v17;
    case 18:
      if (*(_QWORD *)v1 != 0x5F65726975716361 || *((_QWORD *)v1 + 1) != 0x696C696261706163 || v1[8] != 31092)
      {
        v20 = *(_QWORD *)v1 == 0x735F747265737361 && *((_QWORD *)v1 + 1) == 0x6F6C5F6465726168;
        if (!v20 || v1[8] != 27491)
        {
          v22 = *(_QWORD *)v1 == 0x5F657361656C6572 && *((_QWORD *)v1 + 1) == 0x696C696261706163;
          if (!v22 || v1[8] != 31092)
            return 0;
        }
      }
      return 1;
    case 19:
      v24 = *((_QWORD *)v1 + 1);
      v12 = *(_QWORD *)((char *)v1 + 11);
      v25 = *(_QWORD *)v1 == 0x7365726975716572;
      v26 = 0x6C6962617061635FLL;
      goto LABEL_76;
    case 20:
      v15 = *((_DWORD *)v1 + 4);
      v16 = *(_QWORD *)v1 == 0x6C5F646572616873 && *((_QWORD *)v1 + 1) == 0x636E75665F6B636FLL;
      v17 = 1852795252;
      return v16 && v15 == v17;
    case 21:
      if (*(_QWORD *)v1 == 0x655F747265737361
        && *((_QWORD *)v1 + 1) == 0x65766973756C6378
        && *(_QWORD *)((char *)v1 + 13) == 0x6B636F6C5F657669)
      {
        return 1;
      }
      v30 = *((_QWORD *)v1 + 1);
      v31 = *(_QWORD *)((char *)v1 + 13);
      v32 = *(_QWORD *)v1 == 0x6C5F646572616873;
      v33 = 0x7165725F736B636FLL;
      return v32 && v30 == v33 && v31 == 0x6465726975716572;
    case 22:
      v24 = *((_QWORD *)v1 + 1);
      v12 = *(_QWORD *)(v1 + 7);
      v25 = *(_QWORD *)v1 == 0x757163615F797274;
      v26 = 0x617061635F657269;
LABEL_76:
      v13 = v25 && v24 == v26;
      v14 = 0x7974696C69626170;
      return v13 && v12 == v14;
    case 23:
      if (*(_QWORD *)v1 != 0x766973756C637865
        || *((_QWORD *)v1 + 1) != 0x665F6B636F6C5F65
        || *(_QWORD *)((char *)v1 + 15) != 0x6E6F6974636E7566)
      {
        v37 = *(_QWORD *)v1 == 0x745F646572616873 && *((_QWORD *)v1 + 1) == 0x665F6B636F6C7972;
        if (!v37 || *(_QWORD *)((char *)v1 + 15) != 0x6E6F6974636E7566)
          return 0;
      }
      return 1;
    case 24:
      if (*(_QWORD *)v1 == 0x735F747265737361
        && *((_QWORD *)v1 + 1) == 0x61635F6465726168
        && *((_QWORD *)v1 + 2) == 0x7974696C69626170)
      {
        return 1;
      }
      v30 = *((_QWORD *)v1 + 1);
      v31 = *((_QWORD *)v1 + 2);
      v32 = *(_QWORD *)v1 == 0x766973756C637865;
      v33 = 0x5F736B636F6C5F65;
      return v32 && v30 == v33 && v31 == 0x6465726975716572;
    case 25:
      if (*(_QWORD *)v1 != 0x5F65726975716361
        || *((_QWORD *)v1 + 1) != 0x635F646572616873
        || *((_QWORD *)v1 + 2) != 0x74696C6962617061
        || *((_BYTE *)v1 + 24) != 121)
      {
        v46 = *(_QWORD *)v1 == 0x5F657361656C6572 && *((_QWORD *)v1 + 1) == 0x635F646572616873;
        v47 = v46 && *((_QWORD *)v1 + 2) == 0x74696C6962617061;
        if (!v47 || *((_BYTE *)v1 + 24) != 121)
          return 0;
      }
      return 1;
    case 26:
      if (*(_QWORD *)v1 != 0x766973756C637865
        || *((_QWORD *)v1 + 1) != 0x636F6C7972745F65
        || *((_QWORD *)v1 + 2) != 0x6974636E75665F6BLL
        || v1[12] != 28271)
      {
        v52 = *(_QWORD *)v1 == 0x5F657361656C6572 && *((_QWORD *)v1 + 1) == 0x5F636972656E6567;
        v53 = v52 && *((_QWORD *)v1 + 2) == 0x696C696261706163;
        if (!v53 || v1[12] != 31092)
        {
          v55 = *(_QWORD *)v1 == 0x7365726975716572 && *((_QWORD *)v1 + 1) == 0x5F6465726168735FLL;
          v56 = v55 && *((_QWORD *)v1 + 2) == 0x696C696261706163;
          if (!v56 || v1[12] != 31092)
            return 0;
        }
      }
      return 1;
    case 29:
      return *(_QWORD *)v1 == 0x757163615F797274
          && *((_QWORD *)v1 + 1) == 0x726168735F657269
          && *((_QWORD *)v1 + 2) == 0x62617061635F6465
          && *(_QWORD *)((char *)v1 + 21) == 0x7974696C69626170;
    default:
      return v2;
  }
}

uint64_t sub_22E81444C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5, uint64_t a6, int a7, unsigned int a8)
{
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;
  const char *v27;
  size_t v28;
  unsigned __int8 **v29;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  unsigned int v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  char *v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE v109[32];
  _BYTE v110[32];
  unsigned __int8 *v111;
  uint64_t v112;
  _BYTE *v113;
  char v114;
  uint64_t v115;
  int v116;
  __int16 v117;
  uint64_t (*v118)(uint64_t);
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _OWORD v124[2];
  int v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v125 = 0;
  memset(v124, 0, sizeof(v124));
  v122 = 0u;
  v123 = 0u;
  v121 = 0u;
  v113 = (_BYTE *)(a1 + 944);
  v114 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v115 = a1;
  v116 = 1441813;
  v117 = 62;
  v119 = 0;
  v120 = 0;
  v118 = sub_22E80F720;
  if (sub_22E811DE8((uint64_t)&v113))
  {
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v111);
    v16 = v111;
    if (!v111)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC(v112);
      v111 = v16;
    }
    v16[*v16 + 1] = 4;
    v17 = v111;
    v18 = *v111;
    *v111 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = 21;
    result = sub_22E3BB0B8((uint64_t)&v111);
    goto LABEL_109;
  }
  if (*(_WORD *)(a1 + 32) != 5)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1451, (uint64_t)v110);
    v29 = (unsigned __int8 **)v110;
LABEL_107:
    sub_22E3BB0B8((uint64_t)v29);
    goto LABEL_108;
  }
  v107 = sub_22E811D4C(a1);
  v20 = *(_QWORD *)(v107 + 8);
  if (v20)
  {
    v21 = *(uint64_t **)(v20 + 16);
    v24 = *v21;
    v22 = (unint64_t)(v21 + 2);
    v23 = v24;
    if ((_DWORD)v24 == 20)
    {
      if (*(_QWORD *)v22 == 0x615F78736F63616DLL
        && *(_QWORD *)(v22 + 8) == 0x6E657478655F7070
        && *(_DWORD *)(v22 + 16) == 1852795251)
      {
        v26 = *(_QWORD *)(a1 + 8);
        v27 = "macos_app_extension";
        v28 = 19;
        goto LABEL_24;
      }
    }
    else if (v23 == 6 && *(_DWORD *)v22 == 1868783981 && *(_WORD *)(v22 + 4) == 30835)
    {
      v26 = *(_QWORD *)(a1 + 8);
      v27 = "macos";
      v28 = 5;
LABEL_24:
      *(_QWORD *)(v107 + 8) = sub_22E3CB704((llvm::StringMapImpl *)(v26 + 544), v27, v28);
      goto LABEL_25;
    }
    v26 = *(_QWORD *)(a1 + 8);
    v27 = (const char *)sub_22E816F38(v22, v23);
    v28 = v32;
    goto LABEL_24;
  }
LABEL_25:
  if (sub_22E8847B4(a1, 0x41u, 15, "", 0))
  {
LABEL_108:
    LOWORD(v111) = 22;
    result = sub_22E885940(a1, (unsigned __int16 *)&v111, 1, 1);
    goto LABEL_109;
  }
  v103 = a8;
  v104 = a6;
  v105 = a4;
  if (!*(_QWORD *)(a1 + 384))
  {
    *(_QWORD *)(a1 + 384) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "introduced", 0xAuLL);
    *(_QWORD *)(a1 + 392) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "deprecated", 0xAuLL);
    *(_QWORD *)(a1 + 400) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "obsoleted", 9uLL);
    *(_QWORD *)(a1 + 408) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "unavailable", 0xBuLL);
    *(_QWORD *)(a1 + 416) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "message", 7uLL);
    *(_QWORD *)(a1 + 424) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "strict", 6uLL);
    *(_QWORD *)(a1 + 432) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "replacement", 0xBuLL);
  }
  if (*(_WORD *)(a1 + 32) != 5)
  {
LABEL_106:
    sub_22E884578(a1, (int *)(a1 + 16), 1450, (uint64_t)v109);
    v29 = (unsigned __int8 **)v109;
    goto LABEL_107;
  }
  v106 = 0;
  v33 = 0;
  v34 = 0;
  v102 = 0;
  while (1)
  {
    v35 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v36 = *(unsigned int *)(a1 + 40);
    if (v35 == *(_QWORD *)(a1 + 424))
    {
      if (v34)
      {
        v38 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v38 + 312) = v36;
        *(_DWORD *)(v38 + 316) = 1455;
        if (*(char *)(v38 + 311) < 0)
        {
          **(_BYTE **)(v38 + 288) = 0;
          *(_QWORD *)(v38 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v38 + 288) = 0;
          *(_BYTE *)(v38 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v111, v38);
        v39 = v111;
        if (!v111)
        {
          v39 = (unsigned __int8 *)sub_22E3B8AAC(v112);
          v111 = v39;
        }
        v39[*v39 + 1] = 5;
        v40 = v111;
        v41 = *v111;
        *v111 = v41 + 1;
        *(_QWORD *)&v40[8 * v41 + 16] = v35;
        sub_22E4D6448((uint64_t)(v40 + 336), 0x100000001 * v34, 1);
        sub_22E3BB0B8((uint64_t)&v111);
      }
      v34 = v36;
      goto LABEL_79;
    }
    if (v35 == *(_QWORD *)(a1 + 408))
    {
      if (v33)
      {
        v42 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v42 + 312) = v36;
        *(_DWORD *)(v42 + 316) = 1455;
        if (*(char *)(v42 + 311) < 0)
        {
          **(_BYTE **)(v42 + 288) = 0;
          *(_QWORD *)(v42 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v42 + 288) = 0;
          *(_BYTE *)(v42 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v111, v42);
        v43 = v111;
        if (!v111)
        {
          v43 = (unsigned __int8 *)sub_22E3B8AAC(v112);
          v111 = v43;
        }
        v43[*v43 + 1] = 5;
        v44 = v111;
        v45 = *v111;
        *v111 = v45 + 1;
        *(_QWORD *)&v44[8 * v45 + 16] = v35;
        sub_22E4D6448((uint64_t)(v44 + 336), 0x100000001 * v33, 1);
        sub_22E3BB0B8((uint64_t)&v111);
      }
      v33 = v36;
      goto LABEL_79;
    }
    if (v35 == *(_QWORD *)(a1 + 392))
    {
      v46 = *(_QWORD *)(v107 + 8);
      if (v46)
      {
        v47 = *(_QWORD *)(v46 + 16);
        if (*(_DWORD *)v47 == 5)
        {
          v48 = *(_DWORD *)(v47 + 16);
          v49 = *(unsigned __int8 *)(v47 + 20);
          if (v48 == 1718187891 && v49 == 116)
          {
            v51 = HIDWORD(v122);
            if (HIDWORD(v122))
            {
              v52 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v52 + 312) = v36;
              *(_DWORD *)(v52 + 316) = 1455;
              v99 = v51;
              if (*(char *)(v52 + 311) < 0)
              {
                **(_BYTE **)(v52 + 288) = 0;
                *(_QWORD *)(v52 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v52 + 288) = 0;
                *(_BYTE *)(v52 + 311) = 0;
              }
              sub_22E78E558((uint64_t)&v111, v52);
              v53 = v111;
              if (!v111)
              {
                v53 = (unsigned __int8 *)sub_22E3B8AAC(v112);
                v111 = v53;
              }
              v53[*v53 + 1] = 5;
              v54 = v111;
              v55 = *v111;
              *v111 = v55 + 1;
              *(_QWORD *)&v54[8 * v55 + 16] = v35;
              sub_22E4D6448((uint64_t)(v54 + 336), v99 | (v99 << 32), 1);
              sub_22E3BB0B8((uint64_t)&v111);
            }
            HIDWORD(v122) = v36;
            v123 = 1uLL;
            goto LABEL_79;
          }
        }
      }
    }
    if (*(_WORD *)(a1 + 32) != 63)
    {
      sub_22E884578(a1, (int *)(a1 + 16), 16, (uint64_t)&v111);
      v75 = v111;
      if (!v111)
      {
        v75 = (unsigned __int8 *)sub_22E3B8AAC(v112);
        v111 = v75;
      }
      v75[*v75 + 1] = 5;
      v76 = v111;
      v77 = *v111;
      *v111 = v77 + 1;
      *(_QWORD *)&v76[8 * v77 + 16] = v35;
      v76[(v77 + 1) + 1] = 4;
      v78 = v111;
      v79 = *v111;
      *v111 = v79 + 1;
      v80 = &v78[8 * v79];
      v81 = 63;
      goto LABEL_126;
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    if (v35 == *(_QWORD *)(a1 + 416))
    {
      if (*(_WORD *)(a1 + 32) != 13)
        goto LABEL_119;
      v56 = sub_22E83E898(a1, 0);
LABEL_76:
      v106 = v56;
      v57 = v56 & 0xFFFFFFFFFFFFFFFELL;
      if (v57 && (*(_BYTE *)(v57 + 2) & 0x1C) != 0)
      {
        sub_22F0D4E74(v57);
        v82 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v82 + 312) = v83;
        *(_DWORD *)(v82 + 316) = 20;
        if (*(char *)(v82 + 311) < 0)
        {
          **(_BYTE **)(v82 + 288) = 0;
          *(_QWORD *)(v82 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v82 + 288) = 0;
          *(_BYTE *)(v82 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v111, v82);
LABEL_123:
        v84 = v111;
        if (!v111)
        {
          v84 = (unsigned __int8 *)sub_22E3B8AAC(v112);
          v111 = v84;
        }
        v81 = 2;
        v84[*v84 + 1] = 2;
        v85 = v111;
        v86 = *v111;
        *v111 = v86 + 1;
        v80 = &v85[8 * v86];
LABEL_126:
        *((_QWORD *)v80 + 2) = v81;
        v29 = &v111;
        goto LABEL_107;
      }
      if (v35 == *(_QWORD *)(a1 + 416))
        break;
      goto LABEL_79;
    }
    if (v35 == *(_QWORD *)(a1 + 432))
    {
      if (*(_WORD *)(a1 + 32) != 13)
      {
LABEL_119:
        sub_22E884578(a1, (int *)(a1 + 16), 20, (uint64_t)&v111);
        goto LABEL_123;
      }
      v102 = sub_22E83E898(a1, 0);
      v56 = v106;
      goto LABEL_76;
    }
    if ((v35 == *(_QWORD *)(a1 + 384) || v35 == *(_QWORD *)(a1 + 392)) && *(_WORD *)(a1 + 32) == 5)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
      if (*(_DWORD *)v37 == 2 && *(_WORD *)(v37 + 16) == 16718)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        if (v35 == *(_QWORD *)(a1 + 384))
          v33 = v36;
        goto LABEL_79;
      }
    }
    v108 = 0;
    v58 = sub_22F2E1CA8(a1, &v108);
    if (!(v58 & 0x7FFFFFFFFFFFFFFFLL | v59 & 0x7FFFFFFF00000000 | v59 & 0x7FFFFFFF))
      goto LABEL_108;
    if (v35 == *(_QWORD *)(a1 + 384))
    {
      v64 = 0;
    }
    else if (v35 == *(_QWORD *)(a1 + 392))
    {
      v64 = 1;
    }
    else
    {
      if (v35 != *(_QWORD *)(a1 + 400))
      {
        v60 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v60 + 312) = v36;
        *(_DWORD *)(v60 + 316) = 1456;
        if (*(char *)(v60 + 311) < 0)
        {
          **(_BYTE **)(v60 + 288) = 0;
          *(_QWORD *)(v60 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v60 + 288) = 0;
          *(_BYTE *)(v60 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v111, v60);
        v61 = v111;
        if (!v111)
        {
          v61 = (unsigned __int8 *)sub_22E3B8AAC(v112);
          v111 = v61;
        }
        v61[*v61 + 1] = 5;
        v62 = v111;
        v63 = *v111;
        *v111 = v63 + 1;
        *(_QWORD *)&v62[8 * v63 + 16] = v35;
        sub_22E4D6448((uint64_t)(v62 + 336), v108, 1);
        sub_22E3BB0B8((uint64_t)&v111);
        goto LABEL_79;
      }
      v64 = 2;
    }
    v65 = (_DWORD *)&v121 + 7 * v64;
    v66 = *v65;
    if ((_DWORD)v66)
    {
      v96 = (char *)&v121 + 28 * v64;
      v97 = v64;
      v98 = v59;
      v100 = v58;
      v67 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v67 + 312) = v36;
      *(_DWORD *)(v67 + 316) = 1455;
      v95 = v66;
      if (*(char *)(v67 + 311) < 0)
      {
        **(_BYTE **)(v67 + 288) = 0;
        *(_QWORD *)(v67 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v67 + 288) = 0;
        *(_BYTE *)(v67 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v111, v67);
      v68 = v111;
      if (!v111)
      {
        v68 = (unsigned __int8 *)sub_22E3B8AAC(v112);
        v111 = v68;
      }
      v68[*v68 + 1] = 5;
      v69 = v111;
      v70 = *v111;
      *v111 = v70 + 1;
      *(_QWORD *)&v69[8 * v70 + 16] = v35;
      sub_22E4D6448((uint64_t)(v69 + 336), v95 | ((unint64_t)*((unsigned int *)&v122 + 7 * v97 + 2) << 32), 1);
      sub_22E3BB0B8((uint64_t)&v111);
      v64 = v97;
      v59 = v98;
      v58 = v100;
      v65 = v96;
    }
    *v65 = v36;
    v71 = (char *)&v121 + 28 * v64;
    *(_QWORD *)(v71 + 4) = v58;
    *(_QWORD *)(v71 + 12) = v59;
    *(_QWORD *)(v71 + 20) = v108;
LABEL_79:
    if (*(_WORD *)(a1 + 32) != 65)
      break;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    if (*(_WORD *)(a1 + 32) != 5)
      goto LABEL_106;
  }
  result = sub_22E811E8C((uint64_t)&v113);
  if ((result & 1) == 0)
  {
    if (a5)
      *a5 = HIDWORD(v120);
    v101 = v34;
    if (v33)
    {
      v87 = 0;
      v88 = 0;
      do
      {
        v89 = (char *)&v121 + v87;
        v90 = *(unsigned int *)((char *)&v121 + v87);
        if ((_DWORD)v90)
        {
          if ((v88 & 1) == 0)
          {
            v91 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v91 + 312) = v33;
            *(_DWORD *)(v91 + 316) = 1892;
            if (*(char *)(v91 + 311) < 0)
            {
              **(_BYTE **)(v91 + 288) = 0;
              *(_QWORD *)(v91 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v91 + 288) = 0;
              *(_BYTE *)(v91 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v111, v91);
            v92 = *(unsigned int *)((char *)&v122 + v87 + 8);
            v93 = (uint64_t)v111;
            if (!v111)
            {
              v93 = sub_22E3B8AAC(v112);
              v111 = (unsigned __int8 *)v93;
            }
            sub_22E4D6448(v93 + 336, v90 | (v92 << 32), 1);
            sub_22E3BB0B8((uint64_t)&v111);
          }
          *(_QWORD *)v89 = 0;
          *((_QWORD *)v89 + 1) = 0;
          *((_DWORD *)v89 + 6) = 0;
          v88 = 1;
          *((_QWORD *)v89 + 2) = 0;
        }
        v87 += 28;
      }
      while (v87 != 84);
    }
    v72 = a3 | ((unint64_t)HIDWORD(v120) << 32);
    v73 = a7;
    v74 = sub_22E8D1AC4(*(_QWORD *)(v105 + 16), 184);
    sub_22F2E2EBC(v74, a2, v72, v104, v73, v107, &v121, (__int128 *)((char *)&v122 + 12), (_OWORD *)((char *)v124 + 8), v33, v106 & 0xFFFFFFFFFFFFFFFELL, v103, v94, v101, v102 & 0xFFFFFFFFFFFFFFFELL);
    sub_22E828580(v105 + 24, v74);
    result = sub_22E828580(v105 + 8, v74);
  }
LABEL_109:
  *v113 = v114;
  return result;
}

uint64_t sub_22E814FCC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5, uint64_t a6, int a7, unsigned int a8)
{
  uint64_t result;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 v32;
  _BOOL8 v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 **v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _BYTE v53[32];
  _BYTE v54[32];
  _BYTE *v55;
  char v56;
  uint64_t v57;
  int v58;
  __int16 v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v55 = (_BYTE *)(a1 + 944);
  v56 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v57 = a1;
  v58 = 1441813;
  v59 = 62;
  v61 = 0;
  v62 = 0;
  v60 = sub_22E80F720;
  result = sub_22E88C650((uint64_t)&v55, 15, "", 0);
  if ((result & 1) == 0)
  {
    v47 = a5;
    v48 = a7;
    v49 = a2;
    if (!*(_QWORD *)(a1 + 440))
    {
      *(_QWORD *)(a1 + 440) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "language", 8uLL);
      *(_QWORD *)(a1 + 448) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "defined_in", 0xAuLL);
      *(_QWORD *)(a1 + 456) = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "generated_declaration", 0x15uLL);
    }
    v50 = a4;
    v51 = a3;
    v52 = a6;
    if (*(_WORD *)(a1 + 32) == 5)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v45 = 0;
      v46 = 0;
      do
      {
        v20 = *(_QWORD *)(a1 + 24);
        if (v20 == *(_QWORD *)(a1 + 456))
        {
          if (v19)
          {
            sub_22E884578(a1, (int *)(a1 + 16), 1551, (uint64_t)&v63);
            v42 = v63;
            if (!v63)
            {
              v42 = (unsigned __int8 *)sub_22E3B8AAC(v64);
              v63 = v42;
            }
            v42[*v42 + 1] = 5;
            v43 = v63;
            v44 = *v63;
            *v63 = v44 + 1;
            *(_QWORD *)&v43[8 * v44 + 16] = v20;
            v40 = &v63;
            goto LABEL_39;
          }
          v19 = sub_22E811D4C(a1);
        }
        else
        {
          v21 = *(_DWORD *)(a1 + 16);
          if (v20 != *(_QWORD *)(a1 + 440) && v20 != *(_QWORD *)(a1 + 448))
          {
            sub_22E884578(a1, (int *)(a1 + 16), 1552, (uint64_t)v53);
            v40 = (unsigned __int8 **)v53;
            goto LABEL_39;
          }
          *(_DWORD *)(a1 + 40) = v21;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          if (sub_22E8847B4(a1, 0x3Fu, 16, (void *)(*(_QWORD *)(v20 + 16) + 16), **(unsigned int **)(v20 + 16)))goto LABEL_40;
          v22 = *(_QWORD *)(a1 + 440);
          v23 = v20 == v22;
          v24 = v20 != v22;
          if (*(_WORD *)(a1 + 32) == 13)
          {
            if (v20 == v22)
            {
              if ((v17 & 1) != 0)
              {
                v36 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v36 + 312) = v21;
                *(_DWORD *)(v36 + 316) = 1551;
                if (*(char *)(v36 + 311) < 0)
                {
                  **(_BYTE **)(v36 + 288) = 0;
                  *(_QWORD *)(v36 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v36 + 288) = 0;
                  *(_BYTE *)(v36 + 311) = 0;
                }
                sub_22E78E558((uint64_t)&v63, v36);
                v37 = v63;
                if (!v63)
                {
                  v37 = (unsigned __int8 *)sub_22E3B8AAC(v64);
                  v63 = v37;
                }
                v37[*v37 + 1] = 5;
                v38 = v63;
                v39 = *v63;
                *v63 = v39 + 1;
                *(_QWORD *)&v38[8 * v39 + 16] = v20;
                sub_22E3BB0B8((uint64_t)&v63);
                sub_22E83E898(a1, 0);
              }
              else
              {
                v45 = sub_22E83E898(a1, 0);
              }
              v17 = 1;
            }
            else
            {
              if ((v18 & 1) != 0)
              {
                v25 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v25 + 312) = v21;
                *(_DWORD *)(v25 + 316) = 1551;
                if (*(char *)(v25 + 311) < 0)
                {
                  **(_BYTE **)(v25 + 288) = 0;
                  *(_QWORD *)(v25 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v25 + 288) = 0;
                  *(_BYTE *)(v25 + 311) = 0;
                }
                sub_22E78E558((uint64_t)&v63, v25);
                v26 = v63;
                if (!v63)
                {
                  v26 = (unsigned __int8 *)sub_22E3B8AAC(v64);
                  v63 = v26;
                }
                v26[*v26 + 1] = 5;
                v27 = v63;
                v28 = *v63;
                *v63 = v28 + 1;
                *(_QWORD *)&v27[8 * v28 + 16] = v20;
                sub_22E3BB0B8((uint64_t)&v63);
                sub_22E83E898(a1, 0);
              }
              else
              {
                v46 = sub_22E83E898(a1, 0);
              }
              v18 = 1;
            }
          }
          else
          {
            sub_22E884578(a1, (int *)(a1 + 16), 20, (uint64_t)&v63);
            v29 = v63;
            if (!v63)
            {
              v29 = (unsigned __int8 *)sub_22E3B8AAC(v64);
              v63 = v29;
            }
            v18 |= v24;
            v17 |= v23;
            v29[*v29 + 1] = 2;
            v30 = v63;
            v31 = *v63;
            v32 = v31 + 1;
            *v63 = v31 + 1;
            *(_QWORD *)&v30[8 * v31 + 16] = 3;
            v33 = v20 != *(_QWORD *)(a1 + 440);
            v30[v32 + 1] = 2;
            v34 = v63;
            v35 = *v63;
            *v63 = v35 + 1;
            *(_QWORD *)&v34[8 * v35 + 16] = v33;
            sub_22E3BB0B8((uint64_t)&v63);
            LODWORD(v63) = 1441857;
            sub_22E885940(a1, (unsigned __int16 *)&v63, 2, 3);
          }
        }
        if (*(_WORD *)(a1 + 32) != 65)
        {
          result = sub_22E811E8C((uint64_t)&v55);
          if ((result & 1) == 0)
          {
            v41 = HIDWORD(v62);
            if (v47)
              *v47 = HIDWORD(v62);
            v63 = (unsigned __int8 *)(v45 & 0xFFFFFFFFFFFFFFFCLL);
            v64 = v46 & 0xFFFFFFFFFFFFFFFCLL;
            v65 = v19 | 2;
            result = sub_22E8118E4(v50, v49, v51 | ((unint64_t)v41 << 32), v52, v48, &v63, 3u, a8, 0);
          }
          goto LABEL_41;
        }
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      }
      while (*(_WORD *)(a1 + 32) == 5);
    }
    sub_22E884578(a1, (int *)(a1 + 16), 1552, (uint64_t)v54);
    v40 = (unsigned __int8 **)v54;
LABEL_39:
    sub_22E3BB0B8((uint64_t)v40);
LABEL_40:
    LOWORD(v63) = 22;
    result = sub_22E885940(a1, (unsigned __int16 *)&v63, 1, 1);
  }
LABEL_41:
  *v55 = v56;
  return result;
}

uint64_t sub_22E81551C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5, uint64_t a6, int a7, unsigned int a8)
{
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _BYTE v36[32];
  _BYTE *v37;
  char v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v37 = (_BYTE *)(a1 + 944);
  v38 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v39 = a1;
  v40 = 1441813;
  v41 = 62;
  v43 = 0;
  v44 = 0;
  v42 = sub_22E80F720;
  if (sub_22E811DE8((uint64_t)&v37))
  {
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v45);
    v16 = v45;
    if (!v45)
    {
      v16 = (unsigned __int8 *)sub_22E3B8AAC(v46);
      v45 = v16;
    }
    v16[*v16 + 1] = 4;
    v17 = v45;
    v18 = *v45;
    *v45 = v18 + 1;
    *(_QWORD *)&v17[8 * v18 + 16] = 21;
    result = sub_22E3BB0B8((uint64_t)&v45);
  }
  else
  {
    v20 = *(unsigned __int16 *)(a1 + 32);
    if (v20 == 104 || v20 == 86)
    {
      v35 = a2;
      v22 = *(_DWORD *)(a1 + 16);
      v23 = *(_QWORD *)(a1 + 24);
      v24 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 2032, 16, 3);
      *(_DWORD *)v24 = v22;
      *(_QWORD *)(v24 + 8) = v23;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      result = sub_22E811E8C((uint64_t)&v37);
      if ((result & 1) == 0)
      {
        v25 = HIDWORD(v44);
        if (a5)
          *a5 = HIDWORD(v44);
        v45 = (unsigned __int8 *)(v24 | 2);
        result = sub_22E8118E4(a4, v35, a3 | ((unint64_t)v25 << 32), a6, a7, &v45, 1u, a8, 0);
      }
    }
    else
    {
      if (v20 == 22)
      {
        v21 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v21 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v21 + 316) = 1433;
        if (*(char *)(v21 + 311) < 0)
        {
          **(_BYTE **)(v21 + 288) = 0;
          *(_QWORD *)(v21 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v21 + 288) = 0;
          *(_BYTE *)(v21 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v36, v21);
        sub_22E3BB0B8((uint64_t)v36);
      }
      else
      {
        sub_22E884578(a1, (int *)(a1 + 16), 6284, (uint64_t)&v45);
        v26 = v45;
        if (!v45)
        {
          v26 = (unsigned __int8 *)sub_22E3B8AAC(v46);
          v45 = v26;
        }
        v26[*v26 + 1] = 5;
        v27 = v45;
        v28 = *v45;
        v29 = v28 + 1;
        *v45 = v28 + 1;
        *(_QWORD *)&v27[8 * v28 + 16] = a2;
        v30 = *(unsigned __int16 *)(a1 + 32);
        if ((v30 - 7) >= 6)
        {
          v31 = 0;
          if ((v30 - 13) >= 6 && v30 != 1)
            v31 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          v31 = 0;
        }
        v27[v29 + 1] = 5;
        v32 = v45;
        v33 = *v45;
        *v45 = v33 + 1;
        *(_QWORD *)&v32[8 * v33 + 16] = v31;
        sub_22E3BB0B8((uint64_t)&v45);
        v34 = *(unsigned __int16 *)(a1 + 32);
        if (v34 - 16 >= 9 && (v34 > 0xE || ((1 << v34) & 0x6008) == 0) && v34 - 399 >= 0x29)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        }
      }
      result = sub_22E811E8C((uint64_t)&v37);
    }
  }
  *v37 = v38;
  return result;
}

uint64_t sub_22E81586C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5, uint64_t a6, int a7, unsigned int a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v29;
  int v30;
  uint64_t result;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _DWORD *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  _BYTE *v47;
  char v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;

  v47 = (_BYTE *)(a1 + 944);
  v48 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v49 = a1;
  v50 = 1441813;
  v51 = 62;
  v53 = 0;
  v54 = 0;
  v52 = sub_22E80F720;
  sub_22E811DE8((uint64_t)&v47);
  if (*(_WORD *)(a1 + 32) != 5)
  {
LABEL_31:
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v45);
    v33 = v45;
    if (!v45)
    {
      v33 = (unsigned __int8 *)sub_22E3B8AAC(v46);
      v45 = v33;
    }
    v33[*v33 + 1] = 4;
    v34 = v45;
    v35 = *v45;
    *v45 = v35 + 1;
    *(_QWORD *)&v34[8 * v35 + 16] = 5;
LABEL_37:
    sub_22E3BB0B8((uint64_t)&v45);
    goto LABEL_38;
  }
  v16 = sub_22E811D4C(a1);
  if (sub_22E8847B4(a1, 0x41u, 15, "", 0)
    || (v44 = 0, v18 = sub_22E80FC30(a1, &v44, 5, 3, 0, 0, v17), v19))
  {
LABEL_38:
    result = sub_22F2F18E0((uint64_t)&v47);
    goto LABEL_39;
  }
  v40 = v18;
  v41 = a2;
  v42 = a8;
  v43 = a5;
  if (*(_WORD *)(a1 + 32) == 65)
  {
    v20 = 0;
    v21 = 0;
    while (1)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      if (*(_WORD *)(a1 + 32) != 5)
        goto LABEL_31;
      v22 = *(_QWORD *)(a1 + 24);
      v23 = *(_QWORD *)(v22 + 16);
      if (*(_DWORD *)v23 == 12)
      {
        v29 = *(_QWORD *)(v23 + 16);
        v30 = *(_DWORD *)(v23 + 24);
        if (v29 != 0x5F65625F7473756DLL || v30 != 1819047278)
        {
LABEL_34:
          sub_22E884578(a1, (int *)(a1 + 16), 1750, (uint64_t)&v45);
          v37 = v45;
          if (!v45)
          {
            v37 = (unsigned __int8 *)sub_22E3B8AAC(v46);
            v45 = v37;
          }
          v37[*v37 + 1] = 5;
          v38 = v45;
          v39 = *v45;
          *v45 = v39 + 1;
          *(_QWORD *)&v38[8 * v39 + 16] = v22;
          goto LABEL_37;
        }
        v21 = 1;
      }
      else
      {
        if (*(_DWORD *)v23 != 17)
          goto LABEL_34;
        v24 = *(_QWORD *)(v23 + 16);
        v25 = *(_QWORD *)(v23 + 24);
        v26 = *(unsigned __int8 *)(v23 + 32);
        v27 = v24 == 0x635F74756F79616CLL && v25 == 0x6C62697461706D6FLL;
        if (!v27 || v26 != 101)
          goto LABEL_34;
        v20 = 1;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      if (*(_WORD *)(a1 + 32) != 65)
        goto LABEL_27;
    }
  }
  v21 = 0;
  v20 = 0;
LABEL_27:
  result = sub_22E811E8C((uint64_t)&v47);
  if ((result & 1) == 0)
  {
    v36 = sub_22E8D1AC4(*(_QWORD *)(a4 + 16), 104);
    sub_22F2E30A0(v36, v41, a3 | ((unint64_t)a3 << 32), a6, a7, v16, v40, v20 & 1, v21 & 1, v42);
    sub_22E828580(a4 + 24, v36);
    result = sub_22E828580(a4 + 8, v36);
  }
  if (v43)
    *v43 = HIDWORD(v54);
LABEL_39:
  *v47 = v48;
  return result;
}

_WORD *sub_22E815BCC(_WORD *result, unint64_t a2)
{
  if (a2 >= 4 && *result == 24415 && *(_WORD *)((char *)result + a2 - 2) == 24415)
    ++result;
  return result;
}

uint64_t sub_22E815C10(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  int v16;
  unint64_t v17;
  unint64_t v19;

  v16 = sub_22F1ACD3C(a2, a6, a8, 0);
  if (v16 <= 311)
  {
    if (v16 == 38)
    {
      sub_22E81444C(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      if (v16 != 102)
        return sub_22E8120E0(a1, a2, a3, a4, a5, a6, a7, a8);
      sub_22E814FCC(a1, a2, a3, a4, a5, a6, a7, a8);
    }
LABEL_10:
    v17 = *(_QWORD *)(a4 + 8);
    if (v17 < 8)
      return 0;
    v19 = v17 & 0xFFFFFFFFFFFFFFF8;
    if ((v17 & 4) != 0 && v19)
    {
      if (!*(_DWORD *)(v19 + 8))
        return 0;
    }
    else if ((v17 & 4) == 0)
    {
      return *(unsigned __int16 *)(v17 + 48);
    }
    v17 = **(_QWORD **)v19;
    return *(unsigned __int16 *)(v17 + 48);
  }
  switch(v16)
  {
    case 426:
      sub_22E81551C(a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 445:
      sub_22E81586C(a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_10;
    case 312:
      sub_22F2E1828(a1, a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_10;
  }
  return sub_22E8120E0(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_22E815DDC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  int *v7;
  unsigned int v8;
  const void *v9;
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  int *v31;
  int *v32;
  uint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  size_t v38;
  _BYTE *v39;
  unsigned int v40;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t *v75;
  _BYTE v76[32];
  int *v77;
  char v78;
  uint64_t v79;
  int v80;
  __int16 v81;
  uint64_t (*v82)(uint64_t);
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[32];
  _BYTE v86[32];
  _BYTE v87[32];
  _BYTE v88[32];
  unsigned __int8 *v89;
  char v90;
  uint64_t v91;
  char v92;
  void *__p[2];
  uint64_t v94;
  char v95;
  uint64_t v96[4];
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  __int128 v102;
  int v103;
  __int16 v104;
  uint64_t (*v105)(uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v2 = a2;
  v108 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 16);
  v5 = v3;
  if (*(_WORD *)(a1 + 32) != 302)
    goto LABEL_150;
  v7 = (int *)(a1 + 944);
  v75 = a2 + 1;
  v71 = *(unsigned int *)(a1 + 16);
  v72 = (uint64_t)(a2 + 3);
  v73 = (int *)(a1 + 944);
  while (2)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    v77 = v7;
    v78 = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v79 = a1;
    v80 = 1441813;
    v81 = 62;
    v83 = 0;
    v84 = 0;
    v82 = sub_22E80F720;
    if ((sub_22E88C650((uint64_t)&v77, 1510, "__declspec", 22) & 1) != 0)
      goto LABEL_155;
LABEL_4:
    while (2)
    {
      while (1)
      {
        v8 = *(unsigned __int16 *)(a1 + 32);
        if (v8 > 0x15)
          break;
        if (v8 == 5)
          goto LABEL_15;
        if (v8 != 13)
        {
          if (v8 == 3)
          {
            v70 = *(_QWORD *)(a1 + 8);
            if (*(_QWORD *)(v70 + 752))
            {
              *(_BYTE *)(v70 + 864) = 1;
              *(_BYTE *)(*(_QWORD *)(v70 + 48) + 6) = 1;
            }
            *(_WORD *)(a1 + 32) = 1;
            sub_22F313954(*(char ***)(a1 + 88), 3u, 0, 0);
            goto LABEL_155;
          }
LABEL_156:
          sub_22E884578(a1, (int *)v4, 1612, (uint64_t)v76);
          sub_22E3BB0B8((uint64_t)v76);
          sub_22F2F18E0((uint64_t)&v77);
LABEL_155:
          *(_BYTE *)v77 = v78;
          return;
        }
        v101 = &v103;
        v102 = xmmword_22F44E360;
        LOBYTE(v89) = 0;
        v9 = (const void *)sub_22F18E170(*(_QWORD *)(a1 + 8), (uint64_t)v4, (uint64_t *)&v101, (unsigned __int8 *)&v89);
        v11 = v89;
        if ((_BYTE)v89)
        {
          sub_22F2F18E0((uint64_t)&v77);
          v13 = 0;
          v12 = 0;
        }
        else
        {
          v12 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), v9, v10);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
          v13 = *(unsigned int *)(a1 + 40);
        }
        if (v101 != &v103)
          free(v101);
        if (v11)
          goto LABEL_155;
LABEL_16:
        if (*(_WORD *)(a1 + 32) != 21)
        {
          v16 = *(_QWORD *)(v12 + 16);
          if (*(_DWORD *)v16 != 8 || *(_QWORD *)(v16 + 16) != 0x79747265706F7270)
            goto LABEL_55;
          v17 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v17 + 312) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(v17 + 316) = 1510;
          if (*(char *)(v17 + 311) < 0)
          {
            **(_BYTE **)(v17 + 288) = 0;
            *(_QWORD *)(v17 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v17 + 288) = 0;
            *(_BYTE *)(v17 + 311) = 0;
          }
          v18 = (unsigned __int8 **)sub_22E78E558((uint64_t)&v101, v17);
          sub_22E3B89A8(v18, (void *)(*(_QWORD *)(v12 + 16) + 16), **(unsigned int **)(v12 + 16));
LABEL_54:
          sub_22E3BB0B8((uint64_t)&v101);
          goto LABEL_55;
        }
        v14 = *v75;
        if ((unint64_t)*v75 >= 8)
        {
          v19 = v14 & 0xFFFFFFFFFFFFFFF8;
          if ((v14 & 4) != 0 && v19 || (v14 & 4) != 0)
            v15 = *(_DWORD *)(v19 + 8);
          else
            v15 = 1;
        }
        else
        {
          v15 = 0;
        }
        if (!sub_22F195174(1, 0, v12, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)))
        {
          sub_22E80F720(a1);
          LOWORD(v101) = 22;
          sub_22E885940(a1, (unsigned __int16 *)&v101, 1, 0);
          goto LABEL_55;
        }
        v20 = *v4;
        v21 = *(_QWORD *)(v12 + 16);
        if (*(_DWORD *)v21 == 8)
        {
          v23 = *(_QWORD *)(v21 + 16);
          v22 = (char *)(v21 + 16);
          if (v23 == 0x79747265706F7270)
          {
            v101 = v73;
            LOBYTE(v102) = *(_BYTE *)(a1 + 944);
            *(_BYTE *)(a1 + 944) = 1;
            *((_QWORD *)&v102 + 1) = a1;
            v103 = 1441813;
            v104 = 62;
            v106 = 0;
            v107 = 0;
            v105 = sub_22E80F720;
            sub_22E88C650((uint64_t)&v101, 1510, v22, 22);
            v34 = 0;
            v99 = 0;
            v100 = 0;
            while (1)
            {
              v35 = *(unsigned __int16 *)(a1 + 32);
              if (v35 != 5)
              {
                if (v35 != 22 || (v34 & 1) != 0 || v99 || v100)
                {
                  v60 = *(_QWORD *)(a1 + 96);
                  *(_DWORD *)(v60 + 312) = *(_DWORD *)(a1 + 16);
                  *(_DWORD *)(v60 + 316) = 1621;
                  if (*(char *)(v60 + 311) < 0)
                  {
                    **(_BYTE **)(v60 + 288) = 0;
                    *(_QWORD *)(v60 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v60 + 288) = 0;
                    *(_BYTE *)(v60 + 311) = 0;
                  }
                  v61 = &v97;
                }
                else
                {
                  v60 = *(_QWORD *)(a1 + 96);
                  *(_DWORD *)(v60 + 312) = v13;
                  *(_DWORD *)(v60 + 316) = 1620;
                  if (*(char *)(v60 + 311) < 0)
                  {
                    **(_BYTE **)(v60 + 288) = 0;
                    *(_QWORD *)(v60 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v60 + 288) = 0;
                    *(_BYTE *)(v60 + 311) = 0;
                  }
                  v61 = &v98;
                }
                v63 = (_BYTE *)sub_22E78E558((uint64_t)v61, v60);
LABEL_135:
                sub_22E3BB0B8((uint64_t)v63);
                if ((v34 & 1) == 0)
                {
LABEL_131:
                  v66 = v99;
                  v65 = v100;
                  v67 = sub_22E8D1AC4(v2[2], 96);
                  sub_22F2E2DE4(v67, v12, v13 | (v13 << 32), v65, v66);
                  sub_22E828580(v72, v67);
                  sub_22E828580((uint64_t)v75, v67);
                  v68 = 1;
                  goto LABEL_137;
                }
LABEL_136:
                v68 = 0;
                goto LABEL_137;
              }
              v36 = *(unsigned int *)(a1 + 16);
              v37 = *(_DWORD **)(*(_QWORD *)(a1 + 24) + 16);
              v40 = *v37;
              v39 = v37 + 4;
              v38 = v40;
              if (v40 == 3)
              {
                if (*(_WORD *)v39 == 25959 && v39[2] == 116)
                {
                  v50 = 0;
                  v51 = 1;
                  goto LABEL_97;
                }
                if (*(_WORD *)v39 == 30064 && v39[2] == 116)
                  goto LABEL_96;
                if (*(_WORD *)v39 == 25971 && v39[2] == 116)
                {
                  v57 = *(_QWORD *)(a1 + 96);
                  *(_DWORD *)(v57 + 312) = v36;
                  *(_DWORD *)(v57 + 316) = 1617;
                  if (*(char *)(v57 + 311) < 0)
                  {
                    **(_BYTE **)(v57 + 288) = 0;
                    *(_QWORD *)(v57 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v57 + 288) = 0;
                    *(_BYTE *)(v57 + 311) = 0;
                  }
                  sub_22E78E558((uint64_t)v96, v57);
                  v92 = 0;
                  v91 = 0;
                  __p[1] = 0;
                  v94 = 0x300000000000000;
                  __p[0] = 0;
                  v95 = 0;
                  v89 = (unsigned __int8 *)(v36 | (v36 << 32));
                  v90 = 1;
                  qmemcpy(__p, "put", 3);
                  sub_22E6D82D0(v96, &v89);
                  if (SHIBYTE(v94) < 0)
                    operator delete(__p[0]);
                  sub_22E3BB0B8((uint64_t)v96);
LABEL_96:
                  v50 = 0;
                  v51 = 0;
                  goto LABEL_97;
                }
              }
              v44 = *(_QWORD *)(a1 + 8);
              v45 = *(_QWORD *)(v44 + 2816);
              if (v45 >= *(unsigned int *)(v44 + 2784))
                v46 = sub_22F162D2C(v44, 1u);
              else
                v46 = *(_QWORD *)(v44 + 2776) + 24 * v45;
              if (*(_WORD *)(v46 + 16) == 65
                || ((v47 = *(_QWORD *)(a1 + 8), v48 = *(_QWORD *)(v47 + 2816), v48 >= *(unsigned int *)(v47 + 2784))
                  ? (v49 = sub_22F162D2C(v47, 1u))
                  : (v49 = *(_QWORD *)(v47 + 2776) + 24 * v48),
                    *(_WORD *)(v49 + 16) == 22))
              {
                v52 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v52 + 312) = v36;
                *(_DWORD *)(v52 + 316) = 1619;
                if (*(char *)(v52 + 311) < 0)
                {
                  **(_BYTE **)(v52 + 288) = 0;
                  *(_QWORD *)(v52 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v52 + 288) = 0;
                  *(_BYTE *)(v52 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v88, v52);
                sub_22E3BB0B8((uint64_t)v88);
                v34 = 1;
                goto LABEL_106;
              }
              v53 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v53 + 312) = v36;
              *(_DWORD *)(v53 + 316) = 1621;
              if (*(char *)(v53 + 311) < 0)
              {
                **(_BYTE **)(v53 + 288) = 0;
                *(_QWORD *)(v53 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v53 + 288) = 0;
                *(_BYTE *)(v53 + 311) = 0;
              }
              sub_22E78E558((uint64_t)v87, v53);
              sub_22E3BB0B8((uint64_t)v87);
              v54 = *(_QWORD *)(a1 + 8);
              v55 = *(_QWORD *)(v54 + 2816);
              if (v55 >= *(unsigned int *)(v54 + 2784))
                v56 = sub_22F162D2C(v54, 1u);
              else
                v56 = *(_QWORD *)(v54 + 2776) + 24 * v55;
              if (*(_WORD *)(v56 + 16) != 63)
              {
                v68 = 0;
                v2 = a2;
LABEL_137:
                sub_22F2F18E0((uint64_t)&v101);
                *(_BYTE *)v101 = v102;
                if ((v68 & 1) == 0)
LABEL_55:
                  sub_22E8118E4((uint64_t)v2, v12, v13 | (v13 << 32), 0, v13, 0, 0, 3u, 0);
                goto LABEL_4;
              }
              v50 = 1;
              v51 = 0xFFFFFFFFLL;
              v34 = 1;
LABEL_97:
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
              if (*(_WORD *)(a1 + 32) != 63)
              {
                v64 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v64 + 312) = *(_DWORD *)(a1 + 16);
                *(_DWORD *)(v64 + 316) = 1616;
                if (*(char *)(v64 + 311) < 0)
                {
                  **(_BYTE **)(v64 + 288) = 0;
                  *(_QWORD *)(v64 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v64 + 288) = 0;
                  *(_BYTE *)(v64 + 311) = 0;
                }
                v2 = a2;
                sub_22E78E558((uint64_t)&v89, v64);
                sub_22E3B89A8(&v89, v39, v38);
                sub_22E3BB0B8((uint64_t)&v89);
                goto LABEL_130;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
              if (*(_WORD *)(a1 + 32) != 5)
              {
                v69 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v69 + 312) = *(_DWORD *)(a1 + 16);
                *(_DWORD *)(v69 + 316) = 1614;
                if (*(char *)(v69 + 311) < 0)
                {
                  **(_BYTE **)(v69 + 288) = 0;
                  *(_QWORD *)(v69 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v69 + 288) = 0;
                  *(_BYTE *)(v69 + 311) = 0;
                }
                v2 = a2;
                sub_22E78E558((uint64_t)v86, v69);
                v63 = v86;
                goto LABEL_135;
              }
              if ((v50 & 1) != 0)
                goto LABEL_105;
              if (!*(&v99 + v51))
              {
                *(&v99 + v51) = *(_QWORD *)(a1 + 24);
LABEL_105:
                v2 = a2;
                goto LABEL_106;
              }
              v58 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v58 + 312) = v36;
              *(_DWORD *)(v58 + 316) = 1613;
              v2 = a2;
              if (*(char *)(v58 + 311) < 0)
              {
                **(_BYTE **)(v58 + 288) = 0;
                *(_QWORD *)(v58 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v58 + 288) = 0;
                *(_BYTE *)(v58 + 311) = 0;
              }
              sub_22E78E558((uint64_t)&v89, v58);
              sub_22E3B89A8(&v89, v39, v38);
              sub_22E3BB0B8((uint64_t)&v89);
LABEL_106:
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
              v59 = *(unsigned __int16 *)(a1 + 32);
              if (v59 != 65)
              {
                if (v59 != 22)
                {
                  v62 = *(_QWORD *)(a1 + 96);
                  *(_DWORD *)(v62 + 312) = *(_DWORD *)(a1 + 16);
                  *(_DWORD *)(v62 + 316) = 1615;
                  if (*(char *)(v62 + 311) < 0)
                  {
                    **(_BYTE **)(v62 + 288) = 0;
                    *(_QWORD *)(v62 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v62 + 288) = 0;
                    *(_BYTE *)(v62 + 311) = 0;
                  }
                  sub_22E78E558((uint64_t)v85, v62);
                  v63 = v85;
                  goto LABEL_135;
                }
LABEL_130:
                if ((v34 & 1) == 0)
                  goto LABEL_131;
                goto LABEL_136;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
            }
          }
        }
        v24 = sub_22E8120E0(a1, v12, v13, v2, 0, 0, 0, 3);
        v25 = v2[1];
        if (v25 >= 8)
        {
          v27 = v25 & 0xFFFFFFFFFFFFFFF8;
          if ((v25 & 4) != 0 && v27 || (v25 & 4) != 0)
            v26 = *(_DWORD *)(v27 + 8);
          else
            v26 = 1;
        }
        else
        {
          v26 = 0;
        }
        if (v15 < v26)
        {
          v28 = v25 & 0xFFFFFFFFFFFFFFF8;
          if ((v25 & 4) != 0)
            v28 = *(_QWORD *)(*(_QWORD *)v28 + 8 * *(unsigned int *)(v28 + 8) - 8);
          if ((HIWORD(*(_DWORD *)(*(_QWORD *)(v28 + 72) + 8)) & 0xF)
             + ((*(_DWORD *)(*(_QWORD *)(v28 + 72) + 8) >> 20) & 0xF)
            && v24 == 0)
          {
            v30 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v30 + 312) = v20;
            *(_DWORD *)(v30 + 316) = 1445;
            if (*(char *)(v30 + 311) < 0)
            {
              **(_BYTE **)(v30 + 288) = 0;
              *(_QWORD *)(v30 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v30 + 288) = 0;
              *(_BYTE *)(v30 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v101, v30);
            v31 = v101;
            if (!v101)
            {
              v31 = (int *)sub_22E3B8AAC(v102);
              v101 = v31;
            }
            *((_BYTE *)v31 + *(unsigned __int8 *)v31 + 1) = 5;
            v32 = v101;
            v33 = *(unsigned __int8 *)v101;
            *(_BYTE *)v101 = v33 + 1;
            *(_QWORD *)&v32[2 * v33 + 4] = v12;
            goto LABEL_54;
          }
        }
      }
      if (v8 == 65)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
        continue;
      }
      break;
    }
    if (v8 == 98)
    {
LABEL_15:
      v12 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
      v13 = *(unsigned int *)(a1 + 40);
      goto LABEL_16;
    }
    if (v8 != 22)
      goto LABEL_156;
    sub_22E811E8C((uint64_t)&v77);
    v5 = HIDWORD(v84);
    *(_BYTE *)v77 = v78;
    v7 = v73;
    if (*(_WORD *)(a1 + 32) == 302)
      continue;
    break;
  }
  v3 = v71;
LABEL_150:
  *v2 = v3 | (v5 << 32);
}

uint64_t sub_22E81691C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  int v5;
  uint64_t v6;

  v3 = result;
  v4 = (unsigned int *)(result + 16);
  while (1)
  {
    v5 = *(unsigned __int16 *)(v3 + 32);
    if ((v5 - 303) >= 6 && (v5 - 371) > 4)
      break;
    v6 = *(_QWORD *)(v3 + 24);
    *(_DWORD *)(v3 + 40) = *(_DWORD *)(v3 + 16);
    sub_22F18FB4C(*(_QWORD *)(v3 + 8), v4);
    result = sub_22E8118E4(a2, v6, *(unsigned int *)(v3 + 40) | ((unint64_t)*(unsigned int *)(v3 + 40) << 32), 0, *(_DWORD *)(v3 + 40), 0, 0, 5u, 0);
  }
  return result;
}

uint64_t sub_22E8169B0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;

  if (*(_WORD *)(result + 32) == 354)
  {
    v3 = result;
    v4 = (unsigned int *)(result + 16);
    do
    {
      v5 = *(_QWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 40) = *(_DWORD *)(v3 + 16);
      sub_22F18FB4C(*(_QWORD *)(v3 + 8), v4);
      result = sub_22E8118E4(a2, v5, *(unsigned int *)(v3 + 40) | ((unint64_t)*(unsigned int *)(v3 + 40) << 32), 0, *(_DWORD *)(v3 + 40), 0, 0, 5u, 0);
    }
    while (*(_WORD *)(v3 + 32) == 354);
  }
  return result;
}

uint64_t sub_22E816A3C(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  uint64_t v6;

  v3 = *(unsigned __int16 *)(a1 + 32);
  if ((v3 - 7) < 6 || ((v3 - 13) >= 6 ? (v4 = v3 == 1) : (v4 = 1), v4))
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 24);
  return sub_22E8118E4(a2, v6, *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned int *)(a1 + 16) << 32), 0, *(_DWORD *)(a1 + 16), 0, 0, 5u, 0);
}

uint64_t sub_22E816AA8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  __int16 v9;
  int v10;

  v8 = sub_22E8D1AC4(*(_QWORD *)(a1 + 16), 80);
  *(_QWORD *)v8 = a2;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = a3;
  *(_DWORD *)(v8 + 24) = a4;
  v9 = sub_22F1ACD3C(a2, 0, 5u, 1);
  v10 = (((*(unsigned __int8 *)(v8 + 30) >> 7) & 1) << 23) | 0x7D0000;
  *(_WORD *)(v8 + 28) = v9;
  *(_BYTE *)(v8 + 30) = BYTE2(v10);
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) &= 0xFFFFFFFEFF000000;
  *(_DWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 72) = sub_22E8D2434(v8);
  sub_22E828580(a1 + 24, v8);
  return sub_22E828580(a1 + 8, v8);
}

uint64_t sub_22E816B64(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  uint64_t v6;

  v3 = *(unsigned __int16 *)(a1 + 32);
  if ((v3 - 7) < 6 || ((v3 - 13) >= 6 ? (v4 = v3 == 1) : (v4 = 1), v4))
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 24);
  return sub_22E816AA8(a2, v6, *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned int *)(a1 + 16) << 32), *(_DWORD *)(a1 + 16));
}

BOOL sub_22E816BA4(uint64_t a1, _DWORD *a2, int a3, const char **a4, int *a5, _DWORD *a6)
{
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  _BOOL8 result;
  _BOOL8 v18;
  uint64_t v19;
  int v20;
  int v21;
  char v23;
  _BYTE v24[32];
  _BYTE v25[32];
  _BYTE *v26;
  char v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 v34;

  v12 = a1 + 16;
  v13 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v13;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(v12 + 16) != 21)
  {
    result = sub_22E8ADB6C(a2, 32, a3, a4, a5, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56));
    *a6 = v13;
    return result;
  }
  v26 = (_BYTE *)(a1 + 944);
  v27 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v28 = a1;
  v29 = 1441813;
  v30 = 62;
  v32 = 0;
  v33 = 0;
  v31 = sub_22E80F720;
  sub_22E811DE8((uint64_t)&v26);
  v14 = *(unsigned __int16 *)(a1 + 32);
  if (v14 > 0x13E)
  {
    if (v14 != 319)
    {
      v18 = 0;
      if (v14 != 320)
        goto LABEL_18;
LABEL_22:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v12);
      *a6 = *(_DWORD *)(a1 + 40);
      if ((sub_22E811E8C((uint64_t)&v26) & 1) == 0)
        *a6 = HIDWORD(v33);
      goto LABEL_24;
    }
    v23 = 32;
LABEL_21:
    v18 = sub_22E8ADB6C(a2, v23, a3, a4, a5, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56));
    goto LABEL_22;
  }
  if (v14 == 5)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 88) + 60) & 8) == 0)
      goto LABEL_18;
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
    if (*(_DWORD *)v19 != 6)
      goto LABEL_18;
    v20 = *(_DWORD *)(v19 + 16);
    v21 = *(unsigned __int16 *)(v19 + 20);
    if (v20 != 1953724787 || v21 != 28005)
      goto LABEL_18;
    v23 = 64;
    goto LABEL_21;
  }
  if (v14 == 22)
  {
    v15 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v15 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v15 + 316) = 1433;
    if (*(char *)(v15 + 311) < 0)
    {
      **(_BYTE **)(v15 + 288) = 0;
      *(_QWORD *)(v15 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v15 + 288) = 0;
      *(_BYTE *)(v15 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v25, v15);
    sub_22E3BB0B8((uint64_t)v25);
    v16 = sub_22E80F720(a1);
    goto LABEL_19;
  }
LABEL_18:
  sub_22E884578(a1, (int *)v12, 3798, (uint64_t)v24);
  sub_22E3BB0B8((uint64_t)v24);
  v34 = 22;
  sub_22E885940(a1, &v34, 1, 1);
  v16 = *(_DWORD *)(a1 + 40);
LABEL_19:
  v18 = 0;
  *a6 = v16;
LABEL_24:
  *v26 = v27;
  return v18;
}

uint64_t sub_22E816E00(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];

  if (*(unsigned __int16 *)(result + 32) - 367 <= 3)
  {
    v3 = result;
    v4 = (unsigned int *)(result + 16);
    do
    {
      v5 = *(_QWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 40) = *(_DWORD *)(v3 + 16);
      sub_22F18FB4C(*(_QWORD *)(v3 + 8), v4);
      v6 = *(unsigned int *)(v3 + 40);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 56) + 1) & 0x40) == 0)
      {
        v7 = *(_QWORD *)(v3 + 96);
        *(_DWORD *)(v7 + 312) = v6;
        *(_DWORD *)(v7 + 316) = 1848;
        if (*(char *)(v7 + 311) < 0)
        {
          **(_BYTE **)(v7 + 288) = 0;
          *(_QWORD *)(v7 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v7 + 288) = 0;
          *(_BYTE *)(v7 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v11, v7);
        v8 = (unsigned __int8 *)v11[0];
        if (!v11[0])
        {
          v8 = (unsigned __int8 *)sub_22E3B8AAC(v11[1]);
          v11[0] = v8;
        }
        v8[*v8 + 1] = 5;
        v9 = v11[0];
        v10 = *(unsigned __int8 *)v11[0];
        *(_BYTE *)v11[0] = v10 + 1;
        *(_QWORD *)(v9 + 8 * v10 + 16) = v5;
        sub_22E3BB0B8((uint64_t)v11);
      }
      result = sub_22E8118E4(a2, v5, v6 | (v6 << 32), 0, v6, 0, 0, 5u, 0);
    }
    while (*(unsigned __int16 *)(v3 + 32) - 367 < 4);
  }
  return result;
}

unint64_t sub_22E816F38(unint64_t result, uint64_t a2)
{
  const char *v3;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  const char *v31;

  switch(a2)
  {
    case 3:
      if (*(_WORD *)result == 20329 && *(_BYTE *)(result + 2) == 83)
      {
        v3 = "ios";
        goto LABEL_40;
      }
      return result;
    case 4:
      if (*(_DWORD *)result == 1397716596)
      {
        v6 = (unint64_t)"tvos" & 0xFF;
        v7 = (unint64_t)"tvos" & 0xFFFFFFFFFFFFFF00;
        return v6 | v7;
      }
      if (*(_DWORD *)result == 1397715576)
      {
        v3 = "xros";
        goto LABEL_40;
      }
      return result;
    case 5:
      if (*(_DWORD *)result == 1331913069 && *(_BYTE *)(result + 4) == 83)
      {
        v3 = "macos";
        goto LABEL_40;
      }
      return result;
    case 6:
      v5 = *(_DWORD *)result == 1836281705 && *(_WORD *)(result + 4) == 25441;
      v6 = (unint64_t)"maccatalyst" & 0xFF;
      v7 = (unint64_t)"maccatalyst" & 0xFFFFFFFFFFFFFF00;
      if (v5)
        return v6 | v7;
      if (*(_DWORD *)result == 1297305449 && *(_WORD *)(result + 4) == 25441)
        return v6 | v7;
      return result;
    case 7:
      if (*(_DWORD *)result == 1668571511 && *(_DWORD *)(result + 3) == 1397712995)
      {
        v3 = "watchos";
        goto LABEL_40;
      }
      return result;
    case 8:
      if (*(_QWORD *)result == 0x534F656764697262)
      {
        v3 = "bridgeos";
        goto LABEL_40;
      }
      return result;
    case 11:
      if (*(_QWORD *)result == 0x6C6174614363616DLL && *(_QWORD *)(result + 3) == 0x7473796C61746143)
      {
        v3 = "maccatalyst";
LABEL_40:
        v6 = v3;
        v7 = (unint64_t)v3 & 0xFFFFFFFFFFFFFF00;
        return v6 | v7;
      }
      return result;
    case 20:
      if (*(_QWORD *)result == 0x615F63616D736F69
        && *(_QWORD *)(result + 8) == 0x6E657478655F7070
        && *(_DWORD *)(result + 16) == 1852795251)
      {
        goto LABEL_116;
      }
      return result;
    case 23:
      if (*(_QWORD *)result == 0x696C707041534F69
        && *(_QWORD *)(result + 8) == 0x78456E6F69746163
        && *(_QWORD *)(result + 15) == 0x6E6F69736E657478)
      {
        v6 = (unint64_t)"ios_app_extension" & 0xFF;
        v7 = (unint64_t)"ios_app_extension" & 0xFFFFFFFFFFFFFF00;
        return v6 | v7;
      }
      return result;
    case 24:
      if (*(_QWORD *)result == 0x6C707041534F7674
        && *(_QWORD *)(result + 8) == 0x456E6F6974616369
        && *(_QWORD *)(result + 16) == 0x6E6F69736E657478)
      {
        v31 = "tvos_app_extension";
LABEL_124:
        v6 = v31;
        v7 = (unint64_t)v31 & 0xFFFFFFFFFFFFFF00;
        return v6 | v7;
      }
      if (*(_QWORD *)result == 0x6C707041534F7278
        && *(_QWORD *)(result + 8) == 0x456E6F6974616369
        && *(_QWORD *)(result + 16) == 0x6E6F69736E657478)
      {
        v31 = "xros_app_extension";
        goto LABEL_124;
      }
      return result;
    case 25:
      if (*(_QWORD *)result != 0x707041534F63616DLL
        || *(_QWORD *)(result + 8) != 0x6E6F69746163696CLL
        || *(_QWORD *)(result + 16) != 0x6F69736E65747845
        || *(_BYTE *)(result + 24) != 110)
      {
        return result;
      }
      v6 = (unint64_t)"macos_app_extension" & 0xFF;
      v7 = (unint64_t)"macos_app_extension" & 0xFFFFFFFFFFFFFF00;
      return v6 | v7;
    case 26:
      if (*(_QWORD *)result != 0x704163614D534F69
        || *(_QWORD *)(result + 8) != 0x6F69746163696C70
        || *(_QWORD *)(result + 16) != 0x69736E657478456ELL
        || *(_WORD *)(result + 24) != 28271)
      {
        return result;
      }
      goto LABEL_116;
    case 27:
      if (*(_QWORD *)result != 0x41534F6863746177
        || *(_QWORD *)(result + 8) != 0x69746163696C7070
        || *(_QWORD *)(result + 16) != 0x736E657478456E6FLL
        || *(_QWORD *)(result + 19) != 0x6E6F69736E657478)
      {
        return result;
      }
      v6 = (unint64_t)"watchos_app_extension" & 0xFF;
      v7 = (unint64_t)"watchos_app_extension" & 0xFFFFFFFFFFFFFF00;
      return v6 | v7;
    case 31:
      if (*(_QWORD *)result != 0x6C6174614363616DLL
        || *(_QWORD *)(result + 8) != 0x696C707041747379
        || *(_QWORD *)(result + 16) != 0x78456E6F69746163
        || *(_QWORD *)(result + 23) != 0x6E6F69736E657478)
      {
        return result;
      }
LABEL_116:
      v6 = (unint64_t)"maccatalyst_app_extension" & 0xFF;
      v7 = (unint64_t)"maccatalyst_app_extension" & 0xFFFFFFFFFFFFFF00;
      return v6 | v7;
    default:
      return result;
  }
}

uint64_t sub_22E817424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v17;

  v17 = sub_22E8D1AC4(*(_QWORD *)(a1 + 16), 104);
  sub_22F2E2FE8(v17, a2, a3, a4, a5, a6, a7, a8, a9);
  sub_22E828580(a1 + 24, v17);
  return sub_22E828580(a1 + 8, v17);
}

uint64_t sub_22E8174D0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  void *__p;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27[4];

  v6 = *(unsigned int *)(a1 + 16);
  sub_22E835FD0(a1, a2);
  v7 = v6 | ((unint64_t)*(unsigned int *)(a2 + 4) << 32);
  v8 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v8 + 312) = v6;
  *(_DWORD *)(v8 + 316) = 1447;
  if (*(char *)(v8 + 311) < 0)
  {
    **(_BYTE **)(v8 + 288) = 0;
    *(_QWORD *)(v8 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v8 + 288) = 0;
    *(_BYTE *)(v8 + 311) = 0;
  }
  v9 = (uint64_t *)sub_22E78E558((uint64_t)v27, v8);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v19 = a3 | ((unint64_t)a3 << 32);
  v20 = 0;
  v21 = v7;
  v22 = 1;
  v26 = 0;
  sub_22E6D82D0(v9, &v19);
  v14 = 0;
  v13 = 0;
  v16 = 0;
  v17 = 0;
  __p = 0;
  v18 = 0;
  v11 = v7;
  v12 = 1;
  sub_22E6D82D0(v27, &v11);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  if (SHIBYTE(v25) < 0)
    operator delete(v23);
  return sub_22E3BB0B8((uint64_t)v27);
}

uint64_t sub_22E8175C8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE v23[12];
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29[4];

  v4 = a3;
  if ((_DWORD)a3)
  {
    v6 = *a2;
    v7 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v7 + 312) = a3;
    *(_DWORD *)(v7 + 316) = 1446;
    if (*(char *)(v7 + 311) < 0)
    {
      **(_BYTE **)(v7 + 288) = 0;
      *(_QWORD *)(v7 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 288) = 0;
      *(_BYTE *)(v7 + 311) = 0;
    }
    v8 = (uint64_t *)sub_22E78E558((uint64_t)v29, v7);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v22 = v4 | (a3 << 32);
    v23[0] = 0;
    *(_QWORD *)&v23[4] = v6;
    v24 = 1;
    v28 = 0;
    sub_22E6D82D0(v8, &v22);
    v17 = 0;
    v16 = 0;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v21 = 0;
    v14 = v6;
    v15 = 1;
    sub_22E6D82D0(v29, &v14);
    if (SHIBYTE(v20) < 0)
      operator delete(__p);
    if (SHIBYTE(v27) < 0)
      operator delete(v25);
    v9 = v29;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v10 + 312) = *(_DWORD *)a2;
    *(_DWORD *)(v10 + 316) = 1447;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v22, v10);
    v11 = *a2;
    v12 = v22;
    if (!v22)
    {
      v12 = sub_22E3B8AAC(*(uint64_t *)v23);
      v22 = v12;
    }
    sub_22E4D6448(v12 + 336, v11, 1);
    v9 = &v22;
  }
  return sub_22E3BB0B8((uint64_t)v9);
}

void sub_22E817724(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  _QWORD v38[4];
  unsigned __int8 *v39;
  uint64_t v40;
  __int16 v41;
  char v42;
  unsigned int v43[4];
  __int16 v44;

  if (!a4)
    goto LABEL_18;
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 >= 8)
  {
    if ((v8 & 4) == 0)
      goto LABEL_18;
    v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    if (!v16 || *(_DWORD *)(v16 + 8))
      goto LABEL_18;
  }
  v9 = !*(_DWORD *)a2 || *(_DWORD *)(a2 + 4) == 0;
  if (v9
    || (v10 = *(_QWORD *)(a1 + 8),
        v11 = *(_DWORD **)(v10 + 56),
        v12 = *(_QWORD **)(v10 + 88),
        sub_22F1415D0(*(_DWORD *)a2, (uint64_t)v43, v12, v11, 0),
        v44 != 19)
    || (sub_22F410EA4(v43[0], v12, v11, &v39), !v42)
    || v41 != 19)
  {
LABEL_18:
    v19 = *(_QWORD *)(a2 + 8);
    v18 = a2 + 8;
    v17 = v19;
    if ((v19 & 4) != 0)
    {
      v21 = v17 & 0xFFFFFFFFFFFFFFF8;
      v18 = *(_QWORD *)v21;
      v20 = *(_QWORD *)v21 + 8 * *(unsigned int *)(v21 + 8);
    }
    else
    {
      v20 = v18 + 8 * (v17 > 7);
    }
    if (v18 == v20)
      return;
    while (1)
    {
      v22 = *(_QWORD **)v18;
      v23 = *(unsigned __int16 *)(*(_QWORD *)v18 + 28) | (*(unsigned __int8 *)(*(_QWORD *)v18 + 30) << 16);
      if ((v23 & 0x5FFFF) == 0x50011 || (v24 = v23 & 0x70000, v24 == 0x20000) || v24 == 0x10000)
      {
        v25 = *(unsigned __int16 *)(v22[9] + 8);
        if ((v25 - 158) > 0x2D || ((1 << (v25 + 98)) & 0x200000002001) == 0)
        {
          if (v25 == 480)
          {
            if (a5)
            {
              v27 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v27 + 312) = *((_DWORD *)v22 + 4);
              *(_DWORD *)(v27 + 316) = 146;
              if (*(char *)(v27 + 311) < 0)
              {
                **(_BYTE **)(v27 + 288) = 0;
                *(_QWORD *)(v27 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v27 + 288) = 0;
                *(_BYTE *)(v27 + 311) = 0;
              }
              sub_22E78E558((uint64_t)&v39, v27);
              v28 = *v22;
              v29 = v39;
              if (!v39)
              {
                v29 = (unsigned __int8 *)sub_22E3B8AAC(v40);
                v39 = v29;
              }
              v29[*v29 + 1] = 5;
              v30 = v39;
              v31 = *v39;
              *v39 = v31 + 1;
              *(_QWORD *)&v30[8 * v31 + 16] = v28;
              sub_22E4D6448((uint64_t)(v30 + 336), v22[2], 1);
              sub_22E3BB0B8((uint64_t)&v39);
            }
            goto LABEL_43;
          }
LABEL_38:
          v32 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v32 + 312) = *((_DWORD *)v22 + 4);
          *(_DWORD *)(v32 + 316) = a3;
          if (*(char *)(v32 + 311) < 0)
          {
            **(_BYTE **)(v32 + 288) = 0;
            *(_QWORD *)(v32 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v32 + 288) = 0;
            *(_BYTE *)(v32 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v39, v32);
          v33 = *v22;
          v34 = v39;
          if (!v39)
          {
            v34 = (unsigned __int8 *)sub_22E3B8AAC(v40);
            v39 = v34;
          }
          v34[*v34 + 1] = 5;
          v35 = v39;
          v36 = *v39;
          *v39 = v36 + 1;
          *(_QWORD *)&v35[8 * v36 + 16] = v33;
          sub_22E3BB0B8((uint64_t)&v39);
          v22[6] |= 0x10000uLL;
          goto LABEL_43;
        }
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 128) & 8) != 0)
          goto LABEL_38;
      }
LABEL_43:
      v18 += 8;
      if (v18 == v20)
        return;
    }
  }
  v13 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v13 + 312) = *(_DWORD *)a2;
  *(_DWORD *)(v13 + 316) = a3;
  if (*(char *)(v13 + 311) < 0)
  {
    **(_BYTE **)(v13 + 288) = 0;
    *(_QWORD *)(v13 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v13 + 288) = 0;
    *(_BYTE *)(v13 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v38, v13);
  v14 = *(_QWORD *)a2;
  v15 = v38[0];
  if (!v38[0])
  {
    v15 = sub_22E3B8AAC(v38[1]);
    v38[0] = v15;
  }
  sub_22E4D6448(v15 + 336, v14, 1);
  sub_22E3BB0B8((uint64_t)v38);
}

uint64_t sub_22E817A58(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  v2 = result;
  v4 = a2 + 8;
  v3 = *(_QWORD *)(a2 + 8);
  if ((v3 & 4) != 0)
  {
    v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    v4 = *(_QWORD *)v6;
    v5 = *(_QWORD *)v6 + 8 * *(unsigned int *)(v6 + 8);
  }
  else
  {
    v5 = v4 + 8 * (v3 > 7);
  }
  for (; v4 != v5; v4 += 8)
  {
    v7 = *(_QWORD **)v4;
    v8 = *(unsigned __int16 *)(*(_QWORD *)v4 + 28) | (*(unsigned __int8 *)(*(_QWORD *)v4 + 30) << 16);
    if ((v8 & 0x5FFFF) != 0x50011)
    {
      v9 = v8 & 0x70000;
      if (v9 != 0x20000 && v9 != 0x10000)
        continue;
    }
    v10 = *(_QWORD *)(v2 + 96);
    *(_DWORD *)(v10 + 312) = *((_DWORD *)v7 + 4);
    *(_DWORD *)(v10 + 316) = 1801;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v15, v10);
    v11 = *v7;
    v12 = (unsigned __int8 *)v15[0];
    if (!v15[0])
    {
      v12 = (unsigned __int8 *)sub_22E3B8AAC(v15[1]);
      v15[0] = v12;
    }
    v12[*v12 + 1] = 5;
    v13 = v15[0];
    v14 = *(unsigned __int8 *)v15[0];
    *(_BYTE *)v15[0] = v14 + 1;
    *(_QWORD *)(v13 + 8 * v14 + 16) = v11;
    sub_22E4D6448(v13 + 336, v7[2], 1);
    result = sub_22E3BB0B8((uint64_t)v15);
  }
  return result;
}

void sub_22E817BB0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v20 = 0;
    v7 = *(_QWORD *)(a3 + 32);
    v5 = (uint64_t *)(a3 + 32);
    v6 = v7;
    if ((v7 & 4) != 0)
    {
      v10 = v6 & 0xFFFFFFFFFFFFFFF8;
      v9 = *(uint64_t **)v10;
      v8 = *(_QWORD *)v10 + 8 * *(unsigned int *)(v10 + 8);
    }
    else
    {
      v8 = (uint64_t)&v5[v6 > 7];
      v9 = v5;
    }
    if (v9 != (uint64_t *)v8)
    {
      v11 = 0;
      v12 = v5 - 1;
      do
      {
        v13 = *v9;
        v14 = (*(_BYTE *)(*v9 + 30) & 7) << 16;
        v15 = v14 == 196608 && *(_WORD *)(*(_QWORD *)(*v9 + 72) + 8) == 17;
        if (v15 || v14 == 0x40000)
        {
          if (v11)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v11 = v20;
          }
          v21[v11] = v13;
          v11 = ++v20;
        }
        ++v9;
      }
      while (v9 != (uint64_t *)v8);
      v16 = v21;
      if (v11)
      {
        v17 = a2 + 8;
        v18 = 8 * v11;
        do
        {
          v19 = *v16++;
          sub_22E817D2C(v12, v19);
          sub_22E828580(v17, v19);
          v18 -= 8;
        }
        while (v18);
      }
    }
  }
}

unint64_t *sub_22E817D2C(_QWORD *__dst, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;

  v4 = __dst[1];
  v2 = __dst + 1;
  v3 = v4;
  if ((v4 & 4) != 0)
  {
    v7 = v3 & 0xFFFFFFFFFFFFFFF8;
    v6 = *(char **)(v3 & 0xFFFFFFFFFFFFFFF8);
    v5 = &v6[8 * *(unsigned int *)(v7 + 8)];
  }
  else
  {
    v5 = (char *)&v2[v3 > 7];
    v6 = (char *)v2;
  }
  if (v6 != v5)
  {
    while (*(_QWORD *)v6 != a2)
    {
      v6 += 8;
      if (v6 == v5)
      {
        v6 = v5;
        return sub_22E828758(v2, v6);
      }
    }
  }
  return sub_22E828758(v2, v6);
}

unint64_t sub_22E817D84(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5)
{
  __int16 v10;
  __int16 v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  char v30;

  v10 = *(_WORD *)(a1 + 80);
  v11 = *(_WORD *)(a1 + 82);
  v12 = *(_WORD *)(a1 + 84);
  sub_22E8287D8((uint64_t)&v27, a1);
  v13 = *(unsigned __int16 *)(a1 + 32);
  if (v13 > 0x92)
  {
    if (v13 == 147)
    {
LABEL_23:
      if (*(_DWORD *)a4 && *(_DWORD *)(a4 + 4))
      {
        sub_22E8175C8(a1, (uint64_t *)a4, 0);
        sub_22E820B10((_QWORD *)a4);
      }
      v18 = sub_22E87D494(a1, a2, a3, a4, 3);
      goto LABEL_20;
    }
    if (v13 == 154)
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v18 = sub_22E82A4C4(a1, a2, &v24, a3, a4);
      goto LABEL_20;
    }
    if (v13 != 165)
    {
LABEL_19:
      v18 = (unint64_t)sub_22E81801C(a1, a2, a3, a4, 1, 0, a5);
      goto LABEL_20;
    }
  }
  else
  {
    if (*(unsigned __int16 *)(a1 + 32) > 0x8Au)
    {
      if (v13 == 139)
      {
        if (*(_DWORD *)a4 && *(_DWORD *)(a4 + 4))
        {
          sub_22E8175C8(a1, (uint64_t *)a4, 0);
          sub_22E820B10((_QWORD *)a4);
        }
        v14 = a1;
        v15 = a2;
        v16 = a3;
        v17 = 0;
LABEL_8:
        v18 = sub_22E829238(v14, v15, v16, v17);
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    if (v13 == 92)
    {
      v21 = *(_QWORD *)(a1 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v21 + 56) + 1) & 1) != 0)
      {
        v22 = *(_QWORD *)(v21 + 2816);
        v23 = v22 >= *(unsigned int *)(v21 + 2784) ? sub_22F162D2C(v21, 1u) : *(_QWORD *)(v21 + 2776) + 24 * v22;
        if (*(_WORD *)(v23 + 16) == 139)
        {
          if (*(_DWORD *)a4 && *(_DWORD *)(a4 + 4))
          {
            sub_22E8175C8(a1, (uint64_t *)a4, 0);
            sub_22E820B10((_QWORD *)a4);
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v17 = *(_DWORD *)(a1 + 40);
          v14 = a1;
          v15 = a2;
          v16 = a3;
          goto LABEL_8;
        }
      }
      goto LABEL_19;
    }
    if (v13 != 120)
    {
      if (v13 != 135)
        goto LABEL_19;
      goto LABEL_23;
    }
  }
  if (*(_DWORD *)a4 && *(_DWORD *)(a4 + 4))
  {
    sub_22E8175C8(a1, (uint64_t *)a4, 0);
    sub_22E820B10((_QWORD *)a4);
  }
  v18 = sub_22E82BC2C(a1, a3);
LABEL_20:
  v19 = v18;
  if (v28)
    sub_22F31E524(*(_QWORD *)(v27 + 88), v28);
  *v29 = v30;
  sub_22E80F8BC(a1 + 2416, (unsigned __int16 *)a1);
  *(_WORD *)(a1 + 80) = v10;
  *(_WORD *)(a1 + 82) = v11;
  *(_WORD *)(a1 + 84) = v12;
  return v19;
}

unsigned int *sub_22E81801C(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, int a5, uint64_t a6, _DWORD *a7)
{
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  void *v27[2];
  _BYTE v28[24];
  uint64_t v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  void *v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v29[0] = 0;
  v29[2] = 0;
  v30 = 0;
  v31 = 0;
  v32 = a1 + 960;
  v33 = 0u;
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0;
  v13 = *(_QWORD **)(a1 + 88);
  v44 = 0;
  v45 = v13;
  v46[0] = 0;
  v46[1] = &v47;
  v46[2] = 0x400000000;
  v14 = v13[400];
  v13[400] = v46;
  v48 = v14;
  v49 = 0;
  if ((a2 & 0xFFFFFFFE) == 0x16)
    v15 = 7;
  else
    v15 = 4 * ((a2 & 0xFFFFFFFE) == 24);
  if ((a2 & 0xFFFFFFFE) == 0x14)
    v16 = 3;
  else
    v16 = v15;
  if (a2 == 12)
    v17 = 6;
  else
    v17 = v16;
  if (a2 == 7)
    v17 = 1;
  if (a2)
    v18 = v17;
  else
    v18 = 5;
  v27[0] = v28;
  v27[1] = (void *)0x200000000;
  v28[16] = 1;
  LODWORD(v24) = 0;
  v25 = 0;
  v26 = 0;
  sub_22E818334(a1, v29, &v24, 3, v18, v27, 0);
  if ((v29[0] & 0x200000) != 0
    && (*(_BYTE *)(v29[1] + 74) & 1) != 0
    && (sub_22E81B924(a1, (uint64_t)v29, 3, v18, 0) & 1) != 0)
  {
    v20 = 0;
    goto LABEL_21;
  }
  if (*(_WORD *)(a1 + 32) != 62)
  {
    if (a7)
      DWORD2(v35) = *a7;
    sub_22E82103C((uint64_t)&v30, a4);
    v19 = sub_22E81BCEC(a1, v29, a2, a3, a6, v27);
    goto LABEL_20;
  }
  if (*(_DWORD *)a4 && *(_DWORD *)(a4 + 4))
  {
    sub_22E8175C8(a1, (uint64_t *)a4, 0);
    sub_22E820B10((_QWORD *)a4);
  }
  *a3 = *(_DWORD *)(a1 + 16);
  if (a5)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  }
  v23 = 0;
  v20 = (unsigned int *)sub_22EA0F52C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 3, (unsigned int *)v29, 0, 0, 0, &v23);
  if (!v49)
  {
    sub_22EA7E84C(v45, v48, v20);
    v49 = 1;
  }
  if (v23)
  {
    v24 = v23;
    v25 = v20;
    v19 = sub_22EA2D7B4(*(_QWORD **)(a1 + 88), &v24, 2uLL);
LABEL_20:
    v20 = (unsigned int *)v19;
  }
LABEL_21:
  if (v27[0] != v28)
    free(v27[0]);
  sub_22E828C30((uint64_t)&v45);
  if (DWORD1(v35))
    free(v34[1]);
  sub_22E8D1BC4(v32, (uint64_t)&v32);
  sub_22E80F94C((uint64_t *)&v33);
  sub_22E80F94C(&v31);
  return v20;
}

uint64_t *sub_22E818334(uint64_t a1, uint64_t a2, int *a3, int a4, int a5, uint64_t a6, int a7)
{
  BOOL v11;
  _BOOL4 v12;
  char v13;
  int *v14;
  const char *v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  unint64_t *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  uint64_t *v70;
  _DWORD *v71;
  char v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unint64_t v89;
  char *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  int v98;
  const char *v99;
  uint64_t v100;
  unint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  const char *v126;
  BOOL v127;
  _BYTE *v128;
  char *v129;
  unsigned __int8 *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  int v134;
  int v135;
  int v136;
  BOOL v137;
  char *v138;
  unsigned __int8 *v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  const char *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  unsigned __int8 *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  uint64_t v166;
  void **v167;
  size_t v168;
  const char *v169;
  unsigned __int8 *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  const char *v176;
  unsigned __int8 *v177;
  _QWORD *v178;
  uint64_t v179;
  unint64_t v180;
  void **v181;
  uint64_t v182;
  const char *v183;
  unsigned __int8 *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  unsigned __int8 *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  unsigned __int8 *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  unsigned __int8 *v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  int v212;
  int v213;
  unint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  _BOOL4 v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char v234;
  int v235;
  char v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  unsigned int v249;
  uint64_t v250;
  char v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unsigned int *v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  uint64_t v264;
  unsigned int v265;
  int v266;
  int v267;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;
  unsigned __int8 *v272;
  _QWORD *v273;
  uint64_t v274;
  void **v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  int v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  int v291;
  int v292;
  int v293;
  uint64_t v294;
  BOOL v295;
  int v296;
  uint64_t v297;
  const char *v298;
  unsigned __int8 *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *result;
  unsigned int v310;
  uint64_t v311;
  int v312;
  _BOOL4 v313;
  unsigned int v314;
  uint64_t v315;
  uint64_t v317;
  unsigned int v318;
  int v320;
  int v321;
  _BYTE v323[32];
  _BYTE v324[32];
  _BYTE v325[32];
  void *__p[5];
  uint64_t v327;
  char v328;
  _BYTE v329[32];
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  const char *v335[3];
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  _OWORD v340[2];
  uint64_t (*v341)(uint64_t);
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char v345;
  uint64_t v346;

  v346 = *MEMORY[0x24BDAC8D0];
  if (HIDWORD(*(_QWORD *)(a2 + 88)))
    v11 = *(_QWORD *)(a2 + 88) == 0;
  else
    v11 = 1;
  if (v11)
    *(_QWORD *)(a2 + 88) = *(unsigned int *)(a1 + 16);
  v12 = a5 == 1;
  v313 = a5 == 5;
  if (a5 == 5)
    v12 = 1;
  v320 = v12;
  v336 = 0;
  v337 = 0;
  v317 = a1 + 960;
  v338 = a1 + 960;
  v339 = 0;
  v13 = 0;
  v14 = (int *)(a1 + 16);
  v335[1] = (const char *)sub_22E8FCD8C(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 80));
  v335[2] = v15;
  v315 = a2 + 64;
  v321 = a5;
  v314 = 0x267u >> a5;
  v318 = (0x267u >> a5) & 1;
  while (1)
  {
LABEL_10:
    v334 = 0;
    v335[0] = 0;
    v16 = *(_QWORD *)(a1 + 8);
    if ((**(_BYTE **)(v16 + 56) & 0x10) == 0)
      goto LABEL_11;
    v17 = *(unsigned __int16 *)(a1 + 32);
    if (v17 == 114)
    {
      if ((*(_QWORD *)a2 & 0x3FFC7) == 1)
      {
        v18 = *(_QWORD *)(v16 + 2816);
        v19 = v18 >= *(unsigned int *)(v16 + 2784) ? sub_22F162D2C(v16, 1u) : *(_QWORD *)(v16 + 2776) + 24 * v18;
        if (*(_WORD *)(v19 + 16) == 46)
        {
          v17 = 5;
          *(_WORD *)(a1 + 32) = 5;
          v20 = *(unsigned int *)(a1 + 16);
          v21 = *a3;
          goto LABEL_27;
        }
      }
LABEL_11:
      v17 = *(unsigned __int16 *)(a1 + 32);
    }
    v20 = *v14;
    v21 = *a3;
    if (v17 > 45)
      break;
    switch(v17)
    {
      case 5:
LABEL_27:
        if ((*(_DWORD *)a2 & 0x3FFC0) != 0)
          goto LABEL_739;
        v24 = *(_QWORD *)(a1 + 8);
        v25 = **(_QWORD **)(v24 + 56);
        if (v17 != 5
          || (v25 & 0x10000000) != 0
          || (v26 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16), *(_DWORD *)v26 != 10)
          || ((v27 = *(_QWORD *)(v26 + 16), v28 = *(unsigned __int16 *)(v26 + 24), v27 == 0x70736C6365645F5FLL)
            ? (v29 = v28 == 25445)
            : (v29 = 0),
              !v29))
        {
          if ((v25 & 0x100) == 0)
            goto LABEL_57;
          goto LABEL_36;
        }
        v52 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v52 + 312) = v20;
        *(_DWORD *)(v52 + 316) = 1611;
        if (*(char *)(v52 + 311) < 0)
        {
          **(_BYTE **)(v52 + 288) = 0;
          *(_QWORD *)(v52 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v52 + 288) = 0;
          *(_BYTE *)(v52 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v329, v52);
        sub_22E3BB0B8((uint64_t)v329);
        v24 = *(_QWORD *)(a1 + 8);
        v53 = *(_QWORD *)(v24 + 2816);
        if (v53 >= *(unsigned int *)(v24 + 2784))
        {
          v54 = sub_22F162D2C(v24, 1u);
          v24 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          v54 = *(_QWORD *)(v24 + 2776) + 24 * v53;
        }
        if (*(_WORD *)(v54 + 16) == 21)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(v24, (unsigned int *)(a1 + 16));
          *(_QWORD *)&v340[0] = a1 + 944;
          BYTE8(v340[0]) = *(_BYTE *)(a1 + 944);
          v194 = 1;
          *(_BYTE *)(a1 + 944) = 1;
          *(_QWORD *)&v340[1] = a1;
          DWORD2(v340[1]) = 1441813;
          strcpy((char *)&v340[1] + 12, ">");
          v343 = 0;
          v341 = sub_22E80F720;
          v342 = 0;
          if ((sub_22E811DE8((uint64_t)v340) & 1) == 0)
          {
            sub_22F2F18E0((uint64_t)v340);
            v194 = 2;
          }
          **(_BYTE **)&v340[0] = BYTE8(v340[0]);
          goto LABEL_590;
        }
        if ((**(_QWORD **)(v24 + 56) & 0x100) != 0)
        {
LABEL_36:
          v30 = *(_QWORD *)(a1 + 88);
          v340[0] = v30;
          *(_QWORD *)&v340[1] = &v341;
          *((_QWORD *)&v340[1] + 1) = 0x400000000;
          if ((v21 & 0xFFFFFFFE) == 2)
          {
            v31 = *(_QWORD *)(v30 + 3200);
            *(_QWORD *)(v30 + 3200) = (char *)v340 + 8;
            v344 = v31;
            v345 = 1;
            v32 = sub_22E88BDA8(a1, v320);
            sub_22EA7E84C(*(_QWORD **)&v340[0], v344, 0);
            v345 = 0;
            if (v32)
            {
              if (DWORD2(v340[1]))
                sub_22E836A10(*(_QWORD *)(*(_QWORD *)&v340[0] + 3200), (uint64_t)v340 + 8);
LABEL_721:
              *(_QWORD *)a2 = *(_QWORD *)a2 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
              *(_DWORD *)(a2 + 120) = 0;
              *(_DWORD *)(a2 + 132) = 0;
              sub_22E828B78((uint64_t)v340);
              goto LABEL_739;
            }
          }
          else
          {
            v345 = 0;
            if ((sub_22E88BDA8(a1, v320) & 1) != 0)
              goto LABEL_721;
          }
          v33 = *(unsigned __int16 *)(a1 + 32);
          sub_22E828B78((uint64_t)v340);
          if (v33 == 5)
          {
            v24 = *(_QWORD *)(a1 + 8);
            goto LABEL_57;
          }
        }
        else
        {
LABEL_57:
          v34 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8);
          if ((v34 & 0xC0000000000) == 0)
            goto LABEL_473;
          v35 = *(unsigned __int16 *)(a1 + 32);
          v36 = v35 - 7;
          if ((v35 - 7) >= 6)
          {
            v39 = 0;
            v40 = v35 - 13;
            if ((v35 - 13) >= 6 && v35 != 1)
              v39 = *(_QWORD *)(a1 + 24);
            v37 = *(_QWORD *)(a1 + 344);
            if (v39 == v37)
              goto LABEL_443;
            v41 = 0;
            if (v40 >= 6 && v35 != 1)
              v41 = *(_QWORD *)(a1 + 24);
            if (v41 == *(_QWORD *)(a1 + 352))
              goto LABEL_443;
            v38 = 0;
            if (v40 >= 6 && v35 != 1)
              v38 = *(_QWORD *)(a1 + 24);
          }
          else
          {
            v37 = *(_QWORD *)(a1 + 344);
            if (!v37 || !*(_QWORD *)(a1 + 352))
              goto LABEL_441;
            v38 = 0;
          }
          if (v38 != *(_QWORD *)(a1 + 360))
          {
            if ((v34 & 0x40000000000) == 0)
              goto LABEL_473;
            if (v36 >= 6)
            {
              v42 = 0;
              if ((v35 - 13) >= 6 && v35 != 1)
                v42 = *(_QWORD *)(a1 + 24);
            }
            else
            {
              v42 = 0;
            }
            if (v42 != *(_QWORD *)(a1 + 368))
              goto LABEL_473;
          }
          if (v36 < 6)
          {
LABEL_441:
            if (v37)
            {
              v216 = 0;
LABEL_446:
              if (v216 == *(_QWORD *)(a1 + 368) && (*(_BYTE *)(a2 + 2) & 4) != 0)
              {
                v133 = (unint64_t *)a2;
                v134 = v20;
LABEL_467:
                v145 = sub_22E8ADA48(v133, 1, v134, (uint64_t *)v335, (_DWORD *)&v334 + 1);
LABEL_324:
                LODWORD(v75) = v145;
LABEL_325:
                v47 = 0;
                goto LABEL_326;
              }
              if (v36 >= 6)
              {
                v218 = 0;
                if ((v35 - 13) >= 6 && v35 != 1)
                  v218 = *(_QWORD *)(a1 + 24);
              }
              else
              {
                v218 = 0;
              }
              if (v218 == *(_QWORD *)(a1 + 352) && (*(_BYTE *)(a2 + 2) & 4) != 0)
              {
                v151 = (unint64_t *)a2;
                v152 = v20;
LABEL_456:
                v145 = sub_22E8ADAD8(v151, 1, v152, (uint64_t *)v335, (_DWORD *)&v334 + 1);
                goto LABEL_324;
              }
              goto LABEL_473;
            }
            goto LABEL_450;
          }
LABEL_443:
          v217 = 0;
          if ((v35 - 13) >= 6 && v35 != 1)
            v217 = *(_QWORD *)(a1 + 24);
          if (v217 != v37)
          {
            v216 = 0;
            if ((v35 - 13) >= 6 && v35 != 1)
              v216 = *(_QWORD *)(a1 + 24);
            goto LABEL_446;
          }
LABEL_450:
          v219 = *(_QWORD *)(v24 + 2816);
          if (v219 >= *(unsigned int *)(v24 + 2784))
            v220 = sub_22F162D2C(v24, 1u);
          else
            v220 = *(_QWORD *)(v24 + 2776) + 24 * v219;
          v221 = *(_QWORD *)(v220 + 8);
          v222 = *(unsigned __int16 *)(v220 + 16);
          if ((v222 - 79) <= 0x31 && ((1 << (v222 - 79)) & 0x2001060624221) != 0
            || (v222 - 356) < 2
            || v222 == 5
            && (v221 == *(_QWORD *)(a1 + 368) || v221 == *(_QWORD *)(a1 + 352) || v221 == *(_QWORD *)(a1 + 360)))
          {
            v77 = *(_QWORD *)a2;
            v78 = (*(_QWORD *)a2 >> 12) & 0x3F;
            if (v78)
            {
              if (v78 == 50)
              {
LABEL_184:
                LODWORD(v75) = 0;
              }
              else
              {
LABEL_462:
                v335[0] = (const char *)sub_22F2F2CB0(v78);
                v62 = 3694;
LABEL_553:
                HIDWORD(v334) = v62;
                LODWORD(v75) = 1;
              }
            }
            else
            {
LABEL_463:
              LODWORD(v75) = 0;
              *(_QWORD *)a2 = v77 | 0x40000;
              *(_DWORD *)(a2 + 124) = v20;
            }
            goto LABEL_325;
          }
LABEL_473:
          if ((*(_BYTE *)(a2 + 2) & 4) != 0)
            goto LABEL_739;
          if (v321 != 8)
          {
            v224 = *(_QWORD *)(a1 + 88);
            if (v321 == 1 && (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x100) != 0)
            {
              v228 = *(_QWORD *)(v224 + 216);
              if (v228)
              {
                if ((*(_WORD *)(v228 + 8) & 0x7Fu) - 35 <= 2)
                {
                  v229 = *(_QWORD *)(v228 - 24);
                  if ((v229 & 7) == 0 && *(_QWORD *)(a1 + 24) == (v229 & 0xFFFFFFFFFFFFFFF8))
                  {
                    if ((sub_22E820B78(a1, 1u, 0) & 1) != 0)
                      goto LABEL_739;
                    v224 = *(_QWORD *)(a1 + 88);
                  }
                }
              }
            }
            goto LABEL_487;
          }
          v223 = sub_22E8210F4(a1);
          v224 = *(_QWORD *)(a1 + 88);
          if (v223)
          {
            v225 = sub_22F34B7F0(v224, v20);
            v226 = *(_QWORD *)a2;
            v227 = (*(_QWORD *)a2 >> 12) & 0x3F;
            if (!v227)
            {
              *(_DWORD *)(a2 + 120) = v20;
              *(_DWORD *)(a2 + 132) = v20;
              *(_QWORD *)a2 = v226 & 0xFFFFFFFFFFDC0FFFLL | 0x1C000;
              *(_QWORD *)(a2 + 8) = v225;
              goto LABEL_478;
            }
            if (v227 != 50)
            {
              v161 = (*(_QWORD *)a2 >> 12) & 0x3F;
              goto LABEL_688;
            }
LABEL_478:
            *(_DWORD *)(a2 + 92) = v20;
LABEL_405:
            v210 = *(_DWORD *)(a1 + 16);
LABEL_437:
            *(_DWORD *)(a1 + 40) = v210;
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          }
          else
          {
LABEL_487:
            v230 = sub_22EA003D8((_QWORD *)v224, *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 16), *(uint64_t **)(v224 + 12888), 0, 0, 0, 0, 0, 0, v318, 0);
            if (v230)
            {
              v231 = v230;
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 8) != 0
                && (v321 | 4) == 5
                && sub_22ED5735C(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 16), 0)&& (sub_22E820B78(a1, 1u, 1) & 1) != 0)
              {
                goto LABEL_739;
              }
              v232 = *(_QWORD *)a2;
              v161 = (*(_QWORD *)a2 >> 12) & 0x3F;
              if (!v161)
              {
                *(_DWORD *)(a2 + 120) = v20;
                *(_DWORD *)(a2 + 132) = v20;
                *(_QWORD *)a2 = v232 & 0xFFFFFFFFFFDC0FFFLL | 0x1C000;
                *(_QWORD *)(a2 + 8) = v231;
                goto LABEL_494;
              }
              if (v161 == 50)
              {
LABEL_494:
                *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 16);
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
                if (*(_WORD *)(a1 + 32) == 46
                  && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 0x40) != 0)
                {
                  LODWORD(v340[0]) = 0;
                  v233 = sub_22F2EA184(a1, v20, v231, 1, v340);
                  if (!v234)
                  {
                    if (v233)
                    {
                      *(_QWORD *)(a2 + 8) = v233;
                      *(_DWORD *)(a2 + 92) = v340[0];
                    }
                  }
                }
              }
              else
              {
LABEL_688:
                v47 = 0;
                v335[0] = (const char *)sub_22F2F2CB0(v161);
                v205 = 3658;
LABEL_398:
                HIDWORD(v334) = v205;
LABEL_286:
                LODWORD(v75) = 1;
LABEL_326:
                v163 = v334;
LABEL_327:
                v164 = v163;
                if (!v163)
                  v164 = *v14;
                *(_DWORD *)(a2 + 92) = v164;
                if ((_DWORD)v75)
                {
                  v165 = HIDWORD(v334);
                  if (SHIDWORD(v334) <= 89)
                  {
                    if (HIDWORD(v334) == 13)
                      goto LABEL_349;
                    if (HIDWORD(v334) != 53)
                      goto LABEL_361;
                    v166 = *(_QWORD *)(a1 + 96);
                    *(_DWORD *)(v166 + 312) = v20;
                    *(_DWORD *)(v166 + 316) = 53;
                    if (*(char *)(v166 + 311) < 0)
                    {
                      **(_BYTE **)(v166 + 288) = 0;
                      *(_QWORD *)(v166 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v166 + 288) = 0;
                      *(_BYTE *)(v166 + 311) = 0;
                    }
                    sub_22E78E558((uint64_t)v340, v166);
                    sub_22F1D47B8(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56), __p);
                    if (SHIBYTE(__p[2]) >= 0)
                      v167 = __p;
                    else
                      v167 = (void **)__p[0];
                    if (SHIBYTE(__p[2]) >= 0)
                      v168 = HIBYTE(__p[2]) & 0x7F;
                    else
                      v168 = (size_t)__p[1];
                    sub_22E3B89A8((unsigned __int8 **)v340, v167, v168);
                    v169 = v335[0];
                    v170 = *(unsigned __int8 **)&v340[0];
                    if (!*(_QWORD *)&v340[0])
                    {
                      v170 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
                      *(_QWORD *)&v340[0] = v170;
                    }
                    v170[*v170 + 1] = 1;
                    v171 = *(_QWORD *)&v340[0];
                    v172 = **(_BYTE **)&v340[0];
                    **(_BYTE **)&v340[0] = v172 + 1;
                    *(_QWORD *)(v171 + 8 * v172 + 16) = v169;
                    *(_BYTE *)(v171 + (v172 + 1) + 1) = 2;
                    v173 = *(_QWORD *)&v340[0];
                    v174 = **(_BYTE **)&v340[0];
                    **(_BYTE **)&v340[0] = v174 + 1;
                    *(_QWORD *)(v173 + 8 * v174 + 16) = v47;
                    if (SHIBYTE(__p[2]) < 0)
                      operator delete(__p[0]);
                  }
                  else
                  {
                    if (HIDWORD(v334) == 90)
                      goto LABEL_349;
                    if (HIDWORD(v334) != 3901)
                    {
                      if (HIDWORD(v334) != 94)
                      {
LABEL_361:
                        v189 = *(_QWORD *)(a1 + 96);
                        *(_DWORD *)(v189 + 312) = v20;
                        *(_DWORD *)(v189 + 316) = v165;
                        if (*(char *)(v189 + 311) < 0)
                        {
                          **(_BYTE **)(v189 + 288) = 0;
                          *(_QWORD *)(v189 + 296) = 0;
                        }
                        else
                        {
                          *(_BYTE *)(v189 + 288) = 0;
                          *(_BYTE *)(v189 + 311) = 0;
                        }
                        sub_22E78E558((uint64_t)v340, v189);
                        v190 = v335[0];
                        v191 = *(unsigned __int8 **)&v340[0];
                        if (!*(_QWORD *)&v340[0])
                        {
                          v191 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
                          *(_QWORD *)&v340[0] = v191;
                        }
                        v191[*v191 + 1] = 1;
                        v192 = *(_QWORD *)&v340[0];
                        v193 = **(_BYTE **)&v340[0];
                        **(_BYTE **)&v340[0] = v193 + 1;
                        *(_QWORD *)(v192 + 8 * v193 + 16) = v190;
                        goto LABEL_366;
                      }
LABEL_349:
                      v175 = *(_QWORD *)(a1 + 96);
                      *(_DWORD *)(v175 + 312) = v20;
                      *(_DWORD *)(v175 + 316) = v165;
                      if (*(char *)(v175 + 311) < 0)
                      {
                        **(_BYTE **)(v175 + 288) = 0;
                        *(_QWORD *)(v175 + 296) = 0;
                      }
                      else
                      {
                        *(_BYTE *)(v175 + 288) = 0;
                        *(_BYTE *)(v175 + 311) = 0;
                      }
                      sub_22E78E558((uint64_t)__p, v175);
                      v176 = v335[0];
                      v177 = (unsigned __int8 *)__p[0];
                      if (!__p[0])
                      {
                        v177 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
                        __p[0] = v177;
                      }
                      v177[*v177 + 1] = 1;
                      v178 = __p[0];
                      v179 = *(unsigned __int8 *)__p[0];
                      *(_BYTE *)__p[0] = v179 + 1;
                      v178[v179 + 2] = v176;
                      v180 = v20 | ((unint64_t)*(unsigned int *)(a2 + 92) << 32);
                      *(_QWORD *)((char *)v340 + 12) = 0;
                      BYTE4(v340[1]) = 0;
                      v341 = 0;
                      v342 = 0;
                      *((_QWORD *)&v340[1] + 1) = 0;
                      LOBYTE(v343) = 0;
                      *(_QWORD *)&v340[0] = v180;
                      BYTE8(v340[0]) = 1;
                      sub_22E6D82D0((uint64_t *)__p, v340);
                      if (SHIBYTE(v342) < 0)
                        operator delete(*((void **)&v340[1] + 1));
                      v181 = __p;
LABEL_367:
                      sub_22E3BB0B8((uint64_t)v181);
                      goto LABEL_368;
                    }
                    v182 = *(_QWORD *)(a1 + 96);
                    *(_DWORD *)(v182 + 312) = v20;
                    *(_DWORD *)(v182 + 316) = 3901;
                    if (*(char *)(v182 + 311) < 0)
                    {
                      **(_BYTE **)(v182 + 288) = 0;
                      *(_QWORD *)(v182 + 296) = 0;
                    }
                    else
                    {
                      *(_BYTE *)(v182 + 288) = 0;
                      *(_BYTE *)(v182 + 311) = 0;
                    }
                    sub_22E78E558((uint64_t)v340, v182);
                    v183 = v335[0];
                    v184 = *(unsigned __int8 **)&v340[0];
                    if (!*(_QWORD *)&v340[0])
                    {
                      v184 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
                      *(_QWORD *)&v340[0] = v184;
                    }
                    v184[*v184 + 1] = 1;
                    v185 = *(_QWORD *)&v340[0];
                    v186 = **(_BYTE **)&v340[0];
                    **(_BYTE **)&v340[0] = v186 + 1;
                    *(_QWORD *)(v185 + 8 * v186 + 16) = v183;
                    *(_BYTE *)(v185 + (v186 + 1) + 1) = 2;
                    v187 = *(_QWORD *)&v340[0];
                    v188 = **(_BYTE **)&v340[0];
                    **(_BYTE **)&v340[0] = v188 + 1;
                    *(_QWORD *)(v187 + 8 * v188 + 16) = v47;
                  }
LABEL_366:
                  v181 = (void **)v340;
                  goto LABEL_367;
                }
LABEL_368:
                v13 = 0;
                if (!v163 && HIDWORD(v334) != 1457)
                {
                  sub_22E80F0F0(a1, 0);
                  v13 = 0;
                }
              }
            }
            else
            {
              if ((sub_22E88001C(a1) & 1) != 0)
                goto LABEL_739;
              if (*(_WORD *)(a1 + 32) == 5)
              {
                v340[0] = 0uLL;
                v340[1] = (unint64_t)v317;
                v235 = sub_22E81DD9C(a1, a2, 0, (uint64_t)a3, a4, v321, (uint64_t *)v340);
                v236 = v235;
                if (v235)
                {
                  if (*((_QWORD *)&v340[0] + 1) >= 8uLL
                    && ((BYTE8(v340[0]) & 4) == 0
                     || (*((_QWORD *)&v340[0] + 1) & 0xFFFFFFFFFFFFFFF8) == 0
                     || *(_DWORD *)((*((_QWORD *)&v340[0] + 1) & 0xFFFFFFFFFFFFFFF8) + 8)))
                  {
                    sub_22E82103C((uint64_t)&v336, (uint64_t)v340);
                    v13 = 1;
                  }
                  v194 = 2;
                }
                else
                {
                  v194 = 5;
                }
                sub_22E8D1BC4(*(uint64_t *)&v340[1], (uint64_t)&v340[1]);
                sub_22E80F94C((uint64_t *)&v340[1] + 1);
                sub_22E80F94C((uint64_t *)v340 + 1);
                if ((v236 & 1) == 0)
                  goto LABEL_739;
LABEL_590:
                if (v194 != 2)
                  goto LABEL_745;
              }
            }
          }
        }
        break;
      case 19:
LABEL_48:
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 20) & 0x1000000000) == 0
          || !sub_22E8836FC(a1, 0, 0))
        {
          goto LABEL_739;
        }
        if ((_DWORD)v336 && HIDWORD(v336))
        {
          sub_22E8175C8(a1, &v336, 0);
          sub_22E820B10(&v336);
        }
        sub_22E820B10(&v336);
        v336 = 0;
        sub_22E835FD0(a1, &v336);
        v13 = 1;
        break;
      case 3:
        v302 = *(_QWORD *)(a1 + 88);
        v303 = *(_QWORD *)(v302 + 12888);
        if ((*(_QWORD *)a2 & 0x3FFC0) != 0)
        {
          v304 = *(_DWORD *)(v303 + 8) & 0x5D0;
          v305 = (*(_QWORD *)a2 >> 36) & 1;
          if (v321 != 1)
            LODWORD(v305) = v313;
          if (v321 == 5)
            v306 = v313;
          else
            v306 = v305;
          v307 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(v307 + 752))
          {
            *(_BYTE *)(v307 + 864) = 1;
            *(_BYTE *)(*(_QWORD *)(v307 + 48) + 6) = 1;
          }
          *(_WORD *)(a1 + 32) = 1;
          sub_22E9BEB54(v302, v303, (uint64_t *)a2, v304 == 0, v306);
        }
        else
        {
          if (*(_QWORD *)(v303 + 24) || *(_QWORD *)(v303 + 56))
          {
            v310 = 14;
          }
          else if (v21)
          {
            if (v321 == 1)
              v310 = 6;
            else
              v310 = 5;
          }
          else if (v321 == 1)
          {
            v310 = 1;
          }
          else if (*(_QWORD *)(a1 + 2688))
          {
            v310 = 3;
          }
          else
          {
            v310 = 0;
          }
          v311 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(v311 + 752))
          {
            *(_BYTE *)(v311 + 864) = 1;
            *(_BYTE *)(*(_QWORD *)(v311 + 48) + 6) = 1;
          }
          *(_WORD *)(a1 + 32) = 1;
          sub_22F313608(v302, v303, v310);
        }
        goto LABEL_745;
      default:
        goto LABEL_739;
    }
  }
  switch(v17)
  {
    case 71:
      if (!sub_22E88BDA8(a1, v320))
      {
        if (*(_WORD *)(a1 + 32) == 71)
          goto LABEL_739;
        goto LABEL_10;
      }
      v308 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x3FFC0) == 0)
      {
LABEL_738:
        *(_QWORD *)a2 = v308 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
        *(_DWORD *)(a2 + 120) = 0;
        *(_DWORD *)(a2 + 132) = 0;
      }
LABEL_739:
      if ((v13 & 1) != 0)
      {
        sub_22E817724(a1, (uint64_t)&v336, 6, 0, 0);
        sub_22E82103C(a2 + 24, (uint64_t)&v336);
      }
      else if ((_DWORD)v336 && HIDWORD(v336))
      {
        sub_22E8175C8(a1, &v336, 0);
        sub_22E820B10(&v336);
      }
      sub_22E8ADC50(a2, *(_QWORD *)(a1 + 88));
LABEL_745:
      sub_22E8D1BC4(v338, (uint64_t)&v338);
      sub_22E80F94C(&v339);
      return sub_22E80F94C(&v337);
    case 72:
    case 73:
    case 74:
    case 75:
    case 77:
    case 78:
    case 81:
    case 82:
    case 83:
    case 85:
    case 89:
    case 90:
    case 91:
    case 99:
    case 102:
    case 105:
    case 111:
    case 113:
    case 117:
    case 120:
    case 122:
    case 123:
    case 124:
    case 127:
    case 129:
    case 131:
    case 132:
    case 133:
    case 135:
    case 136:
    case 139:
    case 140:
    case 141:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 153:
    case 154:
    case 158:
    case 163:
    case 164:
    case 165:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 184:
    case 185:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 199:
    case 201:
    case 202:
    case 204:
    case 205:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 333:
    case 334:
    case 348:
    case 352:
    case 353:
    case 360:
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 376:
    case 377:
    case 378:
    case 379:
    case 381:
    case 382:
    case 383:
    case 384:
    case 385:
    case 387:
    case 388:
    case 389:
    case 390:
    case 392:
    case 393:
    case 394:
    case 395:
    case 396:
    case 397:
    case 398:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 408:
    case 409:
    case 411:
    case 412:
    case 413:
    case 414:
    case 415:
    case 416:
    case 417:
    case 418:
    case 419:
    case 420:
    case 421:
    case 422:
    case 423:
      goto LABEL_739;
    case 76:
      v116 = *(_QWORD *)(a1 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v116 + 56) + 1) & 2) == 0)
      {
        v85 = *(_QWORD *)(a1 + 88);
        v86 = a2;
        v87 = 4;
LABEL_258:
        v135 = sub_22E8AD658(v86, v85, v87, v20, v335, (int *)&v334 + 1);
        goto LABEL_259;
      }
      v200 = *(_QWORD *)(v116 + 2816);
      if (v200 >= *(unsigned int *)(v116 + 2784))
      {
        v116 = sub_22F162D2C(v116, 1u);
        v201 = v116;
      }
      else
      {
        v201 = *(_QWORD *)(v116 + 2776) + 24 * v200;
      }
      if (!sub_22E821180(v116, v201))
      {
        v135 = sub_22E8AD898((unint64_t *)a2, 33, v20, (uint64_t *)v335, (_DWORD *)&v334 + 1);
LABEL_259:
        LODWORD(v75) = v135;
        goto LABEL_552;
      }
      v47 = 1;
      if ((sub_22E8AD658(a2, *(_QWORD *)(a1 + 88), 4u, v20, v335, (int *)&v334 + 1) & 1) != 0)
      {
        LODWORD(v75) = 1;
      }
      else
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1787, (uint64_t)__p);
        v253 = *(unsigned int *)(a2 + 96);
        *(_QWORD *)((char *)v340 + 12) = 0;
        BYTE4(v340[1]) = 0;
        v341 = 0;
        v342 = 0;
        *((_QWORD *)&v340[1] + 1) = 0;
        LOBYTE(v343) = 0;
        *(_QWORD *)&v340[0] = v253 | (v253 << 32);
        BYTE8(v340[0]) = 1;
        sub_22E6D82D0((uint64_t *)__p, v340);
        if (SHIBYTE(v342) < 0)
          operator delete(*((void **)&v340[1] + 1));
        sub_22E3BB0B8((uint64_t)__p);
        LODWORD(v75) = 0;
LABEL_552:
        v47 = 1;
      }
      goto LABEL_326;
    case 79:
      v50 = (unint64_t *)a2;
      v51 = 2;
      goto LABEL_322;
    case 80:
      v70 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56);
      v71 = (_DWORD *)a2;
      v72 = 1;
      goto LABEL_391;
    case 84:
      v50 = (unint64_t *)a2;
      v51 = 16;
      goto LABEL_322;
    case 86:
      *(_DWORD *)(a1 + 40) = v20;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      sub_22E81E93C();
      goto LABEL_10;
    case 87:
      if ((*(_QWORD *)a2 & 0x18) == 8)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1856, (uint64_t)v340);
        v113 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v113 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v113;
        }
        v113[*v113 + 1] = 1;
        v114 = *(_QWORD *)&v340[0];
        v115 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v115 + 1;
        *(_QWORD *)(v114 + 8 * v115 + 16) = "extern";
        sub_22E3BB0B8((uint64_t)v340);
      }
      v85 = *(_QWORD *)(a1 + 88);
      v86 = a2;
      v87 = 2;
      goto LABEL_258;
    case 88:
      v50 = (unint64_t *)a2;
      v51 = 15;
      goto LABEL_322;
    case 92:
      v105 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x100000000) != 0)
      {
        HIDWORD(v334) = 131;
        v335[0] = "inline";
      }
      else
      {
        *(_QWORD *)a2 = v105 | 0x100000000;
        *(_DWORD *)(a2 + 164) = v20;
      }
      v47 = 0;
      v75 = (v105 & 0x100000000uLL) >> 32;
      goto LABEL_326;
    case 93:
      v50 = (unint64_t *)a2;
      v51 = 7;
      goto LABEL_322;
    case 94:
    case 95:
      sub_22E821224(a1, (unsigned int *)(a1 + 16));
      v254 = sub_22F2E24E0(a1);
      if ((v254 & 1) != 0)
        goto LABEL_10;
      LODWORD(v75) = sub_22F2F3078((unint64_t *)a2, v20, v254 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)v335, (_DWORD *)&v334 + 1);
      v47 = 0;
      v163 = *(_DWORD *)(a1 + 40);
      LODWORD(v334) = v163;
      goto LABEL_327;
    case 96:
      v97 = *(_QWORD *)a2 >> 6;
      if ((*(_QWORD *)a2 & 0xC0) == 0x80)
        __asm { BR              X12 }
      __asm { BR              X12 }
      return result;
    case 97:
      v85 = *(_QWORD *)(a1 + 88);
      v86 = a2;
      v87 = 5;
      goto LABEL_258;
    case 98:
      v70 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56);
      v71 = (_DWORD *)a2;
      v72 = 2;
      goto LABEL_391;
    case 100:
      __asm { BR              X12 }
      return result;
    case 101:
      v88 = (*(_QWORD *)a2 >> 10) & 3;
      if (!v88)
      {
        v89 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFF3FFLL | 0x400;
        goto LABEL_212;
      }
      v142 = "signed";
      v143 = "unsigned";
      goto LABEL_272;
    case 103:
      if ((*(_QWORD *)a2 & 0x18) == 8)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1856, (uint64_t)v340);
        v102 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v102 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v102;
        }
        v102[*v102 + 1] = 1;
        v103 = *(_QWORD *)&v340[0];
        v104 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v104 + 1;
        *(_QWORD *)(v103 + 8 * v104 + 16) = "static";
        sub_22E3BB0B8((uint64_t)v340);
      }
      v85 = *(_QWORD *)(a1 + 88);
      v86 = a2;
      v87 = 3;
      goto LABEL_258;
    case 104:
    case 107:
    case 130:
    case 386:
      *(_DWORD *)(a1 + 40) = v20;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v340[0] = 0uLL;
      v340[1] = (unint64_t)v317;
      sub_22E82C9D8(a1, v17, v20, a2, (uint64_t)a3, a4, v320, v321, (uint64_t *)v340);
      if (*((_QWORD *)&v340[0] + 1) >= 8uLL
        && ((BYTE8(v340[0]) & 4) == 0
         || (*((_QWORD *)&v340[0] + 1) & 0xFFFFFFFFFFFFFFF8) == 0
         || *(_DWORD *)((*((_QWORD *)&v340[0] + 1) & 0xFFFFFFFFFFFFFFF8) + 8)))
      {
        sub_22E82103C((uint64_t)&v336, (uint64_t)v340);
        v13 = 1;
      }
      sub_22E8D1BC4(*(uint64_t *)&v340[1], (uint64_t)&v340[1]);
      sub_22E80F94C((uint64_t *)&v340[1] + 1);
      sub_22E80F94C((uint64_t *)v340 + 1);
      goto LABEL_10;
    case 106:
      v47 = 1;
      LODWORD(v75) = sub_22E8AD658(a2, *(_QWORD *)(a1 + 88), 1u, *v14, v335, (int *)&v334 + 1);
      goto LABEL_326;
    case 108:
      v88 = (*(_QWORD *)a2 >> 10) & 3;
      if (v88)
      {
        v125 = "signed";
        v126 = "unsigned";
        goto LABEL_239;
      }
      v89 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFF3FFLL | 0x800;
LABEL_212:
      *(_QWORD *)a2 = v89;
      *(_DWORD *)(a2 + 116) = v20;
      goto LABEL_428;
    case 109:
      v50 = (unint64_t *)a2;
      v51 = 1;
      goto LABEL_322;
    case 110:
      v70 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56);
      v71 = (_DWORD *)a2;
      v72 = 4;
      goto LABEL_391;
    case 112:
      if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 2) == 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1791, (uint64_t)v340);
        v117 = off_24FCAD0E8[*(unsigned __int16 *)(a1 + 32)];
        v118 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v118 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v118;
        }
        v118[*v118 + 1] = 1;
        v119 = *(_QWORD *)&v340[0];
        v120 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v120 + 1;
        *(_QWORD *)(v119 + 8 * v120 + 16) = v117;
        sub_22E3BB0B8((uint64_t)v340);
      }
      sub_22E820764(a1, a2 + 24, 0);
      goto LABEL_10;
    case 114:
      v106 = *(_QWORD *)(a1 + 8);
      if ((**(_BYTE **)(v106 + 56) & 2) == 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1791, (uint64_t)v340);
        v107 = off_24FCAD0E8[*(unsigned __int16 *)(a1 + 32)];
        v108 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v108 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v108;
        }
        v108[*v108 + 1] = 1;
        v109 = *(_QWORD *)&v340[0];
        v110 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v110 + 1;
        *(_QWORD *)(v109 + 8 * v110 + 16) = v107;
        sub_22E3BB0B8((uint64_t)v340);
        v106 = *(_QWORD *)(a1 + 8);
      }
      v111 = *(_QWORD *)(v106 + 2816);
      if (v111 >= *(unsigned int *)(v106 + 2784))
        v112 = sub_22F162D2C(v106, 1u);
      else
        v112 = *(_QWORD *)(v106 + 2776) + 24 * v111;
      if (*(_WORD *)(v112 + 16) == 21)
      {
        sub_22F2E25BC(a1, (unint64_t *)a2);
        goto LABEL_10;
      }
      v70 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56);
      v71 = (_DWORD *)a2;
      v72 = 16;
LABEL_391:
      v145 = sub_22E8ADB6C(v71, v72, v20, v335, (int *)&v334 + 1, v70);
      goto LABEL_324;
    case 115:
    case 128:
      if (v17 != 115)
        goto LABEL_77;
      if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 1) == 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1793, (uint64_t)v340);
        v43 = off_24FCAD0E8[*(unsigned __int16 *)(a1 + 32)];
        v44 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v44 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v44;
        }
        v44[*v44 + 1] = 1;
        v45 = *(_QWORD *)&v340[0];
        v46 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v46 + 1;
        *(_QWORD *)(v45 + 8 * v46 + 16) = v43;
        sub_22E3BB0B8((uint64_t)v340);
        v17 = *(unsigned __int16 *)(a1 + 32);
LABEL_77:
        if (v17 == 128 && (*(_DWORD *)a2 & 0x3F000) != 0 && (*(_DWORD *)a2 & 7) == 1)
        {
          v47 = 0;
          v335[0] = "";
          HIDWORD(v334) = 1457;
          *(_WORD *)(a1 + 32) = 5;
          goto LABEL_286;
        }
      }
      v50 = (unint64_t *)a2;
      v51 = 19;
      goto LABEL_322;
    case 116:
      if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 1) == 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1793, (uint64_t)v340);
        v121 = off_24FCAD0E8[*(unsigned __int16 *)(a1 + 32)];
        v122 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v122 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v122;
        }
        v122[*v122 + 1] = 1;
        v123 = *(_QWORD *)&v340[0];
        v124 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v124 + 1;
        *(_QWORD *)(v123 + 8 * v124 + 16) = v121;
        sub_22E3BB0B8((uint64_t)v340);
      }
      v88 = (*(_QWORD *)a2 >> 8) & 3;
      if (!v88)
      {
        v214 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFCFFLL | 0x200;
        goto LABEL_427;
      }
      v125 = "imaginary";
      v126 = "complex";
LABEL_239:
      v127 = v88 == 2;
      if (v88 == 2)
        v125 = v126;
      v335[0] = v125;
      goto LABEL_275;
    case 118:
      if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 1) == 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1793, (uint64_t)v340);
        v138 = off_24FCAD0E8[*(unsigned __int16 *)(a1 + 32)];
        v139 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v139 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v139;
        }
        v139[*v139 + 1] = 1;
        v140 = *(_QWORD *)&v340[0];
        v141 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v141 + 1;
        *(_QWORD *)(v140 + 8 * v141 + 16) = v138;
        sub_22E3BB0B8((uint64_t)v340);
      }
      v88 = (*(_QWORD *)a2 >> 8) & 3;
      if (!v88)
      {
        v214 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFCFFLL | 0x100;
LABEL_427:
        *(_QWORD *)a2 = v214;
        *(_DWORD *)(a2 + 112) = v20;
        goto LABEL_428;
      }
      v142 = "imaginary";
      v143 = "complex";
LABEL_272:
      if (v88 == 2)
        v142 = v143;
      v335[0] = v142;
      v127 = v88 == 1;
LABEL_275:
      if (v127)
        v136 = 94;
      else
        v136 = 3658;
      goto LABEL_278;
    case 119:
      if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 2) == 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1791, (uint64_t)v340);
        v90 = off_24FCAD0E8[*(unsigned __int16 *)(a1 + 32)];
        v91 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v91 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v91;
        }
        v91[*v91 + 1] = 1;
        v92 = *(_QWORD *)&v340[0];
        v93 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v93 + 1;
        *(_QWORD *)(v92 + 8 * v93 + 16) = v90;
        sub_22E3BB0B8((uint64_t)v340);
      }
      v94 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x800000000) != 0)
      {
        HIDWORD(v334) = 131;
        v335[0] = "_Noreturn";
      }
      else
      {
        *(_QWORD *)a2 = v94 | 0x800000000;
        *(_DWORD *)(a2 + 176) = v20;
      }
      v47 = 0;
      v75 = (v94 & 0x800000000uLL) >> 35;
      goto LABEL_326;
    case 121:
      v128 = *(_BYTE **)(*(_QWORD *)(a1 + 8) + 56);
      if ((v128[104] & 0x20) != 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1599, (uint64_t)v340);
        v202 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v202 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v202;
        }
        v202[*v202 + 1] = 2;
        v203 = *(_QWORD *)&v340[0];
        v204 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v204 + 1;
        v198 = v203 + 8 * v204;
        v199 = 10;
        goto LABEL_404;
      }
      if ((*v128 & 2) == 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1791, (uint64_t)v340);
        v129 = off_24FCAD0E8[*(unsigned __int16 *)(a1 + 32)];
        v130 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v130 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v130;
        }
        v130[*v130 + 1] = 1;
        v131 = *(_QWORD *)&v340[0];
        v132 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v132 + 1;
        *(_QWORD *)(v131 + 8 * v132 + 16) = v129;
        sub_22E3BB0B8((uint64_t)v340);
      }
      v95 = (*(_QWORD *)a2 >> 3) & 3;
      if ((_DWORD)v95)
      {
        v335[0] = off_24FAA4AA8[v95 - 1];
        v96 = (_DWORD)v95 == 3;
        goto LABEL_304;
      }
      v252 = *(_QWORD *)a2 | 0x18;
      goto LABEL_550;
    case 125:
    case 126:
      sub_22E820914(a1, a2 + 24);
      goto LABEL_10;
    case 134:
      LODWORD(v334) = *v14;
      *(_DWORD *)(a1 + 40) = v20;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      if (*(_WORD *)(a1 + 32) != 21)
        goto LABEL_154;
      v79 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
      if ((v79 & 0x1000) != 0)
        goto LABEL_648;
      if (sub_22F2F0FD8(a1))
      {
        v80 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v80 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v80 + 316) = 1921;
        if (*(char *)(v80 + 311) < 0)
        {
          **(_BYTE **)(v80 + 288) = 0;
          *(_QWORD *)(v80 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v80 + 288) = 0;
          *(_BYTE *)(v80 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v323, v80);
        sub_22E3BB0B8((uint64_t)v323);
LABEL_154:
        v81 = 0;
        v82 = 1;
      }
      else
      {
        v79 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
LABEL_648:
        if ((v79 & 0x1000) != 0)
          v286 = 1911;
        else
          v286 = 1816;
        v287 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v287 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v287 + 316) = v286;
        if (*(char *)(v287 + 311) < 0)
        {
          **(_BYTE **)(v287 + 288) = 0;
          *(_QWORD *)(v287 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v287 + 288) = 0;
          *(_BYTE *)(v287 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v324, v287);
        sub_22E3BB0B8((uint64_t)v324);
        *(_QWORD *)&v340[0] = a1 + 944;
        BYTE8(v340[0]) = *(_BYTE *)(a1 + 944);
        *(_BYTE *)(a1 + 944) = 1;
        *(_QWORD *)&v340[1] = a1;
        DWORD2(v340[1]) = 1441813;
        strcpy((char *)&v340[1] + 12, ">");
        v343 = 0;
        v341 = sub_22E80F720;
        v342 = 0;
        sub_22E811DE8((uint64_t)v340);
        v288 = sub_22F2E50C0(a1, 0);
        v81 = *(_DWORD *)(a1 + 16);
        LODWORD(v334) = v81;
        if (v288 < 2)
        {
          sub_22F2F18E0((uint64_t)v340);
          v81 = 0;
          v82 = 1;
        }
        else
        {
          v289 = v288;
          sub_22E811E8C((uint64_t)v340);
          v290 = *(_QWORD *)(a1 + 88);
          v82 = v289 & 0xFFFFFFFFFFFFFFFCLL | 2;
          __p[0] = (void *)v82;
          if ((*(_BYTE *)(v289 | 1) & 0x80) == 0)
          {
            sub_22F329074(v290, (unint64_t *)__p);
            v82 = (unint64_t)__p[0];
          }
        }
        **(_BYTE **)&v340[0] = BYTE8(v340[0]);
      }
      v83 = *(_QWORD *)(a2 + 16);
      if (v83)
      {
        if ((v83 | v82) >= 4)
          v84 = 13;
        else
          v84 = 94;
        HIDWORD(v334) = v84;
        v335[0] = "explicit";
      }
      else
      {
        *(_QWORD *)(a2 + 16) = v82;
        *(_DWORD *)(a2 + 172) = v20;
        *(_DWORD *)(a2 + 180) = v81;
      }
      v47 = 0;
      v137 = v83 == 0;
      goto LABEL_429;
    case 137:
      if (v321 != 1)
      {
        v47 = 0;
        v335[0] = "";
        v205 = 1562;
        goto LABEL_398;
      }
      v144 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x1000000000) != 0)
      {
        v335[0] = "friend";
        *(_DWORD *)(a2 + 188) = v20;
        HIDWORD(v334) = 131;
      }
      else
      {
        *(_QWORD *)a2 = v144 | 0x1000000000;
        *(_DWORD *)(a2 + 188) = v20;
      }
      v47 = 0;
      v75 = (v144 & 0x1000000000uLL) >> 36;
      goto LABEL_326;
    case 138:
      v85 = *(_QWORD *)(a1 + 88);
      v86 = a2;
      v87 = 7;
      goto LABEL_258;
    case 142:
      goto LABEL_182;
    case 152:
      if (sub_22E88B7AC(a1))
      {
        v308 = *(_QWORD *)a2;
        goto LABEL_738;
      }
      if (*(_WORD *)(a1 + 32) == 152)
        goto LABEL_184;
      goto LABEL_10;
    case 155:
      v146 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
      if ((*(_BYTE *)(v146 + 60) & 1) == 0)
        goto LABEL_291;
      if (!sub_22F420564(*(_QWORD *)(a1 + 88) + 24, (uint64_t)"__cl_clang_function_pointers", 28, v146))
      {
        v47 = 0;
        v98 = 1685;
        goto LABEL_181;
      }
      v146 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
LABEL_291:
      if ((*(_BYTE *)(v146 + 104) & 0x20) != 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1599, (uint64_t)v340);
        v147 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v147 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v147;
        }
        v147[*v147 + 1] = 2;
        v148 = *(_QWORD *)&v340[0];
        v149 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v149 + 1;
        *(_QWORD *)(v148 + 8 * v149 + 16) = 17;
        HIDWORD(v334) = 1;
        sub_22E3BB0B8((uint64_t)v340);
      }
      v150 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x400000000) != 0)
      {
        HIDWORD(v334) = 131;
        v335[0] = "virtual";
      }
      else
      {
        *(_QWORD *)a2 = v150 | 0x400000000;
        *(_DWORD *)(a2 + 168) = v20;
      }
      v47 = 0;
      v75 = (v150 & 0x400000000uLL) >> 34;
      goto LABEL_326;
    case 156:
      v50 = (unint64_t *)a2;
      v51 = 3;
      goto LABEL_322;
    case 157:
      goto LABEL_48;
    case 159:
      v50 = (unint64_t *)a2;
      v51 = 5;
      goto LABEL_322;
    case 160:
      v50 = (unint64_t *)a2;
      v51 = 6;
      goto LABEL_322;
    case 161:
      v100 = (*(_QWORD *)a2 >> 37) & 3;
      if (!(_DWORD)v100)
      {
        v101 = *(_QWORD *)a2 & 0xFFFFFF9FFFFFFFFFLL | 0x2000000000;
        goto LABEL_264;
      }
      v335[0] = off_24FAA4AC0[v100 - 1];
      v295 = (_DWORD)v100 == 1;
      goto LABEL_695;
    case 162:
    case 311:
      goto LABEL_27;
    case 166:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 104) & 0x20) != 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1599, (uint64_t)v340);
        v195 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v195 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v195;
        }
        v195[*v195 + 1] = 2;
        v196 = *(_QWORD *)&v340[0];
        v197 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v197 + 1;
        v198 = v196 + 8 * v197;
        v199 = 9;
        goto LABEL_404;
      }
      v95 = (*(_QWORD *)a2 >> 3) & 3;
      if ((_DWORD)v95)
      {
        v335[0] = off_24FAA4AA8[v95 - 1];
        v96 = (_DWORD)v95 == 2;
        goto LABEL_304;
      }
      v252 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFE7 | 0x10;
      goto LABEL_550;
    case 174:
      v100 = (*(_QWORD *)a2 >> 37) & 3;
      if (!(_DWORD)v100)
      {
        v101 = *(_QWORD *)a2 & 0xFFFFFF9FFFFFFFFFLL | 0x4000000000;
        goto LABEL_264;
      }
      v335[0] = off_24FAA4AC0[v100 - 1];
      v295 = (_DWORD)v100 == 2;
      goto LABEL_695;
    case 175:
      v100 = (*(_QWORD *)a2 >> 37) & 3;
      if ((_DWORD)v100)
      {
        v335[0] = off_24FAA4AC0[v100 - 1];
        v295 = (_DWORD)v100 == 3;
LABEL_695:
        if (v295)
          v296 = 94;
        else
          v296 = 3658;
        HIDWORD(v334) = v296;
      }
      else
      {
        v101 = *(_QWORD *)a2 | 0x6000000000;
LABEL_264:
        *(_QWORD *)a2 = v101;
        *(_DWORD *)(a2 + 196) = v20;
      }
      v47 = 0;
      v137 = (_DWORD)v100 == 0;
LABEL_429:
      LODWORD(v75) = !v137;
      goto LABEL_326;
    case 176:
      v50 = (unint64_t *)a2;
      v51 = 4;
      goto LABEL_322;
    case 177:
      v50 = (unint64_t *)a2;
      v51 = 11;
      goto LABEL_322;
    case 178:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 204) & 1) == 0)
        goto LABEL_284;
      v50 = (unint64_t *)a2;
      v51 = 12;
      goto LABEL_322;
    case 179:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 204) & 1) == 0)
        goto LABEL_284;
      v50 = (unint64_t *)a2;
      v51 = 13;
      goto LABEL_322;
    case 180:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 204) & 1) == 0)
      {
LABEL_284:
        v47 = 0;
        HIDWORD(v334) = 23;
        v99 = "";
        goto LABEL_285;
      }
      v206 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x800000) != 0)
      {
        HIDWORD(v334) = 131;
        v335[0] = "_Sat";
      }
      else
      {
        *(_QWORD *)a2 = v206 | 0x800000;
        *(_DWORD *)(a2 + 128) = v20;
      }
      v47 = 0;
      v75 = (v206 & 0x800000uLL) >> 23;
      goto LABEL_326;
    case 181:
      v50 = (unint64_t *)a2;
      v51 = 20;
      goto LABEL_322;
    case 182:
      v50 = (unint64_t *)a2;
      v51 = 21;
      goto LABEL_322;
    case 183:
      v50 = (unint64_t *)a2;
      v51 = 22;
      goto LABEL_322;
    case 186:
    case 302:
      do
      {
        v48 = *(unsigned __int16 *)(a1 + 32);
        if (v48 == 186)
          sub_22E810414(a1, (uint64_t *)(a2 + 24), a6, 0, a7);
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 3) & 0x10) != 0 && *(_WORD *)(a1 + 32) == 302)
        {
          sub_22E815DDC(a1, (uint64_t *)(a2 + 24));
          v49 = 1;
        }
        else
        {
          v49 = 0;
        }
      }
      while (v48 == 186 || (v49 & 1) != 0);
      goto LABEL_10;
    case 197:
      v50 = (unint64_t *)a2;
      v51 = 17;
      goto LABEL_322;
    case 198:
      v50 = (unint64_t *)a2;
      v51 = 18;
      goto LABEL_322;
    case 200:
      v50 = (unint64_t *)a2;
      v51 = 8;
      goto LABEL_322;
    case 203:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 104) & 0x20) != 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1599, (uint64_t)v340);
        v207 = *(unsigned __int8 **)&v340[0];
        if (!*(_QWORD *)&v340[0])
        {
          v207 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
          *(_QWORD *)&v340[0] = v207;
        }
        v207[*v207 + 1] = 2;
        v208 = *(_QWORD *)&v340[0];
        v209 = **(_BYTE **)&v340[0];
        **(_BYTE **)&v340[0] = v209 + 1;
        v198 = v208 + 8 * v209;
        v199 = 8;
LABEL_404:
        *(_QWORD *)(v198 + 16) = v199;
        sub_22E3BB0B8((uint64_t)v340);
        goto LABEL_405;
      }
      v95 = (*(_QWORD *)a2 >> 3) & 3;
      if ((_DWORD)v95)
      {
        v335[0] = off_24FAA4AA8[v95 - 1];
        v96 = (_DWORD)v95 == 1;
LABEL_304:
        if (v96)
          v153 = 94;
        else
          v153 = 3658;
        HIDWORD(v334) = v153;
      }
      else
      {
        v252 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFE7 | 8;
LABEL_550:
        *(_QWORD *)a2 = v252;
        *(_DWORD *)(a2 + 100) = v20;
      }
      LODWORD(v75) = v95 != 0;
      goto LABEL_552;
    case 206:
      sub_22E884578(a1, (int *)(a1 + 16), 1788, (uint64_t)v325);
      sub_22E3BB0B8((uint64_t)v325);
      v50 = (unint64_t *)a2;
      v51 = 35;
      goto LABEL_322;
    case 207:
      sub_22E8213D4(a1, (unint64_t *)a2);
      goto LABEL_10;
    case 250:
      sub_22F2E3C58(a1, (unint64_t *)a2);
      goto LABEL_10;
    case 274:
      if ((*(_QWORD *)a2 & 0xFE03F007) == 0x2013003)
        sub_22E88B624(a1, 1u);
      goto LABEL_739;
    case 294:
      v85 = *(_QWORD *)(a1 + 88);
      v86 = a2;
      v87 = 6;
      goto LABEL_258;
    case 295:
      v88 = *(_DWORD *)(a2 + 192);
      if (v88)
      {
        v335[0] = "__module_private__";
        v136 = 94;
LABEL_278:
        HIDWORD(v334) = v136;
      }
      else
      {
        *(_DWORD *)(a2 + 192) = v20;
      }
LABEL_428:
      v47 = 0;
      v137 = v88 == 0;
      goto LABEL_429;
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 371:
    case 372:
    case 373:
    case 374:
    case 375:
      sub_22E81691C(a1, a2 + 24);
      goto LABEL_10;
    case 309:
      v73 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x200000000) != 0)
      {
        HIDWORD(v334) = 131;
        v335[0] = "__forceinline";
        v75 = (v73 & 0x200000000uLL) >> 33;
LABEL_381:
        v76 = *(_QWORD *)(a1 + 24);
        goto LABEL_518;
      }
      *(_QWORD *)a2 = v73 | 0x200000000;
      *(_DWORD *)(a2 + 184) = v20;
      v74 = *(unsigned __int16 *)(a1 + 32);
      if ((v74 - 7) < 6)
      {
        LODWORD(v75) = 0;
        v76 = 0;
        goto LABEL_518;
      }
      v76 = 0;
      LODWORD(v75) = 0;
      if ((v74 - 13) >= 6 && v74 != 1)
        goto LABEL_381;
LABEL_518:
      sub_22E8118E4(a2 + 24, v76, *v14 | ((unint64_t)*v14 << 32), 0, *v14, 0, 0, 5u, 0);
      goto LABEL_325;
    case 310:
      v70 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56);
      v71 = (_DWORD *)a2;
      v72 = 8;
      goto LABEL_391;
    case 312:
    case 313:
    case 314:
    case 315:
    case 330:
    case 331:
    case 332:
      goto LABEL_183;
    case 316:
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 72) + 68) & 1) == 0)
        goto LABEL_180;
LABEL_182:
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 52) & 0x40000000) == 0)
        goto LABEL_739;
LABEL_183:
      sub_22E816A3C(a1, a2 + 24);
      goto LABEL_184;
    case 317:
      do
      {
        v23 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        sub_22E8118E4(a2 + 24, v23, *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned int *)(a1 + 40) << 32), 0, *(_DWORD *)(a1 + 40), 0, 0, 5u, 0);
      }
      while (*(_WORD *)(a1 + 32) == 317);
      goto LABEL_10;
    case 318:
    case 319:
    case 320:
    case 321:
    case 322:
    case 323:
    case 324:
    case 326:
    case 327:
    case 328:
    case 329:
      sub_22E816B64(a1, a2 + 24);
      goto LABEL_184;
    case 325:
      v145 = sub_22E816BA4(a1, (_DWORD *)a2, *v14, v335, (int *)&v334 + 1, &v334);
      goto LABEL_324;
    case 335:
      v50 = (unint64_t *)a2;
      v51 = 38;
      goto LABEL_322;
    case 336:
      v50 = (unint64_t *)a2;
      v51 = 39;
      goto LABEL_322;
    case 337:
      v50 = (unint64_t *)a2;
      v51 = 40;
      goto LABEL_322;
    case 338:
      v50 = (unint64_t *)a2;
      v51 = 41;
      goto LABEL_322;
    case 339:
      v50 = (unint64_t *)a2;
      v51 = 42;
      goto LABEL_322;
    case 340:
      v50 = (unint64_t *)a2;
      v51 = 43;
      goto LABEL_322;
    case 341:
      v50 = (unint64_t *)a2;
      v51 = 44;
      goto LABEL_322;
    case 342:
      if (!sub_22F420778(*(_QWORD *)(a1 + 88) + 24, (uint64_t)"cl_khr_gl_msaa_sharing", 22, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)))goto LABEL_732;
      v50 = (unint64_t *)a2;
      v51 = 45;
      goto LABEL_322;
    case 343:
      if (!sub_22F420778(*(_QWORD *)(a1 + 88) + 24, (uint64_t)"cl_khr_gl_msaa_sharing", 22, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)))goto LABEL_732;
      v50 = (unint64_t *)a2;
      v51 = 46;
      goto LABEL_322;
    case 344:
      if (!sub_22F420778(*(_QWORD *)(a1 + 88) + 24, (uint64_t)"cl_khr_gl_msaa_sharing", 22, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)))goto LABEL_732;
      v50 = (unint64_t *)a2;
      v51 = 47;
      goto LABEL_322;
    case 345:
      if (!sub_22F420778(*(_QWORD *)(a1 + 88) + 24, (uint64_t)"cl_khr_gl_msaa_sharing", 22, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)))goto LABEL_732;
      v50 = (unint64_t *)a2;
      v51 = 48;
      goto LABEL_322;
    case 346:
      v50 = (unint64_t *)a2;
      v51 = 49;
      goto LABEL_322;
    case 347:
      v59 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
      if ((*(_DWORD *)(v59 + 52) & 0x40000000) == 0
        || (v60 = *(_QWORD *)(v59 + 56), (v60 & 0x100000000) == 0) && v60 <= 0xC7)
      {
LABEL_732:
        **(_QWORD **)(a1 + 24) = **(_QWORD **)(a1 + 24) & 0xFFFFFFFBFFFFFE00 | 0x400000005;
        *(_WORD *)(a1 + 32) = 5;
        goto LABEL_739;
      }
      if ((*(_BYTE *)(v59 + 68) & 2) == 0)
      {
LABEL_180:
        v47 = 0;
        v98 = 53;
LABEL_181:
        HIDWORD(v334) = v98;
        v99 = (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 16);
LABEL_285:
        v335[0] = v99;
        goto LABEL_286;
      }
      v61 = (*(_QWORD *)a2 >> 12) & 0x3F;
      if (!v61)
      {
        LODWORD(v75) = 0;
        *(_QWORD *)a2 |= 0x400000uLL;
        goto LABEL_325;
      }
      if (v61 == 50)
        goto LABEL_184;
      v335[0] = (const char *)sub_22F2F2CB0(v61);
      v62 = 3658;
      goto LABEL_553;
    case 349:
    case 350:
    case 351:
      do
      {
        v22 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        sub_22E816AA8(a2 + 24, v22, *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned int *)(a1 + 40) << 32), *(_DWORD *)(a1 + 40));
      }
      while (*(unsigned __int16 *)(a1 + 32) - 349 < 3);
      goto LABEL_10;
    case 354:
      sub_22E8169B0(a1, a2 + 24);
      goto LABEL_10;
    case 355:
      v77 = *(_QWORD *)a2;
      v78 = (*(_QWORD *)a2 >> 12) & 0x3F;
      if (!v78)
        goto LABEL_463;
      if (v78 != 50)
        goto LABEL_462;
      goto LABEL_184;
    case 356:
      v133 = (unint64_t *)a2;
      v134 = *v14;
      goto LABEL_467;
    case 357:
      v151 = (unint64_t *)a2;
      v152 = *v14;
      goto LABEL_456;
    case 358:
      v50 = (unint64_t *)a2;
      v51 = 14;
      goto LABEL_322;
    case 359:
      v50 = (unint64_t *)a2;
      v51 = 10;
      goto LABEL_322;
    case 366:
      sub_22E8118E4(a2 + 24, *(_QWORD *)(a1 + 24), v20 | (v20 << 32), 0, v20, 0, 0, 5u, 0);
      goto LABEL_405;
    case 367:
    case 368:
    case 369:
    case 370:
      sub_22E816E00(a1, a2 + 24);
      goto LABEL_10;
    case 380:
      __asm { BR              X12 }
      return result;
    case 391:
      v50 = (unint64_t *)a2;
      v51 = 36;
      goto LABEL_322;
    case 399:
      if ((*(_DWORD *)a2 & 0x7FFC0) != 0)
        goto LABEL_739;
      memset(__p, 0, 32);
      v154 = *(unsigned int *)(a1 + 20);
      if (!(_DWORD)v154)
        v154 = v20;
      sub_22E95AAE0(*(_QWORD *)(a1 + 88), *(unint64_t **)(a1 + 24), v20 | (v154 << 32), (uint64_t)__p);
      v156 = *(_QWORD *)(a1 + 8);
      v157 = *(_QWORD *)(v156 + 2816);
      if (v157 >= *(unsigned int *)(v156 + 2784))
        v158 = sub_22F162D2C(v156, 1u);
      else
        v158 = *(_QWORD *)(v156 + 2776) + 24 * v157;
      v75 = *(_QWORD *)(v158 + 8);
      v211 = *(unsigned __int16 *)(v158 + 16);
      switch(v211)
      {
        case 5:
          v312 = *(_DWORD *)v158;
          if ((v321 | 4) != 5
            || (v246 = sub_22EAA96DC(*(_QWORD *)(a1 + 88), v155, (uint64_t)__p)) == 0
            || (v247 = *(_QWORD *)(v246 + 40), (v247 & 7) != 0)
            || v75 != (v247 & 0xFFFFFFFFFFFFFFF8)
            || (sub_22E820B78(a1, 0, 0) & 1) == 0)
          {
            v248 = *(_QWORD *)(a1 + 88);
            v340[0] = v248;
            *(_QWORD *)&v340[1] = &v341;
            *((_QWORD *)&v340[1] + 1) = 0x400000000;
            v249 = v21 & 0xFFFFFFFE;
            if (v249 == 2)
            {
              v250 = *(_QWORD *)(v248 + 3200);
              *(_QWORD *)(v248 + 3200) = (char *)v340 + 8;
              v344 = v250;
              v251 = 1;
            }
            else
            {
              v251 = 0;
            }
            v345 = v251;
            v262 = sub_22EA003D8((_QWORD *)v248, v75, v312, *(uint64_t **)(v248 + 12888), (uint64_t)__p, 0, 0, 0, 0, 1u, v314 & 1, 0);
            if (v249 == 2)
            {
              sub_22EA7E84C(*(_QWORD **)&v340[0], v344, 0);
              v345 = 0;
            }
            if (v262)
            {
              *(void **)(a2 + 56) = __p[0];
              sub_22F0AB71C(v315, (uint64_t)&__p[1]);
              v263 = *(_DWORD *)(a1 + 16);
              if (*(_DWORD *)(a1 + 20))
                v263 = *(_DWORD *)(a1 + 20);
              *(_DWORD *)(a1 + 40) = v263;
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
              v264 = *(_QWORD *)a2;
              v265 = (*(_QWORD *)a2 >> 12) & 0x3F;
              if (!v265)
              {
                *(_DWORD *)(a2 + 120) = v20;
                *(_DWORD *)(a2 + 132) = v20;
                *(_QWORD *)a2 = v264 & 0xFFFFFFFFFFDC0FFFLL | 0x1C000;
                *(_QWORD *)(a2 + 8) = v262;
                goto LABEL_575;
              }
              if (v265 != 50)
              {
                v335[0] = (const char *)sub_22F2F2CB0(v265);
                HIDWORD(v334) = 3658;
                v194 = 4;
                LODWORD(v75) = 1;
                goto LABEL_577;
              }
LABEL_575:
              *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 16);
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
LABEL_576:
              LODWORD(v75) = 0;
              v194 = 2;
            }
            else
            {
              if ((sub_22E88001C(a1) & 1) == 0)
              {
                if (*(_WORD *)(a1 + 32) == 399)
                {
                  v276 = *(_QWORD *)(a1 + 8);
                  v277 = *(_QWORD *)(v276 + 2816);
                  v278 = v277 >= *(unsigned int *)(v276 + 2784)
                       ? sub_22F162D2C(v276, 1u)
                       : *(_QWORD *)(v276 + 2776) + 24 * v277;
                  if (*(_WORD *)(v278 + 16) == 5)
                  {
                    v291 = *(_DWORD *)(a1 + 16);
                    if (*(_DWORD *)(a1 + 20))
                      v291 = *(_DWORD *)(a1 + 20);
                    *(_DWORD *)(a1 + 40) = v291;
                    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
                    v330 = 0;
                    v331 = 0;
                    v332 = v317;
                    v333 = 0;
                    if (sub_22E81DD9C(a1, a2, (uint64_t)__p, (uint64_t)a3, a4, v321, &v330))
                    {
                      if (v331 >= 8
                        && ((v331 & 4) == 0
                         || (v331 & 0xFFFFFFFFFFFFFFF8) == 0
                         || *(_DWORD *)((v331 & 0xFFFFFFFFFFFFFFF8) + 8)))
                      {
                        sub_22E82103C((uint64_t)&v336, (uint64_t)&v330);
                        v13 = 1;
                      }
                      v194 = 2;
                    }
                    else
                    {
                      v194 = 5;
                    }
                    sub_22E8D1BC4(v332, (uint64_t)&v332);
                    sub_22E80F94C(&v333);
                    sub_22E80F94C((uint64_t *)&v331);
                    LODWORD(v75) = 0;
                    goto LABEL_577;
                  }
                }
                goto LABEL_576;
              }
              LODWORD(v75) = 0;
              v194 = 5;
            }
LABEL_577:
            sub_22E828B78((uint64_t)v340);
            break;
          }
          goto LABEL_584;
        case 400:
          *(void **)(a2 + 56) = __p[0];
          sub_22F0AB71C(v315, (uint64_t)&__p[1]);
          v241 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(a1 + 20))
            v241 = *(_DWORD *)(a1 + 20);
          *(_DWORD *)(a1 + 40) = v241;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v242 = *(_DWORD *)(a1 + 20);
          if (!v242)
            v242 = *v14;
          v243 = *(_QWORD *)(a1 + 24);
          v244 = *(_QWORD *)a2;
          if (!v243)
          {
            *(_QWORD *)a2 = v244 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
            *(_DWORD *)(a2 + 120) = 0;
            *(_DWORD *)(a2 + 132) = 0;
            goto LABEL_579;
          }
          v245 = (v244 >> 12) & 0x3F;
          if (!v245)
          {
            *(_DWORD *)(a2 + 120) = v242;
            *(_DWORD *)(a2 + 132) = v242;
            *(_QWORD *)a2 = v244 & 0xFFFFFFFFFFDC0FFFLL | 0x1C000;
            *(_QWORD *)(a2 + 8) = v243;
LABEL_579:
            v266 = *(_DWORD *)(a1 + 20);
            if (!v266)
              v266 = *v14;
            *(_DWORD *)(a2 + 92) = v266;
            v267 = *(_DWORD *)(a1 + 16);
            if (*(_DWORD *)(a1 + 20))
              v267 = *(_DWORD *)(a1 + 20);
            *(_DWORD *)(a1 + 40) = v267;
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
LABEL_584:
            LODWORD(v75) = 0;
LABEL_585:
            v194 = 5;
            break;
          }
          if (v245 == 50)
            goto LABEL_579;
          v335[0] = (const char *)sub_22F2F2CB0(v245);
          HIDWORD(v334) = 3658;
          v194 = 4;
          LODWORD(v75) = 1;
          break;
        case 401:
          if (!v75)
            goto LABEL_585;
          v212 = *(_DWORD *)(v75 + 32);
          if (v212 == 6)
          {
            v283 = a1 + 16;
            if (*(_WORD *)(a1 + 32) != 1)
            {
              v284 = *(_QWORD *)(a1 + 8);
              v285 = *(_QWORD *)(v284 + 2816) + 1;
              if (v285 >= *(unsigned int *)(v284 + 2784))
                v283 = sub_22F162D2C(v284, 2u);
              else
                v283 = *(_QWORD *)(v284 + 2776) + 24 * v285;
            }
            v292 = *(unsigned __int16 *)(v283 + 16);
            if (v292 != 162 && v292 != 76)
              goto LABEL_584;
            *(void **)(a2 + 56) = __p[0];
            sub_22F0AB71C(v315, (uint64_t)&__p[1]);
            v293 = *(_DWORD *)(a1 + 16);
            if (*(_DWORD *)(a1 + 20))
              v293 = *(_DWORD *)(a1 + 20);
            *(_DWORD *)(a1 + 40) = v293;
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            goto LABEL_676;
          }
          if (v212 == 2)
          {
            if ((v321 | 4) == 5)
            {
              v279 = *(_QWORD *)(v75 + 8);
              if (v279)
              {
                v280 = sub_22EAA96DC(*(_QWORD *)(a1 + 88), v155, (uint64_t)__p);
                if (v280)
                {
                  v281 = *(_QWORD *)(v280 + 40);
                  if ((v281 & 7) == 0 && v279 == (v281 & 0xFFFFFFFFFFFFFFF8) && (sub_22E820B78(a1, 0, 0) & 1) != 0)
                    goto LABEL_584;
                }
              }
            }
            *(void **)(a2 + 56) = __p[0];
            sub_22F0AB71C(v315, (uint64_t)&__p[1]);
            v282 = *(_DWORD *)(a1 + 16);
            if (*(_DWORD *)(a1 + 20))
              v282 = *(_DWORD *)(a1 + 20);
            *(_DWORD *)(a1 + 40) = v282;
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            sub_22E881648(a1, (uint64_t)__p, 0);
LABEL_676:
            LODWORD(v75) = 0;
            v194 = 2;
            break;
          }
          if (v212)
            goto LABEL_584;
          *(_QWORD *)a2 = *(_QWORD *)a2 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
          *(_DWORD *)(a2 + 120) = 0;
          *(_DWORD *)(a2 + 132) = 0;
          v213 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(a1 + 20))
            v213 = *(_DWORD *)(a1 + 20);
          *(_DWORD *)(a1 + 40) = v213;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          LODWORD(v75) = 0;
          v194 = 4;
          break;
        default:
          goto LABEL_584;
      }
      if (HIDWORD(__p[3]))
        free(__p[2]);
      if (v194 == 4)
        goto LABEL_325;
      if (v194 == 5)
        goto LABEL_739;
      goto LABEL_590;
    case 400:
      v159 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x3FFC0) != 0
        && (v159 & 0x200000) != 0
        && (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 74) & 1) != 0)
      {
        goto LABEL_739;
      }
      v160 = *(_QWORD *)(a1 + 24);
      if (v160)
      {
        v161 = (v159 >> 12) & 0x3F;
        if (v161)
        {
          if (v161 != 50)
            goto LABEL_688;
        }
        else
        {
          *(_DWORD *)(a2 + 120) = v20;
          *(_DWORD *)(a2 + 132) = v20;
          *(_QWORD *)a2 = v159 & 0xFFFFFFFFFFDC0FFFLL | 0x1C000;
          *(_QWORD *)(a2 + 8) = v160;
        }
      }
      else
      {
        *(_QWORD *)a2 = v159 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
        *(_DWORD *)(a2 + 120) = 0;
        *(_DWORD *)(a2 + 132) = 0;
      }
      v215 = *(_DWORD *)(a1 + 20);
      if (!v215)
        v215 = *v14;
      *(_DWORD *)(a2 + 92) = v215;
      v210 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 20))
        v210 = *(_DWORD *)(a1 + 20);
      goto LABEL_437;
    case 401:
      v63 = *(_QWORD *)(a1 + 24);
      switch(*(_DWORD *)(v63 + 32))
      {
        case 0:
          LODWORD(v75) = 0;
          v47 = 0;
          *(_QWORD *)a2 = *(_QWORD *)a2 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
          *(_DWORD *)(a2 + 120) = 0;
          *(_DWORD *)(a2 + 132) = 0;
          goto LABEL_326;
        case 2:
        case 5:
          if (v321 == 1 && (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x100) != 0)
          {
            v64 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 216);
            if (v64)
            {
              if ((*(_WORD *)(v64 + 8) & 0x7Fu) - 35 <= 2)
              {
                v65 = *(_QWORD *)(v63 + 8);
                v66 = *(_QWORD *)(v64 - 24);
                v67 = v66 & 7;
                v68 = v66 & 0xFFFFFFFFFFFFFFF8;
                v69 = !v67 && v65 == v68;
                if (v69 && (sub_22E820B78(a1, 1u, 0) & 1) != 0)
                  goto LABEL_739;
              }
            }
          }
          memset(v340, 0, sizeof(v340));
          sub_22E881648(a1, (uint64_t)v340, 0);
          if (HIDWORD(v340[1]))
            free(*(void **)&v340[1]);
          goto LABEL_10;
        case 6:
          if (*(_BYTE *)(v63 + 48))
            v237 = 0;
          else
            v237 = *(_QWORD *)(a1 + 24);
          v238 = *(_QWORD *)(a1 + 8);
          v239 = *(_QWORD *)(v238 + 2816);
          if (v239 >= *(unsigned int *)(v238 + 2784))
            v240 = sub_22F162D2C(v238, 1u);
          else
            v240 = *(_QWORD *)(v238 + 2776) + 24 * v239;
          if (*(_WORD *)(v240 + 16) == 5)
          {
            v255 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v255 + 312) = v20;
            *(_DWORD *)(v255 + 316) = 1690;
            if (*(char *)(v255 + 311) < 0)
            {
              **(_BYTE **)(v255 + 288) = 0;
              *(_QWORD *)(v255 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v255 + 288) = 0;
              *(_BYTE *)(v255 + 311) = 0;
            }
            sub_22E78E558((uint64_t)__p, v255);
            v256 = *(_QWORD *)(a1 + 8);
            v257 = *(_QWORD *)(v256 + 2816);
            if (v257 >= *(unsigned int *)(v256 + 2784))
              v258 = (unsigned int *)sub_22F162D2C(v256, 1u);
            else
              v258 = (unsigned int *)(*(_QWORD *)(v256 + 2776) + 24 * v257);
            v268 = *v258;
            BYTE4(v340[1]) = 0;
            *(_QWORD *)((char *)v340 + 12) = 0;
            v341 = 0;
            v342 = 0x400000000000000;
            *(_QWORD *)&v340[0] = v268 | (v268 << 32);
            BYTE8(v340[0]) = 0;
            *((_QWORD *)&v340[1] + 1) = 1869903201;
            LOBYTE(v343) = 0;
            sub_22E6D82D0((uint64_t *)__p, v340);
            if (SHIBYTE(v342) < 0)
              operator delete(*((void **)&v340[1] + 1));
            sub_22E3BB0B8((uint64_t)__p);
            *(_QWORD *)a2 |= 0x1000000uLL;
            *(_QWORD *)(a2 + 8) = v237;
            v50 = (unint64_t *)a2;
            v51 = 33;
LABEL_322:
            v162 = v20;
            goto LABEL_323;
          }
          v259 = *(_QWORD *)(a1 + 8);
          v260 = *(_QWORD *)(v259 + 2816);
          if (v260 >= *(unsigned int *)(v259 + 2784))
            v261 = sub_22F162D2C(v259, 1u);
          else
            v261 = *(_QWORD *)(v259 + 2776) + 24 * v260;
          v269 = *(unsigned __int16 *)(v261 + 16);
          if (v269 != 162 && v269 != 76)
            goto LABEL_739;
          v270 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(a1 + 20))
            v270 = *(_DWORD *)(a1 + 20);
          *(_DWORD *)(a1 + 40) = v270;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v271 = *(unsigned int *)(a1 + 16);
          if (*(_WORD *)(a1 + 32) != 162)
          {
            *(_QWORD *)a2 |= 0x1000000uLL;
            *(_QWORD *)(a2 + 8) = v237;
            v50 = (unint64_t *)a2;
            v51 = 33;
            v162 = v271;
LABEL_323:
            v145 = sub_22E8AD898(v50, v51, v162, (uint64_t *)v335, (_DWORD *)&v334 + 1);
            goto LABEL_324;
          }
          *(_DWORD *)(a1 + 40) = v271;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          *(_QWORD *)&v340[0] = a1 + 944;
          BYTE8(v340[0]) = *(_BYTE *)(a1 + 944);
          *(_BYTE *)(a1 + 944) = 1;
          *(_QWORD *)&v340[1] = a1;
          DWORD2(v340[1]) = 1441813;
          strcpy((char *)&v340[1] + 12, ">");
          v343 = 0;
          v341 = sub_22E80F720;
          v342 = 0;
          if (sub_22E811DE8((uint64_t)v340))
          {
            sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)__p);
            v272 = (unsigned __int8 *)__p[0];
            if (!__p[0])
            {
              v272 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)__p[1]);
              __p[0] = v272;
            }
            v272[*v272 + 1] = 4;
            v273 = __p[0];
            v274 = *(unsigned __int8 *)__p[0];
            *(_BYTE *)__p[0] = v274 + 1;
            v273[v274 + 2] = 21;
            v275 = __p;
LABEL_623:
            sub_22E3BB0B8((uint64_t)v275);
            goto LABEL_645;
          }
          if (*(_WORD *)(a1 + 32) != 76)
          {
            sub_22F2F18E0((uint64_t)v340);
            sub_22E884578(a1, (int *)(a1 + 16), 1690, (uint64_t)&v330);
            v294 = *(unsigned int *)(a1 + 16);
            *(void **)((char *)&__p[1] + 4) = 0;
            BYTE4(__p[2]) = 0;
            __p[4] = 0;
            v327 = 0x400000000000000;
            __p[3] = (void *)1869903201;
            v328 = 0;
            __p[0] = (void *)(v271 | (v294 << 32));
            LOBYTE(__p[1]) = 1;
            sub_22E6D82D0(&v330, __p);
            if (SHIBYTE(v327) < 0)
              operator delete(__p[3]);
            v275 = (void **)&v330;
            goto LABEL_623;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          sub_22E811E8C((uint64_t)v340);
LABEL_645:
          LODWORD(v334) = *v14;
          *(_QWORD *)(a2 + 136) = v343;
          *(_QWORD *)a2 |= 0x1000000uLL;
          *(_QWORD *)(a2 + 8) = v237;
          LODWORD(v75) = sub_22E8AD898((unint64_t *)a2, 34, v20, (uint64_t *)v335, (_DWORD *)&v334 + 1);
          v47 = 0;
          **(_BYTE **)&v340[0] = BYTE8(v340[0]);
          break;
        default:
          goto LABEL_739;
      }
      goto LABEL_326;
    case 407:
      sub_22E82C1E4(a1, a2);
      goto LABEL_10;
    case 410:
      sub_22F2EE050(a1);
      goto LABEL_10;
    case 424:
      sub_22F2EE328(a1);
      goto LABEL_10;
    case 425:
      sub_22F2EE378(a1);
      goto LABEL_10;
    case 426:
      sub_22E863A08(a1);
      goto LABEL_10;
    default:
      if (v17 != 46
        || (*(_DWORD *)a2 & 0x3FFC0) != 0
        || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 0x40) == 0)
      {
        goto LABEL_739;
      }
      LODWORD(__p[0]) = 0;
      v55 = sub_22E850CD0(a1, (unsigned int *)__p);
      v56 = *(_QWORD *)a2;
      if (v57 || !v55)
      {
        *(_QWORD *)a2 = v56 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
        *(_DWORD *)(a2 + 120) = 0;
        *(_DWORD *)(a2 + 132) = 0;
      }
      else
      {
        v58 = (v56 >> 12) & 0x3F;
        if (v58)
        {
          if (v58 != 50)
          {
            v335[0] = (const char *)sub_22F2F2CB0(v58);
            HIDWORD(v334) = 3658;
            v297 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v297 + 312) = v20;
            *(_DWORD *)(v297 + 316) = 3658;
            if (*(char *)(v297 + 311) < 0)
            {
              **(_BYTE **)(v297 + 288) = 0;
              *(_QWORD *)(v297 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v297 + 288) = 0;
              *(_BYTE *)(v297 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v340, v297);
            v298 = v335[0];
            v299 = *(unsigned __int8 **)&v340[0];
            if (!*(_QWORD *)&v340[0])
            {
              v299 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v340[0] + 1));
              *(_QWORD *)&v340[0] = v299;
            }
            v299[*v299 + 1] = 1;
            v300 = *(_QWORD *)&v340[0];
            v301 = **(_BYTE **)&v340[0];
            **(_BYTE **)&v340[0] = v301 + 1;
            *(_QWORD *)(v300 + 8 * v301 + 16) = v298;
            sub_22E3BB0B8((uint64_t)v340);
          }
        }
        else
        {
          *(_DWORD *)(a2 + 120) = v20;
          *(_DWORD *)(a2 + 132) = v20;
          *(_QWORD *)a2 = v56 & 0xFFFFFFFFFFDC0FFFLL | 0x1C000;
          *(_QWORD *)(a2 + 8) = v55;
        }
        *(_DWORD *)(a2 + 92) = __p[0];
      }
      goto LABEL_10;
  }
}

uint64_t sub_22E81B924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  __int128 v42;
  void *v43[2];

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
  {
    v10 = *(unsigned __int16 *)(a1 + 32);
    if (v10 > 0xA1)
    {
      if (v10 != 401 && v10 != 162)
        goto LABEL_9;
    }
    else if (v10 != 5 && v10 != 71)
    {
      goto LABEL_9;
    }
    if (sub_22E88BDA8(a1, (a4 & 0xFFFFFFFB) == 1))
    {
      sub_22F2E2198(a1);
      return 1;
    }
  }
LABEL_9:
  v11 = a1 + 16;
  v12 = *(unsigned __int16 *)(a1 + 32);
  v13 = v12;
  v14 = a1 + 16;
  if (v12 == 399)
  {
    v15 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(v15 + 2816);
    if (v16 < *(unsigned int *)(v15 + 2784))
    {
      v14 = *(_QWORD *)(v15 + 2776) + 24 * v16;
      v13 = 399;
      goto LABEL_15;
    }
    v14 = sub_22F162D2C(v15, 1u);
    v13 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v13 == 152 || v13 == 400)
  {
LABEL_49:
    v30 = *(_QWORD *)(a1 + 8);
    v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
    v32 = sub_22F141A3C(HIDWORD(v31), 0, *(_QWORD **)(v30 + 88), *(_DWORD **)(v30 + 56));
    v33 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v33 + 312) = v32;
    *(_DWORD *)(v33 + 316) = 16;
    if (*(char *)(v33 + 311) < 0)
    {
      **(_BYTE **)(v33 + 288) = 0;
      *(_QWORD *)(v33 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v33 + 288) = 0;
      *(_BYTE *)(v33 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v42, v33);
    v34 = sub_22F2F2CB0((*(_DWORD *)a2 >> 12) & 0x3F);
    v35 = (unsigned __int8 *)v42;
    if (!(_QWORD)v42)
    {
      v35 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v42 + 1));
      *(_QWORD *)&v42 = v35;
    }
    v35[*v35 + 1] = 1;
    v36 = v42;
    v37 = *(unsigned __int8 *)v42;
    *(_BYTE *)v42 = v37 + 1;
    *(_QWORD *)(v36 + 8 * v37 + 16) = v34;
    *(_BYTE *)(v36 + (v37 + 1) + 1) = 4;
    v38 = v42;
    v39 = *(unsigned __int8 *)v42;
    *(_BYTE *)v42 = v39 + 1;
    *(_QWORD *)(v38 + 8 * v39 + 16) = 62;
    sub_22E3BB0B8((uint64_t)&v42);
    *(_QWORD *)a2 &= 0xFFFFFFFFFFDC0FFFLL;
    *(_DWORD *)(a2 + 120) = 0;
    LODWORD(v42) = 0;
    *((_QWORD *)&v42 + 1) = 0;
    v43[0] = 0;
    sub_22E818334(a1, a2, &v42, a3, a4, a5, 0);
    return 0;
  }
LABEL_15:
  v17 = *(_QWORD *)(v14 + 8);
  v18 = *(unsigned __int16 *)(v14 + 16);
  if (v18 != 5)
  {
    if (v18 == 401 && *(_DWORD *)(v17 + 32) == 2)
      goto LABEL_49;
    return 0;
  }
  v19 = *(_DWORD *)v14;
  if (v12 != 399)
  {
    v20 = *(_QWORD *)(a1 + 8);
    v21 = *(_QWORD *)(v20 + 2816);
    if (v21 >= *(unsigned int *)(v20 + 2784))
    {
      v22 = 1;
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  if (v13 != 1)
  {
    v20 = *(_QWORD *)(a1 + 8);
    v21 = *(_QWORD *)(v20 + 2816) + 1;
    if (v21 >= *(unsigned int *)(v20 + 2784))
    {
      v22 = 2;
LABEL_26:
      v11 = sub_22F162D2C(v20, v22);
      goto LABEL_27;
    }
LABEL_24:
    v11 = *(_QWORD *)(v20 + 2776) + 24 * v21;
  }
LABEL_27:
  v23 = *(unsigned __int16 *)(v11 + 16);
  if (v23 <= 0x1E && ((1 << v23) & 0x58000020) != 0)
    goto LABEL_49;
  v25 = v23 != 399 && v23 != 71;
  if (v12 != 399 || v23 == 71 || v23 == 399)
    goto LABEL_48;
  v42 = 0u;
  *(_OWORD *)v43 = 0u;
  v26 = *(unsigned int *)(a1 + 16);
  LODWORD(v27) = *(_DWORD *)(a1 + 20);
  if ((_DWORD)v27)
    v27 = v27;
  else
    v27 = v26;
  sub_22E95AAE0(*(_QWORD *)(a1 + 88), *(unint64_t **)(a1 + 24), v26 | (v27 << 32), (uint64_t)&v42);
  v41 = v17;
  v28 = sub_22EA02430(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v42, &v41, v19, v11, 0);
  v25 = 1;
  if (v28 > 0xB)
    goto LABEL_44;
  if (((1 << v28) & 0x928) != 0)
  {
    v25 = 0;
LABEL_44:
    v29 = 1;
    goto LABEL_45;
  }
  v29 = 1;
  if (v28 == 1)
  {
    sub_22F2E2198(a1);
    v29 = 0;
  }
LABEL_45:
  if (HIDWORD(v43[1]))
    free(v43[0]);
  if (v29)
  {
LABEL_48:
    if (!v25)
      goto LABEL_49;
    return 0;
  }
  return 1;
}

unint64_t sub_22E81BCEC(uint64_t a1, uint64_t *a2, int a3, _DWORD *a4, uint64_t a5, void **a6)
{
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int *v16;
  char v17;
  int v18;
  uint64_t v19;
  int *v20;
  char v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  void **v26;
  unsigned int *v27;
  unsigned int v28;
  _BOOL4 v29;
  const char *v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  int v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void **v58;
  void **v59;
  _DWORD *v60;
  _DWORD *v61;
  _BYTE v62[32];
  _BYTE v63[32];
  _BYTE v64[32];
  _OWORD v65[3];
  uint64_t v66;
  uint64_t v67[4];
  void *v68[4];
  __int128 v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _BYTE v73[24];
  uint64_t *v74;
  __int128 v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  __int16 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD v95[3];
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v74 = a2;
  v78 = 0;
  v79 = 0;
  v75 = 0u;
  v76 = 0u;
  v77 = 0;
  v80 = a2[11];
  v81 = a3;
  v82 = 0u;
  v83 = 0;
  v84 = &v86;
  v85 = 0x800000000;
  v87 = (*a2 & 0x3F000) == 204800;
  v12 = a2[5];
  v88 = 0u;
  v89 = v12;
  v93 = 0;
  v92 = 0u;
  v91 = 0u;
  v90 = 0u;
  v94 = *(_QWORD **)(a1 + 88);
  v95[0] = a2 + 29;
  v95[1] = &v96;
  v95[2] = 0x400000000;
  v13 = v94[400];
  v94[400] = v95;
  v97 = v13;
  v98 = 0;
  sub_22E8227E4(a1, (uint64_t)&v74, (unint64_t)sub_22E823490, 0);
  if (!v77 && !v78 && !(_DWORD)v82 && (v81 - 12) >= 0xF && ((1 << v81) & 0x6E) == 0)
  {
    sub_22F2E2198(a1);
    v23 = 0;
    goto LABEL_102;
  }
  if (*(_WORD *)(a1 + 32) == 168)
    sub_22E831098(a1, (uint64_t)&v74);
  v14 = (_DWORD *)(a1 + 16);
  v71 = v73;
  v72 = 0x200000000;
  v73[16] = 1;
  v15 = v85;
  if ((_DWORD)v85)
  {
    v16 = (int *)v84;
    while (1)
    {
      v18 = *v16;
      v16 += 30;
      v17 = v18;
      if (v18 != 6)
        break;
      if (!--v15)
        goto LABEL_14;
    }
    if (((1 << v17) & 0xB7) == 0)
    {
      sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v74, (uint64_t)&v71, 0);
      if (*(_WORD *)(a1 + 32) == 119)
      {
        v59 = a6;
        v61 = a4;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v33 = *(unsigned int *)(a1 + 40);
        v34 = *a2;
        if ((*a2 & 0x800000000) == 0)
        {
          *a2 = v34 | 0x800000000;
          *((_DWORD *)a2 + 44) = v33;
        }
        v35 = (v34 & 0x800000000) == 0;
        sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v74, (uint64_t)&v71, 0);
        v36 = *(unsigned __int16 *)(a1 + 32);
        v38 = v36 == 62;
        v37 = v36 & 0xFFFFFF7F;
        v38 = v38 || v37 == 23;
        if (!v38)
          v35 = 0;
        v39 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v39 + 312) = v33;
        *(_DWORD *)(v39 + 316) = 1460;
        if (*(char *)(v39 + 311) < 0)
        {
          **(_BYTE **)(v39 + 288) = 0;
          *(_QWORD *)(v39 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v39 + 288) = 0;
          *(_BYTE *)(v39 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v67, v39);
        if (v35)
        {
          BYTE4(v68[2]) = 0;
          *(void **)((char *)&v68[1] + 4) = 0;
          v69 = 0uLL;
          v68[3] = 0;
          LOBYTE(v70) = 0;
          v68[0] = (void *)(v33 | (v33 << 32));
          LOBYTE(v68[1]) = 1;
          sub_22E6D82D0(v67, v68);
          *(_QWORD *)((char *)v65 + 12) = 0;
          BYTE4(v65[1]) = 0;
          *(_QWORD *)&v65[0] = v80 | ((unint64_t)v80 << 32);
          BYTE8(v65[0]) = 0;
          *((_QWORD *)&v65[2] + 1) = 0xA00000000000000;
          BYTE3(v65[2]) = 0;
          WORD2(v65[2]) = 0;
          *(_DWORD *)((char *)&v65[2] + 6) = 0;
          strcpy((char *)&v65[1] + 8, "_Noreturn ");
          LOBYTE(v66) = 0;
        }
        else
        {
          v70 = 0;
          v69 = 0u;
          memset(v68, 0, sizeof(v68));
          sub_22E6D82D0(v67, v68);
          v66 = 0;
          memset(v65, 0, sizeof(v65));
        }
        a6 = v59;
        sub_22E6D82D0(v67, v65);
        a4 = v61;
        if (SHIBYTE(v65[2]) < 0)
          operator delete(*((void **)&v65[1] + 1));
        if (SHIBYTE(v69) < 0)
          operator delete(v68[3]);
        sub_22E3BB0B8((uint64_t)v67);
      }
    }
LABEL_14:
    v19 = v85;
    if ((_DWORD)v85)
    {
      v20 = (int *)v84;
      do
      {
        v22 = *v20;
        v20 += 30;
        v21 = v22;
        if (v22 != 6)
          break;
        --v19;
      }
      while (v19);
      if (((1 << v21) & 0xB7) == 0)
      {
        if (*(_WORD *)(a1 + 32) == 63)
        {
          v47 = *(_QWORD *)(a1 + 8);
          v48 = *(_QWORD *)(v47 + 2816);
          v49 = v48 >= *(unsigned int *)(v47 + 2784) ? sub_22F162D2C(v47, 1u) : *(_QWORD *)(v47 + 2776) + 24 * v48;
          if (*(_WORD *)(v49 + 16) == 3)
          {
            v50 = *(_QWORD *)(a1 + 8);
            if (*(_QWORD *)(v50 + 752))
            {
              *(_BYTE *)(v50 + 864) = 1;
              *(_BYTE *)(*(_QWORD *)(v50 + 48) + 6) = 1;
            }
            *(_WORD *)(a1 + 32) = 1;
            sub_22E9CA760(*(char ***)(a1 + 88), (uint64_t)&v74);
            goto LABEL_21;
          }
        }
        v58 = a6;
        v60 = a4;
        v51 = sub_22E82F8E8((_QWORD *)a1, a1 + 16);
        if (v51)
        {
          v52 = v51;
          do
          {
            sub_22E884578(a1, (int *)(a1 + 16), 1781, (uint64_t)v65);
            v53 = v52 - 1;
            v30 = "override";
            switch(v53)
            {
              case 0:
                break;
              case 1:
                v30 = "final";
                break;
              case 2:
              case 4:
              case 5:
              case 6:
                __break(1u);
                goto LABEL_142;
              case 3:
                v30 = "sealed";
                break;
              case 7:
                v30 = "__final";
                break;
              default:
                v30 = "abstract";
                break;
            }
            v54 = *(unsigned __int8 **)&v65[0];
            if (!*(_QWORD *)&v65[0])
            {
              v54 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v65[0] + 1));
              *(_QWORD *)&v65[0] = v54;
            }
            v54[*v54 + 1] = 1;
            v55 = *(_QWORD *)&v65[0];
            v56 = **(_BYTE **)&v65[0];
            **(_BYTE **)&v65[0] = v56 + 1;
            *(_QWORD *)(v55 + 8 * v56 + 16) = v30;
            v57 = (void *)(*v14 | ((unint64_t)*v14 << 32));
            *(void **)((char *)&v68[1] + 4) = 0;
            BYTE4(v68[2]) = 0;
            v69 = 0uLL;
            v68[3] = 0;
            LOBYTE(v70) = 0;
            v68[0] = v57;
            LOBYTE(v68[1]) = 1;
            sub_22E6D82D0((uint64_t *)v65, v68);
            if (SHIBYTE(v69) < 0)
              operator delete(v68[3]);
            sub_22E3BB0B8((uint64_t)v65);
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            v52 = sub_22E82F8E8((_QWORD *)a1, a1 + 16);
          }
          while (v52);
        }
        if ((sub_22E888EFC(a1) & 1) == 0)
        {
          if (a3)
          {
            if (*(_WORD *)(a1 + 32) == 23)
            {
              sub_22E884578(a1, (int *)(a1 + 16), 1565, (uint64_t)v62);
              sub_22E3BB0B8((uint64_t)v62);
              sub_22F2E2198(a1);
              goto LABEL_21;
            }
          }
          else
          {
            if (sub_22E888FB8(a1, (uint64_t)&v74))
            {
              if ((*a2 & 7) == 1)
              {
                sub_22E884578(a1, (int *)(a1 + 16), 1564, (uint64_t)v64);
                sub_22E3BB0B8((uint64_t)v64);
                *a2 &= 0xFFFFFFFFFFFFFFC0;
                a2[12] = 0;
              }
              LODWORD(v68[0]) = 0;
              v68[1] = 0;
              v68[2] = 0;
              v43 = sub_22E8895A4(a1, (uint64_t)&v74, (uint64_t)v68, &v71);
              goto LABEL_81;
            }
            if ((sub_22E81CB8C(a1, 0) & 1) == 0)
            {
              sub_22E884578(a1, (int *)(a1 + 16), 1502, (uint64_t)v63);
              sub_22E3BB0B8((uint64_t)v63);
              strcpy((char *)v68, ">");
              sub_22E885940(a1, (unsigned __int16 *)v68, 1, 0);
              goto LABEL_21;
            }
          }
        }
      }
    }
  }
  if ((sub_22E81CF54(a1, (uint64_t)&v74) & 1) != 0)
  {
LABEL_21:
    v23 = 0;
    goto LABEL_100;
  }
  if (!a5)
    goto LABEL_31;
  v24 = *(unsigned __int16 *)(a1 + 32);
  if (v24 == 61)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    *(_DWORD *)a5 = *(_DWORD *)(a1 + 40);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72))
      sub_22EC80584(*(_QWORD *)(a1 + 88));
    if (*(_WORD *)(a1 + 32) == 23)
    {
      v25 = sub_22E84AF40(a1);
    }
    else
    {
      v40 = sub_22E83766C(a1, 0);
      v25 = sub_22E83778C(a1, v40, 1);
    }
    *(_QWORD *)(a5 + 8) = v25;
    goto LABEL_74;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 0x40) == 0
    || v24 != 5
    || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 2696))
  {
LABEL_31:
    v26 = &v68[2];
    v68[0] = &v68[2];
    v68[1] = (void *)0x800000000;
    LODWORD(v65[0]) = 0;
    *((_QWORD *)&v65[0] + 1) = 0;
    *(_QWORD *)&v65[1] = 0;
    v27 = (unsigned int *)sub_22E81CFE4(a1, (uint64_t)&v74, (int ****)v65);
    if ((_DWORD)v72)
      sub_22E80F20C(a1, &v71, (uint64_t)v27, 1, 0);
    if (!v98)
    {
      sub_22EA7E84C(v94, v97, v27);
      v98 = 1;
    }
    if (v27)
    {
      v28 = v68[1];
      if (LODWORD(v68[1]) >= HIDWORD(v68[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v28 = v68[1];
      }
      *((_QWORD *)v68[0] + v28) = v27;
      ++LODWORD(v68[1]);
    }
    v29 = a3 != 9;
    if (*(_WORD *)(a1 + 32) == 65)
    {
      v58 = &v68[2];
      v60 = a4;
      while (1)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v30 = (const char *)*(unsigned int *)(a1 + 40);
        if (a3 != 9 && (*(_WORD *)(a1 + 34) & 1) != 0 && !sub_22E81C8A4(a1, a3))
          break;
        sub_22E81DC5C((uint64_t)&v74);
        LODWORD(v93) = (_DWORD)v30;
        sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v74, 0, 0);
        if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 0x20) != 0)
          sub_22F2E1B94(a1);
        sub_22E8227E4(a1, (uint64_t)&v74, (unint64_t)sub_22E823490, 0);
        if ((v87 & 1) == 0 && (*v74 & 0x3F000) != 0x32000)
        {
          if (*(_WORD *)(a1 + 32) == 168)
            sub_22E831098(a1, (uint64_t)&v74);
          LODWORD(v65[0]) = 0;
          *((_QWORD *)&v65[0] + 1) = 0;
          *(_QWORD *)&v65[1] = 0;
          v31 = 0;
          if ((sub_22E81CF54(a1, (uint64_t)&v74) & 1) == 0)
            v31 = (unsigned int *)sub_22E81CFE4(a1, (uint64_t)&v74, (int ****)v65);
          if (!v98)
          {
            sub_22EA7E84C(v94, v97, v31);
            v98 = 1;
          }
          if (v31)
          {
            v32 = LODWORD(v68[1]);
            if (LODWORD(v68[1]) >= (unint64_t)HIDWORD(v68[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v32 = LODWORD(v68[1]);
            }
            *((_QWORD *)v68[0] + v32) = v31;
            ++LODWORD(v68[1]);
          }
        }
        if (*(_WORD *)(a1 + 32) != 65)
          goto LABEL_87;
      }
      v44 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v44 + 312) = (_DWORD)v30;
      *(_DWORD *)(v44 + 316) = 1533;
      if (*(char *)(v44 + 311) < 0)
      {
        **(_BYTE **)(v44 + 288) = 0;
        *(_QWORD *)(v44 + 296) = 0;
      }
      else
      {
LABEL_142:
        *(_BYTE *)(v44 + 288) = 0;
        *(_BYTE *)(v44 + 311) = 0;
      }
      a4 = v60;
      sub_22E78E558((uint64_t)v67, v44);
      BYTE4(v65[1]) = 0;
      *(_QWORD *)((char *)v65 + 12) = 0;
      *(_QWORD *)&v65[2] = 0;
      *((_QWORD *)&v65[2] + 1) = 0x100000000000000;
      LOBYTE(v66) = 0;
      *(_QWORD *)&v65[0] = (unint64_t)v30 | ((_QWORD)v30 << 32);
      BYTE8(v65[0]) = 1;
      *((_QWORD *)&v65[1] + 1) = 59;
      sub_22E6D82D0(v67, v65);
      if (SHIBYTE(v65[2]) < 0)
        operator delete(*((void **)&v65[1] + 1));
      sub_22E3BB0B8((uint64_t)v67);
      v29 = 0;
LABEL_87:
      v26 = v58;
    }
    if (a4)
      *a4 = *v14;
    if (v29)
    {
      v45 = a3 ? 1533 : 1584;
      if (sub_22E884BB4(a1, v45))
      {
        if ((sub_22E81CB8C(a1, 0) & 1) == 0)
        {
          LOWORD(v65[0]) = 24;
          sub_22E885940(a1, (unsigned __int16 *)v65, 1, 3);
          if (*(_WORD *)(a1 + 32) == 62)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          }
        }
      }
    }
    v23 = sub_22EA2CFC4(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a2, (uint64_t *)v68[0], v68[1]);
    if (v68[0] != v26)
      free(v68[0]);
    goto LABEL_100;
  }
LABEL_74:
  v41 = (unsigned int *)sub_22EA130FC(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v74);
  v42 = v41;
  v68[0] = v41;
  if (v24 == 61)
  {
    sub_22F31DE88(*(_QWORD **)(a1 + 88), (uint64_t)v41);
  }
  else if (v41 && (v41[7] & 0x7F) - 60 <= 6)
  {
    v41[24] |= 0x1000u;
  }
  sub_22EA2BC1C(*(_QWORD *)(a1 + 88), (unint64_t)v42);
  if (!v98)
  {
    sub_22EA7E84C(v94, v97, v42);
    v98 = 1;
  }
  v43 = sub_22EA2CFC4(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a2, (uint64_t *)v68, 1u);
LABEL_81:
  v23 = v43;
LABEL_100:
  if (v71 != v73)
    free(v71);
LABEL_102:
  sub_22E828C30((uint64_t)&v94);
  sub_22E827F78((uint64_t)&v74);
  return v23;
}

BOOL sub_22E81C8A4(uint64_t a1, int a2)
{
  int v3;
  _BOOL8 result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v3 = *(unsigned __int16 *)(a1 + 32);
  result = 1;
  if (v3 > 140)
  {
    if (v3 > 398)
    {
      if (v3 == 399 || v3 == 401)
        return result;
    }
    else if (v3 == 141 || v3 == 186)
    {
      return result;
    }
    return 0;
  }
  if (v3 <= 20)
  {
    if (v3 == 3)
      return result;
    if (v3 != 5)
    {
      if (v3 == 19 && a2 == 7)
      {
        v7 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v7 + 56) + 1) & 2) != 0)
        {
          v8 = *(_QWORD *)(v7 + 2816);
          if (v8 >= *(unsigned int *)(v7 + 2784))
            v9 = sub_22F162D2C(v7, 1u);
          else
            v9 = *(_QWORD *)(v7 + 2776) + 24 * v8;
          return *(unsigned __int16 *)(v9 + 16) == 19;
        }
      }
      return 0;
    }
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(v10 + 2816);
    if (v11 >= *(unsigned int *)(v10 + 2784))
      v12 = sub_22F162D2C(v10, 1u);
    else
      v12 = *(_QWORD *)(v10 + 2776) + 24 * v11;
    v13 = *(unsigned __int16 *)(v12 + 16);
    result = 1;
    v14 = (v13 - 3);
    if (v14 <= 0x3E)
    {
      if (((1 << (v13 - 3)) & 0x78000800003F0001) != 0)
        return result;
      if (v14 == 2)
      {
        v16 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v16 + 56) + 1) & 2) != 0)
        {
          v17 = *(_QWORD *)(v16 + 2816);
          if (v17 >= *(unsigned int *)(v16 + 2784))
            v18 = sub_22F162D2C(v16, 1u);
          else
            v18 = *(_QWORD *)(v16 + 2776) + 24 * v17;
          return sub_22E82F8E8((_QWORD *)a1, v18) != 0;
        }
        return 0;
      }
      if (v14 == 58)
      {
        if (a2 != 7)
          return (a2 == 0) & *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1);
        return result;
      }
    }
    v15 = (v13 - 127) > 0x3B || ((1 << (v13 - 127)) & 0x800000040000001) == 0;
    if (!v15 || v13 == 71)
      return result;
    return 0;
  }
  v6 = (v3 - 21);
  if (v6 > 0x32)
    return 0;
  if (((1 << v6) & 0x4000400000221) != 0)
    return result;
  if (((1 << v6) & 0xC0) != 0)
    return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1;
  if (v6 != 40)
    return 0;
  if (a2 != 7)
    return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1;
  return result;
}

uint64_t *sub_22E81CAF0(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (*((_WORD *)result + 16) == 186)
  {
    v5 = 0;
    v6 = 0;
    v7 = result + 120;
    v8 = 0;
    sub_22E810414(result, &v5, a3, a2, a4);
    sub_22E82103C(a2 + 1096, (uint64_t)&v5);
    if (HIDWORD(v5))
      *(_DWORD *)(a2 + 76) = HIDWORD(v5);
    sub_22E8D1BC4((uint64_t)v7, (uint64_t)&v7);
    sub_22E80F94C(&v8);
    return sub_22E80F94C(&v6);
  }
  return result;
}

unint64_t sub_22E81CB8C(uint64_t a1, char a2)
{
  uint64_t v3;
  char v4;
  unint64_t result;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  while (2)
  {
    v3 = 0;
    v4 = a2;
    result = 1;
    switch(*(_WORD *)(a1 + 32))
    {
      case 0x2E:
        return (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) >> 6) & 1;
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4D:
      case 0x4E:
      case 0x51:
      case 0x52:
      case 0x53:
      case 0x55:
      case 0x59:
      case 0x5A:
      case 0x5B:
      case 0x63:
      case 0x66:
      case 0x69:
      case 0x6F:
      case 0x71:
      case 0x75:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7F:
      case 0x81:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x87:
      case 0x88:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x99:
      case 0x9A:
      case 0x9D:
      case 0x9E:
      case 0xA3:
      case 0xA4:
      case 0xA7:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAB:
      case 0xAC:
      case 0xAD:
      case 0xB8:
      case 0xB9:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBE:
      case 0xBF:
      case 0xC0:
      case 0xC1:
      case 0xC2:
      case 0xC3:
      case 0xC4:
      case 0xC7:
      case 0xC9:
      case 0xCA:
      case 0xCC:
      case 0xCD:
        return v3;
      case 0x47:
        v17 = *(_QWORD *)(a1 + 8);
        v18 = *(_QWORD *)(v17 + 2816);
        if (v18 >= *(unsigned int *)(v17 + 2784))
          v19 = sub_22F162D2C(v17, 1u);
        else
          v19 = *(_QWORD *)(v17 + 2776) + 24 * v18;
        if (*(_WORD *)(v19 + 16) == 140)
          return 0;
        v20 = *(_QWORD *)(a1 + 8);
        v21 = *(_QWORD *)(v20 + 2816);
        v22 = v21 >= *(unsigned int *)(v20 + 2784) ? sub_22F162D2C(v20, 1u) : *(_QWORD *)(v20 + 2776) + 24 * v21;
        if (*(_WORD *)(v22 + 16) == 132)
          return 0;
        v23 = sub_22E88B7AC(a1);
        a2 = 0;
        if ((v23 & 1) != 0)
          return 1;
        continue;
      case 0x4C:
      case 0x4F:
      case 0x50:
      case 0x54:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x64:
      case 0x65:
      case 0x67:
      case 0x68:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x70:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7D:
      case 0x7E:
      case 0x80:
      case 0x82:
      case 0x86:
      case 0x89:
      case 0x9B:
      case 0x9C:
      case 0x9F:
      case 0xA0:
      case 0xA1:
      case 0xA5:
      case 0xA6:
      case 0xAE:
      case 0xAF:
      case 0xB0:
      case 0xB1:
      case 0xB2:
      case 0xB3:
      case 0xB4:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xBA:
      case 0xC5:
      case 0xC6:
      case 0xC8:
      case 0xCB:
      case 0xCE:
      case 0xCF:
        return result;
      case 0x8E:
        return ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 52) >> 30) & 1;
      case 0x98:
      case 0xA2:
        goto LABEL_5;
      default:
        if (*(_WORD *)(a1 + 32) != 5)
        {
          switch(*(_WORD *)(a1 + 32))
          {
            case 0x126:
            case 0x127:
            case 0x12E:
            case 0x12F:
            case 0x130:
            case 0x131:
            case 0x132:
            case 0x133:
            case 0x134:
            case 0x135:
            case 0x136:
            case 0x138:
            case 0x139:
            case 0x13A:
            case 0x13B:
            case 0x13C:
            case 0x13E:
            case 0x13F:
            case 0x140:
            case 0x141:
            case 0x142:
            case 0x143:
            case 0x144:
            case 0x145:
            case 0x146:
            case 0x147:
            case 0x148:
            case 0x149:
            case 0x14A:
            case 0x14B:
            case 0x14C:
            case 0x14F:
            case 0x150:
            case 0x151:
            case 0x152:
            case 0x153:
            case 0x154:
            case 0x155:
            case 0x156:
            case 0x157:
            case 0x158:
            case 0x159:
            case 0x15A:
            case 0x162:
            case 0x163:
            case 0x166:
            case 0x167:
            case 0x16E:
            case 0x16F:
            case 0x170:
            case 0x171:
            case 0x172:
            case 0x173:
            case 0x174:
            case 0x175:
            case 0x176:
            case 0x177:
            case 0x17C:
            case 0x182:
            case 0x187:
            case 0x197:
              return result;
            case 0x15B:
              v24 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
              if ((*(_DWORD *)(v24 + 52) & 0x40000000) == 0)
                return 0;
              v30 = *(_QWORD *)(v24 + 56);
              if (v30 > 0xC7)
                return 1;
              else
                return BYTE4(v30) & 1;
            case 0x18F:
              v8 = *(_QWORD *)(a1 + 8);
              v9 = *(_QWORD *)(v8 + 2816);
              if (v9 >= *(unsigned int *)(v8 + 2784))
                v10 = sub_22F162D2C(v8, 1u);
              else
                v10 = *(_QWORD *)(v8 + 2776) + 24 * v9;
              if (*(_WORD *)(v10 + 16) == 401)
              {
                v34 = *(_QWORD *)(a1 + 8);
                v35 = *(_QWORD *)(v34 + 2816);
                v36 = v35 >= *(unsigned int *)(v34 + 2784) ? sub_22F162D2C(v34, 1u) : *(_QWORD *)(v34 + 2776) + 24 * v35;
                v39 = *(_QWORD *)(v36 + 8);
                if (v39)
                {
                  if (!*(_DWORD *)(v39 + 32))
                    goto LABEL_13;
                }
              }
              v11 = *(_QWORD *)(a1 + 8);
              v12 = *(_QWORD *)(v11 + 2816);
              v13 = v12 >= *(unsigned int *)(v11 + 2784) ? sub_22F162D2C(v11, 1u) : *(_QWORD *)(v11 + 2776) + 24 * v12;
              if (*(_WORD *)(v13 + 16) == 5 && (sub_22E88001C(a1) & 1) != 0)
                goto LABEL_13;
              result = sub_22E8801BC(a1);
              if (!(_DWORD)result)
                return result;
              if (*(_WORD *)(a1 + 32) == 1)
              {
                v14 = a1 + 16;
              }
              else
              {
                v37 = *(_QWORD *)(a1 + 8);
                v38 = *(_QWORD *)(v37 + 2816) + 1;
                if (v38 >= *(unsigned int *)(v37 + 2784))
                  v14 = sub_22F162D2C(v37, 2u);
                else
                  v14 = *(_QWORD *)(v37 + 2776) + 24 * v38;
              }
              v15 = *(unsigned __int16 *)(v14 + 16);
              v16 = v15 == 76 || v15 == 162;
              goto LABEL_63;
            case 0x190:
              if ((a2 & 1) == 0)
                goto LABEL_13;
              return sub_22E852BB0(a1) ^ 1;
            case 0x191:
              if (!*(_DWORD *)(*(_QWORD *)(a1 + 24) + 32))
                goto LABEL_13;
              result = sub_22E8801BC(a1);
              if (!(_DWORD)result)
                return result;
              v25 = *(_QWORD *)(a1 + 8);
              v26 = *(_QWORD *)(v25 + 2816);
              if (v26 >= *(unsigned int *)(v25 + 2784))
                v27 = sub_22F162D2C(v25, 1u);
              else
                v27 = *(_QWORD *)(v25 + 2776) + 24 * v26;
              if (*(_WORD *)(v27 + 16) == 76)
              {
LABEL_13:
                result = 1;
              }
              else
              {
                v31 = *(_QWORD *)(a1 + 8);
                v32 = *(_QWORD *)(v31 + 2816);
                if (v32 >= *(unsigned int *)(v31 + 2784))
                  v33 = sub_22F162D2C(v31, 1u);
                else
                  v33 = *(_QWORD *)(v31 + 2776) + 24 * v32;
                v16 = *(unsigned __int16 *)(v33 + 16) == 162;
LABEL_63:
                result = v16;
              }
              break;
            default:
              return v3;
          }
          return result;
        }
        v6 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v6 + 56) + 1) & 0x40) != 0)
        {
          v28 = *(_QWORD *)(v6 + 2816);
          v29 = v28 >= *(unsigned int *)(v6 + 2784) ? sub_22F162D2C(v6, 1u) : *(_QWORD *)(v6 + 2776) + 24 * v28;
          if (*(_WORD *)(v29 + 16) == 25)
            return 0;
        }
        if ((sub_22E822180(a1) & 1) != 0)
          return 1;
LABEL_5:
        if ((sub_22E88B7AC(a1) & 1) == 0 && (sub_22E88001C(a1) & 1) == 0)
        {
          if (*(_WORD *)(a1 + 32) == 5)
            return 0;
          a2 = 0;
          if ((v4 & 1) != 0)
          {
            v7 = sub_22E852BB0(a1);
            a2 = 0;
            v3 = 0;
            if ((v7 & 1) != 0)
              return v3;
          }
          continue;
        }
        return 1;
    }
  }
}

uint64_t sub_22E81CF54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int16 v7;

  if (*(_WORD *)(a1 + 32) == 127)
  {
    v4 = a2;
    v5 = a1;
    v6 = 0;
    v3 = sub_22E8889BC(a1, 1, &v6);
    if ((v3 & 1) != 0)
    {
      v7 = 62;
      sub_22E885940(v5, &v7, 1, 2);
      return 1;
    }
    a2 = v4;
    *(_QWORD *)(v4 + 1128) = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (v6)
      *(_DWORD *)(v4 + 76) = v6;
    a1 = v5;
  }
  sub_22E81CAF0((uint64_t *)a1, a2, 0, 0);
  return 0;
}

uint64_t sub_22E81CFE4(uint64_t a1, uint64_t a2, int ****a3)
{
  unsigned int v6;
  int v7;
  uint64_t v9;
  int *v10;
  char v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  int v22;
  int *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  _QWORD *v29;
  uint64_t v30;
  int **v31;
  void *v32;
  uint64_t v33;
  int **v34;
  _BYTE v35[12];
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if ((sub_22E88BE44(a1) & 1) != 0)
  {
    v6 = 1u;
  }
  else
  {
    v7 = *(unsigned __int16 *)(a1 + 32);
    if (v7 != 21)
    {
      if (v7 == 23 && (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
      {
        if (!*(_QWORD *)(a1 + 2688) || (v9 = *(unsigned int *)(a2 + 120), !(_DWORD)v9))
        {
          v6 = 3;
          goto LABEL_19;
        }
        v10 = *(int **)(a2 + 112);
        v6 = 3;
        while (1)
        {
          v12 = *v10;
          v10 += 30;
          v11 = v12;
          if (v12 != 6)
            break;
          if (!--v9)
            goto LABEL_19;
        }
        v6 = 3u;
        if (((1 << v11) & 0xB7) != 0)
          goto LABEL_19;
      }
      v6 = 0;
      goto LABEL_20;
    }
    v6 = 2u;
  }
LABEL_19:
  *(_WORD *)(a2 + 1088) |= 0x200u;
LABEL_20:
  v13 = *(_DWORD *)a3;
  if ((*(_DWORD *)a3 - 1) < 2)
  {
    v14 = *(_QWORD *)(a1 + 88);
    v15 = sub_22EA13184(v14, *(_QWORD *)(v14 + 12888), (uint64_t **)a2, *a3[1], *((unsigned int *)a3[1] + 2));
    sub_22EA114E8(v14, v15);
    goto LABEL_29;
  }
  if (v13 != 3)
  {
    if (v13)
      goto LABEL_29;
    goto LABEL_23;
  }
  if (*(_WORD *)(a1 + 32) != 62)
  {
    if (*(_DWORD *)(a2 + 40) != 7)
    {
      sub_22E884578(a1, (int *)(a1 + 16), 1744, (uint64_t)&v32);
      v28 = (unsigned __int8 *)v32;
      if (!v32)
      {
        v28 = (unsigned __int8 *)sub_22E3B8AAC(v33);
        v32 = v28;
      }
      v28[*v28 + 1] = 2;
      v29 = v32;
      v30 = *(unsigned __int8 *)v32;
      *(_BYTE *)v32 = v30 + 1;
      v29[v30 + 2] = 2;
      v31 = (int **)(*((unsigned int *)a3 + 5) | ((unint64_t)*((unsigned int *)a3 + 5) << 32));
      *(_QWORD *)&v35[4] = 0;
      v36 = 0;
      v38 = 0;
      v39 = 0;
      v37 = 0;
      v40 = 0;
      v34 = v31;
      v35[0] = 1;
      sub_22E6D82D0((uint64_t *)&v32, &v34);
      if (SHIBYTE(v39) < 0)
        operator delete((void *)v37);
      sub_22E3BB0B8((uint64_t)&v32);
LABEL_23:
      sub_22EA130FC(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a2);
      goto LABEL_29;
    }
    v18 = sub_22F141A3C(*((unsigned int *)a3 + 5), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
    v19 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v19 + 312) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v19 + 316) = 1548;
    if (*(char *)(v19 + 311) < 0)
    {
      **(_BYTE **)(v19 + 288) = 0;
      *(_QWORD *)(v19 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v19 + 288) = 0;
      *(_BYTE *)(v19 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v32, v19);
    v20 = *((unsigned int *)a3 + 5) | ((unint64_t)*((unsigned int *)a3 + 5) << 32);
    v21 = v32;
    if (!v32)
    {
      v21 = (void *)sub_22E3B8AAC(v33);
      v32 = v21;
    }
    sub_22E4D6448((uint64_t)v21 + 336, v20, 1);
    v36 = 0;
    *(_QWORD *)&v35[4] = 0;
    v38 = 0;
    v39 = 0x200000000000000;
    v37 = 15932;
    v34 = (int **)(v18 | ((unint64_t)v18 << 32));
    v35[0] = 0;
    v40 = 0;
    sub_22E6D82D0((uint64_t *)&v32, &v34);
    if (SHIBYTE(v39) < 0)
      operator delete((void *)v37);
    sub_22E3BB0B8((uint64_t)&v32);
    v34 = (int **)&v35[8];
    *(_QWORD *)v35 = 0x400000000;
    v22 = *((_DWORD *)a3 + 5);
    v23 = (int *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 2032, 16, 3);
    sub_22EFE8D6C(v23, v24, v22, v18, 0, 0, v18, 0);
    v25 = *(_DWORD *)v35;
    if (*(_DWORD *)v35 >= *(_DWORD *)&v35[4])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v25 = *(_DWORD *)v35;
    }
    v34[v25] = v23;
    ++*(_DWORD *)v35;
    v26 = *(_QWORD *)(a1 + 88);
    v27 = sub_22EA13184(v26, *(_QWORD *)(v26 + 12888), (uint64_t **)a2, v34, *(unsigned int *)v35);
    sub_22EA114E8(v26, v27);
    if (v34 != (int **)&v35[8])
      free(v34);
LABEL_29:
    __asm { BR              X10 ; loc_22E81D1E0 loc_22E81D1F0 loc_22E81D29C loc_22E81D304 }
  }
  sub_22ED6FDDC(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *((_DWORD *)a3 + 4), *((unsigned int *)a3 + 5), a2);
  if (!v16)
    goto LABEL_29;
  LOWORD(v34) = 62;
  sub_22E885940(a1, (unsigned __int16 *)&v34, 1, 2);
  return 0;
}

void sub_22E81DC5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_22E827FFC(a1);
  if (!*(_BYTE *)(a1 + 2048))
    sub_22EA7E84C(*(_QWORD **)(a1 + 1688), *(_QWORD *)(a1 + 2040), 0);
  v2 = *(_QWORD *)(a1 + 1688);
  v3 = *(_QWORD *)(v2 + 3200);
  *(_QWORD *)(v2 + 3200) = a1 + 1696;
  *(_QWORD *)(a1 + 2040) = v3;
  *(_BYTE *)(a1 + 2048) = 0;
}

uint64_t *sub_22E81DCB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  if (a4 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 56) + 1) & 1) != 0)
  {
    if (*(_QWORD *)(a3 + 16))
    {
      sub_22E885C30(a2, 0);
      v7 = *(_QWORD *)(a2 + 88);
      v8 = *(_QWORD *)(v7 + 12888);
    }
    else
    {
      v8 = 0;
      v7 = *(_QWORD *)(a2 + 88);
    }
    sub_22EAD1280(v7, v8, a4);
  }
  return a1;
}

void sub_22E81DD2C(uint64_t *a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (_DWORD *)a1[2];
  if (v2 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 56) + 1) & 1) != 0)
  {
    v3 = *(_QWORD *)(a1[1] + 16);
    v4 = *(_QWORD *)(*a1 + 88);
    if (v3)
    {
      v5 = *(_QWORD **)(v4 + 12888);
      sub_22EAD13F8(v4, v5, v2);
      if (v5)
        sub_22E885CF4(*a1);
    }
    else
    {
      sub_22EAD13F8(v4, 0, v2);
    }
  }
  a1[2] = 0;
}

uint64_t sub_22E81DD9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t *a7)
{
  uint64_t v7;
  char *v8;
  char *v10;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  __int16 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  BOOL v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v59;
  size_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int v70;
  unint64_t v71;
  _BOOL4 v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned __int8 *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  unsigned int *v89;
  size_t v90;
  const void *v91;
  unsigned int v92;
  char *v93;
  __int128 *p_dst;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t *v98;
  __int16 v99;
  __int16 v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  void *__p[2];
  char v108;
  unsigned __int8 *v109;
  uint64_t v110;
  __int128 __dst;
  uint64_t v112;
  char *v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  int v123;
  _QWORD v124[3];
  __int16 v125;
  int v126;
  char v127;
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)(a1 + 16);
  v7 = *(unsigned int *)(a1 + 16);
  LODWORD(v10) = a6;
  if (((1 << a6) & 0x363) == 0
    || (v16 = *(_QWORD *)(a1 + 8), (*(_BYTE *)(*(_QWORD *)(v16 + 56) + 1) & 1) != 0)
    || ((v17 = *(_QWORD *)(v16 + 2816), v17 >= *(unsigned int *)(v16 + 2784))
      ? (v18 = sub_22F162D2C(v16, 1u))
      : (v18 = *(_QWORD *)(v16 + 2776) + 24 * v17),
        (result = 0, v20 = *(unsigned __int16 *)(v18 + 16), (v20 - 19) <= 0x2E)
      ? (v21 = ((1 << (v20 - 19)) & 0x5C000000001DLL) == 0)
      : (v21 = 1),
        v21 && v20 != 127))
  {
    v22 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56);
    if ((*((_BYTE *)v22 + 60) & 1) != 0 && (*(_BYTE *)(a2 + 2) & 0x40) != 0)
      return 0;
    v23 = *v22;
    if ((v23 & 0x100) != 0)
    {
      if ((*(_QWORD *)a2 & 7) == 4)
      {
        if (!a3)
          return 0;
        goto LABEL_41;
      }
      if (a3 && (*(_DWORD *)a3 && *(_DWORD *)(a3 + 4) || *(_QWORD *)(a3 + 8)))
        goto LABEL_16;
      if ((v23 & 0x10) != 0)
      {
        v28 = sub_22EA014E4(*(_QWORD **)(a1 + 88), *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 16), (_DWORD)v10 == 7);
        if (v28)
        {
          v29 = *(_QWORD *)a2;
          if ((*(_QWORD *)a2 & 0x3F000) == 0)
          {
            *(_DWORD *)(a2 + 120) = v7;
            *(_DWORD *)(a2 + 132) = v7;
            *(_QWORD *)a2 = v29 & 0xFFFFFFFFFFDC0FFFLL | 0x1C000;
            *(_QWORD *)(a2 + 8) = v28;
          }
          *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v8);
          return 0;
        }
      }
    }
    if (!a3)
    {
      v98 = a7;
      v30 = sub_22EA01A14(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 24), *(_QWORD **)(*(_QWORD *)(a1 + 88) + 12888));
      v24 = 1;
      v10 = "enum ";
      v31 = 86;
      v8 = "enum";
      switch(v30)
      {
        case 23:
          break;
        case 24:
          v24 = 0;
          v10 = "union ";
          v31 = 107;
          v8 = "union";
          break;
        case 25:
          v24 = 0;
          v10 = "struct ";
          v31 = 104;
          v8 = "struct";
          break;
        case 26:
          v24 = 0;
          v10 = "class ";
          v31 = 130;
          v8 = "class";
          break;
        case 27:
          v24 = 0;
          v10 = "__interface ";
          v31 = 386;
          v8 = "__interface";
          break;
        default:
          goto LABEL_17;
      }
      v47 = *(unsigned __int16 *)(a1 + 32);
      v97 = v31;
      v48 = 0;
      if ((v47 - 7) >= 6 && (v47 - 13) >= 6 && v47 != 1)
        v48 = *(_QWORD *)(a1 + 24);
      v49 = *(_QWORD **)(a1 + 88);
      v113 = 0;
      *(_QWORD *)&v114 = &v115;
      *((_QWORD *)&v114 + 1) = 0x800000000;
      v118 = 0;
      v119 = 0;
      v120 = 0;
      v121 = v49;
      v122 = v48;
      v123 = 0;
      sub_22EFC6D6C((uint64_t)v124, v48);
      v124[1] = 0;
      v124[2] = 0;
      v125 = 0;
      v126 = 257;
      v127 = 0;
      sub_22EC56024((uint64_t)&v113);
      v50 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v50 + 312) = v7;
      *(_DWORD *)(v50 + 316) = 83;
      if (*(char *)(v50 + 311) < 0)
      {
        **(_BYTE **)(v50 + 288) = 0;
        *(_QWORD *)(v50 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v50 + 288) = 0;
        *(_BYTE *)(v50 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v109, v50);
      v51 = v109;
      if (!v109)
      {
        v51 = (unsigned __int8 *)sub_22E3B8AAC(v110);
        v109 = v51;
      }
      v51[*v51 + 1] = 5;
      v52 = v109;
      v53 = *v109;
      *v109 = v53 + 1;
      *(_QWORD *)&v52[8 * v53 + 16] = v48;
      v52[(v53 + 1) + 1] = 1;
      v54 = v109;
      v55 = *v109;
      v56 = v55 + 1;
      *v109 = v55 + 1;
      *(_QWORD *)&v54[8 * v55 + 16] = v8;
      v57 = (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) >> 8) & 1;
      v54[v56 + 1] = 3;
      v58 = v109;
      v59 = *v109;
      *v109 = v59 + 1;
      *(_QWORD *)&v58[8 * v59 + 16] = v57;
      v60 = strlen(v10);
      sub_22E729148(v10, v60, *(_DWORD *)(a1 + 16), 0, (uint64_t)&v106);
      sub_22E6D82D0((uint64_t *)&v109, &v106);
      if (v108 < 0)
        operator delete(__p[1]);
      sub_22E3BB0B8((uint64_t)&v109);
      if (sub_22EC63520(*(_QWORD *)(a1 + 88), (uint64_t)&v113, *(_QWORD **)(*(_QWORD *)(a1 + 88) + 12888), 0, 0)&& DWORD2(v114))
      {
        v61 = (_QWORD *)v114;
        v62 = 8 * DWORD2(v114);
        do
        {
          v63 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v63 + 312) = *(_DWORD *)((*v61 & 0xFFFFFFFFFFFFFFFCLL) + 24);
          *(_DWORD *)(v63 + 316) = 99;
          if (*(char *)(v63 + 311) < 0)
          {
            **(_BYTE **)(v63 + 288) = 0;
            *(_QWORD *)(v63 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v63 + 288) = 0;
            *(_BYTE *)(v63 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v106, v63);
          v64 = (unsigned __int8 *)v106;
          if (!(_QWORD)v106)
          {
            v64 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v106 + 1));
            *(_QWORD *)&v106 = v64;
          }
          v64[*v64 + 1] = 5;
          v65 = v106;
          v66 = *(unsigned __int8 *)v106;
          *(_BYTE *)v106 = v66 + 1;
          *(_QWORD *)(v65 + 8 * v66 + 16) = v48;
          *(_BYTE *)(v65 + (v66 + 1) + 1) = 1;
          v67 = v106;
          v68 = *(unsigned __int8 *)v106;
          *(_BYTE *)v106 = v68 + 1;
          *(_QWORD *)(v67 + 8 * v68 + 16) = v8;
          sub_22E3BB0B8((uint64_t)&v106);
          ++v61;
          v62 -= 8;
        }
        while (v62);
      }
      if (v24)
        sub_22E81E93C();
      else
        sub_22E82C9D8(a1, v97, v7, a2, a4, a5, 0, 0, v98);
      if (BYTE1(v126))
      {
        if ((_DWORD)v113 == 5)
        {
          sub_22EC64D18(v121, (uint64_t)&v113);
        }
        else if (v119 && (*(_DWORD *)(v121[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v121, (uint64_t)&v113);
        }
      }
      if (v118)
      {
        v96 = sub_22EC6CBD0(v118);
        MEMORY[0x2348A0E9C](v96, 0x10E0C409F09D3C3);
      }
      if ((__int128 *)v114 != &v115)
        free((void *)v114);
      return 1;
    }
LABEL_16:
    LOBYTE(v24) = 0;
LABEL_17:
    if (((1 << (char)v10) & 0x363) != 0 && ((v24 & 1) != 0 || (v10 | 4) == 5))
    {
      v25 = *(_QWORD *)(a1 + 8);
      v26 = *(_QWORD *)(v25 + 2816);
      if (v26 >= *(unsigned int *)(v25 + 2784))
        v27 = sub_22F162D2C(v25, 1u);
      else
        v27 = *(_QWORD *)(v25 + 2776) + 24 * v26;
      v32 = *(unsigned __int16 *)(v27 + 16);
      v33 = (v32 - 19);
      if (v33 > 0x2E)
        goto LABEL_58;
      if (((1 << (v32 - 19)) & 0x580000000011) != 0)
        goto LABEL_39;
      if (v33 == 2)
      {
        v101 = v24;
        v102 = v7;
        v34 = *(_OWORD *)(a1 + 64);
        v106 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)__p = v34;
        v104 = *(_OWORD *)v8;
        v105 = *((_QWORD *)v8 + 2);
        v35 = *(unsigned int *)(a1 + 2344);
        v36 = *(_WORD *)(a1 + 80);
        v100 = *(_WORD *)(a1 + 82);
        v99 = *(_WORD *)(a1 + 84);
        sub_22F1629F8(*(_QWORD *)(a1 + 8));
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v8);
        v37 = sub_22E882CE0(a1, 0, 1, 0);
        v38 = *(_QWORD *)(a1 + 8);
        v39 = *(_QWORD *)(v38 + 2832);
        *(_QWORD *)(v38 + 2816) = *(_QWORD *)(v39 - 8);
        *(_QWORD *)(v38 + 2832) = v39 - 8;
        v40 = *(_QWORD *)(v38 + 1008);
        if (v40)
        {
          if (*(_QWORD *)(v40 + 224))
            v41 = 3;
          else
            v41 = 0;
        }
        else if (*(_QWORD *)(v38 + 1040))
        {
          v41 = 1;
        }
        else
        {
          v41 = 2;
        }
        *(_DWORD *)(v38 + 1048) = v41;
        v42 = *(_OWORD *)__p;
        *(_OWORD *)(a1 + 48) = v106;
        *(_OWORD *)(a1 + 64) = v42;
        *(_OWORD *)v8 = v104;
        *((_QWORD *)v8 + 2) = v105;
        sub_22E80FADC(a1 + 2336, v35);
        *(_WORD *)(a1 + 80) = v36;
        *(_WORD *)(a1 + 82) = v100;
        *(_WORD *)(a1 + 84) = v99;
        if (v37 == 1)
        {
          if (a3)
            v43 = (_DWORD)v10 == 5;
          else
            v43 = 0;
          v44 = v43;
          LOBYTE(v24) = v101;
          if ((_DWORD)v10 != 1 && !v44)
            goto LABEL_39;
          v45 = *(unsigned __int16 *)(a1 + 32);
          if ((v45 - 7) >= 6)
          {
            v46 = 0;
            if ((v45 - 13) >= 6 && v45 != 1)
              v46 = *(_QWORD *)(a1 + 24);
          }
          else
          {
            v46 = 0;
          }
          v103 = v46;
          if (!sub_22EAA9788(*(_QWORD *)(a1 + 88), (uint64_t)&v103, a3))
          {
LABEL_39:
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888) + 9) & 1) == 0)
            {
              if ((v24 & 1) != 0)
                return 0;
LABEL_41:
              sub_22E88ABAC(a1, (int *)a3, 0);
              return 0;
            }
            goto LABEL_95;
          }
          v79 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v79 + 312) = v7;
          *(_DWORD *)(v79 + 316) = 1464;
          if (*(char *)(v79 + 311) < 0)
          {
            **(_BYTE **)(v79 + 288) = 0;
            *(_QWORD *)(v79 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v79 + 288) = 0;
            *(_BYTE *)(v79 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v109, v79);
          v80 = *(unsigned __int16 *)(a1 + 32);
          if ((v80 - 7) >= 6)
          {
            v81 = 0;
            if ((v80 - 13) >= 6 && v80 != 1)
              v81 = *(_QWORD *)(a1 + 24);
          }
          else
          {
            v81 = 0;
          }
          v82 = v109;
          if (!v109)
          {
            v82 = (unsigned __int8 *)sub_22E3B8AAC(v110);
            v109 = v82;
          }
          v82[*v82 + 1] = 5;
          v83 = v109;
          v84 = *v109;
          v85 = v84 + 1;
          *v109 = v84 + 1;
          *(_QWORD *)&v83[8 * v84 + 16] = v81;
          v86 = v103;
          v83[v85 + 1] = 5;
          v87 = v109;
          v88 = *v109;
          *v109 = v88 + 1;
          *(_QWORD *)&v87[8 * v88 + 16] = v86;
          v89 = *(unsigned int **)(v86 + 16);
          v92 = *v89;
          v91 = v89 + 4;
          v90 = v92;
          v93 = (char *)(*(unsigned int *)v8 | ((unint64_t)*(unsigned int *)v8 << 32));
          *(_QWORD *)((char *)&v114 + 4) = 0;
          BYTE12(v114) = 0;
          v117 = 0;
          v113 = v93;
          LOBYTE(v114) = 1;
          if (v92 >= 0x17uLL)
          {
            if ((v90 | 7) == 0x17)
              v95 = (v90 & 0xFFFFFFF8) + 8;
            else
              v95 = v90 | 7;
            p_dst = (__int128 *)operator new(v95 + 1);
            *((_QWORD *)&__dst + 1) = v90;
            v112 = v95 - 0x7FFFFFFFFFFFFFFFLL;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v112) = v90;
            p_dst = &__dst;
            if (!v90)
              goto LABEL_137;
          }
          memmove(p_dst, v91, v90);
LABEL_137:
          *((_BYTE *)p_dst + v90) = 0;
          v115 = __dst;
          v116 = v112;
          sub_22E6D82D0((uint64_t *)&v109, &v113);
          if (SHIBYTE(v116) < 0)
            operator delete((void *)v115);
          sub_22E3BB0B8((uint64_t)&v109);
          v7 = v102;
          *(_QWORD *)(a1 + 24) = v103;
          LOBYTE(v24) = v101;
          goto LABEL_39;
        }
      }
      else
      {
LABEL_58:
        if (v32 == 127)
          goto LABEL_39;
      }
    }
LABEL_95:
    v69 = 0;
    *(_QWORD *)&v106 = 0;
    v70 = *(unsigned __int16 *)(a1 + 32);
    if ((v70 - 7) >= 6)
    {
      v69 = 0;
      if ((v70 - 13) >= 6 && v70 != 1)
        v69 = *(unsigned __int8 **)(a1 + 24);
    }
    v109 = v69;
    v71 = *(_QWORD *)(a1 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v71 + 56) + 1) & 1) != 0)
    {
      v73 = *(_QWORD *)(v71 + 2816);
      if (v73 >= *(unsigned int *)(v71 + 2784))
        v74 = sub_22F162D2C(v71, 1u);
      else
        v74 = *(_QWORD *)(v71 + 2776) + 24 * v73;
      v72 = *(unsigned __int16 *)(v74 + 16) == 46;
    }
    else
    {
      v72 = 0;
    }
    sub_22EA01B98(*(_QWORD *)(a1 + 88), (uint64_t *)&v109, v7, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (_BYTE *)a3, (unint64_t *)&v106, v72);
    v75 = v106;
    if ((_QWORD)v106)
    {
      v76 = *(_QWORD *)a2;
      if ((*(_QWORD *)a2 & 0x3F000) == 0)
      {
        *(_DWORD *)(a2 + 120) = v7;
        *(_DWORD *)(a2 + 132) = v7;
        *(_QWORD *)a2 = v76 & 0xFFFFFFFFFFDC0FFFLL | 0x1C000;
        *(_QWORD *)(a2 + 8) = v75;
      }
      *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v8);
    }
    else
    {
      v77 = *(unsigned __int16 *)(a1 + 32);
      if ((v77 - 7) >= 6)
      {
        v78 = 0;
        if ((v77 - 13) >= 6 && v77 != 1)
          v78 = *(unsigned __int8 **)(a1 + 24);
      }
      else
      {
        v78 = 0;
      }
      if (v109 == v78)
      {
        *(_QWORD *)a2 = *(_QWORD *)a2 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
        *(_DWORD *)(a2 + 120) = 0;
        *(_DWORD *)(a2 + 132) = 0;
        *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v8);
        if (v72)
        {
          LODWORD(__dst) = 0;
          LODWORD(v104) = 0;
          v113 = (char *)&v114 + 8;
          *(_QWORD *)&v114 = 0x1000000000;
          sub_22E88101C(a1, 1, (int *)&__dst, (uint64_t)&v113, (unsigned int *)&v104, 0);
          sub_22E828F5C(&v113);
        }
      }
      else
      {
        *(_WORD *)(a1 + 32) = *(_WORD *)v109 & 0x1FF;
      }
    }
    return 1;
  }
  return result;
}

uint64_t *sub_22E81E93C()
{
  uint64_t v0;
  unsigned int v1;
  int *v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _BOOL4 v19;
  unint64_t *v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  char v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  int v58;
  char v59;
  const void *v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  int v86;
  uint64_t v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned __int8 *v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned __int8 *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t *v175;
  char v176;
  uint64_t *v177;
  char v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int8 v182;
  unsigned int v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  _BOOL4 v192;
  uint64_t v193;
  unsigned int v194;
  unint64_t v195;
  int *v196;
  uint64_t v197;
  _BYTE v198[36];
  int v199;
  uint64_t v200;
  __int16 v201;
  __int16 v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE v205[32];
  _BYTE v206[32];
  _BYTE v207[32];
  _BYTE v208[32];
  _BYTE v209[32];
  _BYTE v210[32];
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _BYTE v215[32];
  uint64_t v216[4];
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _BYTE v221[32];
  _BYTE *v222;
  char v223;
  uint64_t v224;
  int v225;
  __int16 v226;
  uint64_t (*v227)(uint64_t);
  uint64_t v228;
  uint64_t v229;
  int v230;
  int v231;
  _QWORD *v232;
  _QWORD v233[2];
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  unsigned __int8 *v238;
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  __int128 v242;
  void *v243[2];
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  _BYTE v256[40];
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  __int128 v262;
  int v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  __int16 v267;
  __int128 v268;
  uint64_t v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  _QWORD v276[35];

  v0 = MEMORY[0x24BDAC7A8]();
  v197 = v5;
  v6 = v0;
  v276[32] = *MEMORY[0x24BDAC8D0];
  if (*(_WORD *)(v0 + 32) != 3)
  {
    v9 = v4;
    v10 = v2;
    v191 = v3;
    v196 = (int *)(v0 + 16);
    v212 = 0;
    v211 = 0;
    v189 = v0 + 960;
    v190 = v1;
    v213 = v0 + 960;
    v214 = 0;
    sub_22E8220E8(v0, 7, &v211, 0);
    v11 = *(unsigned __int16 *)(v6 + 32);
    if (v11 == 130 || v11 == 104)
    {
      if ((**(_QWORD **)(*(_QWORD *)(v6 + 8) + 56) & 0x200) != 0)
        v12 = 1943;
      else
        v12 = 1853;
      sub_22E884578(v6, v196, v12, (uint64_t)v210);
      sub_22E3BB0B8((uint64_t)v210);
      v192 = *(unsigned __int16 *)(v6 + 32) == 130;
      *(_DWORD *)(v6 + 40) = *(_DWORD *)(v6 + 16);
      sub_22F18FB4C(*(_QWORD *)(v6 + 8), (unsigned int *)v196);
      v194 = *(_DWORD *)(v6 + 40);
      if ((_DWORD)v211 && HIDWORD(v211))
      {
        sub_22E8175C8(v6, &v211, 0);
        sub_22E820B10(&v211);
      }
      sub_22E8220E8(v6, 7, &v211, 0);
    }
    else
    {
      v192 = 0;
      v194 = 0;
    }
    v13 = *v10;
    v14 = *(_QWORD **)(v6 + 88);
    v232 = v14;
    v233[0] = 0;
    v233[1] = &v235;
    v234 = 0x400000000;
    v15 = v13 & 0xFFFFFFFE;
    if ((v13 & 0xFFFFFFFE) == 2)
    {
      v16 = v14[400];
      v14[400] = v233;
      v236 = v16;
      v17 = 1;
    }
    else
    {
      v17 = 0;
    }
    v237 = v17;
    v18 = sub_22E8AD5F4((uint64_t *)v197);
    v19 = v18 == 0;
    v20 = *(unint64_t **)(*(_QWORD *)(v6 + 8) + 56);
    v21 = *((unsigned __int8 *)v20 + 237);
    v22 = *v20;
    v23 = (v22 >> 8) & 1 & (v21 >> 4);
    if ((v22 & 0x4220) != 0)
      v24 = 1;
    else
      v24 = v23;
    if ((v22 & 0x100) != 0)
    {
      v25 = *(_BYTE *)(v6 + 945);
      *(_BYTE *)(v6 + 945) = 1;
      memset(v256, 0, 32);
      if ((sub_22E8408AC(v6, (uint64_t)v256, 0, 0, 1, 0, 0, 0, 0, 0) & 1) != 0)
      {
LABEL_23:
        if (*(_DWORD *)&v256[28])
          free(*(void **)&v256[16]);
        *(_BYTE *)(v6 + 945) = v25;
        goto LABEL_157;
      }
      if (*(_QWORD *)&v256[8] && *(_WORD *)(v6 + 32) != 5)
      {
        sub_22E884578(v6, v196, 15, (uint64_t)&v238);
        v26 = v238;
        if (!v238)
        {
          v26 = (unsigned __int8 *)sub_22E3B8AAC(v239);
          v238 = v26;
        }
        v26[*v26 + 1] = 4;
        v27 = (uint64_t)v238;
        v28 = *v238;
        *v238 = v28 + 1;
        *(_QWORD *)(v27 + 8 * v28 + 16) = 5;
        sub_22E3BB0B8((uint64_t)&v238);
        if (*(_WORD *)(v6 + 32) != 23)
        {
          LOWORD(v238) = 65;
          sub_22E885940(v6, (unsigned __int16 *)&v238, 1, 1);
          goto LABEL_23;
        }
      }
      *(_QWORD *)(v197 + 56) = *(_QWORD *)v256;
      v18 = sub_22F0AB71C(v197 + 64, (uint64_t)&v256[8]);
      if (*(_DWORD *)&v256[28])
        free(*(void **)&v256[16]);
      *(_BYTE *)(v6 + 945) = v25;
    }
    v29 = *(unsigned __int16 *)(v6 + 32);
    if (v29 == 5)
    {
      v30 = *(_QWORD *)(v6 + 24);
      *(_DWORD *)(v6 + 40) = *(_DWORD *)(v6 + 16);
      v18 = sub_22F18FB4C(*(_QWORD *)(v6 + 8), (unsigned int *)v196);
      v188 = *(_DWORD *)(v6 + 40);
    }
    else
    {
      v30 = 0;
      v188 = 0;
      if (v29 != 23 && v29 != 61)
      {
        sub_22E884578(v6, v196, 18, (uint64_t)v256);
        v31 = *(unsigned __int8 **)v256;
        if (!*(_QWORD *)v256)
        {
          v31 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v256[8]);
          *(_QWORD *)v256 = v31;
        }
        v31[*v31 + 1] = 4;
        v32 = *(_QWORD *)v256;
        v33 = **(_BYTE **)v256;
        **(_BYTE **)v256 = v33 + 1;
        *(_QWORD *)(v32 + 8 * v33 + 16) = 5;
        *(_BYTE *)(v32 + (v33 + 1) + 1) = 4;
        v34 = *(_QWORD *)v256;
        v35 = **(_BYTE **)v256;
        **(_BYTE **)v256 = v35 + 1;
        *(_QWORD *)(v34 + 8 * v35 + 16) = 23;
        v36 = v256;
        goto LABEL_125;
      }
    }
    if (!v30 && v194)
    {
      sub_22E884578(v6, v196, 1738, (uint64_t)v209);
      v18 = sub_22E3BB0B8((uint64_t)v209);
      v192 = 0;
      v194 = 0;
    }
    if (v15 == 2)
    {
      sub_22EA7E84C(v232, v236, 0);
      v237 = 0;
    }
    v37 = 0x133u >> v9;
    v38 = v19 & (0x23u >> v9);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 12888) + 8) & 0x20) != 0)
    {
      if (v30)
        v40 = v194 == 0;
      else
        v40 = 0;
      v39 = v40;
      if (*(_WORD *)(v6 + 32) != 61)
        goto LABEL_62;
      if (v39)
      {
        v18 = sub_22E883050(v6, v38);
        if ((v18 & 1) == 0)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 56) + 1) & 2) != 0)
          {
            v55 = *(_QWORD *)(v6 + 96);
            *(_DWORD *)(v55 + 312) = *(_DWORD *)(v6 + 16);
            *(_DWORD *)(v55 + 316) = 1431;
            if (*(char *)(v55 + 311) < 0)
            {
              **(_BYTE **)(v55 + 288) = 0;
              *(_QWORD *)(v55 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v55 + 288) = 0;
              *(_BYTE *)(v55 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v208, v55);
            v18 = sub_22E3BB0B8((uint64_t)v208);
          }
          v181 = 0;
          v183 = 0;
          v41 = 0;
          v42 = 0;
          LOBYTE(v39) = 1;
LABEL_85:
          if ((v9 & 0x3FF) == 3)
            goto LABEL_86;
          v61 = *(unsigned __int16 *)(v6 + 32);
          if (v61 == 23)
          {
            if ((*(_BYTE *)(v197 + 4) & 0x10) != 0)
            {
              v62 = *(_QWORD *)(v6 + 96);
              *(_DWORD *)(v62 + 312) = *(_DWORD *)(v6 + 16);
              *(_DWORD *)(v62 + 316) = 1560;
              if (*(char *)(v62 + 311) < 0)
              {
                **(_BYTE **)(v62 + 288) = 0;
                *(_QWORD *)(v62 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v62 + 288) = 0;
                *(_BYTE *)(v62 + 311) = 0;
              }
              sub_22E78E558((uint64_t)v256, v62);
              v63 = *(unsigned int *)(v197 + 188) | ((unint64_t)*(unsigned int *)(v197 + 188) << 32);
              v64 = *(_QWORD *)v256;
              if (!*(_QWORD *)v256)
              {
                v64 = sub_22E3B8AAC(*(uint64_t *)&v256[8]);
                *(_QWORD *)v256 = v64;
              }
              sub_22E4D6448(v64 + 336, v63, 1);
              sub_22E3BB0B8((uint64_t)v256);
              sub_22E80CED8(v6);
              *(_WORD *)v256 = 24;
              sub_22E885940(v6, (unsigned __int16 *)v256, 1, 1);
              v18 = sub_22E820B10(&v211);
              v194 = 0;
              v192 = 0;
              v187 = 0;
              v41 = 0;
              v58 = 3;
            }
            else
            {
              v187 = v42;
              v58 = 2;
            }
          }
          else
          {
            if (((1 << v9) & 0x363) == 0)
              goto LABEL_86;
            if (v61 == 62)
            {
              v187 = v42;
              if ((*(_BYTE *)(v197 + 4) & 0x10) != 0)
                v58 = 3;
              else
                v58 = 1;
            }
            else
            {
              if ((*(_WORD *)(v6 + 34) & 1) == 0 || (v18 = sub_22E82C7BC(v6, v39), (v18 & 1) != 0))
              {
LABEL_86:
                v187 = v42;
                v57 = 0;
                v58 = 0;
                if (v15 == 2 && (_DWORD)v234)
                {
                  v18 = sub_22E836A10(v232[400], (uint64_t)v233);
                  v58 = 0;
                  v59 = 0;
                  v57 = 0;
                  v60 = 0;
                  if (v30)
                    goto LABEL_126;
                }
                else
                {
                  v59 = 0;
                  v60 = 0;
                  if (v30)
                  {
LABEL_126:
                    v176 = v59;
                    v179 = (uint64_t *)(v197 + 56);
                    if ((v58 == 3 || !v58) && (**(_WORD **)(*(_QWORD *)(v6 + 8) + 56) & 0x4020) == 0)
                    {
                      sub_22E817724(v6, (uint64_t)&v211, 1447, 1, 0);
                      if (v187 || !v41)
                      {
                        if (!v194)
                          goto LABEL_145;
                        v73 = *(_QWORD *)(v6 + 96);
                        *(_DWORD *)(v73 + 312) = v194;
                        *(_DWORD *)(v73 + 316) = 1809;
                        if (*(char *)(v73 + 311) < 0)
                        {
                          **(_BYTE **)(v73 + 288) = 0;
                          *(_QWORD *)(v73 + 296) = 0;
                        }
                        else
                        {
                          *(_BYTE *)(v73 + 288) = 0;
                          *(_BYTE *)(v73 + 311) = 0;
                        }
                        sub_22E78E558((uint64_t)&v238, v73);
                        v256[20] = 0;
                        *(_QWORD *)&v256[12] = 0;
                        v257 = 0;
                        *(_QWORD *)&v256[24] = 0;
                        *(_QWORD *)&v256[32] = 0;
                        LOBYTE(v258) = 0;
                        *(_QWORD *)v256 = v194 | ((unint64_t)v194 << 32);
                        v256[8] = 1;
                        sub_22E6D82D0((uint64_t *)&v238, v256);
                        v74 = v238;
                        if (!v238)
                        {
                          v74 = (unsigned __int8 *)sub_22E3B8AAC(v239);
                          v238 = v74;
                        }
                        v74[*v74 + 1] = 2;
                        v75 = (uint64_t)v238;
                        v76 = *v238;
                        *v238 = v76 + 1;
                        *(_QWORD *)(v75 + 8 * v76 + 16) = v192;
                        if (SHIBYTE(v257) < 0)
                          operator delete(*(void **)&v256[24]);
                        v72 = (uint64_t *)&v238;
                      }
                      else
                      {
                        v68 = *(_QWORD *)(v6 + 96);
                        *(_DWORD *)(v68 + 312) = v183;
                        *(_DWORD *)(v68 + 316) = 1812;
                        if (*(char *)(v68 + 311) < 0)
                        {
                          **(_BYTE **)(v68 + 288) = 0;
                          *(_QWORD *)(v68 + 296) = 0;
                        }
                        else
                        {
                          *(_BYTE *)(v68 + 288) = 0;
                          *(_BYTE *)(v68 + 311) = 0;
                        }
                        sub_22E78E558((uint64_t)v256, v68);
                        v69 = *(unsigned __int8 **)v256;
                        if (!*(_QWORD *)v256)
                        {
                          v69 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v256[8]);
                          *(_QWORD *)v256 = v69;
                        }
                        v69[*v69 + 1] = 2;
                        v70 = *(_QWORD *)v256;
                        v71 = **(_BYTE **)v256;
                        **(_BYTE **)v256 = v71 + 1;
                        *(_QWORD *)(v70 + 8 * v71 + 16) = (0x133u >> v9) & 1;
                        sub_22E4D6448(v70 + 336, v181 | v183, 1);
                        v72 = (uint64_t *)v256;
                      }
                      v18 = sub_22E3BB0B8((uint64_t)v72);
                    }
LABEL_145:
                    sub_22E817BB0(v18, (uint64_t)&v211, v197, v58);
                    v202 = 0;
                    v203 = 0;
                    v204 = 0;
                    if (!v30 && v58 == 2 && *(_WORD *)(v6 + 32) == 23)
                    {
                      v77 = *(_QWORD *)(v6 + 8);
                      v78 = *(_QWORD *)(v77 + 2816);
                      v79 = v78 >= *(unsigned int *)(v77 + 2784)
                          ? sub_22F162D2C(v77, 1u)
                          : *(_QWORD *)(v77 + 2776) + 24 * v78;
                      if (*(_WORD *)(v79 + 16) == 5)
                      {
                        v185 = *(_QWORD *)(v6 + 88);
                        v184 = *(_QWORD *)(v185 + 12888);
                        v137 = *(_QWORD *)(v6 + 8);
                        v138 = *(_QWORD *)(v137 + 2816);
                        if (v138 >= *(unsigned int *)(v137 + 2784))
                          v139 = sub_22F162D2C(v137, 1u);
                        else
                          v139 = *(_QWORD *)(v137 + 2776) + 24 * v138;
                        v142 = *(unsigned __int16 *)(v139 + 16);
                        if ((v142 - 7) >= 6)
                        {
                          v143 = 0;
                          if ((v142 - 13) >= 6 && v142 != 1)
                            v143 = *(_QWORD *)(v139 + 8);
                        }
                        else
                        {
                          v143 = 0;
                        }
                        v144 = *(_QWORD *)(v6 + 8);
                        v145 = *(_QWORD *)(v144 + 2816);
                        if (v145 >= *(unsigned int *)(v144 + 2784))
                          v146 = (int *)sub_22F162D2C(v144, 1u);
                        else
                          v146 = (int *)(*(_QWORD *)(v144 + 2776) + 24 * v145);
                        sub_22F31E538(v185, v184, v143, *v146, (uint64_t)&v202);
                      }
                    }
                    v201 = 0;
                    v200 = 0;
                    v199 = 0;
                    v80 = sub_22EA33BC4(*(_QWORD *)(v6 + 88), *(uint64_t **)(*(_QWORD *)(v6 + 88) + 12888), 23, v58, v190, (uint64_t)v179, v30, v188, (uint64_t)&v211, v191, *(unsigned int *)(v197 + 192), v60, v57, (_BYTE *)&v201 + 1, &v201, v194, 0, v192, v41,
                            v187,
                            SHIDWORD(v187),
                            v9 == 2,
                            (v9 & 0xFFFFFFFE) == 6,
                            (uint64_t)&v202);
                    v81 = v80;
                    if ((_BYTE)v202)
                    {
                      *(_QWORD *)v256 = v6 + 944;
                      v256[8] = *(_BYTE *)(v6 + 944);
                      *(_BYTE *)(v6 + 944) = 1;
                      *(_QWORD *)&v256[16] = v6;
                      *(_DWORD *)&v256[24] = 1572887;
                      strcpy(&v256[28], ">");
                      v258 = 0;
                      *(_QWORD *)&v256[32] = sub_22E80CED8;
                      v257 = 0;
                      sub_22E811DE8((uint64_t)v256);
                      sub_22F2F18E0((uint64_t)v256);
                      if (v188)
                        v127 = v188;
                      else
                        v127 = v190;
                      if (sub_22E8AD9B4((unint64_t *)v197, 23, v190, v127, &v200, &v199, v81, HIBYTE(v201)))
                      {
                        v128 = v199;
                        v129 = *(_QWORD *)(v6 + 96);
                        *(_DWORD *)(v129 + 312) = v190;
                        *(_DWORD *)(v129 + 316) = v128;
                        if (*(char *)(v129 + 311) < 0)
                        {
                          **(_BYTE **)(v129 + 288) = 0;
                          *(_QWORD *)(v129 + 296) = 0;
                        }
                        else
                        {
                          *(_BYTE *)(v129 + 288) = 0;
                          *(_BYTE *)(v129 + 311) = 0;
                        }
                        sub_22E78E558((uint64_t)&v238, v129);
                        v130 = v200;
                        v131 = v238;
                        if (!v238)
                        {
                          v131 = (unsigned __int8 *)sub_22E3B8AAC(v239);
                          v238 = v131;
                        }
                        v131[*v131 + 1] = 1;
                        v132 = (uint64_t)v238;
                        v133 = *v238;
                        *v238 = v133 + 1;
                        *(_QWORD *)(v132 + 8 * v133 + 16) = v130;
                        sub_22E3BB0B8((uint64_t)&v238);
                      }
                      **(_BYTE **)v256 = v256[8];
                      goto LABEL_157;
                    }
                    if ((_BYTE)v201)
                    {
                      if (!v30)
                      {
                        *(_QWORD *)v197 = *(_QWORD *)v197 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
                        *(_DWORD *)(v197 + 120) = 0;
                        *(_DWORD *)(v197 + 132) = 0;
                        sub_22E884578(v6, v196, 1543, (uint64_t)v198);
                        v66 = v198;
LABEL_156:
                        sub_22E3BB0B8((uint64_t)v66);
                        goto LABEL_157;
                      }
                      v134 = sub_22F346A54(*(_QWORD **)(v6 + 88), *(_QWORD *)(*(_QWORD *)(v6 + 88) + 12888), 23, v58, v179, v30, v190, v188);
                      v125 = v197;
                      v135 = *(_QWORD *)v197;
                      if (!v136)
                      {
                        v140 = (v135 >> 12) & 0x3F;
                        if (v140)
                        {
                          if (v140 != 50)
                          {
                            v168 = sub_22F2F2CB0(v140);
                            v169 = *(_QWORD *)(v6 + 96);
                            *(_DWORD *)(v169 + 312) = v190;
                            *(_DWORD *)(v169 + 316) = 3658;
                            if (*(char *)(v169 + 311) < 0)
                            {
                              **(_BYTE **)(v169 + 288) = 0;
                              *(_QWORD *)(v169 + 296) = 0;
                            }
                            else
                            {
                              *(_BYTE *)(v169 + 288) = 0;
                              *(_BYTE *)(v169 + 311) = 0;
                            }
                            sub_22E78E558((uint64_t)v256, v169);
                            v170 = *(unsigned __int8 **)v256;
                            if (!*(_QWORD *)v256)
                            {
                              v170 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v256[8]);
                              *(_QWORD *)v256 = v170;
                            }
                            v170[*v170 + 1] = 1;
                            v171 = *(_QWORD *)v256;
                            v172 = **(_BYTE **)v256;
                            **(_BYTE **)v256 = v172 + 1;
                            *(_QWORD *)(v171 + 8 * v172 + 16) = v168;
                            sub_22E3BB0B8((uint64_t)v256);
                          }
                        }
                        else
                        {
                          v141 = v188;
                          if (!v188)
                            v141 = v190;
                          *(_DWORD *)(v197 + 120) = v190;
                          *(_DWORD *)(v197 + 132) = v141;
                          *(_QWORD *)v197 = v135 & 0xFFFFFFFFFFDC0FFFLL | 0x1C000;
                          *(_QWORD *)(v197 + 8) = v134;
                        }
                        goto LABEL_157;
                      }
                      v126 = v135 & 0xFFFFFFFFFFDC0FFFLL;
LABEL_241:
                      *(_QWORD *)v125 = v126 | 0x32000;
                      *(_DWORD *)(v125 + 120) = 0;
                      *(_DWORD *)(v125 + 132) = 0;
                      goto LABEL_157;
                    }
                    v82 = *(unsigned __int16 *)(v6 + 32);
                    if (v80)
                    {
                      if (v58 != 2 || v82 != 23)
                        goto LABEL_303;
                      if (HIBYTE(v202))
                        v83 = v204;
                      else
                        v83 = v80;
                      sub_22E885C30(v6, 262152);
                      v195 = v83;
                      sub_22EA36CCC(*(_QWORD *)(v6 + 88), *(_QWORD *)(*(_QWORD *)(v6 + 88) + 12888), v83);
                      v222 = (_BYTE *)(v6 + 944);
                      v223 = *(_BYTE *)(v6 + 944);
                      *(_BYTE *)(v6 + 944) = 1;
                      v224 = v6;
                      v225 = 1572887;
                      v226 = 62;
                      v229 = 0;
                      v227 = sub_22E80CED8;
                      v228 = 0;
                      sub_22E811DE8((uint64_t)&v222);
                      if (*(_WORD *)(v6 + 32) == 24
                        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 56) + 1) & 1) == 0)
                      {
                        sub_22E884578(v6, v196, 1481, (uint64_t)v221);
                        sub_22E3BB0B8((uint64_t)v221);
                      }
                      v193 = 0;
                      v274 = v276;
                      v275 = 0x2000000000;
                      *(_QWORD *)v256 = &v256[16];
                      v84 = &v218;
                      *(_QWORD *)&v256[8] = 0x2000000000;
                      v85 = &v220;
                      while (1)
                      {
                        while (1)
                        {
                          v86 = *(unsigned __int16 *)(v6 + 32);
                          if (v86 == 5)
                            break;
                          if (v86 == 24)
                            goto LABEL_283;
                          v87 = *(_QWORD *)(v6 + 96);
                          *(_DWORD *)(v87 + 312) = *(_DWORD *)(v6 + 16);
                          *(_DWORD *)(v87 + 316) = 15;
                          if (*(char *)(v87 + 311) < 0)
                          {
                            **(_BYTE **)(v87 + 288) = 0;
                            *(_QWORD *)(v87 + 296) = 0;
                          }
                          else
                          {
                            *(_BYTE *)(v87 + 288) = 0;
                            *(_BYTE *)(v87 + 311) = 0;
                          }
                          sub_22E78E558((uint64_t)&v238, v87);
                          v88 = v238;
                          if (!v238)
                          {
                            v88 = (unsigned __int8 *)sub_22E3B8AAC(v239);
                            v238 = v88;
                          }
                          v88[*v88 + 1] = 4;
                          v89 = (uint64_t)v238;
                          v90 = *v238;
                          *v238 = v90 + 1;
                          *(_QWORD *)(v89 + 8 * v90 + 16) = 5;
                          sub_22E3BB0B8((uint64_t)&v238);
                          LODWORD(v238) = 1572929;
                          if (!sub_22E885940(v6, (unsigned __int16 *)&v238, 2, 2)
                            || *(_WORD *)(v6 + 32) != 65)
                          {
                            goto LABEL_283;
                          }
                          *(_DWORD *)(v6 + 40) = *(_DWORD *)(v6 + 16);
                          sub_22F18FB4C(*(_QWORD *)(v6 + 8), (unsigned int *)v196);
                        }
                        v174 = *(_QWORD *)(v6 + 24);
                        *(_DWORD *)(v6 + 40) = *(_DWORD *)(v6 + 16);
                        sub_22F18FB4C(*(_QWORD *)(v6 + 8), (unsigned int *)v196);
                        v173 = *(_DWORD *)(v6 + 40);
                        v218 = 0;
                        v217 = 0;
                        v219 = v189;
                        v220 = 0;
                        if (*(_WORD *)(v6 + 32) == 186)
                          sub_22E810414(v6, &v217, 0, 0, 0);
                        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 56) + 20) & 0x1000000000) != 0
                          && sub_22E8836FC(v6, 0, 0))
                        {
                          v91 = **(_QWORD **)(*(_QWORD *)(v6 + 8) + 56);
                          if ((v91 & 0x100) != 0)
                          {
                            if ((v91 & 0x800) != 0)
                              v92 = 1906;
                            else
                              v92 = 1847;
                            v93 = *(_QWORD *)(v6 + 96);
                            *(_DWORD *)(v93 + 312) = *(_DWORD *)(v6 + 16);
                            *(_DWORD *)(v93 + 316) = v92;
                            if (*(char *)(v93 + 311) < 0)
                            {
                              **(_BYTE **)(v93 + 288) = 0;
                              *(_QWORD *)(v93 + 296) = 0;
                            }
                            else
                            {
                              *(_BYTE *)(v93 + 288) = 0;
                              *(_BYTE *)(v93 + 311) = 0;
                            }
                            sub_22E78E558((uint64_t)&v238, v93);
                            v94 = v238;
                            if (!v238)
                            {
                              v94 = (unsigned __int8 *)sub_22E3B8AAC(v239);
                              v238 = v94;
                            }
                            v94[*v94 + 1] = 2;
                            v95 = (uint64_t)v238;
                            v96 = *v238;
                            *v238 = v96 + 1;
                            *(_QWORD *)(v95 + 8 * v96 + 16) = 1;
                            sub_22E3BB0B8((uint64_t)&v238);
                          }
                          sub_22E835FD0(v6, &v217);
                        }
                        v175 = v85;
                        if (*(_DWORD *)&v256[8] >= *(_DWORD *)&v256[12])
                        {
                          sub_22F2E3408((uint64_t)v256, v6);
                        }
                        else
                        {
                          v97 = *(_QWORD *)v256 + 368 * *(unsigned int *)&v256[8];
                          v98 = *(_QWORD *)(v6 + 88);
                          *(_QWORD *)v97 = v98;
                          *(_QWORD *)(v97 + 8) = 0;
                          *(_QWORD *)(v97 + 16) = v97 + 32;
                          *(_QWORD *)(v97 + 24) = 0x400000000;
                          v99 = *(_QWORD *)(v98 + 3200);
                          *(_QWORD *)(v98 + 3200) = v97 + 8;
                          *(_QWORD *)(v97 + 352) = v99;
                          *(_BYTE *)(v97 + 360) = 1;
                          ++*(_DWORD *)&v256[8];
                        }
                        v100 = *(_QWORD *)(v6 + 88);
                        v231 = 4;
                        v238 = 0;
                        v230 = 3;
                        v216[0] = *(unsigned int *)(v100 + 1704);
                        sub_22EB4DDB8(v100 + 3688, &v231, (int *)v216, (__int16 *)(v100 + 1693), (uint64_t *)&v238, &v230);
                        v101 = *(unsigned int *)(v100 + 3696);
                        v102 = v101 - 2;
                        v177 = v84;
                        v180 = v100;
                        v103 = *(_QWORD *)(v100 + 3688);
                        v104 = *(_DWORD *)(v103 + 576 * (v101 - 2));
                        if (v104 == 5)
                        {
                          *(_BYTE *)(v103 + 576 * v101 - 4) = *(_BYTE *)(v103 + 576 * v102 + 572);
                          v105 = 1;
                        }
                        else if (v104 == 2)
                        {
                          *(_BYTE *)(v103 + 576 * v101 - 4) = 1;
                          v105 = *(_BYTE *)(v103 + 576 * v102 + 573) != 0;
                        }
                        else
                        {
                          v105 = 0;
                          *(_BYTE *)(v103 + 576 * v101 - 4) = 0;
                        }
                        v106 = v103 + 576 * v101;
                        *(_BYTE *)(v106 - 3) = v105;
                        *(_WORD *)(v100 + 1693) = 0;
                        if (*(_DWORD *)(v100 + 1848))
                        {
                          llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v100 + 1776), (llvm::SmallPtrSetImplBase *)(v106 - 560));
                          sub_22EAEAE08(v100 + 1840, (uint64_t *)(v106 - 496));
                        }
                        if (*(_WORD *)(v6 + 32) == 63)
                        {
                          *(_DWORD *)(v6 + 40) = *(_DWORD *)(v6 + 16);
                          sub_22F18FB4C(*(_QWORD *)(v6 + 8), (unsigned int *)v196);
                          v107 = *(unsigned int *)(v6 + 40);
                          v108 = sub_22E839A0C(v6, 0);
                          if ((v108 & 1) != 0)
                          {
                            LODWORD(v238) = 1572929;
                            sub_22E885940(v6, (unsigned __int16 *)&v238, 2, 2);
                          }
                        }
                        else
                        {
                          v107 = 0;
                          v108 = 0;
                        }
                        v193 = sub_22EA3B62C(*(_QWORD **)(v6 + 88), *(uint64_t **)(*(_QWORD *)(v6 + 88) + 12888), v195, v193, v173, v174, (uint64_t)&v217, v107, v108 & 0xFFFFFFFFFFFFFFFELL);
                        v109 = *(_QWORD *)v256 + 368 * *(unsigned int *)&v256[8];
                        sub_22EA7E84C(*(_QWORD **)(v109 - 368), *(_QWORD *)(v109 - 16), 0);
                        *(_BYTE *)(v109 - 8) = 0;
                        v110 = v275;
                        if (v275 >= (unint64_t)HIDWORD(v275))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                          v110 = v275;
                        }
                        *((_QWORD *)v274 + v110) = v193;
                        LODWORD(v275) = v275 + 1;
                        v111 = *(unsigned __int16 *)(v6 + 32);
                        if (v111 == 65)
                          break;
                        if (v111 != 24)
                        {
                          if (v111 == 5)
                          {
                            v112 = sub_22F141A3C(*(unsigned int *)(v6 + 40), 0, *(_QWORD **)(*(_QWORD *)(v6 + 8) + 88), *(_DWORD **)(*(_QWORD *)(v6 + 8) + 56));
                            v113 = *(_QWORD *)(v6 + 96);
                            *(_DWORD *)(v113 + 312) = v112;
                            *(_DWORD *)(v113 + 316) = 1483;
                            if (*(char *)(v113 + 311) < 0)
                            {
                              **(_BYTE **)(v113 + 288) = 0;
                              *(_QWORD *)(v113 + 296) = 0;
                            }
                            else
                            {
                              *(_BYTE *)(v113 + 288) = 0;
                              *(_BYTE *)(v113 + 311) = 0;
                            }
                            v114 = v112;
                            sub_22E78E558((uint64_t)v216, v113);
                            BYTE12(v239) = 0;
                            *(_QWORD *)((char *)&v239 + 4) = 0;
                            v241 = 0x200000000000000;
                            v240 = 0x202CuLL;
                            v238 = (unsigned __int8 *)(v114 | (v114 << 32));
                            LOBYTE(v239) = 0;
                            LOBYTE(v242) = 0;
                            sub_22E6D82D0(v216, &v238);
                            if (SHIBYTE(v241) < 0)
                              operator delete((void *)v240);
                            sub_22E3BB0B8((uint64_t)v216);
                          }
                          else
                          {
                            if (v107)
                            {
                              v116 = *(_QWORD *)(v6 + 96);
                              *(_DWORD *)(v116 + 312) = *(_DWORD *)(v6 + 16);
                              *(_DWORD *)(v116 + 316) = 18;
                              if (*(char *)(v116 + 311) < 0)
                              {
                                **(_BYTE **)(v116 + 288) = 0;
                                *(_QWORD *)(v116 + 296) = 0;
                              }
                              else
                              {
                                *(_BYTE *)(v116 + 288) = 0;
                                *(_BYTE *)(v116 + 311) = 0;
                              }
                              sub_22E78E558((uint64_t)&v238, v116);
                              v117 = v238;
                              if (!v238)
                              {
                                v117 = (unsigned __int8 *)sub_22E3B8AAC(v239);
                                v238 = v117;
                              }
                              v117[*v117 + 1] = 4;
                              v118 = (uint64_t)v238;
                              v119 = *v238;
                              *v238 = v119 + 1;
                              *(_QWORD *)(v118 + 8 * v119 + 16) = 24;
                              *(_BYTE *)(v118 + (v119 + 1) + 1) = 4;
                              v120 = (uint64_t)v238;
                              v121 = *v238;
                              *v238 = v121 + 1;
                              *(_QWORD *)(v120 + 8 * v121 + 16) = 65;
                              v122 = (uint64_t *)&v238;
                            }
                            else
                            {
                              v123 = *(_QWORD *)(v6 + 96);
                              *(_DWORD *)(v123 + 312) = *(_DWORD *)(v6 + 16);
                              *(_DWORD *)(v123 + 316) = 1497;
                              if (*(char *)(v123 + 311) < 0)
                              {
                                **(_BYTE **)(v123 + 288) = 0;
                                *(_QWORD *)(v123 + 296) = 0;
                              }
                              else
                              {
                                *(_BYTE *)(v123 + 288) = 0;
                                *(_BYTE *)(v123 + 311) = 0;
                              }
                              sub_22E78E558((uint64_t)v215, v123);
                              v122 = (uint64_t *)v215;
                            }
                            sub_22E3BB0B8((uint64_t)v122);
                            LODWORD(v238) = 1572929;
                            if (!sub_22E885940(v6, (unsigned __int16 *)&v238, 2, 2))
                              goto LABEL_282;
                            if (*(_WORD *)(v6 + 32) == 65)
                            {
                              *(_DWORD *)(v6 + 40) = *(_DWORD *)(v6 + 16);
                              sub_22F18FB4C(*(_QWORD *)(v6 + 8), (unsigned int *)v196);
                            }
                          }
                        }
LABEL_227:
                        sub_22EB48E64(v180);
                        sub_22E8D1BC4(v219, (uint64_t)&v219);
                        v85 = v175;
                        sub_22E80F94C(v175);
                        v84 = v177;
                        sub_22E80F94C(v177);
                      }
                      *(_DWORD *)(v6 + 40) = *(_DWORD *)(v6 + 16);
                      sub_22F18FB4C(*(_QWORD *)(v6 + 8), (unsigned int *)v196);
                      if (*(_WORD *)(v6 + 32) != 24)
                        goto LABEL_227;
                      v115 = *(unsigned int *)(v6 + 40);
                      if (!(_DWORD)v115)
                        goto LABEL_227;
                      v147 = **(_QWORD **)(*(_QWORD *)(v6 + 8) + 56);
                      if ((v147 & 0x201) != 0)
                      {
                        if ((v147 & 0x200) != 0)
                        {
                          v148 = *(_QWORD *)(v6 + 96);
                          *(_DWORD *)(v148 + 312) = v115;
                          v149 = 1929;
                          goto LABEL_277;
                        }
                      }
                      else
                      {
                        if ((v147 & 0x100) != 0)
                          v149 = 1814;
                        else
                          v149 = 1813;
                        v148 = *(_QWORD *)(v6 + 96);
                        *(_DWORD *)(v148 + 312) = v115;
LABEL_277:
                        *(_DWORD *)(v148 + 316) = v149;
                        if (*(char *)(v148 + 311) < 0)
                        {
                          **(_BYTE **)(v148 + 288) = 0;
                          *(_QWORD *)(v148 + 296) = 0;
                        }
                        else
                        {
                          *(_BYTE *)(v148 + 288) = 0;
                          *(_BYTE *)(v148 + 311) = 0;
                        }
                        sub_22E78E558((uint64_t)v216, v148);
                        BYTE12(v239) = 0;
                        *(_QWORD *)((char *)&v239 + 4) = 0;
                        v241 = 0;
                        v240 = 0uLL;
                        LOBYTE(v242) = 0;
                        v238 = (unsigned __int8 *)(v115 | (v115 << 32));
                        LOBYTE(v239) = 1;
                        sub_22E6D82D0(v216, &v238);
                        if (SHIBYTE(v241) < 0)
                          operator delete((void *)v240);
                        sub_22E3BB0B8((uint64_t)v216);
                      }
LABEL_282:
                      sub_22EB48E64(v180);
                      sub_22E8D1BC4(v219, (uint64_t)&v219);
                      sub_22E80F94C(v175);
                      sub_22E80F94C(v177);
LABEL_283:
                      sub_22E811E8C((uint64_t)&v222);
                      v218 = 0;
                      v217 = 0;
                      v219 = v189;
                      v220 = 0;
                      if (*(_WORD *)(v6 + 32) == 186)
                        sub_22E810414(v6, &v217, 0, 0, 0);
                      sub_22EA3BEC8(*(_QWORD *)(v6 + 88), v190, v229, v195, (uint64_t *)v274, v275, *(_QWORD *)(*(_QWORD *)(v6 + 88) + 12888), (uint64_t)&v217);
                      if ((_DWORD)v275)
                      {
                        v150 = 0;
                        v151 = 0;
                        v152 = 8 * v275;
                        while (1)
                        {
                          v153 = *(unsigned __int8 **)(v6 + 88);
                          v238 = v153;
                          *(_QWORD *)&v239 = 0;
                          *((_QWORD *)&v239 + 1) = (char *)&v240 + 8;
                          *(_QWORD *)&v240 = 0x400000000;
                          v154 = *((_QWORD *)v153 + 400);
                          *((_QWORD *)v153 + 400) = &v239;
                          v254 = v154;
                          v255 = 0;
                          if (!*(_DWORD *)(*(_QWORD *)v256 + v150 + 24))
                            goto LABEL_290;
                          sub_22E836A10(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v256 + v150) + 3200), *(_QWORD *)v256 + v150 + 8);
                          if (!v255)
                            break;
LABEL_291:
                          sub_22E828C30((uint64_t)&v238);
                          v151 += 8;
                          v150 += 368;
                          if (v152 == v151)
                            goto LABEL_292;
                        }
                        v153 = v238;
                        v154 = v254;
LABEL_290:
                        sub_22EA7E84C(v153, v154, *(unsigned int **)((char *)v274 + v151));
                        v255 = 1;
                        goto LABEL_291;
                      }
LABEL_292:
                      sub_22E885CF4(v6);
                      sub_22EA36EF0(*(_QWORD *)(v6 + 88), *(_QWORD *)(*(_QWORD *)(v6 + 88) + 12888), v195, v229);
                      if (!sub_22E82C7BC(v6, (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 88) + 12888) + 8) & 0x20) != 0))
                      {
                        sub_22E8847B4(v6, 0x3Eu, 16, "enum", 4uLL);
                        sub_22E80F2F4(*(_QWORD *)(v6 + 8), (unint64_t)v196, 1);
                        *(_WORD *)(v6 + 32) = 62;
                      }
                      sub_22E8D1BC4(v219, (uint64_t)&v219);
                      sub_22E80F94C(&v220);
                      sub_22E80F94C(&v218);
                      v155 = *(_BYTE **)v256;
                      if (*(_DWORD *)&v256[8])
                      {
                        v156 = 368 * *(unsigned int *)&v256[8];
                        v157 = *(_QWORD *)v256 - 368;
                        do
                        {
                          sub_22E828B78(v157 + v156);
                          v156 -= 368;
                        }
                        while (v156);
                        v155 = *(_BYTE **)v256;
                      }
                      if (v155 != &v256[16])
                        free(v155);
                      if (v274 != v276)
                        free(v274);
                      *v222 = v223;
                      if (!HIBYTE(v202) || (sub_22F31E4A4(*(_QWORD *)(v6 + 88), v81, (uint64_t)&v202) & 1) != 0)
                      {
LABEL_303:
                        v158 = (*(_QWORD *)v197 >> 12) & 0x3F;
                        if (v158 == 50)
                          goto LABEL_157;
                        if (!v158)
                        {
                          v159 = HIBYTE(v201);
                          v160 = v188;
                          if (!v188)
                            v160 = v190;
                          v161 = *(_QWORD *)v197 & 0xFFFFFFFFFFDC0FFFLL;
                          *(_DWORD *)(v197 + 120) = v190;
                          *(_DWORD *)(v197 + 132) = v160;
                          if (v159)
                            v162 = 2191360;
                          else
                            v162 = 94208;
                          *(_QWORD *)v197 = v162 | v161;
                          *(_QWORD *)(v197 + 8) = v81;
                          goto LABEL_157;
                        }
                        v163 = sub_22F2F2CB0(v158);
                        v164 = *(_QWORD *)(v6 + 96);
                        *(_DWORD *)(v164 + 312) = v190;
                        *(_DWORD *)(v164 + 316) = 3658;
                        if (*(char *)(v164 + 311) < 0)
                        {
                          **(_BYTE **)(v164 + 288) = 0;
                          *(_QWORD *)(v164 + 296) = 0;
                        }
                        else
                        {
                          *(_BYTE *)(v164 + 288) = 0;
                          *(_BYTE *)(v164 + 311) = 0;
                        }
                        sub_22E78E558((uint64_t)v256, v164);
                        v165 = *(unsigned __int8 **)v256;
                        if (!*(_QWORD *)v256)
                        {
                          v165 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v256[8]);
                          *(_QWORD *)v256 = v165;
                        }
                        v165[*v165 + 1] = 1;
                        v166 = *(_QWORD *)v256;
                        v167 = **(_BYTE **)v256;
                        **(_BYTE **)v256 = v167 + 1;
                        *(_QWORD *)(v166 + 8 * v167 + 16) = v163;
                        v66 = v256;
                        goto LABEL_156;
                      }
                    }
                    else
                    {
                      v40 = v82 == 23;
                      v124 = v176 ^ 1;
                      if (!v40)
                        v124 = 1;
                      if ((v124 & 1) == 0)
                      {
                        sub_22E80CED8(v6);
                        *(_WORD *)v256 = 24;
                        sub_22E885940(v6, (unsigned __int16 *)v256, 1, 1);
                      }
                    }
                    v125 = v197;
                    v126 = *(_QWORD *)v197 & 0xFFFFFFFFFFDC0FFFLL;
                    goto LABEL_241;
                  }
                }
                goto LABEL_123;
              }
              v187 = v42;
              if ((*(_BYTE *)(v197 + 4) & 0x10) != 0)
                v58 = 3;
              else
                v58 = 1;
              if (*(_WORD *)(v6 + 32) != 62)
              {
                sub_22E8847B4(v6, 0x3Eu, 16, "enum", 4uLL);
                v18 = (uint64_t)sub_22E80F2F4(*(_QWORD *)(v6 + 8), (unint64_t)v196, 1);
                *(_WORD *)(v6 + 32) = 62;
              }
            }
          }
          if (*v10)
          {
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 56) + 1) & 2) == 0 || !*(_QWORD *)(v197 + 64))
            {
              sub_22E884578(v6, v196, 14, (uint64_t)v207);
              v36 = v207;
              goto LABEL_125;
            }
            if (*v10 == 3)
            {
              *(_QWORD *)v197 = *(_QWORD *)v197 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
              *(_DWORD *)(v197 + 120) = 0;
              *(_DWORD *)(v197 + 132) = 0;
              v65 = *(_QWORD *)(v6 + 96);
              *(_DWORD *)(v65 + 312) = v190;
              *(_DWORD *)(v65 + 316) = 1547;
              if (*(char *)(v65 + 311) < 0)
              {
                **(_BYTE **)(v65 + 288) = 0;
                *(_QWORD *)(v65 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v65 + 288) = 0;
                *(_BYTE *)(v65 + 311) = 0;
              }
              sub_22E78E558((uint64_t)v206, v65);
              v66 = v206;
              goto LABEL_156;
            }
            v67 = *((_QWORD *)v10 + 1);
            v60 = *(const void **)v67;
            v57 = *(unsigned int *)(v67 + 8);
          }
          else
          {
            v57 = 0;
            v60 = 0;
          }
          v59 = 1;
          if (v30)
            goto LABEL_126;
LABEL_123:
          if (v58 == 2)
            goto LABEL_126;
          sub_22E884578(v6, v196, 1484, (uint64_t)v205);
          v36 = v205;
LABEL_125:
          sub_22E3BB0B8((uint64_t)v36);
          strcpy(v256, "A");
          sub_22E885940(v6, (unsigned __int16 *)v256, 1, 1);
LABEL_157:
          sub_22E828B78((uint64_t)&v232);
          sub_22E8D1BC4(v213, (uint64_t)&v213);
          sub_22E80F94C(&v214);
          return sub_22E80F94C(&v212);
        }
        LOBYTE(v39) = 1;
        v37 = 0x133u >> v9;
      }
    }
    else
    {
      LOBYTE(v39) = 0;
      if (*(_WORD *)(v6 + 32) != 61)
      {
LABEL_62:
        v181 = 0;
        v183 = 0;
        v41 = 0;
        v42 = 0;
        goto LABEL_85;
      }
    }
    if (((v37 | v38) & v24 & 1) != 0 || !*(_BYTE *)(v6 + 945))
    {
      v178 = v39;
      *(_DWORD *)(v6 + 40) = *(_DWORD *)(v6 + 16);
      sub_22F18FB4C(*(_QWORD *)(v6 + 8), (unsigned int *)v196);
      v43 = *(_DWORD *)(v6 + 40);
      v238 = 0;
      *((_QWORD *)&v239 + 1) = 0;
      v240 = 0u;
      v241 = v189;
      v253 = 0;
      v242 = 0u;
      *(_OWORD *)v243 = 0u;
      v244 = 0u;
      v245 = 0u;
      v246 = 0u;
      v247 = 0u;
      v248 = 0u;
      v249 = 0u;
      v250 = 0u;
      v251 = 0u;
      v252 = 0;
      sub_22E80FF64(v6, &v238, v191, 2, 0);
      *(_QWORD *)v256 = &v238;
      v258 = 0;
      v259 = 0;
      memset(&v256[8], 0, 32);
      LODWORD(v257) = 0;
      v260 = *((_QWORD *)&v244 + 1);
      v264 = &v266;
      v262 = 0u;
      v261 = 5;
      v263 = 0;
      v265 = 0x800000000;
      v267 = v267 & 0xFC00 | ((v238 & 0x3F000) == 204800);
      v268 = 0u;
      v269 = v241;
      v273 = 0;
      v272 = 0u;
      v271 = 0u;
      v270 = 0u;
      v186 = sub_22EE89FC0(*(_QWORD *)(v6 + 88), *(_QWORD *)(*(_QWORD *)(v6 + 88) + 12888), (uint64_t)v256, v44, v45, v46, v47, v48);
      v50 = HIDWORD(v260);
      v51 = v43 | ((unint64_t)HIDWORD(v260) << 32);
      v52 = **(_QWORD **)(*(_QWORD *)(v6 + 8) + 56);
      if ((v52 & 0x4000) == 0)
      {
        v182 = v49;
        if ((v52 & 0x200) != 0)
        {
          v53 = *(_QWORD *)(v6 + 96);
          *(_DWORD *)(v53 + 312) = v43;
          v54 = 1928;
        }
        else if ((v52 & 0x100) != 0)
        {
          v53 = *(_QWORD *)(v6 + 96);
          *(_DWORD *)(v53 + 312) = v43;
          v54 = 1802;
        }
        else
        {
          v53 = *(_QWORD *)(v6 + 96);
          *(_DWORD *)(v53 + 312) = v43;
          if ((v52 & 0x20) != 0)
            v54 = 1841;
          else
            v54 = 1796;
        }
        *(_DWORD *)(v53 + 316) = v54;
        if (*(char *)(v53 + 311) < 0)
        {
          **(_BYTE **)(v53 + 288) = 0;
          *(_QWORD *)(v53 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v53 + 288) = 0;
          *(_BYTE *)(v53 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v274, v53);
        v56 = v274;
        if (!v274)
        {
          v56 = (void *)sub_22E3B8AAC(v275);
          v274 = v56;
        }
        sub_22E4D6448((uint64_t)v56 + 336, v51, 1);
        sub_22E3BB0B8((uint64_t)&v274);
        v49 = v182;
      }
      v42 = v49;
      v181 = v50 << 32;
      v183 = v51;
      sub_22E827F78((uint64_t)v256);
      if (DWORD1(v244))
        free(v243[1]);
      sub_22E8D1BC4(v241, (uint64_t)&v241);
      sub_22E80F94C((uint64_t *)&v242);
      v18 = (uint64_t)sub_22E80F94C((uint64_t *)&v240 + 1);
      v41 = v186;
      LOBYTE(v39) = v178;
    }
    else
    {
      v181 = 0;
      v183 = 0;
      v41 = 0;
      v42 = 0;
    }
    goto LABEL_85;
  }
  v7 = *(_QWORD *)(v0 + 8);
  if (*(_QWORD *)(v7 + 752))
  {
    *(_BYTE *)(v7 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + 6) = 1;
  }
  *(_WORD *)(v0 + 32) = 1;
  return (uint64_t *)sub_22F313F10(*(_QWORD **)(v0 + 88), *(uint64_t ***)(*(_QWORD *)(v0 + 88) + 12888), 23);
}

void sub_22E820764(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[13];

  v22[12] = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned __int16 *)(a1 + 32);
  if ((v6 - 7) < 6 || ((v6 - 13) >= 6 ? (v7 = v6 == 1) : (v7 = 1), v7))
    v9 = 0;
  else
    v9 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v8 = *(unsigned int *)(a1 + 40);
  v12 = (_BYTE *)(a1 + 944);
  v13 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v14 = a1;
  v15 = 1441813;
  v16 = 62;
  v18 = 0;
  v19 = 0;
  v17 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v12, 15, "", 0) & 1) == 0)
  {
    v11 = 0;
    v10 = sub_22F2E240C(a1, v19, &v11);
    if ((v10 & 1) != 0)
    {
      sub_22F2F18E0((uint64_t)&v12);
    }
    else
    {
      sub_22E811E8C((uint64_t)&v12);
      if (a3)
        *a3 = HIDWORD(v19);
      v20 = v22;
      v22[0] = v10 & 0xFFFFFFFFFFFFFFFCLL;
      v21 = 0xC00000001;
      sub_22E8118E4(a2, v9, v8 | (v8 << 32), 0, v8, v22, 1u, 5u, v11);
      if (v20 != v22)
        free(v20);
    }
  }
  *v12 = v13;
}

void sub_22E820914(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[13];

  v21[12] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 16);
  v5 = *(unsigned __int16 *)(a1 + 32);
  if ((v5 - 7) < 6 || ((v5 - 13) >= 6 ? (v6 = v5 == 1) : (v6 = 1), v6))
    v10 = 0;
  else
    v10 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
  v7 = *(unsigned int *)(a1 + 40);
  v11 = (_BYTE *)(a1 + 944);
  v12 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v13 = a1;
  v14 = 1441813;
  v15 = 62;
  v17 = 0;
  v18 = 0;
  v16 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v11, 15, "", 0) & 1) == 0)
  {
    v19 = v21;
    v20 = 0xC00000000;
    while (1)
    {
      v8 = sub_22E83766C(a1, 0);
      if ((v8 & 1) != 0)
        break;
      v9 = v20;
      if (v20 >= (unint64_t)HIDWORD(v20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v20;
      }
      *((_QWORD *)v19 + v9) = v8 & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v20) = v20 + 1;
      if (*(_WORD *)(a1 + 32) != 65)
      {
        sub_22E811E8C((uint64_t)&v11);
        sub_22E8118E4(a2, v10, v7 | ((unint64_t)HIDWORD(v18) << 32), 0, 0, v19, v20, 5u, 0);
        goto LABEL_16;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    }
    sub_22F2F18E0((uint64_t)&v11);
LABEL_16:
    if (v19 != v21)
      free(v19);
  }
  *v11 = v12;
}

uint64_t sub_22E820B10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    v5 = v2 & 0xFFFFFFFFFFFFFFF8;
    if (v5)
      *(_DWORD *)(v5 + 8) = 0;
  }
  else
  {
    a1[1] = 0;
  }
  result = sub_22E8D1BC4(a1[2], (uint64_t)(a1 + 2));
  v4 = a1[3];
  if ((v4 & 4) != 0)
  {
    v6 = v4 & 0xFFFFFFFFFFFFFFF8;
    if (v6)
      *(_DWORD *)(v6 + 8) = 0;
  }
  else
  {
    a1[3] = 0;
  }
  *a1 = 0;
  return result;
}

uint64_t sub_22E820B78(uint64_t a1, unsigned int a2, int a3)
{
  __int128 v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  __int16 v46;
  __int128 v47;
  void *v48[2];
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;

  v6 = *(_OWORD *)(a1 + 64);
  v51 = *(_OWORD *)(a1 + 48);
  v7 = (_OWORD *)(a1 + 48);
  v52 = v6;
  v8 = a1 + 16;
  v49 = *(_OWORD *)(a1 + 16);
  v50 = *(_QWORD *)(a1 + 32);
  v9 = *(unsigned int *)(a1 + 2344);
  v10 = *(_WORD *)(a1 + 80);
  v11 = *(_WORD *)(a1 + 82);
  v12 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(*(_QWORD *)(a1 + 8));
  v47 = 0u;
  *(_OWORD *)v48 = 0u;
  if (sub_22E8408AC(a1, (uint64_t)&v47, 0, 0, 1, 0, 0, 0, 0, 0))
    goto LABEL_31;
  v13 = *(unsigned __int16 *)(a1 + 32);
  if (v13 == 5)
  {
    v14 = *(_DWORD *)v8;
    goto LABEL_4;
  }
  if (v13 != 401)
  {
LABEL_31:
    sub_22F162AFC(*(_QWORD *)(a1 + 8));
LABEL_20:
    v26 = v52;
    *v7 = v51;
    v7[1] = v26;
    *(_OWORD *)v8 = v49;
    *(_QWORD *)(v8 + 16) = v50;
    sub_22E80FADC(a1 + 2336, v9);
    v16 = 0;
    *(_WORD *)(a1 + 80) = v10;
    *(_WORD *)(a1 + 82) = v11;
    goto LABEL_21;
  }
  v14 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 20))
    v14 = *(_DWORD *)(a1 + 20);
LABEL_4:
  *(_DWORD *)(a1 + 40) = v14;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v8);
  sub_22E8360CC(a1);
  if (*(_WORD *)(a1 + 32) != 21)
  {
    v22 = *(_QWORD *)(a1 + 8);
    v23 = *(_QWORD *)(v22 + 2832);
    *(_QWORD *)(v22 + 2816) = *(_QWORD *)(v23 - 8);
    *(_QWORD *)(v22 + 2832) = v23 - 8;
    v24 = *(_QWORD *)(v22 + 1008);
    if (v24)
    {
      if (*(_QWORD *)(v24 + 224))
        v25 = 3;
      else
        v25 = 0;
    }
    else if (*(_QWORD *)(v22 + 1040))
    {
      v25 = 1;
    }
    else
    {
      v25 = 2;
    }
    *(_DWORD *)(v22 + 1048) = v25;
    goto LABEL_20;
  }
  sub_22E80F720(a1);
  v15 = *(unsigned __int16 *)(a1 + 32);
  if (v15 != 22)
  {
    if (v15 != 26
      || ((v28 = *(_QWORD *)(a1 + 8), v29 = *(_QWORD *)(v28 + 2816), v29 >= *(unsigned int *)(v28 + 2784))
        ? (v30 = sub_22F162D2C(v28, 1u))
        : (v30 = *(_QWORD *)(v28 + 2776) + 24 * v29),
          *(_WORD *)(v30 + 16) != 22))
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) == 0
        || !sub_22E8836FC(a1, 0, 1))
      {
        v45[0] = a1;
        v45[1] = &v47;
        v46 = 0;
        if (*((_QWORD *)&v47 + 1))
        {
          if (sub_22E95AB18(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v47))
          {
            HIBYTE(v46) = 1;
            sub_22E885C30(a1, 0);
            if ((sub_22E95AB9C(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v47) & 1) == 0)
              LOBYTE(v46) = 1;
          }
        }
        v41 = 0;
        v42 = 0;
        v43 = a1 + 960;
        v44 = 0;
        sub_22E8221D8((uint64_t *)a1, (uint64_t)&v41);
        if ((sub_22E81CB8C(a1, 0) & 1) == 0)
        {
          v40 = a2;
          v31 = *(unsigned __int16 *)(a1 + 32);
          if (v31 != 5)
          {
            if (v31 != 399
              || ((v32 = *(_QWORD *)(a1 + 8), v33 = *(_QWORD *)(v32 + 2816), v33 >= *(unsigned int *)(v32 + 2784))
                ? (v34 = sub_22F162D2C(v32, 1u))
                : (v34 = *(_QWORD *)(v32 + 2776) + 24 * v33),
                  *(_WORD *)(v34 + 16) != 5))
            {
              v16 = 0;
              goto LABEL_12;
            }
            if (*(_WORD *)(a1 + 32) == 399)
            {
              v36 = *(_DWORD *)(a1 + 16);
              if (*(_DWORD *)(a1 + 20))
                v36 = *(_DWORD *)(a1 + 20);
              *(_DWORD *)(a1 + 40) = v36;
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v8);
            }
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v8);
          v16 = 0;
          v37 = *(unsigned __int16 *)(a1 + 32);
          if (v37 > 0x15)
          {
            if (v37 == 71)
              goto LABEL_12;
            if (v37 == 22)
            {
              sub_22E80F720(a1);
              sub_22E8360CC(a1);
              v38 = *(unsigned __int16 *)(a1 + 32);
              if (a3)
              {
                v16 = v38 == 36;
              }
              else
              {
                v16 = v38 == 61 || v38 == 151;
                if (v38 == 62 || v38 == 23)
                  v16 = v40;
              }
              goto LABEL_12;
            }
          }
          else if (v37 == 19 || v37 == 21)
          {
LABEL_12:
            v17 = *(_QWORD *)(a1 + 8);
            v18 = *(_QWORD *)(v17 + 2832);
            *(_QWORD *)(v17 + 2816) = *(_QWORD *)(v18 - 8);
            *(_QWORD *)(v17 + 2832) = v18 - 8;
            v19 = *(_QWORD *)(v17 + 1008);
            if (v19)
            {
              if (*(_QWORD *)(v19 + 224))
                v20 = 3;
              else
                v20 = 0;
            }
            else if (*(_QWORD *)(v17 + 1040))
            {
              v20 = 1;
            }
            else
            {
              v20 = 2;
            }
            *(_DWORD *)(v17 + 1048) = v20;
            v21 = v52;
            *v7 = v51;
            v7[1] = v21;
            *(_OWORD *)v8 = v49;
            *(_QWORD *)(v8 + 16) = v50;
            sub_22E80FADC(a1 + 2336, v9);
            *(_WORD *)(a1 + 80) = v10;
            *(_WORD *)(a1 + 82) = v11;
            *(_WORD *)(a1 + 84) = v12;
            sub_22E8D1BC4(v43, (uint64_t)&v43);
            sub_22E80F94C(&v44);
            sub_22E80F94C(&v42);
            sub_22E828C78((uint64_t)v45);
            goto LABEL_22;
          }
        }
        v16 = 1;
        goto LABEL_12;
      }
    }
  }
  sub_22F162AFC(*(_QWORD *)(a1 + 8));
  v35 = v52;
  *v7 = v51;
  v7[1] = v35;
  *(_OWORD *)v8 = v49;
  *(_QWORD *)(v8 + 16) = v50;
  sub_22E80FADC(a1 + 2336, v9);
  *(_WORD *)(a1 + 80) = v10;
  *(_WORD *)(a1 + 82) = v11;
  v16 = 1;
LABEL_21:
  *(_WORD *)(a1 + 84) = v12;
LABEL_22:
  if (HIDWORD(v48[1]))
    free(v48[0]);
  return v16;
}

char *sub_22E82103C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *result;
  uint64_t v14;
  unint64_t v15;

  v5 = (_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 4) != 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFFF8;
    v7 = *(uint64_t **)v8;
    v6 = (uint64_t *)(*(_QWORD *)v8 + 8 * *(unsigned int *)(v8 + 8));
  }
  else
  {
    v6 = &v5[v4 > 7];
    v7 = (uint64_t *)(a2 + 8);
  }
  v9 = (unint64_t *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = a1 + 8;
  if ((v10 & 4) != 0)
    v11 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  sub_22E828878(v9, v11, v7, v6);
  if ((*v5 & 4) != 0)
  {
    v12 = *v5 & 0xFFFFFFFFFFFFFFF8;
    if (v12)
      *(_DWORD *)(v12 + 8) = 0;
  }
  else
  {
    *v5 = 0;
  }
  result = sub_22E8D1C2C(a1 + 16, a2 + 16);
  v14 = *(_QWORD *)(a2 + 24);
  if ((v14 & 4) != 0)
  {
    v15 = v14 & 0xFFFFFFFFFFFFFFF8;
    if (v15)
      *(_DWORD *)(v15 + 8) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

BOOL sub_22E8210F4(uint64_t a1)
{
  int v1;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v1 = *(unsigned __int16 *)(a1 + 32);
  if ((v1 - 399) < 0x29)
    return 0;
  v4 = *(_QWORD *)(a1 + 376);
  if (!v4)
  {
    v4 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "instancetype", 0xCuLL);
    *(_QWORD *)(a1 + 376) = v4;
    v1 = *(unsigned __int16 *)(a1 + 32);
  }
  if ((v1 - 7) < 6 || ((v1 - 13) >= 6 ? (v5 = v1 == 1) : (v5 = 1), v5))
    v6 = 0;
  else
    v6 = *(_QWORD *)(a1 + 24);
  return v6 == v4;
}

uint64_t sub_22E821180(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v5;
  BOOL v6;

  result = 0;
  v3 = *(unsigned __int16 *)(a2 + 16);
  if (v3 <= 0x14E)
  {
    if (v3 - 79 > 0x33 || ((1 << (v3 - 79)) & 0xA00B07263C2A1) == 0)
    {
      v5 = v3 - 156;
      if (v5 > 0x2C || ((1 << v5) & 0x16000EF00019) == 0)
        return result;
    }
    return 1;
  }
  v6 = v3 - 355 > 0x2D || ((1 << (v3 - 99)) & 0x200082000019) == 0;
  if (!v6 || v3 - 335 < 0xC)
    return 1;
  return result;
}

uint64_t sub_22E821224(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  unsigned __int8 *v15;
  _BYTE v16[12];
  char v17;
  void *__p[2];
  uint64_t v19;
  char v20;
  _BYTE v21[32];

  v3 = *a2;
  if (*((_WORD *)a2 + 8) == 94)
  {
    v4 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v4 + 312) = v3;
    *(_DWORD *)(v4 + 316) = 1954;
    if (*(char *)(v4 + 311) < 0)
    {
      **(_BYTE **)(v4 + 288) = 0;
      *(_QWORD *)(v4 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 288) = 0;
      *(_BYTE *)(v4 + 311) = 0;
    }
    v5 = (uint64_t *)sub_22E78E558((uint64_t)v21, v4);
    v17 = 0;
    *(_QWORD *)&v16[4] = 0;
    __p[1] = 0;
    v19 = 0x700000000000000;
    v20 = 0;
    v15 = (unsigned __int8 *)(v3 | (v3 << 32));
    v16[0] = 1;
    strcpy((char *)__p, "_BitInt");
    sub_22E6D82D0(v5, &v15);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    v6 = (unsigned __int8 **)v21;
  }
  else if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 8) != 0)
  {
    v12 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v12 + 312) = v3;
    *(_DWORD *)(v12 + 316) = 1893;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v14, v12);
    v6 = (unsigned __int8 **)v14;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v7 + 312) = v3;
    *(_DWORD *)(v7 + 316) = 1789;
    if (*(char *)(v7 + 311) < 0)
    {
      **(_BYTE **)(v7 + 288) = 0;
      *(_QWORD *)(v7 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 288) = 0;
      *(_BYTE *)(v7 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v15, v7);
    v8 = (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) >> 8) & 1;
    v9 = v15;
    if (!v15)
    {
      v9 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v16);
      v15 = v9;
    }
    v9[*v9 + 1] = 3;
    v10 = v15;
    v11 = *v15;
    *v15 = v11 + 1;
    *(_QWORD *)&v10[8 * v11 + 16] = v8;
    v6 = &v15;
  }
  return sub_22E3BB0B8((uint64_t)v6);
}

_QWORD *sub_22E8213D4(uint64_t a1, unint64_t *a2)
{
  int v4;
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  unint64_t v25;
  unint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;

  v5 = (_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 16);
  v29 = *(_QWORD *)(a1 + 32);
  v28 = *(_OWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = v4;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v6 = *(_DWORD *)(a1 + 40);
  v7 = *(unsigned __int16 *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 88);
  sub_22EB4DECC(v8, 0, 0, 3);
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v9 = *(_QWORD *)(a1 + 88);
  v10 = sub_22E83F3D8(a1, (unsigned int *)&v28, &v27, &v26, &v25);
  if ((v10 & 1) == 0)
    LOBYTE(v10) = sub_22EBBCB14(v9, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v24);
  if (v7 == 21)
  {
    v11 = v25;
    a2[17] = v25;
    v12 = HIDWORD(v11);
  }
  else
  {
    LODWORD(v12) = HIDWORD(v25);
  }
  if (!(_DWORD)v12)
    LODWORD(v12) = *v5;
  *((_DWORD *)a2 + 23) = v12;
  if (!v27)
  {
    if ((v10 & 1) != 0)
    {
      v19 = *a2 & 0xFFFFFFFFFFDC0FFFLL;
      goto LABEL_19;
    }
    v13 = sub_22EB4E43C(*(_QWORD *)(a1 + 88));
    v14 = *a2;
    if ((v13 & 1) == 0)
    {
      v15 = (v14 >> 12) & 0x3F;
      if (!v15)
      {
        v16 = v13 & 0xFFFFFFFFFFFFFFFELL;
        *((_DWORD *)a2 + 30) = v6;
        *((_DWORD *)a2 + 33) = v6;
        v17 = v14 & 0xFFFFFFFFFFDC0FFFLL | 0x1E000;
LABEL_12:
        *a2 = v17;
        a2[1] = v16;
        return sub_22EB48E64(v8);
      }
      goto LABEL_21;
    }
LABEL_18:
    v19 = v14 & 0xFFFFFFFFFFDC0FFFLL;
LABEL_19:
    *a2 = v19 | 0x32000;
    *((_DWORD *)a2 + 30) = 0;
    *((_DWORD *)a2 + 33) = 0;
    return sub_22EB48E64(v8);
  }
  v16 = v26;
  v14 = *a2;
  if (!v26)
    goto LABEL_18;
  v15 = (v14 >> 12) & 0x3F;
  if (!v15)
  {
    *((_DWORD *)a2 + 30) = v6;
    *((_DWORD *)a2 + 33) = v6;
    v17 = (v14 & 0xFFFFFFFFFFDC0FFFLL | 0x32000) - 86016;
    goto LABEL_12;
  }
LABEL_21:
  if (v15 != 50)
  {
    v20 = sub_22F2F2CB0(v15);
    sub_22E88453C(a1, v6, 3658, (uint64_t)v24);
    v21 = (unsigned __int8 *)v24[0];
    if (!v24[0])
    {
      v21 = (unsigned __int8 *)sub_22E3B8AAC(v24[1]);
      v24[0] = v21;
    }
    v21[*v21 + 1] = 1;
    v22 = v24[0];
    v23 = *(unsigned __int8 *)v24[0];
    *(_BYTE *)v24[0] = v23 + 1;
    *(_QWORD *)(v22 + 8 * v23 + 16) = v20;
    sub_22E3BB0B8((uint64_t)v24);
  }
  return sub_22EB48E64(v8);
}

uint64_t *sub_22E82161C(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, unint64_t *, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *result;
  unsigned int *v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  _QWORD v54[41];
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (*(_WORD *)(a1 + 32) == 196)
  {
    v10 = *(_QWORD *)(a1 + 96);
    ++*(_BYTE *)(v10 + 4);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    result = (uint64_t *)sub_22E82161C(a1, a2, a3, a4, a5);
    --*(_BYTE *)(v10 + 4);
    return result;
  }
  v23 = (unsigned int *)(a1 + 16);
  v25 = 0;
  v26 = 0;
  v27 = a1 + 960;
  v28 = 0;
  sub_22E8103B4(a1, &v25, 0);
  sub_22E82103C(a2 + 24, (uint64_t)&v25);
  sub_22E80FF64(a1, a2, 3, 0, a5);
  if (*(_WORD *)(a1 + 32) != 62)
  {
    v13 = 0;
    v14 = 1;
    while (1)
    {
      v29 = a2;
      v33 = 0;
      v30 = 0u;
      v31 = 0u;
      v32 = 0;
      v15 = *(_QWORD *)(a2 + 88);
      v34 = 0;
      v35 = v15;
      v36 = 7;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v40 = &v42;
      v41 = 0x800000000;
      v43 = v43 & 0xFC00 | ((*(_QWORD *)a2 & 0x3F000) == 204800);
      v16 = *(_QWORD *)(a2 + 40);
      v44 = 0;
      v45 = 0;
      v46 = v16;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v50 = 0;
      v51 = 0;
      v52 = *(_QWORD *)(a1 + 88);
      v53[0] = a2 + 232;
      v53[1] = v54;
      v53[2] = 0x400000000;
      v17 = *(_QWORD *)(v52 + 3200);
      *(_QWORD *)(v52 + 3200) = v53;
      v54[40] = v17;
      v55 = 0;
      LODWORD(v50) = v13;
      if ((v14 & 1) == 0)
      {
        sub_22E831780(a1);
        sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v29, 0, 0);
        sub_22E831780(a1);
      }
      if (*(_WORD *)(a1 + 32) == 61)
        break;
      v18 = *(_BYTE *)(a1 + 945);
      *(_BYTE *)(a1 + 945) = 1;
      sub_22E8227E4(a1, (uint64_t)&v29, (unint64_t)sub_22E823490, 0);
      *(_BYTE *)(a1 + 945) = v18;
      if (*(_WORD *)(a1 + 32) == 61)
      {
        v20 = v23;
        v21 = *v23;
LABEL_18:
        *(_DWORD *)(a1 + 40) = v21;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v20);
        v22 = sub_22F2E50C0(a1, 0);
        if ((v22 & 1) != 0)
        {
          LOWORD(v24) = 62;
          sub_22E885940(a1, (unsigned __int16 *)&v24, 1, 2);
        }
        else
        {
          v51 = v22 & 0xFFFFFFFFFFFFFFFELL;
        }
      }
      sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v29, a5, 1);
      v24 = 0;
      a3(a4, &v29, &v24);
      v19 = *(unsigned __int16 *)(a1 + 32);
      if (v19 == 65)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v23);
        v14 = 0;
        v13 = *(_DWORD *)(a1 + 40);
      }
      sub_22E828C30((uint64_t)&v52);
      sub_22E827F78((uint64_t)&v29);
      if (v19 != 65)
        goto LABEL_6;
    }
    v20 = v23;
    v21 = *v23;
    v32 = 0;
    v33 = 0;
    LODWORD(v34) = v21;
    HIDWORD(v34) = v21;
    goto LABEL_18;
  }
  v12 = (unsigned int *)sub_22EA0F52C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), 3, (unsigned int *)a2, 0, 0, 0, &v29);
  if (!*(_BYTE *)(a2 + 584))
  {
    sub_22EA7E84C(*(_QWORD **)(a2 + 224), *(_QWORD *)(a2 + 576), v12);
    *(_BYTE *)(a2 + 584) = 1;
  }
LABEL_6:
  sub_22E8D1BC4(v27, (uint64_t)&v27);
  sub_22E80F94C(&v28);
  return sub_22E80F94C(&v26);
}

void sub_22E8219F4(uint64_t a1, int a2, int a3, unint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  void **v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[32];
  _BYTE *v30;
  char v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[5];
  int v39;
  const char *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[3];
  _QWORD v62[41];
  char v63;
  void *v64[2];
  _BYTE v65[24];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v41 = a4;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 88);
  llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
  v37 = 0;
  v38[0] = &unk_24FAC2E78;
  v38[3] = v8;
  v38[4] = a4;
  v39 = a2;
  v40 = "parsing struct/union body";
  v30 = (_BYTE *)(a1 + 944);
  v31 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v32 = a1;
  v33 = 1572887;
  v34 = 62;
  v35 = sub_22E80CED8;
  v36 = 0;
  if ((sub_22E811DE8((uint64_t)&v30) & 1) != 0)
    goto LABEL_2;
  sub_22E885C30(a1, 40);
  sub_22EA36CCC(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v41);
  v64[0] = v65;
  v64[1] = (void *)0x200000000;
  v65[16] = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v9 = *(unsigned __int16 *)(a1 + 32);
            if ((v9 - 436) <= 2)
            {
              if ((sub_22F2F1928(a1) & 1) != 0)
                goto LABEL_50;
              v9 = *(unsigned __int16 *)(a1 + 32);
            }
            if (v9 <= 119)
              break;
            switch(v9)
            {
              case 408:
              case 409:
              case 411:
              case 412:
              case 413:
              case 414:
              case 416:
              case 417:
              case 418:
              case 419:
              case 420:
              case 421:
              case 422:
              case 423:
              case 424:
              case 425:
              case 426:
              case 427:
              case 430:
              case 431:
              case 432:
              case 433:
              case 434:
                v19 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v19 + 312) = *(_DWORD *)(a1 + 16);
                *(_DWORD *)(v19 + 316) = 1722;
                if (*(char *)(v19 + 311) < 0)
                {
                  **(_BYTE **)(v19 + 288) = 0;
                  *(_QWORD *)(v19 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v19 + 288) = 0;
                  *(_BYTE *)(v19 + 311) = 0;
                }
                sub_22E78E558((uint64_t)&v42, v19);
                v24 = sub_22F2F2CB0(a3);
                v20 = (unsigned __int8 *)v42;
                if (!v42)
                {
                  v20 = (unsigned __int8 *)sub_22E3B8AAC(v43);
                  v42 = v20;
                }
                v20[*v20 + 1] = 1;
                v21 = v42;
                v22 = *(unsigned __int8 *)v42;
                *(_BYTE *)v42 = v22 + 1;
                v21[v22 + 2] = v24;
                sub_22E3BB0B8((uint64_t)&v42);
                v14 = *(_DWORD *)(a1 + 16);
                if (*(_DWORD *)(a1 + 20))
                  v14 = *(_DWORD *)(a1 + 20);
                goto LABEL_36;
              case 410:
                sub_22F2EE050(a1);
                continue;
              case 415:
                sub_22F2EE11C(a1);
                continue;
              case 428:
              case 429:
                LODWORD(v25) = 3;
                v42 = 0;
                v43 = 0;
                v44 = a1 + 960;
                v45 = 0;
                sub_22E85B9CC(a1, (int *)&v25, &v42, 0, 0, 0);
                sub_22E8D1BC4(v44, (uint64_t)&v44);
                sub_22E80F94C(&v45);
                sub_22E80F94C(&v43);
                continue;
              default:
                if (v9 != 120 && v9 != 165)
                  goto LABEL_29;
                LODWORD(v42) = 0;
                sub_22E82BC2C(a1, &v42);
                break;
            }
          }
          if (v9 <= 61)
          {
            if (v9 == 1 || v9 == 24)
              goto LABEL_50;
LABEL_29:
            v25 = a1;
            v26 = &v41;
            v45 = 0;
            v46 = 0;
            v44 = 0;
            v42 = 0;
            v47 = a1 + 960;
            v48 = 0u;
            v49 = 0u;
            v50 = 0u;
            v51 = 0u;
            v52 = 0u;
            v53 = 0u;
            v54 = 0u;
            v55 = 0u;
            v56 = 0u;
            v57 = 0u;
            v58 = 0;
            v11 = *(_QWORD *)(a1 + 88);
            v59 = 0;
            v60 = v11;
            v61[0] = 0;
            v61[1] = v62;
            v61[2] = 0x400000000;
            v12 = *(_QWORD *)(v11 + 3200);
            *(_QWORD *)(v11 + 3200) = v61;
            v62[40] = v12;
            v63 = 0;
            sub_22E82161C(a1, (unint64_t)&v42, (void (*)(uint64_t, unint64_t *, uint64_t *))sub_22E828FE4, (uint64_t)&v25, (uint64_t)v64);
            sub_22E828C30((uint64_t)&v60);
            if (DWORD1(v50))
              free(*((void **)&v49 + 1));
            sub_22E8D1BC4(v47, (uint64_t)&v47);
            sub_22E80F94C((uint64_t *)&v48);
            sub_22E80F94C(&v46);
            goto LABEL_32;
          }
          if (v9 != 62)
            break;
          sub_22E884DD8(a1, 1, a3);
        }
        if (v9 != 72)
          goto LABEL_29;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        if (!sub_22F140B7C(a1 + 16, 3))
        {
          sub_22E884578(a1, (int *)(a1 + 16), 1759, (uint64_t)v29);
          v15 = (void **)v29;
          goto LABEL_41;
        }
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        sub_22E8847B4(a1, 0x15u, 15, "", 0);
        if (*(_WORD *)(a1 + 32) == 5)
          break;
        sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v42);
        v16 = (unsigned __int8 *)v42;
        if (!v42)
        {
          v16 = (unsigned __int8 *)sub_22E3B8AAC(v43);
          v42 = v16;
        }
        v16[*v16 + 1] = 4;
        v17 = v42;
        v18 = *(unsigned __int8 *)v42;
        *(_BYTE *)v42 = v18 + 1;
        v17[v18 + 2] = 5;
        v15 = &v42;
LABEL_41:
        sub_22E3BB0B8((uint64_t)v15);
        LOWORD(v42) = 62;
        sub_22E885940(a1, (unsigned __int16 *)&v42, 1, 0);
      }
      v42 = &v44;
      v43 = 0x1000000000;
      sub_22EAFFF38(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v41, *(_DWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)&v42);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      sub_22E8847B4(a1, 0x16u, 15, "", 0);
      if (v42 != &v44)
        free(v42);
LABEL_32:
      v13 = *(unsigned __int16 *)(a1 + 32);
      if (v13 != 62)
        break;
LABEL_35:
      v14 = *(_DWORD *)(a1 + 16);
LABEL_36:
      *(_DWORD *)(a1 + 40) = v14;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    }
    if (v13 == 24)
      break;
    sub_22E8847B4(a1, 0x3Eu, 1532, "", 0);
    LOWORD(v42) = 24;
    sub_22E885940(a1, (unsigned __int16 *)&v42, 1, 3);
    if (*(_WORD *)(a1 + 32) == 62)
      goto LABEL_35;
  }
  sub_22E8847B4(a1, 0x3Eu, 1815, "", 0);
LABEL_50:
  sub_22E811E8C((uint64_t)&v30);
  v25 = 0;
  v26 = 0;
  v27 = a1 + 960;
  v28 = 0;
  if (*(_WORD *)(a1 + 32) == 186)
    sub_22E810414(a1, &v25, 0, 0, 0);
  v23 = sub_22EFC3B90(v41);
  v42 = &v44;
  v43 = 0x2000000000;
  sub_22F271D38((uint64_t)&v42, v23, 0);
  sub_22EA39224(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a2, v41, (uint64_t *)v42, v43, v37, SHIDWORD(v37), (uint64_t)&v25);
  sub_22E885CF4(a1);
  sub_22EA36EF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v41, v37);
  if (v42 != &v44)
    free(v42);
  sub_22E8D1BC4(v27, (uint64_t)&v27);
  sub_22E80F94C(&v28);
  sub_22E80F94C((uint64_t *)&v26);
  if (v64[0] != v65)
    free(v64[0]);
LABEL_2:
  *v30 = v31;
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v38);
}

uint64_t sub_22E8220E8(uint64_t a1, char a2, uint64_t *a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t result;

  v8 = *(unsigned __int16 *)(a1 + 32);
  if (v8 == 186 || v8 == 302)
  {
LABEL_5:
    sub_22E8102E8(a1, a2, a3, a4, 0);
    return 1;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 20) & 0x1000000000) != 0)
  {
    v9 = sub_22E8836FC(a1, 0, 0);
    result = 0;
    if (!v9)
      return result;
    goto LABEL_5;
  }
  return 0;
}

uint64_t sub_22E822180(uint64_t a1)
{
  int v1;
  BOOL v2;
  uint64_t v4;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 8) & 0xC0000000000) != 0
    && ((v1 = *(unsigned __int16 *)(a1 + 32), (v1 - 7) < 6)
     || ((v1 - 13) >= 6 ? (v2 = v1 == 1) : (v2 = 1), v2)
      ? (v4 = 0)
      : (v4 = *(_QWORD *)(a1 + 24)),
        v4 == *(_QWORD *)(a1 + 344)))
  {
    return sub_22F2E29F0(a1);
  }
  else
  {
    return 0;
  }
}

uint64_t *sub_22E8221D8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result[1] + 56);
  if (((*(_BYTE *)v2 & 0x20) != 0 || (*(_WORD *)(v2 + 96) & 0x40) != 0) && *((_WORD *)result + 16) == 19)
  {
    v4 = 0;
    v5 = 0;
    v6 = result + 120;
    v7 = 0;
    sub_22E836210((uint64_t)result, &v4);
    sub_22E82103C(a2, (uint64_t)&v4);
    sub_22E8D1BC4((uint64_t)v6, (uint64_t)&v6);
    sub_22E80F94C(&v7);
    return sub_22E80F94C(&v5);
  }
  return result;
}

void sub_22E822278(uint64_t a1, _DWORD *a2, char a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  _DWORD *v13;
  char v14;
  char *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  const char *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  const char *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v35[36];
  int v36;
  const char *v37;
  int i;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if ((a3 & 4) != 0
    && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 20) & 0x1000000000) != 0
    && sub_22E8836FC(a1, 0, 0))
  {
    v39 = 0;
    v40 = 0;
    v41 = a1 + 960;
    v42 = 0;
    sub_22E835FD0(a1, &v39);
    sub_22E82103C((uint64_t)(a2 + 6), (uint64_t)&v39);
    sub_22E8D1BC4(v41, (uint64_t)&v41);
    sub_22E80F94C(&v42);
    sub_22E80F94C(&v40);
  }
  for (i = 0; ; i = *(_DWORD *)(a1 + 40))
  {
    while (1)
    {
      v37 = 0;
      v36 = 0;
      v10 = *(unsigned int *)(a1 + 16);
      v11 = *(unsigned __int16 *)(a1 + 32);
      if (v11 <= 0x8D)
        break;
      switch(*(_WORD *)(a1 + 32))
      {
        case 0x12F:
        case 0x130:
        case 0x131:
        case 0x132:
        case 0x133:
        case 0x134:
        case 0x173:
        case 0x174:
        case 0x175:
        case 0x177:
          if ((a3 & 8) == 0)
            goto LABEL_66;
          goto LABEL_10;
        case 0x135:
        case 0x137:
        case 0x13D:
        case 0x14D:
        case 0x14E:
        case 0x14F:
        case 0x150:
        case 0x151:
        case 0x152:
        case 0x153:
        case 0x154:
        case 0x155:
        case 0x156:
        case 0x157:
        case 0x158:
        case 0x159:
        case 0x15A:
        case 0x15B:
        case 0x15C:
        case 0x15D:
        case 0x15E:
        case 0x15F:
        case 0x160:
        case 0x161:
        case 0x163:
        case 0x164:
        case 0x165:
        case 0x166:
        case 0x167:
        case 0x168:
        case 0x169:
        case 0x16A:
        case 0x16B:
        case 0x16C:
        case 0x16D:
          goto LABEL_66;
        case 0x136:
          v12 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56);
          v13 = a2;
          v14 = 8;
          goto LABEL_36;
        case 0x138:
        case 0x139:
        case 0x13A:
        case 0x13B:
        case 0x13C:
        case 0x14A:
        case 0x14B:
        case 0x14C:
          goto LABEL_54;
        case 0x13E:
        case 0x13F:
        case 0x140:
        case 0x141:
        case 0x142:
        case 0x143:
        case 0x144:
        case 0x146:
        case 0x147:
        case 0x148:
        case 0x149:
          sub_22E816B64(a1, (uint64_t)(a2 + 6));
          goto LABEL_55;
        case 0x145:
          if (sub_22E816BA4(a1, a2, *(_DWORD *)(a1 + 16), &v37, &v36, &i))
          {
            sub_22E884578(a1, (int *)(a1 + 16), v36, (uint64_t)&v39);
            v23 = v37;
            v24 = v39;
            if (!v39)
            {
              v24 = (unsigned __int8 *)sub_22E3B8AAC(v40);
              v39 = v24;
            }
            v24[*v24 + 1] = 1;
            v25 = v39;
            v26 = *v39;
            *v39 = v26 + 1;
            *(_QWORD *)&v25[8 * v26 + 16] = v23;
            sub_22E3BB0B8((uint64_t)&v39);
          }
          continue;
        case 0x162:
          if ((a3 & 0xA) == 0)
            goto LABEL_66;
          sub_22E8169B0(a1, (uint64_t)(a2 + 6));
          continue;
        case 0x16E:
          sub_22E8118E4((uint64_t)(a2 + 6), *(_QWORD *)(a1 + 24), v10 | (v10 << 32), 0, v10, 0, 0, 5u, 0);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          continue;
        case 0x16F:
        case 0x170:
        case 0x171:
        case 0x172:
          sub_22E816E00(a1, (uint64_t)(a2 + 6));
          continue;
        case 0x176:
          if ((a3 & 8) == 0)
            goto LABEL_66;
          v27 = *(_QWORD *)(a1 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v27 + 56) + 1) & 1) != 0
            || !a5
            || sub_22E8AD5F4((uint64_t *)a2)
            || ((v28 = *(_QWORD *)(v27 + 2816), v28 >= *(unsigned int *)(v27 + 2784))
              ? (v29 = sub_22F162D2C(v27, 1u))
              : (v29 = *(_QWORD *)(v27 + 2776) + 24 * v28),
                *(_WORD *)(v29 + 16) != 62 || (sub_22E88B624(a1, 0) & 1) == 0))
          {
LABEL_10:
            sub_22E81691C(a1, (uint64_t)(a2 + 6));
          }
          continue;
        default:
          if (v11 == 142)
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 52) & 0x40000000) == 0)
              goto LABEL_66;
LABEL_54:
            sub_22E816A3C(a1, (uint64_t)(a2 + 6));
            goto LABEL_55;
          }
          if (v11 != 186)
            goto LABEL_66;
          if ((a3 & 1) != 0)
          {
            sub_22E884578(a1, (int *)(a1 + 16), 1447, (uint64_t)v35);
            sub_22E3BB0B8((uint64_t)v35);
          }
          if ((a3 & 3) == 0)
            goto LABEL_66;
          sub_22E810414(a1, a2 + 6, a7, 0, 1);
          break;
      }
    }
    if (*(unsigned __int16 *)(a1 + 32) <= 0x6Du)
      break;
    if (v11 - 125 < 2)
    {
      sub_22E820914(a1, (uint64_t)(a2 + 6));
      continue;
    }
    if (v11 == 110)
    {
      v12 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56);
      v13 = a2;
      v14 = 4;
    }
    else
    {
      if (v11 != 114 || !a4)
        goto LABEL_66;
      v12 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56);
      if ((*(_BYTE *)v12 & 2) == 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1791, (uint64_t)&v39);
        v15 = off_24FCAD0E8[*(unsigned __int16 *)(a1 + 32)];
        v16 = v39;
        if (!v39)
        {
          v16 = (unsigned __int8 *)sub_22E3B8AAC(v40);
          v39 = v16;
        }
        v16[*v16 + 1] = 1;
        v17 = v39;
        v18 = *v39;
        *v39 = v18 + 1;
        *(_QWORD *)&v17[8 * v18 + 16] = v15;
        sub_22E3BB0B8((uint64_t)&v39);
        v12 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56);
      }
      v13 = a2;
      v14 = 16;
    }
LABEL_36:
    if (sub_22E8ADB6C(v13, v14, v10, &v37, &v36, v12))
    {
LABEL_37:
      sub_22E884578(a1, (int *)(a1 + 16), v36, (uint64_t)&v39);
      v19 = v37;
      v20 = v39;
      if (!v39)
      {
        v20 = (unsigned __int8 *)sub_22E3B8AAC(v40);
        v39 = v20;
      }
      v20[*v20 + 1] = 1;
      v21 = v39;
      v22 = *v39;
      *v39 = v22 + 1;
      *(_QWORD *)&v21[8 * v22 + 16] = v19;
      sub_22E3BB0B8((uint64_t)&v39);
    }
LABEL_55:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  }
  switch(v11)
  {
    case 0x50u:
      if (sub_22E8ADB6C(a2, 1, *(_DWORD *)(a1 + 16), &v37, &v36, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56)))
        goto LABEL_37;
      goto LABEL_55;
    case 0x62u:
      v12 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56);
      v13 = a2;
      v14 = 2;
      goto LABEL_36;
    case 3u:
      v30 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v30 + 752))
      {
        *(_BYTE *)(v30 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v30 + 48) + 6) = 1;
      }
      *(_WORD *)(a1 + 32) = 1;
      if (*(_BYTE *)(a6 + 16))
        (*(void (**)(_QWORD))a6)(*(_QWORD *)(a6 + 8));
      else
        sub_22F31416C(*(_QWORD *)(a1 + 88), (uint64_t)a2);
      break;
    default:
LABEL_66:
      sub_22E8ADC50((uint64_t)a2, *(_QWORD *)(a1 + 88));
      if (i)
        a2[23] = i;
      break;
  }
}

void sub_22E8227E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  char v20;
  int v21;
  uint64_t v22;
  __n128 v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  int *v27;
  int v28;
  unint64_t v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  float *v36;
  float32x2x2_t v37;
  unint64_t v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  uint64_t v76;
  _BYTE v77[24];
  _BYTE v78[32];
  void *v79;
  uint64_t v80;
  _BYTE v81[24];
  _BYTE v82[24];
  _BYTE v83[24];
  _QWORD v84[2];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  void *v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  float32x2x2_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  int v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  char v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  int v109;
  uint64_t v110;
  _QWORD v111[11];

  v111[9] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)(a1 + 96) + 4))
    *(_WORD *)(a2 + 1088) |= 0x20u;
  v8 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v8 + 56) + 1) & 1) != 0)
  {
    v9 = *(unsigned __int16 *)(a1 + 32);
    if (v9 == 162 || v9 == 71)
      goto LABEL_17;
    if (v9 == 5)
    {
      v10 = *(_QWORD *)(v8 + 2816);
      if (v10 >= *(unsigned int *)(v8 + 2784))
        v11 = sub_22F162D2C(v8, 1u);
      else
        v11 = *(_QWORD *)(v8 + 2776) + 24 * v10;
      if (*(_WORD *)(v11 + 16) == 71
        || ((v12 = *(_QWORD *)(a1 + 8), v13 = *(_QWORD *)(v12 + 2816), v13 >= *(unsigned int *)(v12 + 2784))
          ? (v14 = sub_22F162D2C(v12, 1u))
          : (v14 = *(_QWORD *)(v12 + 2776) + 24 * v13),
            *(_WORD *)(v14 + 16) == 46))
      {
LABEL_17:
        v15 = *(_DWORD *)(a2 + 80);
        if (v15)
          v16 = v15 == 7;
        else
          v16 = 1;
        v17 = v16;
        v101 = 0u;
        v102 = 0u;
        sub_22E8408AC(a1, &v101, 0, 0, v17, 0, 0, 0, 0);
        if ((_DWORD)v101)
          v18 = DWORD1(v101) == 0;
        else
          v18 = 1;
        v19 = v18 && *((_QWORD *)&v101 + 1) == 0;
        v20 = !v19;
        if (!v19)
        {
          if (*(_WORD *)(a1 + 32) == 30)
          {
            if (*((_QWORD *)&v101 + 1))
              sub_22E8853B0(a1, DWORD1(v101), 0x47u, 4);
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            v21 = *(_DWORD *)(a1 + 40);
            if (v21)
              *(_DWORD *)(a2 + 76) = v21;
            v84[0] = 0;
            v85 = 0;
            v86 = 0;
            v87 = 0;
            v88 = a1 + 960;
            v100 = 0;
            v89 = 0u;
            *(_OWORD *)v90 = 0u;
            v91 = 0u;
            v92 = 0u;
            v93 = 0u;
            v94 = 0u;
            v95 = (float32x2x2_t)0;
            v96 = 0u;
            v97 = 0u;
            v98 = 0u;
            v99 = 0;
            v83[0] = 0;
            v83[16] = 0;
            sub_22E822278(a1, v84, 14, 1, 0, (uint64_t)v83, 0);
            v22 = HIDWORD(*((_QWORD *)&v91 + 1));
            if (!*(_DWORD *)(a2 + 72))
              *(_DWORD *)(a2 + 72) = DWORD2(v91);
            if ((_DWORD)v22)
              *(_DWORD *)(a2 + 76) = v22;
            sub_22E8227E4(a1, a2, a3, a4);
            v106 = 0;
            v107 = 0;
            LODWORD(v104) = 5;
            HIDWORD(v104) = v101;
            LODWORD(v105) = HIDWORD(v91);
            v109 = v21;
            v108 = v108 & 0x80 | (LODWORD(v84[0]) >> 25);
            v110 = v101;
            sub_22F0AB560(v111, (uint64_t)&v101 + 8);
            sub_22E824ABC(a2, (unint64_t)&v104, (uint64_t)&v86, 0);
            sub_22E80F94C(&v107);
            if (DWORD1(v91))
              free(v90[1]);
            sub_22E8D1BC4(v88, (uint64_t)&v88);
            sub_22E80F94C((uint64_t *)&v89);
            sub_22E80F94C(&v87);
          }
          else
          {
            if (((1 << *(_DWORD *)(a2 + 80)) & 0x3FB206C) != 0)
            {
              v23.n128_f64[0] = sub_22E88ABAC(a1, (int *)&v101, 1);
            }
            else
            {
              *(_QWORD *)(a2 + 8) = v101;
              sub_22F0AB71C(a2 + 16, (uint64_t)&v101 + 8);
            }
            if (a4 & 1 | a3)
            {
              v24 = (_QWORD *)(a1 + (a4 >> 1));
              if ((a4 & 1) != 0)
                (*(void (**)(_QWORD *, uint64_t, __n128))(*v24 + a3))(v24, a2, v23);
              else
                ((void (*)(_QWORD *, uint64_t, __n128))a3)(v24, a2, v23);
            }
          }
        }
        if (HIDWORD(v102))
          free((void *)v102);
        if ((v20 & 1) != 0)
          return;
        goto LABEL_55;
      }
      v9 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v9 == 399)
      goto LABEL_17;
  }
LABEL_55:
  v25 = *(unsigned __int16 *)(a1 + 32);
  if ((*(_BYTE *)(*(_QWORD *)a2 + 2) & 0x40) != 0)
  {
    v26 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v26)
    {
      v27 = *(int **)(a2 + 112);
      while (1)
      {
        v28 = *v27;
        v27 += 30;
        if (v28 == 7)
          break;
        if (!--v26)
          goto LABEL_60;
      }
    }
    else
    {
LABEL_60:
      v84[0] = 0;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      v88 = a1 + 960;
      v100 = 0;
      v89 = 0u;
      *(_OWORD *)v90 = 0u;
      v91 = 0u;
      v92 = 0u;
      v93 = 0u;
      v94 = 0u;
      v95 = (float32x2x2_t)0;
      v96 = 0u;
      v97 = 0u;
      v98 = 0u;
      v99 = 0;
      v82[0] = 0;
      v82[16] = 0;
      sub_22E822278(a1, v84, 14, 1, 0, (uint64_t)v82, 0);
      HIDWORD(v104) = DWORD2(v98);
      LODWORD(v105) = 0;
      v106 = 0;
      v107 = 0;
      LODWORD(v104) = 7;
      v108 = v108 & 0x80 | (LODWORD(v84[0]) >> 25);
      sub_22E824ABC(a2, (unint64_t)&v104, (uint64_t)&v86, 0);
      sub_22E80F94C(&v107);
      if (DWORD1(v91))
        free(v90[1]);
      sub_22E8D1BC4(v88, (uint64_t)&v88);
      sub_22E80F94C((uint64_t *)&v89);
      sub_22E80F94C(&v87);
    }
  }
  v29 = *(_QWORD *)(a1 + 8);
  if ((sub_22E824BDC(v25, *(uint64_t **)(v29 + 56), *(_DWORD *)(a2 + 80)) & 1) != 0)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(v29, (unsigned int *)(a1 + 16));
    v30 = *(_DWORD *)(a1 + 40);
    if (v30)
      *(_DWORD *)(a2 + 76) = v30;
    if (v25 == 55 || v25 == 30)
    {
      v84[0] = 0;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      v88 = a1 + 960;
      v100 = 0;
      v89 = 0u;
      *(_OWORD *)v90 = 0u;
      v91 = 0u;
      v92 = 0u;
      v93 = 0u;
      v94 = 0u;
      v95 = (float32x2x2_t)0;
      v96 = 0u;
      v97 = 0u;
      v98 = 0u;
      v99 = 0;
      v31 = *(_DWORD *)(a2 + 80);
      if (v31 == 13)
        v32 = 13;
      else
        v32 = 14;
      *(_QWORD *)&v101 = &v102;
      *((_QWORD *)&v101 + 1) = 0x200000000;
      v103 = 1;
      v81[0] = 0;
      v81[16] = 0;
      sub_22E822278(a1, v84, v32, 1, (0xF91u >> v31) & 1, (uint64_t)v81, (uint64_t)&v101);
      v33 = HIDWORD(*((_QWORD *)&v91 + 1));
      if (!*(_DWORD *)(a2 + 72))
        *(_DWORD *)(a2 + 72) = DWORD2(v91);
      if ((_DWORD)v33)
        *(_DWORD *)(a2 + 76) = v33;
      sub_22E8227E4(a1, a2, a3, a4);
      if (v25 == 30)
      {
        v79 = v81;
        v80 = 0;
        v34 = v96;
        v35 = HIDWORD(v98);
        HIDWORD(v104) = v30;
        LODWORD(v105) = 0;
        v106 = 0;
        v107 = 0;
        LODWORD(v104) = 0;
        v36 = (float *)&v109;
        v108 = LODWORD(v84[0]) >> 25;
        v37 = v95;
        v38 = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
        vst2_f32(v36, v37);
        HIDWORD(v111[0]) = v34;
        v111[1] = v35;
      }
      else
      {
        HIDWORD(v104) = v30;
        LODWORD(v105) = 0;
        v106 = 0;
        v107 = 0;
        LODWORD(v104) = 4;
        v108 = LODWORD(v84[0]) >> 25;
      }
      sub_22E824ABC(a2, (unint64_t)&v104, (uint64_t)&v86, 0);
      sub_22E80F94C(&v107);
      if ((__int128 *)v101 != &v102)
        free((void *)v101);
      if (DWORD1(v91))
        free(v90[1]);
      sub_22E8D1BC4(v88, (uint64_t)&v88);
      sub_22E80F94C((uint64_t *)&v89);
LABEL_149:
      sub_22E80F94C(&v87);
      return;
    }
    v84[0] = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = a1 + 960;
    v100 = 0;
    v89 = 0u;
    *(_OWORD *)v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    v95 = (float32x2x2_t)0;
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0;
    if (v25 == 28)
    {
      if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
        v40 = 1942;
      else
        v40 = 1852;
      v41 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v41 + 312) = v30;
      *(_DWORD *)(v41 + 316) = v40;
      if (*(char *)(v41 + 311) < 0)
      {
        **(_BYTE **)(v41 + 288) = 0;
        *(_QWORD *)(v41 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v41 + 288) = 0;
        *(_BYTE *)(v41 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v78, v41);
      sub_22E3BB0B8((uint64_t)v78);
    }
    v77[0] = 0;
    v77[16] = 0;
    sub_22E822278(a1, v84, 14, 1, 0, (uint64_t)v77, 0);
    v42 = HIDWORD(*((_QWORD *)&v91 + 1));
    if (!*(_DWORD *)(a2 + 72))
      *(_DWORD *)(a2 + 72) = DWORD2(v91);
    if ((_DWORD)v42)
      *(_DWORD *)(a2 + 76) = v42;
    v43 = v84[0];
    if (!(LODWORD(v84[0]) >> 25))
    {
LABEL_131:
      sub_22E8227E4(a1, a2, a3, a4);
      v64 = *(_DWORD *)(a2 + 120);
      if (v64)
      {
        v65 = v64 - 1;
        v66 = *(_QWORD *)(a2 + 112);
        if (*(_DWORD *)(v66 + 120 * v65) == 1)
        {
          v67 = (_DWORD *)(v66 + 120 * v65 + 4);
          if (*(_DWORD *)(a2 + 40) || (v68 = *(_QWORD *)(a2 + 48)) == 0)
          {
            v73 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v73 + 312) = *v67;
            *(_DWORD *)(v73 + 316) = 1572;
            if (*(char *)(v73 + 311) < 0)
            {
              **(_BYTE **)(v73 + 288) = 0;
              *(_QWORD *)(v73 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v73 + 288) = 0;
              *(_BYTE *)(v73 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v104, v73);
            v74 = v104;
            if (!v104)
            {
              v74 = (unsigned __int8 *)sub_22E3B8AAC(v105);
              v104 = v74;
            }
            v74[*v74 + 1] = 1;
            v75 = v104;
            v76 = *v104;
            *v104 = v76 + 1;
            *(_QWORD *)&v75[8 * v76 + 16] = "type name";
          }
          else
          {
            v69 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v69 + 312) = *v67;
            *(_DWORD *)(v69 + 316) = 1572;
            if (*(char *)(v69 + 311) < 0)
            {
              **(_BYTE **)(v69 + 288) = 0;
              *(_QWORD *)(v69 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v69 + 288) = 0;
              *(_BYTE *)(v69 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v104, v69);
            v70 = v104;
            if (!v104)
            {
              v70 = (unsigned __int8 *)sub_22E3B8AAC(v105);
              v104 = v70;
            }
            v70[*v70 + 1] = 5;
            v71 = v104;
            v72 = *v104;
            *v104 = v72 + 1;
            *(_QWORD *)&v71[8 * v72 + 16] = v68;
          }
          sub_22E3BB0B8((uint64_t)&v104);
        }
      }
      HIDWORD(v104) = v30;
      LODWORD(v105) = 0;
      v106 = 0;
      v107 = 0;
      LODWORD(v104) = 1;
      v108 = (2 * (v25 == 27)) | ((v84[0] & 0x4000000) != 0);
      sub_22E824ABC(a2, (unint64_t)&v104, (uint64_t)&v86, 0);
      sub_22E80F94C(&v107);
      if (DWORD1(v91))
        free(v90[1]);
      sub_22E8D1BC4(v88, (uint64_t)&v88);
      sub_22E80F94C((uint64_t *)&v89);
      goto LABEL_149;
    }
    if ((v84[0] & 0x2000000) != 0)
    {
      v44 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v44 + 312) = v95.val[0].i32[0];
      *(_DWORD *)(v44 + 316) = 1582;
      if (*(char *)(v44 + 311) < 0)
      {
        **(_BYTE **)(v44 + 288) = 0;
        *(_QWORD *)(v44 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v44 + 288) = 0;
        *(_BYTE *)(v44 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v104, v44);
      v45 = v104;
      if (!v104)
      {
        v45 = (unsigned __int8 *)sub_22E3B8AAC(v105);
        v104 = v45;
      }
      v45[*v45 + 1] = 1;
      v46 = v104;
      v47 = *v104;
      *v104 = v47 + 1;
      *(_QWORD *)&v46[8 * v47 + 16] = "const";
      sub_22E3BB0B8((uint64_t)&v104);
      v43 = v84[0];
      if ((v84[0] & 0x8000000) == 0)
      {
LABEL_102:
        if ((v43 & 0x20000000) == 0)
          goto LABEL_103;
        goto LABEL_116;
      }
    }
    else if ((v84[0] & 0x8000000) == 0)
    {
      goto LABEL_102;
    }
    v48 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v48 + 312) = v95.val[1].i32[0];
    *(_DWORD *)(v48 + 316) = 1582;
    if (*(char *)(v48 + 311) < 0)
    {
      **(_BYTE **)(v48 + 288) = 0;
      *(_QWORD *)(v48 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v48 + 288) = 0;
      *(_BYTE *)(v48 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v104, v48);
    v49 = v104;
    if (!v104)
    {
      v49 = (unsigned __int8 *)sub_22E3B8AAC(v105);
      v104 = v49;
    }
    v49[*v49 + 1] = 1;
    v50 = v104;
    v51 = *v104;
    *v104 = v51 + 1;
    *(_QWORD *)&v50[8 * v51 + 16] = "volatile";
    sub_22E3BB0B8((uint64_t)&v104);
    v43 = v84[0];
    if ((v84[0] & 0x20000000) == 0)
    {
LABEL_103:
      if ((v43 & 0x40000000) == 0)
        goto LABEL_104;
      goto LABEL_121;
    }
LABEL_116:
    v52 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v52 + 312) = v95.val[1].i32[1];
    *(_DWORD *)(v52 + 316) = 1582;
    if (*(char *)(v52 + 311) < 0)
    {
      **(_BYTE **)(v52 + 288) = 0;
      *(_QWORD *)(v52 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v52 + 288) = 0;
      *(_BYTE *)(v52 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v104, v52);
    v53 = v104;
    if (!v104)
    {
      v53 = (unsigned __int8 *)sub_22E3B8AAC(v105);
      v104 = v53;
    }
    v53[*v53 + 1] = 1;
    v54 = v104;
    v55 = *v104;
    *v104 = v55 + 1;
    *(_QWORD *)&v54[8 * v55 + 16] = "_Atomic";
    sub_22E3BB0B8((uint64_t)&v104);
    v43 = v84[0];
    if ((v84[0] & 0x40000000) == 0)
    {
LABEL_104:
      if ((v43 & 0x80000000) == 0)
        goto LABEL_131;
LABEL_126:
      v60 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v60 + 312) = HIDWORD(v98);
      *(_DWORD *)(v60 + 316) = 1582;
      if (*(char *)(v60 + 311) < 0)
      {
        **(_BYTE **)(v60 + 288) = 0;
        *(_QWORD *)(v60 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v60 + 288) = 0;
        *(_BYTE *)(v60 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v104, v60);
      v61 = v104;
      if (!v104)
      {
        v61 = (unsigned __int8 *)sub_22E3B8AAC(v105);
        v104 = v61;
      }
      v61[*v61 + 1] = 1;
      v62 = v104;
      v63 = *v104;
      *v104 = v63 + 1;
      *(_QWORD *)&v62[8 * v63 + 16] = "coherent(system)";
      sub_22E3BB0B8((uint64_t)&v104);
      goto LABEL_131;
    }
LABEL_121:
    v56 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v56 + 312) = HIDWORD(v98);
    *(_DWORD *)(v56 + 316) = 1582;
    if (*(char *)(v56 + 311) < 0)
    {
      **(_BYTE **)(v56 + 288) = 0;
      *(_QWORD *)(v56 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v56 + 288) = 0;
      *(_BYTE *)(v56 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v104, v56);
    v57 = v104;
    if (!v104)
    {
      v57 = (unsigned __int8 *)sub_22E3B8AAC(v105);
      v104 = v57;
    }
    v57[*v57 + 1] = 1;
    v58 = v104;
    v59 = *v104;
    *v104 = v59 + 1;
    *(_QWORD *)&v58[8 * v59 + 16] = "coherent(device)";
    sub_22E3BB0B8((uint64_t)&v104);
    if ((v84[0] & 0x80000000) == 0)
      goto LABEL_131;
    goto LABEL_126;
  }
  if (a4 & 1 | a3)
  {
    v39 = (_QWORD *)(a1 + (a4 >> 1));
    if ((a4 & 1) != 0)
      a3 = *(_QWORD *)(*v39 + a3);
    ((void (*)(_QWORD *, uint64_t))a3)(v39, a2);
  }
}

uint64_t sub_22E823490(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  BOOL v44;
  __int128 *v45;
  _OWORD *v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  _BOOL4 v66;
  _BOOL4 v67;
  BOOL v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  unsigned __int8 *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  int v99;
  BOOL v100;
  unsigned int v101;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int *v106;
  uint64_t (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  _BOOL4 v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int *v119;
  char v120;
  int v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t, uint64_t);
  int v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _BOOL4 v131;
  unint64_t v132;
  int v133;
  uint64_t v134;
  int *v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  _DWORD *v140;
  int v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  unsigned __int8 *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  unsigned __int8 *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  uint64_t v175;
  uint64_t v176;
  unsigned __int8 *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  int v185;
  uint64_t v186;
  int *v187;
  _BYTE v188[32];
  _BYTE v189[29];
  _QWORD v190[2];
  __int16 v191;
  _BYTE v192[32];
  _BYTE v193[32];
  unsigned __int8 *v194;
  _BYTE v195[12];
  char v196;
  void *v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201[4];
  __int128 v202;
  uint64_t v203;
  _QWORD v204[3];
  uint64_t v205;
  _BYTE v206[32];
  uint64_t (*v207)(uint64_t);
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;

  v210 = *MEMORY[0x24BDAC8D0];
  v9 = a2 + 8;
  v190[0] = a1;
  v190[1] = a2 + 8;
  v191 = 0;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = **(_QWORD **)(v10 + 56);
  if ((v11 & 0x100) == 0 || (v12 = *(_DWORD *)(a2 + 80), ((1 << v12) & 0x3FB206C) != 0))
  {
    if (*(_WORD *)(a1 + 32) == 5)
    {
      v13 = (unsigned int *)(a1 + 16);
      v14 = *(_DWORD *)(a2 + 80);
      if (((1 << v14) & 0x3FB206C) != 0)
      {
        if ((*(_WORD *)(a2 + 1088) & 2) == 0)
        {
          if ((v14 - 20) < 2)
          {
            if (sub_22E82F8E8((_QWORD *)a1, a1 + 16))
              goto LABEL_89;
            v36 = *(_QWORD *)(a1 + 8);
            v37 = *(_QWORD *)(v36 + 2816);
            v38 = v37 >= *(unsigned int *)(v36 + 2784) ? sub_22F162D2C(v36, 1u) : *(_QWORD *)(v36 + 2776) + 24 * v37;
            v99 = *(unsigned __int16 *)(v38 + 16);
            v100 = (v99 - 62) > 3 || v99 == 64;
            v101 = v99 & 0xFFFFFF7F;
            if (v100 && v101 != 23)
              goto LABEL_89;
          }
          else if ((v14 - 24) >= 2)
          {
            if (v14 != 22)
              goto LABEL_89;
            v39 = *(_QWORD *)(v10 + 2816);
            v40 = v39 >= *(unsigned int *)(v10 + 2784) ? sub_22F162D2C(v10, 1u) : *(_QWORD *)(v10 + 2776) + 24 * v39;
            v98 = *(unsigned __int16 *)(v40 + 16) - 51;
            if (v98 > 0xE || ((1 << v98) & 0x4003) == 0)
              goto LABEL_89;
          }
          else
          {
            v15 = *(_QWORD *)(v10 + 2816);
            if (v15 >= *(unsigned int *)(v10 + 2784))
              v16 = sub_22F162D2C(v10, 1u);
            else
              v16 = *(_QWORD *)(v10 + 2776) + 24 * v15;
            v88 = *(unsigned __int16 *)(v16 + 16);
            if (v88 != 62 && v88 != 65)
              goto LABEL_89;
          }
        }
        v103 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v103 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v103 + 316) = 1772;
        if (*(char *)(v103 + 311) < 0)
        {
          **(_BYTE **)(v103 + 288) = 0;
          *(_QWORD *)(v103 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v103 + 288) = 0;
          *(_BYTE *)(v103 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v202, v103);
        v104 = *v13;
        *(_QWORD *)&v206[12] = 0;
        v206[20] = 0;
        v207 = 0;
        v208 = 0;
        *(_QWORD *)&v206[24] = 0;
        LOBYTE(v209) = 0;
        *(_QWORD *)v206 = v104 | (v104 << 32);
        v206[8] = 1;
        sub_22E6D82D0((uint64_t *)&v202, v206);
        if (SHIBYTE(v208) < 0)
          operator delete(*(void **)&v206[24]);
        sub_22E3BB0B8((uint64_t)&v202);
        v105 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a2 + 40) = 0;
        *(_QWORD *)(a2 + 48) = 0;
        *(_DWORD *)(a2 + 64) = v105;
        *(_DWORD *)(a2 + 68) = v105;
        v23 = *(_DWORD *)(a1 + 16);
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 24);
        v22 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a2 + 40) = 0;
        *(_QWORD *)(a2 + 48) = v21;
        *(_DWORD *)(a2 + 64) = v22;
        *(_DWORD *)(a2 + 68) = v22;
        v23 = *(_DWORD *)(a1 + 16);
        if (v23)
        {
          *(_DWORD *)(a2 + 76) = v23;
          v23 = *v13;
        }
      }
      *(_DWORD *)(a1 + 40) = v23;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      goto LABEL_207;
    }
LABEL_89:
    v45 = (__int128 *)(a1 + 16);
    v46 = (_OWORD *)*(unsigned __int16 *)(a1 + 32);
    v47 = *(unsigned int *)(a2 + 80);
    if ((_DWORD)v46 == 21)
    {
      if (((1 << v47) & 0x7FFF06E) == 0 || (sub_22E824C54(a2) & 1) == 0)
      {
LABEL_98:
        sub_22E824CA8(a1, a2);
        if (*(_QWORD *)(a2 + 16))
        {
          if ((*(_WORD *)(a2 + 1088) & 1) == 0
            && (**(_QWORD **)a2 & 0x3F000) != 0x32000
            && sub_22E95AB18(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v9))
          {
            HIBYTE(v191) = 1;
            sub_22E885C30(a1, 0);
            if ((sub_22E95AB9C(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v9) & 1) == 0)
              LOBYTE(v191) = 1;
          }
        }
        goto LABEL_207;
      }
      v48 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)v206 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)&v206[16] = v48;
      v202 = *v45;
      v203 = *(_QWORD *)(a1 + 32);
      v2 = *(unsigned int *)(a1 + 2344);
      v4 = *(_WORD *)(a1 + 80);
      v5 = *(_WORD *)(a1 + 82);
      v6 = *(_WORD *)(a1 + 84);
      sub_22F1629F8(*(_QWORD *)(a1 + 8));
      v3 = sub_22E882CE0(a1, 1, (0x404DF93u >> *(_DWORD *)(a2 + 80)) & 1, 1);
      if (v3 == 1)
      {
        v49 = *(_DWORD *)v45;
        *(_DWORD *)(a2 + 40) = 0;
        *(_QWORD *)(a2 + 48) = 0;
        *(_DWORD *)(a2 + 64) = v49;
        *(_DWORD *)(a2 + 68) = v49;
      }
      v46 = (_OWORD *)(a1 + 48);
      v50 = *(_QWORD *)(a1 + 8);
      v51 = *(_QWORD *)(v50 + 2832);
      *(_QWORD *)(v50 + 2816) = *(_QWORD *)(v51 - 8);
      *(_QWORD *)(v50 + 2832) = v51 - 8;
      v47 = *(_QWORD *)(v50 + 1008);
      if (!v47)
      {
        if (*(_QWORD *)(v50 + 1040))
          v52 = 1;
        else
          v52 = 2;
        goto LABEL_97;
      }
LABEL_347:
      if (*(_QWORD *)(v47 + 224))
        v52 = 3;
      else
        v52 = 0;
LABEL_97:
      *(_DWORD *)(v50 + 1048) = v52;
      v53 = *(_OWORD *)&v206[16];
      *v46 = *(_OWORD *)v206;
      v46[1] = v53;
      *v45 = v202;
      *(_QWORD *)(a1 + 32) = v203;
      sub_22E80FADC(a1 + 2336, v2);
      *(_WORD *)(a1 + 80) = v4;
      *(_WORD *)(a1 + 82) = v5;
      *(_WORD *)(a1 + 84) = v6;
      if (v3 != 1)
        goto LABEL_98;
LABEL_207:
      if ((*(_DWORD *)(a2 + 40) || *(_QWORD *)(a2 + 48) || *(_DWORD *)(a2 + 88)) && !*(_DWORD *)(a2 + 120))
        sub_22E8254B0((uint64_t *)a1, a2);
      v106 = (int *)(a1 + 16);
      v107 = sub_22F2E1334;
      v108 = a1 + 960;
      v109 = (uint64_t *)&v202 + 1;
      v110 = &v203;
      v111 = v204;
      v112 = a1 + 944;
      while (1)
      {
        while (1)
        {
LABEL_213:
          while (1)
          {
            v113 = *(unsigned __int16 *)(a1 + 32);
            if (v113 != 19)
              break;
            sub_22E826254(a1, a2);
          }
          if (v113 != 168)
            break;
          if ((*(_WORD *)(a2 + 1088) & 2) == 0)
            return sub_22E828C78((uint64_t)v190);
          sub_22E884578(a1, v106, 1729, (uint64_t)v188);
          sub_22E3BB0B8((uint64_t)v188);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v106);
          v116 = *(_QWORD *)(a1 + 88);
          v117 = sub_22F2E536C(a1, 1);
          if ((v117 & 1) == 0)
            v117 = (unint64_t)sub_22EBBCB14(v116, (_DWORD *)(v117 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)v107, (uint64_t)v206);
          if (v117 >= 2)
          {
            v118 = *(unsigned int *)(a2 + 120);
            if ((_DWORD)v118)
            {
              v119 = *(int **)(a2 + 112);
              while (1)
              {
                v121 = *v119;
                v119 += 30;
                v120 = v121;
                if (v121 != 6)
                  break;
                if (!--v118)
                  goto LABEL_213;
              }
              if (((1 << v120) & 0xB7) == 0 && !*(_QWORD *)(a2 + 1136))
              {
                v132 = v117 & 0xFFFFFFFFFFFFFFFELL;
                *(_QWORD *)(a2 + 1136) = v132;
                sub_22F0D60E4(v132);
                if (v133)
                  *(_DWORD *)(a2 + 76) = v133;
              }
            }
          }
        }
        if (v113 != 21)
          return sub_22E828C78((uint64_t)v190);
        if ((**(_QWORD **)a2 & 7) == 1)
          break;
        v115 = 264;
        v114 = 0;
        if (((1 << *(_DWORD *)(a2 + 80)) & 0x7FFF87E) == 0)
        {
          v134 = *(unsigned int *)(a2 + 120);
          if ((_DWORD)v134)
          {
            v135 = *(int **)(a2 + 112);
            while (1)
            {
              v136 = *v135;
              v135 += 30;
              v114 = v136 == 6;
              if (v136 != 6)
                goto LABEL_218;
              v115 = 776;
              if (!--v134)
                goto LABEL_230;
            }
          }
          v115 = 776;
          v114 = 1;
        }
LABEL_230:
        sub_22E885C30(a1, v115);
        LOBYTE(v194) = 0;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0 && sub_22E824C54(a2))
        {
          v186 = v112;
          v187 = v106;
          v122 = v111;
          v123 = v110;
          v124 = v109;
          v125 = v108;
          v126 = v107;
          v127 = *(_DWORD *)(a2 + 40);
          v128 = *(_QWORD *)(a2 + 48);
          v129 = *(unsigned int *)(a1 + 2344);
          if (v129 >= *(unsigned int *)(a1 + 2348))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v129 = *(unsigned int *)(a1 + 2344);
          }
          v130 = v127 ? 0 : v128;
          *(_QWORD *)(*(_QWORD *)(a1 + 2336) + 8 * v129) = v130;
          ++*(_DWORD *)(a1 + 2344);
          v131 = sub_22E883CE0(a1, &v194);
          --*(_DWORD *)(a1 + 2344);
          v107 = v126;
          v108 = v125;
          v109 = v124;
          v110 = v123;
          v111 = v122;
          v112 = v186;
          v106 = v187;
          if (!v131)
          {
            sub_22E885CF4(a1);
            return sub_22E828C78((uint64_t)v190);
          }
        }
        v202 = 0uLL;
        v203 = v108;
        v204[0] = 0;
        *(_QWORD *)v206 = v112;
        v206[8] = *(_BYTE *)(a1 + 944);
        *(_BYTE *)(a1 + 944) = 1;
        *(_QWORD *)&v206[16] = a1;
        *(_DWORD *)&v206[24] = 1441813;
        strcpy(&v206[28], ">");
        v208 = 0;
        v209 = 0;
        v207 = sub_22E80F720;
        sub_22E811DE8((uint64_t)v206);
        if (v114)
        {
          sub_22EADF194(*(_QWORD **)(a1 + 88), a2, *(_DWORD *)(a1 + 952));
          sub_22E825568(a1, a2, (uint64_t)&v202, (uint64_t)v206, v194, 0);
          sub_22EADF2C0(*(_QWORD *)(a1 + 88), (_QWORD *)a2);
        }
        else
        {
          sub_22E825568(a1, a2, (uint64_t)&v202, (uint64_t)v206, v194, 0);
        }
        sub_22E885CF4(a1);
        **(_BYTE **)v206 = v206[8];
        sub_22E8D1BC4(v203, (uint64_t)v110);
        sub_22E80F94C(v111);
        sub_22E80F94C(v109);
      }
      v114 = 0;
LABEL_218:
      v115 = 264;
      goto LABEL_230;
    }
    v50 = (1 << v47);
    if ((v50 & 0x7FFF06E) != 0)
    {
      v54 = *(_DWORD *)v45;
      *(_DWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 64) = v54;
      *(_DWORD *)(a2 + 68) = v54;
      v55 = *(unsigned int *)(a2 + 1684);
      if ((_DWORD)v55 && (*(_WORD *)(a2 + 1088) & 2) != 0)
      {
        v56 = sub_22F141A3C(v55, 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
        v57 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v57 + 312) = v56;
        *(_DWORD *)(v57 + 316) = 1783;
        if (*(char *)(v57 + 311) < 0)
        {
          **(_BYTE **)(v57 + 288) = 0;
          *(_QWORD *)(v57 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v57 + 288) = 0;
          *(_BYTE *)(v57 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v189, v57);
        sub_22E3BB0B8((uint64_t)v189);
      }
      goto LABEL_207;
    }
    if ((_DWORD)v46 != 19)
    {
      if ((_DWORD)v46 != 411)
      {
        v58 = *(_QWORD *)(a1 + 8);
        v59 = *(_DWORD **)(v58 + 56);
        if ((_DWORD)v47 == 7)
        {
          if (((_DWORD)v46 - 7) >= 6
            && (*(_QWORD *)v59 & 0x4100) == 0x4100
            && ((_DWORD)v46 - 13) >= 6
            && (_DWORD)v46 != 1
            && *(_QWORD *)(a1 + 24))
          {
            v140 = ((_DWORD)v46 - 13) >= 6 ? *(_DWORD **)(a1 + 24) : 0;
            if (sub_22F41F21C(v140, (uint64_t)v59))
            {
              v141 = *(_DWORD *)(a1 + 16);
              v142 = *(_DWORD *)(a2 + 68);
              if (!v142)
                v142 = *(_DWORD *)(a1 + 16);
              if (!*(_DWORD *)(a2 + 64))
                v141 = v142;
              v143 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v143 + 312) = v141;
              *(_DWORD *)(v143 + 316) = 1513;
              if (*(char *)(v143 + 311) < 0)
              {
                **(_BYTE **)(v143 + 288) = 0;
                *(_QWORD *)(v143 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v143 + 288) = 0;
                *(_BYTE *)(v143 + 311) = 0;
              }
              sub_22E78E558((uint64_t)v206, v143);
              v144 = *(unsigned __int16 *)(a1 + 32);
              if ((v144 - 7) >= 6)
              {
                v145 = 0;
                if ((v144 - 13) >= 6 && v144 != 1)
                  v145 = *(_QWORD *)(a1 + 24);
              }
              else
              {
                v145 = 0;
              }
              v177 = *(unsigned __int8 **)v206;
              if (!*(_QWORD *)v206)
              {
                v177 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v206[8]);
                *(_QWORD *)v206 = v177;
              }
              v177[*v177 + 1] = 5;
              v178 = *(_QWORD *)v206;
              v179 = **(_BYTE **)v206;
              **(_BYTE **)v206 = v179 + 1;
              *(_QWORD *)(v178 + 8 * v179 + 16) = v145;
              v180 = *(uint64_t **)a2;
              if (sub_22E8AD5F4(*(uint64_t **)a2))
                v181 = v180[11];
              else
                v181 = 0;
              sub_22E4D6448(v178 + 336, v181, 1);
              sub_22E3BB0B8((uint64_t)v206);
              v182 = *(unsigned __int16 *)(a1 + 32);
              if ((v182 - 7) >= 6)
              {
                v183 = 0;
                if ((v182 - 13) >= 6 && v182 != 1)
                  v183 = *(_QWORD *)(a1 + 24);
              }
              else
              {
                v183 = 0;
              }
              v184 = *(_DWORD *)v45;
              *(_DWORD *)(a2 + 40) = 0;
              *(_QWORD *)(a2 + 48) = v183;
              *(_DWORD *)(a2 + 64) = v184;
              *(_DWORD *)(a2 + 68) = v184;
              v185 = *(_DWORD *)v45;
              if (*(_DWORD *)v45)
              {
                *(_DWORD *)(a2 + 76) = v185;
                v185 = *(_DWORD *)v45;
              }
              *(_DWORD *)(a1 + 40) = v185;
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
              goto LABEL_207;
            }
          }
          v60 = *(_DWORD *)(a1 + 16);
          v61 = *(_DWORD *)(a2 + 68);
          if (!v61)
            v61 = *(_DWORD *)(a1 + 16);
          if (!*(_DWORD *)(a2 + 64))
            v60 = v61;
          v62 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v62 + 312) = v60;
          *(_DWORD *)(v62 + 316) = 1512;
          if (*(char *)(v62 + 311) < 0)
          {
            **(_BYTE **)(v62 + 288) = 0;
            *(_QWORD *)(v62 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v62 + 288) = 0;
            *(_BYTE *)(v62 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v206, v62);
          v63 = *(uint64_t **)a2;
          if (sub_22E8AD5F4(*(uint64_t **)a2))
            v64 = v63[11];
          else
            v64 = 0;
          v96 = *(_QWORD *)v206;
          if (!*(_QWORD *)v206)
          {
            v96 = sub_22E3B8AAC(*(uint64_t *)&v206[8]);
            *(_QWORD *)v206 = v96;
          }
          sub_22E4D6448(v96 + 336, v64, 1);
        }
        else if ((*(_QWORD *)v59 & 0x100) != 0)
        {
          if ((_DWORD)v46 == 36 || (_DWORD)v46 == 25)
          {
            sub_22E884578(a1, (int *)(a1 + 16), 1581, (uint64_t)v206);
            v89 = *(unsigned __int16 *)(a1 + 32);
            v90 = *(unsigned __int8 **)v206;
            if (!*(_QWORD *)v206)
            {
              v90 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v206[8]);
              *(_QWORD *)v206 = v90;
            }
            v90[*v90 + 1] = 2;
            v91 = *(_QWORD *)v206;
            v92 = **(_BYTE **)v206;
            **(_BYTE **)v206 = v92 + 1;
            *(_QWORD *)(v91 + 8 * v92 + 16) = v89 == 36;
          }
          else
          {
            if ((*(_WORD *)(a1 + 34) & 1) != 0 && (v137 = *(unsigned int *)(a2 + 12), (_DWORD)v137))
            {
              v138 = sub_22F141A3C(v137, 0, *(_QWORD **)(v58 + 88), v59);
              v139 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v139 + 312) = v138;
            }
            else
            {
              v153 = *(_DWORD *)(a1 + 16);
              v154 = *(_DWORD *)(a2 + 68);
              if (!v154)
                v154 = *(_DWORD *)(a1 + 16);
              if (!*(_DWORD *)(a2 + 64))
                v153 = v154;
              v139 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v139 + 312) = v153;
            }
            *(_DWORD *)(v139 + 316) = 1544;
            if (*(char *)(v139 + 311) < 0)
            {
              **(_BYTE **)(v139 + 288) = 0;
              *(_QWORD *)(v139 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v139 + 288) = 0;
              *(_BYTE *)(v139 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v206, v139);
            v155 = (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) >> 8) & 1;
            v156 = *(unsigned __int8 **)v206;
            if (!*(_QWORD *)v206)
            {
              v156 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v206[8]);
              *(_QWORD *)v206 = v156;
            }
            v156[*v156 + 1] = 3;
            v157 = *(_QWORD *)v206;
            v158 = **(_BYTE **)v206;
            **(_BYTE **)v206 = v158 + 1;
            *(_QWORD *)(v157 + 8 * v158 + 16) = v155;
          }
        }
        else
        {
          v80 = *(_DWORD *)(a1 + 16);
          v81 = *(_DWORD *)(a2 + 68);
          if (!v81)
            v81 = *(_DWORD *)(a1 + 16);
          if (!*(_DWORD *)(a2 + 64))
            v80 = v81;
          v82 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v82 + 312) = v80;
          *(_DWORD *)(v82 + 316) = 18;
          if (*(char *)(v82 + 311) < 0)
          {
            **(_BYTE **)(v82 + 288) = 0;
            *(_QWORD *)(v82 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v82 + 288) = 0;
            *(_BYTE *)(v82 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v206, v82);
          v83 = *(unsigned __int8 **)v206;
          if (!*(_QWORD *)v206)
          {
            v83 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v206[8]);
            *(_QWORD *)v206 = v83;
          }
          v83[*v83 + 1] = 4;
          v84 = *(_QWORD *)v206;
          v85 = **(_BYTE **)v206;
          **(_BYTE **)v206 = v85 + 1;
          *(_QWORD *)(v84 + 8 * v85 + 16) = 5;
          *(_BYTE *)(v84 + (v85 + 1) + 1) = 4;
          v86 = *(_QWORD *)v206;
          v87 = **(_BYTE **)v206;
          **(_BYTE **)v206 = v87 + 1;
          *(_QWORD *)(v86 + 8 * v87 + 16) = 21;
        }
        sub_22E3BB0B8((uint64_t)v206);
        v97 = *(_DWORD *)v45;
        *(_DWORD *)(a2 + 40) = 0;
        *(_QWORD *)(a2 + 48) = 0;
        *(_DWORD *)(a2 + 64) = v97;
        *(_DWORD *)(a2 + 68) = v97;
        *(_WORD *)(a2 + 1088) |= 1u;
        goto LABEL_207;
      }
      __break(1u);
      goto LABEL_347;
    }
LABEL_315:
    sub_22E824FCC(a1, a2);
    return sub_22E828C78((uint64_t)v190);
  }
  v17 = (int *)(a1 + 16);
  if (*(_WORD *)(a1 + 32) != 19)
    goto LABEL_22;
  if (((1 << v12) & 0x7FFF06E) != 0)
    goto LABEL_25;
  v18 = !*(_DWORD *)(a2 + 12) || *(_DWORD *)(a2 + 8) == 0;
  if (!v18 || *(_QWORD *)(a2 + 16))
  {
LABEL_22:
    if (v12 == 7)
    {
      LOBYTE(v24) = 1;
LABEL_27:
      v4 = *(unsigned __int8 *)(a1 + 945);
      *(_BYTE *)(a1 + 945) = v24;
      if (*(_DWORD *)(a2 + 12))
        v25 = *(_DWORD *)(a2 + 8) == 0;
      else
        v25 = 1;
      v26 = *(_QWORD *)(a2 + 16);
      if (v25 && !v26)
      {
        if (v12)
          v27 = v12 == 7;
        else
          v27 = 1;
        v28 = v27;
        sub_22E8408AC(a1, a2 + 8, 0, 0, v28, 0, 0, 0, 0, 0);
        v26 = *(_QWORD *)(a2 + 16);
      }
      if (v26)
      {
        if (sub_22E95AB18(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v9))
        {
          HIBYTE(v191) = 1;
          sub_22E885C30(a1, 0);
          if ((sub_22E95AB9C(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v9) & 1) == 0)
            LOBYTE(v191) = 1;
        }
        else
        {
          v29 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 216);
          if (v29 && (*(_WORD *)(v29 + 8) & 0x7Fu) - 19 <= 4)
          {
            v30 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a2 + 40) = 0;
            *(_QWORD *)(a2 + 48) = 0;
            *(_DWORD *)(a2 + 64) = v30;
            *(_DWORD *)(a2 + 68) = v30;
            *(_WORD *)(a2 + 1088) |= 1u;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
            goto LABEL_158;
          }
        }
      }
      v2 = *(unsigned __int16 *)(a1 + 32);
      if ((_DWORD)v2 == 26)
      {
        if (*(_DWORD *)(a2 + 12))
          v31 = *(_DWORD *)(a2 + 8) == 0;
        else
          v31 = 1;
        if (!v31 || *(_QWORD *)(a2 + 16))
          goto LABEL_82;
        v32 = *(_DWORD *)(a2 + 80);
        if (v32 > 0x12
          || ((1 << v32) & 0x50002) == 0
          || ((v33 = *(_QWORD *)(a1 + 8), v34 = *(_QWORD *)(v33 + 2816), v34 >= *(unsigned int *)(v33 + 2784))
            ? (v35 = sub_22F162D2C(v33, 1u))
            : (v35 = *(_QWORD *)(v33 + 2776) + 24 * v34),
              *(_WORD *)(v35 + 16) != 22
           || (*(_WORD *)(a2 + 1088) & 2) != 0
           || sub_22EE740E0(*(_QWORD *)(a1 + 88), a2)
           || (**(_QWORD **)a2 & 0x3F000) == 0x21000))
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v3 = *(_DWORD *)(a1 + 40);
          v2 = *(unsigned __int16 *)(a1 + 32);
          if (sub_22E824BDC(*(unsigned __int16 *)(a1 + 32), *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56), *(_DWORD *)(a2 + 80)))
          {
            sub_22E8227E4(a1, a2, (unint64_t)sub_22E823490, 0);
            if (v3)
              sub_22E88096C(a1, v3, a2);
            *(_BYTE *)(a1 + 945) = v4;
            return sub_22E828C78((uint64_t)v190);
          }
          *(_DWORD *)(a2 + 1684) = v3;
        }
        else
        {
          v2 = *(unsigned __int16 *)(a1 + 32);
        }
      }
      if ((int)v2 > 140)
      {
        if ((_DWORD)v2 != 401 && (_DWORD)v2 != 141)
        {
LABEL_82:
          if (*(_DWORD *)(a2 + 12))
            v44 = *(_DWORD *)(a2 + 8) == 0;
          else
            v44 = 1;
          if (v44 && !*(_QWORD *)(a2 + 16))
          {
            *(_BYTE *)(a1 + 945) = v4;
            goto LABEL_89;
          }
          v72 = sub_22F141A3C(*(unsigned int *)(a2 + 12), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
          v73 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v73 + 312) = v72;
          *(_DWORD *)(v73 + 316) = 1544;
          if (*(char *)(v73 + 311) < 0)
          {
            **(_BYTE **)(v73 + 288) = 0;
            *(_QWORD *)(v73 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v73 + 288) = 0;
            *(_BYTE *)(v73 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v206, v73);
          v74 = *(unsigned __int8 **)v206;
          if (!*(_QWORD *)v206)
          {
            v74 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v206[8]);
            *(_QWORD *)v206 = v74;
          }
          v74[*v74 + 1] = 2;
          v75 = *(_QWORD *)v206;
          v76 = **(_BYTE **)v206;
          **(_BYTE **)v206 = v76 + 1;
          *(_QWORD *)(v75 + 8 * v76 + 16) = 1;
          sub_22E3BB0B8((uint64_t)v206);
          v77 = *v17;
          *(_DWORD *)(a2 + 40) = 0;
          *(_QWORD *)(a2 + 48) = 0;
          *(_DWORD *)(a2 + 64) = v77;
          *(_DWORD *)(a2 + 68) = v77;
LABEL_158:
          *(_BYTE *)(a1 + 945) = v4;
          goto LABEL_207;
        }
      }
      else if ((_DWORD)v2 != 5 && (_DWORD)v2 != 39)
      {
        goto LABEL_82;
      }
      v41 = *(_QWORD *)(a2 + 16);
      if ((**(_DWORD **)a2 & 0x3FFC0) != 0)
      {
        v42 = 0;
        v43 = 0;
      }
      else
      {
        v65 = *(_DWORD *)(a2 + 80);
        v66 = v65 == 0;
        v67 = v65 == 7;
        if (v65 == 7)
          v66 = 1;
        if (v65)
          v68 = v65 == 7;
        else
          v68 = 1;
        v69 = v68;
        if (v41)
          v42 = 0;
        else
          v42 = v66;
        if (v41)
          v43 = v69;
        else
          v43 = v67;
      }
      if ((sub_22E842CDC(a1, v9, 0, 0, 1, 1, v43, v42, 0, a2 + 40) & 1) != 0
        || (v70 = *(_QWORD *)(a2 + 16), *(_DWORD *)(a2 + 8)) && *(_DWORD *)(a2 + 12) && !v70)
      {
        v71 = *v17;
        *(_DWORD *)(a2 + 40) = 0;
        *(_QWORD *)(a2 + 48) = 0;
        *(_DWORD *)(a2 + 64) = v71;
        *(_DWORD *)(a2 + 68) = v71;
        *(_WORD *)(a2 + 1088) |= 1u;
      }
      else
      {
        if (!v41)
        {
          if (v70)
          {
            if (sub_22E95AB18(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v9))
            {
              HIBYTE(v191) = 1;
              sub_22E885C30(a1, 0);
              if ((sub_22E95AB9C(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v9) & 1) == 0)
                LOBYTE(v191) = 1;
            }
          }
        }
        if (!*(_DWORD *)(a2 + 72))
        {
          v78 = *(_DWORD *)(a2 + 64);
          if (v78)
            *(_DWORD *)(a2 + 72) = v78;
        }
        v79 = *(_DWORD *)(a2 + 68);
        if (v79)
          *(_DWORD *)(a2 + 76) = v79;
      }
      goto LABEL_158;
    }
    if (v12 == 9)
    {
      v24 = (v11 >> 9) & 1;
      goto LABEL_27;
    }
LABEL_25:
    LOBYTE(v24) = 0;
    goto LABEL_27;
  }
  v19 = *(_QWORD *)(v10 + 2816);
  if (v19 >= *(unsigned int *)(v10 + 2784))
    v20 = sub_22F162D2C(v10, 1u);
  else
    v20 = *(_QWORD *)(v10 + 2776) + 24 * v19;
  if (*(_WORD *)(v20 + 16) != 5)
    goto LABEL_293;
  v93 = a1 + 16;
  if (*(_WORD *)(a1 + 32) != 1)
  {
    v94 = *(_QWORD *)(a1 + 8);
    v95 = *(_QWORD *)(v94 + 2816) + 1;
    if (v95 >= *(unsigned int *)(v94 + 2784))
      v93 = sub_22F162D2C(v94, 2u);
    else
      v93 = *(_QWORD *)(v94 + 2776) + 24 * v95;
  }
  v146 = *(unsigned __int16 *)(v93 + 16);
  if (v146 != 20 && v146 != 65)
  {
LABEL_293:
    v147 = *(_QWORD *)(a1 + 8);
    v148 = *(_QWORD *)(v147 + 2816);
    v149 = v148 >= *(unsigned int *)(v147 + 2784) ? sub_22F162D2C(v147, 1u) : *(_QWORD *)(v147 + 2776) + 24 * v148;
    if (*(_WORD *)(v149 + 16) != 20)
      goto LABEL_315;
    v150 = a1 + 16;
    if (*(_WORD *)(a1 + 32) != 1)
    {
      v151 = *(_QWORD *)(a1 + 8);
      v152 = *(_QWORD *)(v151 + 2816) + 1;
      if (v152 >= *(unsigned int *)(v151 + 2784))
        v150 = sub_22F162D2C(v151, 2u);
      else
        v150 = *(_QWORD *)(v151 + 2776) + 24 * v152;
    }
    v159 = *(unsigned __int16 *)(v150 + 16);
    if (v159 != 23 && v159 != 63)
      goto LABEL_315;
  }
  *(_QWORD *)&v202 = a1 + 944;
  BYTE8(v202) = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v203 = a1;
  LODWORD(v204[0]) = 1310739;
  WORD2(v204[0]) = 62;
  v204[2] = 0;
  v205 = 0;
  v204[1] = sub_22E80F788;
  sub_22E811DE8((uint64_t)&v202);
  *(_QWORD *)v206 = &v206[16];
  *(_QWORD *)&v206[8] = 0x2000000000;
  v160 = *(unsigned __int16 *)(a1 + 32);
  if (v160 == 20)
    goto LABEL_322;
  while (1)
  {
    if (*(_DWORD *)&v206[8])
    {
      if (v160 != 65)
      {
        if (v160 == 5)
        {
          v161 = sub_22F141A3C(*(unsigned int *)(a1 + 40), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
          v162 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v162 + 312) = v161;
          *(_DWORD *)(v162 + 316) = 15;
          if (*(char *)(v162 + 311) < 0)
          {
            **(_BYTE **)(v162 + 288) = 0;
            *(_QWORD *)(v162 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v162 + 288) = 0;
            *(_BYTE *)(v162 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v201, v162);
          v163 = (unsigned __int8 *)v201[0];
          if (!v201[0])
          {
            v163 = (unsigned __int8 *)sub_22E3B8AAC(v201[1]);
            v201[0] = (uint64_t)v163;
          }
          v163[*v163 + 1] = 4;
          v164 = v201[0];
          v165 = *(unsigned __int8 *)v201[0];
          *(_BYTE *)v201[0] = v165 + 1;
          *(_QWORD *)(v164 + 8 * v165 + 16) = 65;
          v196 = 0;
          *(_QWORD *)&v195[4] = 0;
          v198 = 0;
          v199 = 0x100000000000000;
          v197 = (void *)44;
          v194 = (unsigned __int8 *)(v161 | ((unint64_t)v161 << 32));
          v195[0] = 0;
          v200 = 0;
          sub_22E6D82D0(v201, &v194);
          if (SHIBYTE(v199) < 0)
            operator delete(v197);
          v166 = v201;
        }
        else
        {
          sub_22E884578(a1, (int *)(a1 + 16), 1495, (uint64_t)v193);
          v166 = (uint64_t *)v193;
        }
        sub_22E3BB0B8((uint64_t)v166);
        LODWORD(v194) = 4259860;
        WORD2(v194) = 5;
        sub_22E885940(a1, (unsigned __int16 *)&v194, 3, 3);
        v167 = *(unsigned __int16 *)(a1 + 32);
        if (v167 == 5)
          goto LABEL_310;
        if (v167 != 65)
          goto LABEL_320;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v160 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v160 != 5)
      break;
LABEL_310:
    v168 = *(_QWORD *)(a1 + 24);
    v169 = *(unsigned int *)(a1 + 16);
    v170 = *(unsigned int *)&v206[8];
    if (*(unsigned int *)&v206[8] >= (unint64_t)*(unsigned int *)&v206[12])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v170 = *(unsigned int *)&v206[8];
    }
    v171 = (_QWORD *)(*(_QWORD *)v206 + 16 * v170);
    *v171 = v168;
    v171[1] = v169;
    ++*(_DWORD *)&v206[8];
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v160 = *(unsigned __int16 *)(a1 + 32);
    if (v160 == 20)
      goto LABEL_321;
  }
  sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v194);
  v173 = v194;
  if (!v194)
  {
    v173 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v195);
    v194 = v173;
  }
  v173[*v173 + 1] = 4;
  v174 = v194;
  v175 = *v194;
  *v194 = v175 + 1;
  *(_QWORD *)&v174[8 * v175 + 16] = 5;
  sub_22E3BB0B8((uint64_t)&v194);
  v167 = *(unsigned __int16 *)(a1 + 32);
LABEL_320:
  if (v167 != 20)
  {
    sub_22F2F18E0((uint64_t)&v202);
    goto LABEL_326;
  }
LABEL_321:
  if (*(_DWORD *)&v206[8])
    goto LABEL_325;
LABEL_322:
  v176 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v176 + 312) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v176 + 316) = 1806;
  if (*(char *)(v176 + 311) < 0)
  {
    **(_BYTE **)(v176 + 288) = 0;
    *(_QWORD *)(v176 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v176 + 288) = 0;
    *(_BYTE *)(v176 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v192, v176);
  sub_22E3BB0B8((uint64_t)v192);
LABEL_325:
  sub_22E811E8C((uint64_t)&v202);
LABEL_326:
  sub_22E8AD3D4(a2, v205, *(__int128 **)v206, *(unsigned int *)&v206[8], SHIDWORD(v205));
  if (*(_BYTE **)v206 != &v206[16])
    free(*(void **)v206);
  *(_BYTE *)v202 = BYTE8(v202);
  return sub_22E828C78((uint64_t)v190);
}

char *sub_22E824ABC(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *result;
  uint64_t v25;
  unint64_t v26;

  v7 = sub_22E828CF0(a1 + 112, a2, 1);
  v8 = *(_QWORD *)(a1 + 112) + 120 * *(unsigned int *)(a1 + 120);
  v9 = *(_QWORD *)v7;
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(v7 + 8);
  *(_QWORD *)v8 = v9;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v7 + 16);
  sub_22E828D58((uint64_t *)(v8 + 24), (uint64_t *)(v7 + 24));
  v10 = *(_OWORD *)(v7 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v7 + 32);
  *(_OWORD *)(v8 + 48) = v10;
  v11 = *(_OWORD *)(v7 + 64);
  v12 = *(_OWORD *)(v7 + 80);
  v13 = *(_OWORD *)(v7 + 96);
  *(_QWORD *)(v8 + 112) = *(_QWORD *)(v7 + 112);
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 64) = v11;
  v14 = *(_DWORD *)(a1 + 120) + 1;
  *(_DWORD *)(a1 + 120) = v14;
  v15 = *(_QWORD *)(a1 + 112) + 120 * v14;
  v16 = (uint64_t *)(a3 + 8);
  v17 = *(_QWORD *)(a3 + 8);
  if ((v17 & 4) != 0)
  {
    v19 = v17 & 0xFFFFFFFFFFFFFFF8;
    v16 = *(uint64_t **)v19;
    v18 = (uint64_t *)(*(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8));
  }
  else
  {
    v18 = &v16[v17 > 7];
  }
  v22 = *(_QWORD *)(v15 - 96);
  v20 = (unint64_t *)(v15 - 96);
  v21 = v22;
  v23 = (uint64_t)v20;
  if ((v22 & 4) != 0)
    v23 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  sub_22E828878(v20, v23, v16, v18);
  result = sub_22E8D1C2C(a1 + 1112, a3 + 16);
  v25 = *(_QWORD *)(a3 + 24);
  if ((v25 & 4) != 0)
  {
    v26 = v25 & 0xFFFFFFFFFFFFFFF8;
    if (v26)
      *(_DWORD *)(v26 + 8) = 0;
  }
  else
  {
    *(_QWORD *)(a3 + 24) = 0;
  }
  if (a4)
    *(_DWORD *)(a1 + 76) = a4;
  return result;
}

uint64_t sub_22E824BDC(int a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v7;
  int v8;
  unsigned int v9;

  v3 = 1;
  if (a1 != 30 && a1 != 55)
  {
    if (a1 != 347
      || (*((_DWORD *)a2 + 13) & 0x40000000) == 0
      || (v4 = a2[7], v3 = 1, (v4 & 0x100000000) == 0) && v4 <= 0xC7)
    {
      v5 = *a2;
      v7 = a3 != 19 && a3 != 13;
      v8 = (v5 & 0x200) != 0 || v7;
      if (a1 != 28)
        v8 = 0;
      if (a1 == 27)
        v9 = 1;
      else
        v9 = v8;
      if ((v5 & 0x100) != 0)
        return v9;
      else
        return 0;
    }
  }
  return v3;
}

uint64_t sub_22E824C54(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 1088) & 2) != 0
    || (**(_DWORD **)a1 & 7) == 1
    || (**(_DWORD **)a1 & 7) == 2 && *(_DWORD *)(a1 + 80)
    || *(_DWORD *)(a1 + 40))
  {
    return 0;
  }
  else
  {
    return (0x200F01u >> *(_DWORD *)(a1 + 80)) & 1;
  }
}

uint64_t *sub_22E824CA8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  __int16 v12;
  uint64_t *result;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[13];

  v32[12] = *MEMORY[0x24BDAC8D0];
  v21 = (_BYTE *)(a1 + 944);
  v22 = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  v23 = a1;
  v24 = 1441813;
  v25 = 62;
  v27 = 0;
  v28 = 0;
  v26 = sub_22E80F720;
  sub_22E811DE8((uint64_t)&v21);
  v17 = 0;
  v18 = 0;
  v19 = a1 + 960;
  v20 = 0;
  v4 = *(unsigned __int16 *)(a1 + 32);
  if (v4 == 186)
    sub_22E810414(a1, &v17, 0, 0, 0);
  sub_22E81691C(a1, (uint64_t)&v17);
  if (*(_WORD *)(a1 + 32) == 354)
    sub_22E8169B0(a1, (uint64_t)&v17);
  if (((1 << *(_DWORD *)(a2 + 80)) & 0x7FFF06E) != 0)
  {
    if ((v5 = *(unsigned __int16 *)(a1 + 32), v5 == 22)
      || v5 == 26
      && (v6 = *(_QWORD *)(a1 + 8), (**(_QWORD **)(v6 + 56) & 0x100) != 0)
      && ((v7 = *(_QWORD *)(v6 + 2816), v7 >= *(unsigned int *)(v6 + 2784))
        ? (v8 = sub_22F162D2C(v6, 1u))
        : (v8 = *(_QWORD *)(v6 + 2776) + 24 * v7),
          *(_WORD *)(v8 + 16) == 22)
      || (sub_22E81CB8C(a1, 0) & 1) != 0
      || sub_22E8836FC(a1, 0, 0))
    {
      v9 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 64) = v9;
      *(_DWORD *)(a2 + 68) = v9;
      if ((**(_QWORD **)a2 & 7) == 1)
      {
LABEL_16:
        v10 = 264;
        goto LABEL_18;
      }
      v10 = 264;
      if (((1 << *(_DWORD *)(a2 + 80)) & 0x7FFF87E) == 0)
      {
        v14 = *(unsigned int *)(a2 + 120);
        if ((_DWORD)v14)
        {
          v15 = *(int **)(a2 + 112);
          v10 = 776;
          while (1)
          {
            v16 = *v15;
            v15 += 30;
            if (v16 != 6)
              goto LABEL_16;
            if (!--v14)
              goto LABEL_18;
          }
        }
        v10 = 776;
      }
LABEL_18:
      sub_22E885C30(a1, v10);
      sub_22E825568(a1, a2, (uint64_t)&v17, (uint64_t)&v21, 0, v4 == 186);
      if (a1)
        sub_22E885CF4(a1);
      goto LABEL_22;
    }
  }
  v11 = *(_DWORD *)(a2 + 1684);
  *(_DWORD *)(a2 + 1684) = 0;
  v12 = *(_WORD *)(a2 + 1088) & 2;
  *(_WORD *)(a2 + 1088) |= 2u;
  sub_22E8227E4(a1, a2, (unint64_t)sub_22E823490, 0);
  sub_22E811E8C((uint64_t)&v21);
  v31 = 0;
  v32[0] = 0;
  v29 = 6;
  v30 = v28;
  sub_22E824ABC(a2, (unint64_t)&v29, (uint64_t)&v17, SHIDWORD(v28));
  sub_22E80F94C(v32);
  *(_WORD *)(a2 + 1088) = *(_WORD *)(a2 + 1088) & 0xFFFD | v12;
  if (v11)
    sub_22E88096C(a1, v11, a2);
LABEL_22:
  sub_22E8D1BC4(v19, (uint64_t)&v19);
  sub_22E80F94C(&v20);
  result = sub_22E80F94C(&v18);
  *v21 = v22;
  return result;
}

uint64_t sub_22E824FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  void *__p;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unsigned __int8 *v46;
  _BYTE v47[12];
  char v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _BYTE *v53;
  char v54;
  uint64_t v55;
  char v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61[4];
  uint64_t v62;
  int v63;
  _BYTE v64[12];
  void *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  __int128 v70;
  __int128 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  __int128 v77;
  int v78;
  _WORD *v79;
  uint64_t v80;
  _WORD v81[484];
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_DWORD *)(a2 + 80);
  v69 = *(_QWORD **)a2;
  v73 = 0;
  v74 = 0;
  v70 = 0u;
  v71 = 0u;
  v72 = 0;
  v75 = v69[11];
  v76 = v5;
  v78 = 0;
  v77 = 0u;
  v79 = v81;
  v80 = 0x800000000;
  v81[480] = (*v69 & 0x3F000) == 204800;
  v6 = v69[5];
  v82 = 0u;
  v83 = v6;
  v87 = 0;
  v86 = 0u;
  v85 = 0u;
  v84 = 0u;
  while (1)
  {
    v7 = *(unsigned __int16 *)(a1 + 32);
    if (v7 != 19)
      break;
    sub_22E826254(a1, (uint64_t)&v69);
  }
  if (v7 == 62)
    *(_DWORD *)(a2 + 68) = v4;
  v8 = *(unsigned int *)(a1 + 16);
  sub_22E8227E4(a1, a2, (unint64_t)sub_22E823490, 0);
  v9 = v80;
  if ((_DWORD)v80)
  {
    v10 = *(_DWORD *)(a2 + 120);
    if (!v10
      || ((v11 = *(_DWORD *)(*(_QWORD *)(a2 + 112) + 120 * (v10 - 1)),
           v12 = v11 > 7,
           v13 = (1 << v11) & 0xB3,
           !v12)
        ? (v14 = v13 == 0)
        : (v14 = 1),
          v14))
    {
      v15 = 0;
    }
    else
    {
      v37 = sub_22F141A3C(*(unsigned int *)(a2 + 76), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
      *(_QWORD *)&v64[4] = 0;
      v65 = 0;
      LODWORD(v62) = 6;
      HIDWORD(v62) = v8;
      v63 = v37;
      sub_22F2E2950(a2, (unint64_t)&v62, 0);
      sub_22E80F94C((uint64_t *)&v65);
      v9 = v80;
      v15 = 1;
      if (!(_DWORD)v80)
      {
LABEL_23:
        v20 = HIDWORD(v75);
        v21 = sub_22F141A3C(*(unsigned int *)(a2 + 76), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
        v22 = v21;
        if (v15)
        {
          v23 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v23 + 312) = v21;
          *(_DWORD *)(v23 + 316) = 1459;
          if (*(char *)(v23 + 311) < 0)
          {
            **(_BYTE **)(v23 + 288) = 0;
            *(_QWORD *)(v23 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v23 + 288) = 0;
            *(_BYTE *)(v23 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v61, v23);
          v24 = (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) >> 8) & 1;
          v25 = (unsigned __int8 *)v61[0];
          if (!v61[0])
          {
            v25 = (unsigned __int8 *)sub_22E3B8AAC(v61[1]);
            v61[0] = (uint64_t)v25;
          }
          v25[*v25 + 1] = 3;
          v26 = v61[0];
          v27 = *(unsigned __int8 *)v61[0];
          *(_BYTE *)v61[0] = v27 + 1;
          *(_QWORD *)(v26 + 8 * v27 + 16) = v24;
          v64[8] = 0;
          *(_QWORD *)v64 = 0;
          v66 = 0;
          v67 = 0x100000000000000;
          v62 = v8 | (v8 << 32);
          LOBYTE(v63) = 0;
          v65 = (void *)40;
          v68 = 0;
          sub_22E6D82D0(v61, &v62);
          v56 = 0;
          v55 = 0;
          v28 = (_BYTE *)(v22 | (v22 << 32));
          v58 = 0;
          v59 = 0x100000000000000;
          v53 = v28;
          v54 = 0;
          v57 = (void *)41;
          v60 = 0;
          sub_22E6D82D0(v61, &v53);
          v49 = 0;
          v50 = 0;
          v29 = v4 | (v20 << 32);
          v51 = 0;
          v46 = v28;
          v47[0] = 0;
          *(_QWORD *)&v47[4] = v29;
          v48 = 1;
          v52 = 0;
          sub_22E6D82D0(v61, &v46);
          v41 = 0;
          v40 = 0;
          v43 = 0;
          v44 = 0;
          __p = 0;
          v45 = 0;
          v38 = v29;
          v39 = 1;
          sub_22E6D82D0(v61, &v38);
          if (SHIBYTE(v44) < 0)
            operator delete(__p);
          if (SHIBYTE(v51) < 0)
            operator delete(v49);
          if (SHIBYTE(v59) < 0)
            operator delete(v57);
          if (SHIBYTE(v67) < 0)
            operator delete(v65);
          v30 = v61;
        }
        else
        {
          v31 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v31 + 312) = v21;
          *(_DWORD *)(v31 + 316) = 1459;
          if (*(char *)(v31 + 311) < 0)
          {
            **(_BYTE **)(v31 + 288) = 0;
            *(_QWORD *)(v31 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v31 + 288) = 0;
            *(_BYTE *)(v31 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v46, v31);
          v32 = (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) >> 8) & 1;
          v33 = v46;
          if (!v46)
          {
            v33 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v47);
            v46 = v33;
          }
          v33[*v33 + 1] = 3;
          v34 = v46;
          v35 = *v46;
          *v46 = v35 + 1;
          *(_QWORD *)&v34[8 * v35 + 16] = v32;
          v65 = 0;
          v66 = 0;
          v67 = 0;
          v62 = v22 | (v22 << 32);
          LOBYTE(v63) = 0;
          *(_QWORD *)v64 = v4 | (v20 << 32);
          v64[8] = 1;
          v68 = 0;
          sub_22E6D82D0((uint64_t *)&v46, &v62);
          v56 = 0;
          v55 = 0;
          v58 = 0;
          v59 = 0;
          v57 = 0;
          v60 = 0;
          v53 = (_BYTE *)(v4 | (v20 << 32));
          v54 = 1;
          sub_22E6D82D0((uint64_t *)&v46, &v53);
          if (SHIBYTE(v59) < 0)
            operator delete(v57);
          if (SHIBYTE(v67) < 0)
            operator delete(v65);
          v30 = (uint64_t *)&v46;
        }
        sub_22E3BB0B8((uint64_t)v30);
        return sub_22E827F78((uint64_t)&v69);
      }
    }
    v16 = 0;
    v17 = v9;
    do
    {
      sub_22F2E2950(a2, (unint64_t)&v79[v16], 0);
      v16 += 60;
      --v17;
    }
    while (v17);
    if (*(_DWORD *)(a2 + 40))
      v18 = 1;
    else
      v18 = *(_QWORD *)(a2 + 48) == 0;
    if (v18)
      v19 = v15;
    else
      v19 = 1;
    if ((v19 & 1) == 0)
      return sub_22E827F78((uint64_t)&v69);
    goto LABEL_23;
  }
  return sub_22E827F78((uint64_t)&v69);
}

uint64_t *sub_22E8254B0(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  if ((*(_QWORD *)(*(_QWORD *)(result[1] + 56) + 20) & 0x1000000000) != 0)
  {
    v3 = result;
    result = (uint64_t *)sub_22E8836FC(result, 0, 0);
    if ((_DWORD)result)
    {
      v4 = 0;
      v5 = 0;
      v6 = v3 + 120;
      v7 = 0;
      sub_22E835FD0(v3, &v4);
      sub_22E82103C(a2 + 1096, (uint64_t)&v4);
      if (HIDWORD(v4))
        *(_DWORD *)(a2 + 76) = HIDWORD(v4);
      sub_22E8D1BC4((uint64_t)v6, (uint64_t)&v6);
      sub_22E80F94C(&v7);
      return sub_22E80F94C(&v5);
    }
  }
  return result;
}

void sub_22E825568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unsigned int v51;
  _BYTE *v52;
  unint64_t v53;
  _BYTE *v54;
  char *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  BOOL v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unsigned __int8 v63;
  _DWORD *v64;
  _BOOL4 v65;
  int v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  const void *v74;
  unsigned __int8 *v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  unsigned __int32 v79;
  void **v80;
  unsigned __int8 *v81;
  unint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  __int16 v92;
  int v93;
  int v94;
  _BYTE v97[32];
  _QWORD v98[2];
  char v99;
  _BYTE v100[32];
  _BYTE v101[32];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned int v109;
  char v110;
  _QWORD v111[4];
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  int v124;
  uint64_t v125;
  int v126;
  __n128 v127;
  uint64_t v128;
  void **v129;
  void *v130;
  uint64_t v131;
  _BYTE v132[16];
  void *v133[2];
  _BYTE v134[24];
  void *v135[2];
  _BYTE v136[16];
  void *v137;
  uint64_t v138;
  _BYTE v139[16];
  void *v140;
  uint64_t v141;
  _BYTE v142[512];
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD v147[18];

  v9 = a2;
  v147[16] = *MEMORY[0x24BDAC8D0];
  v140 = v142;
  v141 = 0x1000000000;
  v126 = 0;
  v111[0] = 0;
  v111[2] = 0;
  v111[3] = 0;
  v112 = 0;
  v113 = a1 + 960;
  v125 = 0;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v124 = 0;
  v110 = 1;
  v109 = 0;
  v107 = 0;
  v108 = 0;
  v137 = v139;
  v138 = 0x200000000;
  v135[0] = v136;
  v135[1] = (void *)0x200000000;
  v105 = 0;
  v106 = 0;
  v102 = 0;
  v103 = 0;
  v104 = a1 + 960;
  v94 = *(_DWORD *)(a4 + 48);
  v11 = v94;
  v133[0] = v134;
  v133[1] = (void *)0x200000000;
  v134[16] = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  if ((*(_WORD *)v12 & 0x108) != 0)
    goto LABEL_2;
  if ((*(_QWORD *)(v12 + 8) & 0x200000000) != 0)
    goto LABEL_2;
  if (*(_WORD *)(a1 + 32) != 5)
    goto LABEL_2;
  if ((sub_22E822180(a1) & 1) != 0)
    goto LABEL_2;
  v66 = sub_22E88B7AC(a1);
  v67 = *(unsigned __int16 *)(a1 + 32);
  if (((v67 == 400) & ~v66) != 0 || v67 == 1)
    goto LABEL_2;
  v68 = *(_QWORD *)(a1 + 8);
  v69 = *(_QWORD *)(v68 + 2816);
  v70 = v69 >= *(unsigned int *)(v68 + 2784) ? sub_22F162D2C(v68, 1u) : *(_QWORD *)(v68 + 2776) + 24 * v69;
  if (*(_WORD *)(v70 + 16) != 65)
  {
    v71 = *(_QWORD *)(a1 + 8);
    v72 = *(_QWORD *)(v71 + 2816);
    v73 = v72 >= *(unsigned int *)(v71 + 2784) ? sub_22F162D2C(v71, 1u) : *(_QWORD *)(v71 + 2776) + 24 * v72;
    v9 = a2;
    if (*(_WORD *)(v73 + 16) != 22)
    {
LABEL_2:
      if (*(_WORD *)(a1 + 32) == 22)
      {
        if (a6)
        {
          sub_22E884578(a1, (int *)(a1 + 16), 1433, (uint64_t)v100);
          sub_22E3BB0B8((uint64_t)v100);
        }
      }
      else
      {
        sub_22E826C40(a1, *(_DWORD *)(v9 + 80), a3, (uint64_t)&v140, &v126, (uint64_t)v133);
      }
      if ((_DWORD)v141
        || (v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56), (*(_WORD *)v13 & 0x108) != 0)
        || (*(_QWORD *)(v13 + 8) & 0x200000000) != 0)
      {
        LOWORD(v14) = 1;
      }
      else
      {
        v14 = ((unint64_t)*(unsigned int *)(v13 + 52) >> 30) & 1;
      }
      v92 = v14;
      sub_22E811E8C(a4);
      v15 = *(_DWORD *)(a4 + 52);
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
      v93 = v15;
      if ((*(_BYTE *)(v16 + 1) & 1) == 0)
      {
        if ((*(_QWORD *)(v16 + 20) & 0x1000000000) != 0)
          sub_22E8103B4(a1, &v102, 0);
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = v15;
        goto LABEL_64;
      }
      v143 = (_QWORD *)a1;
      v144 = v111;
      v145 = v9;
      v98[0] = sub_22E82915C;
      v98[1] = &v143;
      v99 = 1;
      sub_22E822278(a1, v111, 0, 0, 0, (uint64_t)v98, 0);
      if (HIDWORD(v116))
        v23 = HIDWORD(v116);
      else
        v23 = v15;
      v24 = sub_22E827A08(a1, (BOOL *)&v110, &v109);
      v25 = v109;
      if (v24)
        v23 = v109;
      LOBYTE(v143) = 0;
      LOBYTE(v146) = 0;
      sub_22E8269A4(a1, (uint64_t **)v9, (uint64_t)v111, (uint64_t)&v143);
      v26 = 0;
      if (*(_DWORD *)(v9 + 80) == 7)
      {
        v26 = 0;
        if ((**(_QWORD **)v9 & 0x1000000000) == 0 && (**(_QWORD **)v9 & 7) != 1)
        {
          v27 = *(unsigned int *)(v9 + 120);
          if ((_DWORD)v27)
          {
            v28 = *(int **)(v9 + 112);
            while (1)
            {
              v29 = *v28;
              v28 += 30;
              if (v29 != 6)
                break;
              if (!--v27)
                goto LABEL_27;
            }
            v26 = 0;
          }
          else
          {
            if (!sub_22EB13FC8(*(_QWORD *)(a1 + 88), v9) || *(_WORD *)(a1 + 32) != 163)
              goto LABEL_52;
            v30 = *(_QWORD *)(a1 + 8);
            v31 = *(_QWORD *)(v30 + 2816);
            v32 = v31 >= *(unsigned int *)(v30 + 2784) ? sub_22F162D2C(v30, 1u) : *(_QWORD *)(v30 + 2776) + 24 * v31;
            if (*(_WORD *)(v32 + 16) != 21)
              goto LABEL_52;
LABEL_27:
            v33 = a1 + 16;
            if (*(_WORD *)(a1 + 32) != 1)
            {
              v34 = *(_QWORD *)(a1 + 8);
              v35 = *(_QWORD *)(v34 + 2816) + 1;
              if (v35 >= *(unsigned int *)(v34 + 2784))
                v33 = sub_22F162D2C(v34, 2u);
              else
                v33 = *(_QWORD *)(v34 + 2776) + 24 * v35;
            }
            if (*(_WORD *)(v33 + 16) != 163)
              goto LABEL_52;
            v36 = a1 + 16;
            if (*(_WORD *)(a1 + 32) != 1)
            {
              v37 = *(_QWORD *)(a1 + 8);
              v38 = *(_QWORD *)(v37 + 2816) + 2;
              if (v38 >= *(unsigned int *)(v37 + 2784))
                v36 = sub_22F162D2C(v37, 3u);
              else
                v36 = *(_QWORD *)(v37 + 2776) + 24 * v38;
            }
            if (*(_WORD *)(v36 + 16) != 21)
              goto LABEL_52;
            v39 = a1 + 16;
            if (*(_WORD *)(a1 + 32) != 1)
            {
              v40 = *(_QWORD *)(a1 + 8);
              v41 = *(_QWORD *)(v40 + 2816) + 3;
              if (v41 >= *(unsigned int *)(v40 + 2784))
                v39 = sub_22F162D2C(v40, 4u);
              else
                v39 = *(_QWORD *)(v40 + 2776) + 24 * v41;
            }
            if (*(_WORD *)(v39 + 16) == 5)
            {
              v42 = a1 + 16;
              if (*(_WORD *)(a1 + 32) != 1)
              {
                v43 = *(_QWORD *)(a1 + 8);
                v44 = *(_QWORD *)(v43 + 2816) + 3;
                if (v44 >= *(unsigned int *)(v43 + 2784))
                  v42 = sub_22F162D2C(v43, 4u);
                else
                  v42 = *(_QWORD *)(v43 + 2776) + 24 * v44;
              }
              v64 = *(_DWORD **)(*(_QWORD *)(v42 + 8) + 16);
              v65 = *v64 == 4 && v64[4] == 1885435763;
              v26 = !v65;
            }
            else
            {
LABEL_52:
              v26 = 1;
            }
          }
        }
      }
      v21 = sub_22E834248(a1, v26, (uint64_t)&v108, (uint64_t)&v137, (uint64_t)v135, &v107, &v106);
      if (v21)
        v22 = HIDWORD(v108);
      else
        v22 = v23;
      sub_22E8103B4(a1, &v102, 0);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) != 0)
      {
        v11 = v94;
        if (*(_WORD *)(a1 + 32) != 36)
        {
          v17 = v25;
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v15 = v22;
          goto LABEL_61;
        }
        sub_22E884578(a1, (int *)(a1 + 16), 1946, (uint64_t)v97);
        sub_22E3BB0B8((uint64_t)v97);
        if ((**(_QWORD **)v9 & 0x3F000) == 0x21000)
          v11 = *(_DWORD *)(*(_QWORD *)v9 + 120);
        v15 = *(_DWORD *)(a1 + 16);
        v130 = 0;
        v62 = sub_22E824C54(v9);
        v19 = sub_22F2E4AE0(a1, (uint64_t)&v130, v62);
        v20 = v63;
        v18 = (int)v130;
        v22 = HIDWORD(v130);
      }
      else
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v15 = v22;
        v11 = v94;
      }
      v17 = v25;
LABEL_61:
      if ((_BYTE)v146 && (_BYTE)v145)
        v143[1286] = v144;
      goto LABEL_64;
    }
  }
  if (a6)
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1433, (uint64_t)v101);
    sub_22E3BB0B8((uint64_t)v101);
  }
  if (*(_DWORD *)(a2 + 40) || !*(_QWORD *)(a2 + 48))
  {
    sub_22E884578(a1, (int *)(a1 + 16), 1833, (uint64_t)&v130);
    sub_22E3BB0B8((uint64_t)&v130);
  }
  v143 = v147;
  v144 = v147;
  v145 = 16;
  LODWORD(v146) = 0;
  if (*(_WORD *)(a1 + 32) == 5)
  {
    while (1)
    {
      v74 = *(const void **)(a1 + 24);
      if (sub_22EA003D8(*(_QWORD **)(a1 + 88), (uint64_t)v74, *(_DWORD *)(a1 + 16), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), 0, 0, 0, 0, 0, 0, 1u, 0))
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1771, (uint64_t)&v127);
        v75 = (unsigned __int8 *)v127.n128_u64[0];
        if (!v127.n128_u64[0])
        {
          v75 = (unsigned __int8 *)sub_22E3B8AAC(v127.n128_i64[1]);
          v127.n128_u64[0] = (unint64_t)v75;
        }
        v75[*v75 + 1] = 5;
        v76 = v127.n128_u64[0];
        v77 = *(unsigned __int8 *)v127.n128_u64[0];
        *(_BYTE *)v127.n128_u64[0] = v77 + 1;
        *(_QWORD *)(v76 + 8 * v77 + 16) = v74;
        sub_22E3BB0B8((uint64_t)&v127);
      }
      sub_22E3BA850((uint64_t)&v143, v74);
      if (v78)
      {
        v79 = *(_DWORD *)(a1 + 16);
        v127.n128_u64[0] = (unint64_t)v74;
        v127.n128_u32[2] = v79;
        v128 = 0;
        v129 = 0;
        sub_22E827AC4((uint64_t)&v140, &v127);
        v80 = v129;
        v129 = 0;
        if (v80)
        {
          if (*v80 != v80 + 2)
            free(*v80);
          MEMORY[0x2348A0E9C](v80, 0x1080C4070FE8099);
        }
      }
      else
      {
        sub_22E884578(a1, (int *)(a1 + 16), 58, (uint64_t)&v127);
        v81 = (unsigned __int8 *)v127.n128_u64[0];
        if (!v127.n128_u64[0])
        {
          v81 = (unsigned __int8 *)sub_22E3B8AAC(v127.n128_i64[1]);
          v127.n128_u64[0] = (unint64_t)v81;
        }
        v81[*v81 + 1] = 5;
        v82 = v127.n128_u64[0];
        v83 = *(unsigned __int8 *)v127.n128_u64[0];
        *(_BYTE *)v127.n128_u64[0] = v83 + 1;
        *(_QWORD *)(v82 + 8 * v83 + 16) = v74;
        sub_22E3BB0B8((uint64_t)&v127);
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      if (*(_WORD *)(a1 + 32) != 65)
        break;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      if (*(_WORD *)(a1 + 32) != 5)
        goto LABEL_153;
    }
  }
  else
  {
LABEL_153:
    sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v127);
    v84 = (unsigned __int8 *)v127.n128_u64[0];
    if (!v127.n128_u64[0])
    {
      v84 = (unsigned __int8 *)sub_22E3B8AAC(v127.n128_i64[1]);
      v127.n128_u64[0] = (unint64_t)v84;
    }
    v84[*v84 + 1] = 4;
    v85 = v127.n128_u64[0];
    v86 = *(unsigned __int8 *)v127.n128_u64[0];
    *(_BYTE *)v127.n128_u64[0] = v86 + 1;
    *(_QWORD *)(v85 + 8 * v86 + 16) = 5;
    sub_22E3BB0B8((uint64_t)&v127);
    v127.n128_u16[0] = 22;
    sub_22E885940(a1, (unsigned __int16 *)&v127, 1, 3);
    if ((_DWORD)v141)
    {
      v87 = (char *)v140 - 8;
      v88 = 32 * v141;
      do
      {
        sub_22E80FBD8((void ***)&v87[v88]);
        v88 -= 32;
      }
      while (v88);
    }
    LODWORD(v141) = 0;
  }
  if (v144 != v143)
    free(v144);
  sub_22E811E8C(a4);
  v93 = *(_DWORD *)(a4 + 52);
  sub_22E8103B4(a1, &v102, 0);
  v18 = 0;
  v17 = 0;
  if ((_DWORD)v102 && HIDWORD(v102))
  {
    sub_22E8175C8(a1, &v102, 0);
    sub_22E820B10(&v102);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v92 = 0;
    v15 = v93;
    v22 = v93;
  }
  else
  {
    v15 = v93;
    v22 = v93;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v92 = 0;
  }
  v11 = v94;
LABEL_64:
  v130 = v132;
  v131 = 0;
  v45 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
  if ((*(_BYTE *)(v45 + 9) & 2) == 0 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
  {
LABEL_72:
    v51 = 0;
    v52 = v132;
  }
  else
  {
    v46 = *(unint64_t **)(v45 + 80);
    v47 = 88;
    if (v46 == *(unint64_t **)(v45 + 72))
      v47 = 92;
    v48 = *(unsigned int *)(v45 + v47);
    if ((_DWORD)v48)
    {
      v49 = 8 * v48;
      v50 = v46;
      while (*v50 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v50;
        v49 -= 8;
        if (!v49)
          goto LABEL_72;
      }
      v91 = v11;
    }
    else
    {
      v91 = v11;
      v50 = v46;
    }
    v57 = &v46[v48];
    if (v50 == v57)
    {
      v51 = 0;
      v52 = v132;
    }
    else
    {
      v51 = 0;
      v58 = *v50;
LABEL_97:
      v59 = (*(_DWORD *)(v58 + 28) & 0x7F) == 0x40 || v58 == 0;
      if (!v59 && (*(_DWORD *)(v58 + 28) & 0x7Fu) - 75 >= 0xFFFFFFC2)
      {
        if (v51 >= HIDWORD(v131))
        {
          v90 = v17;
          v89 = v18;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v18 = v89;
          v17 = v90;
          v51 = v131;
        }
        *((_QWORD *)v130 + v51) = v58;
        v51 = v131 + 1;
        LODWORD(v131) = v131 + 1;
      }
      v60 = v50 + 1;
      while (v60 != v57)
      {
        v61 = *v60++;
        v58 = v61;
        if (v61 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v50 = v60 - 1;
          goto LABEL_97;
        }
      }
      v52 = v130;
    }
    v11 = v91;
  }
  if (v107 <= 1)
    v53 = 0;
  else
    v53 = v107 & 0xFFFFFFFFFFFFFFFELL;
  sub_22E8ACEBC(v92, a5, v94, (uint64_t)v140, v141, v126, v93, v110, (uint64_t)&v143, v17, SHIDWORD(v17), 0, 0, v21, v108, (uint64_t *)v137, (uint64_t *)v135[0], v138, v53,
    v106,
    (uint64_t)v52,
    v51,
    v11,
    0,
    v15,
    a2,
    v19,
    v20,
    SHIDWORD(v20),
    v18,
    (uint64_t)v111);
  sub_22E824ABC(a2, (unint64_t)&v143, (uint64_t)&v102, v22);
  sub_22E80F94C(&v146);
  if (v130 != v132)
    free(v130);
  if (v133[0] != v134)
    free(v133[0]);
  sub_22E8D1BC4(v104, (uint64_t)&v104);
  sub_22E80F94C(&v105);
  sub_22E80F94C(&v103);
  if (v135[0] != v136)
    free(v135[0]);
  if (v137 != v139)
    free(v137);
  if (DWORD1(v116))
    free(*((void **)&v115 + 1));
  sub_22E8D1BC4(v113, (uint64_t)&v113);
  sub_22E80F94C((uint64_t *)&v114);
  sub_22E80F94C(&v112);
  v54 = v140;
  if ((_DWORD)v141)
  {
    v55 = (char *)v140 - 8;
    v56 = 32 * v141;
    do
    {
      sub_22E80FBD8((void ***)&v55[v56]);
      v56 -= 32;
    }
    while (v56);
    v54 = v140;
  }
  if (v54 != v142)
    free(v54);
}

void sub_22E826254(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  unsigned int v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  int v35;
  __int16 v36;
  unsigned int v37;
  _QWORD v38[4];
  _BYTE v39[32];
  _BYTE v40[24];
  _BYTE *v41;
  char v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  unint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  _BYTE v58[96];
  void *v59;
  uint64_t v60;
  _BYTE v61[24];
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  if ((sub_22E827B60(a1) & 1) == 0)
  {
    v41 = (_BYTE *)(a1 + 944);
    v42 = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v43 = a1;
    v44 = 1310739;
    v45 = 62;
    v47 = 0;
    v48 = 0;
    v46 = sub_22E80F788;
    sub_22E811DE8((uint64_t)&v41);
    v4 = *(unsigned __int16 *)(a1 + 32);
    switch(v4)
    {
      case 7:
        v5 = *(_QWORD *)(a1 + 8);
        v6 = *(_QWORD *)(v5 + 2816);
        if (v6 < *(unsigned int *)(v5 + 2784))
          v7 = *(_QWORD *)(v5 + 2776) + 24 * v6;
        else
          v7 = sub_22F162D2C(v5, 1u);
        if (*(_WORD *)(v7 + 16) == 20)
        {
          v8 = sub_22EB261F0(*(_QWORD *)(a1 + 88), a1 + 16, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888));
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          sub_22E811E8C((uint64_t)&v41);
          v49 = 0uLL;
          v50 = a1 + 960;
          v51 = 0;
          sub_22E8103B4(a1, &v49, 0);
          v63 = 0;
          v64 = 0;
          LODWORD(v62[0]) = 2;
          *(_QWORD *)((char *)v62 + 4) = v48;
          LOWORD(v65) = 0;
          v66 = v8 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v67) = 0;
          sub_22E824ABC(a2, (unint64_t)v62, (uint64_t)&v49, SHIDWORD(v48));
          sub_22E80F94C(&v64);
          sub_22E8D1BC4(v50, (uint64_t)&v50);
LABEL_7:
          sub_22E80F94C(&v51);
          sub_22E80F94C((uint64_t *)&v49 + 1);
LABEL_8:
          *v41 = v42;
          return;
        }
        v4 = *(unsigned __int16 *)(a1 + 32);
        break;
      case 20:
        sub_22E811E8C((uint64_t)&v41);
        v49 = 0uLL;
        v50 = a1 + 960;
        v51 = 0;
        sub_22E8103B4(a1, &v49, 0);
        v63 = 0;
        v64 = 0;
        LODWORD(v62[0]) = 2;
        *(_QWORD *)((char *)v62 + 4) = v48;
        LOWORD(v65) = 0;
        v66 = 0;
        LODWORD(v67) = 0;
        sub_22E824ABC(a2, (unint64_t)v62, (uint64_t)&v49, SHIDWORD(v48));
        sub_22E80F94C(&v64);
        sub_22E8D1BC4(v50, (uint64_t)&v50);
        goto LABEL_7;
      case 103:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        v9 = *(_DWORD *)(a1 + 40);
        break;
      case 3:
        v16 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v16 + 752))
        {
          *(_BYTE *)(v16 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v16 + 48) + 6) = 1;
        }
        *(_WORD *)(a1 + 32) = 1;
        sub_22F314634(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888));
        goto LABEL_8;
      default:
        v9 = 0;
        break;
    }
    v62[0] = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = a1 + 960;
    v78 = 0;
    v67 = 0u;
    v68 = 0u;
    v69 = 0u;
    v70 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0;
    v59 = v61;
    v60 = 0x200000000;
    v61[16] = 0;
    v40[0] = 0;
    v40[16] = 0;
    sub_22E822278(a1, v62, 6, 1, 0, (uint64_t)v40, (uint64_t)&v59);
    if (!v9)
    {
      v10 = *(unsigned __int16 *)(a1 + 32);
      if (v10 != 103)
      {
        v9 = 0;
        goto LABEL_17;
      }
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v9 = *(_DWORD *)(a1 + 40);
    }
    v10 = *(unsigned __int16 *)(a1 + 32);
LABEL_17:
    if (v10 == 30)
    {
      v17 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(v17 + 2816);
      if (v18 >= *(unsigned int *)(v17 + 2784))
        v19 = sub_22F162D2C(v17, 1u);
      else
        v19 = *(_QWORD *)(v17 + 2776) + 24 * v18;
      if (*(_WORD *)(v19 + 16) == 20)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
        if (!v9)
        {
          v11 = 0;
          v12 = 256;
          goto LABEL_23;
        }
        v20 = v39;
        sub_22E88453C(a1, v9, 1777, (uint64_t)v39);
        v12 = 256;
        goto LABEL_43;
      }
      v10 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v10 != 20)
    {
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
      {
        v11 = sub_22F2E50C0(a1, 0);
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 88);
        sub_22EB48CC8(v21, 4, 0, 3);
        v22 = *(_QWORD *)(a1 + 88);
        v23 = sub_22E83766C(a1, 0);
        v11 = v23;
        if ((v23 & 1) == 0)
          v11 = (uint64_t)sub_22EBBCB14(v22, (_DWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v49);
        sub_22EB48E64(v21);
      }
      if ((v11 & 1) != 0)
      {
        *(_WORD *)(a2 + 1088) |= 1u;
        LOWORD(v49) = 20;
        sub_22E885940(a1, (unsigned __int16 *)&v49, 1, 1);
LABEL_27:
        if (v59 != v61)
          free(v59);
        sub_22E828530((uint64_t)v62);
        goto LABEL_8;
      }
      v12 = 0;
LABEL_23:
      sub_22E811E8C((uint64_t)&v41);
      sub_22E8103B4(a1, &v64, 0);
      v37 = 0;
      if ((_DWORD)v60)
      {
        v36 = v12;
        v35 = v9;
        v24 = (uint64_t *)v59;
        v25 = 8 * v60;
        do
        {
          v26 = *v24;
          v27 = (_QWORD *)operator new();
          v28 = (uint64_t)v27;
          v56 = v58;
          v57 = 0x400000000;
          if (*(_DWORD *)(v26 + 24))
          {
            sub_22F2E32AC((uint64_t)&v56, v26 + 16);
            v34 = v57;
            v29 = *(_QWORD *)(v26 + 128);
            v30 = *(_DWORD *)(v26 + 144);
            *(_QWORD *)v28 = v28 + 16;
            *(_QWORD *)(v28 + 8) = 0x400000000;
            if (v34)
              sub_22F2E32AC(v28, (uint64_t)&v56);
          }
          else
          {
            v29 = *(_QWORD *)(v26 + 128);
            v30 = *(_DWORD *)(v26 + 144);
            *v27 = v27 + 2;
            v27[1] = 0x400000000;
          }
          *(_QWORD *)(v28 + 112) = v29;
          *(_DWORD *)(v28 + 120) = v30;
          if (v56 != v58)
            free(v56);
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v38[v37++] = v28;
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          ++v24;
          v25 -= 8;
        }
        while (v25);
        v14 = v38;
        v13 = v37;
        v9 = v35;
        v12 = v36;
      }
      else
      {
        v13 = 0;
        v14 = v38;
      }
      v15 = HIDWORD(v48);
      v50 = 0;
      v51 = 0;
      LODWORD(v49) = 2;
      *(_QWORD *)((char *)&v49 + 4) = v48;
      v52 = v12 | ((v9 != 0) << 7) | (LODWORD(v62[0]) >> 25);
      v53 = v11 & 0xFFFFFFFFFFFFFFFELL;
      v54 = v13;
      if (v13)
      {
        v31 = v13;
        v32 = (_QWORD *)operator new[]();
        v55 = v32;
        do
        {
          v33 = *v14++;
          *v32++ = v33;
          --v31;
        }
        while (v31);
        v15 = HIDWORD(v48);
      }
      sub_22E824ABC(a2, (unint64_t)&v49, (uint64_t)&v64, v15);
      sub_22E80F94C(&v51);
      goto LABEL_27;
    }
    if (!v9)
    {
      v12 = 0;
      goto LABEL_44;
    }
    v20 = v38;
    sub_22E88453C(a1, v9, 1776, (uint64_t)v38);
    v12 = 0;
LABEL_43:
    sub_22E3BB0B8((uint64_t)v20);
    v9 = 0;
LABEL_44:
    v11 = 0;
    goto LABEL_23;
  }
}

uint64_t sub_22E8269A4(uint64_t result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  int v9;
  _BOOL4 v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(*(_QWORD *)(result + 8) + 56);
  if ((*(_QWORD *)v4 & 0x200) == 0)
    return result;
  v5 = **a2;
  if ((v5 & 7) == 1)
    return result;
  v7 = result;
  v8 = *((_DWORD *)a2 + 20);
  if (v8)
  {
    if (v8 != 7 || (v5 & 0x1000000000) != 0)
      return result;
  }
  else if (!a2[2] || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 88) + 216) + 8) & 0x7Eu) - 34 > 3)
  {
    return result;
  }
  if (*(int *)a3 >= 0)
    v9 = (*(_DWORD *)a3 >> 21) & 0x200;
  else
    v9 = 1024;
  v10 = (*(_QWORD *)v4 & 0x400) == 0;
  if ((v5 & 0x6000000000) == 0)
    v10 = 0;
  v11 = (*(_DWORD *)a3 >> 25) & 0xF | v9 | v10;
  if ((*(_BYTE *)(v4 + 60) & 1) == 0 && (*(_BYTE *)(v4 + 104) & 0x20) == 0)
    goto LABEL_28;
  v13 = (uint64_t *)(a3 + 32);
  v12 = *(_QWORD *)(a3 + 32);
  if ((v12 & 4) != 0)
  {
    v15 = v12 & 0xFFFFFFFFFFFFFFF8;
    v13 = *(uint64_t **)v15;
    v14 = *(_QWORD *)v15 + 8 * *(unsigned int *)(v15 + 8);
  }
  else
  {
    v14 = (uint64_t)&v13[v12 > 7];
  }
  if (v13 == (uint64_t *)v14)
    goto LABEL_28;
  while (1)
  {
    v16 = *v13;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 56) + 104) & 0x20) == 0)
      break;
    v18 = sub_22E826B78(v16);
    if (v18)
      goto LABEL_27;
LABEL_25:
    if (++v13 == (uint64_t *)v14)
      goto LABEL_28;
  }
  v17 = *(unsigned __int16 *)(v16 + 28) - 341;
  if (v17 >= 0xE || ((0x281Fu >> v17) & 1) == 0)
    goto LABEL_25;
  v18 = dword_22F461138[(__int16)v17];
LABEL_27:
  v11 |= (v18 == 13) | (v18 << 11);
LABEL_28:
  v19 = *(_QWORD *)(v7 + 88);
  v20 = *(_QWORD *)(v19 + 216);
  v21 = (*(_WORD *)(v20 + 8) & 0x7F) - 35;
  if (v20)
    v22 = v20 - 64;
  else
    v22 = 0;
  if (v21 >= 3)
    v23 = 0;
  else
    v23 = v22;
  if (*(_BYTE *)(a4 + 24))
  {
    if (*(_BYTE *)(a4 + 16))
      *(_QWORD *)(*(_QWORD *)a4 + 10288) = *(_QWORD *)(a4 + 8);
    *(_BYTE *)(a4 + 24) = 0;
  }
  result = sub_22EBBBB24(a4, v19, v23, v11, 1);
  *(_BYTE *)(a4 + 24) = 1;
  return result;
}

uint64_t sub_22E826B78(uint64_t a1)
{
  unsigned int v1;
  uint64_t result;

  v1 = *(unsigned __int16 *)(a1 + 28);
  if (v1 <= 0xDA)
  {
    switch(v1)
    {
      case 0xA1u:
        return 13;
      case 0xA5u:
        return 11;
      case 0xC7u:
        return 16;
    }
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 28) <= 0xE9u)
  {
    if (v1 == 219)
      return 15;
    return 0;
  }
  if (*(unsigned __int16 *)(a1 + 28) <= 0xEBu)
    return 0;
  if (v1 == 236)
    return 12;
  if (v1 == 237)
    return 14;
  result = 4;
  switch(v1)
  {
    case 0x15Bu:
      result = 3;
      break;
    case 0x15Cu:
      result = 1;
      break;
    case 0x15Du:
      result = 2;
      break;
    case 0x15Eu:
      return result;
    default:
      return 0;
  }
  return result;
}

uint64_t sub_22E826C40(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  unsigned int *v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int *v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  _DWORD *v43;
  void *p_p;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void **v64;
  int v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BOOL4 v76;
  unsigned __int8 *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  uint64_t v83;
  int v87;
  uint64_t v88;
  _BYTE v91[32];
  unsigned __int8 *v92;
  __int128 v93;
  _BYTE v94[25];
  void *__p;
  size_t v96;
  char v97;
  _BYTE v98[32];
  _BYTE v99[32];
  _BYTE v100[32];
  uint64_t v101[3];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t *v119;
  __int128 v120;
  __int128 v121;
  int v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  if (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888) + 18) - 129 >= 0xFFFFFF80)
  {
    v13 = a5;
    if (*(_WORD *)(a1 + 32) == 26)
    {
LABEL_10:
      v15 = *(_DWORD *)(a1 + 16);
      v14 = (unsigned int *)(a1 + 16);
      v14[6] = v15;
      result = sub_22F18FB4C(*((_QWORD *)v14 - 1), v14);
      *v13 = v14[6];
      return result;
    }
    v16 = a6;
    v88 = a1 + 960;
    v17 = (int *)(a1 + 16);
    if (a2 == 17)
      v18 = 18;
    else
      v18 = 1;
    if (a2 == 26)
      v18 = 26;
    v87 = v18;
    while (1)
    {
      v102 = 0;
      v103 = 0;
      v101[2] = 0;
      v101[0] = 0;
      v104 = v88;
      v116 = 0;
      v105 = 0u;
      v106 = 0u;
      v107 = 0u;
      v108 = 0u;
      v109 = 0u;
      v110 = 0u;
      v111 = 0u;
      v112 = 0u;
      v113 = 0u;
      v114 = 0u;
      v115 = 0;
      sub_22E8103B4(a1, &v102, 0);
      sub_22E8221D8((uint64_t *)a1, (uint64_t)&v102);
      v19 = *(_DWORD *)(a1 + 16);
      sub_22E82103C((uint64_t)&v102, a3);
      LODWORD(v119) = 0;
      v120 = 0uLL;
      sub_22E818334(a1, v101, &v119, 3, 0, v16, 1);
      v125 = *((_QWORD *)&v107 + 1);
      v119 = v101;
      v123 = 0;
      v124 = 0;
      v120 = 0u;
      v121 = 0u;
      v122 = 0;
      v126 = v87;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v130 = &v132;
      v131 = 0x800000000;
      v133 = v133 & 0xFC00 | ((v101[0] & 0x3F000) == 204800);
      v134 = 0;
      v135 = 0;
      v136 = v104;
      v140 = 0;
      v138 = 0u;
      v139 = 0u;
      v137 = 0u;
      sub_22E8227E4(a1, (uint64_t)&v119, (unint64_t)sub_22E823490, 0);
      sub_22E81CAF0((uint64_t *)a1, (uint64_t)&v119, v16, 1);
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 96) & 0x40) == 0)
        goto LABEL_21;
      v20 = *(unsigned __int16 *)(a1 + 32);
      if (v20 == 61)
        break;
LABEL_22:
      if (v20 == 168)
      {
        sub_22E884578(a1, v17, 1731, (uint64_t)v100);
        sub_22E3BB0B8((uint64_t)v100);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v17);
        v60 = *(_QWORD *)(a1 + 88);
        v61 = sub_22F2E536C(a1, 1);
        if ((v61 & 1) == 0)
          sub_22EBBCB14(v60, (_DWORD *)(v61 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v92);
      }
      v21 = (unsigned int *)v17;
      v22 = v122;
      v23 = v123;
      if (v122)
        v24 = 0;
      else
        v24 = v123;
      if (!sub_22E8AD5F4(v101))
      {
        v28 = v23 && v22 == 0;
        if (!v28 && !(_DWORD)v131)
        {
          v29 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v29 + 312) = v19;
          *(_DWORD *)(v29 + 316) = 1606;
          if (*(char *)(v29 + 311) < 0)
          {
            **(_BYTE **)(v29 + 288) = 0;
            *(_QWORD *)(v29 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v29 + 288) = 0;
            *(_BYTE *)(v29 + 311) = 0;
          }
          v17 = (int *)v21;
          sub_22E78E558((uint64_t)v99, v29);
          sub_22E3BB0B8((uint64_t)v99);
          goto LABEL_110;
        }
      }
      v17 = (int *)v21;
      if (*(_WORD *)(a1 + 32) == 26)
      {
        v25 = *(_QWORD *)(a1 + 8);
        v26 = *(_QWORD *)(v25 + 2816);
        if (v26 >= *(unsigned int *)(v25 + 2784))
          v27 = sub_22F162D2C(v25, 1u);
        else
          v27 = *(_QWORD *)(v25 + 2776) + 24 * v26;
        if (*(_WORD *)(v27 + 16) != 22)
        {
          v30 = *(_QWORD *)(a1 + 88);
LABEL_47:
          if (sub_22EE740E0(v30, (uint64_t)&v119))
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), v21);
            sub_22E88096C(a1, *(_DWORD *)(a1 + 40), (uint64_t)&v119);
          }
          goto LABEL_49;
        }
        if (HIDWORD(v140))
          goto LABEL_49;
        v30 = *(_QWORD *)(a1 + 88);
        v31 = *(unsigned int *)(v30 + 1904);
        if (!(_DWORD)v31)
          goto LABEL_47;
        v32 = *(_QWORD *)(v30 + 1896);
        v33 = 8 * v31;
        while ((*(_DWORD *)(*(_QWORD *)v32 + 8) & 7) != 2)
        {
          v32 += 8;
          v33 -= 8;
          if (!v33)
            goto LABEL_47;
        }
      }
LABEL_49:
      if ((v133 & 1) == 0
        && (*v119 & 0x3F000) != 0x32000
        && !v122
        && !v123
        && !(_DWORD)v127
        && (unsigned __int16)(*(_WORD *)(a1 + 32) - 399) >= 0x29u
        && *(unsigned __int16 *)(a1 + 32) - 6 >= 0xD
        && *(_WORD *)(a1 + 32) != 1
        && *(_QWORD *)(a1 + 24))
      {
        v40 = *(unsigned __int16 *)(a1 + 32);
        v41 = v40 - 13;
        v42 = v40 == 1 ? 0 : *(_QWORD *)(a1 + 24);
        v43 = v41 >= 6 ? (_DWORD *)v42 : 0;
        if (sub_22F1D2F98(v43, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 56)))
        {
          sub_22E884578(a1, (int *)v21, 1585, (uint64_t)&v92);
          sub_22F1413E0((uint64_t)v21, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&__p);
          if (v97 >= 0)
            p_p = &__p;
          else
            p_p = __p;
          if (v97 >= 0)
            v45 = v97 & 0x7F;
          else
            v45 = v96;
          sub_22E3B89A8(&v92, p_p, v45);
          if (v97 < 0)
            operator delete(__p);
          sub_22E3BB0B8((uint64_t)&v92);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), v21);
        }
      }
      v34 = sub_22EA2DD10(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v119);
      if (*(_WORD *)(a1 + 32) != 63)
      {
        v36 = 0;
        goto LABEL_106;
      }
      v35 = *v21;
      if (a2 == 7)
      {
        v36 = operator new();
        *(_QWORD *)v36 = v36 + 16;
        *(_QWORD *)(v36 + 8) = 0x400000000;
        v37 = *(_QWORD *)(a1 + 8);
        v38 = *(_QWORD *)(v37 + 2816);
        if (v38 >= *(unsigned int *)(v37 + 2784))
          v39 = (int *)sub_22F162D2C(v37, 1u);
        else
          v39 = (int *)(*(_QWORD *)(v37 + 2776) + 24 * v38);
        v58 = *v39;
        if ((sub_22E80CF40(a1, v36, 0) & 1) == 0)
        {
          if (*(_QWORD *)v36 != v36 + 16)
            free(*(void **)v36);
          MEMORY[0x2348A0E9C](v36, 0x1080C4070FE8099);
          sub_22F327884(*(_QWORD *)(a1 + 88), v34, v35);
          v36 = 0;
          v13 = a5;
          v16 = a6;
          v17 = (int *)v21;
          goto LABEL_106;
        }
        v17 = (int *)v21;
        if (v34)
        {
          v59 = *(_QWORD *)(a1 + 88);
          v92 = (unsigned __int8 *)v34;
          *(_DWORD *)(v34 + 96) = *(_DWORD *)(v34 + 96) & 0xFFFFF9FF | 0x200;
          *((_DWORD *)sub_22EAE9434((_DWORD *)(v59 + 8488), &v92) + 2) = v58;
        }
        v13 = a5;
        goto LABEL_105;
      }
      *(_DWORD *)(a1 + 40) = v35;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v21);
      v46 = *(_QWORD *)(a1 + 88);
      v118 = 7;
      v92 = (unsigned __int8 *)v34;
      v117 = 3;
      __p = (void *)*(unsigned int *)(v46 + 1704);
      sub_22EB4DDB8(v46 + 3688, &v118, (int *)&__p, (__int16 *)(v46 + 1693), (uint64_t *)&v92, &v117);
      v47 = *(unsigned int *)(v46 + 3696);
      v48 = v47 - 2;
      v49 = *(_QWORD *)(v46 + 3688);
      v50 = *(_DWORD *)(v49 + 576 * (v47 - 2));
      if (v50 == 5)
      {
        *(_BYTE *)(v49 + 576 * v47 - 4) = *(_BYTE *)(v49 + 576 * v48 + 572);
        v51 = 1;
      }
      else if (v50 == 2)
      {
        *(_BYTE *)(v49 + 576 * v47 - 4) = 1;
        v51 = *(_BYTE *)(v49 + 576 * v48 + 573) != 0;
      }
      else
      {
        v51 = 0;
        *(_BYTE *)(v49 + 576 * v47 - 4) = 0;
      }
      v52 = v49 + 576 * v47;
      *(_BYTE *)(v52 - 3) = v51;
      *(_WORD *)(v46 + 1693) = 0;
      if (*(_DWORD *)(v46 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v46 + 1776), (llvm::SmallPtrSetImplBase *)(v52 - 560));
        sub_22EAEAE08(v46 + 1840, (uint64_t *)(v52 - 496));
      }
      v53 = *(_QWORD *)(a1 + 8);
      v54 = *(unsigned __int16 *)(a1 + 32);
      if ((*(_BYTE *)(*(_QWORD *)(v53 + 56) + 1) & 2) != 0 && v54 == 23)
      {
        v17 = (int *)v21;
        sub_22E884578(a1, (int *)v21, 1932, (uint64_t)v98);
        sub_22E3BB0B8((uint64_t)v98);
        v55 = sub_22E84AF40(a1);
LABEL_100:
        v62 = v55;
        v63 = *(_QWORD *)(a1 + 88);
        if ((v62 & 1) == 0)
        {
          v62 = (unint64_t)sub_22EBBCB14(v63, (_DWORD *)(v62 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v92);
          v63 = *(_QWORD *)(a1 + 88);
        }
        if ((v62 & 1) != 0)
        {
          sub_22F327884(v63, v34, v35);
          LODWORD(v92) = 1441857;
          sub_22E885940(a1, (unsigned __int16 *)&v92, 2, 3);
        }
        else
        {
          sub_22EAA41A8(v63, v34, v35, v62 & 0xFFFFFFFFFFFFFFFELL);
        }
        sub_22EB48E64(v46);
        v36 = 0;
LABEL_105:
        v16 = a6;
LABEL_106:
        v92 = v24;
        LODWORD(v93) = v124;
        *((_QWORD *)&v93 + 1) = v34;
        *(_QWORD *)v94 = v36;
        sub_22E827AC4(a4, (__n128 *)&v92);
        v64 = *(void ***)v94;
        *(_QWORD *)v94 = 0;
        if (v64)
        {
          if (*v64 != v64 + 2)
            free(*v64);
          MEMORY[0x2348A0E9C](v64, 0x1080C4070FE8099);
        }
LABEL_110:
        if (*(_WORD *)(a1 + 32) != 26)
        {
          v68 = 0;
          goto LABEL_142;
        }
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v17);
        v65 = *(_DWORD *)(a1 + 40);
        *v13 = v65;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) == 0)
        {
          v66 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v66 + 312) = v65;
          v67 = 1603;
          goto LABEL_136;
        }
        v69 = HIDWORD(v140);
        if (HIDWORD(v140))
        {
LABEL_117:
          v70 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v70 + 312) = v65;
          *(_DWORD *)(v70 + 316) = 1963;
          if (*(char *)(v70 + 311) < 0)
          {
            **(_BYTE **)(v70 + 288) = 0;
            *(_QWORD *)(v70 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v70 + 288) = 0;
            *(_BYTE *)(v70 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v92, v70);
          v71 = v92;
          if (!v92)
          {
            v71 = (unsigned __int8 *)sub_22E3B8AAC(v93);
            v92 = v71;
          }
          v71[*v71 + 1] = 2;
          v72 = v92;
          v73 = *v92;
          *v92 = v73 + 1;
          *(_QWORD *)&v72[8 * v73 + 16] = v69 != 0;
          sub_22E4D6448((uint64_t)(v72 + 336), v69 | (v69 << 32), 1);
          sub_22E3BB0B8((uint64_t)&v92);
          if (v69)
          {
            v74 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v74 + 312) = v69;
            *(_DWORD *)(v74 + 316) = 1870;
            if (*(char *)(v74 + 311) < 0)
            {
              **(_BYTE **)(v74 + 288) = 0;
              *(_QWORD *)(v74 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v74 + 288) = 0;
              *(_BYTE *)(v74 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v91, v74);
            sub_22E3BB0B8((uint64_t)v91);
          }
          else
          {
            v75 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v75 + 312) = v124;
            *(_DWORD *)(v75 + 316) = 1869;
            if (*(char *)(v75 + 311) < 0)
            {
              **(_BYTE **)(v75 + 288) = 0;
              *(_QWORD *)(v75 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v75 + 288) = 0;
              *(_BYTE *)(v75 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&__p, v75);
            *(_QWORD *)((char *)&v93 + 4) = 0;
            BYTE12(v93) = 0;
            v92 = (unsigned __int8 *)(v124 | ((unint64_t)v124 << 32));
            LOBYTE(v93) = 0;
            *(_QWORD *)&v94[4] = 0;
            *(_QWORD *)&v94[12] = 0;
            *(_DWORD *)&v94[19] = 0;
            strcpy(v94, "...");
            *(_WORD *)&v94[23] = 3;
            sub_22E6D82D0((uint64_t *)&__p, &v92);
            v76 = 1;
            if (!v122 && !v123)
              v76 = v127 != 0;
            v77 = (unsigned __int8 *)__p;
            if (!__p)
            {
              v77 = (unsigned __int8 *)sub_22E3B8AAC(v96);
              __p = v77;
            }
            v77[*v77 + 1] = 2;
            v78 = __p;
            v79 = *(unsigned __int8 *)__p;
            *(_BYTE *)__p = v79 + 1;
            v78[v79 + 2] = !v76;
            if ((v94[23] & 0x80000000) != 0)
              operator delete(*(void **)v94);
            sub_22E3BB0B8((uint64_t)&__p);
            v17 = (int *)v21;
          }
          v66 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v66 + 312) = *v13;
          v67 = 1868;
LABEL_136:
          *(_DWORD *)(v66 + 316) = v67;
          if (*(char *)(v66 + 311) < 0)
          {
            **(_BYTE **)(v66 + 288) = 0;
            *(_QWORD *)(v66 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v66 + 288) = 0;
            *(_BYTE *)(v66 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&__p, v66);
          v80 = *v13;
          *(_QWORD *)((char *)&v93 + 4) = 0;
          BYTE12(v93) = 0;
          *(_QWORD *)&v94[8] = 0;
          *(_QWORD *)&v94[16] = 0;
          *(_QWORD *)v94 = 8236;
          v92 = (unsigned __int8 *)(v80 | (v80 << 32));
          LOBYTE(v93) = 0;
          *(_WORD *)&v94[23] = 2;
          sub_22E6D82D0((uint64_t *)&__p, &v92);
          if ((v94[23] & 0x80000000) != 0)
            operator delete(*(void **)v94);
          sub_22E3BB0B8((uint64_t)&__p);
        }
        else if (sub_22EE740E0(*(_QWORD *)(a1 + 88), (uint64_t)&v119))
        {
          v69 = HIDWORD(v140);
          v65 = *v13;
          goto LABEL_117;
        }
        v68 = 1;
        goto LABEL_142;
      }
      v17 = (int *)v21;
      if (v54 != 21
        || ((v56 = *(_QWORD *)(v53 + 2816), v56 >= *(unsigned int *)(v53 + 2784))
          ? (v57 = sub_22F162D2C(v53, 1u))
          : (v57 = *(_QWORD *)(v53 + 2776) + 24 * v56),
            *(_WORD *)(v57 + 16) != 23))
      {
        v55 = sub_22E83766C(a1, 0);
        goto LABEL_100;
      }
      sub_22E884578(a1, (int *)v21, 4739, (uint64_t)&v92);
      v81 = v92;
      if (!v92)
      {
        v81 = (unsigned __int8 *)sub_22E3B8AAC(v93);
        v92 = v81;
      }
      v81[*v81 + 1] = 2;
      v82 = v92;
      v83 = *v92;
      *v92 = v83 + 1;
      *(_QWORD *)&v82[8 * v83 + 16] = 0;
      sub_22E3BB0B8((uint64_t)&v92);
      sub_22F327884(*(_QWORD *)(a1 + 88), v34, v35);
      LOWORD(v92) = 65;
      sub_22E885940(a1, (unsigned __int16 *)&v92, 1, 2);
      sub_22EB48E64(v46);
      v68 = 0;
      v16 = a6;
LABEL_142:
      sub_22E827F78((uint64_t)&v119);
      if (DWORD1(v107))
        free(*((void **)&v106 + 1));
      sub_22E8D1BC4(v104, (uint64_t)&v104);
      sub_22E80F94C((uint64_t *)&v105);
      result = (uint64_t)sub_22E80F94C(&v103);
      if ((v68 & 1) != 0 || *(_WORD *)(a1 + 32) != 65)
        return result;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v17);
      if (*(_WORD *)(a1 + 32) == 26)
        goto LABEL_10;
    }
    sub_22E849F6C(a1, (uint64_t)&v102, 0);
LABEL_21:
    v20 = *(unsigned __int16 *)(a1 + 32);
    goto LABEL_22;
  }
  v7 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v7 + 312) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v7 + 316) = 1567;
  if (*(char *)(v7 + 311) < 0)
  {
    **(_BYTE **)(v7 + 288) = 0;
    *(_QWORD *)(v7 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v7 + 288) = 0;
    *(_BYTE *)(v7 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&v119, v7);
  v8 = v119;
  if (!v119)
  {
    v8 = (uint64_t *)sub_22E3B8AAC(v120);
    v119 = v8;
  }
  *((_BYTE *)v8 + *(unsigned __int8 *)v8 + 1) = 3;
  v9 = v119;
  v10 = *(unsigned __int8 *)v119;
  *(_BYTE *)v119 = v10 + 1;
  v9[v10 + 2] = 127;
  result = sub_22E3BB0B8((uint64_t)&v119);
  v12 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v12 + 752))
  {
    *(_BYTE *)(v12 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(v12 + 48) + 6) = 1;
  }
  *(_WORD *)(a1 + 32) = 1;
  return result;
}

BOOL sub_22E827A08(uint64_t a1, BOOL *a2, _DWORD *a3)
{
  unsigned int v3;
  unsigned int *v5;
  int v6;
  int v10;
  _BYTE v11[32];

  v3 = *(unsigned __int16 *)(a1 + 32) - 27;
  if (v3 <= 1)
  {
    v5 = (unsigned int *)(a1 + 16);
    if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
      v6 = 1941;
    else
      v6 = 1851;
    v10 = *(unsigned __int16 *)(a1 + 32) - 27;
    sub_22E884578(a1, (int *)(a1 + 16), v6, (uint64_t)v11);
    sub_22E3BB0B8((uint64_t)v11);
    *a2 = *(unsigned __int16 *)(a1 + 32) == 27;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
    v3 = v10;
    *a3 = *(_DWORD *)(a1 + 40);
  }
  return v3 < 2;
}

__n128 sub_22E827AC4(uint64_t a1, __n128 *a2)
{
  __n128 *v2;
  uint64_t v4;
  unint64_t v5;
  __n128 *v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  char *v11;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v9 = v5 + 32 * v4;
    if (v5 <= (unint64_t)a2 && v9 > (unint64_t)a2)
    {
      v11 = (char *)a2 - v5;
      sub_22E829174(a1);
      v5 = *(_QWORD *)a1;
      v2 = (__n128 *)&v11[*(_QWORD *)a1];
    }
    else
    {
      sub_22E829174(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = (__n128 *)(v5 + 32 * *(unsigned int *)(a1 + 8));
  result = *v2;
  v6[1].n128_u64[0] = v2[1].n128_u64[0];
  *v6 = result;
  v8 = v2[1].n128_u64[1];
  v2[1].n128_u64[1] = 0;
  v6[1].n128_u64[1] = v8;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22E827B60(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v2 + 56) + 20) & 0x1000000000) != 0
    && ((v3 = *(_QWORD *)(v2 + 2816), v3 < *(unsigned int *)(v2 + 2784))
      ? (v4 = *(_QWORD *)(v2 + 2776) + 24 * v3)
      : (v4 = sub_22F162D2C(v2, 1u)),
        *(_WORD *)(v4 + 16) == 19))
  {
    return sub_22F2E20A4(a1);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_22E827BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  _BYTE v24[32];
  _BYTE v25[16];
  __int16 v26;
  uint64_t v27;
  _QWORD v28[3];
  char v29;
  __int16 v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[128];
  char *v34;
  uint64_t v35;
  _QWORD v36[13];

  v36[12] = *MEMORY[0x24BDAC8D0];
  v34 = (char *)v36;
  v35 = 0x400000000;
  v9 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88);
  v30 = 261;
  v28[0] = a4;
  v28[1] = a5;
  llvm::MemoryBuffer::getMemBufferCopy();
  v10 = sub_22F1E1980(v9, &v27, 0, 0, 0, a6);
  v11 = v27;
  v27 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_22E72C63C(v9, v10, 0, (llvm::MemoryBufferRef *)v25);
  sub_22F140CA8((uint64_t)v28, v10, (uint64_t)v25, *(_QWORD *)(a1 + 8), 1);
  v29 = 1;
  v33[65] = 1;
  do
  {
    sub_22F14651C(v28, (uint64_t)v25);
    v12 = sub_22E4EF088((uint64_t)&v34, (unint64_t)v25, 1);
    v13 = &v34[24 * v35];
    v14 = *(_OWORD *)v12;
    *((_QWORD *)v13 + 2) = *(_QWORD *)(v12 + 16);
    *(_OWORD *)v13 = v14;
    LODWORD(v35) = v35 + 1;
  }
  while (v26 != 2);
  v28[0] = &unk_24FAC8A48;
  sub_22E730D24((uint64_t)v33);
  if (v31 != &v32)
    free(v31);
  v15 = &v34[24 * v35];
  *((_DWORD *)v15 - 2) = 0;
  *((_QWORD *)v15 - 3) = 0;
  *((_QWORD *)v15 - 2) = 0;
  *((_WORD *)v15 - 4) = 1;
  *((_DWORD *)v15 - 6) = *(_DWORD *)(a1 + 16);
  *((_QWORD *)v15 - 2) = a2;
  v16 = sub_22E4EF088((uint64_t)&v34, a1 + 16, 1);
  v17 = &v34[24 * v35];
  v18 = *(_OWORD *)v16;
  *((_QWORD *)v17 + 2) = *(_QWORD *)(v16 + 16);
  *(_OWORD *)v17 = v18;
  LODWORD(v35) = v35 + 1;
  sub_22F1735E4(*(_QWORD *)(a1 + 8), v34, v35, 0, 0, 0);
  sub_22E80F0F0(a1, 0);
  sub_22E885C30(a1, 0);
  v19 = sub_22E80FC30(a1, 0, 5, 3, 0, 0);
  v20 = v19;
  if (!v21 && v19 && (*(_WORD *)(a1 + 32) != 1 || *(_QWORD *)(a1 + 24) != a2))
  {
    v22 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v22 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v22 + 316) = 1752;
    if (*(char *)(v22 + 311) < 0)
    {
      **(_BYTE **)(v22 + 288) = 0;
      *(_QWORD *)(v22 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v22 + 288) = 0;
      *(_BYTE *)(v22 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v24, v22);
    sub_22E3BB0B8((uint64_t)v24);
  }
  while (*(_WORD *)(a1 + 32) != 1)
    sub_22E80F0F0(a1, 0);
  if (*(_QWORD *)(a1 + 24) == a2)
    sub_22E80F0F0(a1, 0);
  sub_22E885CF4(a1);
  if (v34 != (char *)v36)
    free(v34);
  return v20;
}

uint64_t sub_22E827EEC(uint64_t result, char *a2, char *a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;

  v3 = a3 - a2;
  v4 = *(unsigned int *)(result + 8);
  if (v4 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    v9 = a3 - a2;
    v10 = result;
    v7 = a3;
    v8 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    a2 = v8;
    v3 = v9;
    a3 = v7;
    result = v10;
    v4 = *(unsigned int *)(v10 + 8);
  }
  if (a2 != a3)
  {
    v5 = (_QWORD *)(*(_QWORD *)result + 8 * v4);
    do
    {
      v6 = *(_QWORD *)a2;
      a2 += 8;
      *v5++ = v6;
    }
    while (a2 != a3);
  }
  *(_DWORD *)(result + 8) = v4 + (v3 >> 3);
  return result;
}

uint64_t sub_22E827F78(uint64_t a1)
{
  uint64_t v3;

  sub_22E827FFC(a1);
  sub_22E8D1BC4(*(_QWORD *)(a1 + 1112), a1 + 1112);
  sub_22E80F94C((uint64_t *)(a1 + 1120));
  sub_22E80F94C((uint64_t *)(a1 + 1104));
  sub_22E8284B8((void **)(a1 + 112));
  if ((*(_DWORD *)(a1 + 104) & 0x80000000) != 0)
  {
    v3 = *(_QWORD *)(a1 + 96);
    if (v3)
      MEMORY[0x2348A0E84](v3, 0x1020C803A5D3213);
  }
  if (*(_DWORD *)(a1 + 36))
    free(*(void **)(a1 + 24));
  return a1;
}

double sub_22E827FFC(uint64_t a1)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if ((*(_DWORD *)(a1 + 104) & 0x80000000) != 0)
  {
    v9 = *(_QWORD *)(a1 + 96);
    if (v9)
      MEMORY[0x2348A0E84](v9, 0x1020C803A5D3213);
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = 120 * v2;
    do
    {
      sub_22E8280F4(*(_QWORD *)(a1 + 112) + v4);
      v4 += 120;
    }
    while (v5 != v4);
    v6 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD *)(a1 + 112) - 96;
      v8 = 120 * v6;
      do
      {
        sub_22E80F94C((uint64_t *)(v7 + v8));
        v8 -= 120;
      }
      while (v8);
    }
  }
  *(_DWORD *)(a1 + 120) = 0;
  sub_22E820B10((_QWORD *)(a1 + 1096));
  *(_QWORD *)(a1 + 1128) = 0;
  *(_WORD *)(a1 + 1088) &= 0xFC3Fu;
  result = 0.0;
  *(_QWORD *)(a1 + 1680) = 0;
  return result;
}

void sub_22E8280F4(uint64_t a1)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      sub_22E82827C(a1 + 32);
      break;
    case 2:
      sub_22E82832C(a1 + 32);
      break;
    case 3:
      sub_22E828144(a1 + 32);
      break;
    case 5:
      if (*(_DWORD *)(a1 + 68))
        free(*(void **)(a1 + 56));
      break;
    default:
      return;
  }
}

uint64_t sub_22E828144(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  void **v6;

  sub_22E8283DC(a1);
  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    v5 = sub_22F3067E4(result);
    result = MEMORY[0x2348A0E9C](v5, 0x1090C407291BB10);
  }
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    if (*(_DWORD *)(v3 + 84))
      free(*(void **)(v3 + 72));
    sub_22E8D1BC4(*(_QWORD *)(v3 + 40), v3 + 40);
    sub_22E80F94C((uint64_t *)(v3 + 48));
    sub_22E80F94C((uint64_t *)(v3 + 32));
    result = MEMORY[0x2348A0E9C](v3, 0x10B2C40A1729EA3);
  }
  v4 = *(_WORD *)a1 >> 4;
  if (*(_WORD *)a1 >> 4)
  {
    if (v4 == 11)
    {
      v6 = *(void ***)(a1 + 64);
      if (v6)
      {
        if (*v6 != v6 + 2)
          free(*v6);
        JUMPOUT(0x2348A0E9CLL);
      }
    }
    else if (v4 == 2)
    {
      result = *(_QWORD *)(a1 + 64);
      if (result)
LABEL_21:
        JUMPOUT(0x2348A0E84);
    }
  }
  else if (*(_DWORD *)(a1 + 20))
  {
    result = *(_QWORD *)(a1 + 64);
    if (result)
      goto LABEL_21;
  }
  return result;
}

uint64_t sub_22E82827C(uint64_t result)
{
  unint64_t v1;
  unint64_t i;
  void **v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 28);
  if ((_DWORD)v1)
  {
    v4 = result;
    for (i = 0; i < v1; ++i)
    {
      v3 = *(void ***)(*(_QWORD *)(v4 + 32) + 8 * i);
      if (v3)
      {
        if (*v3 != v3 + 2)
          free(*v3);
        result = MEMORY[0x2348A0E9C](v3, 0x10A0C40DC805EF0);
        v1 = *(unsigned int *)(v4 + 28);
      }
    }
    if (v1)
    {
      result = *(_QWORD *)(v4 + 32);
      if (result)
        JUMPOUT(0x2348A0E84);
    }
  }
  return result;
}

uint64_t sub_22E82832C(uint64_t result)
{
  unint64_t v1;
  unint64_t i;
  void **v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v4 = result;
    for (i = 0; i < v1; ++i)
    {
      v3 = *(void ***)(*(_QWORD *)(v4 + 24) + 8 * i);
      if (v3)
      {
        if (*v3 != v3 + 2)
          free(*v3);
        result = MEMORY[0x2348A0E9C](v3, 0x10A0C40DC805EF0);
        v1 = *(unsigned int *)(v4 + 16);
      }
    }
    if (v1)
    {
      result = *(_QWORD *)(v4 + 24);
      if (result)
        JUMPOUT(0x2348A0E84);
    }
  }
  return result;
}

uint64_t sub_22E8283DC(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 24;
    do
    {
      v5 = *(_QWORD *)(v1 + 40);
      v6 = *(void ***)(v5 + v4);
      *(_QWORD *)(v5 + v4) = 0;
      if (v6)
      {
        if (*v6 != v6 + 2)
          free(*v6);
        result = MEMORY[0x2348A0E9C](v6, 0x1080C4070FE8099);
        v2 = *(unsigned int *)(v1 + 16);
      }
      ++v3;
      v4 += 32;
    }
    while (v3 < v2);
  }
  v7 = *(_WORD *)v1;
  if ((*(_WORD *)v1 & 0x100) != 0)
  {
    v8 = *(_QWORD *)(v1 + 40);
    if (v8)
    {
      v11 = *(_QWORD *)(v8 - 8);
      v10 = v8 - 8;
      v9 = v11;
      if (v11)
      {
        v12 = 32 * v9;
        do
        {
          sub_22E80FBD8((void ***)(v10 + v12));
          v12 -= 32;
        }
        while (v12);
      }
      result = MEMORY[0x2348A0E84](v10 - 8, 0x1020C805028CB4ALL);
      v7 = *(_WORD *)v1;
    }
    *(_WORD *)v1 = v7 & 0xFEFF;
  }
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

void **sub_22E8284B8(void **result)
{
  void **v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void **v5;
  void **v6;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v6 = result;
    v3 = (char *)(v1 - 12);
    v4 = 120 * v2;
    do
    {
      sub_22E80F94C((uint64_t *)&v3[v4]);
      v4 -= 120;
    }
    while (v4);
    result = v6;
    v1 = (void **)*v6;
  }
  if (v1 != result + 2)
  {
    v5 = result;
    free(v1);
    return v5;
  }
  return result;
}

uint64_t sub_22E828530(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 84))
    free(*(void **)(a1 + 72));
  sub_22E8D1BC4(*(_QWORD *)(a1 + 40), a1 + 40);
  sub_22E80F94C((uint64_t *)(a1 + 48));
  sub_22E80F94C((uint64_t *)(a1 + 32));
  return a1;
}

uint64_t sub_22E828580(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;

  v3 = (uint64_t *)result;
  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result > 7uLL)
  {
    if ((v4 & 4) == 0)
    {
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      result = operator new();
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x400000000;
      *v3 = result | 4;
      v6 = result & 0xFFFFFFFFFFFFFFF8;
      v7 = *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v7 >= *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        v10 = result & 0xFFFFFFFFFFFFFFF8;
        result = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v6 = v10;
        v7 = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
      ++*(_DWORD *)(v6 + 8);
      v4 = *v3;
    }
    v8 = v4 & 0xFFFFFFFFFFFFFFF8;
    v9 = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v9 >= *(_DWORD *)(v8 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(_DWORD *)(v8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = a2;
    ++*(_DWORD *)(v8 + 8);
  }
  else
  {
    *(_QWORD *)result = a2 & 0xFFFFFFFFFFFFFFFBLL;
  }
  return result;
}

uint64_t sub_22E828690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, const void *a6, unsigned int a7, unsigned int a8, int a9)
{
  char v9;
  __int16 v13;
  int v14;

  v9 = a8;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a5;
  v13 = sub_22F1ACD3C(a2, a4, a8, 0);
  v14 = (*(unsigned __int8 *)(a1 + 30) << 16) & 0x800000 | ((v9 & 7) << 16) | 0x780000;
  *(_WORD *)(a1 + 28) = v13;
  *(_BYTE *)(a1 + 30) = BYTE2(v14);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a9;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 48) & 0xFFFFFFFEFF000000 | (unsigned __int16)a7;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = sub_22E8D2434(a1);
  if (a7)
    memcpy((void *)(a1 + 80), a6, 8 * a7);
  return a1;
}

unint64_t *sub_22E828758(unint64_t *a1, char *__dst)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = __dst;
  v3 = *a1;
  if ((*a1 & 4) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v5 = __dst + 8;
      v6 = *(unsigned int *)(v4 + 8);
      v7 = *(_QWORD *)v4 + 8 * v6;
      if ((char *)v7 != v2 + 8)
      {
        memmove(v2, v5, v7 - (_QWORD)(v2 + 8));
        LODWORD(v6) = *(_DWORD *)(v4 + 8);
      }
      *(_DWORD *)(v4 + 8) = v6 - 1;
    }
  }
  else
  {
    if (a1 == (unint64_t *)__dst)
    {
      v3 = 0;
      *(_QWORD *)__dst = 0;
    }
    return &a1[v3 > 7];
  }
  return (unint64_t *)v2;
}

uint64_t sub_22E8287D8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;

  *(_QWORD *)result = a2;
  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 216);
  if (v2)
  {
    v3 = (*(_WORD *)(v2 + 8) & 0x7F) - 19;
    v2 -= 48;
    if (v3 >= 5)
      v2 = 0;
  }
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = a2 + 2624;
  *(_BYTE *)(result + 24) = *(_BYTE *)(a2 + 2624);
  *(_BYTE *)(a2 + 2624) = v2 != 0;
  if (v2)
  {
    v4 = result;
    sub_22F31E4EC(*(_QWORD *)(a2 + 88), v2);
    return v4;
  }
  return result;
}

unint64_t sub_22E828854(uint64_t a1, _BYTE *a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
    return sub_22E883528(a1, 0, a2);
  *a2 = 0;
  return sub_22F2E2774(a1);
}

char *sub_22E828878(unint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t **v14;
  unint64_t v16;

  if (a3 == a4)
    return (char *)a2;
  v6 = (uint64_t *)a1;
  v7 = *a1;
  if ((*a1 & 4) == 0)
  {
    v8 = (a2 - (uint64_t)a1) >> 3;
    if (v7 >= 8)
    {
      v9 = v7 & 0xFFFFFFFFFFFFFFF8;
      v10 = operator new();
      *(_QWORD *)v10 = v10 + 16;
      *(_QWORD *)(v10 + 8) = 0x400000000;
      *v6 = v10 | 4;
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      v12 = *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v12 >= *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        v16 = v10 & 0xFFFFFFFFFFFFFFF8;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v16;
        v12 = *(_DWORD *)(v16 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v11 + 8 * v12) = v9;
      ++*(_DWORD *)(v11 + 8);
      v7 = *v6;
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  v8 = (a2 - *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8)) >> 3;
  if (v7 <= 7)
  {
LABEL_9:
    if (a3 + 1 != a4)
    {
      v13 = operator new();
      *(_QWORD *)v13 = v13 + 16;
      *(_QWORD *)(v13 + 8) = 0x400000000;
      v7 = v13 | 4;
      *v6 = v13 | 4;
      goto LABEL_11;
    }
    *a1 = *a3 & 0xFFFFFFFFFFFFFFFBLL;
    return (char *)v6;
  }
LABEL_11:
  v14 = (uint64_t **)(v7 & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 4) != 0)
    v6 = *v14;
  return sub_22E8289FC((uint64_t)v14, (uint64_t)&v6[v8], a3, a4);
}

char *sub_22E8289FC(uint64_t a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_22E5223E0(a1, __src, a4);
    return (char *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v12 = (char *)a4 - (char *)__src;
    v13 = a4 - __src;
    if (v9 + v13 > *(unsigned int *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v13 = a4 - v5;
      v7 = *(_QWORD *)a1;
      v9 = *(unsigned int *)(a1 + 8);
    }
    v10 = (char *)(v7 + 8 * v8);
    v14 = (_BYTE *)(v7 + 8 * v9);
    if ((v14 - v10) >> 3 < v13)
    {
      v19 = (v14 - v10) >> 3;
      v16 = v9 + (v12 >> 3);
      *(_DWORD *)(a1 + 8) = v16;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v16 - 8 * v19), v10, v14 - v10);
        v17 = v10;
        do
        {
          v18 = *v5++;
          *(_QWORD *)v17 = v18;
          v17 += 8;
          --v19;
        }
        while (v19);
      }
      if (v5 != a4)
        memcpy(v14, v5, (char *)a4 - (char *)v5);
    }
    else
    {
      v15 = &v14[-8 * v13];
      sub_22E827EEC(a1, v15, (char *)(v7 + 8 * v9));
      if (v15 != v10)
        memmove(&v14[-(v15 - v10)], v10, v15 - v10);
      if (v5 != a4)
        memmove(v10, v5, (char *)a4 - (char *)v5);
    }
  }
  return v10;
}

uint64_t sub_22E828B78(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 360))
  {
    sub_22EA7E84C(*(_QWORD **)a1, *(_QWORD *)(a1 + 352), 0);
    *(_BYTE *)(a1 + 360) = 0;
  }
  sub_22E828BC0(a1 + 8);
  return a1;
}

uint64_t sub_22E828BC0(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(char **)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3)
  {
    v5 = 80 * v3;
    do
    {
      sub_22E8AEED4((unint64_t)v2);
      v2 += 80;
      v5 -= 80;
    }
    while (v5);
    v2 = *(char **)(a1 + 8);
  }
  if (v2 != (char *)(a1 + 24))
    free(v2);
  return a1;
}

uint64_t sub_22E828C30(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 360))
  {
    sub_22EA7E84C(*(_QWORD **)a1, *(_QWORD *)(a1 + 352), 0);
    *(_BYTE *)(a1 + 360) = 1;
  }
  sub_22E828BC0(a1 + 8);
  return a1;
}

uint64_t sub_22E828C78(uint64_t a1)
{
  int *v3;
  int v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 16))
  {
    v3 = *(int **)(a1 + 8);
    v4 = *v3;
    v5 = v3[1];
    v6 = *((_QWORD *)v3 + 1);
    v7 = !v4 || v5 == 0;
    if (v7 || v6 != 0)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a1 + 88);
      v10 = *(_QWORD **)(v9 + 12888);
      do
      {
        v10 = (_QWORD *)*v10;
        v11 = v10[45];
      }
      while (!v11);
      *(_QWORD *)(v9 + 216) = v11;
    }
  }
  if (*(_BYTE *)(a1 + 17))
    sub_22E885CF4(*(_QWORD *)a1);
  return a1;
}

unint64_t sub_22E828CF0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 120 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F2E3198(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F2E3198(a1);
    }
  }
  return v3;
}

uint64_t *sub_22E828D58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v6;
  unint64_t v7;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 4) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    if ((v3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v6 = (_QWORD *)operator new();
      v7 = (unint64_t)v6;
      *v6 = v6 + 2;
      v6[1] = 0x400000000;
      if (*(_DWORD *)(v4 + 8))
        sub_22E828DE4((uint64_t)v6, v4);
      *a1 = v7 | 4;
    }
  }
  return a1;
}

uint64_t sub_22E828DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 8 * v3);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      a2 = v9;
    }
    else if ((_DWORD)v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      v5 = v8;
      a2 = v10;
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

_QWORD *sub_22E828EC4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *result;
  if (*(_BYTE *)(*result + 48))
  {
    v2 = result[1];
    v3 = *(_DWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 64) = sub_22E828EF4;
    *(_QWORD *)(v1 + 72) = v2;
    *(_QWORD *)(v1 + 56) = 0;
    *(_DWORD *)(v1 + 52) = v3;
  }
  return result;
}

unint64_t sub_22E828EF4(uint64_t *a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = *a1;
  result = sub_22E9C487C();
  *(_BYTE *)(v1 + 948) = 1;
  return result;
}

char **sub_22E828F5C(char **result)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char **v6;
  char **v7;

  v1 = *result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v3 = 56 * v2;
    do
    {
      if (*(_DWORD *)&v1[v3 - 12])
      {
        v5 = v3;
        v6 = result;
        v4 = v1;
        free(*(void **)&v1[v3 - 24]);
        v1 = v4;
        v3 = v5;
        result = v6;
      }
      v3 -= 56;
    }
    while (v3);
    v1 = *result;
  }
  if (v1 != (char *)(result + 2))
  {
    v7 = result;
    free(v1);
    return v7;
  }
  return result;
}

void sub_22E828FE4(uint64_t **a1, uint64_t a2, unsigned int **a3)
{
  unsigned int *v5;

  v5 = (unsigned int *)sub_22EA37C50((unsigned int *)(*a1)[11], *(uint64_t **)((*a1)[11] + 12888), *a1[1], *(unsigned int *)(*(_QWORD *)a2 + 88), (_QWORD **)a2, *(_QWORD *)(a2 + 1688), 0, 0);
  if (!*(_BYTE *)(a2 + 2056))
  {
    sub_22EA7E84C(*(_QWORD **)(a2 + 1696), *(_QWORD *)(a2 + 2048), v5);
    *(_BYTE *)(a2 + 2056) = 1;
  }
  *a3 = v5;
}

uint64_t sub_22E829060(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)result + 368 * v2;
    v6 = 0x400000000;
    do
    {
      v7 = v4 + v3;
      v8 = a2 + v3;
      *(_QWORD *)v8 = *(_QWORD *)(v4 + v3);
      *(_QWORD *)(v8 + 8) = *(_QWORD *)(v4 + v3 + 8);
      *(_QWORD *)(a2 + v3 + 16) = a2 + v3 + 32;
      *(_QWORD *)(v8 + 24) = v6;
      if (*(_DWORD *)(v4 + v3 + 24))
      {
        v17 = v3;
        v15 = v5;
        v16 = v4;
        v14 = result;
        v12 = a2;
        v13 = v6;
        sub_22F2E34CC(a2 + v3 + 16, v7 + 16);
        v6 = v13;
        v5 = v15;
        v4 = v16;
        v3 = v17;
        a2 = v12;
        result = v14;
      }
      *(_DWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v8 + 352) = *(_QWORD *)(v7 + 352);
      *(_BYTE *)(v8 + 360) = *(_BYTE *)(v7 + 360);
      *(_BYTE *)(v7 + 360) = 0;
      v3 += 368;
    }
    while (v7 + 368 != v5);
    v9 = *(_DWORD *)(result + 8);
    if (v9)
    {
      v10 = 368 * v9;
      v11 = *(_QWORD *)result - 368;
      do
      {
        result = sub_22E828B78(v11 + v10);
        v10 -= 368;
      }
      while (v10);
    }
  }
  return result;
}

char **sub_22E82915C(uint64_t *a1)
{
  return sub_22F314324(*(_QWORD *)(*a1 + 88), a1[1], a1[2], 0);
}

void sub_22E829174(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = *(char **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = &v3[32 * v4];
    v6 = v2;
    do
    {
      v7 = *(_OWORD *)v3;
      *(_QWORD *)(v6 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)v6 = v7;
      v8 = *((_QWORD *)v3 + 3);
      *((_QWORD *)v3 + 3) = 0;
      *(_QWORD *)(v6 + 24) = v8;
      v3 += 32;
      v6 += 32;
    }
    while (v3 != v5);
    v3 = *(char **)a1;
    v9 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v9)
    {
      v10 = v3 - 8;
      v11 = 32 * v9;
      do
      {
        sub_22E80FBD8((void ***)&v10[v11]);
        v11 -= 32;
      }
      while (v11);
      v3 = *(char **)a1;
    }
  }
  if (v3 != (char *)(a1 + 16))
    free(v3);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

unint64_t sub_22E829238(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  __int128 v26;
  int64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  std::string *v75;
  uint64_t v76;
  size_t size;
  uint64_t v78;
  __int128 *v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  std::string *v83;
  size_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  unint64_t v92;
  __int16 v93;
  __int16 v94;
  __int16 __src;
  std::string *__srca;
  int v97;
  uint64_t v98;
  _BYTE v99[32];
  _BYTE v100[32];
  unsigned __int8 *v101;
  _BYTE v102[12];
  char v103;
  __int128 v104;
  unint64_t v105;
  const char *v106;
  uint64_t v107[4];
  std::string v108;
  std::string v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  _BYTE v114[32];
  _BYTE v115[32];
  _BYTE v116[32];
  _BYTE v117[32];
  _BYTE v118[32];
  _BYTE v119[32];
  uint64_t v120[4];
  uint64_t (*v121)(uint64_t);
  uint64_t v122;
  uint64_t v123;
  _BYTE v124[32];
  _BYTE v125[32];
  _QWORD v126[2];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  char v134;
  __int128 v135;
  unint64_t v136;
  void *v137;
  char v138;
  uint64_t *v139;
  uint64_t v140;
  _QWORD v141[15];

  v141[12] = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v8 = *(_DWORD *)(a1 + 40);
  sub_22E8287D8((uint64_t)&v131, a1);
  if (*(_WORD *)(a1 + 32) == 3)
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v9 + 752))
    {
      *(_BYTE *)(v9 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v9 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22E9C782C(*(_QWORD **)(a1 + 88), *(_QWORD **)(*(_QWORD *)(a1 + 88) + 12888));
    v10 = 0;
    goto LABEL_90;
  }
  v139 = v141;
  v140 = 0x400000000;
  v128 = 0;
  v127 = 0;
  v129 = a1 + 960;
  v130 = 0;
  v126[0] = a1;
  v126[1] = &v127;
  sub_22E82A230(v126);
  if (*(_WORD *)(a1 + 32) == 5)
  {
    v98 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v7);
    v97 = *(_DWORD *)(a1 + 40);
    if (*(_WORD *)(a1 + 32) == 71)
    {
      v11 = 0;
      while (1)
      {
        v12 = *(_QWORD *)(a1 + 8);
        v13 = *(_QWORD *)(v12 + 2816);
        if (v13 >= *(unsigned int *)(v12 + 2784))
        {
          v14 = sub_22F162D2C(v12, 1u);
          v12 = *(_QWORD *)(a1 + 8);
        }
        else
        {
          v14 = *(_QWORD *)(v12 + 2776) + 24 * v13;
        }
        if (*(_WORD *)(v14 + 16) != 5)
        {
          v15 = *(_QWORD *)(v12 + 2816);
          if (v15 >= *(unsigned int *)(v12 + 2784))
            v16 = sub_22F162D2C(v12, 1u);
          else
            v16 = *(_QWORD *)(v12 + 2776) + 24 * v15;
          if (*(_WORD *)(v16 + 16) != 92)
            goto LABEL_41;
          v17 = v7;
          if (*(_WORD *)(a1 + 32) != 1)
          {
            v18 = *(_QWORD *)(a1 + 8);
            v19 = *(_QWORD *)(v18 + 2816) + 1;
            if (v19 >= *(unsigned int *)(v18 + 2784))
              v17 = sub_22F162D2C(v18, 2u);
            else
              v17 = *(_QWORD *)(v18 + 2776) + 24 * v19;
          }
          if (*(_WORD *)(v17 + 16) != 5)
            goto LABEL_41;
          v12 = *(_QWORD *)(a1 + 8);
        }
        v120[0] = 0;
        LODWORD(v120[1]) = 0;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(v12, (unsigned int *)v7);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v20 = *(unsigned __int16 *)(a1 + 32);
        if (v20 == 92)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v7);
          v21 = *(_DWORD *)(a1 + 40);
          HIDWORD(v120[0]) = v21;
          if (!v11)
            v11 = v21;
          v20 = *(unsigned __int16 *)(a1 + 32);
        }
        if ((v20 - 7) >= 6)
        {
          v22 = 0;
          if ((v20 - 13) >= 6 && v20 != 1)
            v22 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          v22 = 0;
        }
        v120[2] = v22;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v7);
        LODWORD(v120[1]) = *(_DWORD *)(a1 + 40);
        v23 = v139;
        if (v140 >= HIDWORD(v140))
        {
          if (v139 <= v120 && &v139[3 * v140] > v120)
          {
            v27 = (char *)v120 - (char *)v139;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v23 = v139;
            v24 = (uint64_t *)((char *)v139 + v27);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v24 = v120;
            v23 = v139;
          }
        }
        else
        {
          v24 = v120;
        }
        v25 = &v23[3 * v140];
        v26 = *(_OWORD *)v24;
        v25[2] = v24[2];
        *(_OWORD *)v25 = v26;
        LODWORD(v140) = v140 + 1;
        if (*(_WORD *)(a1 + 32) != 71)
          goto LABEL_41;
      }
    }
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v97 = 0;
    v98 = 0;
  }
LABEL_41:
  sub_22E82A230(v126);
  v28 = v127;
  if ((_DWORD)v140 && (_DWORD)v127)
  {
    v29 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v29 + 312) = v127;
    *(_DWORD *)(v29 + 316) = 1763;
    if (*(char *)(v29 + 311) < 0)
    {
      **(_BYTE **)(v29 + 288) = 0;
      *(_QWORD *)(v29 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v29 + 288) = 0;
      *(_BYTE *)(v29 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v125, v29);
    sub_22E3BB0B8((uint64_t)v125);
  }
  if (*(_WORD *)(a1 + 32) != 63)
  {
    v120[0] = a1 + 944;
    LOBYTE(v120[1]) = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v120[2] = a1;
    LODWORD(v120[3]) = 1572887;
    strcpy((char *)&v120[3] + 4, ">");
    v123 = 0;
    v121 = sub_22E80CED8;
    v122 = 0;
    if (sub_22E811DE8((uint64_t)v120))
    {
      if (v98)
      {
        sub_22E884578(a1, (int *)v7, 15, (uint64_t)&v101);
        v33 = v101;
        if (!v101)
        {
          v33 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v102);
          v101 = v33;
        }
        v34 = &v33[*v33];
      }
      else
      {
        sub_22E884578(a1, (int *)v7, 18, (uint64_t)&v101);
        v42 = v101;
        if (!v101)
        {
          v42 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v102);
          v101 = v42;
        }
        v42[*v42 + 1] = 4;
        v43 = v101;
        v44 = *v101;
        *v101 = v44 + 1;
        *(_QWORD *)&v43[8 * v44 + 16] = 5;
        v34 = &v43[(v44 + 1)];
      }
      v34[1] = 4;
      v45 = v101;
      v46 = *v101;
      *v101 = v46 + 1;
      *(_QWORD *)&v45[8 * v46 + 16] = 23;
      sub_22E3BB0B8((uint64_t)&v101);
LABEL_86:
      v10 = 0;
LABEL_87:
      *(_BYTE *)v120[0] = v120[1];
      goto LABEL_88;
    }
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888);
    if ((*(_BYTE *)(v35 + 8) & 0xA0) != 0)
    {
LABEL_68:
      v36 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v36 + 312) = v123;
      *(_DWORD *)(v36 + 316) = 1625;
      if (*(char *)(v36 + 311) < 0)
      {
        **(_BYTE **)(v36 + 288) = 0;
        *(_QWORD *)(v36 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v36 + 288) = 0;
        *(_BYTE *)(v36 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v119, v36);
      sub_22E3BB0B8((uint64_t)v119);
      LOWORD(v101) = 24;
      sub_22E885940(a1, (unsigned __int16 *)&v101, 1, 0);
      goto LABEL_86;
    }
    v49 = *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888);
    do
    {
      if ((*((_BYTE *)v49 + 9) & 8) != 0)
        goto LABEL_68;
      v49 = (uint64_t *)*v49;
    }
    while (v49);
    if (*(_QWORD *)(v35 + 56) || *(_QWORD *)(v35 + 24))
      goto LABEL_68;
    if (!(_DWORD)v140)
    {
LABEL_173:
      if (a4)
      {
LABEL_174:
        if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
          v86 = 1933;
        else
          v86 = 1835;
        v70 = a4;
        v87 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v87 + 312) = a4;
        *(_DWORD *)(v87 + 316) = v86;
        if (*(char *)(v87 + 311) < 0)
        {
          **(_BYTE **)(v87 + 288) = 0;
          *(_QWORD *)(v87 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v87 + 288) = 0;
          *(_BYTE *)(v87 + 311) = 0;
        }
        v67 = v99;
        sub_22E78E558((uint64_t)v99, v87);
        goto LABEL_180;
      }
LABEL_181:
      v70 = 0;
      goto LABEL_182;
    }
    if (a4)
    {
      v50 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v50 + 312) = a4;
      *(_DWORD *)(v50 + 316) = 1580;
      if (*(char *)(v50 + 311) < 0)
      {
        **(_BYTE **)(v50 + 288) = 0;
        *(_QWORD *)(v50 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v50 + 288) = 0;
        *(_BYTE *)(v50 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v118, v50);
      sub_22E3BB0B8((uint64_t)v118);
      goto LABEL_174;
    }
    v51 = *(_QWORD *)(a1 + 8);
    v52 = **(_QWORD **)(v51 + 56);
    if ((v52 & 0x1000) != 0)
    {
      v65 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v65 + 312) = *(_DWORD *)v139;
      *(_DWORD *)(v65 + 316) = 1905;
      if (*(char *)(v65 + 311) < 0)
      {
        **(_BYTE **)(v65 + 288) = 0;
        *(_QWORD *)(v65 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v65 + 288) = 0;
        *(_BYTE *)(v65 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v117, v65);
      sub_22E3BB0B8((uint64_t)v117);
      if (!v11)
        goto LABEL_181;
      v66 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v66 + 312) = v11;
      *(_DWORD *)(v66 + 316) = 1913;
      if (*(char *)(v66 + 311) < 0)
      {
        **(_BYTE **)(v66 + 288) = 0;
        *(_QWORD *)(v66 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v66 + 288) = 0;
        *(_BYTE *)(v66 + 311) = 0;
      }
      v67 = v116;
      v68 = v116;
    }
    else
    {
      if ((v52 & 0x800) == 0)
      {
        v53 = *(_OWORD *)(a1 + 64);
        v112 = *(_OWORD *)(a1 + 48);
        v113 = v53;
        v110 = *(_OWORD *)v7;
        v111 = *(_QWORD *)(v7 + 16);
        v92 = *(unsigned int *)(a1 + 2344);
        v94 = *(_WORD *)(a1 + 82);
        __src = *(_WORD *)(a1 + 80);
        v93 = *(_WORD *)(a1 + 84);
        sub_22F1629F8(v51);
        LOWORD(v101) = 24;
        sub_22E885940(a1, (unsigned __int16 *)&v101, 1, 2);
        v54 = *(_DWORD *)(a1 + 16);
        v55 = *(unsigned __int16 *)(a1 + 32);
        v56 = *(_QWORD *)(a1 + 8);
        v57 = *(_QWORD *)(v56 + 2832);
        *(_QWORD *)(v56 + 2816) = *(_QWORD *)(v57 - 8);
        *(_QWORD *)(v56 + 2832) = v57 - 8;
        v58 = *(_QWORD *)(v56 + 1008);
        v91 = v54;
        if (v58)
        {
          if (*(_QWORD *)(v58 + 224))
            v59 = 3;
          else
            v59 = 0;
        }
        else if (*(_QWORD *)(v56 + 1040))
        {
          v59 = 1;
        }
        else
        {
          v59 = 2;
        }
        *(_DWORD *)(v56 + 1048) = v59;
        v60 = v113;
        *(_OWORD *)(a1 + 48) = v112;
        *(_OWORD *)(a1 + 64) = v60;
        *(_OWORD *)v7 = v110;
        *(_QWORD *)(v7 + 16) = v111;
        sub_22E80FADC(a1 + 2336, v92);
        *(_WORD *)(a1 + 80) = __src;
        *(_WORD *)(a1 + 82) = v94;
        *(_WORD *)(a1 + 84) = v93;
        if (v55 != 24)
        {
          v71 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v71 + 312) = *(_DWORD *)v139;
          *(_DWORD *)(v71 + 316) = 1845;
          if (*(char *)(v71 + 311) < 0)
          {
            **(_BYTE **)(v71 + 288) = 0;
            *(_QWORD *)(v71 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v71 + 288) = 0;
            *(_BYTE *)(v71 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v101, v71);
          v72 = *(unsigned int *)v139 | ((unint64_t)LODWORD(v139[3 * v140 - 2]) << 32);
          v73 = v101;
          if (!v101)
          {
            v73 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v102);
            v101 = v73;
          }
          sub_22E4D6448((uint64_t)(v73 + 336), v72, 1);
          sub_22E3BB0B8((uint64_t)&v101);
          goto LABEL_169;
        }
        memset(&v109, 0, sizeof(v109));
        if ((_DWORD)v140)
        {
          v61 = 24 * v140;
          v62 = v139 + 2;
          do
          {
            std::string::append(&v109, " { ");
            if (*((_DWORD *)v62 - 3))
              std::string::append(&v109, "inline ");
            std::string::append(&v109, "namespace ");
            v63 = *v62;
            v62 += 3;
            std::string::append(&v109, (const std::string::value_type *)(*(_QWORD *)(v63 + 16) + 16), **(unsigned int **)(v63 + 16));
            v61 -= 24;
          }
          while (v61);
          v64 = v140;
          memset(&v108, 0, sizeof(v108));
          if ((_DWORD)v140)
          {
            do
            {
              std::string::append(&v108, "} ");
              --v64;
            }
            while (v64);
          }
        }
        else
        {
          memset(&v108, 0, sizeof(v108));
        }
        v74 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v74 + 312) = *(_DWORD *)v139;
        *(_DWORD *)(v74 + 316) = 1845;
        if (*(char *)(v74 + 311) < 0)
        {
          **(_BYTE **)(v74 + 288) = 0;
          *(_QWORD *)(v74 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v74 + 288) = 0;
          *(_BYTE *)(v74 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v107, v74);
        v75 = &v109;
        if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v75 = (std::string *)v109.__r_.__value_.__r.__words[0];
        __srca = v75;
        v76 = *(unsigned int *)v139;
        if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v109.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v109.__r_.__value_.__l.__size_;
        v78 = LODWORD(v139[3 * v140 - 2]);
        *(_QWORD *)&v102[4] = 0;
        v103 = 0;
        LOBYTE(v106) = 0;
        v101 = (unsigned __int8 *)(v76 | (v78 << 32));
        v102[0] = 1;
        if (size >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (size >= 0x17)
        {
          v81 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((size | 7) != 0x17)
            v81 = size | 7;
          v82 = v81 + 1;
          v79 = (__int128 *)operator new(v81 + 1);
          v136 = v82 | 0x8000000000000000;
          *(_QWORD *)&v135 = v79;
          *((_QWORD *)&v135 + 1) = size;
        }
        else
        {
          HIBYTE(v136) = size;
          v79 = &v135;
          if (!size)
          {
            v80 = &v135;
LABEL_155:
            *((_BYTE *)v80 + size) = 0;
            v104 = v135;
            v105 = v136;
            sub_22E6D82D0(v107, &v101);
            if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v83 = &v108;
            else
              v83 = (std::string *)v108.__r_.__value_.__r.__words[0];
            if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v84 = *((_BYTE *)&v108.__r_.__value_.__s + 23) & 0x7F;
            else
              v84 = v108.__r_.__value_.__l.__size_;
            sub_22E729148(v83, v84, v91, 0, (uint64_t)&v135);
            sub_22E6D82D0(v107, &v135);
            if (v138 < 0)
              operator delete(v137);
            if (SHIBYTE(v105) < 0)
              operator delete((void *)v104);
            sub_22E3BB0B8((uint64_t)v107);
            if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v108.__r_.__value_.__l.__data_);
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v109.__r_.__value_.__l.__data_);
LABEL_169:
            if (v11)
            {
              v85 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v85 + 312) = v11;
              *(_DWORD *)(v85 + 316) = 1836;
              if (*(char *)(v85 + 311) < 0)
              {
                **(_BYTE **)(v85 + 288) = 0;
                *(_QWORD *)(v85 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v85 + 288) = 0;
                *(_BYTE *)(v85 + 311) = 0;
              }
              sub_22E78E558((uint64_t)v100, v85);
              sub_22E3BB0B8((uint64_t)v100);
            }
            goto LABEL_173;
          }
        }
        v80 = v79;
        memmove(v79, __srca, size);
        goto LABEL_155;
      }
      v69 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v69 + 312) = *(_DWORD *)v139;
      *(_DWORD *)(v69 + 316) = 1905;
      if (*(char *)(v69 + 311) < 0)
      {
        **(_BYTE **)(v69 + 288) = 0;
        *(_QWORD *)(v69 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v69 + 288) = 0;
        *(_BYTE *)(v69 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v115, v69);
      sub_22E3BB0B8((uint64_t)v115);
      if (!v11)
        goto LABEL_181;
      v66 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v66 + 312) = v11;
      *(_DWORD *)(v66 + 316) = 1836;
      if (*(char *)(v66 + 311) < 0)
      {
        **(_BYTE **)(v66 + 288) = 0;
        *(_QWORD *)(v66 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v66 + 288) = 0;
        *(_BYTE *)(v66 + 311) = 0;
      }
      v67 = v114;
      v68 = v114;
    }
    sub_22E78E558((uint64_t)v68, v66);
    v70 = 0;
LABEL_180:
    sub_22E3BB0B8((uint64_t)v67);
LABEL_182:
    sub_22E885C30(a1, 8);
    *(_QWORD *)&v112 = 0;
    v10 = sub_22EAC1730(*(_QWORD **)(a1 + 88), *(uint64_t ***)(*(_QWORD *)(a1 + 88) + 12888), v70, v8, v97, v98, v123, (uint64_t)&v127, (unint64_t *)&v112);
    v88 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 88);
    llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
    v101 = (unsigned __int8 *)&unk_24FAC2E78;
    *(_QWORD *)&v104 = v88;
    *((_QWORD *)&v104 + 1) = v10;
    LODWORD(v105) = v8;
    v106 = "parsing namespace";
    sub_22E82A364(a1, (uint64_t)&v139, 0, (uint64_t)&v127, (uint64_t)v120);
    sub_22E885CF4(a1);
    v89 = HIDWORD(v123);
    *a3 = HIDWORD(v123);
    sub_22EAC1E80(*(_QWORD *)(a1 + 88), v10, v89);
    if ((_QWORD)v112)
    {
      v90 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)&v135 = v112;
      *((_QWORD *)&v135 + 1) = v10;
      v10 = (unint64_t)sub_22EFDA148(*(_QWORD *)(v90 + 88), (uint64_t *)&v135, 2u) | 1;
    }
    llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)&v101);
    goto LABEL_87;
  }
  if (!v98)
  {
    sub_22E884578(a1, (int *)v7, 15, (uint64_t)v120);
    v37 = (unsigned __int8 *)v120[0];
    if (!v120[0])
    {
      v37 = (unsigned __int8 *)sub_22E3B8AAC(v120[1]);
      v120[0] = (uint64_t)v37;
    }
    v37[*v37 + 1] = 4;
    v38 = v120[0];
    v39 = *(unsigned __int8 *)v120[0];
    *(_BYTE *)v120[0] = v39 + 1;
    *(_QWORD *)(v38 + 8 * v39 + 16) = 5;
    sub_22E3BB0B8((uint64_t)v120);
    strcpy((char *)v120, ">");
    sub_22E885940(a1, (unsigned __int16 *)v120, 1, 0);
    goto LABEL_74;
  }
  if (v28)
  {
    v30 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v30 + 312) = v28;
    *(_DWORD *)(v30 + 316) = 1762;
    if (*(char *)(v30 + 311) < 0)
    {
      **(_BYTE **)(v30 + 288) = 0;
      *(_QWORD *)(v30 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v30 + 288) = 0;
      *(_BYTE *)(v30 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v124, v30);
    sub_22E3BB0B8((uint64_t)v124);
  }
  if (a4)
  {
    v31 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v31 + 312) = a4;
    *(_DWORD *)(v31 + 316) = 1579;
    if (*(char *)(v31 + 311) < 0)
    {
      **(_BYTE **)(v31 + 288) = 0;
      *(_QWORD *)(v31 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v31 + 288) = 0;
      *(_BYTE *)(v31 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v101, v31);
    BYTE4(v120[2]) = 0;
    *(uint64_t *)((char *)&v120[1] + 4) = 0;
    v122 = 0;
    v120[3] = 0;
    v121 = 0;
    LOBYTE(v123) = 0;
    LODWORD(v120[0]) = a4;
    HIDWORD(v120[0]) = a4;
    LOBYTE(v120[1]) = 1;
    sub_22E6D82D0((uint64_t *)&v101, v120);
    if (SHIBYTE(v122) < 0)
      operator delete((void *)v120[3]);
    sub_22E3BB0B8((uint64_t)&v101);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v7);
  if (*(_WORD *)(a1 + 32) != 3)
  {
    memset(v120, 0, sizeof(v120));
    sub_22E8408AC(a1, (uint64_t)v120, 0, 0, 0, 0, 0, 0, 1, 0);
    if (*(_WORD *)(a1 + 32) == 5)
    {
      if (!LODWORD(v120[0]) || !HIDWORD(v120[0]) || v120[1])
      {
        v40 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v7);
        v41 = *(_DWORD *)(a1 + 40);
        *a3 = *(_DWORD *)(a1 + 16);
        if (sub_22E8847B4(a1, 0x3Eu, 1529, "", 0))
        {
          LOWORD(v135) = 62;
          sub_22E885940(a1, (unsigned __int16 *)&v135, 1, 0);
        }
        v10 = sub_22EAC64E0(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v8, v97, v98, v120, v41, v40);
        goto LABEL_105;
      }
    }
    else
    {
      sub_22E884578(a1, (int *)v7, 19, (uint64_t)&v101);
      sub_22E3BB0B8((uint64_t)&v101);
    }
    LOWORD(v135) = 62;
    sub_22E885940(a1, (unsigned __int16 *)&v135, 1, 0);
    v10 = 0;
LABEL_105:
    if (HIDWORD(v120[3]))
      free((void *)v120[2]);
    goto LABEL_88;
  }
  v32 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v32 + 752))
  {
    *(_BYTE *)(v32 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(v32 + 48) + 6) = 1;
  }
  *(_WORD *)(a1 + 32) = 1;
  sub_22F31505C(*(_QWORD **)(a1 + 88), *(uint64_t ***)(*(_QWORD *)(a1 + 88) + 12888));
LABEL_74:
  v10 = 0;
LABEL_88:
  sub_22E8D1BC4(v129, (uint64_t)&v129);
  sub_22E80F94C(&v130);
  sub_22E80F94C(&v128);
  if (v139 != v141)
    free(v139);
LABEL_90:
  if (v132)
  {
    v47 = *(_QWORD *)(v131 + 88);
    *(_QWORD *)(v47 + 216) = v132 + 48;
    *(_QWORD *)(v47 + 224) = 0;
  }
  *v133 = v134;
  return v10;
}

_QWORD *sub_22E82A230(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  v1 = result;
  v2 = *result;
  do
  {
    while (1)
    {
      v3 = *(unsigned __int16 *)(v2 + 32);
      if (v3 == 186)
        result = (_QWORD *)sub_22E810414(v2, v1[1], 0, 0, 0);
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 56) + 1) & 2) == 0)
        break;
      result = (_QWORD *)sub_22E8836FC(v2, 0, 0);
      if (!(_DWORD)result)
        break;
      if ((**(_QWORD **)(*(_QWORD *)(v2 + 8) + 56) & 0x800) != 0)
        v4 = 1906;
      else
        v4 = 1847;
      v5 = *(_QWORD *)(v2 + 96);
      *(_DWORD *)(v5 + 312) = *(_DWORD *)(v2 + 16);
      *(_DWORD *)(v5 + 316) = v4;
      if (*(char *)(v5 + 311) < 0)
      {
        **(_BYTE **)(v5 + 288) = 0;
        *(_QWORD *)(v5 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v5 + 288) = 0;
        *(_BYTE *)(v5 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v9, v5);
      v6 = (unsigned __int8 *)v9[0];
      if (!v9[0])
      {
        v6 = (unsigned __int8 *)sub_22E3B8AAC(v9[1]);
        v9[0] = v6;
      }
      v6[*v6 + 1] = 2;
      v7 = v9[0];
      v8 = *(unsigned __int8 *)v9[0];
      *(_BYTE *)v9[0] = v8 + 1;
      *(_QWORD *)(v7 + 8 * v8 + 16) = 0;
      sub_22E3BB0B8((uint64_t)v9);
      result = (_QWORD *)sub_22E835FD0(v2, v1[1]);
    }
  }
  while (v3 == 186);
  return result;
}

void **sub_22E82A364(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_DWORD *)(a2 + 8) == a3)
  {
    while (1)
    {
      v7 = *(unsigned __int16 *)(a1 + 32);
      if ((v7 - 436) <= 2)
      {
        if ((sub_22F2F1928(a1) & 1) != 0)
          return (void **)sub_22E811E8C(a5);
        v7 = *(unsigned __int16 *)(a1 + 32);
      }
      if (v7 == 24 || v7 == 1)
        break;
      v14 = 0;
      v15 = 0;
      v16 = a1 + 960;
      v17 = 0;
      sub_22E8103B4(a1, &v14, 0);
      sub_22E887B48(a1, (uint64_t)&v14, 0);
      sub_22E8D1BC4(v16, (uint64_t)&v16);
      sub_22E80F94C(&v17);
      sub_22E80F94C(&v15);
    }
    return (void **)sub_22E811E8C(a5);
  }
  else
  {
    sub_22E885C30(a1, 8);
    v14 = 0;
    v13 = sub_22EAC1730(*(_QWORD **)(a1 + 88), *(uint64_t ***)(*(_QWORD *)(a1 + 88) + 12888), *(_DWORD *)(*(_QWORD *)a2 + 24 * a3 + 4), *(_DWORD *)(*(_QWORD *)a2 + 24 * a3), *(_DWORD *)(*(_QWORD *)a2 + 24 * a3 + 8), *(_QWORD *)(*(_QWORD *)a2 + 24 * a3 + 16), *(_DWORD *)(a5 + 48), a4, &v14);
    sub_22E82A364(a1, a2, a3 + 1, a4, a5);
    sub_22E885CF4(a1);
    return sub_22EAC1E80(*(_QWORD *)(a1 + 88), v13, *(_DWORD *)(a5 + 52));
  }
}

unint64_t sub_22E82A4C4(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _DWORD *v28;
  unsigned int v29;
  _OWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  uint64_t v38[4];
  __int16 v39;

  sub_22E8287D8((uint64_t)&v34, a1);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v10 = *(unsigned __int16 *)(a1 + 32);
  if (v10 == 3)
  {
    v11 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v11 + 752))
    {
      *(_BYTE *)(v11 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v11 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22F314BAC(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888));
LABEL_5:
    v12 = 0;
    goto LABEL_43;
  }
  v28 = a4;
  v29 = *(_DWORD *)(a1 + 40);
  while (v10 == 147)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v13 = *(unsigned int *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v14 + 312) = v13;
    *(_DWORD *)(v14 + 316) = 1767;
    if (*(char *)(v14 + 311) < 0)
    {
      **(_BYTE **)(v14 + 288) = 0;
      *(_QWORD *)(v14 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v14 + 288) = 0;
      *(_BYTE *)(v14 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v38, v14);
    BYTE4(v30[1]) = 0;
    *(_QWORD *)((char *)v30 + 12) = 0;
    v31 = 0;
    v32 = 0;
    *((_QWORD *)&v30[1] + 1) = 0;
    v33 = 0;
    *(_QWORD *)&v30[0] = v13 | (v13 << 32);
    BYTE8(v30[0]) = 1;
    sub_22E6D82D0(v38, v30);
    if (SHIBYTE(v32) < 0)
      operator delete(*((void **)&v30[1] + 1));
    sub_22E3BB0B8((uint64_t)v38);
    v10 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v10 != 139)
  {
    v12 = sub_22E82A938(a1, a2, (uint64_t)a3, v29, v28, a5, 3u);
    goto LABEL_43;
  }
  if (*a3)
  {
    v15 = sub_22E87EC34((uint64_t)a3);
    v16 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v16 + 312) = v29;
    *(_DWORD *)(v16 + 316) = 1747;
    if (*(char *)(v16 + 311) < 0)
    {
      **(_BYTE **)(v16 + 288) = 0;
      *(_QWORD *)(v16 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v16 + 288) = 0;
      *(_BYTE *)(v16 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v38, v16);
    v17 = (unsigned __int8 *)v38[0];
    if (!v38[0])
    {
      v17 = (unsigned __int8 *)sub_22E3B8AAC(v38[1]);
      v38[0] = (uint64_t)v17;
    }
    v17[*v17 + 1] = 2;
    v18 = v38[0];
    v19 = *(unsigned __int8 *)v38[0];
    *(_BYTE *)v38[0] = v19 + 1;
    *(_QWORD *)(v18 + 8 * v19 + 16) = 0;
    sub_22E4D6448(v18 + 336, v15, 1);
    BYTE4(v30[1]) = 0;
    *(_QWORD *)((char *)v30 + 12) = 0;
    v31 = 0;
    v32 = 0;
    *((_QWORD *)&v30[1] + 1) = 0;
    v33 = 0;
    *(_QWORD *)&v30[0] = v15;
    BYTE8(v30[0]) = 1;
    sub_22E6D82D0(v38, v30);
    if (SHIBYTE(v32) < 0)
      operator delete(*((void **)&v30[1] + 1));
    sub_22E3BB0B8((uint64_t)v38);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  if (*(_WORD *)(a1 + 32) == 3)
  {
    v20 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v20 + 752))
    {
      *(_BYTE *)(v20 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v20 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22F314E34(*(_QWORD **)(a1 + 88), *(uint64_t ***)(*(_QWORD *)(a1 + 88) + 12888));
    goto LABEL_5;
  }
  v21 = *(_DWORD *)(a1 + 40);
  memset(v30, 0, sizeof(v30));
  sub_22E8408AC(a1, (uint64_t)v30, 0, 0, 0, 0, 0, 0, 1, 0);
  if (*(_WORD *)(a1 + 32) == 5)
  {
    if (!LODWORD(v30[0]) || !DWORD1(v30[0]) || *((_QWORD *)&v30[0] + 1))
    {
      v23 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v24 = *(_DWORD *)(a1 + 40);
      if (*(_WORD *)(a1 + 32) == 186)
      {
        sub_22E810414(a1, a5, 0, 0, 0);
        v25 = 1526;
      }
      else
      {
        v25 = 1529;
      }
      *v28 = *(_DWORD *)(a1 + 16);
      if (sub_22E8847B4(a1, 0x3Eu, v25, "", 0))
      {
        LOWORD(v38[0]) = 62;
        sub_22E885940(a1, (unsigned __int16 *)v38, 1, 0);
      }
      v12 = sub_22F3287E4(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v29, v21, (uint64_t *)v30, v24, v23, a5);
      goto LABEL_41;
    }
    LOWORD(v38[0]) = 62;
    v22 = (unsigned __int16 *)v38;
  }
  else
  {
    sub_22E884578(a1, (int *)(a1 + 16), 19, (uint64_t)v38);
    sub_22E3BB0B8((uint64_t)v38);
    v39 = 62;
    v22 = (unsigned __int16 *)&v39;
  }
  sub_22E885940(a1, v22, 1, 0);
  v12 = 0;
LABEL_41:
  if (HIDWORD(v30[1]))
    free(*(void **)&v30[1]);
LABEL_43:
  if (v35)
  {
    v26 = *(_QWORD *)(v34 + 88);
    *(_QWORD *)(v26 + 216) = v35 + 48;
    *(_QWORD *)(v26 + 224) = 0;
  }
  *v36 = v37;
  return v12;
}

unint64_t sub_22E82A938(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _DWORD *a5, uint64_t a6, unsigned int a7)
{
  unsigned int v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  uint64_t v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v69;
  void *v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char v77;
  void *v78;
  char *v79;
  size_t v80;
  uint64_t v81;
  int **v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  _DWORD *v87;
  _BYTE v90[32];
  unsigned __int8 *v91;
  _BYTE v92[12];
  char v93;
  void *__p;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE v106[32];
  uint64_t v107[4];
  uint64_t v108[4];
  void *v109;
  _BYTE v110[12];
  char v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  int v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v12 = a2 - 9;
  if (*(_WORD *)(a1 + 32) != 86)
  {
    v87 = a5;
    v14 = 0;
    goto LABEL_5;
  }
  v13 = a7;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v14 = *(_DWORD *)(a1 + 40);
  if (v12 < 2)
  {
    v87 = a5;
LABEL_5:
    v102 = 0;
    v103 = 0;
    v104 = a1 + 960;
    v105 = 0;
    sub_22E8103B4(a1, &v102, 0);
    if (v12 <= 1 && *(_WORD *)(a1 + 32) != 5)
    {
      v23 = 0;
LABEL_126:
      sub_22E8D1BC4(v104, (uint64_t)&v104);
      sub_22E80F94C(&v105);
      v46 = &v103;
      goto LABEL_127;
    }
    v86 = v14;
    *(_QWORD *)&v120 = 0;
    *(_QWORD *)&v121 = 0;
    DWORD2(v121) = 0;
    v117 = 0u;
    v118 = 0u;
    LODWORD(v116) = 0;
    LODWORD(v119) = 0;
    v15 = sub_22E82B7F0(a1, a2, (uint64_t)&v116);
    v98 = 0;
    v99 = 0;
    v100 = a1 + 960;
    v101 = 0;
    sub_22E8220E8(a1, 5, &v98, 0);
    if ((_DWORD)v102 && HIDWORD(v102))
    {
      v16 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v16 + 312) = (_DWORD)v102;
      *(_DWORD *)(v16 + 316) = 1447;
      if (*(char *)(v16 + 311) < 0)
      {
        **(_BYTE **)(v16 + 288) = 0;
        *(_QWORD *)(v16 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v16 + 288) = 0;
        *(_BYTE *)(v16 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v108, v16);
      v17 = (void *)(*(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned int *)(a1 + 16) << 32));
      v113 = 0;
      v114 = 0;
      v112 = 0;
      v109 = v17;
      v110[0] = 0;
      *(_QWORD *)&v110[4] = v102;
      v111 = 1;
      v115 = 0;
      sub_22E6D82D0(v108, &v109);
      *(_QWORD *)&v92[4] = 0;
      v93 = 0;
      v95 = 0;
      v96 = 0;
      __p = 0;
      v97 = 0;
      v91 = v102;
      v92[0] = 1;
      sub_22E6D82D0(v108, &v91);
      if (SHIBYTE(v96) < 0)
        operator delete(__p);
      if (SHIBYTE(v114) < 0)
        operator delete(v112);
      sub_22E3BB0B8((uint64_t)v108);
      sub_22E82103C((uint64_t)&v98, (uint64_t)&v102);
    }
    if (v12 >= 2 && *(_WORD *)(a1 + 32) != 63)
    {
      sub_22E817A58(a1, a6);
      if (*(_DWORD *)a3)
      {
        v18 = (void *)sub_22E87EC34(a3);
        v19 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v19 + 312) = a4;
        *(_DWORD *)(v19 + 316) = 1747;
        if (*(char *)(v19 + 311) < 0)
        {
          **(_BYTE **)(v19 + 288) = 0;
          *(_QWORD *)(v19 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v19 + 288) = 0;
          *(_BYTE *)(v19 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v91, v19);
        v20 = v91;
        if (!v91)
        {
          v20 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v92);
          v91 = v20;
        }
        v20[*v20 + 1] = 2;
        v21 = v91;
        v22 = *v91;
        *v91 = v22 + 1;
        *(_QWORD *)&v21[8 * v22 + 16] = 1;
        sub_22E4D6448((uint64_t)(v21 + 336), (uint64_t)v18, 1);
        v111 = 0;
        *(_QWORD *)&v110[4] = 0;
        v113 = 0;
        v114 = 0;
        v112 = 0;
        v115 = 0;
        v109 = v18;
        v110[0] = 1;
        sub_22E6D82D0((uint64_t *)&v91, &v109);
        if (SHIBYTE(v114) < 0)
          operator delete(v112);
        sub_22E3BB0B8((uint64_t)&v91);
        v23 = 0;
      }
      else
      {
        v109 = &v110[8];
        v31 = (unint64_t *)(a6 + 8);
        *(_QWORD *)v110 = 0x800000000;
        while (1)
        {
          sub_22E8220E8(a1, 5, &v98, 0);
          sub_22E817A58(a1, (uint64_t)&v98);
          v32 = *v31;
          if ((*v31 & 4) != 0)
          {
            v35 = v32 & 0xFFFFFFFFFFFFFFF8;
            v34 = *(uint64_t **)v35;
            v33 = (uint64_t *)(*(_QWORD *)v35 + 8 * *(unsigned int *)(v35 + 8));
          }
          else
          {
            v33 = (uint64_t *)&v31[v32 > 7];
            v34 = (uint64_t *)(a6 + 8);
          }
          v36 = &v99;
          if ((v99 & 4) != 0)
            v36 = *(unint64_t **)(v99 & 0xFFFFFFFFFFFFFFF8);
          sub_22E828878(&v99, (uint64_t)v36, v34, v33);
          if ((v15 & 1) != 0)
          {
            LODWORD(v91) = 4063297;
            sub_22E885940(a1, (unsigned __int16 *)&v91, 2, 2);
          }
          else
          {
            v37 = v116;
            if ((_DWORD)v116)
            {
              v38 = a7;
              if ((_DWORD)v119)
              {
                v39 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v39 + 312) = v121;
                *(_DWORD *)(v39 + 316) = 1753;
                if (*(char *)(v39 + 311) < 0)
                {
                  **(_BYTE **)(v39 + 288) = 0;
                  *(_QWORD *)(v39 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v39 + 288) = 0;
                  *(_BYTE *)(v39 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v108, v39);
                *(_QWORD *)&v92[4] = 0;
                v93 = 0;
                v95 = 0;
                v96 = 0;
                __p = 0;
                v97 = 0;
                v91 = (unsigned __int8 *)(v116 | ((unint64_t)v116 << 32));
                v92[0] = 1;
                sub_22E6D82D0(v108, &v91);
                if (SHIBYTE(v96) < 0)
                  operator delete(__p);
                sub_22E3BB0B8((uint64_t)v108);
                v37 = 0;
                LODWORD(v116) = 0;
              }
            }
            else
            {
              v38 = a7;
            }
            v40 = sub_22EAC28A0(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v38, a4, v37, (unsigned int *)&v117, (uint64_t)&v119, SDWORD2(v121), (uint64_t)&v98);
            if (v40)
            {
              v41 = v40;
              v42 = *(unsigned int *)v110;
              if (*(unsigned int *)v110 >= (unint64_t)*(unsigned int *)&v110[4])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v42 = *(unsigned int *)v110;
              }
              *((_QWORD *)v109 + v42) = v41;
              ++*(_DWORD *)v110;
            }
          }
          if (*(_WORD *)(a1 + 32) != 65)
            break;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          sub_22E820B10(&v98);
          LOBYTE(v15) = sub_22E82B7F0(a1, a2, (uint64_t)&v116);
        }
        if (*(_DWORD *)v110 >= 2u)
        {
          if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x800) != 0)
            v43 = 1915;
          else
            v43 = 1844;
          v44 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v44 + 312) = *(_DWORD *)(a1 + 16);
          *(_DWORD *)(v44 + 316) = v43;
          if (*(char *)(v44 + 311) < 0)
          {
            **(_BYTE **)(v44 + 288) = 0;
            *(_QWORD *)(v44 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v44 + 288) = 0;
            *(_BYTE *)(v44 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v90, v44);
          sub_22E3BB0B8((uint64_t)v90);
        }
        *v87 = *(_DWORD *)(a1 + 16);
        if (v99 < 8
          || (v45 = "attributes list", (v99 & 4) != 0)
          && (v99 & 0xFFFFFFFFFFFFFFF8) != 0
          && !*(_DWORD *)((v99 & 0xFFFFFFFFFFFFFFF8) + 8))
        {
          if (v86)
            v45 = "using-enum declaration";
          else
            v45 = "using declaration";
        }
        v56 = strlen(v45);
        if (sub_22E8847B4(a1, 0x3Eu, 16, v45, v56))
        {
          LOWORD(v91) = 62;
          sub_22E885940(a1, (unsigned __int16 *)&v91, 1, 0);
        }
        v23 = sub_22EA2D7B4(*(_QWORD **)(a1 + 88), (unint64_t *)v109, *(unsigned int *)v110);
        if (v109 != &v110[8])
          free(v109);
      }
      goto LABEL_124;
    }
    if (v15)
    {
      LOWORD(v109) = 62;
      sub_22E885940(a1, (unsigned __int16 *)&v109, 1, 0);
      v23 = 0;
      goto LABEL_124;
    }
    if (*(_DWORD *)a6 && *(_DWORD *)(a6 + 4))
    {
      sub_22E8175C8(a1, (uint64_t *)a6, 0);
      sub_22E820B10((_QWORD *)a6);
    }
    if (sub_22E8847B4(a1, 0x3Fu, 15, "", 0))
    {
      LOWORD(v109) = 62;
      sub_22E885940(a1, (unsigned __int16 *)&v109, 1, 0);
LABEL_123:
      v23 = 0;
LABEL_124:
      sub_22E8D1BC4(v100, (uint64_t)&v100);
      sub_22E80F94C(&v101);
      sub_22E80F94C((uint64_t *)&v99);
      if (HIDWORD(v118))
        free((void *)v118);
      goto LABEL_126;
    }
    if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
      v47 = 1922;
    else
      v47 = 1784;
    v48 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v48 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v48 + 316) = v47;
    if (*(char *)(v48 + 311) < 0)
    {
      **(_BYTE **)(v48 + 288) = 0;
      *(_QWORD *)(v48 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v48 + 288) = 0;
      *(_BYTE *)(v48 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v91, v48);
    sub_22E3BB0B8((uint64_t)&v91);
    v49 = *(_DWORD *)a3;
    v51 = *(_DWORD *)a3 != 1 || (_DWORD)v119 != 7;
    v52 = v51 << 31 >> 31;
    if (v49 == 2)
      v52 = 1;
    if (v49 == 3)
      v53 = 2;
    else
      v53 = v52;
    if ((_DWORD)v53 != -1)
    {
      if ((_DWORD)v53)
      {
        v54 = sub_22E87EC34(a3);
        v55 = HIDWORD(v54);
      }
      else
      {
        LODWORD(v54) = *(_DWORD *)(v120 + 36);
        v55 = *(unsigned int *)(v120 + 40);
      }
      v59 = v54;
      v60 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v60 + 312) = v54;
      *(_DWORD *)(v60 + 316) = 1428;
      if (*(char *)(v60 + 311) < 0)
      {
        **(_BYTE **)(v60 + 288) = 0;
        *(_QWORD *)(v60 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v60 + 288) = 0;
        *(_BYTE *)(v60 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v109, v60);
      v61 = (unsigned __int8 *)v109;
      if (!v109)
      {
        v61 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v110);
        v109 = v61;
      }
      v61[*v61 + 1] = 2;
      v62 = v109;
      v63 = *(unsigned __int8 *)v109;
      *(_BYTE *)v109 = v63 + 1;
      v62[v63 + 2] = v53;
      sub_22E4D6448((uint64_t)(v62 + 42), v59 | (v55 << 32), 1);
      v58 = &v109;
      goto LABEL_122;
    }
    if ((_DWORD)v119)
    {
      v57 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v57 + 312) = v121;
      *(_DWORD *)(v57 + 316) = 1426;
      if (*(char *)(v57 + 311) < 0)
      {
        **(_BYTE **)(v57 + 288) = 0;
        *(_QWORD *)(v57 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v57 + 288) = 0;
        *(_BYTE *)(v57 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v108, v57);
      v58 = (void **)v108;
LABEL_122:
      sub_22E3BB0B8((uint64_t)v58);
      LOWORD(v109) = 62;
      sub_22E885940(a1, (unsigned __int16 *)&v109, 1, 0);
      goto LABEL_123;
    }
    if ((_DWORD)v116)
    {
      v65 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v65 + 312) = v116;
      *(_DWORD *)(v65 + 316) = 1426;
      v66 = a7;
      if (*(char *)(v65 + 311) < 0)
      {
        **(_BYTE **)(v65 + 288) = 0;
        *(_QWORD *)(v65 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v65 + 288) = 0;
        *(_BYTE *)(v65 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v107, v65);
      if (DWORD1(v117))
        v67 = (_DWORD)v117 == 0;
      else
        v67 = 1;
      if (v67 && *((_QWORD *)&v117 + 1) == 0)
        v69 = v116;
      else
        v69 = DWORD1(v117);
      v70 = (void *)(v116 | (unint64_t)(v69 << 32));
    }
    else
    {
      if (DWORD1(v117))
        v71 = (_DWORD)v117 == 0;
      else
        v71 = 1;
      v66 = a7;
      if (v71 && !*((_QWORD *)&v117 + 1))
      {
LABEL_153:
        if (DWORD2(v121))
        {
          v73 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v73 + 312) = DWORD2(v121);
          *(_DWORD *)(v73 + 316) = 1427;
          if (*(char *)(v73 + 311) < 0)
          {
            **(_BYTE **)(v73 + 288) = 0;
            *(_QWORD *)(v73 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v73 + 288) = 0;
            *(_BYTE *)(v73 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v107, v73);
          *(_QWORD *)&v110[4] = 0;
          v111 = 0;
          v113 = 0;
          v114 = 0;
          v112 = 0;
          v115 = 0;
          v109 = (void *)(DWORD2(v121) | ((unint64_t)DWORD2(v121) << 32));
          v110[0] = 1;
          sub_22E6D82D0(v107, &v109);
          if (SHIBYTE(v114) < 0)
            operator delete(v112);
          sub_22E3BB0B8((uint64_t)v107);
        }
        v109 = 0;
        if (*(_DWORD *)a3)
          v74 = 25;
        else
          v74 = 24;
        v75 = sub_22E80FC30(a1, 0, v74, v66, &v109, &v98, 0);
        v77 = v76;
        v78 = v109;
        *v87 = *(_DWORD *)(a1 + 16);
        v79 = "alias declaration";
        if (v99 >= 8)
        {
          v79 = "attributes list";
          if ((v99 & 4) != 0 && (v99 & 0xFFFFFFFFFFFFFFF8) != 0 && !*(_DWORD *)((v99 & 0xFFFFFFFFFFFFFFF8) + 8))
            v79 = "alias declaration";
        }
        v80 = strlen(v79);
        if (sub_22E8847B4(a1, 0x3Eu, 16, v79, v80))
        {
          LOWORD(v107[0]) = 62;
          sub_22E885940(a1, (unsigned __int16 *)v107, 1, 0);
        }
        v81 = *(_QWORD *)(a3 + 8);
        if (v81)
        {
          v82 = *(int ***)v81;
          v83 = *(unsigned int *)(v81 + 8);
        }
        else
        {
          v82 = 0;
          v83 = 0;
        }
        v84 = sub_22EAC5BD4(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), a7, v82, v83, a4, (uint64_t)&v119, (uint64_t)&v98, v75, v77, (unint64_t)v109);
        v23 = v84;
        if (v78)
        {
          v85 = *(_QWORD *)(a1 + 88);
          v109 = v78;
          *(_QWORD *)v110 = v84;
          v23 = (unint64_t)sub_22EFDA148(*(_QWORD *)(v85 + 88), (uint64_t *)&v109, 2u) | 1;
        }
        goto LABEL_124;
      }
      v72 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v72 + 312) = v117;
      *(_DWORD *)(v72 + 316) = 1426;
      if (*(char *)(v72 + 311) < 0)
      {
        **(_BYTE **)(v72 + 288) = 0;
        *(_QWORD *)(v72 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v72 + 288) = 0;
        *(_BYTE *)(v72 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v107, v72);
      v70 = (void *)v117;
    }
    *(_QWORD *)&v110[4] = 0;
    v111 = 0;
    v113 = 0;
    v114 = 0;
    v112 = 0;
    v115 = 0;
    v109 = v70;
    v110[0] = 1;
    sub_22E6D82D0(v107, &v109);
    if (SHIBYTE(v114) < 0)
      operator delete(v112);
    sub_22E3BB0B8((uint64_t)v107);
    goto LABEL_153;
  }
  if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x1000) != 0)
    v24 = 1917;
  else
    v24 = 1859;
  v25 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v25 + 312) = v14;
  *(_DWORD *)(v25 + 316) = v24;
  if (*(char *)(v25 + 311) < 0)
  {
    **(_BYTE **)(v25 + 288) = 0;
    *(_QWORD *)(v25 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v25 + 288) = 0;
    *(_BYTE *)(v25 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v106, v25);
  sub_22E3BB0B8((uint64_t)v106);
  sub_22E817A58(a1, a6);
  v116 = 0;
  *((_QWORD *)&v117 + 1) = 0;
  v118 = 0uLL;
  v119 = a1 + 960;
  v131 = 0;
  v120 = 0u;
  v121 = 0u;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0;
  sub_22E81E93C();
  if (*(_DWORD *)a3)
  {
    v26 = (void *)sub_22E87EC34(a3);
    v27 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v27 + 312) = a4;
    *(_DWORD *)(v27 + 316) = 1747;
    if (*(char *)(v27 + 311) < 0)
    {
      **(_BYTE **)(v27 + 288) = 0;
      *(_QWORD *)(v27 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v27 + 288) = 0;
      *(_BYTE *)(v27 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v91, v27);
    v28 = v91;
    if (!v91)
    {
      v28 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v92);
      v91 = v28;
    }
    v28[*v28 + 1] = 2;
    v29 = v91;
    v30 = *v91;
    *v91 = v30 + 1;
    *(_QWORD *)&v29[8 * v30 + 16] = 1;
    sub_22E4D6448((uint64_t)(v29 + 336), (uint64_t)v26, 1);
    v111 = 0;
    *(_QWORD *)&v110[4] = 0;
    v113 = 0;
    v114 = 0;
    v112 = 0;
    v115 = 0;
    v109 = v26;
    v110[0] = 1;
    sub_22E6D82D0((uint64_t *)&v91, &v109);
    if (SHIBYTE(v114) < 0)
      operator delete(v112);
    sub_22E3BB0B8((uint64_t)&v91);
    v23 = 0;
  }
  else
  {
    v23 = sub_22EAC3CF0(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v13, a4, v14, (uint64_t)&v116);
    *a5 = *(_DWORD *)(a1 + 16);
    if (sub_22E8847B4(a1, 0x3Eu, 16, "using-enum declaration", 0x16uLL))
    {
      LOWORD(v109) = 62;
      sub_22E885940(a1, (unsigned __int16 *)&v109, 1, 0);
    }
  }
  if (DWORD1(v122))
    free(*((void **)&v121 + 1));
  sub_22E8D1BC4(v119, (uint64_t)&v119);
  sub_22E80F94C((uint64_t *)&v120);
  v46 = (uint64_t *)&v118 + 1;
LABEL_127:
  sub_22E80F94C(v46);
  return v23;
}

uint64_t sub_22E82B7F0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  _BYTE v39[32];
  uint64_t v40;
  _BYTE v41[32];

  *(_DWORD *)(a3 + 72) = 0;
  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = a3 + 8;
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  v7 = a3 + 40;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = *(unsigned __int16 *)(a1 + 32);
  if (v8 == 152)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    *(_DWORD *)a3 = *(_DWORD *)(a1 + 40);
    v8 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v8 == 311)
  {
    v9 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v9 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v9 + 316) = 1742;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v41, v9);
    sub_22E3BB0B8((uint64_t)v41);
    return 1;
  }
  v40 = 0;
  if ((sub_22E8408AC(a1, v6, 0, 0, 0, 0, 0, &v40, 0, 1) & 1) != 0
    || *(_DWORD *)(a3 + 8) && *(_DWORD *)(a3 + 12) && !*(_QWORD *)(a3 + 16))
  {
    return 1;
  }
  v12 = *(unsigned __int16 *)(a1 + 32);
  if (a2 != 7)
    goto LABEL_48;
  v13 = *(_QWORD *)(a1 + 8);
  if ((**(_QWORD **)(v13 + 56) & 0x200) == 0)
    goto LABEL_48;
  if (v12 != 5)
    goto LABEL_51;
  v14 = *(_QWORD *)(v13 + 2816);
  if (v14 >= *(unsigned int *)(v13 + 2784))
    v15 = sub_22F162D2C(v13, 1u);
  else
    v15 = *(_QWORD *)(v13 + 2776) + 24 * v14;
  if (*(_WORD *)(v15 + 16) != 62)
  {
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(v16 + 2816);
    v18 = v17 >= *(unsigned int *)(v16 + 2784) ? sub_22F162D2C(v16, 1u) : *(_QWORD *)(v16 + 2776) + 24 * v17;
    if (*(_WORD *)(v18 + 16) != 65)
    {
      v19 = *(_QWORD *)(a1 + 8);
      v20 = *(_QWORD *)(v19 + 2816);
      v21 = v20 >= *(unsigned int *)(v19 + 2784) ? sub_22F162D2C(v19, 1u) : *(_QWORD *)(v19 + 2776) + 24 * v20;
      if (*(_WORD *)(v21 + 16) != 26)
      {
        v22 = *(_QWORD *)(a1 + 8);
        v23 = *(_QWORD *)(v22 + 2816);
        v24 = v23 >= *(unsigned int *)(v22 + 2784) ? sub_22F162D2C(v22, 1u) : *(_QWORD *)(v22 + 2776) + 24 * v23;
        if (*(_WORD *)(v24 + 16) != 19)
        {
          v25 = *(_QWORD *)(a1 + 8);
          v26 = *(_QWORD *)(v25 + 2816);
          v27 = v26 >= *(unsigned int *)(v25 + 2784) ? sub_22F162D2C(v25, 1u) : *(_QWORD *)(v25 + 2776) + 24 * v26;
          if (*(_WORD *)(v27 + 16) != 186)
          {
            v12 = *(unsigned __int16 *)(a1 + 32);
            goto LABEL_48;
          }
        }
      }
    }
  }
  v28 = !*(_DWORD *)(a3 + 12) || *(_DWORD *)(a3 + 8) == 0;
  v29 = *(_QWORD *)(a3 + 16);
  v12 = *(unsigned __int16 *)(a1 + 32);
  if (v28 && !v29)
    goto LABEL_48;
  if ((v12 - 7) >= 6)
  {
    v30 = 0;
    if ((v12 - 13) >= 6 && v12 != 1)
      v30 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v30 = 0;
  }
  if (v40 != v30 || (*(_QWORD *)(v29 + 8) & 6) == 2 && (*(_DWORD *)(*(_QWORD *)(v29 + 16) + 28) & 0x7E) == 0x10)
  {
LABEL_48:
    if (v12 == 5)
    {
      v31 = *(_QWORD *)(a1 + 8);
      v32 = *(_QWORD *)(v31 + 2816);
      if (v32 >= *(unsigned int *)(v31 + 2784))
        v33 = sub_22F162D2C(v31, 1u);
      else
        v33 = *(_QWORD *)(v31 + 2776) + 24 * v32;
      v34 = *(unsigned __int16 *)(v33 + 16) != 63;
LABEL_54:
      v10 = 1;
      if ((sub_22E842CDC(a1, v6, 0, 0, 0, 1, v34, 0, 0, v7) & 1) != 0)
        return v10;
      goto LABEL_55;
    }
LABEL_51:
    v34 = 1;
    goto LABEL_54;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v37 = *(_DWORD *)(a1 + 40);
  v38 = sub_22F3310E4(*(_QWORD *)(a1 + 88), v6, v37);
  *(_DWORD *)(a3 + 40) = 4;
  *(_DWORD *)(a3 + 64) = v37;
  *(_DWORD *)(a3 + 68) = v37;
  *(_QWORD *)(a3 + 48) = v38;
LABEL_55:
  if (*(_WORD *)(a1 + 32) == 26)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    *(_DWORD *)(a3 + 72) = *(_DWORD *)(a1 + 40);
    if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x800) != 0)
      v35 = 1916;
    else
      v35 = 1858;
    v36 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v36 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v36 + 316) = v35;
    if (*(char *)(v36 + 311) < 0)
    {
      **(_BYTE **)(v36 + 288) = 0;
      *(_QWORD *)(v36 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v36 + 288) = 0;
      *(_BYTE *)(v36 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v39, v36);
    sub_22E3BB0B8((uint64_t)v39);
  }
  return 0;
}

unint64_t sub_22E82BC2C(uint64_t a1, _DWORD *a2)
{
  int *v4;
  int v5;
  char *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  _BYTE v38[12];
  char v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44[4];
  _BYTE v45[32];
  unsigned __int8 *v46;
  __int128 v47;
  __int128 __p;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;

  v4 = (int *)(a1 + 16);
  v5 = *(unsigned __int16 *)(a1 + 32);
  if (v5 == 120)
  {
    if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 2) != 0)
      goto LABEL_13;
    sub_22E884578(a1, (int *)(a1 + 16), 1791, (uint64_t)&v46);
    v6 = off_24FCAD0E8[*(unsigned __int16 *)(a1 + 32)];
    v7 = v46;
    if (!v46)
    {
      v7 = (unsigned __int8 *)sub_22E3B8AAC(v47);
      v46 = v7;
    }
    v7[*v7 + 1] = 1;
    v8 = v46;
    v9 = *v46;
    *v46 = v9 + 1;
    *(_QWORD *)&v8[8 * v9 + 16] = v6;
    sub_22E3BB0B8((uint64_t)&v46);
    v5 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v5 == 165)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
    {
      sub_22E884578(a1, v4, 1944, (uint64_t)v45);
      v11 = (unsigned __int8 **)v45;
    }
    else
    {
      sub_22E884578(a1, v4, 1843, (uint64_t)&v37);
      v10 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned int *)(a1 + 16) << 32);
      *(_QWORD *)((char *)&v47 + 4) = 0;
      BYTE12(v47) = 0;
      HIBYTE(__p) = 0;
      v49 = 0xE00000000000000;
      LOBYTE(v50) = 0;
      v46 = (unsigned __int8 *)v10;
      LOBYTE(v47) = 1;
      strcpy((char *)&__p, "_Static_assert");
      sub_22E6D82D0((uint64_t *)&v37, &v46);
      if (SHIBYTE(v49) < 0)
        operator delete((void *)__p);
      v11 = &v37;
    }
    sub_22E3BB0B8((uint64_t)v11);
  }
LABEL_13:
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v4);
  v12 = *(_DWORD *)(a1 + 40);
  v46 = (unsigned __int8 *)(a1 + 944);
  LOBYTE(v47) = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  *((_QWORD *)&v47 + 1) = a1;
  LODWORD(__p) = 1441813;
  WORD2(__p) = 62;
  v49 = 0;
  v50 = 0;
  *((_QWORD *)&__p + 1) = sub_22E80F720;
  if (!sub_22E811DE8((uint64_t)&v46))
  {
    v17 = *(_QWORD *)(a1 + 88);
    v37 = 0;
    v51 = 3;
    v52 = 4;
    v44[0] = *(unsigned int *)(v17 + 1704);
    sub_22EB4DDB8(v17 + 3688, &v52, (int *)v44, (__int16 *)(v17 + 1693), (uint64_t *)&v37, &v51);
    v18 = *(unsigned int *)(v17 + 3696);
    v19 = v18 - 2;
    v20 = *(_QWORD *)(v17 + 3688);
    v21 = *(_DWORD *)(v20 + 576 * (v18 - 2));
    if (v21 == 5)
    {
      *(_BYTE *)(v20 + 576 * v18 - 4) = *(_BYTE *)(v20 + 576 * v19 + 572);
      v22 = 1;
    }
    else if (v21 == 2)
    {
      *(_BYTE *)(v20 + 576 * v18 - 4) = 1;
      v22 = *(_BYTE *)(v20 + 576 * v19 + 573) != 0;
    }
    else
    {
      v22 = 0;
      *(_BYTE *)(v20 + 576 * v18 - 4) = 0;
    }
    v23 = v20 + 576 * v18;
    *(_BYTE *)(v23 - 3) = v22;
    *(_WORD *)(v17 + 1693) = 0;
    if (*(_DWORD *)(v17 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v17 + 1776), (llvm::SmallPtrSetImplBase *)(v23 - 560));
      sub_22EAEAE08(v17 + 1840, (uint64_t *)(v23 - 496));
    }
    v24 = sub_22E839A0C(a1, 0);
    if ((v24 & 1) != 0)
      goto LABEL_29;
    if (*(_WORD *)(a1 + 32) == 22)
    {
      v31 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
      if ((v31 & 0x800) != 0)
      {
        v32 = 1907;
      }
      else if ((v31 & 0x100) != 0)
      {
        v32 = 1803;
      }
      else if ((v31 & 8) != 0)
      {
        v32 = 1894;
      }
      else
      {
        v32 = 1795;
      }
      sub_22E884578(a1, v4, v32, (uint64_t)v44);
      v35 = *(unsigned int *)(a1 + 16);
      v33 = v24 & 0xFFFFFFFFFFFFFFFELL;
      if ((v24 & 0xFFFFFFFFFFFFFFFELL) != 0
        && (*(_BYTE *)v33 & 0xFE) == 0x70
        && (*(_DWORD *)v33 & 0xFC0000) == 0x4C0000
        && *sub_22EFFEB40(*(unsigned __int8 **)(v33 + 24)) == 225)
      {
        v36 = *(unsigned int *)(v33 + 4);
        v39 = 0;
        *(_QWORD *)&v38[4] = 0;
        v41 = 0;
        v42 = 0x100000000000000;
        v43 = 0;
        v37 = (unsigned __int8 *)(v36 | (v36 << 32));
        v38[0] = 1;
        v40 = (void *)44;
      }
      else
      {
        v39 = 0;
        *(_QWORD *)&v38[4] = 0;
        v41 = 0;
        v42 = 0x400000000000000;
        v37 = (unsigned __int8 *)(v35 | (v35 << 32));
        v38[0] = 0;
        v40 = (void *)572661804;
        v43 = 0;
      }
      sub_22E6D82D0(v44, &v37);
      if (SHIBYTE(v42) < 0)
        operator delete(v40);
      sub_22E3BB0B8((uint64_t)v44);
      v34 = 0;
    }
    else
    {
      if (sub_22E8847B4(a1, 0x41u, 15, "", 0))
      {
        LOWORD(v37) = 62;
        sub_22E885940(a1, (unsigned __int16 *)&v37, 1, 0);
LABEL_30:
        v16 = 0;
LABEL_31:
        sub_22EB48E64(v17);
        goto LABEL_32;
      }
      v25 = *(unsigned __int16 *)(a1 + 32);
      if (v25 > 0x12 || ((1 << v25) & 0x76000) == 0)
      {
        sub_22E884578(a1, v4, 20, (uint64_t)&v37);
        v28 = v37;
        if (!v37)
        {
          v28 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v38);
          v37 = v28;
        }
        v28[*v28 + 1] = 2;
        v29 = v37;
        v30 = *v37;
        *v37 = v30 + 1;
        *(_QWORD *)&v29[8 * v30 + 16] = 1;
        sub_22E3BB0B8((uint64_t)&v37);
        goto LABEL_29;
      }
      v26 = sub_22E83E898(a1, 0);
      if ((v26 & 1) != 0)
      {
LABEL_29:
        sub_22F2E2198(a1);
        goto LABEL_30;
      }
      v33 = v24 & 0xFFFFFFFFFFFFFFFELL;
      v34 = (_DWORD *)(v26 & 0xFFFFFFFFFFFFFFFELL);
    }
    sub_22E811E8C((uint64_t)&v46);
    *a2 = *(_DWORD *)(a1 + 16);
    sub_22E884BB4(a1, 1530);
    v16 = sub_22F3296F4(*(_QWORD *)(a1 + 88), v12, (unsigned __int8 *)v33, v34, SHIDWORD(v50));
    goto LABEL_31;
  }
  sub_22E884578(a1, v4, 15, (uint64_t)&v37);
  v13 = v37;
  if (!v37)
  {
    v13 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v38);
    v37 = v13;
  }
  v13[*v13 + 1] = 4;
  v14 = v37;
  v15 = *v37;
  *v37 = v15 + 1;
  *(_QWORD *)&v14[8 * v15 + 16] = 21;
  sub_22E3BB0B8((uint64_t)&v37);
  sub_22F2E2198(a1);
  v16 = 0;
LABEL_32:
  *v46 = v47;
  return v16;
}

uint64_t sub_22E82C1E4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _BYTE v38[32];
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int16 v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[32];
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;

  v5 = (unsigned int *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 16);
  if (*(_WORD *)(a1 + 32) != 407)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
    v13 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)v12 == 8)
    {
      v13 = *(_DWORD *)(a1 + 16);
      if (*(_QWORD *)(v12 + 16) == 0x657079746C636564)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 1926, (uint64_t)v47);
        sub_22E3BB0B8((uint64_t)v47);
        v13 = *(_DWORD *)(a1 + 16);
      }
    }
    *(_DWORD *)(a1 + 40) = v13;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
    v39 = (unsigned __int8 *)(a1 + 944);
    LOBYTE(v40) = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v41 = a1;
    v42 = 1441813;
    v43 = 62;
    v45 = 0;
    v46 = 0;
    v44 = sub_22E80F720;
    if (sub_22E88C650((uint64_t)&v39, 1510, "decltype", 22))
    {
      *(_QWORD *)a2 = *(_QWORD *)a2 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
      *(_DWORD *)(a2 + 120) = 0;
      *(_DWORD *)(a2 + 132) = 0;
      if ((_DWORD)v46 == *v5)
        v8 = v4;
      else
        v8 = v46;
      goto LABEL_58;
    }
    if (*(_WORD *)(a1 + 32) == 76)
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(v14 + 2816);
      v16 = v15 >= *(unsigned int *)(v14 + 2784) ? sub_22F162D2C(v14, 1u) : *(_QWORD *)(v14 + 2776) + 24 * v15;
      if (*(_WORD *)(v16 + 16) == 22)
      {
        if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x400) != 0)
          v23 = 1899;
        else
          v23 = 1805;
        v24 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v24 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v24 + 316) = v23;
        if (*(char *)(v24 + 311) < 0)
        {
          **(_BYTE **)(v24 + 288) = 0;
          *(_QWORD *)(v24 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v24 + 288) = 0;
          *(_BYTE *)(v24 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v38, v24);
        sub_22E3BB0B8((uint64_t)v38);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
        v6 = 0;
        goto LABEL_46;
      }
    }
    v25 = *(_QWORD *)(a1 + 88);
    v51 = 0;
    v50 = 0;
    v49 = 0;
    v48 = *(unsigned int *)(v25 + 1704);
    sub_22EB4DDB8(v25 + 3688, &v51, (int *)&v48, (__int16 *)(v25 + 1693), &v50, &v49);
    v26 = *(unsigned int *)(v25 + 3696);
    v27 = v26 - 2;
    v28 = *(_QWORD *)(v25 + 3688);
    v29 = *(_DWORD *)(v28 + 576 * (v26 - 2));
    if (v29 == 5)
    {
      *(_BYTE *)(v28 + 576 * v26 - 4) = *(_BYTE *)(v28 + 576 * v27 + 572);
      v30 = 1;
    }
    else if (v29 == 2)
    {
      *(_BYTE *)(v28 + 576 * v26 - 4) = 1;
      v30 = *(_BYTE *)(v28 + 576 * v27 + 573) != 0;
    }
    else
    {
      v30 = 0;
      *(_BYTE *)(v28 + 576 * v26 - 4) = 0;
    }
    v31 = v28 + 576 * v26;
    *(_BYTE *)(v31 - 3) = v30;
    *(_WORD *)(v25 + 1693) = 0;
    if (*(_DWORD *)(v25 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v25 + 1776), (llvm::SmallPtrSetImplBase *)(v31 - 560));
      sub_22EAEAE08(v25 + 1840, (uint64_t *)(v31 - 496));
    }
    v32 = *(_QWORD *)(a1 + 88);
    v33 = sub_22E83766C(a1, 0);
    v34 = sub_22E83778C(a1, v33, 1);
    if ((v34 & 1) == 0)
      LOBYTE(v34) = sub_22EBBCB14(v32, (_DWORD *)(v34 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22E837110, (uint64_t)&v50);
    if ((v34 & 1) == 0)
    {
      v6 = sub_22EBCCD68(*(_QWORD *)(a1 + 88));
      sub_22EB48E64(v25);
LABEL_46:
      sub_22E811E8C((uint64_t)&v39);
      v8 = HIDWORD(v46);
      *(_QWORD *)(a2 + 136) = v46 | ((unint64_t)HIDWORD(v46) << 32);
      if ((_DWORD)v8 && (v6 & 1) == 0)
      {
        *v39 = v40;
        goto LABEL_8;
      }
      *(_QWORD *)a2 = *(_QWORD *)a2 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
      *(_DWORD *)(a2 + 120) = 0;
      *(_DWORD *)(a2 + 132) = 0;
LABEL_58:
      *v39 = v40;
      return v8;
    }
    *(_QWORD *)a2 = *(_QWORD *)a2 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
    *(_DWORD *)(a2 + 120) = 0;
    *(_DWORD *)(a2 + 132) = 0;
    LOWORD(v50) = 22;
    if (sub_22E885940(a1, (unsigned __int16 *)&v50, 1, 3))
    {
      v35 = sub_22E80F720(a1);
    }
    else
    {
      v36 = *(_QWORD **)(a1 + 8);
      if (v36[353] == v36[354] || *(_WORD *)(a1 + 32) != 62)
      {
        v8 = *v5;
        goto LABEL_57;
      }
      v36[352] -= 2;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C((unint64_t)v36, v5);
      v35 = sub_22E80F0F0(a1, 0);
    }
    v8 = v35;
LABEL_57:
    sub_22EB48E64(v25);
    goto LABEL_58;
  }
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 20);
  if (v7)
    v8 = v7;
  else
    v8 = v4;
  *(_QWORD *)(a2 + 136) = v8 << 32;
  v9 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 20))
    v9 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(a1 + 40) = v9;
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
  if ((v6 & 1) != 0)
    goto LABEL_28;
LABEL_8:
  v50 = 0;
  LODWORD(v48) = 0;
  if ((v6 & 0xFFFFFFFFFFFFFFFELL) == 0)
  {
    if (!sub_22E8AD898((unint64_t *)a2, 34, v4, &v50, &v48))
      return v8;
    v17 = v48;
    goto LABEL_23;
  }
  v10 = *(_QWORD *)a2;
  v11 = (*(_QWORD *)a2 >> 12) & 0x3F;
  if (v11)
  {
    if (v11 == 50)
      return v8;
    v50 = sub_22F2F2CB0(v11);
    v17 = 3658;
LABEL_23:
    v18 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v18 + 312) = v4;
    *(_DWORD *)(v18 + 316) = v17;
    if (*(char *)(v18 + 311) < 0)
    {
      **(_BYTE **)(v18 + 288) = 0;
      *(_QWORD *)(v18 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v18 + 288) = 0;
      *(_BYTE *)(v18 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v39, v18);
    v19 = v50;
    v20 = v39;
    if (!v39)
    {
      v20 = (unsigned __int8 *)sub_22E3B8AAC(v40);
      v39 = v20;
    }
    v20[*v20 + 1] = 1;
    v21 = v39;
    v22 = *v39;
    *v39 = v22 + 1;
    *(_QWORD *)&v21[8 * v22 + 16] = v19;
    sub_22E3BB0B8((uint64_t)&v39);
LABEL_28:
    *(_QWORD *)a2 = *(_QWORD *)a2 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
    *(_DWORD *)(a2 + 120) = 0;
    *(_DWORD *)(a2 + 132) = 0;
    return v8;
  }
  *(_DWORD *)(a2 + 120) = v4;
  *(_DWORD *)(a2 + 132) = v4;
  *(_QWORD *)a2 = v10 & 0xFFFFFFFFFFDC0FFFLL | 0x1F000;
  *(_QWORD *)(a2 + 8) = v6 & 0xFFFFFFFFFFFFFFFELL;
  return v8;
}

BOOL sub_22E82C7BC(uint64_t a1, char a2)
{
  int v3;
  _BOOL8 result;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v12;

  v3 = *(unsigned __int16 *)(a1 + 32);
  result = 1;
  if (v3 <= 60)
  {
    if (v3 > 18)
    {
      if (v3 > 25)
      {
        if ((v3 - 26) >= 3 && v3 != 30)
        {
          if (v3 == 51)
            return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1;
          return 0;
        }
      }
      else if (v3 != 19
             && (v3 - 21) >= 2
             && (v3 != 24 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0))
      {
        return 0;
      }
    }
    else if (v3 != 5)
    {
      return 0;
    }
    return result;
  }
  if (v3 > 136)
  {
    if (v3 > 324)
    {
      if (v3 != 325)
      {
        if ((v3 - 399) > 0x1B || ((1 << (v3 + 113)) & 0xE000807) == 0)
          return 0;
        return result;
      }
    }
    else
    {
      v6 = v3 + 119;
      if ((v3 - 137) > 0x31)
      {
LABEL_11:
        switch(v3)
        {
          case 302:
            return result;
          case 303:
          case 304:
          case 305:
          case 306:
          case 308:
            result = (**(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 56) >> 5) & 1;
            break;
          case 310:
            goto LABEL_14;
          default:
            return 0;
        }
        return result;
      }
      if (((1 << v6) & 0x6021040003) == 0)
      {
        if (((1 << v6) & 0x2000002000010) != 0)
          return result;
        goto LABEL_11;
      }
    }
LABEL_14:
    v12 = a1;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(v7 + 2816);
    if (v8 >= *(unsigned int *)(v7 + 2784))
      v9 = sub_22F162D2C(v7, 1u);
    else
      v9 = *(_QWORD *)(v7 + 2776) + 24 * v8;
    return (sub_22E821180(v12, v9) & 1) == 0;
  }
  v5 = (v3 - 61);
  if (v5 > 0x35)
    return 0;
  if (((1 << v5) & 0x412) != 0)
    return result;
  if (((1 << v5) & 0x22243084088000) != 0)
    goto LABEL_14;
  if (v5)
    return 0;
  if ((a2 & 1) == 0)
    return *(_BYTE *)(a1 + 945) != 0;
  return result;
}

char **sub_22E82C9D8(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t *a9)
{
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v25;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  unsigned int *v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  uint64_t v41;
  char v42;
  int v43;
  int v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  int v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  char v77;
  int v78;
  unsigned __int8 v79;
  int v80;
  unint64_t v81;
  uint64_t *v82;
  unsigned int v83;
  BOOL v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char v97;
  unint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unsigned __int8 v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  char v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  unsigned __int8 v119;
  unint64_t v120;
  uint64_t v121;
  unsigned __int8 v122;
  _DWORD *v123;
  uint64_t v124;
  unsigned __int8 *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int8 *v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int *v158;
  unint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  unsigned int v162;
  unint64_t v163;
  uint64_t v164;
  BOOL v165;
  uint64_t *v166;
  size_t v167;
  size_t v168;
  int v169;
  int v170;
  char v171;
  int v172;
  int v173;
  unsigned int v174;
  uint64_t v176;
  int v177;
  const char *v178;
  uint64_t v179;
  unsigned __int8 *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  const char *v185;
  unint64_t v186;
  int v187;
  uint64_t v188;
  unsigned __int8 *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 *v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v201;
  unsigned int **v202;
  uint64_t v203;
  unsigned int *v204;
  uint64_t v205;
  char v206;
  int v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  llvm *v213;
  llvm *TimeTraceProfilerInstance;
  int v215;
  unint64_t v216;
  int v217;
  int v218;
  int v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  unsigned __int8 *v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  char *v227;
  size_t v228;
  unsigned int v229;
  unsigned int v230;
  uint64_t v231;
  __int128 v232;
  unsigned int v233;
  unint64_t v234;
  int v235;
  int v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  __int128 v249;
  unsigned int v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  _DWORD *v256;
  uint64_t v257;
  unsigned int v258;
  unsigned __int8 v259;
  int v260;
  int v261;
  uint64_t v262;
  char *v263;
  size_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  char v270;
  char v271;
  uint64_t v272;
  int v273;
  unint64_t v274;
  char v275;
  unint64_t v276;
  __int16 v277;
  char v278;
  unint64_t v279;
  int v280;
  unsigned int v281;
  uint64_t v282;
  __int16 v283;
  uint64_t v284;
  int v285;
  int v286;
  char v287;
  uint64_t v288;
  int v289;
  __int16 v290;
  _BYTE v291[12];
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t *v297;
  _BYTE v298[32];
  __int16 v299;
  uint64_t v300;
  unint64_t v301;
  unsigned __int8 v302;
  uint64_t v303;
  _QWORD v304[4];
  int *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  __int16 v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _BYTE v320[32];
  _BYTE v321[32];
  uint64_t v322[2];
  char v323;
  unint64_t v324;
  _OWORD v325[2];
  uint64_t (*v326)(uint64_t);
  uint64_t v327;
  const char *v328;
  _QWORD *v329;
  _QWORD v330[2];
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char v334;
  _BYTE v335[24];
  uint64_t v336;
  uint64_t (*v337)(uint64_t);
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;

  v9 = a8;
  v10 = a7;
  v11 = a5;
  v12 = a4;
  v340 = *MEMORY[0x24BDAC8D0];
  v310 = a2;
  if (a2 == 104)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 25;
  }
  else
  {
    if (a2 == 130)
      v20 = 2;
    else
      v20 = 0;
    if (a2 == 130)
      v21 = 26;
    else
      v21 = 24;
    v16 = a2 != 386 && a2 != 130;
    v17 = a2 == 386;
    if (a2 == 386)
      v18 = 0;
    else
      v18 = v20;
    if (a2 == 386)
      v19 = 27;
    else
      v19 = v21;
  }
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
  if ((*(_BYTE *)(v22 + 104) & 0x20) != 0 && ((!v16 | ((*(_BYTE *)(v22 + 133) & 4) >> 2)) & 1) == 0)
  {
    LODWORD(v297) = a7;
    v25 = v19;
    v27 = a6;
    sub_22E884578(a1, (int *)(a1 + 16), 1599, (uint64_t)v325);
    v28 = *(unsigned __int8 **)&v325[0];
    if (!*(_QWORD *)&v325[0])
    {
      v28 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v325[0] + 1));
      *(_QWORD *)&v325[0] = v28;
    }
    v28[*v28 + 1] = 2;
    v29 = *(_QWORD *)&v325[0];
    v30 = **(_BYTE **)&v325[0];
    **(_BYTE **)&v325[0] = v30 + 1;
    *(_QWORD *)(v29 + 8 * v30 + 16) = 15;
    sub_22E3BB0B8((uint64_t)v325);
    a6 = v27;
    v9 = a8;
    v19 = v25;
    v12 = a4;
    v11 = a5;
    v10 = (int)v297;
  }
  if (*(_WORD *)(a1 + 32) == 3)
  {
    v31 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v31 + 752))
    {
      *(_BYTE *)(v31 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v31 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    return sub_22F313F10(*(_QWORD **)(a1 + 88), *(uint64_t ***)(*(_QWORD *)(a1 + 88) + 12888), v19);
  }
  v33 = *(_DWORD *)v11;
  v34 = *(_QWORD **)(a1 + 88);
  v329 = v34;
  v330[0] = 0;
  v330[1] = &v332;
  v331 = 0x400000000;
  LODWORD(v293) = v33;
  LODWORD(v296) = a3;
  v286 = v18;
  LODWORD(v294) = v17;
  *(_DWORD *)v291 = a6;
  if (v33)
  {
    v35 = v34[400];
    v34[400] = v330;
    v333 = v35;
    v36 = 1;
  }
  else
  {
    v36 = 0;
  }
  v37 = (unsigned int *)(a1 + 16);
  v334 = v36;
  v306 = 0;
  v307 = 0;
  v308 = a1 + 960;
  v309 = 0;
  sub_22E8220E8(a1, 7, &v306, 0);
  if (*(unsigned __int16 *)(a1 + 32) - 383 <= 2)
  {
    do
    {
      v38 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      sub_22E8118E4((uint64_t)&v306, v38, *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned int *)(a1 + 40) << 32), 0, *(_DWORD *)(a1 + 40), 0, 0, 5u, 0);
    }
    while (*(unsigned __int16 *)(a1 + 32) - 383 < 3);
  }
  sub_22E8220E8(a1, 7, &v306, 0);
  v288 = *(unsigned int *)(a1 + 16);
  if (a2 == 104)
  {
    v39 = *(_WORD *)(a1 + 32);
    if ((unsigned __int16)(v39 - 399) >= 0x29u)
    {
      v40 = *(unsigned __int16 *)(a1 + 32);
      if ((v40 - 7) >= 0xC
        && v40 != 1
        && v40 != 5
        && *(_QWORD *)(a1 + 24)
        && (*(unsigned __int16 *)(a1 + 32) - 220 <= 0x27
         && ((1 << (*(_WORD *)(a1 + 32) + 36)) & 0x8400003001) != 0
         || (v39 & 0xFFFE) == 0xEA
         || *(unsigned __int16 *)(a1 + 32) - 214 <= 0x3F
         && ((1 << (*(_WORD *)(a1 + 32) + 42)) & 0x84204A0003C00011) != 0
         || (v39 & 0xFFF7) == 0x100
         || *(unsigned __int16 *)(a1 + 32) - 212 <= 0x32
         && ((1 << (*(_WORD *)(a1 + 32) + 44)) & 0x4010010000001) != 0
         || (unsigned __int16)(v39 - 269) < 2u
         || *(unsigned __int16 *)(a1 + 32) - 213 <= 0x3F
         && ((1 << (*(_WORD *)(a1 + 32) + 43)) & 0xF4B5210FF0000059) != 0))
      {
        sub_22E88B624(a1, 1u);
      }
    }
  }
  v41 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
  if ((v41 & 0x10) != 0)
  {
    v297 = 0;
    if (a2 == 104 && *(_WORD *)(a1 + 32) == 114)
    {
      v297 = *(unint64_t **)(a1 + 24);
      *v297 = *v297 & 0xFFFFFFFBFFFFFE00 | 0x400000005;
      *(_WORD *)(a1 + 32) = 5;
      v41 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
    }
  }
  else
  {
    v297 = 0;
  }
  if ((v41 & 0x100) != 0)
  {
    v42 = *(_BYTE *)(a1 + 945);
    *(_BYTE *)(a1 + 945) = 1;
    memset(v325, 0, sizeof(v325));
    v43 = sub_22E8408AC(a1, (uint64_t)v325, 0, 0, v10, 0, 0, 0, 0, 0);
    if (v43)
    {
      *(_QWORD *)v12 = *(_QWORD *)v12 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
      *(_DWORD *)(v12 + 120) = 0;
      *(_DWORD *)(v12 + 132) = 0;
    }
    if (!*((_QWORD *)&v325[0] + 1) || (v44 = *(unsigned __int16 *)(a1 + 32), v44 == 5) || v44 == 401)
    {
      if ((v43 & 1) == 0)
      {
        *(_QWORD *)(v12 + 56) = *(_QWORD *)&v325[0];
        sub_22F0AB71C(v12 + 64, (uint64_t)v325 + 8);
      }
    }
    else
    {
      sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)v335);
      v45 = *(unsigned __int8 **)v335;
      if (!*(_QWORD *)v335)
      {
        v45 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v335[8]);
        *(_QWORD *)v335 = v45;
      }
      v45[*v45 + 1] = 4;
      v46 = *(_QWORD *)v335;
      v47 = **(_BYTE **)v335;
      **(_BYTE **)v335 = v47 + 1;
      *(_QWORD *)(v46 + 8 * v47 + 16) = 5;
      sub_22E3BB0B8((uint64_t)v335);
    }
    if (HIDWORD(v325[1]))
      free(*(void **)&v325[1]);
    *(_BYTE *)(a1 + 945) = v42;
  }
  v48 = *(int **)(v11 + 8);
  v304[0] = a1;
  v304[1] = v11;
  v304[2] = &v310;
  v304[3] = &v305;
  v305 = v48;
  v303 = 0;
  v49 = *(unsigned __int16 *)(a1 + 32);
  if (v49 == 401)
  {
    v52 = *(_QWORD *)(a1 + 24);
    v54 = *(unsigned int *)(a1 + 16);
    v53 = *(_DWORD *)(a1 + 20);
    if (!v53)
      v53 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 40) = v53;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v55 = *(_DWORD *)(v52 + 32);
    if (v55 == 5
      && (sub_22F345BAC(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (unint64_t *)(v52 + 24), (_DWORD *)(v52 + 32), v54, (unint64_t *)&v303), v55 = *(_DWORD *)(v52 + 32), v55 == 5))
    {
      sub_22E82F720((uint64_t)v304, v303, v54, *(_QWORD *)(v52 + 36), 1u);
      v52 = 0;
    }
    else if (v55 > 4 || ((1 << v55) & 0x15) == 0)
    {
      v83 = *(_DWORD *)(v12 + 56);
      if (*(_DWORD *)(v12 + 60))
        v84 = v83 == 0;
      else
        v84 = 1;
      if (v84 && *(_QWORD *)(v12 + 64) == 0)
        v86 = v54;
      else
        v86 = v83;
      v87 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v87 + 312) = *(_DWORD *)(v52 + 36);
      *(_DWORD *)(v87 + 316) = 1745;
      if (*(char *)(v87 + 311) < 0)
      {
        **(_BYTE **)(v87 + 288) = 0;
        *(_QWORD *)(v87 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v87 + 288) = 0;
        *(_BYTE *)(v87 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v325, v87);
      v88 = *(_QWORD *)(v52 + 8);
      v89 = *(unsigned __int8 **)&v325[0];
      if (!*(_QWORD *)&v325[0])
      {
        v89 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v325[0] + 1));
        *(_QWORD *)&v325[0] = v89;
      }
      v89[*v89 + 1] = 5;
      v90 = *(_QWORD *)&v325[0];
      v91 = **(_BYTE **)&v325[0];
      v92 = v91 + 1;
      **(_BYTE **)&v325[0] = v91 + 1;
      *(_QWORD *)(v90 + 8 * v91 + 16) = v88;
      v93 = *(int *)(v52 + 32);
      *(_BYTE *)(v90 + v92 + 1) = 2;
      v94 = *(_QWORD *)&v325[0];
      v95 = **(_BYTE **)&v325[0];
      **(_BYTE **)&v325[0] = v95 + 1;
      *(_QWORD *)(v94 + 8 * v95 + 16) = v93;
      sub_22E4D6448(v94 + 336, v86 | (v54 << 32), 1);
      sub_22E3BB0B8((uint64_t)v325);
      *(_QWORD *)v12 = *(_QWORD *)v12 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
      *(_DWORD *)(v12 + 120) = 0;
      *(_DWORD *)(v12 + 132) = 0;
      strcpy((char *)v325, ">");
      sub_22E885940(a1, (unsigned __int16 *)v325, 1, 2);
LABEL_382:
      v75 = v297;
      goto LABEL_407;
    }
    LODWORD(v295) = v54;
  }
  else
  {
    if (v49 == 5)
    {
      v50 = *(_QWORD *)(a1 + 24);
      v303 = v50;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      LODWORD(v295) = *(_DWORD *)(a1 + 40);
      if (*(_WORD *)(a1 + 32) == 46 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
      {
        *(_QWORD *)&v325[0] = &v325[1];
        *((_QWORD *)&v325[0] + 1) = 0x1000000000;
        *(_DWORD *)v335 = 0;
        LODWORD(v322[0]) = 0;
        if (sub_22E88101C(a1, 1, (int *)v335, (uint64_t)v325, (unsigned int *)v322, 0))
          v51 = 0;
        else
          v51 = *(unsigned int *)v335 | ((unint64_t)LODWORD(v322[0]) << 32);
        sub_22E82F720((uint64_t)v304, v50, v295, v51, 0);
        sub_22E828F5C((char **)v325);
      }
    }
    else
    {
      LODWORD(v295) = 0;
    }
    v52 = 0;
  }
  *(_QWORD *)&v291[4] = v12 + 56;
  v56 = sub_22E8103B4(a1, a9, 0);
  if (v9 == 3)
    goto LABEL_73;
  v56 = *(_QWORD *)(a1 + 8);
  v57 = *(_QWORD *)(v56 + 56);
  if (*(_DWORD *)(v57 + 72))
  {
    if (*(_BYTE *)(a1 + 946))
      goto LABEL_73;
  }
  v70 = *(unsigned __int16 *)(a1 + 32);
  if (v70 == 23 || v70 == 61 && (*(_QWORD *)v57 & 0x100) != 0)
    goto LABEL_197;
  HIDWORD(v72) = sub_22E82F8E8((_QWORD *)a1, a1 + 16);
  LODWORD(v72) = HIDWORD(v72) - 2;
  v71 = v72 >> 1;
  if (v71 > 7 || ((1 << v71) & 0x8B) == 0)
    goto LABEL_210;
  v56 = *(_QWORD *)(a1 + 8);
  v73 = *(_QWORD *)(v56 + 2816);
  if (v73 >= *(unsigned int *)(v56 + 2784))
  {
    v74 = sub_22F162D2C(v56, 1u);
    v56 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v74 = *(_QWORD *)(v56 + 2776) + 24 * v73;
  }
  if (*(_WORD *)(v74 + 16) == 23)
  {
LABEL_197:
    if ((*(_BYTE *)(*(_QWORD *)(v56 + 56) + 104) & 0x20) != 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 88) + 60) & 1) == 0)
    {
      if (*(_WORD *)(a1 + 32) == 61)
      {
        v123 = (_DWORD *)(a1 + 16);
LABEL_201:
        v124 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v124 + 312) = *v123;
        *(_DWORD *)(v124 + 316) = 1599;
        if (*(char *)(v124 + 311) < 0)
        {
          **(_BYTE **)(v124 + 288) = 0;
          *(_QWORD *)(v124 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v124 + 288) = 0;
          *(_BYTE *)(v124 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v325, v124);
        v125 = *(unsigned __int8 **)&v325[0];
        if (!*(_QWORD *)&v325[0])
        {
          v125 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v325[0] + 1));
          *(_QWORD *)&v325[0] = v125;
        }
        v125[*v125 + 1] = 2;
        v126 = *(_QWORD *)&v325[0];
        v127 = **(_BYTE **)&v325[0];
        **(_BYTE **)&v325[0] = v127 + 1;
        *(_QWORD *)(v126 + 8 * v127 + 16) = 1;
        sub_22E3BB0B8((uint64_t)v325);
        LOWORD(v325[0]) = 23;
        v56 = sub_22E885940(a1, (unsigned __int16 *)v325, 1, 3);
        goto LABEL_231;
      }
      v56 = sub_22E82F8E8((_QWORD *)a1, a1 + 16);
      if (v56 <= 8 && ((1 << v56) & 0x114) != 0)
      {
        v128 = *(_QWORD *)(a1 + 8);
        v129 = *(_QWORD *)(v128 + 2816);
        v56 = v129 >= *(unsigned int *)(v128 + 2784) ? sub_22F162D2C(v128, 1u) : *(_QWORD *)(v128 + 2776) + 24 * v129;
        if (*(_WORD *)(v56 + 16) == 61)
        {
          v123 = (_DWORD *)(a1 + 16);
          if (*(_WORD *)(a1 + 32) != 61)
          {
            v147 = *(_QWORD *)(a1 + 8);
            v148 = *(_QWORD *)(v147 + 2816);
            if (v148 >= *(unsigned int *)(v147 + 2784))
              v123 = (_DWORD *)sub_22F162D2C(v147, 1u);
            else
              v123 = (_DWORD *)(*(_QWORD *)(v147 + 2776) + 24 * v148);
          }
          goto LABEL_201;
        }
      }
    }
LABEL_231:
    if ((*(_BYTE *)(v12 + 4) & 0x10) != 0)
    {
      v149 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v149 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v149 + 316) = 1560;
      if (*(char *)(v149 + 311) < 0)
      {
        **(_BYTE **)(v149 + 288) = 0;
        *(_QWORD *)(v149 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v149 + 288) = 0;
        *(_BYTE *)(v149 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v325, v149);
      v150 = *(unsigned int *)(v12 + 188) | ((unint64_t)*(unsigned int *)(v12 + 188) << 32);
      v151 = *(_QWORD *)&v325[0];
      if (!*(_QWORD *)&v325[0])
      {
        v151 = sub_22E3B8AAC(*((uint64_t *)&v325[0] + 1));
        *(_QWORD *)&v325[0] = v151;
      }
      sub_22E4D6448(v151 + 336, v150, 1);
      sub_22E3BB0B8((uint64_t)v325);
      strcpy((char *)v325, ">");
      v56 = sub_22E885940(a1, (unsigned __int16 *)v325, 1, 2);
      v59 = 3;
    }
    else
    {
      v59 = 2;
    }
    goto LABEL_238;
  }
  v120 = *(_QWORD *)(v56 + 2816);
  if (v120 >= *(unsigned int *)(v56 + 2784))
    v121 = sub_22F162D2C(v56, 1u);
  else
    v121 = *(_QWORD *)(v56 + 2776) + 24 * v120;
  if (*(_WORD *)(v121 + 16) == 61)
  {
    v56 = *(_QWORD *)(a1 + 8);
    goto LABEL_197;
  }
LABEL_210:
  v56 = sub_22E82F8E8((_QWORD *)a1, a1 + 16);
  HIDWORD(v131) = v56;
  LODWORD(v131) = v56 - 2;
  v130 = v131 >> 1;
  if (v130 > 7 || ((1 << v130) & 0x8B) == 0)
    goto LABEL_453;
  v132 = *(_QWORD *)(a1 + 8);
  v133 = *(_QWORD *)(v132 + 2816);
  if (v133 >= *(unsigned int *)(v132 + 2784))
  {
    v134 = sub_22F162D2C(v132, 1u);
    v132 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v134 = *(_QWORD *)(v132 + 2776) + 24 * v133;
  }
  if (*(_WORD *)(v134 + 16) != 19)
  {
    v155 = *(_QWORD *)(v132 + 2816);
    if (v155 >= *(unsigned int *)(v132 + 2784))
    {
      v156 = sub_22F162D2C(v132, 1u);
      v132 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v156 = *(_QWORD *)(v132 + 2776) + 24 * v155;
    }
    if (*(_WORD *)(v156 + 16) != 157)
    {
      v163 = *(_QWORD *)(v132 + 2816);
      if (v163 >= *(unsigned int *)(v132 + 2784))
        v164 = sub_22F162D2C(v132, 1u);
      else
        v164 = *(_QWORD *)(v132 + 2776) + 24 * v163;
      v56 = sub_22E82F8E8((_QWORD *)a1, v164);
      if ((_DWORD)v56)
      {
        v132 = *(_QWORD *)(a1 + 8);
        goto LABEL_425;
      }
LABEL_453:
      v58 = 0;
      v59 = 0;
      if (((1 << v9) & 0x363) == 0)
        goto LABEL_74;
      if (*(_WORD *)(a1 + 32) == 62)
      {
        if ((*(_BYTE *)(v12 + 4) & 0x10) != 0)
          v59 = 3;
        else
          v59 = 1;
        goto LABEL_238;
      }
      if ((*(_WORD *)(a1 + 34) & 1) != 0)
      {
        v56 = sub_22E82C7BC(a1, 0);
        if ((v56 & 1) != 0)
        {
          v58 = 0;
          v59 = 0;
          goto LABEL_74;
        }
        if ((*(_BYTE *)(v12 + 4) & 0x10) != 0)
          v59 = 3;
        else
          v59 = 1;
        if (*(_WORD *)(a1 + 32) != 62)
        {
          v263 = (char *)sub_22F2F2CB0(v19);
          v264 = strlen(v263);
          sub_22E8847B4(a1, 0x3Eu, 16, v263, v264);
          v56 = (uint64_t)sub_22E80F2F4(*(_QWORD *)(a1 + 8), a1 + 16, 1);
          *(_WORD *)(a1 + 32) = 62;
        }
        goto LABEL_238;
      }
LABEL_73:
      v58 = 0;
      v59 = 0;
      goto LABEL_74;
    }
  }
LABEL_425:
  v232 = *(_OWORD *)(a1 + 64);
  v325[0] = *(_OWORD *)(a1 + 48);
  v325[1] = v232;
  *(_OWORD *)v335 = *(_OWORD *)v37;
  *(_QWORD *)&v335[16] = *(_QWORD *)(a1 + 32);
  v279 = *(unsigned int *)(a1 + 2344);
  v290 = *(_WORD *)(a1 + 80);
  v277 = *(_WORD *)(a1 + 82);
  v283 = *(_WORD *)(a1 + 84);
  sub_22F1629F8(v132);
  while (1)
  {
    HIDWORD(v234) = sub_22E82F8E8((_QWORD *)a1, a1 + 16);
    LODWORD(v234) = HIDWORD(v234) - 2;
    v233 = v234 >> 1;
    v165 = v233 > 7;
    v235 = (1 << v233) & 0x8B;
    if (v165 || v235 == 0)
      break;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  }
  while (1)
  {
    v237 = *(unsigned __int16 *)(a1 + 32);
    if (v237 != 19)
      break;
    v238 = *(_QWORD *)(a1 + 8);
    v239 = *(_QWORD *)(v238 + 2816);
    if (v239 >= *(unsigned int *)(v238 + 2784))
      v240 = sub_22F162D2C(v238, 1u);
    else
      v240 = *(_QWORD *)(v238 + 2776) + 24 * v239;
    if (*(_WORD *)(v240 + 16) != 19)
    {
      v237 = *(unsigned __int16 *)(a1 + 32);
      break;
    }
    sub_22E80F788(a1);
    LOWORD(v322[0]) = 20;
LABEL_444:
    if ((sub_22E885940(a1, (unsigned __int16 *)v322, 1, 1) & 1) == 0)
      goto LABEL_445;
  }
  if (v237 == 157)
  {
    v241 = *(_QWORD *)(a1 + 8);
    v242 = *(_QWORD *)(v241 + 2816);
    v243 = v242 >= *(unsigned int *)(v241 + 2784) ? sub_22F162D2C(v241, 1u) : *(_QWORD *)(v241 + 2776) + 24 * v242;
    if (*(_WORD *)(v243 + 16) == 21)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      sub_22E80F720(a1);
      LOWORD(v322[0]) = 22;
      goto LABEL_444;
    }
  }
LABEL_445:
  v244 = *(unsigned __int16 *)(a1 + 32);
  v245 = *(_QWORD *)(a1 + 8);
  v246 = *(_QWORD *)(v245 + 2832);
  *(_QWORD *)(v245 + 2816) = *(_QWORD *)(v246 - 8);
  *(_QWORD *)(v245 + 2832) = v246 - 8;
  v247 = *(_QWORD *)(v245 + 1008);
  if (v247)
  {
    if (*(_QWORD *)(v247 + 224))
      v273 = 3;
    else
      v273 = 0;
    *(_DWORD *)(v245 + 1048) = v273;
  }
  else
  {
    if (*(_QWORD *)(v245 + 1040))
      v248 = 1;
    else
      v248 = 2;
    *(_DWORD *)(v245 + 1048) = v248;
  }
  v249 = v325[1];
  *(_OWORD *)(a1 + 48) = v325[0];
  *(_OWORD *)(a1 + 64) = v249;
  *(_OWORD *)v37 = *(_OWORD *)v335;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)&v335[16];
  sub_22E80FADC(a1 + 2336, v279);
  *(_WORD *)(a1 + 80) = v290;
  *(_WORD *)(a1 + 82) = v277;
  v59 = 2;
  *(_WORD *)(a1 + 84) = v283;
  if (v244 != 23 && v244 != 61)
  {
    v58 = 0;
    v59 = 0;
    goto LABEL_74;
  }
LABEL_238:
  v152 = *a9;
  v58 = 1;
  if (HIDWORD(*a9) && *a9)
  {
    v153 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v153 + 312) = v152;
    *(_DWORD *)(v153 + 316) = 1447;
    if (*(char *)(v153 + 311) < 0)
    {
      **(_BYTE **)(v153 + 288) = 0;
      *(_QWORD *)(v153 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v153 + 288) = 0;
      *(_BYTE *)(v153 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v322, v153);
    v154 = v322[0];
    if (!v322[0])
    {
      v154 = sub_22E3B8AAC(v322[1]);
      v322[0] = v154;
    }
    sub_22E4D6448(v154 + 336, v152, 1);
    v326 = 0;
    *((_QWORD *)&v325[1] + 1) = 0;
    v327 = 0;
    *(_QWORD *)&v325[0] = v288 | (v288 << 32);
    BYTE8(v325[0]) = 0;
    *(_QWORD *)((char *)v325 + 12) = v152;
    BYTE4(v325[1]) = 1;
    LOBYTE(v328) = 0;
    sub_22E6D82D0(v322, v325);
    v335[20] = 0;
    *(_QWORD *)&v335[12] = 0;
    v337 = 0;
    v338 = 0;
    v336 = 0;
    LOBYTE(v339) = 0;
    *(_QWORD *)v335 = v152;
    v335[8] = 1;
    sub_22E6D82D0(v322, v335);
    if (SHIBYTE(v338) < 0)
      operator delete((void *)v336);
    if (SHIBYTE(v327) < 0)
      operator delete(*((void **)&v325[1] + 1));
    sub_22E3BB0B8((uint64_t)v322);
    v56 = (uint64_t)sub_22E82103C((uint64_t)&v306, (uint64_t)a9);
    v58 = 1;
  }
LABEL_74:
  LODWORD(v292) = v58;
  v60 = v303;
  if (!(v52 | v303))
  {
    v62 = *(_QWORD *)v12 & 0x3F000;
    if (v59 != 2 || v62 == 204800)
    {
      v75 = v297;
      if (v62 != 204800)
      {
        v135 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v135 + 312) = v296;
        *(_DWORD *)(v135 + 316) = 1430;
        v136 = v59;
        if (*(char *)(v135 + 311) < 0)
        {
          **(_BYTE **)(v135 + 288) = 0;
          *(_QWORD *)(v135 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v135 + 288) = 0;
          *(_BYTE *)(v135 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v325, v135);
        v137 = sub_22F2F2CB0(v19);
        v138 = *(unsigned __int8 **)&v325[0];
        if (!*(_QWORD *)&v325[0])
        {
          v138 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v325[0] + 1));
          *(_QWORD *)&v325[0] = v138;
        }
        v138[*v138 + 1] = 1;
        v139 = *(_QWORD *)&v325[0];
        v140 = **(_BYTE **)&v325[0];
        **(_BYTE **)&v325[0] = v140 + 1;
        *(_QWORD *)(v139 + 8 * v140 + 16) = v137;
        sub_22E3BB0B8((uint64_t)v325);
        v59 = v136;
      }
      if (v59 == 2 && *(_WORD *)(a1 + 32) == 61)
      {
        strcpy((char *)v325, ">");
        v76 = a1;
        v77 = 2;
      }
      else
      {
        strcpy((char *)v325, "A");
        v76 = a1;
        v77 = 1;
      }
      sub_22E885940(v76, (unsigned __int16 *)v325, 1, v77);
      goto LABEL_407;
    }
    v302 = 0;
    v299 = 0;
    v300 = 0;
    v301 = 0;
LABEL_82:
    v284 = v12;
    v280 = v19;
    if (v59 == 2 && *(_DWORD *)v11 == 3)
    {
      sub_22E884578(a1, (int *)(a1 + 16), 1744, (uint64_t)v335);
      v63 = *(unsigned __int8 **)v335;
      if (!*(_QWORD *)v335)
      {
        v63 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v335[8]);
        *(_QWORD *)v335 = v63;
      }
      v64 = v9;
      v63[*v63 + 1] = 2;
      v65 = *(_QWORD *)v335;
      v66 = **(_BYTE **)v335;
      **(_BYTE **)v335 = v66 + 1;
      *(_QWORD *)(v65 + 8 * v66 + 16) = 1;
      v67 = *(unsigned int *)(v11 + 20) | ((unint64_t)*(unsigned int *)(v11 + 20) << 32);
      *(_QWORD *)((char *)v325 + 12) = 0;
      BYTE4(v325[1]) = 0;
      v327 = 0;
      *((_QWORD *)&v325[1] + 1) = 0;
      v326 = 0;
      LOBYTE(v328) = 0;
      *(_QWORD *)&v325[0] = v67;
      BYTE8(v325[0]) = 1;
      sub_22E6D82D0((uint64_t *)v335, v325);
      if (SHIBYTE(v327) < 0)
        operator delete(*((void **)&v325[1] + 1));
      sub_22E3BB0B8((uint64_t)v335);
      v68 = 0;
      v69 = 0;
      v305 = 0;
      LOBYTE(v325[0]) = 0;
    }
    else
    {
      v64 = v9;
      LOBYTE(v325[0]) = 0;
      v80 = v292;
      if (!v305)
        v80 = 0;
      if (v80 == 1)
      {
        v69 = *(uint64_t **)v305;
        v68 = v305[2];
      }
      else
      {
        v68 = 0;
        v69 = 0;
      }
    }
    sub_22E817BB0(a1, (uint64_t)&v306, v284, v59);
    LOBYTE(v9) = v64;
    v274 = v68;
    v19 = v280;
    v56 = sub_22EA33BC4(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v280, v59, v296, *(uint64_t *)&v291[4], v60, v295, (uint64_t)&v306, *(int *)v291, *(unsigned int *)(v284 + 192), v69, v274, &v302, v325, 0, 0, 0, 0,
            0,
            0,
            v64 == 2,
            (v64 & 0xFFFFFFFE) == 6,
            (uint64_t)&v299);
    v61 = v56;
    if (LOBYTE(v325[0]))
    {
      v56 = sub_22F346A54(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v280, v59, *(uint64_t **)&v291[4], v60, v296, v295);
      *(_QWORD *)&v291[4] = v56;
      v96 = v122;
    }
    else
    {
      *(_QWORD *)&v291[4] = 0;
      v96 = 1;
    }
    v289 = v96;
    *(_DWORD *)v291 = 0;
    v37 = (unsigned int *)(a1 + 16);
    v12 = v284;
    goto LABEL_135;
  }
  v302 = 0;
  v299 = 0;
  v300 = 0;
  v301 = 0;
  if (!v52)
  {
    v78 = *(_DWORD *)v11;
    if (v59 == 1 && v78 == 3)
    {
      if ((_DWORD)v306 && HIDWORD(v306))
      {
        sub_22E8175C8(a1, &v306, 0);
        sub_22E820B10(&v306);
      }
      v56 = sub_22ED6F93C(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), *(_DWORD *)(v11 + 16), *(_DWORD *)(v11 + 20), v19, v296, *(uint64_t **)&v291[4], v60, v295, (uint64_t)&v306);
      v61 = v56;
      *(_DWORD *)&v291[8] = 0;
      *(_QWORD *)v291 = v79;
      v289 = 1;
      goto LABEL_135;
    }
    if (v59 == 3 && v78)
    {
      sub_22E817724(a1, (uint64_t)&v306, 1447, 1, 0);
      v81 = (unint64_t)v305;
      if (v305)
      {
        v82 = *(uint64_t **)v305;
        v81 = v305[2];
      }
      else
      {
        v82 = 0;
      }
      v56 = sub_22EACF644(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), *(_DWORD *)(v12 + 188), v19, v296, *(uint64_t *)&v291[4], v60, v295, (uint64_t)&v306, v82, v81);
      memset(v291, 0, sizeof(v291));
      v289 = 1;
      v61 = v56;
      goto LABEL_135;
    }
    if ((v59 - 3) <= 0xFFFFFFFD)
      sub_22E817724(a1, (uint64_t)&v306, 1447, 1, 0);
    goto LABEL_82;
  }
  if (!*(_DWORD *)(v52 + 32))
  {
    *(_QWORD *)&v291[4] = 0;
    v61 = 0;
    v289 = 1;
    *(_DWORD *)v291 = 1;
    goto LABEL_135;
  }
  if (*(_BYTE *)(v52 + 48))
  {
    *(_QWORD *)&v291[4] = 0;
    v61 = 0;
    v289 = 1;
    *(_DWORD *)v291 = 1;
    goto LABEL_135;
  }
  v103 = *(unsigned int *)(v52 + 44);
  v104 = *(_DWORD *)v11;
  v285 = v59;
  if (v59 == 1 && v104 == 3)
  {
    v289 = 1;
    sub_22E817724(a1, (uint64_t)&v306, 1447, 1, 0);
    v56 = sub_22ED6E5E8(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), *(_DWORD *)(v11 + 16), *(_DWORD *)(v11 + 20), v19, v296, *(uint64_t *)&v291[4], *(_QWORD *)(v52 + 24), *(_DWORD *)(v52 + 4), 0, *(_DWORD *)(v52 + 36), v52 + 56, v103, *(_DWORD *)(v52 + 40), (uint64_t)&v306);
    v61 = v56;
    *(_DWORD *)&v291[8] = 0;
    *(_QWORD *)v291 = v105;
    v59 = 1;
    goto LABEL_135;
  }
  if (!v59 || v59 == 3 && !v104)
  {
    *(_DWORD *)v291 = 1;
    sub_22E817724(a1, (uint64_t)&v306, 1447, 1, 0);
    v56 = sub_22ED634E0(*(_QWORD **)(a1 + 88), v59, v19, v296, *(uint64_t *)&v291[4], *(_DWORD *)v52, *(_QWORD *)(v52 + 24), *(_DWORD *)(v52 + 4), *(_DWORD *)(v52 + 36), v52 + 56, v103, *(_DWORD *)(v52 + 40));
    *(_QWORD *)&v291[4] = v56;
    v61 = 0;
    v289 = v119;
    goto LABEL_135;
  }
  *(_QWORD *)v335 = &v335[16];
  *(_QWORD *)&v335[8] = 0x400000000;
  if (v104 != 3)
  {
    v158 = v305;
    v160 = *(_QWORD **)(a1 + 88);
    v161 = (uint64_t *)v160[1611];
    v162 = *(_DWORD *)(v12 + 192);
    if (!v305)
    {
      v159 = 0;
      goto LABEL_472;
    }
    LODWORD(v159) = v305[2];
LABEL_467:
    v158 = *(int **)v158;
    v159 = v159;
    goto LABEL_472;
  }
  if (v59 != 3)
  {
    v250 = sub_22F141A3C(*(unsigned int *)(v11 + 20), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
    v251 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v251 + 312) = *(_DWORD *)(v52 + 4);
    *(_DWORD *)(v251 + 316) = 1548;
    if (*(char *)(v251 + 311) < 0)
    {
      **(_BYTE **)(v251 + 288) = 0;
      *(_QWORD *)(v251 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v251 + 288) = 0;
      *(_BYTE *)(v251 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v322, v251);
    v252 = *(unsigned int *)(v11 + 20) | ((unint64_t)*(unsigned int *)(v11 + 20) << 32);
    v253 = v322[0];
    if (!v322[0])
    {
      v253 = sub_22E3B8AAC(v322[1]);
      v322[0] = v253;
    }
    v254 = v19;
    sub_22E4D6448(v253 + 336, v252, 1);
    BYTE4(v325[1]) = 0;
    *(_QWORD *)((char *)v325 + 12) = 0;
    v327 = 0x200000000000000;
    v326 = 0;
    *(_QWORD *)&v325[0] = v250 | ((unint64_t)v250 << 32);
    BYTE8(v325[0]) = 0;
    *((_QWORD *)&v325[1] + 1) = 15932;
    LOBYTE(v328) = 0;
    sub_22E6D82D0(v322, v325);
    if (SHIBYTE(v327) < 0)
      operator delete(*((void **)&v325[1] + 1));
    sub_22E3BB0B8((uint64_t)v322);
    v255 = *(_DWORD *)(v11 + 20);
    v256 = (_DWORD *)sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 88) + 2032, 16, 3);
    sub_22EFE8D6C(v256, v257, v255, v250, 0, 0, v250, 0);
    v258 = *(_DWORD *)&v335[8];
    if (*(_DWORD *)&v335[8] >= *(_DWORD *)&v335[12])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v258 = *(_DWORD *)&v335[8];
    }
    *(_QWORD *)(*(_QWORD *)v335 + 8 * v258) = v256;
    LODWORD(v159) = ++*(_DWORD *)&v335[8];
    v158 = (int *)v335;
    v305 = (int *)v335;
    v160 = *(_QWORD **)(a1 + 88);
    v161 = (uint64_t *)v160[1611];
    v162 = *(_DWORD *)(v12 + 192);
    v19 = v254;
    v59 = v285;
    goto LABEL_467;
  }
  v157 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v157 + 312) = *(_DWORD *)(v12 + 188);
  *(_DWORD *)(v157 + 316) = 1561;
  if (*(char *)(v157 + 311) < 0)
  {
    **(_BYTE **)(v157 + 288) = 0;
    *(_QWORD *)(v157 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v157 + 288) = 0;
    *(_BYTE *)(v157 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v298, v157);
  sub_22E3BB0B8((uint64_t)v298);
  v158 = 0;
  v159 = 0;
  v305 = 0;
  v160 = *(_QWORD **)(a1 + 88);
  v161 = (uint64_t *)v160[1611];
  v162 = *(_DWORD *)(v12 + 192);
LABEL_472:
  v61 = sub_22ED6B778(v160, v161, v19, v59, v296, v162, *(uint64_t *)&v291[4], v52, (uint64_t)&v306, (int **)v158, v159, (uint64_t)&v299);
  *(_DWORD *)v291 = v259;
  v56 = *(_QWORD *)v335;
  if (*(_BYTE **)v335 != &v335[16])
    free(*(void **)v335);
  *(_QWORD *)&v291[4] = 0;
  v289 = 1;
LABEL_135:
  if ((_DWORD)v293)
  {
    sub_22EA7E84C(v329, v333, 0);
    v334 = 0;
    v97 = v292;
    if (*(_DWORD *)v11 != 1)
      v97 = 1;
    if ((v97 & 1) == 0 && (_DWORD)v331)
      v56 = sub_22E836A10(v329[400], (uint64_t)v330);
  }
  if (v59 != 2)
    goto LABEL_379;
  if (!(_BYTE)v299)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) == 0)
    {
      if (HIBYTE(v299))
        v101 = v301;
      else
        v101 = v61;
      sub_22E8219F4(a1, v296, v19, v101);
      if (!HIBYTE(v299) || (sub_22F31E4A4(*(_QWORD *)(a1 + 88), v61, (uint64_t)&v299) & 1) != 0)
        goto LABEL_379;
      v102 = *(_QWORD *)v12;
LABEL_381:
      *(_QWORD *)v12 = v102 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
      *(_DWORD *)(v12 + 120) = 0;
      *(_DWORD *)(v12 + 132) = 0;
      goto LABEL_382;
    }
    v278 = v9;
    v324 = v61;
    *(_QWORD *)&v325[0] = &v324;
    if (llvm::getTimeTraceProfilerInstance((llvm *)v56))
      llvm::timeTraceProfilerBegin();
    v106 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 88);
    v107 = v324;
    llvm::PrettyStackTraceEntry::PrettyStackTraceEntry();
    *(_QWORD *)&v325[0] = &unk_24FAC2E78;
    *((_QWORD *)&v325[1] + 1) = v106;
    v326 = (uint64_t (*)(uint64_t))v107;
    LODWORD(v327) = v296;
    v328 = "parsing struct/union/class body";
    v108 = *(_QWORD *)(a1 + 2680);
    if (v108)
    {
      v109 = *(_QWORD *)(a1 + 88) + 12888;
      LOBYTE(v9) = v278;
      while (1)
      {
        v109 = *(_QWORD *)v109;
        if (!v109)
        {
LABEL_165:
          v111 = 1;
          goto LABEL_275;
        }
        v110 = *(_DWORD *)(v109 + 8);
        if ((v110 & 0x20) != 0)
          break;
        if ((v110 & 1) != 0)
          goto LABEL_165;
      }
      if ((**(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 2648)
                                   + (((unint64_t)(v108 + *(_QWORD *)(a1 + 2672) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v108 + *(_QWORD *)(a1 + 2672) - 1) & 0x1FF)) & 4) != 0)
      {
        v141 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v141 + 312) = v296;
        *(_DWORD *)(v141 + 316) = 29;
        if (*(char *)(v141 + 311) < 0)
        {
          **(_BYTE **)(v141 + 288) = 0;
          *(_QWORD *)(v141 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v141 + 288) = 0;
          *(_BYTE *)(v141 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v335, v141);
        v142 = *(unsigned __int8 **)v335;
        if (!*(_QWORD *)v335)
        {
          v142 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v335[8]);
          *(_QWORD *)v335 = v142;
        }
        v142[*v142 + 1] = 2;
        v143 = *(_QWORD *)v335;
        v144 = **(_BYTE **)v335;
        **(_BYTE **)v335 = v144 + 1;
        *(_QWORD *)(v143 + 8 * v144 + 16) = 6;
        if ((*(_DWORD *)(v324 + 28) & 0x7Fu) - 13 > 0x3D)
        {
          v145 = 11;
          v323 = 11;
          strcpy((char *)v322, "(anonymous)");
          v146 = 0x6F6D796E6F6E6128;
        }
        else
        {
          sub_22EFB9E74(v324, v322);
          v145 = v323;
          v146 = v322[0];
        }
        v165 = v145 < 0;
        if (v145 >= 0)
          v166 = v322;
        else
          v166 = (uint64_t *)v146;
        v167 = v145 & 0x7F;
        if (v165)
          v168 = v322[1];
        else
          v168 = v167;
        sub_22E3B89A8((unsigned __int8 **)v335, v166, v168);
        if (v323 < 0)
          operator delete((void *)v322[0]);
        sub_22E3BB0B8((uint64_t)v335);
      }
      v111 = 0;
    }
    else
    {
      v111 = 1;
      LOBYTE(v9) = v278;
    }
LABEL_275:
    v282 = v11;
    sub_22E885C30(a1, 40);
    v292 = sub_22E8348B4((_QWORD *)a1, v324, v111, v294);
    if (v324)
      sub_22EA36CCC(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v324);
    v275 = v111;
    v281 = v19;
    LODWORD(v11) = 0;
    v169 = *(unsigned __int16 *)(a1 + 32);
    v276 = v61;
    v170 = 0;
    v171 = 0;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0 && v169 == 5)
    {
      v172 = sub_22E82F8E8((_QWORD *)a1, (uint64_t)v37);
      if (v172)
      {
        v173 = v172;
        v59 = 0;
        v287 = 0;
        v11 = 0;
        LODWORD(v293) = 0;
        v19 = 1;
        do
        {
          v174 = sub_22E82F8E8((_QWORD *)a1, (uint64_t)v37);
          if (v174 > 8 || ((1 << v174) & 0x114) == 0)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), v37);
            if ((_DWORD)v293)
            {
              v179 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v179 + 312) = *(_DWORD *)(a1 + 40);
              *(_DWORD *)(v179 + 316) = 1477;
              if (*(char *)(v179 + 311) < 0)
              {
                **(_BYTE **)(v179 + 288) = 0;
                *(_QWORD *)(v179 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v179 + 288) = 0;
                *(_BYTE *)(v179 + 311) = 0;
              }
              v177 = sub_22E78E558((uint64_t)v335, v179);
              v178 = "override";
              switch(v173)
              {
                case 1:
                  break;
                case 2:
LABEL_296:
                  v178 = "final";
                  break;
                case 3:
                case 5:
                case 6:
                case 7:
LABEL_518:
                  __break(1u);
                  goto LABEL_519;
                case 4:
LABEL_298:
                  v178 = "sealed";
                  break;
                case 8:
LABEL_297:
                  v178 = "__final";
                  break;
                default:
LABEL_299:
                  v178 = "abstract";
                  break;
              }
LABEL_300:
              v180 = *(unsigned __int8 **)v335;
              if (!*(_QWORD *)v335)
              {
                v180 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v335[8]);
                *(_QWORD *)v335 = v180;
              }
              v180[*v180 + 1] = 1;
              v181 = *(_QWORD *)v335;
              v182 = **(_BYTE **)v335;
              **(_BYTE **)v335 = v182 + 1;
              *(_QWORD *)(v181 + 8 * v182 + 16) = v178;
              sub_22E3BB0B8((uint64_t)v335);
            }
            else
            {
              v287 = 1;
              LODWORD(v293) = *(_DWORD *)(a1 + 40);
            }
          }
          else
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), v37);
            if ((_DWORD)v11)
            {
              v176 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v176 + 312) = *(_DWORD *)(a1 + 40);
              *(_DWORD *)(v176 + 316) = 1477;
              if (*(char *)(v176 + 311) < 0)
              {
                **(_BYTE **)(v176 + 288) = 0;
                *(_QWORD *)(v176 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v176 + 288) = 0;
                *(_BYTE *)(v176 + 311) = 0;
              }
              v177 = sub_22E78E558((uint64_t)v335, v176);
              v178 = "override";
              switch(v173)
              {
                case 1:
                  goto LABEL_300;
                case 2:
                  goto LABEL_296;
                case 3:
                case 5:
                case 6:
                case 7:
                  goto LABEL_518;
                case 4:
                  goto LABEL_298;
                case 8:
                  goto LABEL_297;
                default:
                  goto LABEL_299;
              }
            }
            if (v173 == 4)
              v59 = 1;
            v11 = *(unsigned int *)(a1 + 40);
          }
          if ((_DWORD)v294)
          {
            v183 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v183 + 312) = v11;
            *(_DWORD *)(v183 + 316) = 1687;
            if (*(char *)(v183 + 311) < 0)
            {
              **(_BYTE **)(v183 + 288) = 0;
              *(_QWORD *)(v183 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v183 + 288) = 0;
              *(_BYTE *)(v183 + 311) = 0;
            }
            v177 = sub_22E78E558((uint64_t)v335, v183);
            v184 = v173 - 1;
            v185 = "override";
            switch(v184)
            {
              case 0:
                break;
              case 1:
                v185 = "final";
                break;
              case 2:
              case 4:
              case 5:
              case 6:
                goto LABEL_518;
              case 3:
                v185 = "sealed";
                break;
              case 7:
                v185 = "__final";
                break;
              default:
                v185 = "abstract";
                break;
            }
            v196 = *(unsigned __int8 **)v335;
            if (!*(_QWORD *)v335)
            {
              v196 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v335[8]);
              *(_QWORD *)v335 = v196;
            }
            v196[*v196 + 1] = 1;
            v197 = *(_QWORD *)v335;
            v198 = **(_BYTE **)v335;
            **(_BYTE **)v335 = v198 + 1;
            *(_QWORD *)(v197 + 8 * v198 + 16) = v185;
LABEL_332:
            v193 = (uint64_t *)v335;
LABEL_333:
            sub_22E3BB0B8((uint64_t)v193);
          }
          else
          {
            HIDWORD(v186) = v173;
            LODWORD(v186) = v173 - 2;
            switch((v186 >> 1))
            {
              case 0u:
                if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
                  v187 = 1940;
                else
                  v187 = 1850;
                v188 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v188 + 312) = v11;
                *(_DWORD *)(v188 + 316) = v187;
                if (*(char *)(v188 + 311) < 0)
                {
                  **(_BYTE **)(v188 + 288) = 0;
                  *(_QWORD *)(v188 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v188 + 288) = 0;
                  *(_BYTE *)(v188 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v335, v188);
                v189 = *(unsigned __int8 **)v335;
                if (!*(_QWORD *)v335)
                {
                  v189 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v335[8]);
                  *(_QWORD *)v335 = v189;
                }
                v189[*v189 + 1] = 1;
                v190 = *(_QWORD *)v335;
                v191 = **(_BYTE **)v335;
                **(_BYTE **)v335 = v191 + 1;
                *(_QWORD *)(v190 + 8 * v191 + 16) = "final";
                goto LABEL_332;
              case 1u:
                v194 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v194 + 312) = v11;
                *(_DWORD *)(v194 + 316) = 1842;
                if (*(char *)(v194 + 311) < 0)
                {
                  **(_BYTE **)(v194 + 288) = 0;
                  *(_QWORD *)(v194 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v194 + 288) = 0;
                  *(_BYTE *)(v194 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v322, v194);
                v193 = v322;
                goto LABEL_333;
              case 3u:
                v192 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v192 + 312) = v11;
                *(_DWORD *)(v192 + 316) = 1860;
                if (*(char *)(v192 + 311) < 0)
                {
                  **(_BYTE **)(v192 + 288) = 0;
                  *(_QWORD *)(v192 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v192 + 288) = 0;
                  *(_BYTE *)(v192 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v320, v192);
                v193 = (uint64_t *)v320;
                goto LABEL_333;
              case 7u:
                v195 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v195 + 312) = v293;
                *(_DWORD *)(v195 + 316) = 1840;
                if (*(char *)(v195 + 311) < 0)
                {
                  **(_BYTE **)(v195 + 288) = 0;
                  *(_QWORD *)(v195 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v195 + 288) = 0;
                  *(_BYTE *)(v195 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v321, v195);
                v193 = (uint64_t *)v321;
                goto LABEL_333;
              default:
                break;
            }
          }
          v173 = sub_22E82F8E8((_QWORD *)a1, (uint64_t)v37);
        }
        while (v173);
      }
      else
      {
        LODWORD(v11) = 0;
        v287 = 0;
        LOBYTE(v59) = 0;
      }
      sub_22E83047C(a1, (uint64_t)&v306, v288);
      v169 = *(unsigned __int16 *)(a1 + 32);
      v170 = v287 & 1;
      v171 = v59 & 1;
      if (v169 != 23)
      {
        v61 = v276;
        if (v169 != 61)
        {
          v19 = v281;
          v11 = v282;
          v59 = 2;
          if (v324)
            sub_22EA37258(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v324);
          goto LABEL_412;
        }
      }
    }
    if (v169 != 61)
      goto LABEL_348;
    sub_22E885C30(a1, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888) + 8) | 0x800000);
    sub_22F2E3E10(a1, v324);
    if (*(_WORD *)(a1 + 32) == 23)
    {
LABEL_517:
      sub_22E885CF4(a1);
LABEL_348:
      *(_QWORD *)v335 = a1 + 944;
      v335[8] = *(_BYTE *)(a1 + 944);
      *(_BYTE *)(a1 + 944) = 1;
      *(_QWORD *)&v335[16] = a1;
      LODWORD(v336) = 1572887;
      WORD2(v336) = 62;
      v338 = 0;
      v339 = 0;
      v337 = sub_22E80CED8;
      sub_22E811DE8((uint64_t)v335);
      if (v324)
      {
        sub_22EA36D48(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), v324, v11, v171, v170);
        v315 = v286;
        v316 = 0;
        v317 = 0;
        v318 = a1 + 960;
        v319 = 0;
        if (v324)
        {
          v11 = v282;
          while (1)
          {
            v199 = *(unsigned __int16 *)(a1 + 32);
            if ((v199 - 436) <= 2)
            {
              if ((sub_22F2F1928(a1) & 1) != 0)
                break;
              v199 = *(unsigned __int16 *)(a1 + 32);
            }
            if (v199 == 1 || v199 == 24)
              break;
            sub_22E833304(a1, &v315, &v316, v281, v324);
            v201 = *(unsigned int *)(a1 + 2200);
            if ((_DWORD)v201 && (*(_WORD *)(a1 + 32) == 1 || !*(_DWORD *)(*(_QWORD *)(a1 + 8) + 1048)))
            {
              v202 = *(unsigned int ***)(a1 + 2192);
              v203 = 8 * v201;
              do
              {
                v204 = *v202++;
                sub_22E886514(v204);
                v203 -= 8;
              }
              while (v203);
              *(_DWORD *)(a1 + 2200) = 0;
            }
          }
          sub_22E811E8C((uint64_t)v335);
          goto LABEL_367;
        }
      }
      else
      {
        v315 = v286;
        v316 = 0;
        v317 = 0;
        v318 = a1 + 960;
        v319 = 0;
      }
      v11 = v282;
      LOWORD(v311) = 24;
      sub_22E885940(a1, (unsigned __int16 *)&v311, 1, 0);
LABEL_367:
      v311 = 0;
      v312 = 0;
      v313 = a1 + 960;
      v314 = 0;
      if (*(_WORD *)(a1 + 32) == 186)
        sub_22E810414(a1, &v311, 0, 0, 0);
      if (v324)
      {
        sub_22EABC744(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v296, v324, v339, SHIDWORD(v339), (uint64_t)&v311);
        v205 = v324;
        v206 = v275 ^ 1;
        if (!v324)
          v206 = 1;
        if ((v206 & 1) == 0)
        {
          v207 = *(_DWORD *)(a1 + 40);
          v208 = *(_QWORD *)(a1 + 2680) + *(_QWORD *)(a1 + 2672) - 1;
          sub_22E80DBA8(a1, *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 2648) + ((v208 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v208 & 0x1FF)));
          v209 = *(_QWORD *)(a1 + 2680) + *(_QWORD *)(a1 + 2672) - 1;
          sub_22E80DA40(a1, *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 2648) + ((v209 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v209 & 0x1FF)));
          v210 = *(_QWORD *)(a1 + 2680) + *(_QWORD *)(a1 + 2672) - 1;
          sub_22E80D63C(a1, *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 2648) + ((v210 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v210 & 0x1FF)));
          sub_22EAC88F8(*(_QWORD *)(a1 + 88));
          v211 = *(_QWORD *)(a1 + 2680) + *(_QWORD *)(a1 + 2672) - 1;
          sub_22E80D77C(a1, *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 2648) + ((v211 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v211 & 0x1FF)));
          v212 = *(_QWORD *)(a1 + 2680) + *(_QWORD *)(a1 + 2672) - 1;
          sub_22E80D938(a1, *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 2648) + ((v212 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v212 & 0x1FF)));
          *(_DWORD *)(a1 + 40) = v207;
          v11 = v282;
          sub_22EAC8B1C(*(_QWORD *)(a1 + 88));
          v205 = v324;
        }
        if (v205)
          sub_22EA36EF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v205, v339);
      }
      sub_22E834D34((_QWORD *)a1, v292);
      sub_22E885CF4(a1);
      sub_22E8D1BC4(v313, (uint64_t)&v313);
      sub_22E80F94C(&v314);
      sub_22E80F94C(&v312);
      sub_22E8D1BC4(v318, (uint64_t)&v318);
      sub_22E80F94C(&v319);
      sub_22E80F94C(&v317);
      **(_BYTE **)v335 = v335[8];
      v19 = v281;
      v59 = 2;
      v61 = v276;
      goto LABEL_377;
    }
    v229 = sub_22F141A3C(*(unsigned int *)(a1 + 40), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
    v230 = v229;
    if ((*(_WORD *)(a1 + 34) & 1) == 0)
    {
      v231 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v231 + 312) = v229;
      *(_DWORD *)(v231 + 316) = 1507;
      if (*(char *)(v231 + 311) < 0)
      {
        **(_BYTE **)(v231 + 288) = 0;
        *(_QWORD *)(v231 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v231 + 288) = 0;
        *(_BYTE *)(v231 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v316, v231);
LABEL_418:
      if (v324)
        sub_22EA37258(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v324);
      sub_22E3BB0B8((uint64_t)&v316);
      sub_22E885CF4(a1);
      v19 = v281;
      v11 = v282;
      v59 = 2;
      v61 = v276;
LABEL_412:
      sub_22E834D34((_QWORD *)a1, v292);
      sub_22E885CF4(a1);
LABEL_377:
      llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v325);
      TimeTraceProfilerInstance = (llvm *)llvm::getTimeTraceProfilerInstance(v213);
      if (TimeTraceProfilerInstance)
        llvm::timeTraceProfilerEnd(TimeTraceProfilerInstance);
      goto LABEL_379;
    }
    v260 = *(unsigned __int16 *)(a1 + 32);
    if ((v260 - 142) > 0x17)
      goto LABEL_492;
    v261 = 1 << (v260 + 114);
    if ((v261 & 7) != 0)
    {
      v265 = *(_QWORD *)(a1 + 8);
      v266 = *(_QWORD *)(v265 + 2816);
      if (v266 >= *(unsigned int *)(v265 + 2784))
        v267 = sub_22F162D2C(v265, 1u);
      else
        v267 = *(_QWORD *)(v265 + 2776) + 24 * v266;
      v268 = *(unsigned __int16 *)(v267 + 16);
      v269 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v269 + 312) = v230;
      *(_DWORD *)(v269 + 316) = 1507;
      if (*(char *)(v269 + 311) < 0)
      {
        **(_BYTE **)(v269 + 288) = 0;
        *(_QWORD *)(v269 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v269 + 288) = 0;
        *(_BYTE *)(v269 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v316, v269);
      if (v268 != 61)
        goto LABEL_418;
      goto LABEL_514;
    }
    if ((v261 & 0x801020) == 0)
    {
LABEL_492:
      if (v260 == 5)
      {
        v270 = sub_22E820B78(a1, 1u, 0);
      }
      else
      {
        if (v260 == 24)
          goto LABEL_494;
        v270 = sub_22E881C3C(a1, 0);
      }
      v271 = v270;
      v272 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v272 + 312) = v230;
      *(_DWORD *)(v272 + 316) = 1507;
      if (*(char *)(v272 + 311) < 0)
      {
        **(_BYTE **)(v272 + 288) = 0;
        *(_QWORD *)(v272 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v272 + 288) = 0;
        *(_BYTE *)(v272 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v316, v272);
      LOBYTE(v9) = v278;
      if ((v271 & 1) == 0)
        goto LABEL_418;
      goto LABEL_514;
    }
LABEL_494:
    v262 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v262 + 312) = v229;
    *(_DWORD *)(v262 + 316) = 1507;
    if (*(char *)(v262 + 311) < 0)
    {
      **(_BYTE **)(v262 + 288) = 0;
      *(_QWORD *)(v262 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v262 + 288) = 0;
      *(_BYTE *)(v262 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v316, v262);
LABEL_514:
    v335[20] = 0;
    *(_QWORD *)&v335[12] = 0;
    v337 = 0;
    v338 = 0x200000000000000;
    v336 = 31520;
    *(_QWORD *)v335 = v230 | ((unint64_t)v230 << 32);
    v335[8] = 0;
    LOBYTE(v339) = 0;
    sub_22E6D82D0(&v316, v335);
    if (SHIBYTE(v338) < 0)
      operator delete((void *)v336);
    sub_22E80F2F4(*(_QWORD *)(a1 + 8), (unint64_t)v37, 1);
    *(_WORD *)(a1 + 32) = 23;
    sub_22E3BB0B8((uint64_t)&v316);
    goto LABEL_517;
  }
  v98 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(v98 + 56) + 1) & 1) == 0)
    goto LABEL_174;
  v99 = *(unsigned __int16 *)(a1 + 32);
  if (v99 == 5)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(v98, v37);
    v325[0] = 0uLL;
    v325[1] = (unint64_t)(a1 + 960);
    sub_22E83047C(a1, (uint64_t)v325, v288);
    v100 = *(unsigned __int16 *)(a1 + 32);
    sub_22E8D1BC4(*(uint64_t *)&v325[1], (uint64_t)&v325[1]);
    sub_22E80F94C((uint64_t *)&v325[1] + 1);
    sub_22E80F94C((uint64_t *)v325 + 1);
    if (v100 != 61 && v100 != 23)
      goto LABEL_147;
LABEL_174:
    v99 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v99 == 61)
  {
    sub_22E885C30(a1, 40);
    v112 = sub_22E8348B4((_QWORD *)a1, v61, 1, v294);
    v113 = v61;
    v114 = v112;
    v115 = v113;
    v116 = sub_22F31D084(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v113);
    sub_22F2E3E10(a1, 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 216) = v116;
    if (*(_WORD *)(a1 + 32) != 23)
    {
      v117 = sub_22F141A3C(*(unsigned int *)(a1 + 40), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
      v118 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v118 + 312) = v117;
      *(_DWORD *)(v118 + 316) = 1507;
      if (*(char *)(v118 + 311) < 0)
      {
        **(_BYTE **)(v118 + 288) = 0;
        *(_QWORD *)(v118 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v118 + 288) = 0;
        *(_BYTE *)(v118 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v325, v118);
      sub_22E3BB0B8((uint64_t)v325);
      sub_22E834D34((_QWORD *)a1, v114);
      sub_22E885CF4(a1);
      v61 = v115;
      goto LABEL_147;
    }
    sub_22E834D34((_QWORD *)a1, v114);
    sub_22E885CF4(a1);
    v61 = v115;
  }
  *(_QWORD *)&v325[0] = a1 + 944;
  BYTE8(v325[0]) = *(_BYTE *)(a1 + 944);
  *(_BYTE *)(a1 + 944) = 1;
  *(_QWORD *)&v325[1] = a1;
  DWORD2(v325[1]) = 1572887;
  strcpy((char *)&v325[1] + 12, ">");
  v328 = 0;
  v326 = sub_22E80CED8;
  v327 = 0;
  sub_22E811DE8((uint64_t)v325);
  sub_22F2F18E0((uint64_t)v325);
  if (*(_WORD *)(a1 + 32) == 186)
  {
    *(_QWORD *)v335 = 0;
    *(_QWORD *)&v335[8] = 0;
    *(_QWORD *)&v335[16] = a1 + 960;
    v336 = 0;
    sub_22E810414(a1, (uint64_t *)v335, 0, 0, 0);
    sub_22E8D1BC4(*(uint64_t *)&v335[16], (uint64_t)&v335[16]);
    sub_22E80F94C(&v336);
    sub_22E80F94C((uint64_t *)&v335[8]);
  }
  **(_BYTE **)&v325[0] = BYTE8(v325[0]);
LABEL_147:
  v59 = 2;
LABEL_379:
  if (*(_DWORD *)v291)
  {
    v102 = *(_QWORD *)v12;
    if (v289)
      goto LABEL_381;
LABEL_395:
    v177 = (v102 >> 12) & 0x3F;
    if (!v177)
    {
      if ((_DWORD)v295)
        v226 = v295;
      else
        v226 = v296;
      *(_DWORD *)(v12 + 120) = v296;
      *(_DWORD *)(v12 + 132) = v226;
      *(_QWORD *)v12 = v102 & 0xFFFFFFFFFFDC0FFFLL | 0x1C000;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)&v291[4];
      v75 = v297;
      goto LABEL_400;
    }
LABEL_519:
    v75 = v297;
    if (v177 != 50)
    {
      v217 = v296;
      *(_QWORD *)v335 = sub_22F2F2CB0(v177);
      v219 = 3658;
LABEL_389:
      v220 = v9;
      v221 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v221 + 312) = v217;
      *(_DWORD *)(v221 + 316) = v219;
      v9 = v59;
      if (*(char *)(v221 + 311) < 0)
      {
        **(_BYTE **)(v221 + 288) = 0;
        *(_QWORD *)(v221 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v221 + 288) = 0;
        *(_BYTE *)(v221 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v325, v221);
      v222 = *(_QWORD *)v335;
      v223 = *(unsigned __int8 **)&v325[0];
      if (!*(_QWORD *)&v325[0])
      {
        v223 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v325[0] + 1));
        *(_QWORD *)&v325[0] = v223;
      }
      v223[*v223 + 1] = 1;
      v224 = *(_QWORD *)&v325[0];
      v225 = **(_BYTE **)&v325[0];
      **(_BYTE **)&v325[0] = v225 + 1;
      *(_QWORD *)(v224 + 8 * v225 + 16) = v222;
      sub_22E3BB0B8((uint64_t)v325);
      v59 = v9;
      LOBYTE(v9) = v220;
    }
  }
  else
  {
    sub_22EA7D6E8(*(_QWORD **)(a1 + 88), v61, (uint64_t)&v306);
    *(_QWORD *)v335 = 0;
    LODWORD(v322[0]) = 0;
    if (!v289)
    {
      v102 = *(_QWORD *)v12;
      goto LABEL_395;
    }
    if ((_DWORD)v295)
      v215 = v295;
    else
      v215 = v296;
    v216 = v61;
    v217 = v296;
    v218 = sub_22E8AD9B4((unint64_t *)v12, v19, v296, v215, (uint64_t *)v335, v322, v216, v302);
    v75 = v297;
    if (v218)
    {
      v219 = v322[0];
      goto LABEL_389;
    }
  }
LABEL_400:
  if (v59 == 2
    && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0 || ((1 << v9) & 0x363) != 0)
    && (*(_DWORD *)v11 || !sub_22E82C7BC(a1, 0))
    && *(_WORD *)(a1 + 32) != 62)
  {
    v227 = (char *)sub_22F2F2CB0(v19);
    v228 = strlen(v227);
    sub_22E8847B4(a1, 0x3Eu, 16, v227, v228);
    sub_22E80F2F4(*(_QWORD *)(a1 + 8), (unint64_t)v37, 1);
    *(_WORD *)(a1 + 32) = 62;
  }
LABEL_407:
  if (v75)
    *v75 = *v75 & 0xFFFFFFFBFFFFFE00 | 0x72;
  sub_22E8D1BC4(v308, (uint64_t)&v308);
  sub_22E80F94C(&v309);
  sub_22E80F94C(&v307);
  return (char **)sub_22E828B78((uint64_t)&v329);
}

uint64_t sub_22E82F720(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;

  v9 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  *(_DWORD *)(v9 + 312) = a3;
  *(_DWORD *)(v9 + 316) = 1549;
  if (*(char *)(v9 + 311) < 0)
  {
    **(_BYTE **)(v9 + 288) = 0;
    *(_QWORD *)(v9 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v9 + 288) = 0;
    *(_BYTE *)(v9 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&v28, v9);
  v10 = **(_DWORD **)(a1 + 8);
  v11 = v28;
  if (!v28)
  {
    v11 = (unsigned __int8 *)sub_22E3B8AAC(v29);
    v28 = v11;
  }
  v11[*v11 + 1] = 2;
  v12 = v28;
  v13 = *v28;
  *v28 = v13 + 1;
  *(_QWORD *)&v12[8 * v13 + 16] = v10 == 3;
  v14 = **(unsigned __int16 **)(a1 + 16);
  v12[(v13 + 1) + 1] = 4;
  v15 = v28;
  v16 = *v28;
  *v28 = v16 + 1;
  *(_QWORD *)&v15[8 * v16 + 16] = v14;
  v15[(v16 + 1) + 1] = 5;
  v17 = v28;
  v18 = *v28;
  *v28 = v18 + 1;
  *(_QWORD *)&v17[8 * v18 + 16] = a2;
  sub_22E4D6448((uint64_t)(v17 + 336), a4, 1);
  v19 = v28;
  if (!v28)
  {
    v19 = (unsigned __int8 *)sub_22E3B8AAC(v29);
    v28 = v19;
  }
  v19[*v19 + 1] = 2;
  v20 = v28;
  v21 = *v28;
  *v28 = v21 + 1;
  *(_QWORD *)&v20[8 * v21 + 16] = a5;
  result = sub_22E3BB0B8((uint64_t)&v28);
  v23 = *(uint64_t **)(a1 + 24);
  v24 = *v23;
  v25 = *(_QWORD *)(a1 + 8);
  if (*v23 && *(_BYTE *)(v25 + 24))
  {
    v26 = *(_DWORD *)(v24 + 8);
    if (v26 < 2)
    {
      *v23 = 0;
      **(_DWORD **)(a1 + 8) = 0;
    }
    else
    {
      *(_DWORD *)(v24 + 8) = v26 - 1;
    }
  }
  else if (*(_DWORD *)v25 == 3)
  {
    *v23 = 0;
    v27 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)v27 = 0;
    *(_QWORD *)(v27 + 16) = 0;
  }
  return result;
}

uint64_t sub_22E82F8E8(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = 0;
  v4 = a1[1];
  if ((*(_BYTE *)(*(_QWORD *)(v4 + 56) + 1) & 1) != 0 && *(_WORD *)(a2 + 16) == 5)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (a1[58])
    {
      v6 = a1[60];
    }
    else
    {
      a1[58] = sub_22E3CB704((llvm::StringMapImpl *)(v4 + 544), "final", 5uLL);
      v7 = a1[1];
      v8 = **(_QWORD **)(v7 + 56);
      if ((v8 & 0x100000000) != 0)
      {
        a1[59] = sub_22E3CB704((llvm::StringMapImpl *)(v7 + 544), "__final", 7uLL);
        v7 = a1[1];
        v8 = **(_QWORD **)(v7 + 56);
      }
      if ((v8 & 0x20) != 0)
      {
        a1[40] = sub_22E3CB704((llvm::StringMapImpl *)(v7 + 544), "sealed", 6uLL);
        a1[41] = sub_22E3CB704((llvm::StringMapImpl *)(a1[1] + 544), "abstract", 8uLL);
        v7 = a1[1];
      }
      v6 = sub_22E3CB704((llvm::StringMapImpl *)(v7 + 544), "override", 8uLL);
      a1[60] = v6;
    }
    if (v5 == v6)
    {
      return 1;
    }
    else if (v5 == a1[40])
    {
      return 4;
    }
    else if (v5 == a1[41])
    {
      return 16;
    }
    else if (v5 == a1[58])
    {
      return 2;
    }
    else
    {
      return 8 * (v5 == a1[59]);
    }
  }
  return result;
}

uint64_t sub_22E82FA34(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  unsigned int v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  _BYTE *v41;
  uint64_t v42;
  int v43;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[32];
  void **v66;
  _BYTE v67[32];
  uint64_t v68[2];
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unsigned __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t *v86;
  __int128 v87;
  __int128 __p;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  __int128 v94;
  int v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE v98[960];
  __int16 v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned int *)(a1 + 16);
  v4 = *(unsigned int *)(a1 + 16);
  v6 = a1 + 960;
  v61 = 0;
  v62 = 0;
  v63 = a1 + 960;
  v64 = 0;
  sub_22E8103B4(a1, &v61, 0);
  v7 = *(unsigned __int16 *)(a1 + 32);
  v8 = v7 == 155;
  if (v7 == 155)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
  }
  sub_22E83047C(a1, (uint64_t)&v61, v4);
  v9 = *(unsigned __int16 *)(a1 + 32);
  v10 = 2;
  v11 = 3;
  if (v9 <= 0x8F)
  {
    if (v9 != 142)
    {
      if (v9 != 143)
        goto LABEL_12;
      v10 = 1;
    }
    goto LABEL_11;
  }
  if (v9 == 144)
  {
    v10 = 0;
    goto LABEL_11;
  }
  if (v9 == 315)
  {
LABEL_11:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
    v11 = v10;
  }
LABEL_12:
  sub_22E83047C(a1, (uint64_t)&v61, v4);
  if (*(_WORD *)(a1 + 32) == 155)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
    if (v7 == 155)
    {
      v12 = *(unsigned int *)(a1 + 40);
      v13 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v13 + 312) = v12;
      *(_DWORD *)(v13 + 316) = 1476;
      if (*(char *)(v13 + 311) < 0)
      {
        **(_BYTE **)(v13 + 288) = 0;
        *(_QWORD *)(v13 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v13 + 288) = 0;
        *(_BYTE *)(v13 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v68, v13);
      BYTE12(v87) = 0;
      *(_QWORD *)((char *)&v87 + 4) = 0;
      v89 = 0;
      __p = 0uLL;
      LOBYTE(v90) = 0;
      v86 = (uint64_t *)(v12 | (v12 << 32));
      LOBYTE(v87) = 1;
      sub_22E6D82D0(v68, &v86);
      if (SHIBYTE(v89) < 0)
        operator delete((void *)__p);
      sub_22E3BB0B8((uint64_t)v68);
    }
    v8 = 1;
  }
  if (v8 && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 100) & 0x2000000000) != 0)
  {
    sub_22E884578(a1, (int *)v5, 1599, (uint64_t)&v86);
    v14 = v86;
    if (!v86)
    {
      v14 = (uint64_t *)sub_22E3B8AAC(v87);
      v86 = v14;
    }
    *((_BYTE *)v14 + *(unsigned __int8 *)v14 + 1) = 2;
    v15 = v86;
    v16 = *(unsigned __int8 *)v86;
    *(_BYTE *)v86 = v16 + 1;
    v15[v16 + 2] = 16;
    sub_22E3BB0B8((uint64_t)&v86);
  }
  v59 = v8;
  sub_22E83047C(a1, (uint64_t)&v61, v4);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(unsigned __int16 *)(a1 + 32);
  if ((**(_BYTE **)(v17 + 56) & 0x10) != 0 && v18 == 114)
  {
    v19 = *(_QWORD *)(v17 + 2816);
    if (v19 >= *(unsigned int *)(v17 + 2784))
      v20 = sub_22F162D2C(v17, 1u);
    else
      v20 = *(_QWORD *)(v17 + 2776) + 24 * v19;
    if (*(_WORD *)(v20 + 16) == 46)
    {
      *(_WORD *)(a1 + 32) = 5;
      goto LABEL_37;
    }
    v18 = *(unsigned __int16 *)(a1 + 32);
  }
  if (v18 == 152)
  {
    sub_22E884578(a1, (int *)v5, 1492, (uint64_t)v68);
    v21 = *(unsigned int *)(a1 + 16);
    *(_QWORD *)((char *)&v87 + 4) = 0;
    BYTE12(v87) = 0;
    v89 = 0;
    __p = 0uLL;
    LOBYTE(v90) = 0;
    v86 = (uint64_t *)(v21 | (v21 << 32));
    LOBYTE(v87) = 1;
    sub_22E6D82D0(v68, &v86);
    if (SHIBYTE(v89) < 0)
      operator delete((void *)__p);
    sub_22E3BB0B8((uint64_t)v68);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
  }
LABEL_37:
  v84 = 0u;
  v85 = 0u;
  v60 = v11;
  if ((sub_22E8408AC(a1, (uint64_t)&v84, 0, 0, 0, 0, 0, 0, 0, 0) & 1) != 0)
  {
    v22 = a2;
    v23 = 0;
    v58 = 0;
LABEL_75:
    v32 = 0;
    v34 = 1;
    goto LABEL_76;
  }
  v24 = *(unsigned __int16 *)(a1 + 32);
  v58 = *(_DWORD *)(a1 + 16);
  if (v24 > 0x190)
  {
    if (v24 != 401)
    {
      if (v24 != 407)
      {
LABEL_72:
        v22 = a2;
        sub_22E884578(a1, (int *)v5, 1491, (uint64_t)v67);
        v41 = v67;
LABEL_73:
        sub_22E3BB0B8((uint64_t)v41);
LABEL_74:
        v23 = 0;
        goto LABEL_75;
      }
      goto LABEL_45;
    }
    v40 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 32);
    if (v40 > 5 || ((1 << v40) & 0x35) == 0)
      goto LABEL_72;
    v22 = a2;
    sub_22E881648(a1, (uint64_t)&v84, 1);
    v32 = *(_QWORD *)(a1 + 24);
    v34 = v32 == 0;
    v23 = *(unsigned int *)(a1 + 20);
    if (!(_DWORD)v23)
      v23 = *v5;
    goto LABEL_99;
  }
  if (v24 != 5)
  {
    if (v24 != 162)
      goto LABEL_72;
LABEL_45:
    if (DWORD1(v84))
      v25 = (_DWORD)v84 == 0;
    else
      v25 = 1;
    if (!v25 || *((_QWORD *)&v84 + 1))
    {
      v26 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v26 + 312) = v84;
      *(_DWORD *)(v26 + 316) = 1765;
      if (*(char *)(v26 + 311) < 0)
      {
        **(_BYTE **)(v26 + 288) = 0;
        *(_QWORD *)(v26 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v26 + 288) = 0;
        *(_BYTE *)(v26 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v68, v26);
      *(_QWORD *)((char *)&v87 + 4) = 0;
      BYTE12(v87) = 0;
      v89 = 0;
      __p = 0uLL;
      LOBYTE(v90) = 0;
      v86 = (uint64_t *)v84;
      LOBYTE(v87) = 1;
      sub_22E6D82D0(v68, &v86);
      if (SHIBYTE(v89) < 0)
        operator delete((void *)__p);
      sub_22E3BB0B8((uint64_t)v68);
    }
    v22 = a2;
    v68[0] = 0;
    v69 = 0;
    v70 = 0u;
    v71 = v6;
    v83 = 0;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0;
    v23 = sub_22E82C1E4(a1, (uint64_t)v68);
    v86 = v68;
    v90 = 0;
    v91 = 0;
    v87 = 0u;
    __p = 0u;
    LODWORD(v89) = 0;
    v92 = *((_QWORD *)&v74 + 1);
    v96 = v98;
    v99 = (v68[0] & 0x3F000) == 204800;
    v94 = 0u;
    v93 = 5;
    v95 = 0;
    v97 = 0x800000000;
    v100 = 0u;
    v101 = v71;
    v105 = 0;
    v104 = 0u;
    v103 = 0u;
    v102 = 0u;
    v32 = sub_22EE89FC0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v86, v27, v28, v29, v30, v31);
    v34 = v33;
    sub_22E827F78((uint64_t)&v86);
    if (DWORD1(v74))
      free(*((void **)&v73 + 1));
    goto LABEL_58;
  }
  v35 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
  v23 = *(unsigned int *)(a1 + 40);
  if (*(_WORD *)(a1 + 32) != 46)
  {
    v66 = 0;
    v45 = sub_22EA003D8(*(_QWORD **)(a1 + 88), v35, v23, *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v84, 1, 0, 0, 0, 1u, 0, &v66);
    if (!v45)
    {
      v57 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v57 + 312) = v23;
      *(_DWORD *)(v57 + 316) = 1491;
      v22 = a2;
      if (*(char *)(v57 + 311) < 0)
      {
        **(_BYTE **)(v57 + 288) = 0;
        *(_QWORD *)(v57 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v57 + 288) = 0;
        *(_BYTE *)(v57 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v65, v57);
      v41 = v65;
      goto LABEL_73;
    }
    v46 = v45;
    v68[0] = 0;
    v69 = 0;
    v70 = 0uLL;
    v71 = v6;
    v83 = 0;
    v72 = __PAIR128__(v84, 0);
    v73 = 0u;
    *(_QWORD *)&v74 = 0;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0;
    DWORD2(v74) = v23;
    HIDWORD(v74) = v23;
    sub_22F0AB71C((uint64_t)&v73, (uint64_t)&v84 + 8);
    v52 = *(_QWORD *)(a1 + 88);
    v22 = a2;
    v53 = v68[0] & 0x3F000;
    if ((v68[0] & 0x3F000) == 0)
    {
      DWORD2(v76) = v23;
      DWORD1(v77) = v23;
      v68[0] = v68[0] & 0xFFFFFFFFFFDC0FFFLL | 0x1C000;
      v68[1] = v46;
      v53 = 114688;
    }
    v86 = v68;
    v90 = 0;
    v91 = 0;
    v87 = 0u;
    __p = 0u;
    LODWORD(v89) = 0;
    v92 = *((_QWORD *)&v74 + 1);
    v96 = v98;
    v94 = 0u;
    v93 = 5;
    v95 = 0;
    v97 = 0x800000000;
    v99 = v53 == 204800;
    v100 = 0u;
    v101 = v71;
    v105 = 0;
    v104 = 0u;
    v103 = 0u;
    v102 = 0u;
    v32 = sub_22EE89FC0(v52, *(_QWORD *)(v52 + 12888), (uint64_t)&v86, v47, v48, v49, v50, v51);
    v34 = v54;
    sub_22E827F78((uint64_t)&v86);
    if (DWORD1(v74))
      free(*((void **)&v73 + 1));
LABEL_58:
    sub_22E8D1BC4(v71, (uint64_t)&v71);
    sub_22E80F94C((uint64_t *)&v72);
    sub_22E80F94C((uint64_t *)&v70 + 1);
    goto LABEL_76;
  }
  LODWORD(v66) = 0;
  v68[0] = 0;
  if ((sub_22ED57604(*(_QWORD **)(a1 + 88), v35, v23, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v84, v68, &v66) & 1) == 0)
  {
    v36 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v36 + 312) = v23;
    *(_DWORD *)(v36 + 316) = 1774;
    if (*(char *)(v36 + 311) < 0)
    {
      **(_BYTE **)(v36 + 288) = 0;
      *(_QWORD *)(v36 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v36 + 288) = 0;
      *(_BYTE *)(v36 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v86, v36);
    v37 = v86;
    if (!v86)
    {
      v37 = (uint64_t *)sub_22E3B8AAC(v87);
      v86 = v37;
    }
    *((_BYTE *)v37 + *(unsigned __int8 *)v37 + 1) = 5;
    v38 = v86;
    v39 = *(unsigned __int8 *)v86;
    *(_BYTE *)v86 = v39 + 1;
    v38[v39 + 2] = v35;
    sub_22E3BB0B8((uint64_t)&v86);
  }
  v22 = a2;
  LODWORD(v86) = 0;
  *(_QWORD *)&v87 = v35;
  DWORD1(__p) = v23;
  LODWORD(__p) = v23;
  v34 = 1;
  if ((sub_22E880230(a1, v68[0], (int)v66, (uint64_t)&v84, 0, (uint64_t)&v86, 1, 0) & 1) != 0)
  {
    v23 = 0;
    v32 = 0;
    goto LABEL_76;
  }
  v55 = *(unsigned __int16 *)(a1 + 32);
  if (v55 != 401)
  {
LABEL_95:
    if (v55 != 400)
      goto LABEL_74;
    v23 = *(unsigned int *)(a1 + 20);
    if (!(_DWORD)v23)
      v23 = *v5;
    v32 = *(_QWORD *)(a1 + 24);
    v34 = v32 == 0;
LABEL_99:
    *(_DWORD *)(a1 + 40) = v23;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
    goto LABEL_76;
  }
  v32 = 0;
  v23 = 0;
  v56 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 32);
  v34 = 1;
  if (v56 <= 5 && ((1 << v56) & 0x35) != 0)
  {
    sub_22E881648(a1, (uint64_t)&v84, 1);
    v55 = *(unsigned __int16 *)(a1 + 32);
    goto LABEL_95;
  }
LABEL_76:
  if (HIDWORD(v85))
    free((void *)v85);
  if (v34)
  {
    v42 = 1;
  }
  else
  {
    if (*(_WORD *)(a1 + 32) == 26)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v5);
      v43 = *(_DWORD *)(a1 + 40);
    }
    else
    {
      v43 = 0;
    }
    v42 = sub_22EAAA6A8(*(_QWORD **)(a1 + 88), v22, v4 | (v23 << 32), (uint64_t)&v61, v59, v60, v32, v58, v43);
  }
  sub_22E8D1BC4(v63, (uint64_t)&v63);
  sub_22E80F94C(&v64);
  sub_22E80F94C(&v62);
  return v42;
}

uint64_t sub_22E83047C(uint64_t result, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v3 = *(_QWORD *)(result + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v3 + 56) + 20) & 0x1000000000) != 0)
  {
    v4 = *(unsigned __int16 *)(result + 32);
    if (v4 == 19)
    {
      v10 = result;
      v8 = a2;
      v9 = a3;
      v5 = *(_QWORD *)(v3 + 2816);
      if (v5 >= *(unsigned int *)(v3 + 2784))
        v6 = sub_22F162D2C(v3, 1u);
      else
        v6 = *(_QWORD *)(v3 + 2776) + 24 * v5;
      v7 = *(unsigned __int16 *)(v6 + 16);
      a2 = v8;
      a3 = v9;
      result = v10;
      if (v7 == 19)
        return sub_22E8174D0(result, a2, a3);
      v4 = *(unsigned __int16 *)(v10 + 32);
    }
    if (v4 != 157)
      return result;
    return sub_22E8174D0(result, a2, a3);
  }
  return result;
}

void sub_22E830518(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t j;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void **v29;
  BOOL v30;
  char *v31;
  uint64_t v32;
  uint64_t i;
  __int128 v34;

  v5 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 112);
    while (1)
    {
      v9 = *v7;
      v7 += 30;
      v8 = v9;
      if (v9 != 6)
        break;
      if (v5 == ++v6)
        goto LABEL_5;
    }
    if (((1 << v8) & 0xB7) != 0)
      v6 = 0;
  }
  else
  {
LABEL_5:
    v6 = 0;
  }
  v10 = *(_QWORD *)(a2 + 112) + 120 * v6;
  v12 = *(_WORD *)(v10 + 32);
  v11 = v10 + 32;
  if ((v12 & 0xF0) != 0xB0)
  {
    v32 = *(unsigned int *)(v11 + 16);
    if (!(_DWORD)v32)
      return;
    for (i = *(_QWORD *)(v11 + 40) + 16; (*(_DWORD *)(*(_QWORD *)i + 96) & 0x600) != 0x200; i += 32)
    {
      if (!--v32)
        return;
    }
  }
  v13 = operator new();
  *(_QWORD *)v13 = &off_24FAA4A28;
  *(_QWORD *)(v13 + 8) = a1;
  *(_QWORD *)(v13 + 16) = a3;
  *(_BYTE *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = v13 + 48;
  v14 = (unint64_t *)(v13 + 32);
  *(_QWORD *)(v13 + 40) = 0x800000000;
  *(_QWORD *)(v13 + 176) = 0;
  v15 = a1[335] + a1[334] - 1;
  v16 = *(_QWORD *)(*(_QWORD *)(a1[331] + ((v15 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v15 & 0x1FF));
  v17 = *(_DWORD *)(v16 + 24);
  if (v17 >= *(_DWORD *)(v16 + 28))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v17 = *(_DWORD *)(v16 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(v16 + 16) + 8 * v17) = v13;
  ++*(_DWORD *)(v16 + 24);
  *(_BYTE *)(v13 + 24) = (*(_DWORD *)(*(_QWORD *)(a1[11] + 12888) + 8) & 0x80) != 0;
  v18 = *(_DWORD *)(v11 + 16);
  if (*(_DWORD *)(v13 + 44) < v18)
  {
    sub_22E837140((uint64_t)v14);
    v18 = *(_DWORD *)(v11 + 16);
  }
  if (v18)
  {
    v19 = 0;
    for (j = 0; j < *(unsigned int *)(v11 + 16); ++j)
    {
      v21 = *(_QWORD *)(v11 + 40) + v19;
      v22 = *(_OWORD *)(v21 + 16);
      *(_QWORD *)(v21 + 24) = 0;
      v34 = v22;
      v23 = *(unsigned int *)(v13 + 40);
      v24 = *(_QWORD *)(v13 + 32);
      if (v23 >= *(_DWORD *)(v13 + 44))
      {
        v30 = v24 + 16 * v23 > (unint64_t)&v34;
        if (v24 <= (unint64_t)&v34 && v30)
        {
          v31 = (char *)&v34 - v24;
          sub_22E837140((uint64_t)v14);
          v24 = *v14;
          v25 = &v31[*v14];
          goto LABEL_17;
        }
        sub_22E837140((uint64_t)v14);
        v24 = *v14;
      }
      v25 = (char *)&v34;
LABEL_17:
      v26 = *(unsigned int *)(v13 + 40);
      v27 = (_QWORD *)(v24 + 16 * v26);
      *v27 = *(_QWORD *)v25;
      v28 = *((_QWORD *)v25 + 1);
      *((_QWORD *)v25 + 1) = 0;
      v27[1] = v28;
      *(_DWORD *)(v13 + 40) = v26 + 1;
      v29 = (void **)*((_QWORD *)&v34 + 1);
      *((_QWORD *)&v34 + 1) = 0;
      if (v29)
      {
        if (*v29 != v29 + 2)
          free(*v29);
        MEMORY[0x2348A0E9C](v29, 0x1080C4070FE8099);
      }
      v19 += 32;
    }
  }
  if ((*(_WORD *)v11 & 0xF0) == 0xB0)
  {
    *(_QWORD *)(v13 + 176) = *(_QWORD *)(v11 + 64);
    *(_QWORD *)(v11 + 64) = 0;
  }
}

uint64_t sub_22E8307DC(uint64_t a1, _DWORD *a2, int a3, unsigned int a4)
{
  int *v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  const char *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 **v20;
  uint64_t v21;
  const char *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  const char *v35;
  uint64_t v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  _BYTE v43[32];
  _BYTE v44[32];
  _BYTE v45[32];
  const char *v46;
  unsigned __int8 *v47;
  _BYTE v48[12];
  char v49;
  void *__p;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unsigned __int8 *v54;
  uint64_t v55;

  v7 = (int *)(a1 + 16);
  result = sub_22E82F8E8((_QWORD *)a1, a1 + 16);
  if ((_DWORD)result)
  {
    v9 = result;
    v10 = a4;
    v11 = a4 | ((unint64_t)a4 << 32);
    while (1)
    {
      if (v10)
      {
        v12 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v12 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v12 + 316) = 24;
        if (*(char *)(v12 + 311) < 0)
        {
          **(_BYTE **)(v12 + 288) = 0;
          *(_QWORD *)(v12 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v12 + 288) = 0;
          *(_BYTE *)(v12 + 311) = 0;
        }
        result = sub_22E78E558((uint64_t)&v54, v12);
        v13 = v9 - 1;
        v14 = "override";
        switch(v13)
        {
          case 0:
            break;
          case 1:
            v14 = "final";
            break;
          case 2:
          case 4:
          case 5:
          case 6:
            goto LABEL_69;
          case 3:
            v14 = "sealed";
            break;
          case 7:
            v14 = "__final";
            break;
          default:
            v14 = "abstract";
            break;
        }
        v15 = v54;
        if (!v54)
        {
          v15 = (unsigned __int8 *)sub_22E3B8AAC(v55);
          v54 = v15;
        }
        v15[*v15 + 1] = 1;
        v16 = v54;
        v17 = *v54;
        *v54 = v17 + 1;
        *(_QWORD *)&v16[8 * v17 + 16] = v14;
        v18 = *v7 | ((unint64_t)*v7 << 32);
        *(_QWORD *)&v48[4] = 0;
        v49 = 0;
        v51 = 0;
        v52 = 0;
        __p = 0;
        v53 = 0;
        v47 = (unsigned __int8 *)v18;
        v48[0] = 1;
        sub_22E6D82D0((uint64_t *)&v54, &v47);
        v19 = v54;
        if (!v54)
        {
          v19 = (unsigned __int8 *)sub_22E3B8AAC(v55);
          v54 = v19;
        }
        sub_22E4D6448((uint64_t)(v19 + 336), v11, 1);
        if (SHIBYTE(v52) < 0)
          operator delete(__p);
        v20 = &v54;
        goto LABEL_18;
      }
      v46 = 0;
      if (sub_22F2F31DC(a2, v9, *v7, &v46))
      {
        v21 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v21 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v21 + 316) = 1479;
        v41 = a3;
        if (*(char *)(v21 + 311) < 0)
        {
          **(_BYTE **)(v21 + 288) = 0;
          *(_QWORD *)(v21 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v21 + 288) = 0;
          *(_BYTE *)(v21 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v54, v21);
        v22 = v46;
        v23 = v54;
        if (!v54)
        {
          v23 = (unsigned __int8 *)sub_22E3B8AAC(v55);
          v54 = v23;
        }
        v23[*v23 + 1] = 1;
        v24 = v54;
        v25 = *v54;
        *v54 = v25 + 1;
        *(_QWORD *)&v24[8 * v25 + 16] = v22;
        v26 = *v7 | ((unint64_t)*v7 << 32);
        *(_QWORD *)&v48[4] = 0;
        v49 = 0;
        v51 = 0;
        v52 = 0;
        __p = 0;
        v53 = 0;
        v47 = (unsigned __int8 *)v26;
        v48[0] = 1;
        sub_22E6D82D0((uint64_t *)&v54, &v47);
        if (SHIBYTE(v52) < 0)
          operator delete(__p);
        sub_22E3BB0B8((uint64_t)&v54);
        a3 = v41;
      }
      if (a3)
        break;
      if (v9 == 16)
        goto LABEL_42;
      if (v9 == 8)
        goto LABEL_39;
      if (v9 != 4)
      {
LABEL_45:
        if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x200) != 0)
          v32 = 1940;
        else
          v32 = 1850;
        v33 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v33 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v33 + 316) = v32;
        if (*(char *)(v33 + 311) < 0)
        {
          **(_BYTE **)(v33 + 288) = 0;
          *(_QWORD *)(v33 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v33 + 288) = 0;
          *(_BYTE *)(v33 + 311) = 0;
        }
        result = sub_22E78E558((uint64_t)&v47, v33);
        v34 = v9 - 1;
        v35 = "override";
        switch(v34)
        {
          case 0:
            goto LABEL_58;
          case 1:
            goto LABEL_54;
          case 2:
          case 4:
          case 5:
          case 6:
            goto LABEL_69;
          case 3:
            goto LABEL_56;
          case 7:
            goto LABEL_55;
          default:
            goto LABEL_57;
        }
      }
      v29 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v29 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v29 + 316) = 1842;
      if (*(char *)(v29 + 311) < 0)
      {
        **(_BYTE **)(v29 + 288) = 0;
        *(_QWORD *)(v29 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v29 + 288) = 0;
        *(_BYTE *)(v29 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v45, v29);
      v20 = (unsigned __int8 **)v45;
LABEL_18:
      sub_22E3BB0B8((uint64_t)v20);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v7);
      result = sub_22E82F8E8((_QWORD *)a1, (uint64_t)v7);
      v9 = result;
      if (!(_DWORD)result)
        return result;
    }
    HIDWORD(v28) = v9;
    LODWORD(v28) = v9 - 2;
    v27 = v28 >> 1;
    if (v27 < 2)
    {
      v36 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v36 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v36 + 316) = 1687;
      if (*(char *)(v36 + 311) < 0)
      {
        **(_BYTE **)(v36 + 288) = 0;
        *(_QWORD *)(v36 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v36 + 288) = 0;
        *(_BYTE *)(v36 + 311) = 0;
      }
      result = sub_22E78E558((uint64_t)&v47, v36);
      v37 = v9 - 1;
      v35 = "override";
      switch(v37)
      {
        case 0:
          goto LABEL_58;
        case 1:
LABEL_54:
          v35 = "final";
          goto LABEL_58;
        case 2:
        case 4:
        case 5:
        case 6:
LABEL_69:
          __break(1u);
          return result;
        case 3:
LABEL_56:
          v35 = "sealed";
          goto LABEL_58;
        case 7:
LABEL_55:
          v35 = "__final";
          goto LABEL_58;
        default:
LABEL_57:
          v35 = "abstract";
LABEL_58:
          v38 = v47;
          if (!v47)
          {
            v38 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v48);
            v47 = v38;
          }
          v38[*v38 + 1] = 1;
          v39 = v47;
          v40 = *v47;
          *v47 = v40 + 1;
          *(_QWORD *)&v39[8 * v40 + 16] = v35;
          v20 = &v47;
          break;
      }
      goto LABEL_18;
    }
    if (v27 == 3)
    {
LABEL_39:
      v30 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v30 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v30 + 316) = 1860;
      if (*(char *)(v30 + 311) < 0)
      {
        **(_BYTE **)(v30 + 288) = 0;
        *(_QWORD *)(v30 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v30 + 288) = 0;
        *(_BYTE *)(v30 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v43, v30);
      v20 = (unsigned __int8 **)v43;
      goto LABEL_18;
    }
    if (v27 != 7)
      goto LABEL_45;
LABEL_42:
    v31 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v31 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v31 + 316) = 1840;
    if (*(char *)(v31 + 311) < 0)
    {
      **(_BYTE **)(v31 + 288) = 0;
      *(_QWORD *)(v31 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v31 + 288) = 0;
      *(_BYTE *)(v31 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v44, v31);
    v20 = (unsigned __int8 **)v44;
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_22E830D08(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4, uint64_t a5)
{
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  char v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _BYTE v33[32];
  unsigned __int16 v34[3];
  unsigned __int16 v35;

  v10 = (unsigned int *)(a1 + 16);
  if (*(_WORD *)(a1 + 32) == 61)
  {
    v11 = *v10;
    *(_DWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 64) = v11;
    *(_DWORD *)(a2 + 68) = v11;
  }
  else
  {
    sub_22E8227E4(a1, a2, (unint64_t)sub_22E823490, 0);
  }
  v12 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v12)
  {
    v13 = *(int **)(a2 + 112);
    while (1)
    {
      v15 = *v13;
      v13 += 30;
      v14 = v15;
      if (v15 != 6)
        break;
      if (!--v12)
        goto LABEL_10;
    }
    if (((1 << v14) & 0xB7) == 0)
    {
      v16 = *(unsigned __int16 *)(a1 + 32);
LABEL_11:
      if (v16 == 168)
      {
        sub_22E831098(a1, a2);
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 2680) + *(_QWORD *)(a1 + 2672) - 1;
        sub_22E8307DC(a1, a3, (**(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 2648) + ((v17 >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (v17 & 0x1FF)) >> 2) & 1, *(_DWORD *)(*(_QWORD *)a2 + 188));
        if (*a3)
          sub_22E8313D8(a1, a2, a3);
      }
      goto LABEL_15;
    }
  }
LABEL_10:
  v16 = *(unsigned __int16 *)(a1 + 32);
  if (v16 != 61)
    goto LABEL_11;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v10);
  v32 = sub_22F2E50C0(a1, 0);
  *a4 = v32;
  if ((v32 & 1) != 0)
  {
    v34[0] = 65;
    sub_22E885940(a1, v34, 1, 3);
  }
LABEL_15:
  if (*(_WORD *)(a1 + 32) == 127)
  {
    *(_DWORD *)v34 = 0;
    v18 = sub_22E8889BC(a1, 1, v34);
    if ((v18 & 1) != 0)
    {
      v35 = 65;
      sub_22E885940(a1, &v35, 1, 3);
    }
    *(_QWORD *)(a2 + 1128) = v18 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_DWORD *)v34)
      *(_DWORD *)(a2 + 76) = *(_DWORD *)v34;
  }
  sub_22E831780(a1);
  sub_22E81CAF0((uint64_t *)a1, a2, a5, 0);
  sub_22E831780(a1);
  if (!*a4 && !*a3)
  {
    v19 = *(_QWORD *)(a1 + 2680) + *(_QWORD *)(a1 + 2672) - 1;
    sub_22E8307DC(a1, a3, (**(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 2648) + ((v19 >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (v19 & 0x1FF)) >> 2) & 1, *(_DWORD *)(*(_QWORD *)a2 + 188));
    if (*a3)
    {
      v20 = *(_QWORD *)(a2 + 1104);
      if ((v20 & 4) != 0)
      {
        v23 = v20 & 0xFFFFFFFFFFFFFFF8;
        v21 = *(_QWORD *)v23;
        v22 = *(_QWORD *)v23 + 8 * *(unsigned int *)(v23 + 8);
      }
      else
      {
        v21 = a2 + 1104;
        v22 = a2 + 1104 + 8 * (v20 > 7);
      }
      for (; v21 != v22; v21 += 8)
      {
        v24 = *(_QWORD *)v21;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v21 + 72) + 12) & 2) != 0)
        {
          v25 = *(unsigned __int16 *)(v24 + 28) | (*(unsigned __int8 *)(v24 + 30) << 16);
          v26 = v25 & 0x70000;
          v27 = v25 & 0x5FFFF;
          if (v26 != 0x10000 && v27 != 327697)
          {
            v29 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v29 + 312) = *(_DWORD *)(v24 + 16);
            *(_DWORD *)(v29 + 316) = 1956;
            if (*(char *)(v29 + 311) < 0)
            {
              **(_BYTE **)(v29 + 288) = 0;
              *(_QWORD *)(v29 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v29 + 288) = 0;
              *(_BYTE *)(v29 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v33, v29);
            sub_22E3BB0B8((uint64_t)v33);
          }
        }
      }
      sub_22E8313D8(a1, a2, a3);
    }
  }
  v30 = 0;
  if (!*(_DWORD *)(a2 + 40) && !*(_QWORD *)(a2 + 48))
  {
    v30 = 0;
    if (!*(_DWORD *)(a2 + 88) && !*a4)
    {
      v34[0] = 24;
      v30 = 1;
      sub_22E885940(a1, v34, 1, 3);
    }
  }
  return v30;
}

void sub_22E831098(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  char v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[32];
  _QWORD v30[2];
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 40);
  sub_22E885C30(a1, 776);
  sub_22EAADB28(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2);
  LOBYTE(v30[0]) = 0;
  v32 = 0;
  sub_22E8269A4(a1, (uint64_t **)a2, *(_QWORD *)a2, (uint64_t)v30);
  v6 = sub_22F2E536C(a1, 1);
  v7 = sub_22F327CBC(*(_QWORD *)(a1 + 88), v6);
  if (sub_22E8AD4A8(a2))
  {
    if ((v7 & 1) != 0)
    {
      v33 = 0x41009700240017;
      LOWORD(v34) = 61;
      sub_22E885940(a1, (unsigned __int16 *)&v33, 5, 3);
    }
    else
    {
      *(_QWORD *)(a2 + 1136) = v7 & 0xFFFFFFFFFFFFFFFELL;
      sub_22F0D60E4(v7 & 0xFFFFFFFFFFFFFFFELL);
      if (v8)
        *(_DWORD *)(a2 + 76) = v8;
    }
    v10 = *(unsigned int *)(a2 + 120);
    if ((_DWORD)v10)
    {
      v11 = *(int **)(a2 + 112);
      while (1)
      {
        v13 = *v11;
        v11 += 30;
        v12 = v13;
        if (v13 != 6)
          break;
        if (!--v10)
          goto LABEL_15;
      }
      if (((1 << v12) & 0xB7) == 0 && *(_WORD *)(a1 + 32) == 36 && (**(_QWORD **)a2 & 0x3F000) == 0x21000)
      {
        v15 = *(_DWORD *)(a1 + 16);
        v28 = 0;
        *(_DWORD *)(a1 + 40) = v15;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
        v16 = sub_22E80FC30(a1, &v28, 20, 3, 0, 0, 0);
        if (v17)
        {
          v33 = 0x9700240017003FLL;
          LOWORD(v34) = 65;
          sub_22E885940(a1, (unsigned __int16 *)&v33, 5, 3);
        }
        else
        {
          v18 = v16;
          v19 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v19 + 312) = v15;
          *(_DWORD *)(v19 + 316) = 1730;
          if (*(char *)(v19 + 311) < 0)
          {
            **(_BYTE **)(v19 + 288) = 0;
            *(_QWORD *)(v19 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v19 + 288) = 0;
            *(_BYTE *)(v19 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v33, v19);
          v20 = v28;
          v21 = v33;
          if (!v33)
          {
            v21 = sub_22E3B8AAC(v34);
            v33 = v21;
          }
          sub_22E4D6448(v21 + 336, v20, 1);
          sub_22E3BB0B8((uint64_t)&v33);
          v22 = *(unsigned int *)(a2 + 120);
          if ((_DWORD)v22)
          {
            v23 = 0;
            v24 = *(int **)(a2 + 112);
            while (1)
            {
              v26 = *v24;
              v24 += 30;
              v25 = v26;
              if (v26 != 6)
                break;
              if (v22 == ++v23)
                goto LABEL_37;
            }
            if (((1 << v25) & 0xB7) != 0)
              v23 = 0;
          }
          else
          {
LABEL_37:
            v23 = 0;
          }
          v27 = *(_QWORD *)(a2 + 112) + 120 * v23;
          *(_WORD *)(v27 + 32) = *(_WORD *)(v27 + 32) & 0xFDFF | ((v18 != 0) << 9);
          *(_QWORD *)(v27 + 104) = v18;
          *(_DWORD *)(v27 + 112) = v28;
        }
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v9 + 312) = v5;
    *(_DWORD *)(v9 + 316) = 1731;
    if (*(char *)(v9 + 311) < 0)
    {
      **(_BYTE **)(v9 + 288) = 0;
      *(_QWORD *)(v9 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 288) = 0;
      *(_BYTE *)(v9 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v29, v9);
    sub_22E3BB0B8((uint64_t)v29);
  }
LABEL_15:
  if (v32)
    v14 = v31 == 0;
  else
    v14 = 1;
  if (v14)
  {
    if (!a1)
      return;
    goto LABEL_21;
  }
  *(_QWORD *)(v30[0] + 10288) = v30[1];
  if (a1)
LABEL_21:
    sub_22E885CF4(a1);
}

uint64_t *sub_22E8313D8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t *result;
  uint64_t v14;
  int *v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  void *__p;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39[4];
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  char v44;
  unsigned int v45;
  char v46;
  _QWORD v47[2];
  char v48;
  _QWORD v49[4];
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  void *v53[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;

  v49[0] = 0;
  v49[2] = 0;
  v49[3] = 0;
  v50 = 0;
  v51 = a1 + 960;
  v63 = 0;
  v52 = 0u;
  *(_OWORD *)v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0;
  v40 = a1;
  v41 = v49;
  v42 = a2;
  v43 = a3;
  v47[0] = sub_22E8371F4;
  v47[1] = &v40;
  v48 = 1;
  sub_22E822278(a1, v49, 0, 0, 0, (uint64_t)v47, 0);
  v6 = HIDWORD(*((_QWORD *)&v54 + 1));
  if (!*(_DWORD *)(a2 + 72))
    *(_DWORD *)(a2 + 72) = DWORD2(v54);
  if ((_DWORD)v6)
    *(_DWORD *)(a2 + 76) = v6;
  v7 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v7)
  {
    v9 = *(int **)(a2 + 112);
    v10 = *(unsigned int *)(a2 + 120);
    while (1)
    {
      v12 = *v9;
      v9 += 30;
      v11 = v12;
      if (v12 != 6)
        break;
      if (!--v10)
        goto LABEL_11;
    }
    if (((1 << v11) & 0xB7) == 0)
    {
      v14 = 0;
      v15 = *(int **)(a2 + 112);
      while (1)
      {
        v17 = *v15;
        v15 += 30;
        v16 = v17;
        if (v17 != 6)
          break;
        if (v7 == ++v14)
        {
          v18 = 0;
          goto LABEL_21;
        }
      }
      if (((1 << v16) & 0xB7) != 0)
        v18 = 0;
      else
        v18 = v14;
LABEL_21:
      v8 = *(_QWORD *)(a2 + 112);
      v19 = v8 + 120 * v18 + 32;
      if ((v49[0] & 0xFE000000) != 0)
      {
        v40 = v8 + 120 * v18 + 32;
        v41 = a3;
        v42 = a1;
        sub_22E8AD29C((uint64_t)v49, (uint64_t (*)(uint64_t, uint64_t, const char *, uint64_t, uint64_t))sub_22E837208, (uint64_t)&v40);
      }
      v46 = 1;
      v45 = 0;
      if (sub_22E827A08(a1, (BOOL *)&v46, &v45))
      {
        v20 = v46;
        if (v46)
          v21 = 2;
        else
          v21 = 3;
        if (v46)
          v22 = "& ";
        else
          v22 = "&& ";
        sub_22E729148(v22, v21, a3[5], 0, (uint64_t)&v40);
        *(_WORD *)v19 = *(_WORD *)v19 & 0xFFF7 | (8 * v20);
        v23 = v45;
        *(_DWORD *)(v19 + 24) = v45;
        v24 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v24 + 312) = v23;
        *(_DWORD *)(v24 + 316) = 1469;
        if (*(char *)(v24 + 311) < 0)
        {
          **(_BYTE **)(v24 + 288) = 0;
          *(_QWORD *)(v24 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v24 + 288) = 0;
          *(_BYTE *)(v24 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v39, v24);
        result = (uint64_t *)v39[0];
        if (!v39[0])
        {
          result = (uint64_t *)sub_22E3B8AAC(v39[1]);
          v39[0] = (uint64_t)result;
        }
        if (v20)
          v25 = "&";
        else
          v25 = "&&";
        *((_BYTE *)result + *(unsigned __int8 *)result + 1) = 1;
        v26 = v39[0];
        v27 = *(unsigned __int8 *)v39[0];
        *(_BYTE *)v39[0] = v27 + 1;
        *(_QWORD *)(v26 + 8 * v27 + 16) = v25;
        v28 = "override";
        switch(a3[1])
        {
          case 1:
            goto LABEL_42;
          case 2:
            v28 = "final";
            goto LABEL_42;
          case 3:
          case 5:
          case 6:
          case 7:
            __break(1u);
            return result;
          case 4:
            v28 = "sealed";
            goto LABEL_42;
          case 8:
            v28 = "__final";
            goto LABEL_42;
          default:
            v28 = "abstract";
LABEL_42:
            *(_BYTE *)(v26 + (v27 + 1) + 1) = 1;
            v29 = v39[0];
            v30 = *(unsigned __int8 *)v39[0];
            *(_BYTE *)v39[0] = v30 + 1;
            *(_QWORD *)(v29 + 8 * v30 + 16) = v28;
            v34 = 0;
            v33 = 0;
            v36 = 0;
            v37 = 0;
            __p = 0;
            v38 = 0;
            v31 = v23 | (v23 << 32);
            v32 = 1;
            sub_22E6D82D0(v39, &v31);
            sub_22E6D82D0(v39, &v40);
            if (SHIBYTE(v37) < 0)
              operator delete(__p);
            sub_22E3BB0B8((uint64_t)v39);
            if ((_DWORD)v23)
              *(_DWORD *)(a2 + 76) = v23;
            if (v44 < 0)
              operator delete(v43);
            break;
        }
      }
    }
  }
LABEL_11:
  if (DWORD1(v54))
    free(v53[1]);
  sub_22E8D1BC4(v51, (uint64_t)&v51);
  sub_22E80F94C((uint64_t *)&v52);
  return sub_22E80F94C(&v50);
}

uint64_t sub_22E831780(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  v2 = *(unsigned int *)(a1 + 16);
  result = sub_22E8360CC(a1);
  if ((_DWORD)result)
  {
    v4 = result;
    sub_22E88453C(a1, v2, 1447, (uint64_t)v7);
    v5 = v2 | (v4 << 32);
    v6 = v7[0];
    if (!v7[0])
    {
      v6 = sub_22E3B8AAC(v7[1]);
      v7[0] = v6;
    }
    sub_22E4D6448(v6 + 336, v5, 1);
    return sub_22E3BB0B8((uint64_t)v7);
  }
  return result;
}

unsigned int *sub_22E831804()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v16;
  unsigned int *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  int *v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v53;
  BOOL v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  unsigned __int8 *v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  char v94;
  int v95;
  uint64_t v96;
  int v97;
  _BOOL4 v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t *v102;
  int v103;
  int v104;
  __int16 v105;
  uint64_t v106;
  int *v107;
  char v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  int v114;
  char v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  uint64_t v131;
  char v132;
  unint64_t v133;
  void *v134;
  _BYTE v135[32];
  _BYTE v136[32];
  uint64_t v137[4];
  _BYTE v138[32];
  _BYTE v139[32];
  _BYTE v140[32];
  _BYTE v141[13];
  unint64_t v142;
  _DWORD *v143[3];
  uint64_t v144;
  _QWORD v145[2];
  uint64_t v146;
  int v147;
  _BYTE v148[32];
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE v155[32];
  _BYTE v156[36];
  unsigned int v157;
  void *v158;
  _BYTE v159[12];
  char v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  _QWORD *v165;
  _QWORD v166[3];
  uint64_t v167;
  _QWORD *v168;
  char v169;
  void *v170;
  uint64_t v171;
  _BYTE v172[64];
  void *v173;
  uint64_t v174;
  _BYTE v175[24];
  _BYTE v176[40];
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  __int128 v182;
  int v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  __int16 v187;
  __int128 v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD v195[3];
  uint64_t v196;
  uint64_t v197;
  char v198;
  _QWORD *v199;
  uint64_t v200[3];
  uint64_t v201;
  uint64_t v202;
  char v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  void *v211[2];
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  int v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223[44];
  char v224;
  char *v225;
  uint64_t v226;
  _BYTE v227[24];
  uint64_t v228;

  v0 = MEMORY[0x24BDAC7A8]();
  v5 = v0;
  v228 = *MEMORY[0x24BDAC8D0];
  v157 = v1;
  v6 = (unsigned int *)(v0 + 16);
  v7 = *(unsigned __int16 *)(v0 + 32);
  if (v7 == 72)
  {
    v8 = *(_QWORD *)(v0 + 8);
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 56) + 1) & 0x40) != 0
      && ((v9 = *(_QWORD *)(v8 + 2816), v9 >= *(unsigned int *)(v8 + 2784))
        ? (v10 = sub_22F162D2C(v8, 1u))
        : (v10 = *(_QWORD *)(v8 + 2776) + 24 * v9),
          sub_22F140B7C(v10, 3)))
    {
      v23 = v156;
      v24 = v156;
      v25 = v5;
      v26 = (int *)v6;
      v27 = 1438;
    }
    else
    {
      v23 = v155;
      v24 = v155;
      v25 = v5;
      v26 = (int *)v6;
      v27 = 1439;
    }
    sub_22E884578(v25, v26, v27, (uint64_t)v24);
    sub_22E3BB0B8((uint64_t)v23);
    *(_DWORD *)(v5 + 40) = *(_DWORD *)(v5 + 16);
    sub_22F18FB4C(*(_QWORD *)(v5 + 8), v6);
    *(_WORD *)v176 = 24;
    sub_22E885940(v5, (unsigned __int16 *)v176, 1, 1);
    return 0;
  }
  v11 = v4;
  v12 = (uint64_t)v3;
  v13 = v2;
  v14 = v1;
  v15 = *(_BYTE *)(v0 + 945);
  *(_BYTE *)(v0 + 945) = 1;
  if (*v3)
  {
    v16 = 0;
    goto LABEL_7;
  }
  if (v7 == 5 || v7 == 311 || v7 == 71)
  {
    v16 = sub_22E88BDA8(v0, 0);
    if (*(_WORD *)(v5 + 32) != 399)
      goto LABEL_89;
    v19 = *(_QWORD *)(v5 + 8);
    v20 = *(_QWORD *)(v19 + 2816);
    if (v20 >= *(unsigned int *)(v19 + 2784))
      v21 = sub_22F162D2C(v19, 1u);
    else
      v21 = *(_QWORD *)(v19 + 2776) + 24 * v20;
    if (*(_WORD *)(v21 + 16) == 5)
    {
      v30 = (uint64_t)v6;
      if (*(_WORD *)(v5 + 32) != 1)
      {
        v31 = *(_QWORD *)(v5 + 8);
        v32 = *(_QWORD *)(v31 + 2816) + 1;
        if (v32 >= *(unsigned int *)(v31 + 2784))
          v30 = sub_22F162D2C(v31, 2u);
        else
          v30 = *(_QWORD *)(v31 + 2776) + 24 * v32;
      }
      if (*(_WORD *)(v30 + 16) != 62)
      {
LABEL_89:
        v7 = *(unsigned __int16 *)(v5 + 32);
        if (*(_DWORD *)v12)
          goto LABEL_7;
        goto LABEL_90;
      }
    }
    else
    {
      v33 = *(_QWORD *)(v5 + 8);
      v34 = *(_QWORD *)(v33 + 2816);
      if (v34 >= *(unsigned int *)(v33 + 2784))
        v35 = sub_22F162D2C(v33, 1u);
      else
        v35 = *(_QWORD *)(v33 + 2776) + 24 * v34;
      if (*(_WORD *)(v35 + 16) != 141)
        goto LABEL_89;
    }
    memset(v176, 0, 32);
    sub_22E8408AC(v5, (uint64_t)v176, 0, 0, 0, 0, 0, 0, 0, 0);
    if (*(_DWORD *)v176 && *(_DWORD *)&v176[4] && !*(_QWORD *)&v176[8])
    {
      LOWORD(v204) = 62;
      v45 = (unsigned __int16 *)&v204;
    }
    else
    {
      LODWORD(v165) = 0;
      LODWORD(v204) = 0;
      v205 = 0;
      v207 = 0;
      if (sub_22E842CDC(v5, (uint64_t)v176, 0, 0, 0, 1, 1, 0, (unsigned int *)&v165, (uint64_t)&v204))
      {
        LOWORD(v199) = 62;
      }
      else
      {
        if (!sub_22E8847B4(v5, 0x3Eu, 16, "access declaration", 0x12uLL))
        {
          v101 = *(_QWORD *)(v5 + 88);
          v102 = *(uint64_t **)(v101 + 12888);
          v200[0] = 0;
          v199 = 0;
          v17 = (unsigned int *)sub_22EAC28A0(v101, v102, v14, 0, 0, (unsigned int *)v176, (uint64_t)&v204, 0, (uint64_t)&v199);
          sub_22E80F94C(v200);
LABEL_85:
          if (*(_DWORD *)&v176[28])
            free(*(void **)&v176[16]);
          goto LABEL_93;
        }
        LOWORD(v199) = 62;
      }
      v45 = (unsigned __int16 *)&v199;
    }
    sub_22E885940(v5, v45, 1, 0);
    v17 = 0;
    goto LABEL_85;
  }
  v16 = 0;
LABEL_90:
  if (v7 == 165 || v7 == 120)
  {
    v17 = (unsigned int *)sub_22E82BC2C(v5, v176);
    goto LABEL_93;
  }
LABEL_7:
  if (v7 == 196)
  {
    v22 = *(_QWORD *)(v5 + 96);
    ++*(_BYTE *)(v22 + 4);
    *(_DWORD *)(v5 + 40) = *(_DWORD *)(v5 + 16);
    sub_22F18FB4C(*(_QWORD *)(v5 + 8), v6);
    v17 = (unsigned int *)sub_22E831804(v5, v14, v13, v12, v11);
    --*(_BYTE *)(v22 + 4);
    goto LABEL_93;
  }
  if (v7 == 147)
  {
    sub_22E8287D8((uint64_t)v176, v5);
    LODWORD(v204) = 0;
    v17 = (unsigned int *)sub_22E87D5A4(v5, 7, &v204, v13, v14);
    if (*(_QWORD *)&v176[8])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v176 + 88);
      *(_QWORD *)(v18 + 216) = *(_QWORD *)&v176[8] + 48;
      *(_QWORD *)(v18 + 224) = 0;
    }
    **(_BYTE **)&v176[16] = v176[24];
    goto LABEL_93;
  }
  v151 = 0;
  v152 = 0;
  v153 = v5 + 960;
  v154 = 0;
  v149 = 0;
  v150 = 0;
  sub_22E8103B4(v5, &v151, 0);
  if (*(_WORD *)(v5 + 32) == 428)
  {
    v17 = (unsigned int *)sub_22E85B9CC(v5, &v157, &v151, 0, 0, 0);
    goto LABEL_21;
  }
  if ((v152 & 4) != 0)
  {
    v28 = *(uint64_t **)(v152 & 0xFFFFFFFFFFFFFFF8);
    v29 = &v28[*(unsigned int *)((v152 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    v28 = (uint64_t *)&v152;
    v29 = (uint64_t *)(&v152 + (v152 > 7));
  }
  v132 = v15;
  sub_22E828878((unint64_t *)&v150, (uint64_t)&v150, v28, v29);
  v149 = v151;
  sub_22E8221D8((uint64_t *)v5, (uint64_t)&v151);
  if (*(_WORD *)(v5 + 32) == 154)
  {
    *(_DWORD *)(v5 + 40) = *(_DWORD *)(v5 + 16);
    sub_22F18FB4C(*(_QWORD *)(v5 + 8), v6);
    v36 = *(_DWORD *)(v5 + 40);
    while (1)
    {
      v37 = *(unsigned __int16 *)(v5 + 32);
      if (v37 != 147)
        break;
      *(_DWORD *)(v5 + 40) = *(_DWORD *)(v5 + 16);
      sub_22F18FB4C(*(_QWORD *)(v5 + 8), v6);
      v38 = *(unsigned int *)(v5 + 40);
      v39 = *(_QWORD *)(v5 + 96);
      *(_DWORD *)(v39 + 312) = v38;
      *(_DWORD *)(v39 + 316) = 1767;
      if (*(char *)(v39 + 311) < 0)
      {
        **(_BYTE **)(v39 + 288) = 0;
        *(_QWORD *)(v39 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v39 + 288) = 0;
        *(_BYTE *)(v39 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v204, v39);
      v176[20] = 0;
      *(_QWORD *)&v176[12] = 0;
      *(_QWORD *)&v176[32] = 0;
      v177 = 0;
      *(_QWORD *)&v176[24] = 0;
      LOBYTE(v178) = 0;
      *(_QWORD *)v176 = v38 | (v38 << 32);
      v176[8] = 1;
      sub_22E6D82D0((uint64_t *)&v204, v176);
      if (SHIBYTE(v177) < 0)
        operator delete(*(void **)&v176[24]);
      sub_22E3BB0B8((uint64_t)&v204);
    }
    if (v37 == 139)
    {
      v44 = *(_QWORD *)(v5 + 96);
      *(_DWORD *)(v44 + 312) = v36;
      *(_DWORD *)(v44 + 316) = 1780;
      if (*(char *)(v44 + 311) < 0)
      {
        **(_BYTE **)(v44 + 288) = 0;
        *(_QWORD *)(v44 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v44 + 288) = 0;
        *(_BYTE *)(v44 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v148, v44);
      sub_22E3BB0B8((uint64_t)v148);
      strcpy(v176, ">");
      sub_22E885940(v5, (unsigned __int16 *)v176, 1, 2);
      v17 = 0;
    }
    else
    {
      v17 = (unsigned int *)sub_22E82A938(v5, 7, v12, v36, v176, (uint64_t)&v151, v14);
    }
    goto LABEL_21;
  }
  v225 = v227;
  v226 = 0x200000000;
  v227[16] = 0;
  v204 = 0;
  v206 = 0;
  v208 = 0;
  v207 = 0;
  v209 = v5 + 960;
  v221 = 0;
  v210 = 0u;
  *(_OWORD *)v211 = 0u;
  v212 = 0u;
  v213 = 0u;
  v214 = 0u;
  v215 = 0u;
  v216 = 0u;
  v217 = 0u;
  v218 = 0u;
  v219 = 0u;
  v220 = 0;
  sub_22E836960((uint64_t)&v222, v5, v11);
  sub_22E82103C((uint64_t)&v207, (uint64_t)&v151);
  if (v16)
  {
    v204 = v204 & 0xFFFFFFFFFFDC0FFFLL | 0x32000;
    DWORD2(v214) = 0;
    DWORD1(v215) = 0;
  }
  v40 = *(_DWORD *)v12;
  v41 = *(_QWORD **)(v5 + 88);
  v199 = v41;
  v200[0] = 0;
  v200[1] = (uint64_t)&v201;
  v200[2] = 0x400000000;
  v42 = v40 & 0xFFFFFFFE;
  if ((v40 & 0xFFFFFFFE) == 2)
  {
    v43 = v41[400];
    v41[400] = v200;
    v202 = v43;
    v203 = 1;
    sub_22E818334(v5, &v204, v12, v14, 1, &v225, 0);
    sub_22EA7E84C(v199, v202, 0);
    v203 = 0;
  }
  else
  {
    v203 = 0;
    sub_22E818334(v5, &v204, v12, v14, 1, &v225, 0);
  }
  *(_BYTE *)(v5 + 945) = v15;
  if ((v204 & 0x200000) != 0
    && (*(_BYTE *)(v205 + 74) & 1) != 0
    && !*(_DWORD *)v12
    && (sub_22E81B924(v5, (uint64_t)&v204, v14, 1, (uint64_t)&v225) & 1) != 0)
  {
    v17 = 0;
    goto LABEL_275;
  }
  v46 = *(_QWORD *)(v12 + 8);
  if (v46)
  {
    v133 = *(unsigned int *)(v46 + 8);
    v134 = *(void **)v46;
  }
  else
  {
    v133 = 0;
    v134 = 0;
  }
  if (*(_WORD *)(v5 + 32) == 62)
  {
    *(_DWORD *)(v5 + 40) = *(_DWORD *)(v5 + 16);
    sub_22F18FB4C(*(_QWORD *)(v5 + 8), v6);
    if ((v204 & 0x1000000000) != 0)
      sub_22F2E3F64(v5, (uint64_t)&v149);
    v165 = 0;
    v17 = (unsigned int *)sub_22EA0F52C(*(_QWORD *)(v5 + 88), *(_QWORD *)(*(_QWORD *)(v5 + 88) + 12888), v14, (unsigned int *)&v204, v134, v133, 0, (unint64_t *)&v165);
    if (!v224)
    {
      sub_22EA7E84C(v222, v223[43], v17);
      v224 = 1;
    }
    if (v165)
    {
      *(_QWORD *)v176 = v165;
      *(_QWORD *)&v176[8] = v17;
      v17 = (unsigned int *)sub_22EA2D7B4(*(_QWORD **)(v5 + 88), (unint64_t *)v176, 2uLL);
    }
    goto LABEL_275;
  }
  *(_QWORD *)v176 = &v204;
  v178 = 0;
  v179 = 0;
  memset(&v176[8], 0, 32);
  LODWORD(v177) = 0;
  v180 = *((_QWORD *)&v212 + 1);
  v182 = 0u;
  v184 = &v186;
  v181 = 7;
  v183 = 0;
  v185 = 0x800000000;
  v187 = v187 & 0xFC00 | ((v204 & 0x3F000) == 204800);
  v188 = 0u;
  v189 = v209;
  v193 = 0;
  v190 = 0u;
  v191 = 0u;
  v192 = 0u;
  v47 = *(_QWORD **)(v5 + 88);
  v194 = v47;
  v195[0] = v223;
  v195[1] = &v196;
  v195[2] = 0x400000000;
  v48 = v47[400];
  v47[400] = v195;
  v197 = v48;
  v198 = 0;
  if (v46)
  {
    *((_QWORD *)&v191 + 1) = v134;
    *(_QWORD *)&v192 = v133;
  }
  v145[0] = 0;
  v145[1] = 0;
  v147 = 0;
  v146 = 0;
  v173 = v175;
  v174 = 0x200000000;
  v175[16] = 0;
  v143[0] = (_DWORD *)v5;
  v143[1] = (_DWORD *)&v144 + 1;
  v143[2] = &v144;
  v144 = 0;
  v170 = v172;
  v171 = 0x800000000;
  v142 = 0;
  v165 = v47;
  v166[0] = 0;
  v166[1] = &v167;
  v166[2] = 0x400000000;
  if (v42 == 2)
  {
    v47[400] = v166;
    v168 = v195;
    v169 = 1;
    if ((sub_22E830D08(v5, (uint64_t)v176, v145, (uint64_t *)&v142, (uint64_t)&v173) & 1) == 0)
    {
      sub_22EA7E84C(v165, (uint64_t)v168, 0);
      v169 = 0;
      goto LABEL_99;
    }
LABEL_96:
    if (*(_WORD *)(v5 + 32) == 62)
    {
      *(_DWORD *)(v5 + 40) = *(_DWORD *)(v5 + 16);
      sub_22F18FB4C(*(_QWORD *)(v5 + 8), v6);
    }
    v17 = 0;
    goto LABEL_270;
  }
  v169 = 0;
  if (sub_22E830D08(v5, (uint64_t)v176, v145, (uint64_t *)&v142, (uint64_t)&v173))
    goto LABEL_96;
LABEL_99:
  if (v142)
    goto LABEL_100;
  if ((**(_BYTE **)(*(_QWORD *)(v5 + 8) + 56) & 0x20) != 0 && sub_22E8AD4A8((uint64_t)v176))
    sub_22E83313C(v143, 1);
  v103 = *(unsigned __int16 *)(v5 + 32);
  if (v103 == 23 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 56) + 1) & 2) == 0)
  {
    v104 = 0;
    v105 = 4;
    goto LABEL_245;
  }
  v106 = v185;
  if (!(_DWORD)v185)
  {
    v187 &= 0xFFF3u;
    goto LABEL_100;
  }
  v107 = (int *)v184;
  while (1)
  {
    v109 = *v107;
    v107 += 30;
    v108 = v109;
    if (v109 != 6)
      break;
    if (!--v106)
      goto LABEL_237;
  }
  v104 = 1;
  v105 = 0;
  if (((1 << v108) & 0xB7) == 0)
  {
    v104 = 0;
    v105 = 4;
    if (*(unsigned __int16 *)(v5 + 32) > 0x3Eu)
    {
      if (v103 == 151)
        goto LABEL_245;
      if (v103 == 63)
      {
        v118 = *(_QWORD *)(v5 + 8);
        v119 = *(_QWORD *)(v118 + 2816);
        if (v119 >= *(unsigned int *)(v118 + 2784))
          v120 = sub_22F162D2C(v118, 1u);
        else
          v120 = *(_QWORD *)(v118 + 2776) + 24 * v119;
        v130 = *(unsigned __int16 *)(v120 + 16);
        switch(v130)
        {
          case 132:
            v104 = 0;
            v105 = 12;
            break;
          case 82:
            v104 = 0;
            v105 = 8;
            break;
          case 3:
            v131 = *(_QWORD *)(v5 + 8);
            if (*(_QWORD *)(v131 + 752))
            {
              *(_BYTE *)(v131 + 864) = 1;
              *(_BYTE *)(*(_QWORD *)(v131 + 48) + 6) = 1;
            }
            *(_WORD *)(v5 + 32) = 1;
            sub_22E9CA760(*(char ***)(v5 + 88), (uint64_t)v176);
            v17 = 0;
            goto LABEL_307;
          default:
            v105 = 0;
            v104 = 1;
            break;
        }
        goto LABEL_245;
      }
    }
    else if (v103 == 23 || v103 == 61)
    {
      goto LABEL_245;
    }
LABEL_237:
    v105 = 0;
    v104 = 1;
  }
LABEL_245:
  v111 = v185;
  v187 = v187 & 0xFFF3 | v105;
  if (!(_DWORD)v185)
  {
    if ((v104 & 1) != 0)
      goto LABEL_100;
    goto LABEL_264;
  }
  v112 = 0;
  v113 = (int *)v184;
  while (1)
  {
    v114 = v184[v112];
    if (v114 != 6)
      break;
    v112 += 15;
    if (15 * v185 == v112)
      goto LABEL_251;
  }
  if (((1 << v114) & 0xB7) == 0)
  {
    if (v104)
    {
      if ((v204 & 0x1000000000) != 0)
        sub_22F2E3F64(v5, (uint64_t)&v149);
      goto LABEL_100;
    }
LABEL_253:
    while (1)
    {
      v116 = *v113;
      v113 += 30;
      v115 = v116;
      if (v116 != 6)
        break;
      if (!--v111)
        goto LABEL_264;
    }
    if (((1 << v115) & 0xB7) != 0)
    {
LABEL_264:
      v117 = *(_QWORD *)(v5 + 96);
      *(_DWORD *)(v117 + 312) = v179;
      *(_DWORD *)(v117 + 316) = 1563;
      if (*(char *)(v117 + 311) < 0)
      {
        **(_BYTE **)(v117 + 288) = 0;
        *(_QWORD *)(v117 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v117 + 288) = 0;
        *(_BYTE *)(v117 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v141, v117);
      sub_22E3BB0B8((uint64_t)v141);
      sub_22E80CED8(v5);
      LOWORD(v158) = 24;
      v99 = v5;
      v100 = 0;
LABEL_267:
      sub_22E885940(v99, (unsigned __int16 *)&v158, 1, v100);
      if (*(_WORD *)(v5 + 32) == 62)
      {
        *(_DWORD *)(v5 + 40) = *(_DWORD *)(v5 + 16);
        sub_22F18FB4C(*(_QWORD *)(v5 + 8), v6);
      }
      v17 = 0;
      goto LABEL_270;
    }
    if ((v204 & 7) == 1)
    {
      v121 = *(_QWORD *)(v5 + 96);
      *(_DWORD *)(v121 + 312) = v179;
      *(_DWORD *)(v121 + 316) = 1564;
      if (*(char *)(v121 + 311) < 0)
      {
        **(_BYTE **)(v121 + 288) = 0;
        *(_QWORD *)(v121 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v121 + 288) = 0;
        *(_BYTE *)(v121 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v140, v121);
      sub_22E3BB0B8((uint64_t)v140);
      v204 &= 0xFFFFFFFFFFFFFFC0;
      *(_QWORD *)&v213 = 0;
    }
    v17 = (unsigned int *)sub_22E80BA68(v5, v14, v13, (uint64_t)v176, v12, (int *)v145, v144);
    if (v17)
    {
      if ((_DWORD)v226)
      {
        v122 = 0;
        v123 = 8 * v226;
        do
        {
          v124 = *(_QWORD *)&v225[v122];
          v125 = *(unsigned int *)(v124 + 160);
          if (v125 >= *(unsigned int *)(v124 + 164))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v125 = *(unsigned int *)(v124 + 160);
          }
          *(_QWORD *)(*(_QWORD *)(v124 + 152) + 8 * v125) = v17;
          ++*(_DWORD *)(v124 + 160);
          v122 += 8;
        }
        while (v123 != v122);
      }
      if ((_DWORD)v174)
      {
        v126 = 0;
        v127 = 8 * v174;
        do
        {
          v128 = *(_QWORD *)((char *)v173 + v126);
          v129 = *(unsigned int *)(v128 + 160);
          if (v129 >= *(unsigned int *)(v128 + 164))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v129 = *(unsigned int *)(v128 + 160);
          }
          *(_QWORD *)(*(_QWORD *)(v128 + 152) + 8 * v129) = v17;
          ++*(_DWORD *)(v128 + 160);
          v126 += 8;
        }
        while (v127 != v126);
      }
    }
    LODWORD(v174) = 0;
    if (*(_WORD *)(v5 + 32) == 62)
      sub_22E884DD8(v5, 3, 0);
LABEL_307:
    v15 = v132;
    goto LABEL_270;
  }
LABEL_251:
  if ((v104 & 1) == 0)
  {
    v113 = (int *)v184;
    goto LABEL_253;
  }
  do
  {
LABEL_100:
    v53 = *(unsigned __int16 *)(v5 + 32);
    v54 = v53 == 63 || v53 == 23;
    if (!v54 || (_DWORD)v144)
      goto LABEL_106;
    v61 = v142;
    if (v142 >= 2 && !(_DWORD)v177 && !v178 && !(_DWORD)v182)
    {
      sub_22E884578(v5, (int *)v6, 1429, (uint64_t)v139);
      sub_22E3BB0B8((uint64_t)v139);
      LOWORD(v158) = 65;
      sub_22E885940(v5, (unsigned __int16 *)&v158, 1, 3);
LABEL_106:
      v55 = 0;
      v56 = 0;
      goto LABEL_107;
    }
    if (sub_22E8AD4A8((uint64_t)v176))
    {
      v55 = 0;
      v56 = sub_22E83313C(v143, 0) ^ 1;
    }
    else if ((**(_DWORD **)v176 & 5 | 2) == 3 || (v204 & 0x1000000000) != 0)
    {
      v55 = 0;
      v56 = 1;
    }
    else
    {
      if (v61 >= 2)
      {
        if ((**(_QWORD **)(*(_QWORD *)(v5 + 8) + 56) & 0x1000) != 0)
          v97 = 1910;
        else
          v97 = 1790;
        sub_22E884578(v5, (int *)v6, v97, (uint64_t)v138);
        sub_22E3BB0B8((uint64_t)v138);
        v53 = *(unsigned __int16 *)(v5 + 32);
      }
      v56 = 0;
      if (v53 == 63)
        v55 = 1;
      else
        v55 = 2;
    }
LABEL_107:
    if ((v204 & 0x1000000000) != 0)
    {
      v158 = &v159[8];
      *(_QWORD *)v159 = 0x400000000;
      if ((BYTE8(v188) & 4) != 0)
      {
        v59 = *(char **)(*((_QWORD *)&v188 + 1) & 0xFFFFFFFFFFFFFFF8);
        v60 = &v59[8 * *(unsigned int *)((*((_QWORD *)&v188 + 1) & 0xFFFFFFFFFFFFFFF8) + 8)];
      }
      else
      {
        v59 = (char *)&v188 + 8;
        v60 = (char *)&v188 + 8 * (*((_QWORD *)&v188 + 1) > 7uLL) + 8;
      }
      if (v59 != v60)
      {
        v62 = 0;
        do
        {
          v63 = *(unsigned __int16 *)(*(_QWORD *)v59 + 28) | (*(unsigned __int8 *)(*(_QWORD *)v59 + 30) << 16);
          v64 = v63 & 0x70000;
          v65 = v63 & 0x5FFFF;
          if (v64 == 0x10000 || v65 == 327697)
          {
            v67 = *(_QWORD *)(*(_QWORD *)v59 + 16);
            if (v62 >= *(_DWORD *)&v159[4])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v62 = *(_DWORD *)v159;
            }
            *((_QWORD *)v158 + v62) = v67;
            v62 = ++*(_DWORD *)v159;
          }
          v59 += 8;
        }
        while (v59 != v60);
        if (v62)
        {
          v68 = v158;
          v69 = 8 * v62;
          do
          {
            v70 = *(_QWORD *)(v5 + 96);
            *(_DWORD *)(v70 + 312) = *v68;
            *(_DWORD *)(v70 + 316) = 1447;
            if (*(char *)(v70 + 311) < 0)
            {
              **(_BYTE **)(v70 + 288) = 0;
              *(_QWORD *)(v70 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v70 + 288) = 0;
              *(_BYTE *)(v70 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v137, v70);
            v71 = *(_QWORD *)v68;
            v72 = v137[0];
            if (!v137[0])
            {
              v72 = sub_22E3B8AAC(v137[1]);
              v137[0] = v72;
            }
            sub_22E4D6448(v72 + 336, v71, 1);
            sub_22E3BB0B8((uint64_t)v137);
            v68 += 2;
            v69 -= 8;
          }
          while (v69);
        }
      }
      v58 = sub_22EACFAB8(*(_QWORD *)(v5 + 88), *(_QWORD **)(*(_QWORD *)(v5 + 88) + 12888), (uint64_t)v176, v134, v133, v49, v50, v51);
      if (v158 != &v159[8])
        free(v158);
    }
    else
    {
      v57 = sub_22EAACA38(*(_QWORD **)(v5 + 88), *(uint64_t **)(*(_QWORD *)(v5 + 88) + 12888), v157, (_QWORD **)v176, (int **)v134, v133, v142 & 0xFFFFFFFFFFFFFFFELL, (int *)v145, v55);
      v58 = v57;
      if (v57)
      {
        if ((*(_DWORD *)(v57 + 28) & 0x7F) != 0x1F || (v58 = *(_QWORD *)(v57 + 48)) != 0)
        {
          sub_22EA63DD8(*(_QWORD **)(v5 + 88), *(_QWORD *)(*(_QWORD *)(v5 + 88) + 12888), v58, v13, 1);
          sub_22E9114FC(*(_QWORD **)(v5 + 88), v58);
        }
      }
    }
    if (v55)
    {
      v73 = **(_QWORD **)v176 & 7;
      v74 = v73 == 3;
      if (v73 == 3)
        v56 = 1;
    }
    else
    {
      v74 = 1;
    }
    if ((_DWORD)v144 && (_DWORD)v146)
    {
      v75 = *(_QWORD *)(v5 + 96);
      *(_DWORD *)(v75 + 312) = v144;
      *(_DWORD *)(v75 + 316) = 1479;
      if (*(char *)(v75 + 311) < 0)
      {
        **(_BYTE **)(v75 + 288) = 0;
        *(_QWORD *)(v75 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v75 + 288) = 0;
        *(_BYTE *)(v75 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v158, v75);
      v76 = (unsigned __int8 *)v158;
      if (!v158)
      {
        v76 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v159);
        v158 = v76;
      }
      v76[*v76 + 1] = 1;
      v77 = v158;
      v78 = *(unsigned __int8 *)v158;
      *(_BYTE *)v158 = v78 + 1;
      v77[v78 + 2] = "abstract";
      sub_22E3BB0B8((uint64_t)&v158);
    }
    if (v58)
    {
      v79 = v144;
      if ((_DWORD)v144 || (v79 = v146) != 0)
        sub_22EAD1204(*(_QWORD **)(v5 + 88), v58, v79);
    }
    if (v74)
    {
      if (v56)
      {
        v98 = sub_22E8AD4A8((uint64_t)v176);
        if ((sub_22F2E3FBC(v5, v58, v98, (_DWORD *)&v144 + 1) & 1) != 0)
        {
          if (v58)
            sub_22EA117E4();
          LOWORD(v158) = 65;
          sub_22E885940(v5, (unsigned __int16 *)&v158, 1, 3);
          if (v58)
            goto LABEL_173;
        }
        else if (v58)
        {
          sub_22EA28AD8();
          goto LABEL_173;
        }
      }
      else if (v58)
      {
        if ((v204 & 7) == 3)
          sub_22EA117E4();
LABEL_173:
        if ((*(_BYTE *)(v58 + 28) & 0x80) == 0)
        {
          if ((_DWORD)v226)
          {
            v83 = 0;
            v84 = 8 * v226;
            do
            {
              v85 = *(_QWORD *)&v225[v83];
              v86 = *(unsigned int *)(v85 + 160);
              if (v86 >= *(unsigned int *)(v85 + 164))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v86 = *(unsigned int *)(v85 + 160);
              }
              *(_QWORD *)(*(_QWORD *)(v85 + 152) + 8 * v86) = v58;
              ++*(_DWORD *)(v85 + 160);
              v83 += 8;
            }
            while (v84 != v83);
          }
          if ((_DWORD)v174)
          {
            v87 = 0;
            v88 = 8 * v174;
            do
            {
              v89 = *(_QWORD *)((char *)v173 + v87);
              v90 = *(unsigned int *)(v89 + 160);
              if (v90 >= *(unsigned int *)(v89 + 164))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v90 = *(unsigned int *)(v89 + 160);
              }
              *(_QWORD *)(*(_QWORD *)(v89 + 152) + 8 * v90) = v58;
              ++*(_DWORD *)(v89 + 160);
              v87 += 8;
            }
            while (v88 != v87);
          }
        }
        sub_22EA2BC1C(*(_QWORD *)(v5 + 88), v58);
        v91 = v171;
        if (v171 >= (unint64_t)HIDWORD(v171))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v91 = v171;
        }
        *((_QWORD *)v170 + v91) = v58;
        LODWORD(v171) = v171 + 1;
        v92 = v185;
        if ((_DWORD)v185)
        {
          v93 = (int *)v184;
          while (1)
          {
            v95 = *v93;
            v93 += 30;
            v94 = v95;
            if (v95 != 6)
              break;
            if (!--v92)
              goto LABEL_192;
          }
          if (((1 << v94) & 0xB7) == 0 && (**(_QWORD **)v176 & 7) != 1)
            sub_22E830518((_QWORD *)v5, (uint64_t)v176, v58);
        }
      }
    }
    else
    {
      if ((**(_QWORD **)(*(_QWORD *)(v5 + 8) + 56) & 0x200) != 0)
        v80 = 1938;
      else
        v80 = 1846;
      sub_22E884578(v5, (int *)v6, v80, (uint64_t)v136);
      sub_22E3BB0B8((uint64_t)v136);
      v81 = v185;
      if (!(_DWORD)v185)
        goto LABEL_172;
      v82 = v184;
      while (*(_DWORD *)v82 == 6)
      {
        v82 += 15;
        if (!--v81)
          goto LABEL_172;
      }
      if (*(_DWORD *)v82 == 2 && !v82[5])
      {
        sub_22E884578(v5, (int *)v6, 1576, (uint64_t)v135);
        sub_22E3BB0B8((uint64_t)v135);
        LOWORD(v158) = 65;
        sub_22E885940(v5, (unsigned __int16 *)&v158, 1, 3);
        if (v58)
        {
          sub_22EFC77E8(v58, 1);
          goto LABEL_173;
        }
      }
      else
      {
LABEL_172:
        sub_22F2E097C(v5, v58);
        if (v58)
          goto LABEL_173;
      }
    }
LABEL_192:
    LODWORD(v174) = 0;
    if (!v198)
    {
      sub_22EA7E84C(v194, v197, (unsigned int *)v58);
      v198 = 1;
    }
    if (*(_WORD *)(v5 + 32) != 65)
      break;
    *(_DWORD *)(v5 + 40) = *(_DWORD *)(v5 + 16);
    sub_22F18FB4C(*(_QWORD *)(v5 + 8), v6);
    v96 = *(unsigned int *)(v5 + 40);
    if ((*(_WORD *)(v5 + 34) & 1) != 0 && !sub_22E81C8A4(v5, 7))
    {
      v110 = *(_QWORD *)(v5 + 96);
      *(_DWORD *)(v110 + 312) = v96;
      *(_DWORD *)(v110 + 316) = 1533;
      if (*(char *)(v110 + 311) < 0)
      {
        **(_BYTE **)(v110 + 288) = 0;
        *(_QWORD *)(v110 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v110 + 288) = 0;
        *(_BYTE *)(v110 + 311) = 0;
      }
      sub_22E78E558((uint64_t)v137, v110);
      v160 = 0;
      *(_QWORD *)&v159[4] = 0;
      v163 = 0x100000000000000;
      v162 = 0;
      v164 = 0;
      v158 = (void *)(v96 | (v96 << 32));
      v159[0] = 1;
      v161 = (void *)59;
      sub_22E6D82D0(v137, &v158);
      if (SHIBYTE(v163) < 0)
        operator delete(v161);
      sub_22E3BB0B8((uint64_t)v137);
      goto LABEL_243;
    }
    sub_22E81DC5C((uint64_t)v176);
    LODWORD(v145[0]) = 0;
    v142 = 0;
    v144 = 0;
    LODWORD(v193) = v96;
    sub_22E831780(v5);
    sub_22E81CAF0((uint64_t *)v5, (uint64_t)v176, 0, 0);
    sub_22E831780(v5);
  }
  while (!sub_22E830D08(v5, (uint64_t)v176, v145, (uint64_t *)&v142, (uint64_t)&v173));
  if (sub_22E8847B4(v5, 0x3Eu, 1532, "", 0))
  {
    LOWORD(v158) = 24;
    v99 = v5;
    v100 = 3;
    goto LABEL_267;
  }
LABEL_243:
  v17 = (unsigned int *)sub_22EA2CFC4(*(_QWORD **)(v5 + 88), *(_QWORD *)(*(_QWORD *)(v5 + 88) + 12888), (uint64_t *)&v204, (uint64_t *)v170, v171);
LABEL_270:
  sub_22E828B78((uint64_t)&v165);
  if (v170 != v172)
    free(v170);
  if (v173 != v175)
    free(v173);
  sub_22E828C30((uint64_t)&v194);
  sub_22E827F78((uint64_t)v176);
LABEL_275:
  sub_22E828B78((uint64_t)&v199);
  sub_22E828C30((uint64_t)&v222);
  if (DWORD1(v212))
    free(v211[1]);
  sub_22E8D1BC4(v209, (uint64_t)&v209);
  sub_22E80F94C((uint64_t *)&v210);
  sub_22E80F94C(&v208);
  if (v225 != v227)
    free(v225);
LABEL_21:
  sub_22E80F94C(&v150);
  sub_22E8D1BC4(v153, (uint64_t)&v153);
  sub_22E80F94C(&v154);
  sub_22E80F94C((uint64_t *)&v152);
LABEL_93:
  *(_BYTE *)(v5 + 945) = v15;
  return v17;
}

uint64_t sub_22E83313C(_DWORD **a1, int a2)
{
  _WORD *v2;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  void *v16;
  __int128 v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  if (*((_WORD *)*a1 + 16) != 63)
    return 0;
  v5 = *((_QWORD *)v2 + 1);
  v6 = *(_QWORD *)(v5 + 2816);
  if (v6 >= *(unsigned int *)(v5 + 2784))
    v7 = sub_22F162D2C(v5, 1u);
  else
    v7 = *(_QWORD *)(v5 + 2776) + 24 * v6;
  v16 = v18;
  v17 = xmmword_22F44E360;
  if (*(_WORD *)(v7 + 16) != 7)
    goto LABEL_20;
  v9 = (_BYTE *)sub_22F18E170(*((_QWORD *)v2 + 1), v7, (uint64_t *)&v16, 0);
  if (v10 != 1 || *v9 != 48)
    goto LABEL_20;
  v11 = (uint64_t)(v2 + 8);
  if (v2[16] != 1)
  {
    v12 = *((_QWORD *)v2 + 1);
    v13 = *(_QWORD *)(v12 + 2816) + 1;
    if (v13 >= *(unsigned int *)(v12 + 2784))
      v11 = sub_22F162D2C(v12, 2u);
    else
      v11 = *(_QWORD *)(v12 + 2776) + 24 * v13;
  }
  v14 = *(unsigned __int16 *)(v11 + 16);
  if (v14 == 62 || v14 == 65 || a2 && (v14 == 23 || v14 == 151 || v14 == 61))
  {
    *((_DWORD *)v2 + 10) = *((_DWORD *)v2 + 4);
    sub_22F18FB4C(*((_QWORD *)v2 + 1), (unsigned int *)v2 + 4);
    *a1[1] = *((_DWORD *)v2 + 10);
    *((_DWORD *)v2 + 10) = *((_DWORD *)v2 + 4);
    sub_22F18FB4C(*((_QWORD *)v2 + 1), (unsigned int *)v2 + 4);
    *a1[2] = *((_DWORD *)v2 + 10);
    v8 = 1;
  }
  else
  {
LABEL_20:
    v8 = 0;
  }
  if (v16 != v18)
    free(v16);
  return v8;
}

unsigned int *sub_22E833304(uint64_t a1, int *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  int v5;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  char v43;
  unsigned __int8 *v44;
  __int128 v45;
  void *__p;
  uint64_t v47;
  uint64_t v48;
  char v49;
  unsigned __int8 *v50;
  uint64_t v51;

  v5 = a4;
  v9 = *(_WORD *)(a1 + 80);
  v10 = *(_WORD *)(a1 + 82);
  v11 = *(_WORD *)(a1 + 84);
  v12 = a1 + 16;
  v13 = *(unsigned __int16 *)(a1 + 32);
  if (v13 > 0x17C)
  {
    switch(*(_WORD *)(a1 + 32))
    {
      case 0x17D:
      case 0x17E:
        sub_22F2E42B8(a1, a4, (uint64_t)a3, a2);
        goto LABEL_58;
      case 0x198:
      case 0x19B:
      case 0x19C:
      case 0x19E:
      case 0x1A0:
      case 0x1A1:
      case 0x1A2:
      case 0x1A3:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x1A7:
      case 0x1AB:
      case 0x1AE:
      case 0x1AF:
      case 0x1B0:
      case 0x1B1:
      case 0x1B2:
        v37 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v37 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v37 + 316) = 1722;
        if (*(char *)(v37 + 311) < 0)
        {
          **(_BYTE **)(v37 + 288) = 0;
          *(_QWORD *)(v37 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v37 + 288) = 0;
          *(_BYTE *)(v37 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v44, v37);
        v38 = sub_22F2F2CB0(v5);
        v39 = v44;
        if (!v44)
        {
          v39 = (unsigned __int8 *)sub_22E3B8AAC(v45);
          v44 = v39;
        }
        v39[*v39 + 1] = 1;
        v40 = v44;
        v41 = *v44;
        *v44 = v41 + 1;
        *(_QWORD *)&v40[8 * v41 + 16] = v38;
        sub_22E3BB0B8((uint64_t)&v44);
        v42 = *(_DWORD *)(a1 + 16);
        if (*(_DWORD *)(a1 + 20))
          v42 = *(_DWORD *)(a1 + 20);
        *(_DWORD *)(a1 + 40) = v42;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v12);
        goto LABEL_58;
      case 0x199:
        sub_22F2EDFFC(a1);
        goto LABEL_58;
      case 0x19A:
        sub_22F2EE050(a1);
        goto LABEL_58;
      case 0x19D:
        sub_22F2EE160(a1);
        goto LABEL_58;
      case 0x19F:
        sub_22F2EE11C(a1);
        goto LABEL_58;
      case 0x1A8:
        sub_22F2EE328(a1);
        goto LABEL_58;
      case 0x1A9:
        sub_22F2EE378(a1);
        goto LABEL_58;
      case 0x1AA:
        sub_22E863A08(a1);
        goto LABEL_58;
      case 0x1AC:
      case 0x1AD:
        v18 = (unsigned int *)sub_22E85B9CC(a1, a2, a3, 1, a4, a5);
        goto LABEL_64;
      default:
        goto LABEL_63;
    }
  }
  if (*(unsigned __int16 *)(a1 + 32) > 0x8Eu)
  {
    if ((v13 - 143) < 2)
      goto LABEL_12;
    goto LABEL_63;
  }
  switch(v13)
  {
    case 62:
      sub_22E884DD8(a1, 1, a4);
      goto LABEL_58;
    case 139:
      sub_22F2E4640(a1, a5);
LABEL_58:
      v35 = 0;
      goto LABEL_59;
    case 142:
      v14 = *(_QWORD *)(a1 + 8);
      if ((*(_DWORD *)(*(_QWORD *)(v14 + 56) + 52) & 0x40000000) == 0)
        goto LABEL_19;
      v15 = *(_QWORD *)(v14 + 2816);
      v16 = v15 >= *(unsigned int *)(v14 + 2784) ? sub_22F162D2C(v14, 1u) : *(_QWORD *)(v14 + 2776) + 24 * v15;
      if (*(_WORD *)(v16 + 16) == 61)
      {
        v13 = *(unsigned __int16 *)(a1 + 32);
LABEL_12:
        v17 = 3;
        if (v13 > 143)
        {
          if (v13 == 144)
          {
            v17 = 0;
            goto LABEL_30;
          }
          if (v13 != 315)
            goto LABEL_30;
        }
        else if (v13 != 142)
        {
          if (v13 == 143)
            v17 = 1;
LABEL_30:
          v43 = v17;
          *a2 = v17;
          v20 = *(_DWORD *)(a1 + 16);
          v19 = *(_DWORD *)(a1 + 20);
          *(_DWORD *)(a1 + 40) = v20;
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v12);
          sub_22E820B10(a3);
          v21 = *(unsigned __int16 *)(a1 + 32);
          if (v21 == 186)
          {
            sub_22E810414(a1, a3, 0, 0, 0);
            v21 = *(unsigned __int16 *)(a1 + 32);
          }
          if (v21 == 62)
          {
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
            sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v12);
            v12 = *(unsigned int *)(a1 + 40);
            v22 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v22 + 312) = v12;
            *(_DWORD *)(v22 + 316) = 15;
            if (*(char *)(v22 + 311) < 0)
            {
              **(_BYTE **)(v22 + 288) = 0;
              *(_QWORD *)(v22 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v22 + 288) = 0;
              *(_BYTE *)(v22 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v50, v22);
            v23 = v50;
            if (!v50)
            {
              v23 = (unsigned __int8 *)sub_22E3B8AAC(v51);
              v50 = v23;
            }
            v23[*v23 + 1] = 4;
            v24 = v50;
            v25 = *v50;
            *v50 = v25 + 1;
            *(_QWORD *)&v24[8 * v25 + 16] = 61;
            BYTE12(v45) = 0;
            *(_QWORD *)((char *)&v45 + 4) = 0;
            v47 = 0;
            v48 = 0x100000000000000;
            v49 = 0;
            v44 = (unsigned __int8 *)(v12 | (v12 << 32));
            LOBYTE(v45) = 1;
            __p = (void *)58;
            sub_22E6D82D0((uint64_t *)&v50, &v44);
            if (SHIBYTE(v48) < 0)
              operator delete(__p);
          }
          else
          {
            if (v21 == 61)
            {
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
              sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v12);
              LODWORD(v12) = *(_DWORD *)(a1 + 40);
              goto LABEL_49;
            }
            v12 = (v19 + v20);
            v26 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v26 + 312) = v12;
            *(_DWORD *)(v26 + 316) = 15;
            if (*(char *)(v26 + 311) < 0)
            {
              **(_BYTE **)(v26 + 288) = 0;
              *(_QWORD *)(v26 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v26 + 288) = 0;
              *(_BYTE *)(v26 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v50, v26);
            v27 = v50;
            if (!v50)
            {
              v27 = (unsigned __int8 *)sub_22E3B8AAC(v51);
              v50 = v27;
            }
            v27[*v27 + 1] = 4;
            v28 = v50;
            v29 = *v50;
            *v50 = v29 + 1;
            *(_QWORD *)&v28[8 * v29 + 16] = 61;
            BYTE12(v45) = 0;
            *(_QWORD *)((char *)&v45 + 4) = 0;
            v47 = 0;
            v48 = 0x100000000000000;
            v44 = (unsigned __int8 *)(v12 | (v12 << 32));
            LOBYTE(v45) = 0;
            __p = (void *)58;
            v49 = 0;
            sub_22E6D82D0((uint64_t *)&v50, &v44);
            if (SHIBYTE(v48) < 0)
              operator delete(__p);
          }
          sub_22E3BB0B8((uint64_t)&v50);
LABEL_49:
          if (v5 == 27 && *a2)
          {
            v30 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v30 + 312) = v20;
            *(_DWORD *)(v30 + 316) = 1424;
            if (*(char *)(v30 + 311) < 0)
            {
              **(_BYTE **)(v30 + 288) = 0;
              *(_QWORD *)(v30 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v30 + 288) = 0;
              *(_BYTE *)(v30 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v44, v30);
            v31 = *a2;
            v32 = v44;
            if (!v44)
            {
              v32 = (unsigned __int8 *)sub_22E3B8AAC(v45);
              v44 = v32;
            }
            v32[*v32 + 1] = 2;
            v33 = v44;
            v34 = *v44;
            *v44 = v34 + 1;
            *(_QWORD *)&v33[8 * v34 + 16] = v31 == 1;
            sub_22E3BB0B8((uint64_t)&v44);
          }
          if (sub_22EAAB770(*(_QWORD **)(a1 + 88), v43, v20, v12, (uint64_t)a3))
            sub_22E820B10(a3);
          goto LABEL_58;
        }
LABEL_19:
        v17 = 2;
        goto LABEL_30;
      }
      break;
  }
LABEL_63:
  LODWORD(v44) = 0;
  v45 = 0uLL;
  v18 = sub_22E831804();
LABEL_64:
  v35 = v18;
LABEL_59:
  sub_22E80F8BC(a1 + 2416, (unsigned __int16 *)a1);
  *(_WORD *)(a1 + 80) = v9;
  *(_WORD *)(a1 + 82) = v10;
  *(_WORD *)(a1 + 84) = v11;
  return v35;
}

uint64_t sub_22E8338EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _BOOL4 v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  _DWORD *v51;
  int v52;
  _BYTE v53[144];
  unint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t *v59;
  _BYTE **v60;
  _BYTE *v61;
  char v62;
  uint64_t v63;
  int v64;
  __int16 v65;
  uint64_t (*v66)(uint64_t);
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  BOOL v70;
  unsigned __int8 *v71;
  __int128 v72;
  void *__p;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[2];
  int v94;
  void *v95;
  uint64_t v96;
  _BYTE v97[32];
  void *v98[2];
  _BYTE v99[80];
  uint64_t *v100;
  uint64_t v101;
  _QWORD v102[15];

  v102[12] = *MEMORY[0x24BDAC8D0];
  sub_22E836A6C((uint64_t)v53, (_QWORD *)a1, 1);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v52 = *(_DWORD *)(a1 + 40);
  v95 = v97;
  v96 = 0x400000000;
  if (*(_WORD *)(a1 + 32) == 3)
  {
LABEL_2:
    v4 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v4 + 752))
    {
      *(_BYTE *)(v4 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    sub_22E9C98E4(*(char ***)(a1 + 88), a2, (uint64_t **)v95, v96);
    goto LABEL_93;
  }
  v5 = 0;
  v6 = 0uLL;
  while (1)
  {
    v91 = a2;
    v89 = v6;
    v90 = v6;
    if ((sub_22E8408AC(a1, (uint64_t)&v89, 0, 0, 0, 0, 0, 0, 0, 0) & 1) != 0)
    {
      v7 = 1;
      goto LABEL_61;
    }
    v88 = 0;
    v8 = *(_DWORD *)(a1 + 16);
    __p = 0;
    v74 = 0;
    *((_QWORD *)&v72 + 1) = 0;
    v71 = 0;
    v75 = a1 + 960;
    v87 = 0;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v85 = 0u;
    v86 = 0;
    v69 = 0;
    v70 = 0;
    v9 = *(unsigned __int16 *)(a1 + 32);
    if (v9 == 407)
    {
      sub_22E82C1E4(a1, (uint64_t)&v71);
      v10 = 0;
LABEL_22:
      v13 = 0;
      v14 = 0;
      goto LABEL_23;
    }
    if (v9 != 401)
    {
      if (v9 != 5)
        goto LABEL_18;
      v10 = *(_QWORD *)(a1 + 24);
      v88 = v10;
      *(_DWORD *)(a1 + 40) = v8;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      goto LABEL_22;
    }
    v11 = *(_QWORD *)(a1 + 24);
    if (!v11 || (v12 = *(_DWORD *)(v11 + 32), v12 > 5) || ((1 << v12) & 0x35) == 0)
    {
LABEL_18:
      sub_22E884578(a1, (int *)(a1 + 16), 1514, (uint64_t)&v100);
LABEL_19:
      sub_22E3BB0B8((uint64_t)&v100);
      goto LABEL_20;
    }
    sub_22E881648(a1, (uint64_t)&v89, 1);
    v13 = *(_QWORD *)(a1 + 24);
    v14 = v13 == 0;
    v69 = v13;
    v70 = v13 == 0;
    v15 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v15 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 40) = v15;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v10 = 0;
LABEL_23:
    v16 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
    v17 = *(unsigned __int16 *)(a1 + 32);
    if ((v16 & 0x200) != 0 && v17 == 23)
    {
      v18 = v5;
      v19 = a2;
      sub_22E884578(a1, (int *)(a1 + 16), 1932, (uint64_t)&v100);
      sub_22E3BB0B8((uint64_t)&v100);
      v20 = sub_22E84AF40(a1);
      if ((v20 & 1) == 0)
      {
        if (*(_WORD *)(a1 + 32) == 26)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v21 = *(_DWORD *)(a1 + 40);
          if (v14)
            goto LABEL_28;
        }
        else
        {
          v21 = 0;
          if (v14)
            goto LABEL_28;
        }
        v51 = (_DWORD *)(v20 & 0xFFFFFFFFFFFFFFFELL);
        a2 = v19;
        v7 = sub_22EAADEB8(*(_QWORD **)(a1 + 88), v19, *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v89, v10, v13, (uint64_t)&v71, v8, v51, v21);
        goto LABEL_29;
      }
LABEL_28:
      v7 = 1;
      a2 = v19;
LABEL_29:
      v5 = v18;
      goto LABEL_58;
    }
    if (v17 == 21)
    {
      v61 = (_BYTE *)(a1 + 944);
      v62 = *(_BYTE *)(a1 + 944);
      *(_BYTE *)(a1 + 944) = 1;
      v63 = a1;
      v64 = 1441813;
      v65 = 62;
      v67 = 0;
      v68 = 0;
      v66 = sub_22E80F720;
      sub_22E811DE8((uint64_t)&v61);
      v100 = v102;
      v101 = 0xC00000000;
      v98[0] = v99;
      v98[1] = (void *)0x1400000000;
      v54 = &v69;
      v55 = a1;
      v56 = &v91;
      v57 = (uint64_t *)&v89;
      v58 = &v100;
      v59 = &v88;
      v60 = &v61;
      if (*(_WORD *)(a1 + 32) == 22
        || (v92 = a1, v93[0] = &v54, !sub_22E83EFC4(a1, &v100, v98, sub_22E837558, &v92, 0, 0)))
      {
        sub_22E811E8C((uint64_t)&v61);
        if (*(_WORD *)(a1 + 32) == 26)
        {
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
          sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
          v34 = *(_DWORD *)(a1 + 40);
        }
        else
        {
          v34 = 0;
        }
        if (v70)
          goto LABEL_51;
        v7 = sub_22EAAEB14(*(_QWORD **)(a1 + 88), v91, *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v89, v88, v69, (uint64_t)&v71, v8, v68, v100, v101, SHIDWORD(v68), 0, v34);
      }
      else
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 864) && !*(_BYTE *)(a1 + 948) && !*((_BYTE *)v54 + 8))
        {
          v22 = v5;
          v23 = a2;
          v24 = v55;
          v25 = *(_QWORD *)(v55 + 88);
          v26 = *v56;
          v92 = *v57;
          sub_22F0AB560(v93, (uint64_t)(v57 + 1));
          sub_22E9C4E40(v25, v26, (uint64_t)&v92, *v54, (uint64_t)*v58, *((unsigned int *)v58 + 2), *v59);
          if (v94)
            free((void *)v93[1]);
          *(_BYTE *)(v24 + 948) = 1;
          a2 = v23;
          v5 = v22;
        }
        LOWORD(v92) = 22;
        sub_22E885940(a1, (unsigned __int16 *)&v92, 1, 1);
LABEL_51:
        v7 = 1;
      }
      if (v98[0] != v99)
        free(v98[0]);
      if (v100 != v102)
        free(v100);
      *v61 = v62;
      goto LABEL_58;
    }
    if (!v14)
    {
      if ((v16 & 0x200) != 0)
      {
        sub_22E884578(a1, (int *)(a1 + 16), 18, (uint64_t)&v100);
        v27 = v100;
        if (!v100)
        {
          v27 = (uint64_t *)sub_22E3B8AAC(v101);
          v100 = v27;
        }
        *((_BYTE *)v27 + *(unsigned __int8 *)v27 + 1) = 4;
        v28 = v100;
        v29 = *(unsigned __int8 *)v100;
        *(_BYTE *)v100 = v29 + 1;
        v28[v29 + 2] = 21;
        *((_BYTE *)v28 + (v29 + 1) + 1) = 4;
        v30 = v100;
        v31 = *(unsigned __int8 *)v100;
        *(_BYTE *)v100 = v31 + 1;
        v32 = &v30[v31];
        v33 = 23;
      }
      else
      {
        sub_22E884578(a1, (int *)(a1 + 16), 15, (uint64_t)&v100);
        v41 = v100;
        if (!v100)
        {
          v41 = (uint64_t *)sub_22E3B8AAC(v101);
          v100 = v41;
        }
        *((_BYTE *)v41 + *(unsigned __int8 *)v41 + 1) = 4;
        v42 = v100;
        v43 = *(unsigned __int8 *)v100;
        *(_BYTE *)v100 = v43 + 1;
        v32 = &v42[v43];
        v33 = 21;
      }
      v32[2] = v33;
      goto LABEL_19;
    }
LABEL_20:
    v7 = 1;
LABEL_58:
    if (DWORD1(v78))
      free(*((void **)&v77 + 1));
    sub_22E8D1BC4(v75, (uint64_t)&v75);
    sub_22E80F94C((uint64_t *)&v76);
    sub_22E80F94C(&v74);
LABEL_61:
    if (HIDWORD(v90))
      free((void *)v90);
    if ((v7 & 1) != 0)
    {
      v5 = 1;
    }
    else
    {
      v35 = v96;
      if (v96 >= (unint64_t)HIDWORD(v96))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v35 = v96;
      }
      *((_QWORD *)v95 + v35) = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v96) = v96 + 1;
    }
    v36 = *(unsigned __int16 *)(a1 + 32);
    if (v36 != 65)
      break;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
LABEL_79:
    v6 = 0uLL;
    if (*(_WORD *)(a1 + 32) == 3)
      goto LABEL_2;
  }
  if (v36 == 23)
    goto LABEL_92;
  if ((v7 & 1) != 0)
    goto LABEL_91;
  if (v36 == 71 || v36 == 5)
  {
    v37 = sub_22F141A3C(*(unsigned int *)(a1 + 40), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
    v38 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v38 + 312) = v37;
    *(_DWORD *)(v38 + 316) = 1465;
    if (*(char *)(v38 + 311) < 0)
    {
      **(_BYTE **)(v38 + 288) = 0;
      *(_QWORD *)(v38 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v38 + 288) = 0;
      *(_BYTE *)(v38 + 311) = 0;
    }
    v39 = v37;
    v40 = (uint64_t *)sub_22E78E558((uint64_t)&v100, v38);
    BYTE12(v72) = 0;
    *(_QWORD *)((char *)&v72 + 4) = 0;
    v74 = 0;
    v75 = 0x200000000000000;
    __p = (void *)8236;
    v71 = (unsigned __int8 *)(v39 | (v39 << 32));
    LOBYTE(v72) = 0;
    LOBYTE(v76) = 0;
    sub_22E6D82D0(v40, &v71);
    if (SHIBYTE(v75) < 0)
      operator delete(__p);
    sub_22E3BB0B8((uint64_t)&v100);
    goto LABEL_79;
  }
  v44 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v44 + 312) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v44 + 316) = 18;
  if (*(char *)(v44 + 311) < 0)
  {
    **(_BYTE **)(v44 + 288) = 0;
    *(_QWORD *)(v44 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v44 + 288) = 0;
    *(_BYTE *)(v44 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&v71, v44);
  v45 = v71;
  if (!v71)
  {
    v45 = (unsigned __int8 *)sub_22E3B8AAC(v72);
    v71 = v45;
  }
  v45[*v45 + 1] = 4;
  v46 = v71;
  v47 = *v71;
  *v71 = v47 + 1;
  *(_QWORD *)&v46[8 * v47 + 16] = 23;
  v46[(v47 + 1) + 1] = 4;
  v48 = v71;
  v49 = *v71;
  *v71 = v49 + 1;
  *(_QWORD *)&v48[8 * v49 + 16] = 65;
  sub_22E3BB0B8((uint64_t)&v71);
LABEL_91:
  LOWORD(v71) = 23;
  sub_22E885940(a1, (unsigned __int16 *)&v71, 1, 3);
LABEL_92:
  sub_22EAB1D44(*(unsigned int **)(a1 + 88), a2, v52, v95, v96, v5 & 1);
LABEL_93:
  if (v95 != v97)
    free(v95);
  return sub_22E836E3C((uint64_t)v53);
}

uint64_t sub_22E834248(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t *a7)
{
  uint64_t v7;
  unsigned int *v8;
  int v9;
  uint64_t result;
  _QWORD *v12;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v24;
  unsigned int *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unsigned int v38;
  int *v39;
  int *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _BYTE v44[32];
  _BYTE v45[32];
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  _BYTE v55[32];
  _BYTE v56[32];
  __int128 v57;
  uint64_t v58;

  v7 = a1;
  *a7 = 0;
  v8 = (unsigned int *)(a1 + 16);
  v9 = *(unsigned __int16 *)(a1 + 32);
  if (a2)
  {
    if (v9 == 163 || v9 == 149)
    {
      v12 = a6;
      v57 = *(_OWORD *)v8;
      v58 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      v39 = (int *)(a1 + 16);
      v14 = a3;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v8);
      *(_QWORD *)v14 = *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned int *)(a1 + 40) << 32);
      if (*(_WORD *)(a1 + 32) == 21)
      {
        v15 = (_QWORD *)operator new();
        *v15 = v15 + 2;
        v15[1] = 0x400000000;
        *a7 = (uint64_t)v15;
        v16 = sub_22E4EF088((uint64_t)v15, (unint64_t)&v57, 1);
        v17 = *v15 + 24 * *((unsigned int *)v15 + 2);
        v18 = *(_OWORD *)v16;
        *(_QWORD *)(v17 + 16) = *(_QWORD *)(v16 + 16);
        *(_OWORD *)v17 = v18;
        ++*((_DWORD *)v15 + 2);
        v19 = *a7;
        v20 = sub_22E4EF088(*a7, (unint64_t)v39, 1);
        v21 = *(_QWORD *)v19 + 24 * *(unsigned int *)(v19 + 8);
        v22 = *(_OWORD *)v20;
        *(_QWORD *)(v21 + 16) = *(_QWORD *)(v20 + 16);
        *(_OWORD *)v21 = v22;
        ++*(_DWORD *)(v19 + 8);
        *(_DWORD *)(v14 + 4) = sub_22E80F720(a1);
        sub_22E80F398((unsigned __int16 *)a1, 22, 22, *a7, 1, 1);
        *(_DWORD *)(v14 + 4) = *(_DWORD *)(*(_QWORD *)*a7 + 24 * *(unsigned int *)(*a7 + 8) - 24);
        return 11;
      }
      else if (v9 == 163)
      {
        sub_22E884578(a1, v39, 1936, (uint64_t)v56);
        sub_22E3BB0B8((uint64_t)v56);
        *v12 = 0;
        return 5;
      }
      else
      {
        sub_22E884578(a1, v39, 1510, (uint64_t)&v46);
        v30 = v46;
        if (!v46)
        {
          v30 = (unsigned __int8 *)sub_22E3B8AAC(v47);
          v46 = v30;
        }
        v30[*v30 + 1] = 1;
        v31 = v46;
        v32 = *v46;
        *v46 = v32 + 1;
        *(_QWORD *)&v31[8 * v32 + 16] = "throw";
        sub_22E3BB0B8((uint64_t)&v46);
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (v9 == 149)
    {
      v41 = a3;
      v34 = a4;
      v36 = a6;
      v24 = a5;
      v25 = (unsigned int *)(a1 + 16);
      result = sub_22F2E4770(a1, a3, a4, a5);
      v8 = v25;
      a4 = v34;
      a6 = v36;
      a5 = v24;
      a3 = v41;
      v7 = a1;
      v9 = *(unsigned __int16 *)(a1 + 32);
    }
    else
    {
      result = 0;
    }
    if (v9 == 163)
    {
      v40 = (int *)v8;
      v42 = (_QWORD *)a3;
      v35 = a4;
      v37 = a6;
      v33 = a5;
      v38 = result;
      v43 = v7;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 56) + 104) & 0x20) != 0)
      {
        sub_22E884578(v7, (int *)v8, 1599, (uint64_t)&v46);
        v26 = v46;
        if (!v46)
        {
          v26 = (unsigned __int8 *)sub_22E3B8AAC(v47);
          v46 = v26;
        }
        v26[*v26 + 1] = 2;
        v27 = v46;
        v28 = *v46;
        *v46 = v28 + 1;
        *(_QWORD *)&v27[8 * v28 + 16] = 7;
        sub_22E3BB0B8((uint64_t)&v46);
      }
      sub_22E884578(v43, v40, 1936, (uint64_t)v55);
      sub_22E3BB0B8((uint64_t)v55);
      *(_QWORD *)&v57 = 0;
      v54 = 0;
      *(_DWORD *)(v43 + 40) = *(_DWORD *)(v43 + 16);
      sub_22F18FB4C(*(_QWORD *)(v43 + 8), (unsigned int *)v40);
      v29 = *(unsigned int *)(v43 + 40);
      if (*(_WORD *)(v43 + 32) == 21)
      {
        v46 = (unsigned __int8 *)(v43 + 944);
        LOBYTE(v47) = *(_BYTE *)(v43 + 944);
        *(_BYTE *)(v43 + 944) = 1;
        v48 = v43;
        v49 = 1441813;
        v50 = 62;
        v52 = 0;
        v53 = 0;
        v51 = sub_22E80F720;
        sub_22E811DE8((uint64_t)&v46);
        *v37 = sub_22F2E50C0(v43, 0);
        sub_22E811E8C((uint64_t)&v46);
        if ((*v37 & 1) != 0)
        {
          v54 = 5;
        }
        else
        {
          *v37 = sub_22EB14270(*(uint64_t **)(v43 + 88), (unsigned __int8 *)(*v37 & 0xFFFFFFFFFFFFFFFELL), (int *)&v54);
          *(_QWORD *)&v57 = v29 | ((unint64_t)HIDWORD(v53) << 32);
        }
        *v46 = v47;
      }
      else
      {
        v54 = 5;
        *(_QWORD *)&v57 = v29 | (v29 << 32);
      }
      if (v38)
      {
        sub_22E88453C(v43, *(_DWORD *)(v43 + 16), 1480, (uint64_t)v44);
        sub_22E3BB0B8((uint64_t)v44);
      }
      else
      {
        *v42 = v57;
        v38 = v54;
        if (*(_WORD *)(v43 + 32) == 149)
        {
          sub_22E88453C(v43, *(_DWORD *)(v43 + 16), 1480, (uint64_t)v45);
          sub_22E3BB0B8((uint64_t)v45);
          sub_22F2E4770(v43, (uint64_t)&v57, v35, v33);
        }
      }
      return v38;
    }
  }
  return result;
}

uint64_t sub_22E8346F8(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  const char *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  _BYTE v18[12];
  char v19;
  void *__p[2];
  uint64_t v21;
  char v22;
  uint64_t v23[4];
  __int128 __dst;
  uint64_t v25;

  v3 = **(_QWORD **)(*(_QWORD *)(result + 8) + 56);
  if ((v3 & 0x200) != 0)
  {
    v6 = result;
    if (a3)
      v7 = "noexcept";
    else
      v7 = "noexcept(false)";
    if ((v3 & 0x800) != 0)
      v8 = a3;
    else
      v8 = 1;
    if (v8)
      v9 = 1951;
    else
      v9 = 1808;
    v10 = *(_QWORD *)(result + 96);
    *(_DWORD *)(v10 + 312) = a2;
    *(_DWORD *)(v10 + 316) = v9;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v17, v10);
    v11 = v17;
    if (!v17)
    {
      v11 = sub_22E3B8AAC(*(uint64_t *)v18);
      v17 = v11;
    }
    sub_22E4D6448(v11 + 336, a2, 1);
    sub_22E3BB0B8((uint64_t)&v17);
    v12 = *(_QWORD *)(v6 + 96);
    *(_DWORD *)(v12 + 312) = a2;
    *(_DWORD *)(v12 + 316) = 1863;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v23, v12);
    v13 = (unsigned __int8 *)v23[0];
    if (!v23[0])
    {
      v13 = (unsigned __int8 *)sub_22E3B8AAC(v23[1]);
      v23[0] = (uint64_t)v13;
    }
    v13[*v13 + 1] = 1;
    v14 = v23[0];
    v15 = *(unsigned __int8 *)v23[0];
    *(_BYTE *)v23[0] = v15 + 1;
    *(_QWORD *)(v14 + 8 * v15 + 16) = v7;
    if (a3)
      v16 = 8;
    else
      v16 = 15;
    v19 = 0;
    *(_QWORD *)&v18[4] = 0;
    v17 = a2;
    v18[0] = 1;
    HIBYTE(v25) = v16;
    memcpy(&__dst, v7, v16);
    *((_BYTE *)&__dst + v16) = 0;
    v22 = 0;
    *(_OWORD *)__p = __dst;
    v21 = v25;
    sub_22E6D82D0(v23, &v17);
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    return sub_22E3BB0B8((uint64_t)v23);
  }
  return result;
}

uint64_t sub_22E8348B4(_QWORD *a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *i;
  void *v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  size_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void *v67;
  __int128 v68;
  __int128 v69;
  _QWORD *v70;

  v8 = (uint64_t)(a1 + 330);
  v9 = operator new();
  v10 = v9;
  v11 = (char **)(v8 + 8);
  v12 = *(char **)(v8 + 16);
  v13 = *(char **)(v8 + 8);
  v14 = v12 - v13;
  if (v12 == v13)
    v15 = 0;
  else
    v15 = ((v12 - v13) << 6) - 1;
  if (a4)
    v16 = 4;
  else
    v16 = 0;
  *(_BYTE *)v9 = v16 | a3 | *(_BYTE *)v9 & 0xF8;
  *(_QWORD *)(v9 + 8) = a2;
  *(_QWORD *)(v9 + 16) = v9 + 32;
  *(_QWORD *)(v9 + 24) = 0x200000000;
  v17 = a1[334];
  v18 = a1[335];
  v19 = v18 + v17;
  if (v15 == v18 + v17)
  {
    if (v17 < 0x200)
    {
      v41 = (char *)a1[333];
      v42 = (char *)a1[330];
      if (v14 < v41 - v42)
      {
        if (v41 != v12)
        {
          *(_QWORD *)&v68 = operator new(0x1000uLL);
          sub_22F2D2D80(v8, &v68);
          goto LABEL_12;
        }
        *(_QWORD *)&v68 = operator new(0x1000uLL);
        sub_22F2D2EA4((void **)v8, &v68);
        v43 = (_QWORD *)a1[331];
        v46 = *v43;
        v44 = (char *)(v43 + 1);
        v45 = v46;
        a1[331] = v44;
        v47 = (char *)a1[332];
        if (v47 == (char *)a1[333])
        {
          v53 = *(char **)v8;
          if (v44 <= v53)
          {
            if (v47 == v53)
              v60 = 1;
            else
              v60 = (v47 - v53) >> 2;
            if (v60 >> 61)
              goto LABEL_60;
            v61 = (char *)operator new(8 * v60);
            v62 = &v61[8 * (v60 >> 2)];
            v63 = v47 - v44;
            v36 = v47 == v44;
            v47 = v62;
            if (!v36)
            {
              v47 = &v62[v63 & 0xFFFFFFFFFFFFFFF8];
              v64 = 8 * (v63 >> 3);
              v65 = &v61[8 * (v60 >> 2)];
              do
              {
                v66 = *(_QWORD *)v44;
                v44 += 8;
                *(_QWORD *)v65 = v66;
                v65 += 8;
                v64 -= 8;
              }
              while (v64);
            }
            a1[330] = v61;
            a1[331] = v62;
            a1[332] = v47;
            a1[333] = &v61[8 * v60];
            if (v53)
            {
              operator delete(v53);
              v47 = (char *)a1[332];
            }
          }
          else
          {
            v54 = (v44 - v53) >> 3;
            if (v54 >= -1)
              v55 = v54 + 1;
            else
              v55 = v54 + 2;
            v56 = -(v55 >> 1);
            v57 = v55 >> 1;
            v58 = &v44[-8 * v57];
            v59 = v47 - v44;
            if (v59)
            {
              memmove(&v44[-8 * v57], v44, v59);
              v44 = *v11;
            }
            v47 = &v58[v59];
            a1[332] = v47;
            a1[331] = &v44[8 * v56];
          }
        }
        *(_QWORD *)v47 = v45;
        goto LABEL_11;
      }
      if (v41 == v42)
        v48 = 1;
      else
        v48 = (v41 - v42) >> 2;
      v70 = a1 + 333;
      if (!(v48 >> 61))
      {
        *(_QWORD *)&v68 = operator new(8 * v48);
        *((_QWORD *)&v68 + 1) = v68 + v14;
        *(_QWORD *)&v69 = v68 + v14;
        *((_QWORD *)&v69 + 1) = v68 + 8 * v48;
        v67 = operator new(0x1000uLL);
        sub_22F2C31E8((uint64_t)&v68, &v67);
        v49 = (char *)a1[332];
        for (i = (char *)a1[331]; v49 != i; i = *v11)
        {
          v49 -= 8;
          sub_22F2D2EA4((void **)&v68, v49);
        }
        v51 = (void *)a1[330];
        v52 = v69;
        *((_OWORD *)a1 + 165) = v68;
        *((_OWORD *)a1 + 166) = v52;
        if (v51)
          operator delete(v51);
        goto LABEL_12;
      }
    }
    else
    {
      a1[334] = v17 - 512;
      v22 = *(_QWORD *)v13;
      v20 = v13 + 8;
      v21 = v22;
      a1[331] = v20;
      if (v12 != (char *)a1[333])
      {
LABEL_10:
        *(_QWORD *)v12 = v21;
LABEL_11:
        a1[332] += 8;
LABEL_12:
        v13 = (char *)a1[331];
        v18 = a1[335];
        v19 = a1[334] + v18;
        goto LABEL_13;
      }
      v25 = *(char **)v8;
      if (v20 > v25)
      {
        v26 = (v20 - v25) >> 3;
        if (v26 >= -1)
          v27 = v26 + 1;
        else
          v27 = v26 + 2;
        v28 = -(v27 >> 1);
        v29 = v27 >> 1;
        v30 = &v20[-8 * v29];
        v31 = v12 - v20;
        if (v12 != v20)
        {
          memmove(&v20[-8 * v29], v20, v12 - v20);
          v12 = *v11;
        }
        v32 = &v12[8 * v28];
        v12 = &v30[v31];
        a1[332] = &v30[v31];
        a1[331] = v32;
        goto LABEL_10;
      }
      if (v12 == v25)
        v33 = 1;
      else
        v33 = (v12 - v25) >> 2;
      if (!(v33 >> 61))
      {
        v34 = (char *)operator new(8 * v33);
        v35 = &v34[8 * (v33 >> 2)];
        v37 = v12 - v20;
        v36 = v12 == v20;
        v12 = v35;
        if (!v36)
        {
          v12 = &v35[v37 & 0xFFFFFFFFFFFFFFF8];
          v38 = 8 * (v37 >> 3);
          v39 = &v34[8 * (v33 >> 2)];
          do
          {
            v40 = *(_QWORD *)v20;
            v20 += 8;
            *(_QWORD *)v39 = v40;
            v39 += 8;
            v38 -= 8;
          }
          while (v38);
        }
        a1[330] = v34;
        a1[331] = v35;
        a1[332] = v12;
        a1[333] = &v34[8 * v33];
        if (v25)
        {
          operator delete(v25);
          v12 = (char *)a1[332];
        }
        goto LABEL_10;
      }
    }
LABEL_60:
    sub_22E3B3F8C();
  }
LABEL_13:
  *(_QWORD *)(*(_QWORD *)&v13[(v19 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v19 & 0x1FF)) = v10;
  a1[335] = v18 + 1;
  v23 = a1[11];
  ++*(_DWORD *)(v23 + 13064);
  result = *(_QWORD *)(v23 + 3200);
  *(_QWORD *)(v23 + 3200) = 0;
  return result;
}

void sub_22E834CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v4);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v4 += 8;
    }
    while (v5 != v4);
  }
  v7 = *(void **)(a2 + 16);
  if (v7 != (void *)(a2 + 32))
    free(v7);
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E834D34(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  unsigned int v14;

  v3 = a1[331];
  v4 = a1[332];
  v5 = ((v4 - v3) << 6) - 1;
  v6 = a1[11];
  if (v4 == v3)
    v5 = 0;
  --*(_DWORD *)(v6 + 13064);
  *(_QWORD *)(v6 + 3200) = a2;
  v7 = a1[335] - 1;
  v8 = v7 + a1[334];
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
  a1[335] = v7;
  if (v5 - v8 >= 0x400)
  {
    operator delete(*(void **)(v4 - 8));
    a1[332] -= 8;
  }
  if ((*(_BYTE *)v9 & 1) != 0 || !*(_DWORD *)(v9 + 24))
    sub_22E834CB0((uint64_t)a1, v9);
  v10 = a1[335] + a1[334] - 1;
  v11 = *(_QWORD *)(*(_QWORD *)(a1[331] + ((v10 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v10 & 0x1FF));
  v12 = (_QWORD *)operator new();
  result = (uint64_t)sub_22F2E0B8C(v12, (uint64_t)a1, v9);
  v14 = *(_DWORD *)(v11 + 24);
  if (v14 >= *(_DWORD *)(v11 + 28))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v14 = *(_DWORD *)(v11 + 24);
  }
  *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8 * v14) = v12;
  ++*(_DWORD *)(v11 + 24);
  *(_BYTE *)v9 = (*(_BYTE *)(**(_QWORD **)(a1[11] + 12888) + 8) >> 6) & 2 | *(_BYTE *)v9 & 0xFD;
  return result;
}

uint64_t sub_22E834EA8(uint64_t a1, _DWORD *a2, int a3, uint64_t a4)
{
  unsigned int *v6;
  uint64_t v7;
  int v8;
  unsigned __int16 *v9;
  size_t v10;
  unsigned __int16 *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  char **v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned __int16 *v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v26;
  uint64_t v27[4];
  void *v28;
  __int128 v29;
  void *__p[2];
  uint64_t v31;
  char v32;
  void *v33;
  __int128 v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x24BDAC8D0];
  v6 = (unsigned int *)(a1 + 16);
  v7 = *(unsigned __int16 *)(a1 + 32);
  if (v7 > 0x3B)
    goto LABEL_26;
  if (v7 == 3)
  {
    v14 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)(v14 + 752))
    {
      *(_BYTE *)(v14 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v14 + 48) + 6) = 1;
    }
    *(_WORD *)(a1 + 32) = 1;
    v15 = *(char ***)(a1 + 88);
    if ((**(_QWORD **)(v14 + 56) & 0x100) != 0)
      v16 = 1;
    else
      v16 = 2;
    sub_22F313954(v15, v16, a3, a4);
    return 0;
  }
  if (v7 != 7)
  {
    if (((1 << v7) & 0xF80038038000000) != 0)
    {
      v28 = __p;
      v29 = xmmword_22F44E360;
      v8 = *(_DWORD *)(a1 + 16);
      if (v8 < 0)
        v8 = sub_22F1E238C(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), v8);
      v9 = sub_22F410A14(v8, (uint64_t *)&v28, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56), 0);
      if ((word_22F4ADB24[*(unsigned __int8 *)v9] & 0x60) != 0)
      {
        v11 = v9;
        v12 = v10;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
        *a2 = *(_DWORD *)(a1 + 40);
        v13 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), v11, v12);
      }
      else
      {
        v13 = 0;
      }
      if (v28 != __p)
        free(v28);
      return v13;
    }
LABEL_26:
    if ((v7 - 399) >= 0x29
      && (v7 - 7) >= 6
      && (v7 - 13) >= 6
      && (_DWORD)v7 != 1)
    {
      v13 = *(_QWORD *)(a1 + 24);
      if (v13)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
        *a2 = *(_DWORD *)(a1 + 40);
      }
      return v13;
    }
    return 0;
  }
  v17 = *v6;
  if ((*v6 & 0x80000000) == 0)
    return 0;
  v33 = v35;
  v34 = xmmword_22F44E360;
  v18 = sub_22F1E22F0(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), v17);
  v13 = v18;
  v19 = sub_22F410A14(v18, (uint64_t *)&v33, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56), 0);
  if (v20 == 9 && (*(_QWORD *)v19 == 0x5F676E616C635F5FLL ? (v21 = *((_BYTE *)v19 + 8) == 95) : (v21 = 0), v21))
  {
    if (*(unsigned __int16 *)(a1 + 32) - 399 > 0x28)
    {
      v26 = (*(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16));
    }
    else
    {
      v26 = *(unsigned int *)(a1 + 20);
      if (!(_DWORD)v26)
        v26 = *v6;
    }
    if ((v26 & 0x80000000) != 0)
      v26 = sub_22F1E22F0(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), v26);
    sub_22E884578(a1, (int *)v6, 2030, (uint64_t)v27);
    BYTE12(v29) = 0;
    *(_QWORD *)((char *)&v29 + 4) = 0;
    __p[1] = 0;
    v31 = 0x600000000000000;
    v32 = 0;
    v28 = (void *)(v13 | (v26 << 32));
    LOBYTE(v29) = 1;
    __p[0] = (void *)0x676E616C435FLL;
    sub_22E6D82D0(v27, &v28);
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    sub_22E3BB0B8((uint64_t)v27);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v6);
    *a2 = *(_DWORD *)(a1 + 40);
    v13 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), "_Clang", 6uLL);
    v22 = 1;
  }
  else
  {
    v22 = 0;
  }
  if (v33 != v35)
    free(v33);
  if ((v22 & 1) == 0)
    return 0;
  return v13;
}

uint64_t sub_22E835230(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int *a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  int v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  int v34;
  int v36;
  int v37;
  int v38;
  int v40;
  unint64_t v41;
  unint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  _BYTE v70[12];
  char v71;
  void *__p;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76[4];
  _BYTE v77[32];

  v68 = *(unsigned int *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(uint64_t **)(v16 + 56);
  v18 = *v17 & 0x100;
  if (v18)
    v19 = 1;
  else
    v19 = 2;
  if ((*v17 & 0x20) != 0 || (v17[12] & 0x40) != 0)
  {
    if (sub_22F195174(2, a6, a2, *(_QWORD *)(v16 + 64), *(_QWORD *)(v16 + 56)))
    {
      v19 = 4;
      goto LABEL_13;
    }
    v20 = *v17;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(uint64_t **)(v16 + 56);
    v18 = v20 & 0x100;
  }
  if (v18)
    v21 = 3;
  else
    v21 = 4;
  if (!sub_22F195174(v21, a6, a2, *(_QWORD *)(v16 + 64), v17))
  {
    sub_22E80F720(a1);
    LOWORD(v69) = 22;
    sub_22E885940(a1, (unsigned __int16 *)&v69, 1, 0);
    return 0;
  }
LABEL_13:
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 104) & 0x20) != 0
    && sub_22F1ACD3C(a2, a6, v19, 0) == 185)
  {
    sub_22F2E1524(a1, a2, a3, a4, a5, a6, a7, v19);
    return 1;
  }
  if (a6)
  {
    v22 = *(_QWORD *)(a6 + 16);
    switch(*(_DWORD *)v22)
    {
      case 3:
        if (*(_WORD *)(v22 + 16) == 28263 && *(_BYTE *)(v22 + 18) == 117)
          goto LABEL_80;
        v24 = *(unsigned __int16 *)(v22 + 16);
        v25 = *(unsigned __int8 *)(v22 + 18);
        if (v24 != 28015 || v25 != 112)
          break;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 72) <= 0x32u)
          v27 = 1849;
        else
          v27 = 1969;
        v28 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v28 + 312) = a3;
        *(_DWORD *)(v28 + 316) = v27;
        if (*(char *)(v28 + 311) < 0)
        {
          **(_BYTE **)(v28 + 288) = 0;
          *(_QWORD *)(v28 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v28 + 288) = 0;
          *(_BYTE *)(v28 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v77, v28);
        sub_22E3BB0B8((uint64_t)v77);
        sub_22F2E4B44(a1, a2, a8);
        return 1;
      case 5:
        v34 = *(_DWORD *)(v22 + 16);
        v31 = *(unsigned __int8 *)(v22 + 20);
        v32 = v34 == 1851878499;
        v33 = 103;
        goto LABEL_36;
      case 6:
        v30 = *(_DWORD *)(v22 + 16);
        v31 = *(unsigned __int16 *)(v22 + 20);
        v32 = v30 == 1634485087;
        v33 = 26478;
LABEL_36:
        if (!v32 || v31 != v33)
          break;
        v36 = sub_22E815C10(a1, a2, a3, a4, a5, a6, a7, v19);
        goto LABEL_47;
      case 7:
        v37 = *(_DWORD *)(v22 + 16);
        v38 = *(_DWORD *)(v22 + 19);
        if (v37 != 1852268383 || v38 != 1600091502)
          break;
LABEL_80:
        sub_22E81199C(a1, a2, a3, a4, a5, a6, a7, v19, 0);
        return 1;
      default:
        break;
    }
  }
  v36 = sub_22E8120E0(a1, a2, a3, a4, a5, a6, a7, v19);
LABEL_47:
  v40 = v36;
  v41 = *(_QWORD *)(a4 + 8);
  if (v41 < 8)
    return 1;
  if ((v41 & 4) != 0)
  {
    v43 = v41 & 0xFFFFFFFFFFFFFFF8;
    if (v43)
    {
      if (!*(_DWORD *)(v43 + 8))
        return 1;
    }
  }
  v29 = 1;
  v44 = sub_22F1ACD3C(a2, a6, 1u, 0);
  if (v44 > 299)
  {
    if (v44 <= 451)
    {
      if (v44 != 300 && v44 != 451)
        return v29;
LABEL_56:
      v45 = *(_QWORD *)(a4 + 8);
      v46 = v45 & 0xFFFFFFFFFFFFFFF8;
      if ((v45 & 4) != 0)
        v46 = *(_QWORD *)(*(_QWORD *)v46 + 8 * *(unsigned int *)(v46 + 8) - 8);
      v47 = *(_DWORD *)(*(_QWORD *)(v46 + 72) + 8);
      v48 = HIWORD(v47) & 0xF;
      v49 = (v47 >> 20) & 0xF;
      if (v48 + v49)
        v50 = v40 == 0;
      else
        v50 = 0;
      if (v50)
      {
        v57 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v57 + 312) = v68;
        *(_DWORD *)(v57 + 316) = 1445;
        if (*(char *)(v57 + 311) < 0)
        {
          **(_BYTE **)(v57 + 288) = 0;
          *(_QWORD *)(v57 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v57 + 288) = 0;
          *(_BYTE *)(v57 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v69, v57);
        v58 = v69;
        if (!v69)
        {
          v58 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v70);
          v69 = v58;
        }
        v58[*v58 + 1] = 5;
        v59 = v69;
        v60 = *v69;
        *v69 = v60 + 1;
        *(_QWORD *)&v59[8 * v60 + 16] = a2;
        v56 = (uint64_t *)&v69;
      }
      else
      {
        if (v48 != -v49)
          return v29;
        v51 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v51 + 312) = v68;
        *(_DWORD *)(v51 + 316) = 1466;
        if (*(char *)(v51 + 311) < 0)
        {
          **(_BYTE **)(v51 + 288) = 0;
          *(_QWORD *)(v51 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v51 + 288) = 0;
          *(_BYTE *)(v51 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v76, v51);
        v52 = (unsigned __int8 *)v76[0];
        if (!v76[0])
        {
          v52 = (unsigned __int8 *)sub_22E3B8AAC(v76[1]);
          v76[0] = (uint64_t)v52;
        }
        v52[*v52 + 1] = 5;
        v53 = v76[0];
        v54 = *(unsigned __int8 *)v76[0];
        *(_BYTE *)v76[0] = v54 + 1;
        *(_QWORD *)(v53 + 8 * v54 + 16) = a2;
        v55 = v68 | ((unint64_t)*a5 << 32);
        *(_QWORD *)&v70[4] = 0;
        v71 = 0;
        v73 = 0;
        v74 = 0;
        __p = 0;
        v75 = 0;
        v69 = (unsigned __int8 *)v55;
        v70[0] = 1;
        sub_22E6D82D0(v76, &v69);
        if (SHIBYTE(v74) < 0)
          operator delete(__p);
        v56 = v76;
      }
      sub_22E3BB0B8((uint64_t)v56);
      *(_QWORD *)(v46 + 48) |= 0x10000uLL;
      return v29;
    }
    if (v44 == 452)
    {
      if (a6)
        return v29;
      v65 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)v65 != 12)
        return v29;
      v66 = 0x6D617962655F756ELL;
      v67 = bswap64(*(_QWORD *)(v65 + 16));
      if (v67 == 0x6D617962655F756ELL)
      {
        v66 = 1970496868;
        v67 = bswap32(*(_DWORD *)(v65 + 24));
        if ((_DWORD)v67 == 1970496868)
        {
          v64 = 0;
          goto LABEL_98;
        }
      }
      v63 = v67 >= v66;
    }
    else
    {
      if (v44 != 465)
        return v29;
      if (a6)
        return v29;
      v61 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)v61 != 9)
        return v29;
      v62 = bswap64(*(_QWORD *)(v61 + 16));
      v63 = v62 >= 0x6E6F646973636172;
      if (v62 == 0x6E6F646973636172)
      {
        v64 = *(unsigned __int8 *)(v61 + 24) - 100;
        goto LABEL_98;
      }
    }
    if (v63)
      v64 = 1;
    else
      v64 = -1;
LABEL_98:
    if (v64)
      return v29;
    goto LABEL_56;
  }
  if ((v44 - 68) <= 0x3E && ((1 << (v44 - 68)) & 0x4000001000080001) != 0
    || v44 == 63)
  {
    goto LABEL_56;
  }
  return v29;
}

void sub_22E835830(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned int *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  char v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned int v49;
  _BYTE v50[36];
  unsigned int v51;
  _BYTE v52[32];
  _BYTE v53[32];
  uint64_t v54;
  llvm *v55;
  unsigned int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v7 = (unsigned int *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 16);
  v9 = *(unsigned __int16 *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v10 + 312) = v8;
  if (v9 == 157)
  {
    *(_DWORD *)(v10 + 316) = 1923;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v53, v10);
    sub_22E3BB0B8((uint64_t)v53);
    sub_22E820764(a1, a2, a4);
    return;
  }
  *(_DWORD *)(v10 + 316) = 1925;
  if (*(char *)(v10 + 311) < 0)
  {
    **(_BYTE **)(v10 + 288) = 0;
    *(_QWORD *)(v10 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v10 + 288) = 0;
    *(_BYTE *)(v10 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v52, v10);
  sub_22E3BB0B8((uint64_t)v52);
  sub_22E80F788(a1);
  sub_22E8853B0(a1, v8, 0x13u, 2);
  sub_22E80F788(a1);
  v51 = 0;
  if (*(_WORD *)(a1 + 32) == 154)
  {
    if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x800) != 0)
      v11 = 1909;
    else
      v11 = 1857;
    v12 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v12 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v12 + 316) = v11;
    if (*(char *)(v12 + 311) < 0)
    {
      **(_BYTE **)(v12 + 288) = 0;
      *(_QWORD *)(v12 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 288) = 0;
      *(_BYTE *)(v12 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v50, v12);
    sub_22E3BB0B8((uint64_t)v50);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v7);
    v13 = sub_22E834EA8(a1, &v51, 1, 0);
    if (v13)
    {
      if (*(_WORD *)(a1 + 32) != 61)
      {
        v14 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v14 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v14 + 316) = 15;
        if (*(char *)(v14 + 311) < 0)
        {
          **(_BYTE **)(v14 + 288) = 0;
          *(_QWORD *)(v14 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v14 + 288) = 0;
          *(_BYTE *)(v14 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v54, v14);
        v15 = (unsigned __int8 *)v54;
        if (!v54)
        {
          v15 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v55);
          v54 = (uint64_t)v15;
        }
        v15[*v15 + 1] = 4;
        v16 = v54;
        v17 = *(unsigned __int8 *)v54;
        *(_BYTE *)v54 = v17 + 1;
        *(_QWORD *)(v16 + 8 * v17 + 16) = 61;
        sub_22E3BB0B8((uint64_t)&v54);
        goto LABEL_27;
      }
      goto LABEL_25;
    }
    v18 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v18 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v18 + 316) = 15;
    if (*(char *)(v18 + 311) < 0)
    {
      **(_BYTE **)(v18 + 288) = 0;
      *(_QWORD *)(v18 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v18 + 288) = 0;
      *(_BYTE *)(v18 + 311) = 0;
    }
    sub_22E78E558((uint64_t)&v54, v18);
    v19 = (unsigned __int8 *)v54;
    if (!v54)
    {
      v19 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v55);
      v54 = (uint64_t)v19;
    }
    v19[*v19 + 1] = 4;
    v20 = v54;
    v21 = *(unsigned __int8 *)v54;
    *(_BYTE *)v54 = v21 + 1;
    *(_QWORD *)(v20 + 8 * v21 + 16) = 5;
    sub_22E3BB0B8((uint64_t)&v54);
    LODWORD(v54) = 3997716;
    sub_22E885940(a1, (unsigned __int16 *)&v54, 2, 2);
    if (*(_WORD *)(a1 + 32) == 61)
    {
LABEL_25:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v7);
      goto LABEL_27;
    }
  }
  v13 = 0;
LABEL_27:
  v54 = 1;
  for (i = 8; i != 72; i += 16)
    *(uint64_t *)((char *)&v54 + i) = -4096;
  v23 = 0;
  while (1)
  {
    v24 = *(unsigned __int16 *)(a1 + 32);
    if (v24 <= 0x3E && ((1 << v24) & 0x4000000000100002) != 0)
      break;
    if ((v23 & 1) != 0
      && ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 104) & 0x20) == 0
       || getenv("METALFE_DISABLE_ATTRIBUTE_PARSING_WORKAROUND")))
    {
      if ((sub_22E8847B4(a1, 0x41u, 15, "", 0) & 1) != 0)
      {
        LOWORD(v47) = 20;
        sub_22E885940(a1, (unsigned __int16 *)&v47, 1, 3);
        goto LABEL_74;
      }
      v24 = *(unsigned __int16 *)(a1 + 32);
    }
    if (v24 == 65)
    {
      do
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v7);
      }
      while (*(_WORD *)(a1 + 32) == 65);
    }
    v49 = 0;
    v26 = sub_22E834EA8(a1, &v49, 0, v13);
    if (!v26)
    {
      v24 = *(unsigned __int16 *)(a1 + 32);
      break;
    }
    v27 = v26;
    v28 = *(unsigned __int16 *)(a1 + 32);
    if (v28 == 71)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v7);
      v29 = v49;
      v30 = sub_22E834EA8(a1, &v49, 0, v27);
      if (v30)
      {
        v31 = v30;
        if (v13)
        {
          v32 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v32 + 312) = v29;
          *(_DWORD *)(v32 + 316) = 1779;
          if (*(char *)(v32 + 311) < 0)
          {
            **(_BYTE **)(v32 + 288) = 0;
            *(_QWORD *)(v32 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v32 + 288) = 0;
            *(_BYTE *)(v32 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v47, v32);
          v33 = v51;
          v34 = (uint64_t)v47;
          if (!v47)
          {
            v34 = sub_22E3B8AAC(v48);
            v47 = (unsigned __int8 *)v34;
          }
          sub_22E4D6448(v34 + 336, v33 | (v33 << 32), 1);
          sub_22E3BB0B8((uint64_t)&v47);
        }
        goto LABEL_54;
      }
      v36 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v36 + 312) = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(v36 + 316) = 15;
      if (*(char *)(v36 + 311) < 0)
      {
        **(_BYTE **)(v36 + 288) = 0;
        *(_QWORD *)(v36 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v36 + 288) = 0;
        *(_BYTE *)(v36 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v47, v36);
      v37 = v47;
      if (!v47)
      {
        v37 = (unsigned __int8 *)sub_22E3B8AAC(v48);
        v47 = v37;
      }
      v37[*v37 + 1] = 4;
      v38 = v47;
      v39 = *v47;
      *v47 = v39 + 1;
      *(_QWORD *)&v38[8 * v39 + 16] = 5;
      sub_22E3BB0B8((uint64_t)&v47);
      LODWORD(v47) = 4259860;
      sub_22E885940(a1, (unsigned __int16 *)&v47, 2, 3);
      v23 = 0;
    }
    else
    {
      if (v13)
      {
        v29 = v51;
        v31 = v26;
        v27 = v13;
LABEL_54:
        v35 = v27;
        v28 = *(unsigned __int16 *)(a1 + 32);
        v27 = v31;
        goto LABEL_61;
      }
      v29 = 0;
      v35 = 0;
LABEL_61:
      if (v28 != 21 || (sub_22E835230(a1, v27, v49, a2, a4, v35, v29, a3) & 1) == 0)
      {
        if (v29)
          v40 = v29;
        else
          v40 = v49;
        if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x100) != 0)
          v41 = 1;
        else
          v41 = 2;
        sub_22E8118E4(a2, v27, v40 | ((unint64_t)v49 << 32), v35, v29, 0, 0, v41, 0);
      }
      if (*(_WORD *)(a1 + 32) == 26)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v7);
        sub_22E884578(a1, (int *)v7, 1467, (uint64_t)&v47);
        v42 = v47;
        if (!v47)
        {
          v42 = (unsigned __int8 *)sub_22E3B8AAC(v48);
          v47 = v42;
        }
        v42[*v42 + 1] = 5;
        v43 = v47;
        v44 = *v47;
        *v47 = v44 + 1;
        *(_QWORD *)&v43[8 * v44 + 16] = v27;
        sub_22E3BB0B8((uint64_t)&v47);
      }
LABEL_74:
      v23 = 1;
    }
  }
  v45 = *v7;
  if (v24 == 62)
  {
    *(_DWORD *)(a1 + 40) = v45;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v7);
  }
  else
  {
    if (sub_22E8847B4(a1, 0x14u, 15, "", 0))
    {
      LOWORD(v47) = 20;
      sub_22E885940(a1, (unsigned __int16 *)&v47, 1, 0);
    }
    else if (*(_WORD *)(a1 + 32) == 20)
    {
      sub_22E8853B0(a1, v45, 0x14u, 3);
    }
    if (a4)
      *a4 = *v7;
    if (sub_22E8847B4(a1, 0x14u, 15, "", 0))
    {
      LOWORD(v47) = 20;
      sub_22E885940(a1, (unsigned __int16 *)&v47, 1, 0);
    }
  }
  if ((v54 & 1) == 0)
    llvm::deallocate_buffer(v55, (void *)(16 * v56));
}

uint64_t sub_22E835FD0(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v6;

  v4 = *(unsigned int *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 16);
  do
  {
    sub_22E836038(a1, (uint64_t)a2, &v6);
    result = sub_22E8836FC(a1, 0, 0);
  }
  while ((_DWORD)result);
  *a2 = v4 | ((unint64_t)v6 << 32);
  return result;
}

void sub_22E836038(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  void *v4[2];
  _QWORD v5[13];

  v5[12] = *MEMORY[0x24BDAC8D0];
  v4[0] = v5;
  v4[1] = (void *)0x400000000;
  sub_22E835830(a1, a2, (uint64_t)v4, a3);
  sub_22E8368F0(a1, (uint64_t)v4);
  if (v4[0] != v5)
    free(v4[0]);
}

uint64_t sub_22E8360CC(uint64_t a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  char v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;

  v2 = sub_22E8836FC(a1, 0, 0);
  result = 0;
  if (v2)
  {
    while (*(_WORD *)(a1 + 32) != 19)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
      v6 = (_BYTE *)(a1 + 944);
      v7 = *(_BYTE *)(a1 + 944);
      *(_BYTE *)(a1 + 944) = 1;
      v8 = a1;
      v9 = 1441813;
      v10 = 62;
      v12 = 0;
      v13 = 0;
      v11 = sub_22E80F720;
      if ((sub_22E811DE8((uint64_t)&v6) & 1) == 0)
        goto LABEL_7;
LABEL_4:
      v4 = HIDWORD(v13);
      *v6 = v7;
      v5 = sub_22E8836FC(a1, 0, 0);
      result = v4;
      if (!v5)
        return result;
    }
    v6 = (_BYTE *)(a1 + 944);
    v7 = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v8 = a1;
    v9 = 1310739;
    v10 = 62;
    v12 = 0;
    v13 = 0;
    v11 = sub_22E80F788;
    sub_22E811DE8((uint64_t)&v6);
LABEL_7:
    sub_22F2F18E0((uint64_t)&v6);
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_22E836210(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unsigned int *v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  int v21;
  const void *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  _BYTE *v36;
  _BYTE *v37;
  char v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 v46;
  _BYTE *v47;
  char v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  unsigned __int16 v55;
  void *v56;
  __int128 v57;
  _BYTE v58[16];
  void *v59;
  __int128 v60;
  _BYTE v61[48];
  unsigned __int8 *v62;
  uint64_t v63;
  _QWORD v64[14];

  v2 = a2;
  v64[12] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)(a1 + 16);
  v33 = *(unsigned int *)(a1 + 16);
  v45 = *(_DWORD *)(a1 + 16);
  v36 = (_BYTE *)(a1 + 944);
  do
  {
    v37 = v36;
    v38 = *(_BYTE *)(a1 + 944);
    *(_BYTE *)(a1 + 944) = 1;
    v39 = a1;
    v40 = 1310739;
    v41 = 62;
    v43 = 0;
    v44 = 0;
    v42 = sub_22E80F788;
    sub_22E811DE8((uint64_t)&v37);
    while (1)
    {
      LODWORD(v62) = 327700;
      sub_22E885940(a1, (unsigned __int16 *)&v62, 2, 7);
      v5 = *(unsigned __int16 *)(a1 + 32);
      if (v5 != 5)
        break;
      v6 = *(_QWORD *)(a1 + 24);
      v7 = *(_DWORD **)(v6 + 16);
      if (*v7 == 4 && v7[4] == 1684632949)
      {
        v11 = *(unsigned int *)(a1 + 16);
        *(_DWORD *)(a1 + 40) = v11;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
        v47 = v36;
        v48 = *(_BYTE *)(a1 + 944);
        *(_BYTE *)(a1 + 944) = 1;
        v49 = a1;
        v50 = 1441813;
        v51 = 62;
        v53 = 0;
        v54 = 0;
        v52 = sub_22E80F720;
        if (sub_22E811DE8((uint64_t)&v47))
        {
          sub_22E884578(a1, (int *)v4, 15, (uint64_t)&v62);
          v12 = v62;
          if (!v62)
          {
            v12 = (unsigned __int8 *)sub_22E3B8AAC(v63);
            v62 = v12;
          }
          v12[*v12 + 1] = 4;
          v13 = v62;
          v14 = *v62;
          *v62 = v14 + 1;
          *(_QWORD *)&v13[8 * v14 + 16] = 21;
          sub_22E3BB0B8((uint64_t)&v62);
          goto LABEL_56;
        }
        v62 = (unsigned __int8 *)v64;
        v63 = 0xC00000000;
        if (*(_WORD *)(a1 + 32) == 13)
        {
          v15 = sub_22E83E898(a1, 0);
          if ((v15 & 1) == 0)
          {
            v16 = v63;
            if (v63 >= (unint64_t)HIDWORD(v63))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v16 = v63;
            }
            *(_QWORD *)&v62[8 * v16] = v15 & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v63) = v63 + 1;
            goto LABEL_22;
          }
          goto LABEL_54;
        }
        v59 = v61;
        v61[0] = 34;
        v60 = xmmword_22F461270;
        v35 = *v4;
        while (*(_WORD *)(a1 + 32) != 22)
        {
          if ((*(_WORD *)(a1 + 34) & 3) != 0)
          {
            sub_22E884578(a1, (int *)v4, 7, (uint64_t)&v56);
            sub_22E3BB0B8((uint64_t)&v56);
            v55 = 22;
            sub_22E885940(a1, &v55, 1, 1);
            goto LABEL_51;
          }
          v56 = v58;
          v57 = xmmword_22F44E350;
          v17 = *(_DWORD *)(a1 + 20);
          v18 = (v17 + 1);
          if (v17 != -1)
          {
            if (v18 < 0x11)
            {
              v25 = 0;
            }
            else
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v25 = v57;
            }
            if (v18 != v25)
              bzero((char *)v56 + v25, v18 - v25);
            *(_QWORD *)&v57 = v18;
          }
          v46 = 0;
          v19 = sub_22F18E170(*(_QWORD *)(a1 + 8), (uint64_t)v4, (uint64_t *)&v56, &v46);
          v21 = v46;
          if (!v46)
          {
            v22 = (const void *)v19;
            v23 = v20;
            v24 = v60;
            if (*((_QWORD *)&v60 + 1) < (unint64_t)v60 + v20)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
              v24 = v60;
              if (v23)
              {
LABEL_32:
                memcpy((char *)v59 + v24, v22, v23);
                v24 = v60;
              }
            }
            else if (v20)
            {
              goto LABEL_32;
            }
            *(_QWORD *)&v60 = v24 + v23;
            sub_22E80F0F0(a1, 0);
            goto LABEL_34;
          }
          v55 = 22;
          sub_22E885940(a1, &v55, 1, 1);
LABEL_34:
          if (v56 != v58)
            free(v56);
          if (v21)
            goto LABEL_51;
        }
        v26 = v60;
        if (*((_QWORD *)&v60 + 1) < (unint64_t)(v60 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v26 = v60;
        }
        *((_BYTE *)v59 + v26) = 34;
        v27 = v60 + 1;
        *(_QWORD *)&v60 = v60 + 1;
        if ((*(_WORD *)(a1 + 34) & 3) != 0)
        {
          sub_22E884578(a1, (int *)v4, 7, (uint64_t)&v56);
          sub_22E3BB0B8((uint64_t)&v56);
          sub_22E80F720(a1);
LABEL_51:
          if (v59 != v61)
            free(v59);
          v2 = a2;
          goto LABEL_54;
        }
        DWORD2(v57) = 13;
        *(_QWORD *)&v57 = v59;
        v56 = (void *)__PAIR64__(v27, v35);
        v28 = sub_22EB21338(*(_QWORD *)(a1 + 88), (uint64_t)&v56, 1, 0);
        v29 = v63;
        if (v63 >= (unint64_t)HIDWORD(v63))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v29 = v63;
        }
        v2 = a2;
        *(_QWORD *)&v62[8 * v29] = v28 & 0xFFFFFFFFFFFFFFFCLL;
        LODWORD(v63) = v63 + 1;
        if (v59 != v61)
          free(v59);
LABEL_22:
        if ((sub_22E811E8C((uint64_t)&v47) & 1) == 0)
          sub_22E8118E4((uint64_t)v2, v6, v11 | ((unint64_t)HIDWORD(v54) << 32), 0, 0, v62, v63, 4u, 0);
LABEL_54:
        if (v62 != (unsigned __int8 *)v64)
          free(v62);
LABEL_56:
        *v47 = v48;
      }
      else
      {
        v8 = *(unsigned int *)(a1 + 16);
        *(_DWORD *)(a1 + 40) = v8;
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
        v9 = sub_22F1ACD3C(v6, 0, 4u, 0);
        if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 96) & 0x40) != 0 || v9 != 480)
        {
          if (*(_WORD *)(a1 + 32) != 21)
            goto LABEL_12;
          v62 = (unsigned __int8 *)v64;
          v63 = 0x400000000;
          v10 = sub_22E835230(a1, v6, v8, (uint64_t)v2, &v45, 0, 0, (uint64_t)&v62);
          sub_22E8368F0(a1, (uint64_t)&v62);
          if (v62 != (unsigned __int8 *)v64)
            free(v62);
          if ((v10 & 1) == 0)
LABEL_12:
            sub_22E8118E4((uint64_t)v2, v6, v8 | (v8 << 32), 0, 0, 0, 0, 4u, 0);
        }
      }
    }
    if (v5 == 3)
    {
      v30 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v30 + 752))
      {
        *(_BYTE *)(v30 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v30 + 48) + 6) = 1;
      }
      *(_WORD *)(a1 + 32) = 1;
      sub_22F313954(*(char ***)(a1 + 88), 4u, 0, 0);
    }
    result = sub_22E811E8C((uint64_t)&v37);
    v32 = HIDWORD(v44);
    v45 = HIDWORD(v44);
    *v37 = v38;
  }
  while (*(_WORD *)(a1 + 32) == 19);
  *v2 = v33 | (v32 << 32);
  return result;
}

uint64_t sub_22E8368F0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (*(_DWORD *)(a2 + 8))
  {
    v2 = result;
    sub_22E80F2F4(*(_QWORD *)(result + 8), result + 16, 1);
    sub_22F1735E4(*(_QWORD *)(v2 + 8), *(_BYTE **)a2, *(unsigned int *)(a2 + 8), 1, 0, 1);
    return sub_22E80F0F0(v2, 1);
  }
  return result;
}

uint64_t sub_22E836960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)(a2 + 88);
  v4 = a1 + 8;
  if (a3)
  {
    v8 = a3 + 8;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a1 + 16) = a1 + 32;
    *(_QWORD *)(a1 + 24) = 0x400000000;
    sub_22E836A10(a1 + 8, a3 + 8);
    if (!*(_BYTE *)(v8 + 352))
    {
      sub_22EA7E84C(*(_QWORD **)a3, *(_QWORD *)(a3 + 352), 0);
      *(_BYTE *)(a3 + 360) = 1;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = a1 + 32;
    *(_QWORD *)(a1 + 24) = 0x400000000;
  }
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 3200);
  *(_QWORD *)(*(_QWORD *)a1 + 3200) = v4;
  *(_QWORD *)(a1 + 352) = v5;
  *(_BYTE *)(a1 + 360) = 0;
  return a1;
}

uint64_t sub_22E836A10(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BYTE **v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a2 + 16);
  if (v2)
  {
    v3 = result;
    v4 = (_BYTE **)(a2 + 8);
    v5 = result + 8;
    if (*(_DWORD *)(v3 + 16))
      result = sub_22F2E4E94(v5, *v4, &(*v4)[80 * v2]);
    else
      result = sub_22F2E34CC(v5, (uint64_t)v4);
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t sub_22E836A6C(uint64_t result, _QWORD *a2, int a3)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;

  v3 = (_DWORD *)a2[38];
  *(_QWORD *)result = v3;
  if (v3)
  {
    *(_BYTE *)(result + 8) = (*v3 & 0x20000000) != 0;
    v12 = *(_QWORD *)v3;
    v13 = 0x20000000;
    if (!a3)
      v13 = 0;
    v14 = v12 & 0xFFFFFFFFDFFFFFFFLL | v13;
    v15 = (v12 >> 5) & 0x80000000;
    if ((v14 & 0x83A000000) != 0)
      v15 = 0x80000000;
    v16 = v15 | v14 & 0xFFFFFFFF7FFFFFFFLL;
    v17 = v14 | 0x80000000;
    if (a3)
      v16 = v17;
    *(_QWORD *)v3 = v16;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  v4 = (_DWORD *)a2[32];
  *(_QWORD *)(result + 16) = v4;
  if (v4)
  {
    *(_BYTE *)(result + 24) = (*v4 & 0x20000000) != 0;
    v18 = *(_QWORD *)v4;
    v19 = 0x20000000;
    if (!a3)
      v19 = 0;
    v20 = v18 & 0xFFFFFFFFDFFFFFFFLL | v19;
    v21 = (v18 >> 5) & 0x80000000;
    if ((v20 & 0x83A000000) != 0)
      v21 = 0x80000000;
    v22 = v21 | v20 & 0xFFFFFFFF7FFFFFFFLL;
    v23 = v20 | 0x80000000;
    if (a3)
      v22 = v23;
    *(_QWORD *)v4 = v22;
  }
  else
  {
    *(_BYTE *)(result + 24) = 0;
  }
  v5 = (_DWORD *)a2[35];
  *(_QWORD *)(result + 32) = v5;
  if (v5)
  {
    *(_BYTE *)(result + 40) = (*v5 & 0x20000000) != 0;
    v24 = *(_QWORD *)v5;
    v25 = 0x20000000;
    if (!a3)
      v25 = 0;
    v26 = v24 & 0xFFFFFFFFDFFFFFFFLL | v25;
    v27 = (v24 >> 5) & 0x80000000;
    if ((v26 & 0x83A000000) != 0)
      v27 = 0x80000000;
    v28 = v27 | v26 & 0xFFFFFFFF7FFFFFFFLL;
    v29 = v26 | 0x80000000;
    if (a3)
      v28 = v29;
    *(_QWORD *)v5 = v28;
  }
  else
  {
    *(_BYTE *)(result + 40) = 0;
  }
  v6 = (_DWORD *)a2[36];
  *(_QWORD *)(result + 48) = v6;
  if (v6)
  {
    *(_BYTE *)(result + 56) = (*v6 & 0x20000000) != 0;
    v30 = *(_QWORD *)v6;
    v31 = 0x20000000;
    if (!a3)
      v31 = 0;
    v32 = v30 & 0xFFFFFFFFDFFFFFFFLL | v31;
    v33 = (v30 >> 5) & 0x80000000;
    if ((v32 & 0x83A000000) != 0)
      v33 = 0x80000000;
    v34 = v33 | v32 & 0xFFFFFFFF7FFFFFFFLL;
    v35 = v32 | 0x80000000;
    if (a3)
      v34 = v35;
    *(_QWORD *)v6 = v34;
  }
  else
  {
    *(_BYTE *)(result + 56) = 0;
  }
  v7 = (_DWORD *)a2[30];
  *(_QWORD *)(result + 64) = v7;
  if (v7)
  {
    *(_BYTE *)(result + 72) = (*v7 & 0x20000000) != 0;
    v36 = *(_QWORD *)v7;
    v37 = 0x20000000;
    if (!a3)
      v37 = 0;
    v38 = v36 & 0xFFFFFFFFDFFFFFFFLL | v37;
    v39 = (v36 >> 5) & 0x80000000;
    if ((v38 & 0x83A000000) != 0)
      v39 = 0x80000000;
    v40 = v39 | v38 & 0xFFFFFFFF7FFFFFFFLL;
    v41 = v38 | 0x80000000;
    if (a3)
      v40 = v41;
    *(_QWORD *)v7 = v40;
  }
  else
  {
    *(_BYTE *)(result + 72) = 0;
  }
  v8 = (_DWORD *)a2[33];
  *(_QWORD *)(result + 80) = v8;
  if (v8)
  {
    *(_BYTE *)(result + 88) = (*v8 & 0x20000000) != 0;
    v42 = *(_QWORD *)v8;
    v43 = 0x20000000;
    if (!a3)
      v43 = 0;
    v44 = v42 & 0xFFFFFFFFDFFFFFFFLL | v43;
    v45 = (v42 >> 5) & 0x80000000;
    if ((v44 & 0x83A000000) != 0)
      v45 = 0x80000000;
    v46 = v45 | v44 & 0xFFFFFFFF7FFFFFFFLL;
    v47 = v44 | 0x80000000;
    if (a3)
      v46 = v47;
    *(_QWORD *)v8 = v46;
  }
  else
  {
    *(_BYTE *)(result + 88) = 0;
  }
  v9 = (_DWORD *)a2[37];
  *(_QWORD *)(result + 96) = v9;
  if (v9)
  {
    *(_BYTE *)(result + 104) = (*v9 & 0x20000000) != 0;
    v48 = *(_QWORD *)v9;
    v49 = 0x20000000;
    if (!a3)
      v49 = 0;
    v50 = v48 & 0xFFFFFFFFDFFFFFFFLL | v49;
    v51 = (v48 >> 5) & 0x80000000;
    if ((v50 & 0x83A000000) != 0)
      v51 = 0x80000000;
    v52 = v51 | v50 & 0xFFFFFFFF7FFFFFFFLL;
    v53 = v50 | 0x80000000;
    if (a3)
      v52 = v53;
    *(_QWORD *)v9 = v52;
  }
  else
  {
    *(_BYTE *)(result + 104) = 0;
  }
  v10 = (_DWORD *)a2[31];
  *(_QWORD *)(result + 112) = v10;
  if (v10)
  {
    *(_BYTE *)(result + 120) = (*v10 & 0x20000000) != 0;
    v54 = *(_QWORD *)v10;
    v55 = 0x20000000;
    if (!a3)
      v55 = 0;
    v56 = v54 & 0xFFFFFFFFDFFFFFFFLL | v55;
    v57 = (v54 >> 5) & 0x80000000;
    if ((v56 & 0x83A000000) != 0)
      v57 = 0x80000000;
    v58 = v57 | v56 & 0xFFFFFFFF7FFFFFFFLL;
    v59 = v56 | 0x80000000;
    if (a3)
      v58 = v59;
    *(_QWORD *)v10 = v58;
  }
  else
  {
    *(_BYTE *)(result + 120) = 0;
  }
  v11 = (_DWORD *)a2[34];
  *(_QWORD *)(result + 128) = v11;
  if (v11)
  {
    *(_BYTE *)(result + 136) = (*v11 & 0x20000000) != 0;
    v60 = *(_QWORD *)v11;
    v61 = 0x20000000;
    if (!a3)
      v61 = 0;
    v62 = v60 & 0xFFFFFFFFDFFFFFFFLL | v61;
    v63 = (v60 >> 5) & 0x80000000;
    if ((v62 & 0x83A000000) != 0)
      v63 = 0x80000000;
    v64 = v63 | v62 & 0xFFFFFFFF7FFFFFFFLL;
    v65 = v62 | 0x80000000;
    if (a3)
      v64 = v65;
    *(_QWORD *)v11 = v64;
  }
  else
  {
    *(_BYTE *)(result + 136) = 0;
  }
  return result;
}

uint64_t sub_22E836E3C(uint64_t result)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;

  v1 = *(unint64_t **)(result + 128);
  if (v1)
  {
    v10 = *(unsigned __int8 *)(result + 136);
    v11 = (*v1 >> 5) & 0x80000000;
    if (*v1 & 0x81A000000 | (v10 << 29) & 0x83A000000)
      v11 = 0x80000000;
    v12 = v11 | *v1 & 0xFFFFFFFF5FFFFFFFLL | (v10 << 29) & 0xFFFFFFFF7FFFFFFFLL;
    if (*(_BYTE *)(result + 136))
      v13 = *v1 & 0xFFFFFFFFDFFFFFFFLL | (v10 << 29) | 0x80000000;
    else
      v13 = v12;
    *v1 = v13;
  }
  v2 = *(unint64_t **)(result + 112);
  if (v2)
  {
    v14 = *(unsigned __int8 *)(result + 120);
    v15 = (*v2 >> 5) & 0x80000000;
    if (*v2 & 0x81A000000 | (v14 << 29) & 0x83A000000)
      v15 = 0x80000000;
    v16 = v15 | *v2 & 0xFFFFFFFF5FFFFFFFLL | (v14 << 29) & 0xFFFFFFFF7FFFFFFFLL;
    if (*(_BYTE *)(result + 120))
      v17 = *v2 & 0xFFFFFFFFDFFFFFFFLL | (v14 << 29) | 0x80000000;
    else
      v17 = v16;
    *v2 = v17;
  }
  v3 = *(unint64_t **)(result + 96);
  if (v3)
  {
    v18 = *(unsigned __int8 *)(result + 104);
    v19 = (*v3 >> 5) & 0x80000000;
    if (*v3 & 0x81A000000 | (v18 << 29) & 0x83A000000)
      v19 = 0x80000000;
    v20 = v19 | *v3 & 0xFFFFFFFF5FFFFFFFLL | (v18 << 29) & 0xFFFFFFFF7FFFFFFFLL;
    if (*(_BYTE *)(result + 104))
      v21 = *v3 & 0xFFFFFFFFDFFFFFFFLL | (v18 << 29) | 0x80000000;
    else
      v21 = v20;
    *v3 = v21;
  }
  v4 = *(unint64_t **)(result + 80);
  if (v4)
  {
    v22 = *(unsigned __int8 *)(result + 88);
    v23 = (*v4 >> 5) & 0x80000000;
    if (*v4 & 0x81A000000 | (v22 << 29) & 0x83A000000)
      v23 = 0x80000000;
    v24 = v23 | *v4 & 0xFFFFFFFF5FFFFFFFLL | (v22 << 29) & 0xFFFFFFFF7FFFFFFFLL;
    if (*(_BYTE *)(result + 88))
      v25 = *v4 & 0xFFFFFFFFDFFFFFFFLL | (v22 << 29) | 0x80000000;
    else
      v25 = v24;
    *v4 = v25;
  }
  v5 = *(unint64_t **)(result + 64);
  if (v5)
  {
    v26 = *(unsigned __int8 *)(result + 72);
    v27 = (*v5 >> 5) & 0x80000000;
    if (*v5 & 0x81A000000 | (v26 << 29) & 0x83A000000)
      v27 = 0x80000000;
    v28 = v27 | *v5 & 0xFFFFFFFF5FFFFFFFLL | (v26 << 29) & 0xFFFFFFFF7FFFFFFFLL;
    if (*(_BYTE *)(result + 72))
      v29 = *v5 & 0xFFFFFFFFDFFFFFFFLL | (v26 << 29) | 0x80000000;
    else
      v29 = v28;
    *v5 = v29;
  }
  v6 = *(unint64_t **)(result + 48);
  if (v6)
  {
    v30 = *(unsigned __int8 *)(result + 56);
    v31 = (*v6 >> 5) & 0x80000000;
    if (*v6 & 0x81A000000 | (v30 << 29) & 0x83A000000)
      v31 = 0x80000000;
    v32 = v31 | *v6 & 0xFFFFFFFF5FFFFFFFLL | (v30 << 29) & 0xFFFFFFFF7FFFFFFFLL;
    if (*(_BYTE *)(result + 56))
      v33 = *v6 & 0xFFFFFFFFDFFFFFFFLL | (v30 << 29) | 0x80000000;
    else
      v33 = v32;
    *v6 = v33;
  }
  v7 = *(unint64_t **)(result + 32);
  if (v7)
  {
    v34 = *(unsigned __int8 *)(result + 40);
    v35 = (*v7 >> 5) & 0x80000000;
    if (*v7 & 0x81A000000 | (v34 << 29) & 0x83A000000)
      v35 = 0x80000000;
    v36 = v35 | *v7 & 0xFFFFFFFF5FFFFFFFLL | (v34 << 29) & 0xFFFFFFFF7FFFFFFFLL;
    if (*(_BYTE *)(result + 40))
      v37 = *v7 & 0xFFFFFFFFDFFFFFFFLL | (v34 << 29) | 0x80000000;
    else
      v37 = v36;
    *v7 = v37;
  }
  v8 = *(unint64_t **)(result + 16);
  if (v8)
  {
    v38 = *(unsigned __int8 *)(result + 24);
    v39 = (*v8 >> 5) & 0x80000000;
    if (*v8 & 0x81A000000 | (v38 << 29) & 0x83A000000)
      v39 = 0x80000000;
    v40 = v39 | *v8 & 0xFFFFFFFF5FFFFFFFLL | (v38 << 29) & 0xFFFFFFFF7FFFFFFFLL;
    if (*(_BYTE *)(result + 24))
      v41 = *v8 & 0xFFFFFFFFDFFFFFFFLL | (v38 << 29) | 0x80000000;
    else
      v41 = v40;
    *v8 = v41;
  }
  v9 = *(unint64_t **)result;
  if (*(_QWORD *)result)
  {
    v42 = *(unsigned __int8 *)(result + 8);
    v43 = (*v9 >> 5) & 0x80000000;
    if (*v9 & 0x81A000000 | (v42 << 29) & 0x83A000000)
      v43 = 0x80000000;
    v44 = v43 | *v9 & 0xFFFFFFFF5FFFFFFFLL | (v42 << 29) & 0xFFFFFFFF7FFFFFFFLL;
    if (*(_BYTE *)(result + 8))
      v45 = *v9 & 0xFFFFFFFFDFFFFFFFLL | (v42 << 29) | 0x80000000;
    else
      v45 = v44;
    *v9 = v45;
  }
  return result;
}

uint64_t sub_22E837110(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_DWORD *)(v2 + 16) == 11 && v2 != 0 && (*(_DWORD *)(v2 + 16) & 0xFE00000u) > 0x8180000)
    return 1;
  else
    return a2;
}

void sub_22E837140(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = *(_QWORD **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = &v3[2 * v4];
    v6 = (_QWORD *)v2;
    do
    {
      *v6 = *v3;
      v7 = v3[1];
      v3[1] = 0;
      v6[1] = v7;
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v5);
    v8 = *(_QWORD *)a1 - 8;
    v9 = 16 * v4;
    do
    {
      sub_22E80FBD8((void ***)(v8 + v9));
      v9 -= 16;
    }
    while (v9);
    v3 = *(_QWORD **)a1;
  }
  if (v3 != (_QWORD *)(a1 + 16))
    free(v3);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

char **sub_22E8371F4(uint64_t a1)
{
  return sub_22F314324(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(int **)(a1 + 24));
}

void sub_22E837208(uint64_t *a1, int a2, char *a3, size_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  size_t v14;
  std::string::size_type v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  size_t size;
  uint64_t v21;
  const char *v22;
  unsigned __int8 *v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  std::string __dst;
  _BYTE v28[21];
  void *v29[2];
  uint64_t v30;
  char v31;
  _BYTE v32[21];
  __int128 __p;
  uint64_t v34;
  char v35;

  v10 = a5;
  v11 = a1[2];
  v32[8] = 0;
  *(_QWORD *)v32 = 0;
  *(_QWORD *)&v32[12] = 0;
  v32[20] = 0;
  v34 = 0;
  __p = 0uLL;
  v35 = 0;
  sub_22F2E4F2C(*a1);
  if ((a2 & (*v12 >> 25)) != 0)
    goto LABEL_20;
  v13 = (uint64_t)v12;
  v14 = strlen(a3);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v15 = v14;
  v26 = v10;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
    p_dst = &__dst;
    if (!v14)
      goto LABEL_10;
  }
  memmove(p_dst, a3, v15);
LABEL_10:
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  std::string::append(&__dst, " ");
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &__dst;
  else
    v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __dst.__r_.__value_.__l.__size_;
  sub_22E729148(v19, size, *(_DWORD *)(a1[1] + 20), 0, (uint64_t)v28);
  *(_OWORD *)v32 = *(_OWORD *)v28;
  *(_QWORD *)&v32[13] = *(_QWORD *)&v28[13];
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p);
  __p = *(_OWORD *)v29;
  v34 = v30;
  v35 = v31;
  v10 = v26;
  sub_22E8ADBD8(v13, a2, v26);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_20:
  v21 = *(_QWORD *)(v11 + 96);
  *(_DWORD *)(v21 + 312) = a5;
  *(_DWORD *)(v21 + 316) = 1469;
  if (*(char *)(v21 + 311) < 0)
  {
    **(_BYTE **)(v21 + 288) = 0;
    *(_QWORD *)(v21 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v21 + 288) = 0;
    *(_BYTE *)(v21 + 311) = 0;
  }
  sub_22E78E558((uint64_t)&__dst, v21);
  sub_22E3B89A8((unsigned __int8 **)&__dst, a3, a4);
  v22 = "override";
  switch(*(_DWORD *)(a1[1] + 4))
  {
    case 1:
      goto LABEL_27;
    case 2:
      v22 = "final";
      goto LABEL_27;
    case 3:
    case 5:
    case 6:
    case 7:
      __break(1u);
      return;
    case 4:
      v22 = "sealed";
      goto LABEL_27;
    case 8:
      v22 = "__final";
      goto LABEL_27;
    default:
      v22 = "abstract";
LABEL_27:
      v23 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0])
      {
        v23 = (unsigned __int8 *)sub_22E3B8AAC(__dst.__r_.__value_.__l.__size_);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      }
      v23[*v23 + 1] = 1;
      v24 = __dst.__r_.__value_.__r.__words[0];
      v25 = *__dst.__r_.__value_.__l.__data_;
      *__dst.__r_.__value_.__l.__data_ = v25 + 1;
      *(_QWORD *)(v24 + 8 * v25 + 16) = v22;
      v28[20] = 0;
      *(_QWORD *)&v28[12] = 0;
      v29[1] = 0;
      v30 = 0;
      v29[0] = 0;
      v31 = 0;
      *(_QWORD *)v28 = v10 | (a5 << 32);
      v28[8] = 1;
      sub_22E6D82D0((uint64_t *)&__dst, v28);
      sub_22E6D82D0((uint64_t *)&__dst, v32);
      if (SHIBYTE(v30) < 0)
        operator delete(v29[0]);
      sub_22E3BB0B8((uint64_t)&__dst);
      if (SHIBYTE(v34) < 0)
        operator delete((void *)__p);
      return;
  }
}

void sub_22E837508(unint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = **a1;
  if (v2 && (*(_DWORD *)(v2 + 28) & 0x7Fu) - 13 <= 0x3D)
  {
    sub_22EFB9E74(v2, (_QWORD *)a2);
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 11;
    strcpy((char *)a2, "<anonymous>");
  }
}

_QWORD *sub_22E837558(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *result;
  if (*(_BYTE *)(*result + 48))
  {
    v2 = result[1];
    v3 = *(_DWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 64) = sub_22E837588;
    *(_QWORD *)(v1 + 72) = v2;
    *(_QWORD *)(v1 + 56) = 0;
    *(_DWORD *)(v1 + 52) = v3;
  }
  return result;
}

unint64_t sub_22E837588(uint64_t **a1)
{
  unint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  void *v9[2];
  int v10;

  if (*((_BYTE *)*a1 + 8))
    return 0;
  v3 = a1[1];
  v4 = v3[11];
  v5 = *a1[2];
  v6 = a1[3];
  v8 = *v6;
  sub_22F0AB560(v9, (uint64_t)(v6 + 1));
  v1 = sub_22E9C4E40(v4, v5, (uint64_t)&v8, **a1, *a1[4], *((unsigned int *)a1[4] + 2), *a1[5]);
  if (v10)
    free(v9[1]);
  *((_BYTE *)v3 + 948) = 1;
  return v1;
}

uint64_t sub_22E837640(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_22E83766C(a1, a2);
  return sub_22E83778C(a1, v3, 1);
}

uint64_t sub_22E83766C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(_QWORD);

  v3 = *(unsigned __int16 *)(a1 + 32);
  if (v3 == 171)
    return sub_22F2E7810(a1);
  if (v3 == 149)
    return sub_22F2E76F0(a1);
  if (v3 != 3)
  {
    v4 = sub_22E838554(a1, 0, 0, a2, 0, 0);
    return sub_22E83778C(a1, v4, 2);
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v6 + 752))
  {
    *(_BYTE *)(v6 + 864) = 1;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + 6) = 1;
  }
  *(_WORD *)(a1 + 32) = 1;
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(v7 + 12888);
  if (!*(_BYTE *)(a1 + 48) || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a1 + 16))
  {
LABEL_13:
    v9 = 0;
    goto LABEL_14;
  }
  v9 = *(_QWORD *)(a1 + 56);
  if (v9 <= 0xF)
  {
    v10 = *(uint64_t (**)(_QWORD))(a1 + 64);
    if (v10)
    {
      v9 = v10(*(_QWORD *)(a1 + 72));
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_14:
  sub_22F313C2C(v7, v8, v9, 0);
  return 1;
}

uint64_t sub_22E83778C(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  __int128 v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  _BYTE **p_src;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  const char *v36;
  const char *v37;
  unsigned __int8 *v38;
  _BYTE *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _BOOL4 v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  _BYTE **v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  __int16 v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  uint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  _BYTE **v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  unsigned __int8 *v106;
  int v107;
  _DWORD *v109;
  uint64_t v110;
  int v111;
  int v112;
  _BYTE v113[32];
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  unsigned __int8 *v118;
  unint64_t v119;
  uint64_t v120;
  void *__p;
  char v122;
  _BYTE *__src;
  unint64_t v124;
  int64_t v125;
  _QWORD v126[4];

  v126[1] = *MEMORY[0x24BDAC8D0];
  v6 = sub_22F1DD1BC(*(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 944), (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) >> 9) & 1);
  v7 = *(_OWORD *)(a1 + 64);
  v116 = *(_OWORD *)(a1 + 48);
  v117 = v7;
  v111 = a3;
  if (v6 < a3)
    return a2;
  v8 = v6;
  v9 = (unsigned int *)(a1 + 16);
  v10 = a1 + 48;
  v110 = 0;
  while (1)
  {
    v114 = *(_OWORD *)v9;
    v115 = *((_QWORD *)v9 + 2);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v9);
    v11 = (unsigned __int16)v115;
    v12 = (unsigned __int16)v115 - 51;
    if (v12 > 0x18)
      goto LABEL_7;
    if (((1 << v12) & 0x804003) == 0)
      break;
    if ((sub_22E839D4C(a1, (uint64_t)&v114) & 1) != 0)
      return 1;
    if (v11 == 65 && sub_22F2E5490(a1))
    {
LABEL_195:
      v13 = *(_QWORD *)(a1 + 8);
LABEL_196:
      sub_22E80F2F4(v13, (unint64_t)v9, 1);
      *(_OWORD *)v9 = v114;
      *((_QWORD *)v9 + 2) = v115;
      return a2;
    }
LABEL_7:
    if (v8 >= 1 && (v8 & 0xFFFFFFF7) != 3 && *(_WORD *)(a1 + 32) == 26)
      goto LABEL_195;
    v13 = *(_QWORD *)(a1 + 8);
    if ((~**(_DWORD **)(v13 + 56) & 0x4100) == 0)
    {
      v14 = *(unsigned __int16 *)(a1 + 32);
      if ((v14 == 61 || v14 == 20)
        && (v11 - 7) >= 6
        && (v11 - 13) >= 6
        && v11 != 1
        && *((_QWORD *)&v114 + 1))
      {
        goto LABEL_196;
      }
    }
    if (v8 == 3)
    {
      v15 = *(unsigned __int16 *)(a1 + 32);
      if ((**(_QWORD **)(v13 + 56) & 0x200) != 0 && v15 == 23)
      {
        v16 = *(_DWORD *)(a1 + 16);
        v17 = sub_22E84AF40(a1);
        if ((v17 & 1) == 0)
        {
          v18 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v18 + 312) = v16;
          *(_DWORD *)(v18 + 316) = 1577;
          if (*(char *)(v18 + 311) < 0)
          {
            **(_BYTE **)(v18 + 288) = 0;
            *(_QWORD *)(v18 + 296) = 0;
          }
          else
          {
            *(_BYTE *)(v18 + 288) = 0;
            *(_BYTE *)(v18 + 311) = 0;
          }
          sub_22E78E558((uint64_t)&v118, v18);
          v19 = v118;
          if (!v118)
          {
            v19 = (unsigned __int8 *)sub_22E3B8AAC(v119);
            v118 = v19;
          }
          v19[*v19 + 1] = 2;
          v20 = v118;
          v21 = *v118;
          *v118 = v21 + 1;
          *(_QWORD *)&v20[8 * v21 + 16] = 1;
          sub_22F1413E0((uint64_t)&v114, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&__src);
          if (v125 >= 0)
            p_src = &__src;
          else
            p_src = (_BYTE **)__src;
          if (v125 >= 0)
            v23 = HIBYTE(v125) & 0x7F;
          else
            v23 = v124;
          sub_22E3B89A8(&v118, p_src, v23);
          if ((v17 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            sub_22F0D4E74(v17 & 0xFFFFFFFFFFFFFFFELL);
            v25 = v24;
          }
          else
          {
            v25 = 0;
          }
          v26 = v118;
          if (!v118)
          {
            v26 = (unsigned __int8 *)sub_22E3B8AAC(v119);
            v118 = v26;
          }
          sub_22E4D6448((uint64_t)(v26 + 336), v25, 1);
          if (SHIBYTE(v125) < 0)
            operator delete(__src);
          sub_22E3BB0B8((uint64_t)&v118);
        }
LABEL_40:
        if ((a2 & 1) == 0)
          sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(a2 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v118);
        v27 = 0;
        a2 = 1;
      }
      else if (v15 == 61)
      {
        sub_22E884578(a1, (int *)v9, 1827, (uint64_t)v113);
        sub_22E3BB0B8((uint64_t)v113);
        v27 = 0;
      }
      else
      {
        v28 = *(_BYTE *)(a1 + 945);
        *(_BYTE *)(a1 + 945) = 1;
        v29 = sub_22E83766C(a1, 0);
        v27 = sub_22E83778C(a1, v29, 1);
        *(_BYTE *)(a1 + 945) = v28;
        if ((v27 & 1) != 0)
          goto LABEL_40;
      }
      if (*(_WORD *)(a1 + 32) == 61)
      {
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), v9);
        v30 = *(unsigned int *)(a1 + 40);
LABEL_62:
        v110 = v30;
        goto LABEL_63;
      }
      v31 = v27;
      v32 = *(_DWORD *)(a1 + 16);
      v112 = v32;
      v33 = *(_QWORD *)(a1 + 8);
      v34 = *(uint64_t **)(v33 + 88);
      if (v32 < 0)
      {
        v35 = ": ";
        if (sub_22F141B98(v32, *(_QWORD *)(v33 + 88), *(_QWORD *)(v33 + 56), &v112))
        {
          v32 = v112;
          goto LABEL_48;
        }
      }
      else
      {
LABEL_48:
        LOBYTE(v118) = 0;
        v36 = sub_22F1E2D38(v34, v32 - 1, &v118);
        v35 = ": ";
        if (!(_BYTE)v118)
        {
          v35 = ": ";
          if (*v36 == 32)
          {
            v37 = sub_22F1E2D38(v34, v112 - 2, &v118);
            v35 = ": ";
            if (!(_BYTE)v118)
            {
              v35 = ": ";
              if (*v37 == 32)
              {
                --v112;
                v35 = ":";
              }
            }
          }
        }
      }
      sub_22E884578(a1, (int *)v9, 15, (uint64_t)&__src);
      v38 = __src;
      if (!__src)
      {
        v38 = (unsigned __int8 *)sub_22E3B8AAC(v124);
        __src = v38;
      }
      v38[*v38 + 1] = 4;
      v39 = __src;
      v40 = *__src;
      *__src = v40 + 1;
      *(_QWORD *)&v39[8 * v40 + 16] = 61;
      v41 = strlen(v35);
      sub_22E729148(v35, v41, v112, 0, (uint64_t)&v118);
      sub_22E6D82D0((uint64_t *)&__src, &v118);
      if (v122 < 0)
        operator delete(__p);
      sub_22E3BB0B8((uint64_t)&__src);
      v42 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)(v42 + 312) = v114;
      *(_DWORD *)(v42 + 316) = 104;
      v27 = v31;
      if (*(char *)(v42 + 311) < 0)
      {
        **(_BYTE **)(v42 + 288) = 0;
        *(_QWORD *)(v42 + 296) = 0;
      }
      else
      {
        *(_BYTE *)(v42 + 288) = 0;
        *(_BYTE *)(v42 + 311) = 0;
      }
      sub_22E78E558((uint64_t)&v118, v42);
      v43 = v118;
      if (!v118)
      {
        v43 = (unsigned __int8 *)sub_22E3B8AAC(v119);
        v118 = v43;
      }
      v43[*v43 + 1] = 4;
      v44 = v118;
      v45 = *v118;
      *v118 = v45 + 1;
      *(_QWORD *)&v44[8 * v45 + 16] = 60;
      sub_22E3BB0B8((uint64_t)&v118);
      v30 = *v9;
      goto LABEL_62;
    }
    v27 = 1;
LABEL_63:
    sub_22E9B4314(v10, *(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), a2 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int16)v115);
    v46 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
    if ((v46 & 0x200) != 0 && *(_WORD *)(a1 + 32) == 23)
    {
      v47 = sub_22E84AF40(a1);
      v48 = 1;
    }
    else
    {
      if (v8 <= 3 && (v46 & 0x100) != 0)
        v49 = sub_22E83766C(a1, 0);
      else
        v49 = sub_22E838554(a1, 0, 0, 0, 0, 0);
      v47 = v49;
      v48 = 0;
    }
    v50 = (v47 & 1) == 0;
    if ((v47 & 1) != 0)
    {
      if ((a2 & 1) == 0)
        sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(a2 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v118);
      if (v27 >= 2 && (v27 & 1) == 0)
        v27 = (unint64_t)sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v27 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v118);
      a2 = 1;
    }
    v51 = sub_22F1DD1BC(*(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 944), (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) >> 9) & 1);
    v52 = (v8 & 0xFFFFFFFE) != 2;
    if ((v47 & 1) != 0)
      v53 = 0;
    else
      v53 = v48;
    if (v8 != v51)
      v52 = 1;
    if (v8 >= v51 && v52)
    {
      v54 = v51;
      if (v53)
      {
        if (v8 != 2)
        {
          v59 = v27;
          if (v110)
          {
            v80 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v80 + 312) = v110;
            *(_DWORD *)(v80 + 316) = 1577;
            if (*(char *)(v80 + 311) < 0)
            {
              **(_BYTE **)(v80 + 288) = 0;
              *(_QWORD *)(v80 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v80 + 288) = 0;
              *(_BYTE *)(v80 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v118, v80);
            v81 = v118;
            if (!v118)
            {
              v81 = (unsigned __int8 *)sub_22E3B8AAC(v119);
              v118 = v81;
            }
            v81[*v81 + 1] = 2;
            v82 = v118;
            v83 = *v118;
            *v118 = v83 + 1;
            *(_QWORD *)&v82[8 * v83 + 16] = 1;
            v82[(v83 + 1) + 1] = 1;
            v84 = v118;
            v85 = *v118;
            *v118 = v85 + 1;
            *(_QWORD *)&v84[8 * v85 + 16] = ":";
            if ((v47 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              sub_22F0D4E74(v47 & 0xFFFFFFFFFFFFFFFELL);
              v87 = v86;
            }
            else
            {
              v87 = 0;
            }
            sub_22E4D6448((uint64_t)(v84 + 336), v87, 1);
          }
          else
          {
            v88 = *(_QWORD *)(a1 + 96);
            *(_DWORD *)(v88 + 312) = v114;
            *(_DWORD *)(v88 + 316) = 1577;
            if (*(char *)(v88 + 311) < 0)
            {
              **(_BYTE **)(v88 + 288) = 0;
              *(_QWORD *)(v88 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v88 + 288) = 0;
              *(_BYTE *)(v88 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v118, v88);
            v89 = v118;
            if (!v118)
            {
              v89 = (unsigned __int8 *)sub_22E3B8AAC(v119);
              v118 = v89;
            }
            v89[*v89 + 1] = 2;
            v90 = v118;
            v91 = *v118;
            *v118 = v91 + 1;
            *(_QWORD *)&v90[8 * v91 + 16] = 1;
            sub_22F1413E0((uint64_t)&v114, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&__src);
            if (v125 >= 0)
              v92 = &__src;
            else
              v92 = (_BYTE **)__src;
            if (v125 >= 0)
              v93 = HIBYTE(v125) & 0x7F;
            else
              v93 = v124;
            sub_22E3B89A8(&v118, v92, v93);
            if ((v47 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              sub_22F0D4E74(v47 & 0xFFFFFFFFFFFFFFFELL);
              v95 = v94;
            }
            else
            {
              v95 = 0;
            }
            v96 = v118;
            if (!v118)
            {
              v96 = (unsigned __int8 *)sub_22E3B8AAC(v119);
              v118 = v96;
            }
            sub_22E4D6448((uint64_t)(v96 + 336), v95, 1);
            if (SHIBYTE(v125) < 0)
              operator delete(__src);
          }
          sub_22E3BB0B8((uint64_t)&v118);
          a2 = 1;
          v50 = 1;
          goto LABEL_171;
        }
        v55 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v55 + 312) = v114;
        *(_DWORD *)(v55 + 316) = 1932;
        if (*(char *)(v55 + 311) < 0)
        {
          **(_BYTE **)(v55 + 288) = 0;
          *(_QWORD *)(v55 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v55 + 288) = 0;
          *(_BYTE *)(v55 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v118, v55);
        if ((v47 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          sub_22F0D4E74(v47 & 0xFFFFFFFFFFFFFFFELL);
          v57 = v56;
        }
        else
        {
          v57 = 0;
        }
        v58 = v118;
        if (!v118)
        {
          v58 = (unsigned __int8 *)sub_22E3B8AAC(v119);
          v118 = v58;
        }
        v50 = 1;
        sub_22E4D6448((uint64_t)(v58 + 336), v57, 1);
        sub_22E3BB0B8((uint64_t)&v118);
      }
      v59 = v27;
      if ((a2 & 1) != 0)
        goto LABEL_171;
    }
    else
    {
      if (v53)
      {
        sub_22E884578(a1, (int *)v9, 1577, (uint64_t)&v118);
        v60 = v118;
        if (!v118)
        {
          v60 = (unsigned __int8 *)sub_22E3B8AAC(v119);
          v118 = v60;
        }
        v60[*v60 + 1] = 2;
        v61 = v118;
        v62 = *v118;
        *v118 = v62 + 1;
        *(_QWORD *)&v61[8 * v62 + 16] = 0;
        sub_22F1413E0((uint64_t)v9, *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56), 0, (uint64_t)&__src);
        if (v125 >= 0)
          v63 = &__src;
        else
          v63 = (_BYTE **)__src;
        if (v125 >= 0)
          v64 = HIBYTE(v125) & 0x7F;
        else
          v64 = v124;
        sub_22E3B89A8(&v118, v63, v64);
        if ((v47 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          sub_22F0D4E74(v47 & 0xFFFFFFFFFFFFFFFELL);
          v66 = v65;
        }
        else
        {
          v66 = 0;
        }
        v67 = v118;
        if (!v118)
        {
          v67 = (unsigned __int8 *)sub_22E3B8AAC(v119);
          v118 = v67;
        }
        sub_22E4D6448((uint64_t)(v67 + 336), v66, 1);
        if (SHIBYTE(v125) < 0)
          operator delete(__src);
        sub_22E3BB0B8((uint64_t)&v118);
        v47 = 1;
      }
      if ((v8 & 0xFFFFFFFE) == 2)
        v68 = v8;
      else
        v68 = (v8 + 1);
      v47 = sub_22E83778C(a1, v47, v68);
      v50 = (v47 & 1) == 0;
      v59 = v27;
      if ((v47 & 1) != 0)
      {
        if ((a2 & 1) == 0)
          sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(a2 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v118);
        if (v27 >= 2 && (v27 & 1) == 0)
          v59 = (unint64_t)sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v27 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v118);
        a2 = 1;
      }
      v54 = sub_22F1DD1BC(*(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 944), (**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) >> 9) & 1);
      if ((a2 & 1) != 0)
        goto LABEL_171;
    }
    v109 = (_DWORD *)v59;
    if ((v59 & 1) != 0)
    {
      v72 = v115;
      if (*(_BYTE *)(a1 + 944) || (unsigned __int16)v115 != 52)
      {
        v74 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFELL);
        v77 = v47 & 0xFFFFFFFFFFFFFFFELL;
        v73 = v114;
      }
      else
      {
        v73 = v114;
        v74 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFELL);
        if ((a2 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          sub_22F0D4E74(a2 & 0xFFFFFFFFFFFFFFFELL);
          v76 = v75;
        }
        else
        {
          v76 = 0;
        }
        v77 = v47 & 0xFFFFFFFFFFFFFFFELL;
        if ((v47 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          sub_22F0D4E74(v47 & 0xFFFFFFFFFFFFFFFELL);
          v79 = v78;
        }
        else
        {
          v79 = 0;
        }
        sub_22E8845B4(a1, v73, 1900, v79 & 0xFFFFFFFF00000000 | v76);
      }
      v69 = sub_22EB1E9A8(*(_QWORD **)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), v73, v72, v74, v77);
      if ((v69 & 1) != 0)
      {
        v99 = *(_QWORD *)(a1 + 88);
        sub_22F0D5A50((uint64_t)v74);
        v101 = v100;
        sub_22F0D60E4(v77);
        v118 = (unsigned __int8 *)v74;
        v119 = v77;
        v69 = sub_22F32D6EC(v99, v101, v102, &v118, 2, 0);
      }
    }
    else
    {
      v69 = sub_22EB2F86C(*(_QWORD **)(a1 + 88), v114, v110, (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFFELL), v59 & 0xFFFFFFFFFFFFFFFELL, v47 & 0xFFFFFFFFFFFFFFFELL);
      if ((v69 & 1) != 0)
      {
        v118 = 0;
        v119 = 0;
        v120 = 0;
        if ((v59 & 0xFFFFFFFFFFFFFFFELL) != 0)
        {
          __src = (_BYTE *)(a2 & 0xFFFFFFFFFFFFFFFELL);
          v124 = v59 & 0xFFFFFFFFFFFFFFFELL;
          v125 = v47 & 0xFFFFFFFFFFFFFFFELL;
          v70 = (char *)v126;
          v71 = 3;
        }
        else
        {
          __src = (_BYTE *)(a2 & 0xFFFFFFFFFFFFFFFELL);
          v124 = v47 & 0xFFFFFFFFFFFFFFFELL;
          v70 = (char *)&v125;
          v71 = 2;
        }
        sub_22E840390(&v118, (char *)&__src, v70, v71);
        v103 = *(_QWORD *)(a1 + 88);
        sub_22F0D5A50(a2 & 0xFFFFFFFFFFFFFFFELL);
        v105 = v104;
        sub_22F0D60E4(v47 & 0xFFFFFFFFFFFFFFFELL);
        v106 = v118;
        v69 = sub_22F32D6EC(v103, v105, v107, v118, (uint64_t)(v119 - (_QWORD)v118) >> 3, 0);
        if (v106)
          operator delete(v106);
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
    {
      v9 = (unsigned int *)(a1 + 16);
      if ((v69 & 1) != 0)
      {
        sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(a2 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v118);
        a2 = v69;
        v59 = (unint64_t)v109;
LABEL_171:
        v97 = *(_QWORD *)(a1 + 88);
        if ((v59 & 1) == 0)
        {
          sub_22EBBCB14(v97, (_DWORD *)(v59 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v118);
          v97 = *(_QWORD *)(a1 + 88);
        }
        if (v50)
          sub_22EBBCB14(v97, (_DWORD *)(v47 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v118);
        goto LABEL_175;
      }
      a2 = v69;
    }
    else
    {
      a2 = v69;
      v9 = (unsigned int *)(a1 + 16);
    }
LABEL_175:
    v98 = v117;
    v10 = a1 + 48;
    *(_OWORD *)(a1 + 48) = v116;
    *(_OWORD *)(a1 + 64) = v98;
    v8 = v54;
    if (v54 < v111)
      return a2;
  }
  if ((unsigned __int16)v115 != 75)
    goto LABEL_7;
  sub_22E884578(a1, (int *)v9, 1683, (uint64_t)&v118);
  sub_22E3BB0B8((uint64_t)&v118);
  return 1;
}

uint64_t sub_22E838554(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t result;
  uint64_t v8;
  _BYTE v9[39];
  char v10;

  v10 = 0;
  result = sub_22E839DA4(a1, a2, a3, &v10, a4, a5, a6);
  if (v10)
  {
    v8 = result;
    sub_22E884578(a1, (int *)(a1 + 16), 1499, (uint64_t)v9);
    sub_22E3BB0B8((uint64_t)v9);
    return v8;
  }
  return result;
}

unint64_t sub_22E8385C0(_BYTE *a1, unint64_t a2)
{
  _OWORD *v3;
  unsigned int *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t *v56;
  uint64_t v57;
  _DWORD *v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  unsigned int v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _BYTE *v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  int v95;
  char v96;
  unint64_t v97;
  uint64_t (*v98)(_QWORD);
  uint64_t v99;
  int v100;
  _DWORD *v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  BOOL v122;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t (*v143)(_QWORD);
  char v144;
  char v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  int v153;
  unsigned __int8 *v154;
  char v155;
  uint64_t v156[2];
  unsigned __int8 *v157;
  unint64_t *v158;
  uint64_t **v159;
  unsigned __int8 **v160;
  _BYTE v161[32];
  __int128 v162;
  __int128 v163;
  unint64_t v164;
  __int128 v165;
  _OWORD v166[5];
  uint64_t *v167;
  _BYTE v168[12];
  char v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  unsigned __int8 *v174;
  uint64_t v175;
  _BYTE *v176;
  int v177;
  __int16 v178;
  uint64_t (*v179)(uint64_t);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;

  LODWORD(v150) = 0;
  v182 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 48;
  v4 = (unsigned int *)(a1 + 16);
  v164 = a2;
  v5 = *((_OWORD *)a1 + 4);
  v151 = a1 + 944;
  v162 = *((_OWORD *)a1 + 3);
  v163 = v5;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = v163;
        *v3 = v162;
        v3[1] = v6;
        v7 = *((unsigned __int16 *)a1 + 16);
        if (*((unsigned __int16 *)a1 + 16) <= 0x14u)
          break;
        v8 = v7 - 21;
        if ((v7 - 21) > 0x34)
          return v164;
        if (((1 << v8) & 0x11000) != 0)
        {
          if ((v164 & 1) == 0)
          {
            v167 = (uint64_t *)(v164 & 0xFFFFFFFFFFFFFFFELL);
            v164 = sub_22F32DAC4(*((_QWORD **)a1 + 11), *(_QWORD *)(*((_QWORD *)a1 + 11) + 12888), *((_DWORD *)a1 + 4), v7, (unsigned __int8 *)(v164 & 0xFFFFFFFFFFFFFFFELL));
            if ((v164 & 1) != 0)
            {
              v18 = *((_QWORD *)a1 + 11);
              sub_22F0D5A50((uint64_t)v167);
              v164 = sub_22F32D6EC(v18, v19, *((_DWORD *)a1 + 4), &v167, 1, 0);
            }
          }
          *((_DWORD *)a1 + 10) = *((_DWORD *)a1 + 4);
          sub_22F18FB4C(*((_QWORD *)a1 + 1), v4);
        }
        else if (((1 << v8) & 0x8010) != 0)
        {
          *((_DWORD *)a1 + 10) = *((_DWORD *)a1 + 4);
          sub_22F18FB4C(*((_QWORD *)a1 + 1), v4);
          v148 = *((unsigned int *)a1 + 10);
          v165 = 0u;
          v166[0] = 0u;
          v157 = 0;
          v155 = 0;
          v23 = v164;
          v24 = v164 & 0xFFFFFFFFFFFFFFFELL;
          if ((v164 & 1) != 0)
            v25 = 0;
          else
            v25 = v164 & 0xFFFFFFFFFFFFFFFELL;
          if (a1[48])
          {
            if (v25)
            {
              v26 = *((_DWORD *)a1 + 4);
              sub_22F0D5A50(v25);
              if (*((_DWORD *)a1 + 13) == v27)
                *((_DWORD *)a1 + 13) = v26;
            }
          }
          v28 = 0;
          v29 = 0;
          if ((v23 & 1) != 0)
          {
            v30 = 0;
          }
          else
          {
            v30 = 0;
            if ((**(_QWORD **)(*((_QWORD *)a1 + 1) + 56) & 0x100) != 0)
            {
              v31 = *(_QWORD *)(v24 + 8);
              if (v31 >= 0x10)
              {
                v32 = *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF0);
                if (v32)
                {
                  if (*((_WORD *)a1 + 16) == 21)
                  {
                    v33 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
                    if ((v33 & 0xFF800FF) == 0x828000B || v33 - 25 <= 1)
                    {
                      v35 = *((_QWORD *)a1 + 12);
                      *(_DWORD *)(v35 + 312) = v148;
                      *(_DWORD *)(v35 + 316) = 1566;
                      if (*(char *)(v35 + 311) < 0)
                      {
                        **(_BYTE **)(v35 + 288) = 0;
                        *(_QWORD *)(v35 + 296) = 0;
                      }
                      else
                      {
                        *(_BYTE *)(v35 + 288) = 0;
                        *(_BYTE *)(v35 + 311) = 0;
                      }
                      sub_22E78E558((uint64_t)&v174, v35);
                      v36 = v174;
                      if (!v174)
                      {
                        v36 = (unsigned __int8 *)sub_22E3B8AAC(v175);
                        v174 = v36;
                      }
                      v36[*v36 + 1] = 4;
                      v37 = v174;
                      v38 = *v174;
                      *v174 = v38 + 1;
                      *(_QWORD *)&v37[8 * v38 + 16] = v7;
                      sub_22F0D4E74(v24);
                      sub_22E4D6448((uint64_t)(v37 + 336), v39, 1);
                      v169 = 0;
                      *(_QWORD *)&v168[4] = 0;
                      v171 = 0;
                      v172 = 0;
                      v170 = 0;
                      v173 = 0;
                      v167 = (uint64_t *)(v148 | (v148 << 32));
                      v168[0] = 1;
                      sub_22E6D82D0((uint64_t *)&v174, &v167);
                      if (SHIBYTE(v172) < 0)
                        operator delete(v170);
                      sub_22E3BB0B8((uint64_t)&v174);
                      v152 = sub_22E8385C0(a1, v24);
                      v40 = 0;
                      goto LABEL_255;
                    }
                  }
                }
              }
              v42 = sub_22EBCD1E4(*((unsigned int **)a1 + 11), *(_QWORD *)(*((_QWORD *)a1 + 11) + 12888), v24, v148, v7, (unint64_t *)&v157, &v155);
              v164 = v42;
              if ((v42 & 1) != 0)
              {
                if (*((_WORD *)a1 + 16) == 3)
                {
                  v51 = *((_QWORD *)a1 + 1);
                  if (*(_QWORD *)(v51 + 752))
                  {
                    *(_BYTE *)(v51 + 864) = 1;
                    *(_BYTE *)(*(_QWORD *)(v51 + 48) + 6) = 1;
                  }
                  v40 = 0;
                  *((_WORD *)a1 + 16) = 1;
                  v152 = 1;
                  goto LABEL_255;
                }
                goto LABEL_254;
              }
              if ((v42 & 0xFFFFFFFFFFFFFFFELL) != 0)
                v43 = (*(unsigned __int8 *)((v42 & 0xFFFFFFFFFFFFFFFELL) + 2) >> 1) & 1;
              else
                LOBYTE(v43) = 0;
              sub_22E8408AC((uint64_t)a1, (uint64_t)&v165, (unint64_t)v157, v43, 0, &v155, 0, 0, 0, 0);
              v30 = v165;
              v28 = DWORD1(v165);
              if (DWORD1(v165))
                v72 = (_DWORD)v165 == 0;
              else
                v72 = 1;
              v29 = *((_QWORD *)&v165 + 1);
              if (!v72 || *((_QWORD *)&v165 + 1))
                v157 = 0;
            }
          }
          v73 = *((unsigned __int16 *)a1 + 16);
          if (v73 != 3)
          {
            if (v155 && (v164 & 1) == 0)
            {
              v86 = sub_22E845FF4((uint64_t)a1, v164 & 0xFFFFFFFFFFFFFFFELL, v148, v7, (uint64_t *)&v165, (unint64_t)v157);
              goto LABEL_165;
            }
            LODWORD(v156[0]) = 0;
            LODWORD(v167) = 0;
            *(_QWORD *)v168 = 0;
            v170 = 0;
            v87 = *((_QWORD *)a1 + 1);
            v88 = **(_QWORD **)(v87 + 56);
            if (v73 == 130 && (_DWORD)v7 == 25 && (v88 & 0x4000) != 0)
            {
              v89 = *((_QWORD *)a1 + 3);
              *((_DWORD *)a1 + 10) = *((_DWORD *)a1 + 4);
              sub_22F18FB4C(v87, v4);
              v90 = *((_DWORD *)a1 + 10);
              LODWORD(v167) = 0;
              *(_QWORD *)v168 = v89;
              LODWORD(v170) = v90;
              HIDWORD(v170) = v90;
              v91 = v164;
              goto LABEL_244;
            }
            if ((v164 & 0xFFFFFFFFFFFFFFFELL) != 0)
              v100 = (*(unsigned __int8 *)((v164 & 0xFFFFFFFFFFFFFFFELL) + 2) >> 1) & 1;
            else
              LOBYTE(v100) = 0;
            if (v30)
              v122 = v28 == 0;
            else
              v122 = 1;
            v124 = !v122 || v29 != 0;
            if ((v88 & 0x20) != 0)
              v125 = v124;
            else
              v125 = 0;
            v126 = sub_22E842CDC((uint64_t)a1, (uint64_t)&v165, (unint64_t)v157, v100, 0, 1, v125, 0, (unsigned int *)v156, (uint64_t)&v167);
            v91 = v164;
            if (v126)
            {
              if ((v164 & 1) == 0)
                sub_22EBBCB14(*((_QWORD *)a1 + 11), (_DWORD *)(v164 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v174);
              v164 = 1;
              goto LABEL_252;
            }
LABEL_244:
            if ((v91 & 1) == 0)
            {
              v127 = *((_QWORD *)a1 + 336);
              if (v127)
                v128 = *(_QWORD *)(v127 + 8);
              else
                v128 = 0;
              v91 = sub_22EC25EFC(*((_QWORD *)a1 + 11), *(_QWORD *)(*((_QWORD *)a1 + 11) + 12888), v91 & 0xFFFFFFFFFFFFFFFELL, v148, v7, (uint64_t)&v165, v156[0], &v167, v128);
              v164 = v91;
            }
            if ((v91 & 1) != 0)
            {
LABEL_252:
              if (v25 && (_DWORD)v170)
              {
                v132 = *((_QWORD *)a1 + 11);
                sub_22F0D5A50(v25);
                v174 = (unsigned __int8 *)v25;
                v86 = sub_22F32D6EC(v132, v133, SHIDWORD(v170), &v174, 1, 0);
LABEL_165:
                v164 = v86;
              }
            }
            else if (*((_WORD *)a1 + 16) == 46)
            {
              sub_22E88172C((uint64_t)a1, (uint64_t *)&v164);
            }
LABEL_254:
            v40 = 1;
            goto LABEL_255;
          }
          v74 = *((_QWORD *)a1 + 1);
          v75 = **(_QWORD **)(v74 + 56) & 0x100;
          if (!v25 || !v75)
          {
            v84 = (unsigned __int8 *)(v164 & 0xFFFFFFFFFFFFFFFELL);
LABEL_171:
            if (v75)
              v85 = 0;
            else
              v85 = v84;
            goto LABEL_174;
          }
          if ((_DWORD)v7 == 36)
            v76 = 25;
          else
            v76 = 36;
          v77 = *((_QWORD *)a1 + 11);
          v78 = (_BYTE *)(v77 + 10664);
          v146 = *(_DWORD *)(v77 + 8456);
          v147 = v76;
          v144 = *(_BYTE *)(v77 + 10664);
          v145 = *(_BYTE *)(v77 + 11952);
          v153 = *(_DWORD *)(*(_QWORD *)(v77 + 104) + 180);
          sub_22EE03478(v77);
          if (!v79)
            *(_BYTE *)(v77 + 11952) = 1;
          *v78 = 1;
          v80 = *(_BYTE *)(v77 + 12032);
          *(_BYTE *)(v77 + 12032) = 1;
          v81 = sub_22EBCD1E4((unsigned int *)v77, *(_QWORD *)(v77 + 12888), v25, v148, v147, (unint64_t *)&v157, &v155);
          *(_BYTE *)(v77 + 12032) = v80;
          *(_DWORD *)(v77 + 8456) = v146;
          *(_BYTE *)(v77 + 11952) = v145;
          *v78 = v144;
          v82 = *(_QWORD *)(v77 + 104);
          if (*(_DWORD *)(v82 + 180) == 5)
            *(_BYTE *)(v82 + 170) = 1;
          if (v153)
            v83 = 3;
          else
            v83 = 0;
          *(_DWORD *)(v82 + 180) = v83;
          v84 = (unsigned __int8 *)(v164 & 0xFFFFFFFFFFFFFFFELL);
          v74 = *((_QWORD *)a1 + 1);
          v85 = (unsigned __int8 *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          if ((v81 & 0xFFFFFFFFFFFFFFFELL) == 0)
          {
            v75 = **(_QWORD **)(v74 + 56) & 0x100;
            goto LABEL_171;
          }
LABEL_174:
          if (*(_QWORD *)(v74 + 752))
          {
            *(_BYTE *)(v74 + 864) = 1;
            *(_BYTE *)(*(_QWORD *)(v74 + 48) + 6) = 1;
          }
          *((_WORD *)a1 + 16) = 1;
          v92 = *((_QWORD *)a1 + 11);
          v93 = *(_QWORD *)(v92 + 12888);
          if (v84)
          {
            v94 = v85;
            sub_22F0D5A50((uint64_t)v84);
            v85 = v94;
            v96 = *((_DWORD *)a1 + 657) == v95;
          }
          else
          {
            v96 = 0;
          }
          if (!*(_BYTE *)v3 || *((_DWORD *)a1 + 13) != *((_DWORD *)a1 + 4))
          {
LABEL_184:
            v97 = 0;
            goto LABEL_185;
          }
          v97 = *((_QWORD *)a1 + 7);
          if (v97 <= 0xF)
          {
            v98 = (uint64_t (*)(_QWORD))*((_QWORD *)a1 + 8);
            if (!v98)
              goto LABEL_184;
            v154 = v85;
            v99 = v98(*((_QWORD *)a1 + 9));
            v85 = v154;
            v97 = v99;
          }
LABEL_185:
          sub_22E9C1BFC(v92, v93, v84, v85, v148, v7 == 36, v96, v97);
          v40 = 0;
          v152 = 1;
LABEL_255:
          if (HIDWORD(v166[0]))
            free(*(void **)&v166[0]);
          if ((v40 & 1) == 0)
            return v152;
        }
        else
        {
          if (((1 << v8) & 0x10000000000001) == 0)
            return v164;
          v15 = a1[947];
          a1[947] = 0;
          v174 = v151;
          LOBYTE(v175) = a1[944];
          a1[944] = 1;
          v176 = a1;
          v177 = 1441813;
          v178 = 62;
          v180 = 0;
          v181 = 0;
          v179 = sub_22E80F720;
          if ((_DWORD)v7 != 73)
          {
            sub_22E811DE8((uint64_t)&v174);
            v41 = 0;
            LODWORD(v150) = v181;
            goto LABEL_98;
          }
          v167 = (uint64_t *)&v168[8];
          *(_QWORD *)v168 = 0xC00000000;
          *(_QWORD *)&v165 = v166;
          *((_QWORD *)&v165 + 1) = 0x1400000000;
          *((_DWORD *)a1 + 10) = *((_DWORD *)a1 + 4);
          sub_22F18FB4C(*((_QWORD *)a1 + 1), v4);
          v16 = *((_DWORD *)a1 + 10);
          if (sub_22E83F298((uint64_t)a1, (uint64_t)&v167, (uint64_t)&v165))
          {
            if ((v164 & 1) == 0)
              sub_22EBBCB14(*((_QWORD *)a1 + 11), (_DWORD *)(v164 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v157);
            v164 = 1;
          }
          if (*((_WORD *)a1 + 16) == 74)
          {
            *((_DWORD *)a1 + 10) = *((_DWORD *)a1 + 4);
            sub_22F18FB4C(*((_QWORD *)a1 + 1), v4);
            v17 = *((_DWORD *)a1 + 10);
          }
          else if ((v164 & 1) != 0)
          {
            LOWORD(v157) = 74;
            sub_22E885940((uint64_t)a1, (unsigned __int16 *)&v157, 1, 1);
            v17 = 0;
          }
          else
          {
            sub_22E884578((uint64_t)a1, (int *)v4, 15, (uint64_t)&v157);
            v44 = v157;
            if (!v157)
            {
              v44 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v158);
              v157 = v44;
            }
            v44[*v44 + 1] = 4;
            v45 = v157;
            v46 = *v157;
            *v157 = v46 + 1;
            *(_QWORD *)&v45[8 * v46 + 16] = 74;
            sub_22E3BB0B8((uint64_t)&v157);
            v47 = *((_QWORD *)a1 + 12);
            *(_DWORD *)(v47 + 312) = v16;
            *(_DWORD *)(v47 + 316) = 104;
            if (*(char *)(v47 + 311) < 0)
            {
              **(_BYTE **)(v47 + 288) = 0;
              *(_QWORD *)(v47 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v47 + 288) = 0;
              *(_BYTE *)(v47 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v157, v47);
            v48 = v157;
            if (!v157)
            {
              v48 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v158);
              v157 = v48;
            }
            v48[*v48 + 1] = 4;
            v49 = v157;
            v50 = *v157;
            *v157 = v50 + 1;
            *(_QWORD *)&v49[8 * v50 + 16] = 73;
            sub_22E3BB0B8((uint64_t)&v157);
            LOWORD(v157) = 74;
            sub_22E885940((uint64_t)a1, (unsigned __int16 *)&v157, 1, 1);
            v17 = 0;
            v164 = 1;
          }
          v53 = v164;
          if ((v164 & 1) == 0)
          {
            if (sub_22E8847B4((uint64_t)a1, 0x15u, 15, "", 0))
              goto LABEL_92;
            LODWORD(v150) = *((_DWORD *)a1 + 10);
            v53 = v164;
          }
          if ((v53 & 1) != 0)
          {
            v41 = 0;
            goto LABEL_94;
          }
          v54 = sub_22E9FDDBC(*((_QWORD **)a1 + 11), *(_QWORD *)(*((_QWORD *)a1 + 11) + 12888), v16, v167, *(unsigned int *)v168, v17);
          if ((v54 & 1) != 0)
          {
LABEL_92:
            v41 = 0;
            v164 = 1;
            goto LABEL_94;
          }
          v41 = v54 & 0xFFFFFFFFFFFFFFFELL;
LABEL_94:
          if ((_OWORD *)v165 != v166)
            free((void *)v165);
          if (v167 != (uint64_t *)&v168[8])
            free(v167);
LABEL_98:
          v167 = (uint64_t *)&v168[8];
          *(_QWORD *)v168 = 0xC00000000;
          *(_QWORD *)&v165 = v166;
          *((_QWORD *)&v165 + 1) = 0x1400000000;
          v157 = a1;
          v158 = &v164;
          v159 = &v167;
          v160 = &v174;
          if (((_DWORD)v7 == 21 || (v164 & 1) == 0) && *((_WORD *)a1 + 16) != 22)
          {
            v156[0] = (uint64_t)a1;
            v156[1] = (uint64_t)&v157;
            if (sub_22E83EFC4(a1, &v167, &v165, sub_22E840640, v156, 0, 0))
            {
              if ((v164 & 1) == 0)
                sub_22EBBCB14(*((_QWORD *)a1 + 11), (_DWORD *)(v164 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v156);
              if (*(_BYTE *)(*((_QWORD *)a1 + 1) + 864) && !a1[948])
              {
                v55 = v157;
                sub_22E9C3C80();
                v55[948] = 1;
              }
              v164 = 1;
            }
            else if ((v164 & 1) != 0 && *(_DWORD *)v168)
            {
              v56 = v167;
              v57 = 8 * *(unsigned int *)v168;
              do
              {
                v58 = (_DWORD *)*v56++;
                sub_22EBBCB14(*((_QWORD *)a1 + 11), v58, 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)v156);
                v57 -= 8;
              }
              while (v57);
            }
          }
          if ((v164 & 1) != 0)
          {
            LOWORD(v156[0]) = 22;
            sub_22E885940((uint64_t)a1, (unsigned __int16 *)v156, 1, 1);
          }
          else if (*((_WORD *)a1 + 16) == 22)
          {
            v59 = v164 & 0xFFFFFFFFFFFFFFFELL;
            v60 = *((_DWORD *)a1 + 4);
            v164 = sub_22EB33018(*((_QWORD *)a1 + 11), *(_QWORD *)(*((_QWORD *)a1 + 11) + 12888), (unsigned __int8 *)(v164 & 0xFFFFFFFFFFFFFFFELL), v150, (uint64_t)v167, *(unsigned int *)v168, v60, v41);
            if ((v164 & 1) != 0)
            {
              v156[0] = v59;
              sub_22F24C084((uint64_t *)&v167, (uint64_t)v167, v156);
              v130 = *((_QWORD *)a1 + 11);
              sub_22F0D5A50(v59);
              v164 = sub_22F32D6EC(v130, v131, v60, v167, *(unsigned int *)v168, 0);
            }
            sub_22E811E8C((uint64_t)&v174);
          }
          else
          {
            v61 = (unint64_t)sub_22EBBCB14(*((_QWORD *)a1 + 11), (_DWORD *)(v164 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)v156);
            v62 = (v61 & 0xFFFFFFFFFFFFFFFELL) != (v164 & 0xFFFFFFFFFFFFFFFELL);
            if (*(_DWORD *)v168)
            {
              v63 = v167;
              v64 = 8 * *(unsigned int *)v168;
              do
              {
                v65 = (unint64_t)sub_22EBBCB14(*((_QWORD *)a1 + 11), (_DWORD *)*v63, 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)v156);
                v66 = *v63++;
                v62 |= v66 != (v65 & 0xFFFFFFFFFFFFFFFELL);
                v64 -= 8;
              }
              while (v64);
            }
            if ((v62 & 1) != 0)
            {
              LOWORD(v156[0]) = 22;
              sub_22E885940((uint64_t)a1, (unsigned __int16 *)v156, 1, 1);
            }
            else
            {
              sub_22E811E8C((uint64_t)&v174);
            }
            v164 = 1;
          }
          if ((_OWORD *)v165 != v166)
            free((void *)v165);
          if (v167 != (uint64_t *)&v168[8])
            free(v167);
          *v174 = v175;
          a1[947] = v15;
        }
      }
      if ((_DWORD)v7 != 5)
        break;
      v9 = *((_QWORD *)a1 + 1);
      if ((*(_BYTE *)(*(_QWORD *)(v9 + 56) + 1) & 0x40) == 0 || a1[947])
        return v164;
      v10 = *(_QWORD *)(v9 + 2816);
      v11 = v10 >= *(unsigned int *)(v9 + 2784) ? sub_22F162D2C(v9, 1u) : *(_QWORD *)(v9 + 2776) + 24 * v10;
      if (*(_WORD *)(v11 + 16) != 61)
      {
        v12 = *((_QWORD *)a1 + 1);
        v13 = *(_QWORD *)(v12 + 2816);
        v14 = v13 >= *(unsigned int *)(v12 + 2784) ? sub_22F162D2C(v12, 1u) : *(_QWORD *)(v12 + 2776) + 24 * v13;
        if (*(_WORD *)(v14 + 16) != 20)
          return v164;
      }
      v164 = sub_22E85305C((uint64_t)a1, 0, 0, 0, (void *)(v164 & 0xFFFFFFFFFFFFFFFELL));
    }
    if ((_DWORD)v7 == 3)
    {
      if (a1[947])
        return v164;
      v138 = *((_QWORD *)a1 + 1);
      if (*(_QWORD *)(v138 + 752))
      {
        *(_BYTE *)(v138 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v138 + 48) + 6) = 1;
      }
      *((_WORD *)a1 + 16) = 1;
      v139 = *((_QWORD *)a1 + 11);
      v140 = *(_QWORD *)(v139 + 12888);
      v141 = v164;
      if (a1[48] && *((_DWORD *)a1 + 13) == *((_DWORD *)a1 + 4))
      {
        v142 = *((_QWORD *)a1 + 7);
        if (v142 > 0xF)
        {
LABEL_283:
          sub_22F313CB4(v139, v140, v141, v142);
          return 1;
        }
        v143 = (uint64_t (*)(_QWORD))*((_QWORD *)a1 + 8);
        if (v143)
        {
          v142 = v143(*((_QWORD *)a1 + 9));
          goto LABEL_283;
        }
      }
      v142 = 0;
      goto LABEL_283;
    }
    if ((_DWORD)v7 != 19
      || (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 56) + 1) & 0x40) != 0
      && (*((_WORD *)a1 + 17) & 1) != 0
      && sub_22F2EB2D8((uint64_t)a1))
    {
      return v164;
    }
    if (sub_22E827B60(a1))
      break;
    v174 = v151;
    LOBYTE(v175) = a1[944];
    a1[944] = 1;
    v176 = a1;
    v177 = 1310739;
    v178 = 62;
    v180 = 0;
    v181 = 0;
    v179 = sub_22E80F788;
    sub_22E811DE8((uint64_t)&v174);
    v150 = v181;
    v167 = (uint64_t *)&v168[8];
    *(_QWORD *)v168 = 0xC00000000;
    if (a1[48])
    {
      v134 = *((_DWORD *)a1 + 4);
      v135 = *((_QWORD *)a1 + 11);
      *((_QWORD *)a1 + 8) = 0;
      *((_QWORD *)a1 + 7) = *(_QWORD *)(*(_QWORD *)(v135 + 88) + 16480);
      *((_DWORD *)a1 + 13) = v134;
    }
    v20 = *(uint64_t **)(*((_QWORD *)a1 + 1) + 56);
    if (*((_DWORD *)v20 + 18) && *((_WORD *)a1 + 16) == 61)
    {
LABEL_84:
      v52 = 0;
      goto LABEL_197;
    }
    v21 = *v20;
    if ((v21 & 0x2000) != 0)
    {
      if (*((_WORD *)a1 + 16) == 20)
        goto LABEL_84;
      *(_QWORD *)&v165 = v166;
      *((_QWORD *)&v165 + 1) = 0x1400000000;
      v52 = sub_22E83EFC4(a1, &v167, &v165, 0, 0, 0, 0);
      if (v52)
      {
        v101 = (_DWORD *)v164;
        if ((v164 & 1) == 0)
          v101 = sub_22EBBCB14(*((_QWORD *)a1 + 11), (_DWORD *)(v164 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v157);
        v164 = (unint64_t)v101;
      }
      if ((_OWORD *)v165 != v166)
        free((void *)v165);
      v71 = *(_DWORD *)v168;
    }
    else
    {
      if ((v21 & 0x200) != 0 && *((_WORD *)a1 + 16) == 23)
      {
        sub_22E884578((uint64_t)a1, (int *)v4, 1932, (uint64_t)v161);
        sub_22E3BB0B8((uint64_t)v161);
        v22 = sub_22E84AF40(a1);
      }
      else
      {
        v67 = sub_22E83766C(a1, 0);
        v22 = sub_22E83778C(a1, v67, 1);
      }
      v68 = v22;
      v69 = *((_QWORD *)a1 + 11);
      v70 = (_DWORD *)v164;
      if ((v164 & 1) == 0)
      {
        v70 = sub_22EBBCB14(v69, (_DWORD *)(v164 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v165);
        v69 = *((_QWORD *)a1 + 11);
      }
      v164 = (unint64_t)v70;
      if ((v68 & 1) == 0)
        v68 = (unint64_t)sub_22EBBCB14(v69, (_DWORD *)(v68 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v165);
      v71 = *(_DWORD *)v168;
      if ((v68 & 1) != 0)
      {
        v52 = 1;
      }
      else
      {
        if (*(_DWORD *)v168 >= *(_DWORD *)&v168[4])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v71 = *(_DWORD *)v168;
        }
        v52 = 0;
        v167[v71] = v68 & 0xFFFFFFFFFFFFFFFELL;
        v71 = ++*(_DWORD *)v168;
      }
    }
    if (v71 > 1)
      goto LABEL_205;
LABEL_197:
    v102 = *((_QWORD *)a1 + 1);
    if (!*(_DWORD *)(*(_QWORD *)(v102 + 56) + 72))
    {
LABEL_205:
      v109 = 0;
      v104 = 0;
      v110 = 0;
      v108 = 0;
      goto LABEL_216;
    }
    v103 = a1[945];
    a1[945] = 1;
    if (*((_WORD *)a1 + 16) == 61)
    {
      *((_DWORD *)a1 + 10) = *((_DWORD *)a1 + 4);
      sub_22F18FB4C(v102, v4);
      v104 = *((unsigned int *)a1 + 10);
      v105 = *((unsigned __int16 *)a1 + 16);
      v102 = *((_QWORD *)a1 + 1);
      if (v105 != 20 && (v105 != 61 || *(_DWORD *)(*(_QWORD *)(v102 + 56) + 72) <= 0x31u))
      {
        v106 = *((unsigned int *)a1 + 10);
        v107 = sub_22E83766C(a1, 0);
        v108 = sub_22E83778C(a1, v107, 1);
        if ((v108 & 1) == 0)
          v108 = (uint64_t)sub_22EBBCB14(*((_QWORD *)a1 + 11), (_DWORD *)(v108 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v165);
        v102 = *((_QWORD *)a1 + 1);
        v104 = v106;
        goto LABEL_208;
      }
    }
    else
    {
      v104 = 0;
    }
    v108 = 0;
LABEL_208:
    if (*(_DWORD *)(*(_QWORD *)(v102 + 56) + 72) >= 0x32u
      && ((v111 = *((_DWORD *)a1 + 239), v111 == 81) || v111 == 31)
      && *((_WORD *)a1 + 16) == 61)
    {
      v149 = v104;
      *((_DWORD *)a1 + 10) = *((_DWORD *)a1 + 4);
      sub_22F18FB4C(v102, v4);
      v109 = *((unsigned int *)a1 + 10);
      if (*((_WORD *)a1 + 16) == 20)
      {
        v110 = 0;
      }
      else
      {
        v129 = sub_22E83766C(a1, 0);
        v110 = sub_22E83778C(a1, v129, 1);
      }
      v104 = v149;
    }
    else
    {
      v109 = 0;
      v110 = 0;
    }
    a1[945] = v103;
LABEL_216:
    v112 = *((_DWORD *)a1 + 4);
    v113 = v164;
    if ((v164 & 1) == 0)
    {
      v114 = v108;
      v115 = v109;
      v116 = v52;
      v117 = v104;
      v118 = v110;
      v113 = (unint64_t)sub_22EBBCB14(*((_QWORD *)a1 + 11), (_DWORD *)(v164 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v165);
      v110 = v118;
      v104 = v117;
      v52 = v116;
      v109 = v115;
      v108 = v114;
    }
    v164 = v113;
    if (((v52 | v113) & 1) != 0 || (v108 & 1) != 0 || (v110 & 1) != 0 || *((_WORD *)a1 + 16) != 20)
    {
      v164 = 1;
    }
    else
    {
      v119 = (_QWORD *)*((_QWORD *)a1 + 11);
      if (v104 | v109)
      {
        if (*(_DWORD *)v168)
          v120 = *v167;
        else
          v120 = 0;
        v121 = sub_22EB29E14(v119, (unsigned __int8 *)(v113 & 0xFFFFFFFFFFFFFFFELL), v150, v120, v104, v109, v108 & 0xFFFFFFFFFFFFFFFELL, v110 & 0xFFFFFFFFFFFFFFFELL, v112);
      }
      else
      {
        v121 = sub_22EB296C0(*((_QWORD *)a1 + 11), v119[1611], (unsigned __int8 *)(v113 & 0xFFFFFFFFFFFFFFFELL), v150, v167, *(unsigned int *)v168, v112);
      }
      v164 = v121;
    }
    sub_22E811E8C((uint64_t)&v174);
    if (v167 != (uint64_t *)&v168[8])
      free(v167);
    *v174 = v175;
  }
  if ((v164 & 1) == 0)
    sub_22EBBCB14(*((_QWORD *)a1 + 11), (_DWORD *)(v164 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v167);
  return 1;
}

uint64_t sub_22E839A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = sub_22E838554(a1, 0, 0, a2, 0, 0);
  v4 = sub_22E83778C(a1, v3, 3);
  return sub_22EB51A84(*(_QWORD *)(a1 + 88), v4);
}

uint64_t sub_22E839A58(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15[3];
  int v16;
  uint64_t v17;
  int v18;

  v4 = *(_QWORD *)(a1 + 88);
  v18 = 4;
  v17 = 0;
  v16 = 3;
  *(_QWORD *)v15 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v18, v15, (__int16 *)(v4 + 1693), &v17, &v16);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22E838554(a1, 0, 0, 0, 0, 0);
  v12 = sub_22E83778C(a1, v11, 3);
  v13 = sub_22ED2C1F4(*(_QWORD *)(a1 + 88), a2, v12);
  sub_22EB48E64(v4);
  return v13;
}

uint64_t sub_22E839BC0(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  BOOL v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;

  v2 = *a1;
  v3 = sub_22E838554(*a1, 2, 0, 0, 0, a1[1]);
  if ((v3 & 1) != 0)
    return 1;
  if (!*(_BYTE *)a1[1])
  {
    v4 = *(_WORD *)(v2 + 32);
    if ((int)sub_22F1DD1BC(v4, *(unsigned __int8 *)(v2 + 944), 1) <= 5)
    {
      switch(((unsigned __int16)(v4 - 19) >> 1) | (unsigned __int16)((v4 - 19) << 15))
      {
        case 0:
          v10 = *(_QWORD *)(v2 + 8);
          v11 = *(_QWORD *)(v10 + 2816);
          if (v11 >= *(unsigned int *)(v10 + 2784))
            v12 = sub_22F162D2C(v10, 1u);
          else
            v12 = *(_QWORD *)(v10 + 2776) + 24 * v11;
          if (*(_WORD *)(v12 + 16) == 19)
            goto LABEL_7;
          break;
        case 3:
        case 7:
        case 9:
          break;
        default:
          goto LABEL_7;
      }
    }
  }
  v3 = sub_22E83FE28(v2, v3, 0);
  if ((v3 & 1) != 0)
    return 1;
  *(_BYTE *)a1[1] = 0;
LABEL_7:
  v16 = 0;
  v5 = *(_QWORD *)(v2 + 88);
  v6 = *(_OWORD *)(v2 + 16);
  v15 = *(_QWORD *)(v2 + 32);
  v14 = v6;
  v7 = sub_22E9F3234(v5, (unsigned __int8 *)(v3 & 0xFFFFFFFFFFFFFFFELL), &v14, &v16, *(_BYTE *)a1[2]);
  if (v7)
    v8 = !v16;
  else
    v8 = 0;
  if (!v8)
  {
    if (v16)
      v3 = sub_22E83FE28(v2, v3, v7 ^ 1u);
    if ((v3 & 1) == 0)
      sub_22EBBCB14(*(_QWORD *)(v2 + 88), (_DWORD *)(v3 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v13);
    return 1;
  }
  return v3;
}

uint64_t sub_22E839D4C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 2424);
  if (v2
    && (v3 = *(_QWORD *)(a1 + 2416) + 24 * v2, *(unsigned __int16 *)(a1 + 80) == *(unsigned __int16 *)(v3 - 10))
    && *(unsigned __int16 *)(a1 + 82) == *(unsigned __int16 *)(v3 - 8)
    && *(unsigned __int16 *)(a1 + 84) == *(unsigned __int16 *)(v3 - 6))
  {
    return sub_22F2F028C(a1, v3 - 24, a2);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_22E839DA4(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  _BYTE *v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  __int128 v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unsigned __int8 *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  char *v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t (**v113)(uint64_t);
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unsigned __int8 *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  unint64_t v139;
  _QWORD *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int8 *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  unsigned __int8 *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  unsigned int v167;
  uint64_t v168;
  char v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int8 v191;
  unint64_t v192;
  _QWORD *v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  unsigned __int8 *v198;
  uint64_t v199;
  uint64_t v200;
  unsigned __int8 *v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  unsigned int v210;
  int v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  char v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t (*v224)(_QWORD);
  uint64_t v225;
  unint64_t v226;
  unsigned int v227;
  BOOL v228;
  _BOOL4 v229;
  __int128 *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unsigned __int8 *v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  BOOL v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char v248;
  uint64_t v249;
  int v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  char v259;
  unsigned __int8 *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unsigned int v268;
  BOOL v269;
  uint64_t v270;
  unint64_t v272;
  _QWORD *v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE v277[32];
  _BYTE v278[32];
  _BYTE v279[32];
  _BYTE v280[32];
  _BYTE v281[32];
  _BYTE v282[32];
  _BYTE v283[32];
  _BYTE v284[32];
  __int128 v285;
  __int128 v286;
  uint64_t v287;
  __int128 v288;
  void *v289[2];
  uint64_t (*v290)(uint64_t);
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  char v294;
  __int128 v295;
  uint64_t v296;
  _BYTE v297[48];
  __int128 v298;
  void *v299[2];
  _OWORD v300[2];
  __int128 v301;
  _OWORD v302[5];
  int v303;
  uint64_t v304;
  __int16 v305;
  __int128 v306;
  uint64_t v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;
  unint64_t v312;
  _BYTE v313[24];
  uint64_t (*v314)(uint64_t);
  uint64_t v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  int v326;
  uint64_t v327;
  uint64_t v328;

  while (2)
  {
    v7 = a4;
    v328 = *MEMORY[0x24BDAC8D0];
    v287 = 0;
    v8 = *(unsigned __int16 *)(a1 + 32);
    v9 = *(_OWORD *)(a1 + 64);
    v285 = *(_OWORD *)(a1 + 48);
    v286 = v9;
    *a4 = 0;
    v10 = (uint64_t)a7;
    v11 = a6;
    v12 = a5;
    v13 = a3;
    v14 = a2;
    v15 = a1;
    v16 = a1 + 16;
    v17 = a1 + 48;
    switch(v8)
    {
      case 3:
        v220 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v220 + 752))
        {
          *(_BYTE *)(v220 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v220 + 48) + 6) = 1;
        }
        *(_WORD *)(a1 + 32) = 1;
        v221 = *(_QWORD *)(a1 + 88);
        v222 = *(_QWORD *)(v221 + 12888);
        if (!*(_BYTE *)(a1 + 48) || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a1 + 16))
          goto LABEL_388;
        v223 = *(_QWORD *)(a1 + 56);
        if (v223 <= 0xF)
        {
          v224 = *(uint64_t (**)(_QWORD))(a1 + 64);
          if (v224)
            v223 = v224(*(_QWORD *)(a1 + 72));
          else
LABEL_388:
            v223 = 0;
        }
        sub_22F313C2C(v221, v222, v223, 0);
        return 1;
      case 5:
        v79 = *(_QWORD *)(a1 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v79 + 56) + 1) & 1) == 0)
          goto LABEL_120;
        v160 = *(_QWORD *)(v79 + 2816);
        if (v160 >= *(unsigned int *)(v79 + 2784))
          v161 = sub_22F162D2C(v79, 1u);
        else
          v161 = *(_QWORD *)(v79 + 2776) + 24 * v160;
        v204 = *(unsigned __int16 *)(v161 + 16);
        if (v204 != 21)
          goto LABEL_502;
        if (*(_WORD *)(v15 + 32) != 5 || (*(_BYTE *)(*(_QWORD *)(v15 + 24) + 4) & 4) == 0)
          goto LABEL_508;
        v275 = v161;
        v276 = *(_QWORD *)(v15 + 24);
        if (*(_DWORD *)(v15 + 504) <= 1u)
        {
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_abstract", 0xDuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 232;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_aggregate", 0xEuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 233;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_arithmetic", 0xFuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 254;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_array", 0xAuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 259;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_assignable", 0xFuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 220;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_base_of", 0xCuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 234;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_class", 0xAuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 235;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_complete_type", 0x12uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 257;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_compound", 0xDuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 267;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_const", 0xAuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 272;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_constructible", 0x12uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 218;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_convertible", 0x10uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 277;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_convertible_to", 0x13uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 236;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_destructible", 0x11uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 214;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_empty", 0xAuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 237;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_enum", 9uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 238;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_floating_point", 0x13uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 255;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_final", 0xAuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 239;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_function", 0xDuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 260;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_fundamental", 0x10uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 264;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_integral", 0xDuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 256;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_interface_class", 0x14uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 212;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_literal", 0xCuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 240;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_lvalue_expr", 0x10uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 252;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_lvalue_reference", 0x15uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 262;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_member_function_pointer", 0x1CuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 270;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_member_object_pointer", 0x1AuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 269;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_member_pointer", 0x13uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 271;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_nothrow_assignable", 0x17uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 217;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_nothrow_constructible", 0x1AuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 219;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_nothrow_destructible", 0x19uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 216;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_object", 0xBuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 265;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_pod", 8uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 241;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_pointer", 0xCuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 268;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_polymorphic", 0x10uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 242;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_reference", 0xEuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 261;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_rvalue_expr", 0x10uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 253;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_rvalue_reference", 0x15uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 263;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_same", 9uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 276;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_scalar", 0xBuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 266;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_sealed", 0xBuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 213;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_signed", 0xBuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 274;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_standard_layout", 0x14uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 243;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_trivial", 0xCuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 244;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_trivially_assignable", 0x19uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 245;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_trivially_constructible", 0x1CuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 246;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_trivially_copyable", 0x17uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 247;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_union", 0xAuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 248;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_unsigned", 0xDuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 275;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_void", 9uLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 258;
          *(_QWORD *)v297 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(v15 + 8) + 544), "__is_volatile", 0xDuLL);
          *((_WORD *)sub_22F2E6DBC((_DWORD *)(v15 + 504), (uint64_t *)v297) + 4) = 273;
        }
        v205 = sub_22F2E5664(v15 + 504, v276);
        if ((*(_BYTE *)(v15 + 504) & 1) != 0)
        {
          v206 = v15 + 512;
          v207 = 4;
        }
        else
        {
          v206 = *(_QWORD *)(v15 + 512);
          v207 = *(unsigned int *)(v15 + 520);
        }
        if (v206 + 16 * v207 != v205)
        {
          *(_WORD *)(v15 + 32) = *(_WORD *)(v205 + 8);
          goto LABEL_510;
        }
        v204 = *(unsigned __int16 *)(v275 + 16);
LABEL_502:
        if (*(_BYTE *)(v15 + 945) || v204 != 61)
        {
          v268 = v204 - 21;
          v269 = v268 > 0x32;
          v270 = (1 << v268) & 0x4000002000005;
          if (v269 || v270 == 0)
            goto LABEL_120;
        }
LABEL_508:
        if ((sub_22E88B7AC(v15) & 1) != 0)
          return 1;
        if (*(_WORD *)(v15 + 32) != 5)
        {
LABEL_510:
          a1 = v15;
          a2 = v14;
          a3 = v13;
          a4 = v7;
          a5 = v12;
          a6 = v11;
          a7 = (_BYTE *)v10;
          continue;
        }
LABEL_120:
        v80 = *(_QWORD *)(v15 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v80 + 56) + 136) & 2) == 0
          || ((v81 = *(_QWORD *)(v80 + 2816), v81 >= *(unsigned int *)(v80 + 2784))
            ? (v82 = sub_22F162D2C(v80, 1u))
            : (v82 = *(_QWORD *)(v80 + 2776) + 24 * v81),
              *(_WORD *)(v82 + 16) != 21))
        {
          v208 = *(unsigned __int16 *)(v15 + 32);
          if ((v208 - 7) >= 6)
          {
            v209 = 0;
            if ((v208 - 13) >= 6 && v208 != 1)
LABEL_329:
              v209 = *(_QWORD *)(v15 + 24);
          }
          else
          {
            v209 = 0;
          }
          *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
          sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
          v210 = *(_DWORD *)(v15 + 40);
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 56) + 1) & 0x40) != 0 && *(_WORD *)(v15 + 32) == 25)
          {
            if (sub_22EA003D8(*(_QWORD **)(v15 + 88), v209, v210, *(uint64_t **)(*(_QWORD *)(v15 + 88) + 12888), 0, 0, 0, 0, 0, 0, 1u, 0))
            {
LABEL_333:
              *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
              sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
              v211 = *(unsigned __int16 *)(v15 + 32);
              switch(v211)
              {
                case 3:
                  if (v209 != *(_QWORD *)(v15 + 336))
                  {
                    v253 = *(_QWORD *)(v15 + 8);
                    if (*(_QWORD *)(v253 + 752))
                    {
                      *(_BYTE *)(v253 + 864) = 1;
                      *(_BYTE *)(*(_QWORD *)(v253 + 48) + 6) = 1;
                    }
                    v10 = 1;
                    *(_WORD *)(v15 + 32) = 1;
                    sub_22F313CEC(*(_QWORD *)(v15 + 88), *(_QWORD *)(*(_QWORD *)(v15 + 88) + 12888), v209, v210, *(_DWORD *)(v15 + 2628) == v210);
                    return v10;
                  }
                  break;
                case 5:
                  v212 = *(_QWORD *)(v15 + 8);
                  goto LABEL_464;
                case 130:
                  v212 = *(_QWORD *)(v15 + 8);
                  if ((**(_QWORD **)(v212 + 56) & 0x100) != 0)
                  {
LABEL_464:
                    v254 = *(_QWORD *)(v15 + 24);
                    *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
                    sub_22F18FB4C(v212, (unsigned int *)v16);
                    v18 = sub_22EC2D07C(*(_QWORD **)(v15 + 88), v209, v254, v210, *(_DWORD *)(v15 + 40));
LABEL_3:
                    v287 = v18;
                    goto LABEL_4;
                  }
                  break;
              }
              sub_22E884578(v15, (int *)v16, 1520, (uint64_t)v283);
              v50 = v283;
LABEL_176:
              sub_22E3BB0B8((uint64_t)v50);
              return 1;
            }
            if (v209 == *(_QWORD *)(v15 + 336))
            {
              v263 = *(_QWORD *)(v15 + 88) + 12888;
              while (1)
              {
                v263 = *(_QWORD *)v263;
                if (!v263)
                  break;
                if ((*(_BYTE *)(v263 + 9) & 8) != 0)
                  goto LABEL_333;
              }
            }
          }
          v226 = *(_QWORD *)(v15 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v226 + 56) + 1) & 0x40) == 0)
            goto LABEL_405;
          if (v209 != *(_QWORD *)(v15 + 336) || *(_BYTE *)(v15 + 947))
          {
LABEL_411:
            v227 = *(unsigned __int16 *)(v15 + 32);
            if (v227 != 3)
            {
              if (v227 != 5)
                goto LABEL_406;
              if (*(_BYTE *)(v15 + 947))
              {
                v227 = 5;
LABEL_406:
                if ((_DWORD)v13)
                {
                  if (v227 > 0x25)
                    v13 = 1;
                  else
                    v13 = (0xDFDD7FFFFuLL >> v227) & 1;
                }
                v288 = 0u;
                *(_OWORD *)v289 = 0u;
                *(_OWORD *)&v297[32] = *(_OWORD *)v16;
                *(_QWORD *)&v298 = *(_QWORD *)(v16 + 16);
                *(_DWORD *)&v297[8] = 16843009;
                v297[12] = 1;
                *(_QWORD *)&v297[13] = 0;
                *(_QWORD *)&v297[21] = 0;
                *(_DWORD *)&v297[28] = 0;
                *(_QWORD *)v297 = &off_24FAA4AE8;
                BYTE8(v298) = (_DWORD)v12 != 2;
                v297[11] = (_DWORD)v12 != 0;
                v297[8] = (_DWORD)v12 != 0;
                v297[15] = v13;
                if (v227 - 69 > 1)
                {
                  v228 = v227 != 22;
                }
                else
                {
                  v228 = 0;
                  v297[9] = 0;
                }
                v297[12] = v228;
                LODWORD(v312) = 0;
                *(_QWORD *)v313 = v209;
                *(_DWORD *)&v313[20] = v210;
                *(_DWORD *)&v313[16] = v210;
                v229 = v227 == 21;
                v61 = v227 == 22;
                v230 = &v295;
                if (v61)
                  v230 = 0;
                v231 = sub_22EB1C438(*(_QWORD *)(v15 + 88), *(uint64_t **)(*(_QWORD *)(v15 + 88) + 12888), (uint64_t)&v288, 0, &v312, v229, v13, (uint64_t)v297, 0, (uint64_t)v230);
                v232 = v231;
                v287 = v231;
                if (v231)
                {
                  if ((v231 & 1) == 0 && *(_WORD *)(v15 + 32) == 46)
                    sub_22E88172C(v15, &v287);
                }
                else
                {
                  sub_22F2E56C0(v15, (unint64_t)&v295);
                  v10 = sub_22E839DA4(v15, v14, v13, v7, v12, 0, v10);
                }
                if (HIDWORD(v289[1]))
                  free(v289[0]);
                if (!v232)
                  return v10;
                goto LABEL_4;
              }
            }
            v233 = *(_QWORD *)(v226 + 2816);
            if (v233 >= *(unsigned int *)(v226 + 2784))
            {
              v234 = sub_22F162D2C(v226, 1u);
              v227 = *(unsigned __int16 *)(v15 + 32);
            }
            else
            {
              v234 = *(_QWORD *)(v226 + 2776) + 24 * v233;
            }
            if (v227 == 3
              || ((v238 = *(unsigned __int16 *)(v234 + 16), v238 != 61) ? (v239 = v238 == 20) : (v239 = 1), v239))
            {
              v240 = sub_22EA003D8(*(_QWORD **)(v15 + 88), v209, v210, *(uint64_t **)(*(_QWORD *)(v15 + 88) + 12888), 0, 0, 0, 0, 0, 0, 1u, 0);
              if (v240)
              {
                if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v240 & 0xFFFFFFFFFFFFFFF0)
                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 16)
                   - 33 <= 1)
                {
                  *(_OWORD *)&v313[8] = 0u;
                  v314 = 0;
                  v315 = v15 + 960;
                  v327 = 0;
                  v320 = 0u;
                  v321 = 0u;
                  v316 = 0u;
                  v317 = 0u;
                  *(_QWORD *)&v318 = 0;
                  v319 = 0u;
                  v322 = 0u;
                  v323 = 0u;
                  v324 = 0u;
                  v325 = 0u;
                  v326 = 0;
                  DWORD2(v318) = v210;
                  HIDWORD(v318) = v210;
                  v246 = *(_QWORD *)(v15 + 88);
                  DWORD2(v320) = v210;
                  DWORD1(v321) = v210;
                  *(_QWORD *)v313 = v240;
                  v312 = 114688;
                  *(_QWORD *)v297 = &v312;
                  *(_QWORD *)&v298 = 0;
                  *(_OWORD *)v299 = __PAIR128__(*((unint64_t *)&v318 + 1), 0);
                  memset(&v297[8], 0, 36);
                  memset((char *)v300 + 8, 0, 20);
                  LODWORD(v300[0]) = 5;
                  *(_QWORD *)&v301 = v302;
                  *((_QWORD *)&v301 + 1) = 0x800000000;
                  v305 &= 0xFC00u;
                  v306 = 0u;
                  v307 = v15 + 960;
                  v311 = 0;
                  v310 = 0u;
                  v309 = 0u;
                  v308 = 0u;
                  v247 = sub_22EE89FC0(v246, *(_QWORD *)(v246 + 12888), (uint64_t)v297, v241, v242, v243, v244, v245);
                  if (!v248)
                    v287 = sub_22E85305C(v15, 0, 0, v247, 0);
                  sub_22E827F78((uint64_t)v297);
                  if (DWORD1(v318))
                    free(*((void **)&v317 + 1));
                  sub_22E8D1BC4(v315, (uint64_t)&v315);
                  sub_22E80F94C((uint64_t *)&v316);
                  v124 = (uint64_t *)&v314;
LABEL_190:
                  sub_22E80F94C(v124);
                  goto LABEL_4;
                }
              }
            }
LABEL_405:
            v227 = *(unsigned __int16 *)(v15 + 32);
            goto LABEL_406;
          }
          v249 = *(_QWORD *)(v15 + 88) + 12888;
          do
          {
            v249 = *(_QWORD *)v249;
            if (!v249)
              goto LABEL_411;
          }
          while ((*(_BYTE *)(v249 + 9) & 8) == 0);
          v250 = *(unsigned __int16 *)(v15 + 32);
          if (v250 == 5)
          {
            v251 = *(_QWORD *)(v226 + 2816);
            if (v251 >= *(unsigned int *)(v226 + 2784))
              v252 = sub_22F162D2C(v226, 1u);
            else
              v252 = *(_QWORD *)(v226 + 2776) + 24 * v251;
            if (*(_WORD *)(v252 + 16) == 61)
              goto LABEL_516;
            v265 = *(_QWORD *)(v15 + 8);
            v266 = *(_QWORD *)(v265 + 2816);
            v267 = v266 >= *(unsigned int *)(v265 + 2784)
                 ? sub_22F162D2C(v265, 1u)
                 : *(_QWORD *)(v265 + 2776) + 24 * v266;
            if (*(_WORD *)(v267 + 16) == 20)
              goto LABEL_516;
            v250 = *(unsigned __int16 *)(v15 + 32);
          }
          if (v250 != 3)
          {
            v226 = *(_QWORD *)(v15 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v226 + 56) + 1) & 0x40) == 0)
              goto LABEL_405;
            goto LABEL_411;
          }
LABEL_516:
          v18 = sub_22E85305C(v15, 0, v210, 0, 0);
          goto LABEL_3;
        }
        if ((sub_22E88B7AC(v15) & 1) != 0)
          return 1;
        if (*(_WORD *)(v15 + 32) == 5)
          goto LABEL_329;
        return sub_22E838554(v15, v14, v13, 0, 0, 0);
      case 7:
        v52 = sub_22EB261F0(*(_QWORD *)(a1 + 88), v16, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888));
        goto LABEL_49;
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        v52 = sub_22EB25910(*(_QWORD *)(a1 + 88), v16, *(_QWORD **)(*(_QWORD *)(a1 + 88) + 12888));
        goto LABEL_49;
      case 13:
      case 14:
      case 16:
      case 17:
      case 18:
        v19 = 1;
        v51 = sub_22E83E898(a1, 1);
        goto LABEL_168;
      case 19:
        v78 = **(_QWORD **)(*(_QWORD *)(a1 + 8) + 56);
        if ((v78 & 0x200) != 0)
        {
          if ((v78 & 0x4000) == 0)
          {
            v18 = sub_22F2E702C(a1);
            goto LABEL_3;
          }
          v287 = sub_22F2E7208(a1);
          if (v287)
          {
LABEL_4:
            v19 = 1;
            goto LABEL_5;
          }
          if (v10)
            *(_BYTE *)v10 = 1;
        }
        else if ((v78 & 0x4000) == 0)
        {
LABEL_113:
          v10 = 1;
          *a4 = 1;
          return v10;
        }
        v18 = sub_22E852D38(v15);
        goto LABEL_3;
      case 21:
        LODWORD(v312) = 0;
        if (a2 >= 2)
        {
          if ((_DWORD)a2 != 2)
            goto LABEL_257;
          v83 = 1;
        }
        else
        {
          v83 = 4;
        }
        LODWORD(v312) = v83;
LABEL_257:
        *(_QWORD *)v297 = 0;
        LODWORD(v288) = 0;
        v10 = sub_22E83D470(a1, (int *)&v312, 0, a5 == 2, (unint64_t *)v297, (int *)&v288);
        v287 = v10;
        if ((v11 & 1) != 0 || (_DWORD)v312 == 4)
          return v10;
        goto LABEL_4;
      case 27:
        if (a7)
          *a7 = 1;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v16);
        v84 = *(_DWORD *)(v15 + 40);
        sub_22E9B4418(v17, *(_QWORD *)(v15 + 88), *(_DWORD *)(v15 + 16), 27, v84);
        v85 = sub_22E838554(v15, 0, 1, 0, 0, 0);
        v10 = v85;
        if ((v85 & 1) != 0)
          return v10;
        v86 = v85 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)v297 = v85 & 0xFFFFFFFFFFFFFFFELL;
        v10 = sub_22EB2941C(*(_QWORD **)(v15 + 88), *(_QWORD *)(*(_QWORD *)(v15 + 88) + 12888), v84, 4, v85 & 0xFFFFFFFFFFFFFFFELL);
        v287 = v10;
        if ((v10 & 1) == 0)
          return v10;
        v87 = *(_QWORD *)(v15 + 88);
        v88 = *(_DWORD *)(v15 + 16);
        sub_22F0D60E4(v86);
        v33 = v89;
        v34 = (unint64_t *)v297;
        v67 = v87;
        v68 = v88;
        return sub_22F32D6EC(v67, v68, v33, v34, 1, 0);
      case 28:
        if (a7)
          *a7 = 1;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v16);
        if (*(_WORD *)(v15 + 32) != 5)
        {
          sub_22E884578(v15, (int *)v16, 15, (uint64_t)v297);
          v157 = *(unsigned __int8 **)v297;
          if (!*(_QWORD *)v297)
          {
            v157 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v297[8]);
            *(_QWORD *)v297 = v157;
          }
          v157[*v157 + 1] = 4;
          v158 = *(_QWORD *)v297;
          v159 = **(_BYTE **)v297;
          **(_BYTE **)v297 = v159 + 1;
          v58 = v158 + 8 * v159;
          v59 = 5;
          goto LABEL_53;
        }
        if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 88) + 12888) + 24))
        {
          sub_22E884578(v15, (int *)v16, 1425, (uint64_t)v297);
          goto LABEL_54;
        }
        v255 = *(_DWORD *)(v15 + 40);
        v256 = *(_QWORD *)(v15 + 96);
        *(_DWORD *)(v256 + 312) = v255;
        *(_DWORD *)(v256 + 316) = 1824;
        if (*(char *)(v256 + 311) < 0)
        {
          **(_BYTE **)(v256 + 288) = 0;
          *(_QWORD *)(v256 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v256 + 288) = 0;
          *(_BYTE *)(v256 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v282, v256);
        sub_22E3BB0B8((uint64_t)v282);
        v257 = *(unsigned __int16 *)(v15 + 32);
        if ((v257 - 7) >= 6)
        {
          v258 = 0;
          if ((v257 - 13) >= 6 && v257 != 1)
            v258 = *(_QWORD *)(v15 + 24);
        }
        else
        {
          v258 = 0;
        }
        v264 = sub_22EC67D70(*(_QWORD **)(v15 + 88), v258, *(_DWORD *)(v15 + 16), 0);
        v287 = sub_22F32F628(*(_QWORD *)(v15 + 88), v255, *(_DWORD *)(v15 + 16), v264);
        *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
        sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
        v19 = 0;
        goto LABEL_5;
      case 30:
      case 32:
      case 35:
      case 39:
      case 40:
      case 199:
      case 202:
        if (a7)
          *a7 = 1;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v16);
        v28 = *(unsigned int *)(v15 + 40);
        sub_22E9B4418(v17, *(_QWORD *)(v15 + 88), *(_DWORD *)(v15 + 16), v8, *(_DWORD *)(v15 + 40));
        v29 = sub_22E838554(v15, 0, 0, 0, 0, 0);
        v10 = v29;
        if ((v29 & 1) != 0)
          return v10;
        v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)v297 = v29 & 0xFFFFFFFFFFFFFFFELL;
        v10 = sub_22EB48C3C(*(_QWORD **)(v15 + 88), *(_QWORD *)(*(_QWORD *)(v15 + 88) + 12888), v28, v8, v29 & 0xFFFFFFFFFFFFFFFELL);
        v287 = v10;
        if ((v10 & 1) == 0)
          return v10;
        v31 = *(_QWORD *)(v15 + 88);
        sub_22F0D60E4(v30);
        v33 = v32;
        v34 = (unint64_t *)v297;
        goto LABEL_76;
      case 33:
      case 37:
        if (a7)
          *a7 = 1;
        *(_OWORD *)v297 = *(_OWORD *)v16;
        *(_QWORD *)&v297[16] = *(_QWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v16);
        v28 = *(unsigned int *)v297;
        sub_22E9B4418(v17, *(_QWORD *)(v15 + 88), *(_DWORD *)(v15 + 16), *(unsigned __int16 *)&v297[16], *(int *)v297);
        v64 = sub_22E839DA4(v15, (**(_DWORD **)(*(_QWORD *)(v15 + 8) + 56) >> 8) & 1, 0, v7, 0, 0, 0);
        v287 = v64;
        if (*v7)
        {
          sub_22F2E56C0(v15, (unint64_t)v297);
          return 1;
        }
        v10 = v64;
        if ((v64 & 1) == 0)
        {
          v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
          v312 = v64 & 0xFFFFFFFFFFFFFFFELL;
          v10 = sub_22EB48C3C(*(_QWORD **)(v15 + 88), *(_QWORD *)(*(_QWORD *)(v15 + 88) + 12888), v28, v8, v64 & 0xFFFFFFFFFFFFFFFELL);
          v287 = v10;
          if ((v10 & 1) != 0)
          {
            v31 = *(_QWORD *)(v15 + 88);
            sub_22F0D60E4(v65);
            v33 = v66;
            v34 = &v312;
LABEL_76:
            v67 = v31;
            v68 = v28;
            return sub_22F32D6EC(v67, v68, v33, v34, 1, 0);
          }
        }
        return v10;
      case 55:
        v18 = sub_22F2E642C(a1);
        goto LABEL_3;
      case 71:
        if ((sub_22E88B7AC(a1) & 1) != 0)
          return 1;
        if (*(_WORD *)(v15 + 32) != 71)
          return sub_22E838554(v15, v14, v13, v12, v11, v10);
        *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
        sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
        v72 = *(_DWORD *)(v15 + 40);
        v90 = *(unsigned __int16 *)(v15 + 32);
        if (v90 == 132)
        {
          if (v10)
            *(_BYTE *)v10 = 1;
          a1 = v15;
          v73 = 1;
LABEL_94:
          v51 = sub_22E848018(a1, v73, v72);
        }
        else
        {
          if (v90 != 140)
          {
            v218 = *(_QWORD *)(v15 + 96);
            *(_DWORD *)(v218 + 312) = v72;
            *(_DWORD *)(v218 + 316) = 1499;
            if (*(char *)(v218 + 311) < 0)
            {
              **(_BYTE **)(v218 + 288) = 0;
              *(_QWORD *)(v218 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v218 + 288) = 0;
              *(_BYTE *)(v218 + 311) = 0;
            }
            sub_22E78E558((uint64_t)v279, v218);
            v50 = v279;
            goto LABEL_176;
          }
          if (v10)
            *(_BYTE *)v10 = 1;
          a1 = v15;
          v74 = 1;
LABEL_98:
          v51 = sub_22F2E79C8(a1, v74, v72);
        }
LABEL_167:
        v19 = 0;
LABEL_168:
        v287 = v51;
        goto LABEL_5;
      case 72:
        if (a7)
          *a7 = 1;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v16);
        return sub_22E851A7C(v15, *(_DWORD *)(v15 + 40));
      case 76:
      case 79:
      case 84:
      case 88:
      case 93:
      case 94:
      case 95:
      case 96:
      case 100:
      case 101:
      case 108:
      case 109:
      case 128:
      case 152:
      case 156:
      case 159:
      case 160:
      case 176:
      case 177:
      case 197:
      case 198:
      case 200:
      case 207:
      case 335:
      case 336:
      case 337:
      case 338:
      case 339:
      case 340:
      case 341:
      case 342:
      case 343:
      case 344:
      case 345:
      case 346:
      case 355:
      case 358:
      case 359:
      case 380:
      case 407:
        goto LABEL_173;
      case 102:
      case 158:
      case 185:
      case 334:
      case 353:
        goto LABEL_145;
      case 113:
        if ((**(_BYTE **)(*(_QWORD *)(a1 + 8) + 56) & 2) == 0)
        {
          sub_22E884578(a1, (int *)(a1 + 16), 1791, (uint64_t)v297);
          v92 = off_24FCAD0E8[*(unsigned __int16 *)(v15 + 32)];
          v93 = *(unsigned __int8 **)v297;
          if (!*(_QWORD *)v297)
          {
            v93 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v297[8]);
            *(_QWORD *)v297 = v93;
          }
          v93[*v93 + 1] = 1;
          v94 = *(_QWORD *)v297;
          v95 = **(_BYTE **)v297;
          **(_BYTE **)v297 = v95 + 1;
          *(_QWORD *)(v94 + 8 * v95 + 16) = v92;
          sub_22E3BB0B8((uint64_t)v297);
        }
LABEL_145:
        if (v10)
          *(_BYTE *)v10 = 1;
        v295 = *(_OWORD *)v16;
        v296 = *(_QWORD *)(v16 + 16);
        *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
        sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
        LODWORD(v7) = (unsigned __int16)v296;
        if (*(_WORD *)(v15 + 32) == 26 && (unsigned __int16)v296 == 102)
        {
          *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
          sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
          v96 = *(unsigned __int16 *)(v15 + 32);
          if (v96 == 5)
          {
            v130 = *(unsigned int *)(v15 + 40);
            v97 = *(_QWORD *)(v15 + 24);
            *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
            sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
            v98 = *(unsigned int *)(v15 + 40);
            v131 = sub_22F141A3C(v130, 0, *(_QWORD **)(*(_QWORD *)(v15 + 8) + 88), *(_DWORD **)(*(_QWORD *)(v15 + 8) + 56));
            v99 = sub_22F141A3C(v98, 0, *(_QWORD **)(*(_QWORD *)(v15 + 8) + 88), *(_DWORD **)(*(_QWORD *)(v15 + 8) + 56));
            v132 = *(_QWORD *)(v15 + 96);
            *(_DWORD *)(v132 + 312) = v131;
            *(_DWORD *)(v132 + 316) = 1688;
            if (*(char *)(v132 + 311) < 0)
            {
              **(_BYTE **)(v132 + 288) = 0;
              *(_QWORD *)(v132 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v132 + 288) = 0;
              *(_BYTE *)(v132 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v288, v132);
            v133 = (unsigned __int8 *)v288;
            if (!(_QWORD)v288)
            {
              v133 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v288 + 1));
              *(_QWORD *)&v288 = v133;
            }
            v133[*v133 + 1] = 5;
            v134 = v288;
            v135 = *(unsigned __int8 *)v288;
            *(_BYTE *)v288 = v135 + 1;
            *(_QWORD *)(v134 + 8 * v135 + 16) = v97;
            v297[20] = 0;
            *(_QWORD *)&v297[12] = 0;
            *(_QWORD *)&v297[32] = 0;
            *(_QWORD *)&v297[40] = 0x100000000000000;
            *(_QWORD *)v297 = v131 | ((unint64_t)v131 << 32);
            v297[8] = 0;
            *(_QWORD *)&v297[24] = 40;
            LOBYTE(v298) = 0;
            sub_22E6D82D0((uint64_t *)&v288, v297);
            v313[12] = 0;
            *(_QWORD *)&v313[4] = 0;
            v315 = 0x100000000000000;
            v314 = 0;
            v312 = v99 | ((unint64_t)v99 << 32);
            v313[0] = 0;
            *(_QWORD *)&v313[16] = 41;
            LOBYTE(v316) = 0;
            sub_22E6D82D0((uint64_t *)&v288, &v312);
            if (SHIBYTE(v315) < 0)
              operator delete(*(void **)&v313[16]);
            if ((v297[47] & 0x80000000) != 0)
              operator delete(*(void **)&v297[24]);
            sub_22E3BB0B8((uint64_t)&v288);
          }
          else
          {
            if (v96 != 21)
            {
              sub_22E884578(v15, (int *)v16, 1740, (uint64_t)v297);
              sub_22E3BB0B8((uint64_t)v297);
              goto LABEL_265;
            }
            *(_QWORD *)v297 = v15 + 944;
            v297[8] = *(_BYTE *)(v15 + 944);
            *(_BYTE *)(v15 + 944) = 1;
            *(_QWORD *)&v297[16] = v15;
            *(_DWORD *)&v297[24] = 1441813;
            strcpy(&v297[28], ">");
            *(_QWORD *)&v297[40] = 0;
            *(_QWORD *)&v298 = 0;
            *(_QWORD *)&v297[32] = sub_22E80F720;
            sub_22E811DE8((uint64_t)v297);
            if (*(_WORD *)(v15 + 32) == 5)
            {
              v97 = *(_QWORD *)(v15 + 24);
              *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
              sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
              v98 = *(unsigned int *)(v15 + 40);
              sub_22E811E8C((uint64_t)v297);
              v99 = DWORD1(v298);
              if (!DWORD1(v298))
                v99 = sub_22F141A3C(v98, 0, *(_QWORD **)(*(_QWORD *)(v15 + 8) + 88), *(_DWORD **)(*(_QWORD *)(v15 + 8) + 56));
            }
            else
            {
              sub_22E884578(v15, (int *)v16, 1518, (uint64_t)&v312);
              sub_22E3BB0B8((uint64_t)&v312);
              LOWORD(v288) = 22;
              sub_22E885940(v15, (unsigned __int16 *)&v288, 1, 1);
              LODWORD(v98) = 0;
              v97 = 0;
              v99 = 0;
            }
            **(_BYTE **)v297 = v297[8];
          }
          if (v97)
          {
            v162 = *(_QWORD *)(v15 + 88);
            sub_22EB4DECC(v162, 0, 0, 3);
            v101 = sub_22EE742C0(*(_QWORD **)(v15 + 88), *(uint64_t **)(*(_QWORD *)(v15 + 88) + 12888), v295, v97, v98, v99);
            v148 = v162;
            goto LABEL_264;
          }
LABEL_265:
          v101 = 1;
LABEL_266:
          v19 = 0;
          v287 = v101;
LABEL_5:
          v10 = v287;
          if ((_DWORD)v14 != 2)
          {
            if ((v19 & 1) != 0)
            {
LABEL_36:
              v43 = v286;
              *(_OWORD *)v17 = v285;
              *(_OWORD *)(v17 + 16) = v43;
              v10 = sub_22E8385C0((_BYTE *)v15, v10);
              v287 = v10;
              v44 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 56);
              if ((*(_DWORD *)(v44 + 52) & 0x40000000) == 0)
                return v10;
              v45 = sub_22F420564(*(_QWORD *)(v15 + 88) + 24, (uint64_t)"__cl_clang_function_pointers", 28, v44);
              v10 = v287;
              if (v45)
                return v10;
              v46 = v287 & 0xFFFFFFFFFFFFFFFELL;
              if ((v287 & 0xFFFFFFFFFFFFFFFELL) == 0)
                return v10;
              v47 = *(_QWORD *)(v46 + 8);
              if (v47 < 0x10
                || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0)
                                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                                    + 16)
                 - 25 > 1)
              {
                return v10;
              }
              sub_22EFF605C(v46);
              v48 = *(_QWORD *)(v15 + 96);
              *(_DWORD *)(v48 + 312) = v49;
              *(_DWORD *)(v48 + 316) = 1684;
              if (*(char *)(v48 + 311) < 0)
              {
                **(_BYTE **)(v48 + 288) = 0;
                *(_QWORD *)(v48 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v48 + 288) = 0;
                *(_BYTE *)(v48 + 311) = 0;
              }
              sub_22E78E558((uint64_t)v277, v48);
              v50 = v277;
              goto LABEL_176;
            }
            if ((v287 & 1) != 0)
              return v10;
            v20 = *(unsigned __int16 *)(v15 + 32);
            if (v20 > 0x25)
              return v10;
            if (((1 << v20) & 0x2200280000) != 0)
            {
              if ((*(_WORD *)(v15 + 34) & 1) != 0)
                return v10;
              goto LABEL_27;
            }
            if (((1 << v20) & 0x1002000000) != 0)
            {
LABEL_27:
              v35 = *(_QWORD *)(v15 + 96);
              *(_DWORD *)(v35 + 312) = *(_DWORD *)(v15 + 16);
              *(_DWORD *)(v35 + 316) = 1691;
              if (*(char *)(v35 + 311) < 0)
              {
                **(_BYTE **)(v35 + 288) = 0;
                *(_QWORD *)(v35 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v35 + 288) = 0;
                *(_BYTE *)(v35 + 311) = 0;
              }
              sub_22E78E558((uint64_t)&v288, v35);
              v36 = *(unsigned __int16 *)(v15 + 32);
              v37 = (unsigned __int8 *)v288;
              if (!(_QWORD)v288)
              {
                v37 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v288 + 1));
                *(_QWORD *)&v288 = v37;
              }
              v37[*v37 + 1] = 4;
              v38 = v288;
              v39 = *(unsigned __int8 *)v288;
              *(_BYTE *)v288 = v39 + 1;
              *(_QWORD *)(v38 + 8 * v39 + 16) = v36;
              sub_22F0D4E74(v287 & 0xFFFFFFFFFFFFFFFELL);
              sub_22E4D6448(v38 + 336, v40, 1);
              sub_22F0D5A50(v287 & 0xFFFFFFFFFFFFFFFELL);
              *(_QWORD *)&v297[12] = 0;
              v297[20] = 0;
              *(_OWORD *)&v297[32] = 0uLL;
              *(_QWORD *)v297 = v41 | ((unint64_t)v41 << 32);
              v297[8] = 0;
              *(_QWORD *)&v297[24] = 40;
              v297[47] = 1;
              LOBYTE(v298) = 0;
              sub_22E6D82D0((uint64_t *)&v288, v297);
              v42 = sub_22F141A3C(*(unsigned int *)(v15 + 40), 0, *(_QWORD **)(*(_QWORD *)(v15 + 8) + 88), *(_DWORD **)(*(_QWORD *)(v15 + 8) + 56));
              *(_QWORD *)&v313[4] = 0;
              v313[12] = 0;
              v315 = 0x100000000000000;
              v314 = 0;
              v312 = v42 | ((unint64_t)v42 << 32);
              v313[0] = 0;
              *(_QWORD *)&v313[16] = 41;
              LOBYTE(v316) = 0;
              sub_22E6D82D0((uint64_t *)&v288, &v312);
              if (SHIBYTE(v315) < 0)
                operator delete(*(void **)&v313[16]);
              if ((v297[47] & 0x80000000) != 0)
                operator delete(*(void **)&v297[24]);
              sub_22E3BB0B8((uint64_t)&v288);
              v10 = v287;
              goto LABEL_36;
            }
          }
          return v10;
        }
        if ((unsigned __int16)v296 == 158 || (unsigned __int16)v296 == 113)
        {
          v22 = *(_QWORD *)(v15 + 96);
          *(_DWORD *)(v22 + 312) = v295;
          *(_DWORD *)(v22 + 316) = 1924;
          if (*(char *)(v22 + 311) < 0)
          {
            **(_BYTE **)(v22 + 288) = 0;
            *(_QWORD *)(v22 + 296) = 0;
          }
          else
          {
LABEL_523:
            *(_BYTE *)(v22 + 288) = 0;
            *(_BYTE *)(v22 + 311) = 0;
          }
          sub_22E78E558((uint64_t)v297, v22);
          sub_22E3BB0B8((uint64_t)v297);
        }
        v100 = *(_QWORD *)(v15 + 88);
        sub_22EB4DECC(v100, 0, 0, 3);
        v294 = 0;
        *(_QWORD *)&v288 = 0;
        v293 = 0;
        v101 = sub_22E83F3D8(v15, (unsigned int *)&v295, &v294, (unint64_t *)&v288, &v293);
        if ((int)v7 > 184)
        {
          if ((_DWORD)v7 == 185)
          {
            v102 = 2;
            goto LABEL_226;
          }
          if ((_DWORD)v7 == 334)
          {
            v102 = 8;
            goto LABEL_226;
          }
        }
        else
        {
          v102 = 1;
          if ((_DWORD)v7 == 113 || (_DWORD)v7 == 158)
          {
LABEL_226:
            if (v294)
            {
              v147 = sub_22F32DA5C(*(_QWORD **)(v15 + 88), v295, v102, 1, v288, v293);
            }
            else
            {
              if ((_DWORD)v7 == 158 || (_DWORD)v7 == 113)
              {
                v142 = *(_QWORD *)(v15 + 96);
                *(_DWORD *)(v142 + 312) = v295;
                *(_DWORD *)(v142 + 316) = 1786;
                if (*(char *)(v142 + 311) < 0)
                {
                  **(_BYTE **)(v142 + 288) = 0;
                  *(_QWORD *)(v142 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v142 + 288) = 0;
                  *(_BYTE *)(v142 + 311) = 0;
                }
                sub_22E78E558((uint64_t)&v312, v142);
                v143 = *((_QWORD *)&v295 + 1);
                v144 = (unsigned __int8 *)v312;
                if (!v312)
                {
                  v144 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v313);
                  v312 = (unint64_t)v144;
                }
                v144[*v144 + 1] = 5;
                v145 = v312;
                v146 = *(unsigned __int8 *)v312;
                *(_BYTE *)v312 = v146 + 1;
                *(_QWORD *)(v145 + 8 * v146 + 16) = v143;
                sub_22E3BB0B8((uint64_t)&v312);
              }
              if ((v101 & 1) != 0)
                goto LABEL_238;
              if ((v101 & 0xFFFFFFFFFFFFFFFELL) == 0)
              {
                v101 = 1;
                goto LABEL_238;
              }
              v147 = sub_22EB28F24(*(_QWORD **)(v15 + 88), v101 & 0xFFFFFFFFFFFFFFFELL, v295, v102);
            }
            v101 = v147;
LABEL_238:
            v148 = v100;
LABEL_264:
            sub_22EB48E64(v148);
            goto LABEL_266;
          }
        }
        if ((_DWORD)v7 == 353)
          v102 = 9;
        else
          v102 = 0;
        goto LABEL_226;
      case 117:
        v18 = sub_22F2E5720(a1);
        goto LABEL_3;
      case 122:
      case 204:
      case 205:
      case 208:
      case 209:
      case 210:
      case 211:
        v52 = sub_22F32D8C8(*(_QWORD *)(a1 + 88), *(_DWORD *)(a1 + 16), v8);
LABEL_49:
        v287 = v52;
        *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
        sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
        goto LABEL_4;
      case 123:
      case 124:
        v69 = *(_QWORD *)(a1 + 88);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v16);
        v18 = sub_22EB5387C(v69, *(_DWORD *)(v15 + 40), v8);
        goto LABEL_3;
      case 131:
      case 133:
      case 145:
      case 146:
      case 348:
      case 352:
        if (a7)
          *a7 = 1;
        v18 = sub_22E845834(a1);
        goto LABEL_3;
      case 132:
        if (a7)
          *a7 = 1;
        v72 = *(_DWORD *)(a1 + 16);
        v73 = 0;
        goto LABEL_94;
      case 136:
      case 150:
        v18 = sub_22E8468C8(a1);
        goto LABEL_3;
      case 140:
        if (a7)
          *a7 = 1;
        v72 = *(_DWORD *)(a1 + 16);
        v74 = 0;
        goto LABEL_98;
      case 141:
        goto LABEL_340;
      case 148:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v16);
        v18 = (uint64_t)sub_22EBBC0DC(*(_QWORD **)(v15 + 88), *(_DWORD *)(v15 + 40));
        goto LABEL_3;
      case 153:
        if (a7)
          *a7 = 1;
        v18 = sub_22E845D78(a1);
        goto LABEL_3;
      case 162:
      case 311:
        if ((sub_22E88B7AC(a1) & 1) != 0)
          return 1;
        return sub_22E838554(v15, v14, v13, v12, v11, v10);
      case 163:
        if (a7)
          *a7 = 1;
        sub_22E884578(a1, (int *)(a1 + 16), 1937, (uint64_t)v278);
        sub_22E3BB0B8((uint64_t)v278);
        *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
        sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
        v77 = *(_DWORD *)(v15 + 40);
        *(_QWORD *)v297 = v15 + 944;
        v297[8] = *(_BYTE *)(v15 + 944);
        *(_BYTE *)(v15 + 944) = 1;
        *(_QWORD *)&v297[16] = v15;
        *(_DWORD *)&v297[24] = 1441813;
        strcpy(&v297[28], ">");
        *(_QWORD *)&v297[40] = 0;
        *(_QWORD *)&v298 = 0;
        *(_QWORD *)&v297[32] = sub_22E80F720;
        if ((sub_22E88C650((uint64_t)v297, 1510, "noexcept", 0) & 1) != 0)
        {
          **(_BYTE **)v297 = v297[8];
          return 1;
        }
        v149 = *(_QWORD *)(v15 + 88);
        LODWORD(v295) = 0;
        v312 = 0;
        LODWORD(v293) = 3;
        *(_QWORD *)&v288 = *(unsigned int *)(v149 + 1704);
        sub_22EB4DDB8(v149 + 3688, (int *)&v295, (int *)&v288, (__int16 *)(v149 + 1693), (uint64_t *)&v312, (int *)&v293);
        v150 = *(unsigned int *)(v149 + 3696);
        v151 = v150 - 2;
        v152 = *(_QWORD *)(v149 + 3688);
        v153 = *(_DWORD *)(v152 + 576 * (v150 - 2));
        if (v153 == 5)
        {
          *(_BYTE *)(v152 + 576 * v150 - 4) = *(_BYTE *)(v152 + 576 * v151 + 572);
          v154 = 1;
        }
        else if (v153 == 2)
        {
          *(_BYTE *)(v152 + 576 * v150 - 4) = 1;
          v154 = *(_BYTE *)(v152 + 576 * v151 + 573) != 0;
        }
        else
        {
          v154 = 0;
          *(_BYTE *)(v152 + 576 * v150 - 4) = 0;
        }
        v155 = v152 + 576 * v150;
        *(_BYTE *)(v155 - 3) = v154;
        *(_WORD *)(v149 + 1693) = 0;
        if (*(_DWORD *)(v149 + 1848))
        {
          llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v149 + 1776), (llvm::SmallPtrSetImplBase *)(v155 - 560));
          sub_22EAEAE08(v149 + 1840, (uint64_t *)(v155 - 496));
        }
        v156 = sub_22E83766C(v15, 0);
        v287 = sub_22E83778C(v15, v156, 1);
        sub_22E811E8C((uint64_t)v297);
        if ((v287 & 1) == 0)
          v287 = sub_22F3321E4(*(_QWORD *)(v15 + 88), v77, v287 & 0xFFFFFFFFFFFFFFFELL, SDWORD1(v298));
        sub_22EB48E64(v149);
        v19 = 0;
        **(_BYTE **)v297 = v297[8];
        goto LABEL_5;
      case 164:
        sub_22E884578(a1, (int *)(a1 + 16), 1939, (uint64_t)v284);
        sub_22E3BB0B8((uint64_t)v284);
        v91 = *(_QWORD *)(v15 + 88);
        *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
        sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
        v18 = sub_22EBBA634(v91, *(_DWORD *)(v15 + 40));
        goto LABEL_3;
      case 168:
        v51 = sub_22E848694(a1);
        goto LABEL_167;
      case 169:
        if (a7)
          *a7 = 1;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v16);
        v70 = *(_DWORD *)(v15 + 40);
        v10 = sub_22E838554(v15, 0, 0, 0, 0, 0);
        if ((v10 & 1) != 0)
          return v10;
        return sub_22E9F9E30(*(unsigned int **)(v15 + 88), *(_QWORD *)(*(_QWORD *)(v15 + 88) + 12888), v70, v10 & 0xFFFFFFFFFFFFFFFELL);
      case 184:
        v225 = *(_QWORD *)(a1 + 88);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v16);
        v18 = sub_22F32FA20(v225, *(_DWORD *)(v15 + 40));
        goto LABEL_3;
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 195:
      case 333:
      case 387:
        if (a7)
          *a7 = 1;
        v21 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v16);
        if (*(_WORD *)(v15 + 32) != 21)
        {
          sub_22E884578(v15, (int *)v16, 16, (uint64_t)v297);
          v53 = *(unsigned __int8 **)v297;
          if (!*(_QWORD *)v297)
          {
            v53 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v297[8]);
            *(_QWORD *)v297 = v53;
          }
          v53[*v53 + 1] = 5;
          v54 = *(_QWORD *)v297;
          v55 = **(_BYTE **)v297;
          **(_BYTE **)v297 = v55 + 1;
          *(_QWORD *)(v54 + 8 * v55 + 16) = v21;
          *(_BYTE *)(v54 + (v55 + 1) + 1) = 4;
          v56 = *(_QWORD *)v297;
          v57 = **(_BYTE **)v297;
          **(_BYTE **)v297 = v57 + 1;
          v58 = v56 + 8 * v57;
          v59 = 21;
LABEL_53:
          *(_QWORD *)(v58 + 16) = v59;
LABEL_54:
          v50 = v297;
          goto LABEL_176;
        }
        v17 = *(unsigned int *)(v15 + 40);
        v312 = v15 + 944;
        v313[0] = *(_BYTE *)(v15 + 944);
        *(_BYTE *)(v15 + 944) = 1;
        *(_QWORD *)&v313[8] = v15;
        *(_DWORD *)&v313[16] = 1441813;
        strcpy(&v313[20], ">");
        *(_QWORD *)&v316 = 0;
        v314 = sub_22E80F720;
        v315 = 0;
        sub_22E811DE8((uint64_t)&v312);
        switch(v8)
        {
          case 187:
            v10 = sub_22E83766C(v15, 0);
            if ((v10 & 1) != 0)
            {
              *(_WORD *)v297 = 22;
              goto LABEL_436;
            }
            if (sub_22E8847B4(v15, 0x41u, 15, "", 0))
              goto LABEL_434;
            v163 = sub_22E83766C(v15, 0);
            if ((v163 & 1) != 0)
            {
              *(_WORD *)v297 = 22;
              sub_22E885940(v15, (unsigned __int16 *)v297, 1, 1);
              v10 = v163;
              goto LABEL_437;
            }
            if (sub_22E8847B4(v15, 0x41u, 15, "", 0))
              goto LABEL_434;
            v164 = sub_22E83766C(v15, 0);
            if ((v164 & 1) != 0)
            {
              *(_WORD *)v297 = 22;
              sub_22E885940(v15, (unsigned __int16 *)v297, 1, 1);
              v10 = v164;
              goto LABEL_437;
            }
            if (*(_WORD *)(v15 + 32) == 22)
            {
              v165 = *(_QWORD *)(v15 + 88);
              v166 = sub_22E80F720(v15);
              v26 = sub_22EB4A774(v165, v17, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), v163 & 0xFFFFFFFFFFFFFFFELL, v164 & 0xFFFFFFFFFFFFFFFELL, v166);
              goto LABEL_18;
            }
LABEL_300:
            sub_22E884578(v15, (int *)v16, 15, (uint64_t)v297);
            v201 = *(unsigned __int8 **)v297;
            if (!*(_QWORD *)v297)
            {
              v201 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v297[8]);
              *(_QWORD *)v297 = v201;
            }
            v201[*v201 + 1] = 4;
            v202 = *(_QWORD *)v297;
            v203 = **(_BYTE **)v297;
            **(_BYTE **)v297 = v203 + 1;
            *(_QWORD *)(v202 + 8 * v203 + 16) = 22;
            sub_22E3BB0B8((uint64_t)v297);
            goto LABEL_303;
          case 188:
            v167 = *(_DWORD *)(v15 + 16);
            v168 = sub_22E80FC30(v15, 0, 5, 3, 0, 0, 0);
            if (v169)
              goto LABEL_434;
            v170 = v168;
            if (sub_22E8847B4(v15, 0x41u, 15, "", 0))
              goto LABEL_434;
            if (*(_WORD *)(v15 + 32) != 5)
            {
              sub_22E884578(v15, (int *)v16, 15, (uint64_t)v297);
              v235 = *(unsigned __int8 **)v297;
              if (!*(_QWORD *)v297)
              {
                v235 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v297[8]);
                *(_QWORD *)v297 = v235;
              }
              v235[*v235 + 1] = 4;
              v236 = *(_QWORD *)v297;
              v237 = **(_BYTE **)v297;
              **(_BYTE **)v297 = v237 + 1;
              *(_QWORD *)(v236 + 8 * v237 + 16) = 5;
              sub_22E3BB0B8((uint64_t)v297);
              goto LABEL_434;
            }
            *(_QWORD *)v297 = &v297[16];
            *(_QWORD *)&v297[8] = 0x400000000;
            v288 = 0uLL;
            v289[0] = 0;
            v10 = 1;
            v171 = sub_22E4EF088((uint64_t)v297, (unint64_t)&v288, 1);
            v172 = 0;
            v173 = *(_QWORD *)v297 + 24 * *(unsigned int *)&v297[8];
            v174 = *(_OWORD *)v171;
            *(_QWORD *)(v173 + 16) = *(_QWORD *)(v171 + 16);
            *(_OWORD *)v173 = v174;
            ++*(_DWORD *)&v297[8];
            v175 = *(_QWORD *)v297 + 24 * *(unsigned int *)&v297[8];
            *(_BYTE *)(v175 - 16) = 0;
            v176 = *(unsigned __int16 *)(v15 + 32);
            if ((v176 - 7) >= 6)
            {
              v172 = 0;
              if ((v176 - 13) >= 6 && v176 != 1)
                v172 = *(_QWORD *)(v15 + 24);
            }
            *(_QWORD *)(v175 - 8) = v172;
            *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
            sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
            v27 = 0;
            v177 = *(_DWORD *)(v15 + 40);
            v178 = *(_QWORD *)v297;
            *(_DWORD *)(*(_QWORD *)v297 + 24 * *(unsigned int *)&v297[8] - 20) = v177;
            *(_DWORD *)(v178 + 24 * *(unsigned int *)&v297[8] - 24) = v177;
            while (2)
            {
              while (2)
              {
                v179 = *(unsigned __int16 *)(v15 + 32);
                if (v179 == 25)
                {
                  v288 = 0uLL;
                  v289[0] = 0;
                  v180 = sub_22E4EF088((uint64_t)v297, (unint64_t)&v288, 1);
                  v181 = *(_QWORD *)v297 + 24 * *(unsigned int *)&v297[8];
                  v182 = *(_OWORD *)v180;
                  *(_QWORD *)(v181 + 16) = *(_QWORD *)(v180 + 16);
                  *(_OWORD *)v181 = v182;
                  ++*(_DWORD *)&v297[8];
                  *(_BYTE *)(*(_QWORD *)v297 + 24 * *(unsigned int *)&v297[8] - 16) = 0;
                  *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
                  sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
                  v183 = *(_QWORD *)v297;
                  *(_DWORD *)(*(_QWORD *)v297 + 24 * *(unsigned int *)&v297[8] - 24) = *(_DWORD *)(v15 + 40);
                  if (*(_WORD *)(v15 + 32) == 5)
                  {
                    *(_QWORD *)(v183 + 24 * *(unsigned int *)&v297[8] - 8) = *(_QWORD *)(v15 + 24);
                    *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 16);
                    sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
                    *(_DWORD *)(*(_QWORD *)v297 + 24 * *(unsigned int *)&v297[8] - 20) = *(_DWORD *)(v15 + 40);
                    continue;
                  }
                  sub_22E884578(v15, (int *)v16, 15, (uint64_t)&v288);
                  v260 = (unsigned __int8 *)v288;
                  if (!(_QWORD)v288)
                  {
                    v260 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v288 + 1));
                    *(_QWORD *)&v288 = v260;
                  }
                  v260[*v260 + 1] = 4;
                  v261 = v288;
                  v262 = *(unsigned __int8 *)v288;
                  *(_BYTE *)v288 = v262 + 1;
                  *(_QWORD *)(v261 + 8 * v262 + 16) = 5;
                  sub_22E3BB0B8((uint64_t)&v288);
                  LOWORD(v288) = 22;
                  v10 = 1;
                  sub_22E885940(v15, (unsigned __int16 *)&v288, 1, 1);
                  goto LABEL_476;
                }
                break;
              }
              if (v179 == 19)
              {
                if ((sub_22E827B60(v15) & 1) != 0)
                {
LABEL_476:
                  v259 = 0;
                  break;
                }
                v288 = 0uLL;
                v289[0] = 0;
                v184 = sub_22E4EF088((uint64_t)v297, (unint64_t)&v288, 1);
                v185 = *(_QWORD *)v297 + 24 * *(unsigned int *)&v297[8];
                v186 = *(_OWORD *)v184;
                *(_QWORD *)(v185 + 16) = *(_QWORD *)(v184 + 16);
                *(_OWORD *)v185 = v186;
                ++*(_DWORD *)&v297[8];
                *(_BYTE *)(*(_QWORD *)v297 + 24 * *(unsigned int *)&v297[8] - 16) = 1;
                *(_QWORD *)&v288 = v15 + 944;
                BYTE8(v288) = *(_BYTE *)(v15 + 944);
                *(_BYTE *)(v15 + 944) = 1;
                v289[0] = (void *)v15;
                LODWORD(v289[1]) = 1310739;
                WORD2(v289[1]) = 62;
                v291 = 0;
                v292 = 0;
                v290 = sub_22E80F788;
                sub_22E811DE8((uint64_t)&v288);
                *(_DWORD *)(*(_QWORD *)v297 + 24 * *(unsigned int *)&v297[8] - 24) = v292;
                v187 = sub_22E83766C(v15, 0);
                v188 = sub_22E83778C(v15, v187, 1);
                v27 = v188;
                if ((v188 & 1) == 0)
                {
                  *(_QWORD *)(*(_QWORD *)v297 + 24 * *(unsigned int *)&v297[8] - 8) = v188 & 0xFFFFFFFFFFFFFFFELL;
                  sub_22E811E8C((uint64_t)&v288);
                  *(_DWORD *)(*(_QWORD *)v297 + 24 * *(unsigned int *)&v297[8] - 20) = HIDWORD(v292);
                  *(_BYTE *)v288 = BYTE8(v288);
                  continue;
                }
                LOWORD(v295) = 22;
                sub_22E885940(v15, (unsigned __int16 *)&v295, 1, 1);
                v259 = 0;
                *(_BYTE *)v288 = BYTE8(v288);
                v10 = v27;
              }
              else
              {
                if (v179 == 22)
                {
                  sub_22E811E8C((uint64_t)&v312);
                  v27 = sub_22F32F79C(*(_QWORD *)(v15 + 88), *(_QWORD *)(*(_QWORD *)(v15 + 88) + 12888), v17, v167, v170, *(unsigned int **)v297, *(unsigned int *)&v297[8], SDWORD1(v316));
                }
                else
                {
                  sub_22E811E8C((uint64_t)&v312);
                  v27 = 1;
                }
                v259 = 1;
              }
              break;
            }
            if (*(_BYTE **)v297 != &v297[16])
              free(*(void **)v297);
            if ((v259 & 1) != 0)
              goto LABEL_19;
            goto LABEL_437;
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
            if (*(_WORD *)(v15 + 32) != 22)
              goto LABEL_296;
            v23 = dword_22F4615F4[(__int16)v8 - 189];
            v24 = *(_QWORD **)(v15 + 88);
            v25 = sub_22E80F720(v15);
            v26 = (uint64_t)sub_22EB4C338(v24, v23, v17, v25);
            goto LABEL_18;
          case 194:
            __break(1u);
            goto LABEL_523;
          case 195:
            v189 = sub_22E83766C(v15, 0);
            if (sub_22E8847B4(v15, 0x41u, 15, "", 0))
            {
              *(_WORD *)v297 = 22;
              v189 = 1;
              sub_22E885940(v15, (unsigned __int16 *)v297, 1, 1);
            }
            v190 = sub_22E80FC30(v15, 0, 5, 3, 0, 0, 0);
            if (*(_WORD *)(v15 + 32) != 22)
              goto LABEL_300;
            if (v189 & 1 | v191)
              goto LABEL_303;
            v192 = v190;
            v193 = *(_QWORD **)(v15 + 88);
            v194 = sub_22E80F720(v15);
            v26 = sub_22F32F9E0(v193, v17, v189 & 0xFFFFFFFFFFFFFFFELL, v192, v194);
            goto LABEL_18;
          default:
            if (v8 == 333)
            {
              v136 = sub_22E83766C(v15, 0);
              if ((v136 & 1) == 0 && !sub_22E8847B4(v15, 0x41u, 15, "", 0))
              {
                v137 = sub_22E80FC30(v15, 0, 5, 3, 0, 0, 0);
                if (!v138)
                {
                  if (*(_WORD *)(v15 + 32) == 22)
                  {
                    v139 = v137;
                    v140 = *(_QWORD **)(v15 + 88);
                    v141 = sub_22E80F720(v15);
                    v26 = sub_22F32DD64(v140, v136 & 0xFFFFFFFFFFFFFFFELL, v139, v17, v141);
LABEL_18:
                    v27 = v26;
LABEL_19:
                    if ((v27 & 1) == 0)
                    {
                      v10 = sub_22E8385C0((_BYTE *)v15, v27 & 0xFFFFFFFFFFFFFFFELL);
                      goto LABEL_437;
                    }
                    goto LABEL_303;
                  }
LABEL_296:
                  sub_22E884578(v15, (int *)v16, 15, (uint64_t)v297);
                  v198 = *(unsigned __int8 **)v297;
                  if (!*(_QWORD *)v297)
                  {
                    v198 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v297[8]);
                    *(_QWORD *)v297 = v198;
                  }
                  v198[*v198 + 1] = 4;
                  v199 = *(_QWORD *)v297;
                  v200 = **(_BYTE **)v297;
                  **(_BYTE **)v297 = v200 + 1;
                  *(_QWORD *)(v199 + 8 * v200 + 16) = 22;
                  sub_22E3BB0B8((uint64_t)v297);
                  *(_WORD *)v297 = 22;
LABEL_435:
                  v10 = 1;
LABEL_436:
                  sub_22E885940(v15, (unsigned __int16 *)v297, 1, 1);
LABEL_437:
                  *(_BYTE *)v312 = v313[0];
                  return v10;
                }
                goto LABEL_303;
              }
            }
            else
            {
              v195 = sub_22E83766C(v15, 0);
              if ((v195 & 1) == 0 && !sub_22E8847B4(v15, 0x41u, 15, "", 0))
              {
                v196 = sub_22E80FC30(v15, 0, 5, 3, 0, 0, 0);
                if (!v197)
                {
                  if (*(_WORD *)(v15 + 32) == 22)
                  {
                    v272 = v196;
                    v273 = *(_QWORD **)(v15 + 88);
                    v274 = sub_22E80F720(v15);
                    v26 = sub_22F32DEB8(v273, v195 & 0xFFFFFFFFFFFFFFFELL, v272, v17, v274);
                    goto LABEL_18;
                  }
                  goto LABEL_296;
                }
LABEL_303:
                v10 = 1;
                goto LABEL_437;
              }
            }
LABEL_434:
            *(_WORD *)v297 = 22;
            goto LABEL_435;
        }
      case 194:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
      case 240:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 246:
      case 247:
      case 248:
      case 249:
      case 251:
      case 254:
      case 255:
      case 256:
      case 257:
      case 258:
      case 259:
      case 260:
      case 261:
      case 262:
      case 263:
      case 264:
      case 265:
      case 266:
      case 267:
      case 268:
      case 269:
      case 270:
      case 271:
      case 272:
      case 273:
      case 274:
      case 275:
      case 276:
      case 277:
      case 280:
      case 281:
      case 282:
      case 283:
      case 284:
      case 285:
      case 286:
      case 287:
      case 288:
      case 289:
      case 290:
      case 291:
      case 292:
      case 293:
      case 299:
        sub_22E849674(a1);
        goto LABEL_3;
      case 196:
        if (a7)
          *a7 = 1;
        v75 = *(_QWORD *)(a1 + 96);
        ++*(_BYTE *)(v75 + 4);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v16);
        v76 = *(_DWORD *)(v15 + 40);
        v10 = sub_22E838554(v15, 0, 0, 0, 0, 0);
        if ((v10 & 1) == 0)
          v10 = sub_22EB2941C(*(_QWORD **)(v15 + 88), *(_QWORD *)(*(_QWORD *)(v15 + 88) + 12888), v76, 12, v10 & 0xFFFFFFFFFFFFFFFELL);
        --*(_BYTE *)(v75 + 4);
        return v10;
      case 252:
      case 253:
        if (a7)
          *a7 = 1;
        v18 = sub_22F2E85B0(a1);
        goto LABEL_3;
      case 278:
      case 279:
        if (a7)
          *a7 = 1;
        v18 = sub_22F2E83F8(a1);
        goto LABEL_3;
      case 296:
        v219 = 3;
        return sub_22F2E5528(a1, v219);
      case 297:
        v219 = 4;
        return sub_22F2E5528(a1, v219);
      case 298:
        v219 = 5;
        return sub_22F2E5528(a1, v219);
      case 300:
        v219 = 6;
        return sub_22F2E5528(a1, v219);
      case 301:
        v219 = 7;
        return sub_22F2E5528(a1, v219);
      case 376:
        if (a7)
          *a7 = 1;
        v18 = sub_22F2E7550(a1);
        goto LABEL_3;
      case 388:
        if (a7)
          *a7 = 1;
        v18 = sub_22F2E8B0C(a1);
        goto LABEL_3;
      case 389:
        v18 = sub_22E83E9D0(a1, *(_DWORD *)(a1 + 16));
        goto LABEL_3;
      case 390:
        v18 = sub_22F2E6318(a1);
        goto LABEL_3;
      case 392:
        if (a7)
          *a7 = 1;
        v18 = sub_22F2E5BFC(a1);
        goto LABEL_3;
      case 393:
        if (a7)
          *a7 = 1;
        v18 = sub_22F2E5DA8(a1);
        goto LABEL_3;
      case 394:
      case 395:
        if (a7)
          *a7 = 1;
        v18 = sub_22F2E5E9C(a1, v8 != 394);
        goto LABEL_3;
      case 396:
      case 397:
        if (a7)
          *a7 = 1;
        v18 = sub_22F2E5FB8(a1, v8 == 397);
        goto LABEL_3;
      case 398:
        if (a7)
          *a7 = 1;
        v18 = sub_22F2E6120(a1);
        goto LABEL_3;
      case 399:
        if ((sub_22E88B7AC(a1) & 1) != 0)
          return 1;
        if (*(_WORD *)(v15 + 32) != 399)
          goto LABEL_510;
        v127 = *(_QWORD *)(v15 + 8);
        v128 = *(_QWORD *)(v127 + 2816);
        if (v128 >= *(unsigned int *)(v127 + 2784))
          v129 = sub_22F162D2C(v127, 1u);
        else
          v129 = *(_QWORD *)(v127 + 2776) + 24 * v128;
        if (*(_WORD *)(v129 + 16) != 401 || *(_DWORD *)(*(_QWORD *)(v129 + 8) + 32) != 2)
        {
LABEL_340:
          v18 = sub_22E8438BC(v15, v13);
          goto LABEL_3;
        }
        memset(v297, 0, 32);
        sub_22E8408AC(v15, (uint64_t)v297, 0, 0, 0, 0, 0, 0, 0, 0);
LABEL_200:
        sub_22E881648(v15, (uint64_t)v297, 0);
        v10 = sub_22E839DA4(v15, v14, v13, v7, v12, v11, v10);
        if (*(_DWORD *)&v297[28])
          free(*(void **)&v297[16]);
        return v10;
      case 400:
        if (!sub_22E852BB0(a1))
        {
LABEL_173:
          v112 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 56);
          if ((*(_BYTE *)(v112 + 1) & 1) == 0 && (*(_BYTE *)(v112 + 136) & 2) == 0)
          {
            sub_22E884578(v15, (int *)v16, 1499, (uint64_t)v281);
            v50 = v281;
            goto LABEL_176;
          }
          if (v10)
            *(_BYTE *)v10 = 1;
          if (v8 == 152
            && ((sub_22E88B7AC(v15) & 1) != 0
             || !sub_22F31CD8C(*(_QWORD *)(v15 + 88), *(unsigned __int16 *)(v15 + 32))))
          {
            return 1;
          }
          v113 = (uint64_t (**)(uint64_t))&v297[32];
          *(_QWORD *)v297 = 0;
          memset(&v297[16], 0, 24);
          v114 = (uint64_t *)&v297[40];
          *(_QWORD *)&v297[40] = v15 + 960;
          v115 = (uint64_t *)&v298;
          v304 = 0;
          v298 = 0u;
          *(_OWORD *)v299 = 0u;
          memset(v300, 0, sizeof(v300));
          v301 = 0u;
          memset(v302, 0, sizeof(v302));
          v303 = 0;
          sub_22E847974(v15, (uint64_t)v297);
          v122 = *(unsigned __int16 *)(v15 + 32);
          if (v122 != 21)
          {
            if (v122 != 23 || (**(_QWORD **)(*(_QWORD *)(v15 + 8) + 56) & 0x200) == 0)
            {
              sub_22E884578(v15, (int *)v16, 1511, (uint64_t)&v312);
              v125 = *((_QWORD *)&v300[0] + 1);
              v126 = v312;
              if (!v312)
              {
                v126 = sub_22E3B8AAC(*(uint64_t *)v313);
                v312 = v126;
              }
              sub_22E4D6448(v126 + 336, v125, 1);
              sub_22E3BB0B8((uint64_t)&v312);
              if (DWORD1(v300[0]))
                free(v299[1]);
              sub_22E8D1BC4(*(uint64_t *)&v297[40], (uint64_t)&v297[40]);
              sub_22E80F94C((uint64_t *)&v298);
              sub_22E80F94C((uint64_t *)&v297[32]);
              return 1;
            }
            sub_22E884578(v15, (int *)v16, 1932, (uint64_t)v280);
            sub_22E3BB0B8((uint64_t)v280);
          }
          v287 = sub_22E846914(v15, v297, v116, v117, v118, v119, v120, v121);
          if (DWORD1(v300[0]))
            free(v299[1]);
          v123 = *(_QWORD *)&v297[40];
LABEL_189:
          sub_22E8D1BC4(v123, (uint64_t)v114);
          sub_22E80F94C(v115);
          v124 = (uint64_t *)v113;
          goto LABEL_190;
        }
        v108 = *(_QWORD *)(v15 + 24);
        *(_QWORD *)&v313[16] = 0;
        *(_QWORD *)&v313[8] = 0;
        v314 = 0;
        v315 = v15 + 960;
        v327 = 0;
        v316 = 0u;
        v317 = 0u;
        v318 = 0u;
        v319 = 0u;
        v320 = 0u;
        v321 = 0u;
        v322 = 0u;
        v323 = 0u;
        v324 = 0u;
        v325 = 0u;
        v109 = *(unsigned __int16 *)(v15 + 32) - 399;
        v111 = *(_DWORD *)(v15 + 16);
        v110 = *(_DWORD *)(v15 + 20);
        v326 = 0;
        DWORD2(v318) = v111;
        if (v109 > 0x28)
        {
          HIDWORD(v318) = v111;
          if (v110)
            goto LABEL_356;
        }
        else
        {
          if (v110)
          {
            HIDWORD(v318) = v110;
LABEL_356:
            if (v108)
            {
              *(_QWORD *)v313 = v108;
              v213 = 114688;
            }
            else
            {
              v110 = 0;
              v213 = 204800;
            }
            v113 = &v314;
            v312 = v213;
            v114 = &v315;
            v115 = (uint64_t *)&v316;
            DWORD2(v320) = v110;
            DWORD1(v321) = v110;
            *(_QWORD *)v297 = &v312;
            *(_QWORD *)&v298 = 0;
            v299[0] = 0;
            memset(&v297[8], 0, 36);
            v299[1] = *((void **)&v318 + 1);
            *(_OWORD *)((char *)v300 + 8) = 0uLL;
            LODWORD(v300[0]) = 5;
            DWORD2(v300[1]) = 0;
            *(_QWORD *)&v301 = v302;
            *((_QWORD *)&v301 + 1) = 0x800000000;
            v305 = v108 == 0;
            v306 = 0uLL;
            v307 = v15 + 960;
            v311 = 0;
            v310 = 0uLL;
            v309 = 0uLL;
            v308 = 0uLL;
            v214 = sub_22EE89FC0(*(_QWORD *)(v15 + 88), *(_QWORD *)(*(_QWORD *)(v15 + 88) + 12888), (uint64_t)v297, v103, v104, v105, v106, v107);
            if (!v215)
            {
              v216 = v214;
              v217 = *(_DWORD *)(v15 + 16);
              if (*(_DWORD *)(v15 + 20))
                v217 = *(_DWORD *)(v15 + 20);
              *(_DWORD *)(v15 + 40) = v217;
              sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
              v287 = sub_22E85305C(v15, 0, 0, v216, 0);
            }
            sub_22E827F78((uint64_t)v297);
            if (DWORD1(v318))
              free(*((void **)&v317 + 1));
            v123 = v315;
            goto LABEL_189;
          }
          HIDWORD(v318) = v111;
        }
        v110 = v111;
        goto LABEL_356;
      case 401:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 32) != 2)
          goto LABEL_340;
        memset(v297, 0, 32);
        goto LABEL_200;
      case 402:
      case 403:
      case 404:
        memset(v297, 0, 32);
        v287 = sub_22E842A9C(a1, (uint64_t)v297, a3, (uint64_t)&v312);
        if (*(_DWORD *)&v297[28])
          free(*(void **)&v297[16]);
        goto LABEL_4;
      case 405:
      case 406:
        v60 = *(_QWORD *)(a1 + 24);
        v287 = v60;
        v61 = v8 == 405 && (v60 & 1) == 0;
        if (v61)
        {
          v62 = sub_22EA04268(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (unsigned __int8 *)(v60 & 0xFFFFFFFFFFFFFFFELL));
          LOBYTE(v60) = (_BYTE)v62;
          v287 = (uint64_t)v62;
        }
        v63 = *(_DWORD *)(v15 + 16);
        if (*(_DWORD *)(v15 + 20))
          v63 = *(_DWORD *)(v15 + 20);
        *(_DWORD *)(v15 + 40) = v63;
        sub_22F18FB4C(*(_QWORD *)(v15 + 8), (unsigned int *)v16);
        if ((v60 & 1) == 0 && *(_WORD *)(v15 + 32) == 46)
          sub_22E88172C(v15, &v287);
        goto LABEL_4;
      default:
        goto LABEL_113;
    }
  }
}

uint64_t sub_22E83D470(uint64_t a1, int *a2, int a3, int a4, unint64_t *a5, int *a6)
{
  uint64_t v11;
  char v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  int *v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  int *v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t (*v63)(_QWORD);
  uint64_t v64;
  __int16 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  char v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  unint64_t v137;
  int v138;
  unint64_t v139;
  int v140;
  unint64_t v141;
  size_t v142;
  uint64_t v143;
  int *v144;
  int *v145;
  _BYTE v146[32];
  _BYTE v147[39];
  char v148;
  _BYTE *v149;
  char v150;
  uint64_t v151;
  int v152;
  __int16 v153;
  uint64_t (*v154)(uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  int v159;
  void *__src;
  uint64_t v161;
  _BYTE v162[32];
  void *v163;
  __int128 v164;
  void *__p[3];
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  __int128 v170;
  int v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  __int16 v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  void *v182;
  int v183[2];
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  __int128 v187;
  void *v188[2];
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  int v197;
  uint64_t v198;
  uint64_t v199;

  v11 = a1;
  v199 = *MEMORY[0x24BDAC8D0];
  v156 = 0;
  v157 = a1;
  v12 = *(_BYTE *)(a1 + 945);
  v158 = v12;
  *(_BYTE *)(a1 + 945) = 0;
  v13 = (unsigned __int8 *)(a1 + 944);
  v149 = (_BYTE *)(a1 + 944);
  v150 = *(_BYTE *)(a1 + 944);
  v14 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v151 = a1;
  v152 = 1441813;
  v153 = 62;
  v154 = sub_22E80F720;
  v155 = 0;
  if ((sub_22E811DE8((uint64_t)&v149) & 1) == 0)
  {
    v145 = a2;
    v143 = v156;
    v15 = *(_DWORD *)(v11 + 16);
    v16 = *(unsigned __int8 *)(v11 + 48);
    if (*(_BYTE *)(v11 + 48) && *(_DWORD *)(v11 + 52) == (_DWORD)v156)
      *(_DWORD *)(v11 + 52) = v15;
    v148 = 0;
    *a5 = 0;
    v17 = *(unsigned __int16 *)(v11 + 32);
    v18 = *(_QWORD *)(v11 + 8);
    if ((_DWORD)v17 != 3)
    {
      v144 = a6;
      v19 = 0;
      if ((v17 & 0xFFFC) == 0x168)
      {
        v20 = *(_QWORD *)(v18 + 56);
        if ((*(_QWORD *)v20 & 0x4000) != 0)
        {
          if ((*(_WORD *)(v20 + 148) & 2) != 0)
          {
            v19 = 1;
          }
          else
          {
            if ((_DWORD)v17 == 360)
            {
              *(_DWORD *)(v11 + 40) = v15;
              sub_22F18FB4C(v18, (unsigned int *)(v11 + 16));
            }
            else
            {
              v21 = off_24FCAD0E8[v17];
              v142 = strlen(v21);
              *(_DWORD *)(v11 + 40) = v15;
              sub_22F18FB4C(v18, (unsigned int *)(v11 + 16));
              v22 = *(unsigned int *)(v11 + 40);
              v23 = sub_22F1E361C(*(_QWORD **)(*(_QWORD *)(v11 + 8) + 88), *(_DWORD *)(v11 + 40));
              if (v23 == 3 || !v23)
              {
                v24 = *(_QWORD *)(v11 + 96);
                *(_DWORD *)(v24 + 312) = v22;
                *(_DWORD *)(v24 + 316) = 1888;
                if (*(char *)(v24 + 311) < 0)
                {
                  **(_BYTE **)(v24 + 288) = 0;
                  *(_QWORD *)(v24 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v24 + 288) = 0;
                  *(_BYTE *)(v24 + 311) = 0;
                }
                sub_22E78E558((uint64_t)&v182, v24);
                sub_22E3B89A8((unsigned __int8 **)&v182, v21, v142);
                BYTE12(v164) = 0;
                *(_QWORD *)((char *)&v164 + 4) = 0;
                memset(__p, 0, sizeof(__p));
                LOBYTE(v166) = 0;
                v163 = (void *)(v22 | (v22 << 32));
                LOBYTE(v164) = 1;
                sub_22E6D82D0((uint64_t *)&v182, &v163);
                if (SHIBYTE(__p[2]) < 0)
                  operator delete(__p[0]);
                sub_22E3BB0B8((uint64_t)&v182);
              }
            }
            v19 = 0;
          }
        }
      }
      v25 = *v145;
      if (*v145 > 1)
      {
        v26 = *(unsigned __int16 *)(v11 + 32);
        if (v26 == 23)
        {
          sub_22E884578(v11, (int *)(v11 + 16), 1832, (uint64_t)v147);
          sub_22E3BB0B8((uint64_t)v147);
          sub_22E8853B0(v11, v143, 0x15u, 0);
          v27 = *(_QWORD *)(v11 + 88);
          v28 = *(_QWORD *)(v27 + 12888);
          if (!*(_QWORD *)(v28 + 24) && !*(_QWORD *)(v28 + 56))
          {
            v29 = *(_QWORD *)(v11 + 96);
            *(_DWORD *)(v29 + 312) = v143;
            *(_DWORD *)(v29 + 316) = 1741;
            if (*(char *)(v29 + 311) < 0)
            {
              **(_BYTE **)(v29 + 288) = 0;
              *(_QWORD *)(v29 + 296) = 0;
            }
            else
            {
              *(_BYTE *)(v29 + 288) = 0;
              *(_BYTE *)(v29 + 311) = 0;
            }
            sub_22E78E558((uint64_t)&v163, v29);
            sub_22E3BB0B8((uint64_t)&v163);
            goto LABEL_153;
          }
          v64 = *(_QWORD *)(v27 + 216);
          v65 = *(_WORD *)(v64 + 8);
          if ((v65 & 0x7F) != 0x21)
          {
            v66 = *(_QWORD *)(v27 + 216);
            if ((v65 & 0x7Eu) - 34 > 3)
            {
LABEL_96:
              v67 = *(_QWORD *)(v27 + 3200);
              *(_QWORD *)(v27 + 3200) = 0;
              v68 = *(_QWORD *)(v27 + 10288);
              v69 = *(_DWORD *)(v27 + 1944);
              v70 = *(_DWORD *)(v27 + 2192);
              *(_QWORD *)(v27 + 216) = v66;
              *(_DWORD *)(v27 + 1944) = *(_DWORD *)(v27 + 1904);
              *(_DWORD *)(v27 + 2192) = *(_DWORD *)(v27 + 1960);
              v71 = *(_DWORD *)(*(_QWORD *)(v27 + 3688) + 576 * *(unsigned int *)(v27 + 3696) - 576);
              v163 = 0;
              v159 = 3;
              LODWORD(__src) = v71;
              v182 = (void *)*(unsigned int *)(v27 + 1704);
              sub_22EB4DDB8(v27 + 3688, (int *)&__src, (int *)&v182, (__int16 *)(v27 + 1693), (uint64_t *)&v163, &v159);
              v72 = *(unsigned int *)(v27 + 3696);
              v73 = v72 - 2;
              v74 = *(_QWORD *)(v27 + 3688);
              v75 = *(_DWORD *)(v74 + 576 * (v72 - 2));
              if (v75 == 5)
              {
                *(_BYTE *)(v74 + 576 * v72 - 4) = *(_BYTE *)(v74 + 576 * v73 + 572);
                v76 = 1;
              }
              else if (v75 == 2)
              {
                *(_BYTE *)(v74 + 576 * v72 - 4) = 1;
                v76 = *(_BYTE *)(v74 + 576 * v73 + 573) != 0;
              }
              else
              {
                v76 = 0;
                *(_BYTE *)(v74 + 576 * v72 - 4) = 0;
              }
              v77 = v74 + 576 * v72;
              *(_BYTE *)(v77 - 3) = v76;
              *(_WORD *)(v27 + 1693) = 0;
              if (*(_DWORD *)(v27 + 1848))
              {
                llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v27 + 1776), (llvm::SmallPtrSetImplBase *)(v77 - 560));
                sub_22EAEAE08(v27 + 1840, (uint64_t *)(v77 - 496));
              }
              v78 = sub_22E8788D0(v11, 1, 4194312);
              *v145 = 2;
              v79 = *(_QWORD *)(v11 + 88);
              if ((v78 & 1) != 0)
              {
                sub_22F32F704(v79);
                v14 = 1;
              }
              else
              {
                v14 = sub_22F32F754(v79, *(_QWORD *)(v79 + 12888), v143, (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(v11 + 16));
              }
              if (v64)
              {
                *(_QWORD *)(v27 + 216) = v64;
                *(_QWORD *)(v27 + 3200) = v67;
                *(_QWORD *)(v27 + 10288) = v68;
                *(_DWORD *)(v27 + 1944) = v69;
                *(_DWORD *)(v27 + 2192) = v70;
              }
              goto LABEL_152;
            }
          }
          v66 = *(_QWORD *)(v27 + 216);
          while (1)
          {
            v98 = v65 & 0x7F;
            v99 = -40;
            if (v98 > 70)
            {
              if (v98 != 83)
              {
                if (v98 == 71)
                {
                  v99 = -56;
                }
                else if (v98 != 81)
                {
                  goto LABEL_133;
                }
              }
            }
            else
            {
              if (v98 > 0x18)
                goto LABEL_132;
              if (v98 == 16)
                goto LABEL_125;
              if (((1 << v98) & 0x1066) != 0)
                goto LABEL_139;
              if (v98 == 24)
              {
LABEL_125:
                v99 = -48;
              }
              else
              {
LABEL_132:
                if (v98 != 70)
                {
LABEL_133:
                  v100 = v98 - 52;
                  if ((v98 - 33) >= 5)
                    v101 = -48;
                  else
                    v101 = -64;
                  if (v100 >= 6)
                    v99 = v101;
                  else
                    v99 = -72;
                  goto LABEL_139;
                }
                v99 = -64;
              }
            }
LABEL_139:
            v102 = *(_QWORD *)(v66 + v99 + 16);
            v66 = v102 & 0xFFFFFFFFFFFFFFF8;
            if ((v102 & 4) != 0)
              v66 = *(_QWORD *)v66;
            v65 = *(_WORD *)(v66 + 8);
            if ((v65 & 0x7F) != 0x21 && (v65 & 0x7Eu) - 34 >= 4)
              goto LABEL_96;
          }
        }
        v30 = v19 ^ 1;
        if (v25 < 3)
          v30 = 1;
        if ((v30 & 1) == 0)
        {
          *(_DWORD *)(v11 + 40) = *(_DWORD *)(v11 + 16);
          sub_22F18FB4C(*(_QWORD *)(v11 + 8), (unsigned int *)(v11 + 16));
          v31 = *(unsigned int *)(v11 + 40);
          if ((v26 - 360) >= 3)
          {
            v34 = sub_22F1E361C(*(_QWORD **)(*(_QWORD *)(v11 + 8) + 88), *(_DWORD *)(v11 + 40));
            v33 = v144;
            if (v34 == 3 || !v34)
            {
              v35 = *(_QWORD *)(v11 + 96);
              *(_DWORD *)(v35 + 312) = v31;
              *(_DWORD *)(v35 + 316) = 1432;
              if (*(char *)(v35 + 311) < 0)
              {
                **(_BYTE **)(v35 + 288) = 0;
                *(_QWORD *)(v35 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v35 + 288) = 0;
                *(_BYTE *)(v35 + 311) = 0;
              }
              sub_22E78E558((uint64_t)&v182, v35);
              BYTE12(v164) = 0;
              *(_QWORD *)((char *)&v164 + 4) = 0;
              BYTE1(__p[2]) = 0;
              WORD1(__p[2]) = 0;
              HIDWORD(__p[2]) = 285212672;
              LOBYTE(v166) = 0;
              v163 = (void *)(v31 | (v31 << 32));
              LOBYTE(v164) = 1;
              strcpy((char *)__p, "__bridge_retaine");
              sub_22E6D82D0((uint64_t *)&v182, &v163);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              sub_22E3BB0B8((uint64_t)&v182);
            }
            v32 = 2;
          }
          else
          {
            v32 = (unsigned __int16)(v26 - 360);
            v33 = v144;
          }
          v36 = sub_22E80FC30(v11, 0, 5, 3, 0, 0, 0);
          v38 = v37;
          sub_22E811E8C((uint64_t)&v149);
          *(_BYTE *)(v11 + 945) = v12;
          *v33 = HIDWORD(v156);
          if (*(_BYTE *)(v11 + 48))
          {
            v137 = 0;
            v138 = *(_DWORD *)(v11 + 16);
            *(_QWORD *)(v11 + 64) = 0;
            if (v36 >= 0x10)
              v137 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFF0) + 8) | v36 & 7;
            *(_QWORD *)(v11 + 56) = v137;
            *(_DWORD *)(v11 + 52) = v138;
            v33 = v144;
          }
          v39 = sub_22E838554(v11, 0, 0, 0, 0, 0);
          if (!(v38 | (unint64_t)(v39 & 1)))
          {
            v40 = sub_22F334D78(*(_QWORD *)(v11 + 88), *(_QWORD *)(*(_QWORD *)(v11 + 88) + 12888), v143, v32, v31, v36, *v33, (void *)(v39 & 0xFFFFFFFFFFFFFFFELL));
LABEL_157:
            v14 = v40;
            goto LABEL_154;
          }
          goto LABEL_93;
        }
        if (v25 < 3)
          goto LABEL_53;
        if ((sub_22E828854(v11, &v148) & 1) != 0)
        {
          if (v148 && (a3 & 1) == 0)
          {
            v14 = sub_22F2E86A0(v11, v145, a5, (uint64_t)&v149, &v157);
            *v144 = HIDWORD(v156);
LABEL_154:
            v11 = v157;
            goto LABEL_155;
          }
          v182 = 0;
          v184 = 0;
          v185 = 0u;
          v186 = v11 + 960;
          v198 = 0;
          v187 = 0u;
          *(_OWORD *)v188 = 0u;
          v189 = 0u;
          v190 = 0u;
          v191 = 0u;
          v192 = 0u;
          v193 = 0u;
          v194 = 0u;
          v195 = 0u;
          v196 = 0u;
          v197 = 0;
          sub_22E80FF64(v11, &v182, 3, 0, 0);
          v163 = &v182;
          v166 = 0;
          v167 = 0;
          v164 = 0u;
          memset(__p, 0, 20);
          v168 = *((_QWORD *)&v189 + 1);
          v172 = &v174;
          v170 = 0u;
          v169 = 5;
          v171 = 0;
          v173 = 0x800000000;
          v175 = v175 & 0xFC00 | ((v182 & 0x3F000) == 204800);
          v176 = 0u;
          v177 = v186;
          v181 = 0;
          v180 = 0u;
          v179 = 0u;
          v178 = 0u;
          sub_22E8227E4(v11, (uint64_t)&v163, (unint64_t)sub_22E823490, 0);
          if ((v175 & 1) == 0
            && (*(_QWORD *)v163 & 0x3F000) != 0x32000
            && *(_WORD *)(v11 + 32) == 5
            && !*(_BYTE *)(v11 + 947))
          {
            v88 = *(_QWORD *)(v11 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v88 + 56) + 1) & 0x40) != 0)
            {
              v124 = *(_QWORD *)(v88 + 2816);
              v125 = v124 >= *(unsigned int *)(v88 + 2784)
                   ? sub_22F162D2C(v88, 1u)
                   : *(_QWORD *)(v88 + 2776) + 24 * v124;
              if (*(_WORD *)(v125 + 16) == 61
                || ((v126 = *(_QWORD *)(v11 + 8), v127 = *(_QWORD *)(v126 + 2816),
                                                  v127 >= *(unsigned int *)(v126 + 2784))
                  ? (v128 = sub_22F162D2C(v126, 1u))
                  : (v128 = *(_QWORD *)(v126 + 2776) + 24 * v127),
                    *(_WORD *)(v128 + 16) == 20))
              {
                v129 = *(_BYTE *)(v11 + 947);
                *(_BYTE *)(v11 + 947) = 0;
                v130 = sub_22EE89FC0(*(_QWORD *)(v11 + 88), *(_QWORD *)(*(_QWORD *)(v11 + 88) + 12888), (uint64_t)&v163, v83, v84, v85, v86, v87);
                *(_BYTE *)(v11 + 947) = v129;
                v14 = sub_22E85305C(v11, 0, 0, v130, 0);
                sub_22E827F78((uint64_t)&v163);
                if (DWORD1(v189))
                  free(v188[1]);
                sub_22E8D1BC4(v186, (uint64_t)&v186);
                sub_22E80F94C((uint64_t *)&v187);
                sub_22E80F94C((uint64_t *)&v185 + 1);
LABEL_152:
                v52 = v144;
                if ((v14 & 1) != 0)
                  goto LABEL_153;
LABEL_112:
                sub_22E811E8C((uint64_t)&v149);
                *v52 = HIDWORD(v156);
                goto LABEL_154;
              }
            }
          }
          sub_22E811E8C((uint64_t)&v149);
          *(_BYTE *)(v11 + 945) = v12;
          *v144 = HIDWORD(v156);
          v94 = *(unsigned __int16 *)(v11 + 32);
          if (v94 == 21)
          {
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 56) + 52) & 0x40000000) != 0)
            {
              v115 = *(_BYTE *)(v11 + 947);
              *(_BYTE *)(v11 + 947) = 0;
              v116 = sub_22EE89FC0(*(_QWORD *)(v11 + 88), *(_QWORD *)(*(_QWORD *)(v11 + 88) + 12888), (uint64_t)&v163, v89, v90, v91, v92, v93);
              *(_BYTE *)(v11 + 947) = v115;
              if (v117)
                goto LABEL_181;
              if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v116 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                                                    + 16)
                 - 55 <= 1)
              {
                v14 = sub_22E838554(v11, 0, 0, 2, 1, 0);
                if ((v14 & 1) == 0)
                  v14 = sub_22EB360B4(*(_QWORD *)(v11 + 88), *(_QWORD *)(*(_QWORD *)(v11 + 88) + 12888), v143, (uint64_t)&v163, a5, *v144, v14 & 0xFFFFFFFFFFFFFFFELL, v120);
                if ((v14 & 1) != 0)
                  goto LABEL_182;
                v97 = sub_22E8385C0((_BYTE *)v11, v14);
                goto LABEL_211;
              }
            }
          }
          else if (v94 == 23)
          {
            *v145 = 3;
            v95 = *(_BYTE *)(v11 + 947);
            *(_BYTE *)(v11 + 947) = 0;
            v96 = sub_22EE89FC0(*(_QWORD *)(v11 + 88), *(_QWORD *)(*(_QWORD *)(v11 + 88) + 12888), (uint64_t)&v163, v89, v90, v91, v92, v93);
            *(_BYTE *)(v11 + 947) = v95;
            v97 = sub_22F2E68B4(v11, v96, v143);
LABEL_211:
            v14 = v97;
            goto LABEL_182;
          }
          if (*v145 == 4)
          {
            if ((v175 & 1) == 0 && (*(_QWORD *)v163 & 0x3F000) != 0x32000)
            {
              if (!a3)
              {
                v121 = v143;
                if (*(_WORD *)(v11 + 32) == 5)
                {
                  v122 = *(_QWORD *)(v11 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v122 + 56) + 1) & 0x40) != 0
                    && *(_QWORD *)(v11 + 24) == *(_QWORD *)(v11 + 336))
                  {
                    v131 = *(_QWORD *)(v11 + 88) + 12888;
                    while (1)
                    {
                      v131 = *(_QWORD *)v131;
                      if (!v131)
                        break;
                      if ((*(_BYTE *)(v131 + 9) & 8) != 0)
                      {
                        v132 = *(_QWORD *)(v122 + 2816);
                        if (v132 >= *(unsigned int *)(v122 + 2784))
                          v133 = sub_22F162D2C(v122, 1u);
                        else
                          v133 = *(_QWORD *)(v122 + 2776) + 24 * v132;
                        v121 = v143;
                        if (*(_WORD *)(v133 + 16) == 25)
                          break;
                        v134 = *(_QWORD *)(v11 + 96);
                        *(_DWORD *)(v134 + 312) = *(_DWORD *)(v11 + 16);
                        *(_DWORD *)(v134 + 316) = 1573;
                        if (*(char *)(v134 + 311) < 0)
                        {
                          **(_BYTE **)(v134 + 288) = 0;
                          *(_QWORD *)(v134 + 296) = 0;
                        }
                        else
                        {
                          *(_BYTE *)(v134 + 288) = 0;
                          *(_BYTE *)(v134 + 311) = 0;
                        }
                        sub_22E78E558((uint64_t)&__src, v134);
                        v135 = v143 | ((unint64_t)*v144 << 32);
                        v136 = __src;
                        if (!__src)
                        {
                          v136 = (void *)sub_22E3B8AAC(v161);
                          __src = v136;
                        }
                        v14 = 1;
                        sub_22E4D6448((uint64_t)v136 + 336, v135, 1);
                        sub_22E3BB0B8((uint64_t)&__src);
                        goto LABEL_182;
                      }
                    }
                  }
                }
                if (*(_BYTE *)(v11 + 48))
                {
                  v139 = 0;
                  v140 = *(_DWORD *)(v11 + 16);
                  v141 = *a5;
                  *(_QWORD *)(v11 + 64) = 0;
                  if (v141 >= 0x10)
                    v139 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFFFF0) + 8) | v141 & 7;
                  *(_QWORD *)(v11 + 56) = v139;
                  *(_DWORD *)(v11 + 52) = v140;
                  v121 = v143;
                }
                v14 = sub_22E838554(v11, 0, 0, 2, 0, 0);
                if ((v14 & 1) != 0)
                  goto LABEL_182;
                v97 = sub_22EB360B4(*(_QWORD *)(v11 + 88), *(_QWORD *)(*(_QWORD *)(v11 + 88) + 12888), v121, (uint64_t)&v163, a5, *v144, v14 & 0xFFFFFFFFFFFFFFFELL, v123);
                goto LABEL_211;
              }
              v105 = *(_BYTE *)(v11 + 947);
              *(_BYTE *)(v11 + 947) = 0;
              v106 = sub_22EE89FC0(*(_QWORD *)(v11 + 88), *(_QWORD *)(*(_QWORD *)(v11 + 88) + 12888), (uint64_t)&v163, v89, v90, v91, v92, v93);
              v14 = 0;
              *(_BYTE *)(v11 + 947) = v105;
              *a5 = v106;
LABEL_182:
              sub_22E827F78((uint64_t)&v163);
              if (DWORD1(v189))
                free(v188[1]);
              sub_22E8D1BC4(v186, (uint64_t)&v186);
              sub_22E80F94C((uint64_t *)&v187);
              sub_22E80F94C((uint64_t *)&v185 + 1);
              goto LABEL_154;
            }
          }
          else
          {
            sub_22E884578(v11, (int *)(v11 + 16), 1508, (uint64_t)v146);
            sub_22E3BB0B8((uint64_t)v146);
          }
LABEL_181:
          v14 = 1;
          goto LABEL_182;
        }
        v25 = *v145;
      }
      if (v25 < 1)
        goto LABEL_59;
      v26 = *(unsigned __int16 *)(v11 + 32);
LABEL_53:
      if (v26 == 26)
      {
        v45 = *(_QWORD *)(v11 + 8);
        v46 = *(_QWORD *)(v45 + 2816);
        v47 = v46 >= *(unsigned int *)(v45 + 2784) ? sub_22F162D2C(v45, 1u) : *(_QWORD *)(v45 + 2776) + 24 * v46;
        v48 = sub_22F1DD1BC(*(unsigned __int16 *)(v47 + 16), *v13, 1);
        if (v48 >= 1 && (v48 & 0xFFFFFFF7) != 3)
        {
          *v145 = 1;
          v40 = sub_22F2E6994(v11, 0, (uint64_t)&v149);
          goto LABEL_157;
        }
      }
LABEL_59:
      if (a4)
      {
        v49 = *(_BYTE *)(v11 + 947);
        *(_BYTE *)(v11 + 947) = 0;
        v163 = (char *)&v164 + 8;
        *(_QWORD *)&v164 = 0xC00000000;
        v182 = &v184;
        *(_QWORD *)v183 = 0x1400000000;
        if ((sub_22E83F298(v11, (uint64_t)&v163, (uint64_t)&v182) & 1) != 0)
        {
          v14 = 1;
LABEL_107:
          if (v182 != &v184)
            free(v182);
          v52 = v144;
          if (v163 != (char *)&v164 + 8)
            free(v163);
          goto LABEL_111;
        }
        v53 = v164;
        if (*v145 < 1
          || (_DWORD)v164 != 1
          || (v53 = 1, v54 = sub_22F1DD1BC(*(unsigned __int16 *)(v11 + 32), *(unsigned __int8 *)(v11 + 944), 1), v54 < 1)
          || (v54 & 0xFFFFFFF7) == 3)
        {
LABEL_106:
          *v145 = 0;
          v80 = *(_DWORD *)(v11 + 16);
          v81 = (uint64_t *)v163;
          v82 = v53;
          v14 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)(v11 + 88) + 88) + 2032, 8 * v53 + 24, 3);
          sub_22F002D50(v14, v143, v81, v82, v80);
          goto LABEL_107;
        }
        v55 = *(_QWORD *)(v11 + 8);
        v56 = *(_QWORD *)(v55 + 2816);
        if (v56 >= *(unsigned int *)(v55 + 2784))
          v57 = sub_22F162D2C(v55, 1u);
        else
          v57 = *(_QWORD *)(v55 + 2776) + 24 * v56;
        if (*(_WORD *)(v57 + 16) != 26)
        {
          v53 = v164;
          goto LABEL_106;
        }
        *v145 = 1;
        v14 = sub_22F2E6994(v11, *(_QWORD *)v163, (uint64_t)&v149);
        if (v182 != &v184)
          free(v182);
        if (v163 != (char *)&v164 + 8)
          free(v163);
      }
      else
      {
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 56) + 72) >= 0x32u
          && *(_BYTE *)(v11 + 946)
          && *v145 == 4
          && *(_WORD *)(v11 + 32) == 19
          && sub_22F2E6798(v11))
        {
          v107 = 0;
          v182 = &v184;
          *(_QWORD *)v183 = 0x400000000;
          __src = v162;
          v161 = 0x400000000;
          do
          {
            v163 = v13;
            LOBYTE(v164) = *(_BYTE *)(v11 + 944);
            *(_BYTE *)(v11 + 944) = 1;
            *((_QWORD *)&v164 + 1) = v11;
            LODWORD(__p[0]) = 1310739;
            strcpy((char *)__p + 4, ">");
            __p[2] = 0;
            v166 = 0;
            __p[1] = sub_22E80F788;
            sub_22E811DE8((uint64_t)&v163);
            v108 = *(_QWORD *)(v11 + 88);
            v109 = sub_22E83766C(v11, 0);
            v110 = sub_22E83778C(v11, v109, 1);
            v111 = v110;
            if ((v110 & 1) == 0)
              v111 = (unint64_t)sub_22EBBCB14(v108, (_DWORD *)(v110 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v159);
            if (v111 <= 1)
            {
              do
                v159 = 1441812;
              while (!sub_22E885940(v11, (unsigned __int16 *)&v159, 2, 3));
              v107 = 1;
            }
            sub_22E811E8C((uint64_t)&v163);
            v112 = v183[0];
            if (v183[0] >= (unint64_t)v183[1])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v112 = v183[0];
            }
            *((_QWORD *)v182 + v112) = v111 & 0xFFFFFFFFFFFFFFFELL;
            ++v183[0];
            v113 = v166;
            v114 = v161;
            if (v161 >= (unint64_t)HIDWORD(v161))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v114 = v161;
            }
            *((_QWORD *)__src + v114) = v113;
            LODWORD(v161) = v161 + 1;
            *(_BYTE *)v163 = v164;
          }
          while (*(_WORD *)(v11 + 32) != 22);
          sub_22E811E8C((uint64_t)&v149);
          *v144 = HIDWORD(v156);
          v118 = *(_QWORD *)(v11 + 88);
          v119 = sub_22E83766C(v11, 0);
          v14 = v119;
          if ((v119 & 1) == 0)
            v14 = (uint64_t)sub_22EBBCB14(v118, (_DWORD *)(v119 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v163);
          if ((v107 & 1) != 0)
          {
            v14 = 1;
          }
          else if ((v14 & 1) == 0)
          {
            v14 = sub_22EB2BE20(*(_QWORD **)(v11 + 88), v14 & 0xFFFFFFFFFFFFFFFELL, v143, *v144, (char *)v182, v183[0], __src, v161);
          }
          if (__src != v162)
            free(__src);
          if (v182 != &v184)
            free(v182);
          goto LABEL_154;
        }
        v49 = *(_BYTE *)(v11 + 947);
        *(_BYTE *)(v11 + 947) = 0;
        v50 = sub_22E83766C(v11, 1);
        v51 = sub_22E83778C(v11, v50, 1);
        v14 = v51;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 56) + 1) & 1) != 0)
        {
          v52 = v144;
        }
        else
        {
          v52 = v144;
          if (v51 >= 2 && (v51 & 1) == 0)
            v14 = (uint64_t)sub_22EBBCB14(*(_QWORD *)(v11 + 88), (_DWORD *)(v51 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v163);
        }
        if (*v145 < 1
          || (v58 = sub_22F1DD1BC(*(unsigned __int16 *)(v11 + 32), *(unsigned __int8 *)(v11 + 944), 1), v58 < 1)
          || (v58 & 0xFFFFFFF7) == 3
          || ((v59 = *(_QWORD *)(v11 + 8), v60 = *(_QWORD *)(v59 + 2816), v60 >= *(unsigned int *)(v59 + 2784))
            ? (v61 = sub_22F162D2C(v59, 1u))
            : (v61 = *(_QWORD *)(v59 + 2776) + 24 * v60),
              *(_WORD *)(v61 + 16) != 26))
        {
          *v145 = 0;
          if ((v14 & 1) == 0 && *(_WORD *)(v11 + 32) == 22)
            v14 = sub_22EB27A20(*(_QWORD **)(v11 + 88), v143, *(_DWORD *)(v11 + 16), v14 & 0xFFFFFFFFFFFFFFFELL);
LABEL_111:
          *(_BYTE *)(v11 + 947) = v49;
          if ((v14 & 1) != 0)
          {
LABEL_153:
            LOWORD(v163) = 22;
            v14 = 1;
            sub_22E885940(v11, (unsigned __int16 *)&v163, 1, 1);
            goto LABEL_154;
          }
          goto LABEL_112;
        }
        *v145 = 1;
        v14 = sub_22F2E6994(v11, v14, (uint64_t)&v149);
      }
      *(_BYTE *)(v11 + 947) = v49;
      goto LABEL_154;
    }
    if (*(_QWORD *)(v18 + 752))
    {
      *(_BYTE *)(v18 + 864) = 1;
      *(_BYTE *)(*(_QWORD *)(v18 + 48) + 6) = 1;
    }
    *(_WORD *)(v11 + 32) = 1;
    v41 = *(_QWORD *)(v11 + 88);
    v42 = *(_QWORD *)(v41 + 12888);
    if (!v16)
    {
      v43 = 0;
      v44 = v145;
LABEL_92:
      sub_22F313C2C(v41, v42, v43, *v44 > 2);
LABEL_93:
      v14 = 1;
      goto LABEL_154;
    }
    v62 = *(_DWORD *)(v11 + 52) == v15;
    v44 = v145;
    if (v62)
    {
      v43 = *(_QWORD *)(v11 + 56);
      if (v43 > 0xF)
        goto LABEL_92;
      v63 = *(uint64_t (**)(_QWORD))(v11 + 64);
      if (v63)
      {
        v43 = v63(*(_QWORD *)(v11 + 72));
        goto LABEL_92;
      }
    }
    v43 = 0;
    goto LABEL_92;
  }
LABEL_155:
  *v149 = v150;
  *(_BYTE *)(v11 + 945) = v158;
  return v14;
}

uint64_t sub_22E83E898(uint64_t a1, int a2)
{
  unsigned int *v4;
  unint64_t v5;
  char *v6;
  __int128 v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[13];

  v15[12] = *MEMORY[0x24BDAC8D0];
  v13 = v15;
  v14 = 0x400000000;
  v4 = (unsigned int *)(a1 + 16);
  do
  {
    v5 = sub_22E4EF088((uint64_t)&v13, (unint64_t)v4, 1);
    v6 = (char *)v13 + 24 * v14;
    v7 = *(_OWORD *)v5;
    *((_QWORD *)v6 + 2) = *(_QWORD *)(v5 + 16);
    *(_OWORD *)v6 = v7;
    LODWORD(v14) = v14 + 1;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v4);
    v8 = *(unsigned __int16 *)(a1 + 32);
  }
  while (v8 <= 0x12 && ((1 << v8) & 0x76000) != 0);
  v9 = *(_QWORD *)(a1 + 88);
  if (a2)
    v10 = *(_QWORD **)(v9 + 12888);
  else
    v10 = 0;
  v11 = sub_22EB21338(v9, (uint64_t)v13, v14, v10);
  if (v13 != v15)
    free(v13);
  return v11;
}

uint64_t sub_22E83E9D0(uint64_t a1, int a2)
{
  unsigned int *v3;
  uint64_t v4;
  char v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  void *v14;
  size_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unsigned int *v32;
  char v33;
  uint64_t v34;
  char *v35;
  void *v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  _BYTE *v46;
  char v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[20];
  char v55;
  _BYTE __p[23];
  __int16 v57;
  uint64_t v58[4];
  unsigned __int8 *v59[4];
  void *v60;
  uint64_t v61;
  _BYTE v62[160];
  __int128 v63;
  __int128 v64;
  int v65;
  int v66;
  char v67;
  _QWORD **v68;
  _QWORD *v69[5];

  v69[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v3 = (unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v46 = (_BYTE *)(a1 + 944);
  v47 = *(_BYTE *)(a1 + 944);
  v4 = 1;
  *(_BYTE *)(a1 + 944) = 1;
  v48 = a1;
  v49 = 1441813;
  v50 = 62;
  v52 = 0;
  v53 = 0;
  v51 = sub_22E80F720;
  if ((sub_22E88C650((uint64_t)&v46, 15, "", 0) & 1) != 0)
    goto LABEL_33;
  v5 = 0;
  v60 = v62;
  v61 = 0x400000000;
  while (1)
  {
    v6 = *(unsigned __int16 *)(a1 + 32);
    if (v6 == 3)
    {
      v28 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v28 + 752))
      {
        *(_BYTE *)(v28 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v28 + 48) + 6) = 1;
      }
      *(_WORD *)(a1 + 32) = 1;
      sub_22F3197C8(*(_QWORD *)(a1 + 88));
      goto LABEL_18;
    }
    if (v6 == 5)
      break;
    if (v6 == 30)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v3);
      v7 = *(_DWORD *)(a1 + 40);
      v63 = 0u;
      v64 = 0u;
      v65 = v7;
      v66 = v7;
      v67 = 1;
      goto LABEL_10;
    }
    sub_22E884578(a1, (int *)v3, 1448, (uint64_t)v54);
    sub_22E3BB0B8((uint64_t)v54);
LABEL_18:
    LOBYTE(v63) = 0;
    v67 = 0;
    if (*(_WORD *)(a1 + 32) != 65)
      goto LABEL_30;
    v5 = 1;
LABEL_20:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v3);
  }
  v8 = sub_22E811D4C(a1);
  v58[0] = 0;
  v9 = sub_22F2E1CA8(a1, v58);
  if (!(v9 & 0x7FFFFFFFFFFFFFFFLL | v10 & 0x7FFFFFFF00000000 | v10 & 0x7FFFFFFF))
    goto LABEL_18;
  v11 = v9;
  v12 = v10;
  v13 = *(unsigned int **)(*(_QWORD *)(v8 + 8) + 16);
  v16 = *v13;
  v14 = v13 + 4;
  v15 = v16;
  v17 = sub_22E816F38((unint64_t)v14, v16);
  v19 = v18;
  sub_22E83F9A4(v17, v18);
  if (!v20)
  {
    v29 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v29 + 312) = *(_DWORD *)v8;
    *(_DWORD *)(v29 + 316) = 1449;
    if (*(char *)(v29 + 311) < 0)
    {
      **(_BYTE **)(v29 + 288) = 0;
      *(_QWORD *)(v29 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v29 + 288) = 0;
      *(_BYTE *)(v29 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v59, v29);
    sub_22E3B89A8(v59, v14, v15);
    sub_22E3BB0B8((uint64_t)v59);
    goto LABEL_18;
  }
  v21 = *(_DWORD *)v8;
  *(_QWORD *)&v63 = v11;
  *((_QWORD *)&v63 + 1) = v12;
  *(_QWORD *)&v64 = v17;
  *((_QWORD *)&v64 + 1) = v19;
  v65 = v21;
  v66 = HIDWORD(v58[0]);
  v67 = 1;
LABEL_10:
  v22 = (char *)v60;
  if (v61 >= HIDWORD(v61))
  {
    if (v60 <= &v63 && (char *)v60 + 40 * v61 > (char *)&v63)
    {
      v30 = (char *)&v63 - (_BYTE *)v60;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v22 = (char *)v60;
      v23 = (char *)v60 + v30;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v23 = (char *)&v63;
      v22 = (char *)v60;
    }
  }
  else
  {
    v23 = (char *)&v63;
  }
  v24 = &v22[40 * v61];
  v25 = *(_OWORD *)v23;
  v26 = *((_OWORD *)v23 + 1);
  *((_QWORD *)v24 + 4) = *((_QWORD *)v23 + 4);
  *(_OWORD *)v24 = v25;
  *((_OWORD *)v24 + 1) = v26;
  v27 = (v61 + 1);
  LODWORD(v61) = v61 + 1;
  if (*(_WORD *)(a1 + 32) == 65)
    goto LABEL_20;
  if ((v5 & 1) != 0)
  {
LABEL_30:
    LOWORD(v63) = 22;
    v4 = 1;
    sub_22E885940(a1, (unsigned __int16 *)&v63, 1, 1);
    goto LABEL_31;
  }
  v32 = (unsigned int *)v60;
  *(_QWORD *)&v63 = &v64;
  *((_QWORD *)&v63 + 1) = 0x400000000;
  v69[0] = 0;
  v69[1] = 0;
  v68 = v69;
  if (!(_DWORD)v27)
    goto LABEL_53;
  v33 = 0;
  v34 = 40 * v27;
  v44 = (unsigned int *)v60;
  v35 = (char *)v60 + 24;
  do
  {
    if (*((_QWORD *)v35 - 3) & 0x7FFFFFFFFFFFFFFFLL | *((_QWORD *)v35 - 2) & 0x7FFFFFFF7FFFFFFFLL)
    {
      *(_OWORD *)v54 = *(_OWORD *)(v35 - 8);
      if ((sub_22E840204((uint64_t)&v63, (__int128 *)v54) & 0x100000000) == 0)
      {
        v36 = (void *)*((_QWORD *)v35 - 1);
        v37 = *(_QWORD *)v35;
        v38 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v38 + 312) = *((_DWORD *)v35 + 2);
        *(_DWORD *)(v38 + 316) = 1452;
        if (*(char *)(v38 + 311) < 0)
        {
          **(_BYTE **)(v38 + 288) = 0;
          *(_QWORD *)(v38 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v38 + 288) = 0;
          *(_BYTE *)(v38 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v54, v38);
        v39 = *((unsigned int *)v35 + 3);
        v40 = *(_QWORD *)v54;
        if (!*(_QWORD *)v54)
        {
          v40 = sub_22E3B8AAC(*(uint64_t *)&v54[8]);
          *(_QWORD *)v54 = v40;
        }
        sub_22E4D6448(v40 + 336, v39 | (v39 << 32), 1);
        sub_22E3B89A8((unsigned __int8 **)v54, v36, v37);
        sub_22E3BB0B8((uint64_t)v54);
      }
    }
    else
    {
      if ((v33 & 1) != 0)
      {
        v41 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v41 + 312) = *((_DWORD *)v35 + 2);
        *(_DWORD *)(v41 + 316) = 1453;
        if (*(char *)(v41 + 311) < 0)
        {
          **(_BYTE **)(v41 + 288) = 0;
          *(_QWORD *)(v41 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v41 + 288) = 0;
          *(_BYTE *)(v41 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v59, v41);
        sub_22E3BB0B8((uint64_t)v59);
      }
      v33 = 1;
    }
    v35 += 40;
    v34 -= 40;
  }
  while (v34);
  v32 = v44;
  if ((v33 & 1) == 0)
  {
LABEL_53:
    v42 = v32[10 * v27 - 1];
    v43 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v43 + 312) = v42;
    *(_DWORD *)(v43 + 316) = 1454;
    if (*(char *)(v43 + 311) < 0)
    {
      **(_BYTE **)(v43 + 288) = 0;
      *(_QWORD *)(v43 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v43 + 288) = 0;
      *(_BYTE *)(v43 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v58, v43);
    v55 = 0;
    *(_QWORD *)&v54[12] = 0;
    *(_QWORD *)v54 = v42 | (v42 << 32);
    v54[8] = 0;
    memset(&__p[4], 0, 19);
    strcpy(__p, ", *");
    v57 = 3;
    sub_22E6D82D0(v58, v54);
    if ((char)v57 < 0)
      operator delete(*(void **)__p);
    sub_22E3BB0B8((uint64_t)v58);
  }
  sub_22E3B4AB8((uint64_t)&v68, v69[0]);
  if ((__int128 *)v63 != &v64)
    free((void *)v63);
  if ((sub_22E811E8C((uint64_t)&v46) & 1) != 0)
    v4 = 1;
  else
    v4 = sub_22F32FCF8(*(_QWORD *)(a1 + 88), (uint64_t)v60, v61, a2, SHIDWORD(v53));
LABEL_31:
  if (v60 != v62)
    free(v60);
LABEL_33:
  *v46 = v47;
  return v4;
}

uint64_t sub_22E83EFC4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, char a6, int a7)
{
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[32];

  v13 = 0;
  v14 = a1 + 16;
  if (a4)
  {
LABEL_2:
    a4(a5);
    goto LABEL_3;
  }
  while (1)
  {
LABEL_3:
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) != 0 && *(_WORD *)(a1 + 32) == 23)
    {
      sub_22E884578(a1, (int *)v14, 1932, (uint64_t)v31);
      sub_22E3BB0B8((uint64_t)v31);
      v15 = sub_22E84AF40(a1);
    }
    else
    {
      v15 = sub_22E83766C(a1, 0);
    }
    v16 = v15;
    if (a7 && (v15 & 1) == 0)
      v16 = (uint64_t)sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E1334, (uint64_t)&v29);
    v17 = *(unsigned __int16 *)(a1 + 32);
    if (v17 == 26)
    {
      v20 = *(_QWORD **)(a1 + 88);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v14);
      v16 = sub_22EE739C0(v20, v16 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a1 + 40), 0);
      if ((v16 & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      if (v17 == 3)
      {
        v23 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v23 + 752))
        {
          *(_BYTE *)(v23 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v23 + 48) + 6) = 1;
        }
        *(_WORD *)(a1 + 32) = 1;
LABEL_28:
        v19 = *(_DWORD *)(a2 + 8);
        goto LABEL_29;
      }
      if ((v16 & 1) != 0)
      {
LABEL_18:
        if ((a6 & 1) != 0)
          goto LABEL_28;
        LODWORD(v29) = 1441857;
        sub_22E885940(a1, (unsigned __int16 *)&v29, 2, 2);
        if (*(_WORD *)(a1 + 32) != 65)
          goto LABEL_28;
        v13 = 1;
        goto LABEL_21;
      }
    }
    v18 = *(unsigned int *)(a2 + 8);
    if (v18 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v18 = *(unsigned int *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v18) = v16 & 0xFFFFFFFFFFFFFFFELL;
    v19 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v19;
    if (*(_WORD *)(a1 + 32) != 65)
      break;
LABEL_21:
    v29 = *(_OWORD *)v14;
    v30 = *(_QWORD *)(v14 + 16);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v14);
    v21 = *(_DWORD *)(a1 + 40);
    v22 = *(unsigned int *)(a3 + 8);
    if (v22 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v22 = *(unsigned int *)(a3 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v22) = v21;
    ++*(_DWORD *)(a3 + 8);
    sub_22E839D4C(a1, (uint64_t)&v29);
    if (a4)
      goto LABEL_2;
  }
  if ((v13 & 1) == 0)
    return 0;
LABEL_29:
  if (v19)
  {
    v24 = *(unint64_t **)a2;
    v25 = 8 * v19;
    do
    {
      v26 = (unint64_t)sub_22EBBCB14(*(_QWORD *)(a1 + 88), (_DWORD *)*v24, 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)&v29);
      if (v26 >= 2)
        *v24 = v26 & 0xFFFFFFFFFFFFFFFELL;
      ++v24;
      v25 -= 8;
    }
    while (v25);
  }
  return 1;
}

uint64_t sub_22E83F298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  _BOOL8 v9;
  int v10;
  unint64_t v11;
  __int128 v13;
  uint64_t v14;

  v6 = sub_22E83766C(a1, 0);
  if ((v6 & 1) != 0)
    return 1;
  do
  {
    v7 = *(unsigned int *)(a2 + 8);
    if (v7 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v7 = *(unsigned int *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v6 & 0xFFFFFFFFFFFFFFFELL;
    ++*(_DWORD *)(a2 + 8);
    v8 = *(unsigned __int16 *)(a1 + 32);
    v9 = v8 == 65;
    if (v8 != 65)
      break;
    v13 = *(_OWORD *)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
    v10 = *(_DWORD *)(a1 + 40);
    v11 = *(unsigned int *)(a3 + 8);
    if (v11 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = *(unsigned int *)(a3 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v11) = v10;
    ++*(_DWORD *)(a3 + 8);
    sub_22E839D4C(a1, (uint64_t)&v13);
    v6 = sub_22E83766C(a1, 0);
  }
  while ((v6 & 1) == 0);
  return v9;
}

uint64_t sub_22E83F3D8(uint64_t a1, unsigned int *a2, _BYTE *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t result;
  int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  void *__p;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned __int8 *v44;
  _BYTE v45[12];
  char v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51[4];
  _QWORD v52[3];
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  void *v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  unsigned __int8 *v67;
  __int128 v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  int v76;
  _WORD *v77;
  uint64_t v78;
  _WORD v79[484];
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  if (*(_WORD *)(a1 + 32) == 21)
  {
    LODWORD(v67) = 4;
    v9 = *(unsigned int *)(a1 + 16);
    LODWORD(v52[0]) = 0;
    result = sub_22E83D470(a1, (int *)&v67, 1, 0, a4, (int *)v52);
    *a5 = v9 | ((unint64_t)LODWORD(v52[0]) << 32);
    if ((_DWORD)v67 == 4)
    {
      result = 0;
      *a3 = 1;
      return result;
    }
    if ((*((_WORD *)a2 + 8) != 207 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
      && (result & 1) == 0)
    {
      result = sub_22E8385C0((_BYTE *)a1, result & 0xFFFFFFFFFFFFFFFELL);
    }
    goto LABEL_37;
  }
  v11 = *((unsigned __int16 *)a2 + 8);
  v12 = (v11 - 102) > 0x38 || ((1 << (v11 - 102)) & 0x100000000000801) == 0;
  if (!v12 || v11 == 185)
  {
    if (sub_22E83F964(a1))
    {
      v52[0] = 0;
      v52[2] = 0;
      v53 = 0u;
      v54 = a1 + 960;
      v66 = 0;
      v55 = 0u;
      *(_OWORD *)v56 = 0u;
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v63 = 0u;
      v64 = 0u;
      v65 = 0;
      sub_22E80FF64(a1, v52, 3, 0, 0);
      v67 = (unsigned __int8 *)v52;
      v68 = 0u;
      v69 = 0u;
      v73 = *((_QWORD *)&v57 + 1);
      v74 = 5;
      v77 = v79;
      v79[480] = (v52[0] & 0x3F000) == 204800;
      v71 = 0;
      v72 = 0;
      v70 = 0;
      v75 = 0u;
      v76 = 0;
      v78 = 0x800000000;
      v80 = 0u;
      v81 = v54;
      v85 = 0;
      v84 = 0u;
      v83 = 0u;
      v82 = 0u;
      sub_22E8227E4(a1, (uint64_t)&v67, (unint64_t)sub_22E823490, 0);
      v13 = sub_22F141A3C(*a2, 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
      v14 = sub_22F141A3C(*(unsigned int *)(a1 + 40), 0, *(_QWORD **)(*(_QWORD *)(a1 + 8) + 88), *(_DWORD **)(*(_QWORD *)(a1 + 8) + 56));
      if (v13 && (v15 = v14) != 0)
      {
        v16 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v16 + 312) = v13;
        *(_DWORD *)(v16 + 316) = 1519;
        if (*(char *)(v16 + 311) < 0)
        {
          **(_BYTE **)(v16 + 288) = 0;
          *(_QWORD *)(v16 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v16 + 288) = 0;
          *(_BYTE *)(v16 + 311) = 0;
        }
        sub_22E78E558((uint64_t)v51, v16);
        v17 = off_24FCAD0E8[*((unsigned __int16 *)a2 + 8)];
        v18 = (unsigned __int8 *)v51[0];
        if (!v51[0])
        {
          v18 = (unsigned __int8 *)sub_22E3B8AAC(v51[1]);
          v51[0] = (uint64_t)v18;
        }
        v18[*v18 + 1] = 1;
        v19 = v51[0];
        v20 = *(unsigned __int8 *)v51[0];
        *(_BYTE *)v51[0] = v20 + 1;
        *(_QWORD *)(v19 + 8 * v20 + 16) = v17;
        v46 = 0;
        *(_QWORD *)&v45[4] = 0;
        v48 = 0;
        v49 = 0x100000000000000;
        v44 = (unsigned __int8 *)(v13 | ((unint64_t)v13 << 32));
        v45[0] = 0;
        v47 = (void *)40;
        v50 = 0;
        sub_22E6D82D0(v51, &v44);
        v39 = 0;
        v38 = 0;
        v41 = 0;
        v42 = 0x100000000000000;
        v36 = v15 | ((unint64_t)v15 << 32);
        v37 = 0;
        __p = (void *)41;
        v43 = 0;
        sub_22E6D82D0(v51, &v36);
        if (SHIBYTE(v42) < 0)
          operator delete(__p);
        if (SHIBYTE(v49) < 0)
          operator delete(v47);
        v21 = v51;
      }
      else
      {
        v26 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v26 + 312) = *a2;
        *(_DWORD *)(v26 + 316) = 1519;
        if (*(char *)(v26 + 311) < 0)
        {
          **(_BYTE **)(v26 + 288) = 0;
          *(_QWORD *)(v26 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v26 + 288) = 0;
          *(_BYTE *)(v26 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v44, v26);
        v27 = off_24FCAD0E8[*((unsigned __int16 *)a2 + 8)];
        v28 = v44;
        if (!v44)
        {
          v28 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)v45);
          v44 = v28;
        }
        v28[*v28 + 1] = 1;
        v29 = v44;
        v30 = *v44;
        *v44 = v30 + 1;
        *(_QWORD *)&v29[8 * v30 + 16] = v27;
        v21 = (uint64_t *)&v44;
      }
      sub_22E3BB0B8((uint64_t)v21);
      *a3 = 1;
      sub_22E827F78((uint64_t)&v67);
      if (DWORD1(v57))
        free(v56[1]);
      sub_22E8D1BC4(v54, (uint64_t)&v54);
      sub_22E80F94C((uint64_t *)&v55);
      sub_22E80F94C((uint64_t *)&v53 + 1);
      return 0;
    }
    v11 = *((unsigned __int16 *)a2 + 8);
  }
  *a3 = 0;
  if (v11 != 207 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
  {
    result = sub_22E838554(a1, 1, 0, 0, 0, 0);
LABEL_37:
    *a3 = 0;
    return result;
  }
  sub_22E884578(a1, (int *)(a1 + 16), 16, (uint64_t)&v67);
  v24 = *((unsigned __int16 *)a2 + 8);
  if ((v24 - 7) >= 6)
  {
    v25 = 0;
    if ((v24 - 13) >= 6 && v24 != 1)
      v25 = *((_QWORD *)a2 + 1);
  }
  else
  {
    v25 = 0;
  }
  v31 = v67;
  if (!v67)
  {
    v31 = (unsigned __int8 *)sub_22E3B8AAC(v68);
    v67 = v31;
  }
  v31[*v31 + 1] = 5;
  v32 = v67;
  v33 = *v67;
  *v67 = v33 + 1;
  *(_QWORD *)&v32[8 * v33 + 16] = v25;
  v32[(v33 + 1) + 1] = 4;
  v34 = v67;
  v35 = *v67;
  *v67 = v35 + 1;
  *(_QWORD *)&v34[8 * v35 + 16] = 21;
  sub_22E3BB0B8((uint64_t)&v67);
  return 1;
}

unint64_t sub_22E83F964(uint64_t a1)
{
  char v2;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 1) != 0)
    return sub_22E883528(a1, 1, &v2);
  else
    return sub_22F2E2774(a1);
}

unint64_t sub_22E83F9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  const char *v9;
  const char *v13;
  const char *v22;

  v2 = 0;
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 != 28521 || *(_BYTE *)(a1 + 2) != 115)
        return 0;
      v4 = (unint64_t)"iOS" & 0xFF;
      v5 = (unint64_t)"iOS" & 0xFFFFFFFFFFFFFF00;
      return v4 | v5;
    case 4:
      if (*(_DWORD *)a1 == 1936684660)
      {
        v6 = "tvOS";
      }
      else
      {
        if (*(_DWORD *)a1 != 1936683640)
          return 0;
        v6 = "xrOS";
      }
      v4 = v6;
      v5 = (unint64_t)v6 & 0xFFFFFFFFFFFFFF00;
      return v4 | v5;
    case 5:
      if (*(_DWORD *)a1 == 1868783981 && *(_BYTE *)(a1 + 4) == 115)
      {
        v9 = "macOS";
        goto LABEL_106;
      }
      if (*(_DWORD *)a1 == 1718187891 && *(_BYTE *)(a1 + 4) == 116)
      {
        v9 = "Swift";
LABEL_106:
        v4 = v9;
        v5 = (unint64_t)v9 & 0xFFFFFFFFFFFFFF00;
        return v4 | v5;
      }
      return 0;
    case 7:
      if (*(_DWORD *)a1 == 1919184481 && *(_DWORD *)(a1 + 3) == 1684631410)
      {
        v13 = "Android";
      }
      else if (*(_DWORD *)a1 == 1751348582 && *(_DWORD *)(a1 + 3) == 1634300776)
      {
        v13 = "Fuchsia";
      }
      else
      {
        if (*(_DWORD *)a1 != 1668571511 || *(_DWORD *)(a1 + 3) != 1936681059)
          return 0;
        v13 = "watchOS";
      }
      v4 = v13;
      v5 = (unint64_t)v13 & 0xFFFFFFFFFFFFFF00;
      return v4 | v5;
    case 8:
      if (*(_QWORD *)a1 != 0x736F656764697262)
        return 0;
      v4 = (unint64_t)"bridgeOS" & 0xFF;
      v5 = (unint64_t)"bridgeOS" & 0xFFFFFFFFFFFFFF00;
      return v4 | v5;
    case 9:
      if (*(_QWORD *)a1 != 0x696B726576697264 || *(_BYTE *)(a1 + 8) != 116)
        return 0;
      v4 = (unint64_t)"DriverKit" & 0xFF;
      v5 = (unint64_t)"DriverKit" & 0xFFFFFFFFFFFFFF00;
      return v4 | v5;
    case 11:
      if (*(_QWORD *)a1 != 0x6C6174616363616DLL || *(_QWORD *)(a1 + 3) != 0x7473796C61746163)
        return 0;
      v4 = (unint64_t)"macCatalyst" & 0xFF;
      v5 = (unint64_t)"macCatalyst" & 0xFFFFFFFFFFFFFF00;
      return v4 | v5;
    case 17:
      if (*(_QWORD *)a1 != 0x5F7070615F736F69
        || *(_QWORD *)(a1 + 8) != 0x6F69736E65747865
        || *(_BYTE *)(a1 + 16) != 110)
      {
        return 0;
      }
      v4 = (unint64_t)"iOS (App Extension)" & 0xFF;
      v5 = (unint64_t)"iOS (App Extension)" & 0xFFFFFFFFFFFFFF00;
      return v4 | v5;
    case 18:
      if (*(_QWORD *)a1 == 0x7070615F736F7674
        && *(_QWORD *)(a1 + 8) == 0x69736E657478655FLL
        && *(_WORD *)(a1 + 16) == 28271)
      {
        v22 = "tvOS (App Extension)";
      }
      else
      {
        if (*(_QWORD *)a1 != 0x7070615F736F7278
          || *(_QWORD *)(a1 + 8) != 0x69736E657478655FLL
          || *(_WORD *)(a1 + 16) != 28271)
        {
          return 0;
        }
        v22 = "xrOS (App Extension)";
      }
      v4 = v22;
      v5 = (unint64_t)v22 & 0xFFFFFFFFFFFFFF00;
      return v4 | v5;
    case 19:
      if (*(_QWORD *)a1 != 0x70615F736F63616DLL
        || *(_QWORD *)(a1 + 8) != 0x736E657478655F70
        || *(_QWORD *)(a1 + 11) != 0x6E6F69736E657478)
      {
        return 0;
      }
      v4 = (unint64_t)"macOS (App Extension)" & 0xFF;
      v5 = (unint64_t)"macOS (App Extension)" & 0xFFFFFFFFFFFFFF00;
      return v4 | v5;
    case 21:
      if (*(_QWORD *)a1 != 0x5F736F6863746177
        || *(_QWORD *)(a1 + 8) != 0x657478655F707061
        || *(_QWORD *)(a1 + 13) != 0x6E6F69736E657478)
      {
        return 0;
      }
      v4 = (unint64_t)"watchOS (App Extension)" & 0xFF;
      v5 = (unint64_t)"watchOS (App Extension)" & 0xFFFFFFFFFFFFFF00;
      return v4 | v5;
    case 25:
      if (*(_QWORD *)a1 != 0x6C6174616363616DLL
        || *(_QWORD *)(a1 + 8) != 0x5F7070615F747379
        || *(_QWORD *)(a1 + 16) != 0x6F69736E65747865
        || *(_BYTE *)(a1 + 24) != 110)
      {
        return 0;
      }
      v4 = (unint64_t)"macCatalyst (App Extension)" & 0xFF;
      v5 = (unint64_t)"macCatalyst (App Extension)" & 0xFFFFFFFFFFFFFF00;
      return v4 | v5;
    default:
      return v2;
  }
}

uint64_t sub_22E83FE28(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  void *__p;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35[4];

  v5 = sub_22E8385C0((_BYTE *)a1, a2);
  v6 = sub_22E83778C(a1, v5, 6);
  v7 = v6;
  if ((v6 & 1) == 0)
  {
    sub_22EFF605C(v6 & 0xFFFFFFFFFFFFFFFELL);
    if (a3)
      v9 = 1887;
    else
      v9 = 1775;
    v10 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v10 + 312) = v8;
    *(_DWORD *)(v10 + 316) = v9;
    if (*(char *)(v10 + 311) < 0)
    {
      **(_BYTE **)(v10 + 288) = 0;
      *(_QWORD *)(v10 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v10 + 288) = 0;
      *(_BYTE *)(v10 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v35, v10);
    sub_22F0D5A50(v7 & 0xFFFFFFFFFFFFFFFELL);
    v29 = 0;
    v30 = 0;
    v32 = 0;
    v33 = 0x100000000000000;
    v27 = v11 | ((unint64_t)v11 << 32);
    v28 = 0;
    v31 = (void *)40;
    v34 = 0;
    sub_22E6D82D0(v35, &v27);
    v12 = *(_QWORD *)(a1 + 8);
    sub_22F0D60E4(v7 & 0xFFFFFFFFFFFFFFFELL);
    v14 = sub_22F141A3C(v13, 0, *(_QWORD **)(v12 + 88), *(_DWORD **)(v12 + 56));
    v21 = 0;
    v22 = 0;
    v24 = 0;
    v25 = 0x100000000000000;
    v19 = v14 | ((unint64_t)v14 << 32);
    v20 = 0;
    __p = (void *)41;
    v26 = 0;
    sub_22E6D82D0(v35, &v19);
    sub_22F0D4E74(v7 & 0xFFFFFFFFFFFFFFFELL);
    v16 = v15;
    v17 = v35[0];
    if (!v35[0])
    {
      v17 = sub_22E3B8AAC(v35[1]);
      v35[0] = v17;
    }
    sub_22E4D6448(v17 + 336, v16, 1);
    if (SHIBYTE(v25) < 0)
      operator delete(__p);
    if (SHIBYTE(v33) < 0)
      operator delete(v31);
    sub_22E3BB0B8((uint64_t)v35);
  }
  return v7;
}

void sub_22E83FFC4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22E83FFD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  unsigned int v12;

  v4 = sub_22F2E6D78(a2);
  if (!v4)
  {
    if (*(_DWORD *)(a2 + 24))
      return **(_QWORD **)(a2 + 16) == 0;
    return 0;
  }
  if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 33 <= 9)
    return *(_BYTE *)(a1 + 8) != 0;
  if (!*(_BYTE *)(a1 + 56))
    return 0;
  result = sub_22EC6B6AC((_BYTE *)a1, a2);
  if (!(_DWORD)result)
    return result;
  v6 = *(unsigned __int16 *)(a1 + 48);
  result = 1;
  if (v6 > 0x3F || ((1 << v6) & 0x8000001002000000) == 0)
    return result;
  v7 = *(unsigned int *)(a2 + 24);
  v8 = *(_QWORD **)(a2 + 16);
  if ((_DWORD)v7 && !*v8)
    v9 = &v8[v7];
  else
    v9 = *(uint64_t **)(a2 + 16);
  v10 = &v8[v7];
  if (v9 == v10)
    return 0;
  while (1)
  {
    v11 = *(_DWORD *)(*v9 + 28);
    v12 = v11 & 0x7F;
    if (v12 <= 0x2F && ((1 << (v11 & 0x7F)) & 0xC00000060000) != 0)
    {
      v11 = *(_DWORD *)(sub_22EFBAEA4(*v9) + 28);
      v12 = v11 & 0x7F;
    }
    if (v12 - 48 <= 0x1A && (v11 & 0x7Eu) - 52 > 5)
      break;
    result = 0;
    if (++v9 == v10)
      return result;
  }
  return 1;
}

uint64_t sub_22E840130(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  BOOL v4;
  unint64_t v5;

  v2 = a1[2];
  if (v2)
    v3 = *(_DWORD *)(a2 + 24) == 0;
  else
    v3 = 1;
  v4 = !v3 && *(_BYTE *)(a2 + 61) == 0;
  if (v4
    && ((*(_QWORD *)a2 & 7) != 0 ? (v5 = 0) : (v5 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8),
        v5 == v2 && *(_QWORD *)(a2 + 8) == a1[3]))
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return (*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1) - 1;
  }
}

__n128 sub_22E84019C@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)v4 = &off_24FAA4AE8;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a1 + 32);
  result = *(__n128 *)(a1 + 41);
  *(__n128 *)(v4 + 41) = result;
  *a2 = v4;
  return result;
}

unint64_t sub_22E840204(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  unsigned __int8 v9;
  _OWORD *v10;
  __int128 v11;

  if (*(_QWORD *)(a1 + 96))
  {
    sub_22F2E0390(a1 + 80, (uint64_t)a2, a2);
    return ((unint64_t)v9 << 32) | 1;
  }
  else
  {
    v4 = sub_22E840314((uint64_t *)a1, (uint64_t)a2);
    v5 = *(_QWORD *)a1;
    v6 = *(unsigned int *)(a1 + 8);
    if (v4 == *(_QWORD *)a1 + 16 * v6)
    {
      if (v6 > 3)
      {
        do
        {
          v10 = (_OWORD *)(*(_QWORD *)a1 + 16 * v6 - 16);
          sub_22F2E0390(a1 + 80, (uint64_t)v10, v10);
          LODWORD(v6) = *(_DWORD *)(a1 + 8) - 1;
          *(_DWORD *)(a1 + 8) = v6;
        }
        while ((_DWORD)v6);
        sub_22F2E0390(a1 + 80, (uint64_t)a2, a2);
      }
      else
      {
        v8 = *a2;
        if (v6 >= *(_DWORD *)(a1 + 12))
        {
          v11 = *a2;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v8 = v11;
          v5 = *(_QWORD *)a1;
          v6 = *(unsigned int *)(a1 + 8);
        }
        *(_OWORD *)(v5 + 16 * v6) = v8;
        ++*(_DWORD *)(a1 + 8);
      }
      return 0x100000001;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_22E840314(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  v4 = *a1 + 16 * v3;
  if ((_DWORD)v3)
  {
    v5 = *(const void **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = 16 * v3;
    while (*(_QWORD *)(v2 + 8) != v6 || v6 && memcmp(*(const void **)v2, v5, v6))
    {
      v2 += 16;
      v7 -= 16;
      if (!v7)
        return v4;
    }
    return v2;
  }
  return v4;
}

_QWORD *sub_22E840390(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  void **v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  void *v17;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11 >> 61)
      abort();
    result = operator new(8 * v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v11];
    v12 = a3 - v6;
    if (v12)
      result = memcpy(result, v6, v12);
    v13 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v13 = (void **)(result + 1);
  v14 = (_BYTE *)result[1];
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
  {
    v12 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v17 = (void *)*result;
LABEL_20:
    result = memmove(v17, __src, v12);
    goto LABEL_21;
  }
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = memmove((void *)*result, __src, v14 - v9);
    v9 = (char *)*v13;
  }
  v12 = a3 - v16;
  if (v12)
  {
    v17 = v9;
    __src = v16;
    goto LABEL_20;
  }
LABEL_21:
  *v13 = &v9[v12];
  return result;
}

uint64_t sub_22E8404C4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 0;
    v9 = v14;
    do
    {
      v10 = *(_QWORD *)(a1 + v8 + 8);
      if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)v9 = v10;
        *((_WORD *)v9 + 4) = *(_WORD *)(a1 + v8 + 16);
        v9 += 16;
      }
      v8 += 16;
    }
    while (v8 != 64);
    if (a2 > 4)
    {
      *(_DWORD *)a1 &= ~1u;
      v11 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v11;
    }
    return sub_22F2E6EDC(a1, (uint64_t)v14, (uint64_t)v9);
  }
  else
  {
    v6 = *(llvm **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = MEMORY[0x23489D23C](16 * a2, 8);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_22F2E6EDC(a1, (uint64_t)v6, (uint64_t)v6 + 16 * v7);
    return llvm::deallocate_buffer(v6, (void *)(16 * v7));
  }
}

_QWORD *sub_22E840640(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v1 = *result;
  if (*(_BYTE *)(*result + 48))
  {
    v2 = result[1];
    v3 = *(_DWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 64) = sub_22E840670;
    *(_QWORD *)(v1 + 72) = v2;
    *(_QWORD *)(v1 + 56) = 0;
    *(_DWORD *)(v1 + 52) = v3;
  }
  return result;
}

unint64_t sub_22E840670(uint64_t *a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = *a1;
  result = sub_22E9C3C80();
  *(_BYTE *)(v1 + 948) = 1;
  return result;
}

char *sub_22E8406B8(uint64_t a1, unint64_t a2, unsigned int *a3, unsigned int *a4, int a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  char *result;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28[4];

  if ((a6 & 1) == 0)
    sub_22F18FB4C(a2, a3);
  sub_22F18FB4C(a2, a4);
  v12 = *a3;
  v13 = *a4;
  v14 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v14 + 312) = v12;
  *(_DWORD *)(v14 + 316) = 1607;
  if (*(char *)(v14 + 311) < 0)
  {
    **(_BYTE **)(v14 + 288) = 0;
    *(_QWORD *)(v14 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v14 + 288) = 0;
    *(_BYTE *)(v14 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v28, v14);
  if (a5 <= 144)
  {
    if (a5)
    {
      if (a5 == 131)
        v15 = 2;
      else
        v15 = 3;
    }
    else
    {
      v15 = 0;
    }
  }
  else if (a5 > 347)
  {
    if (a5 == 352)
      v15 = 6;
    else
      v15 = 1;
  }
  else if (a5 == 145)
  {
    v15 = 4;
  }
  else
  {
    v15 = 5;
  }
  v16 = (unsigned __int8 *)v28[0];
  if (!v28[0])
  {
    v16 = (unsigned __int8 *)sub_22E3B8AAC(v28[1]);
    v28[0] = (uint64_t)v16;
  }
  v16[*v16 + 1] = 2;
  v17 = v28[0];
  v18 = *(unsigned __int8 *)v28[0];
  *(_BYTE *)v28[0] = v18 + 1;
  *(_QWORD *)(v17 + 8 * v18 + 16) = v15;
  v23 = 0;
  v22 = 0;
  v25 = 0;
  v26 = 0x400000000000000;
  v27 = 0;
  v20 = v12 | (v13 << 32);
  v21 = 1;
  __p = (void *)976887868;
  sub_22E6D82D0(v28, &v20);
  if (SHIBYTE(v26) < 0)
    operator delete(__p);
  sub_22E3BB0B8((uint64_t)v28);
  *((_WORD *)a4 + 8) = 71;
  --*a4;
  a4[1] = 2;
  *((_WORD *)a3 + 8) = 46;
  a3[1] = 1;
  result = sub_22E80F2F4(a2, (unint64_t)a4, 1);
  if ((a6 & 1) == 0)
    return sub_22E80F2F4(a2, (unint64_t)a3, 1);
  return result;
}

uint64_t sub_22E8408AC(uint64_t a1, uint64_t a2, unint64_t a3, char a4, int a5, _BYTE *a6, char a7, _QWORD *a8, char a9, char a10)
{
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  _QWORD *v20;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  unint64_t v48;
  __int16 v49;
  __int16 v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __int128 v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  int v91;
  int v92;
  unsigned __int8 **v93;
  int v94;
  __int128 v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  unsigned __int8 *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  __int128 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v118;
  int v119;
  __int128 v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned __int8 *v127;
  char v128;
  char *v129;
  unsigned __int8 *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t (*v135)(uint64_t);
  unint64_t v136;
  int v137;
  int v138;
  char v139;
  _QWORD *v140;
  _BYTE *v141;
  int v142;
  __int16 v145;
  uint64_t v146;
  _OWORD *v147;
  int v148;
  char v150;
  uint64_t v151;
  _QWORD v152[2];
  unsigned int v153;
  int v154;
  unsigned __int8 *v155[4];
  __int128 v156;
  uint64_t v157;
  _BYTE v158[32];
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE v162[64];
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  int v172;
  uint64_t v173;
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  v12 = (unsigned int *)(a1 + 16);
  v13 = *(unsigned __int16 *)(a1 + 32);
  if (v13 == 399)
  {
    v14 = *(_QWORD *)(a1 + 88);
    v15 = *(unsigned int *)(a1 + 16);
    LODWORD(v16) = *(_DWORD *)(a1 + 20);
    if ((_DWORD)v16)
      v16 = v16;
    else
      v16 = v15;
    sub_22E95AAE0(v14, *(unint64_t **)(a1 + 24), v15 | (v16 << 32), a2);
    v17 = *(_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 20))
      v17 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 40) = v17;
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
LABEL_8:
    v18 = 0;
    return v18 & 1;
  }
  v20 = a8;
  if (a6 && *a6)
  {
    *a6 = 0;
    v23 = 1;
  }
  else
  {
    v23 = 0;
  }
  if (a8)
    *a8 = 0;
  if (v13 == 311)
    goto LABEL_44;
  if (v13 != 71)
    goto LABEL_28;
  v24 = *(_QWORD *)(a1 + 8);
  v25 = *(_QWORD *)(v24 + 2816);
  if (v25 >= *(unsigned int *)(v24 + 2784))
    v26 = sub_22F162D2C(v24, 1u);
  else
    v26 = *(_QWORD *)(v24 + 2776) + 24 * v25;
  v27 = *(unsigned __int16 *)(v26 + 16);
  if ((v27 & 0xFFFFFFF7) == 0x84)
    goto LABEL_8;
  if (v27 != 23)
  {
    v141 = a6;
    v42 = *(_QWORD *)(a1 + 88);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
    sub_22F2F2C50((unint64_t *)a2, *(_QWORD *)(v42 + 88), *(_DWORD *)(a1 + 40));
    if (*(_WORD *)(a1 + 32) != 311)
    {
      v142 = v23;
      v41 = 1;
      goto LABEL_51;
    }
LABEL_44:
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
    if (*(_WORD *)(a1 + 32) == 71)
    {
      v43 = *(_DWORD *)(a1 + 40);
      v44 = *(_QWORD **)(a1 + 88);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
      v18 = sub_22E958824(v44, v43, *(_DWORD *)(a1 + 40), a2);
      return v18 & 1;
    }
    v45 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v45 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v45 + 316) = 1493;
    if (*(char *)(v45 + 311) < 0)
    {
      **(_BYTE **)(v45 + 288) = 0;
      *(_QWORD *)(v45 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v45 + 288) = 0;
      *(_BYTE *)(v45 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v158, v45);
    sub_22E3BB0B8((uint64_t)v158);
LABEL_49:
    v18 = 1;
    return v18 & 1;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
  v28 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(v28 + 312) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v28 + 316) = 15;
  if (*(char *)(v28 + 311) < 0)
  {
    **(_BYTE **)(v28 + 288) = 0;
    *(_QWORD *)(v28 + 296) = 0;
  }
  else
  {
    *(_BYTE *)(v28 + 288) = 0;
    *(_BYTE *)(v28 + 311) = 0;
  }
  sub_22E78E558((uint64_t)v162, v28);
  v29 = *(unsigned __int8 **)v162;
  if (!*(_QWORD *)v162)
  {
    v29 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v162[8]);
    *(_QWORD *)v162 = v29;
  }
  v29[*v29 + 1] = 4;
  v30 = *(_QWORD *)v162;
  v31 = **(_BYTE **)v162;
  **(_BYTE **)v162 = v31 + 1;
  *(_QWORD *)(v30 + 8 * v31 + 16) = 5;
  sub_22E3BB0B8((uint64_t)v162);
  v13 = *(unsigned __int16 *)(a1 + 32);
  if (v13 == 311)
    goto LABEL_44;
LABEL_28:
  v141 = a6;
  if (v13 == 407 || v13 == 162)
  {
    *(_QWORD *)v162 = 0;
    memset(&v162[16], 0, 24);
    *(_QWORD *)&v162[40] = a1 + 960;
    v173 = 0;
    *(_OWORD *)&v162[48] = 0u;
    v163 = 0u;
    v164 = 0u;
    v165 = 0u;
    v166 = 0u;
    v167 = 0u;
    v168 = 0u;
    v169 = 0u;
    v170 = 0u;
    v171 = 0u;
    v172 = 0;
    v32 = *(_DWORD *)(a1 + 16);
    v33 = sub_22E82C1E4(a1, (uint64_t)v162);
    if ((*(_QWORD *)v162 & 0x3F000) == 0x22000 || *(_WORD *)(a1 + 32) != 71)
    {
      sub_22F2E3B50(a1, v162, v32, v33);
      v40 = 0;
    }
    else
    {
      v34 = v20;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
      v35 = *(_DWORD *)(a1 + 40);
      if (sub_22E95A2FC(*(_QWORD *)(a1 + 88), a2, (uint64_t)v162, v35, v36, v37, v38, v39))
      {
        if (!*(_DWORD *)a2)
          *(_DWORD *)a2 = v32;
        *(_DWORD *)(a2 + 4) = v35;
        *(_QWORD *)(a2 + 8) = 0;
        v40 = 1;
        *(_DWORD *)(a2 + 24) = 0;
      }
      else
      {
        v40 = 1;
      }
      v20 = v34;
    }
    if (DWORD1(v164))
      free(*((void **)&v163 + 1));
    sub_22E8D1BC4(*(uint64_t *)&v162[40], (uint64_t)&v162[40]);
    sub_22E80F94C((uint64_t *)&v162[48]);
    sub_22E80F94C((uint64_t *)&v162[32]);
    if (!v40)
      goto LABEL_8;
    v142 = v23;
    v41 = 1;
  }
  else
  {
    v142 = v23;
    v41 = 0;
  }
LABEL_51:
  v139 = 0;
  v138 = *(unsigned __int8 *)(a1 + 48);
  v146 = a1 + 2336;
  v137 = *(_DWORD *)(a1 + 52);
  v135 = *(uint64_t (**)(uint64_t))(a1 + 64);
  v136 = *(_QWORD *)(a1 + 56);
  v147 = (_OWORD *)(a1 + 48);
  v134 = *(_QWORD *)(a1 + 72);
  v140 = v20;
LABEL_52:
  v148 = v41;
  while (1)
  {
    v46 = *(unsigned __int16 *)(a1 + 32);
    if ((v41 & 1) == 0)
      goto LABEL_56;
    if (v46 == 3)
    {
      v121 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(v121 + 752))
      {
        *(_BYTE *)(v121 + 864) = 1;
        *(_BYTE *)(*(_QWORD *)(v121 + 48) + 6) = 1;
      }
      v122 = 0;
      *(_WORD *)(a1 + 32) = 1;
      v123 = *(unint64_t **)(a1 + 88);
      v124 = v123[1611];
      if (v138)
      {
        if (v137 == *(_DWORD *)a2)
        {
          v122 = v136;
          if (v136 <= 0xF)
          {
            if (v135)
              v122 = v135(v134);
            else
              v122 = 0;
          }
        }
      }
      sub_22E9C6624(v123, v124, a2, a5, a10, a3, v122);
      *(_DWORD *)(a2 + 4) = *v12;
      goto LABEL_49;
    }
    a3 = 0;
LABEL_56:
    if (v46 != 147)
    {
      if (v46 != 401)
      {
        v57 = v142;
        goto LABEL_70;
      }
      v55 = *(_QWORD *)(a1 + 8);
      v56 = *(_QWORD *)(v55 + 2816);
      v57 = v142;
      if (v56 >= *(unsigned int *)(v55 + 2784))
        v58 = sub_22F162D2C(v55, 1u);
      else
        v58 = *(_QWORD *)(v55 + 2776) + 24 * v56;
      if (*(_WORD *)(v58 + 16) != 71)
      {
        v46 = *(unsigned __int16 *)(a1 + 32);
LABEL_70:
        if (v46 != 5)
          goto LABEL_205;
        v59 = *(_QWORD *)(a1 + 24);
        v60 = *(_QWORD *)(a1 + 8);
        v61 = *(_QWORD *)(v60 + 2816);
        if (v61 >= *(unsigned int *)(v60 + 2784))
          v62 = sub_22F162D2C(v60, 1u);
        else
          v62 = *(_QWORD *)(v60 + 2776) + 24 * v61;
        v67 = *(_OWORD *)v62;
        v157 = *(_QWORD *)(v62 + 16);
        v156 = v67;
        v68 = *v12;
        v152[0] = a3;
        v152[1] = v59;
        v153 = v68;
        v154 = v67;
        v69 = (unsigned __int16)v157;
        if ((unsigned __int16)v157 == 61)
        {
          if (!*(_BYTE *)(a1 + 945)
            && sub_22E95A504(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, (uint64_t)v152, a5))
          {
            v70 = *(_QWORD *)(a1 + 8);
            v71 = *(_QWORD *)(v70 + 2816) + 1;
            v72 = v71 >= *(unsigned int *)(v70 + 2784) ? sub_22F162D2C(v70, 2u) : *(_QWORD *)(v70 + 2776) + 24 * v71;
            if (*(_WORD *)(v72 + 16) == 5)
            {
              v76 = *(_QWORD *)(a1 + 96);
              *(_DWORD *)(v76 + 312) = v156;
              *(_DWORD *)(v76 + 316) = 1760;
              if (*(char *)(v76 + 311) < 0)
              {
                **(_BYTE **)(v76 + 288) = 0;
                *(_QWORD *)(v76 + 296) = 0;
              }
              else
              {
                *(_BYTE *)(v76 + 288) = 0;
                *(_BYTE *)(v76 + 311) = 0;
              }
              sub_22E78E558((uint64_t)&v159, v76);
              *(_QWORD *)&v162[12] = 0;
              v162[20] = 0;
              *(_QWORD *)&v162[32] = 0;
              *(_QWORD *)&v162[40] = 0x200000000000000;
              *(_QWORD *)&v162[24] = 14906;
              v162[48] = 0;
              *(_QWORD *)v162 = v156 | ((unint64_t)v156 << 32);
              v162[8] = 1;
              sub_22E6D82D0((uint64_t *)&v159, v162);
              if ((v162[47] & 0x80000000) != 0)
                operator delete(*(void **)&v162[24]);
              sub_22E3BB0B8((uint64_t)&v159);
              LOWORD(v157) = 71;
LABEL_106:
              v77 = (uint64_t)v12;
              if (*(_WORD *)(a1 + 32) != 1)
              {
                v78 = *(_QWORD *)(a1 + 8);
                v79 = *(_QWORD *)(v78 + 2816) + 1;
                if (v79 >= *(unsigned int *)(v78 + 2784))
                  v77 = sub_22F162D2C(v78, 2u);
                else
                  v77 = *(_QWORD *)(v78 + 2776) + 24 * v79;
              }
              if (*(_WORD *)(v77 + 16) == 23)
              {
                v159 = *(_OWORD *)v12;
                v160 = *((_QWORD *)v12 + 2);
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
                v104 = *(_QWORD *)(a1 + 8);
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(v104, v12);
                v105 = sub_22F141A3C(*(unsigned int *)(a1 + 40), 0, *(_QWORD **)(v104 + 88), *(_DWORD **)(v104 + 56));
                v106 = *(_QWORD *)(a1 + 96);
                *(_DWORD *)(v106 + 312) = v105;
                *(_DWORD *)(v106 + 316) = 15;
                if (*(char *)(v106 + 311) < 0)
                {
                  **(_BYTE **)(v106 + 288) = 0;
                  *(_QWORD *)(v106 + 296) = 0;
                }
                else
                {
                  *(_BYTE *)(v106 + 288) = 0;
                  *(_BYTE *)(v106 + 311) = 0;
                }
                sub_22E78E558((uint64_t)v162, v106);
                v107 = *(unsigned __int8 **)v162;
                if (!*(_QWORD *)v162)
                {
                  v107 = (unsigned __int8 *)sub_22E3B8AAC(*(uint64_t *)&v162[8]);
                  *(_QWORD *)v162 = v107;
                }
                v107[*v107 + 1] = 4;
                v108 = *(_QWORD *)v162;
                v109 = **(_BYTE **)v162;
                **(_BYTE **)v162 = v109 + 1;
                *(_QWORD *)(v108 + 8 * v109 + 16) = 5;
                sub_22E3BB0B8((uint64_t)v162);
                sub_22F2E56C0(a1, (unint64_t)&v159);
                v110 = *(_QWORD *)(a1 + 8);
                v111 = *(_QWORD *)(v110 + 2816);
                if (v111 >= *(unsigned int *)(v110 + 2784))
                  v112 = sub_22F162D2C(v110, 1u);
                else
                  v112 = *(_QWORD *)(v110 + 2776) + 24 * v111;
                v113 = *(_OWORD *)v112;
                v157 = *(_QWORD *)(v112 + 16);
                v156 = v113;
              }
LABEL_111:
              v80 = (unsigned __int16)v157;
              v142 = v57;
              if ((unsigned __int16)v157 == 71)
              {
                if (v57)
                {
                  v81 = (uint64_t)v12;
                  if (*(_WORD *)(a1 + 32) != 1)
                  {
                    v82 = *(_QWORD *)(a1 + 8);
                    v83 = *(_QWORD *)(v82 + 2816) + 1;
                    if (v83 >= *(unsigned int *)(v82 + 2784))
                      v81 = sub_22F162D2C(v82, 2u);
                    else
                      v81 = *(_QWORD *)(v82 + 2776) + 24 * v83;
                  }
                  if (*(_WORD *)(v81 + 16) == 39)
                  {
LABEL_208:
                    v18 = 0;
                    *v141 = 1;
                    return v18 & 1;
                  }
                }
                if (*(_BYTE *)(a1 + 945))
                {
                  v87 = (uint64_t)v12;
                  if (*(_WORD *)(a1 + 32) != 1)
                  {
                    v88 = *(_QWORD *)(a1 + 8);
                    v89 = *(_QWORD *)(v88 + 2816) + 1;
                    if (v89 >= *(unsigned int *)(v88 + 2784))
                      v87 = sub_22F162D2C(v88, 2u);
                    else
                      v87 = *(_QWORD *)(v88 + 2776) + 24 * v89;
                  }
                  if (*(unsigned __int16 *)(v87 + 16) - 142 <= 0xD
                    && ((1 << (*(_WORD *)(v87 + 16) + 114)) & 0x2007) != 0)
                  {
                    v128 = v41;
                    sub_22E884578(a1, (int *)v87, 1770, (uint64_t)&v159);
                    v129 = off_24FCAD0E8[*(unsigned __int16 *)(v87 + 16)];
                    v130 = (unsigned __int8 *)v159;
                    if (!(_QWORD)v159)
                    {
                      v130 = (unsigned __int8 *)sub_22E3B8AAC(*((uint64_t *)&v159 + 1));
                      *(_QWORD *)&v159 = v130;
                    }
                    v130[*v130 + 1] = 1;
                    v131 = v159;
                    v132 = *(unsigned __int8 *)v159;
                    *(_BYTE *)v159 = v132 + 1;
                    *(_QWORD *)(v131 + 8 * v132 + 16) = v129;
                    *(_QWORD *)&v162[12] = 0;
                    v162[20] = 0;
                    *(_QWORD *)&v162[32] = 0;
                    *(_QWORD *)&v162[40] = 0x100000000000000;
                    *(_QWORD *)&v162[24] = 58;
                    v162[48] = 0;
                    *(_QWORD *)v162 = v156 | ((unint64_t)v156 << 32);
                    v162[8] = 1;
                    sub_22E6D82D0((uint64_t *)&v159, v162);
                    if ((v162[47] & 0x80000000) != 0)
                      operator delete(*(void **)&v162[24]);
                    sub_22E3BB0B8((uint64_t)&v159);
                    sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v162);
                    strcpy(&v162[16], "=");
                    sub_22E80F2F4(*(_QWORD *)(a1 + 8), (unint64_t)v162, 1);
                    LOBYTE(v41) = v128;
                    goto LABEL_205;
                  }
                }
                if (v140)
                  *v140 = v59;
                *(_OWORD *)v162 = *(_OWORD *)v12;
                *(_QWORD *)&v162[16] = *((_QWORD *)v12 + 2);
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
                v90 = *(_DWORD *)(a1 + 40);
                v159 = *(_OWORD *)v12;
                v160 = *((_QWORD *)v12 + 2);
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
                v91 = *(_DWORD *)(a1 + 40);
                LOBYTE(v155[0]) = 0;
                v92 = *(unsigned __int8 *)(a1 + 945);
                if (*(_BYTE *)(a1 + 945))
                  v93 = v155;
                else
                  v93 = 0;
                if (!sub_22E95A2AC(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)v152, a5, a2, 0, v93, a9))
                {
                  v41 = 1;
                  v94 = 2;
LABEL_172:
                  if (v94 == 2)
                    goto LABEL_52;
                  v57 = v142;
                  if (v94 == 3)
                    goto LABEL_205;
                  v18 = v139;
                  return v18 & 1;
                }
                if (!v92 || !LOBYTE(v155[0]))
                {
                  if (!*(_DWORD *)a2)
                    *(_DWORD *)a2 = v90;
                  *(_DWORD *)(a2 + 4) = v91;
                  *(_QWORD *)(a2 + 8) = 0;
                  v41 = 1;
                  v94 = 2;
                  *(_DWORD *)(a2 + 24) = 0;
                  goto LABEL_172;
                }
                LOWORD(v160) = 61;
                sub_22E80F2F4(*(_QWORD *)(a1 + 8), (unint64_t)v12, 1);
                sub_22E80F2F4(*(_QWORD *)(a1 + 8), (unint64_t)&v159, 1);
                *(_OWORD *)v12 = *(_OWORD *)v162;
                *((_QWORD *)v12 + 2) = *(_QWORD *)&v162[16];
LABEL_151:
                v94 = 3;
                goto LABEL_172;
              }
              if ((unsigned __int16)v157 == 19 && DWORD1(v156) == 2)
              {
                v84 = (uint64_t)v12;
                if (*(_WORD *)(a1 + 32) != 1)
                {
                  v85 = *(_QWORD *)(a1 + 8);
                  v86 = *(_QWORD *)(v85 + 2816) + 1;
                  if (v86 >= *(unsigned int *)(v85 + 2784))
                    v84 = sub_22F162D2C(v85, 2u);
                  else
                    v84 = *(_QWORD *)(v85 + 2776) + 24 * v86;
                }
                v95 = *(_OWORD *)v84;
                v160 = *(_QWORD *)(v84 + 16);
                v159 = v95;
                if ((unsigned __int16)v160 == 61 && sub_22F2E6FAC(a1, (int *)&v156, (int *)&v159))
                {
                  v155[0] = 0;
                  v114 = *(_DWORD *)(a1 + 16);
                  *(_DWORD *)v162 = 0;
                  *(_QWORD *)&v162[8] = v59;
                  *(_DWORD *)&v162[24] = v114;
                  *(_DWORD *)&v162[28] = v114;
                  LOBYTE(v151) = 0;
                  if (sub_22ED562E8(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, 0, (int *)v162, a3, a5, (unint64_t *)v155, &v151, 0))sub_22E8406B8(a1, *(_QWORD *)(a1 + 8), (unsigned int *)&v156, (unsigned int *)&v159, 0, 0);
                }
                v80 = (unsigned __int16)v157;
              }
              if (v80 != 46)
                goto LABEL_205;
              v151 = 0;
              v96 = *(_DWORD *)(a1 + 16);
              LODWORD(v159) = 0;
              *((_QWORD *)&v159 + 1) = v59;
              LODWORD(v161) = v96;
              HIDWORD(v161) = v96;
              v150 = 0;
              v97 = sub_22ED562E8(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, 0, (int *)&v159, a3, a5, (unint64_t *)&v151, &v150, 0);
              if (v97)
              {
                v98 = v97;
                if (v97 == 5 && (a7 & 1) == 0 && sub_22F2F0E30(a1, 1) == 1)
                  goto LABEL_151;
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
                v99 = sub_22E880230(a1, v151, v98, a2, 0, (uint64_t)&v159, 0, 0);
                if (v99)
                  v94 = 1;
                else
                  v94 = 2;
              }
              else
              {
                if (!v150 || !(a3 | *(_QWORD *)(a2 + 8)) || (a7 & 1) == 0 && sub_22F2F0E30(a1, 1))
                  goto LABEL_205;
                if ((a4 & 1) == 0)
                {
                  if ((**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) & 0x20) != 0)
                    v100 = 1964;
                  else
                    v100 = 1604;
                  v101 = *(_QWORD *)(a1 + 96);
                  *(_DWORD *)(v101 + 312) = *(_DWORD *)(a1 + 16);
                  *(_DWORD *)(v101 + 316) = v100;
                  if (*(char *)(v101 + 311) < 0)
                  {
                    **(_BYTE **)(v101 + 288) = 0;
                    *(_QWORD *)(v101 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v101 + 288) = 0;
                    *(_BYTE *)(v101 + 311) = 0;
                  }
                  sub_22E78E558((uint64_t)v155, v101);
                  sub_22E3B89A8(v155, (void *)(*(_QWORD *)(v59 + 16) + 16), **(unsigned int **)(v59 + 16));
                  v102 = *v12;
                  *(_QWORD *)&v162[12] = 0;
                  v162[20] = 0;
                  *(_QWORD *)v162 = v102 | (v102 << 32);
                  v162[8] = 0;
                  *(_QWORD *)&v162[34] = 0;
                  *(_QWORD *)&v162[39] = 0;
                  strcpy(&v162[24], "template ");
                  strcpy(&v162[47], "\t");
                  sub_22E6D82D0((uint64_t *)v155, v162);
                  if ((v162[47] & 0x80000000) != 0)
                    operator delete(*(void **)&v162[24]);
                  sub_22E3BB0B8((uint64_t)v155);
                }
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
                sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
                v103 = sub_22ED66924(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, *(_DWORD *)(a1 + 40), (uint64_t)&v159, a3, a5, (unint64_t *)&v151, 1);
                v99 = sub_22E880230(a1, v151, v103, a2, 0, (uint64_t)&v159, 0, 0);
                if (v99)
                  v94 = 1;
                else
                  v94 = 2;
              }
              v139 |= v99;
              goto LABEL_172;
            }
          }
          v69 = (unsigned __int16)v157;
        }
        if (v69 != 71)
          goto LABEL_111;
        goto LABEL_106;
      }
      v63 = *(_QWORD *)(a1 + 24);
      if (v142)
      {
        v64 = (uint64_t)v12;
        if (*(_WORD *)(a1 + 32) != 1)
        {
          v65 = *(_QWORD *)(a1 + 8);
          v66 = *(_QWORD *)(v65 + 2816) + 1;
          if (v66 >= *(unsigned int *)(v65 + 2784))
            v64 = sub_22F162D2C(v65, 2u);
          else
            v64 = *(_QWORD *)(v65 + 2776) + 24 * v66;
        }
        if (*(_WORD *)(v64 + 16) == 39)
          goto LABEL_208;
      }
      if (v140)
        *v140 = *(_QWORD *)(v63 + 8);
      v73 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 20))
        v73 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 40) = v73;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
      v75 = *(_DWORD *)(a1 + 40);
      if (!*(_DWORD *)(v63 + 32)
        || *(_BYTE *)(v63 + 48)
        || (v41 = 1,
            sub_22E95A564(*(_QWORD **)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, *(_DWORD *)v63, *(_QWORD *)(v63 + 24), *(_DWORD *)(v63 + 4), *(_DWORD *)(v63 + 36), v74, v63 + 56, *(unsigned int *)(v63 + 44), *(_DWORD *)(v63 + 40), 0, v75)))
      {
        if (!*(_DWORD *)a2)
          *(_DWORD *)a2 = *(_DWORD *)(v63 + 4);
        *(_DWORD *)(a2 + 4) = v75;
        *(_QWORD *)(a2 + 8) = 0;
        v41 = 1;
        *(_DWORD *)(a2 + 24) = 0;
      }
      goto LABEL_52;
    }
    if (!(v41 & 1 | (a3 != 0)))
    {
      LOBYTE(v41) = 0;
      v57 = v142;
      goto LABEL_205;
    }
    v47 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)v162 = *v147;
    *(_OWORD *)&v162[16] = v47;
    v156 = *(_OWORD *)v12;
    v157 = *((_QWORD *)v12 + 2);
    v48 = *(unsigned int *)(a1 + 2344);
    v145 = *(_WORD *)(a1 + 80);
    v49 = *(_WORD *)(a1 + 82);
    v50 = *(_WORD *)(a1 + 84);
    sub_22F1629F8(*(_QWORD *)(a1 + 8));
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
    sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
    v51 = *(_DWORD *)(a1 + 40);
    LODWORD(v159) = 0;
    *((_QWORD *)&v159 + 1) = 0;
    v161 = 0;
    v52 = *(unsigned __int16 *)(a1 + 32);
    if (v52 == 141)
    {
      if (sub_22E841B34(a1, a2, (uint64_t)&v159))
      {
        sub_22E80FADC(v146, v48);
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
        goto LABEL_203;
      }
      if ((v159 | 2) != 3)
      {
        v125 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v125 + 312) = v161;
        *(_DWORD *)(v125 + 316) = 1571;
        if (*(char *)(v125 + 311) < 0)
        {
          **(_BYTE **)(v125 + 288) = 0;
          *(_QWORD *)(v125 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v125 + 288) = 0;
          *(_BYTE *)(v125 + 311) = 0;
        }
        v57 = v142;
        sub_22E78E558((uint64_t)v155, v125);
        v126 = v161;
        v127 = v155[0];
        if (!v155[0])
        {
          v127 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v155[1]);
          v155[0] = v127;
        }
        sub_22E4D6448((uint64_t)(v127 + 336), v126, 1);
        sub_22E3BB0B8((uint64_t)v155);
        sub_22E80FADC(v146, v48);
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
        goto LABEL_204;
      }
    }
    else
    {
      if (v52 != 5)
        break;
      v53 = *(_DWORD *)(a1 + 16);
      *((_QWORD *)&v159 + 1) = *(_QWORD *)(a1 + 24);
      LODWORD(v161) = v53;
      HIDWORD(v161) = v53;
      *(_DWORD *)(a1 + 40) = v53;
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), v12);
    }
    if (*(_WORD *)(a1 + 32) != 46)
      break;
    sub_22E80FADC(v146, v48);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 2832) -= 8;
    v155[0] = 0;
    v54 = sub_22ED66924(*(_QWORD *)(a1 + 88), *(uint64_t **)(*(_QWORD *)(a1 + 88) + 12888), a2, v51, (uint64_t)&v159, a3, a5, (unint64_t *)v155, 1);
    v41 = v148;
    if ((sub_22E880230(a1, (uint64_t)v155[0], v54, a2, v51, (uint64_t)&v159, 0, 0) & 1) != 0)
      goto LABEL_49;
  }
  v115 = *(_QWORD *)(a1 + 8);
  v116 = *(_QWORD *)(v115 + 2832);
  *(_QWORD *)(v115 + 2816) = *(_QWORD *)(v116 - 8);
  *(_QWORD *)(v115 + 2832) = v116 - 8;
  v117 = *(_QWORD *)(v115 + 1008);
  if (v117)
  {
    if (*(_QWORD *)(v117 + 224))
      v133 = 3;
    else
      v133 = 0;
    *(_DWORD *)(v115 + 1048) = v133;
    v118 = v145;
  }
  else
  {
    v118 = v145;
    if (*(_QWORD *)(v115 + 1040))
      v119 = 1;
    else
      v119 = 2;
    *(_DWORD *)(v115 + 1048) = v119;
  }
  v120 = *(_OWORD *)&v162[16];
  *v147 = *(_OWORD *)v162;
  *(_OWORD *)(a1 + 64) = v120;
  *(_OWORD *)v12 = v156;
  *((_QWORD *)v12 + 2) = v157;
  sub_22E80FADC(v146, v48);
  *(_WORD *)(a1 + 80) = v118;
  *(_WORD *)(a1 + 82) = v49;
  *(_WORD *)(a1 + 84) = v50;
LABEL_203:
  v57 = v142;
LABEL_204:
  LOBYTE(v41) = v148;
LABEL_205:
  v18 = 0;
  if ((v41 & 1) == 0 && ((v57 ^ 1) & 1) == 0)
  {
    if (*(_WORD *)(a1 + 32) != 39)
      goto LABEL_8;
    goto LABEL_208;
  }
  return v18 & 1;
}

uint64_t sub_22E841B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unint64_t v30;
  char *v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  size_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned int *v43;
  size_t v44;
  const void *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  size_t v50;
  unsigned __int8 *v51;
  unint64_t v52;
  __int128 *p_dst;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  __int128 __p;
  unint64_t v66;
  char v67;
  uint64_t v68[4];
  _BYTE v69[32];
  __int128 __dst;
  unint64_t v71;
  void **v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  int v81;
  _DWORD *v82;
  uint64_t v83;
  _DWORD v84[116];
  void *v85;
  size_t v86;
  _DWORD v87[10];
  char v88;
  char v89;
  __int16 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  int v112;
  uint64_t v113;
  unsigned __int8 *v114;
  __int128 v115;
  _WORD v116[16];
  _DWORD *v117;
  uint64_t i;
  _BYTE v119[16];
  _QWORD v120[4];

  v120[2] = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 16;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
  sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)(a1 + 16));
  v7 = *(_DWORD *)(v6 + 24);
  LODWORD(v120[1]) = 0;
  v120[0] = 0;
  v8 = *(unsigned __int16 *)(v6 + 16);
  if (v8 <= 0x83)
  {
    switch(*(_WORD *)(v6 + 16))
    {
      case 3:
        v9 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(v9 + 752))
        {
          *(_BYTE *)(v9 + 864) = 1;
          *(_BYTE *)(*(_QWORD *)(v9 + 48) + 6) = 1;
        }
        v10 = 1;
        *(_WORD *)(a1 + 32) = 1;
        sub_22F315230();
        return v10;
      case 0x13:
        v72 = (void **)(a1 + 944);
        LOBYTE(v73) = *(_BYTE *)(a1 + 944);
        *(_BYTE *)(a1 + 944) = 1;
        *((_QWORD *)&v73 + 1) = a1;
        LODWORD(v74) = 1310739;
        WORD2(v74) = 62;
        v75 = 0;
        v76 = 0;
        *((_QWORD *)&v74 + 1) = sub_22E80F788;
        sub_22E811DE8((uint64_t)&v72);
        sub_22E811E8C((uint64_t)&v72);
        if (!HIDWORD(v76))
          goto LABEL_99;
        v120[0] = v76;
        *(_BYTE *)v72 = v73;
        v14 = 43;
        goto LABEL_93;
      case 0x15:
        v72 = (void **)(a1 + 944);
        LOBYTE(v73) = *(_BYTE *)(a1 + 944);
        *(_BYTE *)(a1 + 944) = 1;
        *((_QWORD *)&v73 + 1) = a1;
        LODWORD(v74) = 1441813;
        WORD2(v74) = 62;
        v75 = 0;
        v76 = 0;
        *((_QWORD *)&v74 + 1) = sub_22E80F720;
        sub_22E811DE8((uint64_t)&v72);
        sub_22E811E8C((uint64_t)&v72);
        if (!HIDWORD(v76))
          goto LABEL_99;
        v120[0] = v76;
        *(_BYTE *)v72 = v73;
        v14 = 42;
        goto LABEL_93;
      case 0x1B:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 11;
        goto LABEL_93;
      case 0x1C:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 35;
        goto LABEL_93;
      case 0x1D:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 24;
        goto LABEL_93;
      case 0x1E:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 7;
        goto LABEL_93;
      case 0x1F:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 20;
        goto LABEL_93;
      case 0x20:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 5;
        goto LABEL_93;
      case 0x21:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 37;
        goto LABEL_93;
      case 0x22:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 18;
        goto LABEL_93;
      case 0x23:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 6;
        goto LABEL_93;
      case 0x24:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 41;
        goto LABEL_93;
      case 0x25:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 38;
        goto LABEL_93;
      case 0x26:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 19;
        goto LABEL_93;
      case 0x27:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 13;
        goto LABEL_93;
      case 0x28:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 14;
        goto LABEL_93;
      case 0x29:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 31;
        goto LABEL_93;
      case 0x2A:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 8;
        goto LABEL_93;
      case 0x2B:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 21;
        goto LABEL_93;
      case 0x2C:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 9;
        goto LABEL_93;
      case 0x2D:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 22;
        goto LABEL_93;
      case 0x2E:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 16;
        goto LABEL_93;
      case 0x2F:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 26;
        goto LABEL_93;
      case 0x30:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 32;
        goto LABEL_93;
      case 0x31:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 28;
        goto LABEL_93;
      case 0x32:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 34;
        goto LABEL_93;
      case 0x33:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 17;
        goto LABEL_93;
      case 0x34:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 27;
        goto LABEL_93;
      case 0x35:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 33;
        goto LABEL_93;
      case 0x36:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 29;
        goto LABEL_93;
      case 0x37:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 10;
        goto LABEL_93;
      case 0x38:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 23;
        goto LABEL_93;
      case 0x39:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 12;
        goto LABEL_93;
      case 0x3A:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 36;
        goto LABEL_93;
      case 0x3B:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 25;
        goto LABEL_93;
      case 0x3F:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 15;
        goto LABEL_93;
      case 0x40:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 30;
        goto LABEL_93;
      case 0x41:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 39;
        goto LABEL_93;
      case 0x46:
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
        sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
        LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
        v14 = 40;
        goto LABEL_93;
      default:
        goto LABEL_55;
    }
  }
  switch(v8)
  {
    case 0x84u:
      goto LABEL_9;
    case 0xA9u:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
      LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
      v14 = 45;
LABEL_93:
      v35 = 0;
      *(_DWORD *)a3 = 1;
      *(_DWORD *)(a3 + 24) = v7;
      *(_DWORD *)(a3 + 28) = v7;
      *(_QWORD *)(a3 + 12) = 0;
      *(_DWORD *)(a3 + 20) = 0;
      *(_DWORD *)(a3 + 8) = v14;
      do
      {
        v36 = *(_DWORD *)((char *)v120 + v35);
        *(_DWORD *)(a3 + 12 + v35) = v36;
        if (v36)
          *(_DWORD *)(a3 + 28) = v36;
        v35 += 4;
      }
      while (v35 != 12);
      return 0;
    case 0x8Cu:
LABEL_9:
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
      LODWORD(v120[0]) = *(_DWORD *)(a1 + 40);
      if (*(_WORD *)(a1 + 32) != 19
        || (v11 = *(_QWORD *)(a1 + 8), (*(_BYTE *)(*(_QWORD *)(v11 + 56) + 1) & 2) != 0)
        && ((v12 = *(_QWORD *)(v11 + 2816), v12 >= *(unsigned int *)(v11 + 2784))
          ? (v13 = sub_22F162D2C(v11, 1u))
          : (v13 = *(_QWORD *)(v11 + 2776) + 24 * v12),
            *(_WORD *)(v13 + 16) == 19))
      {
        if (v8 == 140)
          v14 = 1;
        else
          v14 = 2;
      }
      else
      {
        v72 = (void **)(a1 + 944);
        LOBYTE(v73) = *(_BYTE *)(a1 + 944);
        *(_BYTE *)(a1 + 944) = 1;
        *((_QWORD *)&v73 + 1) = a1;
        LODWORD(v74) = 1310739;
        WORD2(v74) = 62;
        v75 = 0;
        v76 = 0;
        *((_QWORD *)&v74 + 1) = sub_22E80F788;
        sub_22E811DE8((uint64_t)&v72);
        sub_22E811E8C((uint64_t)&v72);
        if (!HIDWORD(v76))
        {
LABEL_99:
          *(_BYTE *)v72 = v73;
          return 1;
        }
        *(_QWORD *)((char *)v120 + 4) = v76;
        if (v8 == 140)
          v14 = 3;
        else
          v14 = 4;
        *(_BYTE *)v72 = v73;
      }
      goto LABEL_93;
  }
LABEL_55:
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56) + 1) & 2) != 0 && v8 <= 0x12 && ((1 << v8) & 0x76000) != 0)
  {
    v24 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v24 + 312) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(v24 + 316) = 1935;
    v60 = a2;
    if (*(char *)(v24 + 311) < 0)
    {
      **(_BYTE **)(v24 + 288) = 0;
      *(_QWORD *)(v24 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v24 + 288) = 0;
      *(_BYTE *)(v24 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v69, v24);
    sub_22E3BB0B8((uint64_t)v69);
    v25 = 0;
    v26 = 0;
    v97 = &v99;
    v98 = 0x400000000;
    v117 = v119;
    for (i = 0x400000000; ; LODWORD(i) = i + 1)
    {
      v27 = *(unsigned __int16 *)(a1 + 32);
      if (v27 > 0x12 || ((1 << v27) & 0x76000) == 0)
        break;
      if (v27 != 13 && v26 == 0)
      {
        v25 = *(_DWORD *)v6;
        v26 = 1594;
      }
      v30 = sub_22E4EF088((uint64_t)&v97, v6, 1);
      v31 = (char *)v97 + 24 * v98;
      v32 = *(_OWORD *)v30;
      *((_QWORD *)v31 + 2) = *(_QWORD *)(v30 + 16);
      *(_OWORD *)v31 = v32;
      LODWORD(v98) = v98 + 1;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
      v33 = *(_DWORD *)(a1 + 40);
      v34 = i;
      if (i >= (unint64_t)HIDWORD(i))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v34 = i;
      }
      v117[v34] = v33;
    }
    sub_22F14E1D0((uint64_t)&v72, (uint64_t)v97, v98, *(_QWORD **)(a1 + 8));
    if (v88)
    {
      v10 = 1;
LABEL_129:
      if (v85 != v87)
        free(v85);
      if (v76 != &v78)
        free(v76);
      if (v117 != (_DWORD *)v119)
        free(v117);
      if (v97 != &v99)
        free(v97);
      return v10;
    }
    v38 = v86;
    if (v86)
    {
      v39 = sub_22E3CB704((llvm::StringMapImpl *)(*(_QWORD *)(a1 + 8) + 544), v85, v86);
      v40 = v117[v87[8]];
      v41 = sub_22F1418F4(v40, v87[9], *(uint64_t **)(*(_QWORD *)(a1 + 8) + 88), *(_QWORD **)(*(_QWORD *)(a1 + 8) + 56))+ v40;
    }
    else
    {
      if (*(_WORD *)(a1 + 32) != 5)
      {
        v56 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)(v56 + 312) = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(v56 + 316) = 15;
        if (*(char *)(v56 + 311) < 0)
        {
          **(_BYTE **)(v56 + 288) = 0;
          *(_QWORD *)(v56 + 296) = 0;
        }
        else
        {
          *(_BYTE *)(v56 + 288) = 0;
          *(_BYTE *)(v56 + 311) = 0;
        }
        sub_22E78E558((uint64_t)&v114, v56);
        v57 = v114;
        if (!v114)
        {
          v57 = (unsigned __int8 *)sub_22E3B8AAC(v115);
          v114 = v57;
        }
        v57[*v57 + 1] = 4;
        v58 = v114;
        v59 = *v114;
        *v114 = v59 + 1;
        *(_QWORD *)&v58[8 * v59 + 16] = 5;
        sub_22E3BB0B8((uint64_t)&v114);
        v10 = 1;
        goto LABEL_129;
      }
      v39 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 16);
      sub_22F18FB4C(*(_QWORD *)(a1 + 8), (unsigned int *)v6);
      v41 = *(_DWORD *)(a1 + 40);
      v42 = i;
      if (i >= HIDWORD(i))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v42 = i;
      }
      v117[v42] = v41;
      LODWORD(i) = i + 1;
    }
    if (v84[114] != (_DWORD)v76 || v89)
    {
      v25 = *v117;
      v26 = 1593;
    }
    else if (!v26)
    {
LABEL_128:
      *(_DWORD *)a3 = 3;
      *(_QWORD *)(a3 + 8) = v39;
      *(_DWORD *)(a3 + 24) = v7;
      *(_DWORD *)(a3 + 28) = v41;
      v10 = sub_22EBB94B4(*(_QWORD **)(a1 + 88), v60, a3, v38 != 0);
      goto LABEL_129;
    }
    v114 = (unsigned __int8 *)v116;
    v116[0] = 8738;
    v115 = xmmword_22F45DFE0;
    v43 = *(unsigned int **)(v39 + 16);
    v46 = *v43;
    v45 = v43 + 4;
    v44 = v46;
    if (v46 >= 0x1FuLL)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
      v48 = v114;
      v47 = v115;
    }
    else
    {
      v47 = 2;
      v48 = (unsigned __int8 *)v116;
      if (!v44)
        goto LABEL_114;
    }
    memcpy(&v48[v47], v45, v44);
    v47 = v115;
LABEL_114:
    *(_QWORD *)&v115 = v47 + v44;
    v49 = *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v49 + 312) = v25;
    *(_DWORD *)(v49 + 316) = v26;
    if (*(char *)(v49 + 311) < 0)
    {
      **(_BYTE **)(v49 + 288) = 0;
      *(_QWORD *)(v49 + 296) = 0;
    }
    else
    {
      *(_BYTE *)(v49 + 288) = 0;
      *(_BYTE *)(v49 + 311) = 0;
    }
    sub_22E78E558((uint64_t)v68, v49);
    v51 = v114;
    v50 = v115;
    v52 = *v117 | ((unint64_t)v117[i - 1] << 32);
    v63 = 0;
    v64 = 0;
    v67 = 0;
    v61 = v52;
    v62 = 1;
    if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if ((unint64_t)v115 >= 0x17)
    {
      v54 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)v115 | 7) != 0x17)
        v54 = v115 | 7;
      v55 = v54 + 1;
      p_dst = (__int128 *)operator new(v54 + 1);
      *((_QWORD *)&__dst + 1) = v50;
      v71 = v55 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v71) = v115;
      p_dst = &__dst;
      if (!(_QWORD)v115)
        goto LABEL_124;
    }
    memmove(p_dst, v51, v50);
LABEL_124:
    *((_BYTE *)p_dst + v50) = 0;
    __p = __dst;
    v66 = v71;
    sub_22E6D82D0(v68, &v61);
    if (SHIBYTE(v66) < 0)
      operator delete((void *)__p);
    sub_22E3BB0B8((uint64_t)v68);
    if (v114 != (unsigned __int8 *)v116)
      free(v114);
    goto LABEL_128;
  }
  v97 = 0;
  v99 = 0;
  v100 = 0u;
  v101 = a1 + 960;
  v113 = 0;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = 0;
  sub_22E80FF64(a1, &v97, 3, 2, 0);
  sub_22E8ADC50((uint64_t)&v97, *(_QWORD *)(a1 + 88));
  v72 = &v97;
  v76 = 0;
  v77 = 0;
  v73 = 0u;
  v74 = 0u;
  LODWORD(v75) = 0;
  v78 = *((_QWORD *)&v104 + 1);
  v80 = 0u;
  v79 = 19;
  v81 = 0;
  v82 = v84;
  v83 = 0x800000000;
  v90 = (v97 & 0x3F000) == 204800;
  v91 = 0u;
  v92 = v101;
  v96 = 0;
  v95 = 0u;
  v94 = 0u;
  v93 = 0u;
  sub_22E8227E4(a1, (uint64_t)&v72, 0, 0);
  v20 = sub_22EE89FC0(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 12888), (uint64_t)&v72, v15, v16, v17, v18, v19);
  v10 = v21 != 0;
  if (!v21)
  {
    v22 = HIDWORD(v78);
    *(_DWORD *)a3 = 2;
    *(_DWORD *)(a3 + 24) = v7;
    *(_DWORD *)(a3 + 28) = v22;
    *(_QWORD *)(a3 + 8) = v20;
  }
  sub_22E827F78((uint64_t)&v72);
  if (DWORD1(v104))
    free(*((void **)&v103 + 1));
  sub_22E8D1BC4(v101, (uint64_t)&v101);
  sub_22E80F94C((uint64_t *)&v102);
  sub_22E80F94C((uint64_t *)&v100 + 1);
  return v10;
}

