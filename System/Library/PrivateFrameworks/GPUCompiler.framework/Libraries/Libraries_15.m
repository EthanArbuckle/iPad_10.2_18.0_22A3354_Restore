uint64_t sub_22EB31584(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v24;
  int *v25;
  unint64_t v26;
  unsigned int v27[24];
  unsigned int v28[24];
  uint64_t v29[2];
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;

  v33 = a4;
  v34 = a3;
  if ((*(_DWORD *)(a4 + 96) & 0x600) == 0x400)
  {
    if ((sub_22EE4423C() & 1) != 0)
      return 1;
    goto LABEL_12;
  }
  if ((*(_DWORD *)(a4 + 96) & 0x600) != 0x200)
  {
LABEL_12:
    v13 = (unsigned __int8 *)sub_22EFBC5B4(a4);
    if (*v13 == 173)
    {
      v14 = *(_DWORD *)v13;
      *(_BYTE *)(a1 + 1693) = 1;
      *(_BYTE *)(a1 + 1694) |= (v14 & 0x40000) != 0;
    }
    v29[0] = a4;
    v36 = 3;
    v37 = 6;
    v35 = *(unsigned int *)(a1 + 1704);
    sub_22EB4DDB8(a1 + 3688, &v37, (int *)&v35, (__int16 *)(a1 + 1693), v29, &v36);
    v15 = *(unsigned int *)(a1 + 3696);
    v16 = v15 - 2;
    v17 = *(_QWORD *)(a1 + 3688);
    v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
    if (v18 == 5)
    {
      *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
      v19 = 1;
    }
    else if (v18 == 2)
    {
      *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
      v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
    }
    else
    {
      v19 = 0;
      *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
    }
    v20 = v17 + 576 * v15;
    *(_BYTE *)(v20 - 3) = v19;
    *(_WORD *)(a1 + 1693) = 0;
    if (*(_DWORD *)(a1 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
      sub_22EAEAE08(a1 + 1840, (uint64_t *)(v20 - 496));
    }
    v21 = sub_22EFBC5B4(a4);
    v22 = (_DWORD *)v21;
    if (v21 && (*(_BYTE *)v21 & 0xFE) == 0xAC)
      v22 = *(_DWORD **)(v21 + 16);
    v29[0] = *(_QWORD *)(a1 + 88);
    v29[1] = a1;
    v30 = 1;
    v31 = 0;
    v32 = 0;
    sub_22EB88244((uint64_t)v29, v22);
    sub_22EB48E64(a1);
    return 0;
  }
  if ((sub_22F24C318(*(_QWORD *)(a1 + 8488), *(_DWORD *)(a1 + 8504), a4, v29) & 1) != 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x13DDu, 0, (uint64_t)v29);
    v7 = sub_22E890024((uint64_t)v29, &v34);
    v8 = *(_QWORD *)(v34 + 16);
    v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 4) != 0)
      v9 = (_QWORD *)*v9;
    if (v9)
      v10 = (uint64_t)(v9 - 8);
    else
      v10 = 0;
    v35 = v10;
    sub_22E890024(v7, &v35);
    sub_22E903BEC((unsigned int *)v29);
    v11 = sub_22EAE9434((_DWORD *)(a1 + 8488), &v33);
    sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v11 + 2), 0x1596u, 0, (uint64_t)v27);
    sub_22E903BEC(v27);
    return 1;
  }
  v24 = *(_QWORD *)(a4 + 56);
  if ((v24 & 4) != 0 && (v26 = v24 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v26 + 16)))
    v25 = **(int ***)(v26 + 24);
  else
    v25 = (int *)(a4 + 64);
  sub_22E8FCA40((_QWORD *)a1, *v25, 0x1210u, 0, (uint64_t)v29);
  sub_22E890024((uint64_t)v29, &v34);
  sub_22E903BEC((unsigned int *)v29);
  sub_22E8FCA40((_QWORD *)a1, a2, 0x17A8u, 0, (uint64_t)v28);
  sub_22E903BEC(v28);
  v12 = 1;
  sub_22EFC77E8(a4, 1);
  return v12;
}

uint64_t sub_22EB31884(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((sub_22EB31584(a1, a2, a3, a4) & 1) != 0)
    return 1;
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 216);
  v9 = sub_22E3CD3D4(v7 + 2032, 32, 3);
  return sub_22E8BB138(v9, 120, a2, a4, v8);
}

uint64_t sub_22EB318F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;

  if (!a3)
    return 4;
  if ((*(_BYTE *)(a3 + 23) & 8) == 0)
    return 4;
  if (!a2)
  {
    if (!a4)
      return 0;
    goto LABEL_11;
  }
  v6 = *(_DWORD *)(a2 + 28);
  if ((v6 & 0x7F) == 0x37)
    return 3;
  if (a4)
  {
LABEL_11:
    v7 = *(_QWORD *)(a4 + 8);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
      return 1;
    if (a2)
    {
      v6 = *(_DWORD *)(a2 + 28);
      goto LABEL_15;
    }
    if (v7 == *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16848))
      return 2;
    return 0;
  }
LABEL_15:
  if ((v6 & 0x7Eu) - 58 < 0xFFFFFFFC
    || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) + 80) & 0xE000) == 0x4000
    || (*(_QWORD *)(a2 + 40) & 7) == 6
    && (*(_DWORD *)(*(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
  {
    return 0;
  }
  return 2;
}

uint64_t sub_22EB319F4(_QWORD *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, int a8, char a9)
{
  unsigned int v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  char v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  unsigned int *v40;
  uint64_t *v41;
  char v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  uint64_t *v58;
  uint64_t v60;
  int v61;
  uint64_t v62;
  _BYTE *v63;
  char *v64;
  char *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t *v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  _QWORD *v94;
  unsigned int v95[2];
  unsigned int v96;
  unint64_t v97;
  unsigned int v98;
  unsigned int v99;
  _BYTE v100[12];
  void **v101;
  void *v102[2];
  void *v103[2];
  uint64_t v104;
  _BYTE v105[22];
  __int128 v106;
  uint64_t v107;
  __int128 v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE v112[22];
  __int128 v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v100[4] = a4;
  if (a4)
  {
    v17 = sub_22EFC01DC(a4, 0);
    if (v17)
    {
      if (v17 > 0x7E7)
      {
        v89 = *(uint64_t **)(a1[11] + 15208);
        v90 = v89[1];
        if (v90 + 2024 <= (unint64_t)v17)
        {
          v91 = v17 - v90 - 2024;
          v92 = v89[2];
        }
        else
        {
          v91 = v17 - 2024;
          v92 = *v89;
        }
        v18 = (char **)(v92 + 48 * v91);
      }
      else
      {
        v18 = &(&off_24FAC8C40)[6 * v17];
      }
      if (strchr(v18[2], 116))
        return 0;
    }
    v93 = a2;
    v94 = a1;
    v20 = a5 + 16;
    v21 = *(_QWORD *)(a5 + 16) >> 38;
    v22 = (unsigned __int16)v21;
    *(_DWORD *)v100 = (unsigned __int16)v21;
    v23 = sub_22EFC0EB8(a4);
  }
  else
  {
    v93 = a2;
    v94 = a1;
    v20 = a5 + 16;
    v21 = *(_QWORD *)(a5 + 16) >> 38;
    v23 = (unsigned __int16)v21;
    *(_QWORD *)v100 = (unsigned __int16)v21;
    v22 = (unsigned __int16)v21;
  }
  v24 = a9;
  if (a9)
    v25 = 3;
  else
    v25 = 0;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 10)
    v26 = 1;
  else
    v26 = v25;
  v98 = v26;
  v99 = v23;
  v27 = v23;
  if (a7 < (unsigned __int16)v21 && a7 < v23)
  {
    v108 = 0uLL;
    v109 = &v111;
    v110 = 0x100000000;
    *(_QWORD *)v112 = 0;
    *(_QWORD *)&v112[8] = 0;
    *(_QWORD *)&v112[14] = 0;
    v114 = 0;
    v113 = 0uLL;
    if (!a4)
      goto LABEL_35;
    v42 = a9;
    sub_22EB3235C();
    v108 = *(_OWORD *)v102;
    sub_22F24C77C((uint64_t)&v109, (uint64_t)v103);
    *(_OWORD *)v112 = *(_OWORD *)v105;
    *(_QWORD *)&v112[14] = *(_QWORD *)&v105[14];
    sub_22EA44D30((void **)&v113);
    v113 = v106;
    v114 = v107;
    v107 = 0;
    v106 = 0uLL;
    v60 = v108;
    v101 = (void **)&v106;
    sub_22E8D19C8(&v101);
    if (v103[0] != &v104)
      free(v103[0]);
    if (v60)
    {
      v61 = 4928;
      if ((_DWORD)v27 == v22)
      {
        if ((*(_BYTE *)(v20 + 7) & 8) != 0)
          v61 = 4928;
        else
          v61 = 4930;
      }
      v53 = v94;
      v102[1] = (void *)(v94[11] + 2128);
      LODWORD(v103[0]) = v61;
      v62 = v98;
      v102[0] = (void *)sub_22E3B8AAC((uint64_t)v102[1]);
      v63 = v102[0];
      v64 = (char *)v102[0] + 336;
      v66 = *(unsigned __int8 *)v102[0];
      v65 = (char *)v102[0] + 1;
      v65[*(unsigned __int8 *)v102[0]] = 3;
      *v63 = v66 + 3;
      v63 += 16;
      *(_QWORD *)&v63[8 * v66] = v62;
      v67 = (v66 + 1);
      v65[v67] = 3;
      *(_QWORD *)&v63[8 * v67] = v27;
      v68 = (v66 + 2);
      v65[v68] = 3;
      *(_QWORD *)&v63[8 * v68] = a7;
      sub_22E4D6448((uint64_t)v64, *(uint64_t *)&v112[12], 1);
      sub_22EC6BEF8((uint64_t)v94, (uint64_t)&v108, (uint64_t)v102, 1);
      if (v102[0] && v102[1])
        sub_22E3BB10C((unint64_t)v102[1], (unint64_t)v102[0]);
      goto LABEL_47;
    }
    v24 = a9;
    if ((_DWORD)v27 == 1 && *(_QWORD *)&v100[4] && *(_QWORD *)(**(_QWORD **)(*(_QWORD *)&v100[4] + 120) + 40))
    {
      v69 = 4927;
      if (v22 == 1)
      {
        if ((*(_BYTE *)(v20 + 7) & 8) != 0)
          v69 = 4927;
        else
          v69 = 4929;
      }
      v53 = v94;
      sub_22E8FCA40(v94, a8, v69, 0, (uint64_t)v102);
      v70 = sub_22E89519C((uint64_t)v102, &v98);
      v101 = **(void ****)(*(_QWORD *)&v100[4] + 120);
      v56 = sub_22E890024(v70, (uint64_t *)&v101);
      sub_22F0D4E74(a3);
      v97 = v71;
      v58 = (uint64_t *)&v97;
    }
    else
    {
LABEL_35:
      v42 = v24;
      if ((_DWORD)v27 == v22)
      {
        if ((*(_BYTE *)(v20 + 7) & 8) != 0)
          v43 = 4926;
        else
          v43 = 4925;
      }
      else
      {
        v43 = 4926;
      }
      v53 = v94;
      sub_22E8FCA40(v94, a8, v43, 0, (uint64_t)v102);
      v54 = sub_22E89519C((uint64_t)v102, &v98);
      v55 = sub_22E89519C(v54, &v99);
      LODWORD(v97) = a7;
      v56 = sub_22E89519C(v55, (unsigned int *)&v97);
      sub_22F0D4E74(a3);
      v101 = v57;
      v58 = (uint64_t *)&v101;
    }
    sub_22E8906A0(v56, v58);
    sub_22E903BEC((unsigned int *)v102);
LABEL_47:
    if (!(_QWORD)v108 && *(_QWORD *)&v100[4] && !sub_22EFC01DC(*(uint64_t *)&v100[4], 0) && (v42 & 1) == 0)
    {
      sub_22E8FCA40(v53, *(_DWORD *)(*(_QWORD *)&v100[4] + 24), 0x155Cu, 0, (uint64_t)v102);
      sub_22E890024((uint64_t)v102, (uint64_t *)&v100[4]);
      sub_22E903BEC((unsigned int *)v102);
    }
    v102[0] = &v113;
    sub_22E8D19C8((void ***)v102);
    v41 = v109;
LABEL_53:
    if (v41 != &v111)
      free(v41);
    return 1;
  }
  if (a7 > (unsigned __int16)v21 && (*(_BYTE *)(v20 + 7) & 8) == 0)
  {
    v108 = 0uLL;
    v109 = &v111;
    v110 = 0x100000000;
    *(_QWORD *)v112 = 0;
    *(_QWORD *)&v112[8] = 0;
    *(_QWORD *)&v112[14] = 0;
    v114 = 0;
    v113 = 0uLL;
    if (!a4)
      goto LABEL_23;
    sub_22EB3235C();
    v108 = *(_OWORD *)v102;
    sub_22F24C77C((uint64_t)&v109, (uint64_t)v103);
    *(_OWORD *)v112 = *(_OWORD *)v105;
    *(_QWORD *)&v112[14] = *(_QWORD *)&v105[14];
    sub_22EA44D30((void **)&v113);
    v113 = v106;
    v114 = v107;
    v107 = 0;
    v106 = 0uLL;
    v72 = v108;
    v101 = (void **)&v106;
    sub_22E8D19C8(&v101);
    if (v103[0] != &v104)
      free(v103[0]);
    if (v72)
    {
      v73 = 4934;
      if ((_DWORD)v27 == v22)
      {
        if ((*(_BYTE *)(v20 + 7) & 8) != 0)
          v73 = 4934;
        else
          v73 = 4936;
      }
      v31 = v94;
      v102[1] = (void *)(v94[11] + 2128);
      LODWORD(v103[0]) = v73;
      v74 = v98;
      v102[0] = (void *)sub_22E3B8AAC((uint64_t)v102[1]);
      v75 = v102[0];
      v76 = (char *)v102[0] + 336;
      v78 = *(unsigned __int8 *)v102[0];
      v77 = (char *)v102[0] + 1;
      v77[*(unsigned __int8 *)v102[0]] = 3;
      *v75 = v78 + 3;
      v75 += 16;
      *(_QWORD *)&v75[8 * v78] = v74;
      v79 = (v78 + 1);
      v77[v79] = 3;
      *(_QWORD *)&v75[8 * v79] = (unsigned __int16)v21;
      v80 = (v78 + 2);
      v77[v80] = 3;
      *(_QWORD *)&v75[8 * v80] = a7;
      sub_22E4D6448((uint64_t)v76, *(uint64_t *)&v112[12], 1);
      sub_22EC6BEF8((uint64_t)v94, (uint64_t)&v108, (uint64_t)v102, 1);
      v40 = v93;
      if (v102[0] && v102[1])
        sub_22E3BB10C((unint64_t)v102[1], (unint64_t)v102[0]);
      goto LABEL_28;
    }
    if (v22 == 1 && *(_QWORD *)&v100[4] && *(_QWORD *)(**(_QWORD **)(*(_QWORD *)&v100[4] + 120) + 40))
    {
      sub_22F0D5A50(*(_QWORD *)(a6 + 8));
      if ((_DWORD)v27 == 1)
        v82 = 4935;
      else
        v82 = 4933;
      v31 = v94;
      sub_22E8FCA40(v94, v81, v82, 0, (uint64_t)v102);
      v83 = sub_22E89519C((uint64_t)v102, &v98);
      v101 = **(void ****)(*(_QWORD *)&v100[4] + 120);
      v84 = sub_22E890024(v83, (uint64_t *)&v101);
      v96 = a7;
      v85 = sub_22E89519C(v84, &v96);
      sub_22F0D4E74(a3);
      v97 = v86;
      v36 = sub_22E8906A0(v85, (uint64_t *)&v97);
      sub_22F0D5A50(*(_QWORD *)(a6 + 8 * (unsigned __int16)v21));
      LODWORD(v85) = v87;
      sub_22F0D60E4(*(_QWORD *)(a6 + 8 * a7 - 8));
      v95[0] = v85;
      v95[1] = v88;
      v39 = (uint64_t *)v95;
    }
    else
    {
LABEL_23:
      sub_22F0D5A50(*(_QWORD *)(a6 + 8 * (unsigned __int16)v21));
      if ((_DWORD)v27 == v22)
        v30 = 4931;
      else
        v30 = 4932;
      v31 = v94;
      sub_22E8FCA40(v94, v29, v30, 0, (uint64_t)v102);
      v32 = sub_22E89519C((uint64_t)v102, &v98);
      v33 = sub_22E89519C(v32, (unsigned int *)v100);
      v95[0] = a7;
      v34 = sub_22E89519C(v33, v95);
      sub_22F0D4E74(a3);
      v101 = v35;
      v36 = sub_22E8906A0(v34, (uint64_t *)&v101);
      sub_22F0D5A50(*(_QWORD *)(a6 + 8 * *(unsigned int *)v100));
      LODWORD(v34) = v37;
      sub_22F0D60E4(*(_QWORD *)(a6 + 8 * a7 - 8));
      v97 = __PAIR64__(v38, v34);
      v39 = (uint64_t *)&v97;
    }
    sub_22E8906A0(v36, v39);
    sub_22E903BEC((unsigned int *)v102);
    v40 = v93;
LABEL_28:
    if (!(_QWORD)v108 && *(_QWORD *)&v100[4] && !sub_22EFC01DC(*(uint64_t *)&v100[4], 0) && (a9 & 1) == 0)
    {
      sub_22E8FCA40(v31, *(_DWORD *)(*(_QWORD *)&v100[4] + 24), 0x155Cu, 0, (uint64_t)v102);
      sub_22E890024((uint64_t)v102, (uint64_t *)&v100[4]);
      sub_22E903BEC((unsigned int *)v102);
    }
    v40[4] = *(_DWORD *)v100;
    v102[0] = &v113;
    sub_22E8D19C8((void ***)v102);
    v41 = v109;
    goto LABEL_53;
  }
  v102[0] = v103;
  v102[1] = (void *)0x800000000;
  v44 = sub_22EB318F0((uint64_t)v94, a4, a5, a3);
  sub_22EFFAE7C(v93);
  v19 = sub_22EB326B0(v94, v45, *(uint64_t *)&v100[4], a5, 0, a6, a7, (uint64_t)v102, v44, 0, 0);
  if ((v19 & 1) == 0)
  {
    v46 = LODWORD(v102[1]);
    v47 = *v93;
    if (LODWORD(v102[1]))
    {
      v48 = (uint64_t *)v102[0];
      v49 = v47 >> 24;
      v50 = (v47 >> 18) & 1;
      v51 = (_QWORD *)((char *)&v93[2 * v50 + 2] + (v47 >> 24));
      do
      {
        v52 = *v48++;
        *v51++ = v52;
        --v46;
      }
      while (v46);
    }
    else
    {
      v49 = v47 >> 24;
      v50 = (v47 >> 18) & 1;
    }
    *v93 = v47 & 0xFFFC1FFF | ((sub_22EFB2A44(v93, (_DWORD **)((char *)v93 + v49 + 8), v50) & 0x1F) << 13);
  }
  if (v102[0] != v103)
    free(v102[0]);
  return v19;
}

double sub_22EB3235C()
{
  uint64_t v0;
  unsigned __int8 *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t *v15;
  double result;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  void *v24;
  unint64_t *v25;
  uint64_t (**v26)();
  int v27;
  char v28;
  uint64_t v29;
  _BYTE v30[11];
  int v31;
  char v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unint64_t v35;
  void **v36;
  uint64_t v37;
  _QWORD v38[339];
  int v39;
  _OWORD v40[9];
  _QWORD *v41;
  uint64_t v42;
  _QWORD v43[5];
  __int128 v44;
  uint64_t v45;
  unsigned int v46;
  __int128 v47;
  int v48;
  uint64_t v49;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v0;
  v49 = *MEMORY[0x24BDAC8D0];
  if (*v1 == 188)
    v11 = v1;
  else
    v11 = 0;
  if (v11)
  {
    v12 = *((_DWORD *)v11 + 10);
  }
  else
  {
    sub_22F0D5A50((uint64_t)v1);
    v12 = v13;
  }
  v14 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v7 & 7) != 0)
    v14 = 0;
  v27 = 16843009;
  v28 = 1;
  memset(v30, 0, sizeof(v30));
  v29 = 0;
  v31 = v3;
  v32 = 0;
  v33 = *(_QWORD *)(v9 + 216);
  v34 = v11;
  LOBYTE(v27) = 0;
  HIBYTE(v27) = ((_DWORD)v3 == 1) & BYTE1(**(_DWORD **)(v9 + 72));
  BYTE2(v27) = 0;
  v28 = 0;
  v26 = &off_24FAB8290;
  v35 = v14;
  v36 = (void **)v7;
  LODWORD(v37) = v12;
  sub_22EFC6D6C((uint64_t)v38, v7);
  v15 = (uint64_t *)sub_22E90490C(v9, v33);
  sub_22EC6AB20(v9, (uint64_t *)&v36, 0, v15, 0, (uint64_t)&v26, 1, 0, v10, 0, 0, 1u);
  if (!*(_QWORD *)v10)
    goto LABEL_29;
  v17 = *(unsigned int *)(v10 + 24);
  if (!(_DWORD)v17)
    goto LABEL_29;
  v18 = *(unint64_t **)(v10 + 16);
  v19 = *v18;
  if (!*v18)
    goto LABEL_29;
  if (v17 >= 2)
  {
    v36 = (void **)v38;
    v20 = v12;
    v37 = 0x1000000000;
    v38[336] = v40;
    v38[337] = v40;
    v38[338] = 16;
    v39 = 0;
    v40[8] = 0u;
    v41 = v43;
    v42 = 0x400000000;
    v43[4] = (char *)&v44 + 8;
    v44 = 0u;
    v45 = 1;
    v46 = v12;
    v48 = 0;
    v47 = 0u;
    v21 = 8 * v17;
    v25 = 0;
    do
    {
      if (*v18)
        v22 = (*(_DWORD *)(*v18 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA;
      else
        v22 = 0;
      if (v22)
        sub_22ED0475C(v9, *v18, *v18 | 3, 0, v5, v3, (uint64_t)&v36, 0, 0, 1, 0, 0, 0, 0, 0);
      ++v18;
      v21 -= 8;
    }
    while (v21);
    if (!sub_22ED03FCC((uint64_t *)&v36, (_QWORD *)v9, v20, &v25))
    {
      v19 = v25[1] & 0xFFFFFFFFFFFFFFFCLL;
      *(_DWORD *)(v10 + 24) = 0;
      sub_22F33852C(v10, v19);
    }
    sub_22E9DC79C((uint64_t *)&v36);
  }
  v23 = *(_DWORD *)(v19 + 28) & 0x7F;
  if (v23 <= 0x2F && ((1 << v23) & 0xC00000060000) != 0)
    v23 = *(_DWORD *)(sub_22EFBAEA4(v19) + 28) & 0x7F;
  if (v23 != 29 && v23 - 48 >= 0x1B)
  {
LABEL_29:
    v36 = (void **)(v10 + 64);
    sub_22E8D19C8(&v36);
    v24 = *(void **)(v10 + 16);
    if (v24 != (void *)(v10 + 32))
      free(v24);
    result = 0.0;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_QWORD *)(v10 + 16) = v10 + 32;
    *(_DWORD *)(v10 + 28) = 1;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 54) = 0;
    *(_QWORD *)(v10 + 72) = 0;
    *(_QWORD *)(v10 + 80) = 0;
    *(_QWORD *)(v10 + 64) = 0;
  }
  return result;
}

uint64_t sub_22EB326B0(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9, unsigned __int8 a10, unsigned __int8 a11)
{
  unint64_t v12;
  uint64_t v13;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  char v43;
  int64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v59;
  char v60;
  unsigned __int8 **v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int8 **v65;
  uint64_t v66;
  unsigned __int8 *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  _QWORD **v74;
  uint64_t v77;
  unint64_t v79;
  uint64_t v80;
  int64_t v81;
  unsigned __int8 *v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  unsigned __int8 **v90;
  int v91;
  uint64_t v92;

  v12 = a7;
  v13 = a4;
  v16 = (unsigned __int16)(*(_QWORD *)(a4 + 16) >> 38);
  v17 = v16 - a5;
  v18 = 0;
  if (v16 > a5)
  {
    v77 = a2;
    v19 = a5;
    while (1)
    {
      v20 = *(_QWORD *)(v13 + 8 * v19 + 40);
      v83 = 0;
      v21 = a3 ? *(_QWORD *)(*(_QWORD *)(a3 + 120) + 8 * v19) : 0;
      if (v18 < v12)
        break;
      v26 = sub_22EB31884(a1, v77, a3, v21);
      if ((v26 & 1) != 0)
        return 1;
LABEL_23:
      v83 = (unsigned __int8 *)(v26 & 0xFFFFFFFFFFFFFFFELL);
      sub_22E9890B4((uint64_t)a1, (unsigned __int8 *)(v26 & 0xFFFFFFFFFFFFFFFELL));
      if (v21)
      {
        if ((*(_BYTE *)(a1[9] + 1) & 1) == 0)
        {
          v27 = v83;
          v28 = sub_22EFBF144(v21);
          v29 = sub_22EF5C728(a1[11], v28);
          if (v29)
          {
            v30 = v29;
            if ((*(_DWORD *)(v29 + 16) & 0x1C00000) == 0x400000)
            {
              if (sub_22EFFBE1C((unint64_t)v27, a1[11], 0))
              {
                sub_22E8FCA40(a1, v77, 0x1A8Cu, 0, (uint64_t)&v88);
                sub_22F0D4E74((uint64_t)v27);
                v87 = v31;
                sub_22E8906A0((uint64_t)&v88, &v87);
                goto LABEL_29;
              }
              if (*(_BYTE *)(v30 + 16) == 2)
              {
                v80 = a1[11];
                v41 = sub_22EFFBBCC(v27);
                v42 = sub_22EF5C728(v80, *((_QWORD *)v41 + 1));
                if (v42)
                {
                  if (*(_BYTE *)(v42 + 16) == 2)
                  {
                    if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v30 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v42 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
                    {
                      v72 = v42;
                      v74 = (_QWORD **)(v42 + 40);
                      if ((llvm::APInt::compare((llvm::APInt *)(v42 + 40), (const llvm::APInt *)(v30 + 40)) & 0x80000000) != 0)
                      {
                        sub_22E8FCA40(a1, v77, 0x1B55u, 0, (uint64_t)&v88);
                        sub_22F0D4E74((uint64_t)v27);
                        v87 = v53;
                        v54 = sub_22E8906A0((uint64_t)&v88, &v87);
                        if (*(_DWORD *)(v72 + 48) >= 0x41u)
                          v55 = *v74;
                        else
                          v55 = v74;
                        v86 = *v55;
                        v56 = sub_22E89519C(v54, &v86);
                        if (*(_DWORD *)(v30 + 48) >= 0x41u)
                          v57 = *(_QWORD **)(v30 + 40);
                        else
                          v57 = (_QWORD *)(v30 + 40);
                        v85 = *v57;
                        v50 = sub_22E89519C(v56, &v85);
                        v84 = 0;
LABEL_79:
                        sub_22E8900C4(v50, &v84);
LABEL_29:
                        sub_22E903BEC((unsigned int *)&v88);
                        v32 = *(_QWORD *)(v21 + 56);
                        v33 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8);
                        if ((v32 & 4) != 0)
                          v33 = (_QWORD *)v33[4];
                        v36 = *v33;
                        v35 = v33 + 1;
                        v34 = v36;
                        if ((v36 & 0xF) == 0 && v34 && *(_BYTE *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 16) == 1)
                        {
                          v34 = *(_QWORD *)(v34 + 32);
                          v37 = 1;
                          if (v34 >= 0x10 && (v34 & 0xF) == 0)
                            v37 = *(_QWORD *)((char *)&unk_22F481D78
                                            + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0)
                                                                                           + 16) << 56) >> 53));
                          v35 = (uint64_t *)(((unint64_t)v35 + v37 - 1) & -v37);
                        }
                        if ((v34 & 0xF) == 0
                          && v34
                          && (*(_DWORD *)(*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 6 >= 0xFFFFFFFC)
                        {
                          sub_22E8FCA40(a1, *(_DWORD *)(v21 + 24), 0x155Du, 0, (uint64_t)&v88);
                          v87 = *v35;
                          sub_22E8906A0((uint64_t)&v88, &v87);
                          sub_22E903BEC((unsigned int *)&v88);
                        }
                      }
                    }
                    else
                    {
                      v81 = sub_22E9A98F8(a1[11], v42 & 0xFFFFFFFFFFFFFFF0);
                      v73 = v43;
                      v44 = sub_22E9A98F8(a1[11], v30 & 0xFFFFFFFFFFFFFFF0);
                      if (v73)
                      {
                        if (v45)
                        {
                          v46 = v44;
                          if (v81 < v44)
                          {
                            sub_22E8FCA40(a1, v77, 0x1B55u, 0, (uint64_t)&v88);
                            sub_22F0D4E74((uint64_t)v27);
                            v87 = v47;
                            v48 = sub_22E8906A0((uint64_t)&v88, &v87);
                            v86 = v81;
                            v49 = sub_22E89519C(v48, &v86);
                            v85 = v46;
                            v50 = sub_22E89519C(v49, &v85);
                            v84 = 1;
                            goto LABEL_79;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v51 = v83;
      v52 = *(unsigned int *)(a8 + 8);
      if (v52 >= *(unsigned int *)(a8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v52 = *(unsigned int *)(a8 + 8);
      }
      v13 = a4;
      *(_QWORD *)(*(_QWORD *)a8 + 8 * v52) = v51;
      ++*(_DWORD *)(a8 + 8);
      ++v19;
      if (!--v17)
        goto LABEL_80;
    }
    v83 = *(unsigned __int8 **)(a6 + 8 * v18);
    sub_22F0D5A50((uint64_t)v83);
    v88 = &unk_24FAB6ED0;
    LODWORD(v89) = 2989;
    v90 = &v83;
    if ((sub_22EE8B0B0((uint64_t)a1, v22, v20) & 1) != 0)
      return 1;
    v79 = v18;
    if (a3 && *((_QWORD *)v83 + 1) == *(_QWORD *)(a1[11] + 16880) && sub_22F30AD50(a3) && (!v21 || !sub_22F32DD04(v21)))
    {
      v23 = 0;
      v83 = (unsigned __int8 *)sub_22EC2C298(a1, v83);
    }
    else
    {
      v23 = 0;
      if (a3 && (*(_WORD *)(a1[9] + 148) & 2) != 0)
        v23 = sub_22F30AD50(a3) && (!v21 || !sub_22F32DD04(v21));
    }
    if ((*(_BYTE *)(v13 + 23) & 4) != 0
      && (*(_BYTE *)(sub_22E47E270(v13) + v19) & 0x40) != 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
    {
      v24 = sub_22EFFF40C(v83, a1[11]);
      if (*v24 == 114)
        *(_DWORD *)(*((_QWORD *)v24 + 2) + 48) |= 0x20000u;
    }
    v25 = a1[11];
    if (v21)
    {
      sub_22E99E5D4(a1[11], v21, v20, (uint64_t)&v88);
      if (!v23)
      {
LABEL_20:
        v26 = sub_22EC45014(a1, &v88, 0, v83, a11, a10);
        if ((v26 & 1) != 0)
          return 1;
        v18 = v79 + 1;
        goto LABEL_23;
      }
    }
    else
    {
      if ((*(_BYTE *)(a4 + 23) & 4) != 0)
        v38 = (*(unsigned __int8 *)(sub_22E47E270(a4) + v19) >> 4) & 1;
      else
        v38 = 0;
      v89 = 0;
      v90 = 0;
      v91 = 0;
      LODWORD(v88) = 1;
      v39 = sub_22EF60188(v25, v20);
      v89 = 0;
      v90 = (unsigned __int8 **)v39;
      v40 = 4;
      if (!v38)
        v40 = 0;
      v92 = v40;
      v12 = a7;
      if (!v23)
        goto LABEL_20;
    }
    LODWORD(v88) = 19;
    goto LABEL_20;
  }
LABEL_80:
  if (a9 == 4)
    return 0;
  if (a3 && *(_QWORD *)(v13 + 24) == *(_QWORD *)(a1[11] + 16856) && sub_22EFB9440(a3))
  {
    if (v18 != v12)
    {
      v59 = v12;
      v60 = 0;
      v61 = (unsigned __int8 **)(a6 + 8 * v18);
      v62 = 8 * v59 - 8 * v18;
      do
      {
        v63 = sub_22EB32EC0((uint64_t)a1, a2, *v61, (unint64_t *)&v88);
        v64 = *(unsigned int *)(a8 + 8);
        if (v64 >= *(unsigned int *)(a8 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v64 = *(unsigned int *)(a8 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a8 + 8 * v64) = v63 & 0xFFFFFFFFFFFFFFFELL;
        v60 |= v63 & 1;
        ++*(_DWORD *)(a8 + 8);
        ++v61;
        v62 -= 8;
      }
      while (v62);
      goto LABEL_94;
    }
  }
  else if (v18 != v12)
  {
    v60 = 0;
    v68 = (_QWORD *)(a6 + 8 * v18);
    v69 = 8 * v12 - 8 * v18;
    do
    {
      v70 = sub_22F32D0F4(a1, *v68, a9, a3);
      v71 = *(unsigned int *)(a8 + 8);
      if (v71 >= *(unsigned int *)(a8 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v71 = *(unsigned int *)(a8 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a8 + 8 * v71) = v70 & 0xFFFFFFFFFFFFFFFELL;
      v60 |= v70 & 1;
      ++*(_DWORD *)(a8 + 8);
      ++v68;
      v69 -= 8;
    }
    while (v69);
    goto LABEL_94;
  }
  v60 = 0;
LABEL_94:
  if (v18 != a7)
  {
    v65 = (unsigned __int8 **)(a6 + 8 * v18);
    v66 = 8 * a7 - 8 * v18;
    do
    {
      v67 = *v65++;
      sub_22E9890B4((uint64_t)a1, v67);
      v66 -= 8;
    }
    while (v66);
  }
  return v60 & 1;
}

unint64_t sub_22EB32EC0(uint64_t a1, unsigned int a2, unsigned __int8 *a3, unint64_t *a4)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t result;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v8 = a3;
  do
  {
    v9 = v8;
    LODWORD(v10) = *v8;
    if (v10 > 0xD5)
    {
      if ((_DWORD)v10 == 233)
      {
        LODWORD(v10) = *(_DWORD *)v8;
        if ((*(_DWORD *)v8 & 0x7C0000) != 0x300000)
          break;
        v11 = v8 + 16;
      }
      else
      {
        if ((_DWORD)v10 != 214)
          break;
        v11 = v8 + 24;
      }
    }
    else if ((_DWORD)v10 == 155)
    {
      if ((**((_DWORD **)v8 + 2) & 0x18000) != 0)
        goto LABEL_18;
      v11 = v8 + 24;
      if (!v9[48])
        v11 = v9 + 32;
      LOBYTE(v10) = -101;
    }
    else
    {
      if ((_DWORD)v10 != 176)
        break;
      v10 = *((unsigned int *)v8 + 5);
      if ((_DWORD)v10 == -1)
        goto LABEL_18;
      v11 = &v8[8 * v10 + 40];
      LOBYTE(v10) = -80;
    }
    v8 = *(unsigned __int8 **)v11;
  }
  while (v8 != v9);
  if ((v10 + 103) > 0xF5u)
  {
    v13 = **((_QWORD **)v9 + 3);
    *a4 = v13;
    v14 = *(_QWORD *)(a1 + 88);
    v18 = 0;
    v15 = 1;
    v16 = 0;
    v17 = sub_22EF60188(v14, v13);
    v19 = 0;
    return sub_22EC45014(a1, &v15, a2, a3, 0, 0);
  }
LABEL_18:
  result = sub_22EB1BB84(a1, a3);
  if ((result & 1) != 0)
    return 1;
  *a4 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8);
  return result;
}

unint64_t sub_22EB33018(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v41;
  char *v42;
  size_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  _WORD __p[11];
  char v59;
  __int16 v60;
  void *v61[2];
  char v62;
  unsigned __int8 *v63[3];
  __int16 v64;

  v16 = sub_22EB1CFA4(a1, a2, a3, a4, a5, a6, a7, a8, 256);
  if ((v16 & 1) == 0)
  {
    if (*a3 == 211 && (*(_DWORD *)a3 & 0x40000) != 0)
    {
      v17 = *((unsigned int *)a3 + 1);
      v18 = (uint64_t)(*(_DWORD *)a3 == 211 ? a3 + 64 : a3 + 80);
      if (!(_DWORD)v17 && *(_DWORD *)(v18 + 8 * v17))
      {
        sub_22EFF605C((uint64_t)a3);
        if ((**(_QWORD **)(a1 + 72) & 0x1000) != 0)
          v20 = 6402;
        else
          v20 = 5170;
        sub_22E8FCA40((_QWORD *)a1, v19, v20, 0, (uint64_t)v63);
        v54 = *((_QWORD *)a3 + 2);
        sub_22E894538((uint64_t)v63, &v54);
        sub_22E903BEC((unsigned int *)v63);
      }
    }
    v21 = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(v21 + 72))
    {
      v16 = (unint64_t)sub_22EC98D2C(a1, (unsigned __int8 *)v16, a2, a4, a5, a6, a7, a8);
      v21 = *(_QWORD *)(a1 + 72);
    }
    if ((*(_BYTE *)(v21 + 236) & 1) != 0)
    {
      v22 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFFELL);
      if ((*(_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL) + 113) >= 0xFBu)
      {
        sub_22EFF605C(v16 & 0xFFFFFFFFFFFFFFFELL);
        v24 = v23;
        v25 = sub_22EFFA604(*(unsigned __int8 **)((char *)v22 + *((unsigned __int8 *)v22 + 3)));
        if (v25)
        {
          v26 = v25;
          if ((*(_DWORD *)(v25 + 28) & 0x100) != 0 && (*(_DWORD *)(v25 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
          {
            sub_22EFC8E88(v25);
            v28 = *(uint64_t **)v27;
            v29 = *(unsigned int *)(v27 + 8);
            v30 = *(uint64_t **)v27;
            if ((_DWORD)v29)
            {
              v31 = 8 * v29;
              v30 = *(uint64_t **)v27;
              while (*(_WORD *)(*v30 + 32) != 336)
              {
                ++v30;
                v31 -= 8;
                if (!v31)
                  goto LABEL_44;
              }
            }
            if (v30 != &v28[v29])
            {
              do
              {
                v33 = *v28++;
                v32 = v33;
              }
              while (*(_WORD *)(v33 + 32) != 336);
              if (sub_22F1CF68C(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 32), 0x1B91u, v24, *(_QWORD *)(a1 + 104)) != 1)
              {
                sub_22F40B920((uint64_t)v63, *(_DWORD **)((char *)&v22[2 * (((unint64_t)*v22 >> 18) & 1)+ 2 * (*(_DWORD *)(v32 + 48) & 0x3FFFFFFFu)]+ ((unint64_t)*v22 >> 24)));
                if (!v34)
                {
                  v35 = *(_QWORD *)(a1 + 104);
                  *(_DWORD *)(v35 + 312) = v24;
                  *(_DWORD *)(v35 + 316) = 7057;
                  if (*(char *)(v35 + 311) < 0)
                  {
                    **(_BYTE **)(v35 + 288) = 0;
                    *(_QWORD *)(v35 + 296) = 0;
                  }
                  else
                  {
                    *(_BYTE *)(v35 + 288) = 0;
                    *(_BYTE *)(v35 + 311) = 0;
                  }
                  v63[0] = (unsigned __int8 *)(v35 + 320);
                  v63[1] = 0;
                  v63[2] = (unsigned __int8 *)v35;
                  v64 = 1;
                  *(_BYTE *)(v35 + 320) = 0;
                  *(_DWORD *)(v35 + 664) = 0;
                  v36 = *(unsigned int *)(v35 + 776);
                  if ((_DWORD)v36)
                  {
                    v37 = *(_QWORD *)(v35 + 768);
                    v38 = 56 * v36;
                    do
                    {
                      if (*(char *)(v37 + v38 - 9) < 0)
                        operator delete(*(void **)(v37 + v38 - 32));
                      v38 -= 56;
                    }
                    while (v38);
                  }
                  *(_DWORD *)(v35 + 776) = 0;
                  v39 = *(_QWORD *)(v26 + 40) & 0xFFFFFFFFFFFFFFF8;
                  if ((*(_QWORD *)(v26 + 40) & 7) != 0 || v39 == 0)
                  {
                    v43 = 0;
                    v42 = "";
                  }
                  else
                  {
                    v41 = *(_DWORD **)(v39 + 16);
                    v44 = *v41;
                    v42 = (char *)(v41 + 4);
                    v43 = v44;
                  }
                  sub_22E3B89A8(v63, v42, v43);
                  sub_22E3BB0B8((uint64_t)v63);
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
    {
      v45 = v16 & 0xFFFFFFFFFFFFFFFELL;
      if ((*(_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL) + 113) >= 0xFBu && *(_DWORD *)(v45 + 16) == 1)
      {
        v46 = *(unsigned __int8 **)(v45 + *(unsigned __int8 *)(v45 + 3));
        v47 = sub_22EFFA6B0(v46);
        if (v47)
        {
          v48 = v47;
          if (*v47 == 161 && *((_DWORD *)v47 + 1) && ((v47[2] & 4) == 0 || !*((_QWORD *)v47 + 4)))
          {
            v49 = sub_22EFFA604(v46);
            if (v49)
            {
              v50 = v49;
              if ((*(_DWORD *)(v49 + 28) & 0x7Eu) - 52 <= 5 && sub_22EFC01DC(v49, 0) - 1193 >= 0xFFFFFFFE)
              {
                sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v48 + 1), 0x1BBCu, 0, (uint64_t)v63);
                sub_22EFB9E74(v50, v61);
                v52 = sub_22F2F3734((uint64_t)v63, v61);
                v53 = *((unsigned int *)v48 + 1);
                v57 = 0;
                v56 = 0;
                v54 = v53 | (v53 << 32);
                v55 = 0;
                *(_QWORD *)&__p[7] = 0;
                *(_QWORD *)&__p[3] = 0;
                v59 = 0;
                strcpy((char *)__p, "std::");
                v60 = 5;
                sub_22E890748(v52, &v54);
                if ((char)v60 < 0)
                  operator delete(*(void **)__p);
                if (v62 < 0)
                  operator delete(v61[0]);
                sub_22E903BEC((unsigned int *)v63);
              }
            }
          }
        }
      }
    }
  }
  return v16;
}

uint64_t sub_22EB3346C(_QWORD *a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = (int)a1;
  v5 = a1;
  v3 = sub_22EB88AB8(&v5, a2);
  if ((v3 & 1) != 0)
    return 1;
  else
    return sub_22EB1922C(v2, (void *)(v3 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EB334BC(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6, unsigned int a7, uint64_t a8, char a9, char a10)
{
  uint64_t v17;
  int v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char **v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  int v57;
  _QWORD *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  BOOL v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  char **v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _QWORD *v90;
  unsigned int v91;
  uint64_t v92;
  void **v93;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  unint64_t v101;
  _DWORD *v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  int v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  char v148;
  char v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unsigned int *v153;
  uint64_t v154;
  uint64_t v156[2];
  unsigned int v157;
  uint64_t v158;
  unsigned int v159[24];
  void *v160;
  uint64_t v161;
  uint64_t *v162;
  int v163;
  uint64_t v164;
  unsigned int v165[24];
  _BYTE v166[96];
  uint64_t v167[2];

  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Eu) - 52 < 6)
  {
    v167[0] = a3;
    v17 = sub_22EFC01DC(a3, 0);
    if (sub_22E47E580(a3))
    {
      sub_22EFF605C(a2);
      sub_22E8FCA40(a1, v18, 0xA56u, 0, (uint64_t)v166);
      v19 = (unsigned int *)v166;
LABEL_143:
      sub_22E903BEC(v19);
      return 1;
    }
    v20 = a3;
  }
  else
  {
    v20 = 0;
    v17 = 0;
    v167[0] = 0;
  }
  v21 = sub_22E903070((uint64_t)a1, 0);
  if (v21 && (*(_WORD *)(v21 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
  {
    v22 = v21 - 72;
    if (sub_22EB34534(v21 - 72)
      && (*(unsigned int (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)(a1[11] + 15088) + 568))(*(_QWORD *)(a1[11] + 15088), "vfp", 3)&& (!v20 || !sub_22EB34534(v20)))
    {
      sub_22EFF605C(a2);
      sub_22E8FCA40(a1, v23, 0x1849u, 0, (uint64_t)v165);
      sub_22E903BEC(v165);
      if (v167[0])
      {
        sub_22E8FCA40(a1, *(_DWORD *)(v167[0] + 24), 0x155Cu, 0, (uint64_t)&v160);
        sub_22E890024((uint64_t)&v160, v167);
        sub_22E903BEC((unsigned int *)&v160);
      }
    }
    if (sub_22E47E580(v22) && (!v167[0] || !sub_22E47284C(v167[0])))
    {
      sub_22EFF605C(a2);
      sub_22E8FCA40(a1, v24, 0x1836u, 0, (uint64_t)v159);
      sub_22E903BEC(v159);
      if (v167[0])
      {
        sub_22E8FCA40(a1, *(_DWORD *)(v167[0] + 24), 0x155Cu, 0, (uint64_t)&v160);
        sub_22E890024((uint64_t)&v160, v167);
        sub_22E903BEC((unsigned int *)&v160);
      }
    }
  }
  v25 = *(_QWORD *)(a2 + 8);
  v26 = v25 & 0xFFFFFFFFFFFFFFF0;
  if ((_DWORD)v17
    && ((v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v26 + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v28 = (*(_DWORD *)(v27 + 16) & 0xFF800FF) == 138412043)
      : (v28 = 0),
        v28))
  {
    v154 = a5;
    v35 = sub_22EF5B848(a1[11], *(_QWORD *)(v167[0] + 48), 0);
    v34 = sub_22E90092C((uint64_t)a1, a2, v35, 64, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
    v152 = sub_22E8BBA74(v167[0]);
    v33 = a1[11];
  }
  else
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
       - 25 <= 1)
    {
      v29 = sub_22EF5B848(a1[11], v25, 0);
      v30 = 1;
      a2 = sub_22E90092C((uint64_t)a1, a2, v29, 13, 0, 0);
      if ((a2 & 1) != 0)
        return v30;
    }
    v31 = sub_22EB1A358(a1, a2 & 0xFFFFFFFFFFFFFFFELL, 0);
    if ((v31 & 1) != 0)
      v32 = 1;
    else
      v32 = v31 & 0xFFFFFFFFFFFFFFFELL;
    if ((v32 & 1) != 0)
      return 1;
    v154 = a5;
    v33 = a1[11];
    v152 = *(_QWORD *)(v33 + 16400);
    v34 = v32 & 0xFFFFFFFFFFFFFFFELL;
    if (!(_DWORD)v17)
      goto LABEL_41;
  }
  if (v17 > 0x7E7)
  {
    v137 = *(uint64_t **)(v33 + 15208);
    v138 = v137[1];
    if (v138 + 2024 <= (unint64_t)v17)
    {
      v139 = v17 - v138 - 2024;
      v140 = v137[2];
    }
    else
    {
      v139 = v17 - 2024;
      v140 = *v137;
    }
    v36 = (char **)(v140 + 48 * v139);
  }
  else
  {
    v36 = &(&off_24FAC8C40)[6 * v17];
  }
  if (!strchr(v36[2], 116))
  {
LABEL_41:
    v30 = 1;
    while (1)
    {
      v44 = *(_QWORD *)(v34 + 8);
      v45 = *(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0);
      v46 = *(unsigned __int8 *)(v45 + 16);
      if (v45 && v46 == 39)
      {
LABEL_70:
        v38 = a6;
        v39 = *(_QWORD *)(*(_QWORD *)(v45 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v39)
          v56 = *(unsigned __int8 *)(v39 + 16) - 27 > 0xFFFFFFFD;
        else
          v56 = 0;
        if (!v56
          && (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 25 > 1
           || (v39 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v45 + 32) & 0xFFFFFFFFFFFFFFF0))) == 0))
        {
LABEL_75:
          v57 = a4;
          v58 = a1;
          v59 = 4923;
          goto LABEL_76;
        }
        goto LABEL_83;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      {
        v45 = sub_22F10CF48(v45);
        if (v45)
          goto LABEL_70;
        v44 = *(_QWORD *)(v34 + 8);
        v45 = *(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0);
        v46 = *(unsigned __int8 *)(v45 + 16);
      }
      if (v46 == 10)
        break;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
      {
        v45 = sub_22F10CF48(v45);
        if (v45)
          break;
        v44 = *(_QWORD *)(v34 + 8);
      }
      if (v44 != *(_QWORD *)(a1[11] + 16856))
        goto LABEL_75;
      v47 = sub_22EB3346C(a1, (unsigned __int8 *)v34);
      v34 = v47 & 0xFFFFFFFFFFFFFFFELL;
      if ((v47 & 1) != 0)
        return v30;
    }
    v38 = a6;
    v39 = *(_QWORD *)(*(_QWORD *)(v45 + 32) & 0xFFFFFFFFFFFFFFF0);
    if (v39)
      v64 = *(unsigned __int8 *)(v39 + 16) - 27 >= 0xFFFFFFFE;
    else
      v64 = 0;
    if (!v64)
    {
      v39 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v45 + 32) & 0xFFFFFFFFFFFFFFF0));
      if (!v39)
      {
        v37 = a4;
        v151 = 0;
        goto LABEL_37;
      }
    }
LABEL_83:
    v37 = a4;
    if (*(_BYTE *)(v39 + 16) == 26)
    {
      v148 = 0;
      v149 = 0;
      v40 = (unsigned __int16)(*(_QWORD *)(v39 + 16) >> 38);
      v151 = v39;
    }
    else
    {
      v151 = 0;
      v40 = 0;
      v148 = 0;
      v149 = 1;
    }
    goto LABEL_38;
  }
  v37 = a4;
  v38 = a6;
  v151 = 0;
  v39 = 0;
LABEL_37:
  v40 = 0;
  v148 = 1;
  v149 = 1;
LABEL_38:
  v41 = a1[11];
  v42 = a1[161];
  if (a8)
  {
    if (a1[162] == v42)
      v43 = 0;
    else
      v43 = a1[162];
    v48 = sub_22F062638(v41, v34, a8, v154, v38, v152, 0, a7, v43, v40);
  }
  else
  {
    if (a1[162] == v42)
      v49 = 0;
    else
      v49 = a1[162];
    v48 = sub_22EFFA488(v41, v34, v154, v38, v152, 0, a7, v49, v40, a10);
  }
  v153 = v48;
  v50 = *(_QWORD *)(a1[11] + 2000);
  if ((*(_BYTE *)(v50 + 1) & 1) != 0 || (*(_QWORD *)(v50 + 20) & 0x2000000000) != 0)
    goto LABEL_98;
  v146 = v39;
  v48[4] = v38;
  v51 = sub_22EBBCB14(a1, v48, 0, 0, sub_22F2E6FA4, &v160);
  if (v51 < 2)
    return 1;
  v30 = v51;
  v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFFELL);
  if ((*(_BYTE *)v52 + 113) >= 0xFBu)
  {
    v154 = (uint64_t)&v52[2 * (((unint64_t)*v52 >> 18) & 1) + 2] + ((unint64_t)*v52 >> 24);
    v38 = v52[4];
    if (v153 == v52)
    {
      v39 = v146;
    }
    else
    {
      v39 = v146;
      if (v38 < v40)
      {
        v53 = a1[11];
        v54 = a1[161];
        if (a8)
        {
          if (a1[162] == v54)
            v55 = 0;
          else
            v55 = a1[162];
          v52 = sub_22F062638(v53, v34, a8, v154, v38, v152, 0, a7, v55, v40);
        }
        else
        {
          if (a1[162] == v54)
            v65 = 0;
          else
            v65 = a1[162];
          v52 = sub_22EFFA488(v53, v34, v154, v38, v152, 0, a7, v65, v40, a10);
        }
      }
    }
    if (v38 <= v40)
      v66 = v40;
    else
      v66 = v38;
    v52[4] = v66;
    v153 = v52;
LABEL_98:
    v67 = v37;
    if ((_DWORD)v17)
    {
      if (v17 > 0x7E7)
      {
        v141 = *(uint64_t **)(a1[11] + 15208);
        v142 = v141[1];
        if (v142 + 2024 <= (unint64_t)v17)
        {
          v143 = v17 - v142 - 2024;
          v144 = v141[2];
        }
        else
        {
          v143 = v17 - 2024;
          v144 = *v141;
        }
        v68 = (char **)(v144 + 48 * v143);
      }
      else
      {
        v68 = &(&off_24FAC8C40)[6 * v17];
      }
      if (strchr(v68[2], 116))
      {
        v69 = v167[0];
        v70 = (uint64_t)a1;
        v71 = v17;
        v72 = (uint64_t)v153;
        return sub_22E969000(v70, v69, v71, v72);
      }
    }
    if ((*(_BYTE *)(a1[9] + 68) & 0x20) == 0)
      goto LABEL_106;
    if (a8)
    {
      if (!v167[0] || sub_22E462B18(v167[0]))
      {
        v75 = *(_QWORD *)(*(_QWORD *)(v39 + 24) & 0xFFFFFFFFFFFFFFF0);
        v76 = *(_QWORD *)(*(_QWORD *)(v75 + 8) & 0xFFFFFFFFFFFFFFF0);
        v77 = *(_DWORD *)(v76 + 16);
        if (v76)
          v78 = (v77 & 0xFF800FF) == 86507531;
        else
          v78 = 0;
        if (v78)
          goto LABEL_106;
        v79 = *(_DWORD *)(v75 + 16);
        if (v79 == 14)
          goto LABEL_106;
        if (v77 == 14)
        {
          if (sub_22F10CF48(v75))
            goto LABEL_106;
          v79 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 24) & 0xFFFFFFFFFFFFFFF0) + 16);
        }
        if ((v79 & 0x200) == 0)
        {
          v57 = v37;
          v58 = a1;
          v59 = 3708;
LABEL_76:
          sub_22E8FCA40(v58, v57, v59, 0, (uint64_t)&v160);
          v156[0] = *(_QWORD *)(v34 + 8);
          v60 = sub_22E8901B8((uint64_t)&v160, v156);
LABEL_77:
          v61 = v60;
          sub_22F0D4E74(v34);
          v158 = v62;
          v63 = &v158;
LABEL_141:
          v93 = (void **)v61;
          goto LABEL_142;
        }
LABEL_106:
        if ((*(_BYTE *)(a1[9] + 104) & 0x20) == 0)
        {
          v74 = (uint64_t)v153;
          goto LABEL_125;
        }
        v74 = (uint64_t)v153;
        if (!v167[0] || !sub_22E9A9E30(v167[0]) || sub_22EFC1F80(v167[0]))
        {
LABEL_125:
          v80 = v39;
          v81 = *(_QWORD *)(v39 + 24);
          sub_22F0D5A50(v34);
          if ((sub_22EB34594((uint64_t)a1, v81, v82, v74) & 1) == 0)
          {
            v83 = a1[11];
            v160 = *(void **)(v80 + 24);
            *(_QWORD *)(v74 + 8) = sub_22F1133DC((uint64_t *)&v160, v83);
            *(_DWORD *)v74 = *(_DWORD *)v74 & 0xFFFFFCFF | ((sub_22E8BBBD0(*(_QWORD *)(v80 + 24)) & 3) << 8);
            v84 = v80;
            if ((v149 & 1) != 0)
            {
              if (!v167[0])
                goto LABEL_170;
              v156[0] = 0;
              v85 = 0;
              if (!sub_22EFBF6E8(v167[0], v156))
              {
LABEL_165:
                if ((*(_BYTE *)(v167[0] + 82) & 0x30) != 0)
                  goto LABEL_171;
                v85 = *(_QWORD *)(*(_QWORD *)(v167[0] + 48) & 0xFFFFFFFFFFFFFFF0);
                if (v85)
                {
                  if (*(_BYTE *)(v85 + 16) == 26)
                    goto LABEL_171;
                }
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v85 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26)
                {
                  v85 = sub_22F10CF48(v85);
                  goto LABEL_171;
                }
LABEL_170:
                v85 = 0;
LABEL_171:
                v151 = v85;
                if (!v85
                  && v38
                  && (!v167[0]
                   || (*(_BYTE *)(v167[0] + 29) & 2) == 0
                   && sub_22F1CF68C(*(_QWORD *)(a1[13] + 32), 0x1B5Cu, *(_DWORD *)(v167[0] + 24), a1[13]) != 1))
                {
                  sub_22E8FCA40(a1, v67, 0x1B5Cu, 0, (uint64_t)&v160);
                  LOBYTE(v156[0]) = v167[0] != 0;
                  v109 = sub_22E894E38((uint64_t)&v160, (unsigned __int8 *)v156);
                  sub_22E890024(v109, v167);
                  sub_22E903BEC((unsigned int *)&v160);
                }
                v147 = v67;
                v150 = v38;
                v110 = v38;
                v28 = v38 == 0;
                v111 = v85;
                if (!v28)
                {
                  v112 = 0;
                  do
                  {
                    v113 = *(_QWORD **)(v154 + 8 * v112);
                    v156[0] = (uint64_t)v113;
                    if (v111 && (v114 = *(_QWORD *)(v111 + 16), v112 < (unsigned __int16)(v114 >> 38)))
                    {
                      v115 = v110;
                      v116 = v84;
                      v117 = a1[11];
                      v118 = *(_QWORD *)(v111 + 8 * v112 + 40);
                      if ((v114 & 0x400000000000000) != 0)
                        v119 = (*(unsigned __int8 *)(sub_22E47E270(v111) + v112) >> 4) & 1;
                      else
                        v119 = 0;
                      v161 = 0;
                      v162 = 0;
                      v163 = 0;
                      LODWORD(v160) = 1;
                      v122 = sub_22EF60188(v117, v118);
                      v161 = 0;
                      v162 = (uint64_t *)v122;
                      v123 = 4;
                      if (!v119)
                        v123 = 0;
                      v164 = v123;
                      v124 = sub_22EC45014(a1, &v160, 0, v156[0], 0, 0);
                      if ((v124 & 1) != 0)
                        return 1;
                      v121 = v124 & 0xFFFFFFFFFFFFFFFELL;
                      v156[0] = v124 & 0xFFFFFFFFFFFFFFFELL;
                      v84 = v116;
                      v110 = v115;
                      v111 = v151;
                    }
                    else
                    {
                      v120 = sub_22EB1BB84((uint64_t)a1, v113);
                      if ((v120 & 1) != 0)
                        return 1;
                      v121 = v120 & 0xFFFFFFFFFFFFFFFELL;
                      v156[0] = v120 & 0xFFFFFFFFFFFFFFFELL;
                    }
                    sub_22F0D5A50(v121);
                    v125 = *(_QWORD *)(v121 + 8);
                    v160 = &unk_24FAB6ED0;
                    LODWORD(v161) = 2989;
                    v162 = v156;
                    if ((sub_22EE8B0B0((uint64_t)a1, v126, v125) & 1) != 0)
                      return 1;
                    *(_QWORD *)((char *)&v153[2 * (((unint64_t)*v153 >> 18) & 1) + 2 + 2 * v112++]
                              + ((unint64_t)*v153 >> 24)) = v156[0];
                  }
                  while (v110 != v112);
                }
                v74 = (uint64_t)v153;
                v127 = *v153;
                *v153 = v127 & 0xFFFC1FFF | ((sub_22EFB2A44(v153, (_DWORD **)((char *)v153 + (v127 >> 24) + 8), (v127 >> 18) & 1) & 0x1F) << 13);
                v38 = v150;
                v67 = v147;
                goto LABEL_193;
              }
              v86 = v156[0];
              v87 = *(_QWORD *)(*(_QWORD *)(v156[0] + 48) & 0xFFFFFFFFFFFFFFF0);
              if (v87 && *(_BYTE *)(v87 + 16) == 26
                || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v87 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
                && (v87 = sub_22F10CF48(v87)) != 0)
              {
                v88 = (unsigned __int16)(*(_QWORD *)(v87 + 16) >> 38);
              }
              else
              {
                v88 = 0;
              }
              if (v38 == v88)
              {
                v85 = 0;
                goto LABEL_165;
              }
              v85 = *(_QWORD *)(*(_QWORD *)(v86 + 48) & 0xFFFFFFFFFFFFFFF0);
              if (v85 && *(_BYTE *)(v85 + 16) == 26)
                goto LABEL_154;
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v85 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
              {
                v85 = 0;
                goto LABEL_161;
              }
              v85 = sub_22F10CF48(v85);
              if (v85)
              {
LABEL_154:
                if ((*(_BYTE *)(v85 + 23) & 8) != 0)
                {
                  if ((v95 = *(_QWORD *)(*(_QWORD *)(v86 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0
                    && *(_BYTE *)(v95 + 16) == 26
                    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v95 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
                    && (v95 = sub_22F10CF48(v95)) != 0)
                  {
                    v96 = (unsigned __int16)(*(_QWORD *)(v95 + 16) >> 38);
                  }
                  else
                  {
                    v96 = 0;
                  }
                  if (v38 >= v96)
                    goto LABEL_165;
                }
              }
LABEL_161:
              sub_22E8FCA40(a1, a7, 0x18B4u, 0, (uint64_t)&v160);
              v104 = *(_QWORD *)(*(_QWORD *)(v86 + 48) & 0xFFFFFFFFFFFFFFF0);
              if (v104 && *(_BYTE *)(v104 + 16) == 26
                || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v104 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
                && (v104 = sub_22F10CF48(v104)) != 0)
              {
                v105 = (unsigned __int16)(*(_QWORD *)(v104 + 16) >> 38);
              }
              else
              {
                v105 = 0;
              }
              LOBYTE(v157) = v38 > v105;
              v106 = sub_22E894E38((uint64_t)&v160, (unsigned __int8 *)&v157);
              v107 = sub_22E890024(v106, v167);
              sub_22F0D4E74(v34);
              v158 = v108;
              sub_22E8906A0(v107, &v158);
              sub_22E903BEC((unsigned int *)&v160);
              goto LABEL_165;
            }
            LOBYTE(v145) = a9;
            if ((sub_22EB319F4(a1, v74, v34, v167[0], v151, v154, v38, a7, v145) & 1) == 0)
            {
LABEL_193:
              v128 = v167[0];
              if (!v167[0]
                || (*(_DWORD *)(v167[0] + 28) & 0x7Eu) - 54 > 3
                || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v167[0] + 32))(v167[0]) + 80) & 0xE000) == 0x4000
                || (*(_QWORD *)(v128 + 40) & 7) == 6
                && (*(_DWORD *)(*(_QWORD *)(v128 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
              {
                if (a3)
                  sub_22EB18D60((uint64_t)a1, a3, v67, v154, v38);
                if ((v148 & 1) == 0 && (*(_BYTE *)(v84 + 19) & 0x80) != 0)
                {
                  LODWORD(v156[0]) = 0;
                  if ((_DWORD)v38)
                  {
                    v129 = 0;
                    do
                    {
                      v130 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v154 + 8 * v129) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                   + 8) & 0xFFFFFFFFFFFFFFF0);
                      if (v130)
                      {
                        if (*(_BYTE *)(v130 + 16) == 45)
                        {
                          v131 = sub_22F114198(*(_QWORD *)(v130 + 24));
                          v132 = sub_22EFC3AEC(v131);
                          v129 = v156[0];
                          if (v132)
                          {
                            sub_22F0D5A50(*(_QWORD *)(v154 + 8 * LODWORD(v156[0])));
                            sub_22E8FCA40(a1, v133, 0x18CCu, 0, (uint64_t)&v160);
                            LODWORD(v158) = 0;
                            v134 = sub_22E8900C4((uint64_t)&v160, (int *)&v158);
                            sub_22E89519C(v134, (unsigned int *)v156);
                            sub_22E903BEC((unsigned int *)&v160);
                            v129 = v156[0];
                          }
                        }
                      }
                      LODWORD(v156[0]) = ++v129;
                    }
                    while (v129 != (_DWORD)v38);
                  }
                }
                if (v167[0])
                {
                  if ((sub_22E97FBB8((uint64_t)a1, v167[0], (unsigned __int8 *)v74, v151) & 1) != 0)
                    return 1;
                  sub_22E964224((uint64_t)a1, v167[0], (unsigned int *)v74);
                  if ((_DWORD)v17)
                  {
                    v69 = v167[0];
                    v70 = (uint64_t)a1;
                    v71 = v17;
                    v72 = v74;
                    return sub_22E969000(v70, v69, v71, v72);
                  }
                }
                else if (a3)
                {
                  if ((sub_22E983004((uint64_t)a1, a3, (unsigned int *)v74, v151) & 1) != 0)
                    return 1;
                }
                else if ((sub_22F310DE4((uint64_t)a1, (unsigned int *)v74, v151) & 1) != 0)
                {
                  return 1;
                }
                v135 = sub_22EBCC6C0((uint64_t)a1, v74);
                return sub_22EB346AC((uint64_t)a1, v135, v167[0]);
              }
              sub_22E8FCA40(a1, v67, 0xEB4u, 0, (uint64_t)&v160);
              sub_22F0D4E74(v34);
              v156[0] = v136;
              v93 = &v160;
              v63 = v156;
LABEL_142:
              sub_22E8906A0((uint64_t)v93, v63);
              v19 = (unsigned int *)&v160;
              goto LABEL_143;
            }
          }
          return 1;
        }
        sub_22E8FCA40(a1, v37, 0xEF6u, 0, (uint64_t)&v160);
        v157 = sub_22F3AC79C(v167[0]);
        v97 = sub_22E89519C((uint64_t)&v160, &v157);
        v98 = 0;
        v99 = *(_QWORD *)(v167[0] + 40);
        v100 = "";
        if ((v99 & 7) == 0)
        {
          v101 = v99 & 0xFFFFFFFFFFFFFFF8;
          if (v101)
          {
            v102 = *(_DWORD **)(v101 + 16);
            v103 = *v102;
            v100 = (const char *)(v102 + 4);
            v98 = v103;
          }
        }
        v156[0] = (uint64_t)v100;
        v156[1] = v98;
        v60 = sub_22F2F2210(v97, (uint64_t)v156);
        goto LABEL_77;
      }
      v89 = v37;
      v90 = a1;
      v91 = 3706;
    }
    else
    {
      if (!v167[0] || !sub_22E462B18(v167[0]))
        goto LABEL_106;
      v89 = v37;
      v90 = a1;
      v91 = 3530;
    }
    sub_22E8FCA40(v90, v89, v91, 0, (uint64_t)&v160);
    v61 = sub_22E890024((uint64_t)&v160, v167);
    sub_22F0D4E74(v34);
    v156[0] = v92;
    v63 = v156;
    goto LABEL_141;
  }
  return v30;
}

BOOL sub_22EB34534(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 29) & 1) == 0)
    return 0;
  sub_22EFC8E88(a1);
  v2 = *(_QWORD *)v1;
  v3 = *(unsigned int *)(v1 + 8);
  v4 = *(_QWORD *)v1 + 8 * v3;
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while (*(_WORD *)(*(_QWORD *)v2 + 32) != 90)
    {
      v2 += 8;
      v5 -= 8;
      if (!v5)
      {
        v2 = v4;
        return v2 != v4;
      }
    }
  }
  return v2 != v4;
}

uint64_t sub_22EB34594(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int *v15;

  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = (*(_DWORD *)(v6 + 16) & 0xFF800FF) == 86507531;
  else
    v7 = 0;
  if (v7)
    return 0;
  result = sub_22F1110EC(v5, 0);
  if ((_DWORD)result)
  {
    v12 = *(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696);
    if (*(_DWORD *)(v12 - 8))
    {
      return sub_22EE8B0B0(a1, a3, a2);
    }
    else
    {
      v13 = (_QWORD *)(v12 - 408);
      v14 = *(_DWORD *)(v12 - 400);
      v15 = (unsigned int *)(v12 - 400);
      if (v14 >= *(_DWORD *)(v12 - 396))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = *v15;
      }
      result = 0;
      *(_QWORD *)(*v13 + 8 * v14) = a4;
      ++*v15;
    }
  }
  return result;
}

uint64_t sub_22EB346AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696);
  v5 = *(_DWORD *)(v4 - 576);
  if ((v5 > 3 || v5 == 2) && a2 >= 2 && a3 != 0)
  {
    v11 = (v5 & 0xFFFFFFFE) != 4 && (*(_QWORD *)(a3 + 80) & 0xC0000000) == 0x80000000;
    if (v11 && !*(_BYTE *)(a1 + 3209) && !*(_BYTE *)(a1 + 3208) && v5 != 5 && (v5 != 2 || !*(_BYTE *)(v4 - 3)))
    {
      v13 = sub_22EFFED0C((unsigned __int8 *)(a2 & 0xFFFFFFFFFFFFFFFELL));
      if ((*v13 + 113) >= 0xFBu)
      {
        v14 = sub_22EFFED0C(*(unsigned __int8 **)&v13[v13[3]]);
        if (*v14 == 161)
        {
          v15 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v4 - 72), v14);
          v16 = *(_QWORD *)(v4 - 64);
          v17 = -56;
          if (v16 == *(_QWORD *)(v4 - 72))
            v17 = -52;
          if (v15 != (void **)(v16 + 8 * *(unsigned int *)(v4 + v17)))
          {
            *v15 = (void *)-2;
            ++*(_DWORD *)(v4 - 48);
          }
        }
      }
      if ((v3 & 1) != 0)
        v18 = 0;
      else
        v18 = (int *)((unint64_t)sub_22EBCCCF0(a1, (int *)(v3 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL);
      v19 = *(_QWORD *)(a1 + 88);
      v20 = *(_QWORD *)(*(_QWORD *)(a3 + 48) & 0xFFFFFFFFFFFFFFF0);
      if (v20 && *(unsigned __int8 *)(v20 + 16) - 27 > 0xFFFFFFFD)
      {
        v21 = *(_QWORD *)(a1 + 88);
      }
      else
      {
        v20 = sub_22F10CF48(v20);
        v21 = *(_QWORD *)(a1 + 88);
      }
      v22 = sub_22F3C0FB4(*(_QWORD *)(*(_QWORD *)(v20 + 24) & 0xFFFFFFFFFFFFFFF0), v21);
      v3 = sub_22EFF6594(v19, v18, v22, 1);
      if ((*(_BYTE *)(v3 + 2) & 1) == 0)
        sub_22F32FC00(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 120, v3, 0);
    }
  }
  return v3;
}

uint64_t sub_22EB34874()
{
  uint64_t v0;
  unsigned int v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *i;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  _QWORD *v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int v67;
  int v68;
  _QWORD v69[2];
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t *v77;
  void *v78;
  int v79;
  unsigned int *v80;
  uint64_t v81;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = (uint64_t)v2;
  v5 = v4;
  v6 = v1;
  v7 = v0;
  v81 = *MEMORY[0x24BDAC8D0];
  v76 = v2;
  v77 = v8;
  v9 = *v8;
  v75 = v9;
  v10 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
  {
    if ((*(_DWORD *)(v10 + 16) & 0x400) != 0)
    {
      v12 = v1;
    }
    else
    {
      sub_22F0D4E74((uint64_t)v2);
      v12 = v6;
      v67 = v6;
      v68 = v15;
      v78 = &unk_24FAB6EA8;
      v79 = 4962;
      v80 = &v67;
      v14 = 1;
      if ((sub_22EE8B0B0(v7, v6, v9) & 1) != 0)
        return v14;
    }
  }
  else
  {
    v11 = sub_22EF5BA38(*(_QWORD *)(v0 + 88), v9);
    sub_22F0D4E74(v3);
    v12 = v6;
    v67 = v6;
    v68 = v13;
    v79 = 2705;
    v80 = &v67;
    v78 = &unk_24FAB84B0;
    if ((sub_22EE8B0B0(v7, v6, v11) & 1) != 0
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 5
      && !sub_22EA1BDC8((_QWORD *)v7, &v77, &v75, v6, 0x1404u))
    {
      return 1;
    }
  }
  v16 = *v77;
  v70 = 17;
  v71 = 0;
  v72 = v16;
  v73 = 0;
  v74 = v77;
  v69[0] = ((unint64_t)v6 << 32) | 0x401;
  v69[1] = v6 | (unint64_t)(v5 << 32);
  v14 = 1;
  sub_22EC395BC(&v78, v7, &v70, v69, &v76, 1, 0, 1);
  v17 = sub_22EC3DF80((int)&v78, v7);
  if ((v17 & 1) != 0)
    goto LABEL_11;
  v19 = (unsigned __int8 *)(v17 & 0xFFFFFFFFFFFFFFFELL);
  v76 = (unsigned __int8 *)(v17 & 0xFFFFFFFFFFFFFFFELL);
  v20 = *(_WORD *)(*(_QWORD *)(v7 + 216) + 8) & 0x7F;
  if (v20 > 0x18 || ((1 << v20) & 0x1000006) == 0)
  {
    v42 = v20 - 52;
    v22 = v7 + 72;
    if ((**(_QWORD **)(v7 + 72) & 0x100) != 0 && v42 >= 6)
    {
      v23 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) & 0xFEu)
          - 2 < 4;
    }
    else
    {
      v23 = (**(_QWORD **)(v7 + 72) & 0x100) == 0;
      if (v42 < 6)
      {
        v21 = 0;
        goto LABEL_16;
      }
    }
    if (*v19 == 180)
    {
      v52 = *((_QWORD *)v19 + 3) - *((_QWORD *)v19 + 2);
      if ((v52 & 0x7FFFFFFF8) != 0)
      {
        v53 = 0;
        v54 = (v52 >> 3);
        do
        {
          v55 = *(int **)(*((_QWORD *)v19 + 2) + 8 * v53);
          v56 = sub_22E3CD3D4(*(_QWORD *)(v7 + 88) + 2032, 24, 3);
          v57 = (_QWORD *)sub_22EFF6504(v56, 172, v55);
          *v57 &= 0xFFFFFFFC0003FFFFLL;
          *(_QWORD *)(*((_QWORD *)v19 + 2) + 8 * v53) = v57;
          *(_DWORD *)v19 |= *(_DWORD *)v57 & 0x3E000;
          ++v53;
        }
        while (v54 != v53);
      }
    }
    v24 = 0;
    v21 = 1;
    goto LABEL_17;
  }
  v21 = 0;
  v22 = v7 + 72;
  v23 = (*(_BYTE *)(*(_QWORD *)(v7 + 72) + 1) & 1) == 0;
LABEL_16:
  v24 = 1;
LABEL_17:
  v25 = sub_22E3CD3D4(*(_QWORD *)(v7 + 88) + 2032, 40, 3);
  sub_22F330580(v25, v12, (uint64_t)v77, v75, v23, (uint64_t)v76, v21);
  if ((v24 & 1) != 0)
  {
    v31 = v75;
    v32 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFFFF0) + 8);
    if ((v32 & 8) != 0 && (*(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFD800 | 0x2000) != 0x2000)
    {
      v33 = (_QWORD *)v7;
      v34 = v12;
      v35 = 3046;
LABEL_28:
      sub_22E8FCA40(v33, v34, v35, 0, (uint64_t)&v67);
      sub_22F0D4E74((uint64_t)v76);
      v66 = __PAIR64__(v37, v6);
      sub_22E8906A0((uint64_t)&v67, (uint64_t *)&v66);
      sub_22E903BEC(&v67);
      goto LABEL_29;
    }
  }
  else
  {
    v31 = v75;
    if ((*(_DWORD *)v76 & 0x18000) == 0 && (*(_BYTE *)(*(_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
    {
      if ((sub_22EA27BBC((_QWORD *)v7, v76, v75, v26, v27, v28, v29, v30) & 1) != 0)
      {
LABEL_29:
        v14 = 1;
        goto LABEL_11;
      }
      v31 = v75;
    }
  }
  v36 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v36 & 8) != 0 && (*(_BYTE *)((v36 & 0xFFFFFFFFFFFFFFF0) + 0x19) & 6) != 0)
  {
    v33 = (_QWORD *)v7;
    v34 = v12;
    v35 = 3836;
    goto LABEL_28;
  }
  if (!v24 || (*(_BYTE *)(*(_QWORD *)v22 + 1) & 1) != 0)
    goto LABEL_50;
  for (i = (_QWORD *)(v25 + 8); ; i = (_QWORD *)(v41 + 32))
  {
    v39 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
    if (v39)
      v40 = (*(_DWORD *)(v39 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v40 = 0;
    if (v40)
    {
      v41 = *(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF0);
      continue;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v41 = sub_22F10CF48(v39);
    if (!v41)
      break;
  }
  v43 = sub_22F10C2A4(v39);
  if (v43 && (*(_DWORD *)(v43 + 28) & 0x7Eu) - 34 <= 3 && (*(_BYTE *)(v43 + 76) & 1) != 0)
  {
    v58 = *(_QWORD *)(v25 + 8);
    sub_22EFF605C(v25);
    sub_22F31DBEC(v7, v58, v59, 6, 2);
  }
  if (sub_22F115260(v75))
  {
    *(_WORD *)(v7 + 1693) = 257;
    v44 = *(_DWORD *)(v7 + 1704);
    if (v44 >= *(_DWORD *)(v7 + 1708))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v44 = *(_DWORD *)(v7 + 1704);
    }
    *(_QWORD *)(*(_QWORD *)(v7 + 1696) + 8 * v44) = v25 | 4;
    ++*(_DWORD *)(v7 + 1704);
    v45 = *(_QWORD *)(*(_QWORD *)(v7 + 1896) + 8 * *(unsigned int *)(v7 + 1904) - 8);
    *(_DWORD *)(v45 + 8) |= 8u;
  }
LABEL_50:
  v46 = (_QWORD *)(v25 + 8);
  v47 = (_QWORD *)(v25 + 8);
  while (2)
  {
    v48 = *(_QWORD *)(*v47 & 0xFFFFFFFFFFFFFFF0);
    if (v48)
      v49 = (*(_DWORD *)(v48 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v49 = 0;
    if (v49)
    {
      v50 = *(_QWORD *)(*v47 & 0xFFFFFFFFFFFFFFF0);
LABEL_59:
      v47 = (_QWORD *)(v50 + 32);
      continue;
    }
    break;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
  {
    v50 = sub_22F10CF48(v48);
    if (v50)
      goto LABEL_59;
  }
  v51 = sub_22F10C2A4(v48);
  if (v51 && (*(_DWORD *)(v51 + 28) & 0x7Eu) - 34 <= 3 && (*(_BYTE *)(v51 + 75) & 0x80) != 0)
  {
LABEL_87:
    v64 = *(_QWORD **)(v25 + 32);
    sub_22EFF605C((uint64_t)v64);
    sub_22EA286EC(v7, v64, v65);
    goto LABEL_84;
  }
  while (2)
  {
    v61 = *(_QWORD *)(*v46 & 0xFFFFFFFFFFFFFFF0);
    if (v61)
      v62 = (*(_DWORD *)(v61 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v62 = 0;
    if (v62)
    {
      v60 = *(_QWORD *)(*v46 & 0xFFFFFFFFFFFFFFF0);
LABEL_77:
      v46 = (_QWORD *)(v60 + 32);
      continue;
    }
    break;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
  {
    v60 = sub_22F10CF48(*(_QWORD *)(*v46 & 0xFFFFFFFFFFFFFFF0));
    if (v60)
      goto LABEL_77;
  }
  v63 = sub_22F10C2A4(v61);
  if (v63 && (*(_DWORD *)(v63 + 28) & 0x7Eu) - 34 <= 3 && (*(_BYTE *)(v63 + 76) & 2) != 0)
    goto LABEL_87;
LABEL_84:
  v14 = sub_22EBCC6C0(v7, v25);
LABEL_11:
  sub_22EC3CE2C((uint64_t)&v78);
  return v14;
}

uint64_t sub_22EB34F98(_QWORD *a1, int a2, uint64_t *a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  unsigned __int8 *v14;
  int *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  int *v31;
  int *v32;
  int *v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  int *v37;
  int v38;
  int *v39;
  int *v40;
  int *v41;
  int *v42;
  uint64_t v43;
  int v44;
  unsigned int *v45;
  _BYTE *v46;
  _QWORD *v47;
  unsigned int v48;
  int v53;
  uint64_t v54;
  _BYTE v55[96];
  _BYTE v56[96];
  unint64_t v57;
  unsigned int v58[26];

  v5 = a5;
  v6 = a4;
  v8 = a2;
  v54 = a4;
  if (!(_DWORD)a4)
    return sub_22EB353A0((uint64_t)a1, v8, a3, v6, v5);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v53 = 0;
  while (1)
  {
    v14 = (unsigned __int8 *)a3[v10];
    if (*v14 == 164)
      break;
    if (!(((*(_BYTE *)(a1[9] + 1) & 1) == 0) | v13 & 1))
    {
      v18 = *a3;
      if (*(unsigned __int8 *)*a3 == 164)
      {
        v19 = *(int **)(v18 + 24);
        if (*v19)
        {
          v21 = v19 + 3;
        }
        else
        {
          v20 = v19 + 5;
          v21 = v19 + 4;
          if ((*(_BYTE *)(v18 + 20) & 1) != 0)
            v21 = v20;
        }
        sub_22E8FCA40(a1, *v21, 0x1460u, 0, (uint64_t)v58);
        sub_22F0D4E74(v18);
        v57 = v22;
        sub_22E8906A0((uint64_t)v58, (uint64_t *)&v57);
        sub_22E903BEC(v58);
        sub_22F0D5A50(a3[v10]);
        sub_22E8FCA40(a1, v23, 0x15B6u, 0, (uint64_t)v58);
        v24 = a3[v10];
        goto LABEL_37;
      }
      goto LABEL_32;
    }
LABEL_39:
    if (++v10 == v54)
      goto LABEL_50;
  }
  if (!v53)
  {
    v15 = (int *)*((_QWORD *)v14 + 3);
    if (*v15)
    {
      v17 = v15 + 3;
    }
    else
    {
      v16 = v15 + 5;
      v17 = v15 + 4;
      if ((v14[20] & 1) != 0)
        v17 = v16;
    }
    v53 = *v17;
  }
  if ((*(_BYTE *)(a1[9] + 1) & 1) != 0)
  {
    if ((v12 & 1) == 0)
    {
      v25 = *((_DWORD *)v14 + 5);
      if ((v25 & 0xFFFC) == 0)
      {
        v12 = 0;
LABEL_20:
        if ((unsigned __int16)*((_DWORD *)v14 + 5) >> 1)
        {
          v26 = *((_QWORD *)v14 + 3);
          v27 = 24 * ((unsigned __int16)*((_DWORD *)v14 + 5) >> 1);
          v28 = (unsigned int *)(v26 + 20);
          do
          {
            if (!*(v28 - 5) || (v11 & 1) != 0)
              goto LABEL_29;
            sub_22E8FCA40(a1, *(v28 - 2), 0x145Eu, 0, (uint64_t)v58);
            if (*(v28 - 5))
            {
              v29 = (unsigned int *)(v26 + 12);
            }
            else
            {
              v30 = *(v28 - 1);
              v29 = v28;
              if ((_DWORD)v30)
                goto LABEL_28;
            }
            v30 = *v29;
LABEL_28:
            v57 = v30 | ((unint64_t)*v28 << 32);
            sub_22E8906A0((uint64_t)v58, (uint64_t *)&v57);
            sub_22E903BEC(v58);
            v11 = 1;
LABEL_29:
            v26 += 24;
            v28 += 6;
            v27 -= 24;
          }
          while (v27);
        }
        if ((v13 & 1) != 0)
          goto LABEL_38;
        if (*(unsigned __int8 *)*a3 != 164)
        {
          v31 = (int *)*((_QWORD *)v14 + 3);
          if (*v31)
          {
            v33 = v31 + 3;
          }
          else
          {
            v32 = v31 + 5;
            v33 = v31 + 4;
            if ((v14[20] & 1) != 0)
              v33 = v32;
          }
          sub_22E8FCA40(a1, *v33, 0x1460u, 0, (uint64_t)v58);
          sub_22F0D4E74((uint64_t)v14);
          v57 = v34;
          sub_22E8906A0((uint64_t)v58, (uint64_t *)&v57);
          sub_22E903BEC(v58);
          sub_22F0D5A50(*a3);
          sub_22E8FCA40(a1, v35, 0x15B6u, 0, (uint64_t)v58);
          v24 = *a3;
LABEL_37:
          sub_22F0D4E74(v24);
          v57 = v36;
          sub_22E8906A0((uint64_t)v58, (uint64_t *)&v57);
          sub_22E903BEC(v58);
LABEL_38:
          v13 = 1;
          goto LABEL_39;
        }
LABEL_32:
        v13 = 0;
        goto LABEL_39;
      }
      v37 = (int *)*((_QWORD *)v14 + 3);
      v38 = *v37;
      v39 = v37 + 3;
      v40 = v37 + 5;
      v41 = v37 + 4;
      if ((v25 & 1) != 0)
        v42 = v40;
      else
        v42 = v41;
      if (v38)
        v42 = v39;
      sub_22E8FCA40(a1, *v42, 0x1461u, 0, (uint64_t)v58);
      v57 = sub_22F3C2A24((uint64_t)v14);
      sub_22E8906A0((uint64_t)v58, (uint64_t *)&v57);
      sub_22E903BEC(v58);
    }
    v12 = 1;
    goto LABEL_20;
  }
LABEL_50:
  v5 = a5;
  v6 = a4;
  v8 = a2;
  if (v53)
  {
    v43 = *(_QWORD *)a1[9];
    if (((v43 & 0x100) == 0) | (v11 | v12 | v13) & 1)
    {
      if ((v43 & 0x101) == 0)
      {
        v44 = v53;
        v45 = (unsigned int *)v55;
        v46 = v55;
        v47 = a1;
        v48 = 5213;
        goto LABEL_58;
      }
    }
    else
    {
      if ((v43 & 0x1000) != 0)
        v48 = 6412;
      else
        v48 = 5205;
      v44 = v53;
      v45 = (unsigned int *)v56;
      v46 = v56;
      v47 = a1;
LABEL_58:
      sub_22E8FCA40(v47, v44, v48, 0, (uint64_t)v46);
      sub_22E903BEC(v45);
    }
  }
  return sub_22EB353A0((uint64_t)a1, v8, a3, v6, v5);
}

uint64_t sub_22EB353A0(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v10 = a4;
  if ((_DWORD)a4)
  {
    v11 = a3;
    do
    {
      v12 = *(_QWORD *)(*(_QWORD *)(*v11 + 8) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(v12 + 16) & 0xFF80000u) >= 0x8200001 && v12 != 0 && *(_DWORD *)(v12 + 16) == 11)
      {
        v15 = sub_22EB19A28(a1);
        if ((v15 & 1) == 0)
          *v11 = v15 & 0xFFFFFFFFFFFFFFFELL;
      }
      ++v11;
      --v10;
    }
    while (v10);
  }
  v16 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 64, 3);
  result = sub_22EFFD1B0(v16, *(_QWORD *)(a1 + 88), a2, a3, a4, a5);
  *(_QWORD *)(result + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392);
  return result;
}

uint64_t sub_22EB3547C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  char *v6;
  int v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;

  v3 = (uint64_t *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  v4 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v3[1] & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    return 5;
  result = sub_22F110F44(*v3);
  if ((result - 4) < 2)
  {
    v6 = (char *)&def_22EB35570 + 4 * byte_22F4800EC[sub_22F110F44(*v4)];
    __asm { BR              X10 }
  }
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
      v8 = (char *)&def_22EB35570 + 4 * byte_22F480102[sub_22F110F44(*v4)];
      __asm { BR              X10 }
      return result;
    case 6:
      v7 = sub_22F110F44(*v4);
      if (v7 != 6)
        __asm { BR              X10 }
      result = 42;
      break;
    case 7:
      v9 = (char *)&def_22EB35570 + 4 * byte_22F480108[sub_22F110F44(*v4) - 4];
      __asm { BR              X10 }
      return result;
    case 8:
      v10 = (char *)&def_22EB35570 + 4 * word_22F4800D4[sub_22F110F44(*v4) - 4];
      __asm { BR              X10 }
      return result;
    case 9:
      v11 = (char *)&def_22EB35570 + 4 * word_22F4800F6[sub_22F110F44(*v4) - 4];
      __asm { BR              X10 }
      return result;
    default:
      return result;
  }
  return result;
}

void sub_22EB35768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  sub_22EFF605C(v10);
  sub_22E8FCA40(v9, v12, 0x4Fu, 0, (uint64_t)&a9);
  sub_22E8901B8((uint64_t)&a9, (uint64_t *)(v11 - 72));
  sub_22E903BEC(&a9);
  JUMPOUT(0x22EB35544);
}

void sub_22EB357CC()
{
  JUMPOUT(0x22EB357D4);
}

uint64_t sub_22EB35A88(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_22F111384(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0));
  if ((_DWORD)result)
  {
    result = sub_22E3E4B64(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    if (result)
      return (*(_DWORD *)(result + 16) & 0x780000) == 3670016;
  }
  return result;
}

BOOL sub_22EB35AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2;
  v6 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_22E3E4B64(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v7)
  {
    v8 = *(unsigned int *)(v7 + 20);
    v4 = *(_QWORD *)(v7 + 32);
  }
  else
  {
    result = sub_22F110E00(*v6);
    if (!result)
      return result;
    v8 = 1;
  }
  v10 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_22E3E4B64(*v10);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 20);
    v10 = (uint64_t *)(*(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  else
  {
    result = sub_22F110E00(*v10);
    if (!result)
      return result;
    v12 = 1;
  }
  v13 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0));
  return v13 * v8 == sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *v10) * v12;
}

uint64_t sub_22EB35B94(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v6;
  unint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
  v2 = *(_DWORD *)(v1 + 16);
  if (v1)
    v3 = v2 == 11;
  else
    v3 = 0;
  if (v3)
    return ((v2 >> 19) & 0x1FF) - 166 < 0x35;
  if (v1 && v2 == 44)
  {
    v4 = sub_22F114198(*(_QWORD *)(v1 + 24));
    return (*(_BYTE *)(v4 + 74) & 1) != 0 || *(_QWORD *)(v4 + 128) > 7uLL;
  }
  else
  {
    v6 = v2 > 0x27u;
    v7 = (0x8180001600uLL >> v2) & 1;
    if (v6)
      return 0;
    else
      return v7;
  }
}

BOOL sub_22EB35C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000);
  if ((*(_BYTE *)(v6 + 136) & 1) != 0)
    return sub_22F32E0C8(a1, a2, a3);
  v7 = (*(_QWORD *)(v6 + 232) >> 59) & 3;
  if (!(_DWORD)v7)
    return 0;
  if ((_DWORD)v7 != 1)
    return sub_22F32E0C8(a1, a2, a3);
  v8 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_DWORD *)(v9 + 16);
  if (v9)
    v11 = v10 == 11;
  else
    v11 = 0;
  if (v11)
  {
    if (((*(_DWORD *)(v9 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_29;
  }
  else if (v9 && v10 == 44)
  {
    v12 = sub_22F114198(*(_QWORD *)(v9 + 24));
    if ((*(_BYTE *)(v12 + 74) & 1) != 0 || *(_QWORD *)(v12 + 128) > 7uLL)
      goto LABEL_29;
    v8 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  }
  else if (v10 == 9)
  {
    goto LABEL_29;
  }
  v13 = sub_22E3E4B64(v8);
  if (!v13)
    return 0;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_DWORD *)(v14 + 16);
  if (v14)
    v16 = v15 == 11;
  else
    v16 = 0;
  if (v16)
  {
    if (((*(_DWORD *)(v14 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      return 0;
  }
  else if (v14 && v15 == 44)
  {
    v17 = sub_22F114198(*(_QWORD *)(v14 + 24));
    if ((*(_BYTE *)(v17 + 74) & 1) == 0 && *(_QWORD *)(v17 + 128) < 8uLL)
      return 0;
  }
  else if (v15 != 9)
  {
    return 0;
  }
LABEL_29:
  v18 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_DWORD *)(v19 + 16);
  if (v19)
    v21 = v20 == 11;
  else
    v21 = 0;
  if (v21)
  {
    if (((*(_DWORD *)(v19 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      return sub_22F32E0C8(a1, a2, a3);
  }
  else if (v19 && v20 == 44)
  {
    v22 = sub_22F114198(*(_QWORD *)(v19 + 24));
    if ((*(_BYTE *)(v22 + 74) & 1) != 0 || *(_QWORD *)(v22 + 128) > 7uLL)
      return sub_22F32E0C8(a1, a2, a3);
    v18 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  }
  else if (v20 == 9)
  {
    return sub_22F32E0C8(a1, a2, a3);
  }
  v23 = sub_22E3E4B64(v18);
  if (!v23)
    return 0;
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_DWORD *)(v24 + 16);
  if (v24)
    v26 = v25 == 11;
  else
    v26 = 0;
  if (v26)
  {
    if (((*(_DWORD *)(v24 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      return 0;
    return sub_22F32E0C8(a1, a2, a3);
  }
  if (!v24 || v25 != 44)
  {
    if (v25 != 9)
      return 0;
    return sub_22F32E0C8(a1, a2, a3);
  }
  v27 = sub_22F114198(*(_QWORD *)(v24 + 24));
  if ((*(_BYTE *)(v27 + 74) & 1) != 0 || *(_QWORD *)(v27 + 128) >= 8uLL)
    return sub_22F32E0C8(a1, a2, a3);
  return 0;
}

BOOL sub_22EB35E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v4 = sub_22E3E4B64(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_22E3E4B64(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0));
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  if ((*(_DWORD *)(v4 + 16) & 0x780000) != 0)
  {
    if ((*(_DWORD *)(v4 + 16) & 0x780000) != 0x80000 || (*(_BYTE *)(v5 + 18) & 0x78) != 0)
      return 0;
  }
  else if ((*(_DWORD *)(v5 + 16) & 0x780000) != 0x80000)
  {
    return 0;
  }
  if (*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v5 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    return 0;
  return *(_DWORD *)(v4 + 20) == *(_DWORD *)(v5 + 20);
}

uint64_t sub_22EB35F48(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  int v13;
  unint64_t v15;

  v5 = a2 & 0xFFFFFFFFFFFFFFF0;
  v6 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(unsigned __int8 *)(v6 + 16) - 57 > 0xFFFFFFFD;
  else
    v7 = 0;
  if (!v7)
    v6 = sub_22F10CF48(v6);
  v8 = *(_QWORD *)(v6 + 32);
  v9 = *(_QWORD *)(a3 + 8);
  if (v8 == v9)
    return a3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v10 && (*(_DWORD *)(v10 + 16) & 0xFF800FF) == 87031819)
    {
      if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 100) & 0x2000000000) != 0)
        v13 = 30;
      else
        v13 = 41;
      if (sub_22F10E0EC(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0)))
      {
        a3 = sub_22E90092C(a1, a3, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16480), v13, 0, 0) & 0xFFFFFFFFFFFFFFFELL;
        v13 = 32;
      }
      return sub_22E90092C(a1, a3, v8, v13, 0, 0);
    }
  }
  v15 = a3;
  v12 = sub_22EB3547C(a1, &v15, v8);
  if ((v15 & 1) != 0)
    return 1;
  v13 = v12;
  a3 = v15 & 0xFFFFFFFFFFFFFFFELL;
  return sub_22E90092C(a1, a3, v8, v13, 0, 0);
}

uint64_t sub_22EB360B4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *p_p;
  size_t v34;
  __int128 *v35;
  unint64_t *p_dst;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  __int128 *v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  _BYTE *v60;
  uint64_t v61;
  int v62;
  int v63;
  __int128 v64;
  __int128 __p;
  uint64_t v66;
  unsigned int v67[24];
  unsigned int v68[24];
  __int128 __dst;
  unint64_t v70;
  unsigned int v71[24];
  _BYTE *v72;
  _BYTE v73[12];
  char v74;
  __int128 v75;
  unint64_t v76;
  char v77;
  uint64_t v78;

  v8 = (unsigned __int8 *)a7;
  v9 = a6;
  v78 = *MEMORY[0x24BDAC8D0];
  v15 = sub_22EE89D90(a1, a4, *(_QWORD *)(a7 + 8), a4, (uint64_t)a5, a6, a7, a8);
  if ((*(_WORD *)(a4 + 1088) & 1) != 0 || (**(_QWORD **)a4 & 0x3F000) == 0x32000)
    return 1;
  v18 = v15;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
  {
    sub_22EAA474C(a1, a4);
  }
  else
  {
    v19 = (unint64_t)sub_22EBBCB14(a1, v8, 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)v71);
    if (v19 < 2)
      return 1;
    v8 = (unsigned __int8 *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  }
  sub_22EA7DCEC((unsigned int *)a1, a4);
  v20 = *v18;
  *a5 = sub_22EE7D030(a1, *v18, (uint64_t)v18);
  v21 = *v8;
  if (v21 == 215)
    v22 = (uint64_t)v8;
  else
    v22 = 0;
  v23 = *(_QWORD *)(a1 + 72);
  if ((*(_QWORD *)(v23 + 8) & 0xC0000000000) == 0
    && (*(_DWORD *)(v23 + 52) & 0x40000000) == 0
    && ((*(_BYTE *)(v23 + 104) & 0x20) == 0
     || !(*(_QWORD *)(v23 + 116) & 0x1000000000000 | *(_QWORD *)(v23 + 132) & 0x8000)))
  {
    goto LABEL_70;
  }
  v24 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 > 1)
    goto LABEL_70;
  v25 = sub_22E3E4B64(v24);
  if (v25)
  {
    if ((*(_DWORD *)(v25 + 16) & 0x780000) == 0x80000)
      goto LABEL_70;
  }
  if ((v21 & 0xFE) != 0xD6)
    goto LABEL_70;
  v26 = *(_QWORD *)(a1 + 72);
  if ((*(_QWORD *)(v26 + 116) & 0x1000000000000) != 0 && v21 == 215)
  {
    v27 = *(_DWORD *)(v22 + 4);
    if (!v27)
    {
      sub_22EFF605C(v22);
      sub_22E8FCA40((_QWORD *)a1, v28, 0xA3Eu, 0, (uint64_t)v68);
      sub_22E903BEC(v68);
      return 1;
    }
  }
  else
  {
    if (v21 == 214)
    {
      v29 = (uint64_t *)(v8 + 24);
      goto LABEL_29;
    }
    v27 = *(_DWORD *)(v22 + 4);
  }
  if (v27 != 1)
    goto LABEL_31;
  v29 = (uint64_t *)(v22 + 24);
LABEL_29:
  v30 = *v29;
  if ((*(_BYTE *)(v30 + 1) & 0x80) != 0
    || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 57 > 0xFFFFFFFD)
  {
    goto LABEL_70;
  }
LABEL_31:
  if ((*(_QWORD *)(v26 + 132) & 0x8000) == 0 || (*(_QWORD *)(v26 + 100) & 0x2000000000) == 0)
  {
    *(_QWORD *)&__dst = 0;
    v62 = *((_DWORD *)v8 + 5);
    v63 = *((_DWORD *)v8 + 4);
    if (*v8 == 215)
    {
      p_dst = (unint64_t *)(v8 + 24);
      v37 = *((_DWORD *)v8 + 1);
    }
    else
    {
      *(_QWORD *)&__dst = *((_QWORD *)v8 + 3);
      p_dst = (unint64_t *)&__dst;
      v37 = 1;
    }
    v38 = *v18;
    v72 = &v73[8];
    *(_QWORD *)v73 = 0x800000000;
    v39 = *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0);
    if (!v39 || *(unsigned __int8 *)(v39 + 16) - 57 <= 0xFFFFFFFD)
      v39 = sub_22F10CF48(v39);
    v40 = *(_DWORD *)(v39 + 20);
    sub_22F0D4E74((uint64_t)v8);
    if ((sub_22E95CF10((_QWORD *)a1, v41, v38, *(_QWORD *)(v39 + 32)) & 1) != 0)
      goto LABEL_52;
    v42 = *(_DWORD *)(v39 + 16);
    v43 = (v42 >> 19) & 0xF;
    if (v43 == 2
      || (v44 = *(_QWORD *)(a1 + 72), (v43 - 3) <= 1)
      && (*(_QWORD *)(v44 + 232) & 0x6000000000000000) == 0x4000000000000000)
    {
      if (v37 == 1)
        goto LABEL_57;
      if (v37 < v40)
      {
        sub_22EFF605C((uint64_t)v8);
        sub_22E8FCA40((_QWORD *)a1, v51, 0xE10u, 0, (uint64_t)v71);
        sub_22E903BEC(v71);
        goto LABEL_52;
      }
    }
    else if (((*(_DWORD *)(v44 + 52) & 0x40000000) != 0 || (*(_BYTE *)(v44 + 104) & 0x20) != 0)
           && (v42 & 0x780000) == 0
           && v37 == 1)
    {
LABEL_57:
      v45 = *(_QWORD *)(v39 + 32);
      v46 = sub_22EB1A358(a1, *p_dst);
      *(_QWORD *)v71 = v46;
      if ((v46 & 1) == 0)
      {
        v47 = v46 & 0xFFFFFFFFFFFFFFFELL;
        v48 = sub_22EB3547C(a1, v71, v45);
        v49 = sub_22E90092C(a1, v47, v45, v48, 0, 0);
        v50 = sub_22E95CFA4((_QWORD *)a1, a3, (uint64_t *)v18, v9, (unsigned __int8 *)(v49 & 0xFFFFFFFFFFFFFFFELL));
LABEL_85:
        v16 = v50;
LABEL_86:
        if (v72 != &v73[8])
          free(v72);
        return v16;
      }
LABEL_52:
      v16 = 1;
      goto LABEL_86;
    }
    sub_22E5223E0((uint64_t)&v72, p_dst, &p_dst[v37]);
    v61 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 64, 3);
    *(_QWORD *)(sub_22EFFD1B0(v61, *(_QWORD *)(a1 + 88), v63, (uint64_t *)v72, *(unsigned int *)v73, v62) + 8) = v38;
    v50 = sub_22EB34874();
    goto LABEL_85;
  }
  if (v22 && *(_DWORD *)(v22 + 4) >= 2u)
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0x1A4Bu, 0, (uint64_t)v67);
    sub_22E903BEC(v67);
    sub_22E8FCA40((_QWORD *)a1, a3, 0x16B4u, 0, (uint64_t)v71);
    v31 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)&v64 = sub_22E8FCD8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 80));
    *((_QWORD *)&v64 + 1) = v32;
    v66 = 0;
    __p = 0uLL;
    sub_22F1193C0(v31, 0, &__p, &v64);
    if (v66 >= 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    if (v66 >= 0)
      v34 = HIBYTE(v66) & 0x7F;
    else
      v34 = *((_QWORD *)&__p + 1);
    *(_QWORD *)&v73[4] = 0;
    v74 = 0;
    v77 = 0;
    v72 = (_BYTE *)(a3 | ((unint64_t)v9 << 32));
    v73[0] = 1;
    if (v34 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v34 >= 0x17)
    {
      v52 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v52 = v34 | 7;
      v53 = v52 + 1;
      v54 = p_p;
      v55 = (__int128 *)operator new(v52 + 1);
      p_p = v54;
      v35 = v55;
      *((_QWORD *)&__dst + 1) = v34;
      v70 = v53 | 0x8000000000000000;
      *(_QWORD *)&__dst = v55;
    }
    else
    {
      HIBYTE(v70) = v34;
      v35 = &__dst;
      if (!v34)
        goto LABEL_65;
    }
    memmove(v35, p_p, v34);
LABEL_65:
    *((_BYTE *)v35 + v34) = 0;
    v75 = __dst;
    v76 = v70;
    sub_22E890748((uint64_t)v71, &v72);
    if (SHIBYTE(v76) < 0)
      operator delete((void *)v75);
    if (SHIBYTE(v66) < 0)
      operator delete((void *)__p);
    sub_22E903BEC(v71);
  }
LABEL_70:
  if (*v8 == 215)
  {
    v56 = sub_22EB29350((_QWORD *)a1, a2, v8);
    if ((v56 & 1) != 0)
      return 1;
    v8 = (unsigned __int8 *)(v56 & 0xFFFFFFFFFFFFFFFELL);
  }
  v57 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
  {
    v58 = *(_QWORD *)(*(_QWORD *)(*v57 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v58)
      v59 = (*(_DWORD *)(v58 + 16) & 0xFF800FF) == 86507531;
    else
      v59 = 0;
    if (!v59)
    {
      sub_22E8FCA40((_QWORD *)a1, a3, 0x1ABFu, 0, (uint64_t)v71);
      sub_22F0D4E74((uint64_t)v8);
      v72 = v60;
      sub_22E8906A0((uint64_t)v71, (uint64_t *)&v72);
      sub_22E903BEC(v71);
    }
  }
  sub_22EC30A7C(a1, v20, (uint64_t)v8);
  sub_22EC3229C(a1, v20, v8);
  sub_22E990EC8(a1, *v57, v8);
  return sub_22E95CFA4((_QWORD *)a1, a3, (uint64_t *)v18, v9, v8);
}

uint64_t sub_22EB367BC(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t v9;

  v5 = a5;
  v9 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 8 * a5 + 24, 3);
  return sub_22F002D50(v9, a2, a4, v5, a3);
}

uint64_t sub_22EB36814(_QWORD *a1, uint64_t *a2, uint64_t *a3, int a4, int a5, char a6, int a7, char a8, char a9)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  int v68;
  _QWORD *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t *v88;
  char v89;
  char v90;
  int v91;
  uint64_t v92;
  _BOOL4 v93;
  BOOL v94;
  uint64_t v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t *v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117[24];
  unint64_t v118;
  uint64_t v119[2];

  if ((a5 & 1) == 0)
  {
    v17 = sub_22EB1B954((uint64_t)a1, (void *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
    *a2 = v17;
    if ((v17 & 1) != 0)
      return 0;
  }
  v18 = sub_22EB1B954((uint64_t)a1, (void *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
  *a3 = v18;
  if ((v18 & 1) != 0)
    return 0;
  v19 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v20 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
  v112 = a4;
  if ((*(_BYTE *)(v20 + 8) & 0xF) != 0)
  {
    v20 = (unint64_t)sub_22F10D2BC(v19);
    v18 = *a3;
  }
  v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFF0);
  v119[0] = v20 & 0xFFFFFFFFFFFFFFF0;
  v22 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v23 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
  v111 = a2;
  if ((*(_BYTE *)(v23 + 8) & 0xF) != 0)
    v23 = (unint64_t)sub_22F10D2BC(v22);
  v24 = v23 & 0xFFFFFFFFFFFFFFF0;
  v118 = v23 & 0xFFFFFFFFFFFFFFF0;
  v25 = sub_22E3E4B64(*v21);
  v26 = sub_22E3E4B64(*(_QWORD *)v24);
  v27 = v26;
  if ((a6 & 1) == 0
    && v25
    && ((*(_DWORD *)(v25 + 16) & 0x780000) == 0x200000 ? (v28 = v26 == 0) : (v28 = 1),
        !v28 && (*(_DWORD *)(v26 + 16) & 0x780000) == 0x200000)
    || (a8 & 1) == 0
    && ((v29 = *(_QWORD *)(*(_QWORD *)(*v21 + 8) & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v29 + 16) == 56)
     && ((v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
       ? (v31 = (*(_DWORD *)(v30 + 16) & 0xFF800FF) == 87031819)
       : (v31 = 0),
         v31)
     || (v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v24 + 8) & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v32 + 16) == 56)
     && ((v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
       ? (v34 = (*(_DWORD *)(v33 + 16) & 0xFF800FF) == 87031819)
       : (v34 = 0),
         v34)))
  {
    if (a9)
      sub_22F32EE84(a1, v112, v111, a3);
    return 0;
  }
  if (v21[1] == *(_QWORD *)(v24 + 8))
    return (uint64_t)v21;
  if (v25)
    v35 = v26 == 0;
  else
    v35 = 1;
  v36 = !v35;
  v37 = v26;
  if (v35
    || (v38 = sub_22EF6E49C(a1[11], (uint64_t)v21, v24), (v38 & 1) == 0)
    && (v39 = sub_22EB35E88(v38, (uint64_t)v21, v24), v27 = v37, !v39))
  {
    v110 = v36;
    if (v25)
      v42 = a7 == 0;
    else
      v42 = 1;
    v43 = v42 || v27 == 0;
    if (v43
      || *(_DWORD *)(v25 + 20) != *(_DWORD *)(v27 + 20)
      || (v44 = sub_22EF5CDF0(a1[11], *(_QWORD *)(*(_QWORD *)(v25 + 32) & 0xFFFFFFFFFFFFFFF0)),
          v44 != sub_22EF5CDF0(a1[11], *(_QWORD *)(*(_QWORD *)(v37 + 32) & 0xFFFFFFFFFFFFFFF0))))
    {
LABEL_93:
      v64 = sub_22E3E4B64(*(_QWORD *)v24);
      v65 = *v21;
      if (sub_22F111384(*v21))
        v66 = v64 == 0;
      else
        v66 = 1;
      if (!v66 && ((*(_DWORD *)(v64 + 16) >> 19) & 0xFu) - 7 < 2
        || (v67 = sub_22E3E4B64(v65), sub_22F111384(*(_QWORD *)v24))
        && v67
        && ((*(_DWORD *)(v67 + 16) >> 19) & 0xFu) - 7 <= 1)
      {
        v68 = v112;
        v69 = a1;
        v70 = 5013;
LABEL_136:
        sub_22E8FCA40(v69, v68, v70, 0, (uint64_t)v117);
        v86 = sub_22E8901B8((uint64_t)v117, v119);
        sub_22E8901B8(v86, (uint64_t *)&v118);
        sub_22E903BEC(v117);
        return 0;
      }
      v71 = sub_22E3E4B64(*v21);
      v72 = sub_22E3E4B64(*(_QWORD *)v24);
      v73 = v72;
      if (v71 && v72)
      {
        if ((*(_BYTE *)(v71 + 18) & 0x78) == 0 && ((*(_DWORD *)(v72 + 16) >> 19) & 0xFu) - 7 < 2)
          goto LABEL_135;
      }
      else if (sub_22F111384(*v21) && v73 && (*(_BYTE *)(v73 + 18) & 0x78) == 0)
      {
        goto LABEL_135;
      }
      v74 = sub_22E3E4B64(*(_QWORD *)v24);
      v75 = sub_22E3E4B64(*v21);
      v76 = v75;
      if (v74 && v75)
      {
        if ((*(_BYTE *)(v74 + 18) & 0x78) != 0 || ((*(_DWORD *)(v75 + 16) >> 19) & 0xFu) - 7 > 1)
        {
LABEL_118:
          v116 = 5018;
          if (v37)
          {
            if (v25)
            {
              v77 = v25;
              v78 = a3;
              v79 = v25;
            }
            else if (*(_BYTE *)(v37 + 16) == 56)
            {
              v78 = v111;
              if (a5)
                v88 = 0;
              else
                v88 = v111;
              v89 = sub_22EB39E28((uint64_t)a1, v88, (uint64_t)v21, *(_QWORD *)(v37 + 32), v24, (int *)&v116);
              v77 = 0;
              v24 = v118;
              v79 = v37;
              v21 = (uint64_t *)v118;
              if ((v89 & 1) == 0)
                return (uint64_t)v21;
            }
            else
            {
              v78 = v111;
              if ((*(_DWORD *)(*v111 & 0xFFFFFFFFFFFFFFFELL) & 0x300) == 0x100)
                return v24;
              v91 = sub_22EB3A140((uint64_t)a1, v111, a3);
              v77 = 0;
              v79 = v37;
              v21 = (uint64_t *)v24;
              if (!v91)
                return (uint64_t)v21;
            }
          }
          else if (*(_BYTE *)(v25 + 16) == 56)
          {
            if (!sub_22EB39E28((uint64_t)a1, a3, v24, *(_QWORD *)(v25 + 32), (uint64_t)v21, (int *)&v116))
              return v119[0];
            v24 = v118;
            v78 = a3;
            v79 = v25;
            v77 = v25;
          }
          else
          {
            v90 = sub_22EB3A140((uint64_t)a1, a3, v111);
            v77 = v25;
            v78 = a3;
            v79 = v25;
            if ((v90 & 1) == 0)
              return (uint64_t)v21;
          }
          v109 = v79;
          v80 = v119[0];
          if (v77)
            v21 = (uint64_t *)v119[0];
          else
            v21 = (uint64_t *)v24;
          if (v77)
            v81 = v24;
          else
            v81 = v119[0];
          v82 = sub_22EB35C2C((uint64_t)a1, v81, (uint64_t)v21);
          v83 = v37;
          if (v82)
          {
            if ((a5 & 1) == 0)
            {
              *v78 = sub_22E90092C((uint64_t)a1, *v78 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v21, 1, 0, 0);
              return (uint64_t)v21;
            }
            v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v81 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v85 = *(_DWORD *)(v84 + 16);
            if (v85 - 55 < 2)
              goto LABEL_133;
            if (v85 <= 0x2Cu)
            {
              if (((1 << v85) & 0x8180001600) == 0)
              {
                if (v85 == 11)
                {
                  if (((v85 >> 19) & 0x1FF) - 166 >= 0x35)
                    goto LABEL_162;
                }
                else
                {
                  if (v85 != 44)
                    goto LABEL_162;
                  v92 = sub_22F114198(*(_QWORD *)(v84 + 24));
                  v83 = v37;
                  if ((*(_BYTE *)(v92 + 74) & 1) == 0 && *(_QWORD *)(v92 + 128) < 8uLL)
                    goto LABEL_162;
                }
              }
              if (*(_DWORD *)(v109 + 20) == 1)
              {
LABEL_133:
                v53 = *a3 & 0xFFFFFFFFFFFFFFFELL;
                v54 = (uint64_t)a1;
                v55 = v80;
                goto LABEL_134;
              }
            }
          }
LABEL_162:
          if (!v83 && (v93 = sub_22F110E00(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0)), v83 = v37, !v93)
            || !v25 && (v94 = sub_22F110E00(*(_QWORD *)(v80 & 0xFFFFFFFFFFFFFFF0)), v83 = v37, !v94))
          {
            sub_22E8FCA40(a1, v112, 0x139Cu, 0, (uint64_t)v117);
            v98 = sub_22E8901B8((uint64_t)v117, v119);
            v99 = sub_22E8901B8(v98, (uint64_t *)&v118);
            v100 = *v111;
LABEL_182:
            sub_22F0D4E74(v100 & 0xFFFFFFFFFFFFFFFELL);
            v115 = v105;
            v106 = sub_22E8906A0(v99, &v115);
            sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
            v114 = v107;
            sub_22E8906A0(v106, &v114);
LABEL_185:
            sub_22E903BEC(v117);
            return 0;
          }
          v95 = a1[9];
          if ((*(_DWORD *)(v95 + 52) & 0x40000000) != 0)
          {
            v96 = v111;
            if (!v83)
              goto LABEL_178;
          }
          else
          {
            v96 = v111;
            if ((*(_BYTE *)(v95 + 104) & 0x20) == 0 || !v83)
            {
              if (v83)
              {
                v97 = *(unsigned __int8 *)(v83 + 16);
LABEL_177:
                if (v97 != 56)
                {
LABEL_183:
                  v114 = (uint64_t)v21;
                  v115 = v81;
                  v113 = v110;
                  sub_22E8FCA40(a1, v112, 0x139Bu, 0, (uint64_t)v117);
                  v108 = sub_22E89519C((uint64_t)v117, &v113);
                  v102 = sub_22E8901B8(v108, &v115);
                  v103 = &v114;
                  goto LABEL_184;
                }
              }
LABEL_178:
              if (!v25)
              {
LABEL_181:
                sub_22E8FCA40(a1, v112, v116, 0, (uint64_t)v117);
                v104 = sub_22E8901B8((uint64_t)v117, v119);
                v99 = sub_22E8901B8(v104, (uint64_t *)&v118);
                v100 = *v96;
                goto LABEL_182;
              }
              v101 = *(unsigned __int8 *)(v25 + 16);
LABEL_180:
              if (v101 == 56)
                goto LABEL_181;
              goto LABEL_183;
            }
          }
          v97 = *(unsigned __int8 *)(v83 + 16);
          if (v25 && v97 == 56)
          {
            v101 = *(unsigned __int8 *)(v25 + 16);
            if (v101 == 56)
            {
              sub_22E8FCA40(a1, v112, 0x1135u, 0, (uint64_t)v117);
              v102 = sub_22E8901B8((uint64_t)v117, v119);
              v103 = (uint64_t *)&v118;
LABEL_184:
              sub_22E8901B8(v102, v103);
              goto LABEL_185;
            }
            goto LABEL_180;
          }
          goto LABEL_177;
        }
      }
      else if (!sub_22F111384(*(_QWORD *)v24) || !v76 || (*(_BYTE *)(v76 + 18) & 0x78) != 0)
      {
        goto LABEL_118;
      }
LABEL_135:
      v68 = v112;
      v69 = a1;
      v70 = 5014;
      goto LABEL_136;
    }
    v45 = v37;
    v46 = v25;
    if ((*(_DWORD *)(v25 + 16) & 0x780000) == 0x100000)
    {
      v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v48 = *(_DWORD *)(v47 + 16);
      if (v47)
        v49 = v48 == 11;
      else
        v49 = 0;
      if (v49)
      {
        if (((*(_DWORD *)(v47 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
          goto LABEL_77;
      }
      else if (v47 && v48 == 44)
      {
        v50 = sub_22F114198(*(_QWORD *)(v47 + 24));
        if ((*(_BYTE *)(v50 + 74) & 1) == 0)
        {
          v45 = v37;
          v46 = v25;
          if (*(_QWORD *)(v50 + 128) <= 7uLL)
            goto LABEL_77;
        }
        v51 = sub_22F114198(*(_QWORD *)(v47 + 24));
        v45 = v37;
        v46 = v25;
        if ((*(_BYTE *)(v51 + 76) & 0x80) != 0)
          goto LABEL_77;
      }
      else if (v48 != 9)
      {
        goto LABEL_77;
      }
      if ((*(_DWORD *)(v45 + 16) & 0x780000) == 0x200000)
      {
        v53 = *a3 & 0xFFFFFFFFFFFFFFFELL;
        v54 = (uint64_t)a1;
        v55 = (uint64_t)v21;
LABEL_134:
        v41 = 1;
        goto LABEL_68;
      }
    }
LABEL_77:
    if ((a5 & 1) != 0
      || (*(_DWORD *)(v46 + 16) & 0x780000) != 0x200000
      || (*(_DWORD *)(v45 + 16) & 0x780000) != 0x100000)
    {
      goto LABEL_93;
    }
    v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v61 = *(_DWORD *)(v60 + 16);
    if (v60)
      v62 = v61 == 11;
    else
      v62 = 0;
    if (v62)
    {
      if (((*(_DWORD *)(v60 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_93;
    }
    else if (v60 && v61 == 44)
    {
      v63 = sub_22F114198(*(_QWORD *)(v60 + 24));
      if ((*(_BYTE *)(v63 + 74) & 1) == 0 && *(_QWORD *)(v63 + 128) <= 7uLL
        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v60 + 24)) + 76) & 0x80) != 0)
      {
        goto LABEL_93;
      }
    }
    else if (v61 != 9)
    {
      goto LABEL_93;
    }
    v56 = v111;
    v57 = *v111 & 0xFFFFFFFFFFFFFFFELL;
    v58 = (uint64_t)a1;
    v59 = v24;
    v41 = 1;
    goto LABEL_71;
  }
  v40 = sub_22E3E4B64(*v21);
  if (v40 && (*(_DWORD *)(v40 + 16) & 0x780000) == 0x80000)
  {
    v41 = 28;
  }
  else
  {
    v52 = sub_22E3E4B64(*(_QWORD *)v24);
    if (v52)
    {
      if ((*(_DWORD *)(v52 + 16) & 0x780000) == 0x80000)
        v41 = 28;
      else
        v41 = 1;
    }
    else
    {
      v41 = 1;
    }
  }
  if (*(_BYTE *)(v25 + 16) == 56)
  {
    v53 = *a3 & 0xFFFFFFFFFFFFFFFELL;
    v54 = (uint64_t)a1;
    v55 = (uint64_t)v21;
LABEL_68:
    *a3 = sub_22E90092C(v54, v53, v55, v41, 0, 0);
    return (uint64_t)v21;
  }
  if ((a5 & 1) == 0)
  {
    v56 = v111;
    v57 = *v111 & 0xFFFFFFFFFFFFFFFELL;
    v58 = (uint64_t)a1;
    v59 = v24;
LABEL_71:
    *v56 = sub_22E90092C(v58, v57, v59, v41, 0, 0);
  }
  return v24;
}

uint64_t sub_22EB372DC(_QWORD *a1, _BYTE *a2)
{
  int v3;
  unsigned int v5[24];

  if ((*a2 + 113) < 0xFBu
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&a2[a2[3]] + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 10)
  {
    return 0;
  }
  sub_22EFF605C((uint64_t)a2);
  sub_22E8FCA40(a1, v3, 0x1147u, 0, (uint64_t)v5);
  sub_22E903BEC(v5);
  return 1;
}

uint64_t sub_22EB37374(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16);
  v4 = v3 > 0x27;
  v5 = (1 << v3) & 0x8100000400;
  if (v4 || v5 == 0)
    return 1;
  v10 = 1;
  if (sub_22EFFBE1C(*a2 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a1 + 88), 1))
  {
    v10 = 0;
    *a2 = sub_22E90092C(a1, *a2 & 0xFFFFFFFFFFFFFFFELL, a3, 14, 0, 0);
  }
  return v10;
}

uint64_t sub_22EB37430(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4, int a5)
{
  unint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30[24];

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) != 39)
    return 0;
  v10 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_DWORD *)(v11 + 16);
  if (v11)
    v13 = v12 == 11;
  else
    v13 = 0;
  if (v13)
  {
    if (((*(_DWORD *)(v11 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_13;
    return 0;
  }
  if (!v11 || v12 != 44)
  {
    if (v12 == 9)
      goto LABEL_13;
    return 0;
  }
  v14 = sub_22F114198(*(_QWORD *)(v11 + 24));
  if ((*(_BYTE *)(v14 + 74) & 1) == 0 && *(_QWORD *)(v14 + 128) <= 7uLL
    || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v11 + 24)) + 76) & 0x80) != 0)
  {
    return 0;
  }
  v10 = *a2 & 0xFFFFFFFFFFFFFFFELL;
LABEL_13:
  v15 = a5 == 0;
  if (a5)
    v16 = v10;
  else
    v16 = a3;
  if (v15)
    v17 = v10;
  else
    v17 = a3;
  sub_22E8FCA40(a1, a4, 0x1500u, 0, (uint64_t)v30);
  v29 = *(_QWORD *)(v16 + 8);
  v18 = sub_22E8901B8((uint64_t)v30, &v29);
  v28 = *(_QWORD *)(v17 + 8);
  v19 = sub_22E8901B8(v18, &v28);
  sub_22F0D4E74(v16);
  v27 = v20;
  v21 = sub_22E8906A0(v19, &v27);
  sub_22F0D4E74(v17);
  v26 = v22;
  sub_22E8906A0(v21, &v26);
  sub_22E903BEC(v30);
  v23 = *(_QWORD *)(a3 + 8);
  v24 = 1;
  *a2 = sub_22E90092C((uint64_t)a1, *a2 & 0xFFFFFFFFFFFFFFFELL, v23, 22, 0, 0);
  return v24;
}

BOOL sub_22EB375F0(uint64_t a1)
{
  if (a1 && *(_BYTE *)(a1 + 16) == 32)
    return sub_22E509ED0(a1);
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
      && (a1 = sub_22F10CF48(a1)) != 0
      && sub_22E509ED0(a1);
}

BOOL sub_22EB3763C(uint64_t a1)
{
  if (a1 && *(_BYTE *)(a1 + 16) == 32)
    return sub_22E5761BC(a1);
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
      && (a1 = sub_22F10CF48(a1)) != 0
      && sub_22E5761BC(a1);
}

unint64_t sub_22EB37688(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = *(_QWORD *)(a1 + 1336);
  if (result <= 0xF)
  {
    v3 = sub_22F36E228(a1);
    v4 = *(_QWORD *)(v3 + 48);
    if (v4)
      return v4 & 0xFFFFFFFFFFFFFFF0;
    else
      return sub_22EF6462C(a1, v3);
  }
  return result;
}

uint64_t sub_22EB376DC(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  int v75;
  uint64_t v76;
  unsigned __int8 *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  int v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  BOOL v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  BOOL v160;
  uint64_t v161;
  BOOL v162;
  uint64_t v163;
  BOOL v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  _BOOL4 v184;
  BOOL v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  int v194;
  unint64_t v195;
  uint64_t v196;

  v6 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(*(_QWORD *)(v8[1] & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0);
  if (v7 == v9)
  {
    v10 = 0;
    *a4 = 5;
    v11 = *(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v11 && *(_BYTE *)(v11 + 16) == 39)
      v10 = (*(_BYTE *)(v11 + 40) & 6) != 0;
    v12 = *(_QWORD *)(*(_QWORD *)(*v8 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v12 && *(_BYTE *)(v12 + 16) == 39)
    {
      if (v10 == ((*(_BYTE *)(v12 + 40) & 6) != 0))
        return 0;
      goto LABEL_24;
    }
    if (v10)
    {
LABEL_24:
      v21 = 0;
      v22 = 68;
LABEL_44:
      *a4 = v22;
      return v21;
    }
    return 0;
  }
  v16 = a1;
  v17 = *v7;
  v18 = *(_DWORD *)(*v7 + 16);
  if (*v7)
    v19 = v18 == 14;
  else
    v19 = 0;
  if (v19)
  {
    if ((v18 & 0x180000) == 0x100000)
      goto LABEL_26;
  }
  else
  {
    if (v17)
      v20 = v18 == 6;
    else
      v20 = 0;
    if (v20)
    {
      v21 = sub_22EB376DC(a1, *(_QWORD *)(v17 + 32), a3, a4, 1);
      if (!(_DWORD)v21)
      {
        if (*a4 != 5 && (_DWORD)a5)
          *a3 = sub_22E90092C(v16, *a3 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(v17 + 32), *a4, 0, 0);
        v21 = 0;
        v22 = 62;
        goto LABEL_44;
      }
      return v21;
    }
  }
  if (v17 && (v18 & 0xFE) == 0x28)
  {
LABEL_109:
    v49 = *(_QWORD *)(v16 + 88);
    if ((v18 & 0x100000) != 0)
    {
      do
      {
        while (1)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(v17 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (!v17)
            break;
          v50 = *(_DWORD *)(v17 + 16);
          if ((v50 & 0xFE) != 0x28)
            break;
          if ((v50 & 0x100000) == 0)
            goto LABEL_115;
        }
        v17 = sub_22F10CF48(v17);
      }
      while ((*(_DWORD *)(v17 + 16) & 0x100000) != 0);
    }
LABEL_115:
    if (sub_22F36EDA0(v49, *(_QWORD *)(v17 + 32), (unint64_t)v9, 0))
    {
      v21 = 0;
      v22 = 2;
      goto LABEL_44;
    }
    return 29;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
  {
    a1 = sub_22F10CF48(*v7);
    if (a1)
    {
      v17 = a1;
      v18 = *(_DWORD *)(a1 + 16);
      goto LABEL_109;
    }
  }
  sub_22EB35E88(a1, (uint64_t)v9, (uint64_t)v7);
  v23 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_DWORD *)(v23 + 16);
  v25 = v24;
  if (v24 == 56)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56)
    {
      if (!sub_22EB35C2C(v16, (uint64_t)v7, (uint64_t)v9))
        return 29;
LABEL_43:
      v21 = 0;
      v22 = 1;
      goto LABEL_44;
    }
    if (sub_22F110E9C(*v9))
    {
      if ((_DWORD)a5)
        *a3 = sub_22EB35F48(v16, (uint64_t)v7, *a3 & 0xFFFFFFFFFFFFFFFELL);
      v21 = 0;
      v22 = 27;
      goto LABEL_44;
    }
    v23 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
    v24 = *(_DWORD *)(v23 + 16);
    v25 = v24;
  }
  v26 = v25 - 55;
  v27 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55;
  if (v26 < 2)
  {
    if (v27 <= 1)
    {
      if (sub_22EF6E49C(*(_QWORD *)(v16 + 88), (uint64_t)v7, (uint64_t)v9))
        goto LABEL_43;
      if (sub_22EB35C2C(v16, (uint64_t)v9, (uint64_t)v7))
      {
        *a4 = 1;
        return 24;
      }
      v23 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
      v24 = *(_DWORD *)(v23 + 16);
    }
LABEL_46:
    if (v24 == 44)
    {
      v43 = sub_22F114198(*(_QWORD *)(v23 + 24));
      if ((*(_BYTE *)(v43 + 74) & 1) == 0 && *(_QWORD *)(v43 + 128) < 8uLL)
        goto LABEL_98;
    }
    else if (v24 == 11)
    {
      if (((v24 >> 19) & 0x1FF) - 166 >= 0x35)
        goto LABEL_98;
    }
    else
    {
      v44 = v24 > 0x27u;
      v45 = (1 << v24) & 0x8180001600;
      if (v44 || v45 == 0)
        goto LABEL_98;
    }
    v47 = sub_22E3E4B64(*v9);
    if (v47 && *(_DWORD *)(v47 + 20) == 1 && sub_22EB35C2C(v16, (uint64_t)v9, (uint64_t)v7))
    {
      v21 = 0;
      *a3 = sub_22E90092C(v16, *a3 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v7, 1, 0, 0);
      *a4 = 1;
      return v21;
    }
LABEL_98:
    v48 = *v7;
    if ((!sub_22F111384(*v7)
       || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 >= 2)
      && (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 > 1
       || !sub_22F111384(*v9))
      || (sub_22F36E9C0(*(_QWORD *)(v16 + 88), (uint64_t)v7, (uint64_t)v9) & 1) == 0
      && !sub_22F36EA10(*(_QWORD *)(v16 + 88), (uint64_t)v7, (uint64_t)v9))
    {
      return 29;
    }
    goto LABEL_43;
  }
  if (v27 < 2)
    goto LABEL_46;
  if (sub_22EB1FFD8(v16, (uint64_t)v7, (uint64_t)v9))
    return 29;
  if ((*(_BYTE *)(*(_QWORD *)(v16 + 72) + 1) & 1) != 0)
  {
    v28 = *v9;
    v29 = *v9 && *(_BYTE *)(*v9 + 16) == 12;
    if (v29 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 12 && sub_22F10CF48(v28))
    {
      v30 = *v7;
      v31 = *v7 && *(_BYTE *)(*v7 + 16) == 12;
      if (!v31
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 12 || !sub_22F10CF48(v30)))
      {
        return 29;
      }
    }
  }
  v32 = *v7;
  v33 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v33)
    v34 = (*(_DWORD *)(v33 + 16) & 0xFF800FF) == 112721931;
  else
    v34 = 0;
  if (v34)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0);
    v36 = v35 && *(_DWORD *)(v35 + 16) == 11;
    if (v36 && ((*(_DWORD *)(v35 + 16) >> 19) & 0x1FEu) - 210 <= 7)
    {
      if (sub_22EF6A108(*(_QWORD *)(v16 + 88), (uint64_t)v7, (uint64_t)v9) != 1)
        return 29;
      v32 = *v7;
    }
  }
  if (sub_22F110E9C(v32)
    && sub_22F110E9C(*v9)
    && ((*(_BYTE *)(*(_QWORD *)(v16 + 72) + 1) & 1) == 0
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 44))
  {
    if ((_DWORD)a5)
    {
      v21 = 0;
      *a4 = sub_22EB3547C(v16, a3, (uint64_t)v7);
      return v21;
    }
    return 0;
  }
  v37 = *v7;
  v38 = *(unsigned __int8 *)(*v7 + 16);
  if (!*v7 || v38 != 39)
  {
    if (v38 != 32)
    {
      if (v38 == 10)
      {
        v51 = *v9;
        v52 = *(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0);
        v53 = *(_DWORD *)(v52 + 16);
        if (v53 <= 0xA)
        {
          if (v53 != 9)
          {
            if (v53 == 10)
            {
              v54 = *(_QWORD *)((*(_QWORD *)(v37 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v54 & 8) != 0)
                v55 = *(_DWORD *)((v54 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
              else
                v55 = 0;
              if (*(_BYTE *)(v51 + 16) != 10)
                v51 = sub_22F10CF48(v51);
              v105 = *(_QWORD *)((*(_QWORD *)(v51 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
              if ((v105 & 8) != 0)
                v106 = *(_DWORD *)((v105 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
              else
                v106 = 0;
              if (v55 == v106)
                v107 = 1;
              else
                v107 = 66;
              *a4 = v107;
              v108 = *(_QWORD *)(v16 + 72);
              if ((*(_BYTE *)(v108 + 1) & 1) == 0)
              {
                v109 = *v7;
                v110 = *(_QWORD *)(*v7 + 32);
                v111 = *(_QWORD *)(*v9 + 32);
                if ((v110 & 8) != 0)
                {
                  v113 = *(_QWORD *)((v110 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                  v112 = HIDWORD(*(_QWORD *)((v110 & 0xFFFFFFFFFFFFFFF0) + 0x18));
                }
                else
                {
                  v112 = 0;
                  v113 = 0;
                }
                v117 = v113 | v110 & 7;
                if ((v111 & 8) != 0)
                {
                  v119 = *(_QWORD *)((v111 & 0xFFFFFFFFFFFFFFF0) + 0x18);
                  v118 = *(_QWORD *)((v111 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
                }
                else
                {
                  v118 = 0;
                  v119 = 0;
                }
                v120 = v119 | *(_QWORD *)(*v9 + 32) & 7;
                v121 = *(_DWORD *)(v108 + 52);
                v122 = v117 & 0x7FF;
                if ((v121 & 0x40000000) != 0)
                {
                  v123 = v119 & 0x7FF | *(_WORD *)(*v9 + 32) & 7;
                }
                else
                {
                  v122 = v117;
                  v123 = v119 | *(_QWORD *)(*v9 + 32) & 7;
                }
                if ((_DWORD)v112 == HIDWORD(v118) && v122 == (_DWORD)v123)
                  v21 = 0;
                else
                  v21 = 18;
                v125 = *(_QWORD *)(v16 + 88);
                if ((v121 & 0x40000000) != 0)
                {
                  if ((*(_BYTE *)(v109 + 8) & 0xF) != 0)
                    v109 = (uint64_t)sub_22F10D2BC((uint64_t)v7);
                  v126 = v109 & 0xFFFFFFFFFFFFFFF0;
                  if (v117 & 0x7F8 | (v112 << 32) & 0xC000007F8)
                  {
                    v196 = v117 & 0x7FF | (unint64_t)(v112 << 32);
                    v127 = sub_22E491354((unsigned int *)&v196, v126);
                    v128 = sub_22EF5DBC4(v125, v127, v196);
                  }
                  else
                  {
                    v128 = v126 | v117 & 7;
                  }
                  v147 = v123 | v118;
                  v148 = *(_QWORD *)(v16 + 88);
                  v149 = *v9;
                  if ((*(_BYTE *)(*v9 + 8) & 0xF) != 0)
                    v149 = (uint64_t)sub_22F10D2BC((uint64_t)v9);
                  v150 = v149 & 0xFFFFFFFFFFFFFFF0;
                  if ((v147 & 0xCFFFFFFF8) != 0)
                  {
                    v196 = v147;
                    v151 = sub_22E491354((unsigned int *)&v196, v150);
                    v152 = sub_22EF5DBC4(v148, v151, v196);
                  }
                  else
                  {
                    v152 = v150 | v120 & 7;
                  }
                  if ((unint64_t)sub_22EF6FF80(v125, v128, v152, 1, 0, 0) > 0xF)
                    return v21;
                }
                else if ((unint64_t)sub_22EF6FF80(*(_QWORD *)(v16 + 88), (unint64_t)v7, (unint64_t)v9, 1, 0, 0) >= 0x10)
                {
                  return v21;
                }
              }
              return 26;
            }
            goto LABEL_168;
          }
LABEL_255:
          *a4 = 22;
          return 25;
        }
        if (v53 == 11)
        {
          if (((*(_DWORD *)(v52 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
            goto LABEL_255;
        }
        else if (v53 == 44)
        {
          v70 = sub_22F114198(*(_QWORD *)(v52 + 24));
          if (((*(_BYTE *)(v70 + 74) & 1) != 0 || *(_QWORD *)(v70 + 128) >= 8uLL)
            && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v52 + 24)) + 76) & 0x80) == 0)
          {
            goto LABEL_255;
          }
        }
LABEL_168:
        if ((*(_BYTE *)(*(_QWORD *)(v16 + 72) + 1) & 0x40) != 0
          && ((v71 = *v9) != 0 && *(_BYTE *)(v71 + 16) == 32
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v71 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
           && (v71 = sub_22F10CF48(v71)) != 0)
          && sub_22E5761BC(v71)
          || ((v72 = *v9) != 0 && *(_BYTE *)(v72 + 16) == 39
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v72 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
           && (v72 = sub_22F10CF48(v72)) != 0)
          && ((v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v72 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
            ? (v74 = (*(_DWORD *)(v73 + 16) & 0xFF800FF) == 86507531)
            : (v74 = 0),
              v74))
        {
          v21 = 0;
          v22 = 45;
          goto LABEL_44;
        }
        return 29;
      }
      v62 = *(_DWORD *)(*v9 + 16);
      if (v62 == 32 || v62 == 39)
      {
        if (v7 == *(uint64_t **)(*(_QWORD *)(v16 + 88) + 16400))
        {
          v21 = 0;
          v22 = 24;
          goto LABEL_44;
        }
        v93 = *(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0);
        v94 = *(_DWORD *)(v93 + 16);
        if (v93)
          v95 = v94 == 11;
        else
          v95 = 0;
        if (v95)
        {
          if (((*(_DWORD *)(v93 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
            return 29;
        }
        else if (v93 && v94 == 44)
        {
          v96 = sub_22F114198(*(_QWORD *)(v93 + 24));
          if ((*(_BYTE *)(v96 + 74) & 1) == 0 && *(_QWORD *)(v96 + 128) <= 7uLL
            || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v93 + 24)) + 76) & 0x80) != 0)
          {
            return 29;
          }
        }
        else if (v94 != 9)
        {
          return 29;
        }
        *a4 = 23;
        return 1;
      }
      if ((v38 & 0xFE) != 0x2C || (v62 & 0xFE) != 0x2C)
      {
LABEL_218:
        v87 = *(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v87)
          v88 = (*(_DWORD *)(v87 + 16) & 0xFF800FF) == 116391947;
        else
          v88 = 0;
        if (!v88)
          return 29;
        v89 = *(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0);
        v90 = *(_DWORD *)(v89 + 16);
        if (v89)
          v91 = v90 == 11;
        else
          v91 = 0;
        if (v91)
        {
          if (((*(_DWORD *)(v89 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
            return 29;
        }
        else if (v89 && v90 == 44)
        {
          v92 = sub_22F114198(*(_QWORD *)(v89 + 24));
          if ((*(_BYTE *)(v92 + 74) & 1) == 0 && *(_QWORD *)(v92 + 128) <= 7uLL
            || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v89 + 24)) + 76) & 0x80) != 0)
          {
            return 29;
          }
        }
        else if (v90 != 9)
        {
          return 29;
        }
        v21 = 0;
        v22 = 67;
        goto LABEL_44;
      }
      if (!sub_22F36EDA0(*(_QWORD *)(v16 + 88), (unint64_t)v7, (unint64_t)v9, 0))
      {
        v37 = *v7;
        goto LABEL_218;
      }
LABEL_26:
      v21 = 0;
      v22 = 5;
      goto LABEL_44;
    }
    v60 = *(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0);
    v61 = *(_DWORD *)(v60 + 16);
    if (v61 <= 0x1F)
    {
      if (v61 != 9 && (v61 != 11 || ((*(_DWORD *)(v60 + 16) >> 19) & 0x1FEu) - 166 >= 0x14))
        goto LABEL_259;
LABEL_205:
      *a4 = 22;
      return 2;
    }
    if (v61 == 44)
    {
      v81 = sub_22F114198(*(_QWORD *)(v60 + 24));
      if ((*(_BYTE *)(v81 + 74) & 1) == 0 && *(_QWORD *)(v81 + 128) < 8uLL
        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v60 + 24)) + 76) & 0x80) != 0)
      {
        goto LABEL_259;
      }
      goto LABEL_205;
    }
    if (v61 != 32)
    {
LABEL_259:
      v101 = *v9;
      if (*(_BYTE *)(*v9 + 16) == 39)
      {
        *a4 = 43;
        if ((sub_22F10DFD8(v101) & 1) != 0)
          return 0;
        if (((v103 = *v7) != 0 && *(_BYTE *)(v103 + 16) == 32
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v103 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
           && (v103 = sub_22F10CF48(v103)) != 0)
          && sub_22E509ED0(v103))
        {
          v104 = sub_22E583AD4(*(_QWORD *)(v16 + 88));
          if (v9[1] == (*(_QWORD *)((v104 & 0xFFFFFFFFFFFFFFF0) + 8) | v104 & 7))
            return 0;
        }
        return 15;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v101 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10
        && sub_22F40AB34(*v7, *(_QWORD *)(v16 + 88)))
      {
        if ((_DWORD)a5)
          sub_22F32D3A8((unsigned int *)v16, a3);
        v21 = 0;
        v22 = 44;
        goto LABEL_44;
      }
      return 29;
    }
    *a4 = 1;
    if (sub_22F32EDD0(v37))
    {
      v155 = *v7;
      if (!*v7 || *(_BYTE *)(v155 + 16) != 32)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v155 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
          goto LABEL_391;
        v155 = sub_22F10CF48(v155);
        if (!v155)
          goto LABEL_391;
      }
      if (!sub_22E509ED0(v155) || (sub_22F32EDD0(*v9) & 1) != 0)
        goto LABEL_391;
      v174 = *v9;
      if (*v9)
        goto LABEL_463;
    }
    else
    {
      if (!sub_22F32EDD0(*v9))
      {
        v175 = *v7;
        if (!*v7 || *(_BYTE *)(v175 + 16) != 32)
          v175 = sub_22F10CF48(v175);
        v176 = *(_QWORD *)(v175 + 32);
        v177 = *v9;
        if (!*v9 || *(_BYTE *)(v177 + 16) != 32)
          v177 = sub_22F10CF48(v177);
        v178 = *(_QWORD *)(v177 + 32);
        v179 = *(_QWORD *)((v178 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v179 & 8) != 0)
        {
          v181 = *(_QWORD *)((v179 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v180 = *(_QWORD *)((v179 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v180 = 0;
          v181 = 0;
        }
        v182 = *(_QWORD *)(v176 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v182 + 8) & 0xF) != 0)
          v182 = (unint64_t)sub_22F10D2BC(v176);
        v183 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v182 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v184 = (*(_DWORD *)(v183 + 16) & 0xFF80000) == 86507520;
        if (v183)
          v185 = *(_DWORD *)(v183 + 16) == 11;
        else
          v185 = 0;
        if (!v185)
          v184 = 0;
        v186 = *(_QWORD *)((v176 & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v186 & 8) != 0)
        {
          v188 = *(_QWORD *)((v186 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v187 = *(_QWORD *)((v186 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v187 = 0;
          v188 = 0;
        }
        if (v184)
          v189 = v181 & 0xFFFFFFFFFFFFFFF7 | (v179 | v178) & 7;
        else
          v189 = v181 | (v179 | v178) & 7;
        v196 = v187 | v188 | (v186 | v176) & 7;
        if ((sub_22E95F24C((unsigned int *)&v196, v189 | v180) & 1) == 0)
        {
          v190 = *v7;
          if (!*v7 || *(_BYTE *)(v190 + 16) != 32)
          {
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v190 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
              return 18;
            v190 = sub_22F10CF48(v190);
            if (!v190)
              return 18;
          }
          if (!sub_22E491464(v190))
            return 18;
        }
        if (!sub_22F36EDA0(*(_QWORD *)(v16 + 88), (unint64_t)v7, (unint64_t)v9, 0))
        {
          v191 = *v7;
          if ((*v7 && *(_BYTE *)(v191 + 16) == 32
             || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v191 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
             && (v191 = sub_22F10CF48(v191)) != 0)
            && sub_22E491464(v191))
          {
            return 27;
          }
          v192 = *v9;
          if (*v9 && *(_BYTE *)(v192 + 16) == 32
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v192 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
            && (v192 = sub_22F10CF48(v192)) != 0)
          {
            if (sub_22E491464(v192))
              return 27;
            else
              return 15;
          }
          return 15;
        }
LABEL_391:
        if ((*(_WORD *)(*(_QWORD *)(v16 + 72) + 148) & 0xALL) == 0)
          return 0;
        if (sub_22F334CD0(v16, a2, (uint64_t)v9))
          return 0;
        else
          return 28;
      }
      v173 = *v9;
      if (!*v9 || *(_BYTE *)(v173 + 16) != 32)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v173 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
          goto LABEL_391;
        v173 = sub_22F10CF48(v173);
        if (!v173)
          goto LABEL_391;
      }
      if (!sub_22E509ED0(v173) || (sub_22F32EDD0(*v7) & 1) != 0)
        goto LABEL_391;
      v174 = *v7;
      if (*v7)
      {
LABEL_463:
        if (*(_BYTE *)(v174 + 16) == 32)
          goto LABEL_466;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v174 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      return 15;
    v174 = sub_22F10CF48(v174);
    if (!v174)
      return 15;
LABEL_466:
    if (!sub_22E509F54(v174))
      return 15;
    goto LABEL_391;
  }
  v39 = *v9;
  if (!*v9 || *(_BYTE *)(v39 + 16) != 39)
  {
    v56 = *(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0);
    v57 = *(_DWORD *)(v56 + 16);
    if (v56)
      v58 = v57 == 11;
    else
      v58 = 0;
    if (v58)
    {
      if (((*(_DWORD *)(v56 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_149;
    }
    else
    {
      if (v56 && v57 == 44)
      {
        v59 = sub_22F114198(*(_QWORD *)(v56 + 24));
        if ((*(_BYTE *)(v59 + 74) & 1) == 0 && *(_QWORD *)(v59 + 128) <= 7uLL
          || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v56 + 24)) + 76) & 0x80) != 0)
        {
          goto LABEL_207;
        }
LABEL_149:
        *a4 = 22;
        if ((*(_BYTE *)(v37 + 40) & 6) != 0)
          return 3;
        else
          return 2;
      }
      if (v57 == 9)
        goto LABEL_149;
    }
LABEL_207:
    v82 = *v9;
    v83 = *(unsigned __int8 *)(*v9 + 16);
    if (v83 != 10)
    {
      if (v83 == 32)
      {
        v84 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        if (v84)
          v85 = (*(_DWORD *)(v84 + 16) & 0xFF800FF) == 86507531;
        else
          v85 = 0;
        if (v85)
          goto LABEL_43;
        if (sub_22E509ED0(v82))
        {
          v86 = sub_22E583AD4(*(_QWORD *)(v16 + 88));
          if (v7[1] == (*(_QWORD *)((v86 & 0xFFFFFFFFFFFFFFF0) + 8) | v86 & 7))
            goto LABEL_43;
        }
        *a4 = 1;
        return 15;
      }
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v82 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 10 || !sub_22F10CF48(v82))
        return 29;
    }
    v97 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v97)
      v98 = (*(_DWORD *)(v97 + 16) & 0xFF800FF) == 86507531;
    else
      v98 = 0;
    if (v98)
    {
      v99 = *(_QWORD *)((*(_QWORD *)(v37 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v99 & 8) != 0)
        v100 = *(_DWORD *)((v99 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
      else
        v100 = 0;
      v114 = *v9;
      if (!*v9 || *(_BYTE *)(v114 + 16) != 10)
        v114 = sub_22F10CF48(v114);
      v115 = *(_QWORD *)((*(_QWORD *)(v114 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v115 & 8) != 0)
        v116 = *(_DWORD *)((v115 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
      else
        v116 = 0;
      v21 = 0;
      if (v100 == v116)
        v22 = 1;
      else
        v22 = 66;
      goto LABEL_44;
    }
    return 29;
  }
  v40 = *(_QWORD *)(v37 + 32);
  v41 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v41 & 8) != 0)
    v42 = *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  else
    v42 = 0;
  v63 = *(_QWORD *)((*(_QWORD *)(v39 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
  if ((v63 & 8) != 0)
    v64 = *(_DWORD *)((v63 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
  else
    v64 = 0;
  v65 = *(_DWORD *)(v39 + 40);
  if (((*(_DWORD *)(v37 + 40) ^ v65) & 0x1F) != 0)
  {
    v193 = sub_22EF5B848(*(_QWORD *)(v16 + 88), v40, v65);
    v21 = sub_22EB376DC(v16, v193, a3, a4, a5);
    v66 = *a4 == 5
       && (*(_QWORD *)((*(_QWORD *)(v37 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v37 + 32) & 7) == (*(_QWORD *)((*(_QWORD *)(v39 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) | *(_QWORD *)(v39 + 32) & 7);
    v76 = *a3;
    if ((_DWORD)a5 && !v66)
    {
      v76 = sub_22E90092C(v16, v76 & 0xFFFFFFFFFFFFFFFELL, v193, *a4, 0, 0);
      *a3 = v76;
    }
    *a4 = 68;
    v77 = sub_22EFFBBCC((unsigned __int8 *)(v76 & 0xFFFFFFFFFFFFFFFELL));
    if (!sub_22EFFBE1C((unint64_t)v77, *(_QWORD *)(v16 + 88), 2)
      && (*(_BYTE *)(v39 + 40) & 7) == 4
      && !sub_22F10D8C0(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)))
    {
      v78 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v78 && *(_BYTE *)(v78 + 16) == 39)
      {
        v79 = *(_DWORD *)(v78 + 40) & 6;
        v80 = sub_22F10D774(*v6);
        if ((!v80 || (*(_DWORD *)(v80 + 16) & 0xFFF80000) != 0xF00000) && v79 == 2)
          return 7;
      }
      else
      {
        sub_22F10D774(*v6);
      }
    }
    if ((_DWORD)v21)
      return v21;
    goto LABEL_323;
  }
  v194 = v64;
  v67 = v42;
  if (!sub_22F10D8C0(*v6)
    || (v68 = *(_QWORD *)(*(_QWORD *)(*v9 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
    || *(_BYTE *)(v68 + 16) != 39
    || (*(_BYTE *)(v68 + 40) & 7) != 4)
  {
    if (v67 == v194)
    {
      if (sub_22EF68504(*(_QWORD *)(v16 + 88), (uint64_t)v9, (uint64_t)v7))
        v75 = 5;
      else
        v75 = 1;
    }
    else
    {
      v75 = 66;
    }
    goto LABEL_253;
  }
  if (!(_DWORD)a5)
  {
    v75 = 1;
LABEL_253:
    *a4 = v75;
    goto LABEL_323;
  }
  v69 = sub_22EF5B848(*(_QWORD *)(v16 + 88), *(_QWORD *)(v39 + 32), 2u);
  *a3 = sub_22E90092C(v16, *a3 & 0xFFFFFFFFFFFFFFFELL, v69, 68, 0, 0);
  v21 = sub_22EB376DC(v16, a2, a3, a4, 1);
  if ((_DWORD)v21)
    return v21;
LABEL_323:
  v129 = *(_QWORD *)(*v7 + 32);
  v130 = v129 & 0xFFFFFFFFFFFFFFF0;
  if ((v129 & 8) != 0)
  {
    v130 = *(_QWORD *)v130;
    v131 = *(_QWORD *)((*(_QWORD *)(*v7 + 32) & 0xFFFFFFFFFFFFFFF0) + 0x18) | *(_QWORD *)(*v7 + 32) & 7;
  }
  else
  {
    v131 = *(_QWORD *)(*v7 + 32) & 7;
  }
  v196 = v131;
  v132 = *(_QWORD *)(*v9 + 32);
  v133 = v132 & 0xFFFFFFFFFFFFFFF0;
  if ((v132 & 8) != 0)
  {
    v133 = *(_QWORD *)v133;
    v134 = *(_QWORD *)((*(_QWORD *)(*v9 + 32) & 0xFFFFFFFFFFFFFFF0) + 0x18) | *(_QWORD *)(*v9 + 32) & 7;
  }
  else
  {
    v134 = *(_QWORD *)(*v9 + 32) & 7;
  }
  v135 = (v131 >> 6) & 7;
  v136 = (v134 >> 6) & 7;
  v138 = v135 == v136 || v135 == 3 || v136 == 3;
  if (v138 || (v131 & 1) == 0 && v135 && v136)
  {
    v139 = v134;
  }
  else
  {
    LODWORD(v196) = v131 & 0xFFFFFE3F;
    v139 = v134 & 0xFFFFFE3F;
  }
  if ((sub_22E95F24C((unsigned int *)&v196, v134 & 0xFFFFFFFF00000000 | v139) & 1) != 0)
    goto LABEL_339;
  if (!sub_22E95F2F0(v196 >> 11, v139 >> 11))
    return 19;
  v195 = v196 & 0xFFFFFFFFFFFFFE0FLL;
  if (sub_22E95F24C((unsigned int *)&v195, v134 & 0xFFFFFFFF00000000 | v139 & 0xFFFFFE0F)
    && ((v144 = *(_QWORD *)(*(_QWORD *)(v130 + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
     && (*(_DWORD *)(v144 + 16) & 0xFF800FF) == 0x528000B
     || ((v145 = *(_QWORD *)(*(_QWORD *)(v133 + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
       ? (v146 = *(_DWORD *)(v145 + 16) == 11)
       : (v146 = 0),
         v146 && (*(_DWORD *)(v145 + 16) & 0xFF80000) == 0x5280000)))
  {
LABEL_339:
    v140 = 0;
    v21 = 17;
  }
  else if ((((unsigned __int16)v196 ^ (unsigned __int16)v139) & 0x1C0) != 0)
  {
    v21 = 19;
    v140 = 19;
  }
  else
  {
    if (HIDWORD(v196) == HIDWORD(v134))
      v21 = 18;
    else
      v21 = 19;
    v140 = v21;
  }
  v141 = *(_QWORD *)(*(_QWORD *)(v130 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v141)
    v142 = (*(_DWORD *)(v141 + 16) & 0xFF800FF) == 86507531;
  else
    v142 = 0;
  if (v142)
  {
    v143 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v133 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_359:
    if ((v143 - 27) >= 0xFFFFFFFE)
      return 14;
    else
      return v140;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v133 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF800FF) == 0x528000B)
  {
    v143 = *(_DWORD *)(v141 + 16);
    goto LABEL_359;
  }
  v153 = v130 & 0xFFFFFFFFFFFFFFF0;
  v195 = v130 & 0xFFFFFFFFFFFFFFF0;
  v154 = v133 & 0xFFFFFFFFFFFFFFF0;
  if (!sub_22F36EDA0(*(_QWORD *)(v16 + 88), v130 & 0xFFFFFFFFFFFFFFF0, v133 & 0xFFFFFFFFFFFFFFF0, 0))
  {
    v156 = *(_QWORD *)(*(_QWORD *)(v130 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v156
      && (v157 = *(_DWORD *)(v156 + 16), v157 == 11)
      && ((v158 = ((v157 >> 19) & 0x1FF) - 167, v44 = v158 > 0xC, v159 = (1 << v158) & 0x1803, !v44)
        ? (v160 = v159 == 0)
        : (v160 = 1),
          !v160))
    {
      v153 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 16512);
    }
    else if (sub_22F110B20(v130))
    {
      v153 = sub_22EF67D20(*(_QWORD *)(v16 + 88), v130 & 0xFFFFFFFFFFFFFFF0);
    }
    v163 = *(_QWORD *)(*(_QWORD *)(v133 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v163)
      v164 = *(_DWORD *)(v163 + 16) == 11;
    else
      v164 = 0;
    if (!v164
      || (((*(_DWORD *)(v163 + 16) >> 19) & 0x1FFu) - 167 <= 0xC
        ? (v165 = ((1 << ((*(_DWORD *)(v163 + 16) >> 19) + 89)) & 0x1803) == 0)
        : (v165 = 1),
          v165))
    {
      if (sub_22F110B20(v133))
        v154 = sub_22EF67D20(*(_QWORD *)(v16 + 88), v133 & 0xFFFFFFFFFFFFFFF0);
    }
    else
    {
      v154 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 16512);
    }
    if (v153 == v154)
      return v21;
    if (*(_BYTE *)(v130 + 16) == 39 && *(_BYTE *)(v133 + 16) == 39)
    {
      do
      {
        v166 = *(_QWORD *)(v130 + 32);
        v130 = v166 & 0xFFFFFFFFFFFFFFF0;
        if ((v166 & 8) != 0)
        {
          v130 = *(_QWORD *)v130;
          v167 = *(_QWORD *)((v166 & 0xFFFFFFFFFFFFFFF0) + 0x18) | v166 & 7;
        }
        else
        {
          v167 = v166 & 7;
        }
        v196 = v167;
        v168 = *(_QWORD *)(v133 + 32);
        v133 = v168 & 0xFFFFFFFFFFFFFFF0;
        if ((v168 & 8) != 0)
        {
          v169 = *(_QWORD *)((v168 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v133 = *(_QWORD *)v133;
        }
        else
        {
          LODWORD(v169) = 0;
        }
        if (((v169 ^ v167) & 0xFFFFF800) != 0)
          return 20;
      }
      while (*(_BYTE *)(v130 + 16) == 39 && *(_BYTE *)(v133 + 16) == 39);
      if (v130 != v133)
        goto LABEL_437;
      return 21;
    }
LABEL_437:
    v170 = *v9;
    if ((*v9 && *(_BYTE *)(v170 + 16) == 39
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v170 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
       && (v170 = sub_22F10CF48(v170)) != 0)
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v170 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 <= 1
      && ((v171 = *v7) != 0 && *(_BYTE *)(v171 + 16) == 39
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v171 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
       && (v171 = sub_22F10CF48(v171)) != 0)
      && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v171 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                          + 16)
       - 25 < 2)
    {
      return 16;
    }
    return 15;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v16 + 72) + 1) & 1) == 0
    && (sub_22ECFAE0C(v16, v130 & 0xFFFFFFFFFFFFFFF0, v133 & 0xFFFFFFFFFFFFFFF0, &v195) & 1) != 0)
  {
    return 16;
  }
  v161 = *(_QWORD *)(*(_QWORD *)((v133 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v161)
    v162 = *(unsigned __int8 *)(v161 + 16) - 27 >= 0xFFFFFFFE;
  else
    v162 = 0;
  if (!v162)
    return v140;
  v172 = *(_QWORD *)(*(_QWORD *)((v195 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v172 || *(unsigned __int8 *)(v172 + 16) - 27 < 0xFFFFFFFE)
    return v140;
  if ((((*(unsigned __int8 *)(v161 + 19) ^ *(unsigned __int8 *)(v172 + 19)) >> 7) & 1) != 0)
    return 16;
  return v140;
}

uint64_t sub_22EB39090(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t result;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;

  v6 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v7 = sub_22F10E2FC(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (v7)
  {
    v8 = v7;
    v9 = sub_22F114198(*(_QWORD *)(v7 + 24));
    if (sub_22E69BDA8(v9))
    {
      v10 = sub_22F114198(*(_QWORD *)(v8 + 24));
      v11 = sub_22EFC3B90(v10);
      if (v11)
      {
        v12 = v11;
        v13 = v6 & 0xFFFFFFFFFFFFFFF0;
LABEL_5:
        v14 = *(_QWORD *)(v12 + 48);
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 39)
          goto LABEL_14;
        v15 = *(_QWORD *)v13;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
        {
          if (*(_BYTE *)(v15 + 16) != 39)
            v15 = sub_22F10CF48(v15);
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v16 && (*(_DWORD *)(v16 + 16) & 0xFF800FF) == 86507531)
          {
            v20 = *a3 & 0xFFFFFFFFFFFFFFFELL;
            v14 = *(_QWORD *)(v12 + 48);
            v22 = a1;
            v21 = 1;
            goto LABEL_23;
          }
        }
        v18 = sub_22EFFBE1C(*a3 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a1 + 88), 1);
        v14 = *(_QWORD *)(v12 + 48);
        if (v18)
        {
          v20 = *a3 & 0xFFFFFFFFFFFFFFFELL;
          v22 = a1;
          v21 = 14;
        }
        else
        {
LABEL_14:
          v30 = 0;
          if (sub_22EB376DC(a1, v14, a3, &v30, 1))
          {
            while (1)
            {
              v12 = *(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF8;
              if (!v12)
                return 29;
              if ((*(_DWORD *)(v12 + 28) & 0x7Fu) - 49 < 3)
                goto LABEL_5;
            }
          }
          v20 = *a3 & 0xFFFFFFFFFFFFFFFELL;
          v14 = *(_QWORD *)(v12 + 48);
          v21 = v30;
          v22 = a1;
        }
LABEL_23:
        v23 = sub_22E90092C(v22, v20, v14, v21, 0, 0);
        *a3 = v23;
        v24 = *(_QWORD *)(a1 + 88);
        v31 = v23 & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 + 2032;
        v26 = sub_22E3CD3D4(v24 + 2032, 64, 3);
        v27 = sub_22EFFD1B0(v26, v24, 0, (uint64_t *)&v31, 1, 0);
        *(_QWORD *)(v27 + 8) = a2;
        *(_QWORD *)(v27 + 56) = v12 | 2;
        v28 = sub_22EF579A8(v24, a2, 0);
        v29 = sub_22E3CD3D4(v25, 40, 3);
        sub_22F330580(v29, 0, (uint64_t)v28, a2, 0, v26, 0);
        result = 0;
        *a3 = v29;
        return result;
      }
    }
  }
  return 29;
}

uint64_t sub_22EB392FC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50[2];
  _BYTE v51[16];
  void *v52;
  _QWORD v53[15];

  v53[13] = *MEMORY[0x24BDAC8D0];
  v48 = *a3;
  v49 = a2;
  if ((_DWORD)a6)
    v12 = a3;
  else
    v12 = &v48;
  v13 = a2 & 0xFFFFFFFFFFFFFFF0;
  v14 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((v14 && *(_BYTE *)(v14 + 16) == 39
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
     && (v14 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0))) != 0)
    && ((v15 = *(_QWORD *)(*(_QWORD *)((*v12 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
     && *(_BYTE *)(v15 + 16) == 39
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
     && (v15 = sub_22F10CF48(v15)) != 0)
    && sub_22F10E1FC(*(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0), 12)
    && (sub_22F10E1FC(*(_QWORD *)(*(_QWORD *)(v14 + 32) & 0xFFFFFFFFFFFFFFF0), 12) & 1) == 0)
  {
    sub_22EFF605C(*v12 & 0xFFFFFFFFFFFFFFFELL);
    sub_22E8FCA40(a1, v16, 0x1A74u, 0, (uint64_t)v50);
    sub_22F0D4E74(*v12 & 0xFFFFFFFFFFFFFFFELL);
    v47 = v17;
    sub_22E8906A0((uint64_t)v50, &v47);
    sub_22E903BEC((unsigned int *)v50);
  }
  if ((*(_BYTE *)(a1[9] + 1) & 1) != 0)
  {
    v21 = *(_QWORD *)v13;
    v22 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v23 == 6 || v23 == 45)
      goto LABEL_21;
    v28 = *v12 & 0xFFFFFFFFFFFFFFFELL;
    v29 = *(_QWORD *)(v28 + 8);
    if ((_DWORD)a4)
    {
      if ((v22 & 0xF) != 0)
        v21 = (unint64_t)sub_22F10D2BC(a2);
      v30 = sub_22ECFABE8(a1, (unsigned __int8 *)v28, v21 & 0xFFFFFFFFFFFFFFF0, 0, 0);
      *v12 = v30;
LABEL_40:
      if ((v30 & 1) != 0)
        return 29;
      if ((*(_WORD *)(a1[9] + 148) & 0xALL) == 0)
        return 0;
      if (sub_22F334CD0((uint64_t)a1, a2, v29))
        return 0;
      else
        return 28;
    }
    if ((v22 & 0xF) != 0)
      v21 = (unint64_t)sub_22F10D2BC(a2);
    sub_22ECFA94C(v50, a1, v28, v21 & 0xFFFFFFFFFFFFFFF0, 0, 0, 0, 0, 0, 0);
    if (SLODWORD(v50[0]) > 1)
    {
      if (LODWORD(v50[0]) != 2 && LODWORD(v50[0]) != 4)
        goto LABEL_80;
    }
    else if (LODWORD(v50[0]) != -2147483646 && LODWORD(v50[0]) != -2147483644)
    {
LABEL_80:
      v42 = *v12 & 0xFFFFFFFFFFFFFFFELL;
      v43 = *(_QWORD *)v13;
      if ((*(_BYTE *)(*(_QWORD *)v13 + 8) & 0xF) != 0)
        v43 = (unint64_t)sub_22F10D2BC(a2);
      v30 = sub_22EBC4694(a1, v42, v43 & 0xFFFFFFFFFFFFFFF0, v50, 0, 0);
      *v12 = v30;
      if (((uint64_t)v50[0] & 0x7FFFFFFF) == 2 && v52 != v53)
      {
        free(v52);
        v30 = *v12;
      }
      goto LABEL_40;
    }
    if (((uint64_t)v50[0] & 0x7FFFFFFF) == 2 && v52 != v53)
      free(v52);
    return 29;
  }
  v18 = *v12 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v18 + 8) == *(_QWORD *)(a1[11] + 16840))
  {
    v19 = sub_22ED13340((unsigned int *)a1, v18, a2, 0, v50, 0);
    if (!v19)
      return 29;
    *v12 = sub_22ED147E8((uint64_t)a1, (unsigned __int8 *)(*v12 & 0xFFFFFFFFFFFFFFFELL), (uint64_t)v50[0], v19, v20);
  }
LABEL_21:
  v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v24 <= 0x27u
    && ((1 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)) & 0x8100000400) != 0)
  {
    if (sub_22EFFBE1C(*v12 & 0xFFFFFFFFFFFFFFFELL, a1[11], 1))
    {
      if ((a4 & 1) != 0 || (_DWORD)a6)
      {
        LODWORD(v47) = 0;
        v50[0] = v51;
        v50[1] = (void *)0x400000000;
        sub_22ECFCE94((uint64_t)a1, *v12 & 0xFFFFFFFFFFFFFFFELL, a2, (int *)&v47, (uint64_t)v50, 0, a4);
        if ((_DWORD)a6)
          *a3 = sub_22E90092C((uint64_t)a1, *a3 & 0xFFFFFFFFFFFFFFFELL, a2, v47, 0, (uint64_t)v50);
        if (v50[0] != v51)
          free(v50[0]);
      }
      return 0;
    }
    v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  v26 = *v12;
  if ((v24 & 0xFF800FF) == 0x708000B)
  {
    if (sub_22EFFBE1C(v26 & 0xFFFFFFFFFFFFFFFELL, a1[11], 1))
    {
      v27 = 0;
      *v12 = sub_22E90092C((uint64_t)a1, *v12 & 0xFFFFFFFFFFFFFFFELL, a2, 14, 0, 0);
      return v27;
    }
    v26 = *v12;
    v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if ((v24 & 0xFE) != 0x28)
  {
    v26 = sub_22EB1B954((uint64_t)a1, (void *)(v26 & 0xFFFFFFFFFFFFFFFELL));
    *v12 = v26;
    if ((v26 & 1) != 0)
      return 29;
  }
  v31 = sub_22EFFBBCC((unsigned __int8 *)(v26 & 0xFFFFFFFFFFFFFFFELL));
  if ((_DWORD)a4)
  {
    v32 = (uint64_t)v31;
    if (*v31 == 206)
    {
      v33 = *((_QWORD *)v31 + 2);
      v47 = v33;
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 104);
        if (!v34)
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v33 + 96) + 88), *(_QWORD *)(v33 + 96));
          v34 = *(_QWORD *)(v33 + 104);
        }
        if (v34 <= 7)
        {
          sub_22EFF605C(v32);
          sub_22E8FCA40(a1, v35, 0x1859u, 0, (uint64_t)v50);
          sub_22E890024((uint64_t)v50, &v47);
          sub_22E903BEC((unsigned int *)v50);
          sub_22E8FCA40(a1, *(_DWORD *)(v47 + 24), 0x15C9u, 0, (uint64_t)v50);
          sub_22E890024((uint64_t)v50, &v47);
          sub_22E903BEC((unsigned int *)v50);
        }
      }
    }
  }
  LODWORD(v47) = 5;
  v27 = sub_22EB376DC((uint64_t)a1, a2, v12, (int *)&v47, a6);
  if ((_DWORD)v27 != 29)
  {
    v36 = (_QWORD *)(*v12 & 0xFFFFFFFFFFFFFFFELL);
    if (v36[1] != a2)
    {
      v37 = sub_22F1133DC(&v49, a1[11]);
      v50[0] = v36;
      v38 = a1[9];
      if ((*(_WORD *)(v38 + 148) & 0xALL) != 0)
      {
        if (sub_22EC32FE4((uint64_t)a1, 0, v37, (uint64_t *)v50, 0, a4, a5, 0) && !(_DWORD)a4)
          return 29;
        v38 = a1[9];
      }
      if ((*(_BYTE *)(v38 + 1) & 0x40) != 0)
      {
        v39 = v50[0];
        sub_22F0D5A50((uint64_t)v50[0]);
        if ((sub_22EC32354((uint64_t)a1, v40, a2, v39[1], (uint64_t *)v50, a4) & 1) != 0
          || sub_22EB39A74(a1, a2, (unsigned __int8 **)v50, a4))
        {
          if ((_DWORD)a4)
          {
            v27 = 0;
            *v12 = (uint64_t)v50[0];
            return v27;
          }
          return 29;
        }
      }
      if (((1 << v27) & 0x1F7FC0E7) != 0)
      {
        if (!(_DWORD)a6)
          return v27;
LABEL_68:
        *a3 = sub_22E90092C((uint64_t)a1, (uint64_t)v50[0], v37, v47, 0, 0);
        return v27;
      }
      v44 = (_QWORD *)a1[14];
      sub_22EFF605C(*v12 & 0xFFFFFFFFFFFFFFFELL);
      v46 = sub_22F1E361C(v44, v45);
      if (v46)
      {
        if (v46 != 3)
        {
          v27 = 0;
          LODWORD(v47) = 68;
          if ((_DWORD)a6)
            goto LABEL_68;
        }
      }
    }
  }
  return v27;
}

uint64_t sub_22EB39A74(_QWORD *a1, uint64_t a2, unsigned __int8 **a3, int a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  void *__p;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  unsigned int v42[24];

  if ((*(_BYTE *)(a1[9] + 1) & 0x40) == 0)
    return 0;
  v7 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (!v7 || *(_BYTE *)(v7 + 16) != 32)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      return 0;
    result = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
    if (!result)
      return result;
    v7 = result;
  }
  v9 = sub_22F31179C(v7);
  v10 = sub_22EFFA6B0(*a3);
  v11 = v10;
  v12 = *v10;
  if (v12 == 210)
  {
    result = *((_QWORD *)v10 + 2);
    if (!result)
      return result;
    v11 = sub_22EFFA6B0((unsigned __int8 *)result);
    v12 = *v11;
  }
  result = 0;
  if (v12 <= 180)
  {
    v13 = v12 - 117;
    v14 = v13 > 0x35;
    v15 = (1 << v13) & 0x20002000000001;
    if (v14 || v15 == 0)
      return result;
LABEL_26:
    v20 = sub_22EFFBE1C((unint64_t)v11, a1[11], 0);
    result = 0;
    if (v20)
      return result;
    result = 0;
    if ((*(_BYTE *)(a1[9] + 238) & 2) != 0 || !v9)
      return result;
    v21 = *(_QWORD *)(v9 + 40);
    if ((v21 & 7) != 0)
      v22 = 0;
    else
      v22 = v21 & 0xFFFFFFFFFFFFFFF8;
    v23 = *(_QWORD *)(v22 + 16);
    if (*(_DWORD *)v23 == 8)
    {
      v24 = *(_QWORD *)(v23 + 16);
      result = v24 == 0x7265626D754E534ELL;
      if (v24 == 0x7265626D754E534ELL && a4 != 0)
      {
        sub_22F0D5A50((uint64_t)v11);
        sub_22E8FCA40(a1, v26, 0xF51u, 0, (uint64_t)v42);
        v41 = 1;
        v27 = sub_22E8900C4((uint64_t)v42, &v41);
        sub_22F0D5A50((uint64_t)v11);
        v35 = 0;
        v36 = 0;
        v38 = 0;
        v39 = 0x100000000000000;
        v33 = v28 | ((unint64_t)v28 << 32);
        v34 = 0;
        __p = (void *)64;
        v40 = 0;
        sub_22E890748(v27, &v33);
        if (SHIBYTE(v39) < 0)
          operator delete(__p);
        sub_22E903BEC(v42);
        sub_22F0D5A50((uint64_t)v11);
        v19 = sub_22EC27798((uint64_t)a1, v29, v11) & 0xFFFFFFFFFFFFFFFELL;
        if (!v19)
          return 1;
        goto LABEL_40;
      }
      return result;
    }
    return 0;
  }
  if (v12 == 181 || v12 == 195)
    goto LABEL_26;
  if (v12 != 225)
    return result;
  if (!sub_22E5761BC(v7))
  {
    if (!v9)
      return 0;
    v30 = *(_QWORD *)(v9 + 40);
    v31 = (v30 & 7) != 0 ? 0 : v30 & 0xFFFFFFFFFFFFFFF8;
    v32 = *(_QWORD *)(v31 + 16);
    if (*(_DWORD *)v32 != 8 || *(_QWORD *)(v32 + 16) != 0x676E69727453534ELL)
      return 0;
  }
  result = (*(_DWORD *)v11 & 0x1C0000) == 0;
  if ((*(_DWORD *)v11 & 0x1C0000) == 0 && a4)
  {
    sub_22E8FCA40(a1, *((_DWORD *)v11 + 5), 0xF51u, 0, (uint64_t)v42);
    v41 = 0;
    v17 = sub_22E8900C4((uint64_t)v42, &v41);
    v18 = *((unsigned int *)v11 + 5);
    v35 = 0;
    v36 = 0;
    v38 = 0;
    v39 = 0x100000000000000;
    v33 = v18 | (v18 << 32);
    v34 = 0;
    __p = (void *)64;
    v40 = 0;
    sub_22E890748(v17, &v33);
    if (SHIBYTE(v39) < 0)
      operator delete(__p);
    sub_22E903BEC(v42);
    v19 = sub_22EC274A0(a1, *((_DWORD *)v11 + 5), (uint64_t)v11) & 0xFFFFFFFFFFFFFFFELL;
LABEL_40:
    *a3 = (unsigned __int8 *)v19;
    return 1;
  }
  return result;
}

unsigned __int8 **sub_22EB39DB0(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v4;
  uint64_t v5;

  v2 = a2;
  *a1 = a2;
  a1[1] = 0;
  v4 = *a2;
  if (v4 == 186)
  {
    v5 = *((_QWORD *)a2 + 2);
    v2 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) != 0)
      v2 = (unsigned __int8 *)*((_QWORD *)v2 + 5);
    v4 = *v2;
  }
  if (v4 == 116)
  {
    v2 = (unsigned __int8 *)*((_QWORD *)v2 + 3);
    v4 = *v2;
  }
  if (v4 == 153)
  {
    *a1 = sub_22EFFB374(v2);
    a1[1] = (unsigned __int8 *)sub_22EFFB4A0((uint64_t)v2);
  }
  return a1;
}

uint64_t sub_22EB39E28(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;

  v12 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22F110744(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0), *(_QWORD *)(a1 + 88)))
  {
    v13 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x40000000) == 0)
      goto LABEL_3;
    v30 = *(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0);
    v31 = *(_DWORD *)(v30 + 16);
    if (v30)
      v32 = v31 == 11;
    else
      v32 = 0;
    if (v32 && ((v31 >> 19) & 0x1FE) - 210 < 8)
      goto LABEL_56;
    if (v31 != 9)
    {
      if (v31 == 44)
      {
        v33 = sub_22F114198(*(_QWORD *)(v30 + 24));
        if ((*(_BYTE *)(v33 + 74) & 1) == 0 && *(_QWORD *)(v33 + 128) < 8uLL
          || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v30 + 24)) + 76) & 0x80) != 0)
        {
          goto LABEL_3;
        }
      }
      else if (v31 != 11 || ((v31 >> 19) & 0x1FE) - 166 >= 0x14)
      {
        goto LABEL_3;
      }
    }
    if ((sub_22EF6A694(*(_QWORD *)(a1 + 88), a4, a3) & 0x80000000) != 0)
    {
LABEL_56:
      v29 = 4420;
      goto LABEL_57;
    }
LABEL_3:
    if (sub_22F110744(*v13, *(_QWORD *)(a1 + 88)))
    {
      if (sub_22F11057C(*v12))
        v14 = 31;
      else
        v14 = 30;
      goto LABEL_7;
    }
    return 1;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v18)
    v19 = *(_DWORD *)(v18 + 16) == 11;
  else
    v19 = 0;
  if (!v19 || ((*(_DWORD *)(v18 + 16) >> 19) & 0x1FEu) - 210 > 7)
    return 1;
  v20 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v21)
    v22 = *(_DWORD *)(v21 + 16) == 11;
  else
    v22 = 0;
  if (v22 && ((*(_DWORD *)(v21 + 16) >> 19) & 0x1FEu) - 210 <= 7)
  {
    v23 = sub_22EF6A108(*(_QWORD *)(a1 + 88), a4, a3);
    v24 = *(_QWORD *)(a1 + 72);
    if ((*(_DWORD *)(v24 + 52) & 0x40000000) != 0 && v23 == -1)
      goto LABEL_56;
    if (v23 >= 0xFFFFFFFE)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v26 = v25 && *(_DWORD *)(v25 + 16) == 11;
      if (!v26
        || ((*(_DWORD *)(v25 + 16) >> 19) & 0x1FFu) - 214 < 0xFFFFFFFD
        || ((v27 = *(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
          ? (v28 = *(_DWORD *)(v27 + 16) == 11)
          : (v28 = 0),
            (!v28 || ((*(_DWORD *)(v27 + 16) >> 19) & 0x1FFu) - 211 >= 3)
         && ((*(_BYTE *)(v24 + 104) & 0x20) == 0
          || (v34 = *(_QWORD *)(*(_QWORD *)(*v12 + 8) & 0xFFFFFFFFFFFFFFF0)) == 0
          || (*(_DWORD *)(v34 + 16) & 0xFF800FF) != 0x690000B)))
      {
        v29 = 4685;
LABEL_57:
        *a6 = v29;
        return 1;
      }
    }
    v14 = 42;
  }
  else
  {
    if (!sub_22F110744(v20, *(_QWORD *)(a1 + 88)))
      return 1;
    v14 = 32;
  }
LABEL_7:
  if (!a2)
    return 0;
  v15 = sub_22E90092C(a1, *a2 & 0xFFFFFFFFFFFFFFFELL, a4, v14, 0, 0);
  *a2 = v15;
  v16 = sub_22E90092C(a1, v15 & 0xFFFFFFFFFFFFFFFELL, a5, 27, 0, 0);
  result = 0;
  *a2 = v16;
  return result;
}

uint64_t sub_22EB3A140(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _BOOL4 v18;
  unsigned int v19;
  int v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  llvm::APFloatBase *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t *v41;
  unsigned int v42;
  int v43;
  unint64_t v44;
  char v45;
  llvm::APFloatBase *v46;
  char v47;
  char v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  llvm::APFloatBase *v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  llvm::APFloatBase *v58;
  unsigned int v59;
  BOOL v60;
  unint64_t v61;
  unsigned int v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v7 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v7 + 8) & 0xF) != 0)
    v7 = (unint64_t)sub_22F10D2BC(v6);
  v8 = *(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v8 + 8) & 0xF) != 0)
    v8 = (unint64_t)sub_22F10D2BC(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8));
  v9 = v8 & 0xFFFFFFFFFFFFFFF0;
  v10 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = *(unsigned __int8 *)(v10 + 16) - 57 > 0xFFFFFFFD;
  else
    v11 = 0;
  if (!v11)
    v10 = sub_22F10CF48(v10);
  v12 = *(_QWORD *)(v10 + 32);
  v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF0);
  if (!sub_22F110E9C(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0)))
    return 1;
  v14 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFF0);
  if (!sub_22F110E9C(*v14))
    return 1;
  if (sub_22F110744(*v13, *(_QWORD *)(a1 + 88))
    && sub_22F110744(*v14, *(_QWORD *)(a1 + 88))
    && sub_22EF6A694(*(_QWORD *)(a1 + 88), v12, (uint64_t)v14))
  {
    v15 = *a2 & 0xFFFFFFFFFFFFFFFELL;
    v16 = *(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v16 + 8) & 0xF) != 0)
    {
      v16 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v15 + 8));
      v15 = *a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF0);
    v67 = 0;
    v68 = 0;
    LODWORD(v69) = 0;
    v18 = sub_22F00554C(v15, (uint64_t)&v67, *(_QWORD *)(a1 + 88), 0, 0);
    v19 = sub_22EF6A694(*(_QWORD *)(a1 + 88), v12, (uint64_t)v17);
    v20 = sub_22F110B20(*v17);
    v21 = sub_22F110B20(*v13);
    if (!v18)
    {
      v39 = v19 >> 31;
      goto LABEL_75;
    }
    v22 = v21;
    LODWORD(v65) = v71;
    if (v71 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v64, (const llvm::APInt *)&v70);
    else
      v64 = v70;
    BYTE4(v65) = v72;
    if (v20)
    {
      v40 = v65;
      if (!v72)
      {
        v41 = (unint64_t *)(v64 + 8 * ((v65 - 1) >> 6));
        if (v65 < 0x41)
          v41 = &v64;
        if (((*v41 >> (v65 - 1)) & 1) != 0)
        {
          v42 = v40 - sub_22E99C40C((llvm::APInt *)&v64) + 1;
          goto LABEL_66;
        }
      }
    }
    else
    {
      v40 = v65;
    }
    if (v40 > 0x40)
      v43 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v64);
    else
      v43 = v40 + __clz(v64) - 64;
    v42 = v40 - v43;
LABEL_66:
    LOBYTE(v39) = (v19 & 0x80000000) != 0 && sub_22EF6A330(*(_QWORD *)(a1 + 88), v12) < v42
               || v20 != v22 && v42 > sub_22EF6A330(*(_QWORD *)(a1 + 88), v12);
    if (v65 >= 0x41 && v64)
      MEMORY[0x2348A0E84](v64, 0x1000C8000313F17);
LABEL_75:
    if (v69 >= 2)
      sub_22EF53BC0(&v69);
    if ((v39 & 1) == 0)
    {
      v26 = 30;
      goto LABEL_110;
    }
    return 1;
  }
  if (!sub_22F110744(*v13, *(_QWORD *)(a1 + 88))
    || ((v23 = *(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
      ? (v24 = *(_DWORD *)(v23 + 16) == 11)
      : (v24 = 0),
        !v24 || ((*(_DWORD *)(v23 + 16) >> 19) & 0x1FEu) - 210 > 7))
  {
    v27 = *(_QWORD *)(*(_QWORD *)(*v13 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v27)
      v28 = *(_DWORD *)(v27 + 16) == 11;
    else
      v28 = 0;
    if (!v28)
    {
      v29 = *v14;
      goto LABEL_43;
    }
    v29 = *v14;
    if (((*(_DWORD *)(v27 + 16) >> 19) & 0x1FEu) - 210 > 7)
    {
LABEL_43:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44)
        return 1;
      goto LABEL_111;
    }
    v30 = *(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v30)
      v31 = *(_DWORD *)(v30 + 16) == 11;
    else
      v31 = 0;
    if (v31 && ((*(_DWORD *)(v30 + 16) >> 19) & 0x1FEu) - 210 <= 7)
    {
      v32 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v64, 0.0);
      v33 = llvm::APFloatBase::IEEEdouble(v32);
      MEMORY[0x23489F4E0](&v68, &v64, v33);
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v64);
      v34 = *a2 & 0xFFFFFFFFFFFFFFFELL;
      if ((*(_BYTE *)(v34 + 2) & 1) != 0)
        v35 = 1;
      else
        v35 = sub_22F0059FC(v34, (uint64_t)&v67, *(_QWORD *)(a1 + 88), 0, 0);
      v46 = (llvm::APFloatBase *)sub_22EF6A108(*(_QWORD *)(a1 + 88), v12, (uint64_t)v14);
      if ((v35 & 1) != 0 || v46 <= 0xFFFFFFFD)
      {
        if (v35
          && (LOBYTE(v64) = 0,
              sub_22EF5B2E0(*(_QWORD *)(a1 + 88), v12),
              v48 = 1,
              v46 = (llvm::APFloatBase *)llvm::APFloat::convert(),
              (_BYTE)v64))
        {
          v47 = 0;
          v26 = 5;
        }
        else
        {
          v48 = 0;
          v47 = 1;
          v26 = 42;
        }
      }
      else
      {
        v47 = 0;
        v26 = 5;
        v48 = 1;
      }
      v55 = v68;
      if (llvm::APFloatBase::PPCDoubleDouble(v46) == v55)
      {
        sub_22E463170((llvm::APFloatBase *)&v69);
        if ((v47 & 1) == 0)
          return 1;
      }
      else
      {
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v68);
        if ((v47 & 1) == 0)
          return 1;
      }
      if ((v48 & 1) == 0)
        goto LABEL_110;
LABEL_111:
      v56 = sub_22E90092C(a1, *a2 & 0xFFFFFFFFFFFFFFFELL, v9, 27, 0, 0);
      result = 0;
      *a2 = v56;
      return result;
    }
    if (!sub_22F110744(v29, *(_QWORD *)(a1 + 88)))
      return 1;
    v36 = *a2 & 0xFFFFFFFFFFFFFFFELL;
    v37 = *(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(v37 + 8) & 0xF) != 0)
    {
      v37 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v36 + 8));
      v36 = *a2 & 0xFFFFFFFFFFFFFFFELL;
    }
    v38 = (uint64_t *)(v37 & 0xFFFFFFFFFFFFFFF0);
    v67 = 0;
    v68 = 0;
    LODWORD(v69) = 0;
    if (sub_22F00554C(v36, (uint64_t)&v67, *(_QWORD *)(a1 + 88), 0, 0))
    {
      v62 = v71;
      if (v71 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v61, (const llvm::APInt *)&v70);
      else
        v61 = v70;
      v63 = v72;
      v49 = sub_22EF5B2E0(*(_QWORD *)(a1 + 88), v12);
      sub_22E99C474((llvm::APFloatBase *)&v65, v49);
      sub_22F110B20(*v38);
      sub_22E51FB5C((llvm::APFloatBase *)&v64);
      v50 = sub_22EF6A330(*(_QWORD *)(a1 + 88), (uint64_t)v38);
      v51 = !sub_22F110B20(*v38);
      v59 = v50;
      if (v50 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v58);
      else
        v58 = 0;
      v60 = v51;
      v52 = (llvm::APFloatBase *)llvm::APFloat::convertToInteger();
      if (v62 > 0x40)
      {
        v52 = (llvm::APFloatBase *)llvm::APInt::equalSlowCase((llvm::APInt *)&v61, (const llvm::APInt *)&v58);
        v53 = (char)v52;
      }
      else
      {
        v53 = v61 == (_QWORD)v58;
      }
      if (v59 >= 0x41)
      {
        v52 = v58;
        if (v58)
          v52 = (llvm::APFloatBase *)MEMORY[0x2348A0E84](v58, 0x1000C8000313F17);
      }
      v54 = v65;
      if (llvm::APFloatBase::PPCDoubleDouble(v52) == v54)
        sub_22E463170((llvm::APFloatBase *)&v66);
      else
        llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&v65);
      if (v62 >= 0x41 && v61)
        MEMORY[0x2348A0E84](v61, 0x1000C8000313F17);
      if (!v53)
        goto LABEL_101;
    }
    else
    {
      v44 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *v38);
      sub_22EF5B2E0(*(_QWORD *)(a1 + 88), v12);
      if (v44 > llvm::APFloatBase::semanticsPrecision())
      {
LABEL_101:
        v45 = 1;
LABEL_102:
        if (v69 >= 2)
          sub_22EF53BC0(&v69);
        if ((v45 & 1) == 0)
        {
          v26 = 32;
          goto LABEL_110;
        }
        return 1;
      }
    }
    v45 = 0;
    goto LABEL_102;
  }
  v25 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *v13);
  if (v25 == sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *v14))
  {
    v26 = 39;
LABEL_110:
    *a2 = sub_22E90092C(a1, *a2 & 0xFFFFFFFFFFFFFFFELL, v12, v26, 0, 0);
    goto LABEL_111;
  }
  return 1;
}

uint64_t *sub_22EB3A8FC(_QWORD *a1, uint64_t *a2, uint64_t *a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46[24];
  unint64_t v47;
  unint64_t v48;

  if ((a5 & 1) == 0)
  {
    v12 = sub_22EB1B954((uint64_t)a1, (void *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
    *a2 = v12;
    if ((v12 & 1) != 0)
      return 0;
  }
  v13 = sub_22EB1B954((uint64_t)a1, (void *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
  *a3 = v13;
  if ((v13 & 1) != 0)
    return 0;
  v14 = *(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v14 + 8) & 0xF) != 0)
  {
    v14 = (unint64_t)sub_22F10D2BC(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8));
    v13 = *a3;
  }
  v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFF0);
  v48 = v14 & 0xFFFFFFFFFFFFFFF0;
  v16 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v17 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v17 + 8) & 0xF) != 0)
    v17 = (unint64_t)sub_22F10D2BC(v16);
  v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFF0);
  v47 = v17 & 0xFFFFFFFFFFFFFFF0;
  if (!a6
    && ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF80000) == 0x3000000
     || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFF80000) == 0x3000000))
  {
    goto LABEL_39;
  }
  if (v15[1] != *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF0) + 8))
  {
    v19 = *(_QWORD *)(*(_QWORD *)(*v15 + 8) & 0xFFFFFFFFFFFFFFF0);
    v20 = *(_DWORD *)(v19 + 16);
    if (v19)
      v21 = *(_DWORD *)(v19 + 16) == 11;
    else
      v21 = 0;
    v22 = v21;
    if (v21
      && ((v23 = (v20 >> 19) & 0x1FF, (v23 - 48) < 0xC) || v23 == 96)
      && ((v24 = *(_QWORD *)(*(_QWORD *)(*v18 + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
        ? (v25 = *(_DWORD *)(v24 + 16) == 11)
        : (v25 = 0),
          !v25 || (v29 = (*(_DWORD *)(v24 + 16) >> 19) & 0x1FF, (v29 - 48) >= 0xC) && v29 != 96))
    {
      v26 = sub_22F1113D8(*v15, a1[11]);
      v27 = sub_22F10CF48(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0));
      if (v27 != sub_22F10CF48(*v18))
        goto LABEL_55;
      v28 = sub_22EB39E28((uint64_t)a1, a3, (uint64_t)v18, v26, (uint64_t)v15, (int *)v46);
      if (!v15 || v28)
        goto LABEL_55;
    }
    else
    {
      v30 = *(_QWORD *)(*(_QWORD *)(*v18 + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v30)
        v31 = *(_DWORD *)(v30 + 16) == 11;
      else
        v31 = 0;
      if (!v31
        || (v32 = (*(_DWORD *)(v30 + 16) >> 19) & 0x1FF, (v32 - 48) >= 0xC) && v32 != 96
        || v22 && ((v33 = (v20 >> 19) & 0x1FF, (v33 - 48) < 0xC) || v33 == 96))
      {
LABEL_39:
        sub_22E8FCA40(a1, a4, 0x1376u, 0, (uint64_t)v46);
        v34 = sub_22E8901B8((uint64_t)v46, (uint64_t *)&v48);
        v35 = sub_22E8901B8(v34, (uint64_t *)&v47);
        sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
        v45 = v36;
        v37 = sub_22E8906A0(v35, &v45);
        sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
        v44 = v38;
        sub_22E8906A0(v37, &v44);
        sub_22E903BEC(v46);
        return 0;
      }
      v40 = sub_22F1113D8(*v18, a1[11]);
      v41 = sub_22F10CF48(*(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF0));
      if (v41 != sub_22F10CF48(*v15)
        || (!a5 ? (v42 = a2) : (v42 = 0),
            (v43 = sub_22EB39E28((uint64_t)a1, v42, (uint64_t)v15, v40, (uint64_t)v18, (int *)v46), !v18)
         || (v15 = v18, v43)))
      {
LABEL_55:
        sub_22F32EE84(a1, a4, a2, a3);
        return 0;
      }
    }
  }
  return v15;
}

uint64_t *sub_22EB3AC80(_QWORD *a1, uint64_t *a2, uint64_t *a3, int a4, int a5, int a6)
{
  int v12;
  uint64_t v13;
  int v14;
  int v16;
  int v17;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60[24];
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;

  sub_22EB3B394(a1, a2, a3, a4, 0);
  v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 16);
  if ((v12 - 55) < 2)
    return (uint64_t *)sub_22EB36814(a1, a2, a3, a4, a5, (*(_QWORD *)(a1[9] + 8) & 0x40000000000) != 0, 0, (*(_QWORD *)(a1[9] + 100) & 0x2000000000) != 0, 1);
  v13 = *(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v14 - 55) <= 1)
    return (uint64_t *)sub_22EB36814(a1, a2, a3, a4, a5, (*(_QWORD *)(a1[9] + 8) & 0x40000000000) != 0, 0, (*(_QWORD *)(a1[9] + 100) & 0x2000000000) != 0, 1);
  if (v12 == 11)
  {
    v16 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) >> 19) & 0x1FF;
    if ((v16 - 48) < 0xC || v16 == 96)
      return sub_22EB3A8FC(a1, a2, a3, a4, a5, 0);
  }
  if (v14 == 11)
  {
    v17 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) >> 19) & 0x1FF;
    if ((v17 - 48) < 0xC || v17 == 96)
      return sub_22EB3A8FC(a1, a2, a3, a4, a5, 0);
  }
  if ((a6 & 1) != 0)
  {
    if (v12 == 29 && sub_22F110E9C(v13))
      return sub_22EB3B570((uint64_t)a1, a2, a3, a4, a5);
  }
  else if (v12 == 29 || v14 == 29)
  {
    return sub_22F32F1C8(a1, a2, a3, a4, a5);
  }
  if (a5)
    v19 = 4;
  else
    v19 = 0;
  v20 = sub_22EB1F050((uint64_t)a1, a2, a3, a4, v19);
  if ((*(_BYTE *)a2 & 1) != 0 || (*(_BYTE *)a3 & 1) != 0)
    return 0;
  v21 = v20;
  if (v20 < 0x10 || !sub_22F110E9C(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0)))
  {
    sub_22F32EE84(a1, a4, a2, a3);
    return 0;
  }
  if (!a6)
    return (uint64_t *)v21;
  sub_22EB3B714((uint64_t)a1, a3, a4, 1u);
  v22 = (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
  v23 = (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL);
  v62 = v23;
  v63 = v22;
  v24 = *v23;
  if (v24 != 232)
    v23 = 0;
  if (*v22 != 232 || v24 != 232 || (v22[2] & 0x7C) != 0 || (*(_DWORD *)v23 & 0x3C0000) != 0)
    return (uint64_t *)v21;
  v25 = (unsigned __int8 *)*((_QWORD *)v22 + 2);
  do
  {
    v26 = v25;
    v27 = *v25;
    if (v27 > 213)
    {
      if (v27 == 233)
      {
        if ((*(_DWORD *)v26 & 0x7C0000) != 0x300000)
          break;
        v29 = v26 + 16;
      }
      else
      {
        if (v27 != 214)
          break;
        v29 = v26 + 24;
      }
      goto LABEL_48;
    }
    if (v27 == 155)
    {
      if ((**((_DWORD **)v26 + 2) & 0x18000) != 0)
        break;
      if (v26[48])
        v29 = v26 + 24;
      else
        v29 = v26 + 32;
      goto LABEL_48;
    }
    if (v27 != 176)
      break;
    v28 = *((unsigned int *)v26 + 5);
    if ((_DWORD)v28 == -1)
      break;
    v29 = &v26[8 * v28 + 40];
LABEL_48:
    v25 = *(unsigned __int8 **)v29;
  }
  while (v25 != v26);
  v30 = *((_QWORD *)v26 + 1);
  v31 = (unsigned __int8 *)*((_QWORD *)v23 + 2);
  if ((*(_DWORD *)v23 & 0x400000) != 0)
  {
    v36 = *(_QWORD *)v31;
    v37 = *(_QWORD *)(*(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF0);
    if (v37 && (v38 = *(_DWORD *)(v37 + 16), (v38 & 0xFE) == 0x28))
    {
      v39 = *((_QWORD *)v26 + 1);
    }
    else
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        goto LABEL_79;
      v39 = *((_QWORD *)v26 + 1);
      v37 = sub_22F10CF48(v37);
      v30 = v39;
      if (!v37)
        goto LABEL_79;
      v38 = *(_DWORD *)(v37 + 16);
    }
    if ((v38 & 0x100000) != 0)
    {
      do
      {
        v37 = *(_QWORD *)(*(_QWORD *)(v37 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v37)
        {
          v57 = *(_DWORD *)(v37 + 16);
          if ((v57 & 0xFE) == 0x28)
            continue;
        }
        v37 = sub_22F10CF48(v37);
        v57 = *(_DWORD *)(v37 + 16);
      }
      while ((v57 & 0x100000) != 0);
    }
    v40 = (uint64_t *)(v37 + 32);
    v30 = v39;
    goto LABEL_78;
  }
  if (v31)
  {
    while (1)
    {
      v32 = v31;
      v33 = *v31;
      if (v33 > 0xD5)
      {
        if (v33 == 233)
        {
          if ((*(_DWORD *)v31 & 0x7C0000) != 0x300000)
            goto LABEL_77;
          v35 = v31 + 16;
        }
        else
        {
          if (v33 != 214)
            goto LABEL_77;
          v35 = v31 + 24;
        }
      }
      else if (v33 == 155)
      {
        if ((**((_DWORD **)v31 + 2) & 0x18000) != 0)
          goto LABEL_77;
        if (v31[48])
          v35 = v31 + 24;
        else
          v35 = v31 + 32;
      }
      else
      {
        if (v33 != 176)
          goto LABEL_77;
        v34 = *((unsigned int *)v31 + 5);
        if ((_DWORD)v34 == -1)
          goto LABEL_77;
        v35 = &v31[8 * v34 + 40];
      }
      v31 = *(unsigned __int8 **)v35;
      if (*(unsigned __int8 **)v35 == v32)
        goto LABEL_77;
    }
  }
  v32 = 0;
LABEL_77:
  v40 = (uint64_t *)(v32 + 8);
LABEL_78:
  v36 = *v40;
LABEL_79:
  v61 = v36;
  v41 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
  {
    if (*(_QWORD *)(*(_QWORD *)((sub_22F10ACF8(v41) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
    {
      sub_22E8FCA40(a1, a4, 0x1977u, 0, (uint64_t)v60);
      v53 = sub_22F2F37E0((uint64_t)v60, (uint64_t *)&v63);
      sub_22F0D4E74((uint64_t)v63);
      v59 = v54;
      sub_22E8906A0(v53, (uint64_t *)&v59);
      sub_22E903BEC(v60);
      if (*v26 == 161)
      {
        v55 = *((_QWORD *)v26 + 2);
        v59 = v55;
        if (v55)
        {
          sub_22E8FCA40(a1, *(_DWORD *)(v55 + 24), 0x1760u, 0, (uint64_t)v60);
          sub_22E890024((uint64_t)v60, (uint64_t *)&v59);
          goto LABEL_99;
        }
      }
    }
  }
  else
  {
    v42 = sub_22EF5C728(a1[11], v30);
    if (v42)
    {
      v43 = *(_QWORD *)(v42 + 32);
      v59 = v43;
      if (v43 == sub_22EF5BA38(a1[11], v43))
      {
        v44 = *(_QWORD *)(v43 & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v44 + 17) & 4) == 0)
        {
          v45 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(*v45 + 17) & 4) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*v45 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
          {
            v46 = *(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0);
            v47 = v46 && *(_DWORD *)(v46 + 16) == 11;
            if (!v47
              || (((*(_DWORD *)(v46 + 16) >> 19) & 0x1FFu) - 167 <= 0xC
                ? (v56 = ((1 << ((*(_DWORD *)(v46 + 16) >> 19) + 89)) & 0x1803) == 0)
                : (v56 = 1),
                  v56))
            {
              v48 = sub_22EF5CDF0(a1[11], v44);
              if (v48 != sub_22EF5CDF0(a1[11], *v45))
              {
                sub_22E8FCA40(a1, a4, 0x1976u, 0, (uint64_t)v60);
                sub_22F0D4E74((uint64_t)v26);
                v58 = v49;
                v50 = sub_22E8906A0((uint64_t)v60, &v58);
                v51 = sub_22E8901B8(v50, (uint64_t *)&v59);
                sub_22E8901B8(v51, &v61);
                sub_22E903BEC(v60);
                if (*v26 == 161)
                {
                  v52 = *((_QWORD *)v26 + 2);
                  v58 = v52;
                  if (v52)
                  {
                    sub_22E8FCA40(a1, *(_DWORD *)(v52 + 24), 0x1543u, 0, (uint64_t)v60);
                    sub_22E890024((uint64_t)v60, &v58);
                    sub_22E903BEC(v60);
                  }
                }
                sub_22E8FCA40(a1, a4, 0x1769u, 0, (uint64_t)v60);
                sub_22F2F37E0((uint64_t)v60, (uint64_t *)&v62);
LABEL_99:
                sub_22E903BEC(v60);
              }
            }
          }
        }
      }
    }
  }
  return (uint64_t *)v21;
}

unsigned __int8 *sub_22EB3B394(_QWORD *a1, uint64_t *a2, uint64_t *a3, int a4, char a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27[24];
  uint64_t v28;
  BOOL v29;

  v10 = *a2;
  v11 = *sub_22EFFA6B0((unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
  v29 = v11 == 175;
  v12 = *a3;
  result = sub_22EFFA6B0((unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
  v14 = *result;
  if (v11 == 175)
    v15 = v12;
  else
    v15 = v10;
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v28 = v16;
  if (v11 == 175 || v14 == 175)
  {
    v17 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    v18 = v17 == 10 || v17 == 31;
    if (!v18 && (v17 - 25) >= 2)
    {
      if ((a5 & 1) == 0)
      {
        sub_22E8FCA40(a1, a4, 0x1A8Du, 0, (uint64_t)v27);
        if (v11 == 175)
          sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
        else
          v23 = 0;
        v26 = v23;
        v22 = sub_22E8906A0((uint64_t)v27, &v26);
        if (v14 != 175)
        {
          v24 = 0;
          goto LABEL_23;
        }
LABEL_21:
        sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
LABEL_23:
        v25 = v24;
        sub_22E8906A0(v22, &v25);
        return (unsigned __int8 *)sub_22E903BEC(v27);
      }
      if ((v11 == 175) != (v14 == 175) && v17 != 32 && v17 != 39 && (v17 & 0xFEu) - 2 >= 4)
      {
        sub_22E8FCA40(a1, a4, 0x1A8Eu, 0, (uint64_t)v27);
        v19 = sub_22E894E38((uint64_t)v27, (unsigned __int8 *)&v29);
        v20 = sub_22E8901B8(v19, &v28);
        sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
        v26 = v21;
        v22 = sub_22E8906A0(v20, &v26);
        goto LABEL_21;
      }
    }
  }
  return result;
}

uint64_t *sub_22EB3B570(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  int v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if ((a5 & 1) == 0)
  {
    v9 = sub_22EB1B954(a1, (void *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
    *a2 = v9;
    if ((v9 & 1) != 0)
      return 0;
  }
  v10 = sub_22EB1B954(a1, (void *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
  *a3 = v10;
  if ((v10 & 1) != 0)
    return 0;
  v13 = *(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v13 + 8) & 0xF) != 0)
  {
    v13 = (unint64_t)sub_22F10D2BC(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8));
    v10 = *a3;
  }
  v11 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v15 + 8) & 0xF) != 0)
    v15 = (unint64_t)sub_22F10D2BC(v14);
  v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_22F30C7FC(*v11);
  v18 = sub_22F30C7FC(*v16);
  if (v11[1] != v16[1])
  {
    v19 = *a2;
    v28 = *a3;
    v29 = v19;
    if (v17)
      v20 = v18 == 0;
    else
      v20 = 0;
    if (v20)
    {
      v26 = sub_22F32DB2C();
      *a3 = v26;
      if ((v26 & 1) == 0)
        return v11;
      goto LABEL_25;
    }
    if (v17)
      v21 = 1;
    else
      v21 = v18 == 0;
    if (v21)
    {
      v22 = a4;
      v23 = (_QWORD *)a1;
      v24 = a2;
      v25 = a3;
LABEL_21:
      sub_22F32EE84(v23, v22, v24, v25);
      return 0;
    }
    v27 = sub_22F32DB2C();
    *a2 = v27;
    v11 = v16;
    if ((v27 & 1) != 0)
    {
LABEL_25:
      v22 = a4;
      v24 = &v29;
      v25 = &v28;
      v23 = (_QWORD *)a1;
      goto LABEL_21;
    }
  }
  return v11;
}

void sub_22EB3B714(uint64_t a1, uint64_t *a2, int a3, unsigned int a4)
{
  unint64_t v5;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  LODWORD(v20) = 0;
  v5 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(v5 + 2) & 1) == 0
    && sub_22F00554C(v5, (uint64_t)&v18, *(_QWORD *)(a1 + 88), 0, 0)
    && sub_22E42E5EC((uint64_t)v21, 0))
  {
    v9 = *a2;
    v15 = *(_QWORD *)(a1 + 88) + 2128;
    v16 = 6953;
    v10 = (_BYTE *)sub_22E3B8AAC(v15);
    v14 = (unint64_t)v10;
    v11 = *v10;
    v10[v11 + 1] = 2;
    *v10 = v11 + 1;
    *(_QWORD *)&v10[8 * v11 + 16] = a4;
    sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
    sub_22E4D6448((uint64_t)(v10 + 336), v12, 1);
    v17 = v9 & 0xFFFFFFFFFFFFFFFELL;
    v13 = (v9 & 0xFFFFFFFFFFFFFFFELL) != 0 ? &v17 : 0;
    sub_22EB52944(a1, a3, v13, (v9 & 0xFFFFFFFFFFFFFFFELL) != 0, (uint64_t *)&v14);
    if (v14)
    {
      if (v15)
        sub_22E3BB10C(v15, v14);
    }
  }
  if (v20 >= 2)
    sub_22EF53BC0(&v20);
}

uint64_t *sub_22EB3B87C(_QWORD *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;

  sub_22EB3B394(a1, a2, a3, a4, 0);
  v10 = *(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v11 - 55) >= 2)
  {
    v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                                     + 16);
    if ((v12 - 55) > 1)
    {
      if (v11 == 11
        && ((v13 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) >> 19) & 0x1FF,
             (v13 - 48) < 0xC)
         || v13 == 96)
        || v12 == 11
        && ((v14 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) >> 19) & 0x1FF,
             (v14 - 48) < 0xC)
         || v14 == 96))
      {
        if (sub_22F1105F0(v10)
          && sub_22F1105F0(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)))
        {
          return sub_22EB3A8FC(a1, a2, a3, a4, a5, 0);
        }
        goto LABEL_36;
      }
      if (a5)
        v16 = 4;
      else
        v16 = 0;
      v17 = sub_22EB1F050((uint64_t)a1, a2, a3, a4, v16);
      if ((*(_BYTE *)a2 & 1) != 0 || (*(_BYTE *)a3 & 1) != 0)
        return 0;
      v18 = v17;
      if (v17 >= 0x10)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v20 = *(_DWORD *)(v19 + 16);
        if (v19)
          v21 = v20 == 11;
        else
          v21 = 0;
        if (v21)
        {
          if (((*(_DWORD *)(v19 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
            goto LABEL_29;
        }
        else
        {
          if (v19 && v20 == 44)
          {
            v22 = sub_22F114198(*(_QWORD *)(v19 + 24));
            if ((*(_BYTE *)(v22 + 74) & 1) == 0 && *(_QWORD *)(v22 + 128) <= 7uLL
              || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v19 + 24)) + 76) & 0x80) != 0)
            {
              goto LABEL_36;
            }
LABEL_29:
            sub_22EB3B714((uint64_t)a1, a3, a4, 0);
            return (uint64_t *)v18;
          }
          if (v20 == 9)
            goto LABEL_29;
        }
      }
LABEL_36:
      sub_22F32EE84(a1, a4, a2, a3);
      return 0;
    }
  }
  if (!sub_22F1105F0(v10)
    || !sub_22F1105F0(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)))
  {
    goto LABEL_36;
  }
  return (uint64_t *)sub_22EB36814(a1, a2, a3, a4, a5, (*(_QWORD *)(a1[9] + 8) & 0x40000000000) != 0, 0, (*(_QWORD *)(a1[9] + 100) & 0x2000000000) != 0, 1);
}

unint64_t sub_22EB3BB1C(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4, int a5, unint64_t *a6)
{
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  void *__p;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[11];

  v103[9] = *MEMORY[0x24BDAC8D0];
  v11 = a4;
  sub_22EB3B394((_QWORD *)a1, a2, a3, a4, 0);
  v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 16);
  if ((v12 - 55) < 2
    || (v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                         + 16),
        (v13 - 55) <= 1))
  {
    v14 = sub_22EB36814((_QWORD *)a1, a2, a3, v11, a6 != 0, (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) & 0x40000000000) != 0, (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) >> 43) & 1, (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 100) & 0x2000000000) != 0, 1);
LABEL_4:
    v15 = v14;
    goto LABEL_5;
  }
  if (v12 == 11)
  {
    v17 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) >> 19) & 0x1FF;
    if ((v17 - 48) < 0xC || v17 == 96)
      goto LABEL_13;
  }
  if (v13 == 11)
  {
    v18 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) >> 19) & 0x1FF;
    if ((v18 - 48) >= 0xC && v18 != 96)
    {
      if (v12 != 29)
        goto LABEL_22;
LABEL_19:
      v14 = (uint64_t)sub_22EB3B570(a1, a2, a3, v11, a6 != 0);
      goto LABEL_4;
    }
LABEL_13:
    v14 = (uint64_t)sub_22EB3A8FC((_QWORD *)a1, a2, a3, v11, a6 != 0, 0);
    goto LABEL_4;
  }
  if (v12 == 29 || v13 == 29)
    goto LABEL_19;
LABEL_22:
  v20 = sub_22EB1F050(a1, a2, a3, v11, 4 * (a6 != 0));
  v21 = *a2;
  if ((*a2 & 1) != 0 || (*a3 & 1) != 0)
    return 0;
  v15 = v20;
  if (a5 == 5)
  {
    v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
    v23 = (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL);
    v24 = (unint64_t)v23;
    if (*sub_22EFFEB40((unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL)) == 225
      || (v24 = v22, *sub_22EFFEB40(v23) == 225))
    {
      if (sub_22F1107D8(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0))
        && (*(_BYTE *)(v24 + 2) & 1) == 0)
      {
        sub_22F0D5A50(v22);
        v26 = v25;
        sub_22F0D60E4((uint64_t)v23);
        v99 = __PAIR64__(v27, v26);
        sub_22E8FCA40((_QWORD *)a1, v11, 0x1B5Eu, 0, (uint64_t)&v100);
        v28 = sub_22E8906A0((uint64_t)&v100, (uint64_t *)&v99);
        v91 = *((_QWORD *)sub_22EFFEB40((unsigned __int8 *)v24) + 1);
        sub_22E8901B8(v28, (uint64_t *)&v91);
        sub_22E903BEC(&v100);
        if ((unsigned __int8 *)v24 == v23)
        {
          sub_22F0D60E4((uint64_t)v23);
          v30 = sub_22F141A3C(v29, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
          sub_22E8FCA40((_QWORD *)a1, v11, 0x17C3u, 0, (uint64_t)&v100);
          sub_22F0D5A50(v22);
          v93 = 0;
          v94 = 0;
          v96 = 0;
          v97 = 0x100000000000000;
          v91 = v31 | ((unint64_t)v31 << 32);
          v92 = 0;
          v95 = (void *)38;
          v98 = 0;
          v32 = sub_22E890748((uint64_t)&v100, &v91);
          v86 = 0;
          v85 = 0;
          v88 = 0;
          v89 = 0x100000000000000;
          v90 = 0;
          v83 = v11 | (v11 << 32);
          v84 = 1;
          v87 = (void *)91;
          v33 = sub_22E890748(v32, &v83);
          v78 = 0;
          v77 = 0;
          v80 = 0;
          v81 = 0x100000000000000;
          v75 = v30 | ((unint64_t)v30 << 32);
          v76 = 0;
          __p = (void *)93;
          v82 = 0;
          sub_22E890748(v33, &v75);
          if (SHIBYTE(v81) < 0)
            operator delete(__p);
          if (SHIBYTE(v89) < 0)
            operator delete(v87);
          if (SHIBYTE(v97) < 0)
            operator delete(v95);
        }
        else
        {
          sub_22E8FCA40((_QWORD *)a1, v11, 0x17C3u, 0, (uint64_t)&v100);
        }
        sub_22E903BEC(&v100);
      }
    }
    v34 = (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
    v35 = (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL);
    v36 = sub_22EFFEB40(v35);
    if (*v36 == 154)
    {
      v37 = v36;
      v38 = v34;
    }
    else
    {
      v39 = sub_22EFFEB40(v34);
      v37 = *v39 == 154 ? v39 : 0;
      v38 = v35;
    }
    if (v37)
    {
      if (v38)
      {
        v40 = *(_QWORD *)(*((_QWORD *)v38 + 1) & 0xFFFFFFFFFFFFFFF0);
        v41 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v41 == 39 || v41 == 32)
        {
          v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(v40) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v42
            && *(_DWORD *)(v42 + 16) == 11
            && ((*(_DWORD *)(v42 + 16) >> 19) & 0x1FFu) - 167 <= 0xD
            && ((1 << ((*(_DWORD *)(v42 + 16) >> 19) + 89)) & 0x383F) != 0)
          {
            v74 = *(_QWORD *)(a1 + 88);
            sub_22F0D5A50((uint64_t)v34);
            v46 = v45;
            sub_22F0D60E4((uint64_t)v35);
            v99 = __PAIR64__(v47, v46);
            v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v37 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v49 = *(_DWORD *)(v48 + 16);
            if (v48)
              v50 = v49 == 11;
            else
              v50 = 0;
            if (v50)
            {
              v52 = ((v49 >> 19) & 0x1FF) - 167 > 0xD || ((1 << ((v49 >> 19) + 89)) & 0x383F) == 0;
              if (!v52 || ((v49 >> 19) & 0x1FE) - 166 >= 0x14)
                goto LABEL_77;
            }
            else if (v48 && v49 == 44)
            {
              v51 = sub_22F114198(*(_QWORD *)(v48 + 24));
              if ((*(_BYTE *)(v51 + 74) & 1) == 0 && *(_QWORD *)(v51 + 128) <= 7uLL
                || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v48 + 24)) + 76) & 0x80) != 0)
              {
                goto LABEL_77;
              }
            }
            else if (v49 != 9)
            {
              goto LABEL_77;
            }
            v53 = sub_22EF5CDF0(v74, *(_QWORD *)(*(_QWORD *)(v74 + 16408) & 0xFFFFFFFFFFFFFFF0));
            if ((v53 & 0xFFFFFFC0) != 0 || 0xFFFFFFFFFFFFFFFFLL >> -(char)v53 >= *((unsigned int *)v37 + 4))
            {
              sub_22E8FCA40((_QWORD *)a1, v11, 0x1B5Du, 0, (uint64_t)&v100);
              v73 = sub_22E8906A0((uint64_t)&v100, (uint64_t *)&v99);
              sub_22E8901B8(v73, (uint64_t *)(v74 + 16408));
              goto LABEL_78;
            }
LABEL_77:
            sub_22E8FCA40((_QWORD *)a1, v11, 0x1B5Du, 0, (uint64_t)&v100);
            v54 = sub_22E8906A0((uint64_t)&v100, (uint64_t *)&v99);
            v91 = *((_QWORD *)v37 + 1);
            sub_22E8901B8(v54, (uint64_t *)&v91);
LABEL_78:
            sub_22E903BEC(&v100);
            if (*sub_22EFFEB40(v35) == 154)
            {
              sub_22F0D60E4((uint64_t)v35);
              v56 = sub_22F141A3C(v55, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
              sub_22E8FCA40((_QWORD *)a1, v11, 0x17C3u, 0, (uint64_t)&v100);
              sub_22F0D5A50((uint64_t)v34);
              v93 = 0;
              v94 = 0;
              v96 = 0;
              v97 = 0x100000000000000;
              v91 = v57 | ((unint64_t)v57 << 32);
              v92 = 0;
              v95 = (void *)38;
              v98 = 0;
              v58 = sub_22E890748((uint64_t)&v100, &v91);
              v86 = 0;
              v85 = 0;
              v88 = 0;
              v89 = 0x100000000000000;
              v90 = 0;
              v83 = v11 | (v11 << 32);
              v84 = 1;
              v87 = (void *)91;
              v59 = sub_22E890748(v58, &v83);
              v78 = 0;
              v77 = 0;
              v80 = 0;
              v81 = 0x100000000000000;
              v75 = v56 | ((unint64_t)v56 << 32);
              v76 = 0;
              __p = (void *)93;
              v82 = 0;
              sub_22E890748(v59, &v75);
              if (SHIBYTE(v81) < 0)
                operator delete(__p);
              if (SHIBYTE(v89) < 0)
                operator delete(v87);
              if (SHIBYTE(v97) < 0)
                operator delete(v95);
            }
            else
            {
              sub_22E8FCA40((_QWORD *)a1, v11, 0x17C3u, 0, (uint64_t)&v100);
            }
            sub_22E903BEC(&v100);
          }
        }
      }
    }
  }
  if (v15 >= 0x10 && sub_22F110E9C(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0)))
  {
LABEL_5:
    if (a6)
      *a6 = v15;
    return v15;
  }
  v60 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  v61 = *a3 & 0xFFFFFFFFFFFFFFFELL;
  v62 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16);
  if (v62 == 32)
  {
    v63 = 1;
  }
  else if (v62 == 39)
  {
    v63 = 0;
  }
  else
  {
    v64 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    if (v64 == 32)
    {
      v65 = *a3 & 0xFFFFFFFFFFFFFFFELL;
      v63 = 1;
    }
    else
    {
      if (v64 != 39)
        goto LABEL_127;
      v63 = 0;
      v65 = *a3 & 0xFFFFFFFFFFFFFFFELL;
    }
    v61 = *a2 & 0xFFFFFFFFFFFFFFFELL;
    v60 = v65;
  }
  v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v67 = *(_DWORD *)(v66 + 16);
  if (v66)
    v68 = v67 == 11;
  else
    v68 = 0;
  if (v68)
  {
    if (((*(_DWORD *)(v66 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_109;
    goto LABEL_127;
  }
  if (!v66 || v67 != 44)
  {
    if (v67 == 9)
      goto LABEL_109;
LABEL_127:
    sub_22F32EE84((_QWORD *)a1, v11, a2, a3);
    return 0;
  }
  v69 = sub_22F114198(*(_QWORD *)(v66 + 24));
  if ((*(_BYTE *)(v69 + 74) & 1) == 0 && *(_QWORD *)(v69 + 128) <= 7uLL
    || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v66 + 24)) + 76) & 0x80) != 0)
  {
    goto LABEL_127;
  }
LABEL_109:
  v70 = sub_22EFFBBCC((unsigned __int8 *)v60);
  if (sub_22EFFBE1C((unint64_t)v70, *(_QWORD *)(a1 + 88), 2))
  {
    LOWORD(v100) = 0;
    v101 = 0;
    LODWORD(v102) = 0;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0
      || (*(_BYTE *)(v61 + 2) & 1) == 0
      && (!sub_22F00554C(v61, (uint64_t)&v100, *(_QWORD *)(a1 + 88), 0, 0) || sub_22E508590((uint64_t)v103, 0)))
    {
      v71 = sub_22EFFBA68(*(_QWORD *)(a1 + 88), 5, (unsigned __int8 *)v60, (unsigned __int8 *)v61);
      sub_22EB3C568(a1, v11, v60, v71);
    }
    if (v102 >= 2)
      sub_22EF53BC0(&v102);
  }
  if (!sub_22EB3C610(a1, v11, v60) || v63 && (sub_22EB3C73C((_QWORD *)a1, v11, v60) & 1) != 0)
    return 0;
  sub_22E98D734(a1, v60, (unsigned __int8 *)v61, 0, 1, 0);
  if (a6)
  {
    v72 = (unint64_t)sub_22EF6A3F8(*(_QWORD *)(a1 + 88), *a2 & 0xFFFFFFFFFFFFFFFELL);
    if (v72 <= 0xF)
    {
      v72 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
      if (sub_22F1124D8(*(_QWORD *)(v72 & 0xFFFFFFFFFFFFFFF0)))
        v72 = sub_22EF6A4D4(*(uint64_t **)(a1 + 88), v72);
    }
    *a6 = v72;
  }
  return *(_QWORD *)(v60 + 8);
}

unsigned int *sub_22EB3C568(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  unsigned int v13[24];

  if (a4)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x19DAu, 0, (uint64_t)v13);
    sub_22F0D4E74(a3);
    v12 = v6;
    v7 = v13;
  }
  else
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x1AE2u, 0, (uint64_t)v13);
    v11 = (**(_DWORD **)(a1 + 72) >> 8) & 1;
    v8 = sub_22E89519C((uint64_t)v13, (unsigned int *)&v11);
    sub_22F0D4E74(a3);
    v12 = v9;
    v7 = (unsigned int *)v8;
  }
  sub_22E8906A0((uint64_t)v7, &v12);
  return sub_22E903BEC(v13);
}

uint64_t sub_22EB3C610(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  BOOL v11;

  v6 = (uint64_t *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v6;
  if (*v6)
    v8 = *(_BYTE *)(*v6 + 16) == 6;
  else
    v8 = 0;
  if (v8
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6 && (v7 = sub_22F10CF48(v7)) != 0)
  {
    v6 = (uint64_t *)(*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v9 != 39 && v9 != 32)
    return 1;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22F10ACF8(*v6) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v10)
    v11 = (*(_DWORD *)(v10 + 16) & 0xFF800FF) == 86507531;
  else
    v11 = 0;
  if (v11)
  {
    sub_22EB55660(a1, a2, a3);
    return (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0;
  }
  if (*(_DWORD *)(v10 + 16) - 25 <= 1)
  {
    sub_22EB556E0(a1, a2, a3);
    return (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0;
  }
  return sub_22EB55790(a1, a2, a3) ^ 1;
}

uint64_t sub_22EB3C73C(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11[24];

  v3 = a1[9];
  if (((1 << *(_DWORD *)(v3 + 400)) & 0xDD) == 0 && (*(_WORD *)(v3 + 148) & 0x20) == 0)
    return 0;
  sub_22E8FCA40(a1, a2, 0xA88u, 0, (uint64_t)v11);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v5 || *(_BYTE *)(v5 + 16) != 32)
    v5 = sub_22F10CF48(v5);
  v10 = *(_QWORD *)(v5 + 32);
  v6 = sub_22E8901B8((uint64_t)v11, &v10);
  sub_22F0D4E74(a3);
  v9 = v7;
  sub_22E8906A0(v6, &v9);
  sub_22E903BEC(v11);
  return 1;
}

uint64_t sub_22EB3C804(unsigned int *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unint64_t *a5)
{
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  int v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  _BOOL4 v37;
  int v38;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BOOL4 v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  BOOL v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  BOOL v79;
  unsigned __int8 *v80;
  int v81;
  unsigned __int8 *v82;
  int v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL4 v100;
  unint64_t v101;
  int v102;
  _QWORD v103[2];
  uint64_t v104;
  _QWORD v105[11];

  v105[9] = *MEMORY[0x24BDAC8D0];
  sub_22EB3B394(a1, a2, a3, a4, 0);
  v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 16);
  if ((v10 - 55) < 2
    || (v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                         + 16),
        (v11 - 55) <= 1))
  {
    v12 = sub_22EB36814(a1, a2, a3, a4, a5 != 0, (*(_QWORD *)(*((_QWORD *)a1 + 9) + 8) & 0x40000000000) != 0, (*(_QWORD *)(*((_QWORD *)a1 + 9) + 8) >> 43) & 1, (*(_QWORD *)(*((_QWORD *)a1 + 9) + 100) & 0x2000000000) != 0, 1);
LABEL_4:
    v13 = v12;
    goto LABEL_5;
  }
  if (v10 == 11)
  {
    v15 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) >> 19) & 0x1FF;
    if ((v15 - 48) < 0xC || v15 == 96)
      goto LABEL_13;
  }
  if (v11 == 11)
  {
    v16 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                             + 8) & 0xFFFFFFFFFFFFFFF0)
                     + 16) >> 19) & 0x1FF;
    if ((v16 - 48) >= 0xC && v16 != 96)
    {
      if (v10 != 29)
        goto LABEL_22;
LABEL_19:
      v12 = (uint64_t)sub_22EB3B570((uint64_t)a1, a2, a3, a4, a5 != 0);
      goto LABEL_4;
    }
LABEL_13:
    v12 = (uint64_t)sub_22EB3A8FC(a1, a2, a3, a4, a5 != 0, 0);
    goto LABEL_4;
  }
  if (v10 == 29 || v11 == 29)
    goto LABEL_19;
LABEL_22:
  v18 = sub_22EB1F050((uint64_t)a1, a2, a3, a4, 4 * (a5 != 0));
  v19 = *a2;
  if ((*a2 & 1) != 0 || (*(_BYTE *)a3 & 1) != 0)
    return 0;
  v13 = v18;
  if (v18 >= 0x10)
  {
    if (sub_22F110E9C(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0)))
    {
LABEL_5:
      if (a5)
        *a5 = v13;
      return v13;
    }
    v19 = *a2;
  }
  v20 = *(_QWORD *)(*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v21 != 39 && v21 != 32)
    goto LABEL_90;
  v22 = sub_22F10ACF8(v20);
  v23 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                + 16) == 32
    && (sub_22EB3C73C(a1, a4, v23) & 1) != 0)
  {
    return 0;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_DWORD *)(v24 + 16);
  if (v24)
    v26 = v25 == 11;
  else
    v26 = 0;
  if (v26)
  {
    if (((*(_DWORD *)(v24 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_46;
  }
  else if (v24 && v25 == 44)
  {
    v27 = sub_22F114198(*(_QWORD *)(v24 + 24));
    if ((*(_BYTE *)(v27 + 74) & 1) == 0 && *(_QWORD *)(v27 + 128) <= 7uLL
      || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v24 + 24)) + 76) & 0x80) != 0)
    {
LABEL_46:
      v29 = *(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v29 && *(_BYTE *)(v29 + 16) == 39
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
        && (v29 = sub_22F10CF48(v29)) != 0)
      {
        v30 = *(_QWORD *)(v29 + 32);
        if ((*(_BYTE *)(*((_QWORD *)a1 + 9) + 1) & 1) != 0)
        {
          v31 = *a2;
          v32 = *a3;
          if (*(_QWORD *)(*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
          {
            sub_22EB3D3B4(a1, a4, v31 & 0xFFFFFFFFFFFFFFFELL, v32 & 0xFFFFFFFFFFFFFFFELL);
            v31 = *a2;
            v32 = *a3;
          }
        }
        else
        {
          v79 = sub_22F36EDA0(*((_QWORD *)a1 + 11), *(_QWORD *)(*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0, 0);
          v31 = *a2;
          v32 = *a3;
          if (!v79)
          {
            sub_22EB3D3B4(a1, a4, v31 & 0xFFFFFFFFFFFFFFFELL, v32 & 0xFFFFFFFFFFFFFFFELL);
            return 0;
          }
        }
        v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
        v34 = *(_QWORD *)(*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
        v35 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        v37 = v35 == 39 || v35 == 32;
        v38 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 16);
        v40 = v38 == 39 || v38 == 32;
        if (!v37 && !v40)
          goto LABEL_139;
        v94 = v31 & 0xFFFFFFFFFFFFFFFELL;
        v95 = v32 & 0xFFFFFFFFFFFFFFFELL;
        v96 = 0;
        if (v35 == 39 || v35 == 32)
        {
          v41 = sub_22F10ACF8(v34);
          v33 = v95;
          v96 = v41;
        }
        v93 = v30;
        if (v38 == 39 || v38 == 32)
          v42 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0));
        else
          v42 = 0;
        if (v37 && v40 && !sub_22E95F83C(&v96, v42))
        {
          sub_22E8FCA40(a1, a4, 0x1389u, 0, (uint64_t)v103);
          v101 = *(_QWORD *)(v94 + 8);
          v47 = sub_22E8901B8((uint64_t)v103, (uint64_t *)&v101);
          v99 = *(_QWORD *)(v95 + 8);
          v48 = sub_22E8901B8(v47, &v99);
          v102 = 1;
          v49 = sub_22E8900C4(v48, &v102);
          sub_22F0D4E74(v94);
          v98 = v50;
          v51 = sub_22E8906A0(v49, &v98);
          sub_22F0D4E74(v95);
          v97 = v52;
          sub_22E8906A0(v51, &v97);
          sub_22E903BEC((unsigned int *)v103);
          return 0;
        }
        if (v35 == 39 || v35 == 32)
        {
          v44 = 0;
          v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v96 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v45)
          {
            v46 = *(_DWORD *)(v45 + 16);
            if (v46 == 11)
              v44 = (v46 & 0xFF80000) == 86507520;
          }
        }
        else
        {
          v44 = 0;
        }
        if (v38 == 39 || v38 == 32)
        {
          v53 = 0;
          v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (v54)
          {
            v55 = *(_DWORD *)(v54 + 16);
            if (v55 == 11)
              v53 = (v55 & 0xFF80000) == 86507520;
          }
        }
        else
        {
          v53 = 0;
        }
        if (v44 || v53)
        {
          if (v53)
          {
            if (v44)
            {
              if ((**((_QWORD **)a1 + 9) & 0x100) != 0)
                v56 = 5005;
              else
                v56 = 5258;
              sub_22E8FCA40(a1, a4, v56, 0, (uint64_t)v103);
              LODWORD(v98) = 1;
              v57 = sub_22E8900C4((uint64_t)v103, (int *)&v98);
              sub_22F0D4E74(v94);
              v101 = v58;
              v59 = sub_22E8906A0(v57, (uint64_t *)&v101);
              sub_22F0D4E74(v95);
              v99 = v60;
              v61 = &v99;
LABEL_123:
              sub_22E8906A0(v59, v61);
              sub_22E903BEC((unsigned int *)v103);
              goto LABEL_138;
            }
            v63 = (uint64_t)a1;
            v64 = a4;
            v65 = v95;
          }
          else
          {
            v63 = (uint64_t)a1;
            v64 = a4;
            v65 = v94;
          }
          sub_22EB55660(v63, v64, v65);
LABEL_138:
          v30 = v93;
          if ((**((_QWORD **)a1 + 9) & 0x100) == 0)
            goto LABEL_139;
          return 0;
        }
        v62 = (v35 == 39 || v35 == 32)
           && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v96 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                               + 16)
            - 25 < 2;
        if (v38 == 39 || v38 == 32)
        {
          v66 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 16)
              - 25;
          v67 = v66 >= 2;
          v68 = v66 < 2 || v62;
          if ((v68 & 1) != 0)
          {
            if (!v67)
            {
              if (v62)
              {
                if ((**((_QWORD **)a1 + 9) & 0x100) != 0)
                  v69 = 5004;
                else
                  v69 = 5256;
                sub_22E8FCA40(a1, a4, v69, 0, (uint64_t)v103);
                v102 = 1;
                v70 = sub_22E8900C4((uint64_t)v103, &v102);
                v101 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v94 + 8) & 0xFFFFFFFFFFFFFFF0));
                v71 = sub_22E8901B8(v70, (uint64_t *)&v101);
                v100 = *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v94 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v95 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                v72 = sub_22E89519C(v71, (unsigned int *)&v100);
                v99 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(v95 + 8) & 0xFFFFFFFFFFFFFFF0));
                v73 = sub_22E8901B8(v72, &v99);
                sub_22F0D4E74(v94);
                v98 = v74;
                v59 = sub_22E8906A0(v73, &v98);
                sub_22F0D4E74(v95);
                v97 = v75;
                v61 = &v97;
                goto LABEL_123;
              }
              v76 = (uint64_t)a1;
              v77 = a4;
              v78 = v95;
              goto LABEL_126;
            }
LABEL_125:
            v76 = (uint64_t)a1;
            v77 = a4;
            v78 = v94;
LABEL_126:
            sub_22EB556E0(v76, v77, v78);
            goto LABEL_138;
          }
        }
        else if (v62)
        {
          goto LABEL_125;
        }
        if ((v35 != 39 && v35 != 32 || (sub_22EB55790((uint64_t)a1, a4, v94) & 1) == 0)
          && (v38 != 39 && v38 != 32 || (sub_22EB55790((uint64_t)a1, a4, v95) & 1) == 0))
        {
          v30 = v93;
LABEL_139:
          v80 = sub_22EFFBBCC((unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
          v81 = sub_22EFFBE1C((unint64_t)v80, *((_QWORD *)a1 + 11), 2);
          v82 = sub_22EFFBBCC((unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
          v83 = sub_22EFFBE1C((unint64_t)v82, *((_QWORD *)a1 + 11), 2);
          v84 = v83;
          if (v81)
            sub_22EB3D45C(a1, a4, *a2 & 0xFFFFFFFFFFFFFFFELL, v83 != 0);
          if (v84)
            sub_22EB3D45C(a1, a4, *a3 & 0xFFFFFFFFFFFFFFFELL, v81 != 0);
          v85 = v30 & 0xFFFFFFFFFFFFFFF0;
          v86 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
          v87 = *(_QWORD *)(*(_QWORD *)(v86 + 8) & 0xFFFFFFFFFFFFFFF0);
          if ((!v87 || (*(_DWORD *)(v87 + 16) & 0xFF800FF) != 0x528000B)
            && *(_DWORD *)(v87 + 16) - 25 >= 2)
          {
            sub_22EF5CCD0(*((_QWORD *)a1 + 11), v86, (uint64_t)v103);
            if (!v103[0])
            {
              sub_22E8FCA40(a1, a4, 0x1B66u, 0, (uint64_t)v103);
              v88 = *(_QWORD *)v85;
              if ((*(_BYTE *)(*(_QWORD *)v85 + 8) & 0xF) != 0)
                v88 = (unint64_t)sub_22F10D2BC(v30);
              v101 = v88 & 0xFFFFFFFFFFFFFFF0;
              v89 = sub_22E8901B8((uint64_t)v103, (uint64_t *)&v101);
              sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
              v99 = v90;
              v91 = sub_22E8906A0(v89, &v99);
              sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
              v98 = v92;
              sub_22E8906A0(v91, &v98);
              sub_22E903BEC((unsigned int *)v103);
            }
          }
          if (a5)
            *a5 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
          return sub_22EF5B0AC(*((_QWORD *)a1 + 11), *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 11) + 15088)+ *(_QWORD *)(**(_QWORD **)(*((_QWORD *)a1 + 11) + 15088) - 24)+ 120));
        }
        return 0;
      }
LABEL_90:
      sub_22F32EE84(a1, a4, a2, a3);
      return 0;
    }
  }
  else if (v25 != 9)
  {
    goto LABEL_46;
  }
  v28 = sub_22EFFBBCC((unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
  if (sub_22EFFBE1C((unint64_t)v28, *((_QWORD *)a1 + 11), 2))
  {
    LOWORD(v103[0]) = 0;
    v103[1] = 0;
    LODWORD(v104) = 0;
    if ((*(_BYTE *)(*((_QWORD *)a1 + 9) + 1) & 1) == 0
      || (v43 = *a3 & 0xFFFFFFFFFFFFFFFELL, (*(_BYTE *)(v43 + 2) & 1) == 0)
      && (!sub_22F00554C(v43, (uint64_t)v103, *((_QWORD *)a1 + 11), 0, 0) || sub_22E508590((uint64_t)v105, 0)))
    {
      sub_22EB3C568((uint64_t)a1, a4, *a2 & 0xFFFFFFFFFFFFFFFELL, 0);
    }
    if (v104 >= 2)
      sub_22EF53BC0(&v104);
  }
  if (!sub_22EB3C610((uint64_t)a1, a4, *a2 & 0xFFFFFFFFFFFFFFFELL))
    return 0;
  sub_22E98D734((uint64_t)a1, *a2 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL), 0, 1, 1);
  if (a5)
    *a5 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  return *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
}

unsigned int *sub_22EB3D3B4(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16[24];

  sub_22E8FCA40(a1, a2, 0x1392u, 0, (uint64_t)v16);
  v15 = *(_QWORD *)(a3 + 8);
  v6 = sub_22E8901B8((uint64_t)v16, &v15);
  v14 = *(_QWORD *)(a4 + 8);
  v7 = sub_22E8901B8(v6, &v14);
  sub_22F0D4E74(a3);
  v13 = v8;
  v9 = sub_22E8906A0(v7, &v13);
  sub_22F0D4E74(a4);
  v12 = v10;
  sub_22E8906A0(v9, &v12);
  return sub_22E903BEC(v16);
}

unsigned int *sub_22EB3D45C(unsigned int *result, unsigned int a2, uint64_t a3, int a4)
{
  unsigned int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11[24];

  v5 = result;
  if (!a4 || (*(_BYTE *)(*((_QWORD *)result + 9) + 1) & 1) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 13) + 128) + 24) & 0x10) != 0)
    {
      v6 = a2;
      result = (unsigned int *)sub_22E90086C(*((_QWORD **)result + 14), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = a2;
    }
    sub_22E8FCA40(v5, v6, 0x1AE5u, 0, (uint64_t)v11);
    v10 = (**((_DWORD **)v5 + 9) >> 8) & 1;
    v7 = sub_22E89519C((uint64_t)v11, (unsigned int *)&v10);
    sub_22F0D4E74(a3);
    v9 = v8;
    sub_22E8906A0(v7, &v9);
    return sub_22E903BEC(v11);
  }
  return result;
}

void *sub_22EB3D520(_QWORD *a1, uint64_t *a2, uint64_t *a3, int a4, int a5, int a6)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  int v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  unsigned int v111;
  BOOL v112;
  uint64_t v113;
  unint64_t v115;
  BOOL v116;
  int v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  BOOL v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  uint64_t v127;
  BOOL v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  _QWORD *v142;
  int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  unint64_t v177;
  void **v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t **v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  int v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206[2];
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t **v211;
  unsigned int v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t **v217;
  unsigned int v218;
  uint64_t **v219;
  unsigned int v220;
  uint64_t v221;
  unsigned int v222;
  char v223;
  uint64_t **v224;
  unsigned int v225;
  uint64_t **v226;
  unsigned int v227;
  char v228;
  unint64_t v229;
  void *v230;
  __int128 v231;
  _BYTE v232[40];
  uint64_t v233[2];
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  char v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  char v243;
  uint64_t v244;

  v244 = *MEMORY[0x24BDAC8D0];
  sub_22EB3B394(a1, a2, a3, a4, 0);
  v12 = *a2;
  v13 = (_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
  v14 = *(_QWORD *)(v13[1] & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v15 - 55) >= 2)
  {
    v16 = (_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFFELL);
    v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                     + 16);
    if ((v17 - 55) > 1)
    {
      if (v15 != 11
        || (v52 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) >> 19) & 0x1FF,
            (v52 - 48) >= 0xC)
        && v52 != 96)
      {
        if (v17 != 11
          || (v53 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16) >> 19) & 0x1FF,
              (v53 - 48) >= 0xC)
          && v53 != 96)
        {
          v106 = sub_22EB1B998((uint64_t)a1, v13);
          *a2 = v106;
          if ((v106 & 1) != 0)
            return 0;
          v27 = *(_QWORD *)((v106 & 0xFFFFFFFFFFFFFFFELL) + 8);
          if (a6)
            *a2 = v12;
          v107 = sub_22EB1B998((uint64_t)a1, (void *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
          *a3 = v107;
          if ((v107 & 1) != 0)
            return 0;
          v108 = *(_QWORD *)((v107 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v109 = (uint64_t *)(v27 & 0xFFFFFFFFFFFFFFF0);
          v110 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v111 = *(_DWORD *)(v110 + 16);
          if (v110)
            v112 = v111 == 11;
          else
            v112 = 0;
          if ((!v112 || ((v111 >> 19) & 0x1FE) - 186 >= 0x18) && v111 != 9)
          {
            if (v111 != 44)
            {
              if (v111 == 11 && ((v111 >> 19) & 0x1FE) - 166 < 0x14)
                goto LABEL_199;
LABEL_198:
              if (!sub_22F1105F0(*v109))
                goto LABEL_211;
              goto LABEL_199;
            }
            v131 = sub_22F114198(*(_QWORD *)(v110 + 24));
            if ((*(_BYTE *)(v131 + 74) & 1) == 0 && *(_QWORD *)(v131 + 128) < 8uLL
              || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v110 + 24)) + 76) & 0x80) != 0)
            {
              goto LABEL_198;
            }
          }
LABEL_199:
          v132 = (uint64_t *)(v108 & 0xFFFFFFFFFFFFFFF0);
          if ((sub_22F1105F0(*v132) & 1) != 0)
          {
            v133 = *(_QWORD *)(*(_QWORD *)(*v109 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v133
              || *(_BYTE *)(v133 + 16) != 44
              || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v133 + 24)) + 76) & 0x80) == 0)
            {
              v134 = *(_QWORD *)(*(_QWORD *)(*v132 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v134
                || *(_BYTE *)(v134 + 16) != 44
                || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v134 + 24)) + 76) & 0x80) == 0)
              {
                v229 = v27;
                if ((*(_DWORD *)(a1[9] + 52) & 0x40000000) == 0)
                {
                  LOWORD(v238) = 0;
                  v239 = 0;
                  LODWORD(v240) = 0;
                  v135 = *a3 & 0xFFFFFFFFFFFFFFFELL;
                  if ((*(_BYTE *)(v135 + 2) & 1) == 0)
                  {
                    v136 = a4;
                    if (sub_22F00554C(v135, (uint64_t)&v238, a1[11], 0, 0))
                    {
                      v227 = v242;
                      if (v242 > 0x40)
                        llvm::APInt::initSlowCase((llvm::APInt *)&v226, (const llvm::APInt *)&v241);
                      else
                        v226 = (uint64_t **)v241;
                      v228 = v243;
                      if (v243)
                        goto LABEL_214;
                      v147 = v227 - 1;
                      v148 = (uint64_t *)&v226;
                      if (v227 >= 0x41)
                        v148 = (uint64_t *)&v226[v147 >> 6];
                      if ((((unint64_t)*v148 >> v147) & 1) == 0)
                      {
LABEL_214:
                        v137 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
                        v138 = sub_22EF5CDF0(a1[11], *(_QWORD *)(v137 & 0xFFFFFFFFFFFFFFF0));
                        v139 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v137 & 0xFFFFFFFFFFFFFFF0)
                                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                                          + 16);
                        if (v139 == 11)
                        {
                          if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v137 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                           + 16) >> 19) & 0x1FEu)
                             - 186 <= 0x17)
                          {
                            v156 = sub_22EF74318(a1[11], v137);
                            v138 = (v156 >> 31) + (unsigned __int16)v156;
                          }
                        }
                        else if (v139 == 9)
                        {
                          v138 = sub_22EF6A330(a1[11], v137);
                        }
                        v225 = v227;
                        if (v227 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v224);
                        }
                        else
                        {
                          if (v227)
                            v157 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v227;
                          else
                            v157 = 0;
                          v224 = (uint64_t **)(v157 & v138);
                        }
                        if ((llvm::APInt::compare((llvm::APInt *)&v226, (const llvm::APInt *)&v224) & 0x80000000) != 0)
                        {
                          if (a5 == 7)
                          {
                            v165 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v137 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                            if (!v165
                              || (v166 = *(_DWORD *)(v165 + 16), v166 != 11)
                              || ((v166 >> 19) & 0x1FE) - 186 >= 0x18)
                            {
                              LOWORD(v233[0]) = 0;
                              v233[1] = 0;
                              LODWORD(v234) = 0;
                              if ((*(_BYTE *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 2) & 1) == 0
                                && !sub_22F110D38(*(_QWORD *)(v229 & 0xFFFFFFFFFFFFFFF0))
                                && sub_22F00554C(*a2 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v233, a1[11], 0, 0))
                              {
                                v222 = v236;
                                if (v236 > 0x40)
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v221, (const llvm::APInt *)&v235);
                                else
                                  v221 = v235;
                                v223 = v237;
                                if (v237)
                                  goto LABEL_268;
                                v171 = v222 - 1;
                                v172 = &v221;
                                if (v222 >= 0x41)
                                  v172 = (uint64_t *)(v221 + 8 * (v171 >> 6));
                                if ((((unint64_t)*v172 >> v171) & 1) == 0
                                  || (v173 = a1[9], (*(_WORD *)(v173 + 248) & 0xC00) == 0x400)
                                  || (*(_BYTE *)(v173 + 1) & 0x10) != 0)
                                {
LABEL_268:
                                  v218 = v227;
                                  if (v227 > 0x40)
                                    llvm::APInt::initSlowCase((llvm::APInt *)&v217, (const llvm::APInt *)&v226);
                                  else
                                    v217 = v226;
                                  sub_22E99C40C((llvm::APInt *)&v221);
                                  llvm::APInt::operator+=();
                                  v170 = v218;
                                  v220 = v218;
                                  v219 = v217;
                                  v218 = 0;
                                  if ((llvm::APInt::compare((llvm::APInt *)&v224, (const llvm::APInt *)&v219) & 0x80000000) != 0)
                                  {
                                    sub_22E5FA634(&v219, 0xFFFFFFFFFFFFFFFFLL);
                                    sub_22E46361C((llvm::APInt *)&v221, (uint64_t)&v215);
                                    v214 = v216;
                                    if (v216 > 0x40)
                                      llvm::APInt::initSlowCase((llvm::APInt *)&v213, (const llvm::APInt *)&v215);
                                    else
                                      v213 = v215;
                                    llvm::APInt::operator<<=();
                                    if (v216 >= 0x41 && v215)
                                      MEMORY[0x2348A0E84](v215, 0x1000C8000313F17);
                                    v215 = v213;
                                    v216 = v214;
                                    v214 = 0;
                                    v230 = v232;
                                    v231 = xmmword_22F455490;
                                    llvm::APInt::toString();
                                    v212 = v220;
                                    if (v220 > 0x40)
                                      llvm::APInt::initSlowCase((llvm::APInt *)&v211, (const llvm::APInt *)&v219);
                                    else
                                      v211 = v219;
                                    llvm::APInt::operator-=();
                                    v181 = v212;
                                    LODWORD(v209) = v212;
                                    v182 = v211;
                                    v208 = (unint64_t)v211;
                                    v212 = 0;
                                    if (v225 > 0x40)
                                      v183 = llvm::APInt::equalSlowCase((llvm::APInt *)&v224, (const llvm::APInt *)&v208);
                                    else
                                      v183 = v224 == v211;
                                    if (v181 >= 0x41)
                                    {
                                      if (v182)
                                      {
                                        MEMORY[0x2348A0E84](v182, 0x1000C8000313F17);
                                        if (v212 >= 0x41)
                                        {
                                          if (v211)
                                            MEMORY[0x2348A0E84](v211, 0x1000C8000313F17);
                                        }
                                      }
                                    }
                                    if (v183)
                                    {
                                      sub_22E8FCA40(a1, v136, 0x1B49u, 0, (uint64_t)&v208);
                                      sub_22F330724((uint64_t)&v208, (uint64_t)&v230);
                                      v184 = sub_22E8901B8((uint64_t)&v208, (uint64_t *)&v229);
                                      sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
                                      v206[0] = v185;
                                      v186 = sub_22E8906A0(v184, v206);
                                      sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
                                      v207 = v187;
                                      v188 = &v207;
                                    }
                                    else
                                    {
                                      sub_22E8FCA40(a1, v136, 0x1B48u, 0, (uint64_t)&v208);
                                      v206[0] = (uint64_t)v230;
                                      v206[1] = v231;
                                      v189 = sub_22F2F2210((uint64_t)&v208, (uint64_t)v206);
                                      v190 = v216;
                                      v205 = v190 - sub_22E99C40C((llvm::APInt *)&v215) + 1;
                                      v191 = sub_22E89519C(v189, &v205);
                                      v192 = sub_22E8901B8(v191, (uint64_t *)&v229);
                                      v204 = v222;
                                      v193 = sub_22E89519C(v192, &v204);
                                      sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
                                      v207 = v194;
                                      v186 = sub_22E8906A0(v193, &v207);
                                      sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
                                      v203 = v195;
                                      v188 = &v203;
                                    }
                                    sub_22E8906A0(v186, v188);
                                    sub_22E903BEC((unsigned int *)&v208);
                                    if (v230 != v232)
                                      free(v230);
                                    if (v216 >= 0x41 && v215)
                                      MEMORY[0x2348A0E84](v215, 0x1000C8000313F17);
                                    v170 = v220;
                                  }
                                  if (v170 >= 0x41 && v219)
                                    MEMORY[0x2348A0E84](v219, 0x1000C8000313F17);
                                }
                                else
                                {
                                  v174 = *a2;
                                  v175 = a1[11] + 2128;
                                  v209 = v175;
                                  v210 = 6982;
                                  v176 = (void *)(v174 & 0xFFFFFFFFFFFFFFFELL);
                                  v177 = (v174 & 0xFFFFFFFFFFFFFFFELL) != 0;
                                  if ((v174 & 0xFFFFFFFFFFFFFFFELL) != 0)
                                    v178 = &v230;
                                  else
                                    v178 = 0;
                                  sub_22F0D4E74((uint64_t)v176);
                                  v180 = v179;
                                  v208 = sub_22E3B8AAC(v175);
                                  sub_22E4D6448(v208 + 336, v180, 1);
                                  v230 = v176;
                                  sub_22EB52944((uint64_t)a1, a4, v178, v177, (uint64_t *)&v208);
                                  if (v208 && v209)
                                    sub_22E3BB10C(v209, v208);
                                }
                                if (v222 >= 0x41 && v221)
                                  MEMORY[0x2348A0E84](v221, 0x1000C8000313F17);
                              }
                              if (v234 >= 2)
                                sub_22EF53BC0(&v234);
                            }
                          }
                        }
                        else
                        {
                          v158 = *a3;
                          v159 = a1[11] + 2128;
                          v209 = v159;
                          v210 = 6981;
                          v160 = v158 & 0xFFFFFFFFFFFFFFFELL;
                          v161 = (v158 & 0xFFFFFFFFFFFFFFFELL) != 0;
                          if ((v158 & 0xFFFFFFFFFFFFFFFELL) != 0)
                            v162 = v233;
                          else
                            v162 = 0;
                          sub_22F0D4E74(v160);
                          v164 = v163;
                          v208 = sub_22E3B8AAC(v159);
                          sub_22E4D6448(v208 + 336, v164, 1);
                          v233[0] = v160;
                          sub_22EB52944((uint64_t)a1, a4, v162, v161, (uint64_t *)&v208);
                          if (v208 && v209)
                            sub_22E3BB10C(v209, v208);
                        }
                        if (v225 >= 0x41 && v224)
                          MEMORY[0x2348A0E84](v224, 0x1000C8000313F17);
                      }
                      else
                      {
                        v149 = *a3;
                        v150 = a1[11] + 2128;
                        v209 = v150;
                        v210 = 6983;
                        v151 = v149 & 0xFFFFFFFFFFFFFFFELL;
                        v152 = (v149 & 0xFFFFFFFFFFFFFFFELL) != 0;
                        if ((v149 & 0xFFFFFFFFFFFFFFFELL) != 0)
                          v153 = v233;
                        else
                          v153 = 0;
                        sub_22F0D4E74(v151);
                        v155 = v154;
                        v208 = sub_22E3B8AAC(v150);
                        sub_22E4D6448(v208 + 336, v155, 1);
                        v233[0] = v151;
                        sub_22EB52944((uint64_t)a1, a4, v153, v152, (uint64_t *)&v208);
                        if (v208 && v209)
                          sub_22E3BB10C(v209, v208);
                      }
                      if (v227 >= 0x41 && v226)
                        MEMORY[0x2348A0E84](v226, 0x1000C8000313F17);
                    }
                  }
                  if (v240 >= 2)
                    sub_22EF53BC0(&v240);
                }
                return (void *)v27;
              }
            }
          }
LABEL_211:
          sub_22F32EE84(a1, a4, a2, a3);
          return 0;
        }
      }
      if ((a6 & 1) == 0)
      {
        v54 = sub_22EB1B998((uint64_t)a1, v13);
        *a2 = v54;
        if ((v54 & 1) != 0)
          return 0;
        v16 = (_QWORD *)(*a3 & 0xFFFFFFFFFFFFFFFELL);
      }
      v55 = sub_22EB1B998((uint64_t)a1, v16);
      *a3 = v55;
      if ((v55 & 1) == 0)
      {
        v56 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
        v233[0] = v56;
        v57 = v56 & 0xFFFFFFFFFFFFFFF0;
        v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v59 = *(_DWORD *)(v58 + 16);
        if (v59 == 11)
          v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        else
          v60 = 0;
        if (v58)
          v61 = v59 == 11;
        else
          v61 = 0;
        if (v61)
        {
          v62 = (*(_DWORD *)(v58 + 16) >> 19) & 0x1FF;
          if ((v62 - 48) < 0xC || v62 == 96)
          {
            v56 = sub_22F1113D8(v60, a1[11]);
            v55 = *a3;
          }
        }
        v63 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFFFELL) + 8);
        v230 = (void *)v63;
        v64 = v63 & 0xFFFFFFFFFFFFFFF0;
        v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v66 = *(_DWORD *)(v65 + 16);
        if (v66 == 11)
          v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        else
          v67 = 0;
        if (v65)
          v68 = v66 == 11;
        else
          v68 = 0;
        if (v68)
        {
          v69 = (*(_DWORD *)(v65 + 16) >> 19) & 0x1FF;
          if ((v69 - 48) < 0xC || v69 == 96)
          {
            v70 = v67;
            v71 = sub_22F1113D8(v67, a1[11]);
            v67 = v70;
            v63 = v71;
          }
        }
        if (v60 && (*(_DWORD *)(v60 + 16) & 0xFF80000) == 0x3000000
          || v67 && (*(_DWORD *)(v67 + 16) & 0xFF80000) == 0x3000000)
        {
          sub_22E8FCA40(a1, a4, 0x1376u, 0, (uint64_t)&v208);
          v72 = sub_22E8901B8((uint64_t)&v208, v233);
          v73 = sub_22E8901B8(v72, (uint64_t *)&v230);
          sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
          v238 = v74;
          v50 = &v238;
LABEL_156:
          v51 = v73;
          goto LABEL_157;
        }
        v202 = a4;
        v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v83 = *(_DWORD *)(v82 + 16);
        if (v82)
          v84 = v83 == 11;
        else
          v84 = 0;
        if (v84)
        {
          if (((*(_DWORD *)(v82 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
            goto LABEL_122;
        }
        else
        {
          if (v82 && v83 == 44)
          {
            v199 = v67;
            v85 = sub_22F114198(*(_QWORD *)(v82 + 24));
            if ((*(_BYTE *)(v85 + 74) & 1) == 0 && *(_QWORD *)(v85 + 128) <= 7uLL)
              goto LABEL_155;
            v86 = sub_22F114198(*(_QWORD *)(v82 + 24));
            v67 = v199;
            if ((*(_BYTE *)(v86 + 76) & 0x80) != 0)
              goto LABEL_155;
LABEL_122:
            v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v101 = *(_DWORD *)(v100 + 16);
            if (v100)
              v102 = v101 == 11;
            else
              v102 = 0;
            if (v102)
            {
              if (((*(_DWORD *)(v100 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
                goto LABEL_161;
            }
            else
            {
              if (v100 && v101 == 44)
              {
                v200 = v67;
                v103 = sub_22F114198(*(_QWORD *)(v100 + 24));
                if ((*(_BYTE *)(v103 + 74) & 1) == 0 && *(_QWORD *)(v103 + 128) <= 7uLL)
                  goto LABEL_174;
                v104 = sub_22F114198(*(_QWORD *)(v100 + 24));
                v67 = v200;
                if ((*(_BYTE *)(v104 + 76) & 0x80) != 0)
                  goto LABEL_174;
LABEL_161:
                v115 = *(_QWORD *)(*(_QWORD *)v57 + 8) & 0xFFFFFFFFFFFFFFF0;
                if (*(_QWORD *)v115)
                  v116 = *(_DWORD *)(*(_QWORD *)v115 + 16) == 11;
                else
                  v116 = 0;
                if (v116
                  && ((v119 = (*(_DWORD *)(*(_QWORD *)v115 + 16) >> 19) & 0x1FF, (v119 - 48) < 0xC)
                   || v119 == 96))
                {
                  v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v64 + 8) & 0xFFFFFFFFFFFFFFF0);
                  if (v120)
                    v121 = *(_DWORD *)(v120 + 16) == 11;
                  else
                    v121 = 0;
                  v117 = v202;
                  if (v121)
                  {
                    v122 = (*(_DWORD *)(v120 + 16) >> 19) & 0x1FF;
                    if ((v122 - 48) < 0xC || v122 == 96)
                    {
                      v123 = v67;
                      sub_22F36AD2C(a1[11], v60);
                      sub_22F36AD2C(a1[11], v123);
                      if (v209 != v239)
                      {
                        v142 = a1;
                        v143 = v202;
                        v144 = 4982;
                        goto LABEL_221;
                      }
                      v115 = *(_QWORD *)(*(_QWORD *)(v233[0] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
                      v67 = v123;
                    }
                  }
                }
                else
                {
                  v117 = v202;
                }
                v124 = *(_QWORD *)v115;
                if (!v124
                  || (v125 = *(_DWORD *)(v124 + 16), v125 != 11)
                  || (v126 = (v125 >> 19) & 0x1FF, (v126 - 48) >= 0xC) && v126 != 96)
                {
                  if (a6)
                    return v230;
                  if (v56 != v63)
                  {
                    v167 = v67;
                    v168 = sub_22E90092C((uint64_t)a1, *a2 & 0xFFFFFFFFFFFFFFFELL, v63, 30, 0, 0);
                    v67 = v167;
                    *a2 = v168;
                    v56 = v63;
                  }
                  sub_22F36AD2C(a1[11], v67);
                  v169 = sub_22EF60B50(a1[11], v56, v209);
                  *a2 = sub_22E90092C((uint64_t)a1, *a2 & 0xFFFFFFFFFFFFFFFELL, v169, 27, 0, 0);
                  v233[0] = v169;
                  return (void *)v233[0];
                }
                if (!v67
                  || ((v127 = *(_QWORD *)(*(_QWORD *)(v67 + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
                    ? (v128 = *(_DWORD *)(v127 + 16) == 11)
                    : (v128 = 0),
                      !v128
                   || (v140 = (*(_DWORD *)(v127 + 16) >> 19) & 0x1FF, (v140 - 48) >= 0xC) && v140 != 96))
                {
                  sub_22F36AD2C(a1[11], v60);
                  v129 = v209;
                  if (v56 != v63)
                    *a3 = sub_22E90092C((uint64_t)a1, *a3 & 0xFFFFFFFFFFFFFFFELL, v56, 30, 0, 0);
                  v130 = sub_22EF60B50(a1[11], v56, v129);
                  *a3 = sub_22E90092C((uint64_t)a1, *a3 & 0xFFFFFFFFFFFFFFFELL, v130, 27, 0, 0);
                  return (void *)v233[0];
                }
                v141 = sub_22EF5CDF0(a1[11], v67);
                if (v141 == sub_22EF5CDF0(a1[11], v60))
                  return (void *)v233[0];
                v142 = a1;
                v143 = v117;
                v144 = 5017;
LABEL_221:
                sub_22E8FCA40(v142, v143, v144, 0, (uint64_t)&v208);
                v145 = sub_22E8901B8((uint64_t)&v208, v233);
                v44 = sub_22E8901B8(v145, (uint64_t *)&v230);
                sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
                v238 = v146;
                v46 = &v238;
                goto LABEL_44;
              }
              if (v101 == 9)
                goto LABEL_161;
            }
LABEL_174:
            sub_22E8FCA40(a1, v202, 0x1366u, 0, (uint64_t)&v208);
            v238 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
            v47 = sub_22E8901B8((uint64_t)&v208, &v238);
            goto LABEL_45;
          }
          if (v83 == 9)
            goto LABEL_122;
        }
LABEL_155:
        sub_22E8FCA40(a1, v202, 0x1366u, 0, (uint64_t)&v208);
        v238 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
        v73 = sub_22E8901B8((uint64_t)&v208, &v238);
        sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
        v226 = (uint64_t **)v113;
        v50 = (uint64_t *)&v226;
        goto LABEL_156;
      }
      return 0;
    }
  }
  if ((*(_QWORD *)(a1[9] + 8) & 0x80000000000) != 0)
  {
    v18 = sub_22E3E4B64(v14);
    if (v18)
    {
      if ((*(_DWORD *)(v18 + 16) & 0x780000) == 0x200000)
        goto LABEL_211;
    }
    v19 = sub_22E3E4B64(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0));
    if (v19)
    {
      if ((*(_DWORD *)(v19 + 16) & 0x780000) == 0x200000)
        goto LABEL_211;
    }
  }
  v20 = a1[9];
  if (((*(_DWORD *)(v20 + 52) & 0x40000000) != 0
     || (*(_QWORD *)(v20 + 8) & 0x80000000000) != 0
     || (*(_BYTE *)(v20 + 104) & 0x20) != 0)
    && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL)
                                                                                        + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 55 >= 2)
  {
    sub_22E8FCA40(a1, a4, 0x125Cu, 0, (uint64_t)&v208);
    v238 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v42 = sub_22E8901B8((uint64_t)&v208, &v238);
    v43 = *a2;
LABEL_43:
    v233[0] = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v44 = sub_22E8901B8(v42, v233);
    sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
    v230 = v45;
    v46 = (uint64_t *)&v230;
LABEL_44:
    v47 = sub_22E8906A0(v44, v46);
LABEL_45:
    v48 = v47;
    sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
    v226 = (uint64_t **)v49;
    v50 = (uint64_t *)&v226;
LABEL_46:
    v51 = v48;
LABEL_157:
    sub_22E8906A0(v51, v50);
    sub_22E903BEC((unsigned int *)&v208);
    return 0;
  }
  if ((a6 & 1) == 0)
  {
    v21 = sub_22EB1B998((uint64_t)a1, (void *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
    *a2 = v21;
    if ((v21 & 1) != 0)
      return 0;
  }
  v22 = sub_22EB1B998((uint64_t)a1, (void *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
  *a3 = v22;
  if ((v22 & 1) != 0)
    return 0;
  v23 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v24 = sub_22E3E4B64(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0));
  v25 = v24;
  v26 = v23;
  if (v24)
    v26 = *(_QWORD *)(v24 + 32);
  v27 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v28 = sub_22E3E4B64(*(_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF0));
  v29 = v28;
  v30 = v27;
  if (v28)
    v30 = *(_QWORD *)(v28 + 32);
  if ((*(_BYTE *)(a1[9] + 104) & 0x20) == 0)
  {
    if (v25
      && (v31 = *(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v31 + 16) == 56)
      && ((v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
        ? (v33 = (*(_DWORD *)(v32 + 16) & 0xFF800FF) == 87031819)
        : (v33 = 0),
          v33)
      || v28
      && (v34 = *(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0), *(_BYTE *)(v34 + 16) == 56)
      && ((v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
        ? (v36 = (*(_DWORD *)(v35 + 16) & 0xFF800FF) == 87031819)
        : (v36 = 0),
          v36))
    {
      sub_22E8FCA40(a1, a4, 0x1376u, 0, (uint64_t)&v208);
      v238 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v98 = sub_22E8901B8((uint64_t)&v208, &v238);
      v233[0] = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v73 = sub_22E8901B8(v98, v233);
      sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
      v230 = v99;
      v50 = (uint64_t *)&v230;
      goto LABEL_156;
    }
  }
  v201 = a4;
  v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v38 = *(_DWORD *)(v37 + 16);
  if (v37)
    v39 = v38 == 11;
  else
    v39 = 0;
  if (v39)
  {
    if (((*(_DWORD *)(v37 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_82;
    goto LABEL_93;
  }
  if (!v37 || v38 != 44)
  {
    if (v38 == 9)
      goto LABEL_82;
LABEL_93:
    sub_22E8FCA40(a1, v201, 0x1366u, 0, (uint64_t)&v208);
    v238 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v73 = sub_22E8901B8((uint64_t)&v208, &v238);
    sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
    v233[0] = v81;
    v50 = v233;
    goto LABEL_156;
  }
  v197 = v30;
  v40 = sub_22F114198(*(_QWORD *)(v37 + 24));
  if ((*(_BYTE *)(v40 + 74) & 1) == 0 && *(_QWORD *)(v40 + 128) <= 7uLL)
    goto LABEL_93;
  v41 = sub_22F114198(*(_QWORD *)(v37 + 24));
  v30 = v197;
  if ((*(_BYTE *)(v41 + 76) & 0x80) != 0)
    goto LABEL_93;
LABEL_82:
  v75 = v30 & 0xFFFFFFFFFFFFFFF0;
  v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v77 = *(_DWORD *)(v76 + 16);
  if (v76)
    v78 = v77 == 11;
  else
    v78 = 0;
  if (v78)
  {
    if (((*(_DWORD *)(v76 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
      goto LABEL_133;
  }
  else
  {
    if (v76 && v77 == 44)
    {
      v196 = v30 & 0xFFFFFFFFFFFFFFF0;
      v198 = v30;
      v79 = sub_22F114198(*(_QWORD *)(v76 + 24));
      if ((*(_BYTE *)(v79 + 74) & 1) == 0 && *(_QWORD *)(v79 + 128) <= 7uLL)
        goto LABEL_133;
      v80 = sub_22F114198(*(_QWORD *)(v76 + 24));
      v75 = v196;
      v30 = v198;
      if ((*(_BYTE *)(v80 + 76) & 0x80) != 0)
        goto LABEL_133;
      goto LABEL_105;
    }
    if (v77 != 9)
    {
LABEL_133:
      sub_22E8FCA40(a1, v201, 0x1366u, 0, (uint64_t)&v208);
      v238 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v48 = sub_22E8901B8((uint64_t)&v208, &v238);
      sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
      v233[0] = v105;
      v50 = v233;
      goto LABEL_46;
    }
  }
LABEL_105:
  if (v25)
  {
    v87 = *(unsigned int *)(v25 + 20);
    if (!v29)
    {
      v118 = sub_22EF63724(a1[11], v30, v87, 0);
      *a3 = sub_22E90092C((uint64_t)a1, *a3 & 0xFFFFFFFFFFFFFFFELL, v118, 27, 0, 0);
      return (void *)v23;
    }
    if (*(_DWORD *)(v29 + 20) == (_DWORD)v87)
    {
      v88 = a1[9];
      if ((*(_BYTE *)(v88 + 104) & 0x20) == 0
        && (*(_DWORD *)(v88 + 52) & 0x40000000) == 0
        && (*(_QWORD *)(v88 + 8) & 0x80000000000) == 0)
      {
        v89 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                       + 16) == 11
            ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
            : 0;
        v90 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v75 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 11
            ? *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v75 + 8) & 0xFFFFFFFFFFFFFFF0)
            : 0;
        if (v89 != v90)
        {
          v91 = sub_22EF5CDF0(a1[11], v89);
          v92 = sub_22EF5CDF0(a1[11], v90);
          v27 = v23;
          if (v91 != v92)
          {
            sub_22E8FCA40(a1, v201, 0x1B9Eu, 0, (uint64_t)&v208);
            v238 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
            v93 = sub_22E8901B8((uint64_t)&v208, &v238);
            v233[0] = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
            v94 = sub_22E8901B8(v93, v233);
            sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
            v230 = v95;
            v96 = sub_22E8906A0(v94, (uint64_t *)&v230);
            sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
            v226 = (uint64_t **)v97;
            sub_22E8906A0(v96, (uint64_t *)&v226);
            sub_22E903BEC((unsigned int *)&v208);
          }
          return (void *)v27;
        }
      }
      return (void *)v23;
    }
    sub_22E8FCA40(a1, v201, 0x1399u, 0, (uint64_t)&v208);
    v238 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v42 = sub_22E8901B8((uint64_t)&v208, &v238);
    v43 = *a3;
    goto LABEL_43;
  }
  if ((a6 & 1) == 0)
  {
    if (v26 != v30)
    {
      v26 = v30;
      *a2 = sub_22E90092C((uint64_t)a1, *a2 & 0xFFFFFFFFFFFFFFFELL, v30, 30, 0, 0);
    }
    v27 = sub_22EF63724(a1[11], v26, *(unsigned int *)(v29 + 20), 0);
    *a2 = sub_22E90092C((uint64_t)a1, *a2 & 0xFFFFFFFFFFFFFFFELL, v27, 27, 0, 0);
  }
  return (void *)v27;
}

unsigned int *sub_22EB3ECEC(unsigned int *result, _QWORD *a2, uint64_t a3)
{
  unsigned int *v4;
  int v5;
  unint64_t v6;
  llvm *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  size_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  void *__p[2];
  uint64_t v20;
  char v21;
  unsigned int v22[25];
  _BOOL4 v23;
  __int128 __dst;
  uint64_t v25;

  v4 = result;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16);
  if (v5 == 39 || v5 == 32)
  {
    v6 = *((_QWORD *)result + 10);
    v7 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v6 + 544), "NULL", 4uLL);
    v23 = !sub_22F2EE534(v6, v7);
    result = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
    v8 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16);
    if (v8 != 32 && v8 != 39)
    {
      result = (unsigned int *)sub_22EFFBE1C((unint64_t)result, *((_QWORD *)v4 + 11), 2);
      if ((_DWORD)result == 1)
      {
        result = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
        v9 = *(unsigned __int8 *)result;
        if (v9 == 144)
        {
          if ((*(_QWORD *)(*(_QWORD *)((**((_QWORD **)result + 3) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(*((_QWORD *)v4 + 11) + 16408))
            return result;
        }
        else if (v9 != 154 || result[4])
        {
          return result;
        }
        sub_22EFF605C((uint64_t)result);
        sub_22E8FCA40(v4, v10, 0x1AE3u, 0, (uint64_t)v22);
        v11 = sub_22E8900C4((uint64_t)v22, (int *)&v23);
        sub_22EFF605C(*a2 & 0xFFFFFFFFFFFFFFFELL);
        if (v23)
          v13 = "NULL";
        else
          v13 = "(void *)0";
        if (v23)
          v14 = 4;
        else
          v14 = 9;
        v17 = 0;
        v18 = 0;
        v15 = v12 | ((unint64_t)v12 << 32);
        v16 = 1;
        HIBYTE(v25) = v14;
        memcpy(&__dst, v13, v14);
        *((_BYTE *)&__dst + v14) = 0;
        v21 = 0;
        *(_OWORD *)__p = __dst;
        v20 = v25;
        sub_22E890748(v11, &v15);
        if (SHIBYTE(v20) < 0)
          operator delete(__p[0]);
        return sub_22E903BEC(v22);
      }
    }
  }
  return result;
}

uint64_t sub_22EB3EEE0(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  _QWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _BOOL4 v66;
  _BOOL4 v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t v87;
  int v88;
  unsigned __int8 **v89;
  uint64_t *v90;
  _QWORD *v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned __int16 v96;
  unsigned __int8 v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  _BOOL4 v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  int v111;
  _BOOL4 v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t *v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  char v140;
  char v141;
  int v142;
  unsigned int v143;
  int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  __int16 v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  unint64_t v188;
  _DWORD *v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  _BOOL4 v196;
  uint64_t v197;
  int v198;
  BOOL v199;
  BOOL v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  int v224;
  unint64_t v225;
  unint64_t v226;
  unsigned int v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  int v234;
  uint64_t v235;
  int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v246;
  int v247;
  uint64_t v248;
  unsigned __int8 *v249;
  unsigned __int8 *v250;
  unsigned __int8 *v251;
  unsigned __int8 *v252;
  uint64_t v253;
  int v254;
  unsigned __int8 *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  unsigned __int8 **v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t v291;
  size_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  unsigned __int8 v300;
  _QWORD v301[7];
  BOOL v302;
  BOOL v303;
  unint64_t v304;
  unint64_t v305;
  int v306;
  unsigned int v307;
  unint64_t v308;
  char v309;
  uint64_t v310;
  char v311;
  void *__p;
  uint64_t v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  char v317;
  uint64_t v318;
  char v319;
  void *v320[2];
  uint64_t v321;
  char v322;
  uint64_t v323[5];
  char v324;
  int v325;
  unint64_t v326;
  uint64_t v327;
  __int16 v328;

  v306 = a5;
  v307 = a4;
  v10 = (_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
  v11 = a5 - 9;
  if (a5 != 9
    || (v12 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                 + 16),
        v12 == 31)
    || v12 == 39
    || ((v13 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                          + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16),
         v13 != 39)
      ? (v14 = v13 == 31)
      : (v14 = 1),
        v14))
  {
    v15 = sub_22EB1B954(a1, v10);
    *a2 = v15;
    if ((v15 & 1) != 0)
      return 0;
    v16 = sub_22EB1B954(a1, (void *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
  }
  else
  {
    v44 = sub_22EB1A358(a1, v10, 0);
    *a2 = v44;
    if ((v44 & 1) != 0)
      return 0;
    v16 = sub_22EB1A358(a1, *a3 & 0xFFFFFFFFFFFFFFFELL, 0);
  }
  *a3 = v16;
  if ((v16 & 1) != 0)
    return 0;
  v17 = *a2;
  v18 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v19 && *(_BYTE *)(v19 + 16) == 39
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
    && (v19 = sub_22F10CF48(v19)) != 0)
  {
    v20 = *(_BYTE *)(v19 + 40) & 7;
    v21 = v20 > 4;
    v22 = (1 << v20) & 0x13;
    if (v21 || v22 == 0)
    {
      v24 = sub_22EF5B848(*(_QWORD *)(a1 + 88), *(_QWORD *)(v19 + 32), 0);
      v17 = sub_22E90092C(a1, v18, v24, 68, 0, 0);
    }
  }
  *a2 = v17;
  v25 = *a3;
  v26 = *a3 & 0xFFFFFFFFFFFFFFFELL;
  v27 = *(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v27 && *(_BYTE *)(v27 + 16) == 39
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
    && (v27 = sub_22F10CF48(v27)) != 0)
  {
    v28 = *(_BYTE *)(v27 + 40) & 7;
    v21 = v28 > 4;
    v29 = (1 << v28) & 0x13;
    if (v21 || v29 == 0)
    {
      v31 = sub_22EF5B848(*(_QWORD *)(a1 + 88), *(_QWORD *)(v27 + 32), 0);
      v25 = sub_22E90092C(a1, v26, v31, 68, 0, 0);
    }
  }
  *a3 = v25;
  sub_22EB3B394((_QWORD *)a1, a2, a3, a4, 1);
  v32 = a5 & 0xFFFFFFFE;
  if ((a5 & 0xFFFFFFFE) == 0xE && (**(_QWORD **)(a1 + 72) & 0x100) == 0)
  {
    sub_22EB3ECEC((unsigned int *)a1, a2, *a3);
    sub_22EB3ECEC((unsigned int *)a1, a3, *a2);
  }
  v33 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                           + 8) & 0xFFFFFFFFFFFFFFF0)
                                   + 16);
  if ((v33 - 55) < 2
    || (v34 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL)
                                                                                         + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                                         + 16),
        (v34 - 55) <= 1))
  {
    if (a5 != 9)
    {
      v35 = sub_22EB36814((_QWORD *)a1, a2, a3, a4, 0, 1, (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) >> 43) & 1, 1, 1);
      v36 = v35;
      if (v35 < 0x10)
        return v36;
      v37 = *a2 & 0xFFFFFFFFFFFFFFFELL;
      v38 = *(_QWORD *)(v37 + 8);
      v39 = *(_QWORD *)(a1 + 72);
      if ((*(_QWORD *)(v39 + 8) & 0x40000000000) == 0)
        goto LABEL_40;
      v296 = (*(_QWORD *)(v39 + 232) >> 61) & 3;
      if ((_DWORD)v296 != 2)
      {
        if ((_DWORD)v296)
          goto LABEL_40;
        v297 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
        if (!v297 || (v298 = *(_DWORD *)(v297 + 16), v298 - 57 <= 0xFFFFFFFD))
          v298 = *(_DWORD *)(sub_22F10CF48(v297) + 16);
        if ((v298 & 0x780000) != 0x100000)
        {
          sub_22E8FCA40((_QWORD *)a1, a4, 0x1958u, 0, (uint64_t)&v326);
          sub_22E903BEC((unsigned int *)&v326);
          v37 = *a2 & 0xFFFFFFFFFFFFFFFELL;
LABEL_40:
          sub_22EB41B84(a1, a4, (unsigned __int8 *)v37, (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL), a5);
          if (v32 == 14 && sub_22F110DD0(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0)))
            sub_22E987DF4((_QWORD *)a1, a4, (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL), (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 104) & 0x20) == 0)
            return sub_22EB423E0(a1, v36);
          v40 = sub_22E3E4B64(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0));
          return sub_22EF63724(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16400), *(unsigned int *)(v40 + 20), (*(_DWORD *)(v40 + 16) >> 19) & 0xF);
        }
      }
      goto LABEL_103;
    }
    goto LABEL_52;
  }
  if (v33 != 11
    || (v42 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                 + 8) & 0xFFFFFFFFFFFFFFF0)
                         + 16) >> 19) & 0x1FF,
        (v42 - 48) >= 0xC)
    && v42 != 96)
  {
    if (v34 != 11
      || (v43 = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                   + 8) & 0xFFFFFFFFFFFFFFF0)
                           + 16) >> 19) & 0x1FF,
          (v43 - 48) >= 0xC)
      && v43 != 96)
    {
      v52 = a5 - 10;
      sub_22EB418B0(a1, a2, a3, a4, a5);
      sub_22EB41B84(a1, a4, (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL), (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL), a5);
      v53 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v54 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v304 = v54;
      v305 = v53;
      v55 = v53 & 0xFFFFFFFFFFFFFFF0;
      if (sub_22F110E9C(*(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF0))
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v55 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44)
      {
        v56 = (uint64_t *)(v54 & 0xFFFFFFFFFFFFFFF0);
        if (sub_22F110E9C(*v56) || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v56 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44)
        {
          if (a5 == 9)
          {
            v57 = *a2 & 0xFFFFFFFFFFFFFFFELL;
            v58 = *(_QWORD *)(v57 + 8);
            v59 = *a3 & 0xFFFFFFFFFFFFFFFELL;
            v60 = *(_QWORD *)(v59 + 8);
            v326 = (unint64_t)sub_22EFFA6B0((unsigned __int8 *)v57);
            v61 = (unint64_t)sub_22EFFA6B0((unsigned __int8 *)v59);
            v323[0] = v61;
            v62 = *(_QWORD *)((v326 & 0xFFFFFFFFFFFFFFFELL) + 8);
            v63 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFFFELL) + 8);
            v64 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v65 = *(_DWORD *)(v64 + 16);
            v66 = (*(_DWORD *)(v64 + 16) & 0xFF80000) == 87031808;
            if (v65 != 11)
              v66 = 0;
            if (v64)
              v67 = v66;
            else
              v67 = 0;
            v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v69 = *(_DWORD *)(v68 + 16);
            if (v68 && v69 == 11)
            {
              if (v67 != ((*(_DWORD *)(v68 + 16) & 0xFF80000) == 87031808))
                goto LABEL_124;
            }
            else if (v67)
            {
LABEL_124:
              v89 = (unsigned __int8 **)&v326;
              v90 = v323;
              v91 = (_QWORD *)a1;
              v92 = a4;
LABEL_144:
              sub_22F32EE84(v91, v92, v89, v90);
              return 0;
            }
            if (v69 == 44)
              v88 = (v65 == 44) + 1;
            else
              v88 = v65 == 44;
            if (v88 != 2)
            {
              if (v88 == 1)
              {
                if (v65 == 44)
                  v62 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFFFELL) + 8);
                if (sub_22F110DD0(*(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF0)))
                  goto LABEL_124;
              }
LABEL_129:
              v94 = sub_22EB1F050(a1, a2, a3, a4, 2);
              if ((*(_BYTE *)a2 & 1) != 0 || (*(_BYTE *)a3 & 1) != 0)
                return 0;
              v95 = v94;
              if (v94 > 0xF)
              {
                v96 = sub_22EFB1718(v94);
                if (v96 > 0xFFu)
                {
                  v97 = v96;
                  v98 = sub_22EB558E8(a1, v95, (uint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL), v58);
                  v99 = sub_22EB558E8(a1, v95, (uint64_t *)(*a3 & 0xFFFFFFFFFFFFFFFELL), v60);
                  v36 = 0;
                  if ((v98 & 1) != 0 || (v99 & 1) != 0)
                    return v36;
                  return sub_22EABA45C((_QWORD *)a1, v97, a4, 0);
                }
              }
              goto LABEL_142;
            }
            if (*(_QWORD *)(*(_QWORD *)((v62 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) == *(_QWORD *)(*(_QWORD *)((v63 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0))
            {
              v93 = sub_22F114198(*(_QWORD *)(v64 + 24));
              v60 = sub_22E496830(v93);
              if (sub_22F1124D8(*(_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF0)))
                v60 = sub_22EF6A4D4(*(uint64_t **)(a1 + 88), v60);
              *a2 = sub_22E90092C(a1, *a2 & 0xFFFFFFFFFFFFFFFELL, v60, 30, 0, 0);
              *a3 = sub_22E90092C(a1, *a3 & 0xFFFFFFFFFFFFFFFELL, v60, 30, 0, 0);
              v58 = v60;
              goto LABEL_129;
            }
          }
          else
          {
            v76 = sub_22EB1F050(a1, a2, a3, a4, 2);
            v77 = *a2;
            if ((*a2 & 1) != 0)
              return 0;
            v78 = *a3;
            if ((*a3 & 1) != 0)
              return 0;
            if (v76 > 0xF)
            {
              v79 = *(_QWORD *)(v76 & 0xFFFFFFFFFFFFFFF0);
              if (v52 > 3 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v79 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 12)
              {
                v80 = sub_22F110DD0(v79);
                if (v32 == 14 && v80)
                  sub_22E987DF4((_QWORD *)a1, a4, (unsigned __int8 *)(v77 & 0xFFFFFFFFFFFFFFFELL), (unsigned __int8 *)(v78 & 0xFFFFFFFFFFFFFFFELL));
LABEL_103:
                v81 = *(_QWORD *)(a1 + 88);
                v82 = 16400;
                if ((*(_BYTE *)(*(_QWORD *)(v81 + 2000) + 1) & 1) == 0)
                  v82 = 16480;
                return *(_QWORD *)(v81 + v82);
              }
            }
          }
LABEL_142:
          v91 = (_QWORD *)a1;
          v92 = a4;
LABEL_143:
          v89 = (unsigned __int8 **)a2;
          v90 = a3;
          goto LABEL_144;
        }
      }
      v70 = sub_22EFFBE1C(*a2 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a1 + 88), 1);
      v71 = sub_22EFFBE1C(*a3 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a1 + 88), 1);
      v303 = v70 != 0;
      v302 = v71 != 0;
      v301[0] = &v306;
      v301[1] = a1;
      v301[2] = a2;
      v301[3] = &v307;
      v301[4] = a3;
      v301[5] = &v303;
      v301[6] = &v302;
      if (v11 >= 5)
      {
        if ((v70 != 0) != (v71 != 0))
        {
          v83 = a5 == 14;
          if (v71)
            v70 = v71;
          v84 = *a2;
          if (v71)
            v85 = *a2;
          else
            v85 = *a3;
          v86 = (unsigned __int8 *)(v85 & 0xFFFFFFFFFFFFFFFELL);
          if (v71)
            v84 = *a3;
          sub_22F0D4E74(v84 & 0xFFFFFFFFFFFFFFFELL);
          sub_22E9882C0(a1, v86, v70, v83, v87);
        }
      }
      else
      {
        v72 = *(_QWORD *)v55;
        if ((*(_QWORD *)v55 && *(_BYTE *)(v72 + 16) == 39
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v72 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
           && (v72 = sub_22F10CF48(v72)) != 0)
          && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v72 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 <= 1
          && ((v73 = *(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v73 + 16) == 39
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v73 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
           && (v73 = sub_22F10CF48(v73)) != 0)
          && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v73 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                      + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16)
           - 25 <= 1)
        {
          v74 = v306;
          if (v306 == 9)
            v75 = 5002;
          else
            v75 = (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0 ? 7068 : 5386;
          sub_22E8FCA40((_QWORD *)a1, v307, v75, 0, (uint64_t)&v326);
          v100 = sub_22E8901B8((uint64_t)&v326, (uint64_t *)&v305);
          v101 = sub_22E8901B8(v100, (uint64_t *)&v304);
          sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
          v323[0] = v102;
          v103 = sub_22E8906A0(v101, v323);
          sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
          v316 = v104;
          sub_22E8906A0(v103, &v316);
          sub_22E903BEC((unsigned int *)&v326);
          if (v74 == 9)
            return 0;
        }
      }
      v105 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v106 = *(_DWORD *)(v105 + 16);
      if (v105 && v106 == 11)
      {
        v107 = ((*(_DWORD *)(v105 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
      }
      else
      {
        if (v105 && v106 == 44)
        {
          v108 = sub_22F114198(*(_QWORD *)(v105 + 24));
          if ((*(_BYTE *)(v108 + 74) & 1) == 0 && *(_QWORD *)(v108 + 128) < 8uLL)
            goto LABEL_163;
          v109 = (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v105 + 24)) + 76) & 0x80) == 0;
        }
        else
        {
          v109 = v106 == 9;
        }
        v107 = v109;
      }
      if (v107 && !v303)
        goto LABEL_213;
LABEL_163:
      v110 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v111 = *(_DWORD *)(v110 + 16);
      if (v110 && v111 == 11)
      {
        v112 = ((*(_DWORD *)(v110 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
      }
      else
      {
        if (v110 && v111 == 44)
        {
          v113 = sub_22F114198(*(_QWORD *)(v110 + 24));
          if ((*(_BYTE *)(v113 + 74) & 1) == 0 && *(_QWORD *)(v113 + 128) < 8uLL)
          {
LABEL_177:
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
            {
              if (v11 >= 5)
              {
                v137 = *(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0);
                if ((v137 && *(_BYTE *)(v137 + 16) == 39
                   || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v137 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
                   && (v137 = sub_22F10CF48(v137)) != 0)
                  && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v137 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 16)
                   - 25 <= 1
                  && (sub_22F10DFD8(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0)) & 1) != 0
                  || ((v138 = *(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0)) != 0 && *(_BYTE *)(v138 + 16) == 39
                   || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v138 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
                   && (v138 = sub_22F10CF48(v138)) != 0)
                  && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v138 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 16)
                   - 25 <= 1
                  && sub_22F10DFD8(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0)))
                {
                  v139 = v307;
                  sub_22EE03478(a1);
                  sub_22EB41FBC((_QWORD *)a1, v139, a2, a3, v140 != 0);
                  sub_22EE03478(a1);
                  if (v141)
                    return 0;
                  goto LABEL_226;
                }
                v136 = 1;
              }
              else
              {
                v136 = 2;
              }
              v142 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16);
              v143 = v142 == 39;
              v144 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16);
              if (v144 == 39)
                ++v143;
              if (v143 >= v136 && ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) == 0 || v142 != 32 && v144 != 32))
                goto LABEL_329;
            }
            else
            {
              v115 = *(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0);
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v115 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
              {
                v116 = *(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0);
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v116 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
                {
                  v117 = v52;
                  if (*(_BYTE *)(v115 + 16) != 39)
                  {
                    v115 = sub_22F10CF48(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0));
                    v116 = *(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0);
                  }
                  v118 = *(_QWORD *)(v115 + 32);
                  v119 = *(_QWORD *)((v118 & 0xFFFFFFFFFFFFFFF0) + 8);
                  v120 = v118 & 7 | v119;
                  v323[0] = v120;
                  if (!v116 || *(_BYTE *)(v116 + 16) != 39)
                    v116 = sub_22F10CF48(v116);
                  v121 = *(_QWORD *)((*(_QWORD *)(v116 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
                  v299 = *(_QWORD *)(v116 + 32) & 7 | v121;
                  v122 = *(_QWORD *)(a1 + 88);
                  v123 = (uint64_t *)(v119 & 0xFFFFFFFFFFFFFFF0);
                  v124 = *(_QWORD *)(v119 & 0xFFFFFFFFFFFFFFF0);
                  if ((*(_BYTE *)(v124 + 8) & 0xF) != 0)
                    v124 = (unint64_t)sub_22F10D2BC(v120);
                  v125 = v124 & 0xFFFFFFFFFFFFFFF0;
                  v126 = (uint64_t *)(v121 & 0xFFFFFFFFFFFFFFF0);
                  v127 = *(_QWORD *)(v121 & 0xFFFFFFFFFFFFFFF0);
                  if ((*(_BYTE *)(v127 + 8) & 0xF) != 0)
                    v127 = (unint64_t)sub_22F10D2BC(v299);
                  if (sub_22F36EDA0(v122, v125, v127 & 0xFFFFFFFFFFFFFFF0, 0))
                  {
                    if (v117 <= 3)
                    {
                      v128 = sub_22F1110EC(*v123, 0);
                      if (v128 != sub_22F1110EC(*v126, 0) && (**(_BYTE **)(a1 + 72) & 2) == 0)
                      {
                        sub_22E8FCA40((_QWORD *)a1, v307, 0x14F9u, 0, (uint64_t)&v326);
                        sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
                        v316 = v129;
                        v130 = sub_22E8906A0((uint64_t)&v326, &v316);
                        sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
                        v308 = v131;
                        v132 = sub_22E8906A0(v130, (uint64_t *)&v308);
                        v133 = sub_22E8901B8(v132, (uint64_t *)&v305);
                        v134 = sub_22E8901B8(v133, (uint64_t *)&v304);
                        LOBYTE(v325) = sub_22F1110EC(*v123, 0);
                        v135 = sub_22E894E38(v134, (unsigned __int8 *)&v325);
                        v300 = sub_22F1110EC(*v126, 0);
                        sub_22E894E38(v135, &v300);
                        sub_22E903BEC((unsigned int *)&v326);
                      }
                    }
                  }
                  else if (v117 >= 4
                         && ((v261 = *(_QWORD *)(*(_QWORD *)(*v123 + 8) & 0xFFFFFFFFFFFFFFF0),
                              v262 = *(_DWORD *)(v261 + 16),
                              v261)
                          && (v262 & 0xFF800FF) == 0x528000B
                          || (v263 = *(_QWORD *)(*(_QWORD *)(*v126 + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
                          && (*(_DWORD *)(v263 + 16) & 0xFF800FF) == 0x528000B))
                  {
                    if ((v262 - 25 < 2
                       || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v126 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                           + 16)
                        - 25 <= 1)
                      && !v303
                      && !v302)
                    {
                      sub_22EB41FBC((_QWORD *)a1, v307, a2, a3, 0);
                    }
                  }
                  else
                  {
                    sub_22EB42314((_QWORD *)a1, v307, a2, a3, 0);
                  }
                  if (v120 == v299)
                    return sub_22EB42088((uint64_t)v301);
                  if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x40000000) != 0
                    && !v303
                    && !v302
                    && !sub_22E95F83C(v323, v299))
                  {
                    sub_22E8FCA40((_QWORD *)a1, v307, 0x1389u, 0, (uint64_t)&v326);
                    v264 = sub_22E8901B8((uint64_t)&v326, (uint64_t *)&v305);
                    v265 = sub_22E8901B8(v264, (uint64_t *)&v304);
                    v325 = 0;
                    v266 = sub_22E8900C4(v265, &v325);
                    sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
                    v316 = v267;
                    v268 = sub_22E8906A0(v266, &v316);
                    sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
                    v308 = v269;
                    sub_22E8906A0(v268, (uint64_t *)&v308);
                    sub_22E903BEC((unsigned int *)&v326);
                  }
                  v270 = *(_QWORD *)((v323[0] & 0xFFFFFFFFFFFFFFF0) + 8);
                  if ((v270 & 8) != 0)
                    v271 = *(_DWORD *)((v270 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
                  else
                    v271 = 0;
                  v272 = *(_QWORD *)((v121 & 0xFFFFFFFFFFFFFFF0) + 8);
                  if ((v272 & 8) != 0)
                    v273 = *(_DWORD *)((v272 & 0xFFFFFFFFFFFFFFF0) + 0x18) >> 11;
                  else
                    v273 = 0;
                  if (v271 == v273)
                    v156 = 1;
                  else
                    v156 = 66;
                  if (v303 && !v302)
                  {
                    v180 = *a2 & 0xFFFFFFFFFFFFFFFELL;
                    v165 = v304;
LABEL_497:
                    v218 = a1;
                    goto LABEL_498;
                  }
                  v153 = *a3 & 0xFFFFFFFFFFFFFFFELL;
                  v154 = v305;
                  goto LABEL_491;
                }
              }
            }
LABEL_213:
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0)
            {
              v145 = v305;
              if (v11 < 5)
                goto LABEL_314;
              v146 = *(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0);
              v147 = *(_QWORD *)(v146 + 8) & 0xFFFFFFFFFFFFFFF0;
LABEL_216:
              v148 = *(unsigned __int8 *)(*(_QWORD *)v147 + 16);
              if (v148 == 39)
              {
                v149 = v304;
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) != 10)
                  goto LABEL_314;
              }
              else
              {
                if (v148 != 10)
                  goto LABEL_314;
                v149 = v304;
                v150 = *(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0);
                v151 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v150 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
                if (v151 != 39)
                {
                  if (v151 == 10)
                  {
                    if (*(_BYTE *)(v146 + 16) != 10)
                    {
                      v146 = sub_22F10CF48(v146);
                      v150 = *(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0);
                    }
                    v152 = *(_QWORD *)(v146 + 32);
                    if (!v150 || *(_BYTE *)(v150 + 16) != 10)
                      v150 = sub_22F10CF48(v150);
                    if (!v303 && !v302 && !sub_22F36EDA0(*(_QWORD *)(a1 + 88), v152, *(_QWORD *)(v150 + 32), 0))
                    {
                      sub_22E8FCA40((_QWORD *)a1, v307, 0x134Cu, 0, (uint64_t)&v326);
                      v256 = sub_22E8901B8((uint64_t)&v326, (uint64_t *)&v305);
                      v257 = sub_22E8901B8(v256, (uint64_t *)&v304);
                      sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
                      v323[0] = v258;
                      v259 = sub_22E8906A0(v257, v323);
                      sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
                      v316 = v260;
                      sub_22E8906A0(v259, &v316);
                      sub_22E903BEC((unsigned int *)&v326);
                    }
LABEL_226:
                    v153 = *a3 & 0xFFFFFFFFFFFFFFFELL;
                    v154 = v305;
                    v155 = a1;
                    v156 = 1;
LABEL_492:
                    *a3 = sub_22E90092C(v155, v153, v154, v156, 0, 0);
                    return sub_22EB42088((uint64_t)v301);
                  }
LABEL_314:
                  v193 = *(_QWORD *)(v145 & 0xFFFFFFFFFFFFFFF0);
                  v194 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v193 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
                  if (v194 == 32)
                  {
                    if (*(_BYTE *)(v193 + 16) != 39)
                      v193 = 0;
                  }
                  else
                  {
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) != 32)
                      goto LABEL_344;
                    if (*(_BYTE *)(v193 + 16) != 39)
                    {
                      if (v194 == 39)
                        v193 = sub_22F10CF48(*(_QWORD *)(v145 & 0xFFFFFFFFFFFFFFF0));
                      else
                        v193 = 0;
                    }
                  }
                  v195 = *(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0);
                  if (v195 && *(_BYTE *)(v195 + 16) == 39)
                  {
                    if (!v193)
                    {
                      v199 = 0;
                      goto LABEL_384;
                    }
                    v196 = 1;
LABEL_334:
                    v197 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v193 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                    LODWORD(v193) = 1;
                    if (v197)
                    {
                      v198 = *(_DWORD *)(v197 + 16);
                      if (v198 == 11)
                      {
                        v199 = (v198 & 0xFF80000) == 86507520;
                        if (!v196)
                        {
                          v200 = 0;
                          v201 = 43;
                          goto LABEL_388;
                        }
                        goto LABEL_384;
                      }
                    }
LABEL_383:
                    v199 = 0;
                    if (!v196)
                    {
                      v201 = 43;
                      v200 = 0;
LABEL_388:
                      if (!v199 && !v200 && !sub_22F36EDA0(*(_QWORD *)(a1 + 88), v305, v304, 0))
                        sub_22EB42314((_QWORD *)a1, v307, a2, a3, 0);
                      if (v303 && !v302)
                      {
                        v180 = *a2 & 0xFFFFFFFFFFFFFFFELL;
                        v326 = v180;
                        v165 = v304;
                        if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) != 0)
                        {
                          sub_22EC32FE4(a1, 0, v304, (uint64_t *)&v326, 0, 1, 0, 0);
                          v180 = v326;
                          v165 = v304;
                        }
                        v218 = a1;
                        v156 = v201;
                        goto LABEL_498;
                      }
                      v153 = *a3 & 0xFFFFFFFFFFFFFFFELL;
                      v326 = v153;
                      v154 = v305;
                      if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 2) != 0)
                      {
                        sub_22EC32FE4(a1, 0, v305, (uint64_t *)&v326, 0, 1, 0, v306);
                        v153 = v326;
                        v154 = v305;
                      }
                      if ((_DWORD)v193)
                        v156 = 1;
                      else
                        v156 = 43;
                      goto LABEL_491;
                    }
LABEL_384:
                    v200 = 0;
                    v216 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v195 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                    v201 = 1;
                    if (v216)
                    {
                      v217 = *(_DWORD *)(v216 + 16);
                      if (v217 == 11)
                        v200 = (v217 & 0xFF80000) == 86507520;
                    }
                    goto LABEL_388;
                  }
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v195 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
                    v195 = sub_22F10CF48(v195);
                  else
                    v195 = 0;
                  v196 = v195 != 0;
                  if (v193 | v195)
                  {
                    if (!v193)
                      goto LABEL_383;
                    goto LABEL_334;
                  }
                  v145 = v305;
                  v202 = *(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0);
                  v203 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v202 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
                  if (v203 != 32)
                  {
                    if (v11 < 5)
                      goto LABEL_344;
                    if (v203 == 10)
                    {
                      if ((sub_22F40AB34(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0), *(_QWORD *)(a1 + 88)) & 1) != 0)
                      {
                        v180 = *a2 & 0xFFFFFFFFFFFFFFFELL;
                        v165 = v304;
                        v218 = a1;
                        v156 = 44;
                        goto LABEL_498;
                      }
                      v202 = *(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0);
                    }
LABEL_549:
                    if ((sub_22F40AB34(v202, *(_QWORD *)(a1 + 88)) & 1) != 0)
                    {
                      v145 = v305;
                      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16) == 10)
                      {
                        v153 = *a3 & 0xFFFFFFFFFFFFFFFELL;
                        v155 = a1;
                        v154 = v305;
                        v156 = 44;
                        goto LABEL_492;
                      }
                    }
                    else
                    {
                      v145 = v305;
                    }
LABEL_344:
                    v204 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v145 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16);
                    if (v204 == 39 || v204 == 32)
                    {
                      v205 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                      v206 = *(_DWORD *)(v205 + 16);
                      if (v205 && v206 == 11)
                      {
                        if (((*(_DWORD *)(v205 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
                          goto LABEL_370;
                      }
                      else if (v205 && v206 == 44)
                      {
                        v207 = sub_22F114198(*(_QWORD *)(v205 + 24));
                        if (((*(_BYTE *)(v207 + 74) & 1) != 0 || *(_QWORD *)(v207 + 128) > 7uLL)
                          && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v205 + 24)) + 76) & 0x80) == 0)
                        {
LABEL_370:
                          if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 140) & 0x20000000000000) != 0)
                            goto LABEL_479;
                          if (v303)
                          {
                            v212 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                            v213 = *(_DWORD *)(v212 + 16);
                            if (v212 && v213 == 11)
                            {
                              if (((*(_DWORD *)(v212 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
                                goto LABEL_472;
                            }
                            else if (v212 && v213 == 44)
                            {
                              v219 = sub_22F114198(*(_QWORD *)(v212 + 24));
                              if (((*(_BYTE *)(v219 + 74) & 1) != 0 || *(_QWORD *)(v219 + 128) > 7uLL)
                                && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v212 + 24)) + 76) & 0x80) == 0)
                              {
                                goto LABEL_472;
                              }
                            }
                            else if (v213 == 9)
                            {
                              goto LABEL_472;
                            }
                          }
                          if (!v302)
                            goto LABEL_426;
                          v221 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                          v222 = *(_DWORD *)(v221 + 16);
                          if (v221 && v222 == 11)
                          {
                            if (((*(_DWORD *)(v221 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
                              goto LABEL_472;
LABEL_426:
                            if (v11 >= 5)
                              v224 = 5372;
                            else
                              v224 = 5388;
                            v225 = **(_QWORD **)(a1 + 72) & 0x100;
                            v226 = v225 >> 8;
                            if (v225)
                              v227 = 4943;
                            else
                              v227 = v224;
LABEL_476:
                            sub_22E8FCA40((_QWORD *)a1, v307, v227, 0, (uint64_t)&v326);
                            v240 = sub_22E8901B8((uint64_t)&v326, (uint64_t *)&v305);
                            v241 = sub_22E8901B8(v240, (uint64_t *)&v304);
                            sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
                            v323[0] = v242;
                            v243 = sub_22E8906A0(v241, v323);
                            sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
                            v316 = v244;
                            sub_22E8906A0(v243, &v316);
                            sub_22E903BEC((unsigned int *)&v326);
                            if ((v226 & 1) != 0)
                              return 0;
LABEL_479:
                            v246 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                            v247 = *(_DWORD *)(v246 + 16);
                            if (v246 && v247 == 11)
                            {
                              if (((*(_DWORD *)(v246 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
                              {
LABEL_494:
                                v180 = *a2 & 0xFFFFFFFFFFFFFFFELL;
                                v165 = v304;
                                if (v303)
                                  v156 = 14;
                                else
                                  v156 = 22;
                                goto LABEL_497;
                              }
                            }
                            else if (v246 && v247 == 44)
                            {
                              v248 = sub_22F114198(*(_QWORD *)(v246 + 24));
                              if (((*(_BYTE *)(v248 + 74) & 1) != 0 || *(_QWORD *)(v248 + 128) > 7uLL)
                                && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v246 + 24)) + 76) & 0x80) == 0)
                              {
                                goto LABEL_494;
                              }
                            }
                            else if (v247 == 9)
                            {
                              goto LABEL_494;
                            }
                            v153 = *a3 & 0xFFFFFFFFFFFFFFFELL;
                            v154 = v305;
                            if (v302)
                              v156 = 14;
                            else
                              v156 = 22;
LABEL_491:
                            v155 = a1;
                            goto LABEL_492;
                          }
                          if (v221 && v222 == 44)
                          {
                            v223 = sub_22F114198(*(_QWORD *)(v221 + 24));
                            if (((*(_BYTE *)(v223 + 74) & 1) != 0 || *(_QWORD *)(v223 + 128) > 7uLL)
                              && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v221 + 24)) + 76) & 0x80) == 0)
                            {
                              goto LABEL_472;
                            }
                            goto LABEL_426;
                          }
                          if (v222 != 9)
                            goto LABEL_426;
LABEL_472:
                          if (v11 > 4)
                            goto LABEL_479;
                          v226 = (**(_QWORD **)(a1 + 72) & 0x100uLL) >> 8;
                          if ((**(_QWORD **)(a1 + 72) & 0x100) != 0)
                            v227 = 5003;
                          else
                            v227 = 5387;
                          goto LABEL_476;
                        }
                      }
                      else if (v206 == 9)
                      {
                        goto LABEL_370;
                      }
                    }
                    v208 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                    v209 = *(_DWORD *)(v208 + 16);
                    if (v208 && v209 == 11)
                    {
                      if (((*(_DWORD *)(v208 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                        goto LABEL_376;
                    }
                    else if (v208 && v209 == 44)
                    {
                      v210 = sub_22F114198(*(_QWORD *)(v208 + 24));
                      if ((*(_BYTE *)(v210 + 74) & 1) == 0 && *(_QWORD *)(v210 + 128) <= 7uLL
                        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v208 + 24)) + 76) & 0x80) != 0)
                      {
                        goto LABEL_376;
                      }
                    }
                    else if (v209 != 9)
                    {
                      goto LABEL_376;
                    }
                    v211 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                              + 16);
                    if (v211 == 39 || v211 == 32)
                      goto LABEL_370;
LABEL_376:
                    if (v11 < 5)
                      goto LABEL_433;
                    if (!v302)
                      goto LABEL_433;
                    v154 = v305;
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) != 10)
                      goto LABEL_433;
                    v214 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                    v215 = *(_DWORD *)(v214 + 16);
                    if (v214 && v215 == 11)
                    {
                      if (((*(_DWORD *)(v214 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
                        goto LABEL_468;
LABEL_433:
                      if (v11 < 5 || !v303)
                        goto LABEL_449;
                      v228 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                      v229 = *(_DWORD *)(v228 + 16);
                      if (v228 && v229 == 11)
                      {
                        if (((*(_DWORD *)(v228 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                          goto LABEL_449;
                      }
                      else if (v228 && v229 == 44)
                      {
                        v230 = sub_22F114198(*(_QWORD *)(v228 + 24));
                        if ((*(_BYTE *)(v230 + 74) & 1) == 0 && *(_QWORD *)(v230 + 128) <= 7uLL
                          || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v228 + 24)) + 76) & 0x80) != 0)
                        {
                          goto LABEL_449;
                        }
                      }
                      else if (v229 != 9)
                      {
                        goto LABEL_449;
                      }
                      v165 = v304;
                      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16) == 10)
                      {
LABEL_447:
                        v180 = *a2 & 0xFFFFFFFFFFFFFFFELL;
                        v218 = a1;
LABEL_448:
                        v156 = 14;
LABEL_498:
                        *a2 = sub_22E90092C(v218, v180, v165, v156, 0, 0);
                        return sub_22EB42088((uint64_t)v301);
                      }
LABEL_449:
                      v231 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 56);
                      if ((v231 & 0x100000000) == 0 && v231 < 0xC8)
                        goto LABEL_470;
                      v154 = v305;
                      v232 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                      v233 = *(_DWORD *)(v232 + 16);
                      v234 = v233 & 0xFF800FF;
                      if (v232 && v234 == 117440523)
                      {
                        v235 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                        if (v235)
                        {
                          v236 = *(_DWORD *)(v235 + 16) & 0xFF800FF;
                          v237 = 117440523;
                          goto LABEL_459;
                        }
                      }
                      else if (v232)
                      {
                        if (v234 == 117964811)
                        {
                          v238 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                          if (v238)
                          {
                            v236 = *(_DWORD *)(v238 + 16) & 0xFF800FF;
                            v237 = 117964811;
LABEL_459:
                            if (v236 == v237)
                              return sub_22EB42088((uint64_t)v301);
                          }
                        }
                      }
                      if (v303)
                      {
                        v239 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                        if (v239)
                        {
                          if ((*(_DWORD *)(v239 + 16) & 0xFF800FF) == 0x708000B)
                          {
                            v180 = *a2 & 0xFFFFFFFFFFFFFFFELL;
                            v218 = a1;
                            v165 = v304;
                            goto LABEL_448;
                          }
                        }
                      }
                      if (v232
                        && *(_DWORD *)(v232 + 16) == 11
                        && (v233 & 0xFF80000) == 0x7080000
                        && v302)
                      {
                        goto LABEL_468;
                      }
LABEL_470:
                      v92 = v307;
                      v91 = (_QWORD *)a1;
                      goto LABEL_143;
                    }
                    if (v214 && v215 == 44)
                    {
                      v220 = sub_22F114198(*(_QWORD *)(v214 + 24));
                      if ((*(_BYTE *)(v220 + 74) & 1) == 0 && *(_QWORD *)(v220 + 128) <= 7uLL
                        || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v214 + 24)) + 76) & 0x80) != 0)
                      {
                        goto LABEL_433;
                      }
                      v154 = v305;
                    }
                    else if (v215 != 9)
                    {
                      goto LABEL_433;
                    }
LABEL_468:
                    v153 = *a3 & 0xFFFFFFFFFFFFFFFELL;
                    goto LABEL_469;
                  }
                  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                + 16) != 32)
                  {
                    if (v11 < 5)
                      goto LABEL_344;
                    goto LABEL_549;
                  }
                  if ((sub_22F36EC20(*(_QWORD *)(a1 + 88), v305, v304) & 1) == 0)
                    sub_22EB42314((_QWORD *)a1, v307, a2, a3, 0);
                  v249 = (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
                  v250 = sub_22EFFA6B0(v249);
                  v251 = (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL);
                  if ((*v250 + 55) >= 4u)
                  {
                    if ((*sub_22EFFA6B0((unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL)) + 55) > 3u)
                      goto LABEL_506;
                    v252 = v249;
                    v249 = v251;
                    v251 = v252;
                  }
                  v254 = v306;
                  v253 = v307;
                  v255 = sub_22EFFBBCC(v251);
                  if (!sub_22EFFBE1C((unint64_t)v255, *(_QWORD *)(a1 + 88), 2))
                  {
                    v325 = sub_22F32F390(0, v249);
                    if (v325 == 4)
                    {
                      sub_22E8FCA40((_QWORD *)a1, v253, 0x1AB8u, 0, (uint64_t)&v326);
                      sub_22F0D4E74((uint64_t)v249);
                      v323[0] = v274;
                      v275 = (unsigned __int8 **)&v326;
                    }
                    else
                    {
                      sub_22E8FCA40((_QWORD *)a1, v253, 0x1AA5u, 0, (uint64_t)&v326);
                      v276 = sub_22E8900C4((uint64_t)&v326, &v325);
                      sub_22F0D4E74((uint64_t)v249);
                      v323[0] = v277;
                      v275 = (unsigned __int8 **)v276;
                    }
                    sub_22E8906A0((uint64_t)v275, v323);
                    sub_22E903BEC((unsigned int *)&v326);
                    if ((v254 & 0xFFFFFFFE) == 0xE)
                    {
                      if ((v278 = *a3,
                            (v279 = *(_QWORD *)(*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0)
                        && *(_BYTE *)(v279 + 16) == 32
                        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v279 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
                        && (v279 = sub_22F10CF48(v279)) != 0)
                      {
                        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v278 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 16) == 32)
                        {
                          v280 = *(_QWORD *)(v279 + 32);
                          v281 = *(_QWORD *)(a1 + 3440);
                          v326 = (unint64_t)"isEqual";
                          v327 = 7;
                          v282 = sub_22F3E9780(v281, (uint64_t)&v326, 1, (uint64_t *)(v281 + 648));
                          v283 = sub_22F3345A0(a1, v282, v280, 1);
                          if (!v283)
                          {
                            if (sub_22E5761BC(v279))
                            {
                              v283 = sub_22EAFB888(a1, v282, 0, 1, 1);
                              if (!v283)
                                goto LABEL_506;
                            }
                            else
                            {
                              v283 = sub_22F334684(a1, v282, v279, 1);
                              if (!v283)
                                goto LABEL_506;
                            }
                          }
                          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v283 + 96) + 48) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16) != 32)
                            goto LABEL_506;
                          v284 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v283 + 80) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                          v285 = *(_DWORD *)(v284 + 16);
                          if (v284 && v285 == 11)
                          {
                            if (((v285 >> 19) & 0x1FF) - 166 >= 0x35)
                              goto LABEL_506;
                          }
                          else if (v284 && v285 == 44)
                          {
                            v286 = sub_22F114198(*(_QWORD *)(v284 + 24));
                            if ((*(_BYTE *)(v286 + 74) & 1) == 0 && *(_QWORD *)(v286 + 128) < 8uLL)
                              goto LABEL_506;
                          }
                          else if (v285 > 0x27u || ((1 << v285) & 0x8180001600) == 0)
                          {
                            goto LABEL_506;
                          }
                          sub_22F0D5A50(*a2 & 0xFFFFFFFFFFFFFFFELL);
                          v288 = v287;
                          sub_22F0D60E4(*a3 & 0xFFFFFFFFFFFFFFFELL);
                          v290 = sub_22F141A3C(v289, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
                          v291 = v253 | (sub_22F141A3C(v253, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72)) << 32);
                          sub_22E8FCA40((_QWORD *)a1, v253, 0x16EFu, 0, (uint64_t)&v326);
                          if (v254 == 14)
                            v292 = 1;
                          else
                            v292 = 2;
                          if (v254 == 14)
                            v293 = "[";
                          else
                            v293 = "![";
                          sub_22E729148(v293, v292, v288, 0, (uint64_t)v323);
                          v294 = sub_22E890748((uint64_t)&v326, v323);
                          v319 = 0;
                          v318 = 0;
                          BYTE1(v320[1]) = 0;
                          WORD1(v320[1]) = 0;
                          HIDWORD(v320[1]) = 0;
                          v321 = 0x900000000000000;
                          v322 = 0;
                          v316 = v291;
                          v317 = 0;
                          strcpy((char *)v320, " isEqual");
                          v295 = sub_22E890748(v294, &v316);
                          v311 = 0;
                          v310 = 0;
                          v314 = 0x100000000000000;
                          v313 = 0;
                          v308 = v290 | ((unint64_t)v290 << 32);
                          v309 = 0;
                          __p = (void *)93;
                          v315 = 0;
                          sub_22E890748(v295, &v308);
                          if (SHIBYTE(v314) < 0)
                            operator delete(__p);
                          if (SHIBYTE(v321) < 0)
                            operator delete(v320[0]);
                          if (v324 < 0)
                            operator delete((void *)v323[3]);
                          sub_22E903BEC((unsigned int *)&v326);
                        }
                      }
                    }
                  }
LABEL_506:
                  if (v303 && !v302)
                  {
                    v180 = *a2 & 0xFFFFFFFFFFFFFFFELL;
                    v165 = v304;
                    v218 = a1;
                    v156 = 1;
                    goto LABEL_498;
                  }
                  goto LABEL_226;
                }
              }
              if (!v303 && !v302)
              {
                v172 = *(_QWORD *)(v149 & 0xFFFFFFFFFFFFFFF0);
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v172 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
                {
                  if (*(_BYTE *)(v172 + 16) != 39)
                    v172 = sub_22F10CF48(v172);
                  v173 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v172 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                  if (v173 && (*(_DWORD *)(v173 + 16) & 0xFF800FF) == 0x528000B)
                    goto LABEL_274;
                  v146 = *(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0);
                  v147 = *(_QWORD *)(v146 + 8) & 0xFFFFFFFFFFFFFFF0;
                }
                if (*(_BYTE *)(*(_QWORD *)v147 + 16) != 39)
                  goto LABEL_273;
                if (*(_BYTE *)(v146 + 16) != 39)
                  v146 = sub_22F10CF48(v146);
                v174 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v146 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                if (!v174 || (*(_DWORD *)(v174 + 16) & 0xFF800FF) != 0x528000B)
                {
LABEL_273:
                  sub_22E8FCA40((_QWORD *)a1, v307, 0x134Cu, 0, (uint64_t)&v326);
                  v175 = sub_22E8901B8((uint64_t)&v326, (uint64_t *)&v305);
                  v176 = sub_22E8901B8(v175, (uint64_t *)&v304);
                  sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
                  v323[0] = v177;
                  v178 = sub_22E8906A0(v176, v323);
                  sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
                  v316 = v179;
                  sub_22E8906A0(v178, &v316);
                  sub_22E903BEC((unsigned int *)&v326);
                }
              }
LABEL_274:
              if (v303 && !v302)
              {
                v180 = *a2 & 0xFFFFFFFFFFFFFFFELL;
                v165 = v304;
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                              + 16) == 39)
                  v156 = 1;
                else
                  v156 = 45;
                goto LABEL_497;
              }
              v153 = *a3 & 0xFFFFFFFFFFFFFFFELL;
              v154 = v305;
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) == 39)
                v156 = 1;
              else
                v156 = 45;
              goto LABEL_491;
            }
            v145 = v305;
            if (v11 >= 5 && v303 && v302)
            {
              v157 = v305 & 0xFFFFFFFFFFFFFFF0;
              v158 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v158 && (*(_DWORD *)(v158 + 16) & 0xFF800FF) == 0x6D0000B)
                goto LABEL_232;
              v165 = v304;
              v166 = *(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
              if (*(_QWORD *)v166 && (*(_DWORD *)(*(_QWORD *)v166 + 16) & 0xFF800FF) == 0x6D0000B)
                goto LABEL_447;
            }
            else
            {
              if (v11 < 5)
                goto LABEL_235;
              v165 = v304;
              v166 = *(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
              v157 = v305 & 0xFFFFFFFFFFFFFFF0;
            }
            v167 = *(_QWORD *)v166;
            v168 = *(_DWORD *)(*(_QWORD *)v166 + 16);
            v169 = *(_QWORD *)(*(_QWORD *)v157 + 8) & 0xFFFFFFFFFFFFFFF0;
            if (v167)
            {
              if ((v168 & 0xFF800FF) == 0x6D0000B)
              {
                v170 = *(unsigned __int8 *)(*(_QWORD *)v169 + 16);
                if (v170 == 32 || v170 == 10)
                {
LABEL_232:
                  v153 = *a3 & 0xFFFFFFFFFFFFFFFELL;
                  v155 = a1;
                  v154 = v305;
LABEL_233:
                  v156 = 14;
                  goto LABEL_492;
                }
              }
            }
            v171 = *(_QWORD *)v169;
            if (v171
              && (*(_DWORD *)(v171 + 16) & 0xFF800FF) == 0x6D0000B
              && (v168 == 32 || v168 == 10))
            {
              goto LABEL_447;
            }
LABEL_235:
            if (v52 > 3)
              goto LABEL_313;
            v159 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v305 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v160 = *(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
            if ((!v159 || (*(_DWORD *)(v159 + 16) & 0xFF800FF) != 0x6D0000B || *(_BYTE *)(*(_QWORD *)v160 + 16) != 39)
              && (*(_DWORD *)(v159 + 16) != 39
               || !*(_QWORD *)v160
               || (*(_DWORD *)(*(_QWORD *)v160 + 16) & 0xFF800FF) != 0x6D0000B))
            {
              goto LABEL_313;
            }
            v161 = *(_QWORD *)(a1 + 216);
            v162 = *(_WORD *)(v161 + 8);
            if ((v162 & 0x7Eu) - 52 > 5)
            {
LABEL_299:
              if (v161 && (*(_WORD *)(v161 + 8) & 0x7E) == 0x24)
              {
                v182 = *(_QWORD *)(v161 - 48);
                v183 = (_QWORD *)(v182 & 0xFFFFFFFFFFFFFFF8);
                if ((v182 & 4) != 0)
                {
                  v183 = (_QWORD *)*v183;
                  if (!v183)
                    goto LABEL_313;
                }
                else if (!v183)
                {
                  goto LABEL_313;
                }
                if (sub_22EFC84D4((unint64_t)v183))
                {
                  v185 = 0;
                  v186 = *(_QWORD *)(v161 - 24);
                  v187 = "";
                  if ((v186 & 7) == 0)
                  {
                    v188 = v186 & 0xFFFFFFFFFFFFFFF8;
                    if (v188)
                    {
                      v189 = *(_DWORD **)(v188 + 16);
                      v190 = *v189;
                      v187 = (const char *)(v189 + 4);
                      v185 = v190;
                    }
                  }
                  v326 = (unint64_t)v187;
                  v327 = v185;
                  v328 = 0;
                  v191 = sub_22E72DCE4((uint64_t)&v326, "less", 4, "less_equal", 10, "greater", 7, v184, "greater_equal", 13, 1);
                  if (*(_BYTE *)(v191 + 17) && *(_BYTE *)(v191 + 16))
                  {
                    v165 = v304;
                    v192 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                    if (v192 && (*(_DWORD *)(v192 + 16) & 0xFF800FF) == 0x6D0000B)
                    {
                      v153 = *a3 & 0xFFFFFFFFFFFFFFFELL;
                      v154 = v305;
LABEL_469:
                      v155 = a1;
                      goto LABEL_233;
                    }
                    goto LABEL_447;
                  }
                  v145 = v305;
                }
              }
LABEL_313:
              if (v11 < 5)
                goto LABEL_314;
              v146 = *(_QWORD *)(v145 & 0xFFFFFFFFFFFFFFF0);
              v147 = *(_QWORD *)(v146 + 8) & 0xFFFFFFFFFFFFFFF0;
              if (*(_BYTE *)(*(_QWORD *)v147 + 16) != 31
                && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v304 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) != 31)
              {
                goto LABEL_216;
              }
LABEL_329:
              if (sub_22EB421E0((_QWORD *)a1, v307, (unint64_t *)a2, (unint64_t *)a3))
                return 0;
              return sub_22EB42088((uint64_t)v301);
            }
            v163 = v162 & 0x7F;
            v164 = -40;
            if (v163 > 70)
            {
              switch(v163)
              {
                case 'S':
                  goto LABEL_297;
                case 'G':
                  v164 = -56;
                  goto LABEL_297;
                case 'Q':
LABEL_297:
                  v181 = *(_QWORD *)(v161 + v164 + 16);
                  v161 = v181 & 0xFFFFFFFFFFFFFFF8;
                  if ((v181 & 4) != 0)
                    v161 = *(_QWORD *)v161;
                  goto LABEL_299;
              }
            }
            else
            {
              if (v163 <= 0x18)
              {
                if (v163 == 16)
                {
LABEL_246:
                  v164 = -48;
                  goto LABEL_297;
                }
                if (((1 << v163) & 0x1066) != 0)
                  goto LABEL_297;
                if (v163 == 24)
                  goto LABEL_246;
              }
              if (v163 == 70)
              {
LABEL_295:
                v164 = -64;
                goto LABEL_297;
              }
            }
            if ((v163 - 52) >= 6)
            {
              if ((v163 - 33) >= 5)
                goto LABEL_246;
              goto LABEL_295;
            }
            v164 = -72;
            goto LABEL_297;
          }
          v114 = (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v110 + 24)) + 76) & 0x80) == 0;
        }
        else
        {
          v114 = v111 == 9;
        }
        v112 = v114;
      }
      if (v112 && !v302)
        goto LABEL_213;
      goto LABEL_177;
    }
  }
  if (a5 == 9)
  {
LABEL_52:
    sub_22E8FCA40((_QWORD *)a1, a4, 0x130Bu, 0, (uint64_t)&v326);
    sub_22E903BEC((unsigned int *)&v326);
    return 0;
  }
  v45 = sub_22EB3A8FC((_QWORD *)a1, a2, a3, a4, 0, 2);
  v46 = (uint64_t)v45;
  if ((unint64_t)v45 < 0x10)
    return (uint64_t)v45;
  v47 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  v36 = *(_QWORD *)(v47 + 8);
  sub_22EB41B84(a1, a4, (unsigned __int8 *)v47, (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL), a5);
  v48 = *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0);
  if (v32 == 14 && sub_22F110DD0(*(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0)))
  {
    sub_22E987DF4((_QWORD *)a1, a4, (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL), (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
    v48 = *(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0);
  }
  v49 = *(_QWORD *)(*(_QWORD *)(v48 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v49 + 16) != 11)
    v49 = 0;
  v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v50 + 16) != 11)
    v50 = 0;
  if (v49)
    v51 = v50 == 0;
  else
    v51 = 1;
  if (v51 || (*(_DWORD *)(v49 + 16) & 0xFF80000) != 0x3000000 || (*(_DWORD *)(v50 + 16) & 0xFF80000) != 0x3000000)
    return sub_22F32F45C(a1, v46);
  return v36;
}

unsigned __int8 *sub_22EB418B0(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned int a4, int a5)
{
  unsigned __int8 *result;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  BOOL v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  void *__p;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43[24];
  BOOL v44;
  unsigned int v45;

  v45 = a4;
  result = sub_22EFFEB40((unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL));
  if (*result == 233)
  {
    v10 = result;
    if ((*(_DWORD *)result & 0x7C0000) == 0x240000)
    {
      result = (unsigned __int8 *)sub_22EFF5C90((unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL), 1);
      if ((result & 1) == 0)
      {
        v11 = sub_22EFFEB40(*((unsigned __int8 **)v10 + 2));
        result = (unsigned __int8 *)sub_22EFF5C90(v11, 1);
        if ((result & 1) == 0)
        {
          v13 = a5 == 17 || (a5 & 0xFFFFFFFD) == 16;
          v44 = v13;
          sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v10 + 1), 0x1A34u, 0, (uint64_t)v43);
          v14 = sub_22F2F2168((uint64_t)v43, &v45);
          sub_22E894E38(v14, (unsigned __int8 *)&v44);
          sub_22E903BEC(v43);
          sub_22F0D5A50((uint64_t)v11);
          LODWORD(v16) = v15;
          sub_22F0D60E4(*a3 & 0xFFFFFFFFFFFFFFFELL);
          v18 = sub_22F141A3C(v17, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
          if (v18)
            v16 = v16;
          else
            v16 = 0;
          sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v10 + 1), 0x164Bu, 0, (uint64_t)v43);
          v19 = sub_22E894E38((uint64_t)v43, (unsigned __int8 *)&v44);
          v38 = 0;
          v37 = 0;
          v40 = 0;
          v41 = 0x100000000000000;
          v35 = v16 | (v16 << 32);
          v36 = 0;
          v39 = (void *)40;
          v42 = 0;
          v20 = sub_22E890748(v19, &v35);
          v30 = 0;
          v29 = 0;
          v32 = 0;
          v33 = 0x100000000000000;
          v27 = v18 | ((unint64_t)v18 << 32);
          v28 = 0;
          __p = (void *)41;
          v34 = 0;
          sub_22E890748(v20, &v27);
          if (SHIBYTE(v33) < 0)
            operator delete(__p);
          if (SHIBYTE(v41) < 0)
            operator delete(v39);
          sub_22E903BEC(v43);
          v21 = *a2 & 0xFFFFFFFFFFFFFFFELL;
          sub_22F0D5A50(v21);
          LODWORD(v23) = v22;
          sub_22F0D60E4(v21);
          v25 = sub_22F141A3C(v24, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
          if (v25)
            v23 = v23;
          else
            v23 = 0;
          sub_22E8FCA40((_QWORD *)a1, *((_DWORD *)v10 + 1), 0x164Cu, 0, (uint64_t)v43);
          v38 = 0;
          v37 = 0;
          v40 = 0;
          v41 = 0x100000000000000;
          v35 = v23 | (v23 << 32);
          v36 = 0;
          v39 = (void *)40;
          v42 = 0;
          v26 = sub_22E890748((uint64_t)v43, &v35);
          v30 = 0;
          v29 = 0;
          v32 = 0;
          v33 = 0x100000000000000;
          v27 = v25 | ((unint64_t)v25 << 32);
          v28 = 0;
          __p = (void *)41;
          v34 = 0;
          sub_22E890748(v26, &v27);
          if (SHIBYTE(v33) < 0)
            operator delete(__p);
          if (SHIBYTE(v41) < 0)
            operator delete(v39);
          return (unsigned __int8 *)sub_22E903BEC(v43);
        }
      }
    }
  }
  return result;
}

void sub_22EB41B84(uint64_t a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4, int a5)
{
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  _BOOL8 v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int v46;

  v10 = sub_22EFFA6B0(a3);
  v11 = sub_22EFFA6B0(a4);
  v12 = *((_QWORD *)a4 + 1);
  v13 = *(_QWORD *)(*((_QWORD *)a3 + 1) & 0xFFFFFFFFFFFFFFF0);
  if (sub_22F110DD0(v13))
    return;
  v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((a5 & 0xFFFFFFFE) != 0xE && v14 == 10)
    return;
  if (*(_DWORD *)(a1 + 10680) > *(_DWORD *)(a1 + 11956))
    return;
  v15 = a5 - 9;
  if (a5 == 9
    && (v14 & 0xFEu) - 2 <= 3
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu)
     - 2 < 4)
  {
    return;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x10) != 0
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v10 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFEu)
     - 2 <= 3
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFEu)
     - 2 <= 3)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x1956u, 0, (uint64_t)&v44);
    sub_22F0D4E74((uint64_t)a3);
    v43 = v16;
    v17 = sub_22E8906A0((uint64_t)&v44, &v43);
    sub_22F0D4E74((uint64_t)a4);
    v42 = v18;
    v19 = sub_22E8906A0(v17, &v42);
    v41 = *((_QWORD *)v10 + 1);
    v20 = sub_22E8901B8(v19, &v41);
    v40 = *((_QWORD *)v11 + 1);
    sub_22E8901B8(v20, &v40);
    sub_22E903BEC((unsigned int *)&v44);
  }
  sub_22F0D5A50((uint64_t)a3);
  if ((v21 & 0x80000000) == 0)
  {
    sub_22F0D5A50((uint64_t)a4);
    if ((v22 & 0x80000000) == 0)
    {
      if (sub_22F001ED4(a3, a4))
      {
        if (v15 > 6)
          v23 = 0;
        else
          v23 = qword_22F481C20[v15];
        v45 = *(_QWORD *)(a1 + 88) + 2128;
        v46 = 6352;
        v29 = (_BYTE *)sub_22E3B8AAC(v45);
        v44 = (unint64_t)v29;
        v30 = v29 + 1;
        v31 = *v29;
        v30[v31] = 2;
        *v29 = v31 + 2;
        v29 += 16;
        *(_QWORD *)&v29[8 * v31] = 0;
        v32 = (v31 + 1);
        v30[v32] = 3;
        *(_QWORD *)&v29[8 * v32] = v23;
        goto LABEL_25;
      }
      if (sub_22EB55858(v10) && sub_22EB55858(v11))
      {
        if (a5 == 14)
          v24 = 2;
        else
          v24 = a5 == 15;
        v45 = *(_QWORD *)(a1 + 88) + 2128;
        v46 = 6352;
        v25 = (_BYTE *)sub_22E3B8AAC(v45);
        v44 = (unint64_t)v25;
        v26 = v25 + 1;
        v27 = *v25;
        v26[v27] = 2;
        *v25 = v27 + 2;
        v25 += 16;
        *(_QWORD *)&v25[8 * v27] = 1;
        v28 = (v27 + 1);
        v26[v28] = 3;
        *(_QWORD *)&v25[8 * v28] = v24;
LABEL_25:
        sub_22EB52944(a1, a2, 0, 0, (uint64_t *)&v44);
        if (v44 && v45)
          sub_22E3BB10C(v45, v44);
      }
    }
  }
  if ((*v10 + 113) <= 0xAu)
    v10 = sub_22EFFBBCC(v10);
  if ((*v11 + 113) <= 0xAu)
    v11 = sub_22EFFBBCC(v11);
  v33 = *v10;
  if ((v33 == 225 || v33 == 196) && !sub_22EFFBE1C((unint64_t)v11, *(_QWORD *)(a1 + 88), 1))
  {
    v11 = v10;
    a4 = a3;
LABEL_40:
    v35 = *(_QWORD *)(a1 + 88) + 2128;
    v44 = 0;
    v45 = v35;
    v46 = 7007;
    v36 = *v11 == 196;
    v37 = (_BYTE *)sub_22E3B8AAC(v35);
    v44 = (unint64_t)v37;
    v38 = *v37;
    v37[v38 + 1] = 2;
    *v37 = v38 + 1;
    *(_QWORD *)&v37[8 * v38 + 16] = v36;
    sub_22F0D4E74((uint64_t)a4);
    sub_22E4D6448((uint64_t)(v37 + 336), v39, 1);
    sub_22EB52944(a1, a2, 0, 0, (uint64_t *)&v44);
    if (v44)
    {
      if (v45)
        sub_22E3BB10C(v45, v44);
    }
    return;
  }
  v34 = *v11;
  if ((v34 == 225 || v34 == 196) && !sub_22EFFBE1C((unint64_t)v10, *(_QWORD *)(a1 + 88), 1))
    goto LABEL_40;
}

unsigned int *sub_22EB41FBC(_QWORD *a1, int a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18[24];

  if (a5)
    v7 = 4942;
  else
    v7 = 5371;
  sub_22E8FCA40(a1, a2, v7, 0, (uint64_t)v18);
  v17 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v8 = sub_22E8901B8((uint64_t)v18, &v17);
  v16 = *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v9 = sub_22E8901B8(v8, &v16);
  sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
  v15 = v10;
  v11 = sub_22E8906A0(v9, &v15);
  sub_22F0D4E74(*a4 & 0xFFFFFFFFFFFFFFFELL);
  v14 = v12;
  sub_22E8906A0(v11, &v14);
  return sub_22E903BEC(v18);
}

unint64_t sub_22EB42088(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11[24];

  v1 = *(_QWORD **)(a1 + 8);
  if (**(_DWORD **)a1 == 9)
  {
    v3 = *(_QWORD *)((**(_QWORD **)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL) + 8);
    v4 = sub_22EFB1718(v3);
    if (v4 <= 0xFFu)
    {
      sub_22F32EE84(v1, **(_DWORD **)(a1 + 24), *(_QWORD **)(a1 + 16), *(_QWORD **)(a1 + 32));
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) != 39
        || **(unsigned __int8 **)(a1 + 40) == **(unsigned __int8 **)(a1 + 48))
      {
        return sub_22EABA45C(v1, v4, **(_DWORD **)(a1 + 24), 0);
      }
      sub_22E8FCA40(v1, **(_DWORD **)(a1 + 24), 0x1397u, 0, (uint64_t)v11);
      v8 = 16;
      if (!**(_BYTE **)(a1 + 40))
        v8 = 32;
      sub_22F0D4E74(**(_QWORD **)(a1 + v8) & 0xFFFFFFFFFFFFFFFELL);
      v10 = v9;
      sub_22E8906A0((uint64_t)v11, &v10);
      sub_22E903BEC(v11);
    }
    return 0;
  }
  else
  {
    v6 = v1[11];
    v7 = 16400;
    if ((*(_BYTE *)(*(_QWORD *)(v6 + 2000) + 1) & 1) == 0)
      v7 = 16480;
    return *(_QWORD *)(v6 + v7);
  }
}

BOOL sub_22EB421E0(_QWORD *a1, int a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  BOOL v14;
  unint64_t v16;
  unint64_t v17;

  v7 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v8 = *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v16 = *a4 & 0xFFFFFFFFFFFFFFFELL;
  v17 = *a3 & 0xFFFFFFFFFFFFFFFELL;
  v10 = sub_22EBCB5F4();
  *a3 = v17;
  *a4 = v16;
  if (v10 <= 0xF)
  {
    v11 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16);
    v12 = v11 > 0x27 || ((1 << v11) & 0x8180000000) == 0;
    if (v12
      || ((v13 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 16),
           v13 <= 0x27)
        ? (v14 = ((1 << v13) & 0x8180000000) == 0)
        : (v14 = 1),
          v14))
    {
      sub_22F32EE84(a1, a2, a3, a4);
    }
    else
    {
      sub_22EB42314(a1, a2, a3, a4, 1);
    }
  }
  return v10 < 0x10;
}

unsigned int *sub_22EB42314(_QWORD *a1, int a2, _QWORD *a3, _QWORD *a4, int a5)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18[24];

  if (a5)
    v7 = 4941;
  else
    v7 = 5370;
  sub_22E8FCA40(a1, a2, v7, 0, (uint64_t)v18);
  v17 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v8 = sub_22E8901B8((uint64_t)v18, &v17);
  v16 = *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v9 = sub_22E8901B8(v8, &v16);
  sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
  v15 = v10;
  v11 = sub_22E8906A0(v9, &v15);
  sub_22F0D4E74(*a4 & 0xFFFFFFFFFFFFFFFELL);
  v14 = v12;
  sub_22E8906A0(v11, &v14);
  return sub_22E903BEC(v18);
}

unint64_t sub_22EB423E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 16) - 57 > 0xFFFFFFFD;
  else
    v5 = 0;
  if (!v5)
    v4 = sub_22F10CF48(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v7)
    v8 = (*(_DWORD *)(v7 + 16) & 0xFF800FF) == 87031819;
  else
    v8 = 0;
  if (v8)
    return a2;
  v9 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), v6);
  v10 = (*(_DWORD *)(v4 + 16) & 0x780000) == 0x80000;
  v11 = v9;
  v12 = *(_QWORD *)(a1 + 88);
  if (*(_DWORD *)(v4 + 16) == 56)
  {
    v13 = sub_22EF5CDF0(v12, *(_QWORD *)(*(_QWORD *)(v12 + 16408) & 0xFFFFFFFFFFFFFFF0));
    v14 = *(_QWORD **)(a1 + 88);
    if (v11 == v13)
    {
      v15 = v14[2051];
    }
    else
    {
      v17 = sub_22EF5CDF0((uint64_t)v14, *(_QWORD *)(v14[2059] & 0xFFFFFFFFFFFFFFF0));
      v14 = *(_QWORD **)(a1 + 88);
      if (v11 == v17)
      {
        v15 = v14[2059];
      }
      else
      {
        v18 = sub_22EF5CDF0((uint64_t)v14, *(_QWORD *)(v14[2060] & 0xFFFFFFFFFFFFFFF0));
        v14 = *(_QWORD **)(a1 + 88);
        if (v11 == v18)
        {
          v15 = v14[2060];
        }
        else
        {
          v19 = sub_22EF5CDF0((uint64_t)v14, *(_QWORD *)(v14[2063] & 0xFFFFFFFFFFFFFFF0));
          v14 = *(_QWORD **)(a1 + 88);
          if (v11 != v19)
          {
            v21 = sub_22EF5CDF0((uint64_t)v14, *(_QWORD *)(v14[2061] & 0xFFFFFFFFFFFFFFF0));
            v14 = *(_QWORD **)(a1 + 88);
            v20 = *(unsigned int *)(v4 + 20);
            if (v11 == v21)
              v15 = v14[2061];
            else
              v15 = v14[2062];
            return sub_22EF63724((uint64_t)v14, v15, v20, v10);
          }
          v15 = v14[2063];
        }
      }
    }
    v20 = *(unsigned int *)(v4 + 20);
    return sub_22EF63724((uint64_t)v14, v15, v20, v10);
  }
  v22 = sub_22EF5CDF0(v12, *(_QWORD *)(*(_QWORD *)(v12 + 16504) & 0xFFFFFFFFFFFFFFF0));
  v23 = *(_QWORD **)(a1 + 88);
  if (v11 == v22)
  {
    v24 = v23[2063];
  }
  else
  {
    v25 = sub_22EF5CDF0((uint64_t)v23, *(_QWORD *)(v23[2062] & 0xFFFFFFFFFFFFFFF0));
    v23 = *(_QWORD **)(a1 + 88);
    if (v11 == v25)
    {
      v24 = v23[2062];
    }
    else
    {
      v26 = sub_22EF5CDF0((uint64_t)v23, *(_QWORD *)(v23[2061] & 0xFFFFFFFFFFFFFFF0));
      v23 = *(_QWORD **)(a1 + 88);
      if (v11 == v26)
      {
        v24 = v23[2061];
      }
      else
      {
        v27 = sub_22EF5CDF0((uint64_t)v23, *(_QWORD *)(v23[2060] & 0xFFFFFFFFFFFFFFF0));
        v23 = *(_QWORD **)(a1 + 88);
        if (v11 != v27)
        {
          v29 = sub_22EF5CDF0((uint64_t)v23, *(_QWORD *)(v23[2059] & 0xFFFFFFFFFFFFFFF0));
          v23 = *(_QWORD **)(a1 + 88);
          v28 = *(unsigned int *)(v4 + 20);
          if (v11 == v29)
            v24 = v23[2059];
          else
            v24 = v23[2051];
          return sub_22F36B7E4((uint64_t)v23, v24, v28, v10);
        }
        v24 = v23[2060];
      }
    }
  }
  v28 = *(unsigned int *)(v4 + 20);
  return sub_22F36B7E4((uint64_t)v23, v24, v28, v10);
}

unint64_t sub_22EB42668(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int a4, unint64_t a5)
{
  unint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  unint64_t v40;
  const char *v41;
  uint64_t v42;
  unsigned int v43[24];
  int v44[2];
  int v45;
  unsigned int *v46;

  if ((sub_22EB42C34(a2, a4, (_QWORD *)a1) & 1) != 0)
    return 0;
  v12 = a2[1];
  *(_QWORD *)v44 = v12;
  v13 = a5;
  if (a5 <= 0xF)
    v13 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v14 = *(_QWORD *)(a1 + 72);
  if ((*(_DWORD *)(v14 + 52) & 0x40000000) != 0 && !sub_22F420564(a1 + 24, (uint64_t)"cl_khr_fp16", 11, v14))
  {
    v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v37 && (*(_DWORD *)(v37 + 16) & 0xFF800FF) == 110100491)
    {
      sub_22E8FCA40((_QWORD *)a1, a4, 0x1133u, 0, (uint64_t)v43);
      v45 = 1;
      v39 = sub_22E8900C4((uint64_t)v43, &v45);
      v40 = *(_QWORD *)(*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v40 + 8) & 0xF) != 0)
        v40 = (unint64_t)sub_22F10D2BC(*(uint64_t *)v44);
      v46 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF0);
      sub_22E8901B8(v39, (uint64_t *)&v46);
      sub_22E903BEC(v43);
      return 0;
    }
  }
  if (a5 > 0xF)
  {
    sub_22E5BBE34((uint64_t)v43, a4, v13, 0, 0, 0);
    v46 = v43;
    v45 = 0;
    v17 = sub_22EB376DC(a1, v12, (uint64_t *)&v46, &v45, 0);
    goto LABEL_15;
  }
  v15 = (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL);
  sub_22EB43314((unsigned __int8 *)a2, (unsigned __int8 **)v15, a4, a1);
  v16 = sub_22EB392FC(a1, v12, a3, 1, 0, 1);
  if ((*(_BYTE *)a3 & 1) != 0)
    return 0;
  v17 = v16;
  if (v16 == 15)
  {
    v18 = v12 & 0xFFFFFFFFFFFFFFF0;
    v23 = sub_22F115064(*(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0));
    v24 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if ((!v23 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v24 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32)
      && (!sub_22F115064(v24)
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32))
    {
      v19 = 0;
      v17 = 15;
      goto LABEL_29;
    }
  }
  else
  {
    if (v16)
    {
      v19 = 0;
      goto LABEL_29;
    }
    v18 = v12 & 0xFFFFFFFFFFFFFFF0;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFFFF0) + 16)
     - 33 <= 1)
  {
    sub_22E8FCA40((_QWORD *)a1, a4, 0x1008u, 0, (uint64_t)v43);
    sub_22E8901B8((uint64_t)v43, (uint64_t *)v44);
    sub_22E903BEC(v43);
  }
  v17 = 0;
  v19 = 1;
LABEL_29:
  v25 = *v15;
  if (v25 == 153)
  {
    v15 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
    v25 = *v15;
  }
  if (v25 != 233
    || (*(_DWORD *)v15 & 0x780000) != 0x180000
    || (a4 & 0x80000000) != 0
    || (v26 = *((_DWORD *)v15 + 1), v26 < 0)
    || a4 + 1 != v26
    || (sub_22F0D5A50(*((_QWORD *)v15 + 2)), a4 + 2 == v27)
    || v27 < 0)
  {
    if (v19)
      goto LABEL_39;
  }
  else
  {
    sub_22E8FCA40((_QWORD *)a1, a4, 0x1A80u, 0, (uint64_t)v43);
    if ((*(_DWORD *)v15 & 0x7C0000) == 0x180000)
      v41 = "+";
    else
      v41 = "-";
    v42 = sub_22F311B00((uint64_t)v43, (uint64_t)v41);
    LODWORD(v46) = *((_DWORD *)v15 + 1);
    HIDWORD(v46) = (_DWORD)v46;
    sub_22E8906A0(v42, (uint64_t *)&v46);
    sub_22E903BEC(v43);
    if (v19)
    {
LABEL_39:
      v28 = *(_QWORD *)((*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v28 & 8) != 0 && (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0x80)
      {
        v29 = sub_22EFFBBCC((unsigned __int8 *)a2);
        if (*v29 != 161 || sub_22E49C868(*((_QWORD *)v29 + 2)))
          sub_22F3112E4((_QWORD *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
      }
      v30 = *(_QWORD *)((*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v30 & 8) != 0)
      {
        v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0;
        if (v31 == 128 || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000) + 148) & 0xALL) == 8 && v31 != 192)
        {
LABEL_52:
          v32 = *(_QWORD *)(a1 + 104);
          v33 = *a3 & 0xFFFFFFFFFFFFFFFELL;
          sub_22F0D5A50(v33);
          if (sub_22F1CF68C(*(_QWORD *)(v32 + 32), 0x183Cu, v34, v32) != 1)
          {
            v35 = *(unsigned int *)(a1 + 1904);
            if ((_DWORD)v35)
              v36 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v35 - 8);
            else
              v36 = 0;
            sub_22E8FBEA0(v36, v33);
          }
          goto LABEL_15;
        }
      }
      else if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000) + 148) & 0xALL) == 8)
      {
        goto LABEL_52;
      }
      if ((*(_WORD *)(*(_QWORD *)(a1 + 72) + 148) & 0xALL) != 0)
        sub_22E99011C(a1, a4, (unint64_t)a2, (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL));
    }
  }
LABEL_15:
  v20 = sub_22EB43580(a1, v17, a4, *(uint64_t *)v44, v13, (unsigned __int8 *)(*a3 & 0xFFFFFFFFFFFFFFFELL), 0, 0);
  result = 0;
  if ((v20 & 1) == 0)
  {
    sub_22EB1B210(a1, (unsigned __int8 *)a2);
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 0x10) != 0
      && ((v44[0] & 4) != 0 || (*(_BYTE *)((*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0))
    {
      if (a5 > 0xF)
      {
        sub_22E8FCA40((_QWORD *)a1, a4, 0x195Bu, 0, (uint64_t)v43);
        sub_22E8901B8((uint64_t)v43, (uint64_t *)v44);
        sub_22E903BEC(v43);
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696);
        v22 = *(_DWORD *)(v21 - 144);
        if (v22 >= *(_DWORD *)(v21 - 140))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v22 = *(_DWORD *)(v21 - 144);
        }
        *(_QWORD *)(*(_QWORD *)(v21 - 152) + 8 * v22) = a2;
        ++*(_DWORD *)(v21 - 144);
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
      return *(_QWORD *)v44;
    else
      return sub_22F110438((uint64_t *)v44);
  }
  return result;
}

uint64_t sub_22EB42C34(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  int v71;
  void **v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;

  v75 = a2;
  v74 = a1;
  v6 = a2;
  sub_22EA20274((uint64_t)a3, (unsigned __int8 *)a1, a2);
  v7 = sub_22F004C08((uint64_t)a1, a3[11], (int *)&v75);
  result = 0;
  v9 = 0;
  switch(v7)
  {
    case 0:
      return result;
    case 1:
      v9 = 4998;
      goto LABEL_30;
    case 2:
    case 6:
      v10 = a1[1];
      v70 = &unk_24FAB6ED0;
      v71 = 4978;
      v72 = (void **)&v74;
      return sub_22EE8B0B0((uint64_t)a3, v75, v10);
    case 3:
      LODWORD(result) = 0;
      v9 = 4964;
      goto LABEL_48;
    case 4:
    case 12:
      goto LABEL_37;
    case 5:
      LODWORD(result) = 0;
      v9 = 4988;
      goto LABEL_48;
    case 7:
      v11 = (unsigned __int8 *)a1;
      break;
    case 8:
      v23 = v75;
      v24 = a1[1];
      sub_22F0D4E74((uint64_t)a1);
      v26 = v25;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) == 45)
        v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                    + 8) & 0xFFFFFFFFFFFFFFF0);
      else
        v27 = 0;
      LOBYTE(v70) = 0;
      v28 = *(unsigned __int8 *)a1;
      if (v28 == 161)
      {
        v29 = a1[2];
        v30 = a3;
        v31 = v23;
        v32 = 0;
      }
      else if (v28 == 188)
      {
        v29 = a1[3];
        v30 = a3;
        v31 = v23;
        v32 = 1;
      }
      else
      {
        v30 = a3;
        v29 = 0;
        v31 = v23;
        v32 = 2;
      }
      sub_22EB56350(v30, v29, v27, v31, v26, v32, &v70);
      if ((_BYTE)v70)
        return 1;
      v19 = a3;
      v20 = (uint64_t)a1;
      v18 = v23;
      goto LABEL_28;
    case 9:
      goto LABEL_27;
    case 10:
    case 16:
      v9 = 4917;
LABEL_30:
      LODWORD(result) = 1;
      goto LABEL_48;
    case 11:
      goto LABEL_48;
    case 13:
      LODWORD(result) = 0;
      v9 = 4016;
      goto LABEL_48;
    case 14:
      goto LABEL_36;
    case 15:
      if (*(unsigned __int8 *)a1 == 188
        && (*(_DWORD *)(a1[3] + 28) & 0x7Fu) - 49 <= 2
        && (v21 = sub_22EFFED0C((unsigned __int8 *)a1[2]), v22 = sub_22EFFA6B0(v21), *v22 == 200)
        && (v22[27] & 1) != 0
        && *((_QWORD *)v22 + 2))
      {
LABEL_36:
        LODWORD(result) = 0;
        v9 = 4621;
      }
      else
      {
LABEL_37:
        LODWORD(result) = 0;
        v9 = 4968;
      }
      goto LABEL_48;
    case 17:
      LODWORD(result) = 0;
      v9 = 4970;
      goto LABEL_48;
    default:
      v9 = 0;
      goto LABEL_48;
  }
  do
  {
    v12 = v11;
    v13 = *v11;
    if (v13 > 0xD5)
    {
      if (v13 == 233)
      {
        if ((*(_DWORD *)v11 & 0x7C0000) != 0x300000)
          goto LABEL_23;
        v13 = *(_DWORD *)v11;
        v15 = v11 + 16;
      }
      else
      {
        if (v13 != 214)
          break;
        v15 = v11 + 24;
      }
    }
    else if (v13 == 155)
    {
      if ((**((_DWORD **)v11 + 2) & 0x18000) != 0)
        goto LABEL_23;
      v15 = v11 + 24;
      if (!v12[48])
        v15 = v12 + 32;
      v13 = 155;
    }
    else
    {
      if (v13 != 176)
        break;
      v14 = *((unsigned int *)v11 + 5);
      if ((_DWORD)v14 == -1)
        goto LABEL_23;
      v15 = &v11[8 * v14 + 40];
      v13 = 176;
    }
    v11 = *(unsigned __int8 **)v15;
  }
  while (v11 != v12);
  if (v13 != 161
    || (v12[2] & 0x40) == 0
    || (v40 = *((_QWORD *)v12 + 2)) == 0
    || (v41 = *(_DWORD *)(v40 + 28) & 0x7F, (v41 - 67) < 0xFFFFFFF9)
    || (v42 = *(_QWORD *)(v40 + 48), (v42 & 1) != 0)
    || (*(_BYTE *)((v42 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
  {
LABEL_23:
    if ((*(_WORD *)(a3[9] + 148) & 2) == 0
      || (v16 = sub_22EFFBBCC((unsigned __int8 *)a1), *v16 != 161)
      || (v17 = *((_QWORD *)v16 + 2), (*(_DWORD *)(v17 + 28) & 0x7Fu) - 60 > 6)
      || (*(char *)(v17 + 96) & 0x80000000) == 0)
    {
LABEL_27:
      v18 = v75;
      v19 = a3;
      v20 = (uint64_t)a1;
LABEL_28:
      sub_22EB55B44(v19, v20, v18);
      return 1;
    }
    v57 = *(_QWORD *)(v17 + 56);
    if ((v57 & 4) != 0)
    {
      v58 = *(uint64_t **)((v57 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (!v58)
        goto LABEL_106;
    }
    else
    {
      if (v57 < 8)
        goto LABEL_106;
      v58 = (uint64_t *)(v57 & 0xFFFFFFFFFFFFFFF8);
    }
    v59 = *v58;
    if ((v59 & 1) != 0 || (*(_BYTE *)((v59 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
      goto LABEL_27;
LABEL_106:
    v60 = sub_22E90328C((uint64_t)a3);
    if (v60 && v17 == *(_QWORD *)(v60 + 120))
    {
      if ((*(_BYTE *)(v60 + 58) & 2) != 0)
        v65 = 4913;
      else
        v65 = 4914;
    }
    else
    {
      if ((*(_BYTE *)(v17 + 29) & 1) == 0)
        goto LABEL_129;
      sub_22EFC8E88(v17);
      v62 = *((unsigned int *)v61 + 2);
      if ((_DWORD)v62)
      {
        v63 = 8 * v62;
        v64 = *v61;
        while (*(_WORD *)(*(_QWORD *)v64 + 32) != 259)
        {
          v64 += 8;
          v63 -= 8;
          if (!v63)
            goto LABEL_129;
        }
      }
      else
      {
        v64 = *v61;
      }
      if (v64 == *v61 + 8 * v62)
      {
LABEL_129:
        if ((*(_DWORD *)(v17 + 28) & 0x7F) == 0x40)
          v65 = 4912;
        else
          v65 = 4916;
      }
      else
      {
        v65 = 4912;
      }
    }
    v73 = 0;
    if (v75 != a2)
      v73 = v6 | (v6 << 32);
    sub_22E8FCA40(a3, v75, v65, 0, (uint64_t)&v70);
    sub_22F0D4E74((uint64_t)a1);
    v69 = v66;
    v67 = sub_22E8906A0((uint64_t)&v70, &v69);
    sub_22E8906A0(v67, &v73);
    sub_22E903BEC((unsigned int *)&v70);
    return 0;
  }
  v43 = a3[27];
  if (!v43)
  {
    v45 = 0;
    goto LABEL_120;
  }
  v44 = 0;
  while (1)
  {
    v45 = v43;
    if ((*(_WORD *)(v43 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA
      && (*(_DWORD *)(v40 + 28) & 0x7F) != 0x40
      && (*(_BYTE *)(v40 + 98) & 1) != 0)
    {
      v46 = sub_22EFC20FC(v43 - 72, 1);
      v47 = (_QWORD *)(v46 + 72);
      if (!v46)
        v47 = 0;
      v48 = *(_QWORD *)(v40 + 16);
      v49 = (_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF8);
      if ((v48 & 4) != 0)
        v49 = (_QWORD *)*v49;
      if (v47 == v49)
        break;
    }
    v50 = *(_QWORD *)(v40 + 16);
    v51 = (_QWORD *)(v50 & 0xFFFFFFFFFFFFFFF8);
    if ((v50 & 4) != 0)
      v51 = (_QWORD *)*v51;
    if ((_QWORD *)v45 == v51)
      break;
    v52 = *(_WORD *)(v45 + 8) & 0x7F;
    v53 = -40;
    if (v52 > 0x46)
    {
      if (v52 != 83)
      {
        if (v52 == 71)
        {
          v53 = -56;
        }
        else if (v52 != 81)
        {
          goto LABEL_88;
        }
      }
    }
    else
    {
      if (v52 > 0x18)
        goto LABEL_87;
      if (v52 == 16)
        goto LABEL_80;
      if (((1 << v52) & 0x1066) != 0)
        goto LABEL_94;
      if (v52 == 24)
      {
LABEL_80:
        v53 = -48;
      }
      else
      {
LABEL_87:
        if (v52 != 70)
        {
LABEL_88:
          v54 = v52 - 52;
          if (v52 - 33 >= 5)
            v55 = -48;
          else
            v55 = -64;
          if (v54 >= 6)
            v53 = v55;
          else
            v53 = -72;
          goto LABEL_94;
        }
        v53 = -64;
      }
    }
LABEL_94:
    v56 = *(_QWORD *)(v45 + v53 + 16);
    v43 = v56 & 0xFFFFFFFFFFFFFFF8;
    if ((v56 & 4) != 0)
      v43 = *(_QWORD *)v43;
    v44 = v45;
    if (!v43)
      goto LABEL_119;
  }
  v43 = v45;
  v45 = v44;
LABEL_119:
  v41 = *(_DWORD *)(v40 + 28) & 0x7F;
LABEL_120:
  if (v41 != 64 && (*(_BYTE *)(v40 + 98) & 1) != 0)
    v45 = v43;
  LODWORD(result) = 0;
  if ((*(_WORD *)(v45 + 8) & 0x7F) == 1)
    v9 = 2952;
  else
    v9 = 3713;
LABEL_48:
  v73 = 0;
  if (v75 != a2)
    v73 = v6 | (v6 << 32);
  if ((_DWORD)result)
  {
    sub_22E8FCA40(a3, v75, v9, 0, (uint64_t)&v70);
    v33 = (uint64_t)v74;
    v69 = v74[1];
    v34 = sub_22E8901B8((uint64_t)&v70, &v69);
    sub_22F0D4E74(v33);
    v68 = v35;
    v36 = &v68;
    v37 = (void **)v34;
  }
  else
  {
    sub_22E8FCA40(a3, v75, v9, 0, (uint64_t)&v70);
    sub_22F0D4E74((uint64_t)v74);
    v69 = v38;
    v37 = &v70;
    v36 = &v69;
  }
  v39 = sub_22E8906A0((uint64_t)v37, v36);
  sub_22E8906A0(v39, &v73);
  sub_22E903BEC((unsigned int *)&v70);
  return 1;
}

void sub_22EB43314(unsigned __int8 *a1, unsigned __int8 **a2, int a3, uint64_t a4)
{
  unsigned int v6;
  BOOL v7;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  unsigned __int8 **v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  unsigned int v30[24];

  if (*(_DWORD *)(a4 + 10680) > *(_DWORD *)(a4 + 11956))
    return;
  v6 = *(_DWORD *)(*(_QWORD *)(a4 + 3688) + 576 * *(unsigned int *)(a4 + 3696) - 576);
  v7 = v6 > 3 || v6 == 2;
  if (!v7 || a3 < 1)
    return;
  sub_22EFF605C((uint64_t)a1);
  if (v11 < 0)
    return;
  sub_22EFF605C((uint64_t)a2);
  if (v12 < 0)
    return;
  v13 = *a1;
  v14 = *(unsigned __int8 *)a2;
  if (v14 == 188)
    v15 = a2;
  else
    v15 = 0;
  if (v13 == 188)
    v16 = a1;
  else
    v16 = 0;
  if (v13 != 188 || v14 != 188)
    goto LABEL_39;
  if (**((unsigned __int8 **)v16 + 2) != 133)
    return;
  if (*v15[2] != 133)
    return;
  v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v16 + 3) + 32))(*((_QWORD *)v16 + 3));
  if (v17 != (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v15[3] + 32))(v15[3]))
    return;
  v18 = *(_QWORD *)(v17 + 48);
  if ((v18 & 4) != 0)
    return;
  v19 = v18 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_BYTE *)(v19 + 8) & 4) != 0)
    return;
  v20 = *(_QWORD *)v19;
  if (!*(_QWORD *)v19 || (v21 = *(_DWORD *)(v20 + 16), (v21 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
      || (v20 = sub_22F10CF48(v20)) == 0)
    {
LABEL_38:
      sub_22E8FCA40((_QWORD *)a4, a3, 0x19DEu, 0, (uint64_t)v30);
      v29 = 0;
      sub_22E8900C4((uint64_t)v30, &v29);
      sub_22E903BEC(v30);
      v13 = *a1;
      v14 = *(unsigned __int8 *)a2;
LABEL_39:
      if (v14 != 199)
        a2 = 0;
      v24 = v13 == 199;
      if (v13 == 199)
        v25 = (unsigned __int8 **)a1;
      else
        v25 = 0;
      if (v24 && v14 == 199 && v25[2] == a2[2])
      {
        v26 = sub_22EFFEB40(v25[3]);
        v27 = *v26;
        v28 = sub_22EFFEB40(a2[3]);
        if (v27 == 161 && *v28 == 161 && *((_QWORD *)v26 + 2) == *((_QWORD *)v28 + 2))
        {
          sub_22E8FCA40((_QWORD *)a4, a3, 0x19DEu, 0, (uint64_t)v30);
          v29 = 1;
          sub_22E8900C4((uint64_t)v30, &v29);
          sub_22E903BEC(v30);
        }
      }
      return;
    }
    v21 = *(_DWORD *)(v20 + 16);
  }
  if ((v21 & 0x100000) != 0)
  {
    do
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v20 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v20)
      {
        v22 = *(_DWORD *)(v20 + 16);
        if ((v22 & 0xFE) == 0x28)
          continue;
      }
      v20 = sub_22F10CF48(v20);
      v22 = *(_DWORD *)(v20 + 16);
    }
    while ((v22 & 0x100000) != 0);
  }
  v23 = *(_QWORD *)(v20 + 32);
  if ((v23 & 4) == 0 && (*(_BYTE *)((v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
    goto LABEL_38;
}

uint64_t sub_22EB43580(uint64_t a1, int a2, int a3, uint64_t a4, unint64_t a5, unsigned __int8 *a6, unsigned int a7, _BYTE *a8)
{
  _BYTE *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  int v32;
  BOOL v35;
  unint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  unsigned __int8 *v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  int v50;
  unsigned __int8 *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  int v64;
  char v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  unsigned __int16 *v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unint64_t v85;
  _BYTE *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _BOOL4 v91;
  unsigned __int8 *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  BOOL v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  BOOL v112;
  _BOOL4 v113;
  _BOOL8 v114;
  uint64_t v115;
  _BOOL8 v116;
  unsigned __int8 *v117;
  uint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  unsigned __int8 *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  unsigned __int8 *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 *v131;
  int v132;
  unint64_t v133;
  char v134;
  unint64_t *v135;
  unsigned __int8 *v136;
  unint64_t v137;
  unsigned __int8 *v138;
  uint64_t v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  uint64_t v142;
  void **v143;
  size_t v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *i;
  uint64_t v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  BOOL v154;
  unint64_t v155;
  uint64_t v156;
  unsigned __int8 *v157;
  unint64_t v159;
  unsigned __int8 *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  int v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  unsigned int v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v187;
  uint64_t v188;
  void *v189[2];
  char v190;
  void *__p[2];
  char v192;
  unsigned int v193[24];
  unsigned __int8 *v194;
  unint64_t v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  int64x2_t v199;
  __int128 v200;
  uint64_t (*v201)(uint64_t, uint64_t, uint64_t, unsigned int);

  v8 = a8;
  v9 = a7;
  v10 = a6;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  v14 = a2;
  v15 = a1;
  if (a8)
    *a8 = 0;
  v199 = 0u;
  v200 = 0u;
  v201 = sub_22F335800;
  v197 = 0;
  v198 = 0;
  switch(a2)
  {
    case 0:
      sub_22ED30954((_QWORD *)a1, a4, a5, a6);
      goto LABEL_111;
    case 1:
      v39 = (**(_QWORD **)(a1 + 72) & 0x100) == 0;
      v40 = a6;
      v41 = (**(_QWORD **)(a1 + 72) & 0x100uLL) >> 8;
      v42 = 5382;
      v43 = 4957;
      goto LABEL_57;
    case 2:
      v39 = (**(_QWORD **)(a1 + 72) & 0x100) == 0;
      v40 = a6;
      v41 = (**(_QWORD **)(a1 + 72) & 0x100uLL) >> 8;
      v42 = 5381;
      v43 = 4956;
      goto LABEL_57;
    case 3:
      sub_22EC36954(&v199, a6, a5, a4, a1);
      v16 = 0;
      v178 = 0;
      v181 = 0;
      v17 = 3434;
      v180 = 1;
      LOBYTE(v36) = 1;
      goto LABEL_51;
    case 4:
      sub_22EC36954(&v199, a6, a5, a4, a1);
      goto LABEL_36;
    case 5:
      sub_22EC36954(&v199, a6, a5, a4, a1);
      v44 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
      if ((v44 && *(_BYTE *)(v44 + 16) == 39
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39
         && (v44 = sub_22F10CF48(v44)) != 0)
        && (*(_BYTE *)(v44 + 40) & 7) != 1)
      {
        v11 = sub_22EF5B848(*(_QWORD *)(v15 + 88), *(_QWORD *)(v44 + 32), 1u);
        v16 = 0;
        v178 = 0;
        v180 = 0;
        v181 = 0;
        LOBYTE(v184) = 1;
      }
      else
      {
LABEL_36:
        v16 = 0;
        v178 = 0;
        v180 = 0;
        v181 = 0;
        LOBYTE(v184) = 1;
      }
      v17 = 3468;
      goto LABEL_104;
    case 6:
      sub_22EC36954(&v199, a6, a5, a4, a1);
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      v9 = 3;
      LOBYTE(v184) = 1;
      v17 = 3413;
      goto LABEL_104;
    case 7:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      LOBYTE(v184) = 0;
      v181 = 0;
      v17 = 6559;
      goto LABEL_104;
    case 8:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      LOBYTE(v184) = 1;
      v17 = 3409;
      goto LABEL_104;
    case 9:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      LOBYTE(v184) = 1;
      v17 = 3411;
      goto LABEL_104;
    case 10:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      LOBYTE(v184) = 1;
      v17 = 3412;
      goto LABEL_104;
    case 11:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      LOBYTE(v184) = 1;
      v17 = 3408;
      goto LABEL_104;
    case 12:
    case 13:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      LOBYTE(v184) = 1;
      v17 = 3410;
      goto LABEL_104;
    case 14:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      v35 = (**(_QWORD **)(a1 + 72) & 0x100) == 0;
      v36 = (**(_QWORD **)(a1 + 72) & 0x100uLL) >> 8;
      v37 = 5383;
      v38 = 4958;
      goto LABEL_48;
    case 15:
      if (a7 == 7)
      {
        LOBYTE(v184) = 0;
        v182 = 2679;
      }
      else
      {
        if ((**(_QWORD **)(a1 + 72) & 0x100) != 0)
          v66 = 4954;
        else
          v66 = 5379;
        v182 = v66;
        v184 = (**(_QWORD **)(a1 + 72) & 0x100uLL) >> 8;
      }
      v67 = a4 & 0xFFFFFFFFFFFFFFF0;
      v68 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
      v69 = *(_QWORD *)(v68 + 8);
      if (*(_BYTE *)(*(_QWORD *)(v69 & 0xFFFFFFFFFFFFFFF0) + 16) == 32
        && (v70 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0),
            v71 = *(_QWORD *)(v70 + 8),
            *(_BYTE *)(*(_QWORD *)(v71 & 0xFFFFFFFFFFFFFFF0) + 16) == 32))
      {
        if ((v71 & 0xF) != 0)
        {
          v70 = (unint64_t)sub_22F10D2BC(a5);
          v68 = *(_QWORD *)v67;
          v69 = *(_QWORD *)(*(_QWORD *)v67 + 8);
        }
        v11 = v70 & 0xFFFFFFFFFFFFFFF0;
        v10 = a6;
        if ((v69 & 0xF) != 0)
          v68 = (unint64_t)sub_22F10D2BC(a4);
        v17 = v182;
        v16 = 0;
        v178 = 0;
        v12 = v68 & 0xFFFFFFFFFFFFFFF0;
        v180 = 1;
        v181 = 1;
      }
      else
      {
        v10 = a6;
        v12 = a4;
        sub_22EC36954(&v199, a6, a5, a4, v15);
        v16 = 0;
        v178 = 0;
        v181 = 0;
        v180 = 1;
        v17 = v182;
      }
      goto LABEL_104;
    case 16:
      v39 = (**(_QWORD **)(a1 + 72) & 0x100) == 0;
      v40 = a6;
      v41 = (**(_QWORD **)(a1 + 72) & 0x100uLL) >> 8;
      v42 = 5378;
      v43 = 4953;
LABEL_57:
      if (v39)
        v55 = v42;
      else
        v55 = v43;
      sub_22EC36954(&v199, v40, a5, a4, a1);
      v178 = 0;
      v181 = 0;
      v180 = 1;
      LOBYTE(v184) = v41;
      v10 = v40;
      v17 = v55;
      v16 = 0;
      goto LABEL_104;
    case 17:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      v35 = (**(_QWORD **)(a1 + 72) & 0x100) == 0;
      v36 = (**(_QWORD **)(a1 + 72) & 0x100uLL) >> 8;
      v37 = 5380;
      v38 = 4955;
      goto LABEL_48;
    case 18:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
      {
        if ((sub_22EBC44E0(a1, a6, a4) & 1) != 0)
          goto LABEL_111;
        v45 = **(_QWORD **)(v15 + 72) & 0x100;
      }
      else
      {
        v45 = 0;
      }
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      v30 = v45 == 0;
      LOBYTE(v184) = v45 != 0;
      v31 = 5377;
      v32 = 4950;
LABEL_89:
      if (v30)
        v17 = v31;
      else
        v17 = v32;
      goto LABEL_104;
    case 19:
      v47 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
      {
        v11 = sub_22EF5F824(*(_QWORD *)(v15 + 88), a5);
        v47 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
      }
      v50 = v13;
      v51 = v10;
      v52 = *(_QWORD *)((sub_22F10ACF8(v47) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v52 & 8) != 0)
      {
        v72 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v54 = v72;
        v53 = HIDWORD(v72);
      }
      else
      {
        v53 = 0;
        v54 = 0;
      }
      v73 = *(_QWORD *)((sub_22F10ACF8(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v73 & 8) != 0)
      {
        v74 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v75 = v74;
      }
      else
      {
        HIDWORD(v74) = 0;
        v75 = 0;
      }
      if ((v75 ^ v54) > 0x7FF)
      {
        v16 = 0;
        v178 = 0;
        v180 = 0;
        v181 = 0;
        LOBYTE(v184) = 1;
        v10 = v51;
        v12 = a4;
        v8 = a8;
        v13 = v50;
        v9 = a7;
        v14 = a2;
        v17 = 4972;
      }
      else
      {
        v16 = 0;
        v178 = 0;
        v180 = 0;
        v181 = 0;
        if (v53 == HIDWORD(v74))
          v76 = 4974;
        else
          v76 = 4975;
        LOBYTE(v184) = 1;
        v10 = v51;
        v12 = a4;
        v8 = a8;
        v13 = v50;
        v9 = a7;
        v14 = a2;
        v17 = v76;
      }
      goto LABEL_104;
    case 20:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      LOBYTE(v184) = 1;
      v17 = 4973;
      goto LABEL_104;
    case 21:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      v35 = (**(_QWORD **)(a1 + 72) & 0x100) == 0;
      v36 = (**(_QWORD **)(a1 + 72) & 0x100uLL) >> 8;
      v37 = 5309;
      v38 = 3995;
      goto LABEL_48;
    case 22:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      LOBYTE(v184) = 1;
      v17 = 3990;
      goto LABEL_104;
    case 23:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      LOBYTE(v184) = 1;
      v17 = 3579;
      goto LABEL_104;
    case 24:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      v35 = (**(_QWORD **)(a1 + 72) & 0x100) == 0;
      v36 = (**(_QWORD **)(a1 + 72) & 0x100uLL) >> 8;
      v37 = 6670;
      v38 = 3582;
LABEL_48:
      if (v35)
        v17 = v37;
      else
        v17 = v38;
LABEL_51:
      LOBYTE(v184) = v36;
      goto LABEL_104;
    case 25:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      LOBYTE(v184) = 1;
      v17 = 3627;
      goto LABEL_104;
    case 26:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      LOBYTE(v184) = 1;
      v17 = 4952;
      goto LABEL_104;
    case 27:
      v22 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFF0);
      v23 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
      if ((v23 && *(_BYTE *)(v23 + 16) == 32
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
         && (v23 = sub_22F10CF48(v23)) != 0)
        && sub_22E491464(v23))
      {
        v163 = *v22;
        if (!*v22 || *(_BYTE *)(v163 + 16) != 32)
          v163 = sub_22F10CF48(v163);
        v13 = a3;
        v164 = (uint64_t *)sub_22F3174CC(v163);
        v9 = a7;
        if (v164 == v165)
        {
          v178 = 0;
        }
        else
        {
          v178 = *v164;
          v197 = *v164;
        }
        v15 = a1;
        v169 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF0);
        v14 = a2;
        if (!v169 || *(_BYTE *)(v169 + 16) != 32)
          v169 = sub_22F10CF48(v169);
        v170 = sub_22F40A120(v169);
        if (v170)
        {
          v16 = sub_22F409D88(v170);
          v198 = v16;
        }
        else
        {
          v16 = 0;
        }
      }
      else
      {
        v24 = v8;
        v25 = v12;
        v26 = v10;
        v27 = v25;
        v28 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFF0);
        v29 = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0);
        if ((v29 && *(_BYTE *)(v29 + 16) == 32
           || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 32
           && (v29 = sub_22F10CF48(v29)) != 0)
          && sub_22E491464(v29))
        {
          v166 = *v28;
          if (!*v28 || *(_BYTE *)(v166 + 16) != 32)
            v166 = sub_22F10CF48(v166);
          v167 = (uint64_t *)sub_22F3174CC(v166);
          v10 = v26;
          if (v167 == v168)
          {
            v178 = 0;
          }
          else
          {
            v178 = *v167;
            v197 = *v167;
          }
          v12 = v27;
          v171 = *v22;
          v8 = v24;
          if (!*v22 || *(_BYTE *)(v171 + 16) != 32)
            v171 = sub_22F10CF48(v171);
          v13 = a3;
          v172 = sub_22F40A120(v171);
          v9 = a7;
          if (v172)
          {
            v16 = sub_22F409D88(v172);
            v198 = v16;
          }
          else
          {
            v16 = 0;
          }
        }
        else
        {
          v178 = 0;
          v10 = v26;
          v12 = v27;
          v8 = v24;
          v16 = 0;
          v13 = a3;
          v9 = a7;
        }
        v15 = a1;
        v14 = a2;
      }
      v180 = 0;
      v181 = 0;
      v30 = (**(_QWORD **)(v15 + 72) & 0x100) == 0;
      v184 = (**(_QWORD **)(v15 + 72) & 0x100uLL) >> 8;
      v31 = 6669;
      v32 = 3580;
      goto LABEL_89;
    case 28:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v181 = 0;
      LOBYTE(v184) = 1;
      v17 = 2685;
      goto LABEL_104;
    case 29:
      v61 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
      if ((!v61 || *(_BYTE *)(v61 + 16) != 39)
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v61 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
         || (v61 = sub_22F10CF48(v61)) == 0)
        || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 > 1
        || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a6 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 > 1
        || (v62 = sub_22EFFA6B0(a6), *v62 != 161)
        || (v63 = *((_QWORD *)v62 + 2)) == 0
        || (*(_DWORD *)(v63 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA
        || (sub_22F0D5A50((uint64_t)a6), sub_22ED10E50((_QWORD *)a1, v63, 1, 0, v64)))
      {
        v77 = a1;
        sub_22EC36954(&v199, a6, v11, v12, a1);
        v16 = 0;
        v178 = 0;
        v181 = 0;
        v180 = 0x100000001;
        LOBYTE(v184) = 1;
        v78 = a2;
        v10 = a6;
        v17 = 4951;
        v13 = a3;
        v9 = a7;
        v15 = v77;
        v14 = v78;
LABEL_104:
        v79 = sub_22F1CEE18(v17);
        if (v79 && (*(_DWORD *)(v79 + 1) & 0x3F00) == 0xE00)
        {
          v80 = sub_22F1E361C(*(_QWORD **)(v15 + 112), v13);
          if (v9 <= 7)
          {
            if (((1 << v9) & 0xEC) == 0)
            {
              v185 = v12;
              v187 = v11;
              if (((1 << v9) & 0x11) != 0)
                goto LABEL_115;
              if (v80 && v80 != 3)
              {
LABEL_111:
                v65 = 0;
                goto LABEL_216;
              }
            }
LABEL_114:
            v185 = v11;
            v187 = v12;
            goto LABEL_115;
          }
        }
        else if (v9 <= 7)
        {
          v185 = v12;
          v187 = v11;
          if (((1 << v9) & 0xEE) == 0)
            goto LABEL_115;
          goto LABEL_114;
        }
        v185 = 0;
        v187 = 0;
LABEL_115:
        v179 = v16;
        v81 = *(_QWORD *)(v15 + 88) + 2128;
        v194 = 0;
        v195 = v81;
        v196 = v17;
        if (v9 == 7)
          v82 = 1;
        else
          v82 = v9;
        v183 = v17;
        if (v17 != 6559)
        {
          v194 = (unsigned __int8 *)sub_22E3B8AAC(v81);
          v194[*v194 + 1] = 9;
          v92 = v194;
          v93 = *v194;
          *v194 = v93 + 1;
          *(_QWORD *)&v92[8 * v93 + 16] = v185;
          v92[(v93 + 1) + 1] = 9;
          v94 = v194;
          v95 = *v194;
          *v194 = v95 + 1;
          *(_QWORD *)&v94[8 * v95 + 16] = v187;
          v94[(v95 + 1) + 1] = 2;
          v96 = (uint64_t)v10;
          v97 = v194;
          v98 = *v194;
          *v194 = v98 + 1;
          *(_QWORD *)&v97[8 * v98 + 16] = v82;
          v99 = (unsigned __int8 *)v96;
          sub_22F0D4E74(v96);
          sub_22E4D6448((uint64_t)(v97 + 336), v100, 1);
          if (v17 == 5380 || v17 == 4955)
          {
            v176 = v13;
            v101 = *(_QWORD *)(v185 & 0xFFFFFFFFFFFFFFF0);
            v102 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v101 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v102 == 39 || v102 == 32)
            {
              v101 = *(_QWORD *)(sub_22F10ACF8(*(_QWORD *)(v185 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0);
            }
            else if ((v102 & 0xFEu) - 2 <= 3)
            {
              v159 = v12;
              v160 = v99;
              if (v101)
                goto LABEL_261;
LABEL_262:
              while ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v101 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
              {
                v173 = sub_22F10CF48(v101);
                v99 = v160;
                v12 = v159;
                if (!v173)
                  goto LABEL_129;
                while (1)
                {
                  v101 = *(_QWORD *)(*(_QWORD *)(v173 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (!v101)
                    break;
LABEL_261:
                  if ((*(_DWORD *)(v101 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
                    goto LABEL_262;
                  v173 = v101;
                }
              }
              v99 = v160;
              v12 = v159;
            }
LABEL_129:
            v103 = *(_QWORD *)(*(_QWORD *)(v101 + 8) & 0xFFFFFFFFFFFFFFF0);
            v104 = *(_DWORD *)(v103 + 16) & 0xFF800FF;
            v106 = v104 == 93323275 || v104 == 87556107;
            if (v103 && v106)
              goto LABEL_160;
            v107 = *(_QWORD *)(v187 & 0xFFFFFFFFFFFFFFF0);
            v108 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v107 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v108 == 39 || v108 == 32)
            {
              v107 = *(_QWORD *)(sub_22F10ACF8(*(_QWORD *)(v187 & 0xFFFFFFFFFFFFFFF0)) & 0xFFFFFFFFFFFFFFF0);
            }
            else if ((v108 & 0xFEu) - 2 <= 3)
            {
              if (v107)
                goto LABEL_268;
LABEL_269:
              while ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v107 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
              {
                v174 = sub_22F10CF48(v107);
                if (!v174)
                  break;
                while (1)
                {
                  v107 = *(_QWORD *)(*(_QWORD *)(v174 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (!v107)
                    break;
LABEL_268:
                  if ((*(_DWORD *)(v107 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
                    goto LABEL_269;
                  v174 = v107;
                }
              }
            }
            v109 = *(_QWORD *)(*(_QWORD *)(v107 + 8) & 0xFFFFFFFFFFFFFFF0);
            v110 = *(_DWORD *)(v109 + 16);
            if (v109 && (v110 & 0xFF800FF) == 93323275)
            {
LABEL_160:
              v113 = 1;
            }
            else
            {
              if (v109)
                v112 = *(_DWORD *)(v109 + 16) == 11;
              else
                v112 = 0;
              v113 = v112 && (v110 & 0xFF80000) == 87556096;
            }
            v136 = v194;
            if (!v194)
            {
              v136 = (unsigned __int8 *)sub_22E3B8AAC(v195);
              v194 = v136;
            }
            v137 = 0;
            v136[*v136 + 1] = 2;
            v138 = v194;
            v139 = *v194;
            *v194 = v139 + 1;
            *(_QWORD *)&v138[8 * v139 + 16] = v113;
            v13 = v176;
          }
          else
          {
            v137 = 0;
          }
LABEL_181:
          if (DWORD2(v200))
          {
            v148 = v199.i64[1];
            for (i = (_DWORD *)v199.i64[0]; i != (_DWORD *)v148; i += 14)
              sub_22E6D82D0((uint64_t *)&v194, i);
          }
          if ((_DWORD)v180)
          {
            v150 = HIDWORD(v200);
            v151 = v194;
            if (!v194)
            {
              v151 = (unsigned __int8 *)sub_22E3B8AAC(v195);
              v194 = v151;
            }
            v151[*v151 + 1] = 3;
            v152 = v194;
            v153 = *v194;
            *v194 = v153 + 1;
            *(_QWORD *)&v152[8 * v153 + 16] = v150;
          }
          if (HIDWORD(v180))
            sub_22ECFC6F4(v15, &v194, v187, v185);
          sub_22E90379C((_QWORD *)v15, v13, (uint64_t)&v194, 0, (uint64_t)v193);
          sub_22E903BEC(v193);
          v154 = v183 == 3580 || v183 == 6669;
          v65 = v184;
          if (v154 && v178 && v179)
          {
            v155 = *(_QWORD *)(v179 + 120);
            if (!v155)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v179 + 96) + 88), *(_QWORD *)(v179 + 96));
              v155 = *(_QWORD *)(v179 + 120);
            }
            if (v155 <= 7)
            {
              sub_22E8FCA40((_QWORD *)v15, *(_DWORD *)(v179 + 24), 0x162Du, 0, (uint64_t)__p);
              v156 = sub_22E890024((uint64_t)__p, &v198);
              sub_22E890024(v156, &v197);
              sub_22E903BEC((unsigned int *)__p);
            }
          }
          if (v183 == 6559 && v137)
          {
            v161 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v137 + 16))(v137);
            sub_22E8FCA40((_QWORD *)v15, v161, 0x1761u, 0, (uint64_t)__p);
            sub_22EFB9E74(v137, v189);
            v162 = sub_22F2F3734((uint64_t)__p, v189);
            v188 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v137 + 16))(v137);
            sub_22E8906A0(v162, &v188);
            if (v190 < 0)
              operator delete(v189[0]);
            sub_22E903BEC((unsigned int *)__p);
          }
          if (v187 == *(_QWORD *)(*(_QWORD *)(v15 + 88) + 16840))
          {
            v157 = sub_22E9058F0(v99);
            sub_22ED11AD0((unsigned int *)v15, v157, v185, 1);
          }
          if (v181)
            sub_22EC2B1BC((_QWORD *)v15, v99);
          if (v14 == 15 && v9 == 2)
            sub_22EC2AF28((unsigned int *)v15, v12);
          if (v8)
            *v8 = 1;
          if (v194 && v195)
            sub_22E3BB10C(v195, (unint64_t)v194);
          goto LABEL_216;
        }
        v175 = v13;
        v177 = v9;
        v83 = v15;
        v84 = v10;
        v85 = v12;
        v86 = v8;
        v87 = v85;
        v88 = sub_22F10CF48(*(_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF0));
        if (*(_BYTE *)(v88 + 16) != 39)
          v88 = 0;
        v89 = *(_BYTE *)(v88 + 40) & 7;
        v90 = sub_22F10CF48(v88);
        v91 = v90
           && *(_BYTE *)(v90 + 16) == 39
           && *(_BYTE *)(sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v90 + 32) & 0xFFFFFFFFFFFFFFF0)) + 16) == 39;
        v114 = v89 != 3;
        v115 = sub_22F10CF48(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0));
        v116 = !v115
            || *(_BYTE *)(v115 + 16) != 39
            || *(_BYTE *)(sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v115 + 32) & 0xFFFFFFFFFFFFFFF0)) + 16) != 39;
        v194 = (unsigned __int8 *)sub_22E3B8AAC(v195);
        v194[*v194 + 1] = 9;
        v117 = v194;
        v118 = *v194;
        *v194 = v118 + 1;
        *(_QWORD *)&v117[8 * v118 + 16] = v185;
        v117[(v118 + 1) + 1] = 9;
        v119 = v194;
        v120 = *v194;
        *v194 = v120 + 1;
        *(_QWORD *)&v119[8 * v120 + 16] = v187;
        v119[(v120 + 1) + 1] = 2;
        v121 = v194;
        v122 = *v194;
        *v194 = v122 + 1;
        *(_QWORD *)&v121[8 * v122 + 16] = v82;
        if (v91)
          v123 = v114;
        else
          v123 = 2;
        v121[(v122 + 1) + 1] = 2;
        v124 = v194;
        v125 = *v194;
        *v194 = v125 + 1;
        *(_QWORD *)&v124[8 * v125 + 16] = v123;
        v124[(v125 + 1) + 1] = 2;
        v126 = v194;
        v127 = *v194;
        *v194 = v127 + 1;
        *(_QWORD *)&v126[8 * v127 + 16] = v116;
        v126[(v127 + 1) + 1] = 2;
        v128 = v194;
        v129 = *v194;
        *v194 = v129 + 1;
        *(_QWORD *)&v128[8 * v129 + 16] = v114;
        sub_22F0D4E74((uint64_t)v84);
        sub_22E4D6448((uint64_t)(v128 + 336), v130, 1);
        v131 = sub_22EFFA6B0(v84);
        v132 = *v131;
        if (v132 == 188)
        {
          v135 = (unint64_t *)(v131 + 24);
          v8 = v86;
          v99 = v84;
          v133 = v87;
          v15 = v83;
          v9 = v177;
          v13 = v175;
          v134 = v184;
        }
        else
        {
          v8 = v86;
          v99 = v84;
          v133 = v87;
          v15 = v83;
          v9 = v177;
          v13 = v175;
          v134 = v184;
          if (v132 != 161)
            goto LABEL_177;
          v135 = (unint64_t *)(v131 + 16);
        }
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v131 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 6)
        {
          v137 = *v135;
          if (*v135)
          {
            LOBYTE(v184) = v134;
            v12 = v133;
            v140 = v194;
            if (!v194)
            {
              v140 = (unsigned __int8 *)sub_22E3B8AAC(v195);
              v194 = v140;
            }
            v140[*v140 + 1] = 2;
            v141 = v194;
            v142 = *v194;
            *v194 = v142 + 1;
            *(_QWORD *)&v141[8 * v142 + 16] = 1;
            sub_22EFB9E74(v137, __p);
            if (v192 >= 0)
              v143 = __p;
            else
              v143 = (void **)__p[0];
            if (v192 >= 0)
              v144 = v192 & 0x7F;
            else
              v144 = (size_t)__p[1];
            sub_22E3B89A8(&v194, v143, v144);
            if (v192 < 0)
              operator delete(__p[0]);
            goto LABEL_181;
          }
        }
LABEL_177:
        LOBYTE(v184) = v134;
        v12 = v133;
        v145 = v194;
        if (!v194)
        {
          v145 = (unsigned __int8 *)sub_22E3B8AAC(v195);
          v194 = v145;
        }
        v137 = 0;
        v145[*v145 + 1] = 2;
        v146 = v194;
        v147 = *v194;
        *v194 = v147 + 1;
        *(_QWORD *)&v146[8 * v147 + 16] = 0;
        goto LABEL_181;
      }
      v65 = 1;
      if (v8)
        *v8 = 1;
LABEL_216:
      __p[0] = &v199;
      sub_22E6C60B8((void ***)__p);
      return v65 & 1;
    default:
      v16 = 0;
      v178 = 0;
      v180 = 0;
      v17 = 0;
      LOBYTE(v184) = 0;
      v181 = 0;
      goto LABEL_104;
  }
}

unsigned int *sub_22EB44A14(unsigned int *result, uint64_t a2, int a3)
{
  unsigned int *v3;
  int v4;
  int v5;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  size_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  void *__p;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _DWORD v33[6];
  void *v34;
  char v35;
  uint64_t v36;
  unsigned int v37[24];
  unsigned int v38[24];

  if ((a3 & 0x80000000) == 0)
  {
    v3 = result;
    if (result[2670] <= result[2989])
    {
      v4 = (**((_WORD **)result + 9) & 0x101) != 0 ? 22 : 6;
      v5 = *(_DWORD *)(*((_QWORD *)result + 1611) + 8);
      if ((~v5 & 0x18) != 0 && (v4 & v5) != v4)
      {
        while ((*(_BYTE *)a2 & 0xFE) == 0x70 && (*(_DWORD *)a2 & 0xFC0000) == 0x800000)
          a2 = *(_QWORD *)(a2 + 24);
        v8 = (unsigned __int8 *)a2;
        do
        {
          v9 = v8;
          LODWORD(v10) = *v8;
          if (v10 > 0xD5)
          {
            if ((_DWORD)v10 == 233)
            {
              LODWORD(v10) = *(_DWORD *)v8;
              if ((*(_DWORD *)v8 & 0x7C0000) != 0x300000)
                break;
              v11 = v8 + 16;
            }
            else
            {
              if ((_DWORD)v10 != 214)
                break;
              v11 = v8 + 24;
            }
          }
          else if ((_DWORD)v10 == 155)
          {
            if ((**((_DWORD **)v8 + 2) & 0x18000) != 0)
              goto LABEL_38;
            v11 = v8 + 24;
            if (!v9[48])
              v11 = v9 + 32;
            LOBYTE(v10) = -101;
          }
          else
          {
            if ((_DWORD)v10 != 176)
              break;
            v10 = *((unsigned int *)v8 + 5);
            if ((_DWORD)v10 == -1)
              goto LABEL_38;
            v11 = &v8[8 * v10 + 40];
            LOBYTE(v10) = -80;
          }
          v8 = *(unsigned __int8 **)v11;
        }
        while (v8 != v9);
        if ((v10 + 102) >= 0xF5u)
        {
          v12 = (*(_DWORD *)v9 >> 18) & 0x7F;
          if (v12 == 25)
            return result;
          if (!v12)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            v14 = v13 && (*(_DWORD *)(v13 + 16) & 0xFF800FF) == 86507531;
            if (v14
              && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 2) + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
            {
              return result;
            }
          }
        }
LABEL_38:
        sub_22E8FCA40(result, a3, 0x18CFu, 0, (uint64_t)v38);
        sub_22E903BEC(v38);
        sub_22F0D5A50(a2);
        sub_22E8FCA40(v3, v15, 0x1561u, 0, (uint64_t)v37);
        sub_22F0D4E74(a2);
        v36 = v16;
        v17 = sub_22E8906A0((uint64_t)v37, &v36);
        sub_22F0D5A50(a2);
        if ((**((_QWORD **)v3 + 9) & 0x100) != 0)
          v19 = 18;
        else
          v19 = 7;
        if ((**((_QWORD **)v3 + 9) & 0x100) != 0)
          v20 = "static_cast<void>(";
        else
          v20 = "(void)(";
        sub_22E729148(v20, v19, v18, 0, (uint64_t)v33);
        v21 = sub_22E890748(v17, v33);
        v22 = *((_QWORD *)v3 + 10);
        sub_22F0D60E4(a2);
        v24 = sub_22F141A3C(v23, 0, *(_QWORD **)(v22 + 88), *(_DWORD **)(v22 + 56));
        v27 = 0;
        v28 = 0;
        v30 = 0;
        v31 = 0x100000000000000;
        v25 = v24 | ((unint64_t)v24 << 32);
        v26 = 0;
        __p = (void *)41;
        v32 = 0;
        sub_22E890748(v21, &v25);
        if (SHIBYTE(v31) < 0)
          operator delete(__p);
        if (v35 < 0)
          operator delete(v34);
        return sub_22E903BEC(v37);
      }
    }
  }
  return result;
}

unint64_t sub_22EB44D0C(_QWORD *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 **v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  char v30;
  unsigned __int8 **v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  unsigned __int8 **v36;
  uint64_t *v37;
  int v38;
  int v39;
  unsigned __int8 v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t (**v51)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  int v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  BOOL v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  int v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  const char *v114;
  unint64_t v115;
  _DWORD *v116;
  unsigned int v117;
  void *v118;
  size_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135[5];
  char v136;
  uint64_t v137;
  _BYTE v138[96];
  _BYTE v139[96];
  unint64_t (*v140)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v141;
  const char *v142;
  __int16 v143;
  _QWORD *v144;
  __int128 v145;
  _QWORD v146[11];

  v5 = (uint64_t)a1;
  v146[9] = *MEMORY[0x24BDAC8D0];
  v6 = (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
  v7 = *(_QWORD *)(*((_QWORD *)v6 + 1) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_DWORD *)(v7 + 16);
  if ((v8 & 0xFE00000) < 0x8180001 || v7 == 0 || *(_DWORD *)(v7 + 16) != 11)
    goto LABEL_8;
  v15 = (v8 >> 19) & 0x1FF;
  switch(v15)
  {
    case 263:
      return *(_QWORD *)(a1[11] + 16856);
    case 261:
LABEL_126:
      v22 = a3;
      a1 = (_QWORD *)v5;
      v23 = 3665;
      goto LABEL_127;
    case 260:
      do
      {
        v16 = v6;
        v17 = *v6;
        if (v17 > 0xD5)
        {
          if (v17 == 233)
          {
            v17 = *(_DWORD *)v6;
            if ((*(_DWORD *)v6 & 0x7C0000) != 0x300000)
              goto LABEL_53;
            v19 = (unsigned __int8 **)(v6 + 16);
          }
          else
          {
            if (v17 != 214)
              break;
            v19 = (unsigned __int8 **)(v6 + 24);
          }
        }
        else if (v17 == 155)
        {
          if ((**((_DWORD **)v6 + 2) & 0x18000) != 0)
            goto LABEL_53;
          if (v6[48])
            v19 = (unsigned __int8 **)(v6 + 24);
          else
            v19 = (unsigned __int8 **)(v6 + 32);
          LOBYTE(v17) = -101;
        }
        else
        {
          if (v17 != 176)
            break;
          v18 = *((unsigned int *)v6 + 5);
          if ((_DWORD)v18 == -1)
            goto LABEL_53;
          v19 = (unsigned __int8 **)&v16[8 * v18 + 40];
          LOBYTE(v17) = -80;
        }
        v6 = *v19;
      }
      while (v6 != v16);
      if ((v17 + 45) >= 2u)
      {
LABEL_53:
        v22 = a3;
        v23 = 4981;
LABEL_127:
        sub_22E8FCA40(a1, v22, v23, 0, (uint64_t)&v140);
        sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
        v144 = v50;
        v51 = &v140;
        v52 = (uint64_t *)&v144;
LABEL_128:
        sub_22E8906A0((uint64_t)v51, v52);
LABEL_129:
        v26 = (unsigned int *)&v140;
        goto LABEL_130;
      }
      if (v17 != 212 || sub_22ED14F7C(a1, v16, 0, 0))
        return *(_QWORD *)(*(_QWORD *)(v5 + 88) + 16840);
      goto LABEL_126;
  }
  v21 = sub_22EB19A28(a1);
  *a2 = v21;
  if ((v21 & 1) != 0)
    return 0;
  v6 = (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL);
LABEL_8:
  if ((v6[1] & 0x80) != 0)
    return *(_QWORD *)(*(_QWORD *)(v5 + 88) + 16832);
  while (1)
  {
    v11 = v6;
    v12 = *v6;
    if (v12 > 0xD5)
    {
      if (v12 == 233)
      {
        v12 = *(_DWORD *)v6;
        if ((*(_DWORD *)v6 & 0x7C0000) != 0x300000)
          goto LABEL_56;
        v14 = v6 + 16;
      }
      else
      {
        if (v12 != 214)
          goto LABEL_56;
        v14 = v6 + 24;
      }
      goto LABEL_24;
    }
    if (v12 != 155)
      break;
    if ((**((_DWORD **)v6 + 2) & 0x18000) != 0)
    {
      v12 = 155;
      goto LABEL_56;
    }
    if (v6[48])
      v14 = v6 + 24;
    else
      v14 = v6 + 32;
    v12 = 155;
LABEL_24:
    v6 = *(unsigned __int8 **)v14;
    if (v6 == v11)
      goto LABEL_56;
  }
  if (v12 != 176)
    goto LABEL_56;
  v13 = *((unsigned int *)v6 + 5);
  if ((_DWORD)v13 != -1)
  {
    v14 = &v11[8 * v13 + 40];
    v12 = 176;
    goto LABEL_24;
  }
  v12 = 176;
LABEL_56:
  v24 = *(_QWORD *)(v5 + 72);
  if ((*(_DWORD *)(v24 + 52) & 0x40000000) != 0 && v12 == 161)
  {
    if ((*(_DWORD *)v11 & 0x400000) == 0)
    {
      v12 = *(_DWORD *)v11;
      goto LABEL_60;
    }
    sub_22EFF605C((uint64_t)v11);
    sub_22E8FCA40((_QWORD *)v5, v27, 0x1146u, 0, (uint64_t)v139);
    v26 = (unsigned int *)v139;
LABEL_130:
    sub_22E903BEC(v26);
    return 0;
  }
LABEL_60:
  if ((*(_BYTE *)(v24 + 104) & 0x20) != 0
    && (*(_BYTE *)(v24 + 125) & 1) == 0
    && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                                        + 16)
     - 25 <= 1)
  {
    sub_22EFF605C((uint64_t)v11);
    sub_22E8FCA40((_QWORD *)v5, v25, 0xF3Bu, 0, (uint64_t)v138);
    v26 = (unsigned int *)v138;
    goto LABEL_130;
  }
  if ((*(_BYTE *)v24 & 1) != 0 && v12 == 233)
  {
    if ((*(_DWORD *)v11 & 0x7C0000) == 0x140000)
      return *(_QWORD *)(*((_QWORD *)v11 + 2) + 8);
    v12 = *(_DWORD *)v11;
  }
  v28 = v11;
  while (2)
  {
    v29 = 0;
    v30 = 1;
    if (v12 > 187)
    {
      switch(v12)
      {
        case 188:
          if ((v28[2] & 4) != 0)
            goto LABEL_103;
          goto LABEL_93;
        case 214:
          v36 = (unsigned __int8 **)(v28 + 24);
          break;
        case 233:
          if (((*(_DWORD *)v28 >> 18) & 0x1Fu) - 10 > 2)
          {
LABEL_103:
            v29 = 0;
            goto LABEL_114;
          }
LABEL_93:
          v36 = (unsigned __int8 **)(v28 + 16);
          break;
        default:
          goto LABEL_114;
      }
      v28 = *v36;
LABEL_95:
      v12 = *v28;
      continue;
    }
    break;
  }
  if (v12 <= 152)
  {
    if (v12 != 107)
    {
      if (v12 == 137)
      {
        v37 = (uint64_t *)(v28 + 24);
        goto LABEL_109;
      }
      goto LABEL_114;
    }
    v31 = (unsigned __int8 **)(v28 + 24);
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v28 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v33 = *(_DWORD *)(v32 + 16);
    if (v32)
      v34 = v33 == 11;
    else
      v34 = 0;
    if (v34)
    {
      if (((*(_DWORD *)(v32 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_98;
    }
    else if (v32 && v33 == 44)
    {
      v35 = sub_22F114198(*(_QWORD *)(v32 + 24));
      if ((*(_BYTE *)(v35 + 74) & 1) == 0 && *(_QWORD *)(v35 + 128) <= 7uLL
        || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v32 + 24)) + 72) & 0x8000000000) != 0)
      {
LABEL_98:
        if (**v31 != 153
          || (v28 = (unsigned __int8 *)*((_QWORD *)*v31 + 2),
              (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                         + 16) & 0xFEu)
            - 2 >= 4))
        {
          v29 = 0;
          v30 = 1;
          goto LABEL_114;
        }
        goto LABEL_95;
      }
    }
    else if (v33 != 9)
    {
      goto LABEL_98;
    }
    v31 = (unsigned __int8 **)(v28 + 16);
    goto LABEL_98;
  }
  if (v12 == 153)
    goto LABEL_93;
  if (v12 == 161)
  {
    v37 = (uint64_t *)(v28 + 16);
LABEL_109:
    v29 = *v37;
    if (*v37)
    {
      if ((*(_DWORD *)(v29 + 28) & 0x7Eu) - 52 > 5)
      {
        v30 = 0;
      }
      else
      {
        sub_22F0D5A50((uint64_t)v11);
        v30 = 0;
        if (!sub_22ED10E50((_QWORD *)v5, v29, 1, 0, v38))
          return 0;
      }
    }
  }
LABEL_114:
  v39 = sub_22F004BE0((uint64_t)v11, *(_QWORD *)(v5 + 88));
  if ((v39 & 0xFFFFFFFE) != 8)
  {
    v45 = *v11;
    if (v45 == 207)
      return sub_22EF5B848(*(_QWORD *)(v5 + 88), *((_QWORD *)v11 + 1), 0);
    v47 = v39;
    if (v39 == 6)
    {
      if (v45 == 161)
      {
        v48 = *((_QWORD *)v11 + 2);
        if (v11 != (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL))
        {
          sub_22E8FCA40((_QWORD *)v5, a3, 0x11A0u, 0, (uint64_t)&v140);
          v49 = *a2 & 0xFFFFFFFFFFFFFFFELL;
LABEL_196:
          sub_22F0D4E74(v49);
          v144 = v74;
          sub_22E8906A0((uint64_t)&v140, (uint64_t *)&v144);
          sub_22E903BEC((unsigned int *)&v140);
          goto LABEL_197;
        }
        if ((v11[2] & 4) != 0 && *((_QWORD *)v11 + 4))
        {
LABEL_197:
          if ((*(_DWORD *)(v48 + 28) & 0x7F) == 0x39)
          {
            sub_22E8FCA40((_QWORD *)v5, a3, 0x132Du, 0, (uint64_t)&v140);
            sub_22F0D4E74((uint64_t)v11);
            v144 = v75;
            sub_22E8906A0((uint64_t)&v140, (uint64_t *)&v144);
            sub_22E903BEC((unsigned int *)&v140);
          }
          v76 = *(_WORD *)(v48 + 80) & 0x7F;
          v77 = -40;
          if (v76 > 0x46)
          {
            if (v76 == 83)
              goto LABEL_215;
            if (v76 == 71)
            {
              v77 = -56;
              goto LABEL_215;
            }
            if (v76 != 81)
            {
LABEL_210:
              v78 = v76 - 52;
              v79 = v76 - 33 >= 5;
              v80 = -48;
              if (!v79)
                v80 = -64;
              if (v78 >= 6)
                v77 = v80;
              else
                v77 = -72;
            }
          }
          else
          {
            if (v76 > 0x18)
              goto LABEL_209;
            if (v76 == 16)
            {
LABEL_202:
              v77 = -48;
              goto LABEL_215;
            }
            if (((1 << v76) & 0x1066) == 0)
            {
              if (v76 == 24)
                goto LABEL_202;
LABEL_209:
              if (v76 == 70)
              {
                v77 = -64;
                goto LABEL_215;
              }
              goto LABEL_210;
            }
          }
LABEL_215:
          v81 = *(_QWORD *)(v5 + 88);
          v82 = *((_QWORD *)v11 + 1);
          v83 = *(_QWORD *)(v48 + 72 + v77 + 16);
          v84 = (_QWORD *)(v83 & 0xFFFFFFFFFFFFFFF8);
          if ((v83 & 4) != 0)
            v84 = (_QWORD *)*v84;
          if (v84)
            v85 = (unint64_t)(v84 - 8);
          else
            v85 = 0;
          v86 = *(_QWORD *)(v85 + 48);
          if (!v86)
            v86 = sub_22EF6462C(*(_QWORD *)(v5 + 88), v85);
          v20 = sub_22F36A6C0(v81, v82, *(_QWORD *)(v86 & 0xFFFFFFFFFFFFFFF0));
          if ((*(_QWORD *)(*(_QWORD *)(v5 + 72) + 8) & 0x8000000000000000) != 0)
          {
            v87 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v48 + 32))(v48);
            if ((*(_BYTE *)(v87 + 82) & 0xC) != 0 || sub_22EFD7260(v87))
            {
              v88 = *(_DWORD *)(*(_QWORD *)(v5 + 3688) + 576 * *(unsigned int *)(v5 + 3696) - 576);
              if ((v88 > 3 || v88 == 2) && (*(_BYTE *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
              {
                v89 = *(_QWORD *)(*(_QWORD *)(v48 + 48) & 0xFFFFFFFFFFFFFFF0);
                if (!v89 || *(unsigned __int8 *)(v89 + 16) - 27 <= 0xFFFFFFFD)
                  v89 = sub_22F10CF48(v89);
                v90 = *(_QWORD *)(v89 + 24);
                v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                if (v91 && (*(_DWORD *)(v91 + 16) & 0xFF800FF) == 86507531)
                {
                  v93 = 0;
                }
                else
                {
                  v123 = sub_22F3AC46C(v48);
                  v135[0] = v90;
                  v140 = (unint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_24FAB6EF8;
                  LODWORD(v141) = 3591;
                  v124 = sub_22EE8B0B0(v5, a3, v90);
                  v93 = v124;
                  if (v124)
                  {
                    sub_22E8FCA40((_QWORD *)v5, a3, 0x17A1u, 0, (uint64_t)&v140);
                    sub_22E903BEC((unsigned int *)&v140);
                    sub_22E8FCA40((_QWORD *)v5, v123, 0x17A0u, 0, (uint64_t)&v144);
                    sub_22E8901B8((uint64_t)&v144, v135);
                    sub_22E903BEC((unsigned int *)&v144);
                  }
                }
                v94 = *(uint64_t **)(v48 + 120);
                v95 = *(_QWORD *)(*(_QWORD *)(v48 + 48) & 0xFFFFFFFFFFFFFFF0);
                if (v95 && *(_BYTE *)(v95 + 16) == 26
                  || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v95 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
                  && (v95 = sub_22F10CF48(v95)) != 0)
                {
                  v96 = *(_QWORD *)(v95 + 16);
                  if ((v96 & 0x3FFFC000000000) != 0)
                  {
                    v97 = 8 * (unsigned __int16)(v96 >> 38);
                    do
                    {
                      v98 = *v94;
                      v99 = *(_QWORD *)(*v94 + 56);
                      if ((v99 & 4) != 0 && (v103 = v99 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v103 + 16)))
                        v100 = **(int ***)(v103 + 24);
                      else
                        v100 = (int *)(v98 + 64);
                      v101 = *v100;
                      v135[0] = *(_QWORD *)(v98 + 48);
                      v140 = (unint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&unk_24FAB6EF8;
                      LODWORD(v141) = 3591;
                      v102 = sub_22EE8B0B0(v5, a3, v135[0]);
                      if (v102)
                      {
                        sub_22E8FCA40((_QWORD *)v5, a3, 0x17A1u, 0, (uint64_t)&v140);
                        sub_22E903BEC((unsigned int *)&v140);
                        sub_22E8FCA40((_QWORD *)v5, v101, 0x17A0u, 0, (uint64_t)&v144);
                        sub_22E8901B8((uint64_t)&v144, v135);
                        sub_22E903BEC((unsigned int *)&v144);
                      }
                      v93 |= v102;
                      ++v94;
                      v97 -= 8;
                    }
                    while (v97);
                  }
                }
                if ((v93 & 1) != 0)
                  return 0;
              }
            }
          }
          goto LABEL_227;
        }
        v58 = v48 + 72;
        v59 = *(_WORD *)(v48 + 80) & 0x7F;
        v60 = -40;
        if (v59 > 0x46)
        {
          switch(v59)
          {
            case 'S':
              goto LABEL_181;
            case 'G':
              v60 = -56;
              goto LABEL_181;
            case 'Q':
LABEL_181:
              v66 = *(_QWORD *)(v58 + v60 + 16);
              v67 = (_QWORD *)(v66 & 0xFFFFFFFFFFFFFFF8);
              if ((v66 & 4) != 0)
                v67 = (_QWORD *)*v67;
              if (v67)
                v68 = v67 - 8;
              else
                v68 = 0;
              v69 = v68[5];
              v70 = v69 & 7;
              v71 = v69 & 0xFFFFFFFFFFFFFFF8;
              if (v70)
                v72 = 1;
              else
                v72 = v71 == 0;
              if (v72 || !**(_DWORD **)(v71 + 16))
              {
                sub_22E8FCA40((_QWORD *)v5, a3, 0x13D5u, 0, (uint64_t)&v140);
                v49 = (unint64_t)v11;
                goto LABEL_196;
              }
              v144 = v146;
              v145 = xmmword_22F44E330;
              v73 = -40;
              if ((int)v59 > 70)
              {
                if (v59 != 83)
                {
                  if (v59 == 71)
                  {
                    v73 = -56;
                    goto LABEL_273;
                  }
                  if (v59 == 81)
                    goto LABEL_273;
LABEL_268:
                  v107 = v59 - 52;
                  v79 = v59 - 33 >= 5;
                  v108 = -48;
                  if (!v79)
                    v108 = -64;
                  if (v107 >= 6)
                    v73 = v108;
                  else
                    v73 = -72;
                }
              }
              else
              {
                if (v59 > 0x18)
                  goto LABEL_267;
                if (v59 != 16)
                {
                  if (((1 << v59) & 0x1066) != 0)
                    goto LABEL_273;
                  if (v59 != 24)
                  {
LABEL_267:
                    if (v59 == 70)
                    {
                      v73 = -64;
                      goto LABEL_273;
                    }
                    goto LABEL_268;
                  }
                }
                v73 = -48;
              }
LABEL_273:
              v109 = *(_QWORD *)(v58 + v73 + 16);
              v110 = (_QWORD *)(v109 & 0xFFFFFFFFFFFFFFF8);
              if ((v109 & 4) != 0)
                v110 = (_QWORD *)*v110;
              v111 = 0;
              if (v110)
                v112 = v110 - 8;
              else
                v112 = 0;
              v113 = v112[5];
              v114 = "";
              if ((v113 & 7) == 0)
              {
                v115 = v113 & 0xFFFFFFFFFFFFFFF8;
                if (v115)
                {
                  v116 = *(_DWORD **)(v115 + 16);
                  v117 = *v116;
                  v114 = (const char *)(v116 + 4);
                  v111 = v117;
                }
              }
              v143 = 773;
              v140 = (unint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v114;
              v141 = v111;
              v142 = "::";
              llvm::Twine::toVector();
              v118 = v144;
              v119 = v145;
              sub_22E8FCA40((_QWORD *)v5, a3, 0x13D5u, 0, (uint64_t)&v140);
              sub_22F0D4E74((uint64_t)v11);
              v137 = v120;
              v121 = sub_22E8906A0((uint64_t)&v140, &v137);
              sub_22F0D4E74((uint64_t)v11);
              sub_22E729148(v118, v119, v122, 0, (uint64_t)v135);
              sub_22E890748(v121, v135);
              if (v136 < 0)
                operator delete((void *)v135[3]);
              sub_22E903BEC((unsigned int *)&v140);
              if (v144 != v146)
                free(v144);
              goto LABEL_197;
          }
        }
        else
        {
          if (v59 <= 0x18)
          {
            if (v59 == 16)
            {
LABEL_151:
              v60 = -48;
              goto LABEL_181;
            }
            if (((1 << v59) & 0x1066) != 0)
              goto LABEL_181;
            if (v59 == 24)
              goto LABEL_151;
          }
          if (v59 == 70)
          {
LABEL_179:
            v60 = -64;
            goto LABEL_181;
          }
        }
        if (v59 - 52 >= 6)
        {
          if (v59 - 33 >= 5)
            goto LABEL_151;
          goto LABEL_179;
        }
        v60 = -72;
        goto LABEL_181;
      }
      goto LABEL_126;
    }
    if ((v39 & 0xFFFFFFFD) != 0)
    {
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 1) & 0xFFFFFFFFFFFFFFF0)
                                                                    + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 25 < 2)
        goto LABEL_135;
      if (v45 != 217)
      {
        sub_22E8FCA40((_QWORD *)v5, a3, 0x1374u, 0, (uint64_t)&v140);
        v144 = (_QWORD *)*((_QWORD *)v11 + 1);
        v61 = sub_22E8901B8((uint64_t)&v140, (uint64_t *)&v144);
        sub_22F0D4E74((uint64_t)v11);
        v135[0] = v62;
        v52 = v135;
LABEL_156:
        v51 = (unint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v61;
        goto LABEL_128;
      }
      goto LABEL_145;
    }
    v56 = (*(_DWORD *)v11 >> 10) & 7;
    switch(v56)
    {
      case 1:
        v57 = 0;
        goto LABEL_155;
      case 2:
        v57 = 1;
        goto LABEL_155;
      case 5:
        v57 = 4;
        goto LABEL_155;
    }
    if ((v30 & 1) != 0)
      goto LABEL_135;
    v64 = *(_DWORD *)(v29 + 28) & 0x7F;
    if ((v64 - 67) >= 0xFFFFFFF9)
    {
      if ((*(_BYTE *)(v29 + 96) & 7) == 5)
      {
        v65 = **(_QWORD **)(v5 + 72);
        if (!sub_22EFBF028(v29))
        {
          if ((v65 & 0x100) != 0)
            goto LABEL_135;
          v57 = 3;
          goto LABEL_155;
        }
      }
      else if (!sub_22EFBF028(v29))
      {
        goto LABEL_135;
      }
      v57 = 5;
LABEL_155:
      LODWORD(v135[0]) = v57;
      sub_22E8FCA40((_QWORD *)v5, a3, 0x132Cu, 0, (uint64_t)&v140);
      v61 = sub_22E89519C((uint64_t)&v140, (unsigned int *)v135);
      sub_22F0D4E74((uint64_t)v11);
      v144 = v63;
      v52 = (uint64_t *)&v144;
      goto LABEL_156;
    }
    if ((*(_DWORD *)(v29 + 28) & 0x7Fu) > 0x39)
    {
      if (v64 == 58)
      {
LABEL_145:
        v57 = 2;
        goto LABEL_155;
      }
      if (v64 != 68)
        goto LABEL_135;
    }
    else if ((v64 - 49) >= 3)
    {
      if (v64 != 29)
        goto LABEL_135;
      return *(_QWORD *)(*(_QWORD *)(v5 + 88) + 16840);
    }
    if ((*(_DWORD *)v11 & 0x400FF) != 0x400A1 || !*((_QWORD *)v11 + 4))
      goto LABEL_135;
    v104 = *(_QWORD *)(v29 + 16);
    v105 = v104 & 0xFFFFFFFFFFFFFFF8;
    if ((v104 & 4) != 0)
      v105 = *(_QWORD *)v105;
    if (!v105 || (*(_WORD *)(v105 + 8) & 0x7Eu) - 34 > 3)
    {
LABEL_135:
      if (v47 == 2)
      {
        sub_22E8FCA40((_QWORD *)v5, a3, 0x14F5u, 0, (uint64_t)&v140);
        sub_22F0D4E74((uint64_t)v11);
        v144 = v53;
        sub_22E8906A0((uint64_t)&v140, (uint64_t *)&v144);
        sub_22E903BEC((unsigned int *)&v140);
      }
LABEL_137:
      v54 = *((_QWORD *)v11 + 1);
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                            + 16)
         - 33 <= 1)
        return sub_22F36CC4C(*(_QWORD *)(v5 + 88), v54);
      v140 = sub_22F3113F8;
      v141 = 0;
      v142 = (const char *)v5;
      sub_22E99120C(v5, v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_22F31283C, (uint64_t)&v140);
      return sub_22EF5B848(*(_QWORD *)(v5 + 88), *((_QWORD *)v11 + 1), 0);
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFE) == 0x28)
    {
      sub_22E8FCA40((_QWORD *)v5, a3, 0xBB8u, 0, (uint64_t)&v140);
      v144 = *(_QWORD **)(v29 + 40);
      v106 = sub_22E894538((uint64_t)&v140, (uint64_t *)&v144);
      v135[0] = *(_QWORD *)(v29 + 48);
      sub_22E8901B8(v106, v135);
      goto LABEL_129;
    }
    if ((*(_BYTE *)(v105 + 11) & 1) == 0)
    {
      v125 = v105 - 64;
LABEL_289:
      v126 = *(_QWORD *)(v5 + 88);
      v127 = *((_QWORD *)v11 + 1);
      v128 = *(_QWORD *)(v125 + 48);
      if (!v128)
        v128 = sub_22EF6462C(*(_QWORD *)(v5 + 88), v125);
      v20 = sub_22F36A6C0(v126, v127, *(_QWORD *)(v128 & 0xFFFFFFFFFFFFFFF0));
LABEL_227:
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 88) + 15088) + 148) == 11)
        sub_22EE8B180(v5, a3);
      return v20;
    }
    while (1)
    {
      v129 = *(_WORD *)(v105 + 8) & 0x7F;
      v130 = -40;
      if (v129 > 0x46)
      {
        if (v129 != 83)
        {
          if (v129 == 71)
          {
            v130 = -56;
          }
          else if (v129 != 81)
          {
            goto LABEL_303;
          }
        }
      }
      else
      {
        if (v129 > 0x18)
          goto LABEL_302;
        if (v129 == 16)
          goto LABEL_295;
        if (((1 << v129) & 0x1066) != 0)
          goto LABEL_309;
        if (v129 == 24)
        {
LABEL_295:
          v130 = -48;
        }
        else
        {
LABEL_302:
          if (v129 != 70)
          {
LABEL_303:
            v131 = v129 - 52;
            if (v129 - 33 >= 5)
              v132 = -48;
            else
              v132 = -64;
            if (v131 >= 6)
              v130 = v132;
            else
              v130 = -72;
            goto LABEL_309;
          }
          v130 = -64;
        }
      }
LABEL_309:
      v133 = *(_QWORD *)(v105 + v130 + 16);
      v105 = v133 & 0xFFFFFFFFFFFFFFF8;
      if ((v133 & 4) != 0)
        v105 = *(_QWORD *)v105;
      v125 = v105 - 64;
      if (v105)
        v134 = v105 - 64;
      else
        v134 = 0;
      if ((*(_BYTE *)(v134 + 75) & 1) == 0)
        goto LABEL_289;
    }
  }
  sub_22EE03478(v5);
  v41 = v40;
  if (v40)
    v42 = 4910;
  else
    v42 = 5364;
  sub_22E8FCA40((_QWORD *)v5, a3, v42, 0, (uint64_t)&v140);
  v144 = (_QWORD *)*((_QWORD *)v11 + 1);
  v43 = sub_22E8901B8((uint64_t)&v140, (uint64_t *)&v144);
  sub_22F0D4E74((uint64_t)v11);
  v135[0] = v44;
  sub_22E8906A0(v43, v135);
  sub_22E903BEC((unsigned int *)&v140);
  if (!v41)
  {
    v11 = (unsigned __int8 *)sub_22F335E0C(v5, *((_QWORD *)v11 + 1), *a2 & 0xFFFFFFFFFFFFFFFELL, 1);
    *a2 = (uint64_t)v11;
    goto LABEL_137;
  }
  return 0;
}

uint64_t sub_22EB45EB4(__int16 a1)
{
  return dword_22F481C58[a1 - 27];
}

uint64_t sub_22EB45EC8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v10;
  uint64_t v11;

  v5 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 2000);
  if ((*(_BYTE *)(v6 + 1) & 1) == 0 && (*(_QWORD *)(v6 + 20) & 0x2000000000) == 0)
  {
    if ((a3 & 1) == 0)
      v5 = sub_22EBBCB14(a1, a3 & 0xFFFFFFFFFFFFFFFELL, 0, 0, sub_22F2E1334, &v10);
    v10 = a2;
    v11 = v5;
    if ((a4 & 1) == 0)
      sub_22EBBCB14(a1, a4 & 0xFFFFFFFFFFFFFFFELL, 0, 0, sub_22EB56724, &v10);
  }
  return v5;
}

unsigned int *sub_22EB45F78(unsigned int *result, unsigned __int8 *a2, unsigned __int8 *a3, int a4, int a5)
{
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32[24];

  if (result[2670] <= result[2989])
  {
    v6 = result;
    v7 = *(_DWORD *)(*((_QWORD *)result + 461) + 576 * result[924] - 576);
    v8 = v7 > 3 || v7 == 2;
    if (v8 && a4 >= 1)
    {
      v12 = sub_22EFFA6B0(a2);
      result = (unsigned int *)sub_22EFFA6B0(a3);
      v13 = *v12;
      v14 = *(unsigned __int8 *)result;
      v15 = v14 == 161 ? (uint64_t)result : 0;
      v16 = v13 == 161 ? v12 : 0;
      if (v13 == 161
        && v14 == 161
        && (*((_DWORD *)v16 + 1) & 0x80000000) == 0
        && (*(_DWORD *)(v15 + 4) & 0x80000000) == 0)
      {
        v17 = result;
        v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v16 + 2) + 32))(*((_QWORD *)v16 + 2));
        result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 16) + 32))(*(_QWORD *)(v15 + 16));
        if ((unsigned int *)v18 == result)
        {
          v19 = *(_QWORD *)(v18 + 48);
          if ((v19 & 4) == 0)
          {
            v20 = v19 & 0xFFFFFFFFFFFFFFF0;
            if ((*(_BYTE *)(v20 + 8) & 4) == 0)
            {
              result = *(unsigned int **)v20;
              if (!*(_QWORD *)v20 || (v21 = result[4], (v21 & 0xFE) != 0x28))
              {
                if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)result + 1) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
                  || (result = (unsigned int *)sub_22F10CF48((uint64_t)result)) == 0)
                {
LABEL_36:
                  if (a5)
                    v24 = 6975;
                  else
                    v24 = 6976;
                  sub_22E8FCA40(v6, a4, v24, 0, (uint64_t)v32);
                  v31 = *((_QWORD *)v16 + 1);
                  v25 = sub_22E8901B8((uint64_t)v32, &v31);
                  sub_22F0D4E74((uint64_t)v12);
                  v30 = v26;
                  v27 = sub_22E8906A0(v25, &v30);
                  sub_22F0D4E74((uint64_t)v17);
                  v29 = v28;
                  sub_22E8906A0(v27, &v29);
                  return sub_22E903BEC(v32);
                }
                v21 = result[4];
              }
              if ((v21 & 0x100000) != 0)
              {
                do
                {
                  result = *(unsigned int **)(*((_QWORD *)result + 4) & 0xFFFFFFFFFFFFFFF0);
                  if (result)
                  {
                    v22 = result[4];
                    if ((v22 & 0xFE) == 0x28)
                      continue;
                  }
                  result = (unsigned int *)sub_22F10CF48((uint64_t)result);
                  v22 = result[4];
                }
                while ((v22 & 0x100000) != 0);
              }
              v23 = *((_QWORD *)result + 4);
              if ((v23 & 4) == 0 && (*(_BYTE *)((v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
                goto LABEL_36;
            }
          }
        }
      }
    }
  }
  return result;
}

void **sub_22EB46180(void **result, unsigned __int8 *a2)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*a2 == 161)
  {
    v2 = *((_QWORD *)a2 + 2);
    if (v2)
    {
      if ((*(_DWORD *)(v2 + 28) & 0x7F) == 0x40)
      {
        v3 = result;
        v4 = *(_QWORD *)(v2 + 16);
        v5 = v4 & 0xFFFFFFFFFFFFFFF8;
        if ((v4 & 4) != 0)
          v5 = *(_QWORD *)v5;
        if (v5)
          v6 = (*(_WORD *)(v5 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA;
        else
          v6 = 0;
        if (!v6
          || (result = (void **)sub_22E99E574(v5 - 72), (result & 1) != 0)
          || (result = (void **)sub_22E99E574(v2), (_DWORD)result))
        {
          v7 = *((unsigned int *)v3 + 476);
          if ((_DWORD)v7)
          {
            v8 = *((_QWORD *)v3[237] + v7 - 1);
            if (v8)
            {
              result = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(v8 + 608), (void *)v2);
              v9 = *(_QWORD *)(v8 + 616);
              v10 = 624;
              if (v9 == *(_QWORD *)(v8 + 608))
                v10 = 628;
              if (result == (void **)(v9 + 8 * *(unsigned int *)(v8 + v10)))
                return (void **)sub_22E3BA850(v8 + 608, (const void *)v2);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_22EB46270(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4, int a5)
{
  uint64_t v10;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  const void *v46;
  size_t v47;
  void **p_dst;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  const void *v54;
  std::string::size_type v55;
  std::string *p_p;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t **v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t *v63;
  void **v64;
  size_t v65;
  char v66;
  std::string *v67;
  size_t size;
  _BYTE *v69;
  _BYTE *v70;
  BOOL v71;
  unsigned int v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  _QWORD *v77;
  std::string *v78;
  std::string::size_type v79;
  size_t v80;
  __int128 *v81;
  void *v82;
  unint64_t v83;
  llvm *v84;
  size_t v85;
  void *v86;
  size_t v87;
  __int128 *v88;
  void *v89;
  size_t v90;
  __int128 *v91;
  __int128 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void **v101;
  size_t v102;
  __int128 *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void **v112;
  size_t v113;
  __int128 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void **v120;
  size_t v121;
  __int128 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *__src;
  __int128 *v127;
  _BOOL4 v128;
  uint64_t v129;
  uint64_t v130;
  _BOOL4 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140[2];
  uint64_t v141;
  void *v142[2];
  unint64_t v143;
  void *v144;
  size_t v145;
  unint64_t v146;
  std::string v147;
  uint64_t v148;
  unsigned int v149;
  _QWORD *v150;
  unsigned int v151;
  _QWORD *v152;
  unsigned int v153;
  BOOL v154;
  void *v155[2];
  uint64_t v156;
  unint64_t v157;
  unsigned int v158;
  unint64_t v159;
  unsigned int v160;
  BOOL v161;
  unint64_t *v162;
  unsigned int v163;
  std::string __p;
  void **__dst;
  size_t v166;
  int64_t v167;
  _QWORD v168[2];
  unint64_t *v169;
  unsigned int v170;
  _QWORD *v171;
  unsigned int v172;
  __int128 v173;
  unint64_t v174;
  __int128 *v175;
  __int128 v176;
  __int128 v177;
  unint64_t v178;
  char v179;
  uint64_t v180;

  v180 = *MEMORY[0x24BDAC8D0];
  v10 = a4;
  sub_22EB3B394((_QWORD *)a1, a2, a3, a4, 0);
  v12 = a5 == 30 || (a5 & 0xFFFFFFFD) == 29;
  if ((a5 - 16) < 0x10 && ((0xE007u >> (a5 - 16)) & 1) != 0)
    LOBYTE(v13) = 1;
  else
    v13 = (*(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + 104) >> 5) & 1;
  v14 = *a2;
  v15 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v17 - 55 < 2
    || (v18 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16),
        v18 - 55 <= 1))
  {
    if (sub_22F1105F0(v16)
      && sub_22F1105F0(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)))
    {
      return (uint64_t *)sub_22EB36814((_QWORD *)a1, a2, a3, v10, v12, 1, (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) >> 43) & 1, v13, 1);
    }
    goto LABEL_52;
  }
  if (v17 == 11 && ((v20 = (v17 >> 19) & 0x1FF, (v20 - 48) < 0xC) || v20 == 96)
    || v18 == 11 && ((v21 = (v18 >> 19) & 0x1FF, (v21 - 48) < 0xC) || v21 == 96)
    || v17 == 11 && ((v22 = (v17 >> 19) & 0x1FF, (v22 - 48) < 0xC) || v22 == 96)
    || v18 == 11 && ((v23 = (v18 >> 19) & 0x1FF, (v23 - 48) < 0xC) || v23 == 96))
  {
    if (sub_22F1105F0(v16)
      && sub_22F1105F0(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)))
    {
      return sub_22EB3A8FC((_QWORD *)a1, a2, a3, v10, v12, 1);
    }
    goto LABEL_52;
  }
  if (a5 == 16)
  {
    sub_22EB418B0(a1, a2, a3, v10, 16);
    v14 = *a2;
    v15 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (!sub_22F110DD0(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0)))
  {
    v24 = *a3;
    if (!sub_22F110DD0(*(_QWORD *)(*(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)))
    {
      v138 = v24;
      v139 = v14;
      if (v12)
        v25 = 4;
      else
        v25 = 1;
      v26 = sub_22EB1F050(a1, &v139, &v138, v10, v25);
      if ((v139 & 1) != 0)
        return 0;
      v27 = v138;
      if ((v138 & 1) != 0)
        return 0;
      v28 = v26;
      *a2 = v139 & 0xFFFFFFFFFFFFFFFELL;
      v29 = (unsigned __int8 *)(v27 & 0xFFFFFFFFFFFFFFFELL);
      *a3 = v27 & 0xFFFFFFFFFFFFFFFELL;
      if (a5 != 17)
        goto LABEL_50;
      if ((a4 & 0x80000000) != 0)
        goto LABEL_50;
      v30 = (unsigned __int8 *)(*a2 & 0xFFFFFFFFFFFFFFFELL);
      sub_22EFF605C((uint64_t)v30);
      if (v31 < 0)
      {
        sub_22EFF605C((uint64_t)v29);
        if (v32 < 0)
          goto LABEL_50;
      }
      if (*v30 != 181)
        goto LABEL_50;
      v33 = *v29;
      if (v33 == 233)
      {
        v34 = (*(_DWORD *)v29 >> 18) & 0x1F;
        if ((v34 - 8) < 0xFFFFFFFE)
          goto LABEL_50;
        v29 = (unsigned __int8 *)*((_QWORD *)v29 + 2);
        if (*v29 != 181)
          goto LABEL_50;
        v131 = v34 == 7;
        v128 = v34 != 7;
      }
      else
      {
        if (v33 != 181)
          goto LABEL_50;
        v128 = 0;
        v131 = 0;
      }
      sub_22F257F94((uint64_t)(v30 + 16), (llvm::APInt *)&v171);
      sub_22F257F94((uint64_t)(v29 + 16), (llvm::APInt *)&v169);
      v35 = v172;
      if (v172 >= 0x41)
      {
        if (v35 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v171) >= 0x41)
          goto LABEL_181;
        v36 = (_QWORD *)*v171;
      }
      else
      {
        v36 = v171;
      }
      if ((v36 == (_QWORD *)2 || v36 == (_QWORD *)10) && v35 == v170)
      {
        v37 = *((unsigned int *)v30 + 7);
        v127 = (__int128 *)(v37 | (sub_22F141A3C(*((unsigned int *)v29 + 7), 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72)) << 32));
        v168[0] = sub_22F142368((unint64_t)v127, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72), 0);
        v168[1] = v38;
        v39 = sub_22F141A3C(v10, 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
        v40 = sub_22F142368(v10 | (v39 << 32), 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72), 0);
        if (v41 != 3 || (*(_WORD *)v40 == 28536 ? (v42 = *(_BYTE *)(v40 + 2) == 114) : (v42 = 0), !v42))
        {
          sub_22F0D4E74((uint64_t)v30);
          v44 = sub_22F142368(v43, 1u, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72), 0);
          if (v45 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_305;
          v46 = (const void *)v44;
          v47 = v45;
          if (v45 >= 0x17)
          {
            v49 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v45 | 7) != 0x17)
              v49 = v45 | 7;
            v50 = v49 + 1;
            p_dst = (void **)operator new(v49 + 1);
            v166 = v47;
            v167 = v50 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v167) = v45;
            p_dst = (void **)&__dst;
            if (!v45)
            {
LABEL_76:
              *((_BYTE *)p_dst + v47) = 0;
              sub_22F0D4E74((uint64_t)v29);
              v52 = sub_22F142368(v51, 1u, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72), 0);
              if (v53 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_305;
              v54 = (const void *)v52;
              v55 = v53;
              if (v53 >= 0x17)
              {
                v57 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v53 | 7) != 0x17)
                  v57 = v53 | 7;
                v58 = v57 + 1;
                p_p = (std::string *)operator new(v57 + 1);
                __p.__r_.__value_.__l.__size_ = v55;
                __p.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
              }
              else
              {
                *((_BYTE *)&__p.__r_.__value_.__s + 23) = v53;
                p_p = &__p;
                if (!v53)
                {
LABEL_84:
                  p_p->__r_.__value_.__s.__data_[v55] = 0;
                  if (!v131)
                  {
                    if (!v128)
                      goto LABEL_102;
                    goto LABEL_99;
                  }
                  v59 = v170;
                  v163 = v170;
                  if (v170 >= 0x41)
                  {
                    v60 = &v162;
                    llvm::APInt::initSlowCase((llvm::APInt *)&v162, (const llvm::APInt *)&v169);
                    v59 = v163;
                    if (v163 > 0x40)
                    {
                      llvm::APInt::flipAllBitsSlowCase((llvm::APInt *)&v162);
                      goto LABEL_93;
                    }
                  }
                  else
                  {
                    v60 = &v169;
                  }
                  if (v59)
                    v61 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v59;
                  else
                    v61 = 0;
                  v162 = (unint64_t *)(v61 & ~(unint64_t)*v60);
LABEL_93:
                  llvm::APInt::operator++();
                  v62 = v163;
                  v63 = v162;
                  v163 = 0;
                  if (v170 > 0x40 && v169)
                  {
                    MEMORY[0x2348A0E84](v169, 0x1000C8000313F17);
                    v169 = v63;
                    v170 = v62;
                    if (v163 >= 0x41 && v162)
                      MEMORY[0x2348A0E84](v162, 0x1000C8000313F17);
                  }
                  else
                  {
                    v169 = v162;
                    v170 = v62;
                  }
LABEL_99:
                  std::operator+<char>();
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  __p = v147;
LABEL_102:
                  if (v167 >= 0)
                    v64 = (void **)&__dst;
                  else
                    v64 = __dst;
                  if (v167 >= 0)
                    v65 = HIBYTE(v167) & 0x7F;
                  else
                    v65 = v166;
                  v66 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v67 = &__p;
                  else
                    v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
                  else
                    size = __p.__r_.__value_.__l.__size_;
                  if (v65 >= 2 && (*(_WORD *)v64 == 25136 || *(_WORD *)v64 == 16944)
                    || size >= 2
                    && (LOWORD(v67->__r_.__value_.__l.__data_) == 25136
                     || LOWORD(v67->__r_.__value_.__l.__data_) == 16944)
                    || v65 >= 2 && (*(_WORD *)v64 == 30768 || *(_WORD *)v64 == 22576)
                    || size >= 2
                    && (LOWORD(v67->__r_.__value_.__l.__data_) == 30768
                     || LOWORD(v67->__r_.__value_.__l.__data_) == 22576)
                    || v65 >= 2 && *(_BYTE *)v64 == 48
                    || size >= 2 && v67->__r_.__value_.__s.__data_[0] == 48
                    || v65 && (v69 = memchr(v64, 39, v65)) != 0 && v69 - (_BYTE *)v64 != -1
                    || size && (v70 = memchr(v67, 39, size)) != 0 && v70 - (_BYTE *)v67 != -1)
                  {
LABEL_177:
                    if (v66 < 0)
                      operator delete(__p.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v167) < 0)
                      operator delete(__dst);
                    goto LABEL_181;
                  }
                  v161 = 0;
                  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
                  {
                    v71 = 1;
                  }
                  else
                  {
                    v83 = *(_QWORD *)(a1 + 80);
                    v84 = (llvm *)sub_22E3CB704((llvm::StringMapImpl *)(v83 + 544), "xor", 3uLL);
                    v71 = sub_22F2EE534(v83, v84);
                  }
                  v161 = v71;
                  v72 = v172;
                  v158 = v172;
                  if (v172 >= 0x41)
                  {
                    v73 = &v157;
                    llvm::APInt::initSlowCase((llvm::APInt *)&v157, (const llvm::APInt *)&v171);
                    v72 = v158;
                    if (v158 > 0x40)
                    {
                      llvm::APInt::xorAssignSlowCase((llvm::APInt *)&v157, (const llvm::APInt *)&v169);
                      v72 = v158;
                      v74 = v157;
LABEL_143:
                      v160 = v72;
                      v159 = v74;
                      v158 = 0;
                      if (v170 > 0x40)
                        v75 = *v169;
                      else
                        v75 = (uint64_t)((_QWORD)v169 << -(uint64_t)v170) >> -(uint64_t)v170;
                      v76 = v172;
                      if (v172 >= 0x41)
                      {
                        if (v76 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v171) >= 0x41)
                          goto LABEL_173;
                        v77 = (_QWORD *)*v171;
                      }
                      else
                      {
                        v77 = v171;
                      }
                      if (v77 == (_QWORD *)2 && (v75 & 0x8000000000000000) == 0)
                      {
                        std::operator+<char>();
                        v154 = 0;
                        v151 = v172;
                        if (v172 > 0x40)
                          llvm::APInt::initSlowCase((llvm::APInt *)&v150, (const llvm::APInt *)&v171);
                        else
                          v150 = v171;
                        llvm::APInt::operator-=();
                        v153 = v151;
                        v152 = v150;
                        v151 = 0;
                        llvm::APInt::sshl_ov((llvm::APInt *)&v152, (const llvm::APInt *)&v169, &v154);
                        if (v154)
                        {
                          if (v75 > 0x3F)
                          {
                            if (v75 != 64)
                            {
LABEL_165:
                              if (v149 >= 0x41 && v148)
                                MEMORY[0x2348A0E84](v148, 0x1000C8000313F17);
                              if (v153 >= 0x41 && v152)
                                MEMORY[0x2348A0E84](v152, 0x1000C8000313F17);
LABEL_171:
                              if (SHIBYTE(v156) < 0)
                                operator delete(v155[0]);
                              goto LABEL_173;
                            }
                            sub_22E8FCA40((_QWORD *)a1, v10, 0x1C05u, 0, (uint64_t)&v147);
                            v134 = sub_22F2F2210((uint64_t)&v147, (uint64_t)v168);
                            v175 = &v177;
                            v176 = xmmword_22F455490;
                            llvm::APInt::toString();
                            v90 = v176;
                            if ((unint64_t)v176 <= 0x7FFFFFFFFFFFFFF7)
                            {
                              v91 = v175;
                              if ((unint64_t)v176 >= 0x17)
                              {
                                v117 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if (((unint64_t)v176 | 7) != 0x17)
                                  v117 = v176 | 7;
                                v118 = v117 + 1;
                                v92 = (__int128 *)operator new(v117 + 1);
                                *((_QWORD *)&v173 + 1) = v90;
                                v174 = v118 | 0x8000000000000000;
                                *(_QWORD *)&v173 = v92;
                              }
                              else
                              {
                                HIBYTE(v174) = v176;
                                v92 = &v173;
                                if (!(_QWORD)v176)
                                  goto LABEL_272;
                              }
                              memmove(v92, v91, v90);
LABEL_272:
                              *((_BYTE *)v92 + v90) = 0;
                              if (v175 != &v177)
                                free(v175);
                              sub_22F2F3734(v134, (void **)&v173);
                              if ((SHIBYTE(v174) & 0x80000000) == 0)
                                goto LABEL_301;
                              v119 = (void *)v173;
LABEL_300:
                              operator delete(v119);
LABEL_301:
                              sub_22E903BEC((unsigned int *)&v147);
                              sub_22E8FCA40((_QWORD *)a1, v10, 0x1821u, 0, (uint64_t)&v147);
                              std::operator+<char>();
                              v125 = sub_22F2F3734((uint64_t)&v147, (void **)&v175);
                              sub_22E894E38(v125, (unsigned __int8 *)&v161);
                              if (SHIBYTE(v176) < 0)
                                operator delete(v175);
                              sub_22E903BEC((unsigned int *)&v147);
                              goto LABEL_165;
                            }
LABEL_305:
                            abort();
                          }
                          sub_22E8FCA40((_QWORD *)a1, v10, 0x1C06u, 0, (uint64_t)&v147);
                          v133 = sub_22F2F2210((uint64_t)&v147, (uint64_t)v168);
                          v175 = &v177;
                          v176 = xmmword_22F455490;
                          llvm::APInt::toString();
                          v87 = v176;
                          if ((unint64_t)v176 > 0x7FFFFFFFFFFFFFF7)
                            goto LABEL_305;
                          v88 = v175;
                          if ((unint64_t)v176 >= 0x17)
                          {
                            v109 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if (((unint64_t)v176 | 7) != 0x17)
                              v109 = v176 | 7;
                            v110 = v109 + 1;
                            v89 = operator new(v109 + 1);
                            v145 = v87;
                            v146 = v110 | 0x8000000000000000;
                            v144 = v89;
                          }
                          else
                          {
                            HIBYTE(v146) = v176;
                            v89 = &v144;
                            if (!(_QWORD)v176)
                            {
LABEL_251:
                              *((_BYTE *)v89 + v87) = 0;
                              if (v175 != &v177)
                                free(v175);
                              v111 = sub_22F2F3734(v133, &v144);
                              std::operator+<char>();
                              v137 = sub_22F2F3734(v111, v142);
                              std::operator+<char>();
                              if (v141 >= 0)
                                v112 = v140;
                              else
                                v112 = (void **)v140[0];
                              if (v141 >= 0)
                                v113 = HIBYTE(v141) & 0x7F;
                              else
                                v113 = (size_t)v140[1];
                              *(_QWORD *)((char *)&v176 + 4) = 0;
                              BYTE12(v176) = 0;
                              v178 = 0;
                              v177 = 0uLL;
                              v179 = 0;
                              v175 = v127;
                              LOBYTE(v176) = 0;
                              if (v113 > 0x7FFFFFFFFFFFFFF7)
                                goto LABEL_305;
                              if (v113 >= 0x17)
                              {
                                v115 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v113 | 7) != 0x17)
                                  v115 = v113 | 7;
                                v116 = v115 + 1;
                                v114 = (__int128 *)operator new(v115 + 1);
                                *((_QWORD *)&v173 + 1) = v113;
                                v174 = v116 | 0x8000000000000000;
                                *(_QWORD *)&v173 = v114;
                              }
                              else
                              {
                                HIBYTE(v174) = v113;
                                v114 = &v173;
                                if (!v113)
                                  goto LABEL_267;
                              }
                              memmove(v114, v112, v113);
LABEL_267:
                              *((_BYTE *)v114 + v113) = 0;
                              v177 = v173;
                              v178 = v174;
LABEL_292:
                              sub_22E890748(v137, &v175);
                              if (SHIBYTE(v178) < 0)
                                operator delete((void *)v177);
                              if (SHIBYTE(v141) < 0)
                                operator delete(v140[0]);
                              if (SHIBYTE(v143) < 0)
                                operator delete(v142[0]);
                              if ((SHIBYTE(v146) & 0x80000000) == 0)
                                goto LABEL_301;
                              v119 = v144;
                              goto LABEL_300;
                            }
                          }
                          memmove(v89, v88, v87);
                          goto LABEL_251;
                        }
                        sub_22E8FCA40((_QWORD *)a1, v10, 0x1C07u, 0, (uint64_t)&v147);
                        v129 = sub_22F2F2210((uint64_t)&v147, (uint64_t)v168);
                        v175 = &v177;
                        v176 = xmmword_22F455490;
                        llvm::APInt::toString();
                        v85 = v176;
                        if ((unint64_t)v176 > 0x7FFFFFFFFFFFFFF7)
                          goto LABEL_305;
                        __src = v175;
                        if ((unint64_t)v176 >= 0x17)
                        {
                          v93 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if (((unint64_t)v176 | 7) != 0x17)
                            v93 = v176 | 7;
                          v94 = v93 + 1;
                          v86 = operator new(v93 + 1);
                          v145 = v85;
                          v146 = v94 | 0x8000000000000000;
                          v144 = v86;
                        }
                        else
                        {
                          HIBYTE(v146) = v176;
                          v86 = &v144;
                          if (!(_QWORD)v176)
                          {
LABEL_204:
                            *((_BYTE *)v86 + v85) = 0;
                            if (v175 != &v177)
                              free(v175);
                            v95 = sub_22F2F3734(v129, &v144);
                            v130 = sub_22E90749C(v95, v155);
                            v175 = &v177;
                            v176 = xmmword_22F455490;
                            llvm::APInt::toString();
                            v96 = (void *)v176;
                            if ((unint64_t)v176 > 0x7FFFFFFFFFFFFFF7)
                              goto LABEL_305;
                            v135 = v175;
                            if ((unint64_t)v176 >= 0x17)
                            {
                              v104 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if (((unint64_t)v176 | 7) != 0x17)
                                v104 = v176 | 7;
                              v105 = v104 + 1;
                              v97 = operator new(v104 + 1);
                              v142[1] = v96;
                              v143 = v105 | 0x8000000000000000;
                              v142[0] = v97;
                            }
                            else
                            {
                              HIBYTE(v143) = v176;
                              v97 = v142;
                              if (!(_QWORD)v176)
                              {
LABEL_230:
                                *((_BYTE *)v96 + (_QWORD)v97) = 0;
                                if (v175 != &v177)
                                  free(v175);
                                v137 = sub_22F2F3734(v130, v142);
                                if (v75)
                                {
                                  if (SHIBYTE(v156) < 0)
                                  {
                                    sub_22E3BB2B4(v140, v155[0], (unint64_t)v155[1]);
                                  }
                                  else
                                  {
                                    *(_OWORD *)v140 = *(_OWORD *)v155;
                                    v141 = v156;
                                  }
                                }
                                else
                                {
                                  HIBYTE(v141) = 1;
                                  LOWORD(v140[0]) = 49;
                                }
                                if (v141 >= 0)
                                  v120 = v140;
                                else
                                  v120 = (void **)v140[0];
                                if (v141 >= 0)
                                  v121 = HIBYTE(v141) & 0x7F;
                                else
                                  v121 = (size_t)v140[1];
                                *(_QWORD *)((char *)&v176 + 4) = 0;
                                BYTE12(v176) = 0;
                                v178 = 0;
                                v177 = 0uLL;
                                v179 = 0;
                                v175 = v127;
                                LOBYTE(v176) = 0;
                                if (v121 > 0x7FFFFFFFFFFFFFF7)
                                  goto LABEL_305;
                                if (v121 >= 0x17)
                                {
                                  v123 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
                                  if ((v121 | 7) != 0x17)
                                    v123 = v121 | 7;
                                  v124 = v123 + 1;
                                  v122 = (__int128 *)operator new(v123 + 1);
                                  *((_QWORD *)&v173 + 1) = v121;
                                  v174 = v124 | 0x8000000000000000;
                                  *(_QWORD *)&v173 = v122;
                                }
                                else
                                {
                                  HIBYTE(v174) = v121;
                                  v122 = &v173;
                                  if (!v121)
                                    goto LABEL_291;
                                }
                                memmove(v122, v120, v121);
LABEL_291:
                                *((_BYTE *)v122 + v121) = 0;
                                v177 = v173;
                                v178 = v174;
                                goto LABEL_292;
                              }
                            }
                            memmove(v97, v135, (size_t)v96);
                            goto LABEL_230;
                          }
                        }
                        memmove(v86, __src, v85);
                        goto LABEL_204;
                      }
                      if (v77 == (_QWORD *)10)
                      {
                        std::to_string(&v147, v75);
                        v78 = std::string::insert(&v147, 0, "1e");
                        v79 = v78->__r_.__value_.__r.__words[2];
                        *(_OWORD *)v155 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
                        v156 = v79;
                        v78->__r_.__value_.__l.__size_ = 0;
                        v78->__r_.__value_.__r.__words[2] = 0;
                        v78->__r_.__value_.__r.__words[0] = 0;
                        if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v147.__r_.__value_.__l.__data_);
                        sub_22E8FCA40((_QWORD *)a1, v10, 0x1C06u, 0, (uint64_t)&v147);
                        v132 = sub_22F2F2210((uint64_t)&v147, (uint64_t)v168);
                        v175 = &v177;
                        v176 = xmmword_22F455490;
                        llvm::APInt::toString();
                        v80 = v176;
                        if ((unint64_t)v176 > 0x7FFFFFFFFFFFFFF7)
                          goto LABEL_305;
                        v81 = v175;
                        if ((unint64_t)v176 >= 0x17)
                        {
                          v98 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if (((unint64_t)v176 | 7) != 0x17)
                            v98 = v176 | 7;
                          v99 = v98 + 1;
                          v82 = operator new(v98 + 1);
                          v145 = v80;
                          v146 = v99 | 0x8000000000000000;
                          v144 = v82;
                        }
                        else
                        {
                          HIBYTE(v146) = v176;
                          v82 = &v144;
                          if (!(_QWORD)v176)
                          {
LABEL_214:
                            *((_BYTE *)v82 + v80) = 0;
                            if (v175 != &v177)
                              free(v175);
                            v100 = sub_22F2F3734(v132, &v144);
                            v136 = sub_22E90749C(v100, v155);
                            if (v156 >= 0)
                              v101 = v155;
                            else
                              v101 = (void **)v155[0];
                            if (v156 >= 0)
                              v102 = HIBYTE(v156) & 0x7F;
                            else
                              v102 = (size_t)v155[1];
                            *(_QWORD *)((char *)&v176 + 4) = 0;
                            BYTE12(v176) = 0;
                            v179 = 0;
                            v175 = v127;
                            LOBYTE(v176) = 0;
                            if (v102 > 0x7FFFFFFFFFFFFFF7)
                              goto LABEL_305;
                            if (v102 >= 0x17)
                            {
                              v106 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v102 | 7) != 0x17)
                                v106 = v102 | 7;
                              v107 = v106 + 1;
                              v103 = (__int128 *)operator new(v106 + 1);
                              *((_QWORD *)&v173 + 1) = v102;
                              v174 = v107 | 0x8000000000000000;
                              *(_QWORD *)&v173 = v103;
                            }
                            else
                            {
                              HIBYTE(v174) = v102;
                              v103 = &v173;
                              if (!v102)
                                goto LABEL_240;
                            }
                            memmove(v103, v101, v102);
LABEL_240:
                            *((_BYTE *)v103 + v102) = 0;
                            v177 = v173;
                            v178 = v174;
                            sub_22E890748(v136, &v175);
                            if (SHIBYTE(v178) < 0)
                              operator delete((void *)v177);
                            if (SHIBYTE(v146) < 0)
                              operator delete(v144);
                            sub_22E903BEC((unsigned int *)&v147);
                            sub_22E8FCA40((_QWORD *)a1, v10, 0x1821u, 0, (uint64_t)&v147);
                            std::operator+<char>();
                            v108 = sub_22F2F3734((uint64_t)&v147, (void **)&v175);
                            sub_22E894E38(v108, (unsigned __int8 *)&v161);
                            if (SHIBYTE(v176) < 0)
                              operator delete(v175);
                            sub_22E903BEC((unsigned int *)&v147);
                            goto LABEL_171;
                          }
                        }
                        memmove(v82, v81, v80);
                        goto LABEL_214;
                      }
LABEL_173:
                      if (v160 >= 0x41 && v159)
                        MEMORY[0x2348A0E84](v159, 0x1000C8000313F17);
                      v66 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                      goto LABEL_177;
                    }
                  }
                  else
                  {
                    v73 = (unint64_t *)&v171;
                  }
                  v74 = (unint64_t)v169 ^ *v73;
                  v157 = v74;
                  goto LABEL_143;
                }
              }
              memmove(p_p, v54, v55);
              goto LABEL_84;
            }
          }
          memmove(p_dst, v46, v47);
          goto LABEL_76;
        }
      }
LABEL_181:
      if (v170 >= 0x41 && v169)
        MEMORY[0x2348A0E84](v169, 0x1000C8000313F17);
      if (v172 >= 0x41 && v171)
        MEMORY[0x2348A0E84](v171, 0x1000C8000313F17);
LABEL_50:
      if (v28 >= 0x10 && (sub_22F1107D8(*(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF0)) & 1) != 0)
        return (uint64_t *)v28;
    }
  }
LABEL_52:
  sub_22F32EE84((_QWORD *)a1, v10, a2, a3);
  return 0;
}

int *sub_22EB476A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, char a7, int a8, int a9, unint64_t a10)
{
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int *result;
  _DWORD *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;

  v14 = *(_QWORD *)(a1 + 88);
  v15 = sub_22EB48984((unsigned __int8 *)(a3 & 0xFFFFFFFFFFFFFFFELL), *(_QWORD *)(v14 + 16560), a1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = *(_QWORD *)(v15 + 8);
  v17 = *(_QWORD *)(v14 + 16472);
  v18 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_22E3E4B64(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0));
  if (v19 && (*(_QWORD *)(v19 + 32) & 7 | *(_QWORD *)((*(_QWORD *)(v19 + 32) & 0xFFFFFFFFFFFFFFF0) + 8)) == v17)
    v16 = sub_22EB423E0(a1, v16);
  v20 = (unsigned __int8 *)(a2 & 0xFFFFFFFFFFFFFFFELL);
  if (a8)
  {
    if (HIDWORD(a10))
      v21 = 56;
    else
      v21 = 48;
    v22 = (int *)sub_22E3CD3D4(v14 + 2032, v21, 3);
    result = sub_22F002F18(v22, v23, v20, (_DWORD *)v15, a4, a5, a6, a7, a9, a10);
    *((_QWORD *)result + 4) = v16;
    *((_QWORD *)result + 5) = v16;
  }
  else
  {
    v25 = (_DWORD *)(sub_22EB48984(v20, *(_QWORD *)(v14 + 16560), a1) & 0xFFFFFFFFFFFFFFFELL);
    if (HIDWORD(a10))
      v26 = 40;
    else
      v26 = 32;
    v27 = (int *)sub_22E3CD3D4(v14 + 2032, v26, 3);
    sub_22F002E24(v27, v28, v25, (_DWORD *)v15, a4, v16, a6, a7, a9, a10);
    v29 = *v18;
    if (!*v18 || *(unsigned __int8 *)(v29 + 16) - 57 <= 0xFFFFFFFD)
      v29 = sub_22F10CF48(v29);
    return (int *)sub_22EB48984((unsigned __int8 *)v27, *(_QWORD *)(v29 + 32), a1);
  }
  return result;
}

uint64_t sub_22EB4785C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v19;
  int v20;
  uint64_t v23;
  int v24;
  int v25;
  int v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *__p[2];
  char v66;
  unint64_t v67[2];
  unsigned int v68[24];

  v11 = sub_22EB45EC8(a1, a4, a5, a6);
  result = 1;
  if (v11 >= 2 && v10 >= 2)
  {
    v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
    v14 = v10 & 0xFFFFFFFFFFFFFFFELL;
    v15 = *(_QWORD *)(*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
    v16 = *(_DWORD *)(v15 + 16);
    if ((v16 & 0xFE00000u) < 0x8180001 || v15 == 0 || *(_DWORD *)(v15 + 16) != 11)
      goto LABEL_10;
    v24 = v16 & 0xFF80000;
    if ((a4 - 21) <= 0xA && v24 == 137363456)
      return sub_22ED27A90((_QWORD *)a1, a2, a3, a4, v13, v14);
    if (v24 == 136314880 && (**(_QWORD **)(a1 + 72) & 0x100) != 0)
    {
      v37 = sub_22EB19A28(a1);
      if ((v37 & 1) != 0)
        return 1;
      v14 = v37 & 0xFFFFFFFFFFFFFFFELL;
      if ((*(_BYTE *)((v37 & 0xFFFFFFFFFFFFFFFELL) + 1) & 0x80) != 0)
        goto LABEL_77;
      v38 = *(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v38 + 17) & 4) != 0
        || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C)
      {
        goto LABEL_77;
      }
    }
    if ((_DWORD)a4 == 10
      && *(_DWORD *)(a1 + 10680) > *(_DWORD *)(a1 + 11956)
      && (*(_DWORD *)(v15 + 16) & 0xFF00000) == 0x8200000
      && v13
      && (*(_BYTE *)v13 + 43) >= 0xFEu)
    {
      v27 = *(_DWORD *)v13;
      if ((*(_DWORD *)v13 & 0x40000) == 0)
      {
        v28 = *(unsigned int *)(v13 + 4);
        goto LABEL_41;
      }
      v28 = *(unsigned int *)(v13 + 4);
      if (v27 == 211)
        v58 = v13 + 64;
      else
        v58 = v13 + 80;
      if (!*(_DWORD *)(v58 + 8 * v28 + 8) && !*(_DWORD *)(v58 + 8 * v28))
      {
LABEL_41:
        v29 = v27 == 211;
        if (v27 == 211)
          v30 = v13;
        else
          v30 = 0;
        v31 = (_QWORD *)(v30 + 64);
        if (!v29)
          v31 = (_QWORD *)(v13 + 80);
        if ((_DWORD)v28)
        {
          v32 = 8 * v28;
          while ((*(_DWORD *)((*v31 & 0xFFFFFFFFFFFFFFFCLL) + 28) & 0x7F) != 0x1D)
          {
            ++v31;
            v32 -= 8;
            if (!v32)
              goto LABEL_109;
          }
          if (*(_QWORD *)(v13 + 40))
          {
            v62 = *(_QWORD *)(v13 + 48);
            v67[0] = *(_QWORD *)(v13 + 40);
            v67[1] = v62;
            v61 = sub_22F0AB0EC(v67);
          }
          else
          {
            v61 = *(_DWORD *)(v13 + 24);
          }
          sub_22E8FCA40((_QWORD *)a1, v61, 0x12D5u, 0, (uint64_t)v68);
          v64 = *(_QWORD *)(v13 + 16);
          sub_22EFC683C(&v64, __p);
          v63 = sub_22F2F3734((uint64_t)v68, __p);
          sub_22F2F30F4(v63, (uint64_t)"");
          if (v66 < 0)
            operator delete(__p[0]);
          sub_22E903BEC(v68);
          return 1;
        }
      }
    }
LABEL_109:
    v60 = sub_22EB19A28(a1);
    if ((v60 & 1) == 0)
    {
      v13 = v60 & 0xFFFFFFFFFFFFFFFELL;
LABEL_10:
      v19 = *(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0);
      v20 = *(_DWORD *)(v19 + 16);
      if ((v20 & 0xFE00000u) < 0x8180001 || v19 == 0 || *(_DWORD *)(v19 + 16) != 11)
      {
LABEL_17:
        v23 = *(_QWORD *)(a1 + 72);
        if ((*(_BYTE *)(v23 + 1) & 1) != 0)
        {
          if ((*(_BYTE *)(v13 + 1) & 0x80) != 0
            || (*(_BYTE *)(v14 + 1) & 0x80) != 0
            || (v33 = *(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0), (*(_BYTE *)(v33 + 17) & 4) != 0)
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
            || (v34 = *(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0), (*(_BYTE *)(v34 + 17) & 4) != 0)
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C)
          {
LABEL_77:
            v40 = a3;
            v41 = (unsigned int *)a1;
            v42 = a2;
            v43 = a4;
            return sub_22EB47F9C(v41, v42, v40, v43, (unsigned __int8 *)v13, (unsigned __int8 *)v14);
          }
        }
        if ((*(_QWORD *)(v23 + 20) & 0x2000000000) == 0
          || (*(_BYTE *)(v13 + 1) & 0x80) == 0 && (*(_BYTE *)(v14 + 1) & 0x80) == 0)
        {
          return sub_22EB2D0B8();
        }
        if ((a4 - 22) <= 9)
        {
          v45 = *(_QWORD *)(a1 + 88);
          v46 = *(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v46 + 8) & 0xF) != 0)
            v46 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v13 + 8));
          v47 = v46 & 0xFFFFFFFFFFFFFFF0;
          if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
          {
            v48 = 0;
          }
          else
          {
            v48 = *(_QWORD *)(a1 + 1296);
            if (HIDWORD(v48))
            {
              v52 = 56;
              goto LABEL_94;
            }
          }
          v52 = 48;
LABEL_94:
          v54 = (int *)sub_22E3CD3D4(v45 + 2032, v52, 3);
          result = (uint64_t)sub_22F002F18(v54, v55, (_DWORD *)v13, (_DWORD *)v14, a4, v47, 0, 0, a3, v48);
          *(_QWORD *)(result + 32) = 0;
          *(_QWORD *)(result + 40) = 0;
          return result;
        }
        if (a4 <= 0x20)
        {
          if (((1 << a4) & 0x18FC00) != 0)
          {
            v49 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16480);
            goto LABEL_87;
          }
          if (a4 == 21)
          {
            v59 = *(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v59 + 8) & 0xF) != 0)
              v59 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v13 + 8));
            v49 = v59 & 0xFFFFFFFFFFFFFFF0;
LABEL_87:
            v50 = *(_QWORD *)(a1 + 88);
            if (*(_QWORD *)(a1 + 1296) == *(_QWORD *)(a1 + 1288))
            {
              v51 = 0;
            }
            else
            {
              v51 = *(_QWORD *)(a1 + 1296);
              if (HIDWORD(v51))
              {
                v53 = 40;
                goto LABEL_96;
              }
            }
            v53 = 32;
LABEL_96:
            v56 = (int *)sub_22E3CD3D4(v50 + 2032, v53, 3);
            return (uint64_t)sub_22F002E24(v56, v57, (_DWORD *)v13, (_DWORD *)v14, a4, v49, 0, 0, a3, v51);
          }
          if (a4 == 32)
          {
            v49 = *(_QWORD *)(v14 + 8);
            goto LABEL_87;
          }
        }
        v49 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832);
        goto LABEL_87;
      }
      v25 = v20 & 0xFF80000;
      if ((_DWORD)a4 == 21 && v25 == 136314880)
      {
        if ((**(_QWORD **)(a1 + 72) & 0x100) != 0)
        {
          if ((*(_BYTE *)(v13 + 1) & 0x80) != 0
            || (*(_BYTE *)(v14 + 1) & 0x80) != 0
            || (v39 = *(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0), (*(_BYTE *)(v39 + 17) & 4) != 0)
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C)
          {
            v40 = a3;
            v41 = (unsigned int *)a1;
            v42 = a2;
            v43 = 21;
            return sub_22EB47F9C(v41, v42, v40, v43, (unsigned __int8 *)v13, (unsigned __int8 *)v14);
          }
        }
        return sub_22EB2D0B8();
      }
      if (v25 == 136314880 && (**(_QWORD **)(a1 + 72) & 0x100) != 0)
      {
        v44 = *(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v44 + 17) & 4) != 0
          || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C)
        {
          goto LABEL_77;
        }
      }
      v36 = sub_22EB19A28(a1);
      if (v36 >= 2)
      {
        v14 = v36 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_17;
      }
    }
    return 1;
  }
  return result;
}

void sub_22EB47EE8(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v8;
  int v10;

  v8 = dword_22F4A2BC4[a4];
  if ((_DWORD)v8 != 15 && (_DWORD)v8 != 0)
    sub_22EC65EB4(a1, dword_22F4A2BC4[a4], a2, a5);
  if ((*(_BYTE *)(a1[9] + 1) & 0x10) != 0 && v8 <= 0x21)
  {
    if (((1 << v8) & 0x300030000) != 0)
    {
      v10 = 34;
LABEL_11:
      sub_22EC65EB4(a1, v10, a2, a5);
      return;
    }
    if (v8 == 31)
    {
      v10 = 30;
      goto LABEL_11;
    }
  }
}

uint64_t sub_22EB47F9C(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v11;
  uint64_t v12;
  void *v14[2];
  _QWORD v15[17];

  v15[16] = *MEMORY[0x24BDAC8D0];
  if (a4 <= 0x1F && ((1 << a4) & 0xE5A00000) != 0)
  {
    v11 = a3;
    sub_22EB45F78(a1, a5, a6, a3, 0);
    sub_22EB43314(a5, (unsigned __int8 **)a6, v11, (uint64_t)a1);
  }
  else
  {
    v11 = a3;
  }
  v14[0] = v15;
  v14[1] = (void *)0x1000000000;
  sub_22EB47EE8(a1, a2, a3, a4, (uint64_t)v14);
  v12 = sub_22ED1767C((uint64_t)a1, v11, a4, (uint64_t)v14, (uint64_t)a5, (uint64_t)a6, 1, 1, 0);
  if (v14[0] != v15)
    free(v14[0]);
  return v12;
}

unint64_t sub_22EB480D4(_QWORD *a1, uint64_t a2, _DWORD *a3, int *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t result;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  int v28;
  _QWORD *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55[24];
  unint64_t v56;
  unsigned __int8 v57;

  v57 = a6;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
    return *(_QWORD *)(a1[11] + 16832);
  v56 = *(_QWORD *)(a2 + 8);
  v14 = (uint64_t *)(v56 & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0);
  if (v15)
    v16 = *(_BYTE *)(v15 + 16) == 6;
  else
    v16 = 0;
  if (v16
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6
    && (v15 = sub_22F10CF48(v15)) != 0)
  {
    v56 = *(_QWORD *)(v15 + 32);
    v14 = (uint64_t *)(v56 & 0xFFFFFFFFFFFFFFF0);
  }
  v17 = a1[9];
  v18 = *v14;
  if ((*(_QWORD *)v17 & 0x100) == 0)
    goto LABEL_17;
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v19)
    v20 = (*(_DWORD *)(v19 + 16) & 0xFF800FF) == 87031819;
  else
    v20 = 0;
  if (v20)
  {
    if ((*(_BYTE *)(v17 + 104) & 0x20) != 0)
    {
      v28 = a5;
      if ((_DWORD)a6)
      {
        v29 = a1;
        v30 = 3601;
LABEL_76:
        sub_22E8FCA40(v29, v28, v30, 0, (uint64_t)v55);
        sub_22F0D4E74(a2);
        v54 = v44;
        v45 = v55;
LABEL_77:
        sub_22E8906A0((uint64_t)v45, &v54);
        goto LABEL_78;
      }
    }
    else
    {
      if ((a6 & 1) != 0)
      {
        if ((*(_QWORD *)v17 & 0x800) != 0)
          v25 = 5269;
        else
          v25 = 6674;
        sub_22E8FCA40(a1, a5, v25, 0, (uint64_t)v55);
        sub_22F0D4E74(a2);
        v54 = v26;
        v27 = v55;
        goto LABEL_32;
      }
      v28 = a5;
    }
    v29 = a1;
    v30 = 3178;
    goto LABEL_76;
  }
  if (*(_DWORD *)(v19 + 16) == 44)
  {
    sub_22E8FCA40(a1, a5, 0xE12u, 0, (uint64_t)v55);
    v21 = sub_22E894E38((uint64_t)v55, &v57);
    sub_22E8901B8(v21, (uint64_t *)&v56);
LABEL_78:
    sub_22E903BEC(v55);
    return 0;
  }
LABEL_17:
  if (sub_22F110E00(v18))
    goto LABEL_33;
  v23 = *v14;
  v24 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  switch(v24)
  {
    case 12:
      sub_22E8FCA40(a1, a5, 0x14A0u, 0, (uint64_t)v55);
      v31 = sub_22E8901B8((uint64_t)v55, (uint64_t *)&v56);
      sub_22F0D4E74(a2);
      v54 = v32;
      v27 = (unsigned int *)v31;
LABEL_32:
      sub_22E8906A0((uint64_t)v27, &v54);
      sub_22E903BEC(v55);
      goto LABEL_33;
    case 32:
      if ((sub_22EB55790((uint64_t)a1, a5, a2) & 1) != 0 || (sub_22EB3C73C(a1, a5, a2) & 1) != 0)
        return 0;
      goto LABEL_33;
    case 39:
      if ((sub_22EB3C610((uint64_t)a1, a5, a2) & 1) == 0)
        return 0;
      goto LABEL_33;
  }
  v35 = *(_DWORD *)(v23 + 16);
  if (v35 == 11 && (v35 & 0xFE00000u) >= 0x8180001)
  {
    v46 = sub_22EB19A28(a1);
    if ((v46 & 1) == 0)
      return sub_22EB480D4(a1, v46 & 0xFFFFFFFFFFFFFFFELL, a3, a4, a5, a6, a7);
    return 0;
  }
  v37 = a1[9];
  v38 = *(_QWORD *)(v37 + 8);
  if ((v38 & 0x40000000000) == 0 || (v24 - 55) >= 2)
  {
    if ((v38 & 0x80000000000) != 0 && (v24 - 55) <= 1)
    {
      if (v35 - 57 <= 0xFFFFFFFD)
        v35 = *(_DWORD *)(sub_22F10CF48(v23) + 16);
      if ((v35 & 0x780000) != 0x200000)
        goto LABEL_33;
      v37 = a1[9];
    }
    if ((*(_DWORD *)(v37 + 52) & 0x40000000) != 0)
    {
      v39 = *v14;
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 <= 1)
      {
        if (*(unsigned __int8 *)(v39 + 16) - 57 <= 0xFFFFFFFD)
          v39 = sub_22F10CF48(v39);
        v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
        v41 = *(_DWORD *)(v40 + 16);
        if (v40)
          v42 = v41 == 11;
        else
          v42 = 0;
        if (v42)
        {
          if (((*(_DWORD *)(v40 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
            goto LABEL_33;
        }
        else if (v40 && v41 == 44)
        {
          v43 = sub_22F114198(*(_QWORD *)(v40 + 24));
          if (((*(_BYTE *)(v43 + 74) & 1) != 0 || *(_QWORD *)(v43 + 128) > 7uLL)
            && (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v40 + 24)) + 76) & 0x80) == 0)
          {
            goto LABEL_33;
          }
        }
        else if (v41 == 9)
        {
          goto LABEL_33;
        }
      }
    }
    if ((*(_BYTE *)(a1[9] + 104) & 0x20) == 0)
      goto LABEL_96;
    v47 = *v14;
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) - 55 > 1)
      goto LABEL_96;
    if (*(unsigned __int8 *)(v47 + 16) - 57 <= 0xFFFFFFFD)
      v47 = sub_22F10CF48(v47);
    if (!sub_22F110E00(*(_QWORD *)(*(_QWORD *)(v47 + 32) & 0xFFFFFFFFFFFFFFF0))
      || ((v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22E3E4B64(*v14) + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
        ? (v49 = (*(_DWORD *)(v48 + 16) & 0xFF800FF) == 87031819)
        : (v49 = 0),
          v49))
    {
LABEL_96:
      sub_22E8FCA40(a1, a5, 0x136Bu, 0, (uint64_t)v55);
      v50 = sub_22E8901B8((uint64_t)v55, (uint64_t *)&v56);
      v53 = v57;
      v51 = sub_22E8900C4(v50, &v53);
      sub_22F0D4E74(a2);
      v54 = v52;
      v45 = (unsigned int *)v51;
      goto LABEL_77;
    }
  }
LABEL_33:
  if ((sub_22EB42C34((uint64_t *)a2, a5, a1) & 1) != 0)
    return 0;
  if ((*(_BYTE *)(a1[9] + 1) & 0x10) != 0
    && ((v56 & 4) != 0 || (*(_BYTE *)((v56 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0))
  {
    sub_22E8FCA40(a1, a5, 0x1964u, 0, (uint64_t)v55);
    v33 = sub_22E894E38((uint64_t)v55, &v57);
    sub_22E8901B8(v33, (uint64_t *)&v56);
    sub_22E903BEC(v55);
  }
  if ((a7 & 1) != 0)
  {
    result = v56;
    if ((*(_BYTE *)(a1[9] + 1) & 1) != 0)
    {
      *a3 = 1;
      *a4 = (*(_DWORD *)a2 >> 10) & 7;
      return result;
    }
  }
  else
  {
    result = v56;
  }
  *a3 = 0;
  v34 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v34 + 8) & 0xF) != 0)
    v34 = (unint64_t)sub_22F10D2BC(result);
  return v34 & 0xFFFFFFFFFFFFFFF0;
}

BOOL sub_22EB48670(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  unsigned int v6;

  if (a2 < 0x10)
    return 0;
  v5 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v5 + 17) & 4) != 0)
    return 0;
  if (!sub_22F1124D8(v5))
    return 1;
  v6 = sub_22EF6A330(a1, a2);
  return v6 >= sub_22EF6A330(a1, *(_QWORD *)(a1 + 16480));
}

uint64_t sub_22EB486EC(_QWORD *a1, _BYTE *a2, _DWORD *a3, unsigned int a4)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28[24];
  uint64_t v29;

  if ((a2[1] & 0x80) != 0)
    return *(_QWORD *)(a1[11] + 16832);
  v7 = sub_22EB1B998((uint64_t)a1, a2);
  if ((v7 & 1) != 0)
    return 0;
  v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v29 = v9;
  if (*(unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL) == 149)
  {
    v10 = *((_QWORD *)sub_22EFFBBCC((unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL)) + 1);
    sub_22F0D4E74(v8);
    sub_22E95CBEC(a1, v10, v9, 1, v11);
  }
  v12 = v9 & 0xFFFFFFFFFFFFFFF0;
  v13 = *(_QWORD *)v12;
  v14 = *(unsigned __int8 *)(*(_QWORD *)v12 + 16);
  if (!*(_QWORD *)v12 || v14 != 39)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    {
      v13 = sub_22F10CF48(v13);
      if (v13)
        goto LABEL_13;
      v13 = *(_QWORD *)v12;
      v14 = *(unsigned __int8 *)(*(_QWORD *)v12 + 16);
    }
    if (v14 != 32
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
       || (v13 = sub_22F10CF48(v13)) == 0))
    {
      v26 = sub_22EB19A28(a1);
      if ((v26 & 1) != 0)
        return 0;
      if ((v26 & 0xFFFFFFFFFFFFFFFELL) != v8)
        return sub_22EB486EC(a1, v26 & 0xFFFFFFFFFFFFFFFELL, a3, a4);
LABEL_14:
      sub_22E8FCA40(a1, a4, 0x1373u, 0, (uint64_t)v28);
      v16 = sub_22E8901B8((uint64_t)v28, &v29);
      sub_22F0D4E74(v8);
      v27 = v17;
      sub_22E8906A0(v16, &v27);
      sub_22E903BEC(v28);
      return 0;
    }
  }
LABEL_13:
  v15 = *(_QWORD *)(v13 + 32);
  if (v15 <= 0xF)
    goto LABEL_14;
  v19 = a1[9];
  if ((*(_BYTE *)(v19 + 1) & 1) != 0)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v20 && (*(_DWORD *)(v20 + 16) & 0xFF800FF) == 86507531)
    {
      sub_22E8FCA40(a1, a4, 0x1509u, 0, (uint64_t)v28);
      v22 = sub_22E8901B8((uint64_t)v28, &v29);
      sub_22F0D4E74(v8);
      v27 = v23;
      sub_22E8906A0(v22, &v27);
      sub_22E903BEC(v28);
      v19 = a1[9];
    }
  }
  *a3 = 1;
  if ((*(_BYTE *)(v19 + 1) & 1) == 0)
  {
    if ((v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0),
          (v15 & 0xF) == 0)
      && (v24 ? (v25 = (*(_DWORD *)(v24 + 16) & 0xFF800FF) == 86507531) : (v25 = 0),
          v25 && (*(_BYTE *)((v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xF) == 0)
      || *(_DWORD *)(v24 + 16) - 25 <= 1)
    {
      *a3 = 0;
    }
  }
  return v15;
}

uint64_t sub_22EB48984(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;

  v6 = sub_22E3E4B64(*(_QWORD *)(*((_QWORD *)a1 + 1) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a3 + 88);
  v8 = *(unsigned int *)(v6 + 20);
  v9 = (*(_DWORD *)(v6 + 16) >> 19) & 0xF;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 56)
    v10 = sub_22EF63724(v7, a2, v8, v9);
  else
    v10 = sub_22F36B7E4(v7, a2, v8, v9);
  v11 = v10;
  if (*a1 != 153 || (result = *((_QWORD *)a1 + 2), *(_QWORD *)(result + 8) != v11))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v14 = *(_DWORD *)(v13 + 16);
    if (v13)
      v15 = v14 == 11;
    else
      v15 = 0;
    if (v15)
    {
      if (((*(_DWORD *)(v13 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
        goto LABEL_16;
    }
    else
    {
      if (v13 && v14 == 44)
      {
        v16 = sub_22F114198(*(_QWORD *)(v13 + 24));
        if ((*(_BYTE *)(v16 + 74) & 1) == 0 && *(_QWORD *)(v16 + 128) <= 7uLL
          || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v13 + 24)) + 72) & 0x8000000000) != 0)
        {
          goto LABEL_18;
        }
LABEL_16:
        v17 = 30;
        return sub_22E90092C(a3, (uint64_t)a1, v11, v17, 0, 0);
      }
      if (v14 == 9)
        goto LABEL_16;
    }
LABEL_18:
    v17 = 42;
    return sub_22E90092C(a3, (uint64_t)a1, v11, v17, 0, 0);
  }
  return result;
}

BOOL sub_22EB48AD0(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t v3;
  _BOOL8 result;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;

  v2 = *a2;
  if (v2 == 211)
  {
    if (*((_QWORD *)a2 + 5))
    {
      v7 = *((unsigned int *)a2 + 1);
      if ((_DWORD)v7)
      {
        v8 = a2 + 64;
        v9 = 8 * v7;
        while (1)
        {
          v10 = *v8 & 0xFFFFFFFFFFFFFFFCLL;
          if (!v10 || (*(_DWORD *)(v10 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
            break;
          if ((*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 32))(*v8 & 0xFFFFFFFFFFFFFFFCLL)
                          + 80) & 0xE000) != 0x4000
            && ((*(_QWORD *)(v10 + 40) & 7) != 6
             || (*(_DWORD *)(*(_QWORD *)(v10 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
          {
            return 1;
          }
          result = 0;
          ++v8;
          v9 -= 8;
          if (!v9)
            return result;
        }
      }
    }
  }
  else if (v2 == 161 && (a2[2] & 4) != 0 && *((_QWORD *)a2 + 4))
  {
    v3 = *((_QWORD *)a2 + 2);
    result = sub_22E8BB0E8(v3);
    if (!result)
      return result;
    v5 = *(_DWORD *)(v3 + 28);
    v6 = (v5 & 0x7F) - 49;
    if (v6 < 0x14 && ((0x80007u >> v6) & 1) != 0)
      return 1;
    if ((v5 & 0x7Eu) - 54 <= 3
      && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3) + 80) & 0xE000) != 0x4000)
    {
      if ((*(_QWORD *)(v3 + 40) & 7) == 6)
        return (*(_DWORD *)(*(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFFFF8) - 5) < 0xFFFFFFFC;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_22EB48C3C(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned int v6;
  uint64_t v7;

  if (a4 <= 195)
    return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))((char *)&loc_22EB48C68
                                                                        + 4 * byte_22F480160[a4 - 27]))(a1, a2, a3, 2);
  if (a4 == 199)
    v6 = 11;
  else
    v6 = 10;
  if (a4 == 196)
    v7 = 12;
  else
    v7 = v6;
  return sub_22EB2941C(a1, a2, a3, v7, a5);
}

uint64_t sub_22EB48CC8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  int v12[3];
  int v13;
  uint64_t v14;
  int v15;

  v15 = a2;
  v14 = a3;
  v13 = a4;
  *(_QWORD *)v12 = *(unsigned int *)(a1 + 1704);
  result = sub_22EB4DDB8(a1 + 3688, &v15, v12, (__int16 *)(a1 + 1693), &v14, &v13);
  v6 = *(unsigned int *)(a1 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(a1 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    return sub_22EAEAE08(a1 + 1840, (uint64_t *)(v11 - 496));
  }
  return result;
}

void *sub_22EB48DCC(uint64_t a1)
{
  void *result;
  uint64_t v3;

  *(_DWORD *)(a1 + 1704) = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 568);
  *(_WORD *)(a1 + 1693) = 0;
  result = *(void **)(a1 + 1784);
  if (result != *(void **)(a1 + 1776))
  {
    v3 = *(unsigned int *)(a1 + 1792);
    if (v3 >= 0x21 && 4 * (*(_DWORD *)(a1 + 1796) - *(_DWORD *)(a1 + 1800)) < v3)
    {
      result = (void *)llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)(a1 + 1776));
      goto LABEL_3;
    }
    result = memset(result, 255, 8 * v3);
  }
  *(_QWORD *)(a1 + 1796) = 0;
LABEL_3:
  *(_DWORD *)(a1 + 1848) = 0;
  return result;
}

_QWORD *sub_22EB48E64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v9;
  unsigned int v11;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  uint64_t v21;
  char *v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  _DWORD *v34;
  uint64_t v35;
  const char *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v42;
  uint64_t v43;
  const char *v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  __n128 *v65;
  BOOL v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  uint64_t v69;
  int v70;
  int *v71;
  int *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  BOOL v91;
  unsigned int v92;
  unsigned int v94;
  _QWORD *result;
  _DWORD *v96;
  __int16 v97;
  uint64_t v98;
  const void **v99;
  uint64_t v100;
  char v101;
  const void *v102;
  unint64_t v103;
  char v104;
  char v105;
  char v106;
  int v107;
  int v108;
  uint64_t v109;
  unsigned int v110[24];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114[2];
  uint64_t v115[9];
  llvm *v116[2];
  uint64_t v117;
  unsigned int v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  int v122;
  _QWORD v123[6];
  BOOL v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696);
  v3 = v2 - 576;
  v4 = *(_DWORD *)(v2 - 564);
  v5 = *(unsigned int *)(v2 - 440);
  if ((_DWORD)v5)
  {
    v6 = **(_QWORD **)(a1 + 72);
    if ((v6 & 0x1000) == 0)
    {
      v7 = *(_DWORD *)v3;
      if (*(_DWORD *)(v2 - 8) == 1)
        goto LABEL_4;
      if (v7 <= 3 && v7 != 2)
      {
        v11 = 3719;
LABEL_21:
        v13 = *(uint64_t **)(v2 - 448);
        v14 = 8 * v5;
        do
        {
          v15 = *v13++;
          sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v15 + 16), v11, 0, (uint64_t)v110);
          sub_22E903BEC(v110);
          v14 -= 8;
        }
        while (v14);
        goto LABEL_23;
      }
      if ((v6 & 0x800) == 0 && (v7 & 0xFFFFFFFE) == 4)
      {
LABEL_4:
        if ((v7 & 0xFFFFFFFE) == 4 && (**(_QWORD **)(a1 + 72) & 0x800) == 0)
          v9 = 3715;
        else
          v9 = 3716;
        if (v7 > 3 || v7 == 2)
          v11 = v9;
        else
          v11 = 3719;
        goto LABEL_21;
      }
    }
  }
LABEL_23:
  v17 = *(char **)(v2 - 248);
  v16 = *(char **)(v2 - 240);
  v18 = (unsigned int *)(v2 - 228);
  if (v16 != v17)
    v18 = (unsigned int *)(v2 - 232);
  v19 = *v18;
  v20 = *(unsigned __int8 ***)(v2 - 240);
  if ((_DWORD)v19)
  {
    v21 = 0;
    while (*(_QWORD *)&v16[v21] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v21 += 8;
      if (8 * v19 == v21)
        goto LABEL_53;
    }
    v20 = (unsigned __int8 **)&v16[v21];
  }
  v22 = &v16[8 * v19];
  if (v20 != (unsigned __int8 **)v22)
  {
    v23 = v4;
    v24 = *v20;
LABEL_33:
    v25 = sub_22EB4DFE4(a1, v24);
    if (v25)
    {
      v30 = *(_QWORD *)(v25 + 16);
      sub_22EFF605C((uint64_t)v24);
      sub_22E8FCA40((_QWORD *)a1, v31, 0x196Fu, 0, (uint64_t)v116);
      v32 = *(_QWORD *)(v30 + 40) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(v30 + 40) & 7) != 0 || v32 == 0)
      {
        v35 = 0;
        v36 = "";
      }
      else
      {
        v34 = *(_DWORD **)(v32 + 16);
        v37 = *v34;
        v36 = (const char *)(v34 + 4);
        v35 = v37;
      }
      v111 = (uint64_t)v36;
      v112 = v35;
      v38 = sub_22F2F2210((uint64_t)v116, (uint64_t)&v111);
      sub_22F0D4E74((uint64_t)v24);
      v114[0] = v39;
      sub_22E8906A0(v38, v114);
      sub_22E903BEC((unsigned int *)v116);
      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v30 + 24), 0x1771u, 0, (uint64_t)v116);
      v40 = *(_QWORD *)(v30 + 40) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(v30 + 40) & 7) != 0 || v40 == 0)
      {
        v43 = 0;
        v44 = "";
      }
      else
      {
        v42 = *(_DWORD **)(v40 + 16);
        v45 = *v42;
        v44 = (const char *)(v42 + 4);
        v43 = v45;
      }
      v111 = (uint64_t)v44;
      v112 = v43;
      sub_22F2F2210((uint64_t)v116, (uint64_t)&v111);
    }
    else
    {
      sub_22EFF605C((uint64_t)v24);
      sub_22E8FCA40((_QWORD *)a1, v26, 0x1970u, 0, (uint64_t)v116);
      sub_22F0D4E74((uint64_t)v24);
      v111 = v27;
      sub_22E8906A0((uint64_t)v116, &v111);
    }
    sub_22E903BEC((unsigned int *)v116);
    v28 = (unint64_t *)(v20 + 1);
    while (v28 != (unint64_t *)v22)
    {
      v29 = *v28++;
      v24 = (unsigned __int8 *)v29;
      if (v29 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v20 = (unsigned __int8 **)(v28 - 1);
        goto LABEL_33;
      }
    }
    v17 = *(char **)(v2 - 248);
    v16 = *(char **)(v2 - 240);
    v4 = v23;
  }
LABEL_53:
  if (v16 == v17)
    goto LABEL_54;
  v57 = *(unsigned int *)(v2 - 232);
  if (v57 < 0x21 || 4 * (*(_DWORD *)(v2 - 228) - *(_DWORD *)(v2 - 224)) >= v57)
  {
    memset(v16, 255, 8 * v57);
LABEL_54:
    *(_QWORD *)(v2 - 228) = 0;
    goto LABEL_55;
  }
  llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)(v2 - 248));
LABEL_55:
  v46 = *(unsigned int *)(v2 - 112);
  if ((_DWORD)v46)
  {
    if (*(_BYTE *)(a1 + 3208))
      goto LABEL_124;
    if (v46 < 2)
    {
      if (*(_DWORD *)(v2 - 52) != *(_DWORD *)(v2 - 48))
      {
        v116[0] = (llvm *)(v2 - 72);
        sub_22EB56FB0((uint64_t)v116, *(_QWORD *)((**(_QWORD **)(v2 - 120) & 0xFFFFFFFFFFFFFFF8) + 16), 0);
      }
    }
    else
    {
      *(_BYTE *)(a1 + 3208) = 1;
      v106 = *(_BYTE *)(a1 + 11952);
      v107 = *(_DWORD *)(a1 + 8456);
      v105 = *(_BYTE *)(a1 + 10664);
      v108 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 180);
      sub_22EE03478(a1);
      if (!v47)
        *(_BYTE *)(a1 + 11952) = 1;
      *(_BYTE *)(a1 + 10664) = 1;
      v104 = *(_BYTE *)(a1 + 12032);
      *(_BYTE *)(a1 + 12032) = 1;
      v48 = *(_QWORD *)(v2 - 120);
      v49 = v48 + 8 * v46;
      v50 = v49;
      v51 = v49;
      v52 = v49;
      do
      {
        v53 = *(_BYTE *)(v52 - 8);
        v52 -= 8;
        if ((v53 & 4) == 0)
        {
          v116[1] = 0;
          v117 = 0;
          v118 = 0;
          v116[0] = (llvm *)a1;
          v119 = v123;
          v120 = v123;
          v121 = 2;
          v122 = 0;
          v123[2] = v2 - 72;
          v123[3] = v2 - 120;
          v123[4] = v49;
          v123[5] = v50;
          v124 = 1;
          v124 = (*sub_22EFFED0C((unsigned __int8 *)(*(_QWORD *)(v51 - 8) & 0xFFFFFFFFFFFFFFF8)) & 0xFE) != 118;
          sub_22EB62928((uint64_t)v116, *(_DWORD **)((*(_QWORD *)(v51 - 8) & 0xFFFFFFFFFFFFFFF8) + 16), v54);
          if ((v55 & 1) != 0)
            v56 = 1;
          else
            v56 = (uint64_t)sub_22EBCCCF0(a1, (int *)(v55 & 0xFFFFFFFFFFFFFFFELL));
          *(_QWORD *)((*(_QWORD *)(v51 - 8) & 0xFFFFFFFFFFFFFFF8) + 16) = v56 & 0xFFFFFFFFFFFFFFFELL;
          if (v120 != v119)
            free(v120);
          llvm::deallocate_buffer(v116[1], (void *)(16 * v118));
          v48 = *(_QWORD *)(v2 - 120);
        }
        v50 -= 8;
        v51 = v52;
      }
      while (v52 != v48);
      *(_BYTE *)(a1 + 12032) = v104;
      *(_DWORD *)(a1 + 8456) = v107;
      *(_BYTE *)(a1 + 11952) = v106;
      *(_BYTE *)(a1 + 10664) = v105;
      v59 = *(_QWORD *)(a1 + 104);
      if (*(_DWORD *)(v59 + 180) == 5)
        *(_BYTE *)(v59 + 170) = 1;
      if (v108)
        v60 = 3;
      else
        v60 = 0;
      *(_DWORD *)(v59 + 180) = v60;
      *(_BYTE *)(a1 + 3208) = 0;
      v3 = v2 - 576;
    }
  }
  else if (*(_DWORD *)(v2 - 52) == *(_DWORD *)(v2 - 48) || *(_BYTE *)(a1 + 3208))
  {
    goto LABEL_124;
  }
  v109 = v3;
  v61 = *(unsigned int *)(v2 - 112);
  if ((_DWORD)v61)
  {
    v62 = *(uint64_t **)(v2 - 120);
    v63 = &v62[v61];
    do
    {
      v64 = *v62;
      if ((*v62 & 4) == 0)
      {
        v116[0] = (llvm *)&v117;
        v116[1] = (llvm *)0x800000000;
        LOWORD(v114[0]) = 0;
        LODWORD(v115[0]) = 0;
        v114[1] = (uint64_t)v116;
        v65 = (__n128 *)(v64 & 0xFFFFFFFFFFFFFFF8);
        if (sub_22F006900(v64 & 0xFFFFFFFFFFFFFFF8, (uint64_t)v114, *(_QWORD *)(a1 + 88), 3))
          v66 = LODWORD(v116[1]) == 0;
        else
          v66 = 0;
        if (v66)
        {
          sub_22EFF67A4(v65, (uint64_t)v115, *(_QWORD *)(a1 + 88));
        }
        else
        {
          v67 = (unsigned __int8 *)v65[1].n128_u64[0];
          v68 = sub_22EFFED0C(v67);
          if (*v68 == 145)
            v68 = (unsigned __int8 *)*((_QWORD *)v68 + 2);
          v113 = 0;
          if ((*v68 + 113) >= 0xFBu)
            v69 = sub_22EFFA604(*(unsigned __int8 **)&v68[v68[3]]);
          else
            v69 = *((_QWORD *)v68 + 2);
          v113 = v69;
          sub_22F0D5A50((uint64_t)v67);
          sub_22E8FCA40((_QWORD *)a1, v70, 0xE38u, 0, (uint64_t)&v111);
          sub_22E890024((uint64_t)&v111, &v113);
          sub_22E903BEC((unsigned int *)&v111);
          if (LODWORD(v116[1]))
          {
            v71 = (int *)v116[0];
            v72 = (int *)((char *)v116[0] + 32 * LODWORD(v116[1]));
            do
            {
              v73 = (uint64_t)(v71 + 2);
              v74 = *v71;
              v71 += 8;
              sub_22E90379C((_QWORD *)a1, v74, v73, 0, (uint64_t)&v111);
              sub_22E903BEC((unsigned int *)&v111);
            }
            while (v71 != v72);
          }
        }
        if (LODWORD(v115[0]) >= 2)
          sub_22EF53BC0(v115);
        sub_22E89277C((char **)v116);
      }
      ++v62;
    }
    while (v62 != v63);
  }
  v75 = *(_QWORD *)(v2 - 64);
  v76 = -56;
  if (v75 == *(_QWORD *)(v2 - 72))
    v76 = -52;
  v77 = *(unsigned int *)(v2 + v76);
  if ((_DWORD)v77)
  {
    v78 = 8 * v77;
    v79 = *(unint64_t **)(v2 - 64);
    v3 = v109;
    while (*v79 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v79;
      v78 -= 8;
      if (!v78)
        goto LABEL_124;
    }
  }
  else
  {
    v79 = *(unint64_t **)(v2 - 64);
    v3 = v109;
  }
  v80 = (unint64_t *)(v75 + 8 * v77);
  if (v79 != v80)
  {
    v81 = *v79;
LABEL_117:
    v114[0] = *(_QWORD *)(v81 + 16);
    if ((*(_BYTE *)(v81 + 2) & 4) != 0)
    {
      *(_OWORD *)v116 = *(_OWORD *)(v81 + 32);
      v82 = sub_22F0AB0EC((unint64_t *)v116);
    }
    else
    {
      v82 = *(_DWORD *)(v81 + 4);
    }
    sub_22E8FCA40((_QWORD *)a1, v82, 0xE3Au, 0, (uint64_t)v116);
    sub_22E890024((uint64_t)v116, v114);
    sub_22E903BEC((unsigned int *)v116);
    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v114[0] + 24), 0x64u, 0, (uint64_t)&v111);
    sub_22E903BEC((unsigned int *)&v111);
    v83 = v79 + 1;
    while (v83 != v80)
    {
      v84 = *v83++;
      v81 = v84;
      if (v84 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v79 = v83 - 1;
        goto LABEL_117;
      }
    }
  }
LABEL_124:
  v85 = *(unsigned int *)(v2 - 144);
  if ((_DWORD)v85)
  {
    v86 = *(uint64_t **)(v2 - 152);
    v87 = 8 * v85;
    do
    {
      v88 = *v86++;
      sub_22F0D5A50(v88);
      sub_22E8FCA40((_QWORD *)a1, v89, 0x1969u, 0, (uint64_t)v116);
      v111 = *(_QWORD *)(v88 + 8);
      sub_22E8901B8((uint64_t)v116, &v111);
      sub_22E903BEC((unsigned int *)v116);
      v87 -= 8;
    }
    while (v87);
  }
  v90 = *(_DWORD *)v3;
  v91 = *(_DWORD *)v3 > 3u || v90 == 2;
  v92 = v90 & 0xFFFFFFFE;
  if (!v91 || v92 == 4)
  {
    *(_DWORD *)(a1 + 1704) = *(_DWORD *)(v3 + 8);
    *(_WORD *)(a1 + 1693) = *(_WORD *)(v3 + 4);
    sub_22EB4E2D8((_QWORD *)a1);
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v2 - 560));
    sub_22EAEAE08(a1 + 1840, (uint64_t *)(v2 - 496));
  }
  else
  {
    v97 = *(_WORD *)(v3 + 4);
    *(_BYTE *)(a1 + 1693) |= v97 & 1;
    *(_BYTE *)(a1 + 1694) |= HIBYTE(v97) & 1;
    v98 = *(unsigned int *)(v3 + 88);
    if ((_DWORD)v98)
    {
      v99 = *(const void ***)(v3 + 80);
      v100 = 8 * v98;
      do
      {
        sub_22E3BA850(a1 + 1776, *v99);
        if (v101)
        {
          v102 = *v99;
          v103 = *(unsigned int *)(a1 + 1848);
          if (v103 >= *(unsigned int *)(a1 + 1852))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v103 = *(unsigned int *)(a1 + 1848);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 1840) + 8 * v103) = v102;
          ++*(_DWORD *)(a1 + 1848);
        }
        ++v99;
        v100 -= 8;
      }
      while (v100);
    }
  }
  v94 = *(_DWORD *)(a1 + 3696) - 1;
  *(_DWORD *)(a1 + 3696) = v94;
  result = sub_22E907910((_QWORD *)(*(_QWORD *)(a1 + 3688) + 576 * v94));
  v96 = (_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 564);
  *v96 += v4;
  return result;
}

uint64_t sub_22EB497A8(uint64_t a1, int a2, unsigned int *a3, int a4, int a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  BOOL v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;

  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
  if (*(_DWORD *)(*(_QWORD *)(v10 + 32) + 176) <= *(_DWORD *)(v10 + 44))
    goto LABEL_5;
  *(_DWORD *)(a1 + 1704) = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 568);
  *(_WORD *)(a1 + 1693) = 0;
  v11 = *(void **)(a1 + 1784);
  if (v11 != *(void **)(a1 + 1776))
  {
    v25 = *(unsigned int *)(a1 + 1792);
    if (v25 >= 0x21 && 4 * (*(_DWORD *)(a1 + 1796) - *(_DWORD *)(a1 + 1800)) < v25)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)(a1 + 1776));
      goto LABEL_4;
    }
    memset(v11, 255, 8 * v25);
  }
  *(_QWORD *)(a1 + 1796) = 0;
LABEL_4:
  *(_DWORD *)(a1 + 1848) = 0;
LABEL_5:
  sub_22EB48E64(a1);
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(v12 + 16392);
  v14 = *a3;
  if (v14 < 0x100)
    goto LABEL_16;
  v15 = v14 >> 8;
  v16 = 2 * (v14 >> 8);
  while (v16 * 4)
  {
    v17 = *(unsigned __int8 **)&a3[v16 + 2];
    v18 = *v17;
    v16 -= 2;
    if (v18 != 19)
      goto LABEL_11;
  }
  v17 = *(unsigned __int8 **)&a3[2 * (v15 - 1) + 4];
  LOBYTE(v18) = *v17;
LABEL_11:
  if ((v18 + 20) < 0x79u)
  {
LABEL_16:
    v22 = 0;
  }
  else
  {
    while ((v18 + 21) <= 0x7Au)
    {
      v19 = v18 == 235;
      v20 = v17 + 8;
      v21 = v17 + 16;
      if (!v19)
        v21 = v20;
      v17 = *(unsigned __int8 **)v21;
      LOBYTE(v18) = *v17;
      if ((*v17 - 101) >= 0x87u)
        goto LABEL_16;
    }
    v13 = *((_QWORD *)v17 + 1);
    v22 = 1;
  }
  v23 = sub_22E3CD3D4(v12 + 2032, 32, 3);
  sub_22F3307C0(v23, (uint64_t)a3, v13, a2, a4, a5);
  if (v22)
    return sub_22EBCC6C0(a1, v23);
  else
    return v23;
}

uint64_t sub_22EB49994(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  char v15;

  if ((a2 & 1) != 0)
    return 1;
  v3 = 1;
  v4 = sub_22EB1922C(a1, (void *)(a2 & 0xFFFFFFFFFFFFFFFELL));
  if ((v4 & 1) == 0)
  {
    v3 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if ((v5 & 0x8000) == 0)
    {
      if ((v5 & 0x1FC00FF) == 0xE80099)
      {
        return *(_QWORD *)(v3 + 16);
      }
      else
      {
        sub_22F0D5A50(v4 & 0xFFFFFFFFFFFFFFFELL);
        v8 = v7;
        v9 = *(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v9 + 8) & 0xF) != 0)
          v9 = (unint64_t)sub_22F10D2BC(*(_QWORD *)(v3 + 8));
        v10 = 4;
        v11 = 0;
        v12 = v9 & 0xFFFFFFFFFFFFFFF0;
        v13 = 0;
        v14 = v8;
        v15 = 0;
        return sub_22EC45014(a1, &v10, 0, v3, 0, 0);
      }
    }
  }
  return v3;
}

uint64_t sub_22EB49A78(uint64_t a1, unsigned int a2, uint64_t *a3, unsigned int *a4, uint64_t a5, int a6)
{
  uint64_t v8;
  uint64_t v11;
  int v12;
  char *v13;
  unsigned int *v14;
  unsigned int *v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  int v58;
  unint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t *v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _QWORD *v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  _QWORD *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v120;
  char v121;
  unint64_t v122;
  uint64_t v123[12];
  _BYTE v124[96];
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  llvm *v135;
  unsigned int v136;
  _BYTE *v137;
  void *v138;
  uint64_t v139;
  int v140;
  _BYTE v141[32];
  uint64_t v142;
  void *v143;
  uint64_t v144;
  _DWORD v145[26];
  uint64_t v146;
  __int16 v147;
  char v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  _BYTE v152[64];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unsigned int v158;
  _BYTE v159[24];
  int v160;
  __int16 v161;
  char v162;
  _QWORD *v163;
  uint64_t v164;
  _BYTE v165[32];
  char *v166;
  uint64_t v167;
  _QWORD v168[10];

  v8 = (uint64_t)a3;
  v168[8] = *MEMORY[0x24BDAC8D0];
  v11 = *a3;
  v129 = v11;
  v12 = *(_DWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 16);
  v128 = sub_22F115668(v11);
  if ((v12 & 0x400) != 0)
    goto LABEL_4;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 45)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x1039u, 0, (uint64_t)&v130);
    v103 = sub_22E8901B8((uint64_t)&v130, &v129);
    sub_22E8906A0(v103, &v128);
    sub_22E903BEC((unsigned int *)&v130);
    return 1;
  }
  v130 = (unsigned __int8 *)&unk_24FAB6EA8;
  LODWORD(v131) = 4152;
  v132 = (unint64_t *)&v128;
  v120 = 1;
  if ((sub_22EE8B0B0(a1, a2, v11) & 1) == 0)
  {
LABEL_4:
    v127 = v11;
    v13 = (char *)v168;
    v166 = (char *)v168;
    v167 = 0x400000000;
    v163 = v165;
    v164 = 0x400000000;
    if (!a5)
    {
      v112 = 0;
      v111 = v165;
      v110 = v168;
LABEL_168:
      v113 = *(_QWORD *)(a1 + 88);
      v114 = sub_22EF67C8C(v113);
      v120 = sub_22F3C1908(v113, v114, a2, v8, (uint64_t)v110, a5, (uint64_t)v111, v112, a6);
      goto LABEL_162;
    }
    v115 = v8;
    v121 = 0;
    v14 = a4;
    v15 = &a4[6 * a5];
    v16 = a2;
    v120 = 1;
    v117 = a2;
    v118 = a2;
    while (1)
    {
      v17 = *(_DWORD *)(*(_QWORD *)(v127 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (*((_BYTE *)v14 + 8))
      {
        v18 = *(_QWORD *)(a1 + 88);
        if ((v17 & 0x400) != 0)
        {
          v20 = (unint64_t *)(v18 + 16832);
        }
        else
        {
          v19 = sub_22EF5C728(v18, v127);
          if (!v19)
          {
            v104 = v14[1];
            v105 = (_QWORD *)a1;
            v106 = 4149;
            goto LABEL_160;
          }
          v20 = (unint64_t *)(v19 + 32);
        }
        v127 = *v20;
        v29 = sub_22EB1A358(a1, *((_QWORD *)v14 + 2), 0);
        if ((v29 & 1) != 0)
          goto LABEL_162;
        v30 = v29 & 0xFFFFFFFFFFFFFFFELL;
        if ((*(_DWORD *)(v29 & 0xFFFFFFFFFFFFFFFELL) & 0x18000) == 0)
        {
          v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v32 = *(_DWORD *)(v31 + 16);
          if (v31)
            v33 = v32 == 11;
          else
            v33 = 0;
          if (v33)
          {
            if (((*(_DWORD *)(v31 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
              goto LABEL_158;
          }
          else if (v31 && v32 == 44)
          {
            v34 = sub_22F114198(*(_QWORD *)(v31 + 24));
            if ((*(_BYTE *)(v34 + 74) & 1) == 0 && *(_QWORD *)(v34 + 128) <= 7uLL
              || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v31 + 24)) + 76) & 0x80) != 0)
            {
LABEL_158:
              sub_22F0D5A50(v30);
              sub_22E8FCA40((_QWORD *)a1, v107, 0x1393u, 0, (uint64_t)&v130);
              sub_22F0D4E74(v30);
              v149 = v108;
              sub_22E8906A0((uint64_t)&v130, &v149);
              goto LABEL_161;
            }
          }
          else if (v32 != 9)
          {
            goto LABEL_158;
          }
        }
        v40 = *(_QWORD *)v14;
        v41 = v164;
        v42 = v167;
        if (v167 >= (unint64_t)HIDWORD(v167))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v42 = v167;
        }
        v43 = (uint64_t *)&v166[16 * v42];
        *v43 = v40;
        v43[1] = (4 * v41);
        LODWORD(v167) = v167 + 1;
        v44 = v164;
        if (v164 >= (unint64_t)HIDWORD(v164))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v44 = v164;
        }
        v163[v44] = v30;
        LODWORD(v164) = v164 + 1;
      }
      else
      {
        v21 = *v14;
        if ((v17 & 0x400) == 0)
        {
          v130 = (unsigned __int8 *)&unk_24FAB6EF8;
          LODWORD(v131) = 4152;
          if ((sub_22EE8B0B0(a1, v21, v127) & 1) != 0)
            goto LABEL_162;
          v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v127 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          if (!v22 || *(_BYTE *)(v22 + 16) != 45)
          {
            v104 = v14[1];
            v105 = (_QWORD *)a1;
            v106 = 4153;
LABEL_160:
            sub_22E8FCA40(v105, v104, v106, 0, (uint64_t)&v130);
            sub_22E8901B8((uint64_t)&v130, (uint64_t *)&v127);
LABEL_161:
            sub_22E903BEC((unsigned int *)&v130);
            v120 = 1;
LABEL_162:
            if (v163 != (_QWORD *)v165)
              free(v163);
            if (v166 != v13)
              free(v166);
            return v120;
          }
          v126 = 0;
          v23 = sub_22F114198(*(_QWORD *)(v22 + 24));
          v126 = v23;
          if (v23)
            v24 = (*(_DWORD *)(v23 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD;
          else
            v24 = 0;
          if (v24)
          {
            v25 = v23;
            v26 = **(_QWORD **)(a1 + 72);
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v23 + 104) + 96), *(_QWORD *)(v23 + 104));
            v27 = 4096;
            if ((v26 & 0x200) == 0)
              v27 = 256;
            if (((**(_QWORD **)(v25 + 128) & v27) != 0) | v121 & 1)
            {
              v28 = 0;
            }
            else
            {
              if ((**(_QWORD **)(a1 + 72) & 0x200) != 0)
                v45 = 5317;
              else
                v45 = 5316;
              v46 = *(_QWORD *)(a1 + 88) + 2128;
              v130 = 0;
              v131 = v46;
              LODWORD(v132) = v45;
              v47 = *a4 | ((unint64_t)v14[1] << 32);
              v130 = (unsigned __int8 *)sub_22E3B8AAC(v46);
              sub_22E4D6448((uint64_t)(v130 + 336), v47, 1);
              v48 = v127;
              v49 = v130;
              if (!v130)
              {
                v49 = (unsigned __int8 *)sub_22E3B8AAC(v131);
                v130 = v49;
              }
              v49[*v49 + 1] = 9;
              v50 = v130;
              v51 = *v130;
              *v130 = v51 + 1;
              *(_QWORD *)&v50[8 * v51 + 16] = v48;
              v28 = sub_22EB52944(a1, v16, 0, 0, (uint64_t *)&v130);
              if (v130 && v131)
                sub_22E3BB10C(v131, (unint64_t)v130);
            }
            v121 |= v28;
          }
          v52 = *((_QWORD *)v14 + 2);
          v53 = *v14;
          v149 = 0;
          v150 = v152;
          v151 = 0x800000000;
          v154 = 0;
          v155 = 0;
          v153 = 0;
          v156 = (_QWORD *)a1;
          v157 = v52;
          v158 = v53;
          sub_22EFC6D6C((uint64_t)v159, v52);
          *(_OWORD *)&v159[8] = xmmword_22F463A40;
          v160 = 16842752;
          v161 = 0;
          v162 = 0;
          sub_22EC56024((uint64_t)&v149);
          if (v126)
            v54 = v126 + 64;
          else
            v54 = 0;
          sub_22EC611AC(a1, &v149, v54, 0);
          if ((_DWORD)v149 != 2)
            goto LABEL_92;
          v55 = *(_QWORD *)v150 & 0xFFFFFFFFFFFFFFFCLL;
          v56 = *(_DWORD *)(v55 + 28);
          v57 = v56 & 0x7F;
          if (v57 > 0x2F)
          {
            v58 = v56 & 0x7F;
            v59 = *(_QWORD *)v150 & 0xFFFFFFFFFFFFFFFCLL;
          }
          else
          {
            v58 = v56 & 0x7F;
            v59 = *(_QWORD *)v150 & 0xFFFFFFFFFFFFFFFCLL;
            if (((1 << (v56 & 0x7F)) & 0xC00000060000) != 0)
            {
              v59 = sub_22EFBAEA4(*(_QWORD *)v150 & 0xFFFFFFFFFFFFFFFCLL);
              v58 = *(_DWORD *)(v59 + 28) & 0x7F;
            }
          }
          if ((v58 - 49) < 3)
          {
            v55 = 0;
            v60 = v117;
            v16 = v118;
            goto LABEL_73;
          }
          if (v57 > 0x2F)
          {
            v60 = v117;
          }
          else
          {
            v33 = ((1 << v57) & 0xC00000060000) == 0;
            v60 = v117;
            if (!v33)
            {
              v55 = sub_22EFBAEA4(v55);
              v56 = *(_DWORD *)(v55 + 28);
            }
          }
          v61 = v56 & 0x7F;
          v16 = v118;
          if (v61 == 68 && (v59 = *(_QWORD *)(*(_QWORD *)(v55 + 56) + 8 * *(unsigned int *)(v55 + 64) - 8)) != 0)
          {
LABEL_73:
            if ((*(_BYTE *)(v59 + 68) & 1) == 0)
            {
              v62 = *(_QWORD *)(v59 + 16);
              v63 = v62 & 0xFFFFFFFFFFFFFFF8;
              if ((v62 & 4) != 0)
                v63 = *(_QWORD *)v63;
              v64 = (*(_WORD *)(v63 + 8) & 0x7E) - 34;
              if (v63)
                v65 = v63 - 64;
              else
                v65 = 0;
              if (v64 >= 4)
                v66 = 0;
              else
                v66 = v65;
              if (v55)
              {
                v67 = *(_QWORD *)(v55 + 16);
                v68 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF8);
                if ((v67 & 4) != 0)
                  v68 = (_QWORD *)*v68;
                if (v68)
                  v66 = (unint64_t)(v68 - 8);
                else
                  v66 = 0;
              }
              v130 = 0;
              v131 = (uint64_t)&v131;
              v132 = (unint64_t *)&v131;
              v133 = 0;
              v69 = 5;
              v134 = 1;
              do
              {
                (&v130)[v69] = 0;
                v69 += 2;
              }
              while (v69 != 21);
              v137 = v141;
              v138 = v141;
              v139 = 4;
              v140 = 0;
              v142 = 0;
              v143 = v145;
              v144 = 0x400000000;
              v145[24] = 0;
              v146 = 0;
              v147 = 257;
              v148 = 1;
              v70 = *v14;
              v71 = v127;
              v72 = *(_QWORD *)(v66 + 48);
              v116 = v13;
              if (v72)
                v73 = v72 & 0xFFFFFFFFFFFFFFF0;
              else
                v73 = sub_22EF6462C(*(_QWORD *)(a1 + 88), v66);
              if (sub_22EAAB2A0(a1, v70, v71, v73, (unint64_t *)&v130))
              {
                if (v142)
                {
                  sub_22E8FCA40((_QWORD *)a1, v14[1], 0x1037u, 0, (uint64_t)v123);
                  v125 = *(_QWORD *)(v59 + 40);
                  v79 = sub_22E894538((uint64_t)v123, (uint64_t *)&v125);
                  v122 = __PAIR64__(a6, v60);
                  sub_22E8906A0(v79, (uint64_t *)&v122);
                  sub_22E903BEC((unsigned int *)v123);
                  v77 = 1;
                  v16 = v118;
                  goto LABEL_136;
                }
                v80 = *((unsigned int *)v132 + 6);
                if ((_DWORD)v80)
                {
                  v81 = (uint64_t *)v132[2];
                  v82 = v167;
                  v83 = 24 * v80;
                  do
                  {
                    v84 = *v81;
                    if (v82 >= HIDWORD(v167))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v82 = v167;
                    }
                    v85 = &v166[16 * v82];
                    *(_QWORD *)v85 = 0;
                    *((_QWORD *)v85 + 1) = v84 | 3;
                    v82 = v167 + 1;
                    LODWORD(v167) = v167 + 1;
                    v81 += 3;
                    v83 -= 24;
                  }
                  while (v83);
                }
              }
              if (v55)
              {
                v86 = *(unsigned int *)(v55 + 64);
                if ((_DWORD)v86)
                {
                  v87 = *(uint64_t **)(v55 + 56);
                  v88 = v167;
                  v89 = 8 * v86;
                  do
                  {
                    v90 = *v87;
                    v91 = v14[1];
                    if (*v14)
                      v92 = *v14;
                    else
                      v92 = v91;
                    if (v88 >= HIDWORD(v167))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                      v88 = v167;
                    }
                    v93 = &v166[16 * v88];
                    *(_QWORD *)v93 = v92 | (v91 << 32);
                    *((_QWORD *)v93 + 1) = v90 | 1;
                    v88 = v167 + 1;
                    LODWORD(v167) = v167 + 1;
                    ++v87;
                    v89 -= 8;
                  }
                  while (v89);
                }
              }
              else
              {
                v94 = v14[1];
                if (*v14)
                  v95 = *v14;
                else
                  v95 = v94;
                v96 = v167;
                if (v167 >= (unint64_t)HIDWORD(v167))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v96 = v167;
                }
                v97 = &v166[16 * v96];
                *(_QWORD *)v97 = v95 | (v94 << 32);
                *((_QWORD *)v97 + 1) = v59 | 1;
                LODWORD(v167) = v167 + 1;
              }
              v98 = *(_QWORD *)(v59 + 48);
              v99 = *(_QWORD *)(v98 & 0xFFFFFFFFFFFFFFF0);
              if (v99)
              {
                v100 = *(_DWORD *)(v99 + 16);
                if ((v100 & 0xFE) == 0x28)
                {
                  v13 = v116;
                  v16 = v118;
                  if ((v100 & 0x100000) != 0)
                    goto LABEL_150;
                  goto LABEL_147;
                }
              }
              v13 = v116;
              v16 = v118;
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v99 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
              {
                v99 = sub_22F10CF48(v99);
                if (v99)
                {
                  if ((*(_DWORD *)(v99 + 16) & 0x100000) != 0)
                  {
                    do
                    {
LABEL_150:
                      v99 = *(_QWORD *)(*(_QWORD *)(v99 + 32) & 0xFFFFFFFFFFFFFFF0);
                      if (!v99 || (v101 = *(_DWORD *)(v99 + 16), (v101 & 0xFE) != 0x28))
                      {
                        v99 = sub_22F10CF48(v99);
                        v101 = *(_DWORD *)(v99 + 16);
                      }
                      v16 = v118;
                    }
                    while ((v101 & 0x100000) != 0);
                  }
LABEL_147:
                  v98 = *(_QWORD *)(v99 + 32);
                }
              }
              v77 = 0;
              v127 = v98;
LABEL_136:
              if (v143 != v145)
                free(v143);
              if (v138 != v137)
                free(v138);
              if ((v134 & 1) == 0)
                llvm::deallocate_buffer(v135, (void *)(16 * v136));
              sub_22E687D9C(&v131);
LABEL_94:
              if (HIBYTE(v160))
              {
                if ((_DWORD)v149 == 5)
                {
                  sub_22EC64D18(v156, (uint64_t)&v149);
                }
                else if (v154 && (*(_DWORD *)(v156[9] + 52) & 0x400000) != 0)
                {
                  sub_22E90B5FC((unint64_t)v156, (uint64_t)&v149);
                }
              }
              if (v153)
              {
                v102 = sub_22EC6CBD0(v153);
                MEMORY[0x2348A0E9C](v102, 0x10E0C409F09D3C3);
              }
              if (v150 == v152)
              {
                if (v77)
                  goto LABEL_162;
              }
              else
              {
                free(v150);
                if (v77)
                  goto LABEL_162;
              }
              goto LABEL_103;
            }
            sub_22E8FCA40((_QWORD *)a1, v14[1], 0x1036u, 0, (uint64_t)&v130);
            v123[0] = *(_QWORD *)(v59 + 40);
            v78 = sub_22E894538((uint64_t)&v130, v123);
            v125 = __PAIR64__(a6, v60);
            sub_22E8906A0(v78, (uint64_t *)&v125);
            sub_22E903BEC((unsigned int *)&v130);
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v59 + 24), 0x1558u, 0, (uint64_t)v124);
            v76 = (unsigned int *)v124;
          }
          else
          {
LABEL_92:
            sub_22E8FCA40((_QWORD *)a1, v16, 0xFAAu, 0, (uint64_t)&v130);
            v74 = sub_22E8BAE44((uint64_t)&v130, (uint64_t *)v14 + 2);
            v75 = sub_22E890024(v74, &v126);
            v123[0] = *(_QWORD *)v14;
            sub_22E8906A0(v75, v123);
            v76 = (unsigned int *)&v130;
          }
          sub_22E903BEC(v76);
          v77 = 1;
          goto LABEL_94;
        }
        v35 = *((_QWORD *)v14 + 2);
        v36 = v14[1];
        if (v21)
          v37 = v21;
        else
          v37 = v36;
        v38 = v167;
        if (v167 >= (unint64_t)HIDWORD(v167))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v38 = v167;
        }
        v39 = &v166[16 * v38];
        *(_QWORD *)v39 = v37 | (v36 << 32);
        *((_QWORD *)v39 + 1) = v35 | 2;
        LODWORD(v167) = v167 + 1;
        v127 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832);
      }
LABEL_103:
      v14 += 6;
      if (v14 == v15)
      {
        v110 = v166;
        a5 = v167;
        v111 = v163;
        v112 = v164;
        a2 = v16;
        v8 = v115;
        goto LABEL_168;
      }
    }
  }
  return v120;
}

uint64_t sub_22EB4A774(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  int v6;
  unint64_t v9;
  int v10;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v27;
  unsigned int v28;
  char v29;
  uint64_t (**v30)();
  char v31;
  int v32;

  v6 = a6;
  v9 = (unint64_t)a3;
  v10 = a2;
  if ((*a3 & 0x18000) != 0)
  {
    v17 = 0;
    LOBYTE(v22) = 0;
    LOBYTE(v21) = 0;
    v24 = *(_QWORD *)(a1 + 88);
    v19 = *(_QWORD *)(v24 + 16832);
LABEL_18:
    v25 = sub_22E3CD3D4(v24 + 2032, 56, 3);
    return sub_22F330858(v25, v10, v9, a4, a5, v19, v21, v22, v6, 0, v17);
  }
  v27 = 0;
  v28 = 32;
  v29 = 1;
  v31 = 0;
  v30 = off_24FAB8300;
  v32 = 4939;
  v13 = sub_22EB4CB24(a1, a3, &v27, &v30, 0);
  v14 = v13;
  if ((v13 & 1) != 0)
  {
    v19 = 0;
    v17 = 0;
    LOBYTE(v22) = 0;
    LOBYTE(v21) = 0;
  }
  else
  {
    v9 = v13 & 0xFFFFFFFFFFFFFFFELL;
    v15 = v27;
    if (v28 < 0x41)
      v15 = (uint64_t *)&v27;
    v16 = *v15;
    v17 = v16 != 0;
    if (v16)
      v18 = a4;
    else
      v18 = a5;
    v19 = *(_QWORD *)(v18 + 8);
    v20 = *(_DWORD *)v18;
    v21 = (v20 >> 8) & 3;
    v22 = (v20 >> 10) & 7;
  }
  if (v28 >= 0x41)
  {
    if (v27)
      MEMORY[0x2348A0E84](v27, 0x1000C8000313F17);
  }
  if ((v14 & 1) == 0)
  {
    v24 = *(_QWORD *)(a1 + 88);
    v6 = a6;
    v10 = a2;
    goto LABEL_18;
  }
  return 1;
}

void sub_22EB4A904(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  const void *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v49[24];
  unint64_t v50;
  _DWORD *v51;
  __int128 v52;
  int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22F30914C(a1);
  v14 = sub_22EE8156C(a1, a3, a4, v9, v10, v11, v12, v13);
  v15 = *v14;
  if (sub_22EE67290(a1, a2, v14, 19))
  {
    LOWORD(v52) = 0;
    BYTE2(v52) = 0;
    *((_QWORD *)&v52 + 1) = 0;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0;
    v57 = 0;
    DWORD1(v52) = 1;
    v15 = sub_22EF63D8C(*(_QWORD *)(a1 + 88), *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832), 0, 0, &v52, 0);
    v14 = sub_22EF579A8(*(_QWORD *)(a1 + 88), v15, 0);
  }
  *(_QWORD *)&v52 = *v14;
  *((_QWORD *)&v52 + 1) = v14 + 1;
  v16 = sub_22F259410((unint64_t *)&v52);
  v50 = v16;
  v51 = v17;
  if (v16 && *v17 == v17[3])
  {
    v18 = *(_QWORD *)(v16 + 24);
    v19 = (const void *)sub_22E47EE80(&v50);
    v20 = sub_22F11598C(v18);
    v21 = *(_QWORD *)(a1 + 88);
    if (!v20)
      v20 = sub_22F11598C(v18);
    v14 = (unint64_t *)sub_22E3CD3D4(v21 + 2032, v20 + 8, 3);
    *v14 = v18;
    *(_QWORD *)&v52 = v18;
    *((_QWORD *)&v52 + 1) = v14 + 1;
    sub_22F1164A8((unint64_t *)&v52, v18, v19);
    v50 = 0;
    v51 = 0;
  }
  *(_QWORD *)(*(_QWORD *)(v8 + 1424) + 96) = v14;
  *(_QWORD *)(v8 + 1440) = v15;
  v22 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
  v24 = *(unsigned __int8 *)(v23 + 16);
  if (v23)
    v25 = (v24 - 27) > 0xFFFFFFFD;
  else
    v25 = 0;
  if (!v25)
  {
    v23 = sub_22F10CF48(v23);
    v24 = *(unsigned __int8 *)(v23 + 16);
  }
  v26 = *(_QWORD *)(v23 + 24);
  if (v24 == 26)
    v27 = (*(_QWORD *)(v23 + 16) >> 46) & 0x2000;
  else
    LODWORD(v27) = 0;
  *(_DWORD *)(*(_QWORD *)(v8 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v8 + 1424) + 48) & 0xFFFFDFFF | v27;
  if (v26 != *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16832))
  {
    *(_QWORD *)(v8 + 1416) = v26;
    *(_DWORD *)(*(_QWORD *)(v8 + 1424) + 48) &= ~0x8000u;
    *(_BYTE *)(v8 + 1408) = 0;
  }
  *(_QWORD *)&v52 = &v53;
  *((_QWORD *)&v52 + 1) = 0x800000000;
  if (v50)
  {
    if (*(_BYTE *)(v50 + 16) != 25)
    {
      v28 = *(_QWORD *)(v50 + 16);
      if ((v28 & 0x3FFFC000000000) != 0)
      {
        v29 = 0;
        v30 = 0;
        v31 = (unsigned __int16)(v28 >> 38);
        do
        {
          v32 = *(_QWORD *)&v51[2 * v30 + 4];
          v33 = *(_QWORD *)(v32 + 40) >= 8uLL && (*(_QWORD *)(v32 + 40) & 7) == 0;
          if (!v33 && (*(_WORD *)(v32 + 28) & 0x280) == 0 && (**(_WORD **)(a1 + 72) & 0x108) == 0)
          {
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v32 + 24), 0x14D2u, 0, (uint64_t)v49);
            sub_22E903BEC(v49);
            v29 = DWORD2(v52);
          }
          if (v29 >= HIDWORD(v52))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v29 = DWORD2(v52);
          }
          *(_QWORD *)(v52 + 8 * v29) = v32;
          v29 = ++DWORD2(v52);
          ++v30;
        }
        while (v31 != v30);
        goto LABEL_47;
      }
    }
LABEL_46:
    v29 = DWORD2(v52);
    goto LABEL_47;
  }
  v34 = *v22;
  if (!*v22 || *(_BYTE *)(v34 + 16) != 26)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26)
      goto LABEL_46;
    v34 = sub_22F10CF48(v34);
    if (!v34)
      goto LABEL_46;
  }
  if (!(unsigned __int16)(*(_QWORD *)(v34 + 16) >> 38))
    goto LABEL_46;
  v35 = (unint64_t *)(v34 + 40);
  v36 = 8 * (unsigned __int16)(*(_QWORD *)(v34 + 16) >> 38);
  do
  {
    v37 = *(_QWORD *)(v8 + 1424);
    if (v37)
      v38 = v37 + 40;
    else
      v38 = 0;
    v39 = sub_22F31DD6C(a1, v38, *(_DWORD *)(a3 + 72), *v35);
    v40 = DWORD2(v52);
    if (DWORD2(v52) >= (unint64_t)HIDWORD(v52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = DWORD2(v52);
    }
    *(_QWORD *)(v52 + 8 * v40) = v39;
    v29 = ++DWORD2(v52);
    ++v35;
    v36 -= 8;
  }
  while (v36);
LABEL_47:
  if (v29)
  {
    sub_22F3ACFA8(*(_DWORD **)(v8 + 1424), (const void *)v52, v29);
    sub_22E98BD04(a1, *(uint64_t **)(*(_QWORD *)(v8 + 1424) + 72), *(unsigned int *)(*(_QWORD *)(v8 + 1424) + 80), 0, *(_QWORD *)(v8 + 1424));
  }
  sub_22EA7E768((_QWORD *)a1, a4, *(_QWORD *)(v8 + 1424), a3);
  v41 = *(_QWORD *)(v8 + 1424);
  v42 = *(unsigned int *)(v41 + 80);
  if ((_DWORD)v42)
  {
    v43 = *(unint64_t **)(v41 + 72);
    v44 = 8 * v42;
    do
    {
      v45 = *v43;
      v46 = *(_QWORD *)(v8 + 1424);
      if (v46)
        v47 = v46 + 40;
      else
        v47 = 0;
      *(_QWORD *)(v45 + 16) = v47 & 0xFFFFFFFFFFFFFFFBLL;
      if (*(_QWORD *)(v45 + 40) >= 8uLL && (*(_QWORD *)(v45 + 40) & 7) == 0)
      {
        sub_22EA2018C(a1, *(_QWORD *)(v8 + 1432), v45);
        sub_22EA0483C(a1, v45, *(uint64_t **)(v8 + 1432), 1);
      }
      ++v43;
      v44 -= 8;
    }
    while (v44);
    v41 = *(_QWORD *)(v8 + 1424);
  }
  sub_22F3110EC(a1, v41);
  if ((int *)v52 != &v53)
    free((void *)v52);
}

uint64_t sub_22EB4ADC8(unint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t i;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  char v42;
  uint64_t v43;
  int v44;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void *v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  void *v80[2];
  int v81;
  char v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  _BYTE v88[20];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 20) & 0x20000000000) == 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0xB8Eu, 0, (uint64_t)v88);
    LODWORD(v79) = (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) >> 30) & 1;
    sub_22E89519C((uint64_t)v88, (unsigned int *)&v79);
    sub_22E903BEC((unsigned int *)v88);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8);
  if (*(_DWORD *)(*(_QWORD *)(v5 + 32) + 176) > *(_DWORD *)(v5 + 44))
  {
    *(_DWORD *)(a1 + 1704) = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 568);
    *(_WORD *)(a1 + 1693) = 0;
    v6 = *(void **)(a1 + 1784);
    if (v6 != *(void **)(a1 + 1776))
    {
      v75 = *(unsigned int *)(a1 + 1792);
      if (v75 >= 0x21 && 4 * (*(_DWORD *)(a1 + 1796) - *(_DWORD *)(a1 + 1800)) < v75)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)(a1 + 1776));
        goto LABEL_6;
      }
      memset(v6, 255, 8 * v75);
    }
    *(_QWORD *)(a1 + 1796) = 0;
LABEL_6:
    *(_DWORD *)(a1 + 1848) = 0;
  }
  sub_22EB48E64(a1);
  v7 = *(unsigned int *)(a1 + 1904);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v7 - 8);
  v9 = *(_QWORD *)(v8 + 1424);
  if (*(_BYTE *)(v8 + 1408))
    sub_22EC52D88(a1, *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v7 - 8));
  if (*(_QWORD *)(v8 + 1416) >= 0x10uLL)
    v10 = *(_QWORD *)(v8 + 1416);
  else
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392);
  v11 = sub_22E47260C(v9);
  v12 = v11;
  v13 = *(_QWORD *)(v8 + 1440);
  if (v13 < 0x10)
  {
    v88[2] &= 0xFCu;
    if (v11)
      v14 = 32;
    else
      v14 = 0;
    *(_OWORD *)&v88[4] = 0uLL;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0;
    *(_WORD *)v88 = v14;
    goto LABEL_27;
  }
  v15 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
  if (v15)
    v16 = *(unsigned __int8 *)(v15 + 16) - 27 > 0xFFFFFFFD;
  else
    v16 = 0;
  if (!v16)
    v15 = sub_22F10CF48(v15);
  v17 = *(_QWORD *)(v15 + 16);
  if (v12 && ((v17 >> 19) & 0x20) == 0)
    v18 = (v17 >> 19) | 0x20;
  else
    v18 = v17 >> 19;
  if (*(_QWORD *)(v15 + 16) == 25)
  {
    v88[2] &= 0xFCu;
    *(_QWORD *)&v88[12] = 0;
    *(_QWORD *)&v88[4] = 0;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0;
    *(_WORD *)v88 = v18;
LABEL_27:
    v19 = *(_QWORD *)(a1 + 88);
    v20 = v10;
    v21 = 0;
    v22 = 0;
    goto LABEL_34;
  }
  if (*(_QWORD *)(v15 + 24) == v10 && ((v17 & 0x1000000) != 0 || !v12))
  {
    v24 = *(_QWORD *)(v8 + 1440);
    goto LABEL_35;
  }
  sub_22E4913B4(v15, (uint64_t)v88);
  *(_QWORD *)&v88[4] = 0;
  *(_WORD *)v88 = v18;
  v19 = *(_QWORD *)(a1 + 88);
  v21 = (uint64_t *)(v15 + 40);
  v22 = (unsigned __int16)(*(_QWORD *)(v15 + 16) >> 38);
  v20 = v10;
LABEL_34:
  v24 = sub_22EF63D8C(v19, v20, v21, v22, (__int128 *)v88, 0);
LABEL_35:
  sub_22EA2E9B4(a1, *(uint64_t **)(v9 + 72), *(unsigned int *)(v9 + 80));
  v25 = sub_22F36A4F8(*(_QWORD *)(a1 + 88), v24);
  v26 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8) + 8);
  if ((v26 & 0x80) == 0
    && ((v26 & 0x60) != 0
     || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8) + 8) & 0x18) == 0x18)
    && !*(_QWORD *)(*(_QWORD *)(a1 + 80) + 752))
  {
    sub_22E8CEDFC(a1, a3);
  }
  *(_QWORD *)(v9 + 88) = a3;
  if (a3 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * *(unsigned int *)(a1 + 1904) - 8) + 9) & 8) != 0)
    sub_22E91BB48(a1, v9);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 45
    && (sub_22EFC7ADC(v9 + 40) & 1) == 0)
  {
    sub_22F31E224(a1, (uint64_t)a3, v8);
  }
  for (i = v10; ; i = *(_QWORD *)(v30 + 32))
  {
    v28 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
    if (v28)
      v29 = (*(_DWORD *)(v28 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v29 = 0;
    if (v29)
    {
      v30 = *(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0);
      continue;
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 > 3)
      break;
    v30 = sub_22F10CF48(v28);
    if (!v30)
      break;
  }
  v31 = sub_22F10C2A4(v28);
  if (v31 && (*(_DWORD *)(v31 + 28) & 0x7Eu) - 34 <= 3 && (*(_BYTE *)(v31 + 76) & 1) != 0)
  {
LABEL_135:
    sub_22F31DBEC(a1, v10, *(_DWORD *)(v9 + 24), 1, 6);
    goto LABEL_69;
  }
  v32 = v10;
  while (2)
  {
    v33 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0);
    if (v33)
      v34 = (*(_DWORD *)(v33 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
    else
      v34 = 0;
    if (v34)
    {
      v35 = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF0);
LABEL_67:
      v32 = *(_QWORD *)(v35 + 32);
      continue;
    }
    break;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
  {
    v35 = sub_22F10CF48(v33);
    if (v35)
      goto LABEL_67;
  }
  v36 = sub_22F10C2A4(v33);
  if (v36 && (*(_DWORD *)(v36 + 28) & 0x7Eu) - 34 <= 3 && (*(_BYTE *)(v36 + 76) & 2) != 0)
    goto LABEL_135;
LABEL_69:
  *(_QWORD *)(a1 + 216) = sub_22EA044C0(v36, *(_QWORD *)(a1 + 216));
  *(_QWORD *)v88 = &v88[16];
  *(_QWORD *)&v88[8] = 0x400000000;
  v37 = *(unsigned int *)(v8 + 1272);
  if (!(_DWORD)v37)
  {
    v38 = 0;
    v39 = &v88[16];
    goto LABEL_109;
  }
  v78 = v9;
  v76 = v25;
  v77 = v8;
  v38 = 0;
  v40 = 32 * v37;
  v41 = (_BYTE *)(*(_QWORD *)(v8 + 1264) + 24);
  while (2)
  {
    v42 = *v41;
    if ((*v41 & 0x48) == 0)
    {
      v43 = *((_QWORD *)v41 - 3);
      v44 = v42 & 3;
      if ((*v41 & 3) != 0 || (**(_QWORD **)(a1 + 72) & 0x100) == 0)
      {
        v46 = 0;
        goto LABEL_101;
      }
      v47 = 0;
      v46 = 0;
      v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v41 - 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v48 && *(_BYTE *)(v48 + 16) == 45)
      {
        if ((*(_DWORD *)(v43 + 28) & 0x7F) == 0x40)
          sub_22EACC8BC(a1, *((_QWORD *)v41 - 3), v48);
        *(_QWORD *)&v79 = 0;
        v86 = 3;
        v87 = 6;
        v83 = *(unsigned int *)(a1 + 1704);
        sub_22EB4DDB8(a1 + 3688, &v87, (int *)&v83, (__int16 *)(a1 + 1693), (uint64_t *)&v79, &v86);
        v49 = *(unsigned int *)(a1 + 3696);
        v50 = v49 - 2;
        v51 = *(_QWORD *)(a1 + 3688);
        v52 = *(_DWORD *)(v51 + 576 * (v49 - 2));
        if (v52 == 5)
        {
          *(_BYTE *)(v51 + 576 * v49 - 4) = *(_BYTE *)(v51 + 576 * v50 + 572);
          v53 = 1;
        }
        else if (v52 == 2)
        {
          *(_BYTE *)(v51 + 576 * v49 - 4) = 1;
          v53 = *(_BYTE *)(v51 + 576 * v50 + 573) != 0;
        }
        else
        {
          v53 = 0;
          *(_BYTE *)(v51 + 576 * v49 - 4) = 0;
        }
        v54 = v51 + 576 * v49;
        *(_BYTE *)(v54 - 3) = v53;
        *(_WORD *)(a1 + 1693) = 0;
        if (*(_DWORD *)(a1 + 1848))
        {
          llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v54 - 560));
          sub_22EAEAE08(a1 + 1840, (uint64_t *)(v54 - 496));
        }
        v55 = *((unsigned int *)v41 - 4);
        v79 = 0u;
        *(_OWORD *)v80 = 0u;
        v83 = *(_QWORD *)(v43 + 40);
        v84 = v55;
        sub_22EFC6D6C((uint64_t)&v85, v83);
        v56 = sub_22EB24A3C(a1, &v79, &v83, v43, 0, 0, 0);
        if (HIDWORD(v80[1]))
          free(v80[0]);
        if ((v56 & 1) == 0)
        {
          v57 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFFFELL) + 8);
          if ((v57 & 1) == 0 && (*(_BYTE *)((v57 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0)
            v56 = sub_22E90092C(a1, v56 & 0xFFFFFFFFFFFFFFFELL, v57 | 1, 5, 1, 0);
        }
        if ((v56 & 1) == 0)
        {
          v58 = *(_DWORD *)(v43 + 24);
          v59 = (void *)*((_QWORD *)v41 - 1);
          LODWORD(v79) = 13;
          *((_QWORD *)&v79 + 1) = 0;
          v80[0] = v59;
          LODWORD(v80[1]) = 0;
          v81 = v58;
          v82 = 0;
          v56 = sub_22EC45014(a1, &v79, v55, v56 & 0xFFFFFFFFFFFFFFFELL, 0, 0);
        }
        if ((v56 & 1) != 0 || (*(_BYTE *)(*(_QWORD *)((v56 & 0xFFFFFFFFFFFFFFFELL) + 16) + 82) & 0x80) != 0)
          v46 = 0;
        else
          v46 = (unint64_t)sub_22EBCCCF0(a1, (int *)(v56 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL;
        sub_22EB48E64(a1);
        v42 = *v41;
        v38 = *(_DWORD *)&v88[8];
        v44 = *v41 & 3;
LABEL_101:
        v47 = 2 * (v44 == 2);
      }
      if (v38 >= *(_DWORD *)&v88[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v38 = *(_DWORD *)&v88[8];
      }
      v60 = (unint64_t *)(*(_QWORD *)v88 + 16 * v38);
      *v60 = v43 & 0xFFFFFFFFFFFFFFF9 | v47 | v42 & 4u;
      v60[1] = v46;
      v38 = ++*(_DWORD *)&v88[8];
    }
    v41 += 32;
    v40 -= 32;
    if (v40)
      continue;
    break;
  }
  v39 = *(_BYTE **)v88;
  v8 = v77;
  v9 = v78;
  v25 = v76;
LABEL_109:
  sub_22F3AD00C(v9, *(_QWORD *)(a1 + 88), (uint64_t)v39, v38, *(_DWORD *)(v8 + 1256) != 0);
  LODWORD(v83) = *(_DWORD *)(a1 + 12072);
  sub_22E904AD8(a1, &v83, (int *)v9, v25, (uint64_t *)&v79);
  v61 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  v62 = *(_QWORD *)(sub_22F330924(v61, v9, v25) + 16);
  if (!*(_DWORD *)(v62 + 112) && (*(_BYTE *)(v62 + 49) & 0x40) == 0)
    goto LABEL_120;
  v63 = v62 & 0xFFFFFFFFFFFFFFFBLL;
  v64 = *(_DWORD *)(a1 + 1704);
  if (v64 >= *(_DWORD *)(a1 + 1708))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v64 = *(_DWORD *)(a1 + 1704);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 1696) + 8 * v64) = v63;
  ++*(_DWORD *)(a1 + 1704);
  *(_WORD *)(a1 + 1693) = 257;
  v65 = *(_QWORD *)(v61 + 16);
  v66 = *(unsigned int *)(v65 + 112);
  if ((_DWORD)v66)
  {
    v67 = *(_QWORD **)(v65 + 104);
    v68 = 16 * v66;
    while (!sub_22F115260(*(_QWORD *)((*v67 & 0xFFFFFFFFFFFFFFF8) + 48)))
    {
      v67 += 2;
      v68 -= 16;
      if (!v68)
        goto LABEL_120;
    }
    v69 = *(unsigned int *)(a1 + 1904);
    if ((_DWORD)v69)
    {
      v70 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v69 - 8);
      *(_DWORD *)(v70 + 8) |= 8u;
      goto LABEL_120;
    }
  }
  else
  {
LABEL_120:
    v71 = *(unsigned int *)(a1 + 1904);
    if ((_DWORD)v71)
    {
      v72 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v71 - 8);
      if (v72)
        sub_22E3BA850(v72 + 384, (const void *)v9);
    }
  }
  v73 = (_BYTE *)v79;
  *(_QWORD *)&v79 = 0;
  if (v73)
  {
    if ((v73[8] & 7) != 0 || *(_QWORD *)(*((_QWORD *)&v79 + 1) + 1888))
      (*(void (**)(_BYTE *))(*(_QWORD *)v73 + 8))(v73);
    else
      *(_QWORD *)(*((_QWORD *)&v79 + 1) + 1888) = v73;
  }
  if (*(_BYTE **)v88 != &v88[16])
    free(*(void **)v88);
  return v61;
}

uint64_t sub_22EB4B7A8(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  BOOL v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void (**v35)(_QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t i;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  _BOOL4 v67;
  _BOOL4 v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  unsigned int v95[24];
  void (**v96)(_QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t v97;
  unint64_t *v98;
  int v99;
  uint64_t v100;
  uint64_t v101[2];

  v10 = a1[9];
  if ((*(_BYTE *)(v10 + 68) & 0x20) != 0 && (*(_WORD *)(v10 + 96) & 0x80) != 0)
  {
    v11 = a1[27];
    if (v11 && (*(_WORD *)(v11 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFA)
    {
      v23 = sub_22E9FDFC4((uint64_t)a1, v11 - 72, 0);
      if (v23 <= 3 && v23 != 2)
      {
        v25 = v23;
        sub_22F0D5A50(a3);
        sub_22E8FCA40(a1, v26, 0x13FAu, 0, (uint64_t)&v96);
        sub_22E903BEC((unsigned int *)&v96);
        if (v25 <= 3 && v25 != 2)
          return 1;
      }
    }
  }
  v13 = *(_QWORD *)(a1[9] + 72);
  if ((_DWORD)v13)
    v14 = (v13 & 0x800000000) == 0;
  else
    v14 = 1;
  if (!v14 && (*(_DWORD *)(*(_QWORD *)(a1[11] + 15088) + 56) & 0xFFFFFFFE) == 0x2C)
  {
    sub_22F0D5A50(a3);
    sub_22F308EA4(a1, v39, 0x13FAu, 0, (uint64_t)v95);
    sub_22E903BEC(v95);
  }
  if ((*(_BYTE *)(a3 + 1) & 0x80) == 0
    && (v15 = *(_BYTE **)(a1[11] + 15088), (v15[288] & 0x20) != 0)
    && (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v15 + 288))(v15)
    && ((v44 = a1[11], v45 = sub_22F36E36C(v44), (v46 = *(_QWORD *)(v45 + 48)) == 0)
      ? (v47 = sub_22EF6462C(v44, v45))
      : (v47 = v46 & 0xFFFFFFFFFFFFFFF0),
        (*(_QWORD *)((v47 & 0xFFFFFFFFFFFFFFF0) + 8) | v47 & 7) == (*(_QWORD *)((*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                + 8) | *(_QWORD *)(a3 + 8) & 7)))
  {
    v16 = 1;
    if ((sub_22EB42C34((uint64_t *)a3, a2, a1) & 1) != 0)
      return 1;
  }
  else
  {
    v16 = 0;
  }
  v17 = a1[11];
  v18 = sub_22EF6D84C(v17);
  v19 = *(_QWORD *)(v18 + 48);
  if (!v19)
  {
    v20 = sub_22EF6462C(v17, v18);
    if ((v16 & 1) != 0)
      goto LABEL_19;
LABEL_21:
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFEu)
       - 2 > 3)
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                      + 16) != 45
        || (*(_BYTE *)(a1[9] + 1) & 1) == 0)
      {
        if ((*(_BYTE *)(a3 + 1) & 0x80) != 0)
        {
          v22 = a3;
        }
        else
        {
          v22 = a3;
          if ((sub_22EB42C34((uint64_t *)a3, a2, a1) & 1) != 0)
            return 1;
        }
        goto LABEL_42;
      }
      v28 = a1[11];
      v29 = 1;
      v30 = sub_22EF5F8C4(v28, v20, 1);
      v99 = 0;
      LODWORD(v96) = 1;
      v31 = sub_22EF60188(v28, v30);
      v97 = 0;
      v98 = (unint64_t *)v31;
      v100 = 0;
      v21 = sub_22EC45014(a1, &v96, 0, a3, 0, 0);
      if ((v21 & 1) != 0)
        return v29;
    }
    else
    {
      v20 = sub_22EF5F824(a1[11], v20);
      v21 = sub_22EB1B998((uint64_t)a1, (void *)a3);
      if ((v21 & 1) != 0)
        return 1;
    }
    v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
LABEL_42:
    if ((*(_BYTE *)(v22 + 1) & 0x80) == 0
      && (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7) != (*(_QWORD *)((*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0)
                                                                                 + 8) | *(_QWORD *)(v22 + 8) & 7))
    {
      sub_22F0D5A50(v22);
      sub_22E8FCA40(a1, v32, 0xD94u, 0, (uint64_t)&v96);
      v93 = *(_QWORD *)(a3 + 8);
      v33 = sub_22E8901B8((uint64_t)&v96, (uint64_t *)&v93);
      sub_22F0D4E74(v22);
      v101[0] = v34;
      sub_22E8906A0(v33, v101);
      sub_22E903BEC((unsigned int *)&v96);
      return 1;
    }
    v91 = a2;
    a3 = v22;
    goto LABEL_46;
  }
  v20 = v19 & 0xFFFFFFFFFFFFFFF0;
  if ((v16 & 1) == 0)
    goto LABEL_21;
LABEL_19:
  v91 = a2;
LABEL_46:
  v35 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))*a4;
  if ((*(_BYTE *)(*(_QWORD *)(*a4 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    v38 = v91;
    goto LABEL_174;
  }
  v89 = v16;
  v90 = a5;
  for (i = *a4; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_58;
      v37 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v37 <= 0x39)
        break;
LABEL_53:
      if (sub_22F115668(i))
        v35 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_61;
    }
    if (v37 == 24)
      goto LABEL_60;
    if (v37 == 26)
      break;
    if (((1 << v37) & 0x20000000200003CLL) == 0)
      goto LABEL_53;
LABEL_58:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_58;
LABEL_60:
  v35 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))i;
LABEL_61:
  v40 = sub_22F115668((uint64_t)v35);
  v93 = *a4;
  v94 = a4 + 1;
  v96 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))&unk_24FAB84D8;
  LODWORD(v97) = 4688;
  v98 = &v93;
  v29 = 1;
  if ((sub_22EE8B0B0((uint64_t)a1, v40, v93) & 1) != 0)
    return v29;
  v41 = *a4;
  v42 = *a4;
  while (2)
  {
    while (2)
    {
      if ((v42 & 0xF) != 0)
        goto LABEL_73;
      v43 = *(unsigned __int8 *)(*(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v43 > 0x39)
      {
LABEL_68:
        if (sub_22F115668(v42))
          v41 = v42;
        v42 = sub_22F115B7C(v42);
        if (!v42)
          goto LABEL_77;
        continue;
      }
      break;
    }
    if (v43 == 24)
      break;
    if (v43 != 26)
    {
      if (((1 << v43) & 0x20000000200003CLL) != 0)
        goto LABEL_73;
      goto LABEL_68;
    }
    if ((*(_BYTE *)(v42 + 23) & 0x10) == 0)
    {
LABEL_73:
      v42 = sub_22F115B7C(v42);
      continue;
    }
    break;
  }
  v41 = v42;
LABEL_77:
  v48 = sub_22F115668(v41);
  v93 = *a4;
  v94 = a4 + 1;
  v96 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))&unk_24FAB84D8;
  LODWORD(v97) = 4687;
  v98 = &v93;
  if ((sub_22EAB2EB4((uint64_t)a1, v48, v93, &v96) & 1) != 0)
    return 1;
  v96 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))*a4;
  if ((sub_22F111438(&v96, a1[11]) & 1) != 0)
    goto LABEL_115;
  v50 = *a4;
  v51 = *a4;
  while (2)
  {
    while (2)
    {
      if ((v51 & 0xF) != 0)
        goto LABEL_92;
      v52 = *(unsigned __int8 *)(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v52 > 0x39)
      {
LABEL_87:
        if (sub_22F115668(v51))
          v50 = v51;
        v51 = sub_22F115B7C(v51);
        if (!v51)
          goto LABEL_98;
        continue;
      }
      break;
    }
    if (v52 == 24)
      break;
    if (v52 != 26)
    {
      if (((1 << v52) & 0x20000000200003CLL) != 0)
        goto LABEL_92;
      goto LABEL_87;
    }
    if ((*(_BYTE *)(v51 + 23) & 0x10) == 0)
    {
LABEL_92:
      v51 = sub_22F115B7C(v51);
      continue;
    }
    break;
  }
  v50 = v51;
LABEL_98:
  v53 = sub_22F115668(v50);
  if (sub_22F40ACB8(*(_QWORD *)(*a4 & 0xFFFFFFFFFFFFFFF0)))
    v54 = 6974;
  else
    v54 = 6973;
  sub_22E8FCA40(a1, v53, v54, 0, (uint64_t)&v96);
  v101[0] = *a4;
  v87 = sub_22E8901B8((uint64_t)&v96, v101);
  v55 = *a4;
  v93 = v55;
  v94 = a4 + 1;
  v56 = v55;
  while (2)
  {
    while (2)
    {
      if ((v56 & 0xF) != 0)
        goto LABEL_112;
      v57 = *(unsigned __int8 *)(*(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v57 > 0x39)
      {
LABEL_107:
        if (sub_22F115668(v56))
          v55 = v56;
        v56 = sub_22F115B7C(v56);
        if (!v56)
          goto LABEL_114;
        continue;
      }
      break;
    }
    if (v57 == 24)
      break;
    if (v57 != 26)
    {
      if (((1 << v57) & 0x20000000200003CLL) != 0)
        goto LABEL_112;
      goto LABEL_107;
    }
    if ((*(_BYTE *)(v56 + 23) & 0x10) == 0)
    {
LABEL_112:
      v56 = sub_22F115B7C(v56);
      continue;
    }
    break;
  }
  v55 = v56;
LABEL_114:
  v58 = sub_22F115668(v55);
  v92 = v58 | ((unint64_t)sub_22F1167E8((uint64_t *)&v93) << 32);
  sub_22E8906A0(v87, (uint64_t *)&v92);
  sub_22E903BEC((unsigned int *)&v96);
LABEL_115:
  if (sub_22F1124D8(*(_QWORD *)(*a4 & 0xFFFFFFFFFFFFFFF0)))
  {
    v59 = sub_22EF6A4D4((uint64_t *)a1[11], *a4);
    v60 = *a4;
    v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v61 && *(_BYTE *)(v61 + 16) == 44)
    {
      v62 = sub_22F114198(*(_QWORD *)(v61 + 24));
      v60 = sub_22E496830(v62);
    }
    if (sub_22F36EDA0(a1[11], v59, v60, 1))
      v63 = 0;
    else
      v63 = v59;
    if (v63 >= 0x10)
    {
      v64 = (uint64_t *)(v60 & 0xFFFFFFFFFFFFFFF0);
      v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (v65)
        v66 = (*(_DWORD *)(v65 + 16) & 0xFF800FF) == 87031819;
      else
        v66 = 0;
      if (!v66)
      {
        v67 = sub_22F110B50(*(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF0));
        if (v67 != sub_22F110B50(*v64))
        {
          v68 = sub_22F110B50(*v64);
          v69 = a1[11];
          if (v68)
            v70 = sub_22EF721C8(v69, v60);
          else
            v70 = sub_22EF67D20(v69, v60);
          if (sub_22F36EDA0(a1[11], v63, v70, 1))
            v59 = 0;
          else
            v59 = v63;
        }
      }
    }
    else
    {
      v59 = v63;
    }
  }
  else
  {
    v59 = 0;
  }
  v35 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))*a4;
  v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a4 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v71)
    v72 = (*(_DWORD *)(v71 + 16) & 0xFF800FF) == 110624779;
  else
    v72 = 0;
  if (v72)
    v59 = *(_QWORD *)(a1[11] + 16568);
  if (v59 < 0x10)
    goto LABEL_173;
  v73 = *a4;
  while (2)
  {
    while (2)
    {
      if ((v73 & 0xF) != 0)
        goto LABEL_154;
      v74 = *(unsigned __int8 *)(*(_QWORD *)(v73 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v74 > 0x39)
      {
LABEL_149:
        if (sub_22F115668(v73))
          v35 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))v73;
        v73 = sub_22F115B7C(v73);
        if (!v73)
          goto LABEL_156;
        continue;
      }
      break;
    }
    if (v74 == 24)
      break;
    if (v74 != 26)
    {
      if (((1 << v74) & 0x20000000200003CLL) != 0)
        goto LABEL_154;
      goto LABEL_149;
    }
    if ((*(_BYTE *)(v73 + 23) & 0x10) == 0)
    {
LABEL_154:
      v73 = sub_22F115B7C(v73);
      continue;
    }
    break;
  }
  v35 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))v73;
LABEL_156:
  v88 = sub_22F115668((uint64_t)v35);
  v97 = a1[11] + 2128;
  LODWORD(v98) = 6972;
  v75 = *a4;
  v76 = (unsigned __int8 *)sub_22E3B8AAC(v97);
  v96 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))v76;
  v77 = v76 + 1;
  v78 = *v76;
  v77[v78] = 9;
  *v76 = v78 + 2;
  *(_QWORD *)&v76[8 * v78 + 16] = v75;
  v79 = (v78 + 1);
  v77[v79] = 9;
  *(_QWORD *)&v76[8 * v79 + 16] = v59;
  v80 = *a4;
  v93 = v80;
  v94 = a4 + 1;
  v81 = v80;
  while (2)
  {
    while (2)
    {
      if ((v81 & 0xF) != 0)
        goto LABEL_167;
      v82 = *(unsigned __int8 *)(*(_QWORD *)(v81 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v82 > 0x39)
      {
LABEL_162:
        if (sub_22F115668(v81))
          v80 = v81;
        v81 = sub_22F115B7C(v81);
        if (!v81)
          goto LABEL_169;
        continue;
      }
      break;
    }
    if (v82 == 24)
      break;
    if (v82 != 26)
    {
      if (((1 << v82) & 0x20000000200003CLL) != 0)
        goto LABEL_167;
      goto LABEL_162;
    }
    if ((*(_BYTE *)(v81 + 23) & 0x10) == 0)
    {
LABEL_167:
      v81 = sub_22F115B7C(v81);
      continue;
    }
    break;
  }
  v80 = v81;
LABEL_169:
  v83 = sub_22F115668(v80);
  v84 = sub_22F1167E8((uint64_t *)&v93);
  sub_22E4D6448((uint64_t)(v76 + 336), v83 | ((unint64_t)v84 << 32), 1);
  v101[0] = a3;
  sub_22EB52944((uint64_t)a1, v88, v101, 1uLL, (uint64_t *)&v96);
  if (v96 && v97)
    sub_22E3BB10C(v97, (unint64_t)v96);
  v35 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))*a4;
LABEL_173:
  a5 = v90;
  v38 = v91;
  v16 = v89;
LABEL_174:
  v96 = v35;
  v85 = a1[11];
  v86 = sub_22F1133DC((uint64_t *)&v96, v85);
  v29 = sub_22E3CD3D4(v85 + 2032, 40, 3);
  sub_22F3309A4(v29, v38, a3, (uint64_t)a4, a5, v86, v16);
  return v29;
}

unsigned int *sub_22EB4C338(_QWORD *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  char v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  _BYTE *v26;
  _QWORD *v27;
  int v28;
  unsigned int v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v41;
  int v42;
  uint64_t v44;
  unsigned int v45;
  int v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v61;
  BOOL v62;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  _BYTE v74[96];
  _BYTE v75[96];
  _BYTE v76[3];
  uint64_t v77;
  void *v78;
  uint64_t v79;
  _BYTE v80[51];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unsigned int v86;
  _QWORD v87[3];
  __int16 v88;
  int v89;
  char v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  _BYTE v94[64];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unsigned int v100;
  _QWORD v101[3];
  __int16 v102;
  int v103;
  char v104;
  uint64_t v105;

  v6 = a2;
  v105 = *MEMORY[0x24BDAC8D0];
  if (a2 != 4)
  {
    if (a2 - 2 < 2)
    {
      v24 = *(_QWORD *)(a1[11] + 16528);
    }
    else
    {
      if (a2 <= 1)
      {
        v19 = sub_22EF7411C(a1[11], *(_QWORD *)(a1[11] + 16408), 0);
        v20 = a1[11];
        v21 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
        if (v21)
          v22 = (*(_DWORD *)(v21 + 16) & 0xFEu) - 6 > 0xFFFFFFFB;
        else
          v22 = 0;
        if (!v22)
          v21 = sub_22F10CF48(v21);
        v23 = *(_QWORD *)(v21 + 32);
        goto LABEL_126;
      }
      v24 = 0;
    }
LABEL_127:
    v64 = a1[27];
    v65 = (unsigned int *)sub_22E3CD3D4(a1[11] + 2032, 32, 3);
    return sub_22F3C215C(v65, a1[11], v6, v24, a3, a4, v64);
  }
  v8 = a1[429];
  if (v8)
  {
LABEL_125:
    v20 = a1[11];
    v23 = sub_22EF6477C(v20, v8) | 1;
LABEL_126:
    v24 = sub_22EF5B848(v20, v23, 0);
    goto LABEL_127;
  }
  v9 = a1[419];
  if ((v9 & 1) != 0)
  {
    v9 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[11] + 16048) + 16))(*(_QWORD *)(a1[11] + 16048), v9 >> 1);
    a1[419] = v9;
    if (!v9)
      goto LABEL_55;
  }
  else if (!v9)
  {
    goto LABEL_55;
  }
  v10 = sub_22E3CB704((llvm::StringMapImpl *)(a1[10] + 544), "source_location", 0xFuLL);
  v91 = 0;
  v92 = v94;
  v93 = 0x800000000;
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v98 = a1;
  v99 = v10;
  v100 = a3;
  sub_22EFC6D6C((uint64_t)v101, v10);
  v101[2] = 0;
  v101[1] = 0;
  v102 = 0;
  v103 = 257;
  v104 = 0;
  sub_22EC56024((uint64_t)&v91);
  v11 = sub_22EC611AC((uint64_t)a1, (uint64_t)&v91, v9 + 48, 0);
  v8 = 0;
  if (v11 && (_DWORD)v91 == 2)
  {
    v12 = *(_QWORD *)v92 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = *(_DWORD *)(v12 + 28);
    if ((v13 & 0x7Fu) <= 0x2F && ((1 << (v13 & 0x7F)) & 0xC00000060000) != 0)
    {
      v12 = sub_22EFBAEA4(*(_QWORD *)v92 & 0xFFFFFFFFFFFFFFFCLL);
      v13 = *(_DWORD *)(v12 + 28);
    }
    if ((v13 & 0x7Eu) - 34 > 3)
    {
      v8 = 0;
    }
    else
    {
      v15 = sub_22E3CB704((llvm::StringMapImpl *)(a1[10] + 544), "__impl", 6uLL);
      v77 = 0;
      v78 = v80;
      v79 = 0x800000000;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = a1;
      v85 = v15;
      v86 = a3;
      sub_22EFC6D6C((uint64_t)v87, v15);
      v87[1] = 0;
      v87[2] = 0;
      v88 = 0;
      v89 = 257;
      v90 = 0;
      sub_22EC56024((uint64_t)&v77);
      if ((*(_BYTE *)(v12 + 74) & 3) != 0)
      {
        v16 = sub_22EC611AC((uint64_t)a1, (uint64_t)&v77, v12 + 64, 0);
        v8 = 0;
        if (v16 && (_DWORD)v77 == 2)
        {
          v17 = *(_QWORD *)v78 & 0xFFFFFFFFFFFFFFFCLL;
          v18 = *(_DWORD *)(v17 + 28) & 0x7F;
          if (v18 <= 0x2F && ((1 << v18) & 0xC00000060000) != 0)
          {
            v17 = sub_22EFBAEA4(v17);
            v18 = *(_DWORD *)(v17 + 28) & 0x7F;
          }
          if (v18 - 35 >= 3)
            v8 = 0;
          else
            v8 = v17;
        }
      }
      else
      {
        v8 = 0;
      }
      if (BYTE1(v89))
      {
        if ((_DWORD)v77 == 5)
        {
          sub_22EC64D18(v84, (uint64_t)&v77);
        }
        else if (v82 && (*(_DWORD *)(v84[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v84, (uint64_t)&v77);
        }
      }
      if (v81)
      {
        v67 = sub_22EC6CBD0(v81);
        MEMORY[0x2348A0E9C](v67, 0x10E0C409F09D3C3);
      }
      if (v78 != v80)
        free(v78);
    }
  }
  if (BYTE1(v103))
  {
    if ((_DWORD)v91 == 5)
    {
      sub_22EC64D18(v98, (uint64_t)&v91);
    }
    else if (v96 && (*(_DWORD *)(v98[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v98, (uint64_t)&v91);
    }
  }
  if (v95)
  {
    v66 = sub_22EC6CBD0(v95);
    MEMORY[0x2348A0E9C](v66, 0x10E0C409F09D3C3);
  }
  if (v92 != v94)
  {
    free(v92);
    if (!v8)
      goto LABEL_55;
    goto LABEL_54;
  }
  if (!v8)
  {
LABEL_55:
    v25 = (unsigned int *)v76;
    v26 = v76;
    v27 = a1;
    v28 = a3;
    v29 = 4736;
    goto LABEL_56;
  }
LABEL_54:
  if ((*(_DWORD *)(v8 + 72) & 0x10000) == 0)
    goto LABEL_55;
  if ((*(_DWORD *)(v8 + 72) & 0xE000) == 0x4000
    || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104)),
        (**(_QWORD **)(v8 + 128) & 0x1000) == 0)
    || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104)),
        *(_DWORD *)(*(_QWORD *)(v8 + 128) + 16)))
  {
    v25 = (unsigned int *)v75;
    v26 = v75;
    goto LABEL_61;
  }
  v31 = sub_22EFC3B90(v8);
  if (!v31)
    goto LABEL_123;
  v35 = v31;
  v36 = *(_QWORD *)(v31 + 40);
  if ((v36 & 7) != 0)
    goto LABEL_123;
  v37 = v36 & 0xFFFFFFFFFFFFFFF8;
  if (!v37)
    goto LABEL_123;
  v38 = 0;
  while (2)
  {
    v39 = *(_QWORD *)(v37 + 16);
    switch(*(_QWORD *)v39)
    {
      case 7u:
        if (*(_DWORD *)(v39 + 16) == 1818185055 && *(_DWORD *)(v39 + 19) == 1701734764)
        {
          v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v45 = *(_DWORD *)(v44 + 16);
          v46 = v45;
          if (v44)
            v62 = v45 == 11;
          else
            v62 = 0;
          if (v62)
            goto LABEL_109;
          if (!v44)
          {
LABEL_107:
            if (v46 != 9)
              goto LABEL_122;
            goto LABEL_110;
          }
        }
        else
        {
          if (*(_QWORD *)v39 != 9)
            goto LABEL_123;
LABEL_72:
          v41 = *(_QWORD *)(v39 + 16);
          v42 = *(unsigned __int8 *)(v39 + 24);
          if (v41 != 0x6D756C6F635F4D5FLL || v42 != 110)
            goto LABEL_123;
          v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v35 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v45 = *(_DWORD *)(v44 + 16);
          v46 = v45;
          if (v44)
            v47 = v45 == 11;
          else
            v47 = 0;
          if (v47)
          {
LABEL_109:
            if (((v45 >> 19) & 0x1FE) - 166 >= 0x14)
              goto LABEL_122;
            goto LABEL_110;
          }
          if (!v44)
            goto LABEL_107;
        }
        if (v46 != 44)
          goto LABEL_107;
        v48 = v33;
        v72 = v32;
        v49 = sub_22F114198(*(_QWORD *)(v44 + 24));
        if ((*(_BYTE *)(v49 + 74) & 1) == 0 && *(_QWORD *)(v49 + 128) <= 7uLL)
          goto LABEL_122;
        v50 = sub_22F114198(*(_QWORD *)(v44 + 24));
        v32 = v72;
        v33 = v48;
        v34 = &jpt_22EB4C788;
        if ((*(_BYTE *)(v50 + 76) & 0x80) != 0)
          goto LABEL_122;
        goto LABEL_110;
      case 9u:
        goto LABEL_72;
      case 0xCu:
        v51 = *(_QWORD *)(v39 + 16);
        v52 = *(_DWORD *)(v39 + 24);
        if (v51 != 0x5F656C69665F4D5FLL || v52 != 1701667182)
          goto LABEL_123;
        v54 = v34;
        v73 = v38;
        v55 = v32;
        v68 = *(_QWORD *)(v35 + 48);
        v71 = v71 & 0xFFFFFFFF00000000 | v33 & 0xE0;
        v56 = v33;
        if (v68 != sub_22EF5B848(a1[11], *(_QWORD *)(a1[11] + 16408) | 1, v33 & 0xE0))
          goto LABEL_121;
        v57 = v56 & 0xFFFFFFE0;
        goto LABEL_101;
      case 0x10u:
        v59 = *(_QWORD *)(v39 + 16);
        v58 = *(_QWORD *)(v39 + 24);
        if (v59 != 0x74636E75665F4D5FLL || v58 != 0x656D616E5F6E6F69)
          goto LABEL_123;
        v54 = v34;
        v73 = v38;
        v57 = v33;
        v69 = *(_QWORD *)(v35 + 48);
        v70 = v70 & 0xFFFFFFFF00000000 | v32 & 0xE0;
        v61 = v32;
        if (v69 == sub_22EF5B848(a1[11], *(_QWORD *)(a1[11] + 16408) | 1, v32 & 0xE0))
        {
          v55 = v61 & 0xFFFFFFE0;
LABEL_101:
          v32 = v55;
          v33 = v57;
          v38 = v73;
          v34 = v54;
LABEL_110:
          ++v38;
          do
          {
            v35 = *(_QWORD *)(v35 + 8) & 0xFFFFFFFFFFFFFFF8;
            if (!v35)
              goto LABEL_122;
          }
          while ((*(_DWORD *)(v35 + 28) & 0x7Fu) - 49 > 2);
          v37 = *(_QWORD *)(v35 + 40) & 0xFFFFFFFFFFFFFFF8;
          if ((*(_QWORD *)(v35 + 40) & 7) != 0 || v37 == 0)
            goto LABEL_123;
          continue;
        }
LABEL_121:
        v38 = v73;
LABEL_122:
        if (v38 == 4)
        {
          a1[429] = v8;
          goto LABEL_125;
        }
LABEL_123:
        v25 = (unsigned int *)v74;
        v26 = v74;
LABEL_61:
        v27 = a1;
        v28 = a3;
        v29 = 4735;
LABEL_56:
        sub_22E8FCA40(v27, v28, v29, 0, (uint64_t)v26);
        sub_22E903BEC(v25);
        a1[429] = 0;
        return (unsigned int *)1;
      default:
        goto LABEL_123;
    }
  }
}

uint64_t sub_22EB4CB24(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, int a5)
{
  unint64_t v8;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL4 v19;
  int v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int *v26;
  char *v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  int *v32;
  char *v33;
  uint64_t v34;
  int v35;
  char *v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  unsigned int v40[16];
  unsigned int v41[24];
  uint64_t v42;
  uint64_t v43[12];
  char *v44;
  unsigned int v45;
  char v46;
  uint64_t (**v47)();
  uint64_t v48;
  _BYTE *v49;
  __int16 v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  uint64_t v56;

  v8 = a2;
  v56 = *MEMORY[0x24BDAC8D0];
  sub_22F0D5A50(a2);
  v11 = v10;
  if ((*(_BYTE *)(a1[9] + 1) & 2) != 0)
  {
    LOBYTE(v48) = a4[8];
    *(_WORD *)((char *)&v48 + 1) = 1;
    v47 = off_24FAB8338;
    v49 = a4;
    v13 = sub_22ED03140();
    v14 = v13;
    if ((v13 & 1) != 0)
      return v14;
    v8 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if (!sub_22F1107D8(*(_QWORD *)(*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0)))
      return 1;
  }
  else if ((sub_22F1107D8(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0)) & 1) == 0)
  {
    if (!a4[8])
    {
      (**(void (***)(uint64_t (***__return_ptr)(), _BYTE *, _QWORD *, _QWORD, _QWORD))a4)(&v47, a4, a1, v11, *(_QWORD *)(v8 + 8));
      sub_22F0D4E74(v8);
      v43[0] = v12;
      sub_22E8906A0((uint64_t)&v47, v43);
      sub_22E903BEC((unsigned int *)&v47);
    }
    return 1;
  }
  v15 = sub_22EB1A358(a1, v8, 0);
  if ((v15 & 1) != 0)
    return 1;
  v14 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(a1[9] + 1) & 2) == 0 && sub_22F0085E8(v15 & 0xFFFFFFFFFFFFFFFELL, a1[11], 0))
  {
    if (a3)
    {
      sub_22F3C4260(v14, a1[11], 0, (uint64_t)&v47);
      if (*(_DWORD *)(a3 + 8) >= 0x41u && *(_QWORD *)a3)
        MEMORY[0x2348A0E84](*(_QWORD *)a3, 0x1000C8000313F17);
      v36 = (char *)v47;
      *(_QWORD *)a3 = v47;
      v37 = v48;
      *(_DWORD *)(a3 + 8) = v48;
      v38 = BYTE4(v48);
      *(_BYTE *)(a3 + 12) = BYTE4(v48);
      if (*(unsigned __int8 *)v14 != 172)
      {
        v39 = a1[11];
        v45 = v37;
        if (v37 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v44, (const llvm::APInt *)a3);
          v38 = *(_BYTE *)(a3 + 12);
          v37 = v45;
          v36 = v44;
        }
        else
        {
          v44 = v36;
        }
        v46 = v38;
        LODWORD(v47) = 2;
        v45 = 0;
        v48 = (uint64_t)v36;
        LODWORD(v49) = v37;
        BYTE4(v49) = v38;
        v14 = (unint64_t)sub_22EFF6628(v39, (int *)v14, &v47);
        if (v47 >= 2)
          sub_22EF53BC0((uint64_t *)&v47);
        if (v45 >= 0x41 && v44)
          MEMORY[0x2348A0E84](v44, 0x1000C8000313F17);
      }
    }
    else if (*(unsigned __int8 *)v14 != 172)
    {
      v16 = sub_22E3CD3D4(a1[11] + 2032, 24, 3);
      v17 = (_QWORD *)sub_22EFF6504(v16, 172, (int *)v14);
      *v17 &= 0xFFFFFFFC0003FFFFLL;
      return (uint64_t)v17;
    }
    return v14;
  }
  v50 = 0;
  LODWORD(v52) = 0;
  v47 = (uint64_t (**)())&v49;
  v48 = 0x800000000;
  v51 = (char **)&v47;
  v19 = 0;
  if (sub_22F005120((unsigned __int8 *)v14, (uint64_t)&v50, a1[11], 1) && (_DWORD)v52 == 2)
    v19 = (_BYTE)v50 == 0;
  if (*(unsigned __int8 *)v14 != 172)
    v14 = (unint64_t)sub_22EFF6628(a1[11], (int *)v14, &v52);
  if (v19)
  {
    v20 = v48;
    if ((*(_BYTE *)(a1[9] + 1) & 2) != 0 && !(_DWORD)v48)
    {
LABEL_38:
      if (a3)
      {
        if (*(_DWORD *)(a3 + 8) > 0x40u || (v30 = v54, v54 > 0x40))
        {
          llvm::APInt::assignSlowCase((llvm::APInt *)a3, (const llvm::APInt *)&v53);
        }
        else
        {
          *(_QWORD *)a3 = v53;
          *(_DWORD *)(a3 + 8) = v30;
        }
        *(_BYTE *)(a3 + 12) = v55;
      }
      goto LABEL_46;
    }
  }
  else
  {
    v20 = v48;
  }
  if (v20 == 1 && *((_DWORD *)v47 + 6) == 103)
  {
    v11 = *(_DWORD *)v47;
    v21 = (char *)(v47 + 4);
    v22 = (unint64_t)v47[1];
    if (v22)
    {
      v23 = (unint64_t)v47[2];
      if (v23)
      {
        sub_22E3BB10C(v23, v22);
        *((_QWORD *)v21 - 3) = 0;
      }
    }
    LODWORD(v48) = 0;
  }
  if (a5)
    v24 = v19;
  else
    v24 = 0;
  if (v24)
  {
    (*(void (**)(uint64_t *__return_ptr, _BYTE *, _QWORD *, _QWORD))(*(_QWORD *)a4 + 16))(v43, a4, a1, v11);
    sub_22F0D4E74(v14);
    v42 = v25;
    sub_22E8906A0((uint64_t)v43, &v42);
    sub_22E903BEC((unsigned int *)v43);
    if ((_DWORD)v48)
    {
      v26 = (int *)v47;
      v27 = (char *)&v47[4 * v48];
      do
      {
        v28 = (uint64_t)(v26 + 2);
        v29 = *v26;
        v26 += 8;
        sub_22E90379C(a1, v29, v28, 0, (uint64_t)v40);
        sub_22E903BEC(v40);
      }
      while (v26 != (int *)v27);
    }
    goto LABEL_38;
  }
  if (a4[8]
    || ((*(void (**)(uint64_t *__return_ptr, _BYTE *, _QWORD *, _QWORD))(*(_QWORD *)a4 + 8))(v43, a4, a1, v11), sub_22F0D4E74(v14), v42 = v31, sub_22E8906A0((uint64_t)v43, &v42), sub_22E903BEC((unsigned int *)v43), !(_DWORD)v48))
  {
    v14 = 1;
  }
  else
  {
    v32 = (int *)v47;
    v33 = (char *)&v47[4 * v48];
    v14 = 1;
    do
    {
      v34 = (uint64_t)(v32 + 2);
      v35 = *v32;
      v32 += 8;
      sub_22E90379C(a1, v35, v34, 0, (uint64_t)v41);
      sub_22E903BEC(v41);
    }
    while (v32 != (int *)v33);
  }
LABEL_46:
  sub_22E89277C((char **)&v47);
  if (v52 >= 2)
    sub_22EF53BC0(&v52);
  return v14;
}

void sub_22EB4D054(uint64_t *a1, unint64_t a2, __n128 a3)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10[24];

  if (a2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0x66:
        sub_22EB89444(a1, a2);
        break;
      case 0x67:
        sub_22EB894B4(a1, a2);
        break;
      case 0x68:
        sub_22EB63768((uint64_t)a1, a2);
        break;
      case 0x6B:
        sub_22EB89538(a1, a2);
        break;
      case 0x6C:
        sub_22EB895C8((_QWORD **)a1, a2);
        break;
      case 0x6D:
        sub_22EB89738((_QWORD **)a1, a2);
        break;
      case 0x6E:
      case 0x84:
      case 0xAC:
      case 0xAD:
      case 0xC5:
        sub_22EB897A0((uint64_t)a1, a2);
        break;
      case 0x6F:
        sub_22EB897A8(a1, a2);
        break;
      case 0x70:
        sub_22EB898A0(a1, (int *)a2);
        break;
      case 0x71:
        sub_22EB89A00(a1, (int *)a2, a3);
        break;
      case 0x72:
        sub_22EB89AD0(a1, a2);
        break;
      case 0x73:
        sub_22EB89D38((uint64_t)a1, a2);
        break;
      case 0x74:
        sub_22EB89E20(a1, a2);
        break;
      case 0x75:
      case 0x80:
      case 0x9A:
      case 0xA9:
      case 0xAA:
      case 0xAE:
      case 0xAF:
      case 0xB2:
      case 0xB5:
      case 0xC2:
      case 0xC3:
      case 0xCE:
      case 0xCF:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xE7:
        nullsub_910(a2);
        break;
      case 0x76:
        sub_22EB89E7C(a1, (unsigned __int8 *)a2);
        break;
      case 0x77:
        sub_22EB8A358((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x78:
        sub_22EB8A634((uint64_t)a1, a2);
        break;
      case 0x79:
        sub_22EB8A6DC(a1, a2);
        break;
      case 0x7A:
        sub_22EB8A790((uint64_t)a1, a2);
        break;
      case 0x7B:
        sub_22EB8A830((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0x7C:
        sub_22EB8AB04(a1, a2);
        break;
      case 0x7D:
        sub_22EB8AD04((uint64_t)a1, a2);
        break;
      case 0x7E:
        sub_22EB8ADD4((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0x7F:
        sub_22EB8B0B8(a1, a2);
        break;
      case 0x81:
        sub_22EB8B210((unsigned int **)a1, a2);
        break;
      case 0x82:
        sub_22EB8B750((uint64_t)a1, (uint64_t *)a2);
        break;
      case 0x83:
        sub_22EB8B99C((_QWORD **)a1, a2);
        break;
      case 0x85:
        sub_22F2F5688(a1, (_DWORD *)a2);
        break;
      case 0x86:
        sub_22EB8BA24(a1, a2);
        break;
      case 0x87:
        sub_22EB8BA70(a1, a2);
        break;
      case 0x88:
        sub_22EB8BCAC(a1, a2);
        break;
      case 0x89:
        sub_22EB8BF1C((_QWORD **)a1, a2);
        break;
      case 0x8A:
        sub_22EB8C0B8(a1, (unsigned int *)a2);
        break;
      case 0x8B:
        sub_22EB8C268(a1, (unsigned int *)a2);
        break;
      case 0x8C:
      case 0x8E:
        sub_22EB8C39C(a1, (unsigned int *)a2);
        break;
      case 0x8D:
        sub_22EB8C3A0(a1, (unsigned int *)a2);
        break;
      case 0x8F:
        sub_22EB8CA44(a1, a2);
        break;
      case 0x90:
        sub_22EB8CAB0((_QWORD **)a1, a2);
        break;
      case 0x91:
        sub_22EB8CB24(a1, a2);
        break;
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
        sub_22EB8CBAC();
        break;
      case 0x98:
        sub_22EB8CBB0(a1, a2);
        break;
      case 0x99:
        sub_22EB8CC28((uint64_t)a1, (unsigned __int8 *)a2);
        break;
      case 0x9B:
        sub_22EB8CC54(a1, a2);
        break;
      case 0x9C:
        sub_22EB8CCD8((_QWORD **)a1, a2);
        break;
      case 0x9D:
        sub_22EB8CD68(a1, a2);
        break;
      case 0x9E:
        sub_22EB8CE8C((_QWORD **)a1, a2);
        break;
      case 0x9F:
        sub_22EB8CEF8(a1, a2);
        break;
      case 0xA0:
        sub_22EB8CF4C(a1, a2);
        break;
      case 0xA1:
        if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 28) & 0x7Fu) - 49 <= 2
          && ((v4 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576), v4 <= 3)
            ? (v5 = v4 == 2)
            : (v5 = 1),
              v5))
        {
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(a2 + 4), 0xE57u, 0, (uint64_t)v10);
          v9 = *(_QWORD *)(a2 + 16);
          v6 = sub_22E890024((uint64_t)v10, &v9);
          sub_22F0D4E74(a2);
          v8 = v7;
          sub_22E8906A0(v6, &v8);
          sub_22E903BEC(v10);
        }
        else
        {
          sub_22EBA4880(a1, (unsigned int *)a2);
        }
        break;
      case 0xA2:
        sub_22EB8CF98(a1, a2);
        break;
      case 0xA3:
        sub_22EB8D008(a1, (unsigned int *)a2);
        break;
      case 0xA4:
        sub_22EB8D014((uint64_t)a1, a2);
        break;
      case 0xA6:
        sub_22EB8D3A4(a1, a2);
        break;
      case 0xA7:
        sub_22EB8D4F8((_QWORD **)a1, a2);
        break;
      case 0xA8:
        sub_22EB8D5FC((uint64_t)a1, (const void **)a2);
        break;
      case 0xAB:
        sub_22EB8D628((_QWORD **)a1, a2);
        break;
      case 0xB0:
        sub_22EB8D6BC(a1, a2);
        break;
      case 0xB1:
        sub_22EB8D8E4((_QWORD **)a1, a2);
        break;
      case 0xB3:
        sub_22EB8D9AC((uint64_t)a1, *(_QWORD *)(a2 + 8));
        break;
      case 0xB4:
        sub_22EB8DA00(a1, a2);
        break;
      case 0xB6:
        sub_22EB8DC18(a1, a2);
        break;
      case 0xB7:
        sub_22EB8F054((uint64_t)a1, a2);
        break;
      case 0xB8:
        sub_22EB8F160(a1, a2);
        break;
      case 0xB9:
        sub_22EB8F1E0((uint64_t)a1, a2);
        break;
      case 0xBA:
        sub_22EB8F2CC((uint64_t)a1, *(_QWORD *)(a2 + 16));
        break;
      case 0xBB:
        sub_22EB8F2E0((_QWORD **)a1, a2);
        break;
      case 0xBC:
        sub_22EB8F364(a1, (unsigned int *)a2);
        break;
      case 0xBD:
        sub_22EB8F884(a1, a2);
        break;
      case 0xBF:
        sub_22EB8FB50((_QWORD **)a1, a2);
        break;
      case 0xC0:
        sub_22EB8FC1C((_QWORD **)a1, a2);
        break;
      case 0xC1:
        sub_22EB8FDA8(a1, a2);
        break;
      case 0xC4:
        sub_22EB900F4(a1, a2);
        break;
      case 0xC6:
        sub_22EB9013C((_QWORD **)a1, a2);
        break;
      case 0xC7:
        sub_22EB90214((_QWORD **)a1, a2);
        break;
      case 0xC8:
        sub_22EB902F4(a1, a2);
        break;
      case 0xC9:
        sub_22EB90648(a1, a2);
        break;
      case 0xCA:
        sub_22EB90710((_QWORD **)a1, a2);
        break;
      case 0xCB:
        sub_22EB90758(a1, a2);
        break;
      case 0xCC:
        sub_22EB6B190(*a1, a2);
        break;
      case 0xCD:
        sub_22EB909FC((_QWORD **)a1, a2);
        break;
      case 0xD0:
        sub_22EB90B20(a1, a2);
        break;
      case 0xD1:
        sub_22EB90B90(a1, a2);
        break;
      case 0xD2:
        sub_22EB90D58((uint64_t)a1, (_QWORD *)a2);
        break;
      case 0xD3:
        sub_22EB90DBC(a1, (unsigned int *)a2);
        break;
      case 0xD4:
        sub_22EB91184((uint64_t)a1, (unsigned int *)a2);
        break;
      case 0xD5:
        sub_22EB91590(a1, a2);
        break;
      case 0xD6:
        sub_22EB915EC((_QWORD **)a1, a2);
        break;
      case 0xD7:
        sub_22EB91634(a1, a2);
        break;
      case 0xD8:
        sub_22F2F74C4(a1, (_DWORD *)a2);
        break;
      case 0xD9:
        sub_22EB91730(a1, a2);
        break;
      case 0xDA:
        sub_22EB917A8(a1, a2);
        break;
      case 0xDB:
        sub_22EB918DC(a1, a2);
        break;
      case 0xDC:
        sub_22EB91E7C((_QWORD **)a1, a2);
        break;
      case 0xDD:
        sub_22EB91ED8(a1, a2);
        break;
      case 0xDE:
        sub_22EB92128(a1, a2);
        break;
      case 0xDF:
        sub_22EB92614(*a1, a2);
        break;
      case 0xE0:
        sub_22EB92680(a1, a2);
        break;
      case 0xE4:
        sub_22EB92868((_QWORD **)a1, a2);
        break;
      case 0xE5:
        sub_22EB92928((_QWORD **)a1, a2);
        break;
      case 0xE6:
        sub_22EB929DC(a1, (_DWORD *)a2);
        break;
      case 0xE8:
        sub_22EB93020(a1, a2);
        break;
      case 0xE9:
        if ((*(_DWORD *)a2 & 0x7C0000) != 0x100000
          || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                      + 16) != 31)
        {
          sub_22EBA4C80(a1, a2);
        }
        break;
      case 0xEA:
        sub_22EB93288((_QWORD **)a1, a2);
        break;
      default:
        return;
    }
  }
}

unint64_t *sub_22EB4DB90(_QWORD **a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned __int32 v14;
  uint64_t v16;
  int64x2_t v17;
  _BYTE v18[32];
  uint64_t v19;
  uint64_t v20;

  v2 = (unint64_t *)a2;
  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v6 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v6 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v6 == 24)
      goto LABEL_13;
    if (v6 == 26)
      break;
    if (((1 << v6) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v4 = i;
LABEL_14:
  sub_22F115668(v4);
  v7 = *v2;
  if (*v2 >= 0x10)
  {
    v16 = (uint64_t)v18;
    v17 = vdupq_n_s64(0x20uLL);
    v19 = 0;
    v8 = sub_22F11598C(v7);
    if (v17.i64[0] < (unint64_t)v8)
      sub_22EEB52C0(&v16, v8);
    v9 = sub_22EB94BDC(a1, (uint64_t)&v16, v7);
    if (v9 > 0xF)
    {
      v11 = v9;
      v12 = (*a1)[11];
      v13 = v17.i64[0] - v17.i64[1];
      v14 = v17.i32[0] - v17.i32[2];
      if (v17.i32[0] == v17.i32[2])
        v14 = sub_22F11598C(v11);
      v2 = (unint64_t *)sub_22E3CD3D4(v12 + 2032, v14 + 8, 3);
      *v2 = v11;
      v10 = (_BYTE *)v16;
      memcpy(v2 + 1, (const void *)(v16 + v17.i64[1]), v13);
    }
    else
    {
      v2 = 0;
      v10 = (_BYTE *)v16;
    }
    if (v10 != v18 && v10)
      MEMORY[0x2348A0E84](v10, 0x1000C8077774924);
  }
  return v2;
}

uint64_t sub_22EB4DDB8(uint64_t a1, int *a2, int *a3, __int16 *a4, uint64_t *a5, int *a6)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  int v11;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
    return sub_22F330F98(a1, a2, a3, a4, a5, a6);
  v7 = *(_QWORD *)a1 + 576 * v6;
  v8 = *(_QWORD *)a3;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  *(_DWORD *)v7 = *a2;
  *(_WORD *)(v7 + 4) = v9;
  *(_QWORD *)(v7 + 8) = v8;
  *(int64x2_t *)(v7 + 16) = vdupq_n_s64(v7 + 48);
  *(_QWORD *)(v7 + 32) = 4;
  *(_DWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 80) = v7 + 96;
  *(_QWORD *)(v7 + 88) = 0x400000000;
  *(_QWORD *)(v7 + 128) = v7 + 144;
  *(_QWORD *)(v7 + 136) = 0x200000000;
  *(_QWORD *)(v7 + 160) = v10;
  *(_QWORD *)(v7 + 168) = v7 + 184;
  *(_QWORD *)(v7 + 176) = 0x800000000;
  *(_QWORD *)(v7 + 248) = v7 + 264;
  *(_QWORD *)(v7 + 256) = 0x800000000;
  *(int64x2_t *)(v7 + 328) = vdupq_n_s64(v7 + 360);
  *(_QWORD *)(v7 + 344) = 8;
  *(_DWORD *)(v7 + 352) = 0;
  *(_QWORD *)(v7 + 424) = v7 + 440;
  *(_QWORD *)(v7 + 432) = 0x200000000;
  *(_QWORD *)(v7 + 456) = v7 + 472;
  *(_QWORD *)(v7 + 464) = 0x400000000;
  *(int64x2_t *)(v7 + 504) = vdupq_n_s64(v7 + 536);
  *(_QWORD *)(v7 + 520) = 4;
  *(_DWORD *)(v7 + 528) = 0;
  *(_DWORD *)(v7 + 568) = v11;
  *(_WORD *)(v7 + 572) = 0;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 576 * v7 - 576;
}

uint64_t sub_22EB4DECC(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  int v13[3];
  int v14;
  uint64_t v15;
  int v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 416);
  v16 = a2;
  v15 = v5;
  v14 = a4;
  *(_QWORD *)v13 = *(unsigned int *)(a1 + 1704);
  result = sub_22EB4DDB8(a1 + 3688, &v16, v13, (__int16 *)(a1 + 1693), &v15, &v14);
  v7 = *(unsigned int *)(a1 + 3696);
  v8 = v7 - 2;
  v9 = *(_QWORD *)(a1 + 3688);
  v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
  if (v10 == 5)
  {
    *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
    v11 = 1;
  }
  else if (v10 == 2)
  {
    *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
    v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
  }
  else
  {
    v11 = 0;
    *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
  }
  v12 = v9 + 576 * v7;
  *(_BYTE *)(v12 - 3) = v11;
  *(_WORD *)(a1 + 1693) = 0;
  if (*(_DWORD *)(a1 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(a1 + 1776), (llvm::SmallPtrSetImplBase *)(v12 - 560));
    return sub_22EAEAE08(a1 + 1840, (uint64_t *)(v12 - 496));
  }
  return result;
}

uint64_t sub_22EB4DFE4(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  while (1)
  {
    v3 = sub_22EFFA6B0(a2);
    v4 = v3;
    v5 = *v3;
    if (v5 != 233)
      break;
    if ((*(_DWORD *)v3 & 0x7C0000) != 0x140000)
      return 0;
    a2 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
  }
  if (v5 == 107)
  {
    v6 = v3 + 24;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v8 = *(_DWORD *)(v7 + 16);
    if (v7)
      v9 = v8 == 11;
    else
      v9 = 0;
    if (v9)
    {
      if (((*(_DWORD *)(v7 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        return sub_22EB4DFE4(a1, *v6);
    }
    else if (v7 && v8 == 44)
    {
      v10 = sub_22F114198(*(_QWORD *)(v7 + 24));
      if ((*(_BYTE *)(v10 + 74) & 1) == 0 && *(_QWORD *)(v10 + 128) <= 7uLL
        || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v7 + 24)) + 72) & 0x8000000000) != 0)
      {
        return sub_22EB4DFE4(a1, *v6);
      }
    }
    else if (v8 != 9)
    {
      return sub_22EB4DFE4(a1, *v6);
    }
LABEL_26:
    v6 = v4 + 16;
    return sub_22EB4DFE4(a1, *v6);
  }
  if (v5 != 161)
  {
    if (v5 != 188)
      return 0;
    goto LABEL_26;
  }
  v11 = *((_QWORD *)v3 + 1);
  v12 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  if ((!v12 || *(_BYTE *)(v12 + 16) != 39)
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
     || (v12 = sub_22F10CF48(v12)) == 0))
  {
    v12 = sub_22EF5C728(*(_QWORD *)(a1 + 88), v11);
    if (!v12)
      return 0;
  }
  if ((sub_22F10E1FC(*(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0), 12) & 1) == 0)
    return 0;
  return (uint64_t)v4;
}

void *sub_22EB4E16C(llvm::SmallPtrSetImplBase *this)
{
  void *result;
  uint64_t v3;

  result = (void *)*((_QWORD *)this + 1);
  if (result == *(void **)this)
    goto LABEL_2;
  v3 = *((unsigned int *)this + 4);
  if (v3 < 0x21 || 4 * (*((_DWORD *)this + 5) - *((_DWORD *)this + 6)) >= v3)
  {
    result = memset(result, 255, 8 * v3);
LABEL_2:
    *((_DWORD *)this + 5) = 0;
    *((_DWORD *)this + 6) = 0;
    return result;
  }
  return (void *)llvm::SmallPtrSetImplBase::shrink_and_clear(this);
}

unsigned __int8 *sub_22EB4E1D8(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v2 = result;
  v3 = *((_QWORD *)a2 + 1);
  if (((v3 & 4) != 0 || (*(_BYTE *)((v3 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) != 0)
    && (*(_BYTE *)(*((_QWORD *)result + 9) + 1) & 0x10) != 0)
  {
    result = sub_22EFFA6B0(a2);
    if ((*result & 0xFE) == 0x70 && (*(_DWORD *)result & 0xFC0000) == 0x540000)
    {
      v4 = *((_QWORD *)v2 + 461) + 576 * *((unsigned int *)v2 + 924);
      v5 = *((_QWORD *)result + 2);
      v6 = *(_QWORD **)(v4 - 152);
      v7 = *(unsigned int *)(v4 - 144);
      v8 = v6;
      if ((_DWORD)v7)
      {
        v9 = 8 * v7;
        v8 = *(_QWORD **)(v4 - 152);
        while (*v8 != v5)
        {
          ++v8;
          v9 -= 8;
          if (!v9)
          {
            v8 = &v6[v7];
            break;
          }
        }
      }
      v10 = v8 - v6;
      v11 = v8 + 1;
      if (v10 != v7 && v11 != &v6[v7])
      {
        v13 = 8 * v7 - 8 * v10 - 8;
        do
        {
          if (*v11 != v5)
            *v8++ = *v11;
          ++v11;
          v13 -= 8;
        }
        while (v13);
        v6 = *(_QWORD **)(v4 - 152);
      }
      *(_DWORD *)(v4 - 144) = (unint64_t)((char *)v8 - (char *)v6) >> 3;
    }
  }
  return result;
}

void sub_22EB4E2D8(_QWORD *a1)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  _BYTE v16[32];
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x24BDAC8D0];
  v12 = v16;
  v13 = v16;
  v14 = 4;
  v15 = 0;
  v17 = v19;
  v18 = 0x400000000;
  llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)&v12, (llvm::SmallPtrSetImplBase *)(a1 + 222));
  sub_22EAEAE08((uint64_t)&v17, a1 + 230);
  v2 = (unsigned __int8 **)v17;
  if ((_DWORD)v18)
  {
    v3 = (unsigned __int8 **)((char *)v17 + 8 * v18);
    while (1)
    {
      v4 = (uint64_t)*v2;
      v5 = **v2;
      if (v5 == 188)
      {
        v6 = (uint64_t *)(v4 + 24);
        v7 = (int *)(v4 + 40);
      }
      else
      {
        if (v5 != 161)
        {
          v8 = *(unsigned int *)(v4 + 28);
          if ((_DWORD)v8)
          {
            v9 = (uint64_t *)(v4 + 32);
            v10 = 8 * v8;
            do
            {
              v11 = *v9++;
              sub_22EB4EB24(v11, *(_DWORD *)(v4 + 24), a1, 0);
              v10 -= 8;
            }
            while (v10);
          }
          goto LABEL_11;
        }
        v6 = (uint64_t *)(v4 + 16);
        v7 = (int *)(v4 + 4);
      }
      sub_22EB4EB24(*v6, *v7, a1, 0);
LABEL_11:
      if (++v2 == v3)
      {
        v2 = (unsigned __int8 **)v17;
        break;
      }
    }
  }
  if (v2 != v19)
    free(v2);
  if (v13 != v12)
    free(v13);
}

unint64_t sub_22EB4E43C(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  unint64_t v4;

  v2 = sub_22EB19A28(a1);
  if ((v2 & 1) != 0)
    return 1;
  v4 = v2 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 8) == 0)
    return v4;
  return sub_22F32D9C4(a1, v4, v3);
}

void sub_22EB4E494(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v15;
  int v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  __int128 v57;
  int *v58;
  char *v59;
  char v60;
  uint64_t v61;
  int v62;
  _QWORD v63[2];
  int v64;
  uint64_t vars0;

  v8 = a3;
  v62 = a2;
  v61 = a3;
  v60 = a4;
  *(_DWORD *)(a3 + 28) |= 0x800u;
  v11 = *(_QWORD *)(a1 + 216);
  if (a3)
    v12 = a3 + 72;
  else
    v12 = 0;
  if ((_DWORD)a4)
    v13 = sub_22EB4EAB0(a1);
  else
    v13 = 0;
  if (v13 == 3 && v11 == v12)
    v15 = 2;
  else
    v15 = v13;
  if ((*(_BYTE *)(v8 + 82) & 0x80) != 0)
  {
    if ((*(_BYTE *)(v8 + 29) & 1) == 0)
      goto LABEL_15;
    sub_22EFC8E88(v8);
    v47 = *(_QWORD *)v46;
    v48 = *(unsigned int *)(v46 + 8);
    v49 = *(_QWORD *)v46 + 8 * v48;
    if ((_DWORD)v48)
    {
      v50 = 8 * v48;
      while (*(_WORD *)(*(_QWORD *)v47 + 32) != 155)
      {
        v47 += 8;
        v50 -= 8;
        if (!v50)
        {
          v47 = v49;
          break;
        }
      }
    }
    if (v47 == v49)
    {
LABEL_15:
      if (v15 == 3)
      {
        v16 = *(_DWORD *)(v8 + 28) & 0x7F;
        v17 = 3;
        if (v8 && v16 == 55)
        {
          if (sub_22EFC0EB8(v8))
            v17 = 3;
          else
            v17 = 2;
          v16 = *(_DWORD *)(v8 + 28) & 0x7F;
        }
        if (v16 == 57)
          v15 = 2;
        else
          v15 = v17;
      }
    }
  }
  v18 = 0;
  if (((1 << *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576)) & 0xF6) != 0)
  {
    if ((*(_BYTE *)(v8 + 83) & 0xC0) == 0)
    {
LABEL_31:
      v18 = 0;
      goto LABEL_33;
    }
    if (sub_22EFC201C(v8) || !sub_22E692064(v8))
    {
      v18 = 1;
    }
    else
    {
      if ((*(_DWORD *)(v8 + 28) & 0x7F) != 0x37 || (*(_BYTE *)(v8 + 87) & 0x20) == 0)
        goto LABEL_31;
      v18 = *(_QWORD *)(v8 + 168) != 0;
    }
  }
LABEL_33:
  if (v15 == 3)
    v18 = 1;
  v19 = v11 != v12 && v18;
  if (v19)
  {
    v20 = *(_QWORD *)(v8 + 144);
    v21 = (v20 & 6) == 4 || (v20 & 6) == 2;
    v22 = !v21;
    if (v20 >= 8 && !v22)
      sub_22ED65E9C(a1, a2, v8);
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) != 0)
    sub_22F31C760(a1, a2, v8);
  if (v19 && !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 64))(v8))
  {
    *(_QWORD *)&v57 = &v61;
    *((_QWORD *)&v57 + 1) = a1;
    v58 = &v62;
    v59 = &v60;
    v64 = a2;
    v63[0] = a1;
    v63[1] = &v64;
    v24 = *(_QWORD *)off_255E04E38(&off_255E04E38, v23);
    if (!v24)
      goto LABEL_56;
    v25 = (uint64_t)&vars0 - v24;
    if (v25 < 0)
      v25 = -v25;
    if ((unint64_t)(v25 - 8126464) <= 0x40000)
      sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)v63, (uint64_t)sub_22EBA4D04, (uint64_t)&v57);
    else
LABEL_56:
      sub_22EBA4D04((unint64_t **)&v57);
    v8 = v61;
  }
  v26 = *(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v26)
    v27 = *(_BYTE *)(v26 + 16) == 26;
  else
    v27 = 0;
  if ((v27
     || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
     && (v26 = sub_22F10CF48(*(_QWORD *)(*(_QWORD *)(v8 + 48) & 0xFFFFFFFFFFFFFFF0))) != 0)
    && ((*(_QWORD *)(v26 + 16) >> 54) & 0xF) - 9 <= 1)
  {
    sub_22EB14850((int32x2_t *)a1, v62, v26, a4, a5, a6, a7, a8);
  }
  if (v15 == 3 && (sub_22EFC9084(v61, 0) & 1) == 0)
  {
    if ((sub_22EFBF86C(v61, (unint64_t *)&v57, 0) & 1) == 0)
    {
      if (sub_22EA05358(v61)
        || (*(_BYTE *)(sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v61 + 112) + 104), *(_QWORD *)(v61 + 112)) + 82) & 1) != 0
        && (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x80) == 0
        && (v28 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v61 + 112) + 104), *(_QWORD *)(v61 + 112)), !sub_22EA0E0E4(v28))
        || sub_22E900DC0(a1, v61))
      {
        *(_QWORD *)&v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 32))(v61);
        DWORD2(v57) = v62;
        sub_22E785624(a1 + 8512, &v57);
      }
    }
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088);
    if (*(_DWORD *)(v29 + 68) == 15 && (*(_DWORD *)(v29 + 56) - 41) <= 1)
    {
      v30 = v61;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) == 0 || sub_22EFB9440(v61))
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v30 + 48) & 0xFFFFFFFFFFFFFFF0);
        if (!v31 || *(unsigned __int8 *)(v31 + 16) - 27 <= 0xFFFFFFFD)
          v31 = sub_22F10CF48(v31);
        v32 = (*(_DWORD *)(v31 + 16) >> 19) & 0x1F;
        v33 = v32 > 4;
        v34 = (1 << v32) & 0x16;
        if (!v33 && v34 != 0)
        {
          if ((v36 = v61,
                v37 = v62,
                v38 = *(uint64_t **)(v61 + 120),
                (v39 = *(_QWORD *)(*(_QWORD *)(v61 + 48) & 0xFFFFFFFFFFFFFFF0)) != 0)
            && *(_BYTE *)(v39 + 16) == 26
            || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v39 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 26
            && (v39 = sub_22F10CF48(v39)) != 0)
          {
            v40 = *(_QWORD *)(v39 + 16);
            if ((v40 & 0x3FFFC000000000) != 0)
            {
              v41 = 8 * (unsigned __int16)(v40 >> 38);
              do
              {
                v42 = *v38++;
                *(_QWORD *)&v57 = off_24FAB83A0;
                *((_QWORD *)&v57 + 1) = v36;
                v58 = (int *)v42;
                sub_22EE8B0B0(a1, v37, *(_QWORD *)(v42 + 48));
                v41 -= 8;
              }
              while (v41);
            }
          }
        }
      }
    }
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + 148) != 11)
      goto LABEL_126;
    v43 = v61;
    if (!v61 || (*(_DWORD *)(v61 + 28) & 0x7F) != 0x39)
      goto LABEL_126;
    v44 = *(_WORD *)(v61 + 80) & 0x7F;
    v45 = -40;
    if (v44 > 0x46)
    {
      if (v44 != 83)
      {
        if (v44 == 71)
        {
          v45 = -56;
          goto LABEL_118;
        }
        if (v44 == 81)
          goto LABEL_118;
LABEL_113:
        v51 = v44 - 52;
        v52 = v44 - 33 >= 5;
        v53 = -48;
        if (!v52)
          v53 = -64;
        if (v51 >= 6)
          v45 = v53;
        else
          v45 = -72;
      }
    }
    else
    {
      if (v44 > 0x18)
        goto LABEL_112;
      if (v44 != 16)
      {
        if (((1 << v44) & 0x1066) != 0)
          goto LABEL_118;
        if (v44 != 24)
        {
LABEL_112:
          if (v44 == 70)
          {
            v45 = -64;
            goto LABEL_118;
          }
          goto LABEL_113;
        }
      }
      v45 = -48;
    }
LABEL_118:
    v54 = *(_QWORD *)(v61 + 72 + v45 + 16);
    v55 = (_QWORD *)(v54 & 0xFFFFFFFFFFFFFFF8);
    if ((v54 & 4) != 0)
      v55 = (_QWORD *)*v55;
    if (v55)
      v56 = v55 - 8;
    else
      v56 = 0;
    sub_22E3CD31C((uint64_t *)(v56[13] + 96), v56[13]);
    if (*(_DWORD *)(v56[16] + 20))
    {
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 64))(v43))
        sub_22EAC86FC(a1, v62, v43);
    }
LABEL_126:
    sub_22EFC9100(v61, *(_QWORD *)(a1 + 88));
  }
}

uint64_t sub_22EB4EAB0(uint64_t a1)
{
  uint64_t v1;

  v1 = 0;
  switch(*(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576))
  {
    case 0:
    case 1:
    case 3:
      return v1;
    case 2:
    case 7:
      LODWORD(v1) = 2;
      goto LABEL_4;
    case 4:
    case 5:
    case 6:
      LODWORD(v1) = 3;
      goto LABEL_4;
    default:
LABEL_4:
      if (sub_22EFC7ADC(*(_QWORD *)(a1 + 216)))
        return 1;
      else
        return v1;
  }
}

uint64_t sub_22EB4EB24(uint64_t a1, int a2, _QWORD *a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25[25];
  int v26;
  unint64_t v27[12];
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v7 = a1;
  v31 = a1;
  if (!sub_22EFBC498(a1, a3[11])
    && (sub_22EFB948C(v7) < 3
     || (*(_DWORD *)(v7 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(v7 + 97) & 0x20) != 0
     || sub_22E900DC0((uint64_t)a3, v7)))
  {
    if ((*(_DWORD *)(v7 + 28) & 0x7F) == 0x40)
      goto LABEL_36;
    v8 = *(_QWORD *)(v7 + 16);
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 4) != 0)
      v9 = *(_QWORD *)v9;
    if ((*(_WORD *)(v9 + 8) & 0x7Eu) - 34 > 3 || *(_QWORD *)(v7 + 88) <= 7uLL)
    {
LABEL_36:
      v27[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      v22 = (_DWORD *)sub_22F330A70((uint64_t)(a3 + 1064), v27);
      if (!*v22)
        *v22 = a2;
    }
  }
  v29 = 0;
  v30 = 0;
  if (*(_DWORD *)(a3[9] + 72))
    sub_22EC85EE0((unint64_t)a3, v7);
  sub_22EB4EE10((uint64_t)a3, v7, a2, 0, 0, 1, &v30, &v29, a4);
  if ((*(_BYTE *)(a3[9] + 68) & 0x20) != 0 && !sub_22E3CB5E0(v7))
  {
    v10 = a3[27];
    if (v10)
    {
      v11 = (*(_WORD *)(v10 + 8) & 0x7E) - 52;
      v12 = v10 - 72;
      if (v11 >= 6)
        v13 = 0;
      else
        v13 = v12;
    }
    else
    {
      v13 = 0;
    }
    v14 = sub_22E9FE18C((uint64_t)a3, v7);
    v15 = sub_22E9FDFC4((uint64_t)a3, v13, 0);
    v28 = v15;
    if (v14)
    {
      if (v14 == 1 && v15 <= 3 && v15 != 2 && (*(_WORD *)(a3[9] + 96) & 0x80) != 0)
      {
        sub_22F308EA4(a3, a2, 0x121Eu, 0, (uint64_t)v27);
        LODWORD(v24) = 2;
        v16 = sub_22E8900C4((uint64_t)v27, (int *)&v24);
        v26 = 1;
        v17 = sub_22E8900C4(v16, &v26);
        v18 = sub_22E890024(v17, &v31);
        sub_22E8900C4(v18, (int *)&v28);
        sub_22E903BEC((unsigned int *)v27);
        v19 = *(_QWORD *)(v31 + 48);
        v20 = 5509;
        if ((v19 & 1) == 0)
        {
          if ((*(_BYTE *)((v19 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
            v20 = 5509;
          else
            v20 = 5513;
        }
        sub_22F308EA4(a3, *(_DWORD *)(v31 + 24), v20, 0, (uint64_t)v25);
        sub_22E903BEC(v25);
      }
    }
    else if ((v15 & 0xFFFFFFFE) == 2)
    {
      if ((*(_BYTE *)(v7 + 96) & 5) == 1)
      {
        if ((*(_WORD *)(a3[9] + 96) & 0x800) != 0)
        {
          v23 = a3[11] + 18624;
          v24 = v7;
          sub_22F275184(v23, &v24, (uint64_t)v27);
        }
      }
      else
      {
        sub_22F294508(a3[11] + 18600, &v31, (uint64_t)v27);
      }
    }
    v7 = v31;
  }
  return sub_22EFC9100(v7, a3[11]);
}

uint64_t sub_22EB4EE10(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t *a7, uint64_t *a8, int *a9)
{
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  BOOL v29;
  int v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t (**v42)();
  uint64_t *v43;
  __int16 v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  _BOOL4 v57;
  BOOL v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  BOOL v71;
  unsigned int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  unsigned int v84;
  unsigned int *v86;
  int v87;
  BOOL v88;
  _BOOL4 v89;
  char v90;
  int v91;
  uint64_t v93;
  int v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  BOOL v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  _BOOL4 v128;
  uint64_t v129;
  char v130;
  int v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t *v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t *v153;
  uint64_t v154;
  _BYTE *v155;
  char v156;
  char v157;
  char v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  BOOL v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int v174[24];
  unsigned int v175[24];
  uint64_t v176;
  uint64_t v177[12];
  uint64_t v178[12];
  uint64_t v179;
  uint64_t (**v180)();
  int v181;
  uint64_t *v182;

  v176 = a2;
  v14 = *(_QWORD *)(a2 + 16);
  v15 = v14 & 0xFFFFFFFFFFFFFFF8;
  if ((v14 & 4) != 0)
    v15 = *(_QWORD *)v15;
  if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x40 && (*(_BYTE *)(a2 + 98) & 1) != 0)
  {
    v16 = *(_WORD *)(v15 + 8) & 0x7F;
    v17 = -40;
    if (v16 > 0x46)
    {
      if (v16 != 83)
      {
        if (v16 == 71)
        {
          v17 = -56;
        }
        else if (v16 != 81)
        {
          goto LABEL_16;
        }
      }
    }
    else
    {
      if (v16 <= 0x18)
      {
        if (v16 == 16)
        {
LABEL_8:
          v17 = -48;
          goto LABEL_21;
        }
        if (((1 << v16) & 0x1066) != 0)
          goto LABEL_21;
        if (v16 == 24)
          goto LABEL_8;
      }
      if (v16 != 70)
      {
LABEL_16:
        if (v16 - 52 < 6)
        {
          v17 = -72;
        }
        else
        {
          v17 = -48;
          if (v16 - 33 < 5)
            v17 = -64;
        }
        goto LABEL_21;
      }
      v17 = -64;
    }
LABEL_21:
    v18 = *(_QWORD *)(v15 + v17 + 16);
    v15 = v18 & 0xFFFFFFFFFFFFFFF8;
    if ((v18 & 4) != 0)
      v15 = *(_QWORD *)v15;
  }
  v19 = *(_QWORD *)(a1 + 216);
  if (a9)
  {
    v20 = *a9;
    v21 = *(_DWORD *)(a1 + 1904) - 1;
    if (v21 != *a9)
    {
      do
      {
        v19 = sub_22F31DCF8(v19);
        --v21;
      }
      while (v20 != v21);
    }
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 1904) - 1;
  }
  if (v15 == v19)
    return 1;
  LODWORD(v22) = a3;
  v168 = a5;
  v23 = sub_22E3CB5E0(a2);
  if (v23)
    goto LABEL_32;
  if (!*(_DWORD *)(*(_QWORD *)(a1 + 72) + 72))
    return 1;
  v24 = 1;
  if (sub_22EC7ECC4(a1, a2, 1, v20))
  {
LABEL_32:
    v176 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v25 = *(_QWORD *)(v176 + 48);
    *a7 = v25;
    v26 = *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF0);
    if (!v26 || (v27 = *(_DWORD *)(v26 + 16), (v27 & 0xFE) != 0x28))
    {
      v28 = a7;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28
        || (v26 = sub_22F10CF48(v26), v28 = a7, !v26))
      {
LABEL_35:
        v29 = a4 != 0;
        v30 = v20 - 1;
        *a8 = *v28;
        v31 = v20;
        while (1)
        {
          v32 = *(_WORD *)(v19 + 8);
          v33 = v32 & 0x7F;
          if ((v33 - 1) < 2)
            goto LABEL_61;
          if ((v32 & 0x7Eu) - 54 > 3)
            goto LABEL_145;
          v34 = -40;
          if (v33 > 70)
          {
            if (v33 == 83)
              goto LABEL_55;
            if (v33 == 71)
            {
              v34 = -56;
              goto LABEL_55;
            }
            if (v33 != 81)
              goto LABEL_49;
          }
          else
          {
            if (v33 > 0x18)
              goto LABEL_48;
            if (v33 == 16)
              goto LABEL_41;
            if (((1 << v33) & 0x1066) == 0)
            {
              if (v33 == 24)
              {
LABEL_41:
                v34 = -48;
                goto LABEL_55;
              }
LABEL_48:
              if (v33 == 70)
              {
                v34 = -64;
                goto LABEL_55;
              }
LABEL_49:
              v35 = v33 - 52;
              if ((v33 - 33) >= 5)
                v36 = -48;
              else
                v36 = -64;
              if (v35 >= 6)
                v34 = v36;
              else
                v34 = -72;
            }
          }
LABEL_55:
          v37 = *(_QWORD *)(v19 + v34 + 16);
          v38 = (_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF8);
          if ((v37 & 4) != 0)
          {
            v38 = (_QWORD *)*v38;
            if (!v38)
              goto LABEL_145;
          }
          else if (!v38)
          {
            goto LABEL_145;
          }
          v39 = v38[8];
          if (!v39
            || ((*(unsigned __int16 *)(v39 + 8) | (*(unsigned __int8 *)(v39 + 10) << 16)) & 0x100000) == 0
            || (*(_QWORD *)(v19 - 32) & 7) != 6
            || *(_DWORD *)(*(_QWORD *)(v19 - 32) & 0xFFFFFFFFFFFFFFF8) != 42)
          {
LABEL_145:
            v22 = v22;
            v71 = !sub_22E3CB5E0(v176) || a6 == 0;
            if (!v71)
              sub_22EB251F0((unsigned int *)a1, v22, v176);
            if (v23)
              return 1;
LABEL_154:
            v170 = v22;
            v149 = 0;
            v73 = v20;
            goto LABEL_155;
          }
LABEL_61:
          v167 = v29;
          v169 = v31;
          v40 = sub_22F31DCF8(v19);
          if (!v40)
          {
            v22 = v22;
            if (v23)
              return 1;
            goto LABEL_154;
          }
          v41 = v30;
          v42 = (uint64_t (**)())v176;
          v165 = v40;
          v166 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v169);
          v43 = (uint64_t *)(v166 + 1232);
          v180 = (uint64_t (**)())v176;
          v178[0] = 0;
          if (sub_22F246C54((uint64_t *)(v166 + 1232), &v180, v178))
          {
            v180 = (uint64_t (**)())v176;
            v150 = *(_QWORD *)(*(_QWORD *)(v166 + 1264)
                             + 32 * (*((_DWORD *)sub_22F283EC0(v43, &v180) + 2) - 1)
                             + 16);
            *a7 = v150;
            v151 = *(_QWORD *)(v150 & 0xFFFFFFFFFFFFFFF0);
            if (v151 && (v152 = *(_DWORD *)(v151 + 16), (v152 & 0xFE) == 0x28))
            {
LABEL_412:
              if ((v152 & 0x100000) != 0)
              {
                do
                {
                  v151 = *(_QWORD *)(*(_QWORD *)(v151 + 32) & 0xFFFFFFFFFFFFFFF0);
                  if (v151)
                  {
                    v163 = *(_DWORD *)(v151 + 16);
                    if ((v163 & 0xFE) == 0x28)
                      continue;
                  }
                  v151 = sub_22F10CF48(v151);
                  v163 = *(_DWORD *)(v151 + 16);
                }
                while ((v163 & 0x100000) != 0);
              }
              v153 = (uint64_t *)(v151 + 32);
            }
            else
            {
              v153 = a7;
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v151 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
              {
                v151 = sub_22F10CF48(v151);
                v153 = a7;
                if (v151)
                {
                  v152 = *(_DWORD *)(v151 + 16);
                  goto LABEL_412;
                }
              }
            }
            *a8 = *v153;
            v180 = v42;
            if ((*(_BYTE *)(*(_QWORD *)(v166 + 1264)
                           + 32 * (*((_DWORD *)sub_22F283EC0(v43, &v180) + 2) - 1)
                           + 24) & 3) == 0)
            {
              if ((*(_DWORD *)(v166 + 8) & 7) == 3)
              {
                if (*(_WORD *)(v166 + 1456) != 2)
                  goto LABEL_382;
              }
              else if ((*(_DWORD *)(v166 + 8) & 7) != 2 || !*(_BYTE *)(v166 + 1512))
              {
LABEL_382:
                *a8 |= 1uLL;
              }
            }
            v180 = (uint64_t (**)())v176;
            v154 = *(_QWORD *)(v166 + 1264) + 32 * (*((_DWORD *)sub_22F283EC0(v43, &v180) + 2) - 1);
            v157 = *(_BYTE *)(v154 + 24);
            v155 = (_BYTE *)(v154 + 24);
            v156 = v157;
            if (a6)
              v158 = v156 | 0x10;
            else
              v158 = v156 | 0x20;
            *v155 = v158;
            v149 = 1;
LABEL_396:
            v31 = v169;
LABEL_372:
            if (v31 == v20)
              return 0;
            v170 = v22;
            v73 = v31 + 1;
LABEL_155:
            LOBYTE(v24) = 0;
            while (2)
            {
              v74 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v73);
              if ((v24 & 1) != 0)
              {
                v75 = 1;
LABEL_198:
                v91 = v75 ^ 1;
                if (((v75 ^ 1) & 1) == 0 && !a6)
                  return 1;
                if ((*(_DWORD *)(v74 + 8) & 7) == 1 && v74 != 0)
                {
                  v179 = v176;
                  if ((v75 & 1) != 0)
                    goto LABEL_220;
                  if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x40000000) != 0
                    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) & 0xFEu)
                     - 2 > 3)
                  {
                    v106 = *(_QWORD *)((*a7 & 0xFFFFFFFFFFFFFFF0) + 8);
                    if ((v106 & 8) == 0 || (*(_QWORD *)((v106 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) != 0x100)
                    {
                      v101 = 0;
                      goto LABEL_235;
                    }
                    if (a6)
                    {
                      sub_22E8FCA40((_QWORD *)a1, v170, 0xA5Au, 0, (uint64_t)&v180);
                      LODWORD(v178[0]) = 0;
                      sub_22E8900C4((uint64_t)&v180, (int *)v178);
                      sub_22E903BEC((unsigned int *)&v180);
                      sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v179 + 24), 0x1771u, 0, (uint64_t)&v180);
                      sub_22E890024((uint64_t)&v180, &v179);
                      v105 = (unsigned int *)&v180;
                      goto LABEL_233;
                    }
                  }
                  else if (a6)
                  {
                    sub_22E8FCA40((_QWORD *)a1, v170, 0x121Du, 0, (uint64_t)&v180);
                    sub_22E903BEC((unsigned int *)&v180);
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v179 + 24), 0x1771u, 0, (uint64_t)v178);
                    sub_22E890024((uint64_t)v178, &v179);
                    v105 = (unsigned int *)v178;
LABEL_233:
                    sub_22E903BEC(v105);
LABEL_220:
                    v101 = 1;
LABEL_235:
                    v107 = *(_QWORD *)(*a7 & 0xFFFFFFFFFFFFFFF0);
                    if (!v107 || *(_BYTE *)(v107 + 16) != 39)
                    {
                      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v107 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
                        goto LABEL_307;
                      v107 = sub_22F10CF48(v107);
                      if (!v107)
                        goto LABEL_307;
                    }
                    if ((v101 & 1) != 0)
                      goto LABEL_307;
                    v108 = *(_QWORD *)(v107 + 32);
                    v109 = *(_QWORD *)(v108 & 0xFFFFFFFFFFFFFFF0);
                    if ((!v109 || *(_BYTE *)(v109 + 16) != 32)
                      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v109 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 32
                       || !sub_22F10CF48(v109)))
                    {
                      goto LABEL_307;
                    }
                    v110 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFFFF0) + 8);
                    if ((v110 & 8) == 0 || (*(_QWORD *)((v110 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) != 0x100)
                      goto LABEL_307;
                    while (1)
                    {
                      v111 = *(_QWORD *)(v108 & 0xFFFFFFFFFFFFFFF0);
                      v112 = *(_DWORD *)(v111 + 16);
                      if (v111)
                        v113 = v112 == 7;
                      else
                        v113 = 0;
                      if (v113)
                      {
                        if (*(_DWORD *)(v111 + 16) >> 19 == 60)
                          goto LABEL_307;
                      }
                      else if (!v111 || v112 != 37)
                      {
                        if (a6)
                        {
                          v127 = *(_DWORD *)(v179 + 24);
                          sub_22E8FCA40((_QWORD *)a1, v170, 0x18ABu, 0, (uint64_t)v178);
                          sub_22E903BEC((unsigned int *)v178);
                          sub_22E8FCA40((_QWORD *)a1, v127, 0x158Eu, 0, (uint64_t)v177);
                          sub_22E903BEC((unsigned int *)v177);
                        }
LABEL_307:
                        v128 = sub_22E49C868(v179);
                        if (v128
                          || (v129 = *(_QWORD *)(*a7 & 0xFFFFFFFFFFFFFFF0),
                              (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v129 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28))
                        {
LABEL_311:
                          v130 = 1;
                          if (a6)
                            goto LABEL_319;
                        }
                        else
                        {
                          if (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 72))
                          {
                            if (sub_22EC7ECC4(a1, v179, 0, 0))
                              goto LABEL_311;
                            v129 = *(_QWORD *)(*a7 & 0xFFFFFFFFFFFFFFF0);
                          }
                          if (v129 && (v131 = *(_DWORD *)(v129 + 16), (v131 & 0xFE) == 0x28))
                          {
LABEL_351:
                            if ((v131 & 0x100000) != 0)
                            {
                              do
                              {
                                v129 = *(_QWORD *)(*(_QWORD *)(v129 + 32) & 0xFFFFFFFFFFFFFFF0);
                                if (v129)
                                {
                                  v144 = *(_DWORD *)(v129 + 16);
                                  if ((v144 & 0xFE) == 0x28)
                                    continue;
                                }
                                v129 = sub_22F10CF48(v129);
                                v144 = *(_DWORD *)(v129 + 16);
                              }
                              while ((v144 & 0x100000) != 0);
                            }
                            v133 = (uint64_t *)(v129 + 32);
                            v132 = a7;
                          }
                          else
                          {
                            v132 = a7;
                            v133 = a7;
                            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v129 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
                            {
                              v129 = sub_22F10CF48(v129);
                              v133 = a7;
                              if (v129)
                              {
                                v131 = *(_DWORD *)(v129 + 16);
                                goto LABEL_351;
                              }
                            }
                          }
                          v130 = 0;
                          v134 = *v133 | 1;
                          *v132 = v134;
                          *a8 = v134;
                          if (a6)
LABEL_319:
                            sub_22F330B28(v74, v179, v128, v130, v149 != 0, v170, 0, *a7, v101);
                        }
                        v91 = v101 ^ 1;
                        if ((v91 & 1) != 0)
                          goto LABEL_337;
LABEL_336:
                        if (a6)
                          goto LABEL_337;
                        return 1;
                      }
                      v108 = *(_QWORD *)(v111 + 32);
                    }
                  }
LABEL_335:
                  v91 = 0;
                  goto LABEL_336;
                }
                v93 = v176;
                if ((*(_DWORD *)(v74 + 8) & 7) != 3 || v74 == 0)
                {
                  if (!a4 || (v95 = a4, v73 != v20))
                    v95 = *(_DWORD *)(v74 + 1224);
                  if (v95 == 2)
                  {
                    v96 = sub_22EF5F8C4(*(_QWORD *)(a1 + 88), *a8, 1);
                    *a7 = v96;
                    v97 = *(_QWORD *)(v96 & 0xFFFFFFFFFFFFFFF0);
                    if (v97 && (v98 = *(_DWORD *)(v97 + 16), (v98 & 0xFE) == 0x28))
                    {
LABEL_343:
                      if ((v98 & 0x100000) != 0)
                      {
                        do
                        {
                          v97 = *(_QWORD *)(*(_QWORD *)(v97 + 32) & 0xFFFFFFFFFFFFFFF0);
                          if (v97)
                          {
                            v142 = *(_DWORD *)(v97 + 16);
                            if ((v142 & 0xFE) == 0x28)
                              continue;
                          }
                          v97 = sub_22F10CF48(v97);
                          v142 = *(_DWORD *)(v97 + 16);
                        }
                        while ((v142 & 0x100000) != 0);
                      }
                      v99 = (uint64_t *)(v97 + 32);
                    }
                    else
                    {
                      v99 = a7;
                      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v97 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
                      {
                        v97 = sub_22F10CF48(v97);
                        v99 = a7;
                        if (v97)
                        {
                          v98 = *(_DWORD *)(v97 + 16);
                          goto LABEL_343;
                        }
                      }
                    }
                    v100 = *v99;
LABEL_218:
                    *a8 = v100;
                    goto LABEL_331;
                  }
                  v116 = v176;
                  v117 = *(_QWORD *)(*a7 & 0xFFFFFFFFFFFFFFF0);
                  if (v117 && (v118 = *(_DWORD *)(v117 + 16), (v118 & 0xFE) == 0x28))
                  {
LABEL_265:
                    v120 = v117;
                    if ((v118 & 0x100000) != 0)
                    {
                      v120 = v117;
                      do
                      {
                        while (1)
                        {
                          v120 = *(_QWORD *)(*(_QWORD *)(v120 + 32) & 0xFFFFFFFFFFFFFFF0);
                          if (!v120)
                            break;
                          v121 = *(_DWORD *)(v120 + 16);
                          if ((v121 & 0xFE) != 0x28)
                            break;
                          if ((v121 & 0x100000) == 0)
                            goto LABEL_272;
                        }
                        v120 = sub_22F10CF48(v120);
                      }
                      while ((*(_DWORD *)(v120 + 16) & 0x100000) != 0);
                    }
LABEL_272:
                    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v120 + 32) & 0xFFFFFFFFFFFFFFF0)
                                                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                                                          + 16)
                       - 25 >= 2)
                    {
                      if ((*(_BYTE *)(v117 + 18) & 0x10) != 0)
                      {
                        do
                        {
                          while (1)
                          {
                            v117 = *(_QWORD *)(*(_QWORD *)(v117 + 32) & 0xFFFFFFFFFFFFFFF0);
                            if (!v117)
                              break;
                            v122 = *(_DWORD *)(v117 + 16);
                            if ((v122 & 0xFE) != 0x28)
                              break;
                            if ((v122 & 0x100000) == 0)
                              goto LABEL_279;
                          }
                          v117 = sub_22F10CF48(v117);
                        }
                        while ((*(_DWORD *)(v117 + 16) & 0x100000) != 0);
                      }
LABEL_279:
                      *a7 = *(_QWORD *)(v117 + 32);
                    }
                  }
                  else if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v117 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
                  {
                    v119 = sub_22F10CF48(v117);
                    if (v119)
                    {
                      v117 = v119;
                      v118 = *(_DWORD *)(v119 + 16);
                      goto LABEL_265;
                    }
                  }
                  if ((v75 & 1) != 0)
                  {
                    v75 = 1;
                    v93 = v116;
                  }
                  else
                  {
                    v123 = *a7;
                    v124 = *(_QWORD *)((*a7 & 0xFFFFFFFFFFFFFFF0) + 8);
                    v93 = v116;
                    if ((v124 & 8) == 0 || (*(_QWORD *)((v124 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) != 0x100)
                    {
                      if (!a6)
                      {
                        v75 = 0;
                        goto LABEL_322;
                      }
                      if ((*(_DWORD *)(*(_QWORD *)(*a7 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x400) == 0)
                      {
                        v178[0] = *(_QWORD *)(v116 + 40);
                        v181 = 3013;
                        v182 = v178;
                        v180 = off_24FAB83C8;
                        if ((sub_22EE8B0B0(a1, v170, v123) & 1) != 0)
                        {
                          v75 = 1;
                          goto LABEL_322;
                        }
                        v123 = *a7;
                      }
                      v180 = (uint64_t (**)())&unk_24FAB6EF8;
                      v181 = 3012;
                      v75 = sub_22EAB2EB4(a1, v170, v123, (void (***)(_QWORD, uint64_t, _QWORD, uint64_t))&v180);
                      goto LABEL_322;
                    }
                    if (!a6)
                      goto LABEL_335;
                    sub_22E8FCA40((_QWORD *)a1, v170, 0xA5Au, 0, (uint64_t)&v180);
                    v75 = 1;
                    LODWORD(v178[0]) = 1;
                    sub_22E8900C4((uint64_t)&v180, (int *)v178);
                    sub_22E903BEC((unsigned int *)&v180);
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v116 + 24), 0x1771u, 0, (uint64_t)&v180);
                    v178[0] = *(_QWORD *)(v116 + 40);
                    sub_22E894538((uint64_t)&v180, v178);
                    sub_22E903BEC((unsigned int *)&v180);
                  }
LABEL_322:
                  v135 = *a7;
                  v136 = *(_QWORD *)((*a7 & 0xFFFFFFFFFFFFFFF0) + 8);
                  if ((v136 & 8) != 0 && (*(_BYTE *)((v136 & 0xFFFFFFFFFFFFFFF0) + 0x19) & 6) != 0)
                  {
                    if (!a6)
                      goto LABEL_335;
                    sub_22E8FCA40((_QWORD *)a1, v170, 0xEF9u, 0, (uint64_t)&v180);
                    sub_22E903BEC((unsigned int *)&v180);
                    v135 = *a7;
                    v75 = 1;
                  }
                  v137 = sub_22EF5DEB0(*(_QWORD *)(a1 + 88), v135);
                  *a7 = v137;
                  v138 = *(_QWORD *)(v137 & 0xFFFFFFFFFFFFFFF0);
                  if (v138 && (v139 = *(_DWORD *)(v138 + 16), (v139 & 0xFE) == 0x28))
                  {
LABEL_347:
                    if ((v139 & 0x100000) != 0)
                    {
                      do
                      {
                        v138 = *(_QWORD *)(*(_QWORD *)(v138 + 32) & 0xFFFFFFFFFFFFFFF0);
                        if (!v138 || (v143 = *(_DWORD *)(v138 + 16), (v143 & 0xFE) != 0x28))
                        {
                          v138 = sub_22F10CF48(v138);
                          v143 = *(_DWORD *)(v138 + 16);
                        }
                        v93 = v116;
                      }
                      while ((v143 & 0x100000) != 0);
                    }
                    v140 = (uint64_t *)(v138 + 32);
                  }
                  else
                  {
                    v140 = a7;
                    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v138 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
                    {
                      v138 = sub_22F10CF48(v138);
                      v140 = a7;
                      if (v138)
                      {
                        v139 = *(_DWORD *)(v138 + 16);
                        goto LABEL_347;
                      }
                    }
                  }
                  v141 = *v140;
                  *a8 = v141;
                  if (!*(_BYTE *)(v74 + 1512)
                    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a7 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                  + 16) & 0xFE) != 0x28)
                  {
                    v100 = v141 | 1;
                    goto LABEL_218;
                  }
LABEL_331:
                  if (a6)
                    sub_22F330B28(v74, v93, 0, v95 == 2, v149 != 0, v170, v168, *a7, v75);
                  v91 = v75 ^ 1;
                  if (((v75 ^ 1) & 1) != 0)
                    goto LABEL_337;
                  goto LABEL_336;
                }
                if (a4 && v73 == v20)
                {
                  if (a4 != 2)
                    goto LABEL_224;
LABEL_299:
                  v102 = v93;
                  v103 = 1;
                  v104 = sub_22EF5F8C4(*(_QWORD *)(a1 + 88), *a8, 1);
                }
                else
                {
                  if (!*(_DWORD *)(*(_QWORD *)(a1 + 72) + 72) || *(_WORD *)(v74 + 1456) != 2)
                    goto LABEL_299;
                  v114 = v176;
                  if (sub_22EC7ECC4(a1, v176, 0, 0))
                  {
                    if ((*a8 & 1) != 0)
                      v115 = 1;
                    else
                      v115 = *(_BYTE *)((*a8 & 0xFFFFFFFFFFFFFFF0) + 8) & 1;
                    v125 = *(_QWORD *)(*a8 & 0xFFFFFFFFFFFFFFF0);
                    if ((*(_BYTE *)(v125 + 8) & 0xF) != 0)
                      v125 = (unint64_t)sub_22F10D2BC(*a8);
                    v126 = v125 & 0xFFFFFFFFFFFFFFF0;
                    *a8 = v126;
                    if (v115)
                      *a8 = v126 | 1;
                  }
                  v93 = v114;
                  if (sub_22EC805D4(a1, v114, *(unsigned __int16 *)(v74 + 1458), *(unsigned __int16 *)(v74 + 1460)) != 85)
                  {
                    v91 = 1;
                    goto LABEL_337;
                  }
                  if (sub_22EC7DEC0((_QWORD *)a1, v114, *(unsigned __int16 *)(v74 + 1458), *(unsigned __int16 *)(v74 + 1460)))goto LABEL_299;
LABEL_224:
                  v102 = v93;
                  v103 = 0;
                  v104 = *a8;
                }
                *a7 = v104;
                if (a6)
                {
                  sub_22F330B28(v74, v102, 0, v103, v149 != 0, v170, 0, v104, v75);
                  goto LABEL_337;
                }
                if ((v91 & 1) == 0)
                  goto LABEL_336;
LABEL_337:
                v24 = v91 ^ 1u;
                v149 = 1;
                v71 = v73++ == v20;
                if (v71)
                  return v24;
                continue;
              }
              break;
            }
            v76 = v176;
            v177[0] = v176;
            v77 = *(_DWORD *)(v74 + 8) & 7;
            if (v77 != 2 || *(_QWORD *)(v176 + 40))
            {
              v78 = *(_QWORD *)(*(_QWORD *)(v176 + 48) & 0xFFFFFFFFFFFFFFF0);
              if (v77 == 1 && (*(_DWORD *)(v78 + 16) & 0x800) != 0)
              {
                if (a6)
                {
                  v82 = (_QWORD *)a1;
                  v83 = v170;
                  v84 = 4646;
                  goto LABEL_176;
                }
LABEL_196:
                v89 = 0;
LABEL_197:
                v75 = !v89;
                goto LABEL_198;
              }
              v80 = *(_QWORD *)(*(_QWORD *)(v78 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v80 && *(_BYTE *)(v80 + 16) == 45)
              {
                if ((*(_BYTE *)(sub_22F114198(*(_QWORD *)(v80 + 24)) + 74) & 0x80) == 0)
                {
                  v76 = v177[0];
                  goto LABEL_169;
                }
                if (!a6)
                  goto LABEL_196;
                v82 = (_QWORD *)a1;
                if (v77 == 1)
                {
                  v83 = v170;
                  v84 = 4640;
LABEL_176:
                  sub_22E8FCA40(v82, v83, v84, 0, (uint64_t)&v180);
                }
                else
                {
                  sub_22E8FCA40((_QWORD *)a1, v170, 0xE80u, 0, (uint64_t)&v180);
                  sub_22E890024((uint64_t)&v180, v177);
                }
                sub_22E903BEC((unsigned int *)&v180);
                sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v177[0] + 24), 0x1771u, 0, (uint64_t)v178);
                sub_22E890024((uint64_t)v178, v177);
LABEL_186:
                v86 = (unsigned int *)v178;
              }
              else
              {
LABEL_169:
                if (sub_22E49C868(v76) && (v77 == 2 || (*(_DWORD *)(v74 + 8) & 7) == 3))
                {
                  if (!a6)
                    goto LABEL_196;
                  sub_22E8FCA40((_QWORD *)a1, v170, 0xBBFu, 0, (uint64_t)&v180);
                  v81 = sub_22E890024((uint64_t)&v180, v177);
                  LOBYTE(v178[0]) = v77 != 2;
                  sub_22E894E38(v81, (unsigned __int8 *)v178);
                  sub_22E903BEC((unsigned int *)&v180);
                  sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v177[0] + 24), 0x1771u, 0, (uint64_t)&v180);
                  sub_22E890024((uint64_t)&v180, v177);
                }
                else
                {
                  if (v77 != 1 || (*(_DWORD *)(*(_QWORD *)(a1 + 72) + 52) & 0x40000000) == 0)
                  {
                    v89 = 1;
                    goto LABEL_197;
                  }
                  v87 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v177[0] + 48) & 0xFFFFFFFFFFFFFFF0)
                                                                   + 8) & 0xFFFFFFFFFFFFFFF0)
                                           + 16);
                  v88 = v87 == 10;
                  v89 = v87 != 10;
                  v90 = a6 ^ 1;
                  if (!v88)
                    v90 = 1;
                  if ((v90 & 1) != 0)
                    goto LABEL_197;
                  sub_22E8FCA40((_QWORD *)a1, v170, 0x111Du, 0, (uint64_t)&v180);
                }
                v86 = (unsigned int *)&v180;
              }
              sub_22E903BEC(v86);
              goto LABEL_196;
            }
            if (!a6)
              goto LABEL_196;
            sub_22E8FCA40((_QWORD *)a1, v170, 0xE7Eu, 0, (uint64_t)&v180);
            sub_22E903BEC((unsigned int *)&v180);
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v177[0] + 24), 0x64u, 0, (uint64_t)v178);
            goto LABEL_186;
          }
          v44 = *(_WORD *)(v19 + 8);
          v45 = v41;
          if ((v44 & 0x7Eu) - 58 < 0xFFFFFFFC)
            goto LABEL_86;
          v46 = v44 & 0x7F;
          v47 = -40;
          if (v46 <= 70)
          {
            if (v46 <= 0x18)
            {
              if (v46 == 16)
                goto LABEL_67;
              if (((1 << v46) & 0x1066) != 0)
                goto LABEL_81;
              if (v46 == 24)
                goto LABEL_67;
            }
            if (v46 == 70)
              goto LABEL_79;
LABEL_77:
            if ((v46 - 52) >= 6)
            {
              if ((v46 - 33) >= 5)
              {
LABEL_67:
                v47 = -48;
                goto LABEL_81;
              }
LABEL_79:
              v47 = -64;
              goto LABEL_81;
            }
            v47 = -72;
            goto LABEL_81;
          }
          if (v46 == 83)
            goto LABEL_81;
          if (v46 == 71)
          {
            v47 = -56;
            goto LABEL_81;
          }
          if (v46 != 81)
            goto LABEL_77;
LABEL_81:
          v48 = *(_QWORD *)(v19 + v47 + 16);
          v49 = (_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF8);
          if ((v48 & 4) != 0)
            v49 = (_QWORD *)*v49;
          if (!v49)
            goto LABEL_86;
          v50 = v49[8];
          if (!v50
            || ((*(unsigned __int16 *)(v50 + 8) | (*(unsigned __int8 *)(v50 + 10) << 16)) & 0x100000) == 0
            || (*(_BYTE *)(v50 + 104) & 4) == 0)
          {
            goto LABEL_86;
          }
          v66 = -40;
          if (v46 <= 70)
          {
            if (v46 <= 0x18)
            {
              if (v46 == 16)
                goto LABEL_120;
              if (((1 << v46) & 0x1066) != 0)
                goto LABEL_133;
              if (v46 == 24)
                goto LABEL_120;
            }
            if (v46 == 70)
              goto LABEL_131;
LABEL_129:
            if ((v46 - 52) >= 6)
            {
              if ((v46 - 33) >= 5)
              {
LABEL_120:
                v66 = -48;
                goto LABEL_133;
              }
LABEL_131:
              v66 = -64;
              goto LABEL_133;
            }
            v66 = -72;
            goto LABEL_133;
          }
          if (v46 == 83)
            goto LABEL_133;
          if (v46 == 71)
          {
            v66 = -56;
            goto LABEL_133;
          }
          if (v46 != 81)
            goto LABEL_129;
LABEL_133:
          v67 = *(_QWORD *)(v19 + v66 + 16);
          v68 = (_QWORD *)(v67 & 0xFFFFFFFFFFFFFFF8);
          if ((v67 & 4) != 0)
            v68 = (_QWORD *)*v68;
          v45 = v41;
          if (v68)
          {
            v69 = v68[8];
            if (v69)
            {
              if (((*(unsigned __int16 *)(v69 + 8) | (*(unsigned __int8 *)(v69 + 10) << 16)) & 0x100000) != 0
                && (*(_QWORD *)(v19 - 32) & 7) == 6
                && *(_DWORD *)(*(_QWORD *)(v19 - 32) & 0xFFFFFFFFFFFFFFF8) == 42
                && (*(_QWORD *)(v19 + 72) & 6) == 4)
              {
                v70 = *(_QWORD *)(v19 + 72) & 0xFFFFFFFFFFFFFFF8;
                if (v70)
                {
                  if (*(_QWORD *)(v70 + 16) >= 8uLL)
                  {
                    if (!a6)
                      return 1;
                    if (*(_DWORD *)(v166 + 1224))
                    {
                      sub_22EB251F0((unsigned int *)a1, v22, v176);
                      return 1;
                    }
                    sub_22E8FCA40((_QWORD *)a1, v22, 0xE82u, 0, (uint64_t)&v180);
                    sub_22E890024((uint64_t)&v180, &v176);
                    sub_22E903BEC((unsigned int *)&v180);
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v176 + 24), 0x1771u, 0, (uint64_t)&v180);
                    sub_22E890024((uint64_t)&v180, &v176);
                    sub_22E903BEC((unsigned int *)&v180);
                    sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(*(_QWORD *)(v166 + 1480) + 56), 0x163Eu, 0, (uint64_t)v175);
                    sub_22E903BEC(v175);
                    v146 = v176;
                    v147 = (_QWORD *)a1;
                    v148 = v166;
                    goto LABEL_371;
                  }
                }
              }
            }
          }
LABEL_86:
          v51 = *(_QWORD *)(v176 + 48);
          v52 = v166;
          if ((*(_BYTE *)(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
          {
            if ((*(_DWORD *)(v176 + 28) & 0x7F) == 0x40)
              v51 = sub_22EFBF144(v176);
            sub_22EB28D0C(*(_OWORD **)(a1 + 88), v51, v166);
          }
          if (!*(_DWORD *)(*(_QWORD *)(a1 + 72) + 72)
            || !v166
            || (*(_DWORD *)(v166 + 8) & 7) != 3
            || *(_WORD *)(v166 + 1456) != 2)
          {
            goto LABEL_105;
          }
          v53 = sub_22EC805D4(a1, v176, *(unsigned __int16 *)(v166 + 1458), *(unsigned __int16 *)(v166 + 1460));
          v54 = v176;
          if (v53 == 85)
            goto LABEL_99;
          v55 = v53;
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v176 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
          {
            v164 = *(_QWORD *)(v176 + 48);
            if ((*(_DWORD *)(v176 + 28) & 0x7F) == 0x40)
              v164 = sub_22EFBF144(v176);
            v62 = sub_22F33BDCC(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 12288) + 336)
                                                      + 5272 * *(unsigned int *)(*(_QWORD *)(a1 + 12288) + 344)
                                                      - 5272)
                                          + 1312 * *(unsigned __int16 *)(v166 + 1458)
                                          + 960));
            v63 = v164;
            if (v62 >= 2)
            {
              v64 = v62 - 1;
              v65 = v45;
              do
              {
                sub_22EB28D0C(*(_OWORD **)(a1 + 88), v63, *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v65));
                v63 = v164;
                --v65;
                --v64;
              }
              while (v64);
            }
          }
          if (v55 != 63)
          {
            v54 = v176;
            v52 = v166;
LABEL_99:
            v57 = sub_22EC810B0(a1, v54, *(unsigned __int16 *)(v52 + 1458), *(unsigned __int16 *)(v52 + 1460));
            v56 = 1;
            goto LABEL_100;
          }
          v56 = 0;
          v57 = 0;
LABEL_100:
          v58 = v23 || sub_22EC8123C(a1, v176, *(unsigned __int16 *)(v166 + 1458), *(unsigned __int16 *)(v166 + 1460));
          if (v57)
          {
            v169 -= sub_22F33BDCC(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 12288) + 336)
                                                        + 5272 * *(unsigned int *)(*(_QWORD *)(a1 + 12288) + 344)
                                                        - 5272)
                                            + 1312 * *(unsigned __int16 *)(v166 + 1458)
                                            + 960));
LABEL_390:
            if ((*a8 & 1) != 0)
              v159 = 1;
            else
              v159 = *(_QWORD *)((*a8 & 0xFFFFFFFFFFFFFFF0) + 8) & 1;
            v149 = !v57;
            v160 = *(_QWORD *)(*a8 & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v160 + 8) & 0xF) != 0)
              v160 = (unint64_t)sub_22F10D2BC(*a8);
            v161 = v160 & 0xFFFFFFFFFFFFFFF0 | v159;
            *a8 = v161;
            *a7 = sub_22EF5F8C4(*(_QWORD *)(a1 + 88), v161, 1);
            goto LABEL_396;
          }
          v59 = v56 & v58;
          v52 = v166;
          if ((v59 & 1) == 0)
            goto LABEL_390;
LABEL_105:
          if (!v167 && *(_DWORD *)(v52 + 1224) == 0)
          {
            if (!a6)
              return 1;
            sub_22E8FCA40((_QWORD *)a1, v22, 0xE82u, 0, (uint64_t)&v180);
            sub_22E890024((uint64_t)&v180, &v176);
            sub_22E903BEC((unsigned int *)&v180);
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v176 + 24), 0x1771u, 0, (uint64_t)&v180);
            sub_22E890024((uint64_t)&v180, &v176);
            sub_22E903BEC((unsigned int *)&v180);
            v145 = *(_QWORD *)(v52 + 1480);
            if (!v145)
              return 1;
            sub_22E8FCA40((_QWORD *)a1, *(_DWORD *)(v145 + 56), 0x163Eu, 0, (uint64_t)v174);
            sub_22E903BEC(v174);
            v146 = v176;
            v147 = (_QWORD *)a1;
            v148 = v52;
LABEL_371:
            sub_22EB50668(v147, v148, v146);
            return 1;
          }
          v31 = v169 - 1;
          v60 = sub_22EFCC008(v15);
          v19 = v165;
          v61 = sub_22EFCC008(v165);
          v29 = 0;
          v30 = v45 - 1;
          if (v60 == v61)
          {
            v149 = 0;
            goto LABEL_372;
          }
        }
      }
      v27 = *(_DWORD *)(v26 + 16);
    }
    if ((v27 & 0x100000) != 0)
    {
      do
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v26 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (v26)
        {
          v162 = *(_DWORD *)(v26 + 16);
          if ((v162 & 0xFE) == 0x28)
            continue;
        }
        v26 = sub_22F10CF48(v26);
        v162 = *(_DWORD *)(v26 + 16);
      }
      while ((v162 & 0x100000) != 0);
    }
    v28 = (uint64_t *)(v26 + 32);
    goto LABEL_35;
  }
  return v24;
}

void sub_22EB50668(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  BOOL v31;
  unint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  _DWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  _DWORD v54[6];
  void *__p;
  char v56;
  int v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  _QWORD *v65;
  __int128 v66;
  _QWORD v67[6];

  v67[4] = *MEMORY[0x24BDAC8D0];
  v58 = a3;
  v5 = *(const char **)(a3 + 48);
  v6 = *(_QWORD *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_DWORD *)(v6 + 16);
  if ((v7 & 0x400) != 0)
  {
    v9 = 1;
    goto LABEL_10;
  }
  v8 = a1[11];
  if ((*(_DWORD *)(v6 + 16) & 0xFE) != 0x28)
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_4;
    v6 = sub_22F10CF48(v6);
    if (!v6)
      goto LABEL_4;
    v7 = *(_DWORD *)(v6 + 16);
  }
  if ((v7 & 0x100000) != 0)
  {
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v6 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (v6)
      {
        v53 = *(_DWORD *)(v6 + 16);
        if ((v53 & 0xFE) == 0x28)
          continue;
      }
      v6 = sub_22F10CF48(v6);
      v53 = *(_DWORD *)(v6 + 16);
    }
    while ((v53 & 0x100000) != 0);
  }
  v5 = *(const char **)(v6 + 32);
LABEL_4:
  v59 = v5;
  if ((sub_22F111968((unint64_t *)&v59, v8) & 1) == 0)
  {
    v10 = sub_22F10C2A4(*(_QWORD *)((unint64_t)v59 & 0xFFFFFFFFFFFFFFF0));
    if (v10)
    {
      v46 = v10;
      if ((*(_DWORD *)(v10 + 28) & 0x7Fu) - 35 <= 2)
      {
        v47 = *(_QWORD *)(v10 + 128);
        if (v47
          || (sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v10 + 104) + 96), *(_QWORD *)(v10 + 104)),
              (v47 = *(_QWORD *)(v46 + 128)) != 0))
        {
          v48 = *(_QWORD *)(v47 + 88);
          if (v48)
          {
            if (sub_22EB87B38(*(_QWORD *)(v47 + 88)))
              goto LABEL_5;
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v48 + 104) + 96), *(_QWORD *)(v48 + 104));
            if ((**(_QWORD **)(v48 + 128) & 4) != 0)
            {
              v49 = sub_22F282248(v48);
              if (v49 != v50)
              {
                v51 = v49;
                v52 = v50;
                while ((sub_22EFD3AF0(v51, (int *)&v65) & 1) == 0)
                {
                  do
                    v51 = *(_QWORD *)(v51 + 8) & 0xFFFFFFFFFFFFFFF8;
                  while (v51 && (*(_DWORD *)(v51 + 28) & 0x7F) != 0x37);
                  v9 = 0;
                  if (v51 == v52)
                    goto LABEL_9;
                }
                v9 = (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v51 + 32))(v51) + 82) & 0x40) == 0;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    v9 = 0;
    goto LABEL_9;
  }
LABEL_5:
  v9 = 1;
LABEL_9:
  a3 = v58;
LABEL_10:
  v65 = v67;
  v66 = xmmword_22F44E330;
  v11 = *(_DWORD *)(a2 + 1508);
  v31 = v11 == 0;
  v12 = v11 != 0;
  if (v31)
    v13 = "";
  else
    v13 = ", ";
  v14 = 2 * v12;
  v15 = *(_QWORD *)(a3 + 40);
  if ((v15 & 7) == 0)
  {
    v32 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v33 = *(_DWORD **)(v32 + 16);
      if (*v33)
      {
        v34 = *(_DWORD *)(a2 + 1500);
        if (v9)
        {
          v59 = v13;
          v60 = v14;
          v35 = *v33;
          v61 = (const char *)(v33 + 4);
          v62 = v35;
          *(_QWORD *)&v66 = 0;
          sub_22EB87B90(&v65, (uint64_t)&v59, 2);
          sub_22E8FCA40(a1, v34, 0x1642u, 0, (uint64_t)&v59);
          v36 = sub_22E890024((uint64_t)&v59, &v58);
          v57 = 0;
          v37 = sub_22E8900C4(v36, &v57);
          sub_22E729148(v65, v66, v34, 0, (uint64_t)v54);
          sub_22E890748(v37, v54);
          if (v56 < 0)
            operator delete(__p);
          sub_22E903BEC((unsigned int *)&v59);
          v15 = *(_QWORD *)(v58 + 40);
          v32 = v15 & 0xFFFFFFFFFFFFFFF8;
        }
        v38 = 0;
        v59 = v13;
        v60 = v14;
        v61 = "&";
        v62 = 1;
        v39 = "";
        if (v32 && (v15 & 7) == 0)
        {
          v40 = *(_DWORD **)(v32 + 16);
          v41 = *v40;
          v39 = (const char *)(v40 + 4);
          v38 = v41;
        }
        v63 = v39;
        v64 = v38;
        *(_QWORD *)&v66 = 0;
        sub_22EB87B90(&v65, (uint64_t)&v59, 3);
        sub_22E8FCA40(a1, v34, 0x1642u, 0, (uint64_t)&v59);
        v42 = sub_22E890024((uint64_t)&v59, &v58);
        v57 = 1;
        v43 = sub_22E8900C4(v42, &v57);
        sub_22E729148(v65, v66, v34, 0, (uint64_t)v54);
        sub_22E890748(v43, v54);
        if (v56 < 0)
          operator delete(__p);
        sub_22E903BEC((unsigned int *)&v59);
      }
    }
  }
  v16 = *(_QWORD *)(a2 + 1264);
  v17 = *(unsigned int *)(a2 + 1272);
  if (!(_DWORD)v17)
  {
LABEL_21:
    v20 = *(_DWORD *)(a2 + 1496) + 1;
    if (v9)
    {
      v21 = *(_DWORD *)(a2 + 1256);
      if (!v21
        || (v22 = *(_QWORD *)a1[9], (v22 & 0x1000) != 0)
        || (v22 & 0x800) != 0 && (*(_BYTE *)(v16 + 32 * (v21 - 1) + 24) & 3) == 0)
      {
        v23 = v14;
        v24 = v13;
        v25 = a1;
        if ((_DWORD)v17)
        {
          v26 = 0;
          v27 = 32 * v17;
          v28 = v16 + 32 * v17;
          while (1)
          {
            v29 = *(_BYTE *)(v16 + v26 + 24);
            if ((v29 & 8) == 0)
            {
              v30 = sub_22F308578((uint64_t *)(v16 + v26));
              v31 = (v29 & 3) == 0 && v30 == 0;
              if (v31)
                break;
            }
            v26 += 32;
            if (v27 == v26)
              goto LABEL_49;
          }
          a1 = v25;
          v13 = v24;
          v14 = v23;
LABEL_54:
          while ((sub_22F308578((uint64_t *)v16) & 1) != 0 || (*(_BYTE *)(v16 + 24) & 0xB) != 1)
          {
            v16 += 32;
            if (v16 == v28)
              goto LABEL_57;
          }
          goto LABEL_60;
        }
LABEL_49:
        v59 = "=";
        v60 = 1;
        v61 = v24;
        v62 = v23;
        *(_QWORD *)&v66 = 0;
        sub_22EB87B90(&v65, (uint64_t)&v59, 2);
        a1 = v25;
        sub_22E8FCA40(v25, v20, 0x163Fu, 0, (uint64_t)&v59);
        v57 = 0;
        v44 = sub_22E8900C4((uint64_t)&v59, &v57);
        sub_22E729148(v65, v66, v20, 0, (uint64_t)v54);
        sub_22E890748(v44, v54);
        if (v56 < 0)
          operator delete(__p);
        sub_22E903BEC((unsigned int *)&v59);
        v16 = *(_QWORD *)(a2 + 1264);
        v17 = *(unsigned int *)(a2 + 1272);
        v13 = v24;
        v14 = v23;
      }
    }
    if ((_DWORD)v17)
    {
      v28 = v16 + 32 * v17;
      goto LABEL_54;
    }
LABEL_57:
    v59 = "&";
    v60 = 1;
    v61 = v13;
    v62 = v14;
    *(_QWORD *)&v66 = 0;
    sub_22EB87B90(&v65, (uint64_t)&v59, 2);
    sub_22E8FCA40(a1, v20, 0x163Fu, 0, (uint64_t)&v59);
    v57 = 1;
    v45 = sub_22E8900C4((uint64_t)&v59, &v57);
    sub_22E729148(v65, v66, v20, 0, (uint64_t)v54);
    sub_22E890748(v45, v54);
    if (v56 < 0)
      operator delete(__p);
    sub_22E903BEC((unsigned int *)&v59);
    goto LABEL_60;
  }
  v18 = 32 * v17;
  v19 = *(_QWORD *)(a2 + 1264);
  while ((*(_BYTE *)(v19 + 24) & 8) != 0 || sub_22F308578((uint64_t *)v19))
  {
    v19 += 32;
    v18 -= 32;
    if (!v18)
      goto LABEL_21;
  }
LABEL_60:
  if (v65 != v67)
    free(v65);
}

uint64_t sub_22EB50C80(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unsigned __int8 **v40;
  unint64_t v41;
  int *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  int v55;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  void *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void *v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  _DWORD *v112;
  _DWORD *v113;
  uint64_t *v114;
  _BOOL4 v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  int v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  unsigned int v127;
  int v128;
  uint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD v147[35];

  v4 = 0;
  v147[33] = *MEMORY[0x24BDAC8D0];
  v143 = a2;
  v5 = *(unsigned __int8 *)a2;
  if (v5 > 0xAB)
  {
    if (*(unsigned __int8 *)a2 > 0xBBu)
    {
      if (v5 != 188)
      {
        if (v5 == 214)
        {
          v66 = sub_22EB50C80(a1, *((_QWORD *)a2 + 3));
          v4 = v66;
          if (v66 >= 2)
            return sub_22EB27A20(a1, a2[4], a2[5], v66 & 0xFFFFFFFFFFFFFFFELL);
          return v4;
        }
        if (v5 == 233)
        {
          if ((*a2 & 0x7C0000) == 0x300000)
          {
            v29 = sub_22EB50C80(a1, *((_QWORD *)a2 + 2));
            v4 = v29;
            if (v29 >= 2)
              return sub_22EB2941C(a1, 0, a2[1], 12, v29 & 0xFFFFFFFFFFFFFFFELL);
            return v4;
          }
          return 0;
        }
        return v4;
      }
      v62 = *((_QWORD *)a2 + 3);
      if ((*(_DWORD *)(v62 + 28) & 0x7Fu) - 49 > 2)
      {
        if (sub_22EFBAEF8(v62) || (*((_BYTE *)a2 + 2) & 0xC0) != 0)
          return 0;
        v4 = 0;
        v67 = *((_QWORD *)a2 + 3);
        if (!v67 || (*(_DWORD *)(v67 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
          return v4;
        v68 = *(_QWORD *)(*(_QWORD *)(v67 + 48) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v68 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
          return 0;
        v69 = sub_22F10C2A4(v68);
        if (v69)
        {
          v70 = v69;
          if ((*(_DWORD *)(v69 + 28) & 0x7Fu) - 35 <= 2)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v69 + 104) + 96), *(_QWORD *)(v69 + 104));
            if ((**(_QWORD **)(v70 + 128) & 0x80000) != 0)
              return 0;
          }
        }
        if (!sub_22EFBCBC4(v67, *(_QWORD *)(a1 + 88)))
          return 0;
        sub_22EB87CB4(a1 + 1776, &v143);
        v71 = sub_22E904A34(a1, 0);
        if (v71)
          sub_22E3BA850(v71 + 1640, a2);
        v72 = *a2;
        if ((v72 & 0x80000) != 0)
        {
          v73 = *((_QWORD *)a2 + 7);
          v132 = *((_QWORD *)a2 + 6);
        }
        else
        {
          v132 = 0;
          v73 = 0;
        }
        v121 = *(_QWORD *)(a1 + 88);
        v122 = *((_QWORD *)a2 + 2);
        v123 = a2[1];
        if ((v72 & 0x100000) != 0)
          v124 = a2[6 * ((v72 >> 19) & 1) + 14];
        else
          v124 = 0;
        v125 = *((_QWORD *)a2 + 3);
        if ((v72 & 0x80000) != 0)
          v126 = *((_QWORD *)a2 + 8);
        else
          v126 = ((unint64_t)*(unsigned int *)(v125 + 28) >> 13) & 3 | v125;
        v127 = (v72 >> 18) & 1;
        v128 = a2[10];
        v129 = *((_QWORD *)a2 + 4);
        v134 = *(_QWORD *)(v125 + 40);
        v135 = v128;
        v136 = v129;
        sub_22EB87C38((uint64_t)&v144, a2);
        if ((_BYTE)v144)
          v130 = &v145;
        else
          v130 = 0;
        v104 = sub_22EFFAF50(v121, v122, v127, v123, v132, v73, v124, v125, v126, (uint64_t)&v134, (uint64_t)v130, *((_QWORD *)a2 + 1), BYTE1(*a2) & 3, ((*a2 >> 8) & 3u) >> 16, (*a2 >> 10) & 7, ((*a2 >> 10) & 7u) >> 16, 2);
      }
      else
      {
        v63 = sub_22EB50C80(a1, *((_QWORD *)a2 + 2));
        v4 = v63;
        if (v63 < 2)
          return v4;
        v64 = *a2;
        if ((v64 & 0x80000) != 0)
        {
          v65 = *((_QWORD *)a2 + 7);
          v131 = *((_QWORD *)a2 + 6);
        }
        else
        {
          v131 = 0;
          v65 = 0;
        }
        v85 = *(_QWORD *)(a1 + 88);
        v86 = v63 & 0xFFFFFFFFFFFFFFFELL;
        v87 = a2[1];
        if ((v64 & 0x100000) != 0)
          v88 = a2[6 * ((v64 >> 19) & 1) + 14];
        else
          v88 = 0;
        v95 = *((_QWORD *)a2 + 3);
        if ((v64 & 0x80000) != 0)
          v96 = *((_QWORD *)a2 + 8);
        else
          v96 = ((unint64_t)*(unsigned int *)(v95 + 28) >> 13) & 3 | v95;
        v100 = (v64 >> 18) & 1;
        v101 = a2[10];
        v102 = *((_QWORD *)a2 + 4);
        v137 = *(_QWORD *)(v95 + 40);
        v138 = v101;
        v139 = v102;
        sub_22EB87C38((uint64_t)&v144, a2);
        if ((_BYTE)v144)
          v103 = &v145;
        else
          v103 = 0;
        v104 = sub_22EFFAF50(v85, v86, v100, v87, v131, v65, v88, v95, v96, (uint64_t)&v137, (uint64_t)v103, *((_QWORD *)a2 + 1), BYTE1(*a2) & 3, ((*a2 >> 8) & 3u) >> 16, (*a2 >> 10) & 7, ((*a2 >> 10) & 7u) >> 16, (*a2 >> 22) & 3);
      }
      v4 = v104;
      v77 = (void *)v145;
      if ((_QWORD *)v145 == v147)
        return v4;
      goto LABEL_126;
    }
    if (v5 == 172)
    {
      v41 = sub_22EB50C80(a1, *((_QWORD *)a2 + 2));
      v4 = v41;
      if (v41 >= 2)
      {
        v42 = (int *)(v41 & 0xFFFFFFFFFFFFFFFELL);
        v4 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
        v43 = (_QWORD *)sub_22EFF6504(v4, 172, v42);
        *v43 &= 0xFFFFFFFC0003FFFFLL;
      }
      return v4;
    }
    if (v5 == 174)
    {
      v44 = a2[7];
      if ((_DWORD)v44)
      {
        v45 = (uint64_t *)(a2 + 8);
        v46 = 8 * v44;
        while (1)
        {
          v47 = *v45;
          if (!*v45 || (*(_DWORD *)(*v45 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
            break;
          v49 = *(_QWORD *)(*(_QWORD *)(v47 + 48) & 0xFFFFFFFFFFFFFFF0);
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
            break;
          v50 = sub_22F10C2A4(v49);
          if (v50)
          {
            v51 = v50;
            if ((*(_DWORD *)(v50 + 28) & 0x7Fu) - 35 <= 2)
            {
              sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v50 + 104) + 96), *(_QWORD *)(v50 + 104));
              if ((**(_QWORD **)(v51 + 128) & 0x80000) != 0)
                break;
            }
          }
          if (!sub_22EFBCBC4(v47, *(_QWORD *)(a1 + 88)))
            break;
          ++v45;
          v46 -= 8;
          if (!v46)
            goto LABEL_80;
        }
      }
      else
      {
LABEL_80:
        sub_22EB87CB4(a1 + 1776, &v143);
        v52 = sub_22E904A34(a1, 0);
        if (v52)
          sub_22E3BA850(v52 + 1640, a2);
      }
      return 0;
    }
    if (v5 != 176)
      return v4;
    v144 = &v146;
    v145 = 0x400000000;
    v10 = a2[4];
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = a2 + 10;
      v13 = (uint64_t)&a2[2 * v10 + 10];
      v4 = 1;
      while (1)
      {
        v14 = *v12;
        v15 = sub_22EB50C80(a1, *v12);
        v17 = v15;
        if ((v15 & 1) != 0)
          break;
        if (v15 >= 2)
        {
          v20 = v145;
          if (v145 >= (unint64_t)HIDWORD(v145))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = v145;
          }
          *((_QWORD *)v144 + v20) = v17 & 0xFFFFFFFFFFFFFFFELL;
          v19 = v145 + 1;
          LODWORD(v145) = v145 + 1;
          ++v12;
          v11 = 1;
          if (v12 == (_QWORD *)v13)
            goto LABEL_122;
        }
        else
        {
          v18 = v145;
          if (v145 >= (unint64_t)HIDWORD(v145))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v145;
          }
          *((_QWORD *)v144 + v18) = v14;
          v19 = v145 + 1;
          LODWORD(v145) = v145 + 1;
          if (++v12 == (_QWORD *)v13)
          {
            if ((v11 & 1) == 0)
              goto LABEL_124;
LABEL_122:
            v76 = (_DWORD *)*((_QWORD *)a2 + 4);
            v75 = a2 + 8;
            v59 = sub_22EB204CC(a1, *(v75 - 7), *(v75 - 2), *(v75 - 1), v76, &v75[2 * (*(v75 - 4) + 1)], *(v75 - 4), v16, (uint64_t *)v144, v19);
            goto LABEL_123;
          }
        }
      }
    }
    else
    {
LABEL_124:
      v4 = 0;
    }
LABEL_125:
    v77 = v144;
    if (v144 == &v146)
      return v4;
    goto LABEL_126;
  }
  if (*(unsigned __int8 *)a2 > 0x98u)
  {
    if (v5 != 153)
    {
      if (v5 == 155)
      {
        v60 = sub_22EB50C80(a1, *((_QWORD *)a2 + 3));
        if ((v60 & 1) == 0)
        {
          v61 = sub_22EB50C80(a1, *((_QWORD *)a2 + 3));
          if ((v61 & 1) == 0)
          {
            if ((v61 | v60) < 2)
              return 0;
            if (v60 <= 1)
              v60 = *((_QWORD *)a2 + 3);
            if (v61 <= 1)
              v61 = *((_QWORD *)a2 + 4);
            return sub_22EB4A774(a1, a2[10], *((_DWORD **)a2 + 2), v60 & 0xFFFFFFFFFFFFFFFELL, v61 & 0xFFFFFFFFFFFFFFFELL, a2[11]);
          }
        }
        return 1;
      }
      if (v5 != 161)
        return v4;
      if ((*((_WORD *)a2 + 1) & 0x180) != 0)
        return 0;
      v4 = 0;
      v21 = *((_QWORD *)a2 + 2);
      if (!v21 || (*(_DWORD *)(v21 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
        return v4;
      v22 = *(_QWORD *)(*(_QWORD *)(v21 + 48) & 0xFFFFFFFFFFFFFFF0);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
        return 0;
      v23 = sub_22F10C2A4(v22);
      if (v23)
      {
        v24 = v23;
        if ((*(_DWORD *)(v23 + 28) & 0x7Fu) - 35 <= 2)
        {
          sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v23 + 104) + 96), *(_QWORD *)(v23 + 104));
          if ((**(_QWORD **)(v24 + 128) & 0x80000) != 0)
            return 0;
        }
      }
      if (!sub_22EFBCBC4(v21, *(_QWORD *)(a1 + 88)))
        return 0;
      sub_22EB87CB4(a1 + 1776, &v143);
      v25 = sub_22E904A34(a1, 0);
      if (v25)
        sub_22E3BA850(v25 + 1640, a2);
      v26 = *a2;
      if ((v26 & 0x40000) != 0)
      {
        v27 = *((_QWORD *)a2 + 4);
        v28 = *((_QWORD *)a2 + 5);
      }
      else
      {
        v27 = 0;
        v28 = 0;
      }
      if ((v26 & 0x80000) != 0)
      {
        v106 = (v26 >> 18) & 1;
        v105 = a2[4 * v106 + 10 + 2 * ((v26 >> 20) & 1)];
      }
      else
      {
        v105 = 0;
        v106 = (v26 >> 18) & 1;
      }
      v107 = *(_QWORD *)(a1 + 88);
      v109 = *((_QWORD *)a2 + 1);
      v108 = *((_QWORD *)a2 + 2);
      v110 = a2[1];
      v111 = *((_QWORD *)a2 + 3);
      v140 = *(_QWORD *)(v108 + 40);
      v141 = v110;
      v142 = v111;
      v112 = &a2[4 * v106];
      v113 = v112 + 8;
      if ((v26 & 0x100000) != 0)
        v114 = (uint64_t *)(v112 + 8);
      else
        v114 = (uint64_t *)(a2 + 4);
      v115 = (v26 & 0x80000) != 0 && v113[2 * ((v26 >> 20) & 1)] != 0;
      v116 = *v114;
      LOBYTE(v144) = v115;
      v145 = (uint64_t)v147;
      v146 = 0x800000000;
      v147[32] = 0;
      if (v115)
      {
        v133 = v107;
        v117 = a2;
        v118 = v27;
        v119 = v105;
        sub_22EB5378C(v117, (uint64_t)&v145);
        v107 = v133;
        v105 = v119;
        v27 = v118;
        if ((_BYTE)v144)
          v120 = &v145;
        else
          v120 = 0;
      }
      else
      {
        v120 = 0;
      }
      v4 = sub_22EFF6DB8(v107, v27, v28, v105, v108, (v26 >> 22) & 1, (uint64_t)&v140, v109, BYTE1(v26) & 3, ((v26 >> 8) & 3) >> 16, v116, (uint64_t)v120, 2);
      v77 = (void *)v145;
      if ((_QWORD *)v145 == v147)
        return v4;
LABEL_126:
      free(v77);
      return v4;
    }
    v53 = (*a2 >> 18) & 0x7F;
    v54 = v53 > 8;
    v55 = (1 << v53) & 0x1A0;
    if (v54 || v55 == 0)
      return 0;
    v4 = sub_22EB50C80(a1, *((_QWORD *)a2 + 2));
    if (v4 < 2)
      return v4;
    v57 = (_BYTE *)sub_22EFFB554((unsigned __int8 *)a2);
    v58 = &v57[8 * a2[1]];
    v144 = &v146;
    v145 = 0x400000000;
    sub_22F2633B0((uint64_t)&v144, v57, v58);
    v59 = sub_22E90092C(a1, v4 & 0xFFFFFFFFFFFFFFFELL, *((_QWORD *)a2 + 1), (*a2 >> 18) & 0x7F, (*a2 >> 8) & 3, (uint64_t)&v144);
LABEL_123:
    v4 = v59;
    goto LABEL_125;
  }
  if (v5 != 103)
  {
    if (v5 != 107)
    {
      if (v5 == 112)
      {
        v6 = *((_QWORD *)a2 + 2);
        v7 = *((_QWORD *)a2 + 3);
        v8 = (*a2 >> 18) & 0x3F;
        if (v8 == 32)
        {
          v74 = sub_22EB50C80(a1, *((_QWORD *)a2 + 3));
          v4 = v74;
          if (v74 >= 2)
          {
            v7 = v74 & 0xFFFFFFFFFFFFFFFELL;
            return sub_22EB4785C(a1, 0, a2[1], (*a2 >> 18) & 0x3F, v6, v7);
          }
          return v4;
        }
        if (!v8)
        {
          v9 = sub_22EB50C80(a1, *((_QWORD *)a2 + 2));
          v4 = v9;
          if (v9 >= 2)
          {
            v6 = v9 & 0xFFFFFFFFFFFFFFFELL;
            return sub_22EB4785C(a1, 0, a2[1], (*a2 >> 18) & 0x3F, v6, v7);
          }
          return v4;
        }
        return 0;
      }
      return v4;
    }
    v33 = (unint64_t *)(a2 + 6);
    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v35 = *(_DWORD *)(v34 + 16);
    if (v34)
      v36 = v35 == 11;
    else
      v36 = 0;
    if (v36)
    {
      v39 = (unint64_t *)(a2 + 4);
      v40 = (unsigned __int8 **)(a2 + 6);
      if (((*(_DWORD *)(v34 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_129;
    }
    else if (v34 && v35 == 44)
    {
      v37 = sub_22F114198(*(_QWORD *)(v34 + 24));
      if ((*(_BYTE *)(v37 + 74) & 1) == 0 && *(_QWORD *)(v37 + 128) <= 7uLL)
      {
        v39 = (unint64_t *)(a2 + 4);
        v40 = (unsigned __int8 **)(a2 + 6);
        goto LABEL_129;
      }
      v38 = sub_22F114198(*(_QWORD *)(v34 + 24));
      v39 = (unint64_t *)(a2 + 4);
      v40 = (unsigned __int8 **)(a2 + 6);
      if ((*(_QWORD *)(v38 + 72) & 0x8000000000) != 0)
      {
LABEL_129:
        v78 = sub_22EFFED0C(*v40);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v78 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                        + 16) & 0xFEu)
           - 2 <= 3)
        {
          v4 = sub_22EB50C80(a1, v78);
          if (v4 < 2)
            return v4;
          v79 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
          v80 = *(_DWORD *)(v79 + 16);
          if (v79)
            v81 = v80 == 11;
          else
            v81 = 0;
          if (v81)
          {
            v83 = (unint64_t *)(a2 + 6);
            if (((*(_DWORD *)(v79 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
              goto LABEL_148;
          }
          else if (v79 && v80 == 44)
          {
            v82 = sub_22F114198(*(_QWORD *)(v79 + 24));
            if ((*(_BYTE *)(v82 + 74) & 1) == 0 && (v83 = (unint64_t *)(a2 + 6), *(_QWORD *)(v82 + 128) <= 7uLL)
              || (v84 = sub_22F114198(*(_QWORD *)(v79 + 24)),
                  v83 = (unint64_t *)(a2 + 6),
                  (*(_QWORD *)(v84 + 72) & 0x8000000000) != 0))
            {
LABEL_148:
              v89 = v4 & 0xFFFFFFFFFFFFFFFELL;
              if (*v83 == *v39)
                v90 = v4 & 0xFFFFFFFFFFFFFFFELL;
              else
                v90 = *v39;
              v144 = 0;
              v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
              v92 = *(_DWORD *)(v91 + 16);
              if (v91)
                v93 = v92 == 11;
              else
                v93 = 0;
              if (v93)
              {
                if (((*(_DWORD *)(v91 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
                {
LABEL_166:
                  v97 = *((_QWORD *)a2 + 2);
                  if (*v33 == *((_QWORD *)a2 + 3))
                    v98 = (void *)v89;
                  else
                    v98 = (void *)*((_QWORD *)a2 + 3);
                  v144 = v98;
                  sub_22F0D5A50(v97);
                  return sub_22EB296C0(a1, 0, v90, v99, &v144, 1, a2[1]);
                }
              }
              else if (v91 && v92 == 44)
              {
                v94 = sub_22F114198(*(_QWORD *)(v91 + 24));
                if ((*(_BYTE *)(v94 + 74) & 1) == 0 && *(_QWORD *)(v94 + 128) <= 7uLL
                  || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v91 + 24)) + 72) & 0x8000000000) != 0)
                {
                  goto LABEL_166;
                }
              }
              else if (v92 != 9)
              {
                goto LABEL_166;
              }
              v33 = v39;
              goto LABEL_166;
            }
          }
          else
          {
            v83 = (unint64_t *)(a2 + 6);
            if (v80 != 9)
              goto LABEL_148;
          }
          v83 = v39;
          goto LABEL_148;
        }
        return 0;
      }
    }
    else
    {
      v39 = (unint64_t *)(a2 + 4);
      v40 = (unsigned __int8 **)(a2 + 6);
      if (v35 != 9)
        goto LABEL_129;
    }
    v40 = (unsigned __int8 **)v39;
    goto LABEL_129;
  }
  v31 = sub_22EB50C80(a1, *((_QWORD *)a2 + 4));
  if ((v31 & 1) != 0)
    return 1;
  v32 = sub_22EB50C80(a1, *((_QWORD *)a2 + 5));
  if ((v32 & 1) != 0)
    return 1;
  if ((v32 | v31) < 2)
    return 0;
  if (v31 <= 1)
    v31 = *((_QWORD *)a2 + 4);
  if (v32 <= 1)
    v32 = *((_QWORD *)a2 + 5);
  return sub_22EB2F86C(a1, a2[4], a2[5], *((_QWORD *)a2 + 3), v31 & 0xFFFFFFFFFFFFFFFELL, v32 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB51A84(uint64_t a1, unint64_t a2)
{
  char v4;

  if ((a2 & 1) == 0)
    a2 = sub_22EBBCB14(a1, a2 & 0xFFFFFFFFFFFFFFFELL, 0, 0, sub_22F2E1334, &v4);
  if (a2 >= 2)
    return sub_22EB1B770(a1, a2 & 0xFFFFFFFFFFFFFFFELL);
  return a2;
}

void sub_22EB51AEC(unint64_t a1, unsigned int a2, unint64_t a3, unsigned __int8 *a4, _DWORD *a5)
{
  int v5;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned __int32 v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char v25;
  unsigned __int32 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  __n128 v49;
  unint64_t *v50;
  unsigned __int32 v51;
  unint64_t v52;
  _QWORD v53[2];
  unsigned __int32 v54;
  uint64_t vars0;

  v52 = a3;
  v5 = *(_DWORD *)(a3 + 28);
  *(_DWORD *)(a3 + 28) = v5 | 0x800;
  if ((v5 & 0x80) != 0)
    return;
  v11 = (_DWORD *)sub_22EFBE104(a3);
  v12 = v11;
  if (v11)
    v13 = ((*v11 >> 1) & 3) + 1;
  else
    v13 = sub_22EFBC2B0(a3);
  v14 = sub_22EB4EAB0(a1);
  v15 = sub_22EFBCA2C(a3, *(_QWORD *)(a1 + 88));
  if (((sub_22E3CEC2C(a3) & 1) != 0 || (*(_DWORD *)(a3 + 28) & 0x7F) == 0x40) && (*(_BYTE *)(a3 + 96) & 5) != 1)
  {
    v49.n128_u64[0] = a3;
    v49.n128_u32[2] = 0;
    v53[0] = 0;
    v16 = sub_22EA45010((uint64_t)a5, &v49, v53);
    v17 = v53[0];
    if (v16)
    {
      v18 = *(_DWORD *)(v53[0] + 8);
LABEL_15:
      *(_DWORD *)(v17 + 8) = v18 + 1;
      goto LABEL_16;
    }
    v19 = a5[2];
    v20 = a5[4];
    if (4 * v19 + 4 >= 3 * v20)
    {
      v20 *= 2;
    }
    else if (v20 + ~v19 - a5[3] > v20 >> 3)
    {
LABEL_12:
      ++a5[2];
      if (*(_QWORD *)v17 != -4096)
        --a5[3];
      *(_QWORD *)v17 = v49.n128_u64[0];
      v18 = v49.n128_u32[2];
      *(_DWORD *)(v17 + 8) = v49.n128_u32[2];
      goto LABEL_15;
    }
    sub_22EB87DEC((uint64_t)a5, v20);
    v53[0] = 0;
    sub_22EA45010((uint64_t)a5, &v49, v53);
    v17 = v53[0];
    goto LABEL_12;
  }
LABEL_16:
  v21 = v15;
  if (((1 << *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576)) & 0xF6) == 0)
    v21 = 0;
  if (v14 == 3)
    v22 = 1;
  else
    v22 = v21;
  if (v22 == 1 && v13 && (*(_DWORD *)(v52 + 28) & 0x7Fu) - 65 >= 2)
    sub_22ED65E9C(a1, a2, v52);
  if ((v13 & 0xFFFFFFFD) != 0)
    v23 = v22;
  else
    v23 = 0;
  if (v23 != 1)
    goto LABEL_53;
  v24 = v13 == 3 ? v15 : 0;
  if (v13 != 1 && !v24)
    goto LABEL_53;
  if (v12)
  {
    v51 = v12[2];
    if (!v51)
    {
      v51 = a2;
      v12[2] = a2;
      goto LABEL_49;
    }
  }
  else
  {
    v51 = sub_22EFBE4A0(v52);
    if (!v51)
    {
      v51 = a2;
      sub_22EFBEC04(v52, v13, a2);
LABEL_49:
      v25 = 1;
      if (!v15)
        goto LABEL_50;
      goto LABEL_39;
    }
  }
  v25 = 0;
  if (!v15)
  {
LABEL_50:
    if ((v25 & 1) != 0 || (*(_DWORD *)(v52 + 28) & 0x7Fu) - 65 <= 1)
    {
      v49.n128_u64[0] = v52;
      v49.n128_u32[2] = v51;
      sub_22EB87D64((_QWORD *)(a1 + 12160), &v49);
    }
    goto LABEL_53;
  }
LABEL_39:
  v49.n128_u64[0] = a1;
  v49.n128_u64[1] = (unint64_t)&v51;
  v50 = &v52;
  v54 = v51;
  v53[0] = a1;
  v53[1] = &v54;
  v27 = *(_QWORD *)off_255E04E38(&off_255E04E38, v51);
  if (!v27)
    goto LABEL_43;
  v28 = (uint64_t)&vars0 - v27;
  if (v28 < 0)
    v28 = -v28;
  if ((unint64_t)(v28 - 8126464) <= 0x40000)
  {
    sub_22F4247F4((uint64_t)sub_22E907F64, (uint64_t)v53, (uint64_t)sub_22EB87F58, (uint64_t)&v49);
    if (a4)
    {
LABEL_44:
      v29 = *a4;
      if (v29 == 161)
      {
        sub_22EFF6F50((uint64_t)a4, *((_QWORD *)a4 + 2));
      }
      else if (v29 == 188)
      {
        sub_22F3C1BDC((uint64_t)a4, *((_QWORD *)a4 + 3));
      }
    }
  }
  else
  {
LABEL_43:
    sub_22EE46380(a1, v26, v52, 0, 0, 0);
    if (a4)
      goto LABEL_44;
  }
LABEL_53:
  if (!a4)
    goto LABEL_59;
  v30 = *a4;
  if (v30 == 161)
  {
    if ((*(_DWORD *)a4 & 0x1800000) != 0)
      return;
    v30 = *(_DWORD *)a4;
  }
  if (v30 != 188 || (a4[2] & 0xC0) == 0)
  {
LABEL_59:
    if (v14 != 1)
    {
      if (v14 != 3)
        return;
      v31 = v52;
      if (a4)
      {
        if ((sub_22EFBCBC4(v52, *(_QWORD *)(a1 + 88)) & 1) != 0)
        {
          sub_22E3BA850(a1 + 1776, a4);
          if (v32)
          {
            v33 = *(_DWORD *)(a1 + 1848);
            if (v33 >= *(_DWORD *)(a1 + 1852))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v33 = *(_DWORD *)(a1 + 1848);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 1840) + 8 * v33) = a4;
            ++*(_DWORD *)(a1 + 1848);
          }
          return;
        }
        v31 = v52;
      }
      sub_22EB4EB24(v31, a2, a1, 0);
      return;
    }
    v34 = *(_QWORD *)(v52 + 16);
    v35 = v34 & 0xFFFFFFFFFFFFFFF8;
    if ((v34 & 4) != 0)
      v35 = *(_QWORD *)v35;
    if (*(_QWORD *)(a1 + 216) != v35)
    {
      v36 = *(_WORD *)(v35 + 8) & 0x7F;
      v37 = v36 > 0x18 || ((1 << v36) & 0x1000006) == 0;
      if ((!v37 || v36 - 52 <= 5) && sub_22E3CB5E0(v52))
      {
        v38 = sub_22E904A34(a1, 1);
        if (v38)
        {
          v39 = v38;
          v40 = *(_QWORD *)(v38 + 1488);
          if (!v40)
            goto LABEL_81;
          v41 = v40 + 72;
          v42 = *(_QWORD *)(v52 + 16);
          v43 = (_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF8);
          if ((v42 & 4) != 0)
            v43 = (_QWORD *)*v43;
          if ((sub_22EFCBE78(v41, (unint64_t)v43) & 1) == 0)
          {
LABEL_81:
            if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                            + 16) & 0xFE) != 0x28
              || (sub_22EFBCBC4(v52, *(_QWORD *)(a1 + 88)) & 1) == 0)
            {
              if (a4)
              {
                while (1)
                {
                  v44 = a4;
                  v45 = *a4;
                  if (v45 > 0xD5)
                  {
                    if (v45 == 233)
                    {
                      if ((*(_DWORD *)a4 & 0x7C0000) != 0x300000)
                        goto LABEL_105;
                      v47 = a4 + 16;
                    }
                    else
                    {
                      if (v45 != 214)
                        goto LABEL_105;
                      v47 = a4 + 24;
                    }
                  }
                  else if (v45 == 155)
                  {
                    if ((**((_DWORD **)a4 + 2) & 0x18000) != 0)
                      goto LABEL_105;
                    if (a4[48])
                      v47 = a4 + 24;
                    else
                      v47 = a4 + 32;
                  }
                  else
                  {
                    if (v45 != 176)
                      goto LABEL_105;
                    v46 = *((unsigned int *)a4 + 5);
                    if ((_DWORD)v46 == -1)
                      goto LABEL_105;
                    v47 = &a4[8 * v46 + 40];
                  }
                  a4 = *(unsigned __int8 **)v47;
                  if (*(unsigned __int8 **)v47 == v44)
                    goto LABEL_105;
                }
              }
              v44 = 0;
LABEL_105:
              v48 = *(_DWORD *)(v39 + 1600);
              if (v48 >= *(_DWORD *)(v39 + 1604))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v48 = *(_DWORD *)(v39 + 1600);
              }
              *(_QWORD *)(*(_QWORD *)(v39 + 1592) + 8 * v48) = v44;
              ++*(_DWORD *)(v39 + 1600);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_22EB520E4(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  _DWORD *v13;
  uint64_t v14;

  if (*(_DWORD *)(a1 + 12304))
    sub_22EC7FD5C(a1, (uint64_t)a4, a3, 0);
  if (a3 && (*(_DWORD *)(a3 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
    return sub_22EB51AEC(a1, a2, a3, a4, a6);
  result = sub_22EB24348(a1, a2, a3, a5);
  if (*a4 == 188)
  {
    v13 = (_DWORD *)*((_QWORD *)a4 + 3);
    if (v13)
    {
      if ((v13[7] & 0x7Eu) - 58 >= 0xFFFFFFFC)
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v13 + 32))(*((_QWORD *)a4 + 3));
        if ((*(_BYTE *)(result + 82) & 0xC) != 0 || (result = sub_22EFD7260(result), (_DWORD)result))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
          if ((v14 & 0x2000000000) != 0 || (a4[2] & 8) == 0 || !*((_QWORD *)a4 + 6))
          {
            result = sub_22EFD6C34((uint64_t)v13, *((unsigned __int8 **)a4 + 2), (v14 & 0x2000000000) != 0);
            if (result)
              return sub_22EB24348(a1, a2, result, a5);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_22EB52238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;

  v6 = (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) & 0x2000000000) == 0
    && (*(_BYTE *)(a2 + 2) & 8) != 0
    && *(_QWORD *)(a2 + 48)
    || ((v4 = *(_QWORD *)(a2 + 24)) != 0 ? (v5 = (*(_DWORD *)(v4 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFC) : (v5 = 0), !v5)
    || (*(_BYTE *)(v4 + 82) & 8) == 0;
  v7 = *(_DWORD *)(a2 + 40);
  if (!v7)
    sub_22EFFB27C(a2);
  return sub_22EB520E4(a1, v7, *(_QWORD *)(a2 + 24), (unsigned __int8 *)a2, v6, a1 + 8848);
}

uint64_t sub_22EB522D8(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _DWORD v46[2];
  uint64_t v47;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    result = 1;
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
      case 55:
      case 56:
        goto LABEL_5;
      case 2:
        result = sub_22EB522D8(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v14 = *(_QWORD *)(v4 + 56);
        if (!v14)
          return 1;
        goto LABEL_49;
      case 3:
        result = sub_22EB522D8(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 48);
        if (v14)
          goto LABEL_49;
        return 1;
      case 5:
        result = sub_22EB522D8(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(_QWORD *)(v4 + 40);
        return sub_22EBA5470(a1, v13, 0);
      case 13:
      case 48:
        v13 = *(_QWORD *)(v4 + 24);
        return sub_22EBA5470(a1, v13, 0);
      case 14:
        result = sub_22EB522D8(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v15 = *(_QWORD *)(v4 + 40);
        if (!v15)
          return 1;
        result = sub_22EBB0D90(a1, v15);
        if (!(_DWORD)result)
          return result;
        v16 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v16)
          return 1;
        v17 = v4 + 48;
        v18 = v16 - 1;
        do
        {
          result = sub_22EBB59CC(a1, v17);
          v19 = v18-- != 0;
          v20 = v19;
          if (!(_DWORD)result)
            break;
          v17 += 24;
        }
        while ((v20 & 1) != 0);
        return result;
      case 15:
        result = sub_22EBB5908(a1, *(_QWORD *)(v4 + 40));
        if ((_DWORD)result)
          goto LABEL_19;
        return result;
      case 16:
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_22;
      case 17:
        v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22EBA5470(a1, v13, 0);
      case 18:
        return sub_22EBB5968(a1, *(_QWORD *)(v4 + 32));
      case 19:
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_23;
LABEL_22:
        result = sub_22EBA5470(a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_23:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        result = sub_22EBB5968(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v21 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v21)
          return 1;
        v22 = v4 + 48;
        v23 = v21 - 1;
        do
        {
          result = sub_22EBB59CC(a1, v22);
          v19 = v23-- != 0;
          v24 = v19;
          if (!(_DWORD)result)
            break;
          v22 += 24;
        }
        while ((v24 & 1) != 0);
        return result;
      case 21:
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22EBA5470(a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_31;
      case 22:
        goto LABEL_34;
      case 23:
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_35;
      case 24:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22EBB5968(a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_31:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
LABEL_19:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 26:
        result = sub_22EB522D8(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v25 = *(_QWORD *)(v4 + 16);
        v26 = (unsigned __int16)(v25 >> 38);
        if (!(unsigned __int16)(v25 >> 38))
          goto LABEL_82;
        v27 = 8 * v26;
        v28 = (_QWORD *)(v4 + 40);
        break;
      case 30:
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22EBA5470(a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_34:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_35:
        result = sub_22EBA5470(a1, v9, 0);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v6 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v6;
        if (*v6 < 0x10)
          return 1;
        continue;
      case 31:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_40;
      case 33:
        v35 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22EB522D8(a1, v35);
          if (!(_DWORD)result)
            return result;
        }
        v36 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v36)
          return 1;
        v37 = (uint64_t *)(v4 + 48);
        v38 = 8 * v36 - 8;
        do
        {
          v39 = *v37++;
          result = sub_22EB522D8(a1, v39);
          if ((_DWORD)result)
            v40 = v38 == 0;
          else
            v40 = 1;
          v38 -= 8;
        }
        while (!v40);
        return result;
      case 40:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        v41 = *(_DWORD *)(v4 + 20);
        v47 = *(_QWORD *)(v4 + 40);
        v46[0] = 8;
        v46[1] = v41;
        return sub_22EBB59CC(a1, (uint64_t)v46);
      case 43:
        v6 = (unint64_t *)(v4 + 8);
        goto LABEL_6;
      case 46:
        result = sub_22EBB5908(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v42 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v42)
          return 1;
        v43 = v4 + 40;
        v44 = v42 - 1;
        do
        {
          result = sub_22EBB59CC(a1, v43);
          v19 = v44-- != 0;
          v45 = v19;
          if (!(_DWORD)result)
            break;
          v43 += 24;
        }
        while ((v45 & 1) != 0);
        return result;
      case 51:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_40:
        result = sub_22EB522D8(a1, v12);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22EB522D8(a1, *v28) & 1) == 0)
      return 0;
    ++v28;
    v27 -= 8;
  }
  while (v27);
  v25 = *(_QWORD *)(v4 + 16);
  v26 = (unsigned __int16)(v25 >> 38);
LABEL_82:
  if ((v25 & 0x3C0000000000000) == 0x80000000000000)
  {
    v29 = (_DWORD *)((v4 + 40 + 8 * v26 + 4 * ((v25 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v32 = *v29;
    v31 = v29 + 2;
    v30 = v32;
    if (v32)
    {
      v33 = 8 * v30;
      while ((sub_22EB522D8(a1, *v31) & 1) != 0)
      {
        ++v31;
        v33 -= 8;
        if (!v33)
          goto LABEL_87;
      }
      return 0;
    }
  }
LABEL_87:
  v34 = sub_22F257D3C(v4);
  if (!v34)
    return 1;
  v14 = v34;
LABEL_49:
  result = sub_22EBA5470(a1, v14, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EB5277C(uint64_t a1, int a2, _BYTE *a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18[24];
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;

  if (a4 && sub_22E903398(a1))
  {
    v10 = *(unsigned int *)(a1 + 1904);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + 8 * v10 - 8) + 432;
      sub_22E78D434((uint64_t)&v19, a5);
      v21 = a2;
      sub_22EB88854(&v22, a3, a4);
      sub_22EB528D8(v11, (unint64_t)&v19);
      sub_22E8BB820(&v22);
      if (v19)
      {
        if (v20)
          sub_22E3BB10C(v20, v19);
      }
    }
  }
  else
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 416);
    if (v12)
    {
      if ((*(_DWORD *)(v12 + 28) & 0x7F) != 0x40 && (*(_DWORD *)(v12 + 28) & 0x7Fu) - 67 >= 0xFFFFFFF9)
      {
        v15 = *(_DWORD *)(v12 + 96);
        if ((v15 & 0x8000) != 0)
          return 0;
        v16 = *(_QWORD *)(v12 + 16);
        v17 = v16 & 0xFFFFFFFFFFFFFFF8;
        if ((v16 & 4) != 0)
          v17 = *(_QWORD *)v17;
        if ((*(_WORD *)(v17 + 8) & 0x7Eu) - 34 <= 3 && (v15 & 0x2000) == 0 && (*(_QWORD *)(v12 + 72) & 3) != 0)
          return 0;
      }
    }
    sub_22E90379C((_QWORD *)a1, a2, (uint64_t)a5, 0, (uint64_t)v18);
    sub_22E903BEC(v18);
  }
  return 1;
}

__n128 sub_22EB528D8(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  uint64_t v4;
  __n128 result;

  v3 = (__n128 *)sub_22EBB7A2C(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = v3[1].n128_u32[0];
  result = *v3;
  *(__n128 *)v4 = *v3;
  v3->n128_u64[0] = 0;
  *(_DWORD *)(v4 + 24) = v3[1].n128_u32[2];
  *(_QWORD *)(v4 + 32) = v3[2].n128_u64[0];
  v3[2].n128_u64[0] = 0;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_22EB52944(uint64_t a1, int a2, _BYTE *a3, unint64_t a4, uint64_t *a5)
{
  int v5;
  BOOL v6;
  unsigned int v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576);
  v6 = v5 == 2 || v5 == 5;
  v7 = v5 & 0xFFFFFFFE;
  if (!v6 && v7 == 6)
    return sub_22EB5277C(a1, a2, a3, a4, a5);
  else
    return 0;
}

unsigned int *sub_22EB52984(unsigned int *result, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  int i;
  int v5;
  _BOOL4 v7;
  unsigned __int8 *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  void *__p;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41[24];

  v2 = a2;
  v3 = (uint64_t)result;
  for (i = *a2; ; i = *v2)
  {
    if ((i & 0xFE) == 0x70)
    {
      v5 = (*(_DWORD *)v2 >> 18) & 0x3F;
      if (v5 != 31 && v5 != 21)
        return result;
      v7 = (*(_DWORD *)v2 & 0xFC0000) == 8126464;
      v8 = sub_22EFFBBCC(*((unsigned __int8 **)v2 + 3));
      if (*v8 == 200)
      {
        v9 = (uint64_t)v8;
        v10 = v8 + 16;
        if ((v8[27] & 1) != 0)
          v10 = (_QWORD *)(*v10 + 40);
        v11 = *v10;
        if (sub_22EC2C5A0(v3, *((unsigned __int8 **)v2 + 2)) && sub_22F32FCE0(v9) == 3)
        {
          v13 = 6364;
          goto LABEL_21;
        }
        if ((v11 & 7) == 1 && (v11 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
          v13 = 6363;
          if (*(_DWORD *)v12 == 10)
          {
            if (*(_QWORD *)(v12 + 16) ^ 0x656A624F7478656ELL | *(unsigned __int16 *)(v12 + 24) ^ 0x7463)
              v13 = 6363;
            else
              v13 = 6364;
          }
          goto LABEL_21;
        }
      }
      v13 = 6363;
LABEL_21:
      v14 = (unsigned int *)(v2 + 4);
      goto LABEL_29;
    }
    if (i != 217)
      break;
    v2 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
  }
  if (i != 141)
    return result;
  v15 = HIDWORD(*(_QWORD *)v2) & 0x3FLL;
  if ((_DWORD)v15 != 15 && (_DWORD)v15 != 25)
    return result;
  v7 = (*(_QWORD *)v2 & 0x3F00000000) == 0x1900000000;
  v14 = (unsigned int *)(v2 + 20);
  v13 = 6363;
LABEL_29:
  v17 = *v14;
  sub_22E8FCA40((_QWORD *)v3, v17, v13, 0, (uint64_t)v41);
  sub_22F0D4E74((uint64_t)v2);
  v33 = v18;
  sub_22E8906A0((uint64_t)v41, (uint64_t *)&v33);
  sub_22E903BEC(v41);
  sub_22F0D5A50((uint64_t)v2);
  v20 = v19;
  sub_22F0D4E74((uint64_t)v2);
  v22 = sub_22F141A3C(HIDWORD(v21), 0, *(_QWORD **)(v3 + 112), *(_DWORD **)(v3 + 72));
  sub_22E8FCA40((_QWORD *)v3, v17, 0x1571u, 0, (uint64_t)v41);
  v36 = 0;
  v35 = 0;
  v38 = 0;
  v39 = 0x100000000000000;
  v33 = v20 | ((unint64_t)v20 << 32);
  v34 = 0;
  v37 = (void *)40;
  v40 = 0;
  v23 = sub_22E890748((uint64_t)v41, &v33);
  v28 = 0;
  v27 = 0;
  v30 = 0;
  v31 = 0x100000000000000;
  v25 = v22 | ((unint64_t)v22 << 32);
  v26 = 0;
  __p = (void *)41;
  v32 = 0;
  sub_22E890748(v23, &v25);
  if (SHIBYTE(v31) < 0)
    operator delete(__p);
  if (SHIBYTE(v39) < 0)
    operator delete(v37);
  sub_22E903BEC(v41);
  if (v7)
  {
    sub_22E8FCA40((_QWORD *)v3, v17, 0x1573u, 0, (uint64_t)v41);
    v36 = 0;
    v35 = 0;
    v38 = 0;
    v39 = 0;
    v37 = 0;
    v40 = 0;
    v33 = v17 | (v17 << 32);
    v34 = 1;
    v24 = 15649;
  }
  else
  {
    sub_22E8FCA40((_QWORD *)v3, v17, 0x1572u, 0, (uint64_t)v41);
    v36 = 0;
    v35 = 0;
    v38 = 0;
    v39 = 0;
    v37 = 0;
    v40 = 0;
    v33 = v17 | (v17 << 32);
    v34 = 1;
    v24 = 15677;
  }
  LOWORD(v37) = v24;
  HIBYTE(v39) = 2;
  sub_22E890748((uint64_t)v41, &v33);
  if (SHIBYTE(v39) < 0)
    operator delete(v37);
  return sub_22E903BEC(v41);
}

unsigned int *sub_22EB52CB8(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30[24];

  if (*(int *)(a2 + 16) >= 1 && (*(_BYTE *)(a2 + 1) & 0x80) == 0)
  {
    v3 = result;
    v4 = (unsigned __int8 *)a2;
    do
    {
      v5 = (uint64_t)v4;
      LODWORD(v6) = *v4;
      if (v6 > 0xD5)
      {
        if ((_DWORD)v6 == 233)
        {
          LOBYTE(v6) = *(_DWORD *)v4;
          if ((*(_DWORD *)v4 & 0x7C0000) != 0x300000)
            break;
          v7 = v4 + 16;
        }
        else
        {
          if ((_DWORD)v6 != 214)
            break;
          v7 = v4 + 24;
        }
      }
      else if ((_DWORD)v6 == 155)
      {
        if ((**((_DWORD **)v4 + 2) & 0x18000) != 0)
          return result;
        v7 = v4 + 24;
        if (!*(_BYTE *)(v5 + 48))
          v7 = (unsigned __int8 *)(v5 + 32);
        LOBYTE(v6) = -101;
      }
      else
      {
        if ((_DWORD)v6 != 176)
          break;
        v6 = *((unsigned int *)v4 + 5);
        if ((_DWORD)v6 == -1)
          return result;
        v7 = &v4[8 * v6 + 40];
        LOBYTE(v6) = -80;
      }
      v4 = *(unsigned __int8 **)v7;
    }
    while (v4 != (unsigned __int8 *)v5);
    if ((v6 & 0xFE) == 0x70 && (*(_DWORD *)v5 & 0xFC0000) == 0x380000)
    {
      v8 = sub_22EFFA6B0(*(unsigned __int8 **)(v5 + 16));
      result = (unsigned int *)sub_22F004C08((uint64_t)v8, *((_QWORD *)v3 + 11), 0);
      if (!(_DWORD)result)
      {
        v9 = *(unsigned int *)(v5 + 4);
        sub_22E8FCA40(v3, *(_DWORD *)(v5 + 4), 0x198Bu, 0, (uint64_t)v30);
        sub_22F0D4E74(v5);
        v22 = v10;
        sub_22E8906A0((uint64_t)v30, (uint64_t *)&v22);
        sub_22E903BEC(v30);
        sub_22F0D4E74(a2);
        v12 = v11;
        sub_22E8FCA40(v3, v9, 0x15CBu, 0, (uint64_t)v30);
        v25 = 0;
        v24 = 0;
        v27 = 0;
        v28 = 0;
        v26 = 0;
        v29 = 0;
        v22 = v12 | ((unint64_t)v12 << 32);
        v23 = 1;
        v13 = sub_22E890748((uint64_t)v30, &v22);
        v17 = 0;
        v16 = 0;
        v19 = 0;
        v20 = 0;
        __p = 0;
        v21 = 0;
        v14 = v12 & 0xFFFFFFFF00000000 | HIDWORD(v12);
        v15 = 1;
        sub_22E890748(v13, &v14);
        if (SHIBYTE(v20) < 0)
          operator delete(__p);
        if (SHIBYTE(v28) < 0)
          operator delete(v26);
        sub_22E903BEC(v30);
        sub_22E8FCA40(v3, v9, 0x15CCu, 0, (uint64_t)v30);
        v25 = 0;
        v24 = 0;
        v27 = 0;
        v28 = 0x100000000000000;
        v29 = 0;
        v22 = v9 | (v9 << 32);
        v23 = 1;
        v26 = (void *)61;
        sub_22E890748((uint64_t)v30, &v22);
        if (SHIBYTE(v28) < 0)
          operator delete(v26);
        return sub_22E903BEC(v30);
      }
    }
  }
  return result;
}

uint64_t sub_22EB52F30(uint64_t a1, int a2, unsigned __int8 *a3, int a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22[24];
  uint64_t v23;

  sub_22EB52984((unsigned int *)a1, a3);
  if (*a3 == 214)
    sub_22EB52CB8((unsigned int *)a1, (uint64_t)a3);
  v8 = sub_22EB19A28(a1);
  if ((v8 & 1) != 0)
    return 1;
  v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFELL);
  if ((*(_BYTE *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 1) & 0x80) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 1) & 1) != 0)
      return sub_22EBC4428(a1, (uint64_t)v9, a4);
    v10 = sub_22EB1B954(a1, v9);
    if ((v10 & 1) == 0)
    {
      v9 = (void *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v23 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v12 = *(_DWORD *)(v11 + 16);
      if (v11)
        v13 = v12 == 11;
      else
        v13 = 0;
      if (v13)
      {
        if (((v12 >> 19) & 0x1FF) - 166 < 0x35)
        {
LABEL_25:
          sub_22E98AF9C(a1, v9);
          return (uint64_t)v9;
        }
      }
      else if (v11 && v12 == 44)
      {
        v14 = sub_22F114198(*(_QWORD *)(v11 + 24));
        if ((*(_BYTE *)(v14 + 74) & 1) != 0 || *(_QWORD *)(v14 + 128) >= 8uLL)
          goto LABEL_25;
      }
      else
      {
        v18 = v12 > 0x27u;
        v19 = (1 << v12) & 0x8180001600;
        if (!v18 && v19 != 0)
          goto LABEL_25;
      }
      sub_22E8FCA40((_QWORD *)a1, a2, 0x1391u, 0, (uint64_t)v22);
      v16 = sub_22E8901B8((uint64_t)v22, &v23);
      sub_22F0D4E74((uint64_t)v9);
      v21 = v17;
      sub_22E8906A0(v16, &v21);
      sub_22E903BEC(v22);
    }
    return 1;
  }
  return (uint64_t)v9;
}

unint64_t sub_22EB530EC@<X0>(unint64_t result@<X0>, unsigned int a2@<W2>, uint64_t a3@<X3>, int a4@<W4>, int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    if (a5)
    {
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
      *(_DWORD *)(a6 + 15) = 0;
      return result;
    }
    goto LABEL_13;
  }
  v10 = result;
  if (a4)
  {
    if (a4 == 2)
    {
      result = sub_22ED2DFE0(result, a2, a3);
      goto LABEL_5;
    }
    if (a4 != 1)
    {
      result = 0;
      goto LABEL_6;
    }
    v11 = a2;
    v12 = (unsigned __int8 *)a3;
    v13 = 1;
  }
  else
  {
    v11 = a2;
    v12 = (unsigned __int8 *)a3;
    v13 = 0;
  }
  result = sub_22EB52F30(result, v11, v12, v13);
LABEL_5:
  if ((result & 1) != 0)
  {
    sub_22F0D5A50(a3);
    v15 = v14;
    sub_22F0D60E4(a3);
    v18[0] = a3;
    v17 = 16400;
    if (a4 == 2)
      v17 = 16480;
    result = sub_22F32D6EC(v10, v15, v16, v18, 1, *(_QWORD *)(*(_QWORD *)(v10 + 88) + v17));
    if (result <= 1)
    {
      *(_QWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
      *(_WORD *)(a6 + 16) = 1;
      goto LABEL_14;
    }
  }
LABEL_6:
  result = sub_22EBCF22C(v10, result & 0xFFFFFFFFFFFFFFFELL, a2, 0, 0);
  if ((result & 0xFFFFFFFFFFFFFFFELL) == 0)
  {
LABEL_13:
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_WORD *)(a6 + 16) = 1;
LABEL_14:
    *(_BYTE *)(a6 + 18) = 0;
    return result;
  }
  return sub_22EB889F8(a6, v10, 0, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL), a4 == 1);
}

uint64_t sub_22EB53278(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 *a4, _DWORD *a5, int *a6)
{
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  void *v16;
  uint64_t v17;

  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v11)
    v12 = (*(_DWORD *)(v11 + 16) & 0xFF800FF) == 86507531;
  else
    v12 = 0;
  if (v12 || (v16 = &unk_24FAB6EF8, LODWORD(v17) = 4937, v13 = 1, (sub_22EE8B0B0(a1, a2, a3) & 1) == 0))
  {
    v16 = (void *)a1;
    v17 = a3;
    v14 = sub_22EB53364((uint64_t)&v16, a4);
    if (v14 < 2)
    {
      return 1;
    }
    else
    {
      v13 = v14 & 0xFFFFFFFFFFFFFFFELL;
      *a6 = (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 3;
      *a5 = 5;
    }
  }
  return v13;
}

uint64_t sub_22EB53364(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16[24];

  v2 = (uint64_t)a2;
  v4 = *a2;
  if (a2 && (v4 & 0xFE) == 0x70)
  {
    v5 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_15;
      default:
        goto LABEL_13;
    }
  }
  if (!a2 || v4 != 233)
LABEL_14:
    __asm { BR              X10 }
  v5 = *(_DWORD *)a2;
  switch((*(_DWORD *)a2 >> 18) & 0x1F)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xD:
LABEL_15:
      sub_22EBB7E6C(*(_QWORD **)a1, (uint64_t)a2);
      return 1;
    case 4:
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0);
      if ((!v6 || *(_BYTE *)(v6 + 16) != 39)
        && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
         || (v6 = sub_22F10CF48(v6)) == 0))
      {
        v8 = *(_QWORD **)a1;
        v9 = *(_DWORD *)(v2 + 4);
        v10 = 5067;
        goto LABEL_21;
      }
      v7 = *(_BYTE **)(v2 + 16);
      if ((*v7 + 118) <= 4u)
      {
        v8 = *(_QWORD **)a1;
        v9 = *(_DWORD *)(v2 + 4);
        v10 = 5068;
LABEL_21:
        sub_22E8FCA40(v8, v9, v10, 0, (uint64_t)v16);
        sub_22F0D4E74(v2);
        v15 = v13;
        sub_22E8906A0((uint64_t)v16, &v15);
        sub_22E903BEC(v16);
        return 1;
      }
      *(_QWORD *)(v2 + 8) = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(v6 + 32);
      v14 = sub_22EB53364(a1, v7);
      if ((v14 & 1) != 0)
        return 1;
      *(_QWORD *)(v2 + 16) = v14 & 0xFFFFFFFFFFFFFFFELL;
      return v2;
    case 0xC:
      v12 = sub_22EB53364(a1, *((_QWORD *)a2 + 2));
      if ((v12 & 1) != 0)
        return 1;
      *(_QWORD *)(v2 + 16) = v12 & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)(v2 + 8) = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 8);
      *(_DWORD *)v2 = *(_DWORD *)v2 & 0xFFFFFCFF | (((*(_DWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 3) << 8);
      return v2;
    default:
LABEL_13:
      v4 = v5;
      goto LABEL_14;
  }
}

double sub_22EB5378C(unsigned int *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  int v5;
  double result;

  v2 = *a1;
  if ((v2 & 0x80000) != 0)
  {
    v3 = (uint64_t)&a1[4 * ((v2 >> 18) & 1) + 2 * ((v2 >> 20) & 1)];
    v5 = *(_DWORD *)(v3 + 32);
    v4 = (_DWORD *)(v3 + 32);
    if (v5)
      *(_QWORD *)&result = sub_22F0F0558(v4, (uint64_t)&v4[4 * ((v2 >> 19) & 1)], a2).n128_u64[0];
  }
  return result;
}

uint64_t sub_22EB537C0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;

  if ((*(_DWORD *)a2 & 0x8000) != 0)
    return 1;
  if ((*(_DWORD *)a2 & 0x10000) != 0 || (result = sub_22F0085E8(a2, *(_QWORD *)(a1 + 88), 0), (_DWORD)result))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    if (v4)
      v6 = v5 == 11;
    else
      v6 = 0;
    if (v6)
    {
      return ((*(_DWORD *)(v4 + 16) >> 19) & 0x1FEu) - 166 < 0x14;
    }
    else
    {
      if (v4 && v5 == 44)
      {
        v7 = sub_22F114198(*(_QWORD *)(v4 + 24));
        if ((*(_BYTE *)(v7 + 74) & 1) == 0)
          return *(_QWORD *)(v7 + 128) > 7uLL;
        return 1;
      }
      return v5 == 9;
    }
  }
  return result;
}

uint64_t sub_22EB5387C(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[64];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  _QWORD v31[3];
  __int16 v32;
  int v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(v6 + 1312);
  if (v7)
    goto LABEL_21;
  v8 = *(_QWORD *)(v6 + 16912);
  v9 = sub_22E3CB704(*(llvm::StringMapImpl **)(v6 + 15192), "BOOL", 4uLL);
  v21 = 0;
  v22 = v24;
  v23 = 0x800000000;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = (_QWORD *)a1;
  v29 = v9;
  v30 = a2;
  sub_22EFC6D6C((uint64_t)v31, v9);
  v31[1] = 0;
  v31[2] = 0;
  v32 = 0;
  v33 = 257;
  v34 = 0;
  sub_22EC56024((uint64_t)&v21);
  v10 = sub_22EC63520(a1, (uint64_t)&v21, *(_QWORD **)(a1 + 12888), 0, 0);
  v11 = v21;
  if (v10 && (_DWORD)v21 == 2)
  {
    v12 = *(_QWORD *)v22 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = *(_DWORD *)(v12 + 28);
    if ((v13 & 0x7Fu) <= 0x2F && ((1 << (v13 & 0x7F)) & 0xC00000060000) != 0)
    {
      v12 = sub_22EFBAEA4(v12);
      v13 = *(_DWORD *)(v12 + 28);
    }
    if ((v13 & 0x7F) == 0x29)
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 1312) = v12;
  }
  if (BYTE1(v33))
  {
    if (v11 == 5)
    {
      sub_22EC64D18(v28, (uint64_t)&v21);
    }
    else if (v26 && (*(_DWORD *)(v28[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v28, (uint64_t)&v21);
    }
  }
  if (v25)
  {
    v20 = sub_22EC6CBD0(v25);
    MEMORY[0x2348A0E9C](v20, 0x10E0C409F09D3C3);
  }
  if (v22 != v24)
    free(v22);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(v6 + 1312);
  if (v7)
  {
LABEL_21:
    v15 = *(_QWORD *)(v7 + 48);
    if (v15)
    {
      v8 = v15 & 0xFFFFFFFFFFFFFFF0;
    }
    else
    {
      v8 = sub_22EF6462C(v6, v7);
      v6 = *(_QWORD *)(a1 + 88);
    }
  }
  v16 = sub_22E3CD3D4(v6 + 2032, 24, 3);
  *(_BYTE *)v16 = -61;
  if (byte_255E04EB3)
  {
    v17 = sub_22F0D3748(195);
    ++*((_DWORD *)v17 + 2);
  }
  v18 = *(_DWORD *)v16 & 0xFFFC00FF;
  *(_QWORD *)(v16 + 8) = v8;
  *(_BYTE *)(v16 + 16) = a3 == 123;
  *(_DWORD *)(v16 + 20) = a2;
  *(_DWORD *)v16 = v18;
  return v16;
}

uint64_t sub_22EB53AD4@<X0>(char *__s2@<X1>, size_t __n@<X2>, uint64_t result@<X0>, uint64_t a4@<X8>)
{
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int16 *v14;
  int v15;
  int v16;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v7 = **(__int128 ***)result;
  v8 = *(_QWORD *)(*(_QWORD *)result + 8);
  v9 = (__int128 *)((char *)v7 + 40 * v8);
  v10 = v7;
  if (v8)
  {
    v11 = 40 * v8;
    v10 = **(__int128 ***)result;
    while (1)
    {
      if (*((_QWORD *)v10 + 3) == __n)
      {
        if (!__n)
          goto LABEL_29;
        result = memcmp(*((const void **)v10 + 2), __s2, __n);
        if (!(_DWORD)result)
          break;
      }
      v10 = (__int128 *)((char *)v10 + 40);
      v11 -= 40;
      if (!v11)
      {
        v10 = (__int128 *)((char *)v7 + 40 * v8);
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (__n == 11)
    {
      if (v8)
        v12 = (*(_QWORD *)__s2 ^ 0x6C6174616363616DLL | *(_QWORD *)(__s2 + 3) ^ 0x7473796C61746163) == 0;
      else
        v12 = 0;
      if (!v12)
        goto LABEL_31;
      v13 = 40 * v8;
      while (1)
      {
        if (*((_QWORD *)v7 + 3) == 3)
        {
          v14 = (unsigned __int16 *)*((_QWORD *)v7 + 2);
          v15 = *v14;
          v16 = *((unsigned __int8 *)v14 + 2);
          if (v15 == 28521 && v16 == 115)
            break;
        }
        v7 = (__int128 *)((char *)v7 + 40);
        v13 -= 40;
        if (!v13)
          goto LABEL_31;
      }
      v10 = v7;
    }
  }
  if (v10 == v9)
  {
LABEL_31:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 32) = 0;
    return result;
  }
  if (__n == 5 && (*(_DWORD *)__s2 == 1868783981 ? (v18 = __s2[4] == 115) : (v18 = 0), v18))
  {
    result = llvm::Triple::getCanonicalVersionForOS();
    v21 = *v10;
    *(_QWORD *)a4 = result;
    *(_QWORD *)(a4 + 8) = v22;
    *(_OWORD *)(a4 + 16) = v21;
  }
  else
  {
LABEL_29:
    v19 = *(_QWORD *)v10;
    v20 = *((_QWORD *)v10 + 1);
    *(_QWORD *)a4 = *(_QWORD *)v10;
    *(_QWORD *)(a4 + 8) = v20;
    *(_QWORD *)(a4 + 16) = v19;
    *(_QWORD *)(a4 + 24) = v20;
  }
  *(_BYTE *)(a4 + 32) = 1;
  return result;
}

uint64_t sub_22EB53C74(_QWORD *a1, int a2, int a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  char v28;
  char *v29;
  int v30;
  _BYTE v32[100];
  int v33;
  unsigned int v34[25];
  _BOOL4 v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0);
  if (!v12 || *(_BYTE *)(v12 + 16) != 39)
    v12 = sub_22F10CF48(v12);
  v35 = (*(_DWORD *)(v12 + 40) & 6) != 2;
  v13 = 1;
  v14 = sub_22EB1B954((uint64_t)a1, a5);
  if ((v14 & 1) == 0)
  {
    v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if ((*(_BYTE *)((v14 & 0xFFFFFFFFFFFFFFFELL) + 1) & 0x80) == 0)
    {
      if (sub_22F110744(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0), a1[11]))
      {
        v36 = 0;
        v37 = 0;
        LODWORD(v38) = 0;
        if (sub_22F00554C(v15, (uint64_t)&v36, a1[11], 2, 0) && sub_22E8BAD7C((uint64_t)&v39, 0))
        {
          sub_22F0D5A50(v15);
          sub_22E8FCA40(a1, v16, 0xD49u, 0, (uint64_t)v34);
          v33 = 0;
          goto LABEL_23;
        }
        if (v38 >= 2)
          sub_22EF53BC0(&v38);
      }
      else if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                         + 16) != 39)
      {
        sub_22F0D5A50(v15);
        sub_22E8FCA40(a1, v17, 0xD47u, 0, (uint64_t)v34);
        sub_22E89519C((uint64_t)v34, (unsigned int *)&v35);
        v18 = v34;
        goto LABEL_30;
      }
    }
    if (!a6)
    {
      v23 = 0;
LABEL_26:
      v28 = sub_22E8BBBD0(a4);
      v13 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
      *(_BYTE *)v13 = -85;
      if (byte_255E04EB3)
      {
        v29 = sub_22F0D3748(171);
        ++*((_DWORD *)v29 + 2);
      }
      *(_DWORD *)v13 = *(_DWORD *)v13 & 0xFFFC00FF | ((v28 & 3) << 8);
      *(_DWORD *)(v13 + 32) = a2;
      *(_DWORD *)(v13 + 36) = a3;
      *(_QWORD *)(v13 + 8) = a4;
      *(_QWORD *)(v13 + 16) = v15;
      *(_QWORD *)(v13 + 24) = v23;
      return v13;
    }
    v19 = sub_22EB1A358(a1, a6, 0);
    if ((v19 & 1) != 0)
      return 1;
    v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
    if (sub_22F110744(*(_QWORD *)(*(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0), a1[11]))
    {
      v21 = sub_22EF67C8C(a1[11]);
      v13 = 1;
      v22 = sub_22E90092C((uint64_t)a1, v20, v21, 30, 0, 0);
      if ((v22 & 1) != 0)
        return v13;
      v36 = 0;
      v37 = 0;
      LODWORD(v38) = 0;
      v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
      if (sub_22F00554C(v22 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v36, a1[11], 2, 0))
      {
        v24 = &v39;
        v25 = v40 - 1;
        if (v40 >= 0x41)
          v24 = (uint64_t *)(v39 + 8 * (v25 >> 6));
        if ((((unint64_t)*v24 >> v25) & 1) != 0)
        {
          sub_22F0D5A50(a6);
          sub_22E8FCA40(a1, v26, 0xD49u, 0, (uint64_t)v34);
          v33 = 1;
LABEL_23:
          v27 = sub_22E8900C4((uint64_t)v34, &v33);
          sub_22E89519C(v27, (unsigned int *)&v35);
          sub_22E903BEC(v34);
          if (v38 >= 2)
            sub_22EF53BC0(&v38);
          return 1;
        }
      }
      if (v38 >= 2)
        sub_22EF53BC0(&v38);
      goto LABEL_26;
    }
    sub_22F0D5A50(a6);
    sub_22E8FCA40(a1, v30, 0xD48u, 0, (uint64_t)v32);
    v18 = (unsigned int *)v32;
LABEL_30:
    sub_22E903BEC(v18);
    return 1;
  }
  return v13;
}

uint64_t sub_22EB54020(_QWORD *a1, void *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 **v32;
  unsigned __int8 *v33;
  unsigned int v34[4];
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  char v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v11 = 1;
  v12 = sub_22EB1B954((uint64_t)a1, a2);
  if ((v12 & 1) != 0)
    return v11;
  v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v14 = *(_QWORD *)(v42 & 0xFFFFFFFFFFFFFFF0);
  if ((*(_DWORD *)(v14 + 16) & 0x400) != 0)
    return 1;
  if (*(_DWORD *)(v14 + 16) != 39
    && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
     || (v14 = sub_22F10CF48(v14)) == 0))
  {
    v18 = 0;
    goto LABEL_15;
  }
  if ((*(_BYTE *)(v14 + 40) & 6) == 0)
  {
    v18 = 1;
LABEL_15:
    v41 = v18;
    sub_22E8FCA40(a1, a4, 0xD67u, 0, (uint64_t)v34);
    if (v38)
    {
      v19 = v36;
      if (!v36)
      {
        v19 = (unsigned __int8 *)sub_22E3B8AAC(v37);
        v36 = v19;
      }
      v20 = a3;
      v19[*v19 + 1] = 2;
      v21 = v36;
    }
    else
    {
      if (!v40)
        goto LABEL_21;
      v27 = v35;
      v28 = (uint64_t *)(*(_QWORD *)v34 + 12784);
      if (v35)
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
      v43 = v27;
      v29 = sub_22F2F1D6C(v28, &v43);
      v30 = v29[1] + 32 * v39;
      v33 = *(unsigned __int8 **)(v30 + 8);
      v32 = (unsigned __int8 **)(v30 + 8);
      v31 = v33;
      if (!v33)
      {
        v31 = (unsigned __int8 *)sub_22E3B8AAC((uint64_t)v32[1]);
        *v32 = v31;
      }
      v20 = a3;
      v31[*v31 + 1] = 2;
      v21 = *v32;
    }
    v22 = *v21;
    *v21 = v22 + 1;
    *(_QWORD *)&v21[8 * v22 + 16] = v20;
LABEL_21:
    v23 = sub_22E8901B8((uint64_t)v34, &v42);
    sub_22E8900C4(v23, &v41);
    sub_22E903BEC(v34);
    return 1;
  }
  v15 = sub_22EF5B848(a1[11], *(_QWORD *)(v14 + 32), 2u);
  if ((*(_DWORD *)(v14 + 40) & 0x1F) != 2)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(v14 + 8) & 0xFFFFFFFFFFFFFFF0);
    v11 = 1;
    if (!v25 || *(_BYTE *)(v25 + 16) != 39)
      return v11;
    if ((*(_BYTE *)(v25 + 40) & 6) != 0)
    {
      v11 = 1;
      v26 = sub_22E90092C((uint64_t)a1, v13, v15, 68, 0, 0);
      if ((v26 & 1) != 0)
        return v11;
      v13 = v26 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_8;
    }
    return 1;
  }
LABEL_8:
  v16 = a1[11];
  if (a6)
    v15 = sub_22EF5B848(v16, *(_QWORD *)(v14 + 32), 0);
  v11 = sub_22E3CD3D4(v16 + 2032, 40, 3);
  *(_BYTE *)v11 = -79;
  if (byte_255E04EB3)
  {
    v17 = sub_22F0D3748(177);
    ++*((_DWORD *)v17 + 2);
  }
  *(_DWORD *)v11 &= 0xFFFC00FF;
  *(_QWORD *)(v11 + 8) = v15;
  *(_QWORD *)(v11 + 16) = v13;
  *(_DWORD *)(v11 + 24) = a3;
  *(_DWORD *)(v11 + 28) = a4;
  *(_DWORD *)(v11 + 32) = a5;
  return v11;
}

uint64_t sub_22EB542F0(_QWORD *a1, uint64_t a2, void *a3, _QWORD *a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  unsigned int *v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  _BYTE v41[96];
  uint64_t v42;
  _BYTE v43[96];
  uint64_t v44;
  unsigned int v45;
  char v46;
  uint64_t v47;
  _BYTE v48[104];

  sub_22F00905C(a2, a1[11], 0, (uint64_t)&v44);
  if (!v46)
  {
    sub_22F0D5A50(a2);
    sub_22E8FCA40(a1, v24, 0xD81u, 0, (uint64_t)v48);
    v25 = (unsigned int *)v48;
LABEL_21:
    sub_22E903BEC(v25);
    return 1;
  }
  if (v45 >= 0x41 && v44)
    MEMORY[0x2348A0E84](v44, 0x1000C8000313F17);
  v12 = 1;
  v13 = sub_22EB1B954((uint64_t)a1, a3);
  if ((v13 & 1) == 0)
  {
    v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v47 = v15;
    v16 = *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0);
    v17 = *(_QWORD *)(*(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v17 || *(_BYTE *)(v17 + 16) != 39 || (*(_BYTE *)(v17 + 40) & 6) == 0)
    {
      sub_22F0D5A50(v14);
      sub_22E8FCA40(a1, v26, 0xD7Au, 0, (uint64_t)&v44);
      sub_22E8901B8((uint64_t)&v44, &v47);
LABEL_20:
      v25 = (unsigned int *)&v44;
      goto LABEL_21;
    }
    v18 = sub_22F10ACF8(v16);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    v21 = *(_DWORD *)(v20 + 16);
    if (v20)
      v22 = v21 == 11;
    else
      v22 = 0;
    if (v22)
    {
      if (((*(_DWORD *)(v20 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        goto LABEL_32;
    }
    else
    {
      if (v20 && v21 == 44)
      {
        v23 = sub_22F114198(*(_QWORD *)(v20 + 24));
        if ((*(_BYTE *)(v23 + 74) & 1) != 0 || *(_QWORD *)(v23 + 128) > 7uLL)
          goto LABEL_27;
        v21 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*v19 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_26:
        if (v21 == 39)
          goto LABEL_27;
LABEL_32:
        sub_22F0D5A50(v14);
        sub_22E8FCA40(a1, v31, 0xD78u, 0, (uint64_t)v43);
        v25 = (unsigned int *)v43;
        goto LABEL_21;
      }
      if (v21 != 9)
        goto LABEL_26;
    }
LABEL_27:
    if (!a4)
    {
LABEL_35:
      v44 = a2;
      v33 = sub_22EB3547C((uint64_t)a1, &v44, v18);
      v34 = v18;
      v12 = 1;
      v35 = (unsigned __int8 *)(sub_22E90092C((uint64_t)a1, a2, v34, v33, 0, 0) & 0xFFFFFFFFFFFFFFFELL);
      if (v35)
      {
        if ((v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)) != 0
          && *(_BYTE *)(v36 + 16) == 39
          && (*(_BYTE *)(v36 + 40) & 7) == 3
          || (v15 = sub_22F369668(a1[11], v15, 3),
              v12 = 1,
              (v14 = sub_22E90092C((uint64_t)a1, v14, v15, 68, 0, 0) & 0xFFFFFFFFFFFFFFFELL) != 0))
        {
          v37 = sub_22F369668(a1[11], v15, 4);
          v38 = sub_22F3694D0(a1[11], v37, v35);
          v12 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
          *(_BYTE *)v12 = -28;
          if (byte_255E04EB3)
          {
            v39 = sub_22F0D3748(228);
            ++*((_DWORD *)v39 + 2);
          }
          *(_DWORD *)v12 &= 0xFFFC00FF;
          *(_QWORD *)(v12 + 8) = v38;
          *(_QWORD *)(v12 + 16) = v14;
          *(_QWORD *)(v12 + 24) = a4;
          *(_DWORD *)(v12 + 32) = a5;
          *(_DWORD *)(v12 + 36) = a6;
        }
      }
      return v12;
    }
    v40 = v18;
    v12 = 1;
    v28 = sub_22EB1B954((uint64_t)a1, a4);
    if ((v28 & 1) != 0)
      return v12;
    a4 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFFELL);
    v29 = *(_QWORD *)(*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
    {
      if (*(_QWORD *)(*(_QWORD *)((sub_22F10ACF8(v29) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) != *(_QWORD *)(v19[1] & 0xFFFFFFFFFFFFFFF0))
      {
        sub_22F0D5A50((uint64_t)a4);
        sub_22E8FCA40(a1, v30, 0xD77u, 0, (uint64_t)v41);
        v25 = (unsigned int *)v41;
        goto LABEL_21;
      }
      v18 = v40;
      goto LABEL_35;
    }
    sub_22F0D5A50((uint64_t)a4);
    sub_22E8FCA40(a1, v32, 0xD79u, 0, (uint64_t)&v44);
    v42 = a4[1];
    sub_22E8901B8((uint64_t)&v44, &v42);
    goto LABEL_20;
  }
  return v12;
}

BOOL sub_22EB5472C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  _BOOL8 result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFF0);
  result = sub_22F110C5C(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    v5 = sub_22EF5CDF0(*(_QWORD *)(a1 + 88), *v3);
    v6 = *(_QWORD *)(a1 + 88);
    v7 = sub_22F36D77C(v6);
    return v5 >= sub_22EF5CDF0(v6, *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0));
  }
  return result;
}

uint64_t sub_22EB54790(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_22EF721C8(*(_QWORD *)(a1 + 88), *(_QWORD *)(a2 + 8));
  v7 = 1;
  v8 = sub_22E90092C(a1, a2, v6, 30, 0, 0);
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if ((v8 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22F0D5A50(v8 & 0xFFFFFFFFFFFFFFFELL);
    sub_22EB25D60(a1, v10, 0);
    sub_22F0D5A50(v9);
    v11 = sub_22EB2D0B8() & 0xFFFFFFFFFFFFFFFELL;
    if (v11)
    {
      v13 = *(_QWORD *)(a1 + 88);
      v14 = v11;
      return sub_22F3C1DF8(v13, a3, (uint64_t *)&v14, 1);
    }
    else
    {
      return 1;
    }
  }
  return v7;
}

BOOL sub_22EB5486C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v9 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (sub_22F10E0B8(v9))
    return 1;
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_DWORD *)(v11 + 16);
  if (v11)
    v13 = *(_DWORD *)(v11 + 16) == 11;
  else
    v13 = 0;
  if (v13)
  {
    result = ((v12 >> 19) & 0x1FE) - 210 < 8;
    if (((v12 >> 19) & 0x1FE) - 210 < 8)
      return result;
  }
  else
  {
    result = 0;
  }
  if ((a5 & 1) == 0)
  {
    v14 = *(_DWORD *)(v11 + 16);
    if (v14 != 9)
    {
      if (v14 == 44)
      {
        v15 = sub_22F114198(*(_QWORD *)(v11 + 24));
        if ((*(_BYTE *)(v15 + 74) & 1) == 0 && *(_QWORD *)(v15 + 128) < 8uLL
          || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v11 + 24)) + 76) & 0x80) != 0)
        {
          goto LABEL_19;
        }
      }
      else if (v14 != 11 || ((v12 >> 19) & 0x1FE) - 166 >= 0x14)
      {
LABEL_19:
        v16 = *a2;
        v17 = 56;
        goto LABEL_20;
      }
    }
    v16 = sub_22E90092C(a1, *a2 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(*(_QWORD *)(a4 & 0xFFFFFFFFFFFFFFF0) + 32), 32, 0, 0);
    *a2 = v16;
    v17 = 47;
LABEL_20:
    v18 = sub_22E90092C(a1, v16 & 0xFFFFFFFFFFFFFFFELL, a4, v17, 0, 0);
    result = 0;
    *a2 = v18;
  }
  return result;
}

unint64_t sub_22EB549D8(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;

  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_DWORD *)(v13 + 16);
  if (v13)
    v15 = v14 == 11;
  else
    v15 = 0;
  if (v15)
  {
    if (((*(_DWORD *)(v13 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
      goto LABEL_15;
    goto LABEL_10;
  }
  if (!v13 || v14 != 44)
  {
    if (v14 == 9)
      goto LABEL_15;
LABEL_10:
    a4 = sub_22F369F4C(*(_QWORD *)(a1 + 88), a4);
    if (a7)
      *a3 = sub_22E90092C(a1, *a3 & 0xFFFFFFFFFFFFFFFELL, a4, 56, 0, 0);
    if (a6)
      *a2 = sub_22E90092C(a1, *a2 & 0xFFFFFFFFFFFFFFFELL, a4, 47, 0, 0);
    return a4;
  }
  v16 = sub_22F114198(*(_QWORD *)(v13 + 24));
  if ((*(_BYTE *)(v16 + 74) & 1) == 0 && *(_QWORD *)(v16 + 128) <= 7uLL
    || (*(_BYTE *)(sub_22F114198(*(_QWORD *)(v13 + 24)) + 76) & 0x80) != 0)
  {
    goto LABEL_10;
  }
LABEL_15:
  if (a7)
    *a3 = sub_22E90092C(a1, *a3 & 0xFFFFFFFFFFFFFFFELL, a4, 32, 0, 0);
  return a4;
}

uint64_t sub_22EB54B48(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v1 + 16) != 11)
    v1 = 0;
  v2 = (((unint64_t)*(unsigned int *)(v1 + 16) >> 19) & 0x1FF) - 186;
  if (v2 > 0x17)
    return 0;
  else
    return dword_22F481D08[v2];
}

_QWORD *sub_22EB54B94(_QWORD *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = result;
    v7 = 3 * a4;
    result = operator new(24 * a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      v8 = sub_22E78D434((uint64_t)result, a2);
      a2 += 3;
      result = (_QWORD *)(v8 + 24);
    }
    v6[1] = result;
  }
  return result;
}

uint64_t sub_22EB54C14(uint64_t result, int a2, int a3, int *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  char *v7;
  char *v8;
  int v9;
  int v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;

  v4 = *((_QWORD *)a4 + 1);
  v5 = *a4;
  *(_BYTE *)result = -42;
  if (byte_255E04EB3)
  {
    v13 = result;
    v10 = a2;
    v11 = a4;
    v9 = a3;
    v12 = v4;
    v14 = v5;
    v7 = sub_22F0D3748(214);
    a3 = v9;
    a2 = v10;
    v8 = v7;
    result = v13;
    ++*((_DWORD *)v8 + 2);
    LOWORD(v5) = v14;
    a4 = v11;
    v4 = v12;
  }
  v6 = *(_DWORD *)result & 0xFFFC00FF | v5 & 0x1F00;
  *(_DWORD *)result = v6;
  *(_QWORD *)(result + 8) = v4;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  *(_QWORD *)(result + 24) = a4;
  *(_DWORD *)result = *a4 & 0x3E000 | v6;
  return result;
}

uint64_t sub_22EB54CBC(uint64_t result, _DWORD *a2, _DWORD *a3, uint64_t a4, char a5, char a6, int a7)
{
  unsigned int v7;
  char *v8;
  char *v9;
  char v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  _DWORD *v14;
  int v15;
  uint64_t v16;

  *(_BYTE *)result = 107;
  if (byte_255E04EB3)
  {
    v15 = a7;
    v16 = result;
    v12 = a3;
    v14 = a2;
    v11 = a4;
    v13 = a6;
    v10 = a5;
    v8 = sub_22F0D3748(107);
    a5 = v10;
    a6 = v13;
    a4 = v11;
    a3 = v12;
    a2 = v14;
    a7 = v15;
    v9 = v8;
    result = v16;
    ++*((_DWORD *)v9 + 2);
  }
  v7 = ((a5 & 3) << 8) & 0xE3FF | ((a6 & 7) << 10) | *(_DWORD *)result & 0xFFFC00FF;
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_DWORD *)result = v7;
  *(_DWORD *)(result + 4) = a7;
  *(_DWORD *)result = (*a3 | *a2) & 0x3E000 | v7;
  return result;
}

void sub_22EB54D70()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22EB54D84(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;

  if (a2[1] && ((*a2 & 7) != 0 ? (v2 = 0) : (v2 = *a2 & 0xFFFFFFFFFFFFFFF8), v2 == *(_QWORD *)(a1 + 56)))
    return sub_22EC6B82C(a1, (uint64_t)a2);
  else
    return 0;
}

__n128 sub_22EB54DB4@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;

  v4 = operator new();
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v4 + 32) = result;
  *(_QWORD *)v4 = &off_24FAB8290;
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v4 + 56) = v6;
  *a2 = v4;
  return result;
}

unint64_t sub_22EB54E1C(_QWORD *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  __int16 v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v84;
  int v85;
  uint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  __int16 v91;
  __int16 v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98[12];
  uint64_t v99;
  uint64_t v100[2];

  v4 = *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v99 = *(_QWORD *)((*a3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v100[0] = v4;
  v5 = v4 & 0xFFFFFFFFFFFFFFF0;
  v6 = v99 & 0xFFFFFFFFFFFFFFF0;
  if ((*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF0) + 8) | v4 & 7) == (*(_QWORD *)((v99 & 0xFFFFFFFFFFFFFFF0) + 8) | v99 & 7))
    return v4;
  v11 = *(_QWORD *)v5;
  v12 = *(unsigned __int8 *)(*(_QWORD *)v5 + 16);
  if (*(_QWORD *)v5)
    v13 = v12 == 10;
  else
    v13 = 0;
  if (v13)
    goto LABEL_8;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 10)
  {
    v11 = sub_22F10CF48(v11);
    if (v11)
    {
LABEL_8:
      v14 = *(_QWORD *)(v11 + 32);
      v15 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        v16 = *(_BYTE *)(*(_QWORD *)v6 + 16) == 10;
      else
        v16 = 0;
      if (!v16)
        v15 = sub_22F10CF48(v15);
      v17 = 0;
      v18 = 0;
      v19 = *(_QWORD *)(v15 + 32);
      goto LABEL_31;
    }
    v11 = *(_QWORD *)v5;
    v12 = *(unsigned __int8 *)(*(_QWORD *)v5 + 16);
  }
  if (v12 != 39)
    v11 = sub_22F10CF48(v11);
  v14 = *(_QWORD *)(v11 + 32);
  v20 = *(_QWORD *)v6;
  if (!*(_QWORD *)v6 || *(_BYTE *)(v20 + 16) != 39)
    v20 = sub_22F10CF48(v20);
  v19 = *(_QWORD *)(v20 + 32);
  v21 = *(_QWORD *)v5;
  if (!*(_QWORD *)v5 || *(_BYTE *)(v21 + 16) != 39)
    v21 = sub_22F10CF48(v21);
  v22 = *(_DWORD *)(v21 + 40);
  v23 = *(_QWORD *)v6;
  if (!*(_QWORD *)v6 || *(_BYTE *)(v23 + 16) != 39)
    v23 = sub_22F10CF48(v23);
  v24 = *(unsigned __int8 *)(v23 + 40);
  v25 = v22 & 7;
  if (v25 >= (v24 & 7))
    v25 = v24 & 7;
  v26 = (v24 >> 3) & 3;
  if (((v22 >> 3) & 3) < v26)
    v26 = (v22 >> 3) & 3;
  v18 = v25 | (8 * v26);
  v17 = 1;
LABEL_31:
  v27 = v14 & 0xFFFFFFFFFFFFFFF0;
  v28 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8);
  v94 = a4;
  v89 = v18;
  if ((v28 & 8) != 0)
  {
    v30 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v29 = HIDWORD(*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFF0) + 0x18));
  }
  else
  {
    v29 = 0;
    v30 = 0;
  }
  v31 = v19 & 0xFFFFFFFFFFFFFFF0;
  v32 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFF0) + 8);
  v93 = v19;
  v87 = v17;
  v86 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8);
  v88 = v32;
  v33 = a1;
  if ((v32 & 8) != 0)
  {
    v36 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFF0) + 0x18);
    v35 = v36;
    v34 = HIDWORD(v36);
  }
  else
  {
    v34 = 0;
    v35 = 0;
  }
  v91 = v35;
  v92 = v30;
  v37 = v30 >> 11;
  v38 = v35 >> 11;
  v90 = v14;
  if (sub_22E95F2F0(v30 >> 11, v35 >> 11))
  {
    v39 = v37;
  }
  else
  {
    v39 = v38;
    if (!sub_22E95F2F0(v38, v37))
    {
      sub_22E8FCA40(v33, v94, 0x1389u, 0, (uint64_t)v98);
      v62 = sub_22E8901B8((uint64_t)v98, v100);
      v63 = sub_22E8901B8(v62, &v99);
      v97 = 2;
      v61 = sub_22E8900C4(v63, &v97);
      goto LABEL_59;
    }
  }
  if ((_DWORD)v29 != (_DWORD)v34)
  {
    sub_22E8FCA40(v33, v94, 0x1355u, 0, (uint64_t)v98);
    v60 = sub_22E8901B8((uint64_t)v98, v100);
    v61 = sub_22E8901B8(v60, &v99);
LABEL_59:
    v64 = v61;
    sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
    v96 = v65;
    v66 = sub_22E8906A0(v64, &v96);
    sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
    v95 = v67;
    sub_22E8906A0(v66, &v95);
    sub_22E903BEC((unsigned int *)v98);
    return 0;
  }
  if (v37 == v39)
    v40 = 1;
  else
    v40 = 66;
  if (v38 == v39)
    v41 = 1;
  else
    v41 = 66;
  v84 = v40;
  v85 = v41;
  v42 = v33[11];
  v43 = *(_QWORD *)v27;
  if ((*(_BYTE *)(*(_QWORD *)v27 + 8) & 0xF) != 0)
    v43 = (unint64_t)sub_22F10D2BC(v90);
  v44 = v43 & 0xFFFFFFFFFFFFFFF0;
  if (v92 & 0x7F8 | (v29 << 32) & 0xC000007F8)
  {
    v98[0] = v92 & 0x7F8 | (unint64_t)(v29 << 32);
    v45 = sub_22E491354((unsigned int *)v98, v44);
    v44 = sub_22EF5DBC4(v42, v45, v98[0]);
  }
  v46 = v34 << 32;
  v47 = v33[11];
  v48 = *(_QWORD *)v31;
  if ((*(_BYTE *)(*(_QWORD *)v31 + 8) & 0xF) != 0)
    v48 = (unint64_t)sub_22F10D2BC(v93);
  v49 = v48 & 0xFFFFFFFFFFFFFFF0;
  if (v46 & 0xC000007F8 | v91 & 0x7F8)
  {
    v98[0] = v46 | v91 & 0x7F8;
    v50 = sub_22E491354((unsigned int *)v98, v49);
    v49 = sub_22EF5DBC4(v47, v50, v98[0]);
  }
  v51 = v33;
  v52 = sub_22EF6FF80(v33[11], v44, v49, 0, 0, 0);
  if (v52 > 0xF)
  {
    if ((*(_DWORD *)(v33[9] + 52) & 0x40000000) != 0)
    {
      v72 = *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v72 & 8) != 0)
      {
        v74 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFFF0) + 0x18);
        v73 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
      }
      else
      {
        v73 = 0;
        v74 = 0;
      }
      v75 = v74 & 0x7FF | (v72 | v52) & 7 | (v39 << 11);
      v76 = v33[11];
      v77 = *(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFF0);
      if ((*(_BYTE *)(v77 + 8) & 0xF) != 0)
        v77 = (unint64_t)sub_22F10D2BC(v52);
      v68 = v90;
      v71 = v84;
      v78 = v77 & 0xFFFFFFFFFFFFFFF0;
      if (((v73 | v75) & 0xCFFFFFFF8) != 0)
      {
        v98[0] = v73 | v75;
        v79 = sub_22E491354((unsigned int *)v98, v78);
        v52 = sub_22EF5DBC4(v76, v79, v98[0]);
      }
      else
      {
        v52 = v78 | v75 & 7;
      }
      v69 = v87;
      v70 = v86;
    }
    else
    {
      v68 = v90;
      v69 = v87;
      v70 = v86;
      v71 = v84;
    }
    v80 = v52 | ((v68 | v93 | v92 | v70) | (v88 | v91)) & 7;
    v81 = v33[11];
    if ((v69 & 1) != 0)
      v82 = sub_22EF5B848(v81, v80, v89);
    else
      v82 = sub_22F36A4F8(v81, v80);
    v4 = v82;
    *a2 = sub_22E90092C((uint64_t)v51, *a2 & 0xFFFFFFFFFFFFFFFELL, v82, v71, 0, 0);
    *a3 = sub_22E90092C((uint64_t)v51, *a3 & 0xFFFFFFFFFFFFFFFELL, v4, v85, 0, 0);
  }
  else
  {
    v53 = v33[11];
    v54 = sub_22EF5DD84(v51[11], *(_QWORD *)(v53 + 16392), v39);
    v4 = sub_22EF5B848(v53, v54, v89);
    *a2 = sub_22E90092C((uint64_t)v51, *a2 & 0xFFFFFFFFFFFFFFFELL, v4, v84, 0, 0);
    *a3 = sub_22E90092C((uint64_t)v51, *a3 & 0xFFFFFFFFFFFFFFFELL, v4, v85, 0, 0);
    sub_22E8FCA40(v51, v94, 0x14FEu, 0, (uint64_t)v98);
    v55 = sub_22E8901B8((uint64_t)v98, v100);
    v56 = sub_22E8901B8(v55, &v99);
    sub_22F0D4E74(*a2 & 0xFFFFFFFFFFFFFFFELL);
    v96 = v57;
    v58 = sub_22E8906A0(v56, &v96);
    sub_22F0D4E74(*a3 & 0xFFFFFFFFFFFFFFFELL);
    v95 = v59;
    sub_22E8906A0(v58, &v95);
    sub_22E903BEC((unsigned int *)v98);
  }
  return v4;
}

uint64_t sub_22EB5548C(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  BOOL v3;
  int v4;

  if (a1 && *(_BYTE *)(a1 + 16) == 39
    || (v1 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF0) + 16), v1 == 39)
    && (a1 = sub_22F10CF48(a1)) != 0)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v2)
      v3 = *(_DWORD *)(v2 + 16) == 11;
    else
      v3 = 0;
    v1 = v3 && (*(_DWORD *)(v2 + 16) & 0xFF80000) == 115867648;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  return v4 & v1;
}

unsigned int *sub_22EB55520(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28[24];
  unint64_t v29;

  v29 = a4;
  v8 = sub_22F141A3C(HIDWORD(a4), 0, *(_QWORD **)(a1 + 112), *(_DWORD **)(a1 + 72));
  if ((a4 & 0x8000000080000000) != 0 || (v9 = v8) == 0)
  {
    sub_22E90379C((_QWORD *)a1, a2, a3, 0, (uint64_t)v28);
    sub_22E8906A0((uint64_t)v28, (uint64_t *)&v29);
  }
  else
  {
    sub_22E90379C((_QWORD *)a1, a2, a3, 0, (uint64_t)v28);
    v23 = 0;
    v22 = 0;
    v25 = 0;
    v26 = 0x100000000000000;
    v20 = a4 | ((unint64_t)a4 << 32);
    v21 = 0;
    v24 = (void *)40;
    v27 = 0;
    v10 = sub_22E890748((uint64_t)v28, &v20);
    v15 = 0;
    v14 = 0;
    v17 = 0;
    v18 = 0x100000000000000;
    v12 = v9 | ((unint64_t)v9 << 32);
    v13 = 0;
    __p = (void *)41;
    v19 = 0;
    sub_22E890748(v10, &v12);
    if (SHIBYTE(v18) < 0)
      operator delete(__p);
    if (SHIBYTE(v26) < 0)
      operator delete(v24);
  }
  return sub_22E903BEC(v28);
}

unsigned int *sub_22EB55660(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  unsigned int v10[24];

  if ((**(_QWORD **)(a1 + 72) & 0x100) != 0)
    v4 = 5005;
  else
    v4 = 5258;
  sub_22E8FCA40((_QWORD *)a1, a2, v4, 0, (uint64_t)v10);
  v9 = 0;
  v5 = sub_22E8900C4((uint64_t)v10, &v9);
  sub_22F0D4E74(a3);
  v8 = v6;
  sub_22E8906A0(v5, &v8);
  return sub_22E903BEC(v10);
}

unsigned int *sub_22EB556E0(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14[24];

  if ((**(_QWORD **)(a1 + 72) & 0x100) != 0)
    v4 = 5004;
  else
    v4 = 5256;
  sub_22E8FCA40((_QWORD *)a1, a2, v4, 0, (uint64_t)v14);
  v13 = 0;
  v5 = sub_22E8900C4((uint64_t)v14, &v13);
  v12 = sub_22F10ACF8(*(_QWORD *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_22E8901B8(v5, &v12);
  v11 = 0;
  v7 = sub_22E8900C4(v6, &v11);
  sub_22F0D4E74(a3);
  v10 = v8;
  sub_22E8906A0(v7, &v10);
  return sub_22E903BEC(v14);
}

uint64_t sub_22EB55790(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  int v13;
  _QWORD *v14;

  v6 = (uint64_t *)(*(_QWORD *)(a3 + 8) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v6;
  if (*v6)
    v8 = *(_BYTE *)(*v6 + 16) == 6;
  else
    v8 = 0;
  if (v8
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 6 && (v7 = sub_22F10CF48(v7)) != 0)
  {
    v6 = (uint64_t *)(*(_QWORD *)(v7 + 32) & 0xFFFFFFFFFFFFFFF0);
  }
  v9 = sub_22F10ACF8(*v6);
  sub_22F0D4E74(a3);
  v12[0] = v10;
  v13 = 4915;
  v14 = v12;
  v12[1] = &unk_24FAB84B0;
  return sub_22EE8B0B0(a1, a2, v9);
}

unint64_t sub_22EB55858(unsigned __int8 *a1)
{
  int v2;
  unint64_t *v3;
  unint64_t result;

  v2 = *a1;
  if (v2 != 188)
  {
    if (v2 != 161)
      return 0;
    v3 = (unint64_t *)(a1 + 16);
LABEL_7:
    result = *v3;
    if (!*v3)
      return result;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) & 0xFEu)
       - 2 <= 3)
      return sub_22EFBCB70(result) ^ 1;
    return 0;
  }
  result = *((_QWORD *)a1 + 2);
  if (result)
  {
    result = sub_22EFFFB48((unsigned __int8 *)result);
    if ((_DWORD)result)
    {
      v3 = (unint64_t *)(a1 + 24);
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_22EB558E8(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unsigned int v4;
  unsigned __int16 v5;
  BOOL v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v10[9];
  _DWORD v11[18];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10[7] = a4;
  v10[8] = a2;
  v10[0] = 0x20000000;
  v10[2] = a4;
  v10[3] = a2;
  v10[5] = 0;
  if (*(unsigned __int8 *)a3 != 153)
    goto LABEL_14;
  v4 = (*(_DWORD *)a3 >> 18) & 0x7F;
  if (v4 <= 0x13)
  {
    if (v4 == 4)
    {
      v5 = 256;
LABEL_12:
      v7 = v5 | 0x20000000u;
    }
    else
    {
      v6 = v4 == 12;
      v7 = 536871424;
      if (!v6)
        v7 = 536871680;
    }
LABEL_13:
    v10[0] = v7;
LABEL_14:
    v11[0] = 0;
    v9 = 0;
    v8 = (char *)&loc_22EB55A10
       + 4
       * byte_22F4803CB[sub_22ECF86A8((uint64_t)v10, *(_QWORD *)(result + 88), a3, (uint64_t)v11, &v9, 1)];
    __asm { BR              X10 }
  }
  switch(v4)
  {
    case 0x1Eu:
      v7 = 536873216;
      goto LABEL_13;
    case 0x1Fu:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x28u:
    case 0x29u:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x31u:
    case 0x36u:
      __break(1u);
      return result;
    case 0x20u:
    case 0x27u:
      v7 = 536873984;
      goto LABEL_13;
    case 0x2Au:
      v7 = 536873472;
      goto LABEL_13;
    case 0x2Fu:
    case 0x30u:
    case 0x34u:
    case 0x35u:
      v5 = 5888;
      goto LABEL_12;
    case 0x32u:
    case 0x33u:
    case 0x37u:
    case 0x38u:
      v7 = 536873728;
      goto LABEL_13;
    default:
      v7 = 0x20000000;
      goto LABEL_13;
  }
}

unint64_t sub_22EB55B44(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t result;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 **v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  BOOL v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  unsigned int v68[24];
  _QWORD *v69;
  uint64_t v70;

  v4 = (unsigned __int8 *)a2;
  sub_22F0D4E74(a2);
  v6 = 0;
  v7 = 0;
  v70 = v8;
  while (1)
  {
    v9 = v6;
    v10 = sub_22EFFED0C(v4);
    result = (unint64_t)sub_22EFFA6B0(v10);
    v4 = (unsigned __int8 *)result;
    v12 = *(unsigned __int8 *)result;
    if (v12 == 107)
    {
      v25 = (unsigned __int8 **)(result + 24);
      v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      v27 = *(_DWORD *)(v26 + 16);
      if (v26)
        v28 = v27 == 11;
      else
        v28 = 0;
      if (v28)
      {
        if (((*(_DWORD *)(v26 + 16) >> 19) & 0x1FEu) - 166 >= 0x14)
        {
LABEL_28:
          v30 = *v25;
          goto LABEL_29;
        }
      }
      else if (v26 && v27 == 44)
      {
        v29 = sub_22F114198(*(_QWORD *)(v26 + 24));
        if ((*(_BYTE *)(v29 + 74) & 1) == 0 && *(_QWORD *)(v29 + 128) <= 7uLL
          || (*(_QWORD *)(sub_22F114198(*(_QWORD *)(v26 + 24)) + 72) & 0x8000000000) != 0)
        {
          goto LABEL_28;
        }
      }
      else if (v27 != 9)
      {
        goto LABEL_28;
      }
      v25 = (unsigned __int8 **)(v4 + 16);
      goto LABEL_28;
    }
    if (v12 != 167)
      break;
    v30 = *(unsigned __int8 **)(result + 16);
LABEL_29:
    result = (unint64_t)sub_22EFFA6B0(v30);
    v4 = (unsigned __int8 *)result;
    v24 = 2;
    v6 = v9;
LABEL_32:
    if (v24 != 2)
      goto LABEL_45;
  }
  if (v12 != 188)
    goto LABEL_46;
  v13 = *(_DWORD *)result;
  v14 = *(_QWORD *)(result + 24);
  v15 = *(_DWORD *)(v14 + 28) & 0x7F;
  if ((v15 - 49) >= 3)
    v16 = 0;
  else
    v16 = *(_QWORD **)(result + 24);
  v69 = v16;
  if (v16)
  {
    if ((*((_BYTE *)v16 + 68) & 2) != 0)
    {
      v24 = 3;
    }
    else
    {
      result = sub_22EB56254(v16[6], v9 & 1);
      if ((result & 1) == 0)
      {
        if ((v7 & 1) == 0)
        {
          sub_22E8FCA40(a1, a3, 0x1336u, 0, (uint64_t)v68);
          v17 = sub_22E8906A0((uint64_t)v68, &v70);
          LODWORD(v66) = 2;
          v18 = sub_22E8900C4(v17, (int *)&v66);
          LOBYTE(v63) = 0;
          v19 = sub_22E894E38(v18, (unsigned __int8 *)&v63);
          v20 = sub_22E890024(v19, (uint64_t *)&v69);
          v67 = (_QWORD *)v69[6];
          sub_22E8901B8(v20, (uint64_t *)&v67);
          sub_22E903BEC(v68);
        }
        sub_22E8FCA40(a1, *(_DWORD *)(v14 + 24), 0x17F8u, 0, (uint64_t)v68);
        LODWORD(v63) = 2;
        sub_22E8900C4((uint64_t)v68, (int *)&v63);
        LOBYTE(v65) = 0;
        v21 = sub_22E894E38((uint64_t)v68, (unsigned __int8 *)&v65);
        v22 = sub_22E890024(v21, (uint64_t *)&v69);
        v67 = (_QWORD *)v69[6];
        v23 = sub_22E8901B8(v22, (uint64_t *)&v67);
        v66 = (*(uint64_t (**)(_QWORD *))(*v69 + 16))(v69);
        sub_22E8906A0(v23, &v66);
        result = (unint64_t)sub_22E903BEC(v68);
        v7 = 1;
      }
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v24 = 2;
    }
    v6 = (v13 >> 18) & 1;
    goto LABEL_32;
  }
  if ((v15 - 60) >= 7)
    v31 = 0;
  else
    v31 = (_QWORD *)v14;
  v67 = v31;
  if (v31)
  {
    v32 = v31[6];
    if ((v32 & 1) != 0 || (*(_BYTE *)((v32 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) != 0)
    {
      if ((v7 & 1) == 0)
      {
        sub_22E8FCA40(a1, a3, 0x1336u, 0, (uint64_t)v68);
        v33 = sub_22E8906A0((uint64_t)v68, &v70);
        LODWORD(v63) = 2;
        v34 = sub_22E8900C4(v33, (int *)&v63);
        LOBYTE(v65) = 1;
        v35 = sub_22E894E38(v34, (unsigned __int8 *)&v65);
        v36 = sub_22E890024(v35, (uint64_t *)&v67);
        v66 = v67[6];
        sub_22E8901B8(v36, &v66);
        sub_22E903BEC(v68);
      }
      sub_22E8FCA40(a1, *(_DWORD *)(v14 + 24), 0x17F8u, 0, (uint64_t)v68);
      v65 = 2;
      sub_22E8900C4((uint64_t)v68, &v65);
      v7 = 1;
      v64 = 1;
      v37 = sub_22E894E38((uint64_t)v68, &v64);
      v38 = sub_22E890024(v37, (uint64_t *)&v67);
      v66 = v67[6];
      v39 = sub_22E8901B8(v38, &v66);
      v63 = (*(uint64_t (**)(_QWORD *))(*v67 + 16))(v67);
      sub_22E8906A0(v39, &v63);
      result = (unint64_t)sub_22E903BEC(v68);
    }
  }
LABEL_45:
  v12 = *v4;
LABEL_46:
  if ((v12 + 113) >= 0xFBu)
  {
    v69 = 0;
    result = sub_22EFFA604(*(unsigned __int8 **)&v4[v4[3]]);
    if (!result)
      goto LABEL_80;
    v48 = (_QWORD *)result;
    if ((*(_DWORD *)(result + 28) & 0x7Eu) - 52 >= 6)
      goto LABEL_80;
    v69 = (_QWORD *)result;
    v49 = *(_QWORD *)(*(_QWORD *)(result + 48) & 0xFFFFFFFFFFFFFFF0);
    if (v49)
      v50 = *(unsigned __int8 *)(v49 + 16) - 27 > 0xFFFFFFFD;
    else
      v50 = 0;
    if (!v50)
      v49 = sub_22F10CF48(v49);
    result = sub_22EB56254(*(_QWORD *)(v49 + 24), v9 & 1);
    if ((result & 1) != 0)
      goto LABEL_80;
    if ((v7 & 1) == 0)
    {
      sub_22E8FCA40(a1, a3, 0x1336u, 0, (uint64_t)v68);
      v51 = sub_22E8906A0((uint64_t)v68, &v70);
      LODWORD(v67) = 0;
      v52 = sub_22E8900C4(v51, (int *)&v67);
      sub_22E890024(v52, (uint64_t *)&v69);
      sub_22E903BEC(v68);
      v48 = v69;
    }
    v53 = sub_22F3AC46C((unint64_t)v48);
    sub_22E8FCA40(a1, v53, 0x17F8u, 0, (uint64_t)v68);
    LODWORD(v63) = 0;
    sub_22E8900C4((uint64_t)v68, (int *)&v63);
    v54 = sub_22E890024((uint64_t)v68, (uint64_t *)&v69);
    v55 = *(_QWORD *)(v69[6] & 0xFFFFFFFFFFFFFFF0);
    if (!v55 || *(unsigned __int8 *)(v55 + 16) - 27 <= 0xFFFFFFFD)
      v55 = sub_22F10CF48(v55);
    v67 = *(_QWORD **)(v55 + 24);
    v45 = sub_22E8901B8(v54, (uint64_t *)&v67);
    v46 = sub_22F3AC46C((unint64_t)v69);
LABEL_54:
    v66 = v46;
    v47 = &v66;
    goto LABEL_79;
  }
  if (v12 == 133)
  {
    result = sub_22E903070((uint64_t)a1, 0);
    if (!result)
      goto LABEL_80;
    v56 = (*(_WORD *)(result + 8) & 0x7E) - 58;
    v57 = (_QWORD *)(result - 72);
    v58 = __CFADD__(v56, 4);
    v59 = v56 >= 0xFFFFFFFC ? (_QWORD *)(result - 72) : 0;
    v69 = v59;
    if (!v58)
      goto LABEL_80;
    result = sub_22E8FB7BC(result - 72);
    if (!(_DWORD)result)
      goto LABEL_80;
    if ((v7 & 1) == 0)
    {
      sub_22E8FCA40(a1, a3, 0x1336u, 0, (uint64_t)v68);
      v60 = sub_22E8906A0((uint64_t)v68, &v70);
      LODWORD(v67) = 3;
      v61 = sub_22E8900C4(v60, (int *)&v67);
      sub_22E890024(v61, (uint64_t *)&v69);
      sub_22E903BEC(v68);
      v57 = v69;
    }
    sub_22E8FCA40(a1, *((_DWORD *)v57 + 6), 0x17F8u, 0, (uint64_t)v68);
    LODWORD(v66) = 3;
    sub_22E8900C4((uint64_t)v68, (int *)&v66);
    v45 = sub_22E890024((uint64_t)v68, (uint64_t *)&v69);
    v67 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v69 + 16))(v69);
    v47 = (uint64_t *)&v67;
LABEL_79:
    sub_22E8906A0(v45, v47);
    return (unint64_t)sub_22E903BEC(v68);
  }
  if (v12 == 161)
  {
    v40 = (_QWORD *)*((_QWORD *)v4 + 2);
    v69 = v40;
    if (v40)
    {
      result = sub_22EB56254(v40[6], v9 & 1);
      if ((result & 1) == 0)
      {
        if ((v7 & 1) == 0)
        {
          sub_22E8FCA40(a1, a3, 0x1336u, 0, (uint64_t)v68);
          v41 = sub_22E8906A0((uint64_t)v68, &v70);
          LODWORD(v66) = 1;
          v42 = sub_22E8900C4(v41, (int *)&v66);
          v43 = sub_22E890024(v42, (uint64_t *)&v69);
          v67 = (_QWORD *)v69[6];
          sub_22E8901B8(v43, (uint64_t *)&v67);
          sub_22E903BEC(v68);
          v40 = v69;
        }
        sub_22E8FCA40(a1, *((_DWORD *)v40 + 6), 0x17F8u, 0, (uint64_t)v68);
        LODWORD(v63) = 1;
        sub_22E8900C4((uint64_t)v68, (int *)&v63);
        v44 = sub_22E890024((uint64_t)v68, (uint64_t *)&v69);
        v67 = (_QWORD *)v69[6];
        v45 = sub_22E8901B8(v44, (uint64_t *)&v67);
        v46 = (*(uint64_t (**)(_QWORD *))(*v69 + 16))(v69);
        goto LABEL_54;
      }
    }
  }
LABEL_80:
  if ((v7 & 1) == 0)
  {
    sub_22E8FCA40(a1, a3, 0x1336u, 0, (uint64_t)v68);
    v62 = sub_22E8906A0((uint64_t)v68, &v70);
    LODWORD(v69) = 5;
    sub_22E8900C4(v62, (int *)&v69);
    return (unint64_t)sub_22E903BEC(v68);
  }
  return result;
}

BOOL sub_22EB56254(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  v2 = a1;
  v3 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  if (!v3 || (v4 = *(_DWORD *)(v3 + 16), (v4 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_4;
    v9 = a2;
    v8 = v2;
    v3 = sub_22F10CF48(v3);
    v2 = v8;
    a2 = v9;
    if (!v3)
      goto LABEL_4;
    v4 = *(_DWORD *)(v3 + 16);
  }
  if ((v4 & 0x100000) != 0)
  {
    v10 = a2;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v3 || (v7 = *(_DWORD *)(v3 + 16), (v7 & 0xFE) != 0x28))
      {
        v3 = sub_22F10CF48(v3);
        v7 = *(_DWORD *)(v3 + 16);
      }
      a2 = v10;
    }
    while ((v7 & 0x100000) != 0);
  }
  v2 = *(_QWORD *)(v3 + 32);
LABEL_4:
  if (a2)
  {
    v5 = *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF0);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
      v2 = sub_22F10ACF8(v5);
  }
  return (v2 & 1) == 0 && (*(_BYTE *)((v2 & 0xFFFFFFFFFFFFFFF0) + 8) & 1) == 0;
}

void sub_22EB56350(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, _BYTE *a7)
{
  char *v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50[24];
  uint64_t v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[2];

  v55 = a5;
  v54 = a2;
  v12 = (char *)operator new(8uLL);
  v13 = 0;
  v14 = 0;
  *(_QWORD *)v12 = a3;
  v15 = v12 + 8;
  v47 = a6;
  v48 = a4;
  v16 = v12 + 8;
  do
  {
    v53 = v14 != 0;
    v17 = sub_22F114198(*(_QWORD *)(*(_QWORD *)&v12[8 * v13] + 24));
    v18 = sub_22EFC3B90(v17);
    if (!v18)
      goto LABEL_50;
    v19 = v18;
LABEL_4:
    v20 = *(_QWORD *)(v19 + 48);
    v51 = v20;
    v52 = v19;
    if ((v20 & 1) != 0 || (v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8), (v21 & 1) != 0))
    {
      v22 = v19;
      if (*a7)
      {
LABEL_14:
        sub_22E8FCA40(a1, *(_DWORD *)(v22 + 24), 0x17F8u, 0, (uint64_t)v50);
        v49 = 4;
        sub_22E8900C4((uint64_t)v50, &v49);
        v29 = sub_22E894E38((uint64_t)v50, (unsigned __int8 *)&v53);
        v30 = sub_22E890024(v29, (uint64_t *)&v52);
        v31 = sub_22E8901B8(v30, &v51);
        v56[0] = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v52 + 16))(v52);
        sub_22E8906A0(v31, v56);
        sub_22E903BEC(v50);
        LOBYTE(v20) = v51;
        v21 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF0) + 8);
        goto LABEL_15;
      }
      sub_22E8FCA40(a1, v48, 0x1336u, 0, (uint64_t)v50);
      v23 = sub_22E8906A0((uint64_t)v50, &v55);
      v49 = 4;
      if (*(_BYTE *)(sub_22E8900C4(v23, &v49) + 80))
      {
        v24 = *(unsigned __int8 **)(v23 + 32);
        if (!v24)
        {
          v24 = (unsigned __int8 *)sub_22E3B8AAC(*(_QWORD *)(v23 + 40));
          *(_QWORD *)(v23 + 32) = v24;
        }
        v24[*v24 + 1] = 2;
        v25 = *(_BYTE **)(v23 + 32);
      }
      else
      {
        if (!*(_BYTE *)(v23 + 92))
          goto LABEL_13;
        v41 = *(_QWORD *)v23;
        v42 = *(_QWORD *)(v23 + 16);
        if (v42)
          v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
        v56[0] = v42;
        v43 = sub_22F2F1D6C((uint64_t *)(v41 + 12784), v56)[1] + 32 * *(unsigned int *)(v23 + 88);
        v46 = *(unsigned __int8 **)(v43 + 8);
        v45 = (_QWORD *)(v43 + 8);
        v44 = v46;
        if (!v46)
        {
          v44 = (unsigned __int8 *)sub_22E3B8AAC(v45[1]);
          *v45 = v44;
        }
        v44[*v44 + 1] = 2;
        v25 = (_BYTE *)*v45;
      }
      v26 = *v25;
      *v25 = v26 + 1;
      *(_QWORD *)&v25[8 * v26 + 16] = v47;
LABEL_13:
      v27 = sub_22E890024(v23, &v54);
      v28 = sub_22E894E38(v27, (unsigned __int8 *)&v53);
      sub_22E890024(v28, (uint64_t *)&v52);
      sub_22E903BEC(v50);
      *a7 = 1;
      v22 = v52;
      goto LABEL_14;
    }
LABEL_15:
    v51 = v20 & 7 | v21;
    v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (!v32 || *(_BYTE *)(v32 + 16) != 45)
      goto LABEL_25;
    v33 = v12;
    if (v12 != v15)
    {
      v33 = v12;
      while (*(_QWORD *)v33 != v32)
      {
        v33 += 8;
        if (v33 == v15)
        {
          v33 = v15;
          break;
        }
      }
    }
    if (v33 != v15)
      goto LABEL_25;
    if (v15 < v16)
    {
      *(_QWORD *)v15 = v32;
      v15 += 8;
LABEL_25:
      i = v15;
      goto LABEL_26;
    }
    v35 = (v15 - v12) >> 3;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 61)
      abort();
    if ((v16 - v12) >> 2 > v36)
      v36 = (v16 - v12) >> 2;
    if ((unint64_t)(v16 - v12) >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v36;
    if (v37)
    {
      if (v37 >> 61)
        sub_22E3B3F8C();
      v38 = (char *)operator new(8 * v37);
    }
    else
    {
      v38 = 0;
    }
    v39 = &v38[8 * v35];
    *(_QWORD *)v39 = v32;
    for (i = v39 + 8; v15 != v12; v39 -= 8)
    {
      v40 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      *((_QWORD *)v39 - 1) = v40;
    }
    v16 = &v38[8 * v37];
    if (v12)
      operator delete(v12);
    v12 = v39;
LABEL_26:
    while (1)
    {
      v19 = *(_QWORD *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
      if (!v19)
        break;
      if ((*(_DWORD *)(v19 + 28) & 0x7Fu) - 49 < 3)
      {
        v15 = i;
        goto LABEL_4;
      }
    }
    v15 = i;
LABEL_50:
    v13 = ++v14;
  }
  while (v14 < (unint64_t)((v15 - v12) >> 3));
  if (v12)
    operator delete(v12);
}

uint64_t sub_22EB56724(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  _QWORD *v7;

  if (*(_DWORD *)a1 != 21 || !a2)
    return (uint64_t)a2;
  v2 = *a2;
  if (v2 != 199)
  {
    if (v2 == 188)
    {
      v3 = (uint64_t *)(a2 + 24);
      goto LABEL_8;
    }
    if (v2 != 161)
      return (uint64_t)a2;
  }
  v3 = (uint64_t *)(a2 + 16);
LABEL_8:
  v4 = *v3;
  if (!v4)
    return (uint64_t)a2;
  v5 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFFELL);
  if (!v5)
    return (uint64_t)a2;
  v6 = *v5;
  if (v6 == 199)
    goto LABEL_13;
  if (v6 != 188)
  {
    if (v6 != 161)
      return (uint64_t)a2;
LABEL_13:
    v7 = v5 + 16;
    goto LABEL_15;
  }
  v7 = v5 + 24;
LABEL_15:
  if (v4 == *v7)
    return 1;
  return (uint64_t)a2;
}

unsigned int *sub_22EB567B0(unsigned int *result, int a2, unsigned int a3, _DWORD *a4)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[2];
  unsigned __int8 *v22;
  unsigned int *v23;
  int v24;
  unsigned int v25;

  v25 = a3;
  if ((*(_BYTE *)a4 & 0xFE) == 0x70)
  {
    v6 = (*a4 >> 18) & 0x3F;
    if (v6 < a2 && (v6 - 16) <= 2)
    {
      v8 = (uint64_t)result;
      sub_22E8FCA40(result, a4[1], 0x18AAu, 0, (uint64_t)&v22);
      v21[0] = sub_22EFFBA38((*a4 >> 18) & 0x3F);
      v21[1] = v9;
      v10 = sub_22F2F2210((uint64_t)&v22, (uint64_t)v21);
      v20[0] = sub_22EFFBA38(a2);
      v20[1] = v11;
      v12 = sub_22F2F2210(v10, (uint64_t)v20);
      sub_22F0D4E74((uint64_t)a4);
      v19 = v13;
      v14 = sub_22E8906A0(v12, &v19);
      sub_22F2F2168(v14, &v25);
      sub_22E903BEC((unsigned int *)&v22);
      v15 = *(_QWORD *)(v8 + 88) + 2128;
      v22 = 0;
      v23 = (unsigned int *)v15;
      v24 = 5993;
      LODWORD(v12) = a4[1];
      v16 = sub_22EFFBA38((*a4 >> 18) & 0x3F);
      sub_22E3B89A8(&v22, v16, v17);
      sub_22F0D4E74((uint64_t)a4);
      result = sub_22EB55520(v8, v12, (uint64_t)&v22, v18);
      if (v22)
      {
        result = v23;
        if (v23)
          return (unsigned int *)sub_22E3BB10C((unint64_t)v23, (unint64_t)v22);
      }
    }
  }
  return result;
}

unint64_t sub_22EB568F4(unint64_t result, unsigned int a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  int v18;
  char *v19;
  size_t v20;
  _QWORD v21[2];
  unsigned int v22;

  v22 = a2;
  v21[0] = a4;
  v21[1] = a5;
  if ((*(_BYTE *)a3 & 0xFE) == 0x70)
  {
    v6 = (_QWORD *)result;
    result = (*a3 >> 18) & 0x3F;
    if ((result - 5) <= 1)
    {
      v19 = sub_22EFFBA38(result);
      v20 = v7;
      sub_22E8FCA40(v6, a3[1], 0x182Cu, 0, (uint64_t)&v16);
      sub_22F0D4E74((uint64_t)a3);
      v15 = v8;
      v9 = sub_22E8906A0((uint64_t)&v16, &v15);
      v10 = sub_22F2F2168(v9, &v22);
      v11 = sub_22F2F2210(v10, (uint64_t)v21);
      sub_22F2F2210(v11, (uint64_t)&v19);
      sub_22E903BEC((unsigned int *)&v16);
      v12 = a3[1];
      v13 = v6[11] + 2128;
      v16 = 0;
      v17 = v13;
      v18 = 5993;
      sub_22E3B89A8(&v16, v19, v20);
      sub_22F0D4E74((uint64_t)a3);
      result = (unint64_t)sub_22EB55520((uint64_t)v6, v12, (uint64_t)&v16, v14);
      if (v16)
      {
        result = v17;
        if (v17)
          return sub_22E3BB10C(v17, (unint64_t)v16);
      }
    }
  }
  return result;
}

unsigned int *sub_22EB56A00(_QWORD *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  size_t v10;
  unint64_t v11;
  unsigned int *result;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;

  v17 = a2;
  sub_22E8FCA40(a1, a3[1], 0x1A32u, 0, (uint64_t)&v14);
  sub_22F0D4E74((uint64_t)a3);
  v13 = v5;
  v6 = sub_22E8906A0((uint64_t)&v14, &v13);
  sub_22F2F2168(v6, &v17);
  sub_22E903BEC((unsigned int *)&v14);
  v7 = a1[11] + 2128;
  v14 = 0;
  v15 = (unsigned int *)v7;
  v16 = 5993;
  v8 = a3[1];
  v9 = sub_22EFFBA38((*a3 >> 18) & 0x3F);
  sub_22E3B89A8(&v14, v9, v10);
  sub_22F0D4E74((uint64_t)a3);
  result = sub_22EB55520((uint64_t)a1, v8, (uint64_t)&v14, v11);
  if (v14)
  {
    result = v15;
    if (v15)
      return (unsigned int *)sub_22E3BB10C((unint64_t)v15, (unint64_t)v14);
  }
  return result;
}

unsigned int *sub_22EB56AD8@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v10;
  unsigned int v11[24];
  uint64_t v12;

  v12 = a3;
  sub_22E8FCA40((_QWORD *)a1, a2, 0xDDAu, 0, (uint64_t)v11);
  v6 = sub_22E8901B8((uint64_t)v11, &v12);
  v10 = (**(_DWORD **)(a1 + 72) >> 8) & 1;
  v7 = sub_22E89519C(v6, (unsigned int *)&v10);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v7;
  *(_OWORD *)(a4 + 9) = v8;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a4 + 32, v7 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v11);
}

unsigned int *sub_22EB56B80@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  int v8;
  unsigned int v9[24];

  sub_22E8FCA40((_QWORD *)a1, a2, 0xD15u, 0, (uint64_t)v9);
  v8 = (**(_DWORD **)(a1 + 72) >> 8) & 1;
  v5 = sub_22E89519C((uint64_t)v9, (unsigned int *)&v8);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a3 = *(_OWORD *)v5;
  *(_OWORD *)(a3 + 9) = v6;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a3 + 32, v5 + 32);
  *(_QWORD *)(a3 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v9);
}

void sub_22EB56C1C()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EB56C30@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  return sub_22E8FCA40(a2, a3, *(_DWORD *)(a1 + 12), 0, a4);
}

void sub_22EB56C4C()
{
  JUMPOUT(0x2348A0E9CLL);
}

unsigned int *sub_22EB56C60@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, a2, 0xDD9u, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

unsigned int *sub_22EB56CEC@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v10[24];
  uint64_t v11;
  uint64_t v12;

  v11 = a4;
  v12 = a3;
  sub_22E8FCA40(a1, a2, 0xDD8u, 0, (uint64_t)v10);
  v6 = sub_22E8901B8((uint64_t)v10, &v12);
  v7 = sub_22E8901B8(v6, &v11);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a5 = *(_OWORD *)v7;
  *(_OWORD *)(a5 + 9) = v8;
  *(_BYTE *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a5 + 32, v7 + 32);
  *(_QWORD *)(a5 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v10);
}

unsigned int *sub_22EB56D80@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  BOOL v10;
  unsigned int v11[24];
  uint64_t v12;

  v12 = a3;
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x161Du, 0, (uint64_t)v11);
  v10 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44;
  v6 = sub_22E894E38((uint64_t)v11, (unsigned __int8 *)&v10);
  v7 = sub_22E8901B8(v6, &v12);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v7;
  *(_OWORD *)(a4 + 9) = v8;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a4 + 32, v7 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v11);
}

unsigned int *sub_22EB56E3C@<X0>(_QWORD *a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  __int128 v6;
  unsigned int v8[24];
  uint64_t v9;

  v9 = a3;
  sub_22E8FCA40(a1, a2, 0xDD7u, 0, (uint64_t)v8);
  v5 = sub_22E8901B8((uint64_t)v8, &v9);
  v6 = *(_OWORD *)(v5 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 9) = v6;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v5 + 80))
    sub_22E907424(a4 + 32, v5 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
  return sub_22E903BEC(v8);
}

unsigned int *sub_22EB56EC8@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  BOOL v10;
  unsigned int v11[24];
  uint64_t v12;

  v12 = a3;
  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 24), 0x161Du, 0, (uint64_t)v11);
  v10 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 44;
  v6 = sub_22E894E38((uint64_t)v11, (unsigned __int8 *)&v10);
  v7 = sub_22E8901B8(v6, &v12);
  v8 = *(_OWORD *)(v7 + 9);
  *(_OWORD *)a4 = *(_OWORD *)v7;
  *(_OWORD *)(a4 + 9) = v8;
  *(_BYTE *)(a4 + 32) = 0;
  *(_BYTE *)(a4 + 80) = 0;
  if (*(_BYTE *)(v7 + 80))
    sub_22E907424(a4 + 32, v7 + 32);
  *(_QWORD *)(a4 + 88) = *(_QWORD *)(v7 + 88);
  return sub_22E903BEC(v11);
}

void sub_22EB56F88()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EB56F9C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (***(uint64_t (****)(_QWORD, uint64_t, _QWORD))(a1 + 16))(*(_QWORD *)(a1 + 16), a2, a3);
}

uint64_t sub_22EB56FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

void sub_22EB62928(uint64_t a1, _DWORD *a2, __n128 a3)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;

  if (a2)
  {
    v3 = a2;
    while (1)
    {
      switch(*(_BYTE *)v3)
      {
        case 0x66:
          sub_22EB6362C((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0x67:
          sub_22EB636B8((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0x68:
          sub_22EB63768(a1, (uint64_t)v3);
          return;
        case 0x6B:
          sub_22EB637EC((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x6C:
          sub_22EB63898((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0x6D:
          sub_22EB63A38((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0x6E:
        case 0x84:
        case 0xAD:
        case 0xC5:
          goto LABEL_122;
        case 0x6F:
          sub_22EB63AA8((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x70:
          sub_22EB63BA8((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x71:
          sub_22EB63D30((uint64_t *)a1, v3, a3);
          return;
        case 0x72:
          sub_22EB63E00((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x73:
          sub_22EB64068(a1, (uint64_t)v3);
          return;
        case 0x74:
          sub_22EB64150((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x75:
        case 0x80:
        case 0x9A:
        case 0xA9:
        case 0xAA:
        case 0xAE:
        case 0xAF:
        case 0xB2:
        case 0xB5:
        case 0xC2:
        case 0xC3:
        case 0xCE:
        case 0xCF:
        case 0xE1:
        case 0xE2:
        case 0xE3:
        case 0xE7:
          nullsub_910(v3);
          return;
        case 0x76:
          sub_22EB641AC(a1, (unsigned __int8 *)v3);
          return;
        case 0x77:
          sub_22EB647AC(a1, (unsigned __int8 *)v3);
          return;
        case 0x78:
          sub_22EB64AE0((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x79:
          sub_22EB64BB0((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x7A:
          sub_22EB64C94(a1, (uint64_t)v3);
          return;
        case 0x7B:
          sub_22EB64E0C(a1, (uint64_t)v3);
          return;
        case 0x7C:
          sub_22EB65164((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x7D:
          sub_22EB65380(a1, (uint64_t)v3);
          return;
        case 0x7E:
          sub_22EB65490((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x7F:
          sub_22EB65918((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x81:
          sub_22EB65A7C((unsigned int **)a1, (uint64_t)v3);
          return;
        case 0x82:
          sub_22EB65FBC(a1, (uint64_t *)v3);
          return;
        case 0x83:
          sub_22EB66280((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0x85:
          sub_22EB66318((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x86:
          sub_22EB66378((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x87:
          sub_22EB663D4((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x88:
          sub_22EB66630((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x89:
          sub_22EB668BC((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0x8A:
          sub_22EB66A78((uint64_t *)a1, v3);
          return;
        case 0x8B:
          sub_22EB66C50((uint64_t *)a1, v3);
          return;
        case 0x8C:
        case 0x8E:
          sub_22EB66DAC((uint64_t *)a1, v3);
          return;
        case 0x8D:
          v9 = *(_QWORD *)(a1 + 80);
          v10 = sub_22EFFED0C(*(unsigned __int8 **)((char *)v3 + *((unsigned __int8 *)v3 + 3)));
          v11 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)v9, v10);
          v12 = *(_QWORD *)(v9 + 8);
          v13 = 16;
          if (v12 == *(_QWORD *)v9)
            v13 = 20;
          if (v11 != (void **)(v12 + 8 * *(unsigned int *)(v9 + v13)))
          {
            *v11 = (void *)-2;
            ++*(_DWORD *)(v9 + 24);
          }
          sub_22EB7FEA0((uint64_t *)a1, v3);
          return;
        case 0x8F:
          sub_22EB66DB0((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x90:
          sub_22EB66E1C((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0x91:
          sub_22EB66EAC((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x92:
        case 0x93:
        case 0x94:
        case 0x95:
        case 0x96:
        case 0x97:
          sub_22EB66F54(a1, v3);
          return;
        case 0x98:
          sub_22EB66F58((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x99:
          sub_22EB66FE8(a1, (unsigned __int8 *)v3);
          return;
        case 0x9B:
          sub_22EB67014((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x9C:
          sub_22EB670C4((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x9D:
          sub_22EB67184((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0x9E:
          sub_22EB672A8((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0x9F:
          sub_22EB67330((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xA0:
          sub_22EB67384((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xA1:
          v14 = *(_QWORD *)(a1 + 80);
          v15 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)v14, v3);
          v16 = *(_QWORD *)(v14 + 8);
          v17 = 16;
          if (v16 == *(_QWORD *)v14)
            v17 = 20;
          if (v15 != (void **)(v16 + 8 * *(unsigned int *)(v14 + v17)))
          {
            *v15 = (void *)-2;
            ++*(_DWORD *)(v14 + 24);
          }
          return;
        case 0xA2:
          sub_22EB673D0((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xA3:
          sub_22EB67440((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xA4:
          sub_22EB6744C(a1, (uint64_t)v3);
          return;
        case 0xA6:
          sub_22EB67898((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xA7:
          sub_22EB67A08((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xA8:
          sub_22EB67B10(a1, (const void **)v3);
          return;
        case 0xAB:
          sub_22EB67B3C((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xAC:
          if ((v3[1] & 2) == 0)
          {
LABEL_122:
            sub_22EB63AA0(a1, (uint64_t)v3);
            return;
          }
          v5 = *(_QWORD *)(a1 + 104);
          v6 = **(_QWORD **)(a1 + 88);
          while (v5 != v6)
          {
            v8 = *(_QWORD *)(v5 - 8);
            v5 -= 8;
            v7 = v8;
            if (v3 == (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8))
            {
              v6 = v5 + 8;
              goto LABEL_10;
            }
          }
          v7 = *(_QWORD *)(v6 - 8);
LABEL_10:
          *(_QWORD *)(v6 - 8) = v7 | 4;
          v3 = (_DWORD *)*((_QWORD *)v3 + 2);
          if (!v3)
            return;
          break;
        case 0xB0:
          sub_22EB67BD0((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xB1:
          sub_22EB67DF8((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xB3:
          sub_22EB67EC0(a1, (uint64_t)v3);
          return;
        case 0xB4:
          sub_22EB67F38((uint64_t *)a1, (unint64_t)v3);
          return;
        case 0xB6:
          sub_22EB68150((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xB7:
          sub_22EB6952C(a1, (uint64_t)v3);
          return;
        case 0xB8:
          sub_22EB69638((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xB9:
          sub_22EB696D8(a1, (uint64_t)v3);
          return;
        case 0xBA:
          sub_22EB697C4(a1, *((_QWORD *)v3 + 2));
          return;
        case 0xBB:
          sub_22EB697D8((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xBC:
          sub_22EB69888((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xBD:
          sub_22EB69E30((uint64_t **)a1, (uint64_t)v3);
          return;
        case 0xBF:
          sub_22EB6A118((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xC0:
          sub_22EB6A210((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xC1:
          sub_22EB6A39C((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xC4:
          sub_22EB6A78C((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xC6:
          sub_22EB6A7E4((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xC7:
          sub_22EB6A8C8((_QWORD **)a1, (unint64_t)v3);
          return;
        case 0xC8:
          sub_22EB6A9B4((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xC9:
          sub_22EB6AD64((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xCA:
          sub_22EB6AE44((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xCB:
          sub_22EB6AE9C((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xCC:
          sub_22EB6B190(*(_QWORD *)a1, (uint64_t)v3);
          return;
        case 0xCD:
          sub_22EB6B194((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xD0:
          sub_22EB6B2C8((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xD1:
          sub_22EB6B354((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xD2:
          sub_22EB6B548(a1, (void **)v3);
          return;
        case 0xD3:
          sub_22EB6B5AC((uint64_t *)a1, v3);
          return;
        case 0xD4:
          sub_22EB6B974(a1, v3);
          return;
        case 0xD5:
          sub_22EB6BD80((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xD6:
          sub_22EB6BDEC((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xD7:
          sub_22EB6BE44((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xD8:
          sub_22F2F74C4((uint64_t *)a1, v3);
          return;
        case 0xD9:
          sub_22EB6BF40((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xDA:
          sub_22EB6BFB8((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xDB:
          sub_22EB6C100((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xDC:
          sub_22EB6C698((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xDD:
          sub_22EB6C700((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xDE:
          sub_22EB6C958((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xDF:
          sub_22EB6CE44(a1, (uint64_t)v3);
          return;
        case 0xE0:
          sub_22EB6CEF8((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xE4:
          sub_22EB6D188((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xE5:
          sub_22EB6D248((_QWORD **)a1, (uint64_t)v3);
          return;
        case 0xE6:
          sub_22EB6D2FC((uint64_t *)a1, v3);
          return;
        case 0xE8:
          sub_22EB6D948((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xE9:
          sub_22EB6DBDC((uint64_t *)a1, (uint64_t)v3);
          return;
        case 0xEA:
          sub_22EB6DC74((_QWORD **)a1, (uint64_t)v3);
          return;
        default:
          return;
      }
    }
  }
}

uint64_t sub_22EB6362C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB62928((int)a1, *(void **)(v2 + 48));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL) || *(_QWORD *)(v2 + 48) != v6)
    return sub_22EB2F86C(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL), 0, v6);
  return v2;
}

uint64_t sub_22EB636B8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB62928((int)a1, *(void **)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EB62928((int)a1, *(void **)(v2 + 40));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 32) != v7
    || *(_QWORD *)(v2 + 40) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2F86C(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return v2;
}

uint64_t sub_22EB63768(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 24);
  v6 = v4;
  v7 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v6, &v7)
    && v7 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v4 = *(_QWORD *)(v7 + 8);
  }
  if (v4)
    return sub_22F32F628(*(_QWORD *)a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v4);
  else
    return 1;
}

uint64_t sub_22EB637EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v12;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB62928((int)a1, *(void **)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if ((unsigned __int8 *)v7 != v6 || *(_QWORD *)(v2 + 24) != v8)
  {
    sub_22F0D5A50(v7);
    v9 = *(_DWORD *)(v2 + 4);
    v12 = v8;
    return sub_22EB296C0(*a1, 0, v6, v10, (uint64_t *)&v12, 1, v9);
  }
  return v2;
}

uint64_t sub_22EB63898(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  v4 = sub_22EB6DD04(a1, *(uint64_t **)(a2 + 48));
  if (!v4)
    return 1;
  v5 = v4;
  if (v4 != *(unint64_t **)(v2 + 48))
  {
    v6 = *a1;
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *((unsigned int *)v6 + 426);
    sub_22EB4DDB8((uint64_t)(v6 + 461), &v19, v16, (__int16 *)((char *)v6 + 1693), &v18, &v17);
    v7 = *((unsigned int *)v6 + 924);
    v8 = v7 - 2;
    v9 = v6[461];
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)((char *)v6 + 1693) = 0;
    if (*((_DWORD *)v6 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 222), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08((uint64_t)(v6 + 230), (uint64_t *)(v12 - 496));
    }
    v13 = sub_22EB62928((int)a1, *(void **)(v2 + 32));
    if ((v13 & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if (*(_QWORD *)(v2 + 32) != (v13 & 0xFFFFFFFFFFFFFFFELL))
      {
        sub_22EB48E64(v6);
        return sub_22EBC8B4C(*a1, *(_BYTE *)(v2 + 16) & 3, *(_DWORD *)(v2 + 40), v5, v14, *(_DWORD *)(v2 + 44));
      }
    }
    sub_22EB48E64(v6);
  }
  return v2;
}

uint64_t sub_22EB63A38(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22EB7239C((uint64_t)a1, *(_QWORD *)(a2 + 8));
  return sub_22F32DD9C(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22EB63AA0(int a1, uint64_t a2)
{
  return sub_22EB62928(a1, *(void **)(a2 + 16));
}

uint64_t sub_22EB63AA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  char v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[9];

  v2 = a2;
  v11[8] = *MEMORY[0x24BDAC8D0];
  v8 = 0;
  v9 = v11;
  v10 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 72);
  }
  if ((sub_22EB7570C(a1, (void **)(v2 + 16), v4, 0, (uint64_t)&v9, &v8) & 1) != 0)
  {
    v2 = 1;
  }
  else if (v8)
  {
    v5 = *(unsigned int *)(v2 + 80);
    v6 = *(unsigned int *)(v2 + 76) | (unint64_t)(v5 << 32);
    v2 = sub_22E983290((_QWORD *)*a1, v6, v6, v5, (void **)v9, v10, *(_DWORD *)(v2 + 84), 1);
  }
  if (v9 != v11)
    free(v9);
  return v2;
}

uint64_t sub_22EB63BA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB62928((int)a1, *(void **)(v2 + 24));
  v6 = v5;
  if ((v5 & 1) != 0)
    return 1;
  v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) != v7 || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v8 = *(_DWORD *)v2;
    if (((*(_DWORD *)v2 >> 18) & 0x3Eu) - 22 <= 9)
      return sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (v8 >> 18) & 0x3F, v7, v5 & 0xFFFFFFFFFFFFFFFELL);
    v10 = *a1;
    v11 = *(_DWORD *)(*a1 + 56);
    v12 = *(_QWORD *)(*a1 + 1296);
    v17 = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
    if ((v8 & 0x1000000) != 0)
    {
      v14 = 32;
      if (*(_DWORD *)v2 == 113)
        v14 = 48;
      v13 = *(_QWORD *)(v2 + v14);
    }
    else
    {
      v13 = 0;
    }
    sub_22E51A8D0(&v18, *(_QWORD *)(v10 + 72));
    v15 = *a1;
    *(_DWORD *)(v15 + 56) = v18 & ~HIDWORD(v13) | HIDWORD(v13) & v13;
    *(_QWORD *)(v15 + 1296) = v13;
    v2 = sub_22EB4785C(*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x3F, v7, v6 & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(v10 + 56) = v11;
    *(_QWORD *)(v10 + 1296) = v12;
    v16 = *(_QWORD *)(v10 + 80);
    *(_QWORD *)(v16 + 520) = v17;
    *(_DWORD *)(v16 + 528) = v17;
  }
  return v2;
}

__n128 sub_22EB63D30(uint64_t *a1, _DWORD *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 56);
  v7 = *(_QWORD *)(*a1 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  if ((*a2 & 0x1000000) != 0)
  {
    v9 = 8;
    if (*a2 == 113)
      v9 = 12;
    v8 = *(_QWORD *)&a2[v9];
  }
  else
  {
    v8 = 0;
  }
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v8) | HIDWORD(v8) & v8;
  *(_QWORD *)(v10 + 1296) = v8;
  sub_22EB63BA8(a1, (uint64_t)a2);
  *(_DWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 1296) = v7;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22EB63E00(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[10];
  void *v24;
  __int128 v25;
  _BYTE v26[16];
  char v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[32];
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[6];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  sub_22F32F84C((_QWORD *)*a1, *(_DWORD *)(v4 + 24), 0);
  v5 = sub_22F30914C(*a1);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFFDFFF | (((*(_DWORD *)(v4 + 48) >> 13) & 1) << 13);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFF7FFF | (((*(_DWORD *)(v4 + 48) >> 15) & 1) << 15);
  v31 = v33;
  v32 = 0x400000000;
  v28 = v30;
  v29 = 0x400000000;
  v6 = sub_22F3C22A4(a2);
  v7 = v6;
  v8 = 0;
  v24 = v26;
  v25 = xmmword_22F44E350;
  v27 = 0;
  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(_DWORD *)(v4 + 80);
  if ((*(_BYTE *)(v6 + 23) & 4) != 0)
    v8 = sub_22E47E270(v6);
  if (sub_22EB74800(a1, v9, v10, 0, v8, (uint64_t)&v28, (uint64_t)&v31, (uint64_t)&v24))
  {
    v20 = *a1;
  }
  else
  {
    v11 = sub_22EB7239C((uint64_t)a1, *(_QWORD *)(v7 + 24));
    sub_22E4913B4(v7, (uint64_t)v23);
    if (v27)
    {
      sub_22F24FB88(&v24, v29);
      v12 = v24;
    }
    else
    {
      v12 = 0;
    }
    v23[8] = v12;
    *(_QWORD *)(v5 + 1440) = sub_22EE80544((_QWORD *)*a1, v11, (unint64_t *)v28, v29, 0, 0, (uint64_t)v23);
    if ((_DWORD)v32)
      sub_22F3ACFA8(*(_DWORD **)(v5 + 1424), v31, v32);
    if ((*(_BYTE *)(v4 + 49) & 0x80) == 0)
    {
      *(_BYTE *)(v5 + 1408) = 0;
      *(_QWORD *)(v5 + 1416) = v11;
    }
    v13 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 64))(*(_QWORD *)(a2 + 16));
    v19 = sub_22EB75F08(a1, v13, 0, v14, v15, v16, v17, v18);
    v20 = *a1;
    if ((v19 & 1) == 0)
    {
      v21 = sub_22EB4ADC8(v20, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24), (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_12;
    }
  }
  sub_22F32F928(v20);
  v21 = 1;
LABEL_12:
  if (v24 != v26)
    free(v24);
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  return v21;
}

uint64_t sub_22EB64068(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22EB62928(a1, *(void **)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22EB64150(uint64_t *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (int)a1;
  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1, v7, v8, v9, v10);
  }
  return sub_22EB62928(v3, *(void **)(a2 + 24));
}

uint64_t sub_22EB641AC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  void **v36;
  uint64_t **v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  int v59;
  int v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[64];
  void *v64;
  uint64_t v65;
  _QWORD v66[10];

  v2 = (uint64_t)a2;
  v66[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a1 + 112);
  *(_BYTE *)(a1 + 112) = 1;
  if (v4)
  {
    v5 = *((_DWORD *)a2 + 8);
    if (v5)
    {
      if (v5 == 1)
        goto LABEL_10;
      v6 = a2 + 40;
      v7 = *a2;
      v8 = v7 == 119;
      if (v7 == 119)
        v9 = a2;
      else
        v9 = 0;
      v10 = v9 + 48;
      if (v8)
        v6 = v10;
      if (sub_22EFFF908(*((unsigned __int8 **)v6 + 1)))
      {
LABEL_10:
        v11 = *(unsigned __int8 *)v2;
        v12 = v11 == 119;
        if (v11 == 119)
          v13 = v2;
        else
          v13 = 0;
        v14 = (unsigned __int8 **)(v13 + 48);
        if (!v12)
          v14 = (unsigned __int8 **)(v2 + 40);
        if (!sub_22EFFF908(*v14) && (*(_DWORD *)v2 & 0x100000) == 0)
        {
          v15 = *(_DWORD *)v2;
          v16 = v15 == 119;
          if (v15 == 119)
            v17 = v2;
          else
            v17 = 0;
          v18 = (unsigned __int8 **)(v17 + 48);
          if (!v16)
            v18 = (unsigned __int8 **)(v2 + 40);
          return sub_22EB759A0((uint64_t *)a1, *v18, 0);
        }
      }
    }
  }
  v20 = sub_22EB7239C(a1, *(_QWORD *)(v2 + 8));
  if (v20 < 0x10)
    return 1;
  v21 = v20;
  v22 = *(_QWORD *)(v2 + 16);
  v61 = (void *)v22;
  v64 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v61, &v64)
    && v64 != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v22 = *((_QWORD *)v64 + 1);
  }
  if (!v22)
    return 1;
  v57 = 0;
  v61 = v63;
  v62 = 0x800000000;
  v23 = *(_QWORD *)a1;
  v24 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x100000) == 0
    || ((v26 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v26 <= 3)
      ? (v27 = v26 == 2)
      : (v27 = 1),
        v27))
  {
    v25 = 1;
  }
  else
  {
    v25 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v64 = 0;
      v59 = 3;
      v60 = 1;
      v58 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v60, (int *)&v58, (__int16 *)(v23 + 1693), (uint64_t *)&v64, &v59);
      v28 = *(unsigned int *)(v23 + 3696);
      v29 = v28 - 2;
      v30 = *(_QWORD *)(v23 + 3688);
      v31 = *(_DWORD *)(v30 + 576 * (v28 - 2));
      if (v31 == 5)
      {
        *(_BYTE *)(v30 + 576 * v28 - 4) = *(_BYTE *)(v30 + 576 * v29 + 572);
        v32 = 1;
      }
      else if (v31 == 2)
      {
        *(_BYTE *)(v30 + 576 * v28 - 4) = 1;
        v32 = *(_BYTE *)(v30 + 576 * v29 + 573) != 0;
      }
      else
      {
        v32 = 0;
        *(_BYTE *)(v30 + 576 * v28 - 4) = 0;
      }
      v33 = v30 + 576 * v28;
      *(_BYTE *)(v33 - 3) = v32;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v33 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v33 - 496));
      }
      v25 = 0;
      v24 = *(unsigned __int8 *)v2;
    }
  }
  v34 = v24 == 119;
  if (v24 == 119)
    v35 = v2;
  else
    v35 = 0;
  v36 = (void **)(v35 + 48);
  v37 = (uint64_t **)(v2 + 40);
  if (v34)
    v38 = v36;
  else
    v38 = (void **)(v2 + 40);
  if (sub_22EB7570C((uint64_t *)a1, v38, *(_DWORD *)(v2 + 32), 1, (uint64_t)&v61, &v57))
  {
    if ((v25 & 1) == 0)
      sub_22EB48E64(v23);
    v2 = 1;
    goto LABEL_69;
  }
  if ((v25 & 1) == 0)
    sub_22EB48E64(v23);
  if (v21 != *(_QWORD *)(v2 + 8) || v22 != *(_QWORD *)(v2 + 16) || v57)
  {
    if (*(_BYTE *)v2 != 119)
    {
      v45 = *(_DWORD *)(v2 + 4);
      goto LABEL_62;
    }
    v50 = **v37;
    v51 = v50;
    while (1)
    {
      if ((v51 & 0xF) != 0)
        goto LABEL_83;
      v52 = *(unsigned __int8 *)(*(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v52 > 0x39)
      {
LABEL_78:
        if (sub_22F115668(v51))
          v50 = v51;
        v51 = sub_22F115B7C(v51);
        if (!v51)
          goto LABEL_99;
      }
      else
      {
        if (v52 == 24)
          goto LABEL_98;
        if (v52 == 26)
        {
          if ((*(_BYTE *)(v51 + 23) & 0x10) != 0)
          {
LABEL_98:
            v50 = v51;
LABEL_99:
            v45 = sub_22F115668(v50);
LABEL_62:
            v46 = v45;
            v47 = v22;
            if ((*(_BYTE *)(v22 + 87) & 0x20) != 0)
              v47 = *(_QWORD *)(v22 + 176);
            v48 = *(_DWORD *)v2;
            v49 = *(_QWORD *)(v2 + 24);
            v64 = v66;
            v65 = 0x800000000;
            if ((sub_22EACCC94(*(uint64_t **)a1, v47, v21, (uint64_t)v61, v62, v45, (uint64_t)&v64, 0, 0) & 1) != 0)
              v2 = 1;
            else
              v2 = sub_22EACC4D8(*(_QWORD *)a1, v46, v21, v22, (v48 >> 18) & 1, (uint64_t *)v64, v65, (v48 & 0x80000) != 0, (v48 & 0x100000) != 0, (v48 & 0x200000) != 0, (v48 & 0x400000) != 0, v56, (v48 >> 23) & 7, v49);
            if (v64 != v66)
              free(v64);
            goto LABEL_69;
          }
        }
        else if (((1 << v52) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_78;
        }
LABEL_83:
        v51 = sub_22F115B7C(v51);
      }
    }
  }
  v43 = *(_QWORD *)a1;
  if (*(_BYTE *)v2 != 119)
  {
    v44 = *(_DWORD *)(v2 + 4);
    goto LABEL_59;
  }
  v53 = **v37;
  for (i = v53; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_97;
      v55 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v55 <= 0x39)
        break;
LABEL_92:
      if (sub_22F115668(i))
        v53 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_101;
    }
    if (v55 == 24)
      goto LABEL_100;
    if (v55 == 26)
      break;
    if (((1 << v55) & 0x20000000200003CLL) == 0)
      goto LABEL_92;
LABEL_97:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_97;
LABEL_100:
  v53 = i;
LABEL_101:
  v44 = sub_22F115668(v53);
LABEL_59:
  sub_22EB4E494(v43, v44, v22, 1, v39, v40, v41, v42);
LABEL_69:
  if (v61 != v63)
    free(v61);
  return v2;
}

uint64_t sub_22EB647AC(uint64_t a1, unsigned __int8 *a2)
{
  void **v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  void **v22;
  void **v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33[2];
  char v34;
  uint64_t v35;
  int v36;
  int v37;
  void *v38[2];
  _QWORD v39[9];

  v39[8] = *MEMORY[0x24BDAC8D0];
  v4 = (void **)(a2 + 40);
  v5 = sub_22EB7F910((uint64_t *)a1, *((uint64_t **)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = *((_QWORD *)a2 + 2);
  v33[0] = v7;
  v38[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v33, v38)
    && v38[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v7 = *((_QWORD *)v38[0] + 1);
  }
  if (!v7)
    return 1;
  v34 = 0;
  v38[0] = v39;
  v38[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v12 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576), v12 <= 3)
      ? (v13 = v12 == 2)
      : (v13 = 1),
        v13))
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v33[0] = 0;
      v36 = 3;
      v37 = 1;
      v35 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v37, (int *)&v35, (__int16 *)(v8 + 1693), v33, &v36);
      v14 = *(unsigned int *)(v8 + 3696);
      v15 = v14 - 2;
      v16 = *(_QWORD *)(v8 + 3688);
      v17 = *(_DWORD *)(v16 + 576 * (v14 - 2));
      if (v17 == 5)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = *(_BYTE *)(v16 + 576 * v15 + 572);
        v18 = 1;
      }
      else if (v17 == 2)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = 1;
        v18 = *(_BYTE *)(v16 + 576 * v15 + 573) != 0;
      }
      else
      {
        v18 = 0;
        *(_BYTE *)(v16 + 576 * v14 - 4) = 0;
      }
      v19 = v16 + 576 * v14;
      *(_BYTE *)(v19 - 3) = v18;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v19 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v19 - 496));
      }
      v10 = 0;
      v9 = *a2;
    }
  }
  v20 = v9 == 119;
  if (v9 == 119)
    v21 = a2;
  else
    v21 = 0;
  v22 = (void **)(v21 + 48);
  if (v20)
    v23 = v22;
  else
    v23 = v4;
  v24 = sub_22EB7570C((uint64_t *)a1, v23, *((_DWORD *)a2 + 8), 1, (uint64_t)v38, &v34);
  if ((v10 & 1) == 0)
    sub_22EB48E64(v8);
  if ((v24 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    if (v6 == *v4 && v7 == *((_QWORD *)a2 + 2) && !v34)
    {
      v25 = *(_QWORD *)a1;
      v26 = sub_22F060A34((uint64_t)a2);
      sub_22EB4E494(v25, v26, v7, 1, v27, v28, v29, v30);
      v31 = sub_22EBCC6C0(*(_QWORD *)a1, (uint64_t)a2);
    }
    else
    {
      v33[0] = *v6;
      v33[1] = (uint64_t)(v6 + 1);
      sub_22F1167E8(v33);
      sub_22F3C57CC(a2);
      v31 = sub_22EBBC368();
    }
    v11 = v31;
  }
  if (v38[0] != v39)
    free(v38[0]);
  return v11;
}

uint64_t sub_22EB64AE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v9 = v4;
  v10 = 0;
  if (sub_22E793870(a1 + 1, &v9, &v10) && v10 != a1[1] + 16 * *((unsigned int *)a1 + 6))
    v4 = *(_QWORD *)(v10 + 8);
  if (!v4)
    return 1;
  v5 = *a1;
  if (v4 != *(_QWORD *)(v2 + 16))
  {
    v6 = *(_QWORD *)(v5 + 216);
LABEL_9:
    v7 = *(_DWORD *)(v2 + 4);
    v2 = sub_22E3CD3D4(*(_QWORD *)(v5 + 88) + 2032, 32, 3);
    sub_22E8BB138(v2, 120, v7, v4, v6);
    return v2;
  }
  v6 = *(_QWORD *)(v5 + 216);
  if (*(_QWORD *)(v2 + 24) != v6)
    goto LABEL_9;
  return v2;
}

uint64_t sub_22EB64BB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v11 = v4;
  v12 = 0;
  if (sub_22E793870(a1 + 1, &v11, &v12) && v12 != a1[1] + 16 * *((unsigned int *)a1 + 6))
    v4 = *(_QWORD *)(v12 + 8);
  if (!v4)
    return 1;
  v5 = *a1;
  if (v4 != *(_QWORD *)(v2 + 16))
  {
    v6 = *(_QWORD *)(v5 + 216);
LABEL_11:
    sub_22EFF605C(v2);
    v9 = v8;
    v10 = *(_QWORD *)(v5 + 88);
    v2 = sub_22E3CD3D4(v10 + 2032, 32, 3);
    sub_22F3C5EB8(v2, v10, v9, v4, *(_QWORD *)(v4 + 48), v6);
    return v2;
  }
  v6 = *(_QWORD *)(v5 + 216);
  if (*(_QWORD *)(v2 + 24) != v6)
    goto LABEL_11;
  return v2;
}

uint64_t sub_22EB64C94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = a2;
  v7 = sub_22EB62928(a1, *(void **)(a2 + 24));
  if ((v7 & 1) != 0)
    return 1;
  v8 = *(_QWORD *)(v2 + 16);
  if (v8)
  {
    v22 = *(_QWORD *)(v2 + 16);
    v23 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v22, &v23))
    {
      if (v23 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        v8 = *(_QWORD *)(v23 + 8);
        if (!v8)
          return 1;
      }
    }
  }
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 24) != (v7 & 0xFFFFFFFFFFFFFFFELL) || v8 != *(_QWORD *)(v2 + 16))
    return sub_22EBC2B50(*(_QWORD *)a1, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 1, (*(_DWORD *)v2 >> 19) & 1, v9);
  if (v8)
  {
    sub_22EB4E494(*(_QWORD *)a1, *(_DWORD *)(v2 + 4), v8, 1, v9, v4, v5, v6);
    v9 = *(_QWORD *)(v2 + 24);
  }
  if ((*(_BYTE *)(v9 + 1) & 0x80) == 0)
  {
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v12 = sub_22F0602E8(v2);
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v11, v12) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v13)
    {
      if (*(_BYTE *)(v13 + 16) == 45)
      {
        v14 = sub_22F114198(*(_QWORD *)(v13 + 24));
        v15 = *(_QWORD *)a1;
        v16 = *(_DWORD *)(v2 + 4);
        v17 = sub_22EC6602C(v15, v14);
        sub_22EB4E494(v15, v16, v17 & 0xFFFFFFFFFFFFFFF8, 1, v18, v19, v20, v21);
      }
    }
  }
  return v2;
}

uint64_t sub_22EB64E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  __n128 v30;
  void *v31[2];
  _DWORD v32[66];
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  v4 = *(void **)(a2 + 16);
  if (v4 && (sub_22EFFFB48(*(unsigned __int8 **)(a2 + 16)) & 1) == 0)
  {
    v13 = sub_22EB62928(a1, v4);
    if ((v13 & 1) != 0)
      return 1;
    v31[0] = 0;
    v30.n128_u8[0] = 0;
    v14 = (*(_DWORD *)v2 & 0x40000) != 0 ? 36 : 25;
    v15 = sub_22EBCD1E4(*(unsigned int **)a1, 0, v13 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(v2 + 4), v14, (unint64_t *)v31, &v30);
    v7 = v15;
    if ((v15 & 1) != 0)
      return 1;
    v8 = v31[0];
    v5 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EB7239C(a1, *(_QWORD *)(v2 + 24));
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      v6 = sub_22F10CF48(v6);
    v7 = 0;
    v4 = 0;
    v8 = *(void **)(v6 + 32);
  }
  v9 = *(unsigned int *)v2;
  if ((v9 & 0x100000) != 0)
  {
    v11 = (_DWORD *)(v2 + 72);
    if ((v9 & 0x80000) != 0 && *v11)
      v12 = *(unsigned int *)(v2 + 84);
    else
      v12 = 0;
    v10 = *(_QWORD *)&v11[8 * v12 + 4 * ((v9 >> 19) & 1)];
  }
  else
  {
    v10 = 0;
  }
  v30.n128_u64[0] = v10;
  v31[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v30, v31)
    && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v31[0] + 1);
  }
  v16 = *(_QWORD *)(v2 + 32);
  if (v16)
  {
    v17 = sub_22EB723F0((uint64_t *)a1, v16, *(void **)(v2 + 40), (unint64_t)v8, v10);
    if (!v17)
      return 1;
    v19 = v17;
    v20 = v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if ((*(_BYTE *)(v2 + 2) & 8) != 0)
    v21 = *(_DWORD *)(v2 + 80);
  else
    v21 = 0;
  sub_22EB7ADEC(&v30, (uint64_t *)a1, (__n128 *)(v2 + 48));
  if (!v30.n128_u64[0])
    return 1;
  v22 = *(unsigned int *)v2;
  if ((v22 & 0x80000) != 0 && (v23 = *(_DWORD *)(v2 + 72)) != 0)
  {
    v24 = *(_DWORD *)(v2 + 76);
    v31[0] = v32;
    v31[1] = (void *)0x800000000;
    v32[64] = v23;
    v32[65] = v24;
    v25 = v2 + 72 + 16 * ((v22 >> 19) & 1);
    if ((sub_22EB7FC00(a1, v25, v25 + 32 * *(unsigned int *)(v2 + 84)) & 1) != 0)
      v2 = 1;
    else
      v2 = sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (*(_DWORD *)v2 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, (uint64_t)v31);
    if (v31[0] != v32)
      free(v31[0]);
  }
  else
  {
    if (v4 != (void *)(v7 & 0xFFFFFFFFFFFFFFFELL)
      || v5 != *(_QWORD *)(v2 + 24)
      || v19 != *(_QWORD *)(v2 + 32)
      || v20 != *(_QWORD *)(v2 + 40)
      || v30.n128_u64[0] != *(_QWORD *)(v2 + 48))
    {
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
    }
    if ((v22 & 0x100000) != 0)
    {
      v27 = (_DWORD *)(v2 + 72);
      if ((v22 & 0x80000) != 0 && *v27)
        v28 = *(unsigned int *)(v2 + 84);
      else
        v28 = 0;
      v26 = *(_QWORD *)&v27[8 * v28 + 4 * ((v22 >> 19) & 1)];
    }
    else
    {
      v26 = 0;
    }
    if (v10 != v26)
      return sub_22F3012E8((_QWORD **)a1, v7 & 0xFFFFFFFFFFFFFFFELL, v5, (v22 >> 18) & 1, *(_DWORD *)(v2 + 4), v19, v20, v21, v10, (uint64_t)&v30, 0);
  }
  return v2;
}

uint64_t sub_22EB65164(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void *v36[2];
  _QWORD v37[5];

  v2 = a2;
  v37[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(void **)(a2 + 32);
  if (v4)
  {
    v5 = sub_22EB62928((int)a1, v4);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v2 + 40);
  if (!v7 || (*(_BYTE *)(v7 + 1) & 0x20) == 0)
    v7 = *(_QWORD *)(v2 + 48);
  v36[0] = v37;
  v36[1] = (void *)0x200000000;
  v8 = *a1;
  v34 = 7;
  v35 = v7;
  sub_22EE7377C(v8, (uint64_t)&v34, (uint64_t)v36);
  v9 = *(_DWORD *)(v2 + 28);
  v10 = v9 != 0;
  v11 = v9 != 0;
  v12 = v9 - 1;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v16 = *(void **)(v2 + 40);
  if (v16)
  {
    v17 = sub_22EB62928((int)a1, v16);
    if ((v17 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
  }
  v18 = *(void **)(v2 + 48);
  if (!v18)
  {
    v19 = 0;
    goto LABEL_20;
  }
  v19 = sub_22EB62928((int)a1, v18);
  if ((v19 & 1) == 0)
  {
LABEL_20:
    v33 = v6;
    v20 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v21 = *(_QWORD *)(v2 + 40);
    if (v21 != v20 || *(_QWORD *)(v2 + 48) != (v19 & 0xFFFFFFFFFFFFFFFELL))
    {
      v23 = *(_DWORD *)(v2 + 16);
      if (!v23)
      {
        if (v21 && (*(_BYTE *)(v21 + 1) & 0x20) != 0)
        {
          sub_22F0D5A50(*(_QWORD *)(v2 + 40));
          v23 = v24;
        }
        else
        {
          v23 = *(_DWORD *)(v2 + 20);
        }
      }
      v25 = v13 | (v10 << 32);
      v26 = *(_DWORD *)(v2 + 56);
      v27 = v19 & 0xFFFFFFFFFFFFFFFELL;
      v29 = *(_DWORD *)(v2 + 20);
      v28 = *(_DWORD *)(v2 + 24);
      if (!v28)
      {
        if (!v21 || (v28 = *(_DWORD *)(v2 + 20), (*(_BYTE *)(v21 + 1) & 0x20) == 0))
        {
          v30 = *(_QWORD *)(v2 + 48);
          v31 = v23;
          v32 = v27;
          sub_22F0D60E4(v30);
          v27 = v32;
          v23 = v31;
        }
      }
      v2 = sub_22F34AF2C(*a1, v33, v23, v20, v26, v29, v27, v28, v25);
    }
    goto LABEL_22;
  }
LABEL_18:
  v2 = 1;
LABEL_22:
  *(_DWORD *)(v14 + 11992) = v15;
  if (v36[0] != v37)
    free(v36[0]);
  return v2;
}

uint64_t sub_22EB65380(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  unsigned int v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v4 = sub_22EB7239C(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)(v2 + 16);
  v16 = v6;
  v17 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v16, &v17)
    && v17 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v17 + 8);
  }
  if (!v6)
    return 1;
  if (v5 == *(_QWORD *)(v2 + 8) && v6 == *(_QWORD *)(v2 + 16))
  {
    sub_22EB4E494(*(_QWORD *)a1, *(_DWORD *)(v2 + 24), v6, 1, v7, v8, v9, v10);
  }
  else
  {
    v12 = *(_DWORD *)(v2 + 24);
    v13 = *(unsigned __int8 *)(v2 + 28);
    v14 = v13 & 1;
    v15 = (v13 >> 1) & 1;
    v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 32, 3);
    sub_22F2F3990(v2, v12, v5, v6, v14, v15);
  }
  return v2;
}

uint64_t sub_22EB65490(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned int v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _QWORD v56[10];

  v2 = a2;
  v56[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EB7F910(a1, *(uint64_t **)(a2 + 32));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *(_DWORD *)v2;
  v7 = (*(_DWORD *)v2 & 0x80000) == 0;
  if ((*(_DWORD *)v2 & 0x80000) == 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_10;
  }
  v11 = *(void **)(v2 + 56);
  if (!v11)
  {
    v12 = 0;
    v10 = *(_DWORD *)v2;
    goto LABEL_9;
  }
  v12 = sub_22EB62928((int)a1, v11);
  if ((v12 & 1) != 0)
    return 1;
  v10 = *(_DWORD *)v2;
LABEL_9:
  v8 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v9 = 1;
LABEL_10:
  v51 = 0;
  v54 = v56;
  v55 = 0x800000000;
  v13 = (_QWORD *)(v2 + 56);
  if ((v10 & 0x1800000) != 0)
    v14 = ((v10 >> 19) & 1) + 1;
  else
    v14 = (v10 >> 19) & 1;
  if ((sub_22EB7570C(a1, (void **)&v13[v14], *(_DWORD *)(v2 + 4), 1, (uint64_t)&v54, &v51) & 1) != 0)
    goto LABEL_14;
  v19 = *(unsigned int *)v2;
  if ((v19 & 0x1800000) != 0)
  {
    v20 = (v19 >> 19) & 1;
    v21 = v13[v20];
    if (v21)
    {
      v50 = sub_22EB759A0(a1, (unsigned __int8 *)v13[v20], 1);
      if ((v50 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      v50 = 0;
    }
  }
  else
  {
    v50 = 0;
    v21 = 0;
  }
  v49 = v8;
  v22 = *(_QWORD *)(v2 + 16);
  if (!v22
    || (v52 = *(_QWORD *)(v2 + 16), v53 = 0, !sub_22E793870(a1 + 1, &v52, &v53))
    || v53 == a1[1] + 16 * *((unsigned int *)a1 + 6)
    || (v22 = *(_QWORD *)(v53 + 8)) != 0)
  {
    v48 = v9;
    v23 = *(_QWORD *)(v2 + 24);
    if (!v23
      || (v52 = *(_QWORD *)(v2 + 24), v53 = 0, !sub_22E793870(a1 + 1, &v52, &v53))
      || v53 == a1[1] + 16 * *((unsigned int *)a1 + 6)
      || (v23 = *(_QWORD *)(v53 + 8)) != 0)
    {
      if (v5 == *(unint64_t **)(v2 + 32))
      {
        if ((*(_BYTE *)(v2 + 2) & 8) != 0 && *v13)
        {
          if ((v6 & 0x80000) == 0)
          {
            v24 = *v5;
            goto LABEL_31;
          }
          v7 = v49 == *v13;
        }
        if (v21 == (v50 & 0xFFFFFFFFFFFFFFFELL)
          && v7
          && v22 == *(_QWORD *)(v2 + 16)
          && v23 == *(_QWORD *)(v2 + 24)
          && !v51)
        {
          if (v22)
            sub_22EB4E494(*a1, *(_DWORD *)(v2 + 40), v22, 1, v15, v16, v17, v18);
          if (v23)
            sub_22EB4E494(*a1, *(_DWORD *)(v2 + 40), v23, 1, v15, v16, v17, v18);
          if ((*(_BYTE *)(v2 + 2) & 8) != 0)
          {
            v38 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
            if (!v38 || *(_BYTE *)(v38 + 16) != 39)
              v38 = sub_22F10CF48(v38);
            if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v38 + 32) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
            {
              v39 = *(_QWORD *)(*a1 + 88);
              v40 = *(_QWORD *)(*(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF0);
              if (!v40 || *(_BYTE *)(v40 + 16) != 39)
                v40 = sub_22F10CF48(v40);
              v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(sub_22EF5BA38(v39, *(_QWORD *)(v40 + 32)) & 0xFFFFFFFFFFFFFFF0)
                                          + 8) & 0xFFFFFFFFFFFFFFF0);
              if (v41)
              {
                if (*(_BYTE *)(v41 + 16) == 45)
                {
                  v42 = sub_22F114198(*(_QWORD *)(v41 + 24));
                  v43 = sub_22EC6602C(*a1, v42) & 0xFFFFFFFFFFFFFFF8;
                  if (v43)
                    sub_22EB4E494(*a1, *(_DWORD *)(v2 + 40), v43, 1, v44, v45, v46, v47);
                }
              }
            }
          }
          goto LABEL_48;
        }
      }
      v24 = *v5;
      if ((v6 & 0x80000) != 0)
      {
        v26 = v48;
        goto LABEL_42;
      }
LABEL_31:
      v25 = sub_22EF5C728(*(_QWORD *)(*a1 + 88), v24);
      v26 = v48;
      if (v25)
      {
        v27 = v25;
        v28 = *(unsigned __int8 *)(v25 + 16);
        if (v28 == 3)
        {
          v33 = *(_QWORD *)(v25 + 48);
          if (v33)
            goto LABEL_41;
        }
        else if (v28 == 2)
        {
          v29 = *(_QWORD *)(*a1 + 88);
          v30 = sub_22EF67C8C(v29);
          v31 = *(_DWORD *)(v2 + 40);
          v32 = sub_22E3CD3D4(v29 + 2032, 32, 3);
          v33 = sub_22EFF8F1C(v32, v29, v27 + 40, v30, v31);
LABEL_41:
          v24 = *(_QWORD *)(v27 + 32);
          v26 = 1;
          v49 = v33;
        }
      }
LABEL_42:
      v34 = *(_DWORD *)v2;
      if ((*(_DWORD *)v2 & 0x2000000) != 0)
      {
        v36 = (v34 >> 19) & 1;
        if ((v34 & 0x1800000) != 0)
          ++v36;
        v35 = v13[v36 + *(_DWORD *)(v2 + 4)];
      }
      else
      {
        v35 = 0;
      }
      v2 = sub_22EBBD504(*a1, *(unsigned int *)(v2 + 40) | ((unint64_t)*(unsigned int *)(v2 + 40) << 32), (v34 >> 18) & 1, *(unsigned int *)(v2 + 40), (uint64_t)v54, v55, *(unsigned int *)(v2 + 40), v35, v24, v5, v49, v26, *(_QWORD *)(v2 + 48), (unsigned __int8 *)(v50 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_48;
    }
  }
LABEL_14:
  v2 = 1;
LABEL_48:
  if (v54 != v56)
    free(v54);
  return v2;
}

uint64_t sub_22EB65918(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v13[3];
  int v14;
  uint64_t v15;
  int v16;

  v4 = *a1;
  v16 = 0;
  v15 = 0;
  v14 = 3;
  *(_QWORD *)v13 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v16, v13, (__int16 *)(v4 + 1693), &v15, &v14);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
  }
  else if (*(_QWORD *)(a2 + 16) != (v11 & 0xFFFFFFFFFFFFFFFELL))
  {
    a2 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v11 & 0xFFFFFFFFFFFFFFFELL, HIDWORD(*(_QWORD *)(a2 + 24)));
  }
  sub_22EB48E64(v4);
  return a2;
}

uint64_t sub_22EB65A7C(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  void *v52[2];
  char v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  void *v58[2];
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v54 = 0;
  v53 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v54, &v53);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v54;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22EB723F0((uint64_t *)a1, v8, v9, v54, 0);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v51 = 0u;
  *(_OWORD *)v52 = 0u;
  sub_22E8ACE30((uint64_t)&v51, v12, (uint64_t)v9);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 1) != 0 || !v16)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v21 = *(_DWORD *)(a2 + 72);
      if ((v15 & 1) != 0)
        v16 = v15 | 1;
      else
        v16 = 1;
    }
    else
    {
      v18 = sub_22EBB87FC(*a1, *(unsigned int *)(a2 + 60), (_QWORD *)((v15 << 63 >> 63) & v16), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v51, v54, 0);
      if (!v18)
        goto LABEL_80;
      v19 = v18;
      if (v18 >= 0x10)
      {
        v22 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
        if (v22 && *(_BYTE *)(v22 + 16) == 57)
          v19 = *(_QWORD *)(v22 + 8);
      }
      else
      {
        v19 = 0;
      }
      v23 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v19, *(_DWORD *)(a2 + 72));
      v16 = (unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL;
      v21 = sub_22F115668(*v23);
    }
  }
  else
  {
    if (*(_QWORD *)v16 >= 0x10uLL)
    {
      v20 = sub_22EB736F0((uint64_t *)a1, *(_QWORD *)v16, (unsigned int *)(v16 + 8), v7, (uint64_t)&v51);
      if (!v20)
        goto LABEL_80;
      v16 = (unint64_t)v20 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *v20;
    }
    else
    {
      v17 = *(_QWORD *)v16;
    }
    v21 = sub_22F115668(v17);
  }
  v24 = *(_QWORD **)(a2 + 48);
  if (!v24)
    goto LABEL_36;
  v57 = 0u;
  *(_OWORD *)v58 = 0u;
  if (*v24 <= 0xFuLL)
    goto LABEL_36;
  v24 = sub_22EB736F0((uint64_t *)a1, *v24, (unsigned int *)v24 + 2, v7, (uint64_t)&v57);
  if (HIDWORD(v58[1]))
    free(v58[0]);
  if (v24)
  {
LABEL_36:
    v25 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v26 = *(unsigned int *)(a2 + 28);
    v27 = *(_BYTE *)(a2 + 24);
    v28 = *(_DWORD *)(a2 + 56);
    v29 = *(_DWORD *)(a2 + 60);
    if ((*(_BYTE *)(v25 + 1) & 0x80) != 0
      || (v30 = *(_QWORD *)(v25 + 8), (v16 & 1) != 0) && (v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
LABEL_39:
      if ((v27 & 1) != 0)
        v31 = 36;
      else
        v31 = 25;
      v32 = sub_22EBCD92C((uint64_t)*a1, v25, v26, v31, (uint64_t)&v51, v24, v28, v29, v16, v21);
      goto LABEL_43;
    }
    v33 = v30 & 0xFFFFFFFFFFFFFFF0;
    v34 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      if (!v34 || *(_BYTE *)(v34 + 16) != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
          || (v48 = *(_QWORD *)(v25 + 8),
              v49 = *(unsigned int *)(a2 + 28),
              v37 = sub_22F10CF48(v34),
              v30 = v48,
              v26 = v49,
              !v37))
        {
LABEL_56:
          v50 = v26;
          v38 = v30;
          if ((v16 & 1) != 0)
            v39 = 0;
          else
            v39 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
          v59 = sub_22EFC6B40((_QWORD *)(*((_QWORD *)*a1 + 11) + 15224), *v39 & 7 | *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFFF0) + 8));
          v60 = v21;
          sub_22EFC6D6C((uint64_t)&v61, v59);
          v61 = v39;
          if (!v24)
            goto LABEL_65;
          v40 = *v24;
          v41 = *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF0);
          if (v41 && (*(_DWORD *)(v41 + 16) & 0xFE) == 0x2C
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
            && (v42 = sub_22F10CF48(v41), v40 = *v24, v42))
          {
            sub_22E8ACD1C((uint64_t)&v51, *((_QWORD *)*a1 + 11), 0, v40, (uint64_t)(v24 + 1), v28);
LABEL_65:
            v32 = sub_22EC225CC(*a1, v25, v38, v50, v27 & 1, (uint64_t)&v51, 0, 0, (uint64_t)&v59, 0, 0, 0);
LABEL_43:
            v13 = v32;
            goto LABEL_81;
          }
          v43 = *a1;
          v44 = v40;
          while (1)
          {
            if ((v44 & 0xF) != 0)
              goto LABEL_77;
            v45 = *(unsigned __int8 *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v45 > 0x39)
            {
LABEL_72:
              if (sub_22F115668(v44))
                v40 = v44;
              v44 = sub_22F115B7C(v44);
              if (!v44)
                goto LABEL_79;
            }
            else
            {
              if (v45 == 24)
                goto LABEL_78;
              if (v45 == 26)
              {
                if ((*(_BYTE *)(v44 + 23) & 0x10) != 0)
                {
LABEL_78:
                  v40 = v44;
LABEL_79:
                  v46 = sub_22F115668(v40);
                  sub_22E8FCA40(v43, v46, 0xCEFu, 0, (uint64_t)&v57);
                  v56 = *v24;
                  v47 = sub_22E8901B8((uint64_t)&v57, &v56);
                  v55 = (**((_DWORD **)*a1 + 9) >> 8) & 1;
                  sub_22E89519C(v47, (unsigned int *)&v55);
                  sub_22E903BEC((unsigned int *)&v57);
                  goto LABEL_80;
                }
              }
              else if (((1 << v45) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_72;
              }
LABEL_77:
              v44 = sub_22F115B7C(v44);
            }
          }
        }
        v34 = *(_QWORD *)v33;
        if (*(_BYTE *)(*(_QWORD *)v33 + 16) != 39)
        {
          v34 = sub_22F10CF48(v34);
          v30 = v48;
          v26 = v49;
        }
      }
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    }
    else
    {
      v35 = *(_QWORD *)(v34 + 8);
    }
    v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
    if (!v36 || *(_BYTE *)(v36 + 16) != 45)
      goto LABEL_39;
    goto LABEL_56;
  }
LABEL_80:
  v13 = 1;
LABEL_81:
  if (HIDWORD(v52[1]))
    free(v52[0]);
  return v13;
}

uint64_t sub_22EB65FBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  BOOL v19;
  uint64_t v20;
  void *v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26[2];
  void *v27[2];
  uint64_t v28;
  _QWORD v29[2];
  void *v30;
  uint64_t v31;
  _BYTE v32[16];
  _QWORD v33[6];

  v2 = (uint64_t)a2;
  v33[4] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)v27 = 0u;
  sub_22F05FD5C(a2, v26);
  v4 = sub_22EB62928(a1, v26[1]);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB62928(a1, v27[0]);
  if ((v5 & 1) != 0)
    return 1;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v25 = v5;
  v30 = v32;
  v31 = 0x200000000;
  v29[0] = *(_QWORD *)(v2 + 16);
  v29[1] = v27[1];
  do
  {
    v9 = v7;
    v10 = sub_22EFFED0C((unsigned __int8 *)v29[v8]);
    if (*v10 == 141)
    {
      v11 = sub_22EFFED0C(*(unsigned __int8 **)&v10[v10[3]]);
      if (*v11 == 161)
      {
        v12 = v11;
        v13 = v11 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v11 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C((uint64_t *)v2, v33);
          v14 = *(unsigned int *)v12;
          if ((v14 & 0x100000) != 0)
            v15 = (unsigned int *)&v12[16 * ((v14 >> 18) & 1) + 32];
          else
            v15 = (unsigned int *)v13;
          v16 = *(_QWORD *)v15;
          v28 = *(_QWORD *)v15;
          v33[0] = 0;
          if (sub_22E793870((uint64_t *)(a1 + 8), &v28, v33)
            && v33[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v16 = *(_QWORD *)(v33[0] + 8);
          }
          if (!v16)
          {
            v2 = 1;
            goto LABEL_28;
          }
          v17 = *(unsigned int *)v12;
          if ((v17 & 0x100000) != 0)
            v18 = (unsigned int *)&v12[16 * ((v17 >> 18) & 1) + 32];
          else
            v18 = (unsigned int *)v13;
          v19 = v16 != *(_QWORD *)v18;
          v20 = v31;
          if (v31 >= (unint64_t)HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v20 = v31;
          }
          v6 |= v19;
          *((_QWORD *)v30 + v20) = v16 | 3;
          LODWORD(v31) = v31 + 1;
        }
      }
    }
    v7 = 1;
    v8 = 1;
  }
  while ((v9 & 1) == 0);
  v22 = (void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v23 = (void *)(v25 & 0xFFFFFFFFFFFFFFFELL);
  if ((v6 & 1) == 0 && v26[1] == v22 && v27[0] == v23)
  {
    v33[0] = v22;
    v33[1] = v25 & 0xFFFFFFFFFFFFFFFELL;
    sub_22F32DC94(*(_QWORD *)a1, (_DWORD *)v2, 0, v33, 2);
  }
  else
  {
    sub_22F05FD5C((uint64_t *)v2, v33);
    sub_22EFF605C(v33[3]);
    v2 = sub_22ED1767C(*(_QWORD *)a1, v24, LODWORD(v26[0]), (uint64_t)&v30, (uint64_t)v22, (uint64_t)v23, 0, 1, 0);
  }
LABEL_28:
  if (v30 != v32)
    free(v30);
  return v2;
}

uint64_t sub_22EB66280(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v5[2];

  v2 = a2;
  v3 = sub_22EB6DD04(a1, *(uint64_t **)(a2 + 16));
  if (!v3)
    return 1;
  if (v3 != *(unint64_t **)(v2 + 16))
  {
    v5[0] = *v3;
    v5[1] = (uint64_t)(v3 + 1);
    sub_22F1167E8(v5);
    return sub_22EBBC368();
  }
  return v2;
}

unsigned int *sub_22EB66318(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_22EBBB18C(*a1);
  if (v4 != *(_QWORD *)(a2 + 8))
    return sub_22EBBC14C(*a1, *(_DWORD *)(a2 + 4), v4, (*(_DWORD *)a2 >> 18) & 1);
  sub_22F3313CC(*a1, a2);
  return (unsigned int *)a2;
}

uint64_t sub_22EB66378(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  if (*(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EBBA860(*a1, *(_DWORD *)(v2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)v2 >> 18) & 1);
  return v2;
}

uint64_t sub_22EB663D4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24[3];
  int v25;
  uint64_t v26;
  int v27;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) != 0)
    {
      v6 = 0;
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v7 || *(_BYTE *)(v7 + 16) != 45)
      {
LABEL_12:
        v11 = *a1;
        v12 = (_QWORD *)(*a1 + 3688);
        v13 = *(_QWORD *)(*v12 + 576 * *(unsigned int *)(*a1 + 3696) - 416);
        v27 = v6;
        v26 = v13;
        v25 = 3;
        *(_QWORD *)v24 = *(unsigned int *)(v11 + 1704);
        sub_22EB4DDB8((uint64_t)v12, &v27, v24, (__int16 *)(v11 + 1693), &v26, &v25);
        v14 = *(unsigned int *)(v11 + 3696);
        v15 = v14 - 2;
        v16 = *(_QWORD *)(v11 + 3688);
        v17 = *(_DWORD *)(v16 + 576 * (v14 - 2));
        if (v17 == 5)
        {
          *(_BYTE *)(v16 + 576 * v14 - 4) = *(_BYTE *)(v16 + 576 * v15 + 572);
          v18 = 1;
        }
        else if (v17 == 2)
        {
          *(_BYTE *)(v16 + 576 * v14 - 4) = 1;
          v18 = *(_BYTE *)(v16 + 576 * v15 + 573) != 0;
        }
        else
        {
          v18 = 0;
          *(_BYTE *)(v16 + 576 * v14 - 4) = 0;
        }
        v19 = v16 + 576 * v14;
        *(_BYTE *)(v19 - 3) = v18;
        *(_WORD *)(v11 + 1693) = 0;
        if (*(_DWORD *)(v11 + 1848))
        {
          llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v11 + 1776), (llvm::SmallPtrSetImplBase *)(v19 - 560));
          sub_22EAEAE08(v11 + 1840, (uint64_t *)(v19 - 496));
        }
        v20 = sub_22EB62928((int)a1, v5);
        if ((v20 & 1) != 0)
        {
          v2 = 1;
        }
        else if ((v20 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        {
          v2 = sub_22EBB98E0(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFFELL), *(unsigned int *)(v2 + 28), v21, v22, v23);
        }
        sub_22EB48E64(v11);
        return v2;
      }
      v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
      if ((**(_QWORD **)(v8 + 128) & 0x400) != 0)
      {
        v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
        goto LABEL_12;
      }
    }
    v6 = 0;
    goto LABEL_12;
  }
  v9 = (uint64_t *)sub_22EB6DD04((_QWORD **)a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
  if (!v9)
    return 1;
  if (v9 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 24), v9, *(unsigned int *)(v2 + 28));
  return v2;
}

uint64_t sub_22EB66630(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  char v18;
  int v19[3];
  int v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  _QWORD v24[9];

  v24[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EB7F910(a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  v5 = v4;
  v18 = 0;
  v23[0] = v24;
  v23[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (!*(_DWORD *)(a2 + 24))
  {
    v7 = *a1;
    v8 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
    v9 = v8 > 3 || v8 == 2;
    if (!v9 && (*(_BYTE *)(*(_QWORD *)(v7 + 72) + 1) & 2) != 0)
    {
      v22 = 1;
      v21 = 0;
      v20 = 3;
      *(_QWORD *)v19 = *(unsigned int *)(v7 + 1704);
      sub_22EB4DDB8(v7 + 3688, &v22, v19, (__int16 *)(v7 + 1693), &v21, &v20);
      v10 = *(unsigned int *)(v7 + 3696);
      v11 = v10 - 2;
      v12 = *(_QWORD *)(v7 + 3688);
      v13 = *(_DWORD *)(v12 + 576 * (v10 - 2));
      if (v13 == 5)
      {
        *(_BYTE *)(v12 + 576 * v10 - 4) = *(_BYTE *)(v12 + 576 * v11 + 572);
        v14 = 1;
      }
      else if (v13 == 2)
      {
        *(_BYTE *)(v12 + 576 * v10 - 4) = 1;
        v14 = *(_BYTE *)(v12 + 576 * v11 + 573) != 0;
      }
      else
      {
        v14 = 0;
        *(_BYTE *)(v12 + 576 * v10 - 4) = 0;
      }
      v15 = v12 + 576 * v10;
      *(_BYTE *)(v15 - 3) = v14;
      *(_WORD *)(v7 + 1693) = 0;
      if (*(_DWORD *)(v7 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v7 + 1776), (llvm::SmallPtrSetImplBase *)(v15 - 560));
        sub_22EAEAE08(v7 + 1840, (uint64_t *)(v15 - 496));
      }
      v6 = 1;
      v16 = sub_22EB7570C(a1, (void **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18);
      sub_22EB48E64(v7);
      if ((v16 & 1) != 0)
        goto LABEL_23;
      goto LABEL_6;
    }
  }
  v6 = 1;
  if ((sub_22EB7570C(a1, (void **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v23, &v18) & 1) == 0)
  {
LABEL_6:
    if (v5 != *(unint64_t **)(a2 + 16) || v18)
      v6 = sub_22EBBC368();
    else
      v6 = a2;
  }
LABEL_23:
  if (v23[0] != v24)
    free(v23[0]);
  return v6;
}

uint64_t sub_22EB668BC(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  int v15[3];
  int v16;
  uint64_t v17;
  int v18;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) != 0)
  {
    v13 = (uint64_t *)sub_22EB6DD04(a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
    if (v13)
    {
      if (v13 != (uint64_t *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
        return sub_22EBBA098(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v13, *(_DWORD *)(v2 + 36));
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v5 = *a1;
    v18 = 0;
    v17 = 0;
    v16 = 3;
    *(_QWORD *)v15 = *((unsigned int *)v5 + 426);
    sub_22EB4DDB8((uint64_t)(v5 + 461), &v18, v15, (__int16 *)((char *)v5 + 1693), &v17, &v16);
    v6 = *((unsigned int *)v5 + 924);
    v7 = v6 - 2;
    v8 = v5[461];
    v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
    if (v9 == 5)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
      v10 = 1;
    }
    else if (v9 == 2)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
      v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
    }
    v11 = v8 + 576 * v6;
    *(_BYTE *)(v11 - 3) = v10;
    *(_WORD *)((char *)v5 + 1693) = 0;
    if (*((_DWORD *)v5 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 222), (llvm::SmallPtrSetImplBase *)(v11 - 560));
      sub_22EAEAE08((uint64_t)(v5 + 230), (uint64_t *)(v11 - 496));
    }
    v12 = sub_22EB62928((int)a1, (void *)(*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8));
    if ((v12 & 1) != 0)
    {
      v2 = 1;
    }
    else if ((v12 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(v2 + 16) & 0xFFFFFFFFFFFFFFF8))
    {
      v2 = sub_22EBBA3E8(*a1, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 32), v12 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 36));
    }
    sub_22EB48E64(v5);
  }
  return v2;
}

uint64_t sub_22EB66A78(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  int v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EB62928((int)a1, *(void **)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v21 = 0;
  v23 = v25;
  v24 = 0x800000000;
  v5 = 1;
  if ((sub_22EB7570C(a1, (void **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v23, &v21) & 1) == 0)
  {
    v6 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    v7 = *a2;
    v8 = (_QWORD *)((char *)a2 + (v7 >> 24));
    if (*v8 == (v4 & 0xFFFFFFFFFFFFFFFELL) && v21 == 0)
    {
      v5 = sub_22EBCC6C0(*a1, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v11 = v10;
      v12 = *a1;
      v13 = *(_DWORD *)(*a1 + 56);
      v14 = *(_QWORD *)(*a1 + 1296);
      v20 = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
      v15 = *a1;
      if ((v7 & 0x100000) != 0)
      {
        v16 = v8[((v7 >> 18) & 1) + 1 + a2[4]];
        sub_22E51A8D0(&v22, *(_QWORD *)(v12 + 72));
        v17 = *a1;
        *(_DWORD *)(v17 + 56) = v22 & ~HIDWORD(v16) | HIDWORD(v16) & v16;
        *(_QWORD *)(v17 + 1296) = v16;
        v15 = *a1;
      }
      v5 = sub_22EB33018(v15, 0, v6, v11, (uint64_t)v23, v24, a2[5], 0);
      *(_DWORD *)(v12 + 56) = v13;
      *(_QWORD *)(v12 + 1296) = v14;
      v18 = *(_QWORD *)(v12 + 80);
      *(_QWORD *)(v18 + 520) = v20;
      *(_DWORD *)(v18 + 528) = v20;
    }
  }
  if (v23 != v25)
    free(v23);
  return v5;
}

uint64_t sub_22EB66C50(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unint64_t v9;
  char v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EB62928((int)a1, *(void **)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB66A78(a1, *(unsigned int **)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v5 & 1) != 0)
    return 1;
  v11 = 0;
  v12 = v14;
  v13 = 0x800000000;
  v6 = 1;
  if ((sub_22EB7570C(a1, (void **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v12, &v11) & 1) == 0)
  {
    if (*(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) == (v4 & 0xFFFFFFFFFFFFFFFELL) && v11 == 0)
    {
      v9 = sub_22EBCC6C0(*a1, (uint64_t)a2);
    }
    else
    {
      sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
      v9 = sub_22EB33018(*a1, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8, (uint64_t)v12, v13, a2[5], v5 & 0xFFFFFFFFFFFFFFFELL);
    }
    v6 = v9;
  }
  if (v12 != v14)
    free(v12);
  return v6;
}

uint64_t sub_22EB66DB0(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22EB6DD04((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v5, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22EB66E1C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;

  v2 = a2;
  v4 = sub_22EB6DD04(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EB62928((int)a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
  if (v5 != *(uint64_t **)(v2 + 24) || *(unsigned __int8 **)(v2 + 16) != v8)
    return sub_22E95CFA4(*a1, *(_DWORD *)(v2 + 32), v5, *(_DWORD *)(v2 + 36), v8);
  return v2;
}

uint64_t sub_22EB66EAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v2 = a2;
  v3 = (int)a1;
  v4 = sub_22EB7F910(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  v7 = sub_22EB62928(v3, v6);
  if ((v7 & 1) != 0)
    return 1;
  if (v5 != *(unint64_t **)(v2 + 24) || *(_QWORD *)(v2 + 16) != (v7 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EBBC368();
  return v2;
}

uint64_t sub_22EB66F58(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  v2 = a2;
  v4 = sub_22EB6DD04((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EB62928((int)a1, *(void **)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  if (v5 != *(uint64_t **)(v2 + 24) || *(void **)(v2 + 16) != v7)
    return sub_22EC33F14(*a1, *(_DWORD *)(v2 + 32), *(_BYTE *)(v2 + 40) & 3, *(_DWORD *)(v2 + 36), v5, v7);
  return v2;
}

uint64_t sub_22EB66FE8(int a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22EB62928(a1, v3);
}

uint64_t sub_22EB67014(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB62928((int)a1, *(void **)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EB62928((int)a1, *(void **)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 24) != v7
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB4A774(*a1, *(_DWORD *)(v2 + 40), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 44));
  }
  return v2;
}

uint64_t sub_22EB670C4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  v5 = sub_22EB6DD04((_QWORD **)a1, v4);
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v7 & 1) != 0)
    return 1;
  v8 = *(_QWORD *)(a2 + 32);
  if (v6 == v4 && v8 == (v7 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EBCC6C0(*a1, a2);
  sub_22F0D60E4(v8);
  return sub_22EB34874();
}

uint64_t sub_22EB67184(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  void *v17[2];
  _QWORD v18[34];

  v18[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v17[0] = v18;
  v5 = *v4;
  v17[1] = (void *)0x800000000;
  v18[32] = v5;
  if ((sub_22EB7FC00((uint64_t)a1, (uint64_t)(v4 + 2), (uint64_t)&v4[4 * *((unsigned int *)v4 + 2) + 2]) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_DWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 72);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    sub_22E8ACE30((uint64_t)&v15, v7, v8);
    v6 = sub_22F345EB4(*a1, (unsigned int *)&v15, v9, &v13, v10, v11, (uint64_t)v17);
    if (HIDWORD(v16[1]))
      free(v16[0]);
    if ((v6 & 1) != 0)
      v6 = 1;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v6;
}

uint64_t sub_22EB672A8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t *)sub_22EB6DD04(a1, *(uint64_t **)(v2 + 24));
  if (!v5)
    return 1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (v5 != *(uint64_t **)(v2 + 24) || *(_QWORD *)(v2 + 16) != v6)
    return sub_22F310E84(*a1, v6, v5, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36));
  return v2;
}

uint64_t sub_22EB67330(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB759A0(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22EB67384(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB759A0(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB673D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EB759A0(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB6B5AC(a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EB67440(uint64_t *a1, uint64_t a2)
{
  return sub_22EB805CC(a1, a2, 0, 0);
}

uint64_t sub_22EB6744C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[32];
  char *v61;
  uint64_t v62;
  _QWORD v63[12];

  v2 = a2;
  v63[10] = *MEMORY[0x24BDAC8D0];
  v61 = (char *)v63;
  v62 = 0x200000000;
  v4 = (void *)sub_22E487828(a2);
  v5 = sub_22EB62928(a1, v4);
  if ((v5 & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v58 = v60;
    v59 = 0x400000000;
    if ((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1)
    {
      v6 = 0;
      v43 = v5 & 0xFFFFFFFFFFFFFFFELL;
      v7 = v2 + 32;
      v8 = *(_QWORD *)(v2 + 24) + 8;
      v9 = 24 * ((unsigned __int16)*(_DWORD *)(v2 + 20) >> 1);
      while (1)
      {
        v10 = v6;
        v11 = *(_DWORD *)(v8 - 8);
        if (v11 == 1)
        {
          v20 = sub_22EB62928(a1, *(void **)(v7 + 8 * (*(_DWORD *)v8 + 1)));
          if ((v20 & 1) != 0)
            goto LABEL_41;
          v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
          v22 = *(_DWORD *)(v8 + 4);
          v6 = 1;
          v51 = 1;
          v52 = v20 & 0xFFFFFFFFFFFFFFFELL;
          v53 = v22;
          v54 = 0;
          v23 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v51, 1);
          v24 = &v61[40 * v62];
          v25 = *(_QWORD *)(v23 + 32);
          v26 = *(_OWORD *)(v23 + 16);
          *(_OWORD *)v24 = *(_OWORD *)v23;
          *((_OWORD *)v24 + 1) = v26;
          *((_QWORD *)v24 + 4) = v25;
          LODWORD(v62) = v62 + 1;
          if ((v10 & 1) == 0)
            v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v43;
          v27 = v59;
          if (v59 >= (unint64_t)HIDWORD(v59))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v27 = v59;
          }
          *((_QWORD *)v58 + v27) = v21;
        }
        else
        {
          if (!v11)
          {
            v12 = *(_QWORD *)v8;
            if ((*(_QWORD *)v8 & 1) != 0)
            {
              v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
            }
            else
            {
              v39 = *(_QWORD *)(v12 + 40);
              if ((v39 & 7) != 0)
                v13 = 0;
              else
                v13 = v39 & 0xFFFFFFFFFFFFFFF8;
            }
            v55 = 0;
            v56 = v13;
            v57 = *(_QWORD *)(v8 + 8);
            v6 = 1;
            v14 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v55, 1);
            v15 = &v61[40 * v62];
            v16 = *(_QWORD *)(v14 + 32);
            v17 = *(_OWORD *)(v14 + 16);
            *(_OWORD *)v15 = *(_OWORD *)v14;
            *((_OWORD *)v15 + 1) = v17;
            *((_QWORD *)v15 + 4) = v16;
            LODWORD(v62) = v62 + 1;
            v18 = *(_QWORD *)v8;
            if (*(_QWORD *)v8 && (v18 & 1) == 0)
            {
              v44 = *(_QWORD *)v8;
              v45 = 0;
              if (sub_22E793870((uint64_t *)(a1 + 8), &v44, &v45)
                && v45 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
              {
                v18 = *(_QWORD *)(v45 + 8);
              }
              v19 = *(_QWORD *)v8;
              if ((*(_QWORD *)v8 & 1) != 0)
                v19 = 0;
              v6 = (v18 != v19) | v10;
            }
            goto LABEL_34;
          }
          v28 = sub_22EB62928(a1, *(void **)(v7 + 8 * (*(_DWORD *)v8 + 1)));
          if ((v28 & 1) != 0
            || (v29 = sub_22EB62928(a1, *(void **)(v7 + 8 * (*(_DWORD *)v8 + 2))), (v29 & 1) != 0))
          {
LABEL_41:
            v2 = 1;
            goto LABEL_47;
          }
          v30 = v28 & 0xFFFFFFFFFFFFFFFELL;
          v31 = v29 & 0xFFFFFFFFFFFFFFFELL;
          v46 = 2;
          v32 = *(_QWORD *)(v8 + 4);
          v47 = v28 & 0xFFFFFFFFFFFFFFFELL;
          v48 = v29 & 0xFFFFFFFFFFFFFFFELL;
          v49 = v32;
          v50 = 0;
          v6 = 1;
          v33 = sub_22E84B46C((uint64_t)&v61, (unint64_t)&v46, 1);
          v34 = &v61[40 * v62];
          v35 = *(_QWORD *)(v33 + 32);
          v36 = *(_OWORD *)(v33 + 16);
          *(_OWORD *)v34 = *(_OWORD *)v33;
          *((_OWORD *)v34 + 1) = v36;
          *((_QWORD *)v34 + 4) = v35;
          LODWORD(v62) = v62 + 1;
          if ((v10 & 1) == 0)
            v6 = *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)) != v30
              || *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)) != v31;
          v37 = v59;
          if (v59 >= (unint64_t)HIDWORD(v59))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v37 = v59;
          }
          *((_QWORD *)v58 + v37) = v30;
          v38 = v59 + 1;
          LODWORD(v59) = v38;
          if (v38 >= HIDWORD(v59))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v38 = v59;
          }
          *((_QWORD *)v58 + v38) = v31;
        }
        LODWORD(v59) = v59 + 1;
LABEL_34:
        v8 += 24;
        v9 -= 24;
        if (!v9)
        {
          v40 = v43;
          goto LABEL_42;
        }
      }
    }
    LOBYTE(v6) = 0;
    v40 = v5 & 0xFFFFFFFFFFFFFFFELL;
LABEL_42:
    if (sub_22E487828(v2) != v40 || (v6 & 1) != 0)
    {
      v41 = sub_22EC38374(*(_QWORD **)a1, (uint64_t *)&v61, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20) & 1, v40);
      if ((v41 & 1) != 0)
        v2 = 1;
      else
        v2 = v41;
    }
LABEL_47:
    if (v58 != v60)
      free(v58);
  }
  if (v61 != (char *)v63)
    free(v61);
  return v2;
}

uint64_t sub_22EB67898(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v11 & 1) != 0)
  {
    a2 = 1;
    goto LABEL_10;
  }
  v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a2 + 32) == (v11 & 0xFFFFFFFFFFFFFFFELL))
  {
LABEL_10:
    sub_22EB48E64(v4);
    return a2;
  }
  sub_22EB48E64(v4);
  return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v12, *(_DWORD *)(a2 + 24));
}

uint64_t sub_22EB67A08(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  _BOOL8 v11;
  int v12;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  void *v19[2];

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *(_QWORD *)(v2 + 16);
  if (v6 != v5)
  {
    v7 = (uint64_t)*a1;
    sub_22F0D60E4(v6);
    v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v7 + 112), *(_DWORD **)(v7 + 72));
    v10 = *(_QWORD *)(v2 + 24);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                     + 8) & 0xFFFFFFFFFFFFFFF0)
                             + 16) == 39;
    v12 = *(_DWORD *)(v2 + 32);
    v13 = v9;
    v18 = 0u;
    *(_OWORD *)v19 = 0u;
    v15 = v10;
    v16 = v12;
    sub_22EFC6D6C((uint64_t)&v17, v10);
    v2 = sub_22EC225CC(*a1, v5, *(_QWORD *)(v5 + 8), v13, v11, (uint64_t)&v18, 0, 0, (uint64_t)&v15, 0, 0, 0);
    if (HIDWORD(v19[1]))
      free(v19[0]);
  }
  return v2;
}

uint64_t sub_22EB67B10(int a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22EB62928(a1, v3);
}

uint64_t sub_22EB67B3C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(void **)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EB62928((int)a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8);
}

uint64_t sub_22EB67BD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v25 = v27;
  v26 = 0x400000000;
  v23 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    while (1)
    {
      v11 = *(void **)(v4 + 8);
      v12 = *(uint64_t **)(v4 + 8 * v8);
      if (v12)
      {
        v13 = sub_22EB6DD04((_QWORD **)a1, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v23;
        }
        v24[v15] = v14;
      }
      else
      {
        v16 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v23;
        }
        v24[v16] = 0;
      }
      ++v23;
      v17 = sub_22EB62928((int)a1, v11);
      if ((v17 & 1) != 0)
        break;
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 8;
      v9 -= 8;
      if (!v9)
      {
        v20 = v23;
        v21 = (uint64_t *)v25;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v27;
LABEL_20:
    v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v24, v20, v5, v21, v19);
  }
  if (v25 != v27)
    free(v25);
  return v10;
}

uint64_t sub_22EB67DF8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22EB67EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v4 = sub_22EB7239C(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  if (v4 != *(_QWORD *)(v2 + 8))
  {
    v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
    sub_22E5018F0(v2, v5);
  }
  return v2;
}

uint64_t sub_22EB67F38(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v16 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v5 > 3 || v5 == 2)
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
    {
      v20 = 0;
      v18 = 3;
      v19 = 1;
      v17 = *(unsigned int *)(v4 + 1704);
      sub_22EB4DDB8(v4 + 3688, &v19, (int *)&v17, (__int16 *)(v4 + 1693), (uint64_t *)&v20, &v18);
      v8 = *(unsigned int *)(v4 + 3696);
      v9 = v8 - 2;
      v10 = *(_QWORD *)(v4 + 3688);
      v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
      if (v11 == 5)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
        v12 = 1;
      }
      else if (v11 == 2)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
        v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
      }
      v13 = v10 + 576 * v8;
      *(_BYTE *)(v13 - 3) = v12;
      *(_WORD *)(v4 + 1693) = 0;
      if (*(_DWORD *)(v4 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
        sub_22EAEAE08(v4 + 1840, (uint64_t *)(v13 - 496));
      }
      v7 = 0;
    }
  }
  v20 = v22;
  v21 = 0x400000000;
  if ((sub_22EB7570C(a1, *(void ***)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v20, &v16) & 1) != 0)v14 = 1;
  else
    v14 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v20, v21, *(_DWORD *)(v3 + 44));
  if (v20 != v22)
    free(v20);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v14;
}

uint64_t sub_22EB68150(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  size_t v54;
  unsigned __int32 v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unsigned int v59;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  char v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned __int8 *v132;
  unint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  unint64_t v139;
  _DWORD *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  unsigned __int8 v181[4];
  int v182;
  int v183;
  unint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  unint64_t v189;
  char v190;
  uint64_t v191;
  _DWORD *v192;
  void *v193;
  uint64_t v194;
  int v195[12];
  unsigned __int8 *v196;
  void *v197[2];
  _BYTE v198[32];
  unint64_t v199;
  int64x2_t v200;
  _QWORD v201[5];
  void *v202;
  uint64_t v203;
  _BYTE v204[352];
  unsigned __int8 *v205;
  __int128 v206;
  _BYTE v207[16];
  char v208;
  void *v209[2];
  _BYTE v210[32];
  _QWORD *v211;
  uint64_t v212;
  _QWORD v213[6];

  v2 = a2;
  v213[4] = *MEMORY[0x24BDAC8D0];
  v202 = v204;
  v203 = 0x400000000;
  v4 = sub_22F3C65DC(a2);
  v5 = v4 - sub_22F3C64D0(v2);
  v6 = v5 >> 4;
  v7 = 0;
  if (v5 >> 4)
  {
    if (v6 >= v203)
    {
      if (v6 <= HIDWORD(v203))
      {
        v10 = (char *)v202;
      }
      else
      {
        v193 = 0;
        v10 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        if (v202 != v204)
          free(v202);
        v202 = v10;
        HIDWORD(v203) = (_DWORD)v193;
        v7 = v203;
      }
      if (v6 != v7)
      {
        v11 = &v10[88 * v7];
        do
        {
          *(_OWORD *)v11 = 0uLL;
          *((_OWORD *)v11 + 1) = 0uLL;
          *((_QWORD *)v11 + 10) = 0;
          *((_OWORD *)v11 + 3) = 0uLL;
          *((_OWORD *)v11 + 4) = 0uLL;
          *((_OWORD *)v11 + 2) = 0uLL;
          *((_QWORD *)v11 + 1) = v11 + 24;
          *((_DWORD *)v11 + 5) = 4;
          v11 += 88;
        }
        while (v11 != &v10[88 * v6]);
      }
    }
    else
    {
      v8 = (void **)((char *)v202 - 80);
      v9 = 88 * v6;
      do
      {
        if (v8 + 2 != *v8)
          free(*v8);
        v8 -= 11;
        v9 += 88;
      }
      while (v9);
    }
    LODWORD(v203) = (unint64_t)v5 >> 4;
  }
  v211 = 0;
  v211 = (_QWORD *)sub_22F3C64D0(v2);
  v12 = (_QWORD *)sub_22F3C650C(v2);
  v13 = v211;
  if (v211 != v12)
  {
    v14 = v12;
    do
    {
      if (sub_22F3C6428(v2, v13))
      {
        v15 = (uint64_t)v211;
        v16 = sub_22F3C64D0(v2);
        v17 = (char *)v202 + 88 * ((v15 - v16) >> 4);
        v209[0] = 0;
        v18 = (_QWORD *)(*v211 & 0xFFFFFFFFFFFFFFF8);
        v209[0] = v18;
        v199 = (unint64_t)a1;
        v200.i64[0] = (uint64_t)v209;
        v200.i64[1] = (uint64_t)v17;
        v201[0] = &v211;
        if (*(_BYTE *)(*(_QWORD *)(v18[6] & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        {
          v19 = v18[7];
          v20 = v19 & 0xFFFFFFFFFFFFFFF8;
          if ((v19 & 4) != 0)
            v20 = *(_QWORD *)(v20 + 32);
          v193 = v195;
          v194 = 0x200000000;
          v21 = *a1;
          v22 = sub_22EFBC5B4((uint64_t)v18);
          v188 = 7;
          v189 = v22;
          sub_22EE7377C(v21, (uint64_t)&v188, (uint64_t)&v193);
          sub_22EB8089C((uint64_t)&v199);
          *v17 = *(_DWORD *)(v20 + 8);
          if (v193 != v195)
            free(v193);
        }
        else
        {
          sub_22EB8089C((uint64_t)&v199);
        }
      }
      v13 = v211 + 2;
      v211 = v13;
    }
    while (v13 != v14);
  }
  v23 = sub_22F3090C8(*a1);
  v186 = *a1;
  LOBYTE(v187) = 1;
  v180 = v23;
  *(_QWORD *)(v23 + 1584) = sub_22F3C6624(v2);
  v24 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 4) != 0)
    v25 = (uint64_t *)v25[4];
  v26 = *v25;
  if ((*v25 & 0xF) != 0)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v27 = v25 + 1;
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v28 == 26)
      v29 = v26;
    else
      v29 = 0;
    if (v28 == 26)
      v30 = v27;
    else
      v30 = 0;
  }
  v199 = (unint64_t)v201;
  v200 = vdupq_n_s64(0x20uLL);
  v201[4] = 0;
  v197[0] = v198;
  v197[1] = (void *)0x400000000;
  v191 = v29;
  v192 = v30;
  v211 = v213;
  v212 = 0x400000000;
  v209[0] = v210;
  v209[1] = (void *)0x400000000;
  v205 = v207;
  v206 = xmmword_22F44E350;
  v208 = 0;
  if ((*(_BYTE *)(v29 + 23) & 0x10) != 0)
  {
    v37 = v29;
    v38 = v29;
    while (1)
    {
      if ((v38 & 0xF) != 0)
        goto LABEL_52;
      v39 = *(unsigned __int8 *)(*(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v39 > 0x39)
      {
LABEL_47:
        if (sub_22F115668(v38))
          v37 = v38;
        v38 = sub_22F115B7C(v38);
        if (!v38)
          goto LABEL_66;
      }
      else
      {
        if (v39 == 24)
          goto LABEL_65;
        if (v39 == 26)
        {
          if ((*(_BYTE *)(v38 + 23) & 0x10) != 0)
          {
LABEL_65:
            v37 = v38;
LABEL_66:
            sub_22F115668(v37);
            if (*(_BYTE *)(v191 + 16) == 25)
              v44 = 0;
            else
              v44 = (unsigned __int16)(*(_QWORD *)(v191 + 16) >> 38);
            v45 = (uint64_t)(v192 + 4);
            v46 = v191 + 40;
            if ((*(_BYTE *)(v29 + 23) & 4) != 0)
              v47 = sub_22E47E270(v29);
            else
              v47 = 0;
            if ((sub_22EB74800(a1, v45, v44, v46, v47, (uint64_t)&v211, (uint64_t)v209, (uint64_t)&v205) & 1) != 0)
            {
              v36 = 0;
              goto LABEL_76;
            }
            v48 = *(_QWORD *)(v191 + 24);
            v49 = sub_22E47EE80(&v191);
            v40 = sub_22EB6DF2C((_QWORD **)a1, (uint64_t)&v199, v48, v49, v50, v51);
            if (v40 >= 0x10)
              goto LABEL_192;
LABEL_75:
            v36 = 0;
            goto LABEL_76;
          }
        }
        else if (((1 << v39) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_47;
        }
LABEL_52:
        v38 = sub_22F115B7C(v38);
      }
    }
  }
  v31 = *(_QWORD *)(v29 + 24);
  v32 = sub_22E47EE80(&v191);
  v35 = sub_22EB6DF2C((_QWORD **)a1, (uint64_t)&v199, v31, v32, v33, v34);
  if (v35 < 0x10)
  {
    v36 = 0;
    goto LABEL_76;
  }
  v40 = v35;
  v41 = v191;
  for (i = v191; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_64;
      v43 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v43 <= 0x39)
        break;
LABEL_59:
      if (sub_22F115668(i))
        v41 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_185;
    }
    if (v43 == 24)
      goto LABEL_184;
    if (v43 == 26)
      break;
    if (((1 << v43) & 0x20000000200003CLL) == 0)
      goto LABEL_59;
LABEL_64:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_64;
LABEL_184:
  v41 = i;
LABEL_185:
  sub_22F115668(v41);
  if (*(_BYTE *)(v191 + 16) == 25)
    v124 = 0;
  else
    v124 = (unsigned __int16)(*(_QWORD *)(v191 + 16) >> 38);
  v125 = (uint64_t)(v192 + 4);
  v126 = v191 + 40;
  if ((*(_BYTE *)(v29 + 23) & 4) != 0)
    v127 = sub_22E47E270(v29);
  else
    v127 = 0;
  if ((sub_22EB74800(a1, v125, v124, v126, v127, (uint64_t)&v211, (uint64_t)v209, (uint64_t)&v205) & 1) != 0)
    goto LABEL_75;
LABEL_192:
  sub_22E4913B4(v29, (uint64_t)&v193);
  v190 = 0;
  v128 = v29;
  v129 = v29;
  while (2)
  {
    while (2)
    {
      if ((v129 & 0xF) != 0)
        goto LABEL_203;
      v130 = *(unsigned __int8 *)(*(_QWORD *)(v129 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v130 > 0x39)
      {
LABEL_198:
        if (sub_22F115668(v129))
          v128 = v129;
        v129 = sub_22F115B7C(v129);
        if (!v129)
          goto LABEL_205;
        continue;
      }
      break;
    }
    if (v130 == 24)
      break;
    if (v130 != 26)
    {
      if (((1 << v130) & 0x20000000200003CLL) != 0)
        goto LABEL_203;
      goto LABEL_198;
    }
    if ((*(_BYTE *)(v129 + 23) & 0x10) == 0)
    {
LABEL_203:
      v129 = sub_22F115B7C(v129);
      continue;
    }
    break;
  }
  v128 = v129;
LABEL_205:
  v131 = sub_22F115668(v128);
  if ((sub_22EB751E4((uint64_t **)a1, v131, v195, (uint64_t)v197, &v190) & 1) != 0)
  {
    v36 = 0;
    goto LABEL_76;
  }
  if (v208)
  {
    sub_22F24FB88(&v205, v212);
    if (v205)
    {
      v132 = v196;
      if (v196)
      {
        if (*(_BYTE *)(v191 + 16) == 25)
        {
          if (!(_DWORD)v212)
            goto LABEL_213;
        }
        else
        {
          v150 = (unsigned __int16)(*(_QWORD *)(v191 + 16) >> 38);
          if (v150 == v212)
          {
            if (!(unsigned __int16)(*(_QWORD *)(v191 + 16) >> 38))
              goto LABEL_213;
            v151 = v205;
            while (*v132 == *v151)
            {
              ++v132;
              ++v151;
              if (!--v150)
                goto LABEL_213;
            }
          }
        }
      }
      v190 = 1;
LABEL_213:
      v196 = v205;
      goto LABEL_214;
    }
  }
  if (v196)
  {
    v190 = 1;
    v196 = 0;
  }
LABEL_214:
  if (v40 != *(_QWORD *)(v29 + 24))
  {
    v134 = v211;
    v133 = v212;
    goto LABEL_224;
  }
  v133 = (unsigned __int16)(*(_QWORD *)(v29 + 16) >> 38);
  v134 = v211;
  if (v133 != v212)
  {
    v133 = v212;
    goto LABEL_224;
  }
  v135 = v191;
  if (!(unsigned __int16)(*(_QWORD *)(v29 + 16) >> 38))
  {
LABEL_220:
    if (v190)
      goto LABEL_224;
    goto LABEL_225;
  }
  v136 = 0;
  while (*(_QWORD *)(v29 + 40 + v136 * 8) == v211[v136])
  {
    if (v133 == ++v136)
      goto LABEL_220;
  }
LABEL_224:
  v135 = sub_22EE80544((_QWORD *)*a1, v40, v134, v133, 0, 0, (uint64_t)&v193);
  v36 = 0;
  if (v135 >= 0x10)
  {
LABEL_225:
    v137 = sub_22E8BB094((uint64_t)&v199, v135);
    v139 = 0;
    v140 = v192;
    *v138 = *v192;
    v138[1] = v140[1];
    v138[2] = v140[2];
    if (v191)
    {
      v141 = 0;
      if (*(_BYTE *)(v191 + 16) == 26)
      {
        v142 = *(_QWORD *)(v191 + 16);
        if ((v142 & 0x3C0000000000000) != 0)
        {
          v143 = (unsigned __int16)(v142 >> 38);
          if (*(_QWORD *)(v191 + 16) == 25)
            v143 = 0;
          v141 = *(_QWORD *)&v140[2 * v143 + 4];
          v139 = v141 & 0xFFFFFFFF00000000;
          v141 = v141;
        }
        else
        {
          v139 = 0;
          v141 = 0;
        }
      }
    }
    else
    {
      v141 = 0;
    }
    if (v137)
    {
      if (*(_BYTE *)(v137 + 16) == 26)
      {
        v144 = *(_QWORD *)(v137 + 16);
        if ((v144 & 0x3C0000000000000) != 0)
        {
          v145 = v141 | v139;
          if (*(_QWORD *)(v137 + 16) == 25)
            v146 = 0;
          else
            v146 = (unsigned __int16)(v144 >> 38);
          *(_QWORD *)&v138[2 * v146 + 4] = v145;
          v140 = v192;
        }
      }
    }
    v138[3] = v140[3];
    if (*(_BYTE *)(v137 + 16) != 25)
    {
      v147 = *(_QWORD *)(v137 + 16);
      if ((v147 & 0x3FFFC000000000) != 0)
      {
        v148 = 0;
        v149 = (unsigned __int16)(v147 >> 38);
        do
        {
          *(_QWORD *)&v138[2 * v148 + 4] = *((_QWORD *)v209[0] + v148);
          ++v148;
        }
        while (v149 != v148);
      }
    }
    v36 = v135;
  }
LABEL_76:
  if (v205 != v207)
    free(v205);
  if (v209[0] != v210)
    free(v209[0]);
  if (v211 != v213)
    free(v211);
  if (v36 >= 0x10)
  {
    v53 = *(_QWORD *)(*a1 + 88);
    v54 = v200.i64[0] - v200.i64[1];
    v55 = v200.i32[0] - v200.i32[2];
    if (v200.i32[0] == v200.i32[2])
      v55 = sub_22F11598C(v36);
    v52 = (unint64_t *)sub_22E3CD3D4(v53 + 2032, v55 + 8, 3);
    *v52 = v36;
    memcpy(v52 + 1, (const void *)(v199 + v200.i64[1]), v54);
  }
  else
  {
    v52 = 0;
  }
  if (v197[0] != v198)
    free(v197[0]);
  if ((_QWORD *)v199 != v201 && v199)
    MEMORY[0x2348A0E84]();
  if (v36 < 0x10)
  {
    v56 = 1;
    goto LABEL_262;
  }
  v57 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  if ((v57 & 4) != 0 && (v58 = *(void **)((v57 & 0xFFFFFFFFFFFFFFF8) + 40)) != 0)
    v177 = sub_22EB62928((int)a1, v58);
  else
    v177 = 0;
  v59 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v59 > 3 || v59 == 2)
    goto LABEL_122;
  v61 = *(_QWORD *)(*a1 + 216);
  v62 = *(_WORD *)(v61 + 8) & 0x7F;
  if (v62 == 16 || v62 == 83)
    goto LABEL_123;
  v63 = -40;
  if ((*(_WORD *)(v61 + 8) & 0x7Fu) > 0x46)
  {
    if (v62 == 71)
    {
      v63 = -56;
    }
    else if (v62 != 81)
    {
LABEL_114:
      if (v62 - 52 < 6)
      {
        v63 = -72;
      }
      else
      {
        v63 = -48;
        if (v62 - 33 < 5)
          v63 = -64;
      }
    }
  }
  else
  {
    if (v62 > 0x18)
      goto LABEL_113;
    if (((1 << v62) & 0x1066) == 0)
    {
      if (v62 == 24)
      {
        v63 = -48;
      }
      else
      {
LABEL_113:
        if (v62 != 70)
          goto LABEL_114;
        v63 = -64;
      }
    }
  }
  v64 = *(_QWORD *)(v61 + v63 + 16);
  v65 = (_QWORD *)(v64 & 0xFFFFFFFFFFFFFFF8);
  if ((v64 & 4) != 0)
    v65 = (_QWORD *)*v65;
  if ((sub_22EFC7ADC((unint64_t)v65) & 1) == 0)
LABEL_123:
    v66 = 2;
  else
LABEL_122:
    v66 = 0;
  v67 = (_QWORD *)sub_22F3C61E8(v2);
  v68 = (_QWORD *)sub_22F3365E8(*a1, *(_QWORD *)(v2 + 16), (uint64_t)v52, v66, (*(_DWORD *)v2 >> 18) & 3);
  v193 = v67;
  v179 = a1 + 1;
  sub_22F25E108(a1 + 1, &v193)[1] = v68;
  v69 = v67[16];
  v175 = (*(unsigned __int16 *)(v69 + 108) >> 13) & 1;
  v173 = *(_DWORD *)(v69 + 112) & 0x7FFFFFFF;
  v171 = sub_22EFD4B78((unint64_t)v67);
  v70 = sub_22F3B1CF4((uint64_t)v67);
  v71 = *a1;
  v72 = *(_QWORD *)(v2 + 16);
  v73 = sub_22F3C6220(v2);
  v74 = (unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v73 + 16))(v73) >> 32;
  if (*(_BYTE *)(*v52 + 16) == 25)
    v75 = 0;
  else
    v75 = (unsigned __int16)(*(_QWORD *)(*v52 + 16) >> 38);
  v76 = sub_22F3C6220(v2);
  v77 = sub_22F3366E8(v71, (uint64_t)v68, v72, v52, v74, v52 + 3, v75, *(_DWORD *)(v76 + 80) >> 30, v177 & 0xFFFFFFFFFFFFFFFELL);
  *(_QWORD *)(v180 + 1488) = v77;
  sub_22F3C6220(v2);
  v193 = (void *)sub_22F3C6220(v2);
  sub_22F25E108(v179, &v193)[1] = v77;
  v78 = *a1;
  v181[0] = v175;
  v182 = v173;
  v183 = v171;
  v184 = v70;
  v185 = 1;
  v178 = v77;
  sub_22EC52964(v78, v68, v77, v181);
  if (v185)
    v185 = 0;
  v79 = *a1;
  v80 = v77;
  v81 = v77 + 72;
  if (!v77)
    v81 = 0;
  v176 = *(_QWORD *)(v79 + 216);
  v82 = *(_QWORD *)(v79 + 3200);
  *(_QWORD *)(v79 + 3200) = 0;
  v169 = *(_QWORD *)(v79 + 10288);
  v170 = v82;
  v172 = *(_DWORD *)(v79 + 1944);
  v174 = *(_DWORD *)(v79 + 2192);
  *(_QWORD *)(v79 + 216) = v81;
  *(_DWORD *)(v79 + 1944) = *(_DWORD *)(v79 + 1904);
  *(_DWORD *)(v79 + 2192) = *(_DWORD *)(v79 + 1960);
  v83 = *(_QWORD *)(v2 + 16);
  v84 = (*(_DWORD *)v2 >> 18) & 3;
  v85 = *(_DWORD *)(v2 + 24);
  v86 = (*(_DWORD *)v2 >> 20) & 1;
  v87 = (*(_DWORD *)v2 >> 21) & 1;
  v88 = sub_22F3C66E8(v2);
  sub_22EC52B9C(v79, v180, v80, v83, v84, v85, v86, v87, v88);
  v89 = sub_22F3C64D0(v2);
  v90 = sub_22F3C650C(v2);
  if (v89 == v90)
  {
    v91 = 0;
  }
  else
  {
    v99 = v90;
    v91 = 0;
    v100 = a1 + 1;
    do
    {
      v101 = *(_QWORD *)v89;
      if ((*(_QWORD *)v89 & 1) != 0)
        break;
      if ((v101 & 0xFFFFFFFFFFFFFFFCLL) == 4)
      {
        sub_22EBBBBEC(*a1, *(_DWORD *)(v89 + 8), 1, 1, 0, (v101 >> 1) & 1);
      }
      else if (v101 >= 4)
      {
        if (sub_22F3C6428(v2, (_QWORD *)v89))
        {
          v110 = sub_22F3C64D0(v2);
          v111 = (char *)v202 + 88 * ((v89 - v110) >> 4);
          v112 = *(_QWORD *)v89 & 0xFFFFFFFFFFFFFFF8;
          v193 = v195;
          v194 = 0x400000000;
          v113 = *((unsigned int *)v111 + 4);
          if ((_DWORD)v113)
          {
            v117 = (_QWORD *)*((_QWORD *)v111 + 1);
            v168 = &v117[2 * v113];
            while ((*v117 & 1) == 0)
            {
              v118 = v117[1];
              if (v118 < 0x10)
                break;
              v119 = *(_QWORD *)(v112 + 40);
              v120 = (v119 & 7) != 0 ? 0 : v119 & 0xFFFFFFFFFFFFFFF8;
              v121 = sub_22EC5313C(*a1, *(_DWORD *)(v112 + 24), v118, *(_DWORD *)v111, v120, (*(_BYTE *)(v112 + 96) >> 5) & 3, *v117 & 0xFFFFFFFFFFFFFFFELL);
              if (!v121)
                break;
              v122 = v121;
              v123 = v194;
              if (v194 >= (unint64_t)HIDWORD(v194))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v123 = v194;
              }
              *((_QWORD *)v193 + v123) = v122;
              LODWORD(v194) = v194 + 1;
              sub_22F336D2C(*a1, v180, v122);
              v117 += 2;
              if (v117 == v168)
                goto LABEL_166;
            }
LABEL_181:
            if (v193 != v195)
              free(v193);
            v91 = 1;
            break;
          }
LABEL_166:
          if ((v91 & 1) != 0)
            goto LABEL_181;
          v114 = a1;
          v115 = v2;
          v199 = v112;
          v116 = *(_QWORD *)v193;
          v100 = v179;
          sub_22F25E108(v179, &v199)[1] = v116;
          if (v193 != v195)
            free(v193);
          v91 = 0;
          v2 = v115;
          a1 = v114;
        }
        else
        {
          v102 = *(_QWORD *)v89;
          if ((*(_QWORD *)v89 & 2) != 0)
            v103 = 1;
          else
            v103 = 2;
          if ((*(_QWORD *)v89 & 0xFFFFFFFFFFFFFFFCLL) == 4)
            v104 = 2;
          else
            v104 = v103;
          if (v102 < 4)
            v104 = 2;
          if ((v102 & 1) != 0)
            v105 = 0;
          else
            v105 = v104;
          v106 = *(_DWORD *)(v89 + 12);
          v107 = v102 & 0xFFFFFFFFFFFFFFF8;
          v199 = v102 & 0xFFFFFFFFFFFFFFF8;
          v193 = 0;
          if (sub_22E793870(v100, &v199, &v193)
            && v193 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
          {
            v107 = *((_QWORD *)v193 + 1);
          }
          if (!v107 || (*(_BYTE *)(v107 + 28) & 0x80) != 0)
          {
            v91 = 1;
          }
          else
          {
            v108 = *a1;
            v109 = *(_DWORD *)(v89 + 8);
            v193 = 0;
            v199 = 0;
            sub_22EB4EE10(v108, v107, v109, v105, v106, 1, (uint64_t *)&v193, (uint64_t *)&v199, 0);
          }
        }
      }
      v89 += 16;
    }
    while (v89 != v99);
  }
  *(_DWORD *)(v180 + 1508) = *(_DWORD *)(v180 + 1272);
  v92 = *a1;
  LODWORD(v211) = 6;
  v193 = 0;
  LODWORD(v209[0]) = 3;
  v199 = *(unsigned int *)(v92 + 1704);
  sub_22EB4DDB8(v92 + 3688, (int *)&v211, (int *)&v199, (__int16 *)(v92 + 1693), (uint64_t *)&v193, (int *)v209);
  v93 = *(unsigned int *)(v92 + 3696);
  v94 = v93 - 2;
  v95 = *(_QWORD *)(v92 + 3688);
  v96 = *(_DWORD *)(v95 + 576 * (v93 - 2));
  if (v96 == 5)
  {
    *(_BYTE *)(v95 + 576 * v93 - 4) = *(_BYTE *)(v95 + 576 * v94 + 572);
    v97 = 1;
  }
  else if (v96 == 2)
  {
    *(_BYTE *)(v95 + 576 * v93 - 4) = 1;
    v97 = *(_BYTE *)(v95 + 576 * v94 + 573) != 0;
  }
  else
  {
    v97 = 0;
    *(_BYTE *)(v95 + 576 * v93 - 4) = 0;
  }
  v98 = v95 + 576 * v93;
  *(_BYTE *)(v98 - 3) = v97;
  *(_WORD *)(v92 + 1693) = 0;
  if (*(_DWORD *)(v92 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v92 + 1776), (llvm::SmallPtrSetImplBase *)(v98 - 560));
    sub_22EAEAE08(v92 + 1840, (uint64_t *)(v98 - 496));
    if ((v91 & 1) == 0)
      goto LABEL_255;
LABEL_138:
    LOBYTE(v187) = 0;
    goto LABEL_259;
  }
  if ((v91 & 1) != 0)
    goto LABEL_138;
LABEL_255:
  sub_22F3C638C(v2);
  v157 = sub_22EB75F08(a1, *(__n128 **)(v2 + 8 * *(unsigned __int16 *)(v2 + 4) + 32), 0, v152, v153, v154, v155, v156);
  LOBYTE(v187) = 0;
  if ((v157 & 1) != 0)
  {
LABEL_259:
    if (v176)
    {
      *(_QWORD *)(v79 + 216) = v176;
      *(_QWORD *)(v79 + 3200) = v170;
      *(_QWORD *)(v79 + 10288) = v169;
      *(_DWORD *)(v79 + 1944) = v172;
      *(_DWORD *)(v79 + 2192) = v174;
    }
    v163 = *(unsigned int *)(v2 + 16);
    v56 = 1;
    sub_22F336DD4(*a1, v163, 0, 1);
    goto LABEL_262;
  }
  sub_22F2F3A38((uint64_t)&v193, v180);
  v158 = v157 & 0xFFFFFFFFFFFFFFFELL;
  sub_22EA30A38(*a1, v178, v158, 1);
  if (v176)
  {
    *(_QWORD *)(v79 + 216) = v176;
    *(_QWORD *)(v79 + 3200) = v170;
    *(_QWORD *)(v79 + 10288) = v169;
    *(_DWORD *)(v79 + 1944) = v172;
    *(_DWORD *)(v79 + 2192) = v174;
  }
  v159 = *a1;
  v160 = *(unsigned int *)(v2 + 16);
  sub_22F0D60E4(v158);
  sub_22EC54548(v159, v160, v161, (uint64_t)&v193);
  v56 = v162;
  sub_22F2F43D0((uint64_t)&v193);
LABEL_262:
  sub_22F2F446C((uint64_t)&v186);
  v164 = (char *)v202;
  if ((_DWORD)v203)
  {
    v165 = 88 * v203;
    do
    {
      v166 = *(char **)&v164[v165 - 80];
      if (&v164[v165 - 64] != v166)
        free(v166);
      v165 -= 88;
    }
    while (v165);
    v164 = (char *)v202;
  }
  if (v164 != v204)
    free(v164);
  return v56;
}

uint64_t sub_22EB6952C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22EB723F0((uint64_t *)a1, v4, *(void **)(a2 + 48), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v13 = v9;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)(v14 + 8);
  }
  if (v9)
  {
    v10 = sub_22EB62928(a1, *(void **)(a2 + 16));
    if ((v10 & 1) == 0)
    {
      v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
      return sub_22F2F44CC(v12, v10 & 0xFFFFFFFFFFFFFFFELL, v9, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
    }
  }
  return 1;
}

uint64_t sub_22EB69638(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB62928((int)a1, *(void **)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  if (*(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL) || *(_QWORD *)(v2 + 24) != (v5 & 0xFFFFFFFFFFFFFFFELL))
  {
    v6 = *(_DWORD *)(v2 + 32);
    v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
    return sub_22EB296C0(*a1, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), 0, (uint64_t *)&v8, 1, v6);
  }
  return v2;
}

uint64_t sub_22EB696D8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22EB62928(a1, *(void **)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v11 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v11)
    {
      v12 = (void **)(a2 + 24);
      v13 = 8 * v11;
      do
      {
        v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v12);
        v15 = *(_QWORD *)(a1 + 40);
        if (v15 == *(_QWORD *)(a1 + 32))
          v16 = 52;
        else
          v16 = 48;
        if (v14 != (void **)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return v9;
}

uint64_t sub_22EB697C4(int a1, uint64_t a2)
{
  char v2;
  _QWORD *v3;

  v2 = a2;
  v3 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF8);
  if ((v2 & 4) != 0)
    v3 = (_QWORD *)v3[5];
  return sub_22EB62928(a1, v3);
}

uint64_t sub_22EB697D8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB62928((int)a1, *(void **)(v2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EB62928((int)a1, *(void **)(v2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL)
    || *(_QWORD *)(v2 + 24) != v7
    || *(_QWORD *)(v2 + 32) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    return sub_22EB2AC58(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v7, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 4));
  }
  return v2;
}

uint64_t sub_22EB69888(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int32 v29;
  unsigned int v30;
  unint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  __int128 v48;
  void *v49[2];
  void *v50[2];
  _BYTE v51[129];
  uint64_t v52;
  void *v53[2];
  _OWORD v54[4];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  __n128 v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  __int16 v63;
  char v64;
  uint64_t v65;

  v2 = a2;
  v65 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x80000) != 0 && (v6 = *(_QWORD *)(v2 + 48)) != 0)
  {
    v7 = sub_22EB723F0(a1, v6, *(void **)(v2 + 56), 0, 0);
    if (!v7)
      return 1;
    v9 = v7;
    v10 = v8;
    v5 = *(_DWORD *)v2;
    if ((*(_DWORD *)v2 & 0x100000) != 0)
      goto LABEL_6;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
    {
LABEL_6:
      v11 = *(_DWORD *)(v2 + 24 * ((v5 >> 19) & 1) + 56);
      goto LABEL_9;
    }
  }
  v11 = 0;
LABEL_9:
  v12 = *(_QWORD **)(v2 + 24);
  v53[0] = v12;
  v50[0] = 0;
  if (sub_22E793870(a1 + 1, v53, v50) && v50[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v12 = (_QWORD *)*((_QWORD *)v50[0] + 1);
  if (!v12)
    return 1;
  v13 = *(_DWORD *)v2;
  if ((*(_DWORD *)v2 & 0x80000) != 0)
  {
    v15 = *(_QWORD *)(v2 + 64);
    v14 = *(_QWORD *)(v2 + 24);
  }
  else
  {
    v14 = *(_QWORD *)(v2 + 24);
    v15 = v14;
  }
  v16 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  if (v14 == (v15 & 0xFFFFFFFFFFFFFFFCLL))
  {
    v16 = (unint64_t)v12;
    goto LABEL_25;
  }
  v53[0] = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
  v50[0] = 0;
  if (sub_22E793870(a1 + 1, v53, v50) && v50[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v16 = *((_QWORD *)v50[0] + 1);
  if (!v16)
    return 1;
  v13 = *(_DWORD *)v2;
LABEL_25:
  v18 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  v19 = *(_QWORD *)(v2 + 16);
  if ((_QWORD *)v19 == v18)
  {
    if ((v13 & 0x80000) != 0)
    {
      v33 = *(_QWORD *)(v2 + 48);
      v34 = *(_QWORD *)(v2 + 56);
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
    if (v9 == v33 && v10 == v34 && v12 == *(_QWORD **)(v2 + 24))
    {
      v43 = (v13 & 0x80000) != 0 ? *(_QWORD *)(v2 + 64) : (unint64_t)v12;
      if (v16 == (v43 & 0xFFFFFFFFFFFFFFFCLL)
        && ((v13 & 0x100000) == 0 || !*(_DWORD *)(v2 + 24 * ((v13 >> 19) & 1) + 48)))
      {
        sub_22EB52238(*a1, v2);
        return v2;
      }
    }
  }
  v50[0] = v51;
  v50[1] = (void *)0x800000000;
  v52 = 0;
  if ((v13 & 0x100000) != 0)
  {
    v20 = v2 + 24 * ((v13 >> 19) & 1);
    v23 = *(_DWORD *)(v20 + 48);
    v21 = v20 + 48;
    v22 = v23;
    if (v23)
    {
      LODWORD(v52) = v22;
      HIDWORD(v52) = *(_DWORD *)(v21 + 4);
      v24 = v21 + 16 * ((v13 >> 20) & 1);
      if ((sub_22EB7FC00((uint64_t)a1, v24, v24 + 32 * *(unsigned int *)(v21 + 12)) & 1) != 0)
      {
LABEL_36:
        v2 = 1;
        goto LABEL_68;
      }
      v19 = *(_QWORD *)(v2 + 16);
    }
  }
  v25 = *a1;
  sub_22F0D4E74(v19);
  v27 = sub_22F141A3C(HIDWORD(v26), 0, *(_QWORD **)(v25 + 112), *(_DWORD **)(v25 + 72));
  v28 = *(_QWORD *)(v2 + 32);
  v29 = *(_DWORD *)(v2 + 40);
  v46.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
  v46.n128_u32[2] = v29;
  v47 = v28;
  if (v46.n128_u64[0])
  {
    sub_22EB7ADEC((__n128 *)v53, a1, &v46);
    v46 = *(__n128 *)v53;
    v47 = *(_QWORD *)&v54[0];
    if (!v53[0])
      goto LABEL_36;
  }
  v30 = v11;
  v31 = *(unsigned int *)v2;
  if ((v31 & 0x100000) != 0)
  {
    if (*(_DWORD *)(v2 + 24 * ((v31 >> 19) & 1) + 48))
      v32 = v50;
    else
      v32 = 0;
  }
  else
  {
    v32 = 0;
  }
  v36 = sub_22EC2624C(*a1, v18, (v31 >> 18) & 1);
  if (v12[5])
  {
    v48 = 0u;
    *(_OWORD *)v49 = 0u;
    sub_22E8ACE30((uint64_t)&v48, v9, v10);
    v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if ((v31 & 0x40000) != 0
      && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39)
    {
      v2 = 1;
    }
    else
    {
      v45 = v27;
      v38 = (_QWORD *)*a1;
      v53[0] = 0;
      v53[1] = (char *)v54 + 8;
      *(_QWORD *)&v54[0] = 0x800000000;
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = v38;
      v59 = v46;
      v60 = v47;
      v61 = xmmword_22F463A40;
      v62 = 16842752;
      v63 = 0;
      v64 = 0;
      sub_22EC56024((uint64_t)v53);
      v39 = *(unsigned int *)(v16 + 28);
      v40 = v54[0];
      if (LODWORD(v54[0]) >= DWORD1(v54[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v40 = v54[0];
      }
      *((_QWORD *)v53[1] + v40) = (v39 >> 13) & 3 | v16;
      ++LODWORD(v54[0]);
      LODWORD(v53[0]) = 2;
      sub_22EC561E4((uint64_t)v53);
      v2 = sub_22EC24AB8(*a1, v36 & 0xFFFFFFFFFFFFFFFELL, v37, v45, (v31 >> 18) & 1, (uint64_t *)&v48, v30, 0, (uint64_t)v53, (uint64_t)v32, 0, 0, 0);
      if (HIBYTE(v62))
      {
        if (LODWORD(v53[0]) == 5)
        {
          sub_22EC64D18(v58, (uint64_t)v53);
        }
        else if (v56 && (*(_DWORD *)(v58[9] + 52) & 0x400000) != 0)
        {
          sub_22E90B5FC((unint64_t)v58, (uint64_t)v53);
        }
      }
      if (v55)
      {
        v44 = sub_22EC6CBD0(v55);
        MEMORY[0x2348A0E9C](v44, 0x10E0C409F09D3C3);
      }
      if (v53[1] != (char *)v54 + 8)
        free(v53[1]);
    }
    if (!HIDWORD(v49[1]))
      goto LABEL_68;
    v42 = v49[0];
  }
  else
  {
    v41 = (unint64_t)sub_22EB24398(*a1, v36 & 0xFFFFFFFFFFFFFFFELL, v9, v35, (uint64_t)v12);
    if ((v41 & 1) != 0)
    {
      v2 = 1;
      goto LABEL_68;
    }
    *(_OWORD *)v53 = 0u;
    v54[0] = 0u;
    v2 = sub_22EC25974((_QWORD *)*a1, v41 & 0xFFFFFFFFFFFFFFFELL, (v31 >> 18) & 1, v27, (uint64_t)v53, (uint64_t)v12, ((unint64_t)*(unsigned int *)(v16 + 28) >> 13) & 3 | v16, (uint64_t)&v46);
    if (!HIDWORD(v54[0]))
      goto LABEL_68;
    v42 = *(void **)&v54[0];
  }
  free(v42);
LABEL_68:
  if (v50[0] != v51)
    free(v50[0]);
  return v2;
}

uint64_t sub_22EB69E30(uint64_t **a1, uint64_t a2)
{
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int8 **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  void *v25[2];
  _BYTE v26[32];
  void *v27;
  uint64_t v28;
  _QWORD v29[6];

  v29[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22EB62928((int)a1, **(void ***)(a2 + 40));
  v5 = sub_22EB6DD04(a1, *(uint64_t **)(a2 + 16));
  if (v5)
  {
    v6 = v5;
    v21 = 0;
    v25[0] = v26;
    v25[1] = (void *)0x400000000;
    v7 = 1;
    if ((sub_22EB7570C((uint64_t *)a1, *(void ***)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)v25, &v21) & 1) == 0)
    {
      if (v6 != *(unint64_t **)(a2 + 16) || v21 != 0)
      {
        v22 = v24;
        v23 = 0x400000000;
        v9 = *(unsigned int *)(a2 + 32);
        if ((_DWORD)v9)
        {
          v10 = 0;
          LODWORD(v11) = 0;
          v12 = 8 * v9;
          do
          {
            v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v10) + 8);
            if (v11 >= HIDWORD(v23))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              LODWORD(v11) = v23;
            }
            *((_QWORD *)v22 + v11) = v13;
            v11 = (v23 + 1);
            LODWORD(v23) = v23 + 1;
            v10 += 8;
          }
          while (v12 != v10);
          v14 = (uint64_t *)v22;
          v15 = (unsigned __int8 **)v25[0];
          v16 = *(_QWORD *)(a2 + 24);
          v27 = v29;
          v28 = 0x400000000;
          if ((_DWORD)v11)
          {
            v20 = v16;
            v7 = 1;
            while (1)
            {
              v17 = *v14++;
              v18 = sub_22ECFABE8(*a1, *v15, v17, 1, 0);
              if ((v18 & 1) != 0)
                goto LABEL_26;
              v19 = v28;
              if (v28 >= (unint64_t)HIDWORD(v28))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v19 = v28;
              }
              *((_QWORD *)v27 + v19) = v18 & 0xFFFFFFFFFFFFFFFELL;
              LODWORD(v28) = v28 + 1;
              ++v15;
              if (!--v11)
              {
                v16 = v20;
                break;
              }
            }
          }
        }
        else
        {
          v16 = *(_QWORD *)(a2 + 24);
          v27 = v29;
          v28 = 0x400000000;
        }
        v7 = sub_22E3CD3D4((*a1)[11] + 2032, 48, 3);
        sub_22F0614DC(v7, (*a1)[11], v6, (uint64_t *)v27, v28, v16);
LABEL_26:
        if (v27 != v29)
          free(v27);
        if (v22 != v24)
          free(v22);
        goto LABEL_30;
      }
      v7 = a2;
    }
LABEL_30:
    if (v25[0] != v26)
      free(v25[0]);
    return v7;
  }
  return 1;
}

uint64_t sub_22EB6A118(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v13;

  v2 = a2;
  v5 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(void **)(v2 + 24);
  if (v6)
  {
    v7 = sub_22EB62928((int)a1, v6);
    if ((v7 & 1) != 0)
      return 1;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(void **)(v2 + 32);
  if (v8)
  {
    v9 = sub_22EB62928((int)a1, v8);
    if ((v9 & 1) != 0)
      return 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = *(void **)(v2 + 40);
  if (v10)
  {
    v11 = sub_22EB62928((int)a1, v10);
    if ((v11 & 1) != 0)
      return 1;
  }
  else
  {
    v11 = 0;
  }
  v13 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v5 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 24) == v13
    && *(_QWORD *)(v2 + 32) == (v9 & 0xFFFFFFFFFFFFFFFELL))
  {
    return v2;
  }
  return sub_22EB29E14(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), v4, v13, *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 52), v9 & 0xFFFFFFFFFFFFFFFELL, v11 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 56));
}

uint64_t sub_22EB6A210(_QWORD **a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (void **)(a2 + 32);
  v5 = sub_22EB62928((int)a1, *(void **)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22EB62928((int)a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22EB6A39C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t *v56;
  __int128 v57[4];
  void *v58;
  uint64_t v59;
  _QWORD v60[34];

  v2 = a2;
  v60[32] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 28);
  memset(v57, 0, sizeof(v57));
  v58 = v60;
  v59 = 0x400000000;
  sub_22E8BB974((uint64_t)&v58, v4, v57);
  if (!(_DWORD)v4)
    goto LABEL_52;
  v56 = a1;
  v48 = v4;
  v5 = 0;
  v6 = 0;
  v49 = 0;
  v7 = (uint64_t *)(v2 + 32);
  v51 = v4 << 6;
  v52 = (uint64_t *)(v2 + 32);
  v8 = 2;
  v9 = v2 + 32;
  v50 = v2;
  do
  {
    v10 = *(_QWORD *)v9;
    v11 = *(_QWORD *)(*(_QWORD *)v9 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v13 = (char *)v58 + v5;
    *(_QWORD *)v13 = v12;
    *((_DWORD *)v13 + 2) = *(_DWORD *)(v10 + 24);
    v14 = *(_DWORD *)(v10 + 24);
    v15 = *(_QWORD *)(v10 + 56);
    if ((v15 & 4) == 0)
    {
      if (v14 == *(_DWORD *)(v10 + 64))
        goto LABEL_10;
      v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_9;
    }
    v39 = v15 & 0xFFFFFFFFFFFFFFF8;
    if (*(_DWORD *)(v39 + 16))
      v40 = ***(_DWORD ***)(v39 + 24);
    else
      v40 = *(_DWORD *)(v10 + 64);
    if (v14 != v40)
    {
      v16 = *(uint64_t **)(v39 + 32);
LABEL_9:
      v17 = sub_22EB6DD04((_QWORD **)v56, v16);
      v18 = sub_22EB7239C((uint64_t)v56, *(_QWORD *)(v10 + 48));
      v19 = sub_22EE7D030(*v56, v18, (uint64_t)v17);
      *(_QWORD *)((char *)v58 + v5 + 16) = v19;
    }
LABEL_10:
    v20 = &v7[*(unsigned int *)(v2 + 28)];
    v21 = v8 - 2;
    v54 = (void *)v20[v21];
    v55 = v8 - 1;
    v22 = (void *)v20[v55];
    v23 = (void *)v20[v8];
    v24 = sub_22EB62928((int)v56, v54);
    v53 = v22;
    v25 = sub_22EB62928((int)v56, v22);
    v26 = v23;
    v27 = sub_22EB62928((int)v56, v23);
    if ((v6 & 1) != 0)
      goto LABEL_19;
    v28 = *(_QWORD *)(v10 + 56);
    v29 = v28 & 0xFFFFFFFFFFFFFFF8;
    v30 = v28 & 0xFFFFFFFFFFFFFFF8;
    if ((v28 & 4) != 0)
      v30 = *(_QWORD *)(v29 + 32);
    if (v30)
    {
      v6 = 1;
      if (*(_QWORD *)((char *)v58 + v5 + 16) < 0x10uLL || (v24 & 1) != 0)
        goto LABEL_20;
    }
    else if ((v24 & 1) != 0)
    {
      goto LABEL_19;
    }
    if (((v25 | v27) & 1) != 0)
    {
LABEL_19:
      v6 = 1;
LABEL_20:
      v2 = v50;
      v7 = v52;
      goto LABEL_21;
    }
    v31 = v24 & 0xFFFFFFFFFFFFFFFELL;
    v32 = (char *)v58;
    v33 = (char *)v58 + v5;
    *((_QWORD *)v33 + 3) = v24 & 0xFFFFFFFFFFFFFFFELL;
    *((_QWORD *)v33 + 4) = v25 & 0xFFFFFFFFFFFFFFFELL;
    *((_QWORD *)v33 + 5) = v27 & 0xFFFFFFFFFFFFFFFELL;
    v2 = v50;
    v7 = v52;
    *((_DWORD *)v33 + 12) = *((_DWORD *)&v52[*(unsigned int *)(v50 + 28) + 3 * *(_DWORD *)(v50 + 28)] + v21);
    *((_DWORD *)v33 + 13) = *((_DWORD *)&v52[*(unsigned int *)(v50 + 28) + 3 * *(_DWORD *)(v50 + 28)] + v55);
    *((_DWORD *)v33 + 14) = *((_DWORD *)&v52[*(unsigned int *)(v50 + 28) + 3 * *(_DWORD *)(v50 + 28)] + v8);
    if ((v49 & 1) != 0)
    {
      v6 = 0;
LABEL_25:
      v34 = 1;
LABEL_40:
      v49 = v34;
      goto LABEL_21;
    }
    if ((v28 & 4) != 0)
      v29 = *(_QWORD *)(v29 + 32);
    if (v29)
    {
      v35 = *(_QWORD *)&v32[v5 + 16];
      if (v35 >= 0x10)
        v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
      else
        v36 = 0;
      v37 = *(_QWORD *)(v10 + 48);
      if (v37 >= 0x10)
        v38 = *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0);
      else
        v38 = 0;
      v6 = 0;
      if (v36 != v38)
        goto LABEL_25;
    }
    else
    {
      v6 = 0;
    }
    v49 = 1;
    if (v54 == (void *)v31 && v53 == (void *)(v25 & 0xFFFFFFFFFFFFFFFELL))
    {
      v6 = 0;
      v34 = v26 != (void *)(v27 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_40;
    }
LABEL_21:
    v9 += 8;
    v5 += 64;
    v8 += 3;
  }
  while (v51 != v5);
  if ((v6 & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v41 = v48;
    if ((v49 & 1) != 0)
    {
      v42 = sub_22EB2C3A8((_QWORD *)*v56, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v58, v59);
      v2 = v42;
      if (v42 >= 2)
      {
        v43 = (uint64_t *)((v42 & 0xFFFFFFFFFFFFFFFELL) + 32);
        do
        {
          v45 = *v7++;
          v44 = v45;
          v46 = *v43++;
          *(_QWORD *)&v57[0] = v44;
          sub_22F25E108(v56 + 1, v57)[1] = v46;
          --v41;
        }
        while (v41);
      }
    }
  }
LABEL_52:
  if (v58 != v60)
    free(v58);
  return v2;
}

uint64_t sub_22EB6A78C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;

  v2 = a2;
  v4 = (uint64_t *)sub_22EB6DD04((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (!v4)
    return 1;
  if (v4 != *(uint64_t **)(v2 + 16))
    return sub_22EC2A5E0(*a1, *(_DWORD *)(v2 + 24), v4, *(_DWORD *)(v2 + 28));
  return v2;
}

uint64_t sub_22EB6A7E4(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  void *v14[2];

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    v7 = *(_DWORD *)(v2 + 24);
    v6 = *(_DWORD *)(v2 + 28);
    v8 = *(unsigned __int8 *)(v2 + 32);
    v13 = 0u;
    *(_OWORD *)v14 = 0u;
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)((*a1)[11] + 15192), "isa", 3uLL);
    v11 = v7;
    sub_22EFC6D6C((uint64_t)&v12, v10);
    v2 = sub_22EC225CC(*a1, v5, *(_QWORD *)(v5 + 8), v6, v8, (uint64_t)&v13, 0, 0, (uint64_t)&v10, 0, 0, 0);
    if (HIDWORD(v14[1]))
      free(v14[0]);
  }
  return v2;
}

uint64_t sub_22EB6A8C8(_QWORD **a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  unint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL))
  {
    v6 = *(_QWORD *)(v2 + 16);
    v7 = *(_DWORD *)(v2 + 32);
    v8 = *(_BYTE *)(v2 + 40);
    v14 = 0u;
    *(_OWORD *)v15 = 0u;
    v11 = *(_QWORD *)(v6 + 40);
    v12 = v7;
    sub_22EFC6D6C((uint64_t)&v13, v11);
    v9 = sub_22EC225CC(*a1, v5, *(_QWORD *)(v5 + 8), v7, v8 & 1, (uint64_t)&v14, 0, 0, (uint64_t)&v11, 0, 0, 0);
    v2 = v9;
    if ((v8 & 2) != 0 && v9 >= 2)
      *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
    if (HIDWORD(v15[1]))
      free(v15[0]);
  }
  return v2;
}

uint64_t sub_22EB6A9B4(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[64];
  void *v41;
  uint64_t v42;
  _QWORD v43[10];

  v43[8] = *MEMORY[0x24BDAC8D0];
  v37 = 0;
  v41 = v43;
  v42 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22EB7570C(a1, (void **)(a2 + 48), v4, 0, (uint64_t)&v41, &v37) & 1) != 0)
    goto LABEL_25;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 >= 2)
  {
    if (BYTE2(v5))
    {
      if ((v5 & 0xFF0000) == 0x10000)
        v10 = *(void **)(a2 + 40);
      else
        v10 = 0;
      v11 = sub_22EB62928((int)a1, v10);
      if ((v11 & 1) != 0)
        goto LABEL_25;
      v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if (*(unsigned __int8 *)(a2 + 26) << 16 == 0x10000)
        v13 = *(_QWORD *)(a2 + 40);
      else
        v13 = 0;
      if (v13 != v12 || v37)
      {
        v38 = v40;
        v39 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v38);
        v30 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v31 = *v30;
          v30 = (uint64_t *)(*v30 + 40);
        }
        else
        {
          v31 = 0;
        }
        v21 = sub_22EC2DA20(*a1, v12, *(_QWORD *)(v12 + 8), 0, *v30, v31, *(_DWORD *)(a2 + 32), v29, (int *)v38, v39, *(unsigned int *)(a2 + 36), (uint64_t)v41, v42, 0);
LABEL_50:
        v19 = v21;
        v36 = v38;
        if (v38 == v40)
          goto LABEL_26;
        goto LABEL_51;
      }
    }
    else
    {
      if ((v5 & 0xFF0000) != 0)
        v9 = 0;
      else
        v9 = *(uint64_t **)(a2 + 40);
      v14 = sub_22EB6DD04((_QWORD **)a1, v9);
      if (!v14)
        goto LABEL_25;
      v15 = (uint64_t *)v14;
      if (*(_BYTE *)(a2 + 26) || v14 != *(unint64_t **)(a2 + 40) || v37)
      {
        v38 = v40;
        v39 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v38);
        v17 = (uint64_t *)(a2 + 16);
        if ((*(_BYTE *)(a2 + 27) & 1) != 0)
        {
          v18 = *v17;
          v17 = (uint64_t *)(*v17 + 40);
        }
        else
        {
          v18 = 0;
        }
        v21 = sub_22EC2F730((_QWORD *)*a1, v15, *v15, 0, *v17, v18, *(_DWORD *)(a2 + 32), v16, (int *)v38, v39, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v41, v42, 0, 0);
        goto LABEL_50;
      }
    }
    v19 = sub_22EBCC6C0(*a1, a2);
    goto LABEL_26;
  }
  if ((v5 & 0x1000000) == 0 || (v6 = (unint64_t *)(a2 + 16), !*(_QWORD *)(a2 + 16)))
  {
LABEL_25:
    v19 = 1;
    goto LABEL_26;
  }
  v38 = v40;
  v39 = 0x1000000000;
  sub_22F3C78D4(a2, (uint64_t)&v38);
  v7 = *(_DWORD *)(a2 + 24);
  if ((v7 & 0xFE0000) == 0x20000)
    v8 = *(unsigned int *)(a2 + 28);
  else
    v8 = 0;
  v22 = (uint64_t *)(a2 + 16);
  if ((v7 & 0x1000000) != 0)
    v22 = (uint64_t *)(*v6 + 40);
  v23 = *v22;
  v24 = (int *)v38;
  v25 = v39;
  v26 = sub_22F3C7A10(a2);
  if ((v7 & 0x1000000) != 0)
    v28 = *v6;
  else
    v28 = 0;
  v32 = *(_DWORD *)(a2 + 32);
  v33 = *(unsigned int *)(a2 + 36);
  v34 = (_QWORD *)*a1;
  if ((*(_BYTE *)(v28 + 58) & 2) != 0)
    v35 = sub_22EC2DA20((uint64_t)v34, 0, v26, v8, v23, v28, v32, v27, v24, v25, v33, (uint64_t)v41, v42, 0);
  else
    v35 = sub_22EC2F730(v34, 0, v26, v8, v23, v28, v32, v27, v24, v25, v33, (unsigned __int8 **)v41, v42, 0, 0);
  v19 = v35;
  v36 = v38;
  if (v38 != v40)
LABEL_51:
    free(v36);
LABEL_26:
  if (v41 != v43)
    free(v41);
  return v19;
}

uint64_t sub_22EB6AD64(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = 0x800000000;
  v7 = 0;
  if ((sub_22EB7570C(a1, (void **)(a2 + 40), *(_DWORD *)(a2 + 16), 0, (uint64_t)&v8, &v7) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    if (v7)
      v5 = sub_22EC28BF4((_QWORD *)*a1, *(_QWORD *)(a2 + 20), (uint64_t *)v8, v9);
    else
      v5 = sub_22EBCC6C0(*a1, a2);
    v4 = v5;
  }
  if (v8 != v10)
    free(v8);
  return v4;
}

uint64_t sub_22EB6AE44(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  if (*(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EC27DFC(*a1, *(_QWORD *)(v2 + 32), (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v2;
}

uint64_t sub_22EB6AE9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  int v39;
  _QWORD v40[2];
  int v41;
  unint64_t v42;
  int v43;
  void *v44;
  int v45;
  void *v46;
  void *v47;
  unint64_t v48;
  int v49;
  char v50;
  char v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[34];

  v2 = a2;
  v54[32] = *MEMORY[0x24BDAC8D0];
  v52 = v54;
  v53 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) == 0)
    goto LABEL_32;
  v6 = 0;
  v7 = (void **)(a2 + 48);
  v8 = (unint64_t)&loc_22F44E000;
  v9 = a2;
  do
  {
    v11 = *(v7 - 1);
    v10 = *v7;
    v12 = v8 & 0xFFFFFF00FFFFFF00;
    v13 = *(_DWORD *)(v2 + 16);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_4;
    v21 = v9 + 16 * (v13 & 0x7FFFFFFF);
    v22 = *(_DWORD *)(v21 + 40);
    LODWORD(v21) = *(_DWORD *)(v21 + 44);
    v23 = v8 & 0xFFFFFF0000000000 | (v21 - 1) | 0x100000000;
    if ((_DWORD)v21)
      v12 = v23;
    if (!v22)
    {
      v2 = a2;
LABEL_4:
      v14 = sub_22EB62928((int)a1, *(v7 - 1));
      if ((v14 & 1) != 0)
        goto LABEL_29;
      v15 = sub_22EB62928((int)a1, v10);
      if ((v15 & 1) != 0)
        goto LABEL_29;
      v16 = v10 == (void *)(v15 & 0xFFFFFFFFFFFFFFFELL) && v11 == (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
      v47 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
      v48 = v15 & 0xFFFFFFFFFFFFFFFELL;
      v17 = !v16;
      v49 = 0;
      v6 |= v17;
      v50 = 0;
      v51 = 0;
      v18 = (_OWORD *)sub_22E78DF7C((uint64_t)&v52, (unint64_t)&v47, 1);
      v19 = (char *)v52 + 32 * v53;
      v20 = v18[1];
      *v19 = *v18;
      v19[1] = v20;
      LODWORD(v53) = v53 + 1;
      goto LABEL_26;
    }
    v47 = &v49;
    v48 = 0x200000000;
    v24 = *a1;
    v45 = 7;
    v46 = v11;
    sub_22EE7377C(v24, (uint64_t)&v45, (uint64_t)&v47);
    v25 = *a1;
    v43 = 7;
    v44 = v10;
    sub_22EE7377C(v25, (uint64_t)&v43, (uint64_t)&v47);
    v26 = *a1;
    v39 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v27 = sub_22EB62928((int)a1, v11);
    if ((v27 & 1) != 0
      || ((v16 = v11 == (void *)(v27 & 0xFFFFFFFFFFFFFFFELL), v28 = v27 & 0xFFFFFFFFFFFFFFFELL, v16)
        ? (v29 = 0)
        : (v29 = 1),
          v6 |= v29,
          v30 = sub_22EB62928((int)a1, v10),
          (v30 & 1) != 0))
    {
      v31 = 0;
    }
    else
    {
      v40[0] = v28;
      v40[1] = v30 & 0xFFFFFFFFFFFFFFFELL;
      v6 |= v10 != (void *)(v30 & 0xFFFFFFFFFFFFFFFELL);
      v41 = v22;
      v42 = v12;
      v31 = 1;
      v32 = (_OWORD *)sub_22E78DF7C((uint64_t)&v52, (unint64_t)v40, 1);
      v33 = (char *)v52 + 32 * v53;
      v34 = v32[1];
      *v33 = *v32;
      v33[1] = v34;
      LODWORD(v53) = v53 + 1;
    }
    *(_DWORD *)(v26 + 11992) = v39;
    v2 = a2;
    if (v47 != &v49)
      free(v47);
    if (!v31)
    {
LABEL_29:
      v35 = 1;
      goto LABEL_34;
    }
LABEL_26:
    v9 += 8;
    v7 += 2;
    v8 = v12;
    --v5;
  }
  while (v5);
  if ((v6 & 1) == 0)
  {
LABEL_32:
    v36 = sub_22EBCC6C0(*a1, v2);
    goto LABEL_33;
  }
  v36 = sub_22EC297B0((_QWORD *)*a1, *(_QWORD *)(v2 + 20), (uint64_t)v52, v53);
LABEL_33:
  v35 = v36;
LABEL_34:
  if (v52 != v54)
    free(v52);
  return v35;
}

uint64_t sub_22EB6B194(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  void *v19[2];

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) == 0)
  {
    v5 = sub_22EB62928((int)a1, (void *)(v3 & 0xFFFFFFFFFFFFFFF8));
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if ((v5 & 0xFFFFFFFFFFFFFFFELL) != (*(_QWORD *)(v2 + 40) & 0xFFFFFFFFFFFFFFF8))
      {
        v7 = *(_QWORD *)(v2 + 16);
        if ((v7 & 4) != 0)
        {
          v10 = (*a1)[11];
          v11 = *(_QWORD *)(v10 + 16872);
          v12 = v7 & 0xFFFFFFFFFFFFFFF8;
          v13 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
          v14 = *(_DWORD *)(v2 + 32);
          v2 = sub_22E3CD3D4(v10 + 2032, 48, 3);
          sub_22F2F4590(v2, v12, v13, v11, 1, 3, v14, v6);
        }
        else
        {
          v8 = *(_DWORD *)(v2 + 32);
          v18 = 0u;
          *(_OWORD *)v19 = 0u;
          v15 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 40);
          v16 = v8;
          sub_22EFC6D6C((uint64_t)&v17, v15);
          v2 = sub_22EC225CC(*a1, v6, *(_QWORD *)(v6 + 8), v8, 0, (uint64_t)&v18, 0, 0, (uint64_t)&v15, 0, 0, 0);
          if (HIDWORD(v19[1]))
            free(v19[0]);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_22EB6B2C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB62928((int)a1, *(void **)(v2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 32) != (v5 & 0xFFFFFFFFFFFFFFFELL) || *(_QWORD *)(v2 + 24) != v6)
    return sub_22F3341E8(*a1, *(_DWORD *)(v2 + 16), v6, v5 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
  return v2;
}

uint64_t sub_22EB6B354(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[14];

  v2 = a2;
  v26[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EB6DD04((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v24 = v26;
  v25 = 0x400000000;
  v6 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t *)(v2 + 48);
    while (1)
    {
      v22 = 1;
      v21 = *(v9 - 1);
      v10 = *v9;
      v11 = *v9 & 3;
      if ((v11 - 1) >= 2)
      {
        if ((_DWORD)v11 != 3)
        {
          v15 = *(void **)(v2 + 40 + 16 * *(unsigned int *)(v2 + 32) + 8 * (v10 >> 2));
          v16 = sub_22EB62928((int)a1, v15);
          if ((v16 & 1) != 0)
          {
            v2 = 1;
            goto LABEL_22;
          }
          v8 |= v15 != (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
          v22 = 1;
          v23 = v16 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_13;
        }
      }
      else
      {
        v22 = 0;
        v12 = v10 & 3;
        v13 = v10 & 0xFFFFFFFFFFFFFFFCLL;
        if (v12 != 1)
          goto LABEL_8;
        v14 = *(_QWORD *)(v13 + 40);
        if ((v14 & 7) == 0)
        {
          v13 = v14 & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
          v23 = v13;
          if (!v13)
            goto LABEL_14;
LABEL_13:
          v17 = sub_22E4EF088((uint64_t)&v24, (unint64_t)&v21, 1);
          v18 = (char *)v24 + 24 * v25;
          v19 = *(_OWORD *)v17;
          *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
          *(_OWORD *)v18 = v19;
          v7 = v25 + 1;
          LODWORD(v25) = v25 + 1;
        }
      }
LABEL_14:
      v9 += 2;
      if (!--v6)
        goto LABEL_18;
    }
  }
  v7 = 0;
  v8 = 0;
LABEL_18:
  if (v5 != *(uint64_t **)(v2 + 24) || (v8 & 1) != 0)
    v2 = sub_22EB49A78(*a1, *(_DWORD *)(v2 + 16), v5, (unsigned int *)v24, v7, *(_DWORD *)(v2 + 20));
LABEL_22:
  if (v24 != v26)
    free(v24);
  return v2;
}

uint64_t sub_22EB6B548(uint64_t a1, void **a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22EB62928(a1, a2[2]);
}

uint64_t sub_22EB6B5AC(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22E8CA788((uint64_t)a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_36;
  }
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22EB723F0(a1, v8, *((void **)a2 + 6), 0, 0);
    if (!v9)
    {
      v7 = 1;
      goto LABEL_34;
    }
    sub_22E8ACE30((uint64_t)&v25, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v27 = *((_QWORD *)a2 + 7);
    v28[0] = 0;
    if (sub_22E793870(a1 + 1, &v27, v28))
    {
      if (v28[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v11 = *((_QWORD *)v28[0] + 1);
        if (!v11)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v22 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_34;
        }
      }
    }
    v35 = v11;
  }
  v12 = *a2;
  if ((v12 & 0x40000) != 0)
  {
    v13 = a2[1];
    v14 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v15 = (int *)(v14 + 8 * v13);
    v16 = v15[2];
    v17 = *v15;
    if (*v15 | v16)
    {
      v18 = v15[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v17;
      v29[65] = v18;
      if (v17)
      {
        if ((sub_22EB7FC00((uint64_t)a1, v14 + 8 * v13 + 16 * ((v12 >> 18) & 1), v14 + 8 * v13 + 16 * ((v12 >> 18) & 1) + 32 * *(unsigned int *)(v14 + 8 * v13 + 12)) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v19 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_48;
        }
        LODWORD(v12) = *a2;
      }
      v7 = sub_22ED66318((_QWORD *)*a1, (uint64_t)&v25, v16, (uint64_t)&v30, (v12 >> 19) & 1, (uint64_t)v28);
LABEL_48:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_32;
  v20 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v20 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v20 = sub_22EFBAEA4(v20);
    if (!v20)
      goto LABEL_32;
  }
  if (!sub_22EFBAEF8(v20))
  {
    LODWORD(v12) = *a2;
LABEL_32:
    v21 = sub_22EB235A8((_QWORD *)*a1, (uint64_t)&v25, (uint64_t)&v30, (v12 >> 19) & 1, 0);
    goto LABEL_33;
  }
  v21 = sub_22EC21A04(*a1, (uint64_t *)&v25, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_33:
  v7 = v21;
LABEL_34:
  if (HIDWORD(v26[1]))
    free(v26[0]);
LABEL_36:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v24 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

uint64_t sub_22EB6B974(uint64_t a1, unsigned int *a2)
{
  void *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35[2];
  void *v36[2];
  _BYTE v37[256];
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)*((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22EB62928(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*(_QWORD *)a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EB7239C(a1, *((_QWORD *)a2 + 8));
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22EB723F0((uint64_t *)a1, v7, *((void **)a2 + 6), 0, 0);
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD **)a1;
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = v17;
  v47 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v50 = 0;
  v48 = v18;
  v49 = 0;
  v51 = 0;
  v52 = 257;
  v53 = 0;
  sub_22EC56024((uint64_t)&v39);
  if ((sub_22E8CA788(a1, (unsigned __int8 *)a2, 0, (uint64_t)&v39) & 1) == 0)
  {
    if (sub_22F0621BC((uint64_t)a2))
    {
      v19 = sub_22F0621BC((uint64_t)a2);
      *(_QWORD *)&v34 = v19;
      v36[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v34, v36)
        && v36[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
      {
        v19 = *((_QWORD *)v36[0] + 1);
      }
      if (!v19)
        goto LABEL_19;
      v44 = v19;
    }
    v36[0] = v37;
    v36[1] = (void *)0x800000000;
    v38 = 0;
    v20 = *a2;
    if ((v20 & 0x40000) == 0)
    {
      v33 = v5;
      v21 = 0;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
      goto LABEL_43;
    }
    v25 = *a2;
    v26 = a2[1];
    if (v25 == 211)
      v27 = a2 + 16;
    else
      v27 = a2 + 20;
    v28 = &v27[2 * v26];
    if (*v28)
    {
      v38 = *(_QWORD *)v28;
      if ((sub_22EB7FC00(a1, (uint64_t)&v28[4 * ((v20 >> 18) & 1)], (uint64_t)&v28[8 * v27[2 * v26 + 3] + 4 * ((v20 >> 18) & 1)]) & 1) != 0)
      {
        v14 = 1;
LABEL_45:
        if (v36[0] != v37)
          free(v36[0]);
        goto LABEL_47;
      }
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (*a2 >> 19) & 1;
      v33 = v5;
      if ((*a2 & 0x40000) == 0)
      {
        v21 = 0;
LABEL_43:
        v30 = v23;
        v34 = 0u;
        *(_OWORD *)v35 = 0u;
        sub_22E8ACE30((uint64_t)&v34, v10, v11);
        v14 = sub_22EC24AB8(*(_QWORD *)a1, v22, v33, v30, v24, (uint64_t *)&v34, v15, 0, (uint64_t)&v39, (uint64_t)v21, 0, 0, 0);
        if (HIDWORD(v35[1]))
          free(v35[0]);
        goto LABEL_45;
      }
      v25 = *a2;
      v26 = a2[1];
    }
    else
    {
      v33 = v5;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
    }
    v29 = a2 + 16;
    if (v25 != 211)
      v29 = a2 + 20;
    if (v29[2 * v26])
      v21 = v36;
    else
      v21 = 0;
    goto LABEL_43;
  }
LABEL_19:
  v14 = 1;
LABEL_47:
  if (BYTE1(v52))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
  if (v43)
  {
    v32 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
  }
  if (v40 != v42)
    free(v40);
  return v14;
}

uint64_t sub_22EB6BD80(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  if (*(_QWORD *)(v2 + 24) == (v4 & 0xFFFFFFFFFFFFFFFELL))
    return v2;
  v5 = *(_DWORD *)(v2 + 20);
  v6 = v5 != 0;
  v7 = v5 != 0;
  LODWORD(v8) = v5 - 1;
  if (v7)
    v8 = v8;
  else
    v8 = 0;
  return sub_22EE739C0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 16), v8 | (v6 << 32));
}

unint64_t sub_22EB6BDEC(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  if (*(_QWORD *)(v2 + 24) != (v4 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EB27A20(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v4 & 0xFFFFFFFFFFFFFFFELL);
  return v2;
}

uint64_t sub_22EB6BE44(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  v4 = 1;
  if ((sub_22EB7570C(a1, (void **)(a2 + 24), *(_DWORD *)(a2 + 4), 1, (uint64_t)&v11, &v10) & 1) == 0)
  {
    v5 = (uint64_t *)v11;
    v6 = v12;
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v4 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v12 + 24, 3);
    sub_22F002D50(v4, v8, v5, v6, v7);
  }
  if (v11 != v13)
    free(v11);
  return v4;
}

uint64_t sub_22EB6BF40(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22EB62928((int)a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22EB6BFB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  void **v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  _QWORD v14[9];

  v2 = a2;
  v14[8] = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = (void **)(a2 + 32);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      v9 = sub_22EB62928((int)a1, *v6);
      if ((v9 & 1) != 0)
        return 1;
      v10 = v13;
      if (v13 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v13;
      }
      v14[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v13;
      v5 |= v8 != (void *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      ++v6;
      v7 -= 8;
    }
    while (v7);
    if ((v5 & 1) != 0)
      return sub_22F32D6EC(*a1, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), v14, v11, *(_QWORD *)(v2 + 8));
  }
  return v2;
}

uint64_t sub_22EB6C100(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int **v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  int v61;
  int v62;
  void *v63;
  uint64_t v64;
  _BYTE v65[32];
  void *v66;
  __int128 v67;
  _BYTE v68[24];
  void *v69[2];
  _BYTE v70[32];
  uint64_t *v71;
  uint64_t v72;
  _QWORD v73[6];

  v73[4] = *MEMORY[0x24BDAC8D0];
  v71 = v73;
  v72 = 0x400000000;
  v69[0] = v70;
  v69[1] = (void *)0x400000000;
  v66 = v68;
  v67 = xmmword_22F44E350;
  v68[16] = 0;
  v4 = *a1;
  v63 = 0;
  v61 = 3;
  v62 = 0;
  v59 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v62, (int *)&v59, (__int16 *)(v4 + 1693), (uint64_t *)&v63, &v61);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *(_QWORD *)(*a1 + 88);
  v12 = *(_QWORD *)(*a1 + 216);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v14 = sub_22F3B1F5C(v11, v12, v13);
  v15 = v14;
  v16 = *a1;
  if (v14)
    v17 = v14 + 40;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v16 + 216);
  v19 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v57 = *(_QWORD *)(v16 + 10288);
  v58 = v19;
  v55 = *(_DWORD *)(v16 + 2192);
  v56 = *(_DWORD *)(v16 + 1944);
  v54 = v17;
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22EB74800(a1, a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v69, (uint64_t)&v71, (uint64_t)&v66) & 1) != 0)
  {
    v20 = 1;
    goto LABEL_59;
  }
  if ((_DWORD)v72)
  {
    v21 = v71;
    v22 = 8 * v72;
    do
    {
      v23 = *v21++;
      *(_QWORD *)(v23 + 16) = v54 & 0xFFFFFFFFFFFFFFFBLL;
      v22 -= 8;
    }
    while (v22);
  }
  v63 = v65;
  v64 = 0x400000000;
  v24 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v24)
  {
    v53 = v18;
    LODWORD(v25) = 0;
    v26 = (int **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
    v27 = 8 * v24;
    v20 = 1;
    while (1)
    {
      v28 = *v26;
      v29 = **v26;
      if (v29)
      {
        if ((v29 - 3) >= 0xFFFFFFFE)
        {
          v34 = *((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFFCLL;
          if (v28[10] == 1)
          {
            v35 = v34 | 2;
          }
          else
          {
            v36 = sub_22EB62928((int)a1, (void *)v34);
            if (v36 >= 2)
            {
              v37 = *(_QWORD *)(*(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
              v38 = (*(_DWORD *)(v37 + 16) & 0xFE00000u) < 0x8180001 || v37 == 0;
              if (!v38 && *(_DWORD *)(v37 + 16) == 11)
                v36 = sub_22EB19A28(*a1, (_DWORD *)(v36 & 0xFFFFFFFFFFFFFFFELL));
            }
            if ((v36 & 1) != 0)
            {
LABEL_56:
              v18 = v53;
              goto LABEL_57;
            }
            v35 = v36 & 0xFFFFFFFFFFFFFFFCLL;
          }
          LOBYTE(v59) = 0;
          v60 = 0;
          v40 = *((_QWORD *)v28 + 3);
          if (v40 > 7)
          {
            v42 = v40 & 0xFFFFFFFFFFFFFFF8;
            if ((v40 & 4) != 0)
            {
              v41 = v42 | 4;
              v59 = v42 | 4;
            }
            else
            {
              if (!v42)
              {
                v28 = 0;
                goto LABEL_48;
              }
              sub_22F31A5DC((unint64_t *)&v59, v42);
              v41 = v59;
            }
          }
          else
          {
            v41 = 0;
            v59 = 0;
          }
          v60 = 1;
          v43 = v35 & 0xFFFFFFFFFFFFFFFCLL;
          v44 = *v28;
          v45 = v28[4];
          v46 = *a1;
          if ((v35 & 2) != 0 || !v43)
            v32 = sub_22F332740(v46, v43, v44 == 1, v45, v41);
          else
            v32 = sub_22EBCF54C(v46, v43, v44 == 1, v45, v41);
          goto LABEL_47;
        }
        v30 = *((_QWORD *)v28 + 1);
        if ((v30 & 2) == 0)
        {
          v31 = sub_22EB62928((int)a1, (void *)(v30 & 0xFFFFFFFFFFFFFFFCLL));
          if ((v31 & 1) != 0)
            goto LABEL_56;
          v32 = sub_22F3327E4(*a1, v31 & 0xFFFFFFFFFFFFFFFELL);
LABEL_47:
          v28 = (int *)v32;
LABEL_48:
          if (!v28)
            goto LABEL_56;
          goto LABEL_49;
        }
      }
      else if (v28[4] != 1)
      {
        v33 = sub_22EB6DD04((_QWORD **)a1, (uint64_t *)(*((_QWORD *)v28 + 1) & 0xFFFFFFFFFFFFFFF8));
        if (!v33)
          goto LABEL_56;
        v28 = (int *)sub_22F3325E4(*a1, (unint64_t)v33);
LABEL_49:
        LODWORD(v25) = v64;
      }
      if (v25 >= HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        LODWORD(v25) = v64;
      }
      *((_QWORD *)v63 + v25) = v28;
      v25 = (v64 + 1);
      LODWORD(v64) = v64 + 1;
      ++v26;
      v27 -= 8;
      if (!v27)
      {
        v48 = (char *)v63;
        if ((_DWORD)v25)
        {
          v49 = 0;
          v18 = v53;
          do
          {
            v50 = *(_QWORD *)&v48[v49];
            if ((*(_DWORD *)v50 - 3) >= 0xFFFFFFFE)
            {
              v51 = *(_QWORD *)(v50 + 24);
              if (v51 >= 8 && (v51 & 4) == 0)
                *(_QWORD *)(*(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v54 & 0xFFFFFFFFFFFFFFFBLL;
            }
            v49 += 8;
          }
          while (8 * v25 != v49);
        }
        else
        {
          v25 = 0;
          v18 = v53;
        }
        goto LABEL_69;
      }
    }
  }
  v25 = 0;
  v48 = v65;
LABEL_69:
  v20 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 4), v15, v71, v72, v48, v25, *(_DWORD *)(a2 + 32));
LABEL_57:
  if (v63 != v65)
    free(v63);
LABEL_59:
  if (v18)
  {
    *(_QWORD *)(v16 + 216) = v18;
    *(_QWORD *)(v16 + 3200) = v58;
    *(_QWORD *)(v16 + 10288) = v57;
    *(_DWORD *)(v16 + 1944) = v56;
    *(_DWORD *)(v16 + 2192) = v55;
  }
  sub_22EB48E64(v4);
  if (v66 != v68)
    free(v66);
  if (v69[0] != v70)
    free(v69[0]);
  if (v71 != v73)
    free(v71);
  return v20;
}

uint64_t sub_22EB6C698(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    v4 = sub_22EB6DD04(a1, *(uint64_t **)(a2 + 32));
    if (v4)
    {
      if (*(unint64_t **)(v2 + 32) != v4)
        return sub_22F3C109C((*a1)[11], *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v4);
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

uint64_t sub_22EB6C700(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  unsigned int *v24;
  char v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[9];

  v2 = a2;
  v30[8] = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v28 = v30;
  v29 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 32);
  }
  if ((sub_22EB7570C(a1, *(void ***)(v2 + 24), v4, 0, (uint64_t)&v28, &v26) & 1) != 0)
  {
    v2 = 1;
  }
  else if (v26)
  {
    v5 = v28;
    v6 = v29;
    v8 = *(_DWORD *)(v2 + 16);
    v7 = *(_DWORD *)(v2 + 20);
    v9 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
    v11 = sub_22E3CD31C((uint64_t *)(v10 + 72), v10);
    v12 = sub_22EFCE144(v11 + 40, v9);
    v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 4) != 0 && v13)
      v13 = (_QWORD *)*v13;
    v14 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
    v15 = *(_QWORD *)(*a1 + 88);
    v16 = *(_QWORD *)(v15 + 16864);
    v27 = 0;
    sub_22EFF69F0(v14, v15, (uint64_t)v13, 0, v16, 0, v8, &v27, 0);
    v17 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v13[6], 0);
    v18 = sub_22E90092C(*a1, v14, v17, 64, 0, 0);
    v19 = *(_QWORD *)(*a1 + 88);
    v20 = sub_22E8BBA74((unint64_t)v13);
    v21 = *(_QWORD *)(v13[6] & 0xFFFFFFFFFFFFFFF0);
    if (v21)
      v22 = *(unsigned __int8 *)(v21 + 16) - 27 > 0xFFFFFFFD;
    else
      v22 = 0;
    if (!v22)
      v21 = sub_22F10CF48(v21);
    v23 = sub_22E8BBBD0(*(_QWORD *)(v21 + 24));
    v24 = sub_22EFFA488(v19, v18 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v5, v6, v20, v23, v7, 0, 0, 0);
    v2 = sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v24 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (v28 != v30)
    free(v28);
  return v2;
}

uint64_t sub_22EB6C958(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  char v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  void *v57[2];
  _QWORD v58[24];
  void *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = *a1;
  v54 = 0;
  v59 = 0;
  v56 = 3;
  v57[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v54, (int *)v57, (__int16 *)(v4 + 1693), (uint64_t *)&v59, &v56);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if ((*(_BYTE *)(v2 + 2) & 1) == 0 || (v11 = *(unsigned int *)(v2 + 28), !(_DWORD)v11))
  {
    v22 = *(void **)(v2 + 32);
    v57[0] = v22;
    v59 = 0;
    if (sub_22E793870(a1 + 1, v57, &v59) && v59 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v22 = (void *)*((_QWORD *)v59 + 1);
    if (v22)
    {
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v28 = *(_QWORD *)(*a1 + 88);
      v23 = (uint64_t)v22;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_29:
    v2 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 3 * v11;
  v48 = v2 + 40 + 8 * v13;
  v14 = 8 * v13;
  v15 = v2 + 40;
  while (1)
  {
    v16 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_17;
    }
    else if (v16 == 7)
    {
      if (**(unsigned __int8 **)(v15 + 8) != 213)
        goto LABEL_17;
    }
    else if (((1 << v16) & 0x13D) != 0)
    {
LABEL_17:
      ++v12;
      goto LABEL_18;
    }
    sub_22EDC0108(*a1, v15, 0, (uint64_t)&v59);
    v56 = 0;
    LOBYTE(v54) = 0;
    v55 = 0;
    v17 = *a1;
    v51 = v59;
    v52 = v60;
    v53 = v61;
    sub_22EE7465C(v17, (uint64_t)&v51);
    LODWORD(v57[0]) = 0;
    v57[1] = 0;
    v18 = *a1;
    v19 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    if (sub_22EB72E78(a1, (uint64_t)&v59, (uint64_t)v57, 1))
    {
      *(_DWORD *)(v18 + 11992) = v19;
      goto LABEL_29;
    }
    v20 = *a1;
    v49 = *(_OWORD *)v57;
    v50 = v58[0];
    v21 = sub_22EE74920(v20, (unsigned int *)&v49);
    if ((v21 & 0xFF00000000) == 0)
      break;
    v12 += v21;
    *(_DWORD *)(v18 + 11992) = v19;
LABEL_18:
    v15 += 24;
    v14 -= 24;
    if (!v14)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v27 = v12 | 0x100000000;
      v28 = *(_QWORD *)(*a1 + 88);
LABEL_27:
      v2 = sub_22F0622F8(v28, v24, v23, v25, v26, v27, 0, 0);
      goto LABEL_30;
    }
  }
  *(_DWORD *)(v18 + 11992) = v19;
  v30 = *(_DWORD *)(v2 + 20);
  v59 = (char *)&v60 + 8;
  *(_QWORD *)&v60 = 0x800000000;
  v62 = v30;
  v63 = v30;
  if ((sub_22EB72B94((uint64_t)a1, a1, v2 + 40, (uint64_t)a1, v48) & 1) != 0)
  {
    v2 = 1;
    goto LABEL_52;
  }
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  if (!(_DWORD)v60)
  {
    LODWORD(v37) = 0;
    goto LABEL_49;
  }
  v31 = 0;
  v32 = (unsigned __int8 **)v59;
  v33 = 32 * v60;
  while (2)
  {
    v34 = sub_22E4EF088((uint64_t)v57, (unint64_t)v32, 1);
    v35 = (char *)v57[0] + 24 * LODWORD(v57[1]);
    v36 = *(_OWORD *)v34;
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v35 = v36;
    v37 = ++LODWORD(v57[1]);
    v38 = *(_DWORD *)v32;
    if (*(_DWORD *)v32 == 1)
    {
      v39 = *(_BYTE *)(*(_QWORD *)((unint64_t)v32[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
LABEL_40:
      v40 = v39;
    }
    else
    {
      if (v38 == 7)
      {
        v39 = *v32[1] == 213;
        goto LABEL_40;
      }
      v40 = ((1 << v38) & 0x13D) == 0;
    }
    v31 |= v40;
    v32 += 4;
    v33 -= 32;
    if (v33)
      continue;
    break;
  }
  if ((v31 & 1) == 0)
  {
LABEL_49:
    v41 = *(_QWORD *)(v2 + 32);
    v42 = *(_DWORD *)(v2 + 16);
    v43 = *(_DWORD *)(v2 + 20);
    v44 = *(_DWORD *)(v2 + 24);
    v47 = v37 | 0x100000000;
    v46 = *(_QWORD *)(*a1 + 88);
    v45 = 0;
    v37 = 0;
    goto LABEL_50;
  }
  v41 = *(_QWORD *)(v2 + 32);
  v42 = *(_DWORD *)(v2 + 16);
  v43 = *(_DWORD *)(v2 + 20);
  v44 = *(_DWORD *)(v2 + 24);
  v45 = v57[0];
  v46 = *(_QWORD *)(*a1 + 88);
  v47 = 0;
LABEL_50:
  v2 = sub_22F0622F8(v46, v42, v41, v43, v44, v47, (uint64_t)v45, v37);
  if (v57[0] != v58)
    free(v57[0]);
LABEL_52:
  if (v59 != (char *)&v60 + 8)
    free(v59);
LABEL_30:
  sub_22EB48E64(v4);
  return v2;
}

uint64_t sub_22EB6CE44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 2) & 0x1C) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)a1 + 216);
    if (v3 != *(_QWORD *)(a2 + 24))
    {
      v4 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)(a2 + 16);
      v2 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 32, 3);
      *(_BYTE *)v2 = -33;
      if (byte_255E04EB3)
      {
        v6 = sub_22F0D3748(223);
        ++*((_DWORD *)v6 + 2);
      }
      v7 = *(_DWORD *)v2;
      *(_QWORD *)(v2 + 8) = v4;
      *(_QWORD *)(v2 + 16) = v5;
      *(_QWORD *)(v2 + 24) = v3;
      *(_DWORD *)v2 = v7 & 0xFFE000FF;
    }
  }
  return v2;
}

uint64_t sub_22EB6CEF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20[3];
  int v21;
  uint64_t v22;
  int v23;

  v4 = *a1;
  v5 = *a1 + 3688;
  v23 = *(_DWORD *)(*(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696) - 576);
  v22 = 0;
  v21 = 3;
  *(_QWORD *)v20 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v5, &v23, v20, (__int16 *)(v4 + 1693), &v22, &v21);
  v6 = *(unsigned int *)(v4 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v4 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = sub_22EB7AAAC(a1, *(_QWORD *)(a2 + 16));
  if ((v12 & 1) != 0)
  {
    v14 = *a1;
    *(_DWORD *)(v14 + 1704) = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 568);
    *(_WORD *)(v14 + 1693) = 0;
    v15 = *(void **)(v14 + 1784);
    if (v15 != *(void **)(v14 + 1776))
    {
      v18 = *(unsigned int *)(v14 + 1792);
      if (v18 >= 0x21 && 4 * (*(_DWORD *)(v14 + 1796) - *(_DWORD *)(v14 + 1800)) < v18)
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)(v14 + 1776));
        goto LABEL_11;
      }
      memset(v15, 255, 8 * v18);
    }
    *(_QWORD *)(v14 + 1796) = 0;
LABEL_11:
    *(_DWORD *)(v14 + 1848) = 0;
    sub_22EB48E64(v14);
    return 1;
  }
  if (*(_QWORD *)(a2 + 16) != (v12 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EB497A8(*a1, *(_DWORD *)(a2 + 24), (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
  v16 = *a1;
  *(_DWORD *)(v16 + 1704) = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 568);
  *(_WORD *)(v16 + 1693) = 0;
  v17 = *(void **)(v16 + 1784);
  if (v17 != *(void **)(v16 + 1776))
  {
    v19 = *(unsigned int *)(v16 + 1792);
    if (v19 >= 0x21 && 4 * (*(_DWORD *)(v16 + 1796) - *(_DWORD *)(v16 + 1800)) < v19)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)(v16 + 1776));
      goto LABEL_14;
    }
    memset(v17, 255, 8 * v19);
  }
  *(_QWORD *)(v16 + 1796) = 0;
LABEL_14:
  *(_DWORD *)(v16 + 1848) = 0;
  sub_22EB48E64(v16);
  return sub_22EBCC6C0(*a1, a2);
}

uint64_t sub_22EB6D188(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(void **)(a2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = sub_22EB62928((int)a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
  v10 = *(_DWORD *)(a2 + 32);
  if (!v10)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v10 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v12)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
      sub_22F0D60E4(v12);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v8, v10, v12);
}

uint64_t sub_22EB6D248(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v8;
  int v9;
  int v10;
  int v11;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(void **)(a2 + 24);
  if (v5)
  {
    v6 = sub_22EB62928((int)a1, v5);
    if ((v6 & 1) != 0)
      return 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(a2 + 36);
  if (!v9)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  v11 = *(_DWORD *)(a2 + 40);
  if (!v11)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8, *(_BYTE *)(a2 + 32), v9, v11);
}

uint64_t sub_22EB6D2FC(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;
  unint64_t *v8;
  int *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  _QWORD *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  int *v43;
  uint64_t v44;
  size_t v45;
  unsigned __int32 v46;
  _QWORD *v47;
  uint64_t v48;
  int v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57[2];
  void *v58[2];
  _BYTE v59[32];
  uint64_t v60;
  int64x2_t v61;
  _BYTE v62[32];
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD v66[6];

  v2 = (uint64_t)a2;
  v66[4] = *MEMORY[0x24BDAC8D0];
  v64 = v66;
  v65 = 0x400000000;
  v3 = a2[1];
  if (!(_DWORD)v3)
    goto LABEL_78;
  v4 = a1;
  v5 = 0;
  v6 = 0;
  v7 = a2 + 6;
  v53 = vdupq_n_s64(0x20uLL);
  v54 = (uint64_t)(a2 + 6);
  v55 = a2[1];
  do
  {
    v8 = *(unint64_t **)&v7[2 * v5];
    v9 = (int *)(v8 + 1);
    v10 = *v8;
    if ((*v8 & 0xF) != 0 || !v10 || *(_BYTE *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
    {
      v60 = (uint64_t)v62;
      v61 = vdupq_n_s64(0x20uLL);
      v63 = 0;
      v11 = sub_22F11598C(v10);
      if (v61.i64[0] < (unint64_t)v11)
        sub_22EEB52C0(&v60, v11);
      v14 = sub_22EB6DF2C((_QWORD **)v4, (uint64_t)&v60, v10, (uint64_t)v9, v12, v13);
      if (v14 >= 0x10)
      {
        v16 = v14;
        if (v14 == *v8)
        {
          v17 = v65;
          v18 = HIDWORD(v65);
        }
        else
        {
          v26 = *(_QWORD *)(*v4 + 88);
          v27 = v61.i64[0] - v61.i64[1];
          v28 = v61.i32[0] - v61.i32[2];
          if (v61.i32[0] == v61.i32[2])
            v28 = sub_22F11598C(v16);
          v8 = (unint64_t *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
          *v8 = v16;
          memcpy(v8 + 1, (const void *)(v60 + v61.i64[1]), v27);
          v17 = v65;
          v18 = HIDWORD(v65);
          v6 = 1;
        }
        if (v17 >= v18)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v17 = v65;
        }
        v64[v17] = (uint64_t)v8;
        LODWORD(v65) = v65 + 1;
        v15 = 4;
      }
      else
      {
        v15 = 1;
      }
      if ((_BYTE *)v60 != v62 && v60)
        MEMORY[0x2348A0E84]();
      goto LABEL_53;
    }
    v19 = *(_QWORD *)(v10 + 32);
    if (v19 >= 0x10 && (*(_QWORD *)(v10 + 32) & 0xFLL) == 0)
      v38 = *(_QWORD *)((char *)&unk_22F481D78
                      + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
    else
      v38 = 1;
    v21 = ((unint64_t)v9 + v38 + 3) & -v38;
    v57[0] = *(_QWORD *)(v10 + 32);
    v57[1] = v21;
    v58[0] = v59;
    v58[1] = (void *)0x200000000;
    sub_22EE73804(*v4, v19, v21, (uint64_t)v58);
    v51 = *(_DWORD *)(v10 + 20);
    LODWORD(v22) = v51 - 1;
    if (v51)
      v22 = v22;
    else
      v22 = 0;
    v52 = v22;
    v23 = v19;
    for (i = v19; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_32;
        v25 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v25 <= 0x39)
          break;
LABEL_27:
        if (sub_22F115668(i))
          v23 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_43;
      }
      if (v25 == 24)
        goto LABEL_42;
      if (v25 == 26)
        break;
      if (((1 << v25) & 0x20000000200003CLL) == 0)
        goto LABEL_27;
LABEL_32:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_32;
LABEL_42:
    v23 = i;
LABEL_43:
    sub_22F115668(v23);
    sub_22F1167E8(v57);
    v29 = (_QWORD *)*a1;
    v30 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v60 = (uint64_t)v62;
    v61 = v53;
    v63 = 0;
    v31 = sub_22F11598C(*v8);
    if (v61.i64[0] < (unint64_t)v31)
      sub_22EEB52C0(&v60, v31);
    v34 = sub_22EB6DF2C((_QWORD **)a1, (uint64_t)&v60, v19, v21, v32, v33);
    if (v34 < 0x10)
    {
LABEL_46:
      v15 = 1;
      v3 = v55;
      goto LABEL_47;
    }
    v35 = v34;
    v36 = v19;
    while (2)
    {
      while (2)
      {
        if ((v36 & 0xF) != 0)
          goto LABEL_67;
        v37 = *(unsigned __int8 *)(*(_QWORD *)(v36 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v37 > 0x39)
        {
LABEL_62:
          if (sub_22F115668(v36))
            v19 = v36;
          v36 = sub_22F115B7C(v36);
          if (!v36)
            goto LABEL_69;
          continue;
        }
        break;
      }
      if (v37 == 24)
        break;
      if (v37 != 26)
      {
        if (((1 << v37) & 0x20000000200003CLL) != 0)
          goto LABEL_67;
        goto LABEL_62;
      }
      if ((*(_BYTE *)(v36 + 23) & 0x10) == 0)
      {
LABEL_67:
        v36 = sub_22F115B7C(v36);
        continue;
      }
      break;
    }
    v19 = v36;
LABEL_69:
    v39 = sub_22F115668(v19);
    v40 = sub_22F1167E8(v57);
    v41 = sub_22F34AE9C((_QWORD *)*a1, v35, v39 | ((unint64_t)v40 << 32), *v9, v52 | ((unint64_t)(v51 != 0) << 32));
    if (v41 < 0x10)
      goto LABEL_46;
    v42 = v41;
    sub_22EEB5360((uint64_t)&v60, v41, 4uLL, 4);
    *v43 = *v9;
    v44 = *(_QWORD *)(*a1 + 88);
    v45 = v61.i64[0] - v61.i64[1];
    v46 = v61.i32[0] - v61.i32[2];
    v3 = v55;
    if (v61.i32[0] == v61.i32[2])
      v46 = sub_22F11598C(v42);
    v47 = (_QWORD *)sub_22E3CD3D4(v44 + 2032, v46 + 8, 3);
    *v47 = v42;
    memcpy(v47 + 1, (const void *)(v60 + v61.i64[1]), v45);
    v48 = v65;
    if (v65 >= (unint64_t)HIDWORD(v65))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v48 = v65;
    }
    v64[v48] = (uint64_t)v47;
    LODWORD(v65) = v65 + 1;
    v15 = 4;
LABEL_47:
    if ((_BYTE *)v60 != v62 && v60)
      MEMORY[0x2348A0E84]();
    *((_DWORD *)v29 + 2998) = v30;
    if (v58[0] != v59)
      free(v58[0]);
    v6 = 1;
    v4 = a1;
    v7 = (_DWORD *)v54;
LABEL_53:
    if (v15 != 4)
    {
      v2 = 1;
      goto LABEL_78;
    }
    ++v5;
  }
  while (v5 != v3);
  v2 = (uint64_t)a2;
  if ((v6 & 1) != 0)
    v2 = sub_22EBC6244(*v4, (*a2 >> 18), a2[4], v64, v65, a2[5]);
LABEL_78:
  if (v64 != v66)
    free(v64);
  return v2;
}

uint64_t sub_22EB6D948(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28[3];
  int v29;
  unint64_t *v30;
  int v31;

  v2 = a2;
  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v16 = *(uint64_t **)(a2 + 16);
    v17 = sub_22EB6DD04((_QWORD **)a1, v16);
    if (v17)
    {
      v18 = v17;
      if (v16 != (uint64_t *)v17)
      {
        v19 = *(_DWORD *)(v2 + 24);
        v20 = (*(_DWORD *)v2 >> 18) & 0xF;
        sub_22F0D4E74(v2);
        return sub_22EB28664(*a1, v18, v19, v20, v21);
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v4 = (_QWORD *)*a1;
    v5 = *a1 + 3688;
    v6 = *(_QWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 416);
    v31 = 0;
    v30 = (unint64_t *)v6;
    v29 = 3;
    *(_QWORD *)v28 = *((unsigned int *)v4 + 426);
    sub_22EB4DDB8(v5, &v31, v28, (__int16 *)((char *)v4 + 1693), (uint64_t *)&v30, &v29);
    v7 = *((unsigned int *)v4 + 924);
    v8 = v7 - 2;
    v9 = v4[461];
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)((char *)v4 + 1693) = 0;
    if (*((_DWORD *)v4 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 222), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08((uint64_t)(v4 + 230), (uint64_t *)(v12 - 496));
    }
    v30 = 0;
    v13 = *(unsigned __int8 **)(v2 + 16);
    if (*v13 == 214 && (v14 = (unsigned __int8 *)*((_QWORD *)v13 + 3), *v14 == 163))
    {
      v15 = sub_22EB805CC(a1, *((_QWORD *)v13 + 3), 0, &v30);
      if (v15 >= 2)
      {
        if (v14 == (unsigned __int8 *)(v15 & 0xFFFFFFFFFFFFFFFELL))
          v15 = (unint64_t)v13;
        else
          v15 = sub_22EB27A20((_QWORD *)*a1, *((_DWORD *)v13 + 4), *((_DWORD *)v13 + 5), v15 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
    else
    {
      v15 = sub_22EB62928((int)a1, *(void **)(v2 + 16));
    }
    v23 = v30;
    if (v30)
    {
      v24 = *(_DWORD *)(v2 + 24);
      v25 = (*(_DWORD *)v2 >> 18) & 0xF;
      sub_22F0D4E74(v2);
      v2 = sub_22EB28664(*a1, v23, v24, v25, v26);
    }
    else if ((v15 & 1) != 0)
    {
      v2 = 1;
    }
    else if (*(_QWORD *)(v2 + 16) != (v15 & 0xFFFFFFFFFFFFFFFELL))
    {
      v27 = sub_22EB28F24((_QWORD *)*a1, v15 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 24), (*(_DWORD *)v2 >> 18) & 0xF);
      if ((v27 & 1) != 0)
        v2 = 1;
      else
        v2 = v27;
    }
    sub_22EB48E64(v4);
  }
  return v2;
}

uint64_t sub_22EB6DBDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v2 = a2;
  v4 = *(_DWORD *)a2 & 0x7C0000;
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == 0x100000 && *v5 == 163)
  {
    v6 = sub_22EB805CC(a1, (uint64_t)v5, 1, 0);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22EB62928((int)a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  if (*(_QWORD *)(v2 + 16) != (v6 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22EB2941C((_QWORD *)*a1, 0, *(_DWORD *)(v2 + 4), (*(_DWORD *)v2 >> 18) & 0x1F, v6 & 0xFFFFFFFFFFFFFFFELL);
  return v2;
}

uint64_t sub_22EB6DC74(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EB6DD04(a1, (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EB62928((int)a1, *(void **)(v2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (v5 != (uint64_t *)(*(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8) || *(_QWORD *)(v2 + 16) != v7)
    return sub_22EB4B7A8(*a1, *(_DWORD *)(v2 + 32), v7, v5, *(_DWORD *)(v2 + 36));
  return v2;
}

unint64_t *sub_22EB6DD04(_QWORD **a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned __int32 v17;
  uint64_t v19;
  int64x2_t v20;
  _BYTE v21[32];
  uint64_t v22;
  uint64_t v23;

  v2 = (unint64_t *)a2;
  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)(a2 + 1);
  v5 = *a2;
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v5 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v7 == 24)
      goto LABEL_13;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v5 = i;
LABEL_14:
  sub_22F115668(v5);
  v8 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = (uint64_t)v21;
    v20 = vdupq_n_s64(0x20uLL);
    v22 = 0;
    v9 = sub_22F11598C(v8);
    if (v20.i64[0] < (unint64_t)v9)
      sub_22EEB52C0(&v19, v9);
    v12 = sub_22EB6DF2C(a1, (uint64_t)&v19, v8, v4, v10, v11);
    if (v12 > 0xF)
    {
      v14 = v12;
      v15 = (*a1)[11];
      v16 = v20.i64[0] - v20.i64[1];
      v17 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v17 = sub_22F11598C(v14);
      v2 = (unint64_t *)sub_22E3CD3D4(v15 + 2032, v17 + 8, 3);
      *v2 = v14;
      v13 = (_BYTE *)v19;
      memcpy(v2 + 1, (const void *)(v19 + v20.i64[1]), v16);
    }
    else
    {
      v2 = 0;
      v13 = (_BYTE *)v19;
    }
    if (v13 != v21 && v13)
      MEMORY[0x2348A0E84](v13, 0x1000C8077774924);
  }
  return v2;
}

unint64_t sub_22EB6DF2C(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  if ((a3 & 0xF) == 0)
    __asm { BR              X11 }
  v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if ((v8 & 0xFFFFFFFFFFFFFFF0) != 0)
    v9 = *(_QWORD *)((char *)&unk_22F481D78
                   + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v9 = 1;
  v10 = sub_22EB6DF2C(a1, a2, v8, (a4 + v9 - 1) & -v9, a5, a6);
  v11 = 0;
  if (v10 >= 0x10)
  {
    v12 = sub_22E8C1750(a1, v10, a3);
    if (v12 >= 0x10)
      return v12;
    else
      return 0;
  }
  return v11;
}

unint64_t sub_22EB7239C(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2 >= 0x10)
  {
    v3 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), a2, 0);
    v4 = sub_22EB6DD04(a1, v3);
    if (v4)
      return *(_QWORD *)v4;
    else
      return 0;
  }
  return a2;
}

unint64_t sub_22EB723F0(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, unint64_t a5)
{
  unint64_t v6;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t *v62;
  uint64_t v63;
  _QWORD v64[2];
  int v65;
  int v66;
  unsigned int v67[24];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  _QWORD v74[11];

  v6 = a2;
  v74[8] = *MEMORY[0x24BDAC8D0];
  v72 = v74;
  v73 = 0x400000000;
  if (!a2)
  {
    v69 = 0u;
    v70 = 0u;
    goto LABEL_111;
  }
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v73))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v73;
    }
    v12 = (unint64_t *)&v72[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v73 + 1;
    LODWORD(v73) = v73 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v69 = 0u;
  v70 = 0u;
  if (v10)
  {
    v62 = a1 + 1;
    while (1)
    {
      LODWORD(v73) = v10 - 1;
      v13 = v72[v10 - 1];
      v68 = v13;
      v14 = v13;
      v15 = *(_QWORD *)(v13 + 16);
      if (!v15)
      {
        v37 = *(_QWORD *)(*a1 + 88);
        v38 = sub_22F0AB0EC((unint64_t *)&v68);
        sub_22F0AB958((uint64_t)&v69 + 8, v37, v38);
        *(_QWORD *)&v69 = v38 | ((unint64_t)v38 << 32);
        goto LABEL_39;
      }
      v16 = *(_QWORD *)(v13 + 8);
      v17 = (v16 >> 1) & 3;
      if (v17 - 2 >= 2)
      {
        if (v17 == 1)
        {
          v34 = *(_DWORD *)(v15 + 28) & 0x7F;
          if ((v34 - 35) < 3)
          {
            v46 = sub_22F0AABF8(v13);
            v71 = v46;
            v64[0] = 0;
            if (sub_22E793870(v62, &v71, v64) && v64[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v46 = *(_QWORD *)(v64[0] + 8);
            v47 = *(_QWORD *)(*a1 + 88);
            v48 = sub_22F0AB0EC((unint64_t *)&v68);
            sub_22F3E8E2C((uint64_t *)&v69 + 1, v47, v46, v48, SHIDWORD(v48));
            *(_QWORD *)&v69 = v48;
          }
          else
          {
            sub_22F0AB364((uint64_t *)&v68);
            v35 = *(_QWORD *)(v14 + 8) & 6;
            if (v34 == 16)
            {
              if (v35 == 2)
              {
                if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                  v36 = *(_QWORD *)(v14 + 16);
                else
                  v36 = 0;
              }
              else
              {
                v36 = 0;
              }
              v71 = v36;
              v64[0] = 0;
              if (sub_22E793870(v62, &v71, v64) && v64[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
                v36 = *(_QWORD *)(v64[0] + 8);
            }
            else
            {
              if (v35 == 2)
              {
                if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
                  v36 = *(_QWORD *)(v14 + 16);
                else
                  v36 = 0;
              }
              else
              {
                v36 = 0;
              }
              v71 = v36;
              v64[0] = 0;
              if (sub_22E793870(v62, &v71, v64) && v64[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
                v36 = *(_QWORD *)(v64[0] + 8);
            }
            v39 = *(_QWORD *)(*a1 + 88);
            v40 = sub_22F0AB364((uint64_t *)&v68);
            v41 = sub_22F0AB364((uint64_t *)&v68);
            v42 = HIDWORD(v41);
            sub_22F0AB8AC((uint64_t *)&v69 + 1, v39, v36, v40, SHIDWORD(v41));
            if (!(_DWORD)v69)
              LODWORD(v69) = v40;
            DWORD1(v69) = v42;
          }
          goto LABEL_39;
        }
        if ((v16 & 6) != 0)
          v43 = 0;
        else
          v43 = *(_QWORD *)(v13 + 16);
        v44 = sub_22F0AB364((uint64_t *)&v68);
        v45 = sub_22F0AB364((uint64_t *)&v68);
        v64[0] = a4;
        v64[1] = v43;
        v65 = v44;
        v66 = HIDWORD(v45);
        if ((sub_22E958D90(*a1, 0, (uint64_t)v64, 0, (uint64_t)&v69, a5, 0, 0, 0) & 1) == 0)
          goto LABEL_39;
        goto LABEL_110;
      }
      v19 = sub_22F0AB4E0((uint64_t)&v68);
      v20 = (uint64_t)v18;
      if (v19 > 0xF)
      {
        v21 = sub_22EB736F0(a1, v19, v18, a4, (uint64_t)&v69);
        if (!v21)
          goto LABEL_110;
        v20 = (uint64_t)(v21 + 1);
        v19 = *v21;
      }
      if (!v19)
      {
LABEL_110:
        v6 = 0;
        goto LABEL_111;
      }
      v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
      v23 = *(_DWORD *)(v22 + 16);
      v24 = *(_QWORD *)(v22 + 8);
      if ((v23 & 0x400) != 0)
      {
        v26 = *a1;
        v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
      }
      else
      {
        v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
        v26 = *a1;
        if (v25 != 45 && (v25 != 44 || (**(_QWORD **)(v26 + 72) & 0x200) == 0))
        {
          if ((v19 & 0xF) == 0 && v23 == 50 && (*(_BYTE *)(*(_QWORD *)(v19 + 24) + 28) & 0x80) != 0)
            goto LABEL_110;
          v56 = v19;
          v57 = v19;
          while (1)
          {
            if ((v57 & 0xF) != 0)
              goto LABEL_106;
            v58 = *(unsigned __int8 *)(*(_QWORD *)(v57 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v58 <= 0x39)
            {
              if (v58 == 24)
                goto LABEL_108;
              if (v58 == 26)
              {
                if ((*(_BYTE *)(v57 + 23) & 0x10) != 0)
                {
LABEL_108:
                  v56 = v57;
LABEL_109:
                  v59 = sub_22F115668(v56);
                  sub_22E8FCA40((_QWORD *)v26, v59, 0xF99u, 0, (uint64_t)v64);
                  v71 = v19;
                  v60 = sub_22E8901B8((uint64_t)v64, (uint64_t *)&v71);
                  v63 = v69;
                  sub_22E8906A0(v60, &v63);
                  sub_22E903BEC((unsigned int *)v64);
                  goto LABEL_110;
                }
LABEL_106:
                v57 = sub_22F115B7C(v57);
                continue;
              }
              if (((1 << v58) & 0x20000000200003CLL) != 0)
                goto LABEL_106;
            }
            if (sub_22F115668(v57))
              v56 = v57;
            v57 = sub_22F115B7C(v57);
            if (!v57)
              goto LABEL_109;
          }
        }
      }
      if (v25 != 44)
        goto LABEL_38;
      v28 = v19;
      for (i = v19; ; i = sub_22F115B7C(i))
      {
        while (1)
        {
          if ((i & 0xF) != 0)
            goto LABEL_35;
          v30 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v30 <= 0x39)
            break;
LABEL_30:
          if (sub_22F115668(i))
            v28 = i;
          i = sub_22F115B7C(i);
          if (!i)
            goto LABEL_37;
        }
        if (v30 == 24)
          goto LABEL_36;
        if (v30 == 26)
          break;
        if (((1 << v30) & 0x20000000200003CLL) == 0)
          goto LABEL_30;
LABEL_35:
        ;
      }
      if ((*(_BYTE *)(i + 23) & 0x10) == 0)
        goto LABEL_35;
LABEL_36:
      v28 = i;
LABEL_37:
      v31 = sub_22F115668(v28);
      sub_22E8FCA40((_QWORD *)v26, v31, 0x1927u, 0, (uint64_t)v67);
      sub_22E903BEC(v67);
      v26 = *a1;
LABEL_38:
      v32 = *(_QWORD *)(v26 + 88);
      v33 = sub_22F0AB364((uint64_t *)&v68);
      sub_22E8ACD1C((uint64_t)&v69, v32, 0, v19, v20, SHIDWORD(v33));
LABEL_39:
      a4 = 0;
      a5 = 0;
      v10 = v73;
      if (!(_DWORD)v73)
      {
        v49 = *((_QWORD *)&v69 + 1);
        goto LABEL_76;
      }
    }
  }
  v49 = 0;
LABEL_76:
  if (v49 != v6)
  {
    v50 = DWORD2(v70);
    v51 = 0;
    if (v6)
    {
      do
      {
        v52 = *(_QWORD *)(v6 + 8);
        if ((v52 & 4) != 0)
          v53 = 12;
        else
          v53 = 8;
        if (*(_QWORD *)(v6 + 16))
          v54 = v53;
        else
          v54 = 4;
        v51 += v54;
        v6 = v52 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((v52 & 0xFFFFFFFFFFFFFFF8) != 0);
    }
    if (DWORD2(v70) != v51 || memcmp((const void *)v70, __s2, DWORD2(v70)))
    {
      if (!v49)
      {
        v6 = 0;
        goto LABEL_111;
      }
      if (HIDWORD(v70))
      {
        v55 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v50, 3);
        memcpy(v55, (const void *)v70, DWORD2(v70));
        v49 = *((_QWORD *)&v69 + 1);
      }
    }
    v6 = v49;
  }
LABEL_111:
  if (HIDWORD(v70))
    free((void *)v70);
  if (v72 != (_OWORD *)v74)
    free(v72);
  return v6;
}

uint64_t sub_22EB72B94(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[6] = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    sub_22EDC0108(*a2, a3, 0, (uint64_t)v6);
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_22EB72E78(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v24 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      if (!v24)
        v24 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 8), 0);
      v25 = sub_22EB6DD04(a1, v24);
      if (v25)
      {
        v26 = *(_QWORD *)v25;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v26;
        *(_QWORD *)(a3 + 24) = v25 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v8 = sub_22F0EECF4();
      v9 = sub_22EB7239C((uint64_t)a1, v8);
      if (v9 < 0x10)
        return 1;
      v10 = v9;
      v11 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)a2 == 2)
        v12 = *(_QWORD *)(a2 + 16);
      else
        v12 = 0;
      if (v12)
      {
        v43 = v12;
        *(_QWORD *)&v41 = 0;
        if (sub_22E793870(a1 + 1, &v43, &v41))
        {
          if ((_QWORD)v41 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          {
            v11 = *(_QWORD *)(v41 + 8);
            if (!v11)
              return 1;
          }
        }
      }
      else
      {
        v11 = 0;
      }
      if (v10 == v8 && v12 == v11)
      {
        v4 = 0;
        v32 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v32;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_52:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = v11;
        goto LABEL_52;
      }
      v33 = *(_QWORD *)(*a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v33, &v43, v10);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v27 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = *(_QWORD *)(v27 + 8);
      if (*(_QWORD *)v27)
      {
        v29 = sub_22EB723F0((int)a1, *(_QWORD *)v27, *(void **)(v27 + 8));
        if (!v29)
          return v4;
        v31 = v29;
        v28 = v30;
      }
      else
      {
        v31 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v31, v28);
      if ((*(_DWORD *)a2 - 5) > 1)
        v34 = 0;
      else
        v34 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v35 = sub_22EB733F0((uint64_t)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v34, 0, 0);
      v4 = v35 < 8;
      if (v35 >= 8)
      {
        v36 = v35;
        v37 = *(_QWORD *)(*a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v38 = 0;
        else
          v38 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v39 = sub_22E3CD3D4(v37 + 2032, 24, 3);
        *(_QWORD *)v39 = v31;
        *(_QWORD *)(v39 + 8) = v28;
        *(_DWORD *)(v39 + 16) = v38;
        *(_DWORD *)(v39 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v13 = *a1;
      if (a4)
        v14 = 0;
      else
        v14 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v14;
      v43 = *(unsigned int *)(v13 + 1704);
      sub_22EB4DDB8(v13 + 3688, &v46, (int *)&v43, (__int16 *)(v13 + 1693), (uint64_t *)&v41, &v45);
      v15 = *(unsigned int *)(v13 + 3696);
      v16 = v15 - 2;
      v17 = *(_QWORD *)(v13 + 3688);
      v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
      if (v18 == 5)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
        v19 = 1;
      }
      else if (v18 == 2)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
        v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
      }
      v20 = v17 + 576 * v15;
      *(_BYTE *)(v20 - 3) = v19;
      *(_WORD *)(v13 + 1693) = 0;
      if (*(_DWORD *)(v13 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v13 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
        sub_22EAEAE08(v13 + 1840, (uint64_t *)(v20 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = (void *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      else
        v21 = *(void **)(a2 + 8);
      v22 = sub_22EB62928((int)a1, v21);
      v23 = sub_22EB51A84(*a1, v22);
      v4 = v23 & 1;
      if ((v23 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v13);
      return v4;
    default:
      return v4;
  }
}

uint64_t sub_22EB732CC(uint64_t result, _QWORD **a2, int *a3, int a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  __int128 v15;

  v6 = result;
  v7 = *a3;
  if (*a3 == 5)
  {
    v10 = (*a2)[11];
    v11 = *((_QWORD *)a3 + 1);
    if ((a5 & 0xFF00000000) != 0)
      v12 = a5 + 1;
    else
      v12 = 0;
    v13 = *((_QWORD *)a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v14 = *(_DWORD *)(v13 + 16);
    *(_DWORD *)result = 6;
    *(_DWORD *)(result + 4) = v12;
    *(_QWORD *)(result + 8) = v11;
    v15 = *(_OWORD *)v13;
    result = sub_22E3CD3D4(v10 + 2032, 24, 3);
    *(_OWORD *)result = v15;
    *(_DWORD *)(result + 16) = v14;
    *(_DWORD *)(result + 20) = a4;
    v9 = result & 0xFFFFFFFFFFFFFFFCLL;
    goto LABEL_12;
  }
  if (v7 == 7)
  {
    result = sub_22EE739C0(*a2, *((_QWORD *)a3 + 3) & 0xFFFFFFFFFFFFFFFCLL, a4, a5);
    if ((result & 1) == 0)
    {
      *(_DWORD *)v6 = 7;
      *(_QWORD *)(v6 + 8) = result & 0xFFFFFFFFFFFFFFFELL;
      v9 = result & 0xFFFFFFFFFFFFFFFCLL | 1;
      goto LABEL_12;
    }
  }
  else if (v7 == 1)
  {
    result = (uint64_t)sub_22F34AD38(*a2, (unint64_t *)(*((_QWORD *)a3 + 3) & 0xFFFFFFFFFFFFFFFCLL), a4, a5);
    if (result)
    {
      v8 = *(_QWORD *)result;
      *(_DWORD *)v6 = 1;
      *(_QWORD *)(v6 + 8) = v8;
      v9 = result & 0xFFFFFFFFFFFFFFFCLL | 2;
LABEL_12:
      *(_QWORD *)(v6 + 24) = v9;
      return result;
    }
  }
  *(_DWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  return result;
}

unint64_t sub_22EB733F0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, char a6)
{
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _BYTE v40[12];
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;

  v6 = a3;
  v44 = *MEMORY[0x24BDAC8D0];
  v35 = a3;
  v9 = a3 & 6;
  v10 = a3 & 0xFFFFFFFFFFFFFFF8;
  if (v9 != 4 || v10 == 0)
  {
    if (v9 == 6 && v10)
    {
      v12 = *(_QWORD *)(a2 + 8);
      if (v12)
        a5 = 0;
      v14 = *(_QWORD *)(v10 + 8);
      if (v12 != (v14 & 0xFFFFFFFFFFFFFFF8) || a5 >= 0x10)
      {
        if ((v14 & 4) != 0)
        {
          v31 = 0;
          v32 = *(_DWORD *)(v10 + 16);
          LODWORD(v37) = a4;
          HIDWORD(v37) = a4;
          v38 = a4;
          v42 = a4;
          v43 = a4;
          *(_QWORD *)&v40[4] = 0;
          v41 = 0;
          LODWORD(v39) = 1;
          *(_DWORD *)v40 = v32;
          do
          {
            v33 = *(_DWORD *)((char *)&v37 + v31);
            *(_DWORD *)&v40[v31 + 4] = v33;
            if (v33)
              v43 = v33;
            v31 += 4;
          }
          while (v31 != 12);
          v36 = 0;
          sub_22ED66924(*(_QWORD *)a1, 0, a2, a4, (uint64_t)&v39, a5, 0, &v36, a6);
          return v36;
        }
        else
        {
          v16 = *(_QWORD *)(v10 + 16);
          v17 = *(_QWORD *)a1;
          LODWORD(v39) = 0;
          *(_QWORD *)v40 = v16;
          v42 = a4;
          v43 = a4;
          v37 = 0;
          sub_22ED66924(v17, 0, a2, a4, (uint64_t)&v39, a5, 0, &v37, a6);
          return v37;
        }
      }
      return v6;
    }
    v25 = sub_22F0F08CC(&v35);
    if (v25)
    {
      v26 = v25;
      v37 = v25;
      v39 = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v37, &v39)
        && v39 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      {
        v27 = *(_QWORD *)(v39 + 8);
        v28 = v27 & 0xFFFFFFFFFFFFFFF9;
        if (v27 == v26)
          v28 = v6;
        if (v27)
          return v28;
        else
          return 0;
      }
      return v6;
    }
    if (v9 != 2 || !v10 || (~*(_DWORD *)v10 & 3) != 0)
      return v6;
    v29 = *(_QWORD *)(v10 + 16);
    v37 = v29;
    v39 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v37, &v39)
      && v39 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
    {
      v29 = *(_QWORD *)(v39 + 8);
    }
    if (v29)
    {
      if (v29 == *(_QWORD *)(v10 + 16))
        return v6;
      v30 = *(_DWORD *)v10 >> 2;
      *(_QWORD *)v40 = *(_QWORD *)(v10 + 24);
      LODWORD(v39) = 8;
      HIDWORD(v39) = v30;
      return sub_22F36D860(*(_QWORD *)(*(_QWORD *)a1 + 88), v29, (uint64_t)&v39);
    }
    return 0;
  }
  v18 = sub_22F0F08CC((uint64_t *)(v10 + 16));
  v37 = v18;
  v39 = 0;
  if (!sub_22E793870((uint64_t *)(a1 + 8), &v37, &v39))
  {
    v20 = v18;
    if (v18)
      goto LABEL_22;
    return 0;
  }
  v20 = v18;
  if (v39 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
    v20 = *(_QWORD *)(v39 + 8);
  if (!v20)
    return 0;
LABEL_22:
  v21 = *(_QWORD *)(a2 + 8);
  v22 = *(_QWORD *)(v10 + 8);
  if (v21 != (v22 & 0xFFFFFFFFFFFFFFF8) || v20 != v18)
    return sub_22F36E410(*(_QWORD *)(*(_QWORD *)a1 + 88), v21, (v22 >> 2) & 1, v20 & 0xFFFFFFFFFFFFFFF9);
  return v6;
}

_QWORD *sub_22EB736F0(uint64_t *a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int64x2_t v42;
  _BYTE v43[32];
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _DWORD v47[66];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v41 = (uint64_t)v43;
  v42 = vdupq_n_s64(0x20uLL);
  v44 = 0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 20)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v15 = a3[4];
    v14 = a3[5];
    v16 = *a1;
    LODWORD(v45) = 0;
    v46 = v13;
    v47[2] = v15;
    v47[3] = v15;
    v39 = 0;
    sub_22ED66924(v16, 0, a5, v14, (uint64_t)&v45, a4, 0, &v39, 1);
    v17 = 0;
    v18 = v39;
    if (v39 < 8)
      goto LABEL_22;
    v39 = a2;
    v40 = a3;
    v45 = v47;
    v46 = 0x800000000;
    v47[64] = a3[6];
    v47[65] = a3[7];
    v19 = 0;
    if ((sub_22EB73EF0((uint64_t)a1, (uint64_t)&v39, 0, (uint64_t)&v39, *(_DWORD *)(a2 + 20)) & 1) == 0)
    {
      if ((~(_BYTE)v18 & 6) == 0 && (v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v39 + 16) >> 19), *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v45);
        sub_22EEB5360((uint64_t)&v41, v19, (8 * *(_DWORD *)(v19 + 20) + 32), 8);
        v31 = v30;
        *v30 = *v40;
        v33 = *(_QWORD *)(a5 + 8);
        v32 = (uint64_t *)(a5 + 8);
        if (!v33 || !sub_22F0ABC50(v32, *(_QWORD *)(*a1 + 88)))
          v34 = 0;
        *((_QWORD *)v31 + 1) = v34;
        v35 = v40;
        v31[5] = v40[5];
        v31[4] = v35[4];
        v31[6] = v35[6];
        v31[7] = v35[7];
        if ((_DWORD)v46)
        {
          v36 = 0;
          v37 = v31 + 8;
          v38 = 32 * v46;
          do
          {
            *v37++ = *(_QWORD *)((char *)v45 + v36 + 24);
            v36 += 32;
          }
          while (v38 != v36);
        }
      }
      else
      {
        v20 = sub_22ED60904((_QWORD *)*a1, v18, v40[4], (uint64_t)&v45);
        v19 = v20;
        if (v20 >= 0x10)
        {
          sub_22EEB5360((uint64_t)&v41, v20, (8 * *(_DWORD *)(v20 + 20) + 16), 8);
          v22 = v40;
          v21[1] = v40[5];
          *v21 = v22[4];
          v21[2] = v22[6];
          v21[3] = v22[7];
          if ((_DWORD)v46)
          {
            v23 = 0;
            v24 = v21 + 4;
            v25 = 32 * v46;
            do
            {
              *v24++ = *(_QWORD *)((char *)v45 + v23 + 24);
              v23 += 32;
            }
            while (v25 != v23);
          }
        }
      }
    }
    if (v45 != v47)
      free(v45);
  }
  else
  {
    if (v10 == 46)
    {
      v11 = sub_22EB733F0((uint64_t)a1, a5, *(_QWORD *)(a2 + 32), *a3, a4, 1);
      if (v11 < 8)
      {
LABEL_18:
        v17 = 0;
        goto LABEL_22;
      }
      v12 = sub_22EB73ABC((_QWORD **)a1, (uint64_t)&v41, a2, a3, v11);
    }
    else
    {
      v12 = sub_22EB6DF2C(a1, &v41, a2, a3, a5, a4);
    }
    v19 = v12;
  }
  if (v19 < 0x10)
    goto LABEL_18;
  v26 = *(_QWORD *)(*a1 + 88);
  v27 = v42.i64[0] - v42.i64[1];
  v28 = v42.i32[0] - v42.i32[2];
  if (v42.i32[0] == v42.i32[2])
    v28 = sub_22F11598C(v19);
  v17 = (_QWORD *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
  *v17 = v19;
  memcpy(v17 + 1, (const void *)(v41 + v42.i64[1]), v27);
LABEL_22:
  if ((_BYTE *)v41 != v43 && v41)
    MEMORY[0x2348A0E84]();
  return v17;
}

unint64_t sub_22EB73ABC(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x800000000;
  v21[64] = a4[2];
  v21[65] = a4[3];
  if (*(_DWORD *)(a3 + 20))
    __asm { BR              X9 }
  v5 = sub_22ED60904(*a1, a5, *a4, (uint64_t)&v19);
  v6 = v5;
  if (v5 >= 0x10)
  {
    v7 = 8 * *(_DWORD *)(v5 + 20);
    if (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
    {
      sub_22EEB5360(a2, v5, (v7 + 32), 8);
      *(_DWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 20) = a4[1];
      *(_DWORD *)(v8 + 16) = *a4;
      *(_DWORD *)(v8 + 24) = a4[2];
      *(_DWORD *)(v8 + 28) = a4[3];
      if ((_DWORD)v20)
      {
        v9 = 0;
        v10 = (_QWORD *)(v8 + 32);
        v11 = 32 * v20;
        do
        {
          *v10++ = *(_QWORD *)((char *)v19 + v9 + 24);
          v9 += 32;
        }
        while (v11 != v9);
      }
    }
    else
    {
      sub_22EEB5360(a2, v5, (v7 + 16), 8);
      v13[1] = a4[1];
      *v13 = *a4;
      v13[2] = a4[2];
      v13[3] = a4[3];
      if ((_DWORD)v20)
      {
        v14 = 0;
        v15 = v13 + 4;
        v16 = 32 * v20;
        do
        {
          *v15++ = *(_QWORD *)((char *)v19 + v14 + 24);
          v14 += 32;
        }
        while (v16 != v14);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  return v6;
}

uint64_t sub_22EB73EF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 != a4 || a3 != a5)
    __asm { BR              X9 }
  return 0;
}

unint64_t sub_22EB741D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[18];
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v74[24];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EB723F0(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  if (!v10)
    return 0;
  v12 = v11;
  v13 = (*(_DWORD *)(a3 + 16) >> 19);
  v14 = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a4 + 16);
  v48 = v10;
  v49 = v11;
  v47 = v15;
  v45 = 0u;
  *(_OWORD *)v46 = 0u;
  sub_22E8ACE30((uint64_t)&v45, v10, v11);
  if ((sub_22F0AAC5C(v48) & 4) != 0 && !sub_22E958204(*a1, (uint64_t)&v45, 0))
  {
    v17 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), v13, v48, v47, 0);
    goto LABEL_18;
  }
  if ((v13 - 5) <= 1)
  {
    v17 = sub_22ED717D8((_QWORD *)*a1, v13, v14, v48, v49, v47, v16, a5);
LABEL_18:
    v24 = v17;
    goto LABEL_40;
  }
  v44 = v13;
  v18 = (_QWORD *)*a1;
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v18;
  v72 = v47;
  v73 = v16;
  sub_22EFC6D6C((uint64_t)v74, v47);
  *(_OWORD *)&v74[8] = xmmword_22F4555C0;
  v75 = 16842752;
  v76 = 0;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  v43 = 0;
  v19 = sub_22E958204(*a1, (uint64_t)&v45, 0);
  v43 = v19;
  if (v19)
  {
    if ((sub_22E958490((_QWORD *)*a1, (uint64_t)&v45, v19) & 1) == 0)
    {
      sub_22EC611AC(*a1, (uint64_t)&v64, v43, 0);
      if ((_DWORD)v64 != 5)
      {
        if ((_DWORD)v64 != 2)
          goto LABEL_19;
        v20 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        if (v21 <= 0x2F && ((1 << v21) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL);
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        }
        if (v21 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v20, v44, 0, v16, v47) & 1) != 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            if (v22)
              v23 = v22 & 0xFFFFFFFFFFFFFFF0;
            else
              v23 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v20);
            v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), v13, v48, v23, 0);
            goto LABEL_31;
          }
          sub_22E8FCA40((_QWORD *)*a1, v14, 0x13E0u, 0, (uint64_t)&v50);
          sub_22E8BAE44((uint64_t)&v50, &v47);
          sub_22E903BEC((unsigned int *)&v50);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v20 + 24), 0x6Fu, 0, (uint64_t)&v50);
          sub_22E903BEC((unsigned int *)&v50);
        }
        else
        {
LABEL_19:
          v25 = (_QWORD *)*a1;
          v50 = 0;
          v51 = v53;
          v52 = 0x800000000;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v25;
          v58 = v47;
          v59 = v16;
          sub_22EFC6D6C((uint64_t)v60, v47);
          *(_OWORD *)&v60[8] = xmmword_22F4555C0;
          v61 = 16842752;
          v62 = 0;
          v63 = 0;
          sub_22EC56024((uint64_t)&v50);
          sub_22EC611AC(*a1, (uint64_t)&v50, v43, 0);
          if ((v50 - 2) <= 2)
          {
            v42 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFFCLL;
            v35 = (_QWORD *)*a1;
            v41 = sub_22F31E40C(*a1, v42, v44);
            sub_22E8FCA40(v35, v16, 0x12A5u, 0, (uint64_t)v40);
            v36 = sub_22E890024((uint64_t)v40, (uint64_t *)&v42);
            v37 = sub_22E8900C4(v36, &v41);
            sub_22E8900C4(v37, (int *)&v44);
            sub_22E903BEC(v40);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v42 + 24), 0x64u, 0, (uint64_t)v40);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)*a1, v16, 0xFDFu, 0, (uint64_t)v40);
            v26 = sub_22E8900C4((uint64_t)v40, (int *)&v44);
            v27 = sub_22E8BAE44(v26, &v47);
            v28 = sub_22E894FB4(v27, (uint64_t *)&v43);
            v42 = sub_22F0AB0EC(&v48);
            sub_22E8906A0(v28, (uint64_t *)&v42);
          }
          sub_22E903BEC(v40);
          if (HIBYTE(v61))
          {
            if ((_DWORD)v50 == 5)
            {
              sub_22EC64D18(v57, (uint64_t)&v50);
            }
            else if (v55 && (*(_DWORD *)(v57[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v57, (uint64_t)&v50);
            }
          }
          if (v54)
          {
            v39 = sub_22EC6CBD0(v54);
            MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
          }
          if (v51 != v53)
            free(v51);
        }
      }
    }
  }
  v24 = 0;
LABEL_31:
  if (HIBYTE(v75))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v38 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
  }
  if (v65 != v67)
    free(v65);
LABEL_40:
  if (HIDWORD(v46[1]))
    free(v46[0]);
  if (v24 < 0x10)
    return 0;
  v29 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = *(_BYTE *)(v29 + 16) == 24;
  else
    v30 = 0;
  if (v30
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v29 = sub_22F10CF48(v29)) != 0)
  {
    sub_22EEB5360(a2, *(_QWORD *)(v29 + 40), 4uLL, 4);
    *v31 = *(_DWORD *)(a4 + 16);
    sub_22EEB5360(a2, v24, 0x10uLL, 8);
    *(_DWORD *)v32 = *(_DWORD *)a4;
    *(_QWORD *)(v32 + 8) = v12;
  }
  else
  {
    sub_22EEB5360(a2, v24, 0x18uLL, 8);
    *(_DWORD *)v33 = *(_DWORD *)a4;
    *(_QWORD *)(v33 + 8) = v12;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(a4 + 16);
  }
  return v24;
}

uint64_t sub_22EB74800(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v54;
  unsigned int v56;
  void **v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[6];

  v61[4] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!a3)
    return 0;
  v11 = a5;
  v12 = a2;
  v13 = a1;
  v14 = 0;
  v56 = 0;
  v54 = a3;
  while (1)
  {
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15)
      break;
    v30 = *(_QWORD *)(a4 + 8 * v14);
    v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if (v31 && *(_BYTE *)(v31 + 16) == 36)
    {
      v32 = *(_QWORD *)(v31 + 32);
      v59 = v61;
      v60 = 0x200000000;
      v57 = &v59;
      LOBYTE(v58) = 0;
      HIDWORD(v58) = -1;
      sub_22EE72E1C((uint64_t)&v57, v32);
      v33 = *(_QWORD *)(v31 + 32);
      v34 = (uint64_t)v13;
      v35 = *v13;
      v36 = *(_DWORD *)(v35 + 11992);
      *(_DWORD *)(v35 + 11992) = -1;
      v37 = sub_22EB7239C(v34, v33);
      *(_DWORD *)(v35 + 11992) = v36;
      if (v59 != v61)
        free(v59);
      if (v37 < 0x10)
        return 1;
      v13 = a1;
      v38 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v37, 0);
      v8 = v54;
    }
    else
    {
      v38 = sub_22EB7239C((uint64_t)v13, v30);
      if (v38 < 0x10)
        return 1;
    }
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v40 = *(unsigned int *)(a6 + 8);
    if (v40 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v40) = v38;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v41 = *(unsigned int *)(a7 + 8);
      if (v41 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v41) = 0;
LABEL_60:
      ++*(_DWORD *)(a7 + 8);
    }
LABEL_61:
    if (++v14 == v8)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v39 = sub_22EB74CC8(v13, *(_QWORD *)(v12 + 8 * v14), 0);
    if (v39)
      goto LABEL_52;
    return 1;
  }
  v59 = v61;
  v60 = 0x200000000;
  v16 = *(_QWORD *)(v15 + 56);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (uint64_t *)v17[4];
  v20 = *v17;
  v18 = v17 + 1;
  v19 = v20;
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 >= 0x10 && (v21 & 0xF) == 0)
    v42 = *(_QWORD *)((char *)&unk_22F481D78
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v42 = 1;
  v57 = (void **)v21;
  v58 = ((unint64_t)v18 + v42 + 3) & -v42;
  sub_22EE73804(*v13, v21, v58, (uint64_t)&v59);
  if (!(_DWORD)v60)
  {
    v24 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_49;
  }
  v23 = *(_DWORD *)(v19 + 20);
  v24 = v23 != 0;
  v25 = v23 != 0;
  v26 = v23 - 1;
  if (v25)
    v27 = v26;
  else
    v27 = 0;
  v56 = v27 >> 8;
  for (i = v21; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_28;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 <= 0x39)
        break;
LABEL_23:
      if (sub_22F115668(i))
        v21 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_48;
    }
    if (v29 == 24)
      goto LABEL_47;
    if (v29 == 26)
      break;
    if (((1 << v29) & 0x20000000200003CLL) == 0)
      goto LABEL_23;
LABEL_28:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_28;
LABEL_47:
  v21 = i;
LABEL_48:
  sub_22F115668(v21);
  sub_22F1167E8((uint64_t *)&v57);
LABEL_49:
  v43 = *a1;
  v44 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v45 = v27 | (v56 << 8) | (unint64_t)(v24 << 32);
  v13 = a1;
  v39 = sub_22EB74CC8(a1, v15, v45);
  *(_DWORD *)(v43 + 11992) = v44;
  v12 = a2;
  v11 = a5;
  if (v59 != v61)
    free(v59);
  v8 = v54;
  if (v39)
  {
LABEL_52:
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v46 = *(_QWORD *)(v39 + 48);
    v47 = *(unsigned int *)(a6 + 8);
    if (v47 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v47) = v46;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v48 = *(unsigned int *)(a7 + 8);
      if (v48 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v48) = v39;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  return 1;
}

unint64_t sub_22EB74CC8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int i;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  int *v51;
  uint64_t v52;
  size_t v53;
  unsigned __int32 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];
  char v58[8];
  int64x2_t v59;
  _BYTE v60[32];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (unint64_t *)v7[4];
  if ((a3 & 0xFF00000000) == 0 || (v8 = *v7, *(_BYTE *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 16) != 36))
  {
    v17 = (uint64_t *)sub_22EB6DD04(a1, v7);
    if (v17)
      goto LABEL_20;
    return 0;
  }
  *(_QWORD *)v58 = v60;
  v59 = vdupq_n_s64(0x20uLL);
  v61 = 0;
  v9 = sub_22F11598C(v8);
  if (v59.i64[0] < (unint64_t)v9)
    sub_22EEB52C0((uint64_t *)v58, v9);
  v12 = (int *)(v7 + 1);
  v13 = *(_QWORD *)(v8 + 32);
  if (v13 >= 0x10 && (*(_QWORD *)(v8 + 32) & 0xFLL) == 0)
    v46 = *(_QWORD *)((char *)&unk_22F481D78
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v46 = 1;
  v15 = sub_22EB6DF2C(a1, v58, v13, ((unint64_t)v7 + v46 + 11) & -v46, v10, v11);
  if (v15 < 0x10)
  {
LABEL_14:
    v16 = 0;
    v17 = 0;
    goto LABEL_15;
  }
  v36 = v15;
  v37 = *(_QWORD *)(v8 + 32);
  v56 = v37;
  if (v37 >= 0x10 && (v37 & 0xF) == 0)
    v55 = *(_QWORD *)((char *)&unk_22F481D78
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v55 = 1;
  v39 = *(_QWORD *)(v8 + 32);
  v57[0] = v39;
  v57[1] = ((unint64_t)v7 + v55 + 11) & -v55;
  while (1)
  {
    while (1)
    {
      if ((v39 & 0xF) != 0)
        goto LABEL_77;
      v40 = *(unsigned __int8 *)(*(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v40 <= 0x39)
        break;
LABEL_72:
      v41 = v39;
      v42 = sub_22F115668(v39);
      v43 = v56;
      if (v42)
        v43 = v41;
      v56 = v43;
      v39 = sub_22F115B7C(v41);
      if (!v39)
        goto LABEL_85;
    }
    if (v40 == 24)
      goto LABEL_84;
    if (v40 == 26)
      break;
    if (((1 << v40) & 0x20000000200003CLL) == 0)
      goto LABEL_72;
LABEL_77:
    v39 = sub_22F115B7C(v39);
  }
  if ((*(_BYTE *)(v39 + 23) & 0x10) == 0)
    goto LABEL_77;
LABEL_84:
  v56 = v39;
LABEL_85:
  v47 = sub_22F115668(v56);
  v48 = sub_22F1167E8(v57);
  v49 = sub_22F34AE9C((_QWORD *)*a1, v36, v47 | ((unint64_t)v48 << 32), *v12, a3);
  if (v49 < 0x10)
    goto LABEL_14;
  v50 = v49;
  sub_22EEB5360((uint64_t)v58, v49, 4uLL, 4);
  *v51 = *v12;
  v52 = *(_QWORD *)(*a1 + 88);
  v53 = v59.i64[0] - v59.i64[1];
  v54 = v59.i32[0] - v59.i32[2];
  if (v59.i32[0] == v59.i32[2])
    v54 = sub_22F11598C(v50);
  v17 = (uint64_t *)sub_22E3CD3D4(v52 + 2032, v54 + 8, 3);
  *v17 = v50;
  memcpy(v17 + 1, (const void *)(*(_QWORD *)v58 + v59.i64[1]), v53);
  v16 = 1;
LABEL_15:
  if (*(_BYTE **)v58 != v60 && *(_QWORD *)v58)
    MEMORY[0x2348A0E84]();
  if ((v16 & 1) == 0 || !v17)
    return 0;
LABEL_20:
  if (v17 != (uint64_t *)v7)
  {
    v20 = *(_QWORD *)(a2 + 16);
    v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
    if ((v20 & 4) != 0)
      v21 = (_QWORD *)*v21;
    v22 = *(_QWORD *)(a2 + 40);
    if ((v22 & 7) != 0)
      v23 = 0;
    else
      v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    v24 = sub_22EFBF080(*(_QWORD *)(*a1 + 88), (uint64_t)v21, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v23, *v17, (uint64_t)v17, *(_BYTE *)(a2 + 96) & 7, 0);
    v18 = v24;
    v25 = *(_DWORD *)(a2 + 96);
    if ((v25 & 0x1000) != 0)
      v26 = 0;
    else
      v26 = v25 & 0xFE000;
    v27 = (v25 >> 20);
    if (v27 == 255)
    {
      v28 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
      {
        v29 = *(_QWORD *)(a2 + 16);
        v30 = v29 & 0xFFFFFFFFFFFFFFF8;
        if ((v29 & 4) != 0)
          v30 = *(_QWORD *)v30;
        for (i = *(_WORD *)(v30 + 8) & 0x7F; i != 83; i = *(_WORD *)(v30 + 8) & 0x7F)
        {
          v32 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v32 = -56;
              goto LABEL_54;
            }
            if (i == 81)
              goto LABEL_54;
          }
          else
          {
            if (i <= 0x18)
            {
              if (i == 16)
                goto LABEL_41;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_54;
              if (i == 24)
              {
LABEL_41:
                v32 = -48;
                goto LABEL_54;
              }
            }
            if (i == 70)
            {
              v32 = -64;
              goto LABEL_54;
            }
          }
          v33 = i - 52;
          if ((i - 33) >= 5)
            v34 = -48;
          else
            v34 = -64;
          if (v33 >= 6)
            v32 = v34;
          else
            v32 = -72;
LABEL_54:
          v35 = *(_QWORD *)(v30 + v32 + 16);
          v30 = v35 & 0xFFFFFFFFFFFFFFF8;
          if ((v35 & 4) != 0)
            v30 = *(_QWORD *)v30;
        }
        v28 = v30 - 40;
      }
      v27 = sub_22F36F2CC(*(_QWORD *)(v28 + 88), a2);
      v44 = (unsigned int *)(v18 + 96);
      v45 = *(_DWORD *)(v18 + 96) & 0xFFF01FFF | v26;
      *(_DWORD *)(v18 + 96) = v45;
      if (v27 >= 0xFF)
      {
        sub_22F3AC2B8(v18, v27);
LABEL_83:
        *(_QWORD *)v58 = a2;
        sub_22F25E108(a1 + 1, v58)[1] = v18;
        return v18;
      }
    }
    else
    {
      v44 = (unsigned int *)(v24 + 96);
      v45 = *(_DWORD *)(v24 + 96) & 0xFFF01FFF | v26;
    }
    *v44 = v45 & 0xF00FFFFF | (v27 << 20);
    goto LABEL_83;
  }
  return a2;
}

uint64_t sub_22EB751E4(uint64_t **a1, unsigned int a2, int *a3, uint64_t a4, _BYTE *a5)
{
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  int *v36;
  unint64_t v38;
  int v40;
  int v41;
  void **v42;
  char v43;
  int v44;
  void *v45[2];
  _QWORD v46[5];

  v46[4] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  if ((*a3 - 6) <= 2)
  {
    v9 = *a1;
    v45[0] = 0;
    v40 = 3;
    v41 = 4;
    v42 = (void **)*((unsigned int *)v9 + 426);
    sub_22EB4DDB8((uint64_t)(v9 + 461), &v41, (int *)&v42, (__int16 *)((char *)v9 + 1693), (uint64_t *)v45, &v40);
    v10 = *((unsigned int *)v9 + 924);
    v11 = v10 - 2;
    v12 = v9[461];
    v13 = *(_DWORD *)(v12 + 576 * (v10 - 2));
    if (v13 == 5)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = *(_BYTE *)(v12 + 576 * v11 + 572);
      v14 = 1;
    }
    else if (v13 == 2)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = 1;
      v14 = *(_BYTE *)(v12 + 576 * v11 + 573) != 0;
    }
    else
    {
      v14 = 0;
      *(_BYTE *)(v12 + 576 * v10 - 4) = 0;
    }
    v15 = v12 + 576 * v10;
    *(_BYTE *)(v15 - 3) = v14;
    *(_WORD *)((char *)v9 + 1693) = 0;
    if (*((_DWORD *)v9 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v9 + 222), (llvm::SmallPtrSetImplBase *)(v15 - 560));
      sub_22EAEAE08((uint64_t)(v9 + 230), (uint64_t *)(v15 - 496));
    }
    v16 = sub_22EB62928((int)a1, *((void **)a3 + 3));
    if ((v16 & 1) != 0
      || (LODWORD(v45[0]) = *a3,
          v17 = sub_22EB14270(*a1, (unsigned __int8 *)(v16 & 0xFFFFFFFFFFFFFFFELL), (int *)v45),
          (v17 & 1) != 0))
    {
      sub_22EB48E64(v9);
      return 1;
    }
    v18 = (int)v45[0];
    if (*((_QWORD *)a3 + 3) != ((unint64_t)v17 & 0xFFFFFFFFFFFFFFFELL) || LODWORD(v45[0]) != *a3)
      *a5 = 1;
    *((_QWORD *)a3 + 3) = (unint64_t)v17 & 0xFFFFFFFFFFFFFFFELL;
    *a3 = v18;
    sub_22EB48E64(v9);
    v8 = *a3;
  }
  if (v8 != 2)
    return 0;
  v36 = a3;
  v19 = *((_QWORD *)a3 + 2);
  if (v19)
  {
    v20 = (void **)*((_QWORD *)a3 + 1);
    v38 = a2 | ((unint64_t)a2 << 32);
    for (i = 8 * v19; i; i -= 8)
    {
      v22 = *v20;
      v23 = *(_QWORD *)((unint64_t)*v20 & 0xFFFFFFFFFFFFFFF0);
      if (v23 && *(_BYTE *)(v23 + 16) == 36
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
        && (v23 = sub_22F10CF48(v23)) != 0)
      {
        *a5 = 1;
        v45[0] = v46;
        v45[1] = (void *)0x200000000;
        v24 = *(_QWORD *)(v23 + 32);
        v42 = v45;
        v43 = 0;
        v44 = -1;
        sub_22EE72E1C((uint64_t)&v42, v24);
        v25 = *(_DWORD *)(v23 + 20);
        v26 = *a1;
        v27 = *((_DWORD *)*a1 + 2998);
        *((_DWORD *)*a1 + 2998) = -1;
        v28 = sub_22EB7239C((uint64_t)a1, *(_QWORD *)(v23 + 32));
        if (v28 >= 0x10)
        {
          LODWORD(v29) = v25 - 1;
          if (v25)
            v29 = v29;
          else
            v29 = 0;
          v30 = sub_22EF663B4((*a1)[11], v28, v29 | ((unint64_t)(v25 != 0) << 32));
          v31 = *(unsigned int *)(a4 + 8);
          if (v31 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v31 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v31) = v30;
          ++*(_DWORD *)(a4 + 8);
        }
        *((_DWORD *)v26 + 2998) = v27;
        if (v45[0] != v46)
          free(v45[0]);
        if (v28 < 0x10)
          return 1;
      }
      else
      {
        v45[0] = (void *)sub_22EB7239C((uint64_t)a1, (unint64_t)v22);
        if (v45[0] < (void *)0x10 || (sub_22EB14454((uint64_t)*a1, (unint64_t *)v45, v38) & 1) != 0)
          return 1;
        v32 = v45[0];
        if (v22 != v45[0])
          *a5 = 1;
        v33 = *(unsigned int *)(a4 + 8);
        if (v33 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v33) = v32;
        ++*(_DWORD *)(a4 + 8);
      }
      ++v20;
    }
  }
  v35 = *(unsigned int *)(a4 + 8);
  *((_QWORD *)v36 + 1) = *(_QWORD *)a4;
  *((_QWORD *)v36 + 2) = v35;
  if ((_DWORD)v35)
    return 0;
  result = 0;
  *v36 = 1;
  return result;
}

unint64_t sub_22EB75604(_QWORD **a1, uint64_t a2, unint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  unint64_t v10;
  unint64_t v12;
  unint64_t result;
  uint64_t v14;
  int *v15;
  uint64_t v16;

  v7 = a3;
  v10 = *(_QWORD *)(a3 + 32);
  if (v10 >= 0x10 && (v10 & 0xF) == 0)
    v16 = *(_QWORD *)((char *)&unk_22F481D78
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v16 = 1;
  v12 = sub_22EB6DF2C(a1, a2, v10, ((unint64_t)a4 + v16 + 3) & -v16, a5, a6);
  result = 0;
  if (v12 >= 0x10)
  {
    if (v12 == *(_QWORD *)(v7 + 32)
      || (v7 = sub_22EE7E490(*a1, v12, (*(_DWORD *)(v7 + 16) >> 19) & 1, *a4), result = 0, v7 >= 0x10))
    {
      v14 = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0);
      if (!v14 || (*(_DWORD *)(v14 + 16) & 0xFE) != 0x28)
        sub_22F10CF48(v14);
      sub_22EEB5360(a2, v7, 4uLL, 4);
      *v15 = *a4;
      return v7;
    }
  }
  return result;
}

uint64_t sub_22EB7570C(uint64_t *a1, void **a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _BYTE *v6;
  int v8;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  int v31;
  void *v32;
  void *v33[2];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = a6;
  v8 = a4;
  v11 = v34;
  v12 = a3;
  while (1)
  {
    v13 = (unsigned __int8 *)*a2;
    if (v8)
      break;
    if (*v13 != 213)
    {
      v14 = sub_22EB62928((int)a1, *a2);
      if ((v14 & 1) != 0)
        return 1;
      goto LABEL_20;
    }
LABEL_9:
    v15 = (void *)*((_QWORD *)v13 + 3);
    v16 = v11;
    v33[0] = v11;
    v33[1] = (void *)0x200000000;
    v17 = *a1;
    v31 = 7;
    v32 = v15;
    sub_22EE7377C(v17, (uint64_t)&v31, (uint64_t)v33);
    v18 = *((_DWORD *)v13 + 5);
    v19 = *a1;
    v20 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v21 = sub_22EB62928((int)a1, v15);
    if ((v21 & 1) != 0)
    {
      v24 = 0;
      v6 = a6;
    }
    else
    {
      LODWORD(v22) = v18 - 1;
      if (v18)
        v22 = v22;
      else
        v22 = 0;
      v23 = sub_22EE739C0((_QWORD *)*a1, v21 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)v13 + 4), v22 | ((unint64_t)(v18 != 0) << 32));
      v24 = 0;
      v6 = a6;
      if ((v23 & 1) == 0)
      {
        if (a6)
          *a6 = 1;
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v23 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        v24 = 1;
      }
    }
    *(_DWORD *)(v19 + 11992) = v20;
    v11 = v16;
    if (v33[0] != v16)
      free(v33[0]);
    v8 = a4;
    if ((v24 & 1) == 0)
      return 1;
LABEL_30:
    ++a2;
    if (!--v12)
      return 0;
  }
  if (!sub_22EFFF908((unsigned __int8 *)*a2))
  {
    v13 = (unsigned __int8 *)*a2;
    if (*(unsigned __int8 *)*a2 != 213)
    {
      v14 = sub_22EB759A0(a1, (unsigned __int8 *)*a2, 0);
      if ((v14 & 1) != 0)
        return 1;
LABEL_20:
      v26 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && *a2 != (void *)v26)
        *v6 = 1;
      v27 = *(unsigned int *)(a5 + 8);
      if (v27 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = v26;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    result = 0;
    *v6 = 1;
    return result;
  }
  return 0;
}

uint64_t sub_22EB759A0(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int8 **v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t *v40;
  unsigned int v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[9];

  v54[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  if (*a2 == 172 && (a2[4] & 2) != 0)
  {
    v6 = a1[13];
    v7 = *(_QWORD *)a1[11];
    while (v6 != v7)
    {
      v9 = *(_QWORD *)(v6 - 8);
      v6 -= 8;
      v8 = v9;
      if ((unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFF8) == a2)
      {
        v7 = v6 + 8;
LABEL_9:
        *(_QWORD *)(v7 - 8) = v8 | 4;
        goto LABEL_10;
      }
    }
    v8 = *(_QWORD *)(v7 - 8);
    goto LABEL_9;
  }
  while (1)
  {
LABEL_10:
    v10 = *v4;
    if ((v10 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v10 = *v4;
    }
    if (v10 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v10 = *v4;
    }
    if (v10 == 186)
    {
      v11 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v11 & 0xFFFFFFFFFFFFFFF8);
      if ((v11 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v12 = *v4;
      if (v12 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v12 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v12 = *v4;
    }
    if (v12 != 132)
      break;
    v13 = (unsigned __int8 **)(v4 + 16);
LABEL_37:
    v4 = *v13;
    if (!*v13)
      return 0;
  }
  v14 = v12 & 0xFE;
  v15 = v12;
  if ((a3 & 1) == 0)
  {
    if (v14 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22EB62928((int)a1, v4);
    v15 = *(_DWORD *)v4;
  }
  if (v12 == 179)
  {
    v24 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v19 = v24;
    v25 = 0;
    v26 = 0;
    goto LABEL_42;
  }
  if (v12 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v22 = HIDWORD(v21);
    v23 = v21;
    v24 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v19 = v24;
    v25 = v23;
    v26 = v22;
LABEL_42:
    sub_22F002D50(v24, v25, 0, 0, v26);
    return v19;
  }
  if (v14 != 118 || v15 == 119)
    return sub_22EB62928((int)a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v16 = *(_DWORD *)v4;
    v17 = v16 == 119;
    if (v16 == 119)
      v18 = v4;
    else
      v18 = 0;
    v13 = (unsigned __int8 **)(v18 + 48);
    if (!v17)
      v13 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_37;
  }
  v27 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v29 = *(_DWORD *)(*(_QWORD *)(v27 + 3688) + 576 * *(unsigned int *)(v27 + 3696) - 576), v29 <= 3)
      ? (v30 = v29 == 2)
      : (v30 = 1),
        v30))
  {
    v28 = 1;
  }
  else
  {
    v28 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v27 + 72) + 1) & 2) != 0)
    {
      v52 = 0;
      v50 = 3;
      v51 = 1;
      v49 = *(unsigned int *)(v27 + 1704);
      sub_22EB4DDB8(v27 + 3688, &v51, (int *)&v49, (__int16 *)(v27 + 1693), (uint64_t *)&v52, &v50);
      v31 = *(unsigned int *)(v27 + 3696);
      v32 = v31 - 2;
      v33 = *(_QWORD *)(v27 + 3688);
      v34 = *(_DWORD *)(v33 + 576 * (v31 - 2));
      if (v34 == 5)
      {
        *(_BYTE *)(v33 + 576 * v31 - 4) = *(_BYTE *)(v33 + 576 * v32 + 572);
        v35 = 1;
      }
      else if (v34 == 2)
      {
        *(_BYTE *)(v33 + 576 * v31 - 4) = 1;
        v35 = *(_BYTE *)(v33 + 576 * v32 + 573) != 0;
      }
      else
      {
        v35 = 0;
        *(_BYTE *)(v33 + 576 * v31 - 4) = 0;
      }
      v36 = v33 + 576 * v31;
      *(_BYTE *)(v36 - 3) = v35;
      *(_WORD *)(v27 + 1693) = 0;
      if (*(_DWORD *)(v27 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v27 + 1776), (llvm::SmallPtrSetImplBase *)(v36 - 560));
        sub_22EAEAE08(v27 + 1840, (uint64_t *)(v36 - 496));
      }
      v28 = 0;
    }
  }
  v52 = v54;
  v53 = 0x800000000;
  LOBYTE(v49) = 0;
  v19 = 1;
  if ((sub_22EB7570C((int)a1) & 1) != 0)
    goto LABEL_65;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v19 = 0;
    v37 = *((_QWORD *)v4 + 3);
    v38 = HIDWORD(v37);
    if (HIDWORD(v37))
    {
      v39 = v37;
      if ((_DWORD)v37)
      {
        v40 = (uint64_t *)v52;
        v41 = v53;
        v19 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v53 + 24, 3);
        sub_22F002D50(v19, v39, v40, v41, v38);
      }
    }
    goto LABEL_65;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v42 = *((_DWORD *)v4 + 1);
    goto LABEL_64;
  }
  v46 = **((_QWORD **)v4 + 5);
  v47 = v46;
  while (2)
  {
    while (2)
    {
      if ((v47 & 0xF) != 0)
        goto LABEL_80;
      v48 = *(unsigned __int8 *)(*(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v48 > 0x39)
      {
LABEL_75:
        if (sub_22F115668(v47))
          v46 = v47;
        v47 = sub_22F115B7C(v47);
        if (!v47)
          goto LABEL_84;
        continue;
      }
      break;
    }
    if (v48 == 24)
      break;
    if (v48 != 26)
    {
      if (((1 << v48) & 0x20000000200003CLL) != 0)
        goto LABEL_80;
      goto LABEL_75;
    }
    if ((*(_BYTE *)(v47 + 23) & 0x10) == 0)
    {
LABEL_80:
      v47 = sub_22F115B7C(v47);
      continue;
    }
    break;
  }
  v46 = v47;
LABEL_84:
  v42 = sub_22F115668(v46);
LABEL_64:
  v43 = (uint64_t *)v52;
  v44 = v53;
  sub_22F060B18(v4);
  v19 = sub_22EB353A0(*a1, v42, v43, v44, v45);
LABEL_65:
  if (v52 != v54)
    free(v52);
  if ((v28 & 1) == 0)
    sub_22EB48E64(v27);
  return v19;
}

uint64_t sub_22EB75F08(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t result;

  if (!a2)
    return (uint64_t)a2;
  v8 = a3;
  switch(a2->n128_u8[0])
  {
    case 1u:
      result = sub_22EB76604(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2u:
      result = sub_22EB76B24(a1, (uint64_t)a2);
      break;
    case 3u:
    case 9u:
    case 0x13u:
    case 0x60u:
      result = nullsub_910(a2);
      break;
    case 4u:
      result = sub_22EB76CF8((_QWORD **)a1, (uint64_t)a2);
      break;
    case 5u:
      result = sub_22EB76E1C(a1, (uint64_t)a2);
      break;
    case 6u:
      result = sub_22EB770D0(a1, (uint64_t)a2);
      break;
    case 7u:
      result = sub_22EB7724C(a1, (uint64_t)a2);
      break;
    case 8u:
      result = sub_22EB77464(a1, (uint64_t)a2);
      break;
    case 0xAu:
      result = sub_22EB7746C(a1, (uint64_t)a2);
      break;
    case 0xBu:
      result = sub_22EB774C0(a1, (uint64_t)a2);
      break;
    case 0xCu:
      result = sub_22EB777A8(a1, (uint64_t)a2);
      break;
    case 0xDu:
      result = sub_22EB7795C(a1, (uint64_t)a2);
      break;
    case 0xEu:
      result = sub_22EB779F0(a1, (uint64_t)a2);
      break;
    case 0xFu:
      result = sub_22EB77BB4((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x10u:
      result = sub_22EB77C3C((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    case 0x11u:
      result = sub_22EB77F54(a1, (uint64_t)a2);
      break;
    case 0x12u:
      result = sub_22EB77FBC(a1, (uint64_t)a2);
      break;
    case 0x14u:
      result = sub_22EB781D0((int)a1);
      break;
    case 0x15u:
      result = sub_22EB781DC(a1, a2);
      break;
    case 0x16u:
      result = sub_22EB78248(a1, a2);
      break;
    case 0x17u:
      result = sub_22EB782B4(a1, a2);
      break;
    case 0x18u:
      result = sub_22EB78320(a1, a2);
      break;
    case 0x19u:
      result = sub_22EB7838C(a1, a2);
      break;
    case 0x1Au:
      result = sub_22EB783FC(a1, a2);
      break;
    case 0x1Bu:
      result = sub_22EB78468(a1, a2);
      break;
    case 0x1Cu:
      result = sub_22EB784D4(a1, a2);
      break;
    case 0x1Du:
      result = sub_22EB78540(a1, a2);
      break;
    case 0x1Eu:
      result = sub_22EB785AC(a1, a2);
      break;
    case 0x1Fu:
      result = sub_22EB78618(a1, a2);
      break;
    case 0x20u:
      result = sub_22EB78684(a1, a2);
      break;
    case 0x21u:
      result = sub_22EB786F0(a1, a2);
      break;
    case 0x22u:
      result = sub_22EB7875C(a1, a2);
      break;
    case 0x23u:
      result = sub_22EB787C8(a1, a2);
      break;
    case 0x24u:
      result = sub_22EB78834(a1, a2);
      break;
    case 0x25u:
      result = sub_22EB788A0(a1, a2);
      break;
    case 0x26u:
      result = sub_22EB7890C(a1, a2);
      break;
    case 0x27u:
      result = sub_22EB78978(a1, a2);
      break;
    case 0x28u:
      result = sub_22EB789E4(a1, a2);
      break;
    case 0x29u:
      result = sub_22EB78A50(a1, a2);
      break;
    case 0x2Au:
      result = sub_22EB78ABC(a1, a2);
      break;
    case 0x2Bu:
      result = sub_22EB78B28(a1, a2);
      break;
    case 0x2Cu:
      result = sub_22EB78B94(a1, a2);
      break;
    case 0x2Du:
      result = sub_22EB78C00(a1, a2);
      break;
    case 0x2Eu:
      result = sub_22EB78C6C(a1, a2);
      break;
    case 0x2Fu:
      result = sub_22EB78CD8(a1, a2);
      break;
    case 0x30u:
      result = sub_22EB78D44(a1, a2);
      break;
    case 0x31u:
      result = sub_22EB78DB0(a1, a2);
      break;
    case 0x32u:
      result = sub_22EB78E1C(a1, a2);
      break;
    case 0x33u:
      result = sub_22EB78E88(a1, a2);
      break;
    case 0x34u:
      result = sub_22EB78EF4(a1, a2);
      break;
    case 0x35u:
      result = sub_22EB78F60(a1, a2);
      break;
    case 0x36u:
      result = sub_22EB78FCC(a1, a2);
      break;
    case 0x37u:
      result = sub_22EB79038(a1, a2);
      break;
    case 0x38u:
      result = sub_22EB790A4(a1, a2);
      break;
    case 0x39u:
      result = sub_22EB79110(a1, a2);
      break;
    case 0x3Au:
      result = sub_22EB7917C(a1, a2);
      break;
    case 0x3Bu:
      result = sub_22EB791E8(a1, a2);
      break;
    case 0x3Cu:
    case 0x3Du:
      result = sub_22EB79254(a1, a2);
      break;
    case 0x3Eu:
      result = sub_22EB792C0(a1, a2);
      break;
    case 0x3Fu:
      result = sub_22EB7932C(a1, a2);
      break;
    case 0x40u:
      sub_22EB79398((_QWORD *)*a1, (uint64_t)a2);
      return 1;
    case 0x41u:
      result = sub_22EB793F0(a1, a2);
      break;
    case 0x42u:
      result = sub_22EB7945C(a1, a2);
      break;
    case 0x43u:
      result = sub_22EB794C8(a1, a2);
      break;
    case 0x44u:
      result = sub_22EB79534(a1, a2);
      break;
    case 0x45u:
      result = sub_22EB795A0(a1, a2);
      break;
    case 0x46u:
      result = sub_22EB7960C(a1, a2);
      break;
    case 0x47u:
      result = sub_22EB79678(a1, a2);
      break;
    case 0x48u:
      result = sub_22EB796E4(a1, a2);
      break;
    case 0x49u:
      result = sub_22EB79750(a1, a2);
      break;
    case 0x4Au:
      result = sub_22EB797BC(a1, a2);
      break;
    case 0x4Bu:
      result = sub_22EB79828(a1, a2);
      break;
    case 0x4Cu:
      result = sub_22EB79894(a1, a2);
      break;
    case 0x4Du:
      result = sub_22EB79900(a1, a2);
      break;
    case 0x4Eu:
      result = sub_22EB7996C(a1, a2);
      break;
    case 0x4Fu:
      result = sub_22EB799D8(a1, a2);
      break;
    case 0x50u:
      result = sub_22EB79A44(a1, a2);
      break;
    case 0x51u:
      result = sub_22EB79AB0(a1, a2);
      break;
    case 0x52u:
      result = sub_22EB79B1C(a1, a2);
      break;
    case 0x53u:
      result = sub_22EB79B88(a1, a2);
      break;
    case 0x54u:
      result = sub_22EB79BF4(a1, a2);
      break;
    case 0x55u:
      result = sub_22EB79C60(a1, a2);
      break;
    case 0x56u:
      result = sub_22EB79CCC((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x57u:
      result = sub_22EB79DB8(a1, (uint64_t)a2);
      break;
    case 0x58u:
      result = sub_22EB79E14((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59u:
      result = sub_22EB79EB4((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5Au:
      result = sub_22EB79F10(a1, (uint64_t)a2);
      break;
    case 0x5Bu:
      result = sub_22EB7A124(a1, (uint64_t)a2);
      break;
    case 0x5Cu:
      result = sub_22EB7A180(a1, (uint64_t)a2);
      break;
    case 0x5Du:
      result = sub_22EB7A264(a1, (uint64_t)a2);
      break;
    case 0x5Eu:
      result = sub_22EB7A2B4(a1, (uint64_t)a2);
      break;
    case 0x5Fu:
      result = sub_22EB7A320(a1, (uint64_t)a2);
      break;
    case 0x61u:
      result = sub_22EB7A368(a1, (uint64_t)a2);
      break;
    case 0x62u:
      result = sub_22EB7A408(a1, (unsigned __int16 *)a2);
      break;
    case 0x63u:
      result = sub_22EB7A618(a1, (uint64_t)a2);
      break;
    case 0x64u:
      result = sub_22EB7A668(a1, (unsigned __int16 *)a2);
      break;
    case 0x65u:
      result = sub_22EB7A790(a1, (unsigned int *)a2);
      break;
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
      v10 = sub_22EB62928((int)a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEBu:
      result = sub_22EB7A8E8((uint64_t)a1, (uint64_t)a2);
      break;
    case 0xECu:
      result = sub_22EB7A994(a1, (unsigned __int16 *)a2);
      break;
    default:
      return (uint64_t)a2;
  }
  return result;
}

uint64_t sub_22EB76604(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v46;
  unsigned int v47;
  _QWORD v48[8];
  void *v49;
  uint64_t v50;
  _BYTE v51[32];
  void *v52;
  uint64_t v53;
  _BYTE v54[64];
  char *v55;
  uint64_t v56;
  _QWORD v57[10];

  v57[8] = *MEMORY[0x24BDAC8D0];
  v55 = (char *)v57;
  v56 = 0x800000000;
  v52 = v54;
  v53 = 0x800000000;
  v49 = v51;
  v50 = 0x400000000;
  v47 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 8 * v10;
    v14 = 1;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v11);
      v16 = v50;
      if (v50 >= (unint64_t)HIDWORD(v50))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v16 = v50;
      }
      *((_QWORD *)v49 + v16) = v15;
      LODWORD(v50) = v50 + 1;
      v17 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v11);
      v18 = v56;
      if (v56 >= (unint64_t)HIDWORD(v56))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v56;
      }
      *(_QWORD *)&v55[8 * v18] = v17;
      LODWORD(v56) = v56 + 1;
      v19 = *(void **)(*(_QWORD *)(a2 + 32) + v11);
      v20 = sub_22EB62928((int)a1, v19);
      if ((v20 & 1) != 0)
        break;
      v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      v22 = v19 != (void *)(v20 & 0xFFFFFFFFFFFFFFFELL);
      v10 = v53;
      if (v53 >= (unint64_t)HIDWORD(v53))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v53;
      }
      *((_QWORD *)v52 + v10) = v21;
      v12 |= v22;
      LODWORD(v10) = v53 + 1;
      LODWORD(v53) = v53 + 1;
      v11 += 8;
      if (v13 == v11)
        goto LABEL_13;
    }
  }
  else
  {
    v12 = 0;
LABEL_13:
    v23 = *(_DWORD *)(a2 + 20);
    if (v23)
    {
      v24 = 0;
      v14 = 1;
      while (1)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v26 = v50;
        if (v50 >= (unint64_t)HIDWORD(v50))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v26 = v50;
        }
        *((_QWORD *)v49 + v26) = v25;
        LODWORD(v50) = v50 + 1;
        v27 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v28 = v56;
        if (v56 >= (unint64_t)HIDWORD(v56))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v28 = v56;
        }
        *(_QWORD *)&v55[8 * v28] = v27;
        LODWORD(v56) = v56 + 1;
        v29 = *(void **)(*(_QWORD *)(a2 + 32) + 8 * (v24 + *(_DWORD *)(a2 + 16)));
        v30 = sub_22EB62928((int)a1, v29);
        if ((v30 & 1) != 0)
          break;
        v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
        v32 = v29 != (void *)(v30 & 0xFFFFFFFFFFFFFFFELL);
        v10 = v53;
        if (v53 >= (unint64_t)HIDWORD(v53))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v53;
        }
        *((_QWORD *)v52 + v10) = v31;
        v12 |= v32;
        LODWORD(v10) = v53 + 1;
        LODWORD(v53) = v53 + 1;
        if (v23 == ++v24)
          goto LABEL_23;
      }
    }
    else
    {
LABEL_23:
      v33 = *(_DWORD *)(a2 + 80);
      if (v33)
      {
        v34 = 0;
        v14 = 1;
        while (1)
        {
          v35 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v36 = v50;
          if (v50 >= (unint64_t)HIDWORD(v50))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v50;
          }
          *((_QWORD *)v49 + v36) = v35;
          LODWORD(v50) = v50 + 1;
          v37 = sub_22EB62928((int)a1, *(void **)(*(_QWORD *)(a2 + 32)+ 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))));
          if ((v37 & 1) != 0)
            break;
          v38 = v37 & 0xFFFFFFFFFFFFFFFELL;
          v39 = *(_QWORD *)(*(_QWORD *)(a2 + 32)
                          + 8 * (v34 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))) != (v37 & 0xFFFFFFFFFFFFFFFELL);
          v10 = v53;
          if (v53 >= (unint64_t)HIDWORD(v53))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v53;
          }
          *((_QWORD *)v52 + v10) = v38;
          v12 |= v39;
          LODWORD(v10) = v53 + 1;
          LODWORD(v53) = v53 + 1;
          if (v33 == ++v34)
            goto LABEL_31;
        }
      }
      else
      {
LABEL_31:
        if ((v12 & 1) != 0)
        {
          v40 = *(unsigned int *)(a2 + 24);
          v41 = 0;
          if ((_DWORD)v40)
          {
            v42 = 0;
            v43 = 8 * v40;
            do
            {
              v44 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v42);
              if (v41 >= 8)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v41 = v47;
              }
              v48[v41] = v44;
              v41 = ++v47;
              v42 += 8;
            }
            while (v43 != v42);
            LODWORD(v10) = v53;
          }
          v14 = sub_22ED4E804(*a1, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v49, a8, v55, v56, (uint64_t *)v52, v10, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v48, v41, 0, *(_DWORD *)(a2 + 80), v46, *(_DWORD *)(a2 + 40));
        }
        else
        {
          v14 = a2;
        }
      }
    }
  }
  if (v49 != v51)
    free(v49);
  if (v52 != v54)
    free(v52);
  if (v55 != (char *)v57)
    free(v55);
  return v14;
}

uint64_t sub_22EB76B24(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v16;
  const void *v17;
  unsigned int v18;
  uint64_t v19[10];

  v2 = a2;
  v19[8] = *MEMORY[0x24BDAC8D0];
  v16 = *(unsigned int *)(a2 + 64);
  v17 = *(const void **)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = (*(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20));
  v18 = 0;
  if (v5 < 9)
  {
    if (!(_DWORD)v5)
      return v2;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    while (1)
    {
      v9 = sub_22EB62928((int)a1, *(void **)(v4 + 8 * v6));
      if (v9 >= 2)
        break;
      v7 = 1;
      if (v5 - 1 == v6++)
        return 1;
    }
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    v11 = *(_QWORD *)(v4 + 8 * v6) != (v9 & 0xFFFFFFFFFFFFFFFELL);
    v12 = v18;
    if (v18 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v12 = v18;
    }
    v19[v12] = v10;
    v8 |= v11;
    v13 = ++v18;
    ++v6;
  }
  while (v5 != v6);
  if ((v7 & 1) != 0)
    return 1;
  if ((v8 & 1) != 0)
    return sub_22ED51D60(*a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 40), v17, v16, *(const void **)(v2 + 48), *(_QWORD *)(v2 + 56), *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_QWORD *)(v2 + 80), (*(_DWORD *)(v2 + 20) + *(_DWORD *)(v2 + 16)), *(_QWORD *)(v2 + 88), *(unsigned int *)(v2 + 24), v19, v13, *(_DWORD *)(v2 + 44));
  return v2;
}

uint64_t sub_22EB76CF8(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  char *v11;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) != 0)
      v6 = (uint64_t *)v6[4];
    if (!sub_22EB6DD04(a1, v6))
      return 1;
    v7 = sub_22EACE428();
    if (!v7)
      return 1;
    v4 = v7;
    sub_22EFCCFA0((*a1)[27], v7);
    if ((*(_BYTE *)(v4 + 28) & 0x80) != 0)
      return 1;
  }
  v8 = sub_22EB75F08((int)a1);
  if ((v8 & 1) != 0)
    return 1;
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (v4 || *(_QWORD *)(v2 + 24) != v9)
  {
    v10 = *(_DWORD *)(v2 + 8);
    v2 = sub_22E3CD3D4((*a1)[11] + 2032, 32, 3);
    *(_BYTE *)v2 = 4;
    if (byte_255E04EB3)
    {
      v11 = sub_22F0D3748(4);
      ++*((_DWORD *)v11 + 2);
    }
    *(_DWORD *)(v2 + 8) = v10;
    *(_QWORD *)(v2 + 16) = v4;
    *(_QWORD *)(v2 + 24) = v9;
  }
  return v2;
}

uint64_t sub_22EB76E1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v23;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = sub_22EB75F08((int)a1);
    if ((v4 & 1) != 0)
      return 1;
  }
  else
  {
    v4 = 0;
  }
  v5 = sub_22EB75F08((int)a1);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EB75F08((int)a1);
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22EB75F08((int)a1);
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_22EB62928((int)a1, *(void **)(v2 + 48));
  v9 = v8;
  if ((v8 & 1) != 0)
    return 1;
  if ((v8 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v9 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v8 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((v9 & 1) != 0)
    return 1;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v9 = (uint64_t)sub_22EBCCCF0(*a1, (int *)(v9 & 0xFFFFFFFFFFFFFFFELL));
  v10 = sub_22EB62928((int)a1, *(void **)(v2 + 56));
  v11 = v10;
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v11 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v10 & 0xFFFFFFFFFFFFFFFELL));
  v12 = sub_22EB75F08((int)a1);
  v13 = v12;
  if ((v12 & 1) != 0)
    return 1;
  v14 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v15 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v23 = v5 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == v14
    && *(_QWORD *)(v2 + 24) == v15
    && *(_QWORD *)(v2 + 32) == (v6 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 40) == (v7 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 48) == (v9 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 56) == (v11 & 0xFFFFFFFFFFFFFFFELL)
    && *(_QWORD *)(v2 + 64) == (v12 & 0xFFFFFFFFFFFFFFFELL))
  {
    v17 = v2;
  }
  else
  {
    v16 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v17 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v14, *(_DWORD *)(v2 + 84), v15, v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v9 & 0xFFFFFFFFFFFFFFFELL, v11 & 0xFFFFFFFFFFFFFFFELL, v12 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v17 & 1) != 0 && *(_QWORD *)(v2 + 64) != v16)
    {
      sub_22EA2BABC(*a1, *(_QWORD *)(v16 + 8));
      return 1;
    }
  }
  v18 = sub_22EB75F08((int)a1);
  if ((v18 & 1) != 0)
    return 1;
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((v17 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v19)
  {
    v21 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v14, *(_DWORD *)(v2 + 84), v23, v6 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL, v9 & 0xFFFFFFFFFFFFFFFELL, v11 & 0xFFFFFFFFFFFFFFFELL, v13 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
    if ((v21 & 1) != 0)
      return 1;
    v20 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (v20 != v2)
    return sub_22ED33C64(*a1, v20, v19);
  return v2;
}

uint64_t sub_22EB770D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EB77464(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v14 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a2 + 24);
    v8 = 1;
    while (1)
    {
      v9 = sub_22EB76CF8((_QWORD **)a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      v6 = v6 || *v7 != v10;
      v11 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v14;
      }
      v15[v11] = v10;
      v12 = ++v14;
      ++v7;
      if (!--v5)
        goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
    v6 = 0;
LABEL_14:
    if (*(_QWORD *)(a2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL) || v6)
      return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v15, v12);
    else
      return a2;
  }
  return v8;
}

uint64_t sub_22EB7724C(uint64_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v12;
  uint64_t v13;
  const char *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  const char *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[14];

  v33[12] = *MEMORY[0x24BDAC8D0];
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v5 = v4;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(unsigned int *)((v6 & 0xFFFFFFFFFFFFFFF8) + 72);
  v8 = *(unsigned int *)((v6 & 0xFFFFFFFFFFFFFFF8) + 76);
  v31 = v33;
  v32 = 0x400000000;
  if ((_DWORD)v7)
  {
    v27 = v4;
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 88;
    do
    {
      if (v8)
      {
        v10 = *(_QWORD *)(*(_QWORD *)v9 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v9 + 40) & 7) != 0 || v10 == 0)
        {
          v13 = 0;
          v14 = "";
        }
        else
        {
          v12 = *(_DWORD **)(v10 + 16);
          v15 = *v12;
          v14 = (const char *)(v12 + 4);
          v13 = v15;
        }
        v16 = sub_22EB7239C((uint64_t)a1, *(_QWORD *)(*(_QWORD *)v9 + 48));
        v28 = v14;
        v29 = v13;
        v30 = v16;
      }
      else
      {
        v28 = 0;
        v29 = 0;
        v30 = 0;
      }
      v17 = sub_22E4EF088((uint64_t)&v31, (unint64_t)&v28, 1);
      v18 = (char *)v31 + 24 * v32;
      v19 = *(_OWORD *)v17;
      *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
      *(_OWORD *)v18 = v19;
      v20 = v32 + 1;
      LODWORD(v32) = v32 + 1;
      v9 += 8;
      --v8;
      --v7;
    }
    while (v7);
    v6 = *(_QWORD *)(a2 + 16);
    v21 = v31;
    v5 = v27;
  }
  else
  {
    v20 = 0;
    v21 = v33;
  }
  sub_22ED379B0(*a1, v5, 0, (v6 >> 1) & 3, (uint64_t)v21, v20, 0);
  v22 = *a1;
  sub_22E905168(*a1, 0);
  v23 = sub_22EB75F08((int)a1);
  v24 = *(_QWORD *)(*(_QWORD *)(v22 + 1896) + 8 * *(unsigned int *)(v22 + 1904) - 8);
  --*(_QWORD *)(v24 + 360);
  if ((v23 & 1) != 0)
  {
    sub_22F344E80(*a1);
    v25 = 1;
  }
  else
  {
    v25 = sub_22ED37CF8((_QWORD *)*a1, v23 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v31 != v33)
    free(v31);
  return v25;
}

uint64_t sub_22EB77464(uint64_t *a1, uint64_t a2)
{
  return sub_22EB7AAAC(a1, a2);
}

uint64_t sub_22EB7746C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB759A0(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22EB774C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[6];
  uint64_t v26;
  _OWORD v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  void *v34;
  _QWORD v35[7];

  v35[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v12 = v9;
  *(_QWORD *)&v27[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  sub_22F25E108(a1 + 1, v27)[1] = v9;
  *(_QWORD *)(v6 + 176) = v12;
  v13 = sub_22EB75F08((int)a1);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22EB75F08((int)a1);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
    return 1;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v6 + 344) = v15;
  v16 = sub_22EB75F08((int)a1);
  if ((v16 & 1) != 0)
    return 1;
  sub_22F31B0C0((uint64_t)v27, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
  if (!v33)
    goto LABEL_37;
  v17 = sub_22EB759A0(a1, *(unsigned __int8 **)(a2 + 80), 0);
  if ((v17 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v30 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22F31B2A0((uint64_t)v27) & 1) != 0)
    {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  if (*(_QWORD *)(a2 + 56))
  {
    v18 = sub_22EB75F08((int)a1);
    if ((v18 & 1) != 0)
      goto LABEL_37;
    *((_QWORD *)&v28 + 1) = v18 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (*(_QWORD *)(a2 + 48))
  {
    v19 = sub_22EB75F08((int)a1);
    if ((v19 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v28 = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  if (*(_QWORD *)(a2 + 96))
  {
    v20 = sub_22EB75F08((int)a1);
    if ((v20 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v31 = v20 & 0xFFFFFFFFFFFFFFFELL;
  }
  v21 = sub_22EB62928((int)a1, *(void **)(a2 + 64));
  if ((v21 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v29 = v21 & 0xFFFFFFFFFFFFFFFELL;
  v22 = sub_22EB62928((int)a1, *(void **)(a2 + 72));
  if ((v22 & 1) != 0)
    goto LABEL_37;
  *((_QWORD *)&v29 + 1) = v22 & 0xFFFFFFFFFFFFFFFELL;
  if (!*(_QWORD *)(a2 + 88))
    goto LABEL_33;
  v23 = sub_22EB75F08((int)a1);
  if ((v23 & 1) != 0)
  {
LABEL_37:
    v10 = 1;
    goto LABEL_38;
  }
  *((_QWORD *)&v30 + 1) = v23 & 0xFFFFFFFFFFFFFFFELL;
LABEL_33:
  v26 = v32;
  v25[4] = v30;
  v25[5] = v31;
  v25[0] = v27[0];
  v25[1] = v27[1];
  v25[2] = v28;
  v25[3] = v29;
  v24 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v25);
  if (v24)
    v10 = v24;
  else
    v10 = 1;
LABEL_38:
  if (v34 != v35)
    free(v34);
  return v10;
}

uint64_t sub_22EB777A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v2 = a2;
  v21[4] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x400000000;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = (uint64_t *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v6 = &v5[*(unsigned int *)(v4 & 0xFFFFFFFFFFFFFFFELL)];
  }
  else
  {
    if (v4)
      v5 = (uint64_t *)(a2 + 8);
    else
      v5 = 0;
    if (v4)
      v6 = (uint64_t *)(a2 + 16);
    else
      v6 = 0;
  }
  if (v5 != v6)
  {
    v7 = 0;
    do
    {
      v8 = *v5;
      v17 = *v5;
      v18 = 0;
      if (sub_22E793870(a1 + 1, &v17, &v18))
      {
        v9 = v8;
        if (v18 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          v9 = *(_QWORD *)(v18 + 8);
        if (!v9)
        {
LABEL_21:
          v2 = 1;
          goto LABEL_24;
        }
      }
      else
      {
        v9 = v8;
        if (!v8)
          goto LABEL_21;
      }
      v10 = v9 != v8;
      v11 = v20;
      if (v20 >= (unint64_t)HIDWORD(v20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v20;
      }
      *((_QWORD *)v19 + v11) = v9;
      v7 |= v10;
      v12 = (v20 + 1);
      LODWORD(v20) = v20 + 1;
      ++v5;
    }
    while (v5 != v6);
    if ((v7 & 1) != 0)
    {
      v14 = *(_DWORD *)(v2 + 16);
      v13 = *(_DWORD *)(v2 + 20);
      v15 = sub_22EA2D7B4((_QWORD *)*a1, (unint64_t *)v19, v12);
      v2 = sub_22ED2B2F8(*a1, v15, v14, v13);
    }
  }
LABEL_24:
  if (v19 != v21)
    free(v19);
  return v2;
}

uint64_t sub_22EB7795C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = sub_22EB75F08((int)a1);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a2 + 16) != (v5 & 0xFFFFFFFFFFFFFFFELL) || *(_QWORD *)(a2 + 8) != v6)
    return sub_22F3440A8(*a1, *(_DWORD *)(a2 + 4), v6, *(_DWORD *)(a2 + 24), *(unsigned int *)(a2 + 24), (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 28));
  return a2;
}

uint64_t sub_22EB779F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22EB75F08((int)a1);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 ? *(_QWORD *)(v7 + 8) : 0;
  sub_22EB7ACEC((uint64_t)&v20, (uint64_t)a1, *(_DWORD *)(a2 + 4), v8, *(void **)(a2 + 24), 0);
  if ((_BYTE)v21)
    return 1;
  v9 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v9 & 1) != 0)
    return 1;
  v10 = *a1;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v9 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
  v15 = sub_22EBCF22C(v10, v11, v13, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a2 + 32) && !v15)
    return v14;
  v16 = sub_22EB75F08((int)a1);
  if ((v16 & 1) != 0)
    return 1;
  if (*(_QWORD *)(a2 + 8) != (v5 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_20;
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
    v19 = *(_QWORD *)(v19 + 8);
  if ((_QWORD)v20 == v19
    && *(_OWORD *)(a2 + 24) == __PAIR128__(v11, *((unint64_t *)&v20 + 1))
    && *(_QWORD *)(a2 + 40) == (v16 & 0xFFFFFFFFFFFFFFFELL))
  {
    return a2;
  }
LABEL_20:
  v17 = *(_DWORD *)(a2 + 4);
  v22 = v20;
  v23 = v21;
  return sub_22ED31008(*a1, v17, *(_DWORD *)(a2 + 48), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v22, v15, *(_DWORD *)(a2 + 52), (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EB77BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4;
  v7 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v6, &v7)
    && v7 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v4 = *(_QWORD *)(v7 + 8);
  }
  if (v4)
    return sub_22F344258(*(_QWORD *)a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 16), v4);
  else
    return 1;
}

uint64_t sub_22EB77C3C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unsigned __int8 v40;
  unsigned __int8 v41;

  v4 = sub_22EB75F08(a1);
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a2;
  if ((v5 & 0x600) == 0x200)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    if ((v5 & 0x1000) != 0)
    {
      v11 = (v5 >> 13) & 1;
      v36 = *(_QWORD *)&a2[4 * v11 + 8];
      if (v36)
        v10 = *(_QWORD *)(v36 + 8);
      else
        v10 = 0;
    }
    else
    {
      v10 = 0;
      LODWORD(v11) = (v5 >> 13) & 1;
    }
    sub_22EB7ACEC((uint64_t)&v37, a1, *((_DWORD *)a2 + 1), v10, *(void **)&a2[4 * v11 + 8 + 4 * ((v5 >> 12) & 1)], (v5 & 0x700) == 256);
    if (v39)
      return 1;
    v6 = v37;
    v7 = v38;
    v8 = v40;
    v9 = v41;
    LOWORD(v5) = *a2;
  }
  v12 = (v5 & 0x700) != 0x100 || v8 == 0;
  v13 = v12;
  if (v12 || v9)
  {
    v14 = sub_22EB75F08(a1);
    if ((v14 & 1) != 0)
      return 1;
    if (v9)
      v18 = v13;
    else
      v18 = 1;
    if (v18 != 1)
    {
      v19 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    v14 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&a2[4 * ((*a2 >> 12) & 1) + 12 + 4 * ((*a2 >> 13) & 1)]);
    v16 = v15;
    *(_BYTE *)v14 = 19;
    if (byte_255E04EB3)
    {
      v17 = sub_22F0D3748(19);
      ++*((_DWORD *)v17 + 2);
    }
    *(_WORD *)v14 &= ~0x100u;
    *(_DWORD *)(v14 + 4) = v16;
  }
  v19 = sub_22EB75F08(a1);
  if ((v19 & 1) != 0)
    return 1;
LABEL_27:
  v20 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v21 = *a2;
  if ((v21 & 0x2000) != 0)
    v22 = *((_QWORD *)a2 + 2);
  else
    v22 = 0;
  if (v22 != v20)
    goto LABEL_33;
  if ((v21 & 0x1000) != 0)
  {
    v32 = (v21 >> 13) & 1;
    v31 = *(_QWORD *)&a2[4 * v32 + 8];
    if (v31)
      v31 = *(_QWORD *)(v31 + 8);
  }
  else
  {
    v31 = 0;
    LODWORD(v32) = (v21 >> 13) & 1;
  }
  if (v6 != v31
    || (v33 = a2 + 8, v34 = v32 + ((v21 >> 12) & 1), v7 != *(_QWORD *)&a2[4 * v34 + 8])
    || *(_QWORD *)&v33[4 * (v34 + 1)] != (v14 & 0xFFFFFFFFFFFFFFFELL)
    || ((v21 & 0x800) != 0 ? (v35 = *(_QWORD *)&v33[4 * (v34 + 2)]) : (v35 = 0), v35 != (v19 & 0xFFFFFFFFFFFFFFFELL)))
  {
LABEL_33:
    v24 = (v21 >> 8) & 7;
    v25 = *((_DWORD *)a2 + 1);
    v26 = *((_DWORD *)a2 + 2);
    v27 = *((_DWORD *)a2 + 3);
    if ((v21 & 0x800) != 0)
      v28 = *(_DWORD *)&a2[4 * ((v21 >> 12) & 1) + 20 + 4 * ((v21 >> 13) & 1)];
    else
      v28 = 0;
    v29 = (_BYTE *)(v19 & 0xFFFFFFFFFFFFFFFELL);
    v30 = *(_QWORD *)a1;
    v37 = v6;
    v38 = v7;
    v39 = 0;
    v40 = v8;
    v41 = v9;
    return sub_22ED2D6D0(v30, v25, v24, v26, v20, (uint64_t)&v37, v27, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL), v28, v29);
  }
  return (uint64_t)a2;
}

uint64_t sub_22EB77F54(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL)) & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) != v5)
    return sub_22ED343AC(*a1, *(_DWORD *)(v2 + 4), *(_DWORD *)(v2 + 8), v5);
  return v2;
}

uint64_t sub_22EB77FBC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  char v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  char v18;
  __int128 v19;
  void *v20[2];
  __int128 v21;
  void *v22;
  __int128 v23;
  void *v24;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EB723F0(a1, v4, *(void **)(a2 + 24), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v21 = *(_OWORD *)(a2 + 32);
  v22 = *(void **)(a2 + 48);
  v9 = v21;
  if ((_QWORD)v21)
  {
    sub_22EB7ADEC((__n128 *)&v19, a1, (__n128 *)&v21);
    v21 = v19;
    v22 = v20[0];
    v9 = v19;
    if (!(_QWORD)v19)
      return 1;
  }
  v10 = v7 == *(_QWORD *)(a2 + 16) && v8 == *(_QWORD *)(a2 + 24);
  if (v10 && v9 == *(_QWORD *)(a2 + 32))
    return a2;
  v19 = 0u;
  *(_OWORD *)v20 = 0u;
  sub_22E8ACE30((uint64_t)&v19, v7, v8);
  v11 = 1;
  switch(sub_22F3322F4(*a1, 0, (uint64_t)&v19, (uint64_t *)&v21))
  {
    case 0u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_20;
      goto LABEL_18;
    case 1u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_18;
LABEL_20:
      v11 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
      v14 = *(_DWORD *)(a2 + 8);
      *(_BYTE *)v11 = 19;
      if (byte_255E04EB3)
      {
        v15 = sub_22F0D3748(19);
        ++*((_DWORD *)v15 + 2);
      }
      *(_WORD *)v11 &= ~0x100u;
      *(_DWORD *)(v11 + 4) = v14;
      break;
    case 2u:
      v13 = 0;
      goto LABEL_24;
    case 3u:
      break;
    default:
LABEL_18:
      v13 = 1;
LABEL_24:
      v16 = sub_22EB77464(a1, *(_QWORD *)(a2 + 56));
      if ((v16 & 1) != 0)
        v11 = 1;
      else
        v11 = v16;
      if ((v13 & 1) == 0 && (v16 & 1) == 0)
      {
        v17 = *(_DWORD *)(a2 + 8);
        v18 = *(_BYTE *)(a2 + 12);
        v23 = v21;
        v24 = v22;
        v11 = sub_22F344AB0(*a1, v17, v18, v7, v8, &v23, v16 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
  }
  if (HIDWORD(v20[1]))
    free(v20[0]);
  return v11;
}

uint64_t sub_22EB781D0(int a1)
{
  return sub_22EB75F08(a1);
}

uint64_t sub_22EB781DC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78248(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB782B4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78320(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB7838C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB783FC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78468(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB784D4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78540(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB785AC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78618(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78684(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB786F0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB7875C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB787C8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78834(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB788A0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB7890C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78978(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB789E4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78A50(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78ABC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78B28(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78B94(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78C00(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78C6C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78CD8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78D44(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78DB0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78E1C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78E88(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78EF4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78F60(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB78FCC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79038(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB790A4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79110(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB7917C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB791E8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79254(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB792C0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB7932C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

unsigned int *sub_22EB79398(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[2];
  unsigned int v5[24];

  sub_22E8FCA40(a1, *(_DWORD *)(a2 + 12), 0x108Du, 0, (uint64_t)v5);
  v4[0] = llvm::omp::getOpenMPDirectiveName();
  v4[1] = v2;
  sub_22F2F2210((uint64_t)v5, (uint64_t)v4);
  return sub_22E903BEC(v5);
}

uint64_t sub_22EB793F0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB7945C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB794C8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79534(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB795A0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB7960C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79678(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB796E4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79750(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB797BC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79828(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79894(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79900(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB7996C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB799D8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79A44(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79AB0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79B1C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79B88(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79BF4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79C60(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB7AFF4(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB79CCC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      v6 = *(uint64_t **)((v5 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v6)
        goto LABEL_6;
    }
    else if (v5 >= 8)
    {
      v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
LABEL_6:
      v7 = sub_22EB6DD04(a1, v6);
      if (!v7)
        return 1;
      v8 = (uint64_t)v7;
      v9 = *v7;
      goto LABEL_10;
    }
    v10 = sub_22EB7239C((uint64_t)a1, *(_QWORD *)(v4 + 48));
    if (v10 < 0x10)
      return 1;
    v9 = v10;
    v8 = 0;
LABEL_10:
    v11 = *(_QWORD *)(v4 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v4 = sub_22EB001B8(*a1, v8, v9, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v12, 0);
    if (!v4)
      return 1;
  }
  v13 = sub_22EB75F08((int)a1);
  if ((v13 & 1) == 0)
    return sub_22ED36AF8((uint64_t)*a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v4, v13 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22EB79DB8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB75F08((int)a1);
  if ((v4 & 1) != 0)
    return 1;
  if (*(_QWORD *)(a2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22F344474(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  return a2;
}

uint64_t sub_22EB79E14(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(v2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EB75F08((int)a1);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) != (v5 & 0xFFFFFFFFFFFFFFFELL) || *(_QWORD *)(v2 + 24) != v7)
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(v2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL, v7);
  return v2;
}

uint64_t sub_22EB79EB4(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v5;

  v2 = a2;
  v3 = *(void **)(a2 + 16);
  if (v3)
  {
    v5 = sub_22EB62928((int)a1, v3);
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else if (*(_QWORD *)(v2 + 16) != (v5 & 0xFFFFFFFFFFFFFFFELL))
    {
      return sub_22ED36B94(*a1, *(_DWORD *)(v2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL);
    }
  }
  return v2;
}

uint64_t sub_22EB79F10(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t v21[9];

  v21[8] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 16);
  v5 = sub_22EB75F08((int)a1);
  if ((v5 & 1) != 0)
    return 1;
  v20 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12);
  v7 = v6 | (*(unsigned __int8 *)(a2 + 14) << 16);
  v8 = (unsigned __int16)v6;
  if (!(_WORD)v6)
  {
    v9 = 0;
    if ((v7 & 0x10000) != 0)
    {
LABEL_14:
      if (v4[(unsigned __int16)v7 + 1])
      {
        v16 = sub_22EB75F08((int)a1);
        if ((v16 & 1) != 0)
          return 1;
        goto LABEL_18;
      }
    }
LABEL_17:
    v16 = 0;
LABEL_18:
    v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
    if ((*v4 != (v5 & 0xFFFFFFFFFFFFFFFELL)) | v9 & 1)
      return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL, v21, v20, v17);
    v18 = ((*(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16)) & 0x10000) != 0
        ? v4[*(unsigned __int16 *)(a2 + 12) + 1]
        : 0;
    if (v18 != v17)
      return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL, v21, v20, v17);
    else
      return a2;
  }
  v9 = 0;
  v10 = (_QWORD *)(a2 + 24);
  v11 = 1;
  while (1)
  {
    v12 = sub_22EB75F08((int)a1);
    if ((v12 & 1) != 0)
      return v11;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v14 = *v10 != (v12 & 0xFFFFFFFFFFFFFFFELL);
    v15 = v20;
    if (v20 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v20;
    }
    v21[v15] = v13;
    v9 |= v14;
    ++v20;
    ++v10;
    if (!--v8)
    {
      v7 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v7 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
  }
}

uint64_t sub_22EB7A124(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB75F08((int)a1);
  if ((v4 & 1) != 0)
    return 1;
  if (*(_QWORD *)(a2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22F344820(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  return a2;
}

unint64_t sub_22EB7A180(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = 1;
  v5 = sub_22EB75F08((int)a1);
  if ((v5 & 1) == 0)
  {
    v6 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
    if ((v6 & 1) != 0)
      return 1;
    v7 = sub_22EB75F08((int)a1);
    v8 = v7;
    if ((v7 & 1) != 0)
      return 1;
    v9 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(_QWORD *)(a2 + 8) == (v5 & 0xFFFFFFFFFFFFFFFELL)
      && *(_QWORD *)(a2 + 16) == v9
      && *(_QWORD *)(a2 + 24) == (v7 & 0xFFFFFFFFFFFFFFFELL))
    {
      return a2;
    }
    v10 = sub_22ED3169C(*a1, *(_DWORD *)(a2 + 32), v5 & 0xFFFFFFFFFFFFFFFELL, v9, *(_DWORD *)(a2 + 36));
    if ((v10 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = 1;
      if ((v8 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 24) = v8 & 0xFFFFFFFFFFFFFFFELL;
        return v10 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v4;
}

uint64_t sub_22EB7A264(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB759A0(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22EB7A2B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB77464(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8((_QWORD *)*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB7A320(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB77464(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB7A368(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EB77464(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_BYTE **)(v2 + 24);
  if (*v5 == 95)
  {
    v6 = sub_22EB7A320(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22EB7A2B4(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22ED3765C(*a1, *(_BYTE *)(v2 + 8), *(_DWORD *)(v2 + 12), v4 & 0xFFFFFFFFFFFFFFFELL, v8);
}

unint64_t sub_22EB7A408(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  int v21[3];
  int v22;
  uint64_t v23;
  int v24;

  v4 = *a1;
  v24 = 4;
  v23 = 0;
  v22 = 3;
  *(_QWORD *)v21 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v24, v21, (__int16 *)(v4 + 1693), &v23, &v22);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EB62928((int)a1, *((void **)a2 + 3));
  v12 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v11);
  if ((v12 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v13 = *a2;
    if ((v13 & 0x100) != 0)
      v14 = *(void **)&a2[4 * ((v13 >> 8) & 1) + 12];
    else
      v14 = 0;
    v15 = sub_22EB62928((int)a1, v14);
    v16 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v15);
    sub_22EB48E64(v4);
    if ((v16 & 1) == 0)
    {
      v17 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v18 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v12 & 0xFFFFFFFFFFFFFFFELL, v17, v16 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v18 & 1) == 0)
      {
        v19 = sub_22EB75F08((int)a1);
        if ((v19 & 1) == 0)
        {
          result = v18 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFFELL)
                    + 8 * (((unint64_t)*(unsigned __int16 *)(v18 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 1)
                    + 32) = v19 & 0xFFFFFFFFFFFFFFFELL;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22EB7A618(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB75F08((int)a1);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB7A668(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v4 = sub_22EB75F08((int)a1);
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a2;
  if ((v5 & 0x200) != 0)
  {
    v7 = (v5 >> 8) & 1;
    v10 = *(_QWORD *)&a2[4 * v7 + 12];
    v6 = v10 ? *(_QWORD *)(v10 + 8) : 0;
  }
  else
  {
    v6 = 0;
    LODWORD(v7) = (v5 >> 8) & 1;
  }
  sub_22EB7ACEC((uint64_t)&v11, (uint64_t)a1, *((_DWORD *)a2 + 1), v6, *(void **)&a2[4 * v7 + 12 + 4 * ((v5 >> 9) & 1)], 2);
  if ((_BYTE)v12)
    return 1;
  v8 = *((_DWORD *)a2 + 1);
  v13 = v11;
  v14 = v12;
  if ((sub_22ED2E0D4(*a1, v8, *((_DWORD *)a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v13, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22EB75F08((int)a1) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22EB7A790(uint64_t *a1, unsigned int *a2)
{
  unsigned int *v2;
  unint64_t v4;
  char **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  unsigned int v11;
  char *v12[2];

  v2 = a2;
  v12[1] = *(char **)MEMORY[0x24BDAC8D0];
  v11 = 0;
  v5 = (char **)(a2 + 4);
  v4 = *a2;
  if (v4 >= 0x100)
  {
    v7 = 0;
    v8 = 8 * (v4 >> 8);
    do
    {
      v9 = *v5;
      if (*v5)
      {
        if (v7)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v7 = v11;
        }
        v12[v7] = v9;
        v7 = ++v11;
      }
      ++v5;
      v8 -= 8;
    }
    while (v8);
  }
  v6 = sub_22EB75F08((int)a1);
  if ((v6 & 1) != 0)
    return 1;
  if (*((_QWORD *)v2 + 1) != (v6 & 0xFFFFFFFFFFFFFFFELL))
  {
    if (v11)
      return (uint64_t)sub_22ED2C6AC(*a1, v2[1], v12, v11, v6 & 0xFFFFFFFFFFFFFFFELL);
    return v6;
  }
  return (uint64_t)v2;
}

uint64_t sub_22EB7A8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_22EB75F08(a1);
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5;
  v8 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v7, &v8)
    && v8 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v5 = *(_QWORD *)(v8 + 8);
  }
  if (!v5)
    return 1;
  if (v5 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v5 + 48) = 0;
  return sub_22F343D54(*(_QWORD **)a1, *(_DWORD *)(a2 + 4), v5, 0, v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB7A994(uint64_t *a1, unsigned __int16 *a2)
{
  _DWORD *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = a2;
  v4 = *a2;
  if ((v4 & 0x100) != 0 && (v15 = *((_QWORD *)a2 + 2)) != 0)
    v5 = *(_QWORD *)(v15 + 8);
  else
    v5 = 0;
  v6 = (uint64_t *)(a2 + 8);
  sub_22EB7ACEC((uint64_t)&v16, (uint64_t)a1, *((_DWORD *)a2 + 1), v5, *(void **)&a2[4 * ((v4 >> 8) & 1) + 8], 0);
  if ((_BYTE)v17)
    return 1;
  v7 = sub_22EB75F08((int)a1);
  if ((v7 & 1) != 0)
    return 1;
  v8 = *(unsigned __int16 *)v2;
  if ((v8 & 0x100) != 0)
  {
    v9 = *v6;
    if (*v6)
      v9 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (_BYTE *)(v7 & 0xFFFFFFFFFFFFFFFELL);
  if ((_QWORD)v16 != v9
    || (v11 = (v8 >> 8) & 1, *((_QWORD *)&v16 + 1) != v6[v11])
    || (_BYTE *)v6[(v11 + 1)] != v10)
  {
    v12 = v2[1];
    v13 = v2[2];
    v18 = v16;
    v19 = v17;
    return sub_22F343FAC(*a1, v12, v13, (uint64_t)&v18, v2[3], v10);
  }
  return (uint64_t)v2;
}

uint64_t sub_22EB7AAAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  char v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v20;
  unsigned int v21;
  _BYTE *v22[9];

  v22[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v4 = *a1;
  sub_22E905168(*a1, 0);
  v5 = (_BYTE **)(a2 + 16);
  v6 = *(unsigned int *)a2;
  v7 = a2 + 16 + 8 * (v6 >> 8);
  v8 = 8 * (v6 >> 8);
  while (v8)
  {
    v9 = *(_BYTE **)(a2 + 8 + v8);
    v8 -= 8;
    if (*v9 != 19)
    {
      v21 = 0;
      if (v6 < 0x100)
        goto LABEL_25;
      goto LABEL_8;
    }
  }
  if (v6 <= 0xFF)
    goto LABEL_25;
  v21 = 0;
LABEL_8:
  v20 = a2;
  LOBYTE(a2) = 0;
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = *v5;
      v12 = sub_22EB75F08((int)a1);
      if ((v12 & 1) == 0)
        break;
      ++v5;
      a2 = 1;
      if (*v11 == 12 || v5 == (_BYTE **)v7)
        goto LABEL_25;
    }
    v13 = (_BYTE *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    v14 = v11 != (_BYTE *)(v12 & 0xFFFFFFFFFFFFFFFELL);
    v15 = v21;
    if (v21 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v15 = v21;
    }
    v22[v15] = v13;
    v10 |= v14;
    v16 = ++v21;
    ++v5;
  }
  while (v5 != (_BYTE **)v7);
  if ((a2 & 1) != 0)
  {
    a2 = 1;
  }
  else if ((v10 & 1) != 0)
  {
    a2 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, *(_DWORD *)(v20 + 4), *(unsigned int *)(v20 + 8), v22, v16);
  }
  else
  {
    a2 = v20;
  }
LABEL_25:
  v18 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * *(unsigned int *)(v4 + 1904) - 8);
  --*(_QWORD *)(v18 + 360);
  return a2;
}

uint64_t sub_22EB7ACEC(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, void *a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if (a4)
  {
    v10 = a4;
    v11 = a4;
    v12 = 0;
    result = sub_22E793870((uint64_t *)(a2 + 8), &v11, &v12);
    if (!(_DWORD)result)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    if (v12 == *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    v10 = *(_QWORD *)(v12 + 8);
    if (v10)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
  }
  else
  {
    if (!a5)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 15) = 0;
      return result;
    }
    result = sub_22EB62928(a2, a5);
    if ((result & 1) == 0)
      return sub_22EB530EC(*(_QWORD *)a2, a3, result & 0xFFFFFFFFFFFFFFFELL, a6, 1, v9);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 18) = 0;
  return result;
}

__n128 sub_22EB7ADEC(__n128 *a1, uint64_t *a2, __n128 *a3)
{
  unint64_t v4;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  __n128 result;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v4 = a3->n128_u64[0];
  if (!a3->n128_u64[0])
    goto LABEL_26;
  v7 = v4 & 7;
  v8 = v4 & 7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      LOBYTE(v9) = 3;
    v8 = v9 | 8;
  }
  v10 = 1 << v8;
  if ((v10 & 0xE47) != 0)
  {
    result = *a3;
    *a1 = *a3;
    a1[1].n128_u64[0] = a3[1].n128_u64[0];
    return result;
  }
  if ((v10 & 0x38) == 0)
  {
    if ((~(_BYTE)v4 & 7) != 0)
      goto LABEL_18;
    v18 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 3)
      v18 = 3;
    if (v18)
LABEL_18:
      v19 = 0;
    else
      v19 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    v23 = v19;
    v24 = 0;
    if (sub_22E793870(a2 + 1, &v23, &v24) && v24 != (_QWORD *)(a2[1] + 16 * *((unsigned int *)a2 + 6)))
      v19 = v24[1];
    if (v19)
    {
      *a1 = *a3;
      a1[1].n128_u64[0] = a3[1].n128_u64[0];
      a1->n128_u64[0] = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*a2 + 88) + 15224), v19);
      return result;
    }
    goto LABEL_26;
  }
  if ((v7 - 3) > 2)
  {
    v17 = 0;
    goto LABEL_25;
  }
  v12 = (uint64_t *)a3[1].n128_u64[0];
  if (!v12)
  {
    v17 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_25:
    v20 = sub_22EB7239C((uint64_t)a2, v17);
    if (v20 > 0xF)
    {
      v15 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7;
      v16 = *(_QWORD *)(*a2 + 88);
      if (v7 == 7)
      {
        v14 = 0;
        v21 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v21 >= 3)
          v21 = 3;
        v7 = v21 | 8;
      }
      else
      {
        v14 = 0;
      }
      goto LABEL_32;
    }
LABEL_26:
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    return result;
  }
  v13 = sub_22EB6DD04((_QWORD **)a2, v12);
  if (!v13)
    goto LABEL_26;
  v14 = v13;
  v15 = *v13 & 7 | *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  v16 = *(_QWORD *)(*a2 + 88);
LABEL_32:
  v22 = sub_22EFC6D44((_QWORD *)(v16 + 15224), v7, v15);
  result = *a3;
  *a1 = *a3;
  a1->n128_u64[0] = v22;
  a1[1].n128_u64[0] = (unint64_t)v14;
  return result;
}

uint64_t sub_22EB7AFF4(uint64_t *a1, __n128 *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __n128 **v6;
  unsigned int v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  unsigned __int32 v11;
  unsigned __int32 *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int32 v22;
  uint64_t v23;
  uint64_t i;
  __n128 v26;
  unint64_t v27;
  __n128 v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[18];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = 0x1000000000;
  v4 = (_DWORD *)a2[1].n128_u64[1];
  if (!v4)
  {
    v5 = 0;
    goto LABEL_85;
  }
  v7 = *v4;
  v6 = (__n128 **)(v4 + 4);
  v5 = v7;
  if (v7 < 0x11)
  {
    if (!(_DWORD)v5)
      goto LABEL_78;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 8 * v5;
  do
  {
    v9 = *v6;
    if (*v6)
    {
      v10 = (_QWORD *)*a1;
      v11 = v9->n128_u32[2];
      v12 = (unsigned __int32 *)(*(_QWORD *)(*a1 + 12288) + 21440);
      *v12 = v11;
      switch(v11)
      {
        case 3u:
          v13 = sub_22EB7B740(a1, v9);
          goto LABEL_72;
        case 4u:
          v13 = sub_22EB7B8C4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 5u:
          v13 = (uint64_t)sub_22EB7B910(a1, (unsigned int *)v9);
          goto LABEL_72;
        case 6u:
          v13 = sub_22EB7BA88((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 7u:
          v13 = sub_22EB7BC0C((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0xAu:
          v13 = (uint64_t)sub_22EB7BC58(v10, (int *)v9);
          goto LABEL_72;
        case 0xCu:
          v13 = sub_22EB7BC6C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0xEu:
          v13 = (uint64_t)sub_22EB7BCB8((_QWORD **)a1, (int *)v9);
          goto LABEL_72;
        case 0xFu:
          v13 = (uint64_t)sub_22EB7BE04((_QWORD **)a1, (int *)v9);
          goto LABEL_72;
        case 0x10u:
          sub_22EB7BF50((uint64_t)v10, (uint64_t)v9);
          goto LABEL_72;
        case 0x11u:
          v13 = (uint64_t)sub_22EB7BF64(v10, (uint64_t)v9);
          goto LABEL_72;
        case 0x12u:
          v13 = (uint64_t)sub_22EB7BF7C(a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x13u:
          v13 = sub_22EB7C110((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x14u:
          v13 = sub_22EB7C15C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x15u:
          v13 = sub_22EB7C1B4(a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x16u:
          v13 = sub_22EB7C20C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x18u:
          v13 = sub_22EB7C25C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x1Au:
          v13 = (uint64_t)sub_22EB7C2AC((_QWORD **)a1, (int *)v9);
          goto LABEL_72;
        case 0x1Bu:
          v13 = sub_22EB7C3F8((uint64_t)a1, (uint64_t *)v9);
          goto LABEL_72;
        case 0x1Cu:
          v13 = sub_22EB7C47C(a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x1Du:
          v13 = sub_22EB7C4C8((int)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x1Eu:
          v13 = (uint64_t)sub_22EB7C614((uint64_t)a1, (int *)v9);
          goto LABEL_72;
        case 0x1Fu:
          v13 = (uint64_t)sub_22EB7C768(a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x21u:
          v13 = sub_22EB7CBE4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x22u:
          v13 = (uint64_t)sub_22EB7CC30((_QWORD **)a1, v9);
          goto LABEL_72;
        case 0x23u:
          v13 = sub_22EB7CD88((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x24u:
          v13 = sub_22EB7CDD4(a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x25u:
          v13 = sub_22EB7CE28(a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x27u:
          v13 = (uint64_t)sub_22EB7D264((_QWORD **)a1, (int *)v9);
          goto LABEL_72;
        case 0x29u:
          v13 = sub_22EB7D3B0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x2Au:
          v13 = (uint64_t)sub_22EB7D544((_QWORD **)a1, v9);
          goto LABEL_72;
        case 0x2Bu:
          v13 = sub_22EB7D69C((_QWORD **)a1, v9);
          goto LABEL_72;
        case 0x2Cu:
          v13 = sub_22EB7D7F4((_QWORD **)a1, (int *)v9);
          goto LABEL_72;
        case 0x2Eu:
          v13 = (uint64_t)sub_22EB7D984(a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x34u:
          v13 = sub_22EB7DE5C(a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x35u:
          v13 = (uint64_t)sub_22EB7DEA8((_QWORD **)a1, (int *)v9);
          goto LABEL_72;
        case 0x37u:
          v13 = sub_22EB7DFF4(a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x38u:
          v13 = sub_22EB7E040((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x39u:
          v13 = sub_22EB7E08C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x3Au:
          v13 = sub_22EB7E0D8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x3Bu:
          v13 = (uint64_t)sub_22EB7E124(v10, (int *)v9);
          goto LABEL_72;
        case 0x3Cu:
          v13 = sub_22EB7E138((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x3Du:
          v13 = sub_22EB7E190((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x3Eu:
          v13 = sub_22EB7E1EC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x3Fu:
          v13 = (uint64_t)sub_22EB7E238((_QWORD **)a1, (int *)v9);
          goto LABEL_72;
        case 0x40u:
          v13 = (uint64_t)sub_22EB7E384(v10, (int *)v9);
          goto LABEL_72;
        case 0x42u:
          v13 = sub_22EB7E398(a1, v9);
          goto LABEL_72;
        case 0x46u:
          v13 = sub_22EB7E7DC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x47u:
          v13 = sub_22EB7E828((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x49u:
          v13 = (uint64_t)sub_22EB7E88C((_QWORD **)a1, (int *)v9);
          goto LABEL_72;
        case 0x4Bu:
          v13 = sub_22EB7E9D8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x4Cu:
          v13 = (uint64_t)sub_22EB7EA24((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x4Du:
          v13 = sub_22EB7EBA4(a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x4Eu:
          v13 = sub_22EB7EFE0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x51u:
          v13 = (uint64_t)sub_22EB7F02C(a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x58u:
          v13 = sub_22EB7F4A8((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_72;
        case 0x59u:
          v13 = (uint64_t)sub_22EB7F4F4((_QWORD **)a1, v9);
          goto LABEL_72;
        case 0x5Au:
          v13 = (uint64_t)sub_22EB7F64C((_QWORD **)a1, v9);
          goto LABEL_72;
        case 0x5Bu:
          v13 = (uint64_t)sub_22EB7F7A4(a1, (int *)v9);
LABEL_72:
          v9 = (__n128 *)v13;
          v15 = (_QWORD *)*a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v15);
          if (v9)
            goto LABEL_73;
          goto LABEL_77;
        default:
          *v12 = 85;
          sub_22EB4E2D8(v10);
LABEL_73:
          v16 = v31;
          if (v31 >= (unint64_t)HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v31;
          }
          *((_QWORD *)v30 + v16) = v9;
          break;
      }
    }
    else
    {
      v14 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v31;
      }
      *((_QWORD *)v30 + v14) = 0;
    }
    LODWORD(v31) = v31 + 1;
LABEL_77:
    ++v6;
    v8 -= 8;
  }
  while (v8);
LABEL_78:
  v17 = (unsigned int *)a2[1].n128_u64[1];
  if (v17 && *((_BYTE *)v17 + 8) && *(_QWORD *)&v17[2 * *v17 + 4 + 2 * v17[1]])
  {
    sub_22EC84DA0(*a1, a2->n128_i32[2]);
    v18 = *a1;
    sub_22E905168(*a1, 0);
    v19 = a2->n128_u32[2];
    if (v19 > 0x34 || ((1 << v19) & 0x10000800000204) == 0)
    {
      for (i = *(_QWORD *)(a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                          + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
        ;
    }
    v20 = sub_22EB75F08((int)a1);
    if (v20 >= 2
      && sub_22F4219DC(a2->n128_u32[2])
      && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
    {
      v20 = sub_22EC86C20(*a1, (unsigned __int8 *)(v20 & 0xFFFFFFFFFFFFFFFELL));
    }
    v21 = *(_QWORD *)(*(_QWORD *)(v18 + 1896) + 8 * *(unsigned int *)(v18 + 1904) - 8);
    --*(_QWORD *)(v21 + 360);
    if ((sub_22EC8617C((_QWORD *)*a1, v20, (uint64_t *)v30, v31) & 1) != 0)
      goto LABEL_89;
  }
LABEL_85:
  if (v5 != v31)
  {
LABEL_89:
    v23 = 1;
    goto LABEL_90;
  }
  v28.n128_u64[0] = 0;
  v28.n128_u32[2] = 0;
  v29 = 0;
  v22 = a2->n128_u32[2];
  if (v22 == 9)
  {
    v28 = a2[2];
    v29 = a2[3].n128_u64[0];
    sub_22EB7ADEC(&v26, a1, &v28);
    v28 = v26;
    v29 = v27;
  }
  v23 = sub_22EC87DEC();
LABEL_90:
  if (v30 != v32)
    free(v30);
  return v23;
}

uint64_t sub_22EB7B740(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = (void **)(a2 + 6);
  v6 = *(void **)&a2[2 * v4 + 6];
  if (!v6)
  {
    v9 = 0;
    v8 = v4;
    if (!v4)
      return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
LABEL_8:
    v10 = 8 * v8;
    do
    {
      v11 = sub_22EB62928((int)a1, *v5);
      if ((v11 & 1) == 0)
      {
        v12 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        v16[v12] = v11 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v10 -= 8;
    }
    while (v10);
    return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
  }
  v7 = sub_22EB62928((int)a1, v6);
  if ((v7 & 1) != 0)
    return 0;
  v8 = a2[4];
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (a2[4])
    goto LABEL_8;
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
}

uint64_t sub_22EB7B8C4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EB7B910(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (void **)(a2 + 6);
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EB62928((int)a1, *(void **)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22EB7BA88(uint64_t **a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(void **)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EB62928((int)a1, v4);
    if ((v5 & 1) != 0)
      return 0;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v15 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 16);
  }
  if (v7)
  {
    v8 = (void **)(a2 + 40);
    v9 = 8 * v7;
    while (1)
    {
      v10 = sub_22EB62928((int)a1, *v8);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v12 = ++v15;
      ++v8;
      v9 -= 8;
      if (!v9)
        return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v12 = 0;
    return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

uint64_t sub_22EB7BC0C(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EB7BC58(_QWORD *a1, int *a2)
{
  return sub_22ECA0F50(a1, a2[4], a2[5], *a2, a2[3], a2[1]);
}

uint64_t sub_22EB7BC6C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EB7BCB8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 6);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22EB7BE04(_QWORD **a1, int *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 6);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

void sub_22EB7BF50(uint64_t a1, uint64_t a2)
{
  sub_22ECA0930(a1, *(_DWORD *)(a2 + 16));
}

_DWORD *sub_22EB7BF64(_QWORD *a1, uint64_t a2)
{
  return sub_22ECA1BE0(a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 24), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned __int8 *sub_22EB7BF7C(uint64_t *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (void **)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(void **)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v7 = sub_22EB62928((int)a1, v6);
    if ((v7 & 1) != 0)
      return 0;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = sub_22EB62928((int)a1, *v4);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v15;
      ++v4;
      v9 -= 8;
      if (!v9)
        return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v12 = 0;
  return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB7C110(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB7C15C(_QWORD **a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EB62928((int)a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB7C1B4(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EB62928((int)a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB7C20C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB7C25C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EB7C2AC(_QWORD **a1, int *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 6);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EB7C3F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_22EB62928(a1, (void *)a2[4]);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *((_DWORD *)a2 + 7);
  v7 = *a2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
  *(_QWORD *)result = v7;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t sub_22EB7C47C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB7C4C8(int a1, uint64_t a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (void **)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22EB62928(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22EB7C614(uint64_t a1, int *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 6);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928(a1, *v5);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  v9 = 0;
LABEL_11:
  if (!v9)
    return 0;
  return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
}

_DWORD *sub_22EB7C768(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (void **)(a2 + 104);
    do
    {
      v9 = sub_22EB62928((int)a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EB723F0(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EB7ADEC(&v51, a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7F24((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EB7CBE4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EB7CC30(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 20);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EB7CD88(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB7CDD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB7CE28(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _DWORD **v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __int128 v35;
  size_t __n[2];
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42[2];
  _QWORD v43[16];
  unsigned __int8 **v44;
  uint64_t v45;
  _QWORD v46[18];

  v2 = a2;
  v46[16] = *MEMORY[0x24BDAC8D0];
  v44 = (unsigned __int8 **)v46;
  v45 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (void **)(v2 + 96);
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v45;
      }
      v44[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v45) = v45 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v35 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v35, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v33 = *(__n128 *)(v2 + 72);
    v34 = *(_QWORD *)(v2 + 88);
    if (!v33.n128_u64[0] || (sub_22EB7ADEC((__n128 *)v42, a1, &v33), v33 = *(__n128 *)v42, v34 = v43[0], v42[0]))
    {
      v42[0] = v43;
      v42[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v32 = v2;
        v14 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v15 = &v14[v11];
        do
        {
          v16 = *v14;
          if (*v14)
          {
            v39 = v41;
            v40 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                v37 = v24;
                v38 = 0;
                if (sub_22E793870(a1 + 1, &v37, &v38) && v38 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v24 = *(_QWORD *)(v38 + 8);
                v25 = *(unsigned int *)(v24 + 28);
                v22 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v40;
                }
                *((_QWORD *)v39 + v22) = (v25 >> 13) & 3 | v24;
                LODWORD(v22) = v40 + 1;
                LODWORD(v40) = v40 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v35 + 1);
                LODWORD(v22) = v40;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v33, 1, (*v16 >> 20) & 1, v39, (uint64_t)v39 + 8 * v22);
            v31 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v31) = v30;
            ++LODWORD(v42[1]);
            if (v39 != v41)
              free(v39);
          }
          else
          {
            v29 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v29) = 0;
            ++LODWORD(v42[1]);
          }
          ++v14;
        }
        while (v14 != v15);
        v13 = (unsigned __int8 **)v42[0];
        v12 = LODWORD(v42[1]);
        v2 = v32;
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int8 **)v43;
      }
      v9 = sub_22F33F420(*a1, v44, v45, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v35, (uint64_t)&v33, v13, v12);
      if (v42[0] != v43)
        free(v42[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v44 != v46)
    free(v44);
  return v9;
}

_DWORD *sub_22EB7D264(_QWORD **a1, int *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 6);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EB7D3B0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (void **)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22EB62928((int)a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22EB7D544(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 20);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EB7D69C(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 16);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EB7D7F4(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (void **)(a2 + 16);
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EB62928((int)a1, *(void **)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22EB7D984(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  int v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  size_t __n[2];
  int v48[3];
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[128];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  __int128 v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v48[0] = *(_DWORD *)a2;
  v48[1] = v6;
  v48[2] = v4;
  v54 = v56;
  v55 = 0x1000000000;
  v46 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v44 = 0;
  DWORD2(v44) = 0;
  v51 = v53;
  v52 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (void **)(a2 + 136);
    do
    {
      v9 = sub_22EB62928((int)a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v55;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v55;
      }
      *((_QWORD *)v54 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v55) = v55 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EB723F0(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_49;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v46, v14, v15);
  v44 = *(_OWORD *)(a2 + 56);
  v45 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v44)
  {
    sub_22EB7ADEC((__n128 *)&v57, a1, (__n128 *)&v44);
    v44 = v57;
    v45 = v58[0];
    if (!(_QWORD)v57)
      goto LABEL_46;
  }
  v38 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 136 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v57 = v58;
        *((_QWORD *)&v57 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v49 = v27;
            v50 = 0;
            if (sub_22E793870(a1 + 1, &v49, &v50)
              && v50 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v50[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v57);
            if (DWORD2(v57) >= (unint64_t)HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v57);
            }
            *(_QWORD *)(v57 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v57);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v46 + 1);
        if (*((_QWORD *)&v46 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v46 + 1);
            LODWORD(v25) = DWORD2(v57);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v44, 1, (*v19 >> 20) & 1, (const void *)v57, v57 + 8 * v25);
        v34 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v52;
        }
        *((_QWORD *)v51 + v34) = v33;
        LODWORD(v52) = v52 + 1;
        if ((_QWORD *)v57 != v58)
          free((void *)v57);
      }
      else
      {
        v32 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v52;
        }
        *((_QWORD *)v51 + v32) = 0;
        LODWORD(v52) = v52 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v41 = v46;
  sub_22F0AB560(v42, (uint64_t)&v46 + 8);
  v39 = v44;
  v40 = v45;
  v35 = sub_22EC94100((_QWORD *)*a1, v38 + 80, 5u, v38 + 100, 5, (uint64_t)&v41, &v39, *(_DWORD *)(v38 + 120), *(_BYTE *)(v38 + 124), v37, *(_DWORD *)(v38 + 128), *(unsigned int *)(v38 + 132), (uint64_t)v54, v55, v48, 0, (unsigned __int8 **)v51, v52);
  if (v43)
    free(v42[1]);
LABEL_49:
  if (v51 != v53)
    free(v51);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v54 != v56)
    free(v54);
  return v35;
}

uint64_t sub_22EB7DE5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EB7DEA8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 6);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EB7DFF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB7E040(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB7E08C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB7E0D8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EB7E124(_QWORD *a1, int *a2)
{
  return sub_22ECA0CE8(a1, a2[4], a2[5], *a2, a2[3], a2[1]);
}

uint64_t sub_22EB7E138(_QWORD **a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EB62928((int)a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EB7E190(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = a2;
  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  if (*(_QWORD *)(v2 + 16) != (v4 & 0xFFFFFFFFFFFFFFFELL))
    return sub_22F33E49C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 4));
  return v2;
}

uint64_t sub_22EB7E1EC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EB7E238(_QWORD **a1, int *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 6);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22EB7E384(_QWORD *a1, int *a2)
{
  return sub_22ECA0A68(a1, a2[4], a2[5], *a2, a2[3], a2[1]);
}

uint64_t sub_22EB7E398(uint64_t *a1, __n128 *a2)
{
  __n128 *v2;
  unsigned int v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = a2[1].n128_u32[0];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[1].n128_u32[0];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (void **)&v2[6].n128_u64[1];
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v28 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, v2[4].n128_u64[0], v2[4].n128_i64[1]);
    v31 = v2[5];
    v32 = v2[6].n128_u64[0];
    if (v31.n128_u64[0] && (sub_22EB7ADEC((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], !v40[0]))
    {
      v28 = 0;
    }
    else
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v9 = v2[1].n128_u32[0];
      if ((_DWORD)v9)
      {
        v30 = v2;
        v10 = &v2[6].n128_u64[v9 + 1 + v9 + v9 + v9];
        v11 = &v10[v9];
        do
        {
          v12 = (_DWORD *)*v10;
          if (*v10)
          {
            v37 = v39;
            v38 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v20;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v20 = *(_QWORD *)(v36 + 8);
                v21 = *(unsigned int *)(v20 + 28);
                v18 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v38;
                }
                *((_QWORD *)v37 + v18) = (v21 >> 13) & 3 | v20;
                LODWORD(v18) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v22 = *(_QWORD *)(*a1 + 88);
            v23 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v24 = (void *)sub_22E3CD3D4(v22 + 2032, LODWORD(__n[1]), 3);
                memcpy(v24, (const void *)__n[0], LODWORD(__n[1]));
                v23 = *((_QWORD *)&v33 + 1);
                LODWORD(v18) = v38;
              }
              else
              {
                v24 = (void *)__n[0];
              }
            }
            else
            {
              v24 = 0;
            }
            v26 = sub_22F0605AC(v22, 0, v23, (uint64_t)v24, (uint64_t)&v31, 1, (*v12 >> 20) & 1, v37, (uint64_t)v37 + 8 * v18);
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = v26;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v25 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v25) = 0;
            ++LODWORD(v40[1]);
          }
          ++v10;
        }
        while (v10 != v11);
        v2 = v30;
      }
      v28 = sub_22ECA41D4((_QWORD *)*a1, (uint64_t)v42, v43, v2[3].n128_i32[0], v2->n128_u32[0], v2->n128_i32[3], v2[3].n128_i32[1], v2[3].n128_i32[2], v2->n128_i32[1], (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v28;
}

uint64_t sub_22EB7E7DC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB7E828(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EB7E88C(_QWORD **a1, int *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 6);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EB7E9D8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

int *sub_22EB7EA24(_QWORD **a1, uint64_t a2)
{
  int *v2;
  unsigned int v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v15;
  _DWORD *v16[5];

  v2 = (int *)a2;
  v16[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 8 * v4;
    do
    {
      v8 = *(_QWORD *)&v2[v5 / 4 + 6];
      if (v8)
      {
        v9 = sub_22EB62928((int)a1, *(void **)&v2[v5 / 4 + 6]);
        if ((v9 & 1) != 0)
          return 0;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        v6 |= v8 != (v9 & 0xFFFFFFFFFFFFFFFELL);
        v11 = v15;
        v12 = (_DWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v10 = 0;
        v12 = 0;
        v11 = v15;
      }
      if (v11 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
        v12 = (_DWORD *)v10;
      }
      v16[v11] = v12;
      v13 = ++v15;
      v5 += 8;
    }
    while (v7 != v5);
    if ((v6 & 1) != 0)
      return sub_22ECA137C(*a1, v16, v13, *v2, v2[3], v2[1]);
  }
  return v2;
}

uint64_t sub_22EB7EBA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (void **)(v2 + 96);
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v31 = *(__n128 *)(v2 + 72);
    v32 = *(_QWORD *)(v2 + 88);
    if (!v31.n128_u64[0] || (sub_22EB7ADEC((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], v40[0]))
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v30 = v2;
        v12 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v37 = v39;
            v38 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v22;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v22 = *(_QWORD *)(v36 + 8);
                v23 = *(unsigned int *)(v22 + 28);
                v20 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v38;
                }
                *((_QWORD *)v37 + v20) = (v23 >> 13) & 3 | v22;
                LODWORD(v20) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = *(_QWORD *)(*a1 + 88);
            v25 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v33 + 1);
                LODWORD(v20) = v38;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v31, 1, (*v14 >> 20) & 1, v37, (uint64_t)v37 + 8 * v20);
            v29 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v29) = v28;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = 0;
            ++LODWORD(v40[1]);
          }
          ++v12;
        }
        while (v12 != v13);
        v2 = v30;
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v42, v43, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v9;
}

uint64_t sub_22EB7EFE0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EB7F02C(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (void **)(a2 + 104);
    do
    {
      v9 = sub_22EB62928((int)a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EB723F0(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EB7ADEC(&v51, a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7CAC((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EB7F4A8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB62928((int)a1, *(void **)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EB7F4F4(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 20);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EB7F64C(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = (void **)(a2 + 20);
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB62928((int)a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EB7F7A4(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22EB62928((int)a1, *(void **)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22EB62928((int)a1, (void *)v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

unint64_t *sub_22EB7F910(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned __int32 v18;
  _QWORD *v19;
  int64x2_t v20;
  _QWORD v21[6];

  v2 = (unint64_t *)a2;
  v21[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22EB6DD04((_QWORD **)a1, a2);
  v5 = (uint64_t)(a2 + 1);
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_16;
    }
    if (v7 == 24)
      goto LABEL_15;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_15:
  v4 = i;
LABEL_16:
  sub_22F115668(v4);
  v9 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = v21;
    v20 = vdupq_n_s64(0x20uLL);
    v21[4] = 0;
    v10 = sub_22F11598C(v9);
    if (v20.i64[0] < (unint64_t)v10)
      sub_22EEB52C0((uint64_t *)&v19, v10);
    v11 = v9 & 0xF;
    if ((v9 & 0xF) != 0)
      v12 = v9;
    else
      v12 = 0;
    if ((v9 & 0xF) != 0)
    {
      v9 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if ((v9 & 0xFFFFFFFFFFFFFFF0) != 0)
        v13 = *(_QWORD *)((char *)&unk_22F481D78
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v13 = 1;
      v5 = (v5 + v13 - 1) & -v13;
    }
    v14 = sub_22EB741D8(a1, (uint64_t)&v19, v9, v5, 1);
    if (v14 < 0x10 || (v15 = v14, v11) && (v15 = sub_22E8C1750((_QWORD **)a1, v14, v12), v15 < 0x10))
    {
      v2 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(*a1 + 88);
      v17 = v20.i64[0] - v20.i64[1];
      v18 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v18 = sub_22F11598C(v15);
      v2 = (unint64_t *)sub_22E3CD3D4(v16 + 2032, v18 + 8, 3);
      *v2 = v15;
      memcpy(v2 + 1, (char *)v19 + v20.i64[1], v17);
    }
    if (v19 != v21)
    {
      if (v19)
        MEMORY[0x2348A0E84]();
    }
  }
  return v2;
}

uint64_t sub_22EB7FC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22EB7FEA0(uint64_t *a1, unsigned int *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[18];

  v61[16] = *MEMORY[0x24BDAC8D0];
  v4 = (void **)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) == 0x2A00000000)
  {
    v5 = sub_22EB62928((int)a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
    if ((v5 & 1) == 0)
    {
      v6 = *a1;
      v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
      sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
      v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
      v59 = v61;
      v60 = 0x800000000;
      v10 = 1;
      if ((sub_22EB7570C(a1, (void **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)), a2[4] - 1, 1, (uint64_t)&v59, 0) & 1) == 0)
      {
        v11 = a2[7];
        v12 = *a1;
        if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
          v13 = sub_22EB296C0(v12, 0, v7, v9, (uint64_t *)v59, v60, v11);
        else
          v13 = sub_22EB33018(v12, 0, v7, v9, (uint64_t)v59, v60, v11, 0);
        v10 = v13;
      }
      if (v59 != v61)
        free(v59);
      return v10;
    }
    return 1;
  }
  v14 = sub_22EB62928((int)a1, *v4);
  if ((v14 & 1) != 0)
    return 1;
  v15 = *(unsigned __int8 **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *v15 == 163)
    v16 = sub_22EB805CC(a1, (uint64_t)v15, 1, 0);
  else
    v16 = sub_22EB62928((int)a1, v15);
  v17 = v16;
  if ((v16 & 1) != 0)
    return 1;
  if (a2[4] == 2)
  {
    v18 = sub_22EB62928((int)a1, *(void **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
    if ((v18 & 1) != 0)
      return 1;
  }
  else
  {
    v18 = 0;
  }
  v20 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
  v21 = *a2;
  v22 = (_QWORD *)((char *)a2 + (v21 >> 24));
  if (*v22 != (v14 & 0xFFFFFFFFFFFFFFFELL)
    || (v23 = &v22[(v21 >> 18) & 1], v25 = v23[1], v24 = v23 + 1, v25 != (v17 & 0xFFFFFFFFFFFFFFFELL))
    || a2[4] == 2 && v24[1] != (v18 & 0xFFFFFFFFFFFFFFFELL))
  {
    v26 = *a1;
    if ((v21 & 0x100000) != 0)
      v27 = v22[((v21 >> 18) & 1) + 1 + a2[4]];
    else
      v27 = 0;
    v28 = *(_DWORD *)(v26 + 56);
    v29 = *(_QWORD *)(v26 + 1296);
    v58 = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
    sub_22E51A8D0(&v59, *(_QWORD *)(v26 + 72));
    v30 = *a1;
    *(_DWORD *)(v30 + 56) = v59 & ~HIDWORD(v27) | HIDWORD(v27) & v27;
    *(_QWORD *)(v30 + 1296) = v27;
    v31 = a2[1] & 0x3F;
    v32 = a2[5];
    v33 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v34 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    v35 = v34 != 0;
    v36 = (uint64_t)sub_22EFFBBCC(v20);
    v37 = (unsigned __int8 *)v36;
    if ((v31 - 37) >= 2)
      v35 = 0;
    if ((*(_DWORD *)v33 & 0x1C00) == 0xC00)
    {
      v38 = sub_22EFFBA54(v31);
      v39 = (_QWORD *)*a1;
      if ((v38 - 21) <= 0xA)
      {
        v10 = sub_22ED27A90(v39, 0, v32, v38, v33, (uint64_t)v34);
LABEL_47:
        v45 = v58;
LABEL_81:
        *(_DWORD *)(v26 + 56) = v28;
        *(_QWORD *)(v26 + 1296) = v29;
        v55 = *(_QWORD *)(v26 + 80);
        *(_QWORD *)(v55 + 520) = v45;
        *(_DWORD *)(v55 + 528) = v45;
        return v10;
      }
      v36 = sub_22EB19A28((uint64_t)v39, (_DWORD *)v33);
      if ((v36 & 1) != 0)
        goto LABEL_46;
      v33 = v36 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (!v34 || (*(_DWORD *)v34 & 0x1C00) != 0xC00)
    {
LABEL_37:
      if (v31 == 43)
      {
        v40 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v40 + 17) & 4) == 0
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
        {
          v41 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v41 + 17) & 4) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v42 = *a1;
            sub_22F0D5A50((uint64_t)v37);
            v44 = sub_22EB2AFE4(v42, (uint64_t (**)())v33, v43, v34, v32);
            goto LABEL_57;
          }
        }
      }
      else
      {
        if (v31 == 41)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            v10 = 1;
            goto LABEL_80;
          }
          v44 = sub_22ED1C570();
LABEL_57:
          v10 = v44;
LABEL_80:
          v45 = v58;
          goto LABEL_81;
        }
        v46 = *(_QWORD *)(*(_QWORD *)(v33 + 8) & 0xFFFFFFFFFFFFFFF0);
        v47 = *(_DWORD *)(v46 + 16);
        if (((v34 != 0) & ~v35) != 0)
        {
          if ((v47 & 0x400) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v49 = *(_QWORD *)(v34[1] & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v49 + 17) & 4) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
            {
              sub_22EFFBA54(v31);
              v56 = sub_22EB2D0B8();
              if ((v56 & 1) != 0)
                v10 = 1;
              else
                v10 = v56;
              goto LABEL_80;
            }
          }
        }
        else if ((v47 & 0x400) == 0
               && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
               || v31 == 11 && sub_22EB48AD0(v36, (unsigned __int8 *)v33))
        {
          v48 = sub_22EFFA13C(v31, v35);
          v44 = sub_22EB2EA08(*a1, v32, v48, v33);
          goto LABEL_57;
        }
      }
      v59 = v61;
      v60 = 0x1000000000;
      v50 = *v37;
      v57 = v28;
      if (v50 == 211)
      {
        sub_22E3D0148((uint64_t)&v59, v37 + 64, &v37[8 * *((unsigned int *)v37 + 1) + 64]);
        v51 = (*(_DWORD *)v37 >> 19) & 1;
        v50 = *(_DWORD *)v37;
      }
      else
      {
        v52 = *((_QWORD *)v37 + 2);
        v51 = 0;
        if ((*(_DWORD *)(v52 + 28) & 0x7Eu) - 54 >= 4)
        {
          v61[0] = v52 | 3;
          LODWORD(v60) = 1;
        }
      }
      if (((v34 != 0) & ~v35) != 0)
      {
        if (v31 == 43)
        {
          if (v50 != 161)
            sub_22F0D5A50((uint64_t)v37);
          v28 = v57;
          v10 = sub_22ED18C00();
          goto LABEL_78;
        }
        v53 = sub_22EFFBA54(v31);
        v54 = sub_22ED1767C(*a1, v32, v53, (uint64_t)&v59, v33, (uint64_t)v34, v51, 1, 0);
        if ((v54 & 1) != 0)
          v10 = 1;
        else
          v10 = v54;
      }
      else
      {
        sub_22EFFA13C(v31, v35);
        v10 = sub_22ED1677C();
      }
      v28 = v57;
LABEL_78:
      if (v59 != v61)
        free(v59);
      goto LABEL_80;
    }
    v36 = sub_22EB19A28(*a1, v34);
    if ((v36 & 1) == 0)
    {
      v34 = (_QWORD *)(v36 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_37;
    }
LABEL_46:
    v10 = 1;
    goto LABEL_47;
  }
  return sub_22EBCC6C0(*a1, (uint64_t)a2);
}

uint64_t sub_22EB805CC(uint64_t *a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  uint64_t v16;
  __n128 v18;
  void *v19[2];
  _DWORD v20[66];
  uint64_t v21;

  v6 = a2;
  v21 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22EB723F0(a1, *(_QWORD *)(a2 + 16), *(void **)(a2 + 24), 0, 0);
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*(_BYTE *)(v6 + 2) & 4) != 0 ? *(_DWORD *)(v6 + 64) : 0;
  sub_22EB7ADEC(&v18, a1, (__n128 *)(v6 + 32));
  if (!v18.n128_u64[0])
    return 1;
  v13 = *(unsigned int *)v6;
  if ((v13 & 0x40000) != 0 && (v14 = *(_DWORD *)(v6 + 56)) != 0)
  {
    v15 = *(_DWORD *)(v6 + 60);
    v19[0] = v20;
    v19[1] = (void *)0x800000000;
    v20[64] = v14;
    v20[65] = v15;
    v16 = v6 + 56 + 16 * ((v13 >> 18) & 1);
    if ((sub_22EB7FC00((uint64_t)a1, v16, v16 + 32 * *(unsigned int *)(v6 + 68)) & 1) != 0)
      v6 = 1;
    else
      v6 = sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, (uint64_t)v19, a3, a4);
    if (v19[0] != v20)
      free(v19[0]);
  }
  else if (v10 != *(_QWORD *)(v6 + 16) || v11 != *(_QWORD *)(v6 + 24) || v18.n128_u64[0] != *(_QWORD *)(v6 + 32))
  {
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v18, 0, a3, a4);
  }
  return v6;
}

uint64_t sub_22EB8078C(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  __n128 v7;
  uint64_t v8;

  v2 = a2;
  v4 = sub_22EB6DD04(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)v2);
  sub_22EB62928((uint64_t)a1, v6, v7);
  if ((v8 & 1) != 0)
    return 1;
  if (v5 != *(unint64_t **)(v2 + 24) || *(_QWORD *)(v2 + 16) != (v8 & 0xFFFFFFFFFFFFFFFELL))
    __asm { BR              X12 }
  return v2;
}

uint64_t sub_22EB8083C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  return sub_22E95ADCC(*v6, a1, 131, v5, a2, a3, a4 | (v4 << 32));
}

uint64_t sub_22EB8084C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  return sub_22E95ADCC(*v6, a1, 133, v5, a2, a3, a4 | (v4 << 32));
}

uint64_t sub_22EB8085C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  return sub_22E95ADCC(*v6, a1, 145, v5, a2, a3, a4 | (v4 << 32));
}

uint64_t sub_22EB8086C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  return sub_22E95ADCC(*v6, a1, 146, v5, a2, a3, a4 | (v4 << 32));
}

void sub_22EB8087C()
{
  JUMPOUT(0x22EB80888);
}

unint64_t sub_22EB8089C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = (unsigned __int8 *)sub_22EFBC5B4(v3);
  result = sub_22EB759A0(v2, v4, (*(_BYTE *)(v3 + 96) & 0x60) == 32);
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v7 + 16);
    if (v10 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(v7 + 16);
    }
    *(_OWORD *)(*(_QWORD *)(v7 + 8) + 16 * v10) = xmmword_22F45D8D0;
  }
  else
  {
    v11 = result & 0xFFFFFFFFFFFFFFFELL;
    result = sub_22F3369FC();
    v6 = result;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 16);
    }
    v9 = (unint64_t *)(*(_QWORD *)(v7 + 8) + 16 * v8);
    *v9 = v11;
    v9[1] = v6;
  }
  ++*(_DWORD *)(v7 + 16);
  return result;
}

uint64_t sub_22EB80A0C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t **v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t **v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t **v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  BOOL v374;
  uint64_t v375;
  uint64_t **v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  uint64_t **v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t **v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t **v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t **v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t **v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t i;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  BOOL v472;
  uint64_t v473;
  uint64_t **v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t **v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t **v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t **v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t **v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t **v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t **v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t **v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t **v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  BOOL v534;
  uint64_t **v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  BOOL v539;
  BOOL v540;
  BOOL v541;
  BOOL v542;
  BOOL v543;
  int *v544;
  BOOL v545;
  BOOL v546;
  BOOL v547;
  uint64_t **v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22EB84894(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v8 = *v7;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
      }
      else
      {
        v10 = 0;
      }
      while (2)
      {
        if (v8 == (uint64_t *)v10)
          return 1;
        if ((sub_22EB85C54(a1, *v8) & 1) != 0)
        {
          ++v8;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v248 = *(unint64_t **)(a2 + 96);
      if (v248)
      {
        result = sub_22EB84D04(a1, *v248, (uint64_t)(v248 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22EB56FB0(a1, v249, 0);
      if (!(_DWORD)result)
        return result;
      v250 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v250)
        goto LABEL_454;
      v251 = 16 * v250;
      v252 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v252)
        {
          result = sub_22EB56FB0(a1, *v252, 0);
          if (!(_DWORD)result)
            break;
        }
        v252 += 2;
        v251 -= 16;
        if (!v251)
        {
LABEL_454:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v254 = *v253;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
            }
            else
            {
              v256 = 0;
            }
            while (v254 != (uint64_t *)v256)
            {
              if ((sub_22EB85C54(a1, *v254) & 1) == 0)
                return 0;
              ++v254;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v217 = *v216;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v219 = *(_QWORD *)v218 + 8 * *(unsigned int *)(v218 + 8);
      }
      else
      {
        v219 = 0;
      }
      while (2)
      {
        if (v217 == (uint64_t *)v219)
          return 1;
        if ((sub_22EB85C54(a1, *v217) & 1) != 0)
        {
          ++v217;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22EB80A0C(a1);
      if (!(_DWORD)result)
        return result;
      v231 = *(_QWORD *)(a2 + 48);
      if (!v231)
        goto LABEL_421;
      v232 = *(unsigned int *)(v231 + 8);
      if (!(_DWORD)v232)
        goto LABEL_421;
      v233 = v231 + 16;
      while ((sub_22EB85AA0(a1, v233) & 1) != 0)
      {
        v233 += 32;
        if (!--v232)
        {
LABEL_421:
          v234 = *(_DWORD *)v4 & 0x7F;
          v235 = v234 > 0x39 || ((1 << v234) & 0x3F0003E01011066) == 0;
          if (v235
            && (v234 - 70 <= 0xD ? (v541 = ((1 << (v234 - 70)) & 0x2803) == 0) : (v541 = 1), v541 && v234 - 19 > 4))
          {
            v236 = 0;
          }
          else
          {
            v236 = sub_22EFCAE04(a2);
          }
          result = sub_22EB85BB8(a1, v236);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v238 = *v237;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v240 = *(_QWORD *)v239 + 8 * *(unsigned int *)(v239 + 8);
            }
            else
            {
              v240 = 0;
            }
            while (v238 != (uint64_t *)v240)
            {
              if ((sub_22EB85C54(a1, *v238) & 1) == 0)
                return 0;
              ++v238;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      while (2)
      {
        if (v173 == (uint64_t *)v175)
          return 1;
        if ((sub_22EB85C54(a1, *v173) & 1) != 0)
        {
          ++v173;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22EB85BB8(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v298 = *v297;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v300 = *(_QWORD *)v299 + 8 * *(unsigned int *)(v299 + 8);
      }
      else
      {
        v300 = 0;
      }
      while (2)
      {
        if (v298 == (uint64_t *)v300)
          return 1;
        if ((sub_22EB85C54(a1, *v298) & 1) != 0)
        {
          ++v298;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22EB85BB8(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v325 = *v324;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v327 = *(_QWORD *)v326 + 8 * *(unsigned int *)(v326 + 8);
      }
      else
      {
        v327 = 0;
      }
      while (2)
      {
        if (v325 == (uint64_t *)v327)
          return 1;
        if ((sub_22EB85C54(a1, *v325) & 1) != 0)
        {
          ++v325;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v241 = *(_DWORD *)v4 & 0x7F;
      v242 = v241 > 0x39 || ((1 << v241) & 0x3F0003E01011066) == 0;
      v243 = !v242 || v241 - 70 <= 0xD && ((1 << (v241 - 70)) & 0x2803) != 0 || v241 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EB85BB8(a1, v243);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v245 = *v244;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v247 = *(_QWORD *)v246 + 8 * *(unsigned int *)(v246 + 8);
      }
      else
      {
        v247 = 0;
      }
      while (2)
      {
        if (v245 == (uint64_t *)v247)
          return 1;
        if ((sub_22EB85C54(a1, *v245) & 1) != 0)
        {
          ++v245;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v336 = *(_QWORD *)(a2 + 40);
      v337 = (unint64_t *)(v336 & 0xFFFFFFFFFFFFFFF8);
      if ((v336 & 4) != 0 && v337)
      {
        if ((sub_22EB84D04(a1, *v337, (uint64_t)(v337 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EB80A0C(a1);
        if (!(_DWORD)result)
          return result;
      }
      v478 = *(_DWORD *)v4 & 0x7F;
      if (v478 <= 0x39 && ((1 << v478) & 0x3F0003E01011066) != 0
        || v478 - 70 <= 0xD && ((1 << (v478 - 70)) & 0x2803) != 0
        || v478 - 19 <= 4)
      {
        v479 = sub_22EFCAE04(a2);
      }
      else
      {
        v479 = 0;
      }
      result = sub_22EB85BB8(a1, v479);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v481 = *v480;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v483 = *(_QWORD *)v482 + 8 * *(unsigned int *)(v482 + 8);
      }
      else
      {
        v483 = 0;
      }
      while (2)
      {
        if (v481 == (uint64_t *)v483)
          return 1;
        if ((sub_22EB85C54(a1, *v481) & 1) != 0)
        {
          ++v481;
          continue;
        }
        break;
      }
      return 0;
    case 9:
      v204 = *(_QWORD *)(a2 + 48);
      v205 = (unint64_t *)(v204 & 0xFFFFFFFFFFFFFFF8);
      if ((v204 & 4) != 0 && v205)
      {
        if ((sub_22EB84D04(a1, *v205, (uint64_t)(v205 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EB80A0C(a1);
        if (!(_DWORD)result)
          return result;
      }
      v465 = *(unsigned int *)(a2 + 36);
      if (!(_DWORD)v465)
        goto LABEL_859;
      for (i = 0; i != v465; ++i)
      {
        v467 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
        v468 = *(_DWORD *)(v467 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v468)
        {
          v469 = v467 + 16;
          v470 = 8 * v468;
          while ((sub_22EB80A0C(a1) & 1) != 0)
          {
            v469 += 8;
            v470 -= 8;
            if (!v470)
              goto LABEL_858;
          }
          return 0;
        }
LABEL_858:
        ;
      }
LABEL_859:
      v471 = *(_DWORD *)v4 & 0x7F;
      v472 = v471 > 0x39 || ((1 << v471) & 0x3F0003E01011066) == 0;
      if (v472 && (v471 - 70 <= 0xD ? (v547 = ((1 << (v471 - 70)) & 0x2803) == 0) : (v547 = 1), v547 && v471 - 19 > 4))
        v473 = 0;
      else
        v473 = sub_22EFCAE04(a2);
      result = sub_22EB85BB8(a1, v473);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v475 = *v474;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v477 = *(_QWORD *)v476 + 8 * *(unsigned int *)(v476 + 8);
        }
        else
        {
          v477 = 0;
        }
        while (v475 != (uint64_t *)v477)
        {
          if ((sub_22EB85C54(a1, *v475) & 1) == 0)
            return 0;
          ++v475;
        }
      }
      return 1;
    case 10:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v333 = *v332;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v335 = *(_QWORD *)v334 + 8 * *(unsigned int *)(v334 + 8);
      }
      else
      {
        v335 = 0;
      }
      while (2)
      {
        if (v333 == (uint64_t *)v335)
          return 1;
        if ((sub_22EB85C54(a1, *v333) & 1) != 0)
        {
          ++v333;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22EB848DC(a1, a2) & 1) != 0;
    case 12:
      result = sub_22EB85BB8(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v201 = *v200;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v203 = *(_QWORD *)v202 + 8 * *(unsigned int *)(v202 + 8);
      }
      else
      {
        v203 = 0;
      }
      while (2)
      {
        if (v201 == (uint64_t *)v203)
          return 1;
        if ((sub_22EB85C54(a1, *v201) & 1) != 0)
        {
          ++v201;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22EB84BC4(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v316 = *(_DWORD *)(a2 + 24);
      v317 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v316;
      v560 = v317;
      if (!sub_22EB84C4C(a1, &v558))
        return 0;
      if ((v318 = *(_DWORD *)v4 & 0x7F, v318 <= 0x39) && ((1 << v318) & 0x3F0003E01011066) != 0
        || v318 - 70 <= 0xD && ((1 << (v318 - 70)) & 0x2803) != 0
        || v318 - 19 <= 4)
      {
        v319 = sub_22EFCAE04(a2);
      }
      else
      {
        v319 = 0;
      }
      if (!sub_22EB85BB8(a1, v319))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v321 = *v320;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v323 = *(_QWORD *)v322 + 8 * *(unsigned int *)(v322 + 8);
      }
      else
      {
        v323 = 0;
      }
      while (2)
      {
        if (v321 == (uint64_t *)v323)
          return 1;
        if ((sub_22EB85C54(a1, *v321) & 1) != 0)
        {
          ++v321;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v141 = *v140;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v143 = *(_QWORD *)v142 + 8 * *(unsigned int *)(v142 + 8);
      }
      else
      {
        v143 = 0;
      }
      while (2)
      {
        if (v141 == (uint64_t *)v143)
          return 1;
        if ((sub_22EB85C54(a1, *v141) & 1) != 0)
        {
          ++v141;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v221 = *v220;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v223 = *(_QWORD *)v222 + 8 * *(unsigned int *)(v222 + 8);
      }
      else
      {
        v223 = 0;
      }
      while (2)
      {
        if (v221 == (uint64_t *)v223)
          return 1;
        if ((sub_22EB85C54(a1, *v221) & 1) != 0)
        {
          ++v221;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22EB85BB8(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v123 = *v122;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v125 = *(_QWORD *)v124 + 8 * *(unsigned int *)(v124 + 8);
      }
      else
      {
        v125 = 0;
      }
      while (2)
      {
        if (v123 == (uint64_t *)v125)
          return 1;
        if ((sub_22EB85C54(a1, *v123) & 1) != 0)
        {
          ++v123;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22EB84BC4(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v264 = *v263;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v266 = *(_QWORD *)v265 + 8 * *(unsigned int *)(v265 + 8);
      }
      else
      {
        v266 = 0;
      }
      while (2)
      {
        if (v264 == (uint64_t *)v266)
          return 1;
        if ((sub_22EB85C54(a1, *v264) & 1) != 0)
        {
          ++v264;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v329 = *v328;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v331 = *(_QWORD *)v330 + 8 * *(unsigned int *)(v330 + 8);
      }
      else
      {
        v331 = 0;
      }
      while (2)
      {
        if (v329 == (uint64_t *)v331)
          return 1;
        if ((sub_22EB85C54(a1, *v329) & 1) != 0)
        {
          ++v329;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v361 = *(_QWORD *)(a2 + 112);
      if (!v361)
        goto LABEL_650;
      v362 = *(unsigned int *)(v361 + 8);
      if (!(_DWORD)v362)
        goto LABEL_650;
      v363 = (uint64_t *)(v361 + 16);
      v364 = 8 * v362;
      while ((sub_22EB849F4(a1, *v363) & 1) != 0)
      {
        ++v363;
        v364 -= 8;
        if (!v364)
        {
LABEL_650:
          result = sub_22EB85BB8(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v366 = *v365;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v368 = *(_QWORD *)v367 + 8 * *(unsigned int *)(v367 + 8);
            }
            else
            {
              v368 = 0;
            }
            while (v366 != (uint64_t *)v368)
            {
              if ((sub_22EB85C54(a1, *v366) & 1) == 0)
                return 0;
              ++v366;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22EB85BB8(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        if ((sub_22EB85C54(a1, *v284) & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22EB85BB8(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v313 = *v312;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v315 = *(_QWORD *)v314 + 8 * *(unsigned int *)(v314 + 8);
      }
      else
      {
        v315 = 0;
      }
      while (2)
      {
        if (v313 == (uint64_t *)v315)
          return 1;
        if ((sub_22EB85C54(a1, *v313) & 1) != 0)
        {
          ++v313;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v354 = *(_QWORD *)(a2 + 112);
      if (!v354)
        goto LABEL_637;
      v355 = *(unsigned int *)(v354 + 8);
      if (!(_DWORD)v355)
        goto LABEL_637;
      v356 = (uint64_t *)(v354 + 16);
      v357 = 8 * v355;
      while ((sub_22EB849F4(a1, *v356) & 1) != 0)
      {
        ++v356;
        v357 -= 8;
        if (!v357)
        {
LABEL_637:
          v358 = (unint64_t *)sub_22F259044(a2);
          if (v358)
          {
            result = sub_22EB84D04(a1, *v358, (uint64_t)(v358 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v359 = *(_QWORD *)(a2 + 120);
          if (!v359)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v359 = *(_QWORD *)(a2 + 120);
          }
          if (v359 < 8)
            v360 = 0;
          else
            v360 = *(_QWORD *)(v359 & 0xFFFFFFFFFFFFFFF8);
          if (v360 == a2)
          {
            v552 = sub_22F2590A8(a2);
            v553 = sub_22F25910C(a2);
            v554 = sub_22F259178(a2);
            v555 = sub_22F2591DC(a2);
            if (v552 != v553 && v554 != v555)
            {
              v556 = v554 + 4;
              v557 = v552 + 8;
              do
              {
                if (v557 == v553)
                  break;
                v557 += 8;
                v31 = v556 == v555;
                v556 += 4;
              }
              while (!v31);
            }
          }
          result = sub_22EB85BB8(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v531 = *v530;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
            }
            else
            {
              v533 = 0;
            }
            while (v531 != (uint64_t *)v533)
            {
              if ((sub_22EB85C54(a1, *v531) & 1) == 0)
                return 0;
              ++v531;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v388 = *(_QWORD *)(a2 + 104);
      if (!v388)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v388 = *(_QWORD *)(a2 + 104);
      }
      if (v388 < 8)
        v389 = 0;
      else
        v389 = *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF8);
      if (v389 == a2)
      {
        v523 = sub_22F259248(a2);
        v525 = v524;
        v526 = sub_22F2592CC(a2);
        if (v523 != v525 && v526 != v527)
        {
          v528 = v526 + 4;
          v529 = v523 + 8;
          do
          {
            if (v529 == v525)
              break;
            v529 += 8;
            v31 = v528 == v527;
            v528 += 4;
          }
          while (!v31);
        }
      }
      result = sub_22EB85BB8(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v485 = *v484;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v487 = *(_QWORD *)v486 + 8 * *(unsigned int *)(v486 + 8);
      }
      else
      {
        v487 = 0;
      }
      while (2)
      {
        if (v485 == (uint64_t *)v487)
          return 1;
        if ((sub_22EB85C54(a1, *v485) & 1) != 0)
        {
          ++v485;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v207 = *(unint64_t **)(a2 + 88);
      if (v207)
      {
        result = sub_22EB84D04(a1, *v207, (uint64_t)(v207 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v208 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v208)
        goto LABEL_379;
      v209 = *(_QWORD *)(a2 + 96);
      v210 = 8 * v208;
      while ((sub_22EB80A0C(a1) & 1) != 0)
      {
        v209 += 8;
        v210 -= 8;
        if (!v210)
        {
LABEL_379:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v211 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22EB56FB0(a1, v211, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v213 = *v212;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v215 = *(_QWORD *)v214 + 8 * *(unsigned int *)(v214 + 8);
            }
            else
            {
              v215 = 0;
            }
            while (v213 != (uint64_t *)v215)
            {
              if ((sub_22EB85C54(a1, *v213) & 1) == 0)
                return 0;
              ++v213;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v206 = *(unint64_t **)(a2 + 64);
      if (v206)
      {
        if ((sub_22EB84D04(a1, *v206, (uint64_t)(v206 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EB8546C(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v507 = *v506;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v509 = *(_QWORD *)v508 + 8 * *(unsigned int *)(v508 + 8);
      }
      else
      {
        v509 = 0;
      }
      while (2)
      {
        if (v507 == (uint64_t *)v509)
          return 1;
        if ((sub_22EB85C54(a1, *v507) & 1) != 0)
        {
          ++v507;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      result = sub_22EB861F0(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v411 = *(_DWORD *)v4 & 0x7F;
      v412 = v411 > 0x39 || ((1 << v411) & 0x3F0003E01011066) == 0;
      v413 = !v412 || v411 - 70 <= 0xD && ((1 << (v411 - 70)) & 0x2803) != 0 || v411 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EB85BB8(a1, v413);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v415 = *v414;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v417 = *(_QWORD *)v416 + 8 * *(unsigned int *)(v416 + 8);
      }
      else
      {
        v417 = 0;
      }
      while (2)
      {
        if (v415 == (uint64_t *)v417)
          return 1;
        if ((sub_22EB85C54(a1, *v415) & 1) != 0)
        {
          ++v415;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22EB861F0(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v112 = *(_DWORD *)v4 & 0x7F, v112 <= 0x39) && ((1 << v112) & 0x3F0003E01011066) != 0
        || v112 - 70 <= 0xD && ((1 << (v112 - 70)) & 0x2803) != 0
        || v112 - 19 <= 4)
      {
        v113 = sub_22EFCAE04(a2);
      }
      else
      {
        v113 = 0;
      }
      result = sub_22EB85BB8(a1, v113);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v115 = *v114;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v117 = *(_QWORD *)v116 + 8 * *(unsigned int *)(v116 + 8);
      }
      else
      {
        v117 = 0;
      }
      while (2)
      {
        if (v115 == (uint64_t *)v117)
          return 1;
        if ((sub_22EB85C54(a1, *v115) & 1) != 0)
        {
          ++v115;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22EB861F0(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EB80A0C(a1);
      if (!(_DWORD)result)
        return result;
      if ((v390 = *(_DWORD *)v4 & 0x7F, v390 <= 0x39) && ((1 << v390) & 0x3F0003E01011066) != 0
        || v390 - 70 <= 0xD && ((1 << (v390 - 70)) & 0x2803) != 0
        || v390 - 19 <= 4)
      {
        v391 = sub_22EFCAE04(a2);
      }
      else
      {
        v391 = 0;
      }
      result = sub_22EB85BB8(a1, v391);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v393 = *v392;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v395 = *(_QWORD *)v394 + 8 * *(unsigned int *)(v394 + 8);
      }
      else
      {
        v395 = 0;
      }
      while (2)
      {
        if (v393 == (uint64_t *)v395)
          return 1;
        if ((sub_22EB85C54(a1, *v393) & 1) != 0)
        {
          ++v393;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      result = sub_22EB861F0(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EB80A0C(a1);
      if (!(_DWORD)result)
        return result;
      if ((v396 = *(_DWORD *)v4 & 0x7F, v396 <= 0x39) && ((1 << v396) & 0x3F0003E01011066) != 0
        || v396 - 70 <= 0xD && ((1 << (v396 - 70)) & 0x2803) != 0
        || v396 - 19 <= 4)
      {
        v397 = sub_22EFCAE04(a2);
      }
      else
      {
        v397 = 0;
      }
      result = sub_22EB85BB8(a1, v397);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v399 = *v398;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v401 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
      }
      else
      {
        v401 = 0;
      }
      while (2)
      {
        if (v399 == (uint64_t *)v401)
          return 1;
        if ((sub_22EB85C54(a1, *v399) & 1) != 0)
        {
          ++v399;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      result = sub_22EB80A0C(a1);
      if (!(_DWORD)result)
        return result;
      result = sub_22EB861F0(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v338 = *(_DWORD *)v4 & 0x7F, v338 <= 0x39) && ((1 << v338) & 0x3F0003E01011066) != 0
        || v338 - 70 <= 0xD && ((1 << (v338 - 70)) & 0x2803) != 0
        || v338 - 19 <= 4)
      {
        v339 = sub_22EFCAE04(a2);
      }
      else
      {
        v339 = 0;
      }
      result = sub_22EB85BB8(a1, v339);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v341 = *v340;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v343 = *(_QWORD *)v342 + 8 * *(unsigned int *)(v342 + 8);
      }
      else
      {
        v343 = 0;
      }
      while (2)
      {
        if (v341 == (uint64_t *)v343)
          return 1;
        if ((sub_22EB85C54(a1, *v341) & 1) != 0)
        {
          ++v341;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22EB861F0(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EB80A0C(a1);
      if (!(_DWORD)result)
        return result;
      if ((v257 = *(_DWORD *)v4 & 0x7F, v257 <= 0x39) && ((1 << v257) & 0x3F0003E01011066) != 0
        || v257 - 70 <= 0xD && ((1 << (v257 - 70)) & 0x2803) != 0
        || v257 - 19 <= 4)
      {
        v258 = sub_22EFCAE04(a2);
      }
      else
      {
        v258 = 0;
      }
      result = sub_22EB85BB8(a1, v258);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v260 = *v259;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
      }
      else
      {
        v262 = 0;
      }
      while (2)
      {
        if (v260 == (uint64_t *)v262)
          return 1;
        if ((sub_22EB85C54(a1, *v260) & 1) != 0)
        {
          ++v260;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      result = sub_22EB80A0C(a1);
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v544 = sub_22F259350(a2);
        result = sub_22EB85AA0(a1, (uint64_t)v544);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EB861F0(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v344 = *(_DWORD *)v4 & 0x7F, v344 <= 0x39) && ((1 << v344) & 0x3F0003E01011066) != 0
        || v344 - 70 <= 0xD && ((1 << (v344 - 70)) & 0x2803) != 0
        || v344 - 19 <= 4)
      {
        v345 = sub_22EFCAE04(a2);
      }
      else
      {
        v345 = 0;
      }
      result = sub_22EB85BB8(a1, v345);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v347 = *v346;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v349 = *(_QWORD *)v348 + 8 * *(unsigned int *)(v348 + 8);
      }
      else
      {
        v349 = 0;
      }
      if (v347 == (uint64_t *)v349)
        return 1;
      while ((sub_22EB85C54(a1, *v347) & 1) != 0)
      {
        if (++v347 == (uint64_t *)v349)
          return 1;
      }
      return 0;
    case 33:
      v144 = *(_QWORD *)(a2 + 120);
      if ((v144 & 4) == 0)
        goto LABEL_252;
      v145 = 0;
      while (1)
      {
        v146 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (v145 >= *(unsigned int *)(v146 + 16))
          break;
        sub_22EB861F0(a1, *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v145++));
        v144 = *(_QWORD *)(a2 + 120);
        if ((v144 & 4) == 0)
        {
LABEL_252:
          v147 = 0;
          v148 = 0;
          goto LABEL_946;
        }
      }
      v147 = *(_QWORD *)v146;
      v148 = *(_QWORD *)(v146 + 8);
LABEL_946:
      result = sub_22EB84BC4(a1, v147, v148);
      if (!(_DWORD)result)
        return result;
      v510 = *(_QWORD *)(a2 + 128);
      if ((v510 & 4) != 0 && (v510 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22EB84D04(a1, *(_QWORD *)(v510 & 0xFFFFFFFFFFFFFFF8), (v510 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EB85BB8(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v512 = *v511;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v514 = *(_QWORD *)v513 + 8 * *(unsigned int *)(v513 + 8);
      }
      else
      {
        v514 = 0;
      }
      if (v512 == (uint64_t *)v514)
        return 1;
      while ((sub_22EB85C54(a1, *v512) & 1) != 0)
      {
        if (++v512 == (uint64_t *)v514)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22EB86290(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EB85BB8(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v119 = *v118;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v121 = *(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8);
      }
      else
      {
        v121 = 0;
      }
      if (v119 == (uint64_t *)v121)
        return 1;
      while ((sub_22EB85C54(a1, *v119) & 1) != 0)
      {
        if (++v119 == (uint64_t *)v121)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22EB86304(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EB85BB8(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v101 = *v100;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
      }
      else
      {
        v103 = 0;
      }
      if (v101 == (uint64_t *)v103)
        return 1;
      while ((sub_22EB85C54(a1, *v101) & 1) != 0)
      {
        if (++v101 == (uint64_t *)v103)
          return 1;
      }
      return 0;
    case 36:
      v104 = *(unint64_t ***)(a2 + 160);
      if (v104)
      {
        if (*v104)
        {
          result = sub_22EB84D04(a1, **v104, (uint64_t)(*v104 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(_QWORD *)(a2 + 120);
      if ((v105 & 4) != 0)
      {
        v488 = (uint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        v106 = *v488;
        v107 = v488[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      result = sub_22EB84BC4(a1, v106, v107);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22EB85BB8(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v490 = *v489;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v492 = *(_QWORD *)v491 + 8 * *(unsigned int *)(v491 + 8);
      }
      else
      {
        v492 = 0;
      }
      if (v490 == (uint64_t *)v492)
        return 1;
      while ((sub_22EB85C54(a1, *v490) & 1) != 0)
      {
        if (++v490 == (uint64_t *)v492)
          return 1;
      }
      return 0;
    case 37:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_104;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_104;
      v65 = v63 + 16;
      v66 = 8 * v64;
      while ((sub_22EB80A0C(a1) & 1) != 0)
      {
        v65 += 8;
        v66 -= 8;
        if (!v66)
        {
LABEL_104:
          v67 = *(_QWORD *)(a2 + 192);
          v68 = *(unsigned int *)(v67 + 8);
          if ((_DWORD)v68)
          {
            v69 = v67 + 16;
            while ((sub_22EB85AA0(a1, v69) & 1) != 0)
            {
              v69 += 32;
              if (!--v68)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22EB86304(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22EB85BB8(a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v71 = *v70;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
            }
            else
            {
              v73 = 0;
            }
            if (v71 != (uint64_t *)v73)
            {
              while ((sub_22EB85C54(a1, *v71) & 1) != 0)
              {
                if (++v71 == (uint64_t *)v73)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v402 = *(_QWORD *)(a2 + 48);
      if (v402)
      {
        result = sub_22EB8546C(a1, v402 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EB84894(a1, a2);
      if (!(_DWORD)result)
        return result;
      v403 = *(_QWORD *)(a2 + 72);
      if (v403 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v404 = (unint64_t *)(v403 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v404)
          v404 = (unint64_t *)v404[1];
        result = sub_22EB84D04(a1, *v404, (uint64_t)(v404 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v405 = *(_DWORD *)v4 & 0x7F, v405 <= 0x39) && ((1 << v405) & 0x3F0003E01011066) != 0
        || v405 - 70 <= 0xD && ((1 << (v405 - 70)) & 0x2803) != 0
        || v405 - 19 <= 4)
      {
        v406 = sub_22EFCAE04(a2);
      }
      else
      {
        v406 = 0;
      }
      result = sub_22EB85BB8(a1, v406);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v408 = *v407;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v410 = *(_QWORD *)v409 + 8 * *(unsigned int *)(v409 + 8);
      }
      else
      {
        v410 = 0;
      }
      if (v408 == (uint64_t *)v410)
        return 1;
      while ((sub_22EB85C54(a1, *v408) & 1) != 0)
      {
        if (++v408 == (uint64_t *)v410)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22EB849F4(a1, a2) & 1) != 0;
    case 40:
      v176 = *(_QWORD *)(a2 + 80);
      v177 = (unint64_t *)(v176 & 0xFFFFFFFFFFFFFFF8);
      if ((v176 & 4) != 0)
        v177 = (unint64_t *)*v177;
      result = sub_22EB84D04(a1, *v177, (uint64_t)(v177 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v178 = *(_DWORD *)v4 & 0x7F, v178 <= 0x39) && ((1 << v178) & 0x3F0003E01011066) != 0
        || v178 - 70 <= 0xD && ((1 << (v178 - 70)) & 0x2803) != 0
        || v178 - 19 <= 4)
      {
        v179 = sub_22EFCAE04(a2);
      }
      else
      {
        v179 = 0;
      }
      result = sub_22EB85BB8(a1, v179);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v181 = *v180;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v183 = *(_QWORD *)v182 + 8 * *(unsigned int *)(v182 + 8);
      }
      else
      {
        v183 = 0;
      }
      if (v181 == (uint64_t *)v183)
        return 1;
      while ((sub_22EB85C54(a1, *v181) & 1) != 0)
      {
        if (++v181 == (uint64_t *)v183)
          return 1;
      }
      return 0;
    case 41:
      v267 = *(_QWORD *)(a2 + 80);
      v268 = (unint64_t *)(v267 & 0xFFFFFFFFFFFFFFF8);
      if ((v267 & 4) != 0)
        v268 = (unint64_t *)*v268;
      result = sub_22EB84D04(a1, *v268, (uint64_t)(v268 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v269 = *(_DWORD *)v4 & 0x7F, v269 <= 0x39) && ((1 << v269) & 0x3F0003E01011066) != 0
        || v269 - 70 <= 0xD && ((1 << (v269 - 70)) & 0x2803) != 0
        || v269 - 19 <= 4)
      {
        v270 = sub_22EFCAE04(a2);
      }
      else
      {
        v270 = 0;
      }
      result = sub_22EB85BB8(a1, v270);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v272 = *v271;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v274 = *(_QWORD *)v273 + 8 * *(unsigned int *)(v273 + 8);
      }
      else
      {
        v274 = 0;
      }
      if (v272 == (uint64_t *)v274)
        return 1;
      while ((sub_22EB85C54(a1, *v272) & 1) != 0)
      {
        if (++v272 == (uint64_t *)v274)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22EB84BC4(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v373 = *(_DWORD *)v4 & 0x7F;
      v374 = v373 > 0x39 || ((1 << v373) & 0x3F0003E01011066) == 0;
      v375 = !v374 || v373 - 70 <= 0xD && ((1 << (v373 - 70)) & 0x2803) != 0 || v373 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EB85BB8(a1, v375);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v377 = *v376;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v379 = *(_QWORD *)v378 + 8 * *(unsigned int *)(v378 + 8);
      }
      else
      {
        v379 = 0;
      }
      if (v377 == (uint64_t *)v379)
        return 1;
      while ((sub_22EB85C54(a1, *v377) & 1) != 0)
      {
        if (++v377 == (uint64_t *)v379)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v41 = *v40;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v43 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
      }
      else
      {
        v43 = 0;
      }
      if (v41 == (uint64_t *)v43)
        return 1;
      while ((sub_22EB85C54(a1, *v41) & 1) != 0)
      {
        if (++v41 == (uint64_t *)v43)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22EB84BC4(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v133 = *(_DWORD *)v4 & 0x7F;
      v134 = v133 > 0x39 || ((1 << v133) & 0x3F0003E01011066) == 0;
      v135 = !v134 || v133 - 70 <= 0xD && ((1 << (v133 - 70)) & 0x2803) != 0 || v133 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EB85BB8(a1, v135);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v137 = *v136;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v139 = *(_QWORD *)v138 + 8 * *(unsigned int *)(v138 + 8);
      }
      else
      {
        v139 = 0;
      }
      if (v137 == (uint64_t *)v139)
        return 1;
      while ((sub_22EB85C54(a1, *v137) & 1) != 0)
      {
        if (++v137 == (uint64_t *)v139)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v351 = *v350;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v353 = *(_QWORD *)v352 + 8 * *(unsigned int *)(v352 + 8);
      }
      else
      {
        v353 = 0;
      }
      if (v351 == (uint64_t *)v353)
        return 1;
      while ((sub_22EB85C54(a1, *v351) & 1) != 0)
      {
        if (++v351 == (uint64_t *)v353)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v435 = *v434;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v437 = *(_QWORD *)v436 + 8 * *(unsigned int *)(v436 + 8);
      }
      else
      {
        v437 = 0;
      }
      if (v435 == (uint64_t *)v437)
        return 1;
      while ((sub_22EB85C54(a1, *v435) & 1) != 0)
      {
        if (++v435 == (uint64_t *)v437)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22EB85C54(a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 48:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v150 = *v149;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v152 = *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8);
      }
      else
      {
        v152 = 0;
      }
      if (v150 == (uint64_t *)v152)
        return 1;
      while ((sub_22EB85C54(a1, *v150) & 1) != 0)
      {
        if (++v150 == (uint64_t *)v152)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22EB8637C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v171 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v515 = v171 & 0xFFFFFFFFFFFFFFFCLL;
        v516 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v516 && (_DWORD)v516 != 3)
          v515 = *(_QWORD *)(v515 + 8);
        if ((sub_22EB56FB0(a1, v515, 0) & 1) == 0)
          return 0;
      }
      else if ((v171 & 3) != 0 && (v171 & 3) != 3)
      {
        result = sub_22EB56FB0(a1, v171 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v517 = *(_DWORD *)v4 & 0x7F;
      if (v517 <= 0x39 && ((1 << v517) & 0x3F0003E01011066) != 0
        || v517 - 70 <= 0xD && ((1 << (v517 - 70)) & 0x2803) != 0
        || v517 - 19 <= 4)
      {
        v518 = sub_22EFCAE04(a2);
      }
      else
      {
        v518 = 0;
      }
      result = sub_22EB85BB8(a1, v518);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v520 = *v519;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v522 = *(_QWORD *)v521 + 8 * *(unsigned int *)(v521 + 8);
        }
        else
        {
          v522 = 0;
        }
        for (; v520 != (uint64_t *)v522; ++v520)
        {
          if ((sub_22EB85C54(a1, *v520) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22EB8637C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v33 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v33 = *(_QWORD *)(v33 + 8);
        result = sub_22EB56FB0(a1, v33, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v34 = *(_DWORD *)v4 & 0x7F, v34 <= 0x39) && ((1 << v34) & 0x3F0003E01011066) != 0
        || (v34 - 70 <= 0xD ? (v542 = ((1 << (v34 - 70)) & 0x2803) == 0) : (v542 = 1), !v542 || v34 - 19 <= 4))
      {
        v35 = sub_22EFCAE04(a2);
      }
      else
      {
        v35 = 0;
      }
      result = sub_22EB85BB8(a1, v35);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v37 = *v36;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v39 = *(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 8);
      }
      else
      {
        v39 = 0;
      }
      if (v37 == (uint64_t *)v39)
        return 1;
      while ((sub_22EB85C54(a1, *v37) & 1) != 0)
      {
        if (++v37 == (uint64_t *)v39)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22EB8637C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v450 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v450 = *(_QWORD *)(v450 + 8);
        result = sub_22EB56FB0(a1, v450, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v451 = *(_DWORD *)v4 & 0x7F, v451 <= 0x39) && ((1 << v451) & 0x3F0003E01011066) != 0
        || (v451 - 70 <= 0xD ? (v543 = ((1 << (v451 - 70)) & 0x2803) == 0) : (v543 = 1), !v543 || v451 - 19 <= 4))
      {
        v452 = sub_22EFCAE04(a2);
      }
      else
      {
        v452 = 0;
      }
      result = sub_22EB85BB8(a1, v452);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v454 = *v453;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v456 = *(_QWORD *)v455 + 8 * *(unsigned int *)(v455 + 8);
      }
      else
      {
        v456 = 0;
      }
      if (v454 == (uint64_t *)v456)
        return 1;
      while ((sub_22EB85C54(a1, *v454) & 1) != 0)
      {
        if (++v454 == (uint64_t *)v456)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22EB86448(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v431 = *v430;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v433 = *(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8);
      }
      else
      {
        v433 = 0;
      }
      if (v431 == (uint64_t *)v433)
        return 1;
      while ((sub_22EB85C54(a1, *v431) & 1) != 0)
      {
        if (++v431 == (uint64_t *)v433)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22EB86448(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v75 = *v74;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
      }
      else
      {
        v77 = 0;
      }
      if (v75 == (uint64_t *)v77)
        return 1;
      while ((sub_22EB85C54(a1, *v75) & 1) != 0)
      {
        if (++v75 == (uint64_t *)v77)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22EB86448(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v419 = *v418;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v421 = *(_QWORD *)v420 + 8 * *(unsigned int *)(v420 + 8);
      }
      else
      {
        v421 = 0;
      }
      if (v419 == (uint64_t *)v421)
        return 1;
      while ((sub_22EB85C54(a1, *v419) & 1) != 0)
      {
        if (++v419 == (uint64_t *)v421)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22EB86448(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v427 = *v426;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v429 = *(_QWORD *)v428 + 8 * *(unsigned int *)(v428 + 8);
      }
      else
      {
        v429 = 0;
      }
      if (v427 == (uint64_t *)v429)
        return 1;
      while ((sub_22EB85C54(a1, *v427) & 1) != 0)
      {
        if (++v427 == (uint64_t *)v429)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22EB86448(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22EB85C54(a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22EB86448(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v370 = *v369;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v372 = *(_QWORD *)v371 + 8 * *(unsigned int *)(v371 + 8);
      }
      else
      {
        v372 = 0;
      }
      if (v370 == (uint64_t *)v372)
        return 1;
      while ((sub_22EB85C54(a1, *v370) & 1) != 0)
      {
        if (++v370 == (uint64_t *)v372)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22EB8637C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v153 = *(_DWORD *)v4 & 0x7F;
      v154 = v153 > 0x39 || ((1 << v153) & 0x3F0003E01011066) == 0;
      v155 = !v154 || v153 - 70 <= 0xD && ((1 << (v153 - 70)) & 0x2803) != 0 || v153 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EB85BB8(a1, v155);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v157 = *v156;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v159 = *(_QWORD *)v158 + 8 * *(unsigned int *)(v158 + 8);
      }
      else
      {
        v159 = 0;
      }
      if (v157 == (uint64_t *)v159)
        return 1;
      while ((sub_22EB85C54(a1, *v157) & 1) != 0)
      {
        if (++v157 == (uint64_t *)v159)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22EB8637C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v380 = *(_QWORD *)(a2 + 72);
      if (v380 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v381 = v380 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v381)
          v381 = *(_QWORD *)(v381 + 8);
        result = sub_22EB56FB0(a1, v381, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v382 = *(_DWORD *)v4 & 0x7F, v382 <= 0x39) && ((1 << v382) & 0x3F0003E01011066) != 0
        || v382 - 70 <= 0xD && ((1 << (v382 - 70)) & 0x2803) != 0
        || v382 - 19 <= 4)
      {
        v383 = sub_22EFCAE04(a2);
      }
      else
      {
        v383 = 0;
      }
      result = sub_22EB85BB8(a1, v383);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v385 = *v384;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v387 = *(_QWORD *)v386 + 8 * *(unsigned int *)(v386 + 8);
      }
      else
      {
        v387 = 0;
      }
      if (v385 == (uint64_t *)v387)
        return 1;
      while ((sub_22EB85C54(a1, *v385) & 1) != 0)
      {
        if (++v385 == (uint64_t *)v387)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22EB8680C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v184 = *(_DWORD *)v4 & 0x7F;
      v185 = v184 > 0x39 || ((1 << v184) & 0x3F0003E01011066) == 0;
      v186 = !v185 || v184 - 70 <= 0xD && ((1 << (v184 - 70)) & 0x2803) != 0 || v184 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EB85BB8(a1, v186);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v188 = *v187;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
      }
      else
      {
        v190 = 0;
      }
      if (v188 == (uint64_t *)v190)
        return 1;
      while ((sub_22EB85C54(a1, *v188) & 1) != 0)
      {
        if (++v188 == (uint64_t *)v190)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22EB8680C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v287 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v287)
        goto LABEL_514;
      v288 = a2 + 104;
      v289 = 8 * v287;
      while ((sub_22EB80A0C(a1) & 1) != 0)
      {
        v288 += 8;
        v289 -= 8;
        if (!v289)
        {
LABEL_514:
          v290 = *(_DWORD *)v4 & 0x7F;
          v291 = v290 > 0x39 || ((1 << v290) & 0x3F0003E01011066) == 0;
          if (v291
            && (v290 - 70 <= 0xD ? (v545 = ((1 << (v290 - 70)) & 0x2803) == 0) : (v545 = 1), v545 && v290 - 19 > 4))
          {
            v292 = 0;
          }
          else
          {
            v292 = sub_22EFCAE04(a2);
          }
          result = sub_22EB85BB8(a1, v292);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v294 = *v293;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v296 = *(_QWORD *)v295 + 8 * *(unsigned int *)(v295 + 8);
          }
          else
          {
            v296 = 0;
          }
          if (v294 == (uint64_t *)v296)
            return 1;
          while ((sub_22EB85C54(a1, *v294) & 1) != 0)
          {
            if (++v294 == (uint64_t *)v296)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22EB8680C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v305 = *(_DWORD *)v4 & 0x7F;
      v306 = v305 > 0x39 || ((1 << v305) & 0x3F0003E01011066) == 0;
      v307 = !v306 || v305 - 70 <= 0xD && ((1 << (v305 - 70)) & 0x2803) != 0 || v305 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EB85BB8(a1, v307);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v309 = *v308;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v311 = *(_QWORD *)v310 + 8 * *(unsigned int *)(v310 + 8);
      }
      else
      {
        v311 = 0;
      }
      if (v309 == (uint64_t *)v311)
        return 1;
      while ((sub_22EB85C54(a1, *v309) & 1) != 0)
      {
        if (++v309 == (uint64_t *)v311)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22EB8680C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v224 = *(_DWORD *)v4 & 0x7F;
      v225 = v224 > 0x39 || ((1 << v224) & 0x3F0003E01011066) == 0;
      v226 = !v225 || v224 - 70 <= 0xD && ((1 << (v224 - 70)) & 0x2803) != 0 || v224 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EB85BB8(a1, v226);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v228 = *v227;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v230 = *(_QWORD *)v229 + 8 * *(unsigned int *)(v229 + 8);
      }
      else
      {
        v230 = 0;
      }
      if (v228 == (uint64_t *)v230)
        return 1;
      while ((sub_22EB85C54(a1, *v228) & 1) != 0)
      {
        if (++v228 == (uint64_t *)v230)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22EB8680C(a1, a2);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v191 != 1024)
        goto LABEL_343;
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_343:
      if (v191 != 1024 && v191 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v192 = sub_22EFBC5B4(a2);
        v193 = v192;
        if (v192 && (*(_BYTE *)v192 & 0xFE) == 0xAC)
          v193 = *(_QWORD *)(v192 + 16);
        result = sub_22EB56FB0(a1, v193, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v194 = *(_DWORD *)v4 & 0x7F, v194 <= 0x39) && ((1 << v194) & 0x3F0003E01011066) != 0
        || v194 - 70 <= 0xD && ((1 << (v194 - 70)) & 0x2803) != 0
        || v194 - 19 <= 4)
      {
        v195 = sub_22EFCAE04(a2);
      }
      else
      {
        v195 = 0;
      }
      result = sub_22EB85BB8(a1, v195);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v197 = *v196;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v199 = *(_QWORD *)v198 + 8 * *(unsigned int *)(v198 + 8);
      }
      else
      {
        v199 = 0;
      }
      if (v197 == (uint64_t *)v199)
        return 1;
      while ((sub_22EB85C54(a1, *v197) & 1) != 0)
      {
        if (++v197 == (uint64_t *)v199)
          return 1;
      }
      return 0;
    case 65:
      v301 = *(unint64_t ***)(a2 + 120);
      if (v301)
      {
        if (*v301)
        {
          result = sub_22EB84D04(a1, **v301, (uint64_t)(*v301 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v302 = *(_QWORD *)(a2 + 56);
      if ((v302 & 4) != 0)
      {
        v493 = (uint64_t *)(v302 & 0xFFFFFFFFFFFFFFF8);
        v303 = *v493;
        v304 = v493[1];
      }
      else
      {
        v303 = 0;
        v304 = 0;
      }
      result = sub_22EB84BC4(a1, v303, v304);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v494 = *(_DWORD *)v4 & 0x7F;
      if (v494 <= 0x39 && ((1 << v494) & 0x3F0003E01011066) != 0
        || v494 - 70 <= 0xD && ((1 << (v494 - 70)) & 0x2803) != 0
        || v494 - 19 <= 4)
      {
        v495 = sub_22EFCAE04(a2);
      }
      else
      {
        v495 = 0;
      }
      result = sub_22EB85BB8(a1, v495);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v497 = *v496;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v499 = *(_QWORD *)v498 + 8 * *(unsigned int *)(v498 + 8);
      }
      else
      {
        v499 = 0;
      }
      if (v497 == (uint64_t *)v499)
        return 1;
      while ((sub_22EB85C54(a1, *v497) & 1) != 0)
      {
        if (++v497 == (uint64_t *)v499)
          return 1;
      }
      return 0;
    case 66:
      v44 = *(_QWORD *)(a2 + 424);
      if (!v44)
        goto LABEL_68;
      v45 = *(_DWORD *)(v44 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v45)
        goto LABEL_68;
      v46 = v44 + 16;
      v47 = 8 * v45;
      while ((sub_22EB80A0C(a1) & 1) != 0)
      {
        v46 += 8;
        v47 -= 8;
        if (!v47)
        {
LABEL_68:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = v48 + 16;
            while ((sub_22EB85AA0(a1, v50) & 1) != 0)
            {
              v50 += 32;
              if (!--v49)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22EB8680C(a1, a2);
            if (!(_DWORD)result)
              return result;
            v51 = *(_DWORD *)v4 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v546 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v546 = 1), v546 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22EB85BB8(a1, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v55 = *v54;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
            }
            else
            {
              v57 = 0;
            }
            if (v55 == (uint64_t *)v57)
              return 1;
            while ((sub_22EB85C54(a1, *v55) & 1) != 0)
            {
              if (++v55 == (uint64_t *)v57)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v126 = *(_DWORD *)v4 & 0x7F;
      v127 = v126 > 0x39 || ((1 << v126) & 0x3F0003E01011066) == 0;
      v128 = !v127 || v126 - 70 <= 0xD && ((1 << (v126 - 70)) & 0x2803) != 0 || v126 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EB85BB8(a1, v128);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v130 = *v129;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v132 = *(_QWORD *)v131 + 8 * *(unsigned int *)(v131 + 8);
      }
      else
      {
        v132 = 0;
      }
      if (v130 == (uint64_t *)v132)
        return 1;
      while ((sub_22EB85C54(a1, *v130) & 1) != 0)
      {
        if (++v130 == (uint64_t *)v132)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v462 = *v461;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v464 = *(_QWORD *)v463 + 8 * *(unsigned int *)(v463 + 8);
      }
      else
      {
        v464 = 0;
      }
      if (v462 == (uint64_t *)v464)
        return 1;
      while ((sub_22EB85C54(a1, *v462) & 1) != 0)
      {
        if (++v462 == (uint64_t *)v464)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v109 = *v108;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v111 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
      }
      else
      {
        v111 = 0;
      }
      if (v109 == (uint64_t *)v111)
        return 1;
      while ((sub_22EB85C54(a1, *v109) & 1) != 0)
      {
        if (++v109 == (uint64_t *)v111)
          return 1;
      }
      return 0;
    case 70:
      v21 = *(_DWORD **)(a2 + 56);
      v24 = *v21;
      v23 = (uint64_t *)(v21 + 4);
      v22 = v24;
      if (!v24)
        return (sub_22EB8546C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v25 = 8 * v22;
      while ((sub_22EB8686C(a1, *v23) & 1) != 0)
      {
        ++v23;
        v25 -= 8;
        if (!v25)
          return (sub_22EB8546C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22EB8546C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22EB56FB0(a1, v62, 0);
        if ((_DWORD)result)
          return (sub_22EB8546C(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v423 = *v422;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v425 = *(_QWORD *)v424 + 8 * *(unsigned int *)(v424 + 8);
      }
      else
      {
        v425 = 0;
      }
      if (v423 == (uint64_t *)v425)
        return 1;
      while ((sub_22EB85C54(a1, *v423) & 1) != 0)
      {
        if (++v423 == (uint64_t *)v425)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v439 = *v438;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v441 = *(_QWORD *)v440 + 8 * *(unsigned int *)(v440 + 8);
      }
      else
      {
        v441 = 0;
      }
      if (v439 == (uint64_t *)v441)
        return 1;
      while ((sub_22EB85C54(a1, *v439) & 1) != 0)
      {
        if (++v439 == (uint64_t *)v441)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22EB84BC4(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v442 = *(_DWORD *)(a2 + 24);
      v443 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v442;
      v560 = v443;
      if (!sub_22EB84C4C(a1, &v558))
        return 0;
      if ((v444 = *(_DWORD *)v4 & 0x7F, v444 <= 0x39) && ((1 << v444) & 0x3F0003E01011066) != 0
        || v444 - 70 <= 0xD && ((1 << (v444 - 70)) & 0x2803) != 0
        || v444 - 19 <= 4)
      {
        v445 = sub_22EFCAE04(a2);
      }
      else
      {
        v445 = 0;
      }
      if (!sub_22EB85BB8(a1, v445))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v447 = *v446;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v449 = *(_QWORD *)v448 + 8 * *(unsigned int *)(v448 + 8);
      }
      else
      {
        v449 = 0;
      }
      while (2)
      {
        if (v447 == (uint64_t *)v449)
          return 1;
        if ((sub_22EB85C54(a1, *v447) & 1) != 0)
        {
          ++v447;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v86 = *(unsigned int **)(a2 + 40);
      v87 = *v86;
      v88 = v86[1];
      if (!(_DWORD)v88)
        goto LABEL_146;
      v89 = &v86[2 * v87 + 4];
      v90 = 8 * v88;
      while ((sub_22EB56FB0(a1, *(_QWORD *)v89, 0) & 1) != 0)
      {
        v89 += 2;
        v90 -= 8;
        if (!v90)
        {
          v86 = *(unsigned int **)(a2 + 40);
          v87 = *v86;
LABEL_146:
          if ((_DWORD)v87)
          {
            v91 = (uint64_t *)(v86 + 4);
            v92 = 8 * v87;
            while ((sub_22EB8686C(a1, *v91) & 1) != 0)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v93 = *(_DWORD *)v4 & 0x7F;
            v94 = v93 > 0x39 || ((1 << v93) & 0x3F0003E01011066) == 0;
            if (v94
              && (v93 - 70 <= 0xD ? (v540 = ((1 << (v93 - 70)) & 0x2803) == 0) : (v540 = 1), v540 && v93 - 19 > 4))
            {
              v95 = 0;
            }
            else
            {
              v95 = sub_22EFCAE04(a2);
            }
            result = sub_22EB85BB8(a1, v95);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v97 = *v96;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
            }
            else
            {
              v99 = 0;
            }
            if (v97 == (uint64_t *)v99)
              return 1;
            while ((sub_22EB85C54(a1, *v97) & 1) != 0)
            {
              if (++v97 == (uint64_t *)v99)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v275 = *(_DWORD **)(a2 + 40);
      v278 = *v275;
      v277 = (uint64_t *)(v275 + 4);
      v276 = v278;
      if (!v278)
        goto LABEL_1013;
      v279 = 8 * v276;
      while ((sub_22EB8686C(a1, *v277) & 1) != 0)
      {
        ++v277;
        v279 -= 8;
        if (!v279)
        {
          v280 = *(_DWORD *)v4 & 0x7F;
          v281 = v280 > 0x39 || ((1 << v280) & 0x3F0003E01011066) == 0;
          if (v281
            && (v280 - 70 <= 0xD ? (v539 = ((1 << (v280 - 70)) & 0x2803) == 0) : (v539 = 1), v539 && v280 - 19 > 4))
          {
LABEL_1013:
            v282 = 0;
          }
          else
          {
            v282 = sub_22EFCAE04(a2);
          }
          result = sub_22EB85BB8(a1, v282);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v549 = *v548;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v551 = *(_QWORD *)v550 + 8 * *(unsigned int *)(v550 + 8);
          }
          else
          {
            v551 = 0;
          }
          if (v549 == (uint64_t *)v551)
            return 1;
          while ((sub_22EB85C54(a1, *v549) & 1) != 0)
          {
            if (++v549 == (uint64_t *)v551)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v26 = *(unsigned int **)(a2 + 40);
      v27 = v26[1];
      if (!(_DWORD)v27)
        goto LABEL_998;
      v28 = &v26[2 * *v26 + 4];
      v29 = 8 * v27;
      while ((sub_22EB56FB0(a1, *(_QWORD *)v28, 0) & 1) != 0)
      {
        v28 += 2;
        v29 -= 8;
        if (!v29)
        {
          v30 = *(_DWORD *)v4 & 0x7F;
          v31 = v30 > 0x39 || ((1 << v30) & 0x3F0003E01011066) == 0;
          if (v31 && (v30 - 70 <= 0xD ? (v534 = ((1 << (v30 - 70)) & 0x2803) == 0) : (v534 = 1), v534 && v30 - 19 > 4))
LABEL_998:
            v32 = 0;
          else
            v32 = sub_22EFCAE04(a2);
          result = sub_22EB85BB8(a1, v32);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v536 = *v535;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v538 = *(_QWORD *)v537 + 8 * *(unsigned int *)(v537 + 8);
          }
          else
          {
            v538 = 0;
          }
          if (v536 == (uint64_t *)v538)
            return 1;
          while ((sub_22EB85C54(a1, *v536) & 1) != 0)
          {
            if (++v536 == (uint64_t *)v538)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      if (v458 == (uint64_t *)v460)
        return 1;
      while ((sub_22EB85C54(a1, *v458) & 1) != 0)
      {
        if (++v458 == (uint64_t *)v460)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v18 = *v17;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (v18 == (uint64_t *)v20)
        return 1;
      while ((sub_22EB85C54(a1, *v18) & 1) != 0)
      {
        if (++v18 == (uint64_t *)v20)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22EB85BB8(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while ((sub_22EB85C54(a1, *v59) & 1) != 0)
      {
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return 0;
    case 81:
      v166 = sub_22EFCAE04(a2);
      result = sub_22EB85BB8(a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      while ((sub_22EB85C54(a1, *v168) & 1) != 0)
      {
        if (++v168 == (uint64_t *)v170)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v160 = *(_DWORD *)v4 & 0x7F, v160 <= 0x39) && ((1 << v160) & 0x3F0003E01011066) != 0
        || v160 - 70 <= 0xD && ((1 << (v160 - 70)) & 0x2803) != 0
        || v160 - 19 <= 4)
      {
        v161 = sub_22EFCAE04(a2);
      }
      else
      {
        v161 = 0;
      }
      result = sub_22EB85BB8(a1, v161);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v163 = *v162;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v165 = *(_QWORD *)v164 + 8 * *(unsigned int *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if (v163 == (uint64_t *)v165)
        return 1;
      break;
    case 83:
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *(_BYTE **)(v11 + 19016);
      v13 = *(_BYTE **)(v11 + 19024);
      v14 = v13 - v12;
      if (v13 == v12)
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v13 - v12);
        memmove(v15, v12, v14);
        v16 = &v15[8 * (v14 >> 3)];
      }
      if (v16 - v15 == 8 && (*(_DWORD *)(*(_QWORD *)v15 + 28) & 0x7F) == 0x53)
      {
        operator delete(v15);
        result = sub_22EB85BB8(a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v15 != v16)
        {
          v500 = v15;
          do
          {
            if ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 35 > 2
               || (v501 = *(_QWORD *)(*(_QWORD *)v500 + 128)) == 0
               || ((*(unsigned __int16 *)(v501 + 8) | (*(unsigned __int8 *)(v501 + 10) << 16)) & 0x100000) == 0)
              && !sub_22EB80A0C(a1))
            {
              if (v15)
                operator delete(v15);
              return 0;
            }
            v500 += 8;
          }
          while (v500 != v16);
        }
        if (v15)
          operator delete(v15);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v503 = *v502;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v505 = *(_QWORD *)v504 + 8 * *(unsigned int *)(v504 + 8);
        }
        else
        {
          v505 = 0;
        }
        for (; v503 != (uint64_t *)v505; ++v503)
        {
          if ((sub_22EB85C54(a1, *v503) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22EB85C54(a1, *v163) & 1) != 0)
  {
    if (++v163 == (uint64_t *)v165)
      return 1;
  }
  return 0;
}

uint64_t sub_22EB84894(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22EB56FB0(a1, *(_QWORD *)(a2 + 152), 0) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22EB84B24(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22EB848DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22EB85BB8(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      if (v10 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v10 + 8;
        do
        {
          result = sub_22EB85C54(a1, *(_QWORD *)(v13 - 8));
          if ((_DWORD)result)
            v14 = v13 == v12;
          else
            v14 = 1;
          v13 += 8;
        }
        while (!v14);
      }
    }
  }
  return result;
}

uint64_t sub_22EB849F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22EB84D04(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28) & 0x7F;
    v8 = v7 > 0x39 || ((1 << v7) & 0x3F0003E01011066) == 0;
    if (v8 && (v7 - 70 <= 0xD ? (v10 = ((1 << (v7 - 70)) & 0x2803) == 0) : (v10 = 1), v10 && v7 - 19 > 4))
      v9 = 0;
    else
      v9 = sub_22EFCAE04(a2);
    result = sub_22EB85BB8(a1, v9);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v12 = *v11;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v14 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v14 = 0;
      }
      if (v12 == v14)
      {
        return 1;
      }
      else
      {
        v15 = v12 + 8;
        do
        {
          result = sub_22EB85C54(a1, *(_QWORD *)(v15 - 8));
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
      }
    }
  }
  return result;
}

uint64_t sub_22EB84B24(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22EB84BC4(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22EB84C4C(a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22EB85AA0(a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EB84BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22EB84BC4(a1, v5, a3), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22EB84D04(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22EB84C4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22EB84D04(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22EB859DC(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EB84D04(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F481D78
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        result = 1;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 - 1;
            goto LABEL_62;
          case 2:
          case 3:
          case 4:
          case 5:
            v21 = *(_QWORD *)(v4 + 32);
            if (v21 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
              v73 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v73 = 1;
            result = sub_22EB84D04(a1, v21, (a3 + v73 + 15) & -v73);
            if (!(_DWORD)result)
              return result;
            v23 = *(_QWORD *)(a3 + 8);
            return sub_22EB56FB0(a1, v23, 0);
          case 6:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 11;
            goto LABEL_62;
          case 7:
          case 0x25:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 7;
            goto LABEL_62;
          case 8:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = v20 + a3;
            goto LABEL_62;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_9;
          case 0xC:
          case 0x37:
          case 0x38:
            goto LABEL_76;
          case 0xD:
          case 0x30:
            v23 = *(_QWORD *)(v4 + 24);
            return sub_22EB56FB0(a1, v23, 0);
          case 0xE:
            result = sub_22EB8546C(a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22EB84BC4(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v25 = *(_DWORD *)(a3 + 28);
            v74 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v75 = v25;
            sub_22EFC6D6C((uint64_t)&v76, v74);
            result = sub_22EB84C4C(a1, &v74);
            if (!(_DWORD)result)
              return result;
            v26 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v26)
              return 1;
            v27 = v4 + 48;
            v28 = (uint64_t *)(a3 + 56);
            v29 = v26 - 1;
            do
            {
              v30 = *v28++;
              v77 = *(_OWORD *)v27;
              v78 = *(_QWORD *)(v27 + 16);
              v79 = v30;
              result = sub_22EB85AA0(a1, (uint64_t)&v77);
              v31 = v29-- != 0;
              v32 = v31;
              if (!(_DWORD)result)
                break;
              v27 += 24;
            }
            while ((v32 & 1) != 0);
            return result;
          case 0xF:
            result = sub_22EB859DC(a1, *(_QWORD *)(v4 + 40));
            if (!(_DWORD)result)
              return result;
            v24 = *(_QWORD *)(v4 + 24);
            return sub_22EB8546C(a1, v24);
          case 0x10:
            v33 = *(_QWORD *)(v4 + 40);
            goto LABEL_96;
          case 0x11:
            v23 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22EB56FB0(a1, v23, 0);
          case 0x12:
            return sub_22EB84BC4(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            v33 = *(_QWORD *)(v4 + 40);
            if (!v33)
              goto LABEL_97;
LABEL_96:
            result = sub_22EB56FB0(a1, v33, 0);
            if (!(_DWORD)result)
              return result;
LABEL_97:
            v24 = *(_QWORD *)(v4 + 48);
            return sub_22EB8546C(a1, v24);
          case 0x14:
            v34 = *(_QWORD *)(a3 + 8);
            if (v34)
            {
              v35 = *(_QWORD *)(v4 + 32);
              if (v35)
              {
                result = sub_22EB84BC4(a1, v35, v34);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v36 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v36)
              return 1;
            v37 = v4 + 48;
            v38 = (uint64_t *)(a3 + 32);
            v39 = v36 - 1;
            do
            {
              v40 = *v38++;
              v77 = *(_OWORD *)v37;
              v78 = *(_QWORD *)(v37 + 16);
              v79 = v40;
              result = sub_22EB85AA0(a1, (uint64_t)&v77);
              v31 = v39-- != 0;
              v41 = v31;
              if (!(_DWORD)result)
                break;
              v37 += 24;
            }
            while ((v41 & 1) != 0);
            return result;
          case 0x15:
            v42 = *(_QWORD *)(v4 + 48);
            if (v42)
            {
              result = sub_22EB56FB0(a1, v42, 0);
              if (!(_DWORD)result)
                return result;
            }
            v24 = *(_QWORD *)(v4 + 40);
            return sub_22EB8546C(a1, v24);
          case 0x18:
            v17 = *(_QWORD *)(v4 + 32);
            if (v17)
            {
              result = sub_22EB84BC4(a1, v17, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              goto LABEL_60;
            v20 = 1;
            goto LABEL_61;
          case 0x19:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v43 = *(_QWORD *)(v4 + 24);
            v44 = sub_22E47EE80(&v77);
            return sub_22EB84D04(a1, v43, v44);
          case 0x1A:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v45 = *(_QWORD *)(v4 + 24);
            v46 = sub_22E47EE80(&v77);
            result = sub_22EB84D04(a1, v45, v46);
            if (!(_DWORD)result)
              return result;
            v47 = v77;
            v48 = *(_QWORD *)(v77 + 16);
            if (*(_BYTE *)(v77 + 16) == 25 || (v48 & 0x3FFFC000000000) == 0)
              goto LABEL_126;
            v50 = 0;
            v51 = (unsigned __int16)(v48 >> 38);
            do
            {
              if (*(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * v50 + 16))
              {
                if ((sub_22EB80A0C(a1) & 1) == 0)
                  return 0;
              }
              else if (v50 < (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38))
              {
                result = sub_22EB8546C(a1, *(_QWORD *)(v47 + 40 + 8 * v50));
                if (!(_DWORD)result)
                  return result;
              }
              ++v50;
            }
            while (v51 != v50);
            v48 = *(_QWORD *)(v47 + 16);
LABEL_126:
            if ((v48 & 0x3C0000000000000) == 0x80000000000000)
            {
              v52 = (_DWORD *)((v47 + 8 * (unsigned __int16)(v48 >> 38) + 4 * ((v48 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              v55 = *v52;
              v54 = (unint64_t *)(v52 + 2);
              v53 = v55;
              if (v55)
              {
                v56 = 8 * v53;
                while ((sub_22EB8546C(a1, *v54) & 1) != 0)
                {
                  ++v54;
                  v56 -= 8;
                  if (!v56)
                    goto LABEL_131;
                }
                return 0;
              }
            }
LABEL_131:
            v57 = sub_22F257D3C(v47);
            if (!v57)
              return 1;
            result = sub_22EB56FB0(a1, v57, 0);
            if ((_DWORD)result)
              return 1;
            return result;
          case 0x1C:
            v4 = *(_QWORD *)(v4 + 24);
LABEL_9:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 3;
            goto LABEL_62;
          case 0x1D:
          case 0x1E:
            result = sub_22EB56FB0(a1, *(_QWORD *)(a3 + 16), 0);
            if (!(_DWORD)result)
              return result;
            result = sub_22EB56FB0(a1, *(_QWORD *)(a3 + 24), 0);
            if (!(_DWORD)result)
              return result;
LABEL_76:
            v24 = *(_QWORD *)(v4 + 32);
            return sub_22EB8546C(a1, v24);
          case 0x1F:
            v19 = *(_QWORD **)(a3 + 8);
            if (v19)
            {
              if ((sub_22EB84D04(a1, *v19, v19 + 1) & 1) == 0)
                return 0;
            }
            else
            {
              result = sub_22EB8546C(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
            v20 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
LABEL_60:
              v20 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
LABEL_61:
            v10 = a3 + v20 + 15;
LABEL_62:
            a3 = v10 & -v20;
            break;
          case 0x21:
            v58 = *(_QWORD *)(v4 + 24);
            v59 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
            if (v59 != v4)
            {
              v60 = 1;
              if (v58 >= 0x10 && (v58 & 0xF) == 0)
                v60 = *(_QWORD *)((char *)&unk_22F481D78
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v59 + 16) << 56) >> 53));
              result = sub_22EB84D04(a1, v58, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v60- 1) & -v60);
              if (!(_DWORD)result)
                return result;
            }
            v61 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v61)
              return 1;
            v62 = (_QWORD *)(a3 + 24);
            v63 = v61 - 1;
            do
            {
              v64 = (_QWORD *)*v62++;
              result = sub_22EB84D04(a1, *v64, v64 + 1);
              v31 = v63-- != 0;
              v65 = v31;
            }
            while ((_DWORD)result && (v65 & 1) != 0);
            return result;
          case 0x2A:
            v66 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v77 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v77) = 8;
            DWORD1(v77) = v66;
            return sub_22EB85910(a1, (uint64_t)&v77);
          case 0x2B:
            v24 = *(_QWORD *)(v4 + 8);
            return sub_22EB8546C(a1, v24);
          case 0x2E:
            result = sub_22EB859DC(a1, *(_QWORD *)(v4 + 32));
            if (!(_DWORD)result)
              return result;
            v67 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v67)
              return 1;
            v68 = v4 + 40;
            v69 = (uint64_t *)(a3 + 16);
            v70 = v67 - 1;
            do
            {
              v71 = *v69++;
              v77 = *(_OWORD *)v68;
              v78 = *(_QWORD *)(v68 + 16);
              v79 = v71;
              result = sub_22EB85AA0(a1, (uint64_t)&v77);
              v31 = v70-- != 0;
              v72 = v31;
              if (!(_DWORD)result)
                break;
              v68 += 24;
            }
            while ((v72 & 1) != 0);
            return result;
          case 0x31:
          case 0x33:
            v13 = *(unint64_t **)(a3 + 16);
            v14 = *v13;
            a3 = (uint64_t)(v13 + 1);
            v4 = v14;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return result;
        }
      }
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_22EB8546C(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _DWORD v45[2];
  uint64_t v46;

  if (a2 < 0x10)
    return 1;
  while (2)
  {
    v4 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    v5 = *(_DWORD *)(v4 + 16);
    result = 1;
    switch((char)v5)
    {
      case 0:
      case 1:
      case 4:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 29:
      case 32:
      case 36:
      case 37:
      case 38:
      case 39:
      case 54:
      case 55:
      case 56:
        goto LABEL_5;
      case 2:
        result = sub_22EB8546C(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        if ((*(_BYTE *)(v4 + 19) & 2) == 0)
          return 1;
        v14 = *(_QWORD *)(v4 + 56);
        if (!v14)
          return 1;
        goto LABEL_49;
      case 3:
        result = sub_22EB8546C(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v14 = *(_QWORD *)(v4 + 48);
        if (v14)
          goto LABEL_49;
        return 1;
      case 5:
        result = sub_22EB8546C(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v13 = *(_QWORD *)(v4 + 40);
        return sub_22EB56FB0(a1, v13, 0);
      case 13:
      case 48:
        v13 = *(_QWORD *)(v4 + 24);
        return sub_22EB56FB0(a1, v13, 0);
      case 14:
        result = sub_22EB8546C(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        if (!*(_QWORD *)(v4 + 40))
          return 1;
        result = sub_22EB80A0C(a1);
        if (!(_DWORD)result)
          return result;
        v15 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v15)
          return 1;
        v16 = v4 + 48;
        v17 = v15 - 1;
        do
        {
          result = sub_22EB85910(a1, v16);
          v18 = v17-- != 0;
          v19 = v18;
          if (!(_DWORD)result)
            break;
          v16 += 24;
        }
        while ((v19 & 1) != 0);
        return result;
      case 15:
        result = sub_22EB859DC(a1, *(_QWORD *)(v4 + 40));
        if ((_DWORD)result)
          goto LABEL_19;
        return result;
      case 16:
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_22;
      case 17:
        v13 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
        return sub_22EB56FB0(a1, v13, 0);
      case 18:
        return sub_22EB85A3C(a1, *(_QWORD *)(v4 + 32));
      case 19:
        v7 = *(_QWORD *)(v4 + 40);
        if (!v7)
          goto LABEL_23;
LABEL_22:
        result = sub_22EB56FB0(a1, v7, 0);
        if (!(_DWORD)result)
          return result;
LABEL_23:
        v6 = (unint64_t *)(v4 + 48);
        goto LABEL_6;
      case 20:
        result = sub_22EB85A3C(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v20 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v20)
          return 1;
        v21 = v4 + 48;
        v22 = v20 - 1;
        do
        {
          result = sub_22EB85910(a1, v21);
          v18 = v22-- != 0;
          v23 = v18;
          if (!(_DWORD)result)
            break;
          v21 += 24;
        }
        while ((v23 & 1) != 0);
        return result;
      case 21:
        v8 = *(_QWORD *)(v4 + 48);
        if (v8)
        {
          result = sub_22EB56FB0(a1, v8, 0);
          if (!(_DWORD)result)
            return result;
        }
        goto LABEL_31;
      case 22:
        goto LABEL_34;
      case 23:
        v9 = *(_QWORD *)(v4 + 64);
        if (!v9)
          goto LABEL_5;
        goto LABEL_35;
      case 24:
        v10 = *(_QWORD *)(v4 + 32);
        if (v10)
        {
          result = sub_22EB85A3C(a1, v10);
          if (!(_DWORD)result)
            return result;
        }
LABEL_31:
        v6 = (unint64_t *)(v4 + 40);
        goto LABEL_6;
      case 25:
      case 28:
      case 49:
LABEL_19:
        v6 = (unint64_t *)(v4 + 24);
        goto LABEL_6;
      case 26:
        result = sub_22EB8546C(a1, *(_QWORD *)(v4 + 24));
        if (!(_DWORD)result)
          return result;
        v24 = *(_QWORD *)(v4 + 16);
        v25 = (unsigned __int16)(v24 >> 38);
        if (!(unsigned __int16)(v24 >> 38))
          goto LABEL_82;
        v26 = 8 * v25;
        v27 = (_QWORD *)(v4 + 40);
        break;
      case 30:
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
        {
          result = sub_22EB56FB0(a1, v11, 0);
          if (!(_DWORD)result)
            return result;
        }
LABEL_34:
        v9 = *(_QWORD *)(v4 + 56);
        if (!v9)
          goto LABEL_5;
LABEL_35:
        result = sub_22EB56FB0(a1, v9, 0);
        if (!(_DWORD)result)
          return result;
LABEL_5:
        v6 = (unint64_t *)(v4 + 32);
LABEL_6:
        a2 = *v6;
        if (*v6 < 0x10)
          return 1;
        continue;
      case 31:
        v12 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0;
        goto LABEL_40;
      case 33:
        v34 = *(_QWORD *)(v4 + 24);
        if (*(_QWORD *)(v34 & 0xFFFFFFFFFFFFFFF0) != v4)
        {
          result = sub_22EB8546C(a1, v34);
          if (!(_DWORD)result)
            return result;
        }
        v35 = (*(_QWORD *)(v4 + 16) >> 19) & 0x7FLL;
        if (!v35)
          return 1;
        v36 = (uint64_t *)(v4 + 48);
        v37 = 8 * v35 - 8;
        do
        {
          v38 = *v36++;
          result = sub_22EB8546C(a1, v38);
          if ((_DWORD)result)
            v39 = v37 == 0;
          else
            v39 = 1;
          v37 -= 8;
        }
        while (!v39);
        return result;
      case 40:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 41:
        while ((v5 & 0x100000) != 0)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 + 16);
            if ((v5 & 0xFE) == 0x28)
              continue;
          }
          v4 = sub_22F10CF48(v4);
          v5 = *(_DWORD *)(v4 + 16);
        }
        goto LABEL_5;
      case 42:
        v40 = *(_DWORD *)(v4 + 20);
        v46 = *(_QWORD *)(v4 + 40);
        v45[0] = 8;
        v45[1] = v40;
        return sub_22EB85910(a1, (uint64_t)v45);
      case 43:
        v6 = (unint64_t *)(v4 + 8);
        goto LABEL_6;
      case 46:
        result = sub_22EB859DC(a1, *(_QWORD *)(v4 + 32));
        if (!(_DWORD)result)
          return result;
        v41 = *(unsigned int *)(v4 + 20);
        if (!(_DWORD)v41)
          return 1;
        v42 = v4 + 40;
        v43 = v41 - 1;
        do
        {
          result = sub_22EB85910(a1, v42);
          v18 = v43-- != 0;
          v44 = v18;
          if (!(_DWORD)result)
            break;
          v42 += 24;
        }
        while ((v44 & 1) != 0);
        return result;
      case 51:
        v12 = *(_QWORD *)(v4 + 24);
LABEL_40:
        result = sub_22EB8546C(a1, v12);
        if (!(_DWORD)result)
          return result;
        goto LABEL_5;
      default:
        return result;
    }
    break;
  }
  do
  {
    if ((sub_22EB8546C(a1, *v27) & 1) == 0)
      return 0;
    ++v27;
    v26 -= 8;
  }
  while (v26);
  v24 = *(_QWORD *)(v4 + 16);
  v25 = (unsigned __int16)(v24 >> 38);
LABEL_82:
  if ((v24 & 0x3C0000000000000) == 0x80000000000000)
  {
    v28 = (_DWORD *)((v4 + 40 + 8 * v25 + 4 * ((v24 >> 59) & 1) + 7) & 0xFFFFFFFFFFFFFFF8);
    v31 = *v28;
    v30 = v28 + 2;
    v29 = v31;
    if (v31)
    {
      v32 = 8 * v29;
      while ((sub_22EB8546C(a1, *v30) & 1) != 0)
      {
        ++v30;
        v32 -= 8;
        if (!v32)
          goto LABEL_87;
      }
      return 0;
    }
  }
LABEL_87:
  v33 = sub_22F257D3C(v4);
  if (!v33)
    return 1;
  v14 = v33;
LABEL_49:
  result = sub_22EB56FB0(a1, v14, 0);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EB85910(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22EB8546C(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22EB859DC(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v4 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)(a2 + 8);
        v6 = v4 - 1;
        do
        {
          result = sub_22EB85910(a1, v5);
          v8 = v6-- != 0;
          if (!(_DWORD)result)
            break;
          v5 += 24;
        }
        while (v8);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EB859DC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) != 6 || v2 == 0)
  {
    if ((a2 & 6) != 4)
      return 1;
    if (!v2)
      return 1;
    result = sub_22EB85A3C(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v5 = sub_22EB85A3C(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  return result;
}

uint64_t sub_22EB85A3C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22EB85A3C(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22EB8546C(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22EB85AA0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
        result = sub_22EB84D04(a1, *v6, v6 + 1);
      else
        result = sub_22EB8546C(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22EB84BC4(a1, *v5, v5[1]), (_DWORD)result))
        result = sub_22EB859DC(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = v7 - 1;
        do
        {
          result = sub_22EB85910(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EB85BB8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22EB80A0C(a1);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22EB85C54(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22EB85CD8()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22EB56FB0(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22EB85C94);
  JUMPOUT(0x22EB85CC8);
}

void sub_22EB85CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22EB56FB0(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EB85CC4);
    v6 = *(uint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EB56FB0(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EB85CC8);
}

void sub_22EB85E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EB56FB0(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EB85CC8);
}

void sub_22EB85E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EB56FB0(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EB85CC8);
}

void sub_22EB85E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EB56FB0(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EB85CC8);
}

void sub_22EB85ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EB56FB0(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EB85CC4);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EB56FB0(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EB85CC8);
}

void sub_22EB85F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EB56FB0(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EB85CC8);
}

void sub_22EB85F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (sub_22EB56FB0(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22EB56FB0(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22EB85E24);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EB85CC4);
    v6 = *(uint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EB56FB0(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EB85CC8);
}

void sub_22EB85FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EB56FB0(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EB85CC8);
}

void sub_22EB8600C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EB56FB0(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EB85CC8);
}

void sub_22EB86044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EB56FB0(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EB85CC4);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EB56FB0(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EB85CC8);
}

void sub_22EB86090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EB56FB0(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EB85CC4);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EB56FB0(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EB85CC8);
}

void sub_22EB860DC()
{
  JUMPOUT(0x22EB85CB0);
}

void sub_22EB860E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (sub_22EB56FB0(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22EB56FB0(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22EB85E24);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22EB56FB0(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22EB56FB0(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22EB56FB0(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22EB85CC4);
    v15 = *(uint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22EB56FB0(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22EB85CC8);
}

uint64_t sub_22EB861F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = a2 + 16;
    while ((sub_22EB80A0C(a1) & 1) != 0)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v8)
      return 1;
    result = sub_22EB56FB0(a1, v8, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EB86290(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EB861F0(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22EB84BC4(a1, v7, v8);
}

uint64_t sub_22EB86304(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22EB86290(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22EB84D04(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22EB8637C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EB861F0(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EB84BC4(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        return (sub_22EB84D04(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    else if (v10 >= 8)
    {
      v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      return (sub_22EB84D04(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    result = sub_22EB8546C(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22EB86448(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EB861F0(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EB84BC4(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v38 = *(_QWORD *)(a2 + 40);
    v39 = v10;
    v40 = v11;
    result = sub_22EB84C4C(a1, &v38);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22EB85AA0(a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        result = sub_22EB84D04(a1, *v18, (uint64_t)(v18 + 1));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a2 + 56);
      }
      if ((v17 & 4) == 0
        || (v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22EB56FB0(a1, v19, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v20 = sub_22EFD7ED0(a2);
          v21 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v20 != v21)
          {
            v22 = *(_QWORD *)v20;
            if ((*(_WORD *)(*(_QWORD *)v20 + 28) & 4) != 0)
            {
              v23 = (unint64_t *)(*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v22 & 6) != 0 || v23 == 0)
                goto LABEL_37;
              result = sub_22EB84D04(a1, *v23, (uint64_t)(v23 + 1));
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v22 + 28) & 4) != 0)
              {
LABEL_37:
                result = sub_22EB56FB0(a1, *(_QWORD *)(v22 + 8), 0);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v20 += 8;
          }
        }
        v25 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_70;
        v26 = *(_WORD *)(a2 + 80) & 0x7F;
        v27 = -40;
        if (v26 > 0x46)
        {
          if (v26 == 83)
            goto LABEL_60;
          if (v26 == 71)
          {
            v27 = -56;
            goto LABEL_60;
          }
          if (v26 != 81)
          {
LABEL_55:
            v28 = v26 - 52;
            v29 = v26 - 33 >= 5;
            v30 = -48;
            if (!v29)
              v30 = -64;
            if (v28 >= 6)
              v27 = v30;
            else
              v27 = -72;
          }
        }
        else
        {
          if (v26 > 0x18)
            goto LABEL_54;
          if (v26 == 16)
          {
LABEL_46:
            v27 = -48;
            goto LABEL_60;
          }
          if (((1 << v26) & 0x1066) == 0)
          {
            if (v26 == 24)
              goto LABEL_46;
LABEL_54:
            if (v26 == 70)
            {
              v27 = -64;
              goto LABEL_60;
            }
            goto LABEL_55;
          }
        }
LABEL_60:
        v31 = *(_QWORD *)(a2 + 72 + v27 + 16);
        v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (_QWORD *)*v32;
        if (v32)
        {
          v33 = v32[8];
          if (v33)
          {
            if (((*(unsigned __int16 *)(v33 + 8) | (*(unsigned __int8 *)(v33 + 10) << 16)) & 0x100000) != 0)
            {
              v34 = sub_22EFD462C((unint64_t)(v32 - 8));
              if (v34)
              {
                if ((*(_DWORD *)(v34 + 28) & 0x7F) != 0x1D || (v34 = *(_QWORD *)(v34 + 48)) != 0)
                {
                  if (v34 == a2
                    || (v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34),
                        v35 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v25)
                      return 1;
LABEL_71:
                    v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22EB56FB0(a1, v36, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v37 = *(_QWORD *)(a2 + 88);
                    if (v37)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v37 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22EB80A0C(a1);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v37);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_70:
        if (!v25)
          return 1;
        goto LABEL_71;
      }
    }
  }
  return result;
}

uint64_t sub_22EB8680C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22EB8637C(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22EB56FB0(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EB8686C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22EB56FB0(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22EB56FB0(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22EB56FB0(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22EB56FB0(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22EB56FB0(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22EB56FB0(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22EB56FB0(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22EB56FB0(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22EB56FB0(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22EB56FB0(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22EB56FB0(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22EB56FB0(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22EB56FB0(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22EB56FB0(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22EB56FB0(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22EB56FB0(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22EB56FB0(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22EB56FB0(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22EB56FB0(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22EB56FB0(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22EB56FB0(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22EB56FB0(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22EB56FB0(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22EB56FB0(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22EB84BC4(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EB84C4C(a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22EB56FB0(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22EB56FB0(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EB56FB0(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22EB56FB0(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22EB56FB0(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22EB56FB0(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22EB56FB0(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22EB56FB0(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22EB56FB0(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22EB56FB0(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22EB56FB0(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22EB56FB0(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22EB56FB0(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22EB56FB0(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22EB56FB0(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22EB56FB0(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EB56FB0(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22EB56FB0(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22EB56FB0(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22EB56FB0(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22EB56FB0(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22EB56FB0(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22EB56FB0(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22EB56FB0(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22EB56FB0(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22EB56FB0(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22EB56FB0(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22EB56FB0(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22EB84BC4(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22EB84C4C(a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22EB56FB0(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22EB56FB0(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EB56FB0(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22EB56FB0(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22EB56FB0(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22EB56FB0(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22EB56FB0(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22EB56FB0(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22EB56FB0(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22EB56FB0(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22EB56FB0(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22EB56FB0(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22EB56FB0(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22EB56FB0(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22EB84BC4(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EB84C4C(a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22EB56FB0(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22EB56FB0(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EB56FB0(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22EB56FB0(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22EB56FB0(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22EB56FB0(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22EB56FB0(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22EB56FB0(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22EB56FB0(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22EB56FB0(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22EB56FB0(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22EB56FB0(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

uint64_t sub_22EB87920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22EB56FB0(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22EB56FB0(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

unsigned int *sub_22EB87A1C(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15[24];
  _QWORD v16[2];

  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
    v7 = *(unsigned __int8 *)(v6 + 16) - 27 > 0xFFFFFFFD;
  else
    v7 = 0;
  if (!v7)
    v6 = sub_22F10CF48(v6);
  v8 = (*(_DWORD *)(v6 + 16) >> 19) & 0x1F;
  v16[0] = 0;
  if (v8 == 4)
  {
    v16[0] = "vectorcall";
    v9 = 10;
  }
  else if (v8 == 2)
  {
    v16[0] = "fastcall";
    v9 = 8;
  }
  else
  {
    v16[0] = "stdcall";
    v9 = 7;
  }
  v16[1] = v9;
  sub_22E8FCA40(a2, a3, 0xBD7u, 0, (uint64_t)v15);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  v10 = sub_22E894538((uint64_t)v15, &v14);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
  v11 = sub_22E894538(v10, &v13);
  sub_22F2F2210(v11, (uint64_t)v16);
  return sub_22E903BEC(v15);
}

void sub_22EB87B24()
{
  JUMPOUT(0x2348A0E9CLL);
}

BOOL sub_22EB87B38(uint64_t a1)
{
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  if ((**(_QWORD **)(a1 + 128) & 4) != 0)
    return 0;
  sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a1 + 104) + 96), *(_QWORD *)(a1 + 104));
  return (**(_QWORD **)(a1 + 128) & 0x400000000) == 0;
}

uint64_t sub_22EB87B90(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  size_t *v12;
  size_t v13;

  v4 = a1[1];
  if (!a3)
    return sub_22E49F484((uint64_t)a1, a1[1]);
  v6 = 16 * a3;
  v7 = (uint64_t *)(a2 + 8);
  v8 = 16 * a3;
  v9 = a1[1];
  do
  {
    v10 = *v7;
    v7 += 2;
    v9 += v10;
    v8 -= 16;
  }
  while (v8);
  result = sub_22E49F484((uint64_t)a1, v9);
  v12 = (size_t *)(a2 + 8);
  do
  {
    if (*v12)
    {
      result = (uint64_t)memmove((void *)(*a1 + v4), (const void *)*(v12 - 1), *v12);
      v13 = *v12;
    }
    else
    {
      v13 = 0;
    }
    v4 += v13;
    v12 += 2;
    v6 -= 16;
  }
  while (v6);
  return result;
}

uint64_t sub_22EB87C38(uint64_t a1, unsigned int *a2)
{
  unint64_t v3;
  _BOOL4 v4;

  v3 = *a2;
  v4 = (v3 & 0x100000) != 0 && a2[6 * ((v3 >> 19) & 1) + 12] != 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_BYTE *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0x800000000;
  *(_QWORD *)(a1 + 280) = 0;
  if (v4)
    sub_22F330C78(a2, a1 + 8);
  return a1;
}

void **sub_22EB87CB4(uint64_t a1, void **a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;

  result = sub_22E3BA914((llvm::SmallPtrSetImplBase *)a1, *a2);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = 16;
  if (v5 == *(_QWORD *)a1)
    v6 = 20;
  if (result != (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
  {
    *result = (void *)-2;
    ++*(_DWORD *)(a1 + 24);
    result = *(void ***)(a1 + 64);
    v7 = *(unsigned int *)(a1 + 72);
    v8 = &result[v7];
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      while (*result != *a2)
      {
        ++result;
        v9 -= 8;
        if (!v9)
        {
          result = v8;
          break;
        }
      }
    }
    if (v8 != result + 1)
    {
      result = (void **)memmove(result, result + 1, (char *)v8 - (char *)(result + 1));
      LODWORD(v7) = *(_DWORD *)(a1 + 72);
    }
    *(_DWORD *)(a1 + 72) = v7 - 1;
  }
  return result;
}

__n128 sub_22EB87D64(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_22EB87F7C((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[4] + a1[5];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

_QWORD *sub_22EB87DEC(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x23489D23C](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_22EB87EAC(a1, (uint64_t)v4, (uint64_t)v4 + 16 * v3);
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t sub_22EB87EAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_22EA45010(v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void sub_22EB87F58(uint64_t a1)
{
  sub_22EE46380(*(_QWORD *)a1, **(_DWORD **)(a1 + 8), **(_QWORD **)(a1 + 16), 0, 0, 0);
}

void sub_22EB87F7C(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_33:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v29 = 1;
      else
        v29 = (v6 - v10) >> 2;
      if (!(v29 >> 61))
      {
        v30 = (char *)operator new(8 * v29);
        v31 = &v30[8 * (v29 >> 2)];
        v32 = &v30[8 * v29];
        v34 = v6 - v7;
        v33 = v6 == v7;
        v6 = v31;
        if (!v33)
        {
          v6 = &v31[v34 & 0xFFFFFFFFFFFFFFF8];
          v35 = 8 * (v34 >> 3);
          v36 = &v30[8 * (v29 >> 2)];
          do
          {
            v37 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v36 = v37;
            v36 += 8;
            v35 -= 8;
          }
          while (v35);
        }
        goto LABEL_31;
      }
LABEL_47:
      sub_22E3B3F8C();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_33;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v19 = v18 - *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 24);
  v21 = v20 - *(_QWORD *)a1;
  if (v19 < v21)
  {
    if (v20 != v18)
    {
      *(_QWORD *)&v46 = operator new(0x1000uLL);
      sub_22F2D2D80(a1, &v46);
      return;
    }
    *(_QWORD *)&v46 = operator new(0x1000uLL);
    sub_22F2D2EA4((void **)a1, &v46);
    v38 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v39 = *v38;
    v7 = (char *)(v38 + 1);
    v8 = v39;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_33;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v40 = 1;
      else
        v40 = (v6 - v10) >> 2;
      if (!(v40 >> 61))
      {
        v30 = (char *)operator new(8 * v40);
        v31 = &v30[8 * (v40 >> 2)];
        v32 = &v30[8 * v40];
        v41 = v6 - v7;
        v33 = v6 == v7;
        v6 = v31;
        if (!v33)
        {
          v6 = &v31[v41 & 0xFFFFFFFFFFFFFFF8];
          v42 = 8 * (v41 >> 3);
          v43 = &v30[8 * (v40 >> 2)];
          do
          {
            v44 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v43 = v44;
            v43 += 8;
            v42 -= 8;
          }
          while (v42);
        }
LABEL_31:
        *(_QWORD *)a1 = v30;
        *(_QWORD *)(a1 + 8) = v31;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v32;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_33;
      }
      goto LABEL_47;
    }
    goto LABEL_5;
  }
  if (v20 == *(_QWORD *)a1)
    v22 = 1;
  else
    v22 = v21 >> 2;
  v48 = a1 + 24;
  if (v22 >> 61)
    goto LABEL_47;
  *(_QWORD *)&v46 = operator new(8 * v22);
  *((_QWORD *)&v46 + 1) = v46 + v19;
  *(_QWORD *)&v47 = v46 + v19;
  *((_QWORD *)&v47 + 1) = v46 + 8 * v22;
  v45 = operator new(0x1000uLL);
  sub_22F2C31E8((uint64_t)&v46, &v45);
  v23 = *(char **)(a1 + 16);
  if (v23 == *(char **)(a1 + 8))
  {
    v24 = *(char **)(a1 + 16);
  }
  else
  {
    do
    {
      v23 -= 8;
      sub_22F2C331C((const void **)&v46, v23);
    }
    while (v23 != *(char **)(a1 + 8));
    v24 = *(char **)(a1 + 16);
  }
  v25 = *(char **)a1;
  v26 = v46;
  v27 = v47;
  *(_QWORD *)&v46 = *(_QWORD *)a1;
  *((_QWORD *)&v46 + 1) = v23;
  v28 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a1 = v26;
  *(_OWORD *)(a1 + 16) = v27;
  *(_QWORD *)&v47 = v24;
  *((_QWORD *)&v47 + 1) = v28;
  if (v24 != v23)
    *(_QWORD *)&v47 = &v24[(v23 - v24 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v25)
    operator delete(v25);
}

void sub_22EB88244(uint64_t a1, _DWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a2;
  if (a2 && (v2 & 0xFE) == 0x70)
  {
    switch((*a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_7;
      default:
        goto LABEL_5;
    }
  }
  if (!a2 || v2 != 233)
LABEL_5:
    __asm { BR              X9 }
LABEL_7:
  sub_22EB88778(a1, (uint64_t)a2);
}

void sub_22EB88478()
{
  uint64_t v0;
  uint64_t *v1;

  if ((sub_22EFFA934(v0, *v1) & 1) != 0)
    JUMPOUT(0x22EB88488);
  JUMPOUT(0x22EB88434);
}

void sub_22EB8849C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  sub_22EB88654(v9, v8, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_22EB884B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (!*(_BYTE *)(v1 + 16))
    return sub_22EB22288(*(_QWORD *)(v1 + 8), v0, 0);
  v2 = *(_QWORD *)(v0 + 16);
  if (!v2)
    return sub_22EB22288(*(_QWORD *)(v1 + 8), v0, 0);
  if ((*(_DWORD *)(v2 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
    return sub_22EB22288(*(_QWORD *)(v1 + 8), v0, 0);
  result = sub_22E3CB5E0(v2);
  if ((result & 1) == 0)
    return sub_22EB22288(*(_QWORD *)(v1 + 8), v0, 0);
  return result;
}

void sub_22EB88504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _DWORD **v3;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(v0 + 4);
  if (*(_WORD *)(v0 + 4))
  {
    v3 = (_DWORD **)(v0 + 32);
    v4 = 8 * v2;
    do
    {
      if (*v3)
        sub_22EB88244(v1, *v3);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
}

void sub_22EB88534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
    sub_22EB4E494(*(_QWORD *)(v9 + 8), *(_DWORD *)(v8 + 40), v10, 1, a5, a6, a7, a8);
  v11 = *(_QWORD *)(v8 + 24);
  if (v11)
    sub_22EB4E494(*(_QWORD *)(v9 + 8), *(_DWORD *)(v8 + 40), v11, 1, a5, a6, a7, a8);
  JUMPOUT(0x22EB88434);
}

void sub_22EB88654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;

  if (*(_BYTE *)a2 != 119)
  {
    v10 = *(_DWORD *)(a2 + 4);
    goto LABEL_3;
  }
  v11 = **(_QWORD **)(a2 + 40);
  for (i = v11; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_15;
      v13 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v13 <= 0x39)
        break;
LABEL_10:
      if (sub_22F115668(i))
        v11 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_17;
    }
    if (v13 == 24)
      goto LABEL_16;
    if (v13 == 26)
      break;
    if (((1 << v13) & 0x20000000200003CLL) == 0)
      goto LABEL_10;
LABEL_15:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_15;
LABEL_16:
  v11 = i;
LABEL_17:
  v10 = sub_22F115668(v11);
LABEL_3:
  sub_22EB4E494(*(_QWORD *)(a1 + 8), v10, *(_QWORD *)(a2 + 16), 1, a5, a6, a7, a8);
  sub_22EB88778(a1, a2);
}

void sub_22EB88778(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  sub_22F0D492C(a2);
  v9 = v11;
  v3 = v13;
  v10 = v12;
  v4 = v14;
  v6 = *((_QWORD *)&v11 + 1);
  v5 = (uint64_t *)v11;
  if ((_QWORD)v11 != v13 || *((_QWORD *)&v11 + 1) != v14)
  {
    do
    {
      v8 = v5;
      if ((v6 & 3) != 0)
      {
        if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
          v8 = (_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + 40);
        else
          v8 = (_QWORD *)sub_22F3AC1A8(*v5);
      }
      if (*v8)
        sub_22EB88244(a1);
      if ((v6 & 3) != 0)
      {
        if (v6 < 4)
          sub_22F3F2FE0((uint64_t)&v9, 1);
        else
          sub_22F0D8720((uint64_t)&v9);
      }
      else
      {
        *(_QWORD *)&v9 = v5 + 1;
      }
      v6 = *((_QWORD *)&v9 + 1);
      v5 = (uint64_t *)v9;
    }
    while (v9 != __PAIR128__(v4, v3));
  }
}

unint64_t *sub_22EB88854(unint64_t *result, _BYTE *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t *v5;

  if (a3 == 1)
  {
    a3 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFFBLL;
  }
  else if (a3)
  {
    v5 = result;
    v3 = a3;
    v4 = operator new();
    *(_QWORD *)v4 = v4 + 16;
    *(_QWORD *)(v4 + 8) = 0x400000000;
    sub_22F2633B0(v4, a2, &a2[8 * v3]);
    result = v5;
    a3 = v4 | 4;
  }
  *result = a3;
  return result;
}

unsigned int *sub_22EB888E0(uint64_t a1, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14[24];
  uint64_t v15;

  v15 = a4;
  v6 = (uint64_t *)(a1 + 8);
  if (*(_QWORD *)(a1 + 8))
  {
    sub_22E8FCA40(a2, a3, 0xBACu, 0, (uint64_t)v14);
    sub_22F0D4E74(*(_QWORD *)(a1 + 16));
    v13 = v7;
    v8 = sub_22E8906A0((uint64_t)v14, &v13);
    v9 = sub_22E890024(v8, v6);
    sub_22E8901B8(v9, &v15);
    sub_22E903BEC(v14);
    sub_22E8FCA40(a2, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 24), 0x15C9u, 0, (uint64_t)v14);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
    sub_22E894538((uint64_t)v14, &v13);
  }
  else
  {
    sub_22E8FCA40(a2, a3, 0xBAEu, 0, (uint64_t)v14);
    v10 = sub_22E8901B8((uint64_t)v14, &v15);
    sub_22F0D4E74(*(_QWORD *)(a1 + 16));
    v13 = v11;
    sub_22E8906A0(v10, &v13);
  }
  return sub_22E903BEC(v14);
}

void sub_22EB889E4()
{
  JUMPOUT(0x2348A0E9CLL);
}

uint64_t sub_22EB889F8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, int a5)
{
  int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v10;
  unsigned int v11;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_BYTE *)(a1 + 16) = 0;
  if (a5 && a4)
  {
    v6 = *(_DWORD *)a4;
    *(_BYTE *)(a1 + 17) = (*(_DWORD *)a4 & 0x10000) == 0;
    if ((v6 & 0x10000) != 0)
    {
      v8 = 0;
    }
    else
    {
      sub_22F007D7C(a4, *(_QWORD *)(a2 + 88), 0, (uint64_t)&v10);
      v7 = v11;
      if (v11 > 0x40)
      {
        v8 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v10) != v7;
        if (v10)
          MEMORY[0x2348A0E84](v10, 0x1000C8000313F17);
      }
      else
      {
        v8 = v10 != 0;
      }
    }
  }
  else
  {
    v8 = 0;
    *(_BYTE *)(a1 + 17) = 0;
  }
  *(_BYTE *)(a1 + 18) = v8;
  return a1;
}

uint64_t sub_22EB88AB8(_QWORD **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = a2;
  v4 = *a2;
  if (a2 && (v4 & 0xFE) == 0x70)
  {
    v5 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x3F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
        goto LABEL_11;
      default:
        goto LABEL_9;
    }
  }
  if (a2 && v4 == 233)
  {
    v5 = *(_DWORD *)a2;
    switch((*(_DWORD *)a2 >> 18) & 0x1F)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xD:
LABEL_11:
        sub_22EB88C28(*a1, (uint64_t)a2);
        return 1;
      case 4:
        v6 = sub_22EB88AB8(a1, *((_QWORD *)a2 + 2));
        if ((v6 & 1) != 0)
          return 1;
        *((_QWORD *)v2 + 2) = v6 & 0xFFFFFFFFFFFFFFFELL;
        *((_QWORD *)v2 + 1) = sub_22EF5B848((*a1)[11], *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFFELL) + 8), 0);
        return (uint64_t)v2;
      case 0xC:
        v8 = sub_22EB88AB8(a1, *((_QWORD *)a2 + 2));
        if ((v8 & 1) != 0)
          return 1;
        *((_QWORD *)v2 + 1) = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
        *((_QWORD *)v2 + 2) = v8 & 0xFFFFFFFFFFFFFFFELL;
        *(_DWORD *)v2 = *(_DWORD *)v2 & 0xFFFFFCFF | (((*(_DWORD *)(v8 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 3) << 8);
        return (uint64_t)v2;
      default:
LABEL_9:
        v4 = v5;
        break;
    }
  }
  __asm { BR              X10 }
  return result;
}

uint64_t sub_22EB88BE4()
{
  uint64_t v0;
  _QWORD **v1;

  return sub_22EB88C90(v1, v0, *(_QWORD *)(v0 + 16));
}

void sub_22EB88C04()
{
  uint64_t v0;
  _QWORD **v1;
  uint64_t v2;

  v2 = sub_22EB88AB8(v1, *(unsigned __int8 **)(v0 + 24));
  if ((v2 & 1) == 0)
  {
    *(_QWORD *)(v0 + 24) = v2 & 0xFFFFFFFFFFFFFFFELL;
    *(_QWORD *)(v0 + 8) = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
    JUMPOUT(0x22EB88BCCLL);
  }
  JUMPOUT(0x22EB88B9CLL);
}

unsigned int *sub_22EB88C28(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8[24];

  sub_22EFF605C(a2);
  sub_22E8FCA40(a1, v4, 0x13D7u, 0, (uint64_t)v8);
  sub_22F0D4E74(a2);
  v7 = v5;
  sub_22E8906A0((uint64_t)v8, &v7);
  return sub_22E903BEC(v8);
}

uint64_t sub_22EB88C90(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;

  v3 = (_DWORD *)a2;
  if ((*(_DWORD *)(a3 + 28) & 0x7Eu) - 52 >= 6)
  {
    sub_22EB88C28(*a1, a2);
    return 1;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 48);
    if ((*(_BYTE *)((*a1)[9] + 1) & 1) != 0
      && ((*(_DWORD *)(a3 + 28) & 0x7Eu) - 54 > 3
       || (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) + 80) & 0xE000) == 0x4000
       || (*(_QWORD *)(a3 + 40) & 7) == 6
       && (*(_DWORD *)(*(_QWORD *)(a3 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) <= 3))
    {
      *v3 = *v3 & 0xFFFFFCFF | 0x100;
    }
  }
  return (uint64_t)v3;
}

uint64_t sub_22EB88D5C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 56 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 56 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_3;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

uint64_t sub_22EB88E00(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAB8418;
  if (*(_DWORD *)(a1 + 44))
    free(*(void **)(a1 + 32));
  return a1;
}

void sub_22EB88E3C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24FAB8418;
  if (*(_DWORD *)(a1 + 44))
    free(*(void **)(a1 + 32));
  JUMPOUT(0x2348A0E9CLL);
}

_QWORD *sub_22EB88E88(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = operator new(0x58uLL);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *v2 = &off_24FAB8418;
  v2[1] = v3;
  v2[2] = v4;
  sub_22F0AB560(v2 + 3, a1 + 24);
  v5 = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v2 + 3) = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v2 + 4) = v5;
  v2[10] = *(_QWORD *)(a1 + 80);
  return v2;
}

__n128 sub_22EB88EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24FAB8418;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  sub_22F0AB560((_QWORD *)(a2 + 24), a1 + 24);
  result = *(__n128 *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(__n128 *)(a2 + 48) = result;
  *(_OWORD *)(a2 + 64) = v6;
  return result;
}

void sub_22EB88F38(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 44))
    free(*(void **)(a1 + 32));
}

void sub_22EB88F4C(void **__p)
{
  if (*((_DWORD *)__p + 11))
    free(__p[4]);
  operator delete(__p);
}

void sub_22EB88F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  void **v7;
  BOOL v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  size_t v15;
  void *v16;
  void **v17;
  void *v18;
  uint64_t v19;
  void **p_s1;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  void *__s1;
  size_t __n;
  int v45;
  char v46;
  void *__p[2];
  char v48;
  unint64_t v49;
  uint64_t v50;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 56);
  v5 = *(_DWORD *)(a1 + 80);
  v6 = *(_DWORD *)(a1 + 84);
  v50 = *(_QWORD *)(a1 + 48);
  v7 = (void **)(a1 + 16);
  if (*(_DWORD *)(a1 + 20))
    v8 = *(_DWORD *)(a1 + 16) == 0;
  else
    v8 = 1;
  if (v8 && *(_QWORD *)(a1 + 24) == 0)
  {
    if (!*(_QWORD *)a2)
      goto LABEL_12;
    v11 = 0;
  }
  else
  {
    v10 = sub_22E958204(v3, (uint64_t)v7, 0);
    v11 = v10;
    v49 = v10;
    if (!*(_QWORD *)a2)
    {
      if (v10)
      {
        sub_22E8FCA40((_QWORD *)v3, v4, 0xFAAu, 0, (uint64_t)__p);
        v12 = sub_22E894538((uint64_t)__p, &v50);
        v13 = sub_22E894FB4(v12, (uint64_t *)&v49);
        __s1 = *v7;
        sub_22E8906A0(v13, (uint64_t *)&__s1);
LABEL_13:
        sub_22E903BEC((unsigned int *)__p);
        return;
      }
LABEL_12:
      sub_22E8FCA40((_QWORD *)v3, v4, v5, 0, (uint64_t)__p);
      sub_22E894538((uint64_t)__p, &v50);
      goto LABEL_13;
    }
  }
  sub_22EC6887C((uint64_t *)a2, *(unsigned int **)(v3 + 72), (uint64_t)__p);
  if (*(_BYTE *)(a2 + 60))
  {
    sub_22EFC683C(&v50, &__s1);
    if (v46 >= 0)
      v15 = v46 & 0x7F;
    else
      v15 = __n;
    v16 = (void *)(v48 & 0x7F);
    if (v48 < 0)
      v16 = __p[1];
    if ((void *)v15 == v16)
    {
      if (v48 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      if (v46 < 0)
      {
        v18 = __s1;
        v14 = memcmp(__s1, v17, __n) == 0;
        goto LABEL_41;
      }
      if ((v46 & 0x7F) == 0)
      {
        v14 = 1;
        goto LABEL_42;
      }
      v19 = (v46 & 0x7F) - 1;
      p_s1 = &__s1;
      do
      {
        v22 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v21 = v22;
        v24 = *(unsigned __int8 *)v17;
        v17 = (void **)((char *)v17 + 1);
        v23 = v24;
        v26 = v19-- != 0;
      }
      while (v21 == v23 && v26);
      v14 = v21 == v23;
    }
    else
    {
      v14 = 0;
    }
    if ((v46 & 0x80) == 0)
      goto LABEL_42;
    v18 = __s1;
LABEL_41:
    operator delete(v18);
    goto LABEL_42;
  }
  v14 = 0;
LABEL_42:
  v27 = sub_22F2E6D78(a2);
  v28 = 6001;
  if (v27)
  {
    if ((*(_DWORD *)(v27 + 28) & 0x7F) == 0x3E)
      v28 = 5667;
    else
      v28 = 6001;
  }
  __n = *(_QWORD *)(v3 + 88) + 2128;
  if (v11)
  {
    v45 = 4012;
    v29 = v50;
    v30 = (_BYTE *)sub_22E3B8AAC(__n);
    __s1 = v30;
    v31 = v30 + 1;
    v32 = *v30;
    v31[v32] = 10;
    *v30 = v32 + 3;
    v33 = v30 + 16;
    *(_QWORD *)&v33[8 * v32] = v29;
    v34 = (v32 + 1);
    v31[v34] = 13;
    *(_QWORD *)&v33[8 * v34] = v11;
    v35 = (v32 + 2);
    v31[v35] = 2;
    *(_QWORD *)&v33[8 * v35] = v14;
    sub_22E4D6448((uint64_t)(v30 + 336), (uint64_t)*v7, 1);
  }
  else
  {
    v45 = v6;
    v36 = v50;
    v37 = (_BYTE *)sub_22E3B8AAC(__n);
    __s1 = v37;
    v38 = *v37;
    v37[v38 + 1] = 10;
    *v37 = v38 + 1;
    *(_QWORD *)&v37[8 * v38 + 16] = v36;
  }
  v39 = *(_QWORD *)(v3 + 88) + 2128;
  v40 = 0;
  v41 = v39;
  v42 = v28;
  sub_22EC6BF44(v3, a2, (uint64_t)&__s1, (uint64_t)&v40, 1);
  if (v40 && v41)
    sub_22E3BB10C(v41, v40);
  if (__s1 && __n)
    sub_22E3BB10C(__n, (unint64_t)__s1);
  if (v48 < 0)
    operator delete(__p[0]);
}

uint64_t sub_22EB892A8(uint64_t a1)
{
  unsigned int v2;
  unint64_t v3;
  char *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  BOOL v9;
  char *v10;
  _OWORD v11[3];

  memset(v11, 0, sizeof(v11));
  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_QWORD *)a1;
  v4 = (char *)v11;
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    v9 = v3 + 48 * v2 > (unint64_t)v11;
    if (v3 <= (unint64_t)v11 && v9)
    {
      v10 = (char *)v11 - v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v3 = *(_QWORD *)a1;
      v4 = &v10[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v3 = *(_QWORD *)a1;
      v4 = (char *)v11;
    }
  }
  v5 = (_OWORD *)(v3 + 48 * *(unsigned int *)(a1 + 8));
  v6 = *(_OWORD *)v4;
  v7 = *((_OWORD *)v4 + 2);
  v5[1] = *((_OWORD *)v4 + 1);
  v5[2] = v7;
  *v5 = v6;
  LODWORD(v5) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v5;
  return *(_QWORD *)a1 + 48 * v5 - 48;
}

uint64_t sub_22EB89380(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  BOOL v9;
  char *v10;
  _OWORD v11[2];

  memset(v11, 0, sizeof(v11));
  v2 = *(unsigned int *)(a1 + 8);
  v3 = *(_QWORD *)a1;
  v4 = (char *)v11;
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    v9 = v3 + 32 * v2 > (unint64_t)v11;
    if (v3 <= (unint64_t)v11 && v9)
    {
      v10 = (char *)v11 - v3;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v3 = *(_QWORD *)a1;
      v4 = &v10[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v3 = *(_QWORD *)a1;
      v4 = (char *)v11;
    }
  }
  v5 = (_OWORD *)(v3 + 32 * *(unsigned int *)(a1 + 8));
  v6 = *((_OWORD *)v4 + 1);
  *v5 = *(_OWORD *)v4;
  v5[1] = v6;
  v7 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 32 * v7 - 32;
}

uint64_t sub_22EB89444(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 48));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22EB2F86C(*a1, *(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 20), v4 & 0xFFFFFFFFFFFFFFFELL, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB894B4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 40));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22EB2F86C(*a1, *(unsigned int *)(a2 + 16), *(unsigned int *)(a2 + 20), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB89538(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v9;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  sub_22F0D5A50(*(_QWORD *)(a2 + 16));
  v6 = *(_DWORD *)(a2 + 4);
  v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
  return sub_22EB296C0(*a1, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, (uint64_t *)&v9, 1, v6);
}

uint64_t sub_22EB895C8(_QWORD **a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v15[3];
  int v16;
  uint64_t v17;
  int v18;

  v4 = sub_22EB4DB90(a1, *(uint64_t **)(a2 + 48));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *a1;
  v18 = 0;
  v17 = 0;
  v16 = 3;
  *(_QWORD *)v15 = *((unsigned int *)v6 + 426);
  sub_22EB4DDB8((uint64_t)(v6 + 461), &v18, v15, (__int16 *)((char *)v6 + 1693), &v17, &v16);
  v7 = *((unsigned int *)v6 + 924);
  v8 = v7 - 2;
  v9 = v6[461];
  v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
  if (v10 == 5)
  {
    *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
    v11 = 1;
  }
  else if (v10 == 2)
  {
    *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
    v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
  }
  else
  {
    v11 = 0;
    *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
  }
  v12 = v9 + 576 * v7;
  *(_BYTE *)(v12 - 3) = v11;
  *(_WORD *)((char *)v6 + 1693) = 0;
  if (*((_DWORD *)v6 + 462))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 222), (llvm::SmallPtrSetImplBase *)(v12 - 560));
    sub_22EAEAE08((uint64_t)(v6 + 230), (uint64_t *)(v12 - 496));
  }
  v13 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  sub_22EB48E64(v6);
  if ((v13 & 1) != 0)
    return 1;
  else
    return sub_22EBC8B4C(*a1, *(_BYTE *)(a2 + 16) & 3, *(_DWORD *)(a2 + 40), v5, v13 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 44));
}

uint64_t sub_22EB89738(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v6;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v6 = sub_22EB932F8((uint64_t)a1, *(_QWORD *)(a2 + 8));
  return sub_22F32DD9C(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v6, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22EB897A0(uint64_t a1, uint64_t a2)
{
  return sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_22EB897A8(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 72);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 72);
  }
  if ((sub_22EB9334C(a1, (unsigned __int8 **)(a2 + 16), v4, 0, (uint64_t)&v10, &v9) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = *(unsigned int *)(a2 + 80);
    v7 = *(unsigned int *)(a2 + 76) | (unint64_t)(v6 << 32);
    v5 = sub_22E983290((_QWORD *)*a1, v7, v7, v6, (void **)v10, v11, *(_DWORD *)(a2 + 84), 1);
  }
  if (v10 != v12)
    free(v10);
  return v5;
}

__n128 sub_22EB898A0(uint64_t *a1, int *a2)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  int v17;

  v4 = sub_22EB4D054(a1, *((_QWORD *)a2 + 2));
  if ((v4 & 1) == 0)
  {
    v6 = sub_22EB4D054(a1, *((_QWORD *)a2 + 3));
    v7 = v6;
    if ((v6 & 1) == 0)
    {
      v8 = *a2;
      if (((*a2 >> 18) & 0x3E) - 22 > 9)
      {
        v9 = *a1;
        v10 = *(_DWORD *)(*a1 + 56);
        v11 = *(_QWORD *)(*a1 + 1296);
        result.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
        v16 = result;
        if ((v8 & 0x1000000) != 0)
        {
          v13 = 8;
          if (*a2 == 113)
            v13 = 12;
          v12 = *(_QWORD *)&a2[v13];
        }
        else
        {
          v12 = 0;
        }
        sub_22E51A8D0(&v17, *(_QWORD *)(v9 + 72));
        v14 = *a1;
        *(_DWORD *)(v14 + 56) = v17 & ~HIDWORD(v12) | HIDWORD(v12) & v12;
        *(_QWORD *)(v14 + 1296) = v12;
        sub_22EB4785C(*a1, 0, a2[1], (*a2 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v7 & 0xFFFFFFFFFFFFFFFELL);
        *(_DWORD *)(v9 + 56) = v10;
        *(_QWORD *)(v9 + 1296) = v11;
        v15 = *(_QWORD *)(v9 + 80);
        result = v16;
        *(_QWORD *)(v15 + 520) = v16.n128_u64[0];
        *(_DWORD *)(v15 + 528) = v16.n128_u32[0];
      }
      else
      {
        sub_22EB4785C(*a1, 0, a2[1], (v8 >> 18) & 0x3F, v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
      }
    }
  }
  return result;
}

__n128 sub_22EB89A00(uint64_t *a1, int *a2, __n128 a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;
  int v14;

  v5 = *a1;
  v6 = *(_DWORD *)(*a1 + 56);
  v7 = *(_QWORD *)(*a1 + 1296);
  a3.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
  v13 = a3;
  if ((*a2 & 0x1000000) != 0)
  {
    v9 = 8;
    if (*a2 == 113)
      v9 = 12;
    v8 = *(_QWORD *)&a2[v9];
  }
  else
  {
    v8 = 0;
  }
  sub_22E51A8D0(&v14, *(_QWORD *)(v5 + 72));
  v10 = *a1;
  *(_DWORD *)(v10 + 56) = v14 & ~HIDWORD(v8) | HIDWORD(v8) & v8;
  *(_QWORD *)(v10 + 1296) = v8;
  sub_22EB898A0(a1, a2);
  *(_DWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 1296) = v7;
  v11 = *(_QWORD *)(v5 + 80);
  result = v13;
  *(_QWORD *)(v11 + 520) = v13.n128_u64[0];
  *(_DWORD *)(v11 + 528) = v13.n128_u32[0];
  return result;
}

uint64_t sub_22EB89AD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  void *v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v23[10];
  void *v24;
  __int128 v25;
  _BYTE v26[16];
  char v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[32];
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[6];

  v33[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 16);
  sub_22F32F84C((_QWORD *)*a1, *(_DWORD *)(v4 + 24), 0);
  v5 = sub_22F30914C(*a1);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFFDFFF | (((*(_DWORD *)(v4 + 48) >> 13) & 1) << 13);
  *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) = *(_DWORD *)(*(_QWORD *)(v5 + 1424) + 48) & 0xFFFF7FFF | (((*(_DWORD *)(v4 + 48) >> 15) & 1) << 15);
  v31 = v33;
  v32 = 0x400000000;
  v28 = v30;
  v29 = 0x400000000;
  v6 = sub_22F3C22A4(a2);
  v7 = v6;
  v8 = 0;
  v24 = v26;
  v25 = xmmword_22F44E350;
  v27 = 0;
  v9 = *(_QWORD *)(v4 + 72);
  v10 = *(_DWORD *)(v4 + 80);
  if ((*(_BYTE *)(v6 + 23) & 4) != 0)
    v8 = sub_22E47E270(v6);
  if (sub_22EB93AFC(a1, v9, v10, 0, v8, (uint64_t)&v28, (uint64_t)&v31, (uint64_t)&v24))
  {
    v20 = *a1;
  }
  else
  {
    v11 = sub_22EB932F8((uint64_t)a1, *(_QWORD *)(v7 + 24));
    sub_22E4913B4(v7, (uint64_t)v23);
    if (v27)
    {
      sub_22F24FB88(&v24, v29);
      v12 = v24;
    }
    else
    {
      v12 = 0;
    }
    v23[8] = v12;
    *(_QWORD *)(v5 + 1440) = sub_22EE80544((_QWORD *)*a1, v11, (unint64_t *)v28, v29, 0, 0, (uint64_t)v23);
    if ((_DWORD)v32)
      sub_22F3ACFA8(*(_DWORD **)(v5 + 1424), v31, v32);
    if ((*(_BYTE *)(v4 + 49) & 0x80) == 0)
    {
      *(_BYTE *)(v5 + 1408) = 0;
      *(_QWORD *)(v5 + 1416) = v11;
    }
    v13 = (__n128 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 64))(*(_QWORD *)(a2 + 16));
    v19 = sub_22EB93FC4(a1, v13, 0, v14, v15, v16, v17, v18);
    v20 = *a1;
    if ((v19 & 1) == 0)
    {
      v21 = sub_22EB4ADC8(v20, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24), (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL));
      goto LABEL_12;
    }
  }
  sub_22F32F928(v20);
  v21 = 1;
LABEL_12:
  if (v24 != v26)
    free(v24);
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
  return v21;
}

uint64_t sub_22EB89D38(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  const void **v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (void **)(a2 + 32);
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v5 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    v6 = (const void **)(a2 + 32);
    do
    {
      v7 = *v6++;
      sub_22E3BA850(a1 + 32, v7);
      v5 -= 8;
    }
    while (v5);
  }
  v8 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFF) != 2)
  {
    v9 = 8 * ((*(_DWORD *)(a2 + 4) & 0x7FFFFFFFu) - 2);
    do
    {
      v10 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v4);
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == *(_QWORD *)(a1 + 32))
        v12 = 52;
      else
        v12 = 48;
      if (v10 != (void **)(v11 + 8 * *(unsigned int *)(a1 + v12)))
      {
        *v10 = (void *)-2;
        ++*(_DWORD *)(a1 + 56);
      }
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  return v8;
}

uint64_t sub_22EB89E20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = **(_QWORD **)(a2 + 16);
  if (v4)
  {
    v5 = *a1;
    sub_22F0D5A50(*(_QWORD *)(a2 + 24));
    sub_22EB4E494(v5, v6, v4, 1);
  }
  return sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
}

uint64_t sub_22EB89E7C(uint64_t *a1, unsigned __int8 *a2)
{
  int v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  BOOL v11;
  unsigned __int8 *v12;
  unsigned __int8 **v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  unsigned __int8 **v17;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 **v36;
  unsigned __int8 **v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  int v49;
  void *v50[2];
  _BYTE v51[64];
  void *v52;
  uint64_t v53;
  _QWORD v54[10];

  v54[8] = *MEMORY[0x24BDAC8D0];
  v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    if (v4 == 1)
      goto LABEL_9;
    v5 = a2 + 40;
    v6 = *a2;
    v7 = v6 == 119;
    if (v6 == 119)
      v8 = a2;
    else
      v8 = 0;
    v9 = v8 + 48;
    if (v7)
      v5 = v9;
    if (sub_22EFFF908(*((unsigned __int8 **)v5 + 1)))
    {
LABEL_9:
      v10 = *a2;
      v11 = v10 == 119;
      if (v10 == 119)
        v12 = a2;
      else
        v12 = 0;
      v13 = (unsigned __int8 **)(v12 + 48);
      if (!v11)
        v13 = (unsigned __int8 **)(a2 + 40);
      if (!sub_22EFFF908(*v13) && (*(_DWORD *)a2 & 0x100000) == 0)
      {
        v14 = *(_DWORD *)a2;
        v15 = v14 == 119;
        if (v14 == 119)
          v16 = a2;
        else
          v16 = 0;
        v17 = (unsigned __int8 **)(v16 + 48);
        if (!v15)
          v17 = (unsigned __int8 **)(a2 + 40);
        return sub_22EB935E0(a1, *v17, 0);
      }
    }
  }
  v19 = sub_22EB932F8((uint64_t)a1, *((_QWORD *)a2 + 1));
  if (v19 < 0x10)
    return 1;
  v20 = v19;
  v21 = (void *)*((_QWORD *)a2 + 2);
  v50[0] = v21;
  v52 = 0;
  if (sub_22E793870(a1 + 1, v50, &v52) && v52 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v21 = (void *)*((_QWORD *)v52 + 1);
  if (!v21)
    return 1;
  v46 = 0;
  v50[0] = v51;
  v50[1] = (void *)0x800000000;
  v22 = *a1;
  v23 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v26 = *(_DWORD *)(*(_QWORD *)(v22 + 3688) + 576 * *(unsigned int *)(v22 + 3696) - 576), v26 <= 3)
      ? (v27 = v26 == 2)
      : (v27 = 1),
        v27))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v22 + 72) + 1) & 2) != 0)
    {
      v52 = 0;
      v48 = 3;
      v49 = 1;
      v47 = *(unsigned int *)(v22 + 1704);
      sub_22EB4DDB8(v22 + 3688, &v49, (int *)&v47, (__int16 *)(v22 + 1693), (uint64_t *)&v52, &v48);
      v28 = *(unsigned int *)(v22 + 3696);
      v29 = v28 - 2;
      v30 = *(_QWORD *)(v22 + 3688);
      v31 = *(_DWORD *)(v30 + 576 * (v28 - 2));
      if (v31 == 5)
      {
        *(_BYTE *)(v30 + 576 * v28 - 4) = *(_BYTE *)(v30 + 576 * v29 + 572);
        v32 = 1;
      }
      else if (v31 == 2)
      {
        *(_BYTE *)(v30 + 576 * v28 - 4) = 1;
        v32 = *(_BYTE *)(v30 + 576 * v29 + 573) != 0;
      }
      else
      {
        v32 = 0;
        *(_BYTE *)(v30 + 576 * v28 - 4) = 0;
      }
      v33 = v30 + 576 * v28;
      *(_BYTE *)(v33 - 3) = v32;
      *(_WORD *)(v22 + 1693) = 0;
      if (*(_DWORD *)(v22 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v22 + 1776), (llvm::SmallPtrSetImplBase *)(v33 - 560));
        sub_22EAEAE08(v22 + 1840, (uint64_t *)(v33 - 496));
      }
      v24 = 0;
      v23 = *a2;
    }
  }
  v34 = v23 == 119;
  if (v23 == 119)
    v35 = a2;
  else
    v35 = 0;
  v36 = (unsigned __int8 **)(v35 + 48);
  if (v34)
    v37 = v36;
  else
    v37 = (unsigned __int8 **)(a2 + 40);
  if (sub_22EB9334C(a1, v37, *((_DWORD *)a2 + 8), 1, (uint64_t)v50, &v46))
  {
    if ((v24 & 1) == 0)
      sub_22EB48E64(v22);
    v25 = 1;
    goto LABEL_60;
  }
  if ((v24 & 1) == 0)
    sub_22EB48E64(v22);
  if (*a2 != 119)
  {
    v38 = *((_DWORD *)a2 + 1);
    goto LABEL_55;
  }
  v42 = **((_QWORD **)a2 + 5);
  for (i = v42; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_74;
      v44 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v44 <= 0x39)
        break;
LABEL_69:
      if (sub_22F115668(i))
        v42 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_78;
    }
    if (v44 == 24)
      goto LABEL_77;
    if (v44 == 26)
      break;
    if (((1 << v44) & 0x20000000200003CLL) == 0)
      goto LABEL_69;
LABEL_74:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_74;
LABEL_77:
  v42 = i;
LABEL_78:
  v38 = sub_22F115668(v42);
LABEL_55:
  v39 = v38;
  v40 = *(_DWORD *)a2;
  v41 = *((_QWORD *)a2 + 3);
  v52 = v54;
  v53 = 0x800000000;
  if ((sub_22EACCC94(*a1) & 1) != 0)
    v25 = 1;
  else
    v25 = sub_22EACC4D8(*a1, v39, v20, (uint64_t)v21, (v40 >> 18) & 1, (uint64_t *)v52, v53, (v40 & 0x80000) != 0, (v40 & 0x100000) != 0, (v40 & 0x200000) != 0, (v40 & 0x400000) != 0, v45, (v40 >> 23) & 7, v41);
  if (v52 != v54)
    free(v52);
LABEL_60:
  if (v50[0] != v51)
    free(v50[0]);
  return v25;
}

uint64_t sub_22EB8A358(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 **v4;
  unint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  unsigned __int8 **v23;
  char v24;
  uint64_t v26[2];
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  void *v31[2];
  _QWORD v32[9];

  v32[8] = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 **)(a2 + 40);
  v5 = sub_22EBA40C8((uint64_t *)a1, *((uint64_t **)a2 + 5));
  if (!v5)
    return 1;
  v6 = (uint64_t *)v5;
  v7 = *((_QWORD *)a2 + 2);
  v26[0] = v7;
  v31[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), v26, v31)
    && v31[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v7 = *((_QWORD *)v31[0] + 1);
  }
  if (!v7)
    return 1;
  v27 = 0;
  v31[0] = v32;
  v31[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 8) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)a2;
  if ((*(_DWORD *)a2 & 0x100000) == 0
    || ((v12 = *(_DWORD *)(*(_QWORD *)(v8 + 3688) + 576 * *(unsigned int *)(v8 + 3696) - 576), v12 <= 3)
      ? (v13 = v12 == 2)
      : (v13 = 1),
        v13))
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v8 + 72) + 1) & 2) != 0)
    {
      v26[0] = 0;
      v29 = 3;
      v30 = 1;
      v28 = *(unsigned int *)(v8 + 1704);
      sub_22EB4DDB8(v8 + 3688, &v30, (int *)&v28, (__int16 *)(v8 + 1693), v26, &v29);
      v14 = *(unsigned int *)(v8 + 3696);
      v15 = v14 - 2;
      v16 = *(_QWORD *)(v8 + 3688);
      v17 = *(_DWORD *)(v16 + 576 * (v14 - 2));
      if (v17 == 5)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = *(_BYTE *)(v16 + 576 * v15 + 572);
        v18 = 1;
      }
      else if (v17 == 2)
      {
        *(_BYTE *)(v16 + 576 * v14 - 4) = 1;
        v18 = *(_BYTE *)(v16 + 576 * v15 + 573) != 0;
      }
      else
      {
        v18 = 0;
        *(_BYTE *)(v16 + 576 * v14 - 4) = 0;
      }
      v19 = v16 + 576 * v14;
      *(_BYTE *)(v19 - 3) = v18;
      *(_WORD *)(v8 + 1693) = 0;
      if (*(_DWORD *)(v8 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v8 + 1776), (llvm::SmallPtrSetImplBase *)(v19 - 560));
        sub_22EAEAE08(v8 + 1840, (uint64_t *)(v19 - 496));
      }
      v10 = 0;
      v9 = *a2;
    }
  }
  v20 = v9 == 119;
  if (v9 == 119)
    v21 = a2;
  else
    v21 = 0;
  v22 = (unsigned __int8 **)(v21 + 48);
  if (v20)
    v23 = v22;
  else
    v23 = v4;
  v24 = sub_22EB9334C((uint64_t *)a1, v23, *((_DWORD *)a2 + 8), 1, (uint64_t)v31, &v27);
  if ((v10 & 1) == 0)
    sub_22EB48E64(v8);
  if ((v24 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v26[0] = *v6;
    v26[1] = (uint64_t)(v6 + 1);
    sub_22F1167E8(v26);
    sub_22F3C57CC(a2);
    v11 = sub_22EBBC368();
  }
  if (v31[0] != v32)
    free(v31[0]);
  return v11;
}

uint64_t sub_22EB8A634(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 16);
  v10 = v4;
  v11 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v10, &v11)
    && v11 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v4 = *(_QWORD *)(v11 + 8);
  }
  if (!v4)
    return 1;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 216);
  v8 = sub_22E3CD3D4(v6 + 2032, 32, 3);
  return sub_22E8BB138(v8, 120, v5, v4, v7);
}

uint64_t sub_22EB8A6DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  v12 = v4;
  v13 = 0;
  if (sub_22E793870(a1 + 1, &v12, &v13) && v13 != a1[1] + 16 * *((unsigned int *)a1 + 6))
    v4 = *(_QWORD *)(v13 + 8);
  if (!v4)
    return 1;
  sub_22EFF605C(a2);
  v7 = v6;
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 88);
  v10 = *(_QWORD *)(v8 + 216);
  v11 = sub_22E3CD3D4(v9 + 2032, 32, 3);
  return sub_22F3C5EB8(v11, v9, v7, v4, *(_QWORD *)(v4 + 48), v10);
}

uint64_t sub_22EB8A790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  if (*(_QWORD *)(a2 + 16)
    && (v6 = *(_QWORD *)(a2 + 16), v7 = 0, sub_22E793870((uint64_t *)(a1 + 8), &v6, &v7))
    && v7 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)
    && !*(_QWORD *)(v7 + 8))
  {
    return 1;
  }
  else
  {
    return sub_22EBC2B50(*(_QWORD *)a1, *(_DWORD *)(a2 + 4), (*(_DWORD *)a2 >> 18) & 1, (*(_DWORD *)a2 >> 19) & 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
}

uint64_t sub_22EB8A830(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v28;
  void *v29[2];
  _DWORD v30[66];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 2);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 2)) & 1) == 0)
  {
    v13 = sub_22EB4D054(a1, v4);
    if ((v13 & 1) != 0)
      return 1;
    v29[0] = 0;
    v28.n128_u8[0] = 0;
    v14 = (*a2 & 0x40000) != 0 ? 36 : 25;
    v15 = sub_22EBCD1E4(*(unsigned int **)a1, 0, v13 & 0xFFFFFFFFFFFFFFFELL, a2[1], v14, (unint64_t *)v29, &v28);
    if ((v15 & 1) != 0)
      return 1;
    v8 = v29[0];
    v7 = v15 & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EB932F8(a1, *((_QWORD *)a2 + 3));
    v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
    if (!v6 || *(_BYTE *)(v6 + 16) != 39)
      v6 = sub_22F10CF48(v6);
    v7 = 0;
    v8 = *(void **)(v6 + 32);
  }
  v9 = *a2;
  if ((v9 & 0x100000) != 0)
  {
    v11 = a2 + 18;
    if ((v9 & 0x80000) != 0 && *v11)
      v12 = a2[21];
    else
      v12 = 0;
    v10 = *(_QWORD *)&v11[8 * v12 + 4 * ((v9 >> 19) & 1)];
  }
  else
  {
    v10 = 0;
  }
  v28.n128_u64[0] = v10;
  v29[0] = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v28, v29)
    && v29[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
  {
    v10 = *((_QWORD *)v29[0] + 1);
  }
  v16 = *((_QWORD *)a2 + 4);
  if (v16)
  {
    v17 = sub_22EB98CCC((uint64_t *)a1, v16, *((void **)a2 + 5), (unint64_t)v8, v10);
    if (!v17)
      return 1;
    v19 = v17;
    v20 = v18;
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  if ((*((_BYTE *)a2 + 2) & 8) != 0)
    v21 = a2[20];
  else
    v21 = 0;
  sub_22EB9F61C(&v28, (uint64_t *)a1, (__n128 *)a2 + 3);
  if (!v28.n128_u64[0])
    return 1;
  v22 = *a2;
  if ((v22 & 0x80000) == 0)
    return sub_22F3012E8((_QWORD **)a1, v7, v5, (v22 >> 18) & 1, a2[1], v19, v20, v21, v10, (uint64_t)&v28, 0);
  v23 = a2[18];
  if (!v23)
    return sub_22F3012E8((_QWORD **)a1, v7, v5, (v22 >> 18) & 1, a2[1], v19, v20, v21, v10, (uint64_t)&v28, 0);
  v24 = a2[19];
  v29[0] = v30;
  v29[1] = (void *)0x800000000;
  v30[64] = v23;
  v30[65] = v24;
  v25 = (uint64_t)&a2[4 * ((v22 >> 19) & 1) + 18];
  if ((sub_22EBA43B8(a1, v25, v25 + 32 * a2[21]) & 1) != 0)
    v26 = 1;
  else
    v26 = sub_22F3012E8((_QWORD **)a1, v7, v5, (*a2 >> 18) & 1, a2[1], v19, v20, v21, v10, (uint64_t)&v28, (uint64_t)v29);
  if (v29[0] != v30)
    free(v29[0]);
  return v26;
}

uint64_t sub_22EB8AB04(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  void *v37[2];
  _QWORD v38[5];

  v38[4] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    v5 = sub_22EB4D054(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(a2 + 40);
  if (!v7 || (*(_BYTE *)(v7 + 1) & 0x20) == 0)
    v7 = *(_QWORD *)(a2 + 48);
  v37[0] = v38;
  v37[1] = (void *)0x200000000;
  v8 = *a1;
  v35 = 7;
  v36 = v7;
  sub_22EE7377C(v8, (uint64_t)&v35, (uint64_t)v37);
  v9 = *(_DWORD *)(a2 + 28);
  v10 = v9 != 0;
  v11 = v9 != 0;
  v12 = v9 - 1;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  v14 = *a1;
  v15 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v16 = *(_QWORD *)(a2 + 40);
  if (v16)
  {
    v17 = sub_22EB4D054(a1, v16);
    if ((v17 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v17 = 0;
  }
  v19 = *(_QWORD *)(a2 + 48);
  if (!v19)
  {
    v20 = 0;
    goto LABEL_23;
  }
  v20 = sub_22EB4D054(a1, v19);
  if ((v20 & 1) == 0)
  {
LABEL_23:
    v22 = *(_DWORD *)(a2 + 16);
    if (!v22)
    {
      v23 = *(_QWORD *)(a2 + 40);
      if (v23 && (*(_BYTE *)(v23 + 1) & 0x20) != 0)
      {
        sub_22F0D5A50(v23);
        v22 = v24;
      }
      else
      {
        v22 = *(_DWORD *)(a2 + 20);
      }
    }
    v25 = v13 | (v10 << 32);
    v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v27 = *(_DWORD *)(a2 + 56);
    v28 = v20 & 0xFFFFFFFFFFFFFFFELL;
    v30 = *(_DWORD *)(a2 + 20);
    v29 = *(_DWORD *)(a2 + 24);
    if (!v29)
    {
      v31 = *(_QWORD *)(a2 + 40);
      if (!v31 || (v29 = *(_DWORD *)(a2 + 20), (*(_BYTE *)(v31 + 1) & 0x20) == 0))
      {
        v32 = *(_QWORD *)(a2 + 48);
        v33 = v22;
        v34 = v27;
        sub_22F0D60E4(v32);
        v27 = v34;
        v26 = v17 & 0xFFFFFFFFFFFFFFFELL;
        v22 = v33;
      }
    }
    v18 = sub_22F34AF2C(*a1, v6, v22, v26, v27, v30, v28, v29, v25);
    goto LABEL_19;
  }
LABEL_18:
  v18 = 1;
LABEL_19:
  *(_DWORD *)(v14 + 11992) = v15;
  if (v37[0] != v38)
    free(v37[0]);
  return v18;
}

uint64_t sub_22EB8AD04(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_22EB932F8(a1, *(_QWORD *)(a2 + 8));
  if (v4 < 0x10)
    return 1;
  v5 = v4;
  v6 = *(_QWORD *)(a2 + 16);
  v13 = v6;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14))
  {
    if (v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
      v6 = *(_QWORD *)(v14 + 8);
  }
  if (!v6)
    return 1;
  v8 = *(_DWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 28);
  v10 = v9 & 1;
  v11 = (v9 >> 1) & 1;
  v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 32, 3);
  return sub_22F2F3990(v12, v8, v5, v6, v10, v11);
}

uint64_t sub_22EB8ADD4(uint64_t a1, unsigned int *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[10];

  v37[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EBA40C8((uint64_t *)a1, *((uint64_t **)a2 + 4));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = *a2;
  if ((*a2 & 0x80000) != 0)
  {
    v9 = *((_QWORD *)a2 + 7);
    if (!v9)
    {
      v7 = 0;
      v8 = 1;
      goto LABEL_9;
    }
    v10 = sub_22EB4D054(a1, v9);
    if ((v10 & 1) == 0)
    {
      v11 = *a2;
      v7 = v10 & 0xFFFFFFFFFFFFFFFELL;
      v8 = 1;
      goto LABEL_10;
    }
    return 1;
  }
  v7 = 0;
  v8 = 0;
LABEL_9:
  v11 = *a2;
LABEL_10:
  v32 = 0;
  v35 = v37;
  v36 = 0x800000000;
  v13 = a2 + 14;
  if ((v11 & 0x1800000) != 0)
    v14 = ((v11 >> 19) & 1) + 1;
  else
    v14 = (v11 >> 19) & 1;
  v12 = 1;
  if ((sub_22EB9334C((uint64_t *)a1, (unsigned __int8 **)&v13[2 * v14], a2[1], 1, (uint64_t)&v35, &v32) & 1) != 0)
    goto LABEL_41;
  v15 = *a2;
  if ((v15 & 0x1800000) == 0 || (v16 = *(unsigned __int8 **)&v13[2 * ((v15 >> 19) & 1)]) == 0)
  {
    v17 = 0;
LABEL_19:
    if (*((_QWORD *)a2 + 2)
      && (v33 = *((_QWORD *)a2 + 2), v34 = 0, sub_22E793870((uint64_t *)(a1 + 8), &v33, &v34))
      && v34 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)
      && !*(_QWORD *)(v34 + 8)
      || *((_QWORD *)a2 + 3)
      && (v33 = *((_QWORD *)a2 + 3), v34 = 0, sub_22E793870((uint64_t *)(a1 + 8), &v33, &v34))
      && v34 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)
      && !*(_QWORD *)(v34 + 8))
    {
      v12 = 1;
      goto LABEL_41;
    }
    v18 = *v5;
    if ((v6 & 0x80000) == 0)
    {
      v19 = sub_22EF5C728(*(_QWORD *)(*(_QWORD *)a1 + 88), *v5);
      if (v19)
      {
        v20 = v19;
        v21 = *(unsigned __int8 *)(v19 + 16);
        if (v21 == 3)
        {
          v26 = *(_QWORD *)(v19 + 48);
          if (v26)
            goto LABEL_34;
        }
        else if (v21 == 2)
        {
          v22 = *(_QWORD *)(*(_QWORD *)a1 + 88);
          v31 = v19 + 40;
          v23 = sub_22EF67C8C(v22);
          v24 = a2[10];
          v25 = sub_22E3CD3D4(v22 + 2032, 32, 3);
          v26 = sub_22EFF8F1C(v25, v22, v31, v23, v24);
LABEL_34:
          v18 = *(_QWORD *)(v20 + 32);
          v8 = 1;
          v7 = v26;
        }
      }
    }
    v27 = *a2;
    if ((*a2 & 0x2000000) != 0)
    {
      v29 = (v27 >> 19) & 1;
      if ((v27 & 0x1800000) != 0)
        ++v29;
      v28 = *(_QWORD *)&v13[2 * v29 + 2 * a2[1]];
    }
    else
    {
      v28 = 0;
    }
    v12 = sub_22EBBD504(*(_QWORD *)a1, a2[10] | ((unint64_t)a2[10] << 32), (v27 >> 18) & 1, a2[10], (uint64_t)v35, v36, a2[10], v28, v18, v5, v7, v8, *((_QWORD *)a2 + 6), (unsigned __int8 *)(v17 & 0xFFFFFFFFFFFFFFFELL));
    goto LABEL_41;
  }
  v12 = 1;
  v17 = sub_22EB935E0((uint64_t *)a1, v16, 1);
  if ((v17 & 1) == 0)
    goto LABEL_19;
LABEL_41:
  if (v35 != v37)
    free(v35);
  return v12;
}

uint64_t sub_22EB8B0B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14[3];
  int v15;
  uint64_t v16;
  int v17;

  v4 = *a1;
  v17 = 0;
  v16 = 0;
  v15 = 3;
  *(_QWORD *)v14 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v17, v14, (__int16 *)(v4 + 1693), &v16, &v15);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v11 & 1) != 0)
    v12 = 1;
  else
    v12 = sub_22F3321E4(*a1, *(_QWORD *)(a2 + 24), v11 & 0xFFFFFFFFFFFFFFFELL, HIDWORD(*(_QWORD *)(a2 + 24)));
  sub_22EB48E64(v4);
  return v12;
}

uint64_t sub_22EB8B210(unsigned int **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  void *v52[2];
  char v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  void *v58[2];
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v54 = 0;
  v53 = 0;
  v5 = (*(_BYTE *)(a2 + 24) & 1) != 0 ? 36 : 25;
  v6 = sub_22EBCD1E4(*a1, 0, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 28), v5, &v54, &v53);
  if ((v6 & 1) != 0)
    return 1;
  v7 = v54;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(void **)(a2 + 40);
  if (!v8)
  {
    v12 = 0;
    goto LABEL_12;
  }
  v10 = sub_22EB98CCC((uint64_t *)a1, v8, v9, v54, 0);
  if (!v10)
    return 1;
  v12 = v10;
  v9 = v11;
LABEL_12:
  v51 = 0u;
  *(_OWORD *)v52 = 0u;
  sub_22E8ACE30((uint64_t)&v51, v12, (uint64_t)v9);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if ((v15 & 1) != 0 || !v16)
  {
    if (v7 >= 0x10 && (*(_BYTE *)(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
    {
      v21 = *(_DWORD *)(a2 + 72);
      if ((v15 & 1) != 0)
        v16 = v15 | 1;
      else
        v16 = 1;
    }
    else
    {
      v18 = sub_22EBB87FC(*a1, *(unsigned int *)(a2 + 60), (_QWORD *)((v15 << 63 >> 63) & v16), *(_DWORD *)(a2 + 72), 0, (uint64_t)&v51, v54, 0);
      if (!v18)
        goto LABEL_80;
      v19 = v18;
      if (v18 >= 0x10)
      {
        v22 = *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF0);
        if (v22 && *(_BYTE *)(v22 + 16) == 57)
          v19 = *(_QWORD *)(v22 + 8);
      }
      else
      {
        v19 = 0;
      }
      v23 = sub_22EF579A8(*((_QWORD *)*a1 + 11), v19, *(_DWORD *)(a2 + 72));
      v16 = (unint64_t)v23 & 0xFFFFFFFFFFFFFFFELL;
      v21 = sub_22F115668(*v23);
    }
  }
  else
  {
    if (*(_QWORD *)v16 >= 0x10uLL)
    {
      v20 = sub_22EB99E50((uint64_t *)a1, *(_QWORD *)v16, (unsigned int *)(v16 + 8), v7, (uint64_t)&v51);
      if (!v20)
        goto LABEL_80;
      v16 = (unint64_t)v20 & 0xFFFFFFFFFFFFFFFELL;
      v17 = *v20;
    }
    else
    {
      v17 = *(_QWORD *)v16;
    }
    v21 = sub_22F115668(v17);
  }
  v24 = *(_QWORD **)(a2 + 48);
  if (!v24)
    goto LABEL_36;
  v57 = 0u;
  *(_OWORD *)v58 = 0u;
  if (*v24 <= 0xFuLL)
    goto LABEL_36;
  v24 = sub_22EB99E50((uint64_t *)a1, *v24, (unsigned int *)v24 + 2, v7, (uint64_t)&v57);
  if (HIDWORD(v58[1]))
    free(v58[0]);
  if (v24)
  {
LABEL_36:
    v25 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v26 = *(unsigned int *)(a2 + 28);
    v27 = *(_BYTE *)(a2 + 24);
    v28 = *(_DWORD *)(a2 + 56);
    v29 = *(_DWORD *)(a2 + 60);
    if ((*(_BYTE *)(v25 + 1) & 0x80) != 0
      || (v30 = *(_QWORD *)(v25 + 8), (v16 & 1) != 0) && (v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
LABEL_39:
      if ((v27 & 1) != 0)
        v31 = 36;
      else
        v31 = 25;
      v32 = sub_22EBCD92C((uint64_t)*a1, v25, v26, v31, (uint64_t)&v51, v24, v28, v29, v16, v21);
      goto LABEL_43;
    }
    v33 = v30 & 0xFFFFFFFFFFFFFFF0;
    v34 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
    {
      if (!v34 || *(_BYTE *)(v34 + 16) != 39)
      {
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v34 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 39
          || (v48 = *(_QWORD *)(v25 + 8),
              v49 = *(unsigned int *)(a2 + 28),
              v37 = sub_22F10CF48(v34),
              v30 = v48,
              v26 = v49,
              !v37))
        {
LABEL_56:
          v50 = v26;
          v38 = v30;
          if ((v16 & 1) != 0)
            v39 = 0;
          else
            v39 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
          v59 = sub_22EFC6B40((_QWORD *)(*((_QWORD *)*a1 + 11) + 15224), *v39 & 7 | *(_QWORD *)((*v39 & 0xFFFFFFFFFFFFFFF0) + 8));
          v60 = v21;
          sub_22EFC6D6C((uint64_t)&v61, v59);
          v61 = v39;
          if (!v24)
            goto LABEL_65;
          v40 = *v24;
          v41 = *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF0);
          if (v41 && (*(_DWORD *)(v41 + 16) & 0xFE) == 0x2C
            || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x2C
            && (v42 = sub_22F10CF48(v41), v40 = *v24, v42))
          {
            sub_22E8ACD1C((uint64_t)&v51, *((_QWORD *)*a1 + 11), 0, v40, (uint64_t)(v24 + 1), v28);
LABEL_65:
            v32 = sub_22EC225CC(*a1, v25, v38, v50, v27 & 1, (uint64_t)&v51, 0, 0, (uint64_t)&v59, 0, 0, 0);
LABEL_43:
            v13 = v32;
            goto LABEL_81;
          }
          v43 = *a1;
          v44 = v40;
          while (1)
          {
            if ((v44 & 0xF) != 0)
              goto LABEL_77;
            v45 = *(unsigned __int8 *)(*(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF0) + 16);
            if (v45 > 0x39)
            {
LABEL_72:
              if (sub_22F115668(v44))
                v40 = v44;
              v44 = sub_22F115B7C(v44);
              if (!v44)
                goto LABEL_79;
            }
            else
            {
              if (v45 == 24)
                goto LABEL_78;
              if (v45 == 26)
              {
                if ((*(_BYTE *)(v44 + 23) & 0x10) != 0)
                {
LABEL_78:
                  v40 = v44;
LABEL_79:
                  v46 = sub_22F115668(v40);
                  sub_22E8FCA40(v43, v46, 0xCEFu, 0, (uint64_t)&v57);
                  v56 = *v24;
                  v47 = sub_22E8901B8((uint64_t)&v57, &v56);
                  v55 = (**((_DWORD **)*a1 + 9) >> 8) & 1;
                  sub_22E89519C(v47, (unsigned int *)&v55);
                  sub_22E903BEC((unsigned int *)&v57);
                  goto LABEL_80;
                }
              }
              else if (((1 << v45) & 0x20000000200003CLL) == 0)
              {
                goto LABEL_72;
              }
LABEL_77:
              v44 = sub_22F115B7C(v44);
            }
          }
        }
        v34 = *(_QWORD *)v33;
        if (*(_BYTE *)(*(_QWORD *)v33 + 16) != 39)
        {
          v34 = sub_22F10CF48(v34);
          v30 = v48;
          v26 = v49;
        }
      }
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 32) & 0xFFFFFFFFFFFFFFF0) + 8);
    }
    else
    {
      v35 = *(_QWORD *)(v34 + 8);
    }
    v36 = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0);
    if (!v36 || *(_BYTE *)(v36 + 16) != 45)
      goto LABEL_39;
    goto LABEL_56;
  }
LABEL_80:
  v13 = 1;
LABEL_81:
  if (HIDWORD(v52[1]))
    free(v52[0]);
  return v13;
}

uint64_t sub_22EB8B750(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[4];
  _QWORD v24[2];
  void *v25;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x24BDAC8D0];
  v20 = 0u;
  v21 = 0u;
  sub_22F05FD5C(a2, &v20);
  v4 = sub_22EB4D054(a1, *((_QWORD *)&v20 + 1));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB4D054(a1, v21);
  if ((v5 & 1) != 0)
    return 1;
  v6 = 0;
  v7 = 0;
  v25 = v27;
  v26 = 0x200000000;
  v24[0] = a2[2];
  v24[1] = *((_QWORD *)&v21 + 1);
  v8 = 1;
  do
  {
    v9 = v6;
    v10 = sub_22EFFED0C((unsigned __int8 *)v24[v7]);
    if (*v10 == 141)
    {
      v11 = sub_22EFFED0C(*(unsigned __int8 **)&v10[v10[3]]);
      if (*v11 == 161)
      {
        v12 = v11;
        v13 = v11 + 16;
        if ((*(_DWORD *)(*((_QWORD *)v11 + 2) + 28) & 0x7Eu) - 54 >= 4)
        {
          sub_22F05FD5C(a2, v23);
          v14 = *(unsigned int *)v12;
          if ((v14 & 0x100000) != 0)
            v15 = (unsigned int *)&v12[16 * ((v14 >> 18) & 1) + 32];
          else
            v15 = (unsigned int *)v13;
          v16 = *(_QWORD *)v15;
          v22 = *(_QWORD *)v15;
          v23[0] = 0;
          if (sub_22E793870((uint64_t *)(a1 + 8), &v22, v23)
            && v23[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v16 = *(_QWORD *)(v23[0] + 8);
          }
          if (!v16)
            goto LABEL_21;
          v17 = v26;
          if (v26 >= (unint64_t)HIDWORD(v26))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v17 = v26;
          }
          *((_QWORD *)v25 + v17) = v16 | 3;
          LODWORD(v26) = v26 + 1;
        }
      }
    }
    v6 = 1;
    v7 = 1;
  }
  while ((v9 & 1) == 0);
  sub_22F05FD5C(a2, v23);
  sub_22EFF605C(v23[3]);
  v8 = sub_22ED1767C(*(_QWORD *)a1, v19, v20, (uint64_t)&v25, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL, 0, 1, 0);
LABEL_21:
  if (v25 != v27)
    free(v25);
  return v8;
}

uint64_t sub_22EB8B99C(_QWORD **a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t v4[2];

  v2 = sub_22EB4DB90(a1, *(uint64_t **)(a2 + 16));
  if (!v2)
    return 1;
  v4[0] = *v2;
  v4[1] = (uint64_t)(v2 + 1);
  sub_22F1167E8(v4);
  return sub_22EBBC368();
}

uint64_t sub_22EB8BA24(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22EBBA860(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22EB8BA70(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25[3];
  int v26;
  uint64_t v27;
  int v28;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(a2 + 1) & 3) != 0)
    {
      v6 = 0;
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
      if (!v7 || *(_BYTE *)(v7 + 16) != 45)
      {
LABEL_11:
        v12 = *a1;
        v13 = (_QWORD *)(*a1 + 3688);
        v14 = *(_QWORD *)(*v13 + 576 * *(unsigned int *)(*a1 + 3696) - 416);
        v28 = v6;
        v27 = v14;
        v26 = 3;
        *(_QWORD *)v25 = *(unsigned int *)(v12 + 1704);
        sub_22EB4DDB8((uint64_t)v13, &v28, v25, (__int16 *)(v12 + 1693), &v27, &v26);
        v15 = *(unsigned int *)(v12 + 3696);
        v16 = v15 - 2;
        v17 = *(_QWORD *)(v12 + 3688);
        v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
        if (v18 == 5)
        {
          *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
          v19 = 1;
        }
        else if (v18 == 2)
        {
          *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
          v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
        }
        else
        {
          v19 = 0;
          *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
        }
        v20 = v17 + 576 * v15;
        *(_BYTE *)(v20 - 3) = v19;
        *(_WORD *)(v12 + 1693) = 0;
        if (*(_DWORD *)(v12 + 1848))
        {
          llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v12 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
          sub_22EAEAE08(v12 + 1840, (uint64_t *)(v20 - 496));
        }
        v21 = sub_22EB4D054(a1, v5);
        if ((v21 & 1) != 0)
          v11 = 1;
        else
          v11 = sub_22EBB98E0(*a1, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFFELL), *(unsigned int *)(a2 + 28), v22, v23, v24);
        sub_22EB48E64(v12);
        return v11;
      }
      v8 = sub_22F114198(*(_QWORD *)(v7 + 24));
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v8 + 104) + 96), *(_QWORD *)(v8 + 104));
      if ((**(_QWORD **)(v8 + 128) & 0x400) != 0)
      {
        v6 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
        goto LABEL_11;
      }
    }
    v6 = 0;
    goto LABEL_11;
  }
  v9 = (uint64_t *)sub_22EB4DB90((_QWORD **)a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
  if (v9)
    return sub_22EBB9700((_QWORD *)*a1, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), v9, *(unsigned int *)(a2 + 28));
  return 1;
}

uint64_t sub_22EB8BCAC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  char v15;
  char v16;
  int v17[3];
  int v18;
  uint64_t v19;
  int v20;
  void *v21[2];
  _QWORD v22[9];

  v22[8] = *MEMORY[0x24BDAC8D0];
  if (!sub_22EBA40C8(a1, *(uint64_t **)(a2 + 16)))
    return 1;
  v16 = 0;
  v21[0] = v22;
  v21[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 4) >= 9u)
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  if (*(_DWORD *)(a2 + 24)
    || ((v6 = *a1, v7 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576), v7 <= 3)
      ? (v8 = v7 == 2)
      : (v8 = 1),
        v8 || (*(_BYTE *)(*(_QWORD *)(v6 + 72) + 1) & 2) == 0))
  {
    v4 = 1;
    if ((sub_22EB9334C(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v21, &v16) & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    v20 = 1;
    v19 = 0;
    v18 = 3;
    *(_QWORD *)v17 = *(unsigned int *)(v6 + 1704);
    sub_22EB4DDB8(v6 + 3688, &v20, v17, (__int16 *)(v6 + 1693), &v19, &v18);
    v9 = *(unsigned int *)(v6 + 3696);
    v10 = v9 - 2;
    v11 = *(_QWORD *)(v6 + 3688);
    v12 = *(_DWORD *)(v11 + 576 * (v9 - 2));
    if (v12 == 5)
    {
      *(_BYTE *)(v11 + 576 * v9 - 4) = *(_BYTE *)(v11 + 576 * v10 + 572);
      v13 = 1;
    }
    else if (v12 == 2)
    {
      *(_BYTE *)(v11 + 576 * v9 - 4) = 1;
      v13 = *(_BYTE *)(v11 + 576 * v10 + 573) != 0;
    }
    else
    {
      v13 = 0;
      *(_BYTE *)(v11 + 576 * v9 - 4) = 0;
    }
    v14 = v11 + 576 * v9;
    *(_BYTE *)(v14 - 3) = v13;
    *(_WORD *)(v6 + 1693) = 0;
    if (*(_DWORD *)(v6 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v6 + 1776), (llvm::SmallPtrSetImplBase *)(v14 - 560));
      sub_22EAEAE08(v6 + 1840, (uint64_t *)(v14 - 496));
    }
    v4 = 1;
    v15 = sub_22EB9334C(a1, (unsigned __int8 **)(a2 + 32), *(_DWORD *)(a2 + 4), 1, (uint64_t)v21, &v16);
    sub_22EB48E64(v6);
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  v4 = sub_22EBBC368();
LABEL_7:
  if (v21[0] != v22)
    free(v21[0]);
  return v4;
}

uint64_t sub_22EB8BF1C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v16[3];
  int v17;
  uint64_t v18;
  int v19;

  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 4) != 0)
  {
    v14 = (uint64_t *)sub_22EB4DB90(a1, (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8));
    if (v14)
      return sub_22EBBA098(*a1, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 32), v14, *(_DWORD *)(a2 + 36));
    return 1;
  }
  else
  {
    v5 = *a1;
    v19 = 0;
    v18 = 0;
    v17 = 3;
    *(_QWORD *)v16 = *((unsigned int *)v5 + 426);
    sub_22EB4DDB8((uint64_t)(v5 + 461), &v19, v16, (__int16 *)((char *)v5 + 1693), &v18, &v17);
    v6 = *((unsigned int *)v5 + 924);
    v7 = v6 - 2;
    v8 = v5[461];
    v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
    if (v9 == 5)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
      v10 = 1;
    }
    else if (v9 == 2)
    {
      *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
      v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
    }
    else
    {
      v10 = 0;
      *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
    }
    v11 = v8 + 576 * v6;
    *(_BYTE *)(v11 - 3) = v10;
    *(_WORD *)((char *)v5 + 1693) = 0;
    if (*((_DWORD *)v5 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v5 + 222), (llvm::SmallPtrSetImplBase *)(v11 - 560));
      sub_22EAEAE08((uint64_t)(v5 + 230), (uint64_t *)(v11 - 496));
    }
    v12 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 1) != 0)
      v13 = 1;
    else
      v13 = sub_22EBBA3E8(*a1, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 32), v12 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    sub_22EB48E64(v5);
  }
  return v13;
}

uint64_t sub_22EB8C0B8(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  int v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[9];

  v23[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EB4D054(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v19 = 0;
  v21 = v23;
  v22 = 0x800000000;
  v5 = 1;
  if ((sub_22EB9334C(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v21, &v19) & 1) == 0)
  {
    v6 = (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
    v8 = v7;
    v9 = *a1;
    v10 = *(_DWORD *)(*a1 + 56);
    v11 = *(_QWORD *)(*a1 + 1296);
    v18 = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
    v12 = *a2;
    v13 = *a1;
    if ((v12 & 0x100000) != 0)
    {
      v14 = *(_QWORD *)((char *)&a2[2 * ((v12 >> 18) & 1) + 2 + 2 * a2[4]] + (v12 >> 24));
      sub_22E51A8D0(&v20, *(_QWORD *)(v9 + 72));
      v15 = *a1;
      *(_DWORD *)(v15 + 56) = v20 & ~HIDWORD(v14) | HIDWORD(v14) & v14;
      *(_QWORD *)(v15 + 1296) = v14;
      v13 = *a1;
    }
    v5 = sub_22EB33018(v13, 0, v6, v8, (uint64_t)v21, v22, a2[5], 0);
    *(_DWORD *)(v9 + 56) = v10;
    *(_QWORD *)(v9 + 1296) = v11;
    v16 = *(_QWORD *)(v9 + 80);
    *(_QWORD *)(v16 + 520) = v18;
    *(_DWORD *)(v16 + 528) = v18;
  }
  if (v21 != v23)
    free(v21);
  return v5;
}

uint64_t sub_22EB8C268(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  char v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[9];

  v12[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EB4D054(a1, *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB8C0B8(a1, *(unsigned int **)((char *)a2 + *((unsigned __int8 *)a2 + 3) + 8));
  if ((v5 & 1) != 0)
    return 1;
  v9 = 0;
  v10 = v12;
  v11 = 0x800000000;
  v6 = 1;
  if ((sub_22EB9334C(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2] + ((unint64_t)*a2 >> 24)), a2[4], 1, (uint64_t)&v10, &v9) & 1) == 0)
  {
    sub_22F0D4E74(v4 & 0xFFFFFFFFFFFFFFFELL);
    v6 = sub_22EB33018(*a1, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), v7, (uint64_t)v10, v11, a2[5], v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v10 != v12)
    free(v10);
  return v6;
}

uint64_t sub_22EB8C3A0(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _QWORD v56[18];

  v56[16] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)a2 + BYTE3(*(_QWORD *)a2));
  if ((*(_QWORD *)a2 & 0x3E00000000) != 0x2A00000000)
  {
    v14 = sub_22EB4D054(a1, *v4);
    if ((v14 & 1) != 0)
      return 1;
    v15 = *(unsigned int **)((char *)&a2[2 * ((*(_QWORD *)a2 >> 18) & 1) + 2] + BYTE3(*(_QWORD *)a2));
    if ((*(_QWORD *)a2 & 0x3F00000000) == 0xB00000000 && *(unsigned __int8 *)v15 == 163)
      v16 = sub_22EBA4658(a1, v15, 1, 0);
    else
      v16 = sub_22EB4D054(a1, v15);
    v17 = v16;
    if ((v16 & 1) != 0)
      return 1;
    if (a2[4] == 2)
    {
      v18 = sub_22EB4D054(a1, *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)));
      if ((v18 & 1) != 0)
        return 1;
    }
    else
    {
      v18 = 0;
    }
    v20 = *a1;
    v21 = *a2;
    if ((v21 & 0x100000) != 0)
      v22 = *(_QWORD *)((char *)&a2[2 * ((v21 >> 18) & 1) + 2 + 2 * a2[4]] + (v21 >> 24));
    else
      v22 = 0;
    v23 = *(_DWORD *)(v20 + 56);
    v24 = *(_QWORD *)(v20 + 1296);
    v53 = *(_QWORD *)(*(_QWORD *)(*a1 + 80) + 520);
    sub_22E51A8D0(&v54, *(_QWORD *)(v20 + 72));
    v25 = *a1;
    *(_DWORD *)(v25 + 56) = v54 & ~HIDWORD(v22) | HIDWORD(v22) & v22;
    *(_QWORD *)(v25 + 1296) = v22;
    v26 = a2[1] & 0x3F;
    v27 = a2[5];
    v28 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    v29 = v17 & 0xFFFFFFFFFFFFFFFELL;
    v30 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    v31 = (v18 & 0xFFFFFFFFFFFFFFFELL) != 0;
    v32 = (uint64_t)sub_22EFFBBCC(v28);
    v33 = (unsigned __int8 *)v32;
    if ((v26 - 37) >= 2)
      v31 = 0;
    if ((*(_DWORD *)v29 & 0x1C00) == 0xC00)
    {
      v34 = sub_22EFFBA54(v26);
      v35 = (_QWORD *)*a1;
      if ((v34 - 21) <= 0xA)
      {
        v10 = sub_22ED27A90(v35, 0, v27, v34, v29, (uint64_t)v30);
LABEL_74:
        *(_DWORD *)(v20 + 56) = v23;
        *(_QWORD *)(v20 + 1296) = v24;
        v50 = *(_QWORD *)(v20 + 80);
        *(_QWORD *)(v50 + 520) = v53;
        *(_DWORD *)(v50 + 528) = v53;
        return v10;
      }
      v32 = sub_22EB19A28(v35);
      if ((v32 & 1) != 0)
        goto LABEL_44;
      v29 = v32 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (!v30 || (*(_DWORD *)v30 & 0x1C00) != 0xC00)
    {
LABEL_35:
      if (v26 == 43)
      {
        v36 = *(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v36 + 17) & 4) == 0
          && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
        {
          v37 = *(_QWORD *)(v30[1] & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v37 + 17) & 4) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v38 = *a1;
            sub_22F0D5A50((uint64_t)v33);
            v40 = sub_22EB2AFE4(v38, (uint64_t (**)())v29, v39, v30, v27);
LABEL_51:
            v10 = v40;
            goto LABEL_74;
          }
        }
      }
      else
      {
        if (v26 == 41)
        {
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            v10 = 1;
            goto LABEL_74;
          }
          v40 = sub_22ED1C570();
          goto LABEL_51;
        }
        v41 = *(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0);
        v42 = *(_DWORD *)(v41 + 16);
        if (((v30 != 0) & ~v31) != 0)
        {
          if ((v42 & 0x400) == 0
            && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
          {
            v44 = *(_QWORD *)(v30[1] & 0xFFFFFFFFFFFFFFF0);
            if ((*(_BYTE *)(v44 + 17) & 4) == 0
              && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C)
            {
              sub_22EFFBA54(v26);
              v51 = sub_22EB2D0B8();
              if ((v51 & 1) != 0)
                v10 = 1;
              else
                v10 = v51;
              goto LABEL_74;
            }
          }
        }
        else if ((v42 & 0x400) == 0
               && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x2C
               || v26 == 11 && sub_22EB48AD0(v32, (unsigned __int8 *)v29))
        {
          v43 = sub_22EFFA13C(v26, v31);
          v40 = sub_22EB2EA08(*a1, v27, v43, v29);
          goto LABEL_51;
        }
      }
      v54 = v56;
      v55 = 0x1000000000;
      v45 = *v33;
      v52 = v23;
      if (v45 == 211)
      {
        sub_22E3D0148((uint64_t)&v54, v33 + 64, &v33[8 * *((unsigned int *)v33 + 1) + 64]);
        v46 = (*(_DWORD *)v33 >> 19) & 1;
        v45 = *(_DWORD *)v33;
      }
      else
      {
        v47 = *((_QWORD *)v33 + 2);
        v46 = 0;
        if ((*(_DWORD *)(v47 + 28) & 0x7Eu) - 54 >= 4)
        {
          v56[0] = v47 | 3;
          LODWORD(v55) = 1;
        }
      }
      if (((v30 != 0) & ~v31) != 0)
      {
        if (v26 == 43)
        {
          if (v45 != 161)
            sub_22F0D5A50((uint64_t)v33);
          v23 = v52;
          v10 = sub_22ED18C00();
          goto LABEL_72;
        }
        v48 = sub_22EFFBA54(v26);
        v49 = sub_22ED1767C(*a1, v27, v48, (uint64_t)&v54, v29, (uint64_t)v30, v46, 1, 0);
        if ((v49 & 1) != 0)
          v10 = 1;
        else
          v10 = v49;
      }
      else
      {
        sub_22EFFA13C(v26, v31);
        v10 = sub_22ED1677C();
      }
      v23 = v52;
LABEL_72:
      if (v54 != v56)
        free(v54);
      goto LABEL_74;
    }
    v32 = sub_22EB19A28(*a1);
    if ((v32 & 1) == 0)
    {
      v30 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFFFFELL);
      goto LABEL_35;
    }
LABEL_44:
    v10 = 1;
    goto LABEL_74;
  }
  v5 = sub_22EB4D054(a1, v4[((*(_QWORD *)a2 >> 18) & 1) + 1]);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a1;
  v7 = (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  sub_22F0D60E4(v5 & 0xFFFFFFFFFFFFFFFELL);
  v9 = sub_22F141A3C(v8, 0, *(_QWORD **)(v6 + 112), *(_DWORD **)(v6 + 72));
  v54 = v56;
  v55 = 0x800000000;
  v10 = 1;
  if ((sub_22EB9334C(a1, (unsigned __int8 **)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 4] + ((unint64_t)*a2 >> 24)), a2[4] - 1, 1, (uint64_t)&v54, 0) & 1) == 0)
  {
    v11 = a2[7];
    v12 = *a1;
    if ((*(_QWORD *)a2 & 0x3F00000000) == 0x2B00000000)
      v13 = sub_22EB296C0(v12, 0, v7, v9, (uint64_t *)v54, v55, v11);
    else
      v13 = sub_22EB33018(v12, 0, v7, v9, (uint64_t)v54, v55, v11, 0);
    v10 = v13;
  }
  if (v54 != v56)
    free(v54);
  return v10;
}

uint64_t sub_22EB8CA44(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22EB4DB90((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22E95C7F8(*a1, *(_DWORD *)(a2 + 32), v5, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
}

uint64_t sub_22EB8CAB0(_QWORD **a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unsigned __int8 *v6;
  uint64_t v7;

  v4 = sub_22EB4DB90(a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = v4;
  v6 = sub_22EFFB374((unsigned __int8 *)a2);
  v7 = sub_22EB4D054(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  else
    return sub_22E95CFA4(*a1, *(unsigned int *)(a2 + 32), v5, *(unsigned int *)(a2 + 36), v7 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB8CB24(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;

  if (!sub_22EBA40C8(a1, *(uint64_t **)(a2 + 24)))
    return 1;
  v4 = sub_22EFFB374((unsigned __int8 *)a2);
  if ((sub_22EB4D054(a1, v4) & 1) != 0)
    return 1;
  else
    return sub_22EBBC368();
}

uint64_t sub_22EB8CBB0(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22EB4DB90((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22EC33F14(*a1, *(_DWORD *)(a2 + 32), *(_BYTE *)(a2 + 40) & 3, *(_DWORD *)(a2 + 36), v5, (void *)(v6 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EB8CC28(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = sub_22EFFB374(a2);
  return sub_22EB4D054(a1, v3);
}

uint64_t sub_22EB8CC54(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22EB4A774(*a1, *(_DWORD *)(a2 + 40), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 44));
}

uint64_t sub_22EB8CCD8(_QWORD **a1, uint64_t a2)
{
  if (!sub_22EB4DB90(a1, (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8))
    || (sub_22EB4D054(a1, *(_QWORD *)(a2 + 32)) & 1) != 0)
  {
    return 1;
  }
  sub_22F0D60E4(*(_QWORD *)(a2 + 32));
  return sub_22EB34874();
}

uint64_t sub_22EB8CD68(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];
  void *v17[2];
  _QWORD v18[34];

  v18[33] = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t **)(a2 + 80);
  v17[0] = v18;
  v5 = *v4;
  v17[1] = (void *)0x800000000;
  v18[32] = v5;
  if ((sub_22EBA43B8((uint64_t)a1, (uint64_t)(v4 + 2), (uint64_t)&v4[4 * *((unsigned int *)v4 + 2) + 2]) & 1) != 0)
  {
    v6 = 1;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(_DWORD *)(a2 + 32);
    v13 = *(_OWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 64);
    v14 = *(_QWORD *)(a2 + 56);
    v11 = *(_QWORD *)(a2 + 72);
    v15 = 0u;
    *(_OWORD *)v16 = 0u;
    sub_22E8ACE30((uint64_t)&v15, v7, v8);
    v6 = sub_22F345EB4(*a1, (unsigned int *)&v15, v9, &v13, v10, v11, (uint64_t)v17);
    if (HIDWORD(v16[1]))
      free(v16[0]);
    if ((v6 & 1) != 0)
      v6 = 1;
  }
  if (v17[0] != v18)
    free(v17[0]);
  return v6;
}

uint64_t sub_22EB8CE8C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t *)sub_22EB4DB90(a1, *(uint64_t **)(a2 + 24));
  if (!v5)
    return 1;
  else
    return sub_22F310E84(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 36));
}

uint64_t sub_22EB8CEF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB935E0(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FA6A4(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (*(_DWORD *)a2 >> 18) & 1);
}

uint64_t sub_22EB8CF4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB935E0(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB1B0(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB8CF98(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EB935E0(a1, *(unsigned __int8 **)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB90DBC(a1, *(unsigned int **)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22E9FA204((_QWORD *)*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EB8D008(uint64_t *a1, unsigned int *a2)
{
  return sub_22EBA4658(a1, a2, 0, 0);
}

uint64_t sub_22EB8D014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[32];
  char *v58;
  uint64_t v59;
  _QWORD v60[12];

  v60[10] = *MEMORY[0x24BDAC8D0];
  v58 = (char *)v60;
  v59 = 0x200000000;
  v4 = sub_22E487828(a2);
  v5 = sub_22EB4D054(a1, v4);
  if ((v5 & 1) != 0)
  {
    v10 = 1;
    goto LABEL_35;
  }
  v55 = v57;
  v56 = 0x400000000;
  v6 = *(_DWORD *)(a2 + 20);
  if (!((unsigned __int16)v6 >> 1))
    goto LABEL_30;
  v40 = v5;
  v7 = a2 + 32;
  v8 = *(_QWORD *)(a2 + 24) + 8;
  v9 = 24 * ((unsigned __int16)v6 >> 1);
  v10 = 1;
  do
  {
    v11 = *(_DWORD *)(v8 - 8);
    if (v11 == 1)
    {
      v18 = sub_22EB4D054(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
      if ((v18 & 1) != 0)
        goto LABEL_33;
      v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
      v20 = *(_DWORD *)(v8 + 4);
      v48 = 1;
      v49 = v18 & 0xFFFFFFFFFFFFFFFELL;
      v50 = v20;
      v51 = 0;
      v21 = sub_22E84B46C((uint64_t)&v58, (unint64_t)&v48, 1);
      v22 = &v58[40 * v59];
      v23 = *(_QWORD *)(v21 + 32);
      v24 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)v22 = *(_OWORD *)v21;
      *((_OWORD *)v22 + 1) = v24;
      *((_QWORD *)v22 + 4) = v23;
      LODWORD(v59) = v59 + 1;
      v25 = v56;
      if (v56 >= (unint64_t)HIDWORD(v56))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v25 = v56;
      }
      *((_QWORD *)v55 + v25) = v19;
LABEL_22:
      LODWORD(v56) = v56 + 1;
      goto LABEL_23;
    }
    if (v11)
    {
      v26 = sub_22EB4D054(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 1)));
      if ((v26 & 1) != 0)
        goto LABEL_33;
      v27 = sub_22EB4D054(a1, *(_QWORD *)(v7 + 8 * (*(_DWORD *)v8 + 2)));
      if ((v27 & 1) != 0)
        goto LABEL_33;
      v28 = v26 & 0xFFFFFFFFFFFFFFFELL;
      v29 = v27 & 0xFFFFFFFFFFFFFFFELL;
      v43 = 2;
      v30 = *(_QWORD *)(v8 + 4);
      v44 = v28;
      v45 = v27 & 0xFFFFFFFFFFFFFFFELL;
      v46 = v30;
      v47 = 0;
      v31 = sub_22E84B46C((uint64_t)&v58, (unint64_t)&v43, 1);
      v32 = &v58[40 * v59];
      v33 = *(_QWORD *)(v31 + 32);
      v34 = *(_OWORD *)(v31 + 16);
      *(_OWORD *)v32 = *(_OWORD *)v31;
      *((_OWORD *)v32 + 1) = v34;
      *((_QWORD *)v32 + 4) = v33;
      LODWORD(v59) = v59 + 1;
      v35 = v56;
      if (v56 >= (unint64_t)HIDWORD(v56))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v35 = v56;
      }
      *((_QWORD *)v55 + v35) = v28;
      v36 = v56 + 1;
      LODWORD(v56) = v36;
      if (v36 >= HIDWORD(v56))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v36 = v56;
      }
      *((_QWORD *)v55 + v36) = v29;
      goto LABEL_22;
    }
    v12 = *(_QWORD *)v8;
    if ((*(_QWORD *)v8 & 1) != 0)
    {
      v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v37 = *(_QWORD *)(v12 + 40);
      if ((v37 & 7) != 0)
        v13 = 0;
      else
        v13 = v37 & 0xFFFFFFFFFFFFFFF8;
    }
    v52 = 0;
    v53 = v13;
    v54 = *(_QWORD *)(v8 + 8);
    v14 = sub_22E84B46C((uint64_t)&v58, (unint64_t)&v52, 1);
    v15 = &v58[40 * v59];
    v16 = *(_QWORD *)(v14 + 32);
    v17 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v15 = *(_OWORD *)v14;
    *((_OWORD *)v15 + 1) = v17;
    *((_QWORD *)v15 + 4) = v16;
    LODWORD(v59) = v59 + 1;
    if (*(_QWORD *)v8 && (*(_QWORD *)v8 & 1) == 0)
    {
      v41 = *(_QWORD *)v8;
      v42 = 0;
      sub_22E793870((uint64_t *)(a1 + 8), &v41, &v42);
    }
LABEL_23:
    v8 += 24;
    v9 -= 24;
  }
  while (v9);
  v6 = *(_DWORD *)(a2 + 20);
  v5 = v40;
LABEL_30:
  v38 = sub_22EC38374(*(_QWORD **)a1, (uint64_t *)&v58, *(_DWORD *)(a2 + 16), v6 & 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  if ((v38 & 1) != 0)
    v10 = 1;
  else
    v10 = v38;
LABEL_33:
  if (v55 != v57)
    free(v55);
LABEL_35:
  if (v58 != (char *)v60)
    free(v58);
  return v10;
}

uint64_t sub_22EB8D3A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v13[3];
  int v14;
  uint64_t v15;
  int v16;

  v4 = *a1;
  v16 = 0;
  v15 = 0;
  v14 = 3;
  *(_QWORD *)v13 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v16, v13, (__int16 *)(v4 + 1693), &v15, &v14);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  sub_22EB48E64(v4);
  if ((v11 & 1) != 0)
    return 1;
  else
    return sub_22EBC8E1C(*a1, *(_DWORD *)(a2 + 16) & 0x7FFFFFFF, *(_DWORD *)(a2 + 20), v11 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 24));
}

uint64_t sub_22EB8D4F8(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  _BOOL8 v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  void *v18[2];

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = (uint64_t)*a1;
  sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v7 = sub_22F141A3C(v6, 0, *(_QWORD **)(v5 + 112), *(_DWORD **)(v5 + 72));
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                  + 8) & 0xFFFFFFFFFFFFFFF0)
                          + 16) == 39;
  v10 = *(_DWORD *)(a2 + 32);
  v11 = v7;
  v17 = 0u;
  *(_OWORD *)v18 = 0u;
  v14 = v8;
  v15 = v10;
  sub_22EFC6D6C((uint64_t)&v16, v8);
  v12 = sub_22EC225CC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8), v11, v9, (uint64_t)&v17, 0, 0, (uint64_t)&v14, 0, 0, 0);
  if (HIDWORD(v18[1]))
    free(v18[0]);
  return v12;
}

uint64_t sub_22EB8D5FC(uint64_t a1, const void **a2)
{
  const void **v3;

  v3 = sub_22EFFB894(a2);
  return sub_22EB4D054(a1, v3);
}

uint64_t sub_22EB8D628(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v2 = a2;
  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
  {
    v6 = sub_22EB4D054(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = 0;
  }
  v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(v2 + 16) == (v4 & 0xFFFFFFFFFFFFFFFELL) && *(_QWORD *)(v2 + 24) == v8)
    return v2;
  return sub_22EB53C74(*a1, *(_DWORD *)(v2 + 32), *(_DWORD *)(v2 + 36), *(_QWORD *)(v2 + 8), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8);
}

uint64_t sub_22EB8D6BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v23;
  void *v24[4];
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v6 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  v25 = v27;
  v26 = 0x400000000;
  v23 = 0;
  v7 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v7)
  {
    v8 = (v7 + 1);
    v9 = 8 * v7;
    v10 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(v4 + 8);
      v12 = *(uint64_t **)(v4 + 8 * v8);
      if (v12)
      {
        v13 = sub_22EB4DB90((_QWORD **)a1, v12);
        if (!v13)
          break;
        v14 = v13;
        v15 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v15 = v23;
        }
        v24[v15] = v14;
      }
      else
      {
        v16 = v23;
        if (v23 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v16 = v23;
        }
        v24[v16] = 0;
      }
      ++v23;
      v17 = sub_22EB4D054(a1, v11);
      if ((v17 & 1) != 0)
        break;
      v18 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v18 = v26;
      }
      *((_QWORD *)v25 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 8;
      v9 -= 8;
      if (!v9)
      {
        v20 = v23;
        v21 = (uint64_t *)v25;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v27;
LABEL_20:
    v10 = sub_22EB204CC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), (_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFELL), v24, v20, v5, v21, v19);
  }
  if (v25 != v27)
    free(v25);
  return v10;
}

uint64_t sub_22EB8D8E4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 28);
  if (!v5)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v5 = v6;
  }
  v7 = *(_DWORD *)(a2 + 32);
  if (!v7)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
  v9 = 1;
  if (v8)
  {
    if (*(_BYTE *)(v8 + 16) == 39)
      v9 = (*(_DWORD *)(v8 + 40) & 6) != 2;
  }
  return sub_22EB54020(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 24) != 0, v5, v7, v9);
}

uint64_t sub_22EB8D9AC(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_22EB932F8(a1, a2);
  if (v3 < 0x10)
    return 1;
  v5 = v3;
  v6 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 16, 3);
  return sub_22E5018F0(v6, v5);
}

uint64_t sub_22EB8DA00(uint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) != 0)
    v3 = *(_QWORD *)(a2 + 48) & ((uint64_t)(*(_QWORD *)(a2 + 48) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  else
    v3 = a2;
  v16 = 0;
  v4 = *a1;
  v5 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v5 > 3 || v5 == 2)
  {
    v7 = 1;
  }
  else
  {
    v7 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v4 + 72) + 1) & 2) != 0)
    {
      v20 = 0;
      v18 = 3;
      v19 = 1;
      v17 = *(unsigned int *)(v4 + 1704);
      sub_22EB4DDB8(v4 + 3688, &v19, (int *)&v17, (__int16 *)(v4 + 1693), (uint64_t *)&v20, &v18);
      v8 = *(unsigned int *)(v4 + 3696);
      v9 = v8 - 2;
      v10 = *(_QWORD *)(v4 + 3688);
      v11 = *(_DWORD *)(v10 + 576 * (v8 - 2));
      if (v11 == 5)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = *(_BYTE *)(v10 + 576 * v9 + 572);
        v12 = 1;
      }
      else if (v11 == 2)
      {
        *(_BYTE *)(v10 + 576 * v8 - 4) = 1;
        v12 = *(_BYTE *)(v10 + 576 * v9 + 573) != 0;
      }
      else
      {
        v12 = 0;
        *(_BYTE *)(v10 + 576 * v8 - 4) = 0;
      }
      v13 = v10 + 576 * v8;
      *(_BYTE *)(v13 - 3) = v12;
      *(_WORD *)(v4 + 1693) = 0;
      if (*(_DWORD *)(v4 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v13 - 560));
        sub_22EAEAE08(v4 + 1840, (uint64_t *)(v13 - 496));
      }
      v7 = 0;
    }
  }
  v20 = v22;
  v21 = 0x400000000;
  if ((sub_22EB9334C(a1, *(unsigned __int8 ***)(v3 + 16), (*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3, 0, (uint64_t)&v20, &v16) & 1) != 0)v14 = 1;
  else
    v14 = sub_22EB353A0(*a1, *(_DWORD *)(v3 + 40), (uint64_t *)v20, v21, *(_DWORD *)(v3 + 44));
  if (v20 != v22)
    free(v20);
  if ((v7 & 1) == 0)
    sub_22EB48E64(v4);
  return v14;
}

uint64_t sub_22EB8DC18(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  size_t v48;
  unsigned __int32 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned __int8 *v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  _DWORD *v127;
  unint64_t v128;
  _DWORD *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  int *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  int v164;
  int v165;
  int v166;
  int v167;
  uint64_t v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  unsigned __int8 v174[4];
  int v175;
  int v176;
  unint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  unint64_t v182;
  char v183;
  uint64_t v184;
  _DWORD *v185;
  void *v186;
  uint64_t v187;
  int v188[12];
  unsigned __int8 *v189;
  void *v190[2];
  _BYTE v191[32];
  unint64_t v192;
  int64x2_t v193;
  _QWORD v194[5];
  void *v195;
  uint64_t v196;
  _BYTE v197[352];
  unsigned __int8 *v198;
  __int128 v199;
  _BYTE v200[16];
  char v201;
  void *v202[2];
  _BYTE v203[32];
  unint64_t *v204;
  uint64_t v205;
  _QWORD v206[6];

  v2 = a2;
  v206[4] = *MEMORY[0x24BDAC8D0];
  v195 = v197;
  v196 = 0x400000000;
  v4 = sub_22F3C65DC(a2);
  v5 = v4 - sub_22F3C64D0(v2);
  v6 = v5 >> 4;
  v7 = 0;
  if (v5 >> 4)
  {
    if (v6 >= v196)
    {
      if (v6 <= HIDWORD(v196))
      {
        v10 = (char *)v195;
      }
      else
      {
        v186 = 0;
        v10 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        if (v195 != v197)
          free(v195);
        v195 = v10;
        HIDWORD(v196) = (_DWORD)v186;
        v7 = v196;
      }
      if (v6 != v7)
      {
        v11 = &v10[88 * v7];
        do
        {
          *(_OWORD *)v11 = 0uLL;
          *((_OWORD *)v11 + 1) = 0uLL;
          *((_QWORD *)v11 + 10) = 0;
          *((_OWORD *)v11 + 3) = 0uLL;
          *((_OWORD *)v11 + 4) = 0uLL;
          *((_OWORD *)v11 + 2) = 0uLL;
          *((_QWORD *)v11 + 1) = v11 + 24;
          *((_DWORD *)v11 + 5) = 4;
          v11 += 88;
        }
        while (v11 != &v10[88 * v6]);
      }
    }
    else
    {
      v8 = (void **)((char *)v195 - 80);
      v9 = 88 * v6;
      do
      {
        if (v8 + 2 != *v8)
          free(*v8);
        v8 -= 11;
        v9 += 88;
      }
      while (v9);
    }
    LODWORD(v196) = (unint64_t)v5 >> 4;
  }
  v204 = 0;
  v204 = (unint64_t *)sub_22F3C64D0(v2);
  v12 = (unint64_t *)sub_22F3C650C(v2);
  v13 = v204;
  if (v204 != v12)
  {
    v14 = v12;
    do
    {
      if (sub_22F3C6428(v2, v13))
      {
        v15 = v204;
        v16 = sub_22F3C64D0(v2);
        v17 = (char *)v195 + 88 * (((uint64_t)v15 - v16) >> 4);
        v202[0] = 0;
        v18 = (_QWORD *)(*v204 & 0xFFFFFFFFFFFFFFF8);
        v202[0] = v18;
        v192 = (unint64_t)a1;
        v193.i64[0] = (uint64_t)v202;
        v193.i64[1] = (uint64_t)v17;
        v194[0] = &v204;
        if (*(_BYTE *)(*(_QWORD *)(v18[6] & 0xFFFFFFFFFFFFFFF0) + 16) == 36)
        {
          v19 = v18[7];
          v20 = v19 & 0xFFFFFFFFFFFFFFF8;
          if ((v19 & 4) != 0)
            v20 = *(_QWORD *)(v20 + 32);
          v186 = v188;
          v187 = 0x200000000;
          v21 = *a1;
          v22 = sub_22EFBC5B4((uint64_t)v18);
          v181 = 7;
          v182 = v22;
          sub_22EE7377C(v21, (uint64_t)&v181, (uint64_t)&v186);
          sub_22EBA4B10((uint64_t)&v192);
          *v17 = *(_DWORD *)(v20 + 8);
          if (v186 != v188)
            free(v186);
        }
        else
        {
          sub_22EBA4B10((uint64_t)&v192);
        }
      }
      v13 = v204 + 2;
      v204 = v13;
    }
    while (v13 != v14);
  }
  v23 = sub_22F3090C8(*a1);
  v179 = *a1;
  LOBYTE(v180) = 1;
  v173 = v23;
  *(_QWORD *)(v23 + 1584) = sub_22F3C6624(v2);
  v24 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFF8);
  if ((v24 & 4) != 0)
    v25 = (uint64_t *)v25[4];
  v26 = *v25;
  if ((*v25 & 0xF) != 0)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v27 = v25 + 1;
    v28 = *(unsigned __int8 *)(*(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF0) + 16);
    if (v28 == 26)
      v29 = v26;
    else
      v29 = 0;
    if (v28 == 26)
      v30 = v27;
    else
      v30 = 0;
  }
  v192 = (unint64_t)v194;
  v193 = vdupq_n_s64(0x20uLL);
  v194[4] = 0;
  v190[0] = v191;
  v190[1] = (void *)0x400000000;
  v184 = v29;
  v185 = v30;
  v204 = v206;
  v205 = 0x400000000;
  v202[0] = v203;
  v202[1] = (void *)0x400000000;
  v198 = v200;
  v199 = xmmword_22F44E350;
  v201 = 0;
  if ((*(_BYTE *)(v29 + 23) & 0x10) != 0)
  {
    v34 = v29;
    v35 = v29;
    while (1)
    {
      if ((v35 & 0xF) != 0)
        goto LABEL_52;
      v36 = *(unsigned __int8 *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v36 > 0x39)
      {
LABEL_47:
        if (sub_22F115668(v35))
          v34 = v35;
        v35 = sub_22F115B7C(v35);
        if (!v35)
          goto LABEL_66;
      }
      else
      {
        if (v36 == 24)
          goto LABEL_65;
        if (v36 == 26)
        {
          if ((*(_BYTE *)(v35 + 23) & 0x10) != 0)
          {
LABEL_65:
            v34 = v35;
LABEL_66:
            sub_22F115668(v34);
            if (*(_BYTE *)(v184 + 16) == 25)
              v41 = 0;
            else
              v41 = (unsigned __int16)(*(_QWORD *)(v184 + 16) >> 38);
            v42 = (uint64_t)(v185 + 4);
            v43 = v184 + 40;
            if ((*(_BYTE *)(v29 + 23) & 4) != 0)
              v44 = sub_22E47E270(v29);
            else
              v44 = 0;
            if ((sub_22EB93AFC(a1, v42, v41, v43, v44, (uint64_t)&v204, (uint64_t)v202, (uint64_t)&v198) & 1) != 0)
            {
              v33 = 0;
              goto LABEL_76;
            }
            v45 = *(_QWORD *)(v184 + 24);
            sub_22E47EE80(&v184);
            v37 = sub_22EB94BDC((_QWORD **)a1, (uint64_t)&v192, v45);
            if (v37 >= 0x10)
              goto LABEL_192;
LABEL_75:
            v33 = 0;
            goto LABEL_76;
          }
        }
        else if (((1 << v36) & 0x20000000200003CLL) == 0)
        {
          goto LABEL_47;
        }
LABEL_52:
        v35 = sub_22F115B7C(v35);
      }
    }
  }
  v31 = *(_QWORD *)(v29 + 24);
  sub_22E47EE80(&v184);
  v32 = sub_22EB94BDC((_QWORD **)a1, (uint64_t)&v192, v31);
  if (v32 < 0x10)
  {
    v33 = 0;
    goto LABEL_76;
  }
  v37 = v32;
  v38 = v184;
  for (i = v184; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_64;
      v40 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v40 <= 0x39)
        break;
LABEL_59:
      if (sub_22F115668(i))
        v38 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_185;
    }
    if (v40 == 24)
      goto LABEL_184;
    if (v40 == 26)
      break;
    if (((1 << v40) & 0x20000000200003CLL) == 0)
      goto LABEL_59;
LABEL_64:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_64;
LABEL_184:
  v38 = i;
LABEL_185:
  sub_22F115668(v38);
  if (*(_BYTE *)(v184 + 16) == 25)
    v116 = 0;
  else
    v116 = (unsigned __int16)(*(_QWORD *)(v184 + 16) >> 38);
  v117 = (uint64_t)(v185 + 4);
  v118 = v184 + 40;
  if ((*(_BYTE *)(v29 + 23) & 4) != 0)
    v119 = sub_22E47E270(v29);
  else
    v119 = 0;
  if ((sub_22EB93AFC(a1, v117, v116, v118, v119, (uint64_t)&v204, (uint64_t)v202, (uint64_t)&v198) & 1) != 0)
    goto LABEL_75;
LABEL_192:
  sub_22E4913B4(v29, (uint64_t)&v186);
  v120 = v29;
  while (2)
  {
    while (2)
    {
      if ((v120 & 0xF) != 0)
        goto LABEL_203;
      v121 = *(unsigned __int8 *)(*(_QWORD *)(v120 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v121 > 0x39)
      {
LABEL_198:
        if (sub_22F115668(v120))
          v29 = v120;
        v120 = sub_22F115B7C(v120);
        if (!v120)
          goto LABEL_205;
        continue;
      }
      break;
    }
    if (v121 == 24)
      break;
    if (v121 != 26)
    {
      if (((1 << v121) & 0x20000000200003CLL) != 0)
        goto LABEL_203;
      goto LABEL_198;
    }
    if ((*(_BYTE *)(v120 + 23) & 0x10) == 0)
    {
LABEL_203:
      v120 = sub_22F115B7C(v120);
      continue;
    }
    break;
  }
  v29 = v120;
LABEL_205:
  v122 = sub_22F115668(v29);
  if ((sub_22EB9AF60(a1, v122, v188, (uint64_t)v190, &v183) & 1) != 0)
  {
    v33 = 0;
    goto LABEL_76;
  }
  if (!v201 || (sub_22F24FB88(&v198, v205), !v198))
  {
    if (v189)
      v189 = 0;
    goto LABEL_214;
  }
  v123 = v189;
  if (v189)
  {
    if (*(_BYTE *)(v184 + 16) == 25)
    {
      if ((_DWORD)v205)
        goto LABEL_212;
    }
    else
    {
      v139 = (unsigned __int16)(*(_QWORD *)(v184 + 16) >> 38);
      if (v139 != v205)
        goto LABEL_212;
      if ((unsigned __int16)(*(_QWORD *)(v184 + 16) >> 38))
      {
        v140 = v198;
        while (*v123 == *v140)
        {
          ++v123;
          ++v140;
          if (!--v139)
            goto LABEL_213;
        }
        goto LABEL_212;
      }
    }
  }
  else
  {
LABEL_212:
    v183 = 1;
  }
LABEL_213:
  v189 = v198;
LABEL_214:
  v124 = sub_22EE80544((_QWORD *)*a1, v37, v204, v205, 0, 0, (uint64_t)&v186);
  v33 = 0;
  if (v124 >= 0x10)
  {
    v125 = v124;
    v126 = sub_22E8BB094((uint64_t)&v192, v124);
    v128 = 0;
    v129 = v185;
    *v127 = *v185;
    v127[1] = v129[1];
    v127[2] = v129[2];
    if (v184)
    {
      v130 = 0;
      if (*(_BYTE *)(v184 + 16) == 26)
      {
        v131 = *(_QWORD *)(v184 + 16);
        if ((v131 & 0x3C0000000000000) != 0)
        {
          v132 = (unsigned __int16)(v131 >> 38);
          if (*(_QWORD *)(v184 + 16) == 25)
            v132 = 0;
          v130 = *(_QWORD *)&v129[2 * v132 + 4];
          v128 = v130 & 0xFFFFFFFF00000000;
          v130 = v130;
        }
        else
        {
          v128 = 0;
          v130 = 0;
        }
      }
    }
    else
    {
      v130 = 0;
    }
    if (v126)
    {
      if (*(_BYTE *)(v126 + 16) == 26)
      {
        v133 = *(_QWORD *)(v126 + 16);
        if ((v133 & 0x3C0000000000000) != 0)
        {
          v134 = v130 | v128;
          if (*(_QWORD *)(v126 + 16) == 25)
            v135 = 0;
          else
            v135 = (unsigned __int16)(v133 >> 38);
          *(_QWORD *)&v127[2 * v135 + 4] = v134;
          v129 = v185;
        }
      }
    }
    v127[3] = v129[3];
    if (*(_BYTE *)(v126 + 16) != 25)
    {
      v136 = *(_QWORD *)(v126 + 16);
      if ((v136 & 0x3FFFC000000000) != 0)
      {
        v137 = 0;
        v138 = (unsigned __int16)(v136 >> 38);
        do
        {
          *(_QWORD *)&v127[2 * v137 + 4] = *((_QWORD *)v202[0] + v137);
          ++v137;
        }
        while (v138 != v137);
      }
    }
    v33 = v125;
  }
LABEL_76:
  if (v198 != v200)
    free(v198);
  if (v202[0] != v203)
    free(v202[0]);
  if (v204 != v206)
    free(v204);
  if (v33 >= 0x10)
  {
    v47 = *(_QWORD *)(*a1 + 88);
    v48 = v193.i64[0] - v193.i64[1];
    v49 = v193.i32[0] - v193.i32[2];
    if (v193.i32[0] == v193.i32[2])
      v49 = sub_22F11598C(v33);
    v46 = (unint64_t *)sub_22E3CD3D4(v47 + 2032, v49 + 8, 3);
    *v46 = v33;
    memcpy(v46 + 1, (const void *)(v192 + v193.i64[1]), v48);
  }
  else
  {
    v46 = 0;
  }
  if (v190[0] != v191)
    free(v190[0]);
  if ((_QWORD *)v192 != v194 && v192)
    MEMORY[0x2348A0E84]();
  if (v33 < 0x10)
  {
    v50 = 1;
    goto LABEL_265;
  }
  v51 = *(_QWORD *)(sub_22F3C6220(v2) + 56);
  if ((v51 & 4) != 0 && (v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 40)) != 0)
    v171 = sub_22EB4D054(a1, v52);
  else
    v171 = 0;
  v53 = *(_DWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 576);
  if (v53 > 3 || v53 == 2)
    goto LABEL_122;
  v55 = *(_QWORD *)(*a1 + 216);
  v56 = *(_WORD *)(v55 + 8) & 0x7F;
  if (v56 == 16 || v56 == 83)
    goto LABEL_123;
  v57 = -40;
  if ((*(_WORD *)(v55 + 8) & 0x7Fu) > 0x46)
  {
    if (v56 == 71)
    {
      v57 = -56;
    }
    else if (v56 != 81)
    {
LABEL_114:
      if (v56 - 52 < 6)
      {
        v57 = -72;
      }
      else
      {
        v57 = -48;
        if (v56 - 33 < 5)
          v57 = -64;
      }
    }
  }
  else
  {
    if (v56 > 0x18)
      goto LABEL_113;
    if (((1 << v56) & 0x1066) == 0)
    {
      if (v56 == 24)
      {
        v57 = -48;
      }
      else
      {
LABEL_113:
        if (v56 != 70)
          goto LABEL_114;
        v57 = -64;
      }
    }
  }
  v58 = *(_QWORD *)(v55 + v57 + 16);
  v59 = (_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF8);
  if ((v58 & 4) != 0)
    v59 = (_QWORD *)*v59;
  if ((sub_22EFC7ADC((unint64_t)v59) & 1) == 0)
LABEL_123:
    v60 = 2;
  else
LABEL_122:
    v60 = 0;
  v61 = (_QWORD *)sub_22F3C61E8(v2);
  v62 = (_QWORD *)sub_22F3365E8(*a1, *(_QWORD *)(v2 + 16), (uint64_t)v46, v60, (*(_DWORD *)v2 >> 18) & 3);
  v186 = v61;
  sub_22F25E108(a1 + 1, &v186)[1] = v62;
  v63 = v61[16];
  v169 = (*(unsigned __int16 *)(v63 + 108) >> 13) & 1;
  v167 = *(_DWORD *)(v63 + 112) & 0x7FFFFFFF;
  v165 = sub_22EFD4B78((unint64_t)v61);
  v163 = sub_22F3B1CF4((uint64_t)v61);
  v64 = *a1;
  v65 = *(_QWORD *)(v2 + 16);
  v66 = sub_22F3C6220(v2);
  v67 = (unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v66 + 16))(v66) >> 32;
  if (*(_BYTE *)(*v46 + 16) == 25)
    v68 = 0;
  else
    v68 = (unsigned __int16)(*(_QWORD *)(*v46 + 16) >> 38);
  v69 = sub_22F3C6220(v2);
  v70 = sub_22F3366E8(v64, (uint64_t)v62, v65, v46, v67, v46 + 3, v68, *(_DWORD *)(v69 + 80) >> 30, v171 & 0xFFFFFFFFFFFFFFFELL);
  *(_QWORD *)(v173 + 1488) = v70;
  sub_22F3C6220(v2);
  v186 = (void *)sub_22F3C6220(v2);
  sub_22F25E108(a1 + 1, &v186)[1] = v70;
  v71 = *a1;
  v174[0] = v169;
  v175 = v167;
  v176 = v165;
  v177 = v163;
  v178 = 1;
  v170 = v70;
  sub_22EC52964(v71, v62, v70, v174);
  if (v178)
    v178 = 0;
  v72 = *a1;
  v73 = v70;
  v74 = v70 + 72;
  if (!v70)
    v74 = 0;
  v168 = *(_QWORD *)(v72 + 216);
  v75 = *(_QWORD *)(v72 + 3200);
  *(_QWORD *)(v72 + 3200) = 0;
  v161 = *(_QWORD *)(v72 + 10288);
  v162 = v75;
  v164 = *(_DWORD *)(v72 + 1944);
  v166 = *(_DWORD *)(v72 + 2192);
  *(_QWORD *)(v72 + 216) = v74;
  *(_DWORD *)(v72 + 1944) = *(_DWORD *)(v72 + 1904);
  *(_DWORD *)(v72 + 2192) = *(_DWORD *)(v72 + 1960);
  v76 = *(_QWORD *)(v2 + 16);
  v77 = (*(_DWORD *)v2 >> 18) & 3;
  v78 = *(_DWORD *)(v2 + 24);
  v79 = (*(_DWORD *)v2 >> 20) & 1;
  v80 = (*(_DWORD *)v2 >> 21) & 1;
  v81 = sub_22F3C66E8(v2);
  sub_22EC52B9C(v72, v173, v73, v76, v77, v78, v79, v80, v81);
  v82 = sub_22F3C64D0(v2);
  v83 = sub_22F3C650C(v2);
  if (v82 == v83)
  {
    LOBYTE(v84) = 0;
  }
  else
  {
    v92 = v83;
    v84 = 0;
    v93 = v188;
    do
    {
      v94 = *(_QWORD *)v82;
      if ((*(_QWORD *)v82 & 1) != 0)
        break;
      if ((v94 & 0xFFFFFFFFFFFFFFFCLL) == 4)
      {
        sub_22EBBBBEC(*a1, *(_DWORD *)(v82 + 8), 1, 1, 0, (v94 >> 1) & 1);
      }
      else if (v94 >= 4)
      {
        v172 = v84;
        if (sub_22F3C6428(v2, (_QWORD *)v82))
        {
          v103 = sub_22F3C64D0(v2);
          v104 = (char *)v195 + 88 * ((v82 - v103) >> 4);
          v105 = *(_QWORD *)v82 & 0xFFFFFFFFFFFFFFF8;
          v159 = v93;
          v186 = v93;
          v187 = 0x400000000;
          v106 = *((unsigned int *)v104 + 4);
          if ((_DWORD)v106)
          {
            v109 = (_QWORD *)*((_QWORD *)v104 + 1);
            v160 = &v109[2 * v106];
            while ((*v109 & 1) == 0)
            {
              v110 = v109[1];
              if (v110 < 0x10)
                break;
              v111 = *(_QWORD *)(v105 + 40);
              v112 = (v111 & 7) != 0 ? 0 : v111 & 0xFFFFFFFFFFFFFFF8;
              v113 = sub_22EC5313C(*a1, *(_DWORD *)(v105 + 24), v110, *(_DWORD *)v104, v112, (*(_BYTE *)(v105 + 96) >> 5) & 3, *v109 & 0xFFFFFFFFFFFFFFFELL);
              if (!v113)
                break;
              v114 = v113;
              v115 = v187;
              if (v187 >= (unint64_t)HIDWORD(v187))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v115 = v187;
              }
              *((_QWORD *)v186 + v115) = v114;
              LODWORD(v187) = v187 + 1;
              sub_22F336D2C(*a1, v173, v114);
              v109 += 2;
              if (v109 == v160)
                goto LABEL_166;
            }
LABEL_181:
            if (v186 != v159)
              free(v186);
            LOBYTE(v84) = 1;
            break;
          }
LABEL_166:
          if ((v172 & 1) != 0)
            goto LABEL_181;
          v107 = v2;
          v192 = v105;
          v108 = *(_QWORD *)v186;
          sub_22F25E108(a1 + 1, &v192)[1] = v108;
          v93 = v159;
          if (v186 != v159)
            free(v186);
          v84 = 0;
          v2 = v107;
        }
        else
        {
          v95 = *(_QWORD *)v82;
          if ((*(_QWORD *)v82 & 2) != 0)
            v96 = 1;
          else
            v96 = 2;
          if ((*(_QWORD *)v82 & 0xFFFFFFFFFFFFFFFCLL) == 4)
            v97 = 2;
          else
            v97 = v96;
          if (v95 < 4)
            v97 = 2;
          if ((v95 & 1) != 0)
            v98 = 0;
          else
            v98 = v97;
          v99 = *(_DWORD *)(v82 + 12);
          v100 = v95 & 0xFFFFFFFFFFFFFFF8;
          v192 = v95 & 0xFFFFFFFFFFFFFFF8;
          v186 = 0;
          if (sub_22E793870(a1 + 1, &v192, &v186)
            && v186 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
          {
            v100 = *((_QWORD *)v186 + 1);
          }
          if (!v100 || (*(_BYTE *)(v100 + 28) & 0x80) != 0)
          {
            v84 = 1;
          }
          else
          {
            v101 = *a1;
            v102 = *(_DWORD *)(v82 + 8);
            v186 = 0;
            v192 = 0;
            sub_22EB4EE10(v101, v100, v102, v98, v99, 1, (uint64_t *)&v186, (uint64_t *)&v192, 0);
            v84 = v172;
          }
        }
      }
      v82 += 16;
    }
    while (v82 != v92);
  }
  *(_DWORD *)(v173 + 1508) = *(_DWORD *)(v173 + 1272);
  v85 = *a1;
  LODWORD(v204) = 6;
  v186 = 0;
  LODWORD(v202[0]) = 3;
  v192 = *(unsigned int *)(v85 + 1704);
  sub_22EB4DDB8(v85 + 3688, (int *)&v204, (int *)&v192, (__int16 *)(v85 + 1693), (uint64_t *)&v186, (int *)v202);
  v86 = *(unsigned int *)(v85 + 3696);
  v87 = v86 - 2;
  v88 = *(_QWORD *)(v85 + 3688);
  v89 = *(_DWORD *)(v88 + 576 * (v86 - 2));
  if (v89 == 5)
  {
    *(_BYTE *)(v88 + 576 * v86 - 4) = *(_BYTE *)(v88 + 576 * v87 + 572);
    v90 = 1;
  }
  else if (v89 == 2)
  {
    *(_BYTE *)(v88 + 576 * v86 - 4) = 1;
    v90 = *(_BYTE *)(v88 + 576 * v87 + 573) != 0;
  }
  else
  {
    v90 = 0;
    *(_BYTE *)(v88 + 576 * v86 - 4) = 0;
  }
  v91 = v88 + 576 * v86;
  *(_BYTE *)(v91 - 3) = v90;
  *(_WORD *)(v85 + 1693) = 0;
  if (*(_DWORD *)(v85 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v85 + 1776), (llvm::SmallPtrSetImplBase *)(v91 - 560));
    sub_22EAEAE08(v85 + 1840, (uint64_t *)(v91 - 496));
    if ((v84 & 1) == 0)
      goto LABEL_245;
LABEL_138:
    LOBYTE(v180) = 0;
    goto LABEL_262;
  }
  if ((v84 & 1) != 0)
    goto LABEL_138;
LABEL_245:
  sub_22F3C638C(v2);
  v141 = *(_QWORD *)(v2 + 8 * *(unsigned __int16 *)(v2 + 4) + 32);
  v142 = sub_22F3C64D0(v2);
  v143 = sub_22F3C650C(v2);
  if (v142 != v143)
  {
    v144 = v143;
    do
    {
      v145 = *(_QWORD *)v142;
      if ((*(_QWORD *)v142 & 1) != 0)
      {
        if ((v145 & 0xFFFFFFFFFFFFFFFCLL) == 4)
        {
          sub_22EBBBBEC(*a1, *(_DWORD *)(v142 + 8), 0, 1, 0, (v145 >> 1) & 1);
        }
        else if (v145 >= 4)
        {
          v146 = v145 & 0xFFFFFFFFFFFFFFF8;
          v192 = v145 & 0xFFFFFFFFFFFFFFF8;
          v186 = 0;
          if (sub_22E793870(a1 + 1, &v192, &v186)
            && v186 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
          {
            v146 = *((_QWORD *)v186 + 1);
          }
          if (!v146 || (*(_BYTE *)(v146 + 28) & 0x80) != 0)
            goto LABEL_138;
          v147 = *a1;
          v148 = *(_DWORD *)(v142 + 8);
          v186 = 0;
          v192 = 0;
          sub_22EB4EE10(v147, v146, v148, 0, 0, 1, (uint64_t *)&v186, (uint64_t *)&v192, 0);
        }
      }
      v142 += 16;
    }
    while (v142 != v144);
  }
  LOBYTE(v180) = 0;
  if ((v141 & 1) != 0)
  {
LABEL_262:
    if (v168)
    {
      *(_QWORD *)(v72 + 216) = v168;
      *(_QWORD *)(v72 + 3200) = v162;
      *(_QWORD *)(v72 + 10288) = v161;
      *(_DWORD *)(v72 + 1944) = v164;
      *(_DWORD *)(v72 + 2192) = v166;
    }
    v154 = *(unsigned int *)(v2 + 16);
    v50 = 1;
    sub_22F336DD4(*a1, v154, 0, 1);
    goto LABEL_265;
  }
  sub_22F2F3A38((uint64_t)&v186, v173);
  v149 = v141 & 0xFFFFFFFFFFFFFFFELL;
  sub_22EA30A38(*a1, v170, v149, 1);
  if (v168)
  {
    *(_QWORD *)(v72 + 216) = v168;
    *(_QWORD *)(v72 + 3200) = v162;
    *(_QWORD *)(v72 + 10288) = v161;
    *(_DWORD *)(v72 + 1944) = v164;
    *(_DWORD *)(v72 + 2192) = v166;
  }
  v150 = *a1;
  v151 = *(unsigned int *)(v2 + 16);
  sub_22F0D60E4(v149);
  sub_22EC54548(v150, v151, v152, (uint64_t)&v186);
  v50 = v153;
  sub_22F2F43D0((uint64_t)&v186);
LABEL_265:
  sub_22F2F446C((uint64_t)&v179);
  v155 = (char *)v195;
  if ((_DWORD)v196)
  {
    v156 = 88 * v196;
    do
    {
      v157 = *(char **)&v155[v156 - 80];
      if (&v155[v156 - 64] != v157)
        free(v157);
      v156 -= 88;
    }
    while (v156);
    v155 = (char *)v195;
  }
  if (v155 != v197)
    free(v155);
  return v50;
}

uint64_t sub_22EB8F054(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = sub_22EB98CCC((uint64_t *)a1, v4, *(void **)(a2 + 48), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v13 = v9;
  v14 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v13, &v14)
    && v14 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v9 = *(_QWORD *)(v14 + 8);
  }
  if (v9)
  {
    v10 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
    if ((v10 & 1) == 0)
    {
      v12 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 56, 3);
      return sub_22F2F44CC(v12, v10 & 0xFFFFFFFFFFFFFFFELL, v9, *(_BYTE *)(a2 + 36), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16872), 1, v7, v8, *(_DWORD *)(a2 + 32));
    }
  }
  return 1;
}

uint64_t sub_22EB8F160(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v8;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_DWORD *)(a2 + 32);
  v8 = v5 & 0xFFFFFFFFFFFFFFFELL;
  return sub_22EB296C0(*a1, 0, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), 0, (uint64_t *)&v8, 1, v6);
}

uint64_t sub_22EB8F1E0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a2 + 4);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = (const void **)(a2 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        sub_22E3BA850(a1 + 32, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  v10 = *(_DWORD *)(a2 + 4);
  if (v10 < 0)
  {
    v11 = (v10 & 0x7FFFFFFFu) - 1;
    if ((_DWORD)v11)
    {
      v12 = (void **)(a2 + 24);
      v13 = 8 * v11;
      do
      {
        v14 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), *v12);
        v15 = *(_QWORD *)(a1 + 40);
        if (v15 == *(_QWORD *)(a1 + 32))
          v16 = 52;
        else
          v16 = 48;
        if (v14 != (void **)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = (void *)-2;
          ++*(_DWORD *)(a1 + 56);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return v9;
}

uint64_t sub_22EB8F2CC(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v3;

  v2 = a2;
  v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v2 & 4) != 0)
    v3 = *(_QWORD *)(v3 + 40);
  return sub_22EB4D054(a1, v3);
}

uint64_t sub_22EB8F2E0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22EB2AC58(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EB8F364(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  void *v27;
  unsigned __int32 v28;
  unint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  void *v41;
  __int128 v42;
  void *v43[2];
  void *v44[2];
  _BYTE v45[129];
  uint64_t v46;
  void *v47[2];
  void *v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  __n128 v53;
  void *v54;
  __int128 v55;
  int v56;
  __int16 v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EB4D054(a1, *((_QWORD *)a2 + 2));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *a2;
  if ((*a2 & 0x80000) != 0 && (v6 = *((_QWORD *)a2 + 6)) != 0)
  {
    v7 = sub_22EB98CCC(a1, v6, *((void **)a2 + 7), 0, 0);
    if (!v7)
      return 1;
    v9 = v7;
    v10 = v8;
    v5 = *a2;
    if ((*a2 & 0x100000) != 0)
      goto LABEL_6;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    if ((v5 & 0x100000) != 0)
    {
LABEL_6:
      v11 = a2[6 * ((v5 >> 19) & 1) + 14];
      goto LABEL_9;
    }
  }
  v11 = 0;
LABEL_9:
  v12 = (_QWORD *)*((_QWORD *)a2 + 3);
  v47[0] = v12;
  v44[0] = 0;
  if (sub_22E793870(a1 + 1, v47, v44) && v44[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v12 = (_QWORD *)*((_QWORD *)v44[0] + 1);
  if (!v12)
    return 1;
  v13 = *a2;
  if ((*a2 & 0x80000) != 0)
  {
    v15 = *((_QWORD *)a2 + 8);
    v14 = *((_QWORD *)a2 + 3);
  }
  else
  {
    v14 = *((_QWORD *)a2 + 3);
    v15 = v14;
  }
  v16 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  if (v14 == (v15 & 0xFFFFFFFFFFFFFFFCLL))
  {
    v16 = (unint64_t)v12;
    goto LABEL_25;
  }
  v47[0] = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
  v44[0] = 0;
  if (sub_22E793870(a1 + 1, v47, v44) && v44[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v16 = *((_QWORD *)v44[0] + 1);
  if (!v16)
    return 1;
  v13 = *a2;
LABEL_25:
  v44[0] = v45;
  v44[1] = (void *)0x800000000;
  v46 = 0;
  if ((v13 & 0x100000) != 0)
  {
    v19 = &a2[6 * ((v13 >> 19) & 1)];
    v22 = v19[12];
    v20 = v19 + 12;
    v21 = v22;
    if (v22)
    {
      LODWORD(v46) = v21;
      HIDWORD(v46) = v20[1];
      v23 = (uint64_t)&v20[4 * ((v13 >> 20) & 1)];
      if ((sub_22EBA43B8((uint64_t)a1, v23, v23 + 32 * v20[3]) & 1) != 0)
        goto LABEL_32;
    }
  }
  v24 = *a1;
  sub_22F0D4E74(*((_QWORD *)a2 + 2));
  v26 = sub_22F141A3C(HIDWORD(v25), 0, *(_QWORD **)(v24 + 112), *(_DWORD **)(v24 + 72));
  v27 = (void *)*((_QWORD *)a2 + 4);
  v28 = a2[10];
  v40.n128_u64[0] = *(_QWORD *)(*((_QWORD *)a2 + 3) + 40);
  v40.n128_u32[2] = v28;
  v41 = v27;
  if (!v40.n128_u64[0])
    goto LABEL_30;
  sub_22EB9F61C((__n128 *)v47, a1, &v40);
  v40 = *(__n128 *)v47;
  v41 = v48[0];
  if (!v47[0])
  {
LABEL_32:
    v17 = 1;
  }
  else
  {
LABEL_30:
    v29 = *a2;
    if ((v29 & 0x100000) != 0)
    {
      if (a2[6 * ((v29 >> 19) & 1) + 12])
        v30 = v44;
      else
        v30 = 0;
    }
    else
    {
      v30 = 0;
    }
    v32 = sub_22EC2624C(*a1, (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), (v29 >> 18) & 1);
    if (v12[5])
    {
      v42 = 0u;
      *(_OWORD *)v43 = 0u;
      sub_22E8ACE30((uint64_t)&v42, v9, v10);
      v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8);
      if ((v29 & 0x40000) != 0
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                    + 16) != 39)
      {
        v17 = 1;
      }
      else
      {
        v39 = v26;
        v34 = (_QWORD *)*a1;
        v47[0] = 0;
        v47[1] = &v48[1];
        v48[0] = (void *)0x800000000;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        v52 = v34;
        v53 = v40;
        v54 = v41;
        v55 = xmmword_22F463A40;
        v56 = 16842752;
        v57 = 0;
        v58 = 0;
        sub_22EC56024((uint64_t)v47);
        v35 = *(unsigned int *)(v16 + 28);
        v36 = v48[0];
        if (LODWORD(v48[0]) >= HIDWORD(v48[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v36 = v48[0];
        }
        *((_QWORD *)v47[1] + v36) = (v35 >> 13) & 3 | v16;
        ++LODWORD(v48[0]);
        LODWORD(v47[0]) = 2;
        sub_22EC561E4((uint64_t)v47);
        v17 = sub_22EC24AB8(*a1, v32 & 0xFFFFFFFFFFFFFFFELL, v33, v39, (v29 >> 18) & 1, (uint64_t *)&v42, v11, 0, (uint64_t)v47, (uint64_t)v30, 0, 0, 0);
        if (HIBYTE(v56))
        {
          if (LODWORD(v47[0]) == 5)
          {
            sub_22EC64D18(v52, (uint64_t)v47);
          }
          else if (v50 && (*(_DWORD *)(v52[9] + 52) & 0x400000) != 0)
          {
            sub_22E90B5FC((unint64_t)v52, (uint64_t)v47);
          }
        }
        if (v49)
        {
          v38 = sub_22EC6CBD0(v49);
          MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
        }
        if (v47[1] != &v48[1])
          free(v47[1]);
      }
      if (HIDWORD(v43[1]))
        free(v43[0]);
    }
    else
    {
      v37 = (unint64_t)sub_22EB24398(*a1, v32 & 0xFFFFFFFFFFFFFFFELL, v9, v31, (uint64_t)v12);
      if ((v37 & 1) != 0)
      {
        v17 = 1;
      }
      else
      {
        *(_OWORD *)v47 = 0u;
        *(_OWORD *)v48 = 0u;
        v17 = sub_22EC25974(*a1, v37 & 0xFFFFFFFFFFFFFFFELL, (v29 >> 18) & 1, v26, v47, v12, ((unint64_t)*(unsigned int *)(v16 + 28) >> 13) & 3 | v16, &v40);
        if (HIDWORD(v48[1]))
          free(v48[0]);
      }
    }
  }
  if (v44[0] != v45)
    free(v44[0]);
  return v17;
}

uint64_t sub_22EB8F884(uint64_t *a1, uint64_t a2)
{
  unint64_t *v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24[2];
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[6];

  v28[4] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 32) == 1)
    return sub_22EB4D054(a1, **(_QWORD **)(a2 + 40));
  v5 = sub_22EB4DB90((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (v5)
  {
    v6 = v5;
    v20 = 0;
    v24[0] = v25;
    v24[1] = (void *)0x400000000;
    v7 = 1;
    if ((sub_22EB9334C(a1, *(unsigned __int8 ***)(a2 + 40), *(_DWORD *)(a2 + 32), 1, (uint64_t)v24, &v20) & 1) != 0)
    {
LABEL_25:
      if (v24[0] != v25)
        free(v24[0]);
      return v7;
    }
    v21 = v23;
    v22 = 0x400000000;
    v8 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v8)
    {
      v9 = 0;
      LODWORD(v10) = 0;
      v11 = 8 * v8;
      do
      {
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + v9) + 8);
        if (v10 >= HIDWORD(v22))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          LODWORD(v10) = v22;
        }
        *((_QWORD *)v21 + v10) = v12;
        v10 = (v22 + 1);
        LODWORD(v22) = v22 + 1;
        v9 += 8;
      }
      while (v11 != v9);
      v13 = (uint64_t *)v21;
      v14 = (unsigned __int8 **)v24[0];
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
      if ((_DWORD)v10)
      {
        v19 = v15;
        v7 = 1;
        while (1)
        {
          v16 = *v13++;
          v17 = sub_22ECFABE8((uint64_t *)*a1, *v14, v16, 1, 0);
          if ((v17 & 1) != 0)
            goto LABEL_21;
          v18 = v27;
          if (v27 >= (unint64_t)HIDWORD(v27))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v18 = v27;
          }
          *((_QWORD *)v26 + v18) = v17 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v27) = v27 + 1;
          ++v14;
          if (!--v10)
          {
            v15 = v19;
            break;
          }
        }
      }
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 24);
      v26 = v28;
      v27 = 0x400000000;
    }
    v7 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 48, 3);
    sub_22F0614DC(v7, *(_QWORD *)(*a1 + 88), v6, (uint64_t *)v26, v27, v15);
LABEL_21:
    if (v26 != v28)
      free(v26);
    if (v21 != v23)
      free(v21);
    goto LABEL_25;
  }
  return 1;
}

uint64_t sub_22EB8FB50(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    v7 = sub_22EB4D054(a1, v6);
    if ((v7 & 1) != 0)
      return 1;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_QWORD *)(a2 + 32);
  if (v8)
  {
    v9 = sub_22EB4D054(a1, v8);
    if ((v9 & 1) != 0)
      return 1;
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_QWORD *)(a2 + 40);
  if (v10)
  {
    v11 = sub_22EB4D054(a1, v10);
    if ((v11 & 1) != 0)
      return 1;
  }
  else
  {
    v11 = 0;
  }
  return sub_22EB29E14(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), v4, v7 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 52), v9 & 0xFFFFFFFFFFFFFFFELL, v11 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 56));
}

uint64_t sub_22EB8FC1C(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(a2 + 32);
  v5 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 24)));
  if ((v5 & 1) == 0)
  {
    v14 = 0;
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      LOBYTE(v7) = 0;
      v8 = &v4[v6];
      v9 = v4;
      do
      {
        while (1)
        {
          v10 = sub_22EB4D054(a1, *v9);
          if ((v10 & 1) == 0)
            break;
          ++v9;
          v7 = 1;
          if (v9 == v8)
            return v7;
        }
        v11 = v14;
        if (v14 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v11 = v14;
        }
        v15[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
        v12 = ++v14;
        ++v9;
      }
      while (v9 != v8);
      if ((v7 & 1) != 0)
        return 1;
      LODWORD(v6) = *(_DWORD *)(a2 + 24);
    }
    else
    {
      v12 = 0;
    }
    return sub_22EB2BE20(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v15, v12, &v4[(v6 + 1)], v6);
  }
  return 1;
}

uint64_t sub_22EB8FDA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v30;
  char *v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char v45;
  __int128 v46[4];
  void *v47;
  uint64_t v48;
  _QWORD v49[34];

  v2 = a2;
  v49[32] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a2 + 28);
  memset(v46, 0, sizeof(v46));
  v47 = v49;
  v48 = 0x400000000;
  sub_22E8BB974((uint64_t)&v47, v3, v46);
  if ((_DWORD)v3)
  {
    v4 = 0;
    LOBYTE(v5) = 0;
    v6 = v2 + 32;
    v42 = v2 + 32;
    while (1)
    {
      v45 = v5;
      v7 = *(_QWORD *)(v6 + 8 * v4);
      v8 = *(_QWORD *)(v7 + 40);
      v9 = (v8 & 7) != 0 ? 0 : v8 & 0xFFFFFFFFFFFFFFF8;
      v10 = (char *)v47 + 64 * v4;
      *(_QWORD *)v10 = v9;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(v7 + 24);
      v11 = *(_DWORD *)(v7 + 24);
      v12 = *(_QWORD *)(v7 + 56);
      if ((v12 & 4) == 0)
        break;
      v33 = v12 & 0xFFFFFFFFFFFFFFF8;
      v13 = v3;
      if (*(_DWORD *)(v33 + 16))
        v34 = ***(_DWORD ***)(v33 + 24);
      else
        v34 = *(_DWORD *)(v7 + 64);
      if (v11 != v34)
      {
        v14 = *(uint64_t **)(v33 + 32);
LABEL_9:
        v15 = sub_22EB4DB90((_QWORD **)a1, v14);
        v16 = sub_22EB932F8((uint64_t)a1, *(_QWORD *)(v7 + 48));
        v17 = sub_22EE7D030(*a1, v16, (uint64_t)v15);
        *((_QWORD *)v47 + 8 * v4 + 2) = v17;
      }
LABEL_10:
      v18 = v2;
      v19 = v6 + 8 * *(unsigned int *)(v2 + 28);
      v20 = (3 * v4);
      v21 = (v20 + 1);
      v22 = *(_QWORD *)(v19 + 8 * v21);
      v43 = (v20 + 2);
      v23 = *(_QWORD *)(v19 + 8 * v43);
      v24 = sub_22EB4D054(a1, *(_QWORD *)(v19 + 8 * v20));
      v25 = sub_22EB4D054(a1, v22);
      v26 = sub_22EB4D054(a1, v23);
      v3 = v13;
      if ((v45 & 1) != 0)
        goto LABEL_21;
      v27 = *(_QWORD *)(v7 + 56);
      v28 = v27 & 0xFFFFFFFFFFFFFFF8;
      if ((v27 & 4) != 0)
        v28 = *(_QWORD *)(v28 + 32);
      if (v28)
      {
        if (*((_QWORD *)v47 + 8 * v4 + 2) < 0x10uLL || (v24 & 1) != 0)
          goto LABEL_21;
LABEL_20:
        if (((v25 | v26) & 1) != 0)
          goto LABEL_21;
        LOBYTE(v5) = 0;
        v30 = v47;
        v31 = (char *)v47 + 64 * v4;
        *((_QWORD *)v31 + 3) = v24 & 0xFFFFFFFFFFFFFFFELL;
        *((_QWORD *)v31 + 4) = v25 & 0xFFFFFFFFFFFFFFFELL;
        *((_QWORD *)v31 + 5) = v26 & 0xFFFFFFFFFFFFFFFELL;
        v6 = v42;
        *((_DWORD *)v31 + 12) = *(_DWORD *)(v42
                                          + 8 * *(unsigned int *)(v18 + 28)
                                          + 8 * (3 * *(_DWORD *)(v18 + 28))
                                          + 4 * v20);
        v32 = *(_DWORD *)(v42
                        + 8 * *(unsigned int *)(v18 + 28)
                        + 8 * (3 * *(_DWORD *)(v18 + 28))
                        + 4 * v21);
        v2 = v18;
        *((_DWORD *)v31 + 13) = v32;
        *((_DWORD *)v31 + 14) = *(_DWORD *)(v42
                                          + 8 * *(unsigned int *)(v18 + 28)
                                          + 8 * (3 * *(_DWORD *)(v18 + 28))
                                          + 4 * v43);
        if (++v4 == v13)
          goto LABEL_31;
      }
      else
      {
        if ((v24 & 1) == 0)
          goto LABEL_20;
LABEL_21:
        ++v4;
        v5 = 1;
        v2 = v18;
        v6 = v42;
        if (v4 == v13)
          goto LABEL_35;
      }
    }
    v13 = v3;
    if (v11 == *(_DWORD *)(v7 + 64))
      goto LABEL_10;
    v14 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_9;
  }
  v30 = v47;
LABEL_31:
  v35 = sub_22EB2C3A8((_QWORD *)*a1, 0, *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), *(_DWORD *)(v2 + 24), (uint64_t)v30, v48);
  v5 = v35;
  if (v35 >= 2 && (_DWORD)v3)
  {
    v36 = (uint64_t *)(v2 + 32);
    v37 = (uint64_t *)((v35 & 0xFFFFFFFFFFFFFFFELL) + 32);
    do
    {
      v39 = *v36++;
      v38 = v39;
      v40 = *v37++;
      *(_QWORD *)&v46[0] = v38;
      sub_22F25E108(a1 + 1, v46)[1] = v40;
      --v3;
    }
    while (v3);
  }
LABEL_35:
  if (v47 != v49)
    free(v47);
  return v5;
}

uint64_t sub_22EB900F4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)sub_22EB4DB90((_QWORD **)a1, *(uint64_t **)(a2 + 16));
  if (v4)
    return sub_22EC2A5E0(*a1, *(_DWORD *)(a2 + 24), v4, *(_DWORD *)(a2 + 28));
  else
    return 1;
}

uint64_t sub_22EB9013C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  void *v15[2];

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v7 = *(_DWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 28);
  v8 = *(unsigned __int8 *)(a2 + 32);
  v14 = 0u;
  *(_OWORD *)v15 = 0u;
  v11 = sub_22E3CB704(*(llvm::StringMapImpl **)((*a1)[11] + 15192), "isa", 3uLL);
  v12 = v7;
  sub_22EFC6D6C((uint64_t)&v13, v11);
  v9 = sub_22EC225CC(*a1, v5, *(_QWORD *)(v5 + 8), v6, v8, (uint64_t)&v14, 0, 0, (uint64_t)&v11, 0, 0, 0);
  if (HIDWORD(v15[1]))
    free(v15[0]);
  return v9;
}

uint64_t sub_22EB90214(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  void *v16[2];

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  v15 = 0u;
  *(_OWORD *)v16 = 0u;
  v12 = *(_QWORD *)(v6 + 40);
  v13 = v7;
  sub_22EFC6D6C((uint64_t)&v14, v12);
  v9 = sub_22EC225CC(*a1, v5, *(_QWORD *)(v5 + 8), v7, v8 & 1, (uint64_t)&v15, 0, 0, (uint64_t)&v12, 0, 0, 0);
  v10 = v9;
  if ((v8 & 2) != 0 && v9 >= 2)
    *(_BYTE *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 40) |= 2u;
  if (HIDWORD(v16[1]))
    free(v16[0]);
  return v10;
}

uint64_t sub_22EB902F4(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[64];
  void *v37;
  uint64_t v38;
  _QWORD v39[10];

  v39[8] = *MEMORY[0x24BDAC8D0];
  v33 = 0;
  v37 = v39;
  v38 = 0x800000000;
  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(unsigned __int16 *)(a2 + 24);
  }
  if ((sub_22EB9334C(a1, (unsigned __int8 **)(a2 + 48), v4, 0, (uint64_t)&v37, &v33) & 1) != 0)
    goto LABEL_20;
  v5 = *(_DWORD *)(a2 + 24);
  if (BYTE2(v5) - 2 < 2)
  {
    if ((v5 & 0x1000000) != 0)
    {
      v6 = (uint64_t *)(a2 + 16);
      if (*(_QWORD *)(a2 + 16))
      {
        v34 = v36;
        v35 = 0x1000000000;
        sub_22F3C78D4(a2, (uint64_t)&v34);
        v7 = *(_DWORD *)(a2 + 24);
        if ((v7 & 0xFE0000) == 0x20000)
          v8 = *(unsigned int *)(a2 + 28);
        else
          v8 = 0;
        v21 = (uint64_t *)(a2 + 16);
        if ((v7 & 0x1000000) != 0)
          v21 = (uint64_t *)(*v6 + 40);
        v22 = *v21;
        v23 = (int *)v34;
        v24 = v35;
        v25 = sub_22F3C7A10(a2);
        if ((v7 & 0x1000000) != 0)
          v27 = *v6;
        else
          v27 = 0;
        v30 = *(unsigned int *)(a2 + 32);
        v31 = (_QWORD *)*a1;
        if ((*(_BYTE *)(v27 + 58) & 2) != 0)
          v32 = sub_22EC2DA20(v31, 0, v25, v8, v22, v27, v30);
        else
          v32 = sub_22EC2F730(v31, 0, v25, v8, v22, v27, v30, v26, v23, v24, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v37, v38, 0, 0);
        v15 = v32;
        v29 = v34;
        if (v34 != v36)
          goto LABEL_42;
        goto LABEL_21;
      }
    }
LABEL_20:
    v15 = 1;
    goto LABEL_21;
  }
  if (BYTE2(v5))
  {
    if ((v5 & 0xFF0000) == 0x10000)
      v10 = *(_QWORD *)(a2 + 40);
    else
      v10 = 0;
    v11 = sub_22EB4D054(a1, v10);
    if ((v11 & 1) != 0)
      goto LABEL_20;
    v34 = v36;
    v35 = 0x1000000000;
    sub_22F3C78D4(a2, (uint64_t)&v34);
    v12 = (_QWORD *)(a2 + 16);
    if ((*(_BYTE *)(a2 + 27) & 1) != 0)
    {
      v13 = *v12;
      v12 = (_QWORD *)(*v12 + 40);
    }
    else
    {
      v13 = 0;
    }
    v28 = sub_22EC2DA20(*a1, v11 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 8), 0, *v12, v13, *(unsigned int *)(a2 + 32));
  }
  else
  {
    if ((v5 & 0xFF0000) != 0)
      v9 = 0;
    else
      v9 = *(uint64_t **)(a2 + 40);
    v14 = sub_22EB4DB90((_QWORD **)a1, v9);
    if (!v14)
      goto LABEL_20;
    v17 = (uint64_t *)v14;
    v34 = v36;
    v35 = 0x1000000000;
    sub_22F3C78D4(a2, (uint64_t)&v34);
    v19 = (uint64_t *)(a2 + 16);
    if ((*(_BYTE *)(a2 + 27) & 1) != 0)
    {
      v20 = *v19;
      v19 = (uint64_t *)(*v19 + 40);
    }
    else
    {
      v20 = 0;
    }
    v28 = sub_22EC2F730((_QWORD *)*a1, v17, *v17, 0, *v19, v20, *(_DWORD *)(a2 + 32), v18, (int *)v34, v35, *(unsigned int *)(a2 + 36), (unsigned __int8 **)v37, v38, 0, 0);
  }
  v15 = v28;
  v29 = v34;
  if (v34 != v36)
LABEL_42:
    free(v29);
LABEL_21:
  if (v37 != v39)
    free(v37);
  return v15;
}

uint64_t sub_22EB90648(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  char v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[9];

  v9[8] = *MEMORY[0x24BDAC8D0];
  v7 = v9;
  v8 = 0x800000000;
  v6 = 0;
  if ((sub_22EB9334C(a1, (unsigned __int8 **)(a2 + 40), *(_DWORD *)(a2 + 16), 0, (uint64_t)&v7, &v6) & 1) != 0)
    v4 = 1;
  else
    v4 = sub_22EC28BF4((_QWORD *)*a1, *(_QWORD *)(a2 + 20), (uint64_t *)v7, v8);
  if (v7 != v9)
    free(v7);
  return v4;
}

uint64_t sub_22EB90710(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22EC27DFC(*a1, *(_QWORD *)(a2 + 32), (_BYTE *)(v4 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EB90758(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v36[2];
  int v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  int v45;
  char v46;
  char v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[34];

  v2 = a2;
  v50[32] = *MEMORY[0x24BDAC8D0];
  v48 = v50;
  v49 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) != 0)
  {
    v6 = (uint64_t *)(a2 + 48);
    v7 = (unint64_t)&loc_22F44E000;
    v8 = a2;
    while (1)
    {
      v10 = *(v6 - 1);
      v9 = *v6;
      v11 = v7 & 0xFFFFFF00FFFFFF00;
      v12 = *(_DWORD *)(v2 + 16);
      if ((v12 & 0x80000000) == 0)
        goto LABEL_4;
      v18 = v8 + 16 * (v12 & 0x7FFFFFFF);
      v19 = *(_DWORD *)(v18 + 40);
      LODWORD(v18) = *(_DWORD *)(v18 + 44);
      v20 = v7 & 0xFFFFFF0000000000 | (v18 - 1) | 0x100000000;
      if ((_DWORD)v18)
        v11 = v20;
      if (v19)
      {
        v43 = &v45;
        v44 = 0x200000000;
        v21 = *a1;
        v41 = 7;
        v42 = v10;
        sub_22EE7377C(v21, (uint64_t)&v41, (uint64_t)&v43);
        v22 = *a1;
        v39 = 7;
        v40 = v9;
        sub_22EE7377C(v22, (uint64_t)&v39, (uint64_t)&v43);
        v23 = *a1;
        v24 = *(_DWORD *)(*a1 + 11992);
        *(_DWORD *)(*a1 + 11992) = -1;
        v25 = sub_22EB4D054(a1, v10);
        if ((v25 & 1) != 0 || (v26 = sub_22EB4D054(a1, v9), (v26 & 1) != 0))
        {
          v27 = 0;
        }
        else
        {
          v36[0] = v25 & 0xFFFFFFFFFFFFFFFELL;
          v36[1] = v26 & 0xFFFFFFFFFFFFFFFELL;
          v37 = v19;
          v38 = v11;
          v27 = 1;
          v28 = (_OWORD *)sub_22E78DF7C((uint64_t)&v48, (unint64_t)v36, 1);
          v29 = (char *)v48 + 32 * v49;
          v30 = v28[1];
          *v29 = *v28;
          v29[1] = v30;
          LODWORD(v49) = v49 + 1;
        }
        *(_DWORD *)(v23 + 11992) = v24;
        if (v43 != &v45)
          free(v43);
        v2 = a2;
        if (!v27)
        {
LABEL_19:
          v33 = 1;
          goto LABEL_22;
        }
      }
      else
      {
LABEL_4:
        v13 = sub_22EB4D054(a1, *(v6 - 1));
        if ((v13 & 1) != 0)
          goto LABEL_19;
        v14 = sub_22EB4D054(a1, v9);
        if ((v14 & 1) != 0)
          goto LABEL_19;
        v43 = (void *)(v13 & 0xFFFFFFFFFFFFFFFELL);
        v44 = v14 & 0xFFFFFFFFFFFFFFFELL;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        v15 = (_OWORD *)sub_22E78DF7C((uint64_t)&v48, (unint64_t)&v43, 1);
        v16 = (char *)v48 + 32 * v49;
        v17 = v15[1];
        *v16 = *v15;
        v16[1] = v17;
        LODWORD(v49) = v49 + 1;
      }
      v8 += 8;
      v6 += 2;
      v7 = v11;
      if (!--v5)
      {
        v31 = v48;
        v32 = v49;
        goto LABEL_21;
      }
    }
  }
  v32 = 0;
  v31 = v50;
LABEL_21:
  v33 = sub_22EC297B0((_QWORD *)*a1, *(_QWORD *)(v2 + 20), (uint64_t)v31, v32);
LABEL_22:
  if (v48 != v50)
    free(v48);
  return v33;
}

uint64_t sub_22EB909FC(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  void *v19[2];

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 40);
  if ((v3 & 6) == 0)
  {
    v5 = sub_22EB4D054(a1, v3 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 16);
      v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
      if ((v6 & 4) != 0)
      {
        v10 = (*a1)[11];
        v11 = *(_QWORD *)(v10 + 16872);
        v12 = v6 & 0xFFFFFFFFFFFFFFF8;
        v13 = *(_QWORD *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8;
        v14 = *(_DWORD *)(v2 + 32);
        v2 = sub_22E3CD3D4(v10 + 2032, 48, 3);
        sub_22F2F4590(v2, v12, v13, v11, 1, 3, v14, v7);
      }
      else
      {
        v8 = *(_DWORD *)(v2 + 32);
        v18 = 0u;
        *(_OWORD *)v19 = 0u;
        v15 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFFF8) + 40);
        v16 = v8;
        sub_22EFC6D6C((uint64_t)&v17, v15);
        v2 = sub_22EC225CC(*a1, v7, *(_QWORD *)(v7 + 8), v8, 0, (uint64_t)&v18, 0, 0, (uint64_t)&v15, 0, 0, 0);
        if (HIDWORD(v19[1]))
          free(v19[0]);
      }
    }
  }
  return v2;
}

uint64_t sub_22EB90B20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3341E8(*a1, *(_DWORD *)(a2 + 16), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL, *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48));
}

uint64_t sub_22EB90B90(uint64_t *a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[13];

  v27[12] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EB4DB90((_QWORD **)a1, *(uint64_t **)(a2 + 24));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v25 = v27;
  v26 = 0x400000000;
  v6 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (unint64_t *)(a2 + 48);
    while (1)
    {
      v23 = 1;
      v22 = *(v8 - 1);
      v9 = *v8;
      v10 = *v8 & 3;
      if ((v10 - 1) >= 2)
      {
        if ((_DWORD)v10 != 3)
        {
          v14 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 40 + 16 * *(unsigned int *)(a2 + 32) + 8 * (v9 >> 2)));
          if ((v14 & 1) != 0)
          {
            v20 = 1;
            goto LABEL_19;
          }
          v23 = 1;
          v24 = v14 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_13;
        }
      }
      else
      {
        v23 = 0;
        v11 = v9 & 3;
        v12 = v9 & 0xFFFFFFFFFFFFFFFCLL;
        if (v11 != 1)
          goto LABEL_8;
        v13 = *(_QWORD *)(v12 + 40);
        if ((v13 & 7) == 0)
        {
          v12 = v13 & 0xFFFFFFFFFFFFFFF8;
LABEL_8:
          v24 = v12;
          if (!v12)
            goto LABEL_14;
LABEL_13:
          v15 = sub_22E4EF088((uint64_t)&v25, (unint64_t)&v22, 1);
          v16 = (char *)v25 + 24 * v26;
          v17 = *(_OWORD *)v15;
          *((_QWORD *)v16 + 2) = *(_QWORD *)(v15 + 16);
          *(_OWORD *)v16 = v17;
          v7 = v26 + 1;
          LODWORD(v26) = v26 + 1;
        }
      }
LABEL_14:
      v8 += 2;
      if (!--v6)
      {
        v18 = (unsigned int *)v25;
        v19 = v7;
        goto LABEL_18;
      }
    }
  }
  v19 = 0;
  v18 = (unsigned int *)v27;
LABEL_18:
  v20 = sub_22EB49A78(*a1, *(_DWORD *)(a2 + 16), v5, v18, v19, *(_DWORD *)(a2 + 20));
LABEL_19:
  if (v25 != v27)
    free(v25);
  return v20;
}

uint64_t sub_22EB90D58(uint64_t a1, _QWORD *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = 48;
  if (v5 == *(_QWORD *)(a1 + 32))
    v6 = 52;
  if (v4 == (void **)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return (uint64_t)a2;
  else
    return sub_22EB4D054(a1, a2[2]);
}

uint64_t sub_22EB90DBC(uint64_t *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  _DWORD v29[66];
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD v40[3];
  __int16 v41;
  int v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)*a1;
  v5 = *((_QWORD *)a2 + 2);
  v6 = a2[6];
  v30 = 0;
  v31 = v33;
  v32 = 0x800000000;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = v4;
  v38 = v5;
  v39 = v6;
  sub_22EFC6D6C((uint64_t)v40, v5);
  v40[1] = 0;
  v40[2] = 0;
  v41 = 0;
  v42 = 257;
  v43 = 0;
  sub_22EC56024((uint64_t)&v30);
  if ((sub_22E8CA788((uint64_t)a1, (unsigned __int8 *)a2, (*a2 & 0x80000) != 0, (uint64_t)&v30) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_36;
  }
  v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v8 = *((_QWORD *)a2 + 5);
  if (v8)
  {
    v9 = sub_22EB98CCC(a1, v8, *((void **)a2 + 6), 0, 0);
    if (!v9)
    {
      v7 = 1;
      goto LABEL_34;
    }
    sub_22E8ACE30((uint64_t)&v25, v9, v10);
  }
  v11 = *((_QWORD *)a2 + 7);
  if (v11)
  {
    v27 = *((_QWORD *)a2 + 7);
    v28[0] = 0;
    if (sub_22E793870(a1 + 1, &v27, v28))
    {
      if (v28[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      {
        v11 = *((_QWORD *)v28[0] + 1);
        if (!v11)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v22 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v22, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_34;
        }
      }
    }
    v35 = v11;
  }
  v12 = *a2;
  if ((v12 & 0x40000) != 0)
  {
    v13 = a2[1];
    v14 = (uint64_t)(*a2 == 211 ? a2 + 16 : a2 + 20);
    v15 = (int *)(v14 + 8 * v13);
    v16 = v15[2];
    v17 = *v15;
    if (*v15 | v16)
    {
      v18 = v15[1];
      v28[0] = v29;
      v28[1] = (void *)0x800000000;
      v29[64] = v17;
      v29[65] = v18;
      if (v17)
      {
        if ((sub_22EBA43B8((uint64_t)a1, v14 + 8 * v13 + 16 * ((v12 >> 18) & 1), v14 + 8 * v13 + 16 * ((v12 >> 18) & 1) + 32 * *(unsigned int *)(v14 + 8 * v13 + 12)) & 1) != 0)
        {
          LODWORD(v30) = 0;
          LODWORD(v32) = 0;
          if (v34)
          {
            v19 = sub_22EC6CBD0(v34);
            MEMORY[0x2348A0E9C](v19, 0x10E0C409F09D3C3);
          }
          HIBYTE(v42) = 0;
          v7 = 1;
          v34 = 0;
          v35 = 0;
          goto LABEL_48;
        }
        LODWORD(v12) = *a2;
      }
      v7 = sub_22ED66318((_QWORD *)*a1, (uint64_t)&v25, v16, (uint64_t)&v30, (v12 >> 19) & 1, (uint64_t)v28);
LABEL_48:
      if (v28[0] != v29)
        free(v28[0]);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v30 != 2)
    goto LABEL_32;
  v20 = *v31 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_DWORD *)(v20 + 28) & 0x7Fu) <= 0x2F && ((1 << (*(_DWORD *)(v20 + 28) & 0x7F)) & 0xC00000060000) != 0)
  {
    v20 = sub_22EFBAEA4(v20);
    if (!v20)
      goto LABEL_32;
  }
  if (!sub_22EFBAEF8(v20))
  {
    LODWORD(v12) = *a2;
LABEL_32:
    v21 = sub_22EB235A8((_QWORD *)*a1, (uint64_t)&v25, (uint64_t)&v30, (v12 >> 19) & 1, 0);
    goto LABEL_33;
  }
  v21 = sub_22EC21A04(*a1, (uint64_t *)&v25, 0, (uint64_t)&v30, 0, 0, 0);
LABEL_33:
  v7 = v21;
LABEL_34:
  if (HIDWORD(v26[1]))
    free(v26[0]);
LABEL_36:
  if (BYTE1(v42))
  {
    if ((_DWORD)v30 == 5)
    {
      sub_22EC64D18(v37, (uint64_t)&v30);
    }
    else if (v35 && (*(_DWORD *)(v37[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v37, (uint64_t)&v30);
    }
  }
  if (v34)
  {
    v24 = sub_22EC6CBD0(v34);
    MEMORY[0x2348A0E9C](v24, 0x10E0C409F09D3C3);
  }
  if (v31 != (_QWORD *)v33)
    free(v31);
  return v7;
}

uint64_t sub_22EB91184(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  void *v35[2];
  void *v36[2];
  _BYTE v37[256];
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a2 + 7);
  if (v4 && (sub_22EFFFB48(*((unsigned __int8 **)a2 + 7)) & 1) == 0)
  {
    v12 = sub_22EB4D054(a1, v4);
    if ((v12 & 1) != 0)
      return 1;
    v13 = sub_22EC2624C(*(_QWORD *)a1, (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL), (*a2 >> 19) & 1);
    v6 = v13;
    if ((v13 & 1) != 0)
      return 1;
    v5 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = sub_22EB932F8(a1, *((_QWORD *)a2 + 8));
    v6 = 0;
  }
  v7 = *((_QWORD *)a2 + 5);
  if (v7)
  {
    v8 = sub_22EB98CCC((uint64_t *)a1, v7, *((void **)a2 + 6), 0, 0);
    if (v8)
    {
      v10 = v8;
      v11 = v9;
      goto LABEL_12;
    }
    return 1;
  }
  v10 = 0;
  v11 = 0;
LABEL_12:
  if ((*a2 & 0x40000) != 0)
  {
    if (*a2 == 211)
      v16 = a2 + 16;
    else
      v16 = a2 + 20;
    v15 = v16[2 * a2[1] + 2];
  }
  else
  {
    v15 = 0;
  }
  v17 = *(_QWORD **)a1;
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = v17;
  v47 = *((_OWORD *)a2 + 1);
  v18 = *((_QWORD *)a2 + 4);
  v50 = 0;
  v48 = v18;
  v49 = 0;
  v51 = 0;
  v52 = 257;
  v53 = 0;
  sub_22EC56024((uint64_t)&v39);
  if ((sub_22E8CA788(a1, (unsigned __int8 *)a2, 0, (uint64_t)&v39) & 1) == 0)
  {
    if (sub_22F0621BC((uint64_t)a2))
    {
      v19 = sub_22F0621BC((uint64_t)a2);
      *(_QWORD *)&v34 = v19;
      v36[0] = 0;
      if (sub_22E793870((uint64_t *)(a1 + 8), &v34, v36)
        && v36[0] != (void *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24)))
      {
        v19 = *((_QWORD *)v36[0] + 1);
      }
      if (!v19)
        goto LABEL_19;
      v44 = v19;
    }
    v36[0] = v37;
    v36[1] = (void *)0x800000000;
    v38 = 0;
    v20 = *a2;
    if ((v20 & 0x40000) == 0)
    {
      v33 = v5;
      v21 = 0;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
      goto LABEL_43;
    }
    v25 = *a2;
    v26 = a2[1];
    if (v25 == 211)
      v27 = a2 + 16;
    else
      v27 = a2 + 20;
    v28 = &v27[2 * v26];
    if (*v28)
    {
      v38 = *(_QWORD *)v28;
      if ((sub_22EBA43B8(a1, (uint64_t)&v28[4 * ((v20 >> 18) & 1)], (uint64_t)&v28[8 * v27[2 * v26 + 3] + 4 * ((v20 >> 18) & 1)]) & 1) != 0)
      {
        v14 = 1;
LABEL_45:
        if (v36[0] != v37)
          free(v36[0]);
        goto LABEL_47;
      }
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (*a2 >> 19) & 1;
      v33 = v5;
      if ((*a2 & 0x40000) == 0)
      {
        v21 = 0;
LABEL_43:
        v30 = v23;
        v34 = 0u;
        *(_OWORD *)v35 = 0u;
        sub_22E8ACE30((uint64_t)&v34, v10, v11);
        v14 = sub_22EC24AB8(*(_QWORD *)a1, v22, v33, v30, v24, (uint64_t *)&v34, v15, 0, (uint64_t)&v39, (uint64_t)v21, 0, 0, 0);
        if (HIDWORD(v35[1]))
          free(v35[0]);
        goto LABEL_45;
      }
      v25 = *a2;
      v26 = a2[1];
    }
    else
    {
      v33 = v5;
      v22 = v6 & 0xFFFFFFFFFFFFFFFELL;
      v23 = a2[18];
      v24 = (v20 >> 19) & 1;
    }
    v29 = a2 + 16;
    if (v25 != 211)
      v29 = a2 + 20;
    if (v29[2 * v26])
      v21 = v36;
    else
      v21 = 0;
    goto LABEL_43;
  }
LABEL_19:
  v14 = 1;
LABEL_47:
  if (BYTE1(v52))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
  if (v43)
  {
    v32 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v32, 0x10E0C409F09D3C3);
  }
  if (v40 != v42)
    free(v40);
  return v14;
}

uint64_t sub_22EB91590(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = v5 != 0;
  v7 = v5 != 0;
  LODWORD(v8) = v5 - 1;
  if (v7)
    v8 = v8;
  else
    v8 = 0;
  return sub_22EE739C0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(unsigned int *)(a2 + 16), v8 | (v6 << 32));
}

unint64_t sub_22EB915EC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22EB27A20(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB91634(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  char v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v11 = v13;
  v12 = 0x400000000;
  v4 = 1;
  if ((sub_22EB9334C(a1, (unsigned __int8 **)(a2 + 24), *(_DWORD *)(a2 + 4), 1, (uint64_t)&v11, &v10) & 1) == 0)
  {
    v5 = (uint64_t *)v11;
    v6 = v12;
    v8 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v4 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v12 + 24, 3);
    sub_22F002D50(v4, v8, v5, v6, v7);
  }
  if (v11 != v13)
    free(v11);
  return v4;
}

uint64_t sub_22EB91730(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;

  v3 = sub_22ED28410((_QWORD *)*a1, a2);
  result = sub_22EB4D054(a1, v3);
  if ((result & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(*(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
  if (v5)
    v6 = (*(_DWORD *)(v5 + 16) & 0xFF800FF) == 137363467;
  else
    v6 = 0;
  if (v6)
    return sub_22ED26924(*a1, (unsigned __int8 *)(result & 0xFFFFFFFFFFFFFFFELL));
  return result;
}

uint64_t sub_22EB917A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v4)
  {
    v5 = (_QWORD *)(a2 + 32);
    v6 = 8 * v4;
    v7 = 1;
    while (1)
    {
      v8 = sub_22EB4D054(a1, *v5);
      if ((v8 & 1) != 0)
        break;
      v9 = v12;
      if (v12 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v12;
      }
      v13[v9] = v8 & 0xFFFFFFFFFFFFFFFELL;
      v10 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v13, v10, *(_QWORD *)(a2 + 8));
    }
  }
  else
  {
    v10 = 0;
    return sub_22F32D6EC(*a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), v13, v10, *(_QWORD *)(a2 + 8));
  }
  return v7;
}

uint64_t sub_22EB918DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int **v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  int v66;
  int v67;
  void *v68;
  uint64_t v69;
  _BYTE v70[32];
  void *v71;
  __int128 v72;
  _BYTE v73[24];
  void *v74[2];
  _BYTE v75[32];
  uint64_t *v76;
  uint64_t v77;
  _QWORD v78[6];

  v78[4] = *MEMORY[0x24BDAC8D0];
  v76 = v78;
  v77 = 0x400000000;
  v74[0] = v75;
  v74[1] = (void *)0x400000000;
  v71 = v73;
  v72 = xmmword_22F44E350;
  v73[16] = 0;
  v4 = *a1;
  v68 = 0;
  v66 = 3;
  v67 = 0;
  v64 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v67, (int *)&v64, (__int16 *)(v4 + 1693), (uint64_t *)&v68, &v66);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = *(_QWORD *)(*a1 + 88);
  v12 = *(_QWORD *)(*a1 + 216);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
  v14 = sub_22F3B1F5C(v11, v12, v13);
  v15 = v14;
  v16 = *a1;
  if (v14)
    v17 = v14 + 40;
  else
    v17 = 0;
  v18 = *(_QWORD *)(v16 + 216);
  v19 = *(_QWORD *)(v16 + 3200);
  *(_QWORD *)(v16 + 3200) = 0;
  v62 = *(_QWORD *)(v16 + 10288);
  v63 = v19;
  v60 = *(_DWORD *)(v16 + 2192);
  v61 = *(_DWORD *)(v16 + 1944);
  v59 = v17;
  *(_QWORD *)(v16 + 216) = v17;
  *(_DWORD *)(v16 + 1944) = *(_DWORD *)(v16 + 1904);
  *(_DWORD *)(v16 + 2192) = *(_DWORD *)(v16 + 1960);
  if ((sub_22EB93AFC(a1, a2 + 40, *(_DWORD *)(a2 + 16), 0, 0, (uint64_t)v74, (uint64_t)&v76, (uint64_t)&v71) & 1) != 0)
  {
    v20 = 1;
    goto LABEL_61;
  }
  if ((_DWORD)v77)
  {
    v21 = v76;
    v22 = 8 * v77;
    do
    {
      v23 = *v21++;
      *(_QWORD *)(v23 + 16) = v59 & 0xFFFFFFFFFFFFFFFBLL;
      v22 -= 8;
    }
    while (v22);
  }
  v68 = v70;
  v69 = 0x400000000;
  v24 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v24)
  {
    v58 = v18;
    v25 = (unsigned int **)(a2 + 40 + 8 * *(unsigned int *)(a2 + 16));
    v26 = 8 * v24;
    v20 = 1;
    while (1)
    {
      v27 = *v25;
      v28 = **v25;
      if (v28)
      {
        if (v28 <= 2)
        {
          v37 = *((_QWORD *)v27 + 1) & 0xFFFFFFFFFFFFFFFCLL;
          if (v27[10] == 1)
          {
            v38 = v37 | 2;
          }
          else
          {
            v39 = sub_22EB4D054(a1, v37);
            if (v39 >= 2)
            {
              v40 = *(_QWORD *)(*(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFFELL) + 8) & 0xFFFFFFFFFFFFFFF0);
              v41 = (*(_DWORD *)(v40 + 16) & 0xFE00000u) < 0x8180001 || v40 == 0;
              if (!v41 && *(_DWORD *)(v40 + 16) == 11)
                v39 = sub_22EB19A28(*a1);
            }
            if ((v39 & 1) != 0)
            {
LABEL_58:
              v18 = v58;
              goto LABEL_59;
            }
            v38 = v39 & 0xFFFFFFFFFFFFFFFCLL;
          }
          LOBYTE(v64) = 0;
          v65 = 0;
          v43 = *((_QWORD *)v27 + 3);
          if (v43 > 7)
          {
            v45 = v43 & 0xFFFFFFFFFFFFFFF8;
            if ((v43 & 4) != 0)
            {
              v44 = v45 | 4;
              v64 = v45 | 4;
            }
            else
            {
              if (!v45)
              {
                v36 = 0;
                goto LABEL_49;
              }
              sub_22F31A5DC((unint64_t *)&v64, v45);
              v44 = v64;
            }
          }
          else
          {
            v44 = 0;
            v64 = 0;
          }
          v65 = 1;
          v46 = v38 & 0xFFFFFFFFFFFFFFFCLL;
          v47 = *v27;
          v48 = v27[4];
          v49 = *a1;
          if ((v38 & 2) != 0 || !v46)
            v32 = sub_22F332740(v49, v46, v47 == 1, v48, v44);
          else
            v32 = sub_22EBCF54C(v49, v46, v47 == 1, v48, v44);
          goto LABEL_48;
        }
        v29 = *((_QWORD *)v27 + 1);
        v30 = v29 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v29 & 2) == 0)
        {
          v31 = sub_22EB4D054(a1, v30);
          if ((v31 & 1) != 0)
            goto LABEL_58;
          v32 = sub_22F3327E4(*a1, v31 & 0xFFFFFFFFFFFFFFFELL);
LABEL_48:
          v36 = v32;
LABEL_49:
          if (!v36)
            goto LABEL_58;
          goto LABEL_50;
        }
        v35 = sub_22F332940(*a1, v30);
      }
      else
      {
        v33 = (uint64_t *)(*((_QWORD *)v27 + 1) & 0xFFFFFFFFFFFFFFF8);
        if (v27[4] == 1)
        {
          v35 = sub_22F332794(*a1, (uint64_t)v33);
        }
        else
        {
          v34 = sub_22EB4DB90((_QWORD **)a1, v33);
          if (!v34)
            goto LABEL_58;
          v35 = sub_22F3325E4(*a1, (unint64_t)v34);
        }
      }
      v36 = v35;
LABEL_50:
      v50 = v69;
      if (v69 >= (unint64_t)HIDWORD(v69))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v50 = v69;
      }
      *((_QWORD *)v68 + v50) = v36;
      v51 = (v69 + 1);
      LODWORD(v69) = v69 + 1;
      ++v25;
      v26 -= 8;
      if (!v26)
      {
        v53 = (char *)v68;
        if ((_DWORD)v51)
        {
          v54 = 0;
          v18 = v58;
          do
          {
            v55 = *(_QWORD *)&v53[v54];
            if ((*(_DWORD *)v55 - 3) >= 0xFFFFFFFE)
            {
              v56 = *(_QWORD *)(v55 + 24);
              if (v56 >= 8 && (v56 & 4) == 0)
                *(_QWORD *)(*(_QWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 16) + 16) = v59 & 0xFFFFFFFFFFFFFFFBLL;
            }
            v54 += 8;
          }
          while (8 * v51 != v54);
        }
        else
        {
          v51 = 0;
          v18 = v58;
        }
        goto LABEL_71;
      }
    }
  }
  v51 = 0;
  v53 = v70;
LABEL_71:
  v20 = (uint64_t)sub_22F3C4144(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 4), v15, v76, v77, v53, v51, *(_DWORD *)(a2 + 32));
LABEL_59:
  if (v68 != v70)
    free(v68);
LABEL_61:
  if (v18)
  {
    *(_QWORD *)(v16 + 216) = v18;
    *(_QWORD *)(v16 + 3200) = v63;
    *(_QWORD *)(v16 + 10288) = v62;
    *(_DWORD *)(v16 + 1944) = v61;
    *(_DWORD *)(v16 + 2192) = v60;
  }
  sub_22EB48E64(v4);
  if (v71 != v73)
    free(v71);
  if (v74[0] != v75)
    free(v74[0]);
  if (v76 != v78)
    free(v76);
  return v20;
}

uint64_t sub_22EB91E7C(_QWORD **a1, uint64_t a2)
{
  int *v2;
  unint64_t *v4;

  v2 = (int *)a2;
  if ((*(_BYTE *)(a2 + 1) & 0x80) != 0)
  {
    v4 = sub_22EB4DB90(a1, *(uint64_t **)(a2 + 32));
    if (v4)
      return sub_22F3C109C((*a1)[11], v2[4], v2[5], v2[6], (uint64_t)v4);
    else
      return 1;
  }
  return (uint64_t)v2;
}

uint64_t sub_22EB91ED8(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  unsigned int *v25;
  char v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v31[8] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v29 = v31;
  v30 = 0x800000000;
  v4 = *(_DWORD *)(a2 + 32);
  if (v4 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 32);
  }
  if ((sub_22EB9334C(a1, *(unsigned __int8 ***)(a2 + 24), v4, 0, (uint64_t)&v29, &v27) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = v29;
    v7 = v30;
    v9 = *(_DWORD *)(a2 + 16);
    v8 = *(_DWORD *)(a2 + 20);
    v10 = sub_22E3CB704(*(llvm::StringMapImpl **)(*(_QWORD *)(*a1 + 88) + 15192), "__builtin_shufflevector", 0x17uLL);
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 88) + 1960) + 80);
    v12 = sub_22E3CD31C((uint64_t *)(v11 + 72), v11);
    v13 = sub_22EFCE144(v12 + 40, v10);
    v14 = (_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0 && v14)
      v14 = (_QWORD *)*v14;
    v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 32, 3);
    v16 = *(_QWORD *)(*a1 + 88);
    v17 = *(_QWORD *)(v16 + 16864);
    v28 = 0;
    sub_22EFF69F0(v15, v16, (uint64_t)v14, 0, v17, 0, v9, &v28, 0);
    v18 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), v14[6], 0);
    v19 = sub_22E90092C(*a1, v15, v18, 64, 0, 0);
    v20 = *(_QWORD *)(*a1 + 88);
    v21 = sub_22E8BBA74((unint64_t)v14);
    v22 = *(_QWORD *)(v14[6] & 0xFFFFFFFFFFFFFFF0);
    if (v22)
      v23 = *(unsigned __int8 *)(v22 + 16) - 27 > 0xFFFFFFFD;
    else
      v23 = 0;
    if (!v23)
      v22 = sub_22F10CF48(v22);
    v24 = sub_22E8BBBD0(*(_QWORD *)(v22 + 24));
    v25 = sub_22EFFA488(v20, v19 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)v6, v7, v21, v24, v8, 0, 0, 0);
    v5 = sub_22E97915C((_QWORD *)*a1, (unsigned int *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFFELL));
  }
  if (v29 != v31)
    free(v29);
  return v5;
}

uint64_t sub_22EB92128(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  char v31;
  unsigned __int8 **v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  char v55;
  int v56;
  void *v57[2];
  _QWORD v58[24];
  void *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 2) & 1) == 0)
    return v2;
  v4 = *a1;
  v54 = 0;
  v59 = 0;
  v56 = 3;
  v57[0] = (void *)*(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v54, (int *)v57, (__int16 *)(v4 + 1693), (uint64_t *)&v59, &v56);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if ((*(_BYTE *)(v2 + 2) & 1) == 0 || (v11 = *(unsigned int *)(v2 + 28), !(_DWORD)v11))
  {
    v22 = *(void **)(v2 + 32);
    v57[0] = v22;
    v59 = 0;
    if (sub_22E793870(a1 + 1, v57, &v59) && v59 != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v22 = (void *)*((_QWORD *)v59 + 1);
    if (v22)
    {
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v28 = *(_QWORD *)(*a1 + 88);
      v23 = (uint64_t)v22;
      v27 = 0;
      goto LABEL_27;
    }
LABEL_29:
    v2 = 1;
    goto LABEL_30;
  }
  v12 = 0;
  v13 = 3 * v11;
  v48 = v2 + 40 + 8 * v13;
  v14 = 8 * v13;
  v15 = v2 + 40;
  while (1)
  {
    v16 = *(_DWORD *)v15;
    if (*(_DWORD *)v15 == 1)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
        goto LABEL_17;
    }
    else if (v16 == 7)
    {
      if (**(unsigned __int8 **)(v15 + 8) != 213)
        goto LABEL_17;
    }
    else if (((1 << v16) & 0x13D) != 0)
    {
LABEL_17:
      ++v12;
      goto LABEL_18;
    }
    sub_22EDC0108(*a1, v15, 0, (uint64_t)&v59);
    v56 = 0;
    LOBYTE(v54) = 0;
    v55 = 0;
    v17 = *a1;
    v51 = v59;
    v52 = v60;
    v53 = v61;
    sub_22EE7465C(v17, (uint64_t)&v51);
    LODWORD(v57[0]) = 0;
    v57[1] = 0;
    v18 = *a1;
    v19 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    if (sub_22EB99750(a1, (uint64_t)&v59, (uint64_t)v57, 1))
    {
      *(_DWORD *)(v18 + 11992) = v19;
      goto LABEL_29;
    }
    v20 = *a1;
    v49 = *(_OWORD *)v57;
    v50 = v58[0];
    v21 = sub_22EE74920(v20, (unsigned int *)&v49);
    if ((v21 & 0xFF00000000) == 0)
      break;
    v12 += v21;
    *(_DWORD *)(v18 + 11992) = v19;
LABEL_18:
    v15 += 24;
    v14 -= 24;
    if (!v14)
    {
      v23 = *(_QWORD *)(v2 + 32);
      v24 = *(_DWORD *)(v2 + 16);
      v25 = *(_DWORD *)(v2 + 20);
      v26 = *(_DWORD *)(v2 + 24);
      v27 = v12 | 0x100000000;
      v28 = *(_QWORD *)(*a1 + 88);
LABEL_27:
      v2 = sub_22F0622F8(v28, v24, v23, v25, v26, v27, 0, 0);
      goto LABEL_30;
    }
  }
  *(_DWORD *)(v18 + 11992) = v19;
  v30 = *(_DWORD *)(v2 + 20);
  v59 = (char *)&v60 + 8;
  *(_QWORD *)&v60 = 0x800000000;
  v62 = v30;
  v63 = v30;
  if ((sub_22EB9946C((uint64_t)a1, a1, v2 + 40, (uint64_t)a1, v48) & 1) != 0)
  {
    v2 = 1;
    goto LABEL_52;
  }
  v57[0] = v58;
  v57[1] = (void *)0x800000000;
  if (!(_DWORD)v60)
  {
    LODWORD(v37) = 0;
    goto LABEL_49;
  }
  v31 = 0;
  v32 = (unsigned __int8 **)v59;
  v33 = 32 * v60;
  while (2)
  {
    v34 = sub_22E4EF088((uint64_t)v57, (unint64_t)v32, 1);
    v35 = (char *)v57[0] + 24 * LODWORD(v57[1]);
    v36 = *(_OWORD *)v34;
    *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
    *(_OWORD *)v35 = v36;
    v37 = ++LODWORD(v57[1]);
    v38 = *(_DWORD *)v32;
    if (*(_DWORD *)v32 == 1)
    {
      v39 = *(_BYTE *)(*(_QWORD *)((unint64_t)v32[1] & 0xFFFFFFFFFFFFFFF0) + 16) == 36;
LABEL_40:
      v40 = v39;
    }
    else
    {
      if (v38 == 7)
      {
        v39 = *v32[1] == 213;
        goto LABEL_40;
      }
      v40 = ((1 << v38) & 0x13D) == 0;
    }
    v31 |= v40;
    v32 += 4;
    v33 -= 32;
    if (v33)
      continue;
    break;
  }
  if ((v31 & 1) == 0)
  {
LABEL_49:
    v41 = *(_QWORD *)(v2 + 32);
    v42 = *(_DWORD *)(v2 + 16);
    v43 = *(_DWORD *)(v2 + 20);
    v44 = *(_DWORD *)(v2 + 24);
    v47 = v37 | 0x100000000;
    v46 = *(_QWORD *)(*a1 + 88);
    v45 = 0;
    v37 = 0;
    goto LABEL_50;
  }
  v41 = *(_QWORD *)(v2 + 32);
  v42 = *(_DWORD *)(v2 + 16);
  v43 = *(_DWORD *)(v2 + 20);
  v44 = *(_DWORD *)(v2 + 24);
  v45 = v57[0];
  v46 = *(_QWORD *)(*a1 + 88);
  v47 = 0;
LABEL_50:
  v2 = sub_22F0622F8(v46, v42, v41, v43, v44, v47, (uint64_t)v45, v37);
  if (v57[0] != v58)
    free(v57[0]);
LABEL_52:
  if (v59 != (char *)&v60 + 8)
    free(v59);
LABEL_30:
  sub_22EB48E64(v4);
  return v2;
}

unsigned int *sub_22EB92614(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;

  v3 = (*(_DWORD *)a2 >> 18) & 7;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 20);
  v7 = *(_QWORD *)(a1 + 216);
  v8 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
  return sub_22F3C215C(v8, *(_QWORD *)(a1 + 88), v3, v4, v5, v6, v7);
}

uint64_t sub_22EB92680(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17[3];
  int v18;
  uint64_t v19;
  int v20;

  v4 = *a1;
  v5 = *a1 + 3688;
  v20 = *(_DWORD *)(*(_QWORD *)(v4 + 3688) + 576 * *(unsigned int *)(v4 + 3696) - 576);
  v19 = 0;
  v18 = 3;
  *(_QWORD *)v17 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v5, &v20, v17, (__int16 *)(v4 + 1693), &v19, &v18);
  v6 = *(unsigned int *)(v4 + 3696);
  v7 = v6 - 2;
  v8 = *(_QWORD *)(v4 + 3688);
  v9 = *(_DWORD *)(v8 + 576 * (v6 - 2));
  if (v9 == 5)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = *(_BYTE *)(v8 + 576 * v7 + 572);
    v10 = 1;
  }
  else if (v9 == 2)
  {
    *(_BYTE *)(v8 + 576 * v6 - 4) = 1;
    v10 = *(_BYTE *)(v8 + 576 * v7 + 573) != 0;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)(v8 + 576 * v6 - 4) = 0;
  }
  v11 = v8 + 576 * v6;
  *(_BYTE *)(v11 - 3) = v10;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v11 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v11 - 496));
  }
  v12 = sub_22EB9F2E4(a1, *(unsigned int **)(a2 + 16), 1u);
  if ((v12 & 1) == 0)
    return sub_22EB497A8(*a1, *(_DWORD *)(a2 + 24), (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
  v14 = *a1;
  *(_DWORD *)(v14 + 1704) = *(_DWORD *)(*(_QWORD *)(v14 + 3688) + 576 * *(unsigned int *)(v14 + 3696) - 568);
  *(_WORD *)(v14 + 1693) = 0;
  v15 = *(void **)(v14 + 1784);
  if (v15 != *(void **)(v14 + 1776))
  {
    v16 = *(unsigned int *)(v14 + 1792);
    if (v16 >= 0x21 && 4 * (*(_DWORD *)(v14 + 1796) - *(_DWORD *)(v14 + 1800)) < v16)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((llvm::SmallPtrSetImplBase *)(v14 + 1776));
      goto LABEL_10;
    }
    memset(v15, 255, 8 * v16);
  }
  *(_QWORD *)(v14 + 1796) = 0;
LABEL_10:
  *(_DWORD *)(v14 + 1848) = 0;
  sub_22EB48E64(v14);
  return 1;
}

uint64_t sub_22EB92868(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v7 = sub_22EB4D054(a1, v6);
  if ((v7 & 1) != 0)
    return 1;
  v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
  v10 = *(_DWORD *)(a2 + 32);
  if (!v10)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v10 = v11;
  }
  LODWORD(v12) = *(_DWORD *)(a2 + 36);
  if (!(_DWORD)v12)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
      sub_22F0D60E4(v12);
  }
  return sub_22EB542F0(*a1, *(_QWORD *)(v4 + 40), (void *)(v5 & 0xFFFFFFFFFFFFFFFELL), v8, v10, v12);
}

uint64_t sub_22EB92928(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  int v9;
  int v10;
  int v11;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = sub_22EB4D054(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(a2 + 36);
  if (!v9)
  {
    sub_22F0D5A50(*(_QWORD *)(a2 + 16));
    v9 = v10;
  }
  v11 = *(_DWORD *)(a2 + 40);
  if (!v11)
    sub_22F0D60E4(*(_QWORD *)(a2 + 16));
  return sub_22F32FF64(*a1, (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), v8, *(_BYTE *)(a2 + 32), v9, v11);
}

uint64_t sub_22EB929DC(uint64_t *a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  int *v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  unsigned __int32 v23;
  _QWORD *v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  int *v36;
  uint64_t v37;
  size_t v38;
  unsigned __int32 v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v47;
  uint64_t v48;
  int64x2_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  unint64_t v54;
  void *v55[2];
  _BYTE v56[32];
  uint64_t v57;
  int64x2_t v58;
  _BYTE v59[32];
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD v63[6];

  v2 = a2;
  v3 = a1;
  v63[4] = *MEMORY[0x24BDAC8D0];
  v61 = v63;
  v62 = 0x400000000;
  v4 = a2[1];
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (uint64_t)(a2 + 6);
    v49 = vdupq_n_s64(0x20uLL);
    v50 = (uint64_t)(a2 + 6);
    v51 = a2[1];
    while (1)
    {
      v7 = *(unint64_t **)(v6 + 8 * v5);
      v8 = (int *)(v7 + 1);
      v9 = *v7;
      if ((*v7 & 0xF) != 0 || !v9 || *(_BYTE *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
      {
        v57 = (uint64_t)v59;
        v58 = vdupq_n_s64(0x20uLL);
        v60 = 0;
        v10 = sub_22F11598C(v9);
        if (v58.i64[0] < (unint64_t)v10)
          sub_22EEB52C0(&v57, v10);
        v11 = sub_22EB94BDC((_QWORD **)v3, (uint64_t)&v57, v9);
        if (v11 < 0x10)
        {
          v12 = 1;
LABEL_38:
          if ((_BYTE *)v57 != v59 && v57)
            MEMORY[0x2348A0E84]();
          goto LABEL_52;
        }
        v13 = v11;
        if (v11 == *v7)
        {
          v14 = v62;
          if (v62 >= (unint64_t)HIDWORD(v62))
            goto LABEL_10;
        }
        else
        {
          v21 = *(_QWORD *)(*v3 + 88);
          v22 = v58.i64[0] - v58.i64[1];
          v23 = v58.i32[0] - v58.i32[2];
          if (v58.i32[0] == v58.i32[2])
            v23 = sub_22F11598C(v13);
          v7 = (unint64_t *)sub_22E3CD3D4(v21 + 2032, v23 + 8, 3);
          *v7 = v13;
          memcpy(v7 + 1, (const void *)(v57 + v58.i64[1]), v22);
          v14 = v62;
          if (v62 >= (unint64_t)HIDWORD(v62))
          {
LABEL_10:
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v14 = v62;
          }
        }
        v61[v14] = (uint64_t)v7;
        LODWORD(v62) = v62 + 1;
        v12 = 4;
        goto LABEL_38;
      }
      v15 = *(_QWORD *)(v9 + 32);
      if (v15 >= 0x10 && (*(_QWORD *)(v9 + 32) & 0xFLL) == 0)
        v31 = *(_QWORD *)((char *)&unk_22F481D78
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v31 = 1;
      v53 = *(_QWORD *)(v9 + 32);
      v54 = ((unint64_t)v8 + v31 + 3) & -v31;
      v55[0] = v56;
      v55[1] = (void *)0x200000000;
      sub_22EE73804(*v3, v15, v54, (uint64_t)v55);
      v47 = *(_DWORD *)(v9 + 20);
      LODWORD(v17) = v47 - 1;
      if (v47)
        v17 = v17;
      else
        v17 = 0;
      v48 = v17;
      v18 = v15;
      for (i = v15; ; i = sub_22F115B7C(i))
      {
        while (1)
        {
          if ((i & 0xF) != 0)
            goto LABEL_33;
          v20 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v20 <= 0x39)
            break;
LABEL_28:
          if (sub_22F115668(i))
            v18 = i;
          i = sub_22F115B7C(i);
          if (!i)
            goto LABEL_42;
        }
        if (v20 == 24)
          goto LABEL_41;
        if (v20 == 26)
          break;
        if (((1 << v20) & 0x20000000200003CLL) == 0)
          goto LABEL_28;
LABEL_33:
        ;
      }
      if ((*(_BYTE *)(i + 23) & 0x10) == 0)
        goto LABEL_33;
LABEL_41:
      v18 = i;
LABEL_42:
      sub_22F115668(v18);
      sub_22F1167E8(&v53);
      v3 = a1;
      v24 = (_QWORD *)*a1;
      v25 = *(_DWORD *)(*a1 + 11992);
      *(_DWORD *)(*a1 + 11992) = -1;
      v57 = (uint64_t)v59;
      v58 = v49;
      v60 = 0;
      v26 = sub_22F11598C(*v7);
      if (v58.i64[0] < (unint64_t)v26)
        sub_22EEB52C0(&v57, v26);
      v27 = sub_22EB94BDC((_QWORD **)a1, (uint64_t)&v57, v15);
      if (v27 < 0x10)
      {
LABEL_45:
        v12 = 1;
        goto LABEL_46;
      }
      v28 = v27;
      v29 = v15;
      while (2)
      {
        while (2)
        {
          if ((v29 & 0xF) != 0)
            goto LABEL_66;
          v30 = *(unsigned __int8 *)(*(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF0) + 16);
          if (v30 > 0x39)
          {
LABEL_61:
            if (sub_22F115668(v29))
              v15 = v29;
            v29 = sub_22F115B7C(v29);
            if (!v29)
              goto LABEL_68;
            continue;
          }
          break;
        }
        if (v30 == 24)
          break;
        if (v30 != 26)
        {
          if (((1 << v30) & 0x20000000200003CLL) != 0)
            goto LABEL_66;
          goto LABEL_61;
        }
        if ((*(_BYTE *)(v29 + 23) & 0x10) == 0)
        {
LABEL_66:
          v29 = sub_22F115B7C(v29);
          continue;
        }
        break;
      }
      v15 = v29;
LABEL_68:
      v32 = sub_22F115668(v15);
      v33 = sub_22F1167E8(&v53);
      v3 = a1;
      v34 = sub_22F34AE9C((_QWORD *)*a1, v28, v32 | ((unint64_t)v33 << 32), *v8, v48 | ((unint64_t)(v47 != 0) << 32));
      if (v34 < 0x10)
        goto LABEL_45;
      v35 = v34;
      sub_22EEB5360((uint64_t)&v57, v34, 4uLL, 4);
      *v36 = *v8;
      v37 = *(_QWORD *)(*a1 + 88);
      v38 = v58.i64[0] - v58.i64[1];
      v39 = v58.i32[0] - v58.i32[2];
      if (v58.i32[0] == v58.i32[2])
        v39 = sub_22F11598C(v35);
      v40 = (_QWORD *)sub_22E3CD3D4(v37 + 2032, v39 + 8, 3);
      *v40 = v35;
      memcpy(v40 + 1, (const void *)(v57 + v58.i64[1]), v38);
      v41 = v62;
      if (v62 >= (unint64_t)HIDWORD(v62))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = v62;
      }
      v61[v41] = (uint64_t)v40;
      LODWORD(v62) = v62 + 1;
      v12 = 4;
LABEL_46:
      if ((_BYTE *)v57 != v59 && v57)
        MEMORY[0x2348A0E84]();
      *((_DWORD *)v24 + 2998) = v25;
      if (v55[0] != v56)
        free(v55[0]);
      v6 = v50;
      v4 = v51;
LABEL_52:
      if (v12 != 4)
      {
        v42 = 1;
        goto LABEL_77;
      }
      if (++v5 == v4)
      {
        v43 = v61;
        v44 = v62;
        v2 = a2;
        goto LABEL_76;
      }
    }
  }
  v44 = 0;
  v43 = v63;
LABEL_76:
  v42 = sub_22EBC6244(*v3, (*v2 >> 18), v2[4], v43, v44, v2[5]);
LABEL_77:
  if (v61 != v63)
    free(v61);
  return v42;
}

uint64_t sub_22EB93020(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28[3];
  int v29;
  unint64_t *v30;
  int v31;

  if ((*(_BYTE *)(a2 + 2) & 0x40) != 0)
  {
    v16 = sub_22EB4DB90((_QWORD **)a1, *(uint64_t **)(a2 + 16));
    if (v16)
    {
      v17 = v16;
      v18 = *(_DWORD *)(a2 + 24);
      v19 = (*(_DWORD *)a2 >> 18) & 0xF;
      sub_22F0D4E74(a2);
      return sub_22EB28664(*a1, v17, v18, v19, v20);
    }
    return 1;
  }
  else
  {
    v4 = (_QWORD *)*a1;
    v5 = *a1 + 3688;
    v6 = *(_QWORD *)(*(_QWORD *)(*a1 + 3688) + 576 * *(unsigned int *)(*a1 + 3696) - 416);
    v31 = 0;
    v30 = (unint64_t *)v6;
    v29 = 3;
    *(_QWORD *)v28 = *((unsigned int *)v4 + 426);
    sub_22EB4DDB8(v5, &v31, v28, (__int16 *)((char *)v4 + 1693), (uint64_t *)&v30, &v29);
    v7 = *((unsigned int *)v4 + 924);
    v8 = v7 - 2;
    v9 = v4[461];
    v10 = *(_DWORD *)(v9 + 576 * (v7 - 2));
    if (v10 == 5)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = *(_BYTE *)(v9 + 576 * v8 + 572);
      v11 = 1;
    }
    else if (v10 == 2)
    {
      *(_BYTE *)(v9 + 576 * v7 - 4) = 1;
      v11 = *(_BYTE *)(v9 + 576 * v8 + 573) != 0;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)(v9 + 576 * v7 - 4) = 0;
    }
    v12 = v9 + 576 * v7;
    *(_BYTE *)(v12 - 3) = v11;
    *(_WORD *)((char *)v4 + 1693) = 0;
    if (*((_DWORD *)v4 + 462))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 222), (llvm::SmallPtrSetImplBase *)(v12 - 560));
      sub_22EAEAE08((uint64_t)(v4 + 230), (uint64_t *)(v12 - 496));
    }
    v30 = 0;
    v13 = *(unsigned __int8 **)(a2 + 16);
    if (*v13 == 214 && (v14 = (unsigned int *)*((_QWORD *)v13 + 3), *(unsigned __int8 *)v14 == 163))
    {
      v15 = sub_22EBA4658(a1, v14, 0, &v30);
      if (v15 >= 2)
        v15 = sub_22EB27A20((_QWORD *)*a1, *((_DWORD *)v13 + 4), *((_DWORD *)v13 + 5), v15 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      v15 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
    }
    v22 = v30;
    if (v30)
    {
      v23 = *(_DWORD *)(a2 + 24);
      v24 = (*(_DWORD *)a2 >> 18) & 0xF;
      sub_22F0D4E74(a2);
      v26 = sub_22EB28664(*a1, v22, v23, v24, v25);
    }
    else if ((v15 & 1) != 0)
    {
      v26 = 1;
    }
    else
    {
      v27 = sub_22EB28F24((_QWORD *)*a1, v15 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 24), (*(_DWORD *)a2 >> 18) & 0xF);
      if ((v27 & 1) != 0)
        v26 = 1;
      else
        v26 = v27;
    }
    sub_22EB48E64(v4);
  }
  return v26;
}

uint64_t sub_22EB93288(_QWORD **a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = sub_22EB4DB90(a1, (uint64_t *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22EB4B7A8(*a1, *(_DWORD *)(a2 + 32), v6 & 0xFFFFFFFFFFFFFFFELL, v5, *(_DWORD *)(a2 + 36));
}

unint64_t sub_22EB932F8(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2 >= 0x10)
  {
    v3 = sub_22EF579A8(*(_QWORD *)(*(_QWORD *)a1 + 88), a2, 0);
    v4 = sub_22EB4DB90(a1, v3);
    if (v4)
      return *(_QWORD *)v4;
    else
      return 0;
  }
  return a2;
}

uint64_t sub_22EB9334C(uint64_t *a1, unsigned __int8 **a2, unsigned int a3, int a4, uint64_t a5, _BYTE *a6)
{
  _BYTE *v6;
  int v8;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  int v31;
  uint64_t v32;
  void *v33[2];
  _QWORD v34[5];

  v34[4] = *MEMORY[0x24BDAC8D0];
  if (!a3)
    return 0;
  v6 = a6;
  v8 = a4;
  v11 = v34;
  v12 = a3;
  while (1)
  {
    v13 = *a2;
    if (v8)
      break;
    if (*v13 != 213)
    {
      v14 = sub_22EB4D054(a1, *a2);
      if ((v14 & 1) != 0)
        return 1;
      goto LABEL_20;
    }
LABEL_9:
    v15 = *((_QWORD *)v13 + 3);
    v16 = v11;
    v33[0] = v11;
    v33[1] = (void *)0x200000000;
    v17 = *a1;
    v31 = 7;
    v32 = v15;
    sub_22EE7377C(v17, (uint64_t)&v31, (uint64_t)v33);
    v18 = *((_DWORD *)v13 + 5);
    v19 = *a1;
    v20 = *(_DWORD *)(*a1 + 11992);
    *(_DWORD *)(*a1 + 11992) = -1;
    v21 = sub_22EB4D054(a1, v15);
    if ((v21 & 1) != 0)
    {
      v24 = 0;
      v6 = a6;
    }
    else
    {
      LODWORD(v22) = v18 - 1;
      if (v18)
        v22 = v22;
      else
        v22 = 0;
      v23 = sub_22EE739C0(*a1, v21 & 0xFFFFFFFFFFFFFFFELL, *((unsigned int *)v13 + 4), v22 | ((unint64_t)(v18 != 0) << 32));
      v24 = 0;
      v6 = a6;
      if ((v23 & 1) == 0)
      {
        if (a6)
          *a6 = 1;
        v25 = *(unsigned int *)(a5 + 8);
        if (v25 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v25) = v23 & 0xFFFFFFFFFFFFFFFELL;
        ++*(_DWORD *)(a5 + 8);
        v24 = 1;
      }
    }
    *(_DWORD *)(v19 + 11992) = v20;
    v11 = v16;
    if (v33[0] != v16)
      free(v33[0]);
    v8 = a4;
    if ((v24 & 1) == 0)
      return 1;
LABEL_30:
    ++a2;
    if (!--v12)
      return 0;
  }
  if (!sub_22EFFF908(*a2))
  {
    v13 = *a2;
    if (**a2 != 213)
    {
      v14 = sub_22EB935E0(a1, *a2, 0);
      if ((v14 & 1) != 0)
        return 1;
LABEL_20:
      v26 = v14 & 0xFFFFFFFFFFFFFFFELL;
      if (v6 && *a2 != (unsigned __int8 *)v26)
        *v6 = 1;
      v27 = *(unsigned int *)(a5 + 8);
      if (v27 >= *(unsigned int *)(a5 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v27 = *(unsigned int *)(a5 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a5 + 8 * v27) = v26;
      ++*(_DWORD *)(a5 + 8);
      goto LABEL_30;
    }
    goto LABEL_9;
  }
  if (v6)
  {
    result = 0;
    *v6 = 1;
    return result;
  }
  return 0;
}

uint64_t sub_22EB935E0(uint64_t *a1, unsigned __int8 *a2, char a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t *v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  void *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[8] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = *v4;
    if ((v6 & 0xFE) == 0xAC)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
      v6 = *v4;
    }
    if (v6 == 106)
    {
      v4 = *(unsigned __int8 **)(*((_QWORD *)v4 + 2) + 16);
      v6 = *v4;
    }
    if (v6 == 186)
    {
      v7 = *((_QWORD *)v4 + 2);
      v4 = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0)
        v4 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    }
    while (1)
    {
      v8 = *v4;
      if (v8 != 116)
        break;
      v4 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    }
    if (v8 == 153)
    {
      v4 = sub_22EFFB374(v4);
      v8 = *v4;
    }
    if (v8 != 132)
      break;
    v9 = (unsigned __int8 **)(v4 + 16);
LABEL_30:
    v4 = *v9;
    if (!*v9)
      return 0;
  }
  v10 = v8 & 0xFE;
  v11 = v8;
  if ((a3 & 1) == 0)
  {
    if (v10 != 118 || (*(_DWORD *)v4 & 0x100000) == 0)
      return sub_22EB4D054(a1, v4);
    v11 = *(_DWORD *)v4;
  }
  if (v8 == 179)
  {
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = 0;
    v22 = 0;
    goto LABEL_35;
  }
  if (v8 == 131)
  {
    sub_22F0D4E74((uint64_t)v4);
    v18 = HIDWORD(v17);
    v19 = v17;
    v20 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 24, 3);
    v15 = v20;
    v21 = v19;
    v22 = v18;
LABEL_35:
    sub_22F002D50(v20, v21, 0, 0, v22);
    return v15;
  }
  if (v10 != 118 || v11 == 119)
    return sub_22EB4D054(a1, v4);
  if ((*(_DWORD *)v4 & 0x200000) != 0)
  {
    v12 = *(_DWORD *)v4;
    v13 = v12 == 119;
    if (v12 == 119)
      v14 = v4;
    else
      v14 = 0;
    v9 = (unsigned __int8 **)(v14 + 48);
    if (!v13)
      v9 = (unsigned __int8 **)(v4 + 40);
    goto LABEL_30;
  }
  v23 = *a1;
  if ((*(_DWORD *)v4 & 0x100000) == 0
    || ((v25 = *(_DWORD *)(*(_QWORD *)(v23 + 3688) + 576 * *(unsigned int *)(v23 + 3696) - 576), v25 <= 3)
      ? (v26 = v25 == 2)
      : (v26 = 1),
        v26))
  {
    v24 = 1;
  }
  else
  {
    v24 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(v23 + 72) + 1) & 2) != 0)
    {
      v53 = 0;
      v51 = 3;
      v52 = 1;
      v50 = *(unsigned int *)(v23 + 1704);
      sub_22EB4DDB8(v23 + 3688, &v52, (int *)&v50, (__int16 *)(v23 + 1693), (uint64_t *)&v53, &v51);
      v27 = *(unsigned int *)(v23 + 3696);
      v28 = v27 - 2;
      v29 = *(_QWORD *)(v23 + 3688);
      v30 = *(_DWORD *)(v29 + 576 * (v27 - 2));
      if (v30 == 5)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = *(_BYTE *)(v29 + 576 * v28 + 572);
        v31 = 1;
      }
      else if (v30 == 2)
      {
        *(_BYTE *)(v29 + 576 * v27 - 4) = 1;
        v31 = *(_BYTE *)(v29 + 576 * v28 + 573) != 0;
      }
      else
      {
        v31 = 0;
        *(_BYTE *)(v29 + 576 * v27 - 4) = 0;
      }
      v32 = v29 + 576 * v27;
      *(_BYTE *)(v32 - 3) = v31;
      *(_WORD *)(v23 + 1693) = 0;
      if (*(_DWORD *)(v23 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v23 + 1776), (llvm::SmallPtrSetImplBase *)(v32 - 560));
        sub_22EAEAE08(v23 + 1840, (uint64_t *)(v32 - 496));
      }
      v24 = 0;
    }
  }
  v53 = v55;
  v54 = 0x800000000;
  LOBYTE(v50) = 0;
  v33 = *v4;
  v34 = v33 == 119;
  if (v33 == 119)
    v35 = v4;
  else
    v35 = 0;
  v36 = v35 + 48;
  if (v34)
    v37 = v36;
  else
    v37 = v4 + 40;
  v15 = 1;
  if ((sub_22EB9334C(a1, v37, *((unsigned int *)v4 + 8), 1, &v53, &v50) & 1) != 0)
    goto LABEL_64;
  if ((*(_DWORD *)v4 & 0x100000) == 0)
  {
    v15 = 0;
    v38 = *((_QWORD *)v4 + 3);
    v39 = HIDWORD(v38);
    if (HIDWORD(v38))
    {
      v40 = v38;
      if ((_DWORD)v38)
      {
        v41 = (uint64_t *)v53;
        v42 = v54;
        v15 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8 * v54 + 24, 3);
        sub_22F002D50(v15, v40, v41, v42, v39);
      }
    }
    goto LABEL_64;
  }
  if (*(_DWORD *)v4 != 119)
  {
    v43 = *((_DWORD *)v4 + 1);
    goto LABEL_63;
  }
  v47 = **((_QWORD **)v4 + 5);
  v48 = v47;
  while (2)
  {
    while (2)
    {
      if ((v48 & 0xF) != 0)
        goto LABEL_79;
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v48 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v49 > 0x39)
      {
LABEL_74:
        if (sub_22F115668(v48))
          v47 = v48;
        v48 = sub_22F115B7C(v48);
        if (!v48)
          goto LABEL_83;
        continue;
      }
      break;
    }
    if (v49 == 24)
      break;
    if (v49 != 26)
    {
      if (((1 << v49) & 0x20000000200003CLL) != 0)
        goto LABEL_79;
      goto LABEL_74;
    }
    if ((*(_BYTE *)(v48 + 23) & 0x10) == 0)
    {
LABEL_79:
      v48 = sub_22F115B7C(v48);
      continue;
    }
    break;
  }
  v47 = v48;
LABEL_83:
  v43 = sub_22F115668(v47);
LABEL_63:
  v44 = (uint64_t *)v53;
  v45 = v54;
  sub_22F060B18(v4);
  v15 = sub_22EB353A0(*a1, v43, v44, v45, v46);
LABEL_64:
  if (v53 != v55)
    free(v53);
  if ((v24 & 1) == 0)
    sub_22EB48E64(v23);
  return v15;
}

uint64_t sub_22EB93AFC(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t i;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v54;
  unsigned int v56;
  void **v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[6];

  v61[4] = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (!a3)
    return 0;
  v11 = a5;
  v12 = a2;
  v13 = a1;
  v14 = 0;
  v56 = 0;
  v54 = a3;
  while (1)
  {
    v15 = *(_QWORD *)(v12 + 8 * v14);
    if (v15)
      break;
    v30 = *(_QWORD *)(a4 + 8 * v14);
    v31 = *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF0);
    if (v31 && *(_BYTE *)(v31 + 16) == 36)
    {
      v32 = *(_QWORD *)(v31 + 32);
      v59 = v61;
      v60 = 0x200000000;
      v57 = &v59;
      LOBYTE(v58) = 0;
      HIDWORD(v58) = -1;
      sub_22EE72E1C((uint64_t)&v57, v32);
      v33 = *(_QWORD *)(v31 + 32);
      v34 = (uint64_t)v13;
      v35 = *v13;
      v36 = *(_DWORD *)(v35 + 11992);
      *(_DWORD *)(v35 + 11992) = -1;
      v37 = sub_22EB932F8(v34, v33);
      *(_DWORD *)(v35 + 11992) = v36;
      if (v59 != v61)
        free(v59);
      if (v37 < 0x10)
        return 1;
      v13 = a1;
      v38 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v37, 0);
      v8 = v54;
    }
    else
    {
      v38 = sub_22EB932F8((uint64_t)v13, v30);
      if (v38 < 0x10)
        return 1;
    }
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v40 = *(unsigned int *)(a6 + 8);
    if (v40 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v40 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v40) = v38;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v41 = *(unsigned int *)(a7 + 8);
      if (v41 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v41 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v41) = 0;
LABEL_60:
      ++*(_DWORD *)(a7 + 8);
    }
LABEL_61:
    if (++v14 == v8)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFFFF0) + 16) != 36)
  {
    v39 = sub_22EB946C0(v13, *(_QWORD *)(v12 + 8 * v14), 0);
    if (v39)
      goto LABEL_52;
    return 1;
  }
  v59 = v61;
  v60 = 0x200000000;
  v16 = *(_QWORD *)(v15 + 56);
  v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 4) != 0)
    v17 = (uint64_t *)v17[4];
  v20 = *v17;
  v18 = v17 + 1;
  v19 = v20;
  v21 = *(_QWORD *)(v20 + 32);
  if (v21 >= 0x10 && (v21 & 0xF) == 0)
    v42 = *(_QWORD *)((char *)&unk_22F481D78
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v42 = 1;
  v57 = (void **)v21;
  v58 = ((unint64_t)v18 + v42 + 3) & -v42;
  sub_22EE73804(*v13, v21, v58, (uint64_t)&v59);
  if (!(_DWORD)v60)
  {
    v24 = 0;
    LOBYTE(v27) = 0;
    goto LABEL_49;
  }
  v23 = *(_DWORD *)(v19 + 20);
  v24 = v23 != 0;
  v25 = v23 != 0;
  v26 = v23 - 1;
  if (v25)
    v27 = v26;
  else
    v27 = 0;
  v56 = v27 >> 8;
  for (i = v21; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_28;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v29 <= 0x39)
        break;
LABEL_23:
      if (sub_22F115668(i))
        v21 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_48;
    }
    if (v29 == 24)
      goto LABEL_47;
    if (v29 == 26)
      break;
    if (((1 << v29) & 0x20000000200003CLL) == 0)
      goto LABEL_23;
LABEL_28:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_28;
LABEL_47:
  v21 = i;
LABEL_48:
  sub_22F115668(v21);
  sub_22F1167E8((uint64_t *)&v57);
LABEL_49:
  v43 = *a1;
  v44 = *(_DWORD *)(*a1 + 11992);
  *(_DWORD *)(*a1 + 11992) = -1;
  v45 = v27 | (v56 << 8) | (unint64_t)(v24 << 32);
  v13 = a1;
  v39 = sub_22EB946C0(a1, v15, v45);
  *(_DWORD *)(v43 + 11992) = v44;
  v12 = a2;
  v11 = a5;
  if (v59 != v61)
    free(v59);
  v8 = v54;
  if (v39)
  {
LABEL_52:
    if (v11)
      sub_22F2F3918(a8, *(_DWORD *)(a6 + 8), *(_BYTE *)(v11 + v14));
    v46 = *(_QWORD *)(v39 + 48);
    v47 = *(unsigned int *)(a6 + 8);
    if (v47 >= *(unsigned int *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v47 = *(unsigned int *)(a6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a6 + 8 * v47) = v46;
    ++*(_DWORD *)(a6 + 8);
    if (a7)
    {
      v48 = *(unsigned int *)(a7 + 8);
      if (v48 >= *(unsigned int *)(a7 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v48 = *(unsigned int *)(a7 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a7 + 8 * v48) = v39;
      goto LABEL_60;
    }
    goto LABEL_61;
  }
  return 1;
}

uint64_t sub_22EB93FC4(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t result;

  if (!a2)
    return (uint64_t)a2;
  v8 = a3;
  switch(a2->n128_u8[0])
  {
    case 1u:
      result = sub_22EB9B47C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 2u:
      result = sub_22EB9B944(a1, (uint64_t)a2);
      break;
    case 3u:
    case 9u:
    case 0x13u:
    case 0x60u:
      result = nullsub_910(a2);
      break;
    case 4u:
      result = sub_22EB9BB10((_QWORD **)a1, (uint64_t)a2);
      break;
    case 5u:
      result = sub_22EB9BC1C(a1, (uint64_t)a2);
      break;
    case 6u:
      result = sub_22EB9BE60(a1, (uint64_t)a2);
      break;
    case 7u:
      result = sub_22EB9BFA8(a1, (uint64_t)a2);
      break;
    case 8u:
      result = sub_22EB9C1C0(a1, (unsigned int *)a2);
      break;
    case 0xAu:
      result = sub_22EB9C1C8(a1, (uint64_t)a2);
      break;
    case 0xBu:
      result = sub_22EB9C21C(a1, (uint64_t)a2);
      break;
    case 0xCu:
      result = sub_22E8C5894(a1, (uint64_t)a2);
      break;
    case 0xDu:
      result = sub_22EB9C504(a1, (uint64_t)a2);
      break;
    case 0xEu:
      result = sub_22EB9C57C(a1, (uint64_t)a2);
      break;
    case 0xFu:
      result = sub_22EB77BB4((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x10u:
      result = sub_22EB9C6E4((uint64_t)a1, (unsigned __int16 *)a2);
      break;
    case 0x11u:
      result = sub_22EB9C960(a1, (uint64_t)a2);
      break;
    case 0x12u:
      result = sub_22EB9C9B8(a1, (uint64_t)a2);
      break;
    case 0x14u:
      result = sub_22EB9CBA4((uint64_t)a1, (uint64_t)a2);
      break;
    case 0x15u:
      result = sub_22EB9CBB0(a1, a2);
      break;
    case 0x16u:
      result = sub_22EB9CC1C(a1, a2);
      break;
    case 0x17u:
      result = sub_22EB9CC88(a1, a2);
      break;
    case 0x18u:
      result = sub_22EB9CCF4(a1, a2);
      break;
    case 0x19u:
      result = sub_22EB9CD60(a1, a2);
      break;
    case 0x1Au:
      result = sub_22EB9CDD0(a1, a2);
      break;
    case 0x1Bu:
      result = sub_22EB9CE3C(a1, a2);
      break;
    case 0x1Cu:
      result = sub_22EB9CEA8(a1, a2);
      break;
    case 0x1Du:
      result = sub_22EB9CF14(a1, a2);
      break;
    case 0x1Eu:
      result = sub_22EB9CF80(a1, a2);
      break;
    case 0x1Fu:
      result = sub_22EB9CFEC(a1, a2);
      break;
    case 0x20u:
      result = sub_22EB9D058(a1, a2);
      break;
    case 0x21u:
      result = sub_22EB9D0C4(a1, a2);
      break;
    case 0x22u:
      result = sub_22EB9D130(a1, a2);
      break;
    case 0x23u:
      result = sub_22EB9D19C(a1, a2);
      break;
    case 0x24u:
      result = sub_22EB9D208(a1, a2);
      break;
    case 0x25u:
      result = sub_22EB9D274(a1, a2);
      break;
    case 0x26u:
      result = sub_22EB9D2E0(a1, a2);
      break;
    case 0x27u:
      result = sub_22EB9D34C(a1, a2);
      break;
    case 0x28u:
      result = sub_22EB9D3B8(a1, a2);
      break;
    case 0x29u:
      result = sub_22EB9D424(a1, a2);
      break;
    case 0x2Au:
      result = sub_22EB9D490(a1, a2);
      break;
    case 0x2Bu:
      result = sub_22EB9D4FC(a1, a2);
      break;
    case 0x2Cu:
      result = sub_22EB9D568(a1, a2);
      break;
    case 0x2Du:
      result = sub_22EB9D5D4(a1, a2);
      break;
    case 0x2Eu:
      result = sub_22EB9D640(a1, a2);
      break;
    case 0x2Fu:
      result = sub_22EB9D6AC(a1, a2);
      break;
    case 0x30u:
      result = sub_22EB9D718(a1, a2);
      break;
    case 0x31u:
      result = sub_22EB9D784(a1, a2);
      break;
    case 0x32u:
      result = sub_22EB9D7F0(a1, a2);
      break;
    case 0x33u:
      result = sub_22EB9D85C(a1, a2);
      break;
    case 0x34u:
      result = sub_22EB9D8C8(a1, a2);
      break;
    case 0x35u:
      result = sub_22EB9D934(a1, a2);
      break;
    case 0x36u:
      result = sub_22EB9D9A0(a1, a2);
      break;
    case 0x37u:
      result = sub_22EB9DA0C(a1, a2);
      break;
    case 0x38u:
      result = sub_22EB9DA78(a1, a2);
      break;
    case 0x39u:
      result = sub_22EB9DAE4(a1, a2);
      break;
    case 0x3Au:
      result = sub_22EB9DB50(a1, a2);
      break;
    case 0x3Bu:
      result = sub_22EB9DBBC(a1, a2);
      break;
    case 0x3Cu:
    case 0x3Du:
      result = sub_22EB9DC28(a1, a2);
      break;
    case 0x3Eu:
      result = sub_22EB9DC94(a1, a2);
      break;
    case 0x3Fu:
      result = sub_22EB9DD00(a1, a2);
      break;
    case 0x40u:
      sub_22EB79398((_QWORD *)*a1, (uint64_t)a2);
      return 1;
    case 0x41u:
      result = sub_22EB9DD6C(a1, a2);
      break;
    case 0x42u:
      result = sub_22EB9DDD8(a1, a2);
      break;
    case 0x43u:
      result = sub_22EB9DE44(a1, a2);
      break;
    case 0x44u:
      result = sub_22EB9DEB0(a1, a2);
      break;
    case 0x45u:
      result = sub_22EB9DF1C(a1, a2);
      break;
    case 0x46u:
      result = sub_22EB9DF88(a1, a2);
      break;
    case 0x47u:
      result = sub_22EB9DFF4(a1, a2);
      break;
    case 0x48u:
      result = sub_22EB9E060(a1, a2);
      break;
    case 0x49u:
      result = sub_22EB9E0CC(a1, a2);
      break;
    case 0x4Au:
      result = sub_22EB9E138(a1, a2);
      break;
    case 0x4Bu:
      result = sub_22EB9E1A4(a1, a2);
      break;
    case 0x4Cu:
      result = sub_22EB9E210(a1, a2);
      break;
    case 0x4Du:
      result = sub_22EB9E27C(a1, a2);
      break;
    case 0x4Eu:
      result = sub_22EB9E2E8(a1, a2);
      break;
    case 0x4Fu:
      result = sub_22EB9E354(a1, a2);
      break;
    case 0x50u:
      result = sub_22EB9E3C0(a1, a2);
      break;
    case 0x51u:
      result = sub_22EB9E42C(a1, a2);
      break;
    case 0x52u:
      result = sub_22EB9E498(a1, a2);
      break;
    case 0x53u:
      result = sub_22EB9E504(a1, a2);
      break;
    case 0x54u:
      result = sub_22EB9E570(a1, a2);
      break;
    case 0x55u:
      result = sub_22EB9E5DC(a1, a2);
      break;
    case 0x56u:
      result = sub_22EB9E648((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x57u:
      result = sub_22EB9E734(a1, (uint64_t)a2);
      break;
    case 0x58u:
      result = sub_22EB9E780((uint64_t **)a1, (uint64_t)a2);
      break;
    case 0x59u:
      result = sub_22EB9E804((_QWORD **)a1, (uint64_t)a2);
      break;
    case 0x5Au:
      result = sub_22EB9E858(a1, (uint64_t)a2);
      break;
    case 0x5Bu:
      result = sub_22EB9EA0C(a1, (uint64_t)a2);
      break;
    case 0x5Cu:
      result = sub_22EB9EA58(a1, (uint64_t)a2);
      break;
    case 0x5Du:
      result = sub_22EB9EB0C(a1, (uint64_t)a2);
      break;
    case 0x5Eu:
      result = sub_22EB9EB5C(a1, (uint64_t)a2);
      break;
    case 0x5Fu:
      result = sub_22EB9EBC8(a1, (uint64_t)a2);
      break;
    case 0x61u:
      result = sub_22EB9EC10(a1, (uint64_t)a2);
      break;
    case 0x62u:
      result = sub_22EB9EC94(a1, (unsigned __int16 *)a2);
      break;
    case 0x63u:
      result = sub_22EB9EEA4(a1, (uint64_t)a2);
      break;
    case 0x64u:
      result = sub_22EB9EEF4(a1, (unsigned __int16 *)a2);
      break;
    case 0x65u:
      result = sub_22EB9F01C(a1, (unsigned int *)a2, a3);
      break;
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Cu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD4u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
    case 0xDAu:
    case 0xDBu:
    case 0xDCu:
    case 0xDDu:
    case 0xDEu:
    case 0xDFu:
    case 0xE0u:
    case 0xE1u:
    case 0xE2u:
    case 0xE3u:
    case 0xE4u:
    case 0xE5u:
    case 0xE6u:
    case 0xE7u:
    case 0xE8u:
    case 0xE9u:
    case 0xEAu:
      v10 = sub_22EB4D054(a1, a2);
      if (v8 == 2)
        v10 = sub_22EB49994(*a1, v10);
      result = sub_22ED2B1FC(*a1, v10, v8 == 0);
      break;
    case 0xEBu:
      result = sub_22EB9F174((uint64_t)a1, (uint64_t)a2, a3);
      break;
    case 0xECu:
      result = sub_22EB9F220(a1, (unsigned __int16 *)a2);
      break;
    default:
      return (uint64_t)a2;
  }
  return result;
}

unint64_t sub_22EB946C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int v9;
  int *v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int i;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  int *v46;
  uint64_t v47;
  size_t v48;
  unsigned __int32 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[2];
  char v53[8];
  int64x2_t v54;
  _BYTE v55[32];
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a2 + 56);
  v7 = (unint64_t *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 4) != 0)
    v7 = (unint64_t *)v7[4];
  if ((a3 & 0xFF00000000) == 0 || (v8 = *v7, *(_BYTE *)(*(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF0) + 16) != 36))
  {
    v13 = (uint64_t *)sub_22EB4DB90(a1, v7);
    if (v13)
      goto LABEL_14;
    return 0;
  }
  *(_QWORD *)v53 = v55;
  v54 = vdupq_n_s64(0x20uLL);
  v56 = 0;
  v9 = sub_22F11598C(v8);
  if (v54.i64[0] < (unint64_t)v9)
    sub_22EEB52C0((uint64_t *)v53, v9);
  v10 = (int *)(v7 + 1);
  v11 = sub_22EB94BDC(a1, v53);
  if (v11 < 0x10)
  {
LABEL_8:
    v12 = 0;
    v13 = 0;
    goto LABEL_9;
  }
  v32 = v11;
  v33 = *(_QWORD *)(v8 + 32);
  v51 = v33;
  if (v33 >= 0x10 && (v33 & 0xF) == 0)
    v50 = *(_QWORD *)((char *)&unk_22F481D78
                    + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
  else
    v50 = 1;
  v35 = *(_QWORD *)(v8 + 32);
  v52[0] = v35;
  v52[1] = ((unint64_t)v7 + v50 + 11) & -v50;
  while (1)
  {
    while (1)
    {
      if ((v35 & 0xF) != 0)
        goto LABEL_71;
      v36 = *(unsigned __int8 *)(*(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v36 <= 0x39)
        break;
LABEL_66:
      v37 = v35;
      v38 = sub_22F115668(v35);
      v39 = v51;
      if (v38)
        v39 = v37;
      v51 = v39;
      v35 = sub_22F115B7C(v37);
      if (!v35)
        goto LABEL_79;
    }
    if (v36 == 24)
      goto LABEL_78;
    if (v36 == 26)
      break;
    if (((1 << v36) & 0x20000000200003CLL) == 0)
      goto LABEL_66;
LABEL_71:
    v35 = sub_22F115B7C(v35);
  }
  if ((*(_BYTE *)(v35 + 23) & 0x10) == 0)
    goto LABEL_71;
LABEL_78:
  v51 = v35;
LABEL_79:
  v42 = sub_22F115668(v51);
  v43 = sub_22F1167E8(v52);
  v44 = sub_22F34AE9C((_QWORD *)*a1, v32, v42 | ((unint64_t)v43 << 32), *v10, a3);
  if (v44 < 0x10)
    goto LABEL_8;
  v45 = v44;
  sub_22EEB5360((uint64_t)v53, v44, 4uLL, 4);
  *v46 = *v10;
  v47 = *(_QWORD *)(*a1 + 88);
  v48 = v54.i64[0] - v54.i64[1];
  v49 = v54.i32[0] - v54.i32[2];
  if (v54.i32[0] == v54.i32[2])
    v49 = sub_22F11598C(v45);
  v13 = (uint64_t *)sub_22E3CD3D4(v47 + 2032, v49 + 8, 3);
  *v13 = v45;
  memcpy(v13 + 1, (const void *)(*(_QWORD *)v53 + v54.i64[1]), v48);
  v12 = 1;
LABEL_9:
  if (*(_BYTE **)v53 != v55 && *(_QWORD *)v53)
    MEMORY[0x2348A0E84]();
  if ((v12 & 1) == 0 || !v13)
    return 0;
LABEL_14:
  if (v13 != (uint64_t *)v7)
  {
    v16 = *(_QWORD *)(a2 + 16);
    v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
    if ((v16 & 4) != 0)
      v17 = (_QWORD *)*v17;
    v18 = *(_QWORD *)(a2 + 40);
    if ((v18 & 7) != 0)
      v19 = 0;
    else
      v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    v20 = sub_22EFBF080(*(_QWORD *)(*a1 + 88), (uint64_t)v17, *(_DWORD *)(a2 + 64), *(_DWORD *)(a2 + 24), v19, *v13, (uint64_t)v13, *(_BYTE *)(a2 + 96) & 7, 0);
    v14 = v20;
    v21 = *(_DWORD *)(a2 + 96);
    if ((v21 & 0x1000) != 0)
      v22 = 0;
    else
      v22 = v21 & 0xFE000;
    v23 = (v21 >> 20);
    if (v23 == 255)
    {
      v24 = a2;
      if ((*(_DWORD *)(a2 + 28) & 0x7F) != 0x53)
      {
        v25 = *(_QWORD *)(a2 + 16);
        v26 = v25 & 0xFFFFFFFFFFFFFFF8;
        if ((v25 & 4) != 0)
          v26 = *(_QWORD *)v26;
        for (i = *(_WORD *)(v26 + 8) & 0x7F; i != 83; i = *(_WORD *)(v26 + 8) & 0x7F)
        {
          v28 = -40;
          if (i > 70)
          {
            if (i == 71)
            {
              v28 = -56;
              goto LABEL_48;
            }
            if (i == 81)
              goto LABEL_48;
          }
          else
          {
            if (i <= 0x18)
            {
              if (i == 16)
                goto LABEL_35;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_48;
              if (i == 24)
              {
LABEL_35:
                v28 = -48;
                goto LABEL_48;
              }
            }
            if (i == 70)
            {
              v28 = -64;
              goto LABEL_48;
            }
          }
          v29 = i - 52;
          if ((i - 33) >= 5)
            v30 = -48;
          else
            v30 = -64;
          if (v29 >= 6)
            v28 = v30;
          else
            v28 = -72;
LABEL_48:
          v31 = *(_QWORD *)(v26 + v28 + 16);
          v26 = v31 & 0xFFFFFFFFFFFFFFF8;
          if ((v31 & 4) != 0)
            v26 = *(_QWORD *)v26;
        }
        v24 = v26 - 40;
      }
      v23 = sub_22F36F2CC(*(_QWORD *)(v24 + 88), a2);
      v40 = (unsigned int *)(v14 + 96);
      v41 = *(_DWORD *)(v14 + 96) & 0xFFF01FFF | v22;
      *(_DWORD *)(v14 + 96) = v41;
      if (v23 >= 0xFF)
      {
        sub_22F3AC2B8(v14, v23);
LABEL_77:
        *(_QWORD *)v53 = a2;
        sub_22F25E108(a1 + 1, v53)[1] = v14;
        return v14;
      }
    }
    else
    {
      v40 = (unsigned int *)(v20 + 96);
      v41 = *(_DWORD *)(v20 + 96) & 0xFFF01FFF | v22;
    }
    *v40 = v41 & 0xF00FFFFF | (v23 << 20);
    goto LABEL_77;
  }
  return a2;
}

unint64_t sub_22EB94BDC(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if ((a3 & 0xF) == 0)
    __asm { BR              X11 }
  v5 = sub_22EB94BDC(a1, a2);
  v6 = 0;
  if (v5 >= 0x10)
  {
    v7 = sub_22E8C1750(a1, v5, a3);
    if (v7 >= 0x10)
      return v7;
    else
      return 0;
  }
  return v6;
}

uint64_t sub_22EB98CCC(uint64_t *a1, unint64_t a2, void *__s2, unint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD v66[2];
  int v67;
  int v68;
  unsigned int v69[24];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  _QWORD v76[11];

  v76[8] = *MEMORY[0x24BDAC8D0];
  v74 = v76;
  v75 = 0x400000000;
  if (!a2)
  {
    v49 = 0;
    v71 = 0u;
    v72 = 0u;
    goto LABEL_85;
  }
  v9 = a2;
  v10 = 0;
  v11 = a2;
  do
  {
    if (v10 >= HIDWORD(v75))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = v75;
    }
    v12 = (unint64_t *)&v74[v10];
    *v12 = v11;
    v12[1] = (unint64_t)__s2;
    v10 = v75 + 1;
    LODWORD(v75) = v75 + 1;
    v11 = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  while (v11);
  v71 = 0u;
  v72 = 0u;
  if (!v10)
  {
    v49 = 0;
    goto LABEL_76;
  }
  v64 = a1 + 1;
  do
  {
    LODWORD(v75) = v10 - 1;
    v13 = v74[v10 - 1];
    v70 = v13;
    v14 = v13;
    v15 = *(_QWORD *)(v13 + 16);
    if (!v15)
    {
      v37 = *(_QWORD *)(*a1 + 88);
      v38 = sub_22F0AB0EC((unint64_t *)&v70);
      sub_22F0AB958((uint64_t)&v71 + 8, v37, v38);
      *(_QWORD *)&v71 = v38 | ((unint64_t)v38 << 32);
      goto LABEL_39;
    }
    v16 = *(_QWORD *)(v13 + 8);
    v17 = (v16 >> 1) & 3;
    if (v17 - 2 >= 2)
    {
      if (v17 == 1)
      {
        v34 = *(_DWORD *)(v15 + 28) & 0x7F;
        if ((v34 - 35) < 3)
        {
          v46 = sub_22F0AABF8(v13);
          v73 = v46;
          v66[0] = 0;
          if (sub_22E793870(v64, &v73, v66) && v66[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
            v46 = *(_QWORD *)(v66[0] + 8);
          v47 = *(_QWORD *)(*a1 + 88);
          v48 = sub_22F0AB0EC((unint64_t *)&v70);
          sub_22F3E8E2C((uint64_t *)&v71 + 1, v47, v46, v48, SHIDWORD(v48));
          *(_QWORD *)&v71 = v48;
        }
        else
        {
          sub_22F0AB364((uint64_t *)&v70);
          v35 = *(_QWORD *)(v14 + 8) & 6;
          if (v34 == 16)
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x10)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v73 = v36;
            v66[0] = 0;
            if (sub_22E793870(v64, &v73, v66) && v66[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v66[0] + 8);
          }
          else
          {
            if (v35 == 2)
            {
              if ((*(_DWORD *)(*(_QWORD *)(v14 + 16) + 28) & 0x7F) == 0x11)
                v36 = *(_QWORD *)(v14 + 16);
              else
                v36 = 0;
            }
            else
            {
              v36 = 0;
            }
            v73 = v36;
            v66[0] = 0;
            if (sub_22E793870(v64, &v73, v66) && v66[0] != a1[1] + 16 * *((unsigned int *)a1 + 6))
              v36 = *(_QWORD *)(v66[0] + 8);
          }
          v39 = *(_QWORD *)(*a1 + 88);
          v40 = sub_22F0AB364((uint64_t *)&v70);
          v41 = sub_22F0AB364((uint64_t *)&v70);
          v42 = HIDWORD(v41);
          sub_22F0AB8AC((uint64_t *)&v71 + 1, v39, v36, v40, SHIDWORD(v41));
          if (!(_DWORD)v71)
            LODWORD(v71) = v40;
          DWORD1(v71) = v42;
        }
        goto LABEL_39;
      }
      if ((v16 & 6) != 0)
        v43 = 0;
      else
        v43 = *(_QWORD *)(v13 + 16);
      v44 = sub_22F0AB364((uint64_t *)&v70);
      v45 = sub_22F0AB364((uint64_t *)&v70);
      v66[0] = a4;
      v66[1] = v43;
      v67 = v44;
      v68 = HIDWORD(v45);
      LOBYTE(v63) = 0;
      if ((sub_22E958D90(*a1, 0, v66, 0, &v71, a5, 0, 0, v63) & 1) == 0)
        goto LABEL_39;
      goto LABEL_109;
    }
    v19 = sub_22F0AB4E0((uint64_t)&v70);
    v20 = (uint64_t)v18;
    if (v19 > 0xF)
    {
      v21 = sub_22EB99E50(a1, v19, v18, a4, (uint64_t)&v71);
      if (!v21)
        goto LABEL_109;
      v20 = (uint64_t)(v21 + 1);
      v19 = *v21;
    }
    if (!v19)
      goto LABEL_109;
    v22 = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF0);
    v23 = *(_DWORD *)(v22 + 16);
    v24 = *(_QWORD *)(v22 + 8);
    if ((v23 & 0x400) == 0)
    {
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
      v26 = *a1;
      if (v25 == 45)
        goto LABEL_23;
      if (v25 == 44 && (**(_QWORD **)(v26 + 72) & 0x200) != 0)
        goto LABEL_23;
      if ((v19 & 0xF) == 0 && v23 == 50 && (*(_BYTE *)(*(_QWORD *)(v19 + 24) + 28) & 0x80) != 0)
        goto LABEL_109;
      v57 = v19;
      v58 = v19;
      while (1)
      {
        if ((v58 & 0xF) != 0)
          goto LABEL_105;
        v59 = *(unsigned __int8 *)(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v59 > 0x39)
        {
LABEL_100:
          if (sub_22F115668(v58))
            v57 = v58;
          v58 = sub_22F115B7C(v58);
          if (!v58)
            goto LABEL_108;
        }
        else
        {
          if (v59 == 24)
            goto LABEL_107;
          if (v59 == 26)
          {
            if ((*(_BYTE *)(v58 + 23) & 0x10) != 0)
            {
LABEL_107:
              v57 = v58;
LABEL_108:
              v60 = sub_22F115668(v57);
              sub_22E8FCA40((_QWORD *)v26, v60, 0xF99u, 0, (uint64_t)v66);
              v73 = v19;
              v61 = sub_22E8901B8((uint64_t)v66, (uint64_t *)&v73);
              v65 = v71;
              sub_22E8906A0(v61, &v65);
              sub_22E903BEC((unsigned int *)v66);
LABEL_109:
              v55 = 0;
              goto LABEL_110;
            }
          }
          else if (((1 << v59) & 0x20000000200003CLL) == 0)
          {
            goto LABEL_100;
          }
LABEL_105:
          v58 = sub_22F115B7C(v58);
        }
      }
    }
    v26 = *a1;
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0) + 16);
LABEL_23:
    if (v25 != 44)
      goto LABEL_38;
    v28 = v19;
    for (i = v19; ; i = sub_22F115B7C(i))
    {
      while (1)
      {
        if ((i & 0xF) != 0)
          goto LABEL_35;
        v30 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
        if (v30 <= 0x39)
          break;
LABEL_30:
        if (sub_22F115668(i))
          v28 = i;
        i = sub_22F115B7C(i);
        if (!i)
          goto LABEL_37;
      }
      if (v30 == 24)
        goto LABEL_36;
      if (v30 == 26)
        break;
      if (((1 << v30) & 0x20000000200003CLL) == 0)
        goto LABEL_30;
LABEL_35:
      ;
    }
    if ((*(_BYTE *)(i + 23) & 0x10) == 0)
      goto LABEL_35;
LABEL_36:
    v28 = i;
LABEL_37:
    v31 = sub_22F115668(v28);
    sub_22E8FCA40((_QWORD *)v26, v31, 0x1927u, 0, (uint64_t)v69);
    sub_22E903BEC(v69);
    v26 = *a1;
LABEL_38:
    v32 = *(_QWORD *)(v26 + 88);
    v33 = sub_22F0AB364((uint64_t *)&v70);
    sub_22E8ACD1C((uint64_t)&v71, v32, 0, v19, v20, SHIDWORD(v33));
LABEL_39:
    a4 = 0;
    a5 = 0;
    v10 = v75;
  }
  while ((_DWORD)v75);
  v49 = DWORD2(v72);
LABEL_76:
  v50 = 0;
  do
  {
    v51 = *(_QWORD *)(v9 + 8);
    if ((v51 & 4) != 0)
      v52 = 12;
    else
      v52 = 8;
    if (*(_QWORD *)(v9 + 16))
      v53 = v52;
    else
      v53 = 4;
    v50 += v53;
    v9 = v51 & 0xFFFFFFFFFFFFFFF8;
  }
  while ((v51 & 0xFFFFFFFFFFFFFFF8) != 0);
  if (v49 == v50)
  {
LABEL_85:
    v54 = memcmp((const void *)v72, __s2, v49);
    v55 = *((_QWORD *)&v71 + 1);
    if (!v54 || !*((_QWORD *)&v71 + 1))
      goto LABEL_110;
  }
  else
  {
    v55 = *((_QWORD *)&v71 + 1);
    if (!*((_QWORD *)&v71 + 1))
      goto LABEL_110;
  }
  if (HIDWORD(v72))
  {
    v56 = (void *)sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, v49, 3);
    memcpy(v56, (const void *)v72, DWORD2(v72));
    v55 = *((_QWORD *)&v71 + 1);
  }
LABEL_110:
  if (HIDWORD(v72))
    free((void *)v72);
  if (v74 != (_OWORD *)v76)
    free(v74);
  return v55;
}

uint64_t sub_22EB9946C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[9];

  v6[6] = *MEMORY[0x24BDAC8D0];
  if (a3 != a5)
  {
    sub_22EDC0108(*a2, a3, 0, (uint64_t)v6);
    __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_22EB99750(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  _BOOL8 v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int128 v41;
  void *v42[2];
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;

  v4 = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v24 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      if (!v24)
        v24 = (unint64_t)sub_22EF579A8(*(_QWORD *)(*a1 + 88), *(_QWORD *)(a2 + 8), 0);
      v25 = sub_22EB4DB90(a1, v24);
      if (v25)
      {
        v26 = *(_QWORD *)v25;
        *(_DWORD *)a3 = 1;
        *(_QWORD *)(a3 + 8) = v26;
        *(_QWORD *)(a3 + 24) = v25 & 0xFFFFFFFFFFFFFFFCLL | 2;
        return 0;
      }
      return v4;
    case 2:
    case 3:
    case 4:
      v8 = sub_22F0EECF4();
      v9 = sub_22EB932F8((uint64_t)a1, v8);
      if (v9 < 0x10)
        return 1;
      v10 = v9;
      v11 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)a2 == 2)
        v12 = *(_QWORD *)(a2 + 16);
      else
        v12 = 0;
      if (v12)
      {
        v43 = v12;
        *(_QWORD *)&v41 = 0;
        if (sub_22E793870(a1 + 1, &v43, &v41))
        {
          if ((_QWORD)v41 != a1[1] + 16 * *((unsigned int *)a1 + 6))
          {
            v11 = *(_QWORD *)(v41 + 8);
            if (!v11)
              return 1;
          }
        }
      }
      else
      {
        v11 = 0;
      }
      if (v10 == v8 && v12 == v11)
      {
        v4 = 0;
        v32 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_OWORD *)(a3 + 16) = v32;
        return v4;
      }
      if (*(_DWORD *)a2 == 3)
      {
        v4 = 0;
        *(_DWORD *)a3 = 3;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_52:
        *(_QWORD *)(a3 + 24) = 0;
        return v4;
      }
      if (*(_DWORD *)a2 != 4)
      {
        v4 = 0;
        *(_DWORD *)a3 = 2;
        *(_QWORD *)(a3 + 8) = v10;
        *(_QWORD *)(a3 + 16) = v11;
        goto LABEL_52;
      }
      v33 = *(_QWORD *)(*a1 + 88);
      sub_22E466FDC(a2, (uint64_t)&v43);
      sub_22F0EEA4C((uint64_t)&v41, v33, &v43, v10);
      *(_OWORD *)a3 = v41;
      *(void **)(a3 + 16) = v42[0];
      *(_QWORD *)(a3 + 24) = 0;
      if (v44 >= 0x41 && v43)
        MEMORY[0x2348A0E84](v43, 0x1000C8000313F17);
      return 0;
    case 5:
      v27 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = *(_QWORD *)(v27 + 8);
      if (*(_QWORD *)v27)
      {
        v29 = sub_22EB98CCC((int)a1, *(_QWORD *)v27, *(void **)(v27 + 8));
        if (!v29)
          return v4;
        v31 = v29;
        v28 = v30;
      }
      else
      {
        v31 = 0;
      }
      v41 = 0u;
      *(_OWORD *)v42 = 0u;
      sub_22E8ACE30((uint64_t)&v41, v31, v28);
      if ((*(_DWORD *)a2 - 5) > 1)
        v34 = 0;
      else
        v34 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
      v35 = sub_22EB99BA4((uint64_t)a1, (uint64_t)&v41, *(_QWORD *)(a2 + 8), v34, 0, 0);
      v4 = v35 < 8;
      if (v35 >= 8)
      {
        v36 = v35;
        v37 = *(_QWORD *)(*a1 + 88);
        if ((*(_DWORD *)a2 - 5) > 1)
          v38 = 0;
        else
          v38 = *(_DWORD *)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + 16);
        v39 = sub_22E3CD3D4(v37 + 2032, 24, 3);
        *(_QWORD *)v39 = v31;
        *(_QWORD *)(v39 + 8) = v28;
        *(_DWORD *)(v39 + 16) = v38;
        *(_DWORD *)(v39 + 20) = 0;
        *(_QWORD *)a3 = 5;
        *(_QWORD *)(a3 + 8) = v36;
        *(_QWORD *)(a3 + 24) = v39 & 0xFFFFFFFFFFFFFFFCLL;
      }
      if (HIDWORD(v42[1]))
        free(v42[0]);
      return v4;
    case 7:
      v13 = *a1;
      if (a4)
        v14 = 0;
      else
        v14 = 4;
      *(_QWORD *)&v41 = 0;
      v45 = 1;
      v46 = v14;
      v43 = *(unsigned int *)(v13 + 1704);
      sub_22EB4DDB8(v13 + 3688, &v46, (int *)&v43, (__int16 *)(v13 + 1693), (uint64_t *)&v41, &v45);
      v15 = *(unsigned int *)(v13 + 3696);
      v16 = v15 - 2;
      v17 = *(_QWORD *)(v13 + 3688);
      v18 = *(_DWORD *)(v17 + 576 * (v15 - 2));
      if (v18 == 5)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = *(_BYTE *)(v17 + 576 * v16 + 572);
        v19 = 1;
      }
      else if (v18 == 2)
      {
        *(_BYTE *)(v17 + 576 * v15 - 4) = 1;
        v19 = *(_BYTE *)(v17 + 576 * v16 + 573) != 0;
      }
      else
      {
        v19 = 0;
        *(_BYTE *)(v17 + 576 * v15 - 4) = 0;
      }
      v20 = v17 + 576 * v15;
      *(_BYTE *)(v20 - 3) = v19;
      *(_WORD *)(v13 + 1693) = 0;
      if (*(_DWORD *)(v13 + 1848))
      {
        llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v13 + 1776), (llvm::SmallPtrSetImplBase *)(v20 - 560));
        sub_22EAEAE08(v13 + 1840, (uint64_t *)(v20 - 496));
      }
      if ((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) != 0)
        v21 = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v21 = *(_QWORD *)(a2 + 8);
      v22 = sub_22EB4D054(a1, v21);
      v23 = sub_22EB51A84(*a1, v22);
      v4 = v23 & 1;
      if ((v23 & 1) == 0)
      {
        *(_DWORD *)a3 = 7;
        *(_QWORD *)(a3 + 8) = v23 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(a3 + 24) = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      }
      sub_22EB48E64(v13);
      return v4;
    default:
      return v4;
  }
}

unint64_t sub_22EB99BA4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unint64_t a5, char a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE v28[12];
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v23 = a3;
  v8 = a3 & 6;
  v9 = a3 & 0xFFFFFFFFFFFFFFF8;
  if (v8 != 4 || v9 == 0)
  {
    if (v8 == 6 && v9)
    {
      if (*(_QWORD *)(a2 + 8))
        a5 = 0;
      if ((*(_BYTE *)(v9 + 8) & 4) != 0)
      {
        v18 = 0;
        v19 = *(_DWORD *)(v9 + 16);
        LODWORD(v25) = a4;
        HIDWORD(v25) = a4;
        v26 = a4;
        v30 = a4;
        v31 = a4;
        *(_QWORD *)&v28[4] = 0;
        v29 = 0;
        LODWORD(v27) = 1;
        *(_DWORD *)v28 = v19;
        do
        {
          v20 = *(_DWORD *)((char *)&v25 + v18);
          *(_DWORD *)&v28[v18 + 4] = v20;
          if (v20)
            v31 = v20;
          v18 += 4;
        }
        while (v18 != 12);
        v24 = 0;
        sub_22ED66924(*(_QWORD *)a1, 0, a2, a4, (uint64_t)&v27, a5, 0, &v24, a6);
        return v24;
      }
      else
      {
        v12 = *(_QWORD *)(v9 + 16);
        v13 = *(_QWORD *)a1;
        LODWORD(v27) = 0;
        *(_QWORD *)v28 = v12;
        v30 = a4;
        v31 = a4;
        v25 = 0;
        sub_22ED66924(v13, 0, a2, a4, (uint64_t)&v27, a5, 0, &v25, a6);
        return v25;
      }
    }
    else
    {
      result = sub_22F0F08CC(&v23);
      if (result)
      {
        v17 = result;
        v25 = result;
        v27 = 0;
        if (sub_22E793870((uint64_t *)(a1 + 8), &v25, &v27))
        {
          if (v27 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
          {
            v17 = *(_QWORD *)(v27 + 8);
            if (!v17)
              return 0;
          }
        }
        return v17 & 0xFFFFFFFFFFFFFFF9;
      }
      else if (v8 == 2 && v9 && (~*(_DWORD *)v9 & 3) == 0)
      {
        v21 = *(_QWORD *)(v9 + 16);
        v25 = v21;
        v27 = 0;
        if (sub_22E793870((uint64_t *)(a1 + 8), &v25, &v27)
          && v27 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        {
          v21 = *(_QWORD *)(v27 + 8);
        }
        if (!v21)
          return 0;
        v22 = *(_DWORD *)v9 >> 2;
        *(_QWORD *)v28 = *(_QWORD *)(v9 + 24);
        LODWORD(v27) = 8;
        HIDWORD(v27) = v22;
        return sub_22F36D860(*(_QWORD *)(*(_QWORD *)a1 + 88), v21, (uint64_t)&v27);
      }
    }
  }
  else
  {
    v15 = sub_22F0F08CC((uint64_t *)(v9 + 16));
    v25 = v15;
    v27 = 0;
    if (sub_22E793870((uint64_t *)(a1 + 8), &v25, &v27))
    {
      if (v27 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
        v15 = *(_QWORD *)(v27 + 8);
    }
    if (!v15)
      return 0;
    return sub_22F36E410(*(_QWORD *)(*(_QWORD *)a1 + 88), *(_QWORD *)(a2 + 8), (*(_QWORD *)(v9 + 8) >> 2) & 1, v15 & 0xFFFFFFFFFFFFFFF9);
  }
  return result;
}

_QWORD *sub_22EB99E50(uint64_t *a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unsigned int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int32 v28;
  unsigned int *v30;
  unsigned int *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int64x2_t v42;
  _BYTE v43[32];
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _DWORD v47[66];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v41 = (uint64_t)v43;
  v42 = vdupq_n_s64(0x20uLL);
  v44 = 0;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v10 == 20)
  {
    v13 = *(_QWORD *)(a2 + 40);
    v15 = a3[4];
    v14 = a3[5];
    v16 = *a1;
    LODWORD(v45) = 0;
    v46 = v13;
    v47[2] = v15;
    v47[3] = v15;
    v39 = 0;
    sub_22ED66924(v16, 0, a5, v14, (uint64_t)&v45, a4, 0, &v39, 1);
    v17 = 0;
    v18 = v39;
    if (v39 < 8)
      goto LABEL_22;
    v39 = a2;
    v40 = a3;
    v45 = v47;
    v46 = 0x800000000;
    v47[64] = a3[6];
    v47[65] = a3[7];
    v19 = 0;
    if ((sub_22EB9A650((uint64_t)a1, (uint64_t)&v39, 0, (uint64_t)&v39, *(_DWORD *)(a2 + 20)) & 1) == 0)
    {
      if ((~(_BYTE)v18 & 6) == 0 && (v18 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        v19 = sub_22F36CB1C(*(_QWORD *)(*a1 + 88), (*(_DWORD *)(v39 + 16) >> 19), *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t)&v45);
        sub_22EEB5360((uint64_t)&v41, v19, (8 * *(_DWORD *)(v19 + 20) + 32), 8);
        v31 = v30;
        *v30 = *v40;
        v33 = *(_QWORD *)(a5 + 8);
        v32 = (uint64_t *)(a5 + 8);
        if (!v33 || !sub_22F0ABC50(v32, *(_QWORD *)(*a1 + 88)))
          v34 = 0;
        *((_QWORD *)v31 + 1) = v34;
        v35 = v40;
        v31[5] = v40[5];
        v31[4] = v35[4];
        v31[6] = v35[6];
        v31[7] = v35[7];
        if ((_DWORD)v46)
        {
          v36 = 0;
          v37 = v31 + 8;
          v38 = 32 * v46;
          do
          {
            *v37++ = *(_QWORD *)((char *)v45 + v36 + 24);
            v36 += 32;
          }
          while (v38 != v36);
        }
      }
      else
      {
        v20 = sub_22ED60904((_QWORD *)*a1, v18, v40[4], (uint64_t)&v45);
        v19 = v20;
        if (v20 >= 0x10)
        {
          sub_22EEB5360((uint64_t)&v41, v20, (8 * *(_DWORD *)(v20 + 20) + 16), 8);
          v22 = v40;
          v21[1] = v40[5];
          *v21 = v22[4];
          v21[2] = v22[6];
          v21[3] = v22[7];
          if ((_DWORD)v46)
          {
            v23 = 0;
            v24 = v21 + 4;
            v25 = 32 * v46;
            do
            {
              *v24++ = *(_QWORD *)((char *)v45 + v23 + 24);
              v23 += 32;
            }
            while (v25 != v23);
          }
        }
      }
    }
    if (v45 != v47)
      free(v45);
  }
  else
  {
    if (v10 == 46)
    {
      v11 = sub_22EB99BA4((uint64_t)a1, a5, *(_QWORD *)(a2 + 32), *a3, a4, 1);
      if (v11 < 8)
      {
LABEL_18:
        v17 = 0;
        goto LABEL_22;
      }
      v12 = sub_22EB9A21C((_QWORD **)a1, (uint64_t)&v41, a2, a3, v11);
    }
    else
    {
      v12 = sub_22EB94BDC(a1, &v41);
    }
    v19 = v12;
  }
  if (v19 < 0x10)
    goto LABEL_18;
  v26 = *(_QWORD *)(*a1 + 88);
  v27 = v42.i64[0] - v42.i64[1];
  v28 = v42.i32[0] - v42.i32[2];
  if (v42.i32[0] == v42.i32[2])
    v28 = sub_22F11598C(v19);
  v17 = (_QWORD *)sub_22E3CD3D4(v26 + 2032, v28 + 8, 3);
  *v17 = v19;
  memcpy(v17 + 1, (const void *)(v41 + v42.i64[1]), v27);
LABEL_22:
  if ((_BYTE *)v41 != v43 && v41)
    MEMORY[0x2348A0E84]();
  return v17;
}

unint64_t sub_22EB9A21C(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v19;
  uint64_t v20;
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x800000000;
  v21[64] = a4[2];
  v21[65] = a4[3];
  if (*(_DWORD *)(a3 + 20))
    __asm { BR              X9 }
  v5 = sub_22ED60904(*a1, a5, *a4, (uint64_t)&v19);
  v6 = v5;
  if (v5 >= 0x10)
  {
    v7 = 8 * *(_DWORD *)(v5 + 20);
    if (*(_BYTE *)(*(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0) + 16) == 20)
    {
      sub_22EEB5360(a2, v5, (v7 + 32), 8);
      *(_DWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 20) = a4[1];
      *(_DWORD *)(v8 + 16) = *a4;
      *(_DWORD *)(v8 + 24) = a4[2];
      *(_DWORD *)(v8 + 28) = a4[3];
      if ((_DWORD)v20)
      {
        v9 = 0;
        v10 = (_QWORD *)(v8 + 32);
        v11 = 32 * v20;
        do
        {
          *v10++ = *(_QWORD *)((char *)v19 + v9 + 24);
          v9 += 32;
        }
        while (v11 != v9);
      }
    }
    else
    {
      sub_22EEB5360(a2, v5, (v7 + 16), 8);
      v13[1] = a4[1];
      *v13 = *a4;
      v13[2] = a4[2];
      v13[3] = a4[3];
      if ((_DWORD)v20)
      {
        v14 = 0;
        v15 = v13 + 4;
        v16 = 32 * v20;
        do
        {
          *v15++ = *(_QWORD *)((char *)v19 + v14 + 24);
          v14 += 32;
        }
        while (v16 != v14);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  return v6;
}

uint64_t sub_22EB9A650(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 != a4 || a3 != a5)
    __asm { BR              X9 }
  return 0;
}

unint64_t sub_22EB9A938(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40[18];
  int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  __int128 v45;
  void *v46[2];
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  char v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[64];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  _BYTE v74[24];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v10 = sub_22EB98CCC(a1, *(_QWORD *)(a3 + 32), *(void **)(a4 + 8), 0, 0);
  if (!v10)
    return 0;
  v12 = v11;
  v13 = (*(_DWORD *)(a3 + 16) >> 19);
  v14 = *(_DWORD *)a4;
  v15 = *(_QWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a4 + 16);
  v48 = v10;
  v49 = v11;
  v47 = v15;
  v45 = 0u;
  *(_OWORD *)v46 = 0u;
  sub_22E8ACE30((uint64_t)&v45, v10, v11);
  if ((sub_22F0AAC5C(v48) & 4) != 0 && !sub_22E958204(*a1, (uint64_t)&v45, 0))
  {
    v17 = sub_22EF65A30(*(_QWORD *)(*a1 + 88), v13, v48, v47, 0);
    goto LABEL_18;
  }
  if ((v13 - 5) <= 1)
  {
    v17 = sub_22ED717D8((_QWORD *)*a1, v13, v14, v48, v49, v47, v16, a5);
LABEL_18:
    v24 = v17;
    goto LABEL_40;
  }
  v44 = v13;
  v18 = (_QWORD *)*a1;
  v64 = 0;
  v65 = v67;
  v66 = 0x800000000;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v18;
  v72 = v47;
  v73 = v16;
  sub_22EFC6D6C((uint64_t)v74, v47);
  *(_OWORD *)&v74[8] = xmmword_22F4555C0;
  v75 = 16842752;
  v76 = 0;
  v77 = 0;
  sub_22EC56024((uint64_t)&v64);
  v43 = 0;
  v19 = sub_22E958204(*a1, (uint64_t)&v45, 0);
  v43 = v19;
  if (v19)
  {
    if ((sub_22E958490(*a1, &v45, v19) & 1) == 0)
    {
      sub_22EC611AC(*a1, &v64, v43, 0);
      if ((_DWORD)v64 != 5)
      {
        if ((_DWORD)v64 != 2)
          goto LABEL_19;
        v20 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        if (v21 <= 0x2F && ((1 << v21) & 0xC00000060000) != 0)
        {
          v20 = sub_22EFBAEA4(*(_QWORD *)v65 & 0xFFFFFFFFFFFFFFFCLL);
          v21 = *(_DWORD *)(v20 + 28) & 0x7F;
        }
        if (v21 - 33 < 5)
        {
          if ((sub_22EA33594(*a1, v20, v44, 0, v16, v47) & 1) != 0)
          {
            v22 = *(_QWORD *)(v20 + 48);
            if (v22)
              v23 = v22 & 0xFFFFFFFFFFFFFFF0;
            else
              v23 = sub_22EF6462C(*(_QWORD *)(*a1 + 88), v20);
            v24 = sub_22EF65684(*(_QWORD *)(*a1 + 88), v13, v48, v23, 0);
            goto LABEL_31;
          }
          sub_22E8FCA40((_QWORD *)*a1, v14, 0x13E0u, 0, (uint64_t)&v50);
          sub_22E8BAE44((uint64_t)&v50, &v47);
          sub_22E903BEC((unsigned int *)&v50);
          sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v20 + 24), 0x6Fu, 0, (uint64_t)&v50);
          sub_22E903BEC((unsigned int *)&v50);
        }
        else
        {
LABEL_19:
          v25 = (_QWORD *)*a1;
          v50 = 0;
          v51 = v53;
          v52 = 0x800000000;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = v25;
          v58 = v47;
          v59 = v16;
          sub_22EFC6D6C((uint64_t)v60, v47);
          *(_OWORD *)&v60[8] = xmmword_22F4555C0;
          v61 = 16842752;
          v62 = 0;
          v63 = 0;
          sub_22EC56024((uint64_t)&v50);
          sub_22EC611AC(*a1, &v50, v43, 0);
          if ((v50 - 2) <= 2)
          {
            v42 = *(_QWORD *)v51 & 0xFFFFFFFFFFFFFFFCLL;
            v35 = (_QWORD *)*a1;
            v41 = sub_22F31E40C(*a1, v42, v44);
            sub_22E8FCA40(v35, v16, 0x12A5u, 0, (uint64_t)v40);
            v36 = sub_22E890024((uint64_t)v40, (uint64_t *)&v42);
            v37 = sub_22E8900C4(v36, &v41);
            sub_22E8900C4(v37, (int *)&v44);
            sub_22E903BEC(v40);
            sub_22E8FCA40((_QWORD *)*a1, *(_DWORD *)(v42 + 24), 0x64u, 0, (uint64_t)v40);
          }
          else
          {
            sub_22E8FCA40((_QWORD *)*a1, v16, 0xFDFu, 0, (uint64_t)v40);
            v26 = sub_22E8900C4((uint64_t)v40, (int *)&v44);
            v27 = sub_22E8BAE44(v26, &v47);
            v28 = sub_22E894FB4(v27, (uint64_t *)&v43);
            v42 = sub_22F0AB0EC(&v48);
            sub_22E8906A0(v28, (uint64_t *)&v42);
          }
          sub_22E903BEC(v40);
          if (HIBYTE(v61))
          {
            if ((_DWORD)v50 == 5)
            {
              sub_22EC64D18(v57, (uint64_t)&v50);
            }
            else if (v55 && (*(_DWORD *)(v57[9] + 52) & 0x400000) != 0)
            {
              sub_22E90B5FC((unint64_t)v57, (uint64_t)&v50);
            }
          }
          if (v54)
          {
            v39 = sub_22EC6CBD0(v54);
            MEMORY[0x2348A0E9C](v39, 0x10E0C409F09D3C3);
          }
          if (v51 != v53)
            free(v51);
        }
      }
    }
  }
  v24 = 0;
LABEL_31:
  if (HIBYTE(v75))
  {
    if ((_DWORD)v64 == 5)
    {
      sub_22EC64D18(v71, (uint64_t)&v64);
    }
    else if (v69 && (*(_DWORD *)(v71[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v71, (uint64_t)&v64);
    }
  }
  if (v68)
  {
    v38 = sub_22EC6CBD0(v68);
    MEMORY[0x2348A0E9C](v38, 0x10E0C409F09D3C3);
  }
  if (v65 != v67)
    free(v65);
LABEL_40:
  if (HIDWORD(v46[1]))
    free(v46[0]);
  if (v24 < 0x10)
    return 0;
  v29 = *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF0);
  if (v29)
    v30 = *(_BYTE *)(v29 + 16) == 24;
  else
    v30 = 0;
  if (v30
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v29 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 24
    && (v29 = sub_22F10CF48(v29)) != 0)
  {
    sub_22EEB5360(a2, *(_QWORD *)(v29 + 40), 4uLL, 4);
    *v31 = *(_DWORD *)(a4 + 16);
    sub_22EEB5360(a2, v24, 0x10uLL, 8);
    *(_DWORD *)v32 = *(_DWORD *)a4;
    *(_QWORD *)(v32 + 8) = v12;
  }
  else
  {
    sub_22EEB5360(a2, v24, 0x18uLL, 8);
    *(_DWORD *)v33 = *(_DWORD *)a4;
    *(_QWORD *)(v33 + 8) = v12;
    *(_DWORD *)(v33 + 16) = *(_DWORD *)(a4 + 16);
  }
  return v24;
}

uint64_t sub_22EB9AF60(uint64_t *a1, unsigned int a2, int *a3, uint64_t a4, _BYTE *a5)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t i;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t result;
  uint64_t v35;
  int *v36;
  unint64_t v38;
  int v40;
  int v41;
  void **v42;
  char v43;
  int v44;
  void *v45[2];
  _QWORD v46[5];

  v46[4] = *MEMORY[0x24BDAC8D0];
  v8 = *a3;
  if ((*a3 - 6) <= 2)
  {
    v9 = *a1;
    v45[0] = 0;
    v40 = 3;
    v41 = 4;
    v42 = (void **)*(unsigned int *)(v9 + 1704);
    sub_22EB4DDB8(v9 + 3688, &v41, (int *)&v42, (__int16 *)(v9 + 1693), (uint64_t *)v45, &v40);
    v10 = *(unsigned int *)(v9 + 3696);
    v11 = v10 - 2;
    v12 = *(_QWORD *)(v9 + 3688);
    v13 = *(_DWORD *)(v12 + 576 * (v10 - 2));
    if (v13 == 5)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = *(_BYTE *)(v12 + 576 * v11 + 572);
      v14 = 1;
    }
    else if (v13 == 2)
    {
      *(_BYTE *)(v12 + 576 * v10 - 4) = 1;
      v14 = *(_BYTE *)(v12 + 576 * v11 + 573) != 0;
    }
    else
    {
      v14 = 0;
      *(_BYTE *)(v12 + 576 * v10 - 4) = 0;
    }
    v15 = v12 + 576 * v10;
    *(_BYTE *)(v15 - 3) = v14;
    *(_WORD *)(v9 + 1693) = 0;
    if (*(_DWORD *)(v9 + 1848))
    {
      llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v9 + 1776), (llvm::SmallPtrSetImplBase *)(v15 - 560));
      sub_22EAEAE08(v9 + 1840, (uint64_t *)(v15 - 496));
    }
    v16 = sub_22EB4D054(a1, *((_QWORD *)a3 + 3));
    if ((v16 & 1) != 0
      || (LODWORD(v45[0]) = *a3, v17 = sub_22EB14270(*a1, v16 & 0xFFFFFFFFFFFFFFFELL, v45), (v17 & 1) != 0))
    {
      sub_22EB48E64(v9);
      return 1;
    }
    v18 = (int)v45[0];
    if (*((_QWORD *)a3 + 3) != (v17 & 0xFFFFFFFFFFFFFFFELL) || LODWORD(v45[0]) != *a3)
      *a5 = 1;
    *((_QWORD *)a3 + 3) = v17 & 0xFFFFFFFFFFFFFFFELL;
    *a3 = v18;
    sub_22EB48E64(v9);
    v8 = *a3;
  }
  if (v8 != 2)
    return 0;
  v36 = a3;
  v19 = *((_QWORD *)a3 + 2);
  if (v19)
  {
    v20 = (void **)*((_QWORD *)a3 + 1);
    v38 = a2 | ((unint64_t)a2 << 32);
    for (i = 8 * v19; i; i -= 8)
    {
      v22 = *v20;
      v23 = *(_QWORD *)((unint64_t)*v20 & 0xFFFFFFFFFFFFFFF0);
      if (v23 && *(_BYTE *)(v23 + 16) == 36
        || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v23 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 36
        && (v23 = sub_22F10CF48(v23)) != 0)
      {
        *a5 = 1;
        v45[0] = v46;
        v45[1] = (void *)0x200000000;
        v24 = *(_QWORD *)(v23 + 32);
        v42 = v45;
        v43 = 0;
        v44 = -1;
        sub_22EE72E1C((uint64_t)&v42, v24);
        v25 = *(_DWORD *)(v23 + 20);
        v26 = *a1;
        v27 = *(_DWORD *)(*a1 + 11992);
        *(_DWORD *)(*a1 + 11992) = -1;
        v28 = sub_22EB932F8((uint64_t)a1, *(_QWORD *)(v23 + 32));
        if (v28 >= 0x10)
        {
          LODWORD(v29) = v25 - 1;
          if (v25)
            v29 = v29;
          else
            v29 = 0;
          v30 = sub_22EF663B4(*(_QWORD *)(*a1 + 88), v28, v29 | ((unint64_t)(v25 != 0) << 32));
          v31 = *(unsigned int *)(a4 + 8);
          if (v31 >= *(unsigned int *)(a4 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v31 = *(unsigned int *)(a4 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v31) = v30;
          ++*(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(v26 + 11992) = v27;
        if (v45[0] != v46)
          free(v45[0]);
        if (v28 < 0x10)
          return 1;
      }
      else
      {
        v45[0] = (void *)sub_22EB932F8((uint64_t)a1, (unint64_t)v22);
        if (v45[0] < (void *)0x10 || (sub_22EB14454(*a1, (unint64_t *)v45, v38) & 1) != 0)
          return 1;
        v32 = v45[0];
        if (v22 != v45[0])
          *a5 = 1;
        v33 = *(unsigned int *)(a4 + 8);
        if (v33 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v33 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v33) = v32;
        ++*(_DWORD *)(a4 + 8);
      }
      ++v20;
    }
  }
  v35 = *(unsigned int *)(a4 + 8);
  *((_QWORD *)v36 + 1) = *(_QWORD *)a4;
  *((_QWORD *)v36 + 2) = v35;
  if ((_DWORD)v35)
    return 0;
  result = 0;
  *v36 = 1;
  return result;
}

unint64_t sub_22EB9B380(_QWORD **a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v8;
  unint64_t result;
  unint64_t v10;
  uint64_t v11;
  int *v12;

  v8 = sub_22EB94BDC(a1, a2);
  result = 0;
  if (v8 >= 0x10)
  {
    v10 = sub_22EE7E490(*a1, v8, (*(_DWORD *)(a3 + 16) >> 19) & 1, *a4);
    result = 0;
    if (v10 >= 0x10)
    {
      v11 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
      if (!v11 || (*(_DWORD *)(v11 + 16) & 0xFE) != 0x28)
        sub_22F10CF48(v11);
      sub_22EEB5360(a2, v10, 4uLL, 4);
      *v12 = *a4;
      return v10;
    }
  }
  return result;
}

uint64_t sub_22EB9B47C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  unsigned int v38;
  _QWORD v39[8];
  void *v40;
  uint64_t v41;
  _BYTE v42[32];
  void *v43;
  uint64_t v44;
  _BYTE v45[64];
  char *v46;
  uint64_t v47;
  _QWORD v48[10];

  v48[8] = *MEMORY[0x24BDAC8D0];
  v46 = (char *)v48;
  v47 = 0x800000000;
  v43 = v45;
  v44 = 0x800000000;
  v40 = v42;
  v41 = 0x400000000;
  v38 = 0;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 8 * v10;
    v13 = 1;
    while (1)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + v11);
      v15 = v41;
      if (v41 >= (unint64_t)HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v15 = v41;
      }
      *((_QWORD *)v40 + v15) = v14;
      LODWORD(v41) = v41 + 1;
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + v11);
      v17 = v47;
      if (v47 >= (unint64_t)HIDWORD(v47))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v17 = v47;
      }
      *(_QWORD *)&v46[8 * v17] = v16;
      LODWORD(v47) = v47 + 1;
      v18 = sub_22EB4D054(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + v11));
      if ((v18 & 1) != 0)
        break;
      v10 = v44;
      if (v44 >= (unint64_t)HIDWORD(v44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v44;
      }
      *((_QWORD *)v43 + v10) = v18 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v10) = v44 + 1;
      LODWORD(v44) = v44 + 1;
      v11 += 8;
      if (v12 == v11)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v19 = *(_DWORD *)(a2 + 20);
    if (v19)
    {
      v20 = 0;
      v13 = 1;
      while (1)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * (v20 + *(_DWORD *)(a2 + 16)));
        v22 = v41;
        if (v41 >= (unint64_t)HIDWORD(v41))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v22 = v41;
        }
        *((_QWORD *)v40 + v22) = v21;
        LODWORD(v41) = v41 + 1;
        v23 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * (v20 + *(_DWORD *)(a2 + 16)));
        v24 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v24 = v47;
        }
        *(_QWORD *)&v46[8 * v24] = v23;
        LODWORD(v47) = v47 + 1;
        v25 = sub_22EB4D054(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * (v20 + *(_DWORD *)(a2 + 16))));
        if ((v25 & 1) != 0)
          break;
        v10 = v44;
        if (v44 >= (unint64_t)HIDWORD(v44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v10 = v44;
        }
        *((_QWORD *)v43 + v10) = v25 & 0xFFFFFFFFFFFFFFFELL;
        LODWORD(v10) = v44 + 1;
        LODWORD(v44) = v44 + 1;
        if (v19 == ++v20)
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      v26 = *(_DWORD *)(a2 + 80);
      if (v26)
      {
        v27 = 0;
        v13 = 1;
        while (1)
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a2 + 72)
                          + 8 * (v27 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20)));
          v29 = v41;
          if (v41 >= (unint64_t)HIDWORD(v41))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v29 = v41;
          }
          *((_QWORD *)v40 + v29) = v28;
          LODWORD(v41) = v41 + 1;
          v30 = sub_22EB4D054(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32)+ 8 * (v27 + *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 20))));
          if ((v30 & 1) != 0)
            break;
          v10 = v44;
          if (v44 >= (unint64_t)HIDWORD(v44))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v10 = v44;
          }
          *((_QWORD *)v43 + v10) = v30 & 0xFFFFFFFFFFFFFFFELL;
          LODWORD(v10) = v44 + 1;
          LODWORD(v44) = v44 + 1;
          if (v26 == ++v27)
            goto LABEL_29;
        }
      }
      else
      {
LABEL_29:
        v31 = *(unsigned int *)(a2 + 24);
        v32 = 0;
        if ((_DWORD)v31)
        {
          v33 = 0;
          v34 = 8 * v31;
          do
          {
            v35 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + v33);
            if (v32 >= 8)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v32 = v38;
            }
            v39[v32] = v35;
            v32 = ++v38;
            v33 += 8;
          }
          while (v34 != v33);
          LODWORD(v10) = v44;
        }
        v13 = sub_22ED4E804(*a1, *(_DWORD *)(a2 + 8), *(_BYTE *)(a2 + 12), *(_BYTE *)(a2 + 13), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), (char *)v40, a8, v46, v47, (uint64_t *)v43, v10, *(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL, (char *)v39, v32, 0, *(_DWORD *)(a2 + 80), v37, *(_DWORD *)(a2 + 40));
      }
    }
  }
  if (v40 != v42)
    free(v40);
  if (v43 != v45)
    free(v43);
  if (v46 != (char *)v48)
    free(v46);
  return v13;
}

uint64_t sub_22EB9B944(uint64_t *a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  const void *v19;
  unsigned int v20;
  uint64_t v21[10];

  v21[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a2 + 72);
  v5 = *(unsigned int *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_DWORD *)(a2 + 16);
  v8 = *(_DWORD *)(a2 + 20);
  v9 = v7 + v8;
  v20 = 0;
  if (v9 < 9)
  {
    if (!(_DWORD)v9)
    {
      v17 = 0;
      v15 = 0;
      return sub_22ED51D60(*a1, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), v7, v8, *(_QWORD *)(a2 + 80), v17, *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v21, v15, *(_DWORD *)(a2 + 44));
    }
    v19 = *(const void **)(a2 + 72);
  }
  else
  {
    v19 = *(const void **)(a2 + 72);
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v10 = 0;
  LOBYTE(v11) = 0;
  do
  {
    while (1)
    {
      v12 = sub_22EB4D054(a1, *(_QWORD *)(v6 + 8 * v10));
      if (v12 >= 2)
        break;
      v11 = 1;
      if (v9 - 1 == v10++)
        return v11;
    }
    v13 = v12;
    v14 = v20;
    if (v20 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v14 = v20;
    }
    v21[v14] = v13 & 0xFFFFFFFFFFFFFFFELL;
    v15 = ++v20;
    ++v10;
  }
  while (v9 != v10);
  if ((v11 & 1) == 0)
  {
    v7 = *(_DWORD *)(a2 + 16);
    v8 = *(_DWORD *)(a2 + 20);
    v4 = v19;
    v17 = v8 + v7;
    return sub_22ED51D60(*a1, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 40), v4, v5, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), v7, v8, *(_QWORD *)(a2 + 80), v17, *(_QWORD *)(a2 + 88), *(unsigned int *)(a2 + 24), v21, v15, *(_DWORD *)(a2 + 44));
  }
  return 1;
}

uint64_t sub_22EB9BB10(_QWORD **a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 4) != 0)
      v6 = (uint64_t *)v6[4];
    if (!sub_22EB4DB90(a1, v6))
      return 1;
    v7 = sub_22EACE428();
    if (!v7)
      return 1;
    v4 = v7;
    sub_22EFCCFA0((*a1)[27], v7);
    if ((*(_BYTE *)(v4 + 28) & 0x80) != 0)
      return 1;
  }
  v8 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  v11 = sub_22E3CD3D4((*a1)[11] + 2032, 32, 3);
  *(_BYTE *)v11 = 4;
  if (byte_255E04EB3)
  {
    v12 = sub_22F0D3748(4);
    ++*((_DWORD *)v12 + 2);
  }
  *(_DWORD *)(v11 + 8) = v9;
  *(_QWORD *)(v11 + 16) = v4;
  *(_QWORD *)(v11 + 24) = v10;
  return v11;
}

uint64_t sub_22EB9BC1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EB93FC4(a1, v4, 0);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  v6 = sub_22EB93FC4(a1, *(_QWORD *)(v2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  v7 = sub_22EB93FC4(a1, *(_QWORD *)(v2 + 32), 0);
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_22EB93FC4(a1, *(_QWORD *)(v2 + 40), 0);
  if ((v8 & 1) != 0)
    return 1;
  v9 = sub_22EB4D054(a1, *(_QWORD *)(v2 + 48));
  v10 = v9;
  if ((v9 & 1) != 0)
    return 1;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = sub_22EB52F30(*a1, *(_DWORD *)(v2 + 84), (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL), 0);
  if ((v10 & 1) != 0)
    return 1;
  if ((v10 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v10 = (uint64_t)sub_22EBCCCF0(*a1, (int *)(v10 & 0xFFFFFFFFFFFFFFFELL));
  v11 = sub_22EB4D054(a1, *(_QWORD *)(v2 + 56));
  v12 = v11;
  if ((v11 & 1) != 0)
    return 1;
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v12 = (unint64_t)sub_22EBCCCF0(*a1, (int *)(v11 & 0xFFFFFFFFFFFFFFFELL));
  v13 = sub_22EB93FC4(a1, *(_QWORD *)(v2 + 64), 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v15 = v6 & 0xFFFFFFFFFFFFFFFELL;
  v16 = v7 & 0xFFFFFFFFFFFFFFFELL;
  v17 = v8 & 0xFFFFFFFFFFFFFFFELL;
  v18 = v10 & 0xFFFFFFFFFFFFFFFELL;
  v19 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v20 = v13 & 0xFFFFFFFFFFFFFFFELL;
  v21 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v14, *(_DWORD *)(v2 + 84), v15, v16, v17, v18, v12 & 0xFFFFFFFFFFFFFFFELL, v13 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(v2 + 88));
  if ((v21 & 1) != 0 && *(_QWORD *)(v2 + 64) != v20)
  {
    sub_22EA2BABC(*a1, *(_QWORD *)(v20 + 8));
    return 1;
  }
  v22 = sub_22EB93FC4(a1, *(_QWORD *)(v2 + 72), 0);
  if ((v22 & 1) != 0)
    return 1;
  v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
  v24 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if ((v21 & 0xFFFFFFFFFFFFFFFELL) == v2 && *(_QWORD *)(v2 + 72) != v23)
  {
    v25 = v22 & 0xFFFFFFFFFFFFFFFELL;
    v26 = sub_22E8C6118(a1, *(_DWORD *)(v2 + 8), *(_DWORD *)(v2 + 80), v14, *(_DWORD *)(v2 + 84), v15, v16, v17, v18, v19, v20, *(_DWORD *)(v2 + 88));
    if ((v26 & 1) != 0)
      return 1;
    v24 = v26 & 0xFFFFFFFFFFFFFFFELL;
    v23 = v25;
  }
  if (v24 != v2)
    return sub_22ED33C64(*a1, v24, v23);
  return v2;
}

uint64_t sub_22EB9BE60(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22EB9C1C0(a1, *(unsigned int **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v12 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)(a2 + 24);
    v7 = 1;
    while (1)
    {
      v8 = sub_22EB9BB10((_QWORD **)a1, *v6);
      if ((v8 & 1) != 0)
        break;
      v9 = v12;
      if (v12 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v12;
      }
      v13[v9] = v8 & 0xFFFFFFFFFFFFFFFELL;
      v10 = ++v12;
      ++v6;
      if (!--v5)
        return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v13, v10);
    }
  }
  else
  {
    v10 = 0;
    return sub_22ED36EF4(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v13, v10);
  }
  return v7;
}

uint64_t sub_22EB9BFA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[14];

  v34[12] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  sub_22F0D5A50(*(_QWORD *)(a2 + 32 + 8 * *(unsigned int *)(a2 + 8)));
  v6 = v5;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 72);
  v9 = *(unsigned int *)((v7 & 0xFFFFFFFFFFFFFFF8) + 76);
  v32 = v34;
  v33 = 0x400000000;
  if ((_DWORD)v8)
  {
    v28 = v5;
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 88;
    do
    {
      if (v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)v10 + 40) & 0xFFFFFFFFFFFFFFF8;
        if ((*(_QWORD *)(*(_QWORD *)v10 + 40) & 7) != 0 || v11 == 0)
        {
          v14 = 0;
          v15 = "";
        }
        else
        {
          v13 = *(_DWORD **)(v11 + 16);
          v16 = *v13;
          v15 = (const char *)(v13 + 4);
          v14 = v16;
        }
        v17 = sub_22EB932F8((uint64_t)a1, *(_QWORD *)(*(_QWORD *)v10 + 48));
        v29 = v15;
        v30 = v14;
        v31 = v17;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
      }
      v18 = sub_22E4EF088((uint64_t)&v32, (unint64_t)&v29, 1);
      v19 = (char *)v32 + 24 * v33;
      v20 = *(_OWORD *)v18;
      *((_QWORD *)v19 + 2) = *(_QWORD *)(v18 + 16);
      *(_OWORD *)v19 = v20;
      v21 = v33 + 1;
      LODWORD(v33) = v33 + 1;
      v10 += 8;
      --v9;
      --v8;
    }
    while (v8);
    v7 = *(_QWORD *)(a2 + 16);
    v22 = v32;
    v6 = v28;
  }
  else
  {
    v21 = 0;
    v22 = v34;
  }
  sub_22ED379B0(*a1, v6, 0, (v7 >> 1) & 3, (uint64_t)v22, v21, 0);
  v23 = *a1;
  sub_22E905168(*a1, 0);
  v24 = sub_22EB93FC4(a1, *(_QWORD *)(v4 + 8 * *(unsigned int *)(a2 + 8)), 0);
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 1896) + 8 * *(unsigned int *)(v23 + 1904) - 8);
  --*(_QWORD *)(v25 + 360);
  if ((v24 & 1) != 0)
  {
    sub_22F344E80(*a1);
    v26 = 1;
  }
  else
  {
    v26 = sub_22ED37CF8((_QWORD *)*a1, v24 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (v32 != v34)
    free(v32);
  return v26;
}

uint64_t sub_22EB9C1C0(uint64_t *a1, unsigned int *a2)
{
  return sub_22EB9F2E4(a1, a2, 0);
}

uint64_t sub_22EB9C1C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB935E0(a1, *(unsigned __int8 **)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22E9FB310(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, *(_BYTE *)(a2 + 32) & 1);
}

uint64_t sub_22EB9C21C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[6];
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  void *v38;
  _QWORD v39[7];

  v39[6] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 1904);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 1896) + 8 * v5 - 8);
  else
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 216);
  if (v7)
    v8 = v7 - 72;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  if (!sub_22E9FC668(*a1, *(_DWORD *)(v8 + 24)))
    return 1;
  v9 = sub_22E9F85C0();
  if (!v9)
    return 1;
  v12 = v9;
  *(_QWORD *)&v31[0] = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  sub_22F25E108(a1 + 1, v31)[1] = v9;
  *(_QWORD *)(v6 + 176) = v12;
  v13 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 32), 0);
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 40), 0);
  if ((v14 & 1) != 0)
    return 1;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (!sub_22E9F9340((_QWORD *)*a1, (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFFELL)))
    return 1;
  *(_DWORD *)(v6 + 8) &= ~0x20000u;
  *(_QWORD *)(v6 + 336) = v13 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v6 + 344) = v15;
  v16 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v16 & 1) != 0)
    return 1;
  sub_22F31B0C0((uint64_t)v31, *a1, v8, v6, v16 & 0xFFFFFFFFFFFFFFFELL);
  if (!v37)
    goto LABEL_37;
  v17 = sub_22EB935E0(a1, *(unsigned __int8 **)(a2 + 80), 0);
  if ((v17 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v34 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v12 + 48) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0
      || (sub_22F31B2A0((uint64_t)v31) & 1) != 0)
    {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(a2 + 56);
  if (v18)
  {
    v19 = sub_22EB93FC4(a1, v18, 0);
    if ((v19 & 1) != 0)
      goto LABEL_37;
    *((_QWORD *)&v32 + 1) = v19 & 0xFFFFFFFFFFFFFFFELL;
  }
  v20 = *(_QWORD *)(a2 + 48);
  if (v20)
  {
    v21 = sub_22EB93FC4(a1, v20, 0);
    if ((v21 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v32 = v21 & 0xFFFFFFFFFFFFFFFELL;
  }
  v22 = *(_QWORD *)(a2 + 96);
  if (v22)
  {
    v23 = sub_22EB93FC4(a1, v22, 0);
    if ((v23 & 1) != 0)
      goto LABEL_37;
    *(_QWORD *)&v35 = v23 & 0xFFFFFFFFFFFFFFFELL;
  }
  v24 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 64));
  if ((v24 & 1) != 0)
    goto LABEL_37;
  *(_QWORD *)&v33 = v24 & 0xFFFFFFFFFFFFFFFELL;
  v25 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 72));
  if ((v25 & 1) != 0)
    goto LABEL_37;
  *((_QWORD *)&v33 + 1) = v25 & 0xFFFFFFFFFFFFFFFELL;
  v26 = *(_QWORD *)(a2 + 88);
  if (!v26)
    goto LABEL_33;
  v27 = sub_22EB93FC4(a1, v26, 0);
  if ((v27 & 1) != 0)
  {
LABEL_37:
    v10 = 1;
    goto LABEL_38;
  }
  *((_QWORD *)&v34 + 1) = v27 & 0xFFFFFFFFFFFFFFFELL;
LABEL_33:
  v30 = v36;
  v29[4] = v34;
  v29[5] = v35;
  v29[0] = v31[0];
  v29[1] = v31[1];
  v29[2] = v32;
  v29[3] = v33;
  v28 = sub_22F3F2E7C(*(_QWORD *)(*a1 + 88), (uint64_t)v29);
  if (v28)
    v10 = v28;
  else
    v10 = 1;
LABEL_38:
  if (v38 != v39)
    free(v38);
  return v10;
}

uint64_t sub_22EB9C504(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3440A8(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 24), *(unsigned int *)(a2 + 24), (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)(a2 + 28));
}

uint64_t sub_22EB9C57C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = *a1;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 72))
    sub_22EC80540(v4);
  v5 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 8), 0);
  if ((v5 & 1) != 0)
    return 1;
  if (v5 >= 2 && *(_DWORD *)(*(_QWORD *)(*a1 + 72) + 72) != 0)
    sub_22EC9AE58((_QWORD *)*a1, *(_DWORD *)(a2 + 4), (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 ? *(_QWORD *)(v7 + 8) : 0;
  sub_22EB9F51C((uint64_t)&v19, (uint64_t)a1, *(_DWORD *)(a2 + 4), v8, *(_QWORD *)(a2 + 24), 0);
  if ((_BYTE)v20)
    return 1;
  v9 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v9 & 1) != 0)
    return 1;
  v10 = *a1;
  v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    sub_22EFF605C(v9 & 0xFFFFFFFFFFFFFFFELL);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 1;
  v15 = sub_22EBCF22C(v10, v11, v13, 1, 0) & 0xFFFFFFFFFFFFFFFELL;
  if (!*(_QWORD *)(a2 + 32) || v15)
  {
    v16 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 40), 0);
    if ((v16 & 1) == 0)
    {
      v17 = *(_DWORD *)(a2 + 4);
      v21 = v19;
      v22 = v20;
      return sub_22ED31008(*a1, v17, *(_DWORD *)(a2 + 48), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v21, v15, *(_DWORD *)(a2 + 52), (_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL));
    }
    return 1;
  }
  return v14;
}

uint64_t sub_22EB9C6E4(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  char v33;
  unsigned __int8 v34;
  unsigned __int8 v35;

  if ((*a2 & 0x2000) != 0)
    v4 = *((_QWORD *)a2 + 2);
  else
    v4 = 0;
  v5 = sub_22EB93FC4(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x600) == 0x200)
  {
    v7 = 0;
    v8 = 0;
    v31 = 0u;
  }
  else
  {
    if ((v6 & 0x1000) != 0)
    {
      v10 = (v6 >> 13) & 1;
      v30 = *(_QWORD *)&a2[4 * v10 + 8];
      if (v30)
        v9 = *(_QWORD *)(v30 + 8);
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
      LODWORD(v10) = (v6 >> 13) & 1;
    }
    sub_22EB9F51C((uint64_t)&v32, a1, *((_DWORD *)a2 + 1), v9, *(_QWORD *)&a2[4 * v10 + 8 + 4 * ((v6 >> 12) & 1)], (v6 & 0x700) == 256);
    if (v33)
      return 1;
    v31 = v32;
    v8 = v34;
    v7 = v35;
    LODWORD(v6) = *a2;
  }
  v11 = (v6 & 0x700) != 0x100 || v8 == 0;
  v12 = v11;
  if (!v11 && !v7)
  {
    v13 = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 8, 3);
    sub_22F0D5A50(*(_QWORD *)&a2[4 * ((*a2 >> 12) & 1) + 12 + 4 * ((*a2 >> 13) & 1)]);
    v15 = v14;
    *(_BYTE *)v13 = 19;
    if (byte_255E04EB3)
    {
      v16 = sub_22F0D3748(19);
      ++*((_DWORD *)v16 + 2);
    }
    *(_WORD *)v13 &= ~0x100u;
    *(_DWORD *)(v13 + 4) = v15;
    goto LABEL_22;
  }
  v13 = sub_22EB93FC4(a1, *(_QWORD *)&a2[4 * ((v6 >> 12) & 1) + 12 + 4 * ((v6 >> 13) & 1)], 0);
  if ((v13 & 1) != 0)
    return 1;
  if (v7)
    v19 = v12;
  else
    v19 = 1;
  if (v19 == 1)
  {
LABEL_22:
    v17 = *a2;
    if ((v17 & 0x800) != 0)
      v18 = *(_QWORD *)&a2[4 * ((v17 >> 13) & 1) + 16 + 4 * ((v17 >> 12) & 1)];
    else
      v18 = 0;
    v20 = sub_22EB93FC4(a1, v18, 0);
    if ((v20 & 1) == 0)
      goto LABEL_32;
    return 1;
  }
  v20 = 0;
LABEL_32:
  v21 = *a2;
  v22 = (v21 >> 8) & 7;
  v23 = *((_DWORD *)a2 + 1);
  v24 = *((_DWORD *)a2 + 2);
  v25 = *((_DWORD *)a2 + 3);
  if ((v21 & 0x800) != 0)
    v26 = *(_DWORD *)&a2[4 * ((v21 >> 12) & 1) + 20 + 4 * ((v21 >> 13) & 1)];
  else
    v26 = 0;
  v28 = (_BYTE *)(v20 & 0xFFFFFFFFFFFFFFFELL);
  v29 = *(_QWORD *)a1;
  v32 = v31;
  v33 = 0;
  v34 = v8;
  v35 = v7;
  return sub_22ED2D6D0(v29, v23, v22, v24, v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t)&v32, v25, (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFFELL), v26, v28);
}

uint64_t sub_22EB9C960(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EBCCCF0(*a1, (int *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return sub_22ED343AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), (unint64_t)v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB9C9B8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  int v12;
  char *v13;
  uint64_t v14;
  int v15;
  char v16;
  __int128 v17;
  void *v18[2];
  __int128 v19;
  void *v20;
  __int128 v21;
  void *v22;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EB98CCC(a1, v4, *(void **)(a2 + 24), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v19 = *(_OWORD *)(a2 + 32);
  v20 = *(void **)(a2 + 48);
  if ((_QWORD)v19)
  {
    sub_22EB9F61C((__n128 *)&v17, a1, (__n128 *)&v19);
    v19 = v17;
    v20 = v18[0];
    if (!(_QWORD)v17)
      return 1;
  }
  v17 = 0u;
  *(_OWORD *)v18 = 0u;
  sub_22E8ACE30((uint64_t)&v17, v7, v8);
  v9 = 1;
  switch(sub_22F3322F4(*a1, 0, (uint64_t)&v17, (uint64_t *)&v19))
  {
    case 0u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_13;
      goto LABEL_11;
    case 1u:
      if (!*(_BYTE *)(a2 + 12))
        goto LABEL_11;
LABEL_13:
      v9 = sub_22E3CD3D4(*(_QWORD *)(*a1 + 88) + 2032, 8, 3);
      v12 = *(_DWORD *)(a2 + 8);
      *(_BYTE *)v9 = 19;
      if (byte_255E04EB3)
      {
        v13 = sub_22F0D3748(19);
        ++*((_DWORD *)v13 + 2);
      }
      *(_WORD *)v9 &= ~0x100u;
      *(_DWORD *)(v9 + 4) = v12;
      break;
    case 2u:
      v11 = 0;
      goto LABEL_17;
    case 3u:
      break;
    default:
LABEL_11:
      v11 = 1;
LABEL_17:
      v14 = sub_22EB9C1C0(a1, *(unsigned int **)(a2 + 56));
      if ((v14 & 1) != 0)
        v9 = 1;
      else
        v9 = v14;
      if ((v11 & 1) == 0 && (v14 & 1) == 0)
      {
        v15 = *(_DWORD *)(a2 + 8);
        v16 = *(_BYTE *)(a2 + 12);
        v21 = v19;
        v22 = v20;
        v9 = sub_22F344AB0(*a1, v15, v16, v7, v8, &v21, v14 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
  }
  if (HIDWORD(v18[1]))
    free(v18[0]);
  return v9;
}

uint64_t sub_22EB9CBA4(uint64_t a1, uint64_t a2)
{
  return sub_22EB93FC4(a1, *(_QWORD *)(a2 + 8), 0);
}

uint64_t sub_22EB9CBB0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9CC1C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9CC88(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9CCF4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9CD60(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9CDD0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9CE3C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9CEA8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9CF14(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9CF80(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9CFEC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D058(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D0C4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D130(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D19C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D208(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D274(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D2E0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D34C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D3B8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D424(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D490(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D4FC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D568(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D5D4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D640(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D6AC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D718(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D784(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D7F0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D85C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D8C8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D934(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9D9A0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DA0C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DA78(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DAE4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DB50(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DBBC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DC28(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DC94(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DD00(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DD6C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DDD8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DE44(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DEB0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DF1C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DF88(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9DFF4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E060(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E0CC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E138(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E1A4(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E210(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E27C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E2E8(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E354(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E3C0(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E42C(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E498(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E504(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E570(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E5DC(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;

  sub_22F33C0DC();
  v4 = sub_22EB9F824(a1, a2);
  sub_22EC81438((_QWORD *)*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  return v4;
}

uint64_t sub_22EB9E648(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 56);
    if ((v5 & 4) != 0)
    {
      v6 = *(uint64_t **)((v5 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v6)
        goto LABEL_6;
    }
    else if (v5 >= 8)
    {
      v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
LABEL_6:
      v7 = sub_22EB4DB90(a1, v6);
      if (!v7)
        return 1;
      v8 = (uint64_t)v7;
      v9 = *v7;
      goto LABEL_10;
    }
    v10 = sub_22EB932F8((uint64_t)a1, *(_QWORD *)(v4 + 48));
    if (v10 < 0x10)
      return 1;
    v9 = v10;
    v8 = 0;
LABEL_10:
    v11 = *(_QWORD *)(v4 + 40);
    if ((v11 & 7) != 0)
      v12 = 0;
    else
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    v4 = sub_22EB001B8(*a1, v8, v9, *(_DWORD *)(v4 + 64), *(_DWORD *)(v4 + 24), v12, 0);
    if (!v4)
      return 1;
  }
  v13 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v13 & 1) == 0)
    return sub_22ED36AF8((uint64_t)*a1, *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v4, v13 & 0xFFFFFFFFFFFFFFFELL);
  return 1;
}

uint64_t sub_22EB9E734(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F344474(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB9E780(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22ED36D40(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((v5 & 1) != 0)
    return 1;
  v6 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v6 & 1) != 0)
    return 1;
  else
    return sub_22F344708((uint64_t)*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB9E804(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EB4D054(a1, v4);
    if ((v5 & 1) != 0)
      return 1;
  }
  else
  {
    v5 = 0;
  }
  return sub_22ED36B94(*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB9E858(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18[9];

  v18[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 16;
  v5 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v5 & 1) != 0)
    return 1;
  v17 = 0;
  v6 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
  v7 = *(unsigned __int16 *)(a2 + 12);
  if (!*(_WORD *)(a2 + 12))
  {
    v12 = 0;
    if ((v6 & 0x10000) != 0)
    {
LABEL_13:
      v13 = *(_QWORD *)(v4 + 8 * ((unsigned __int16)v6 + 1));
      if (v13)
      {
        v14 = sub_22EB93FC4(a1, v13, 0);
        if ((v14 & 1) != 0)
          return 1;
        v12 = v17;
        v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
        return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL, v18, v12, v16);
      }
    }
LABEL_17:
    v16 = 0;
    return sub_22F3444EC(*a1, *(_DWORD *)(a2 + 8), v5 & 0xFFFFFFFFFFFFFFFELL, v18, v12, v16);
  }
  v8 = (_QWORD *)(a2 + 24);
  v9 = 1;
  while (1)
  {
    v10 = sub_22EB93FC4(a1, *v8, 0);
    if ((v10 & 1) != 0)
      return v9;
    v11 = v17;
    if (v17 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v11 = v17;
    }
    v18[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
    v12 = ++v17;
    ++v8;
    if (!--v7)
    {
      v6 = *(unsigned __int16 *)(a2 + 12) | (*(unsigned __int8 *)(a2 + 14) << 16);
      if ((v6 & 0x10000) == 0)
        goto LABEL_17;
      goto LABEL_13;
    }
  }
}

uint64_t sub_22EB9EA0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 16), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F344820(*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22EB9EA58(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = 1;
  v5 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 8), 1);
  if ((v5 & 1) == 0)
  {
    v6 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
    if ((v6 & 1) != 0)
      return 1;
    v7 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 24), 0);
    if ((v7 & 1) != 0)
      return 1;
    v8 = sub_22ED3169C(*a1, *(_DWORD *)(a2 + 32), v5 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)(a2 + 36));
    if ((v8 & 1) != 0)
    {
      return 1;
    }
    else
    {
      v4 = 1;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0 && (v8 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 24) = v7 & 0xFFFFFFFFFFFFFFFELL;
        return v8 & 0xFFFFFFFFFFFFFFFELL;
      }
    }
  }
  return v4;
}

uint64_t sub_22EB9EB0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB935E0(a1, *(unsigned __int8 **)(a2 + 8), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED358AC(*a1, *(_DWORD *)(a2 + 4), v4 & 0xFFFFFFFFFFFFFFFELL, 0);
}

uint64_t sub_22EB9EB5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = sub_22EB9C1C0(a1, *(unsigned int **)(a2 + 24));
  if ((v5 & 1) != 0)
    return 1;
  else
    return sub_22F3448B8((_QWORD *)*a1, *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB9EBC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB9C1C0(a1, *(unsigned int **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22F3F29BC(*(_QWORD *)(*a1 + 88), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB9EC10(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;

  v4 = sub_22EB9C1C0(a1, *(unsigned int **)(a2 + 16));
  if ((v4 & 1) != 0)
    return 1;
  v5 = *(_BYTE **)(a2 + 24);
  if (*v5 == 95)
  {
    v6 = sub_22EB9EBC8(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22EB9EB5C(a1, (uint64_t)v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  return sub_22ED3765C(*a1, *(_BYTE *)(a2 + 8), *(_DWORD *)(a2 + 12), v4 & 0xFFFFFFFFFFFFFFFELL, v6 & 0xFFFFFFFFFFFFFFFELL);
}

unint64_t sub_22EB9EC94(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  int v22[3];
  int v23;
  uint64_t v24;
  int v25;

  v4 = *a1;
  v25 = 4;
  v24 = 0;
  v23 = 3;
  *(_QWORD *)v22 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v25, v22, (__int16 *)(v4 + 1693), &v24, &v23);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  v11 = a2 + 12;
  v12 = sub_22EB4D054(a1, *((_QWORD *)a2 + 3));
  v13 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v12);
  if ((v13 & 1) != 0)
  {
    sub_22EB48E64(v4);
  }
  else
  {
    v14 = *a2;
    if ((v14 & 0x100) != 0)
      v15 = *(_QWORD *)&v11[4 * ((v14 >> 8) & 1)];
    else
      v15 = 0;
    v16 = sub_22EB4D054(a1, v15);
    v17 = sub_22ED2C1F4(*a1, *((unsigned int *)a2 + 1), v16);
    sub_22EB48E64(v4);
    if ((v17 & 1) == 0)
    {
      v18 = (*a2 & 0x100) != 0 ? *((_DWORD *)a2 + 12) : 0;
      v19 = sub_22ED2C48C(*a1, *((_DWORD *)a2 + 1), v13 & 0xFFFFFFFFFFFFFFFELL, v18, v17 & 0xFFFFFFFFFFFFFFFELL, *((_DWORD *)a2 + 2));
      if ((v19 & 1) == 0)
      {
        v20 = sub_22EB93FC4(a1, *(_QWORD *)&v11[4 * (((unint64_t)*a2 >> 8) & 1) + 4], 0);
        if ((v20 & 1) == 0)
        {
          result = v19 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL)
                    + 8 * (((unint64_t)*(unsigned __int16 *)(v19 & 0xFFFFFFFFFFFFFFFELL) >> 8) & 1)
                    + 32) = v20 & 0xFFFFFFFFFFFFFFFELL;
          return result;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_22EB9EEA4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 24), 0);
  if ((v4 & 1) != 0)
    return 1;
  else
    return sub_22ED2C5AC(*a1, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB9EEF4(uint64_t *a1, unsigned __int16 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if ((*a2 & 0x100) != 0)
    v4 = *((_QWORD *)a2 + 3);
  else
    v4 = 0;
  v5 = sub_22EB93FC4(a1, v4, 0);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *a2;
  if ((v6 & 0x200) != 0)
  {
    v8 = (v6 >> 8) & 1;
    v11 = *(_QWORD *)&a2[4 * v8 + 12];
    v7 = v11 ? *(_QWORD *)(v11 + 8) : 0;
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = (v6 >> 8) & 1;
  }
  sub_22EB9F51C((uint64_t)&v12, (uint64_t)a1, *((_DWORD *)a2 + 1), v7, *(_QWORD *)&a2[4 * v8 + 12 + 4 * ((v6 >> 9) & 1)], 2);
  if ((_BYTE)v13)
    return 1;
  v9 = *((_DWORD *)a2 + 1);
  v14 = v12;
  v15 = v13;
  if ((sub_22ED2E0D4(*a1, v9, *((_DWORD *)a2 + 4), v5 & 0xFFFFFFFFFFFFFFFELL, (uint64_t *)&v14, *((_DWORD *)a2 + 5)) & 1) != 0
    || (sub_22EB93FC4(a1, *(_QWORD *)&a2[4 * ((*a2 >> 9) & 1) + 16 + 4 * (HIBYTE(*a2) & 1)], 0) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_22ED2E298();
  }
}

uint64_t sub_22EB9F01C(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int *v4;
  unint64_t v6;
  char **v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  unsigned int v13;
  char *v14[2];

  v4 = a2;
  v14[1] = *(char **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v7 = (char **)(a2 + 4);
  v6 = *a2;
  if (v6 >= 0x100)
  {
    v9 = 0;
    v10 = 8 * (v6 >> 8);
    do
    {
      v11 = *v7;
      if (*v7)
      {
        if (v9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = v13;
        }
        v14[v9] = v11;
        v9 = ++v13;
      }
      ++v7;
      v10 -= 8;
    }
    while (v10);
  }
  v8 = sub_22EB93FC4(a1, *((_QWORD *)v4 + 1), a3);
  if ((v8 & 1) != 0)
    return 1;
  if (*((_QWORD *)v4 + 1) != (v8 & 0xFFFFFFFFFFFFFFFELL))
  {
    if (v13)
      return (uint64_t)sub_22ED2C6AC(*a1, v4[1], v14, v13, v8 & 0xFFFFFFFFFFFFFFFELL);
    return v8;
  }
  return (uint64_t)v4;
}

uint64_t sub_22EB9F174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v5 = sub_22EB93FC4(a1, *(_QWORD *)(a2 + 16), a3);
  if ((v5 & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(a2 + 8);
  v8 = v6;
  v9 = 0;
  if (sub_22E793870((uint64_t *)(a1 + 8), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v6 = *(_QWORD *)(v9 + 8);
  }
  if (!v6)
    return 1;
  if (v6 == *(_QWORD *)(a2 + 8))
    *(_QWORD *)(v6 + 48) = 0;
  return sub_22F343D54(*(_QWORD **)a1, *(_DWORD *)(a2 + 4), v6, 0, v5 & 0xFFFFFFFFFFFFFFFELL);
}

uint64_t sub_22EB9F220(uint64_t *a1, unsigned __int16 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  if ((v4 & 0x100) != 0 && (v10 = *((_QWORD *)a2 + 2)) != 0)
    v5 = *(_QWORD *)(v10 + 8);
  else
    v5 = 0;
  sub_22EB9F51C((uint64_t)&v11, (uint64_t)a1, *((_DWORD *)a2 + 1), v5, *(_QWORD *)&a2[4 * ((v4 >> 8) & 1) + 8], 0);
  if ((_BYTE)v12)
    return 1;
  v6 = sub_22EB93FC4(a1, *(_QWORD *)&a2[4 * (((unint64_t)*a2 >> 8) & 1) + 12], 0);
  if ((v6 & 1) != 0)
    return 1;
  v8 = *((_DWORD *)a2 + 1);
  v9 = *((_DWORD *)a2 + 2);
  v13 = v11;
  v14 = v12;
  return sub_22F343FAC(*a1, v8, v9, (uint64_t)&v13, *((_DWORD *)a2 + 3), (_BYTE *)(v6 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EB9F2E4(uint64_t *a1, unsigned int *a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;
  unsigned int v22;
  _BYTE *v23[9];

  v23[8] = *(_BYTE **)MEMORY[0x24BDAC8D0];
  v6 = *a1;
  sub_22E905168(*a1, 0);
  v7 = a2 + 4;
  v8 = *a2;
  v9 = (uint64_t)&a2[2 * (v8 >> 8) + 4];
  v10 = 2 * (v8 >> 8);
  while (v10 * 4)
  {
    v11 = *(_BYTE **)&a2[v10 + 2];
    v10 -= 2;
    if (*v11 != 19)
    {
      v22 = 0;
      if (v8 < 0x100)
      {
        v12 = 0;
        goto LABEL_27;
      }
      v21 = v6;
      goto LABEL_10;
    }
  }
  if (v8 <= 0xFF)
  {
    v12 = 0;
    goto LABEL_27;
  }
  v11 = (_BYTE *)v7[(*a2 >> 8) - 1];
  v21 = v6;
  v22 = 0;
LABEL_10:
  LOBYTE(v13) = 0;
  do
  {
    while (1)
    {
      v14 = (_BYTE *)*v7;
      v15 = (a3 & (*v7 == (_QWORD)v11)) != 0 ? 2 : 0;
      v16 = sub_22EB93FC4(a1, *v7, v15);
      if ((v16 & 1) == 0)
        break;
      ++v7;
      v13 = 1;
      if (*v14 == 12 || v7 == (_QWORD *)v9)
      {
        v6 = v21;
        goto LABEL_28;
      }
    }
    v17 = v22;
    if (v22 >= 8uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v17 = v22;
    }
    v23[v17] = (_BYTE *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    v12 = ++v22;
    ++v7;
  }
  while (v7 != (_QWORD *)v9);
  v6 = v21;
  if ((v13 & 1) != 0)
  {
    v13 = 1;
    goto LABEL_28;
  }
LABEL_27:
  v13 = (uint64_t)sub_22ED2C004((_QWORD *)*a1, a2[1], a2[2], v23, v12);
LABEL_28:
  v19 = *(_QWORD *)(*(_QWORD *)(v6 + 1896) + 8 * *(unsigned int *)(v6 + 1904) - 8);
  --*(_QWORD *)(v19 + 360);
  return v13;
}

uint64_t sub_22EB9F51C(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = result;
  if (a4)
  {
    v10 = a4;
    v11 = a4;
    v12 = 0;
    result = sub_22E793870((uint64_t *)(a2 + 8), &v11, &v12);
    if (!(_DWORD)result)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    if (v12 == *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 24))
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
    v10 = *(_QWORD *)(v12 + 8);
    if (v10)
      return sub_22F331C88(*(_QWORD *)a2, v10, a3, a6, v9);
  }
  else
  {
    if (!a5)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 15) = 0;
      return result;
    }
    result = sub_22EB4D054(a2, a5);
    if ((result & 1) == 0)
      return sub_22EB530EC(*(_QWORD *)a2, a3, result & 0xFFFFFFFFFFFFFFFELL, a6, 1, v9);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_WORD *)(v9 + 16) = 1;
  *(_BYTE *)(v9 + 18) = 0;
  return result;
}

__n128 sub_22EB9F61C(__n128 *a1, uint64_t *a2, __n128 *a3)
{
  unint64_t v4;
  int v7;
  char v8;
  unsigned int v9;
  int v10;
  __n128 result;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v4 = a3->n128_u64[0];
  if (!a3->n128_u64[0])
    goto LABEL_26;
  v7 = v4 & 7;
  v8 = v4 & 7;
  if (v7 == 7)
  {
    v9 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v9 >= 3)
      LOBYTE(v9) = 3;
    v8 = v9 | 8;
  }
  v10 = 1 << v8;
  if ((v10 & 0xE47) != 0)
  {
    result = *a3;
    *a1 = *a3;
    a1[1].n128_u64[0] = a3[1].n128_u64[0];
    return result;
  }
  if ((v10 & 0x38) == 0)
  {
    if ((~(_BYTE)v4 & 7) != 0)
      goto LABEL_18;
    v18 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 3)
      v18 = 3;
    if (v18)
LABEL_18:
      v19 = 0;
    else
      v19 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    v23 = v19;
    v24 = 0;
    if (sub_22E793870(a2 + 1, &v23, &v24) && v24 != (_QWORD *)(a2[1] + 16 * *((unsigned int *)a2 + 6)))
      v19 = v24[1];
    if (v19)
    {
      *a1 = *a3;
      a1[1].n128_u64[0] = a3[1].n128_u64[0];
      a1->n128_u64[0] = sub_22F3AE65C((_QWORD *)(*(_QWORD *)(*a2 + 88) + 15224), v19);
      return result;
    }
    goto LABEL_26;
  }
  if ((v7 - 3) > 2)
  {
    v17 = 0;
    goto LABEL_25;
  }
  v12 = (uint64_t *)a3[1].n128_u64[0];
  if (!v12)
  {
    v17 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_25:
    v20 = sub_22EB932F8((uint64_t)a2, v17);
    if (v20 > 0xF)
    {
      v15 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFF0) + 8) | v20 & 7;
      v16 = *(_QWORD *)(*a2 + 88);
      if (v7 == 7)
      {
        v14 = 0;
        v21 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
        if (v21 >= 3)
          v21 = 3;
        v7 = v21 | 8;
      }
      else
      {
        v14 = 0;
      }
      goto LABEL_32;
    }
LABEL_26:
    a1->n128_u64[0] = 0;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    return result;
  }
  v13 = sub_22EB4DB90((_QWORD **)a2, v12);
  if (!v13)
    goto LABEL_26;
  v14 = v13;
  v15 = *v13 & 7 | *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFFF0) + 8);
  v16 = *(_QWORD *)(*a2 + 88);
LABEL_32:
  v22 = sub_22EFC6D44((_QWORD *)(v16 + 15224), v7, v15);
  result = *a3;
  *a1 = *a3;
  a1->n128_u64[0] = v22;
  a1[1].n128_u64[0] = (unint64_t)v14;
  return result;
}

uint64_t sub_22EB9F824(uint64_t *a1, __n128 *a2)
{
  _DWORD *v4;
  uint64_t v5;
  __n128 **v6;
  unsigned int v7;
  uint64_t v8;
  __n128 *v9;
  _QWORD *v10;
  unsigned __int32 v11;
  unsigned __int32 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  unsigned __int32 v23;
  uint64_t v24;
  __n128 v26;
  unint64_t v27;
  __n128 v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[18];

  v32[16] = *MEMORY[0x24BDAC8D0];
  v30 = v32;
  v31 = 0x1000000000;
  v4 = (_DWORD *)a2[1].n128_u64[1];
  if (!v4)
  {
    v5 = 0;
    goto LABEL_87;
  }
  v7 = *v4;
  v6 = (__n128 **)(v4 + 4);
  v5 = v7;
  if (v7 < 0x11)
  {
    if (!(_DWORD)v5)
      goto LABEL_79;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v8 = 8 * v5;
  do
  {
    v9 = *v6;
    if (*v6)
    {
      v10 = (_QWORD *)*a1;
      v11 = v9->n128_u32[2];
      v12 = (unsigned __int32 *)(*(_QWORD *)(*a1 + 12288) + 21440);
      *v12 = v11;
      switch(v11)
      {
        case 3u:
          v13 = sub_22EB9FF80(a1, v9);
          goto LABEL_73;
        case 4u:
          v13 = sub_22EBA0104((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 5u:
          v13 = (uint64_t)sub_22EBA0150(a1, (unsigned int *)v9);
          goto LABEL_73;
        case 6u:
          v13 = sub_22EBA02C8((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 7u:
          v13 = sub_22EBA044C((uint64_t **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xAu:
          v13 = (uint64_t)sub_22EB7BC58(v10, (int *)v9);
          goto LABEL_73;
        case 0xCu:
          v13 = sub_22EBA0498((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0xEu:
          v13 = (uint64_t)sub_22EBA04E4((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0xFu:
          v13 = (uint64_t)sub_22EBA0630((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x10u:
          sub_22EB7BF50((uint64_t)v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x11u:
          v13 = (uint64_t)sub_22EB7BF64(v10, (uint64_t)v9);
          goto LABEL_73;
        case 0x12u:
          v13 = (uint64_t)sub_22EBA077C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x13u:
          v13 = sub_22EBA0910((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x14u:
          v13 = sub_22EBA095C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x15u:
          v13 = sub_22EBA09B4(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x16u:
          v13 = sub_22EBA0A0C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x18u:
          v13 = sub_22EBA0A5C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Au:
          v13 = (uint64_t)sub_22EBA0AAC((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Bu:
          v13 = sub_22EBA0BF8((uint64_t)a1, (uint64_t *)v9);
          goto LABEL_73;
        case 0x1Cu:
          v13 = sub_22EBA0C7C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Du:
          v13 = sub_22EBA0CC8((uint64_t)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x1Eu:
          v13 = (uint64_t)sub_22EBA0E14((uint64_t)a1, (int *)v9);
          goto LABEL_73;
        case 0x1Fu:
          v13 = (uint64_t)sub_22EBA0F68(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x20u:
          v13 = (uint64_t)sub_22EBA13E4(v10[11], v9->n128_u32[0], v9->n128_i32[1]);
          goto LABEL_73;
        case 0x21u:
          v13 = sub_22EBA13F0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x22u:
          v13 = (uint64_t)sub_22EBA143C((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x23u:
          v13 = sub_22EBA1594((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x24u:
          v13 = sub_22EBA15E0(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x25u:
          v13 = sub_22EBA1634(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x27u:
          v13 = (uint64_t)sub_22EBA1A70((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x29u:
          v13 = sub_22EBA1BBC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x2Au:
          v13 = (uint64_t)sub_22EBA1D50((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Bu:
          v13 = sub_22EBA1EA8((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x2Cu:
          v13 = sub_22EBA2000((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x2Eu:
          v13 = (uint64_t)sub_22EBA2190(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x34u:
          v13 = sub_22EBA2668(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x35u:
          v13 = (uint64_t)sub_22EBA26B4((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x37u:
          v13 = sub_22EBA2800(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x38u:
          v13 = sub_22EBA284C((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x39u:
          v13 = sub_22EBA2898((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Au:
          v13 = sub_22EBA28E4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Bu:
          v13 = (uint64_t)sub_22EB7E124(v10, (int *)v9);
          goto LABEL_73;
        case 0x3Cu:
          v13 = sub_22EBA2930((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Du:
          v13 = sub_22EBA2988((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Eu:
          v13 = sub_22EBA29D4((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x3Fu:
          v13 = (uint64_t)sub_22EBA2A20((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x40u:
          v13 = (uint64_t)sub_22EB7E384(v10, (int *)v9);
          goto LABEL_73;
        case 0x42u:
          v13 = sub_22EBA2B6C(a1, v9);
          goto LABEL_73;
        case 0x46u:
          v13 = sub_22EBA2FB0((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x47u:
          v13 = sub_22EBA2FFC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x49u:
          v13 = (uint64_t)sub_22EBA3060((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x4Bu:
          v13 = sub_22EBA31AC((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Cu:
          v13 = (uint64_t)sub_22EBA31F8((_QWORD **)a1, (int *)v9);
          goto LABEL_73;
        case 0x4Du:
          v13 = sub_22EBA335C(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x4Eu:
          v13 = sub_22EBA3798((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x51u:
          v13 = (uint64_t)sub_22EBA37E4(a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x58u:
          v13 = sub_22EBA3C60((_QWORD **)a1, (uint64_t)v9);
          goto LABEL_73;
        case 0x59u:
          v13 = (uint64_t)sub_22EBA3CAC((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Au:
          v13 = (uint64_t)sub_22EBA3E04((_QWORD **)a1, v9);
          goto LABEL_73;
        case 0x5Bu:
          v13 = (uint64_t)sub_22EBA3F5C(a1, (int *)v9);
LABEL_73:
          v9 = (__n128 *)v13;
          v15 = *a1;
          *(_DWORD *)(*(_QWORD *)(*a1 + 12288) + 21440) = 85;
          sub_22EB4E2D8(v15);
          if (v9)
            goto LABEL_74;
          goto LABEL_78;
        default:
          *v12 = 85;
          sub_22EB4E2D8(v10);
LABEL_74:
          v16 = v31;
          if (v31 >= (unint64_t)HIDWORD(v31))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v16 = v31;
          }
          *((_QWORD *)v30 + v16) = v9;
          break;
      }
    }
    else
    {
      v14 = v31;
      if (v31 >= (unint64_t)HIDWORD(v31))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v14 = v31;
      }
      *((_QWORD *)v30 + v14) = 0;
    }
    LODWORD(v31) = v31 + 1;
LABEL_78:
    ++v6;
    v8 -= 8;
  }
  while (v8);
LABEL_79:
  v17 = (unsigned int *)a2[1].n128_u64[1];
  if (v17 && *((_BYTE *)v17 + 8) && *(_QWORD *)&v17[2 * *v17 + 4 + 2 * v17[1]])
  {
    sub_22EC84DA0(*a1, a2->n128_i32[2]);
    v18 = *a1;
    sub_22E905168(*a1, 0);
    v19 = a2->n128_u32[2];
    if (v19 <= 0x34 && ((1 << v19) & 0x10000800000204) != 0)
    {
      i = *(_QWORD *)(a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)a2[1].n128_u64[1]
                    + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                    + 16);
    }
    else
    {
      for (i = *(_QWORD *)(a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)a2[1].n128_u64[1]
                          + 8 * *(unsigned int *)(a2[1].n128_u64[1] + 4)
                          + 16); *(_BYTE *)i == 7; i = *(_QWORD *)(i + 8 * *(unsigned int *)(i + 8) + 32))
        ;
    }
    v21 = sub_22EB93FC4(a1, i, 0);
    if (v21 >= 2
      && sub_22F4219DC(a2->n128_u32[2])
      && (*(_BYTE *)(*(_QWORD *)(*a1 + 72) + 76) & 0x20) != 0)
    {
      v21 = sub_22EC86C20(*a1, (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL));
    }
    v22 = *(_QWORD *)(*(_QWORD *)(v18 + 1896) + 8 * *(unsigned int *)(v18 + 1904) - 8);
    --*(_QWORD *)(v22 + 360);
    if ((sub_22EC8617C((_QWORD *)*a1, v21, (uint64_t *)v30, v31) & 1) != 0)
      goto LABEL_91;
  }
LABEL_87:
  if (v5 != v31)
  {
LABEL_91:
    v24 = 1;
    goto LABEL_92;
  }
  v28.n128_u64[0] = 0;
  v28.n128_u32[2] = 0;
  v29 = 0;
  v23 = a2->n128_u32[2];
  if (v23 == 9)
  {
    v28 = a2[2];
    v29 = a2[3].n128_u64[0];
    sub_22EB9F61C(&v26, a1, &v28);
    v28 = v26;
    v29 = v27;
  }
  v24 = sub_22EC87DEC();
LABEL_92:
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t sub_22EB9FF80(uint64_t *a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16[5];

  v16[4] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  v5 = a2 + 6;
  v6 = *(_QWORD *)&a2[2 * v4 + 6];
  if (!v6)
  {
    v9 = 0;
    v8 = v4;
    if (!v4)
      return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
LABEL_8:
    v10 = 8 * v8;
    do
    {
      v11 = sub_22EB4D054(a1, *v5);
      if ((v11 & 1) == 0)
      {
        v12 = v15;
        if (v15 >= 4uLL)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v12 = v15;
        }
        v16[v12] = v11 & 0xFFFFFFFFFFFFFFFELL;
        ++v15;
      }
      ++v5;
      v10 -= 8;
    }
    while (v10);
    return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
  }
  v7 = sub_22EB4D054(a1, v6);
  if ((v7 & 1) != 0)
    return 0;
  v8 = a2[4];
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (a2[4])
    goto LABEL_8;
  return sub_22ECAA508(*a1, *a2, a2[3], a2[5], a2[1], v9, v16, v15);
}

uint64_t sub_22EBA0104(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E518(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBA0150(uint64_t *a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 6;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EB4D054(a1, *(_QWORD *)&a2[2 * v9 + 6]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA5100(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[5], a2[1]);
}

uint64_t sub_22EBA02C8(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  unsigned __int8 *v16[17];

  v16[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EB4D054(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v6 = 0;
  }
  v15 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(_DWORD *)(a2 + 16);
  }
  if (v7)
  {
    v8 = (_QWORD *)(a2 + 40);
    v9 = 8 * v7;
    while (1)
    {
      v10 = sub_22EB4D054(a1, *v8);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
      v12 = ++v15;
      ++v8;
      v9 -= 8;
      if (!v9)
        return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  else
  {
    v12 = 0;
    return sub_22ECA9A04(*a1, v6, v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 4));
  }
}

uint64_t sub_22EBA044C(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E2DC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA0498(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E39C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBA04E4(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA5E4C(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

_DWORD *sub_22EBA0630(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  uint64_t v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA56B0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

unsigned __int8 *sub_22EBA077C(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v4 = (_QWORD *)(a2 + 40);
  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 40 + 8 * v5);
  if (v6)
  {
    v7 = sub_22EB4D054(a1, v6);
    if ((v7 & 1) != 0)
      return 0;
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v8 = 0;
  }
  if (v5 > 0x10)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
  }
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    while (1)
    {
      v10 = sub_22EB4D054(a1, *v4);
      if ((v10 & 1) != 0)
        break;
      v11 = v15;
      if (v15 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v11 = v15;
      }
      v16[v11] = v10 & 0xFFFFFFFFFFFFFFFELL;
      v12 = ++v15;
      ++v4;
      v9 -= 8;
      if (!v9)
        return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
  v12 = 0;
  return sub_22ECA67B4(*a1, v8, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 24), *(_DWORD *)(a2 + 28), v16, v12, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), 0, *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA0910(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F6E0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA095C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v5 = sub_22EB4D054(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22F33EAFC(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA09B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EB4D054(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F86C(*a1, (unsigned __int8 *)(v5 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA0A0C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 40));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1F20(*a1, *(_DWORD *)(a2 + 32), (void *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA0A5C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 48));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA18BC(*a1, *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBA0AAC(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA2D4(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EBA0BF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;

  v4 = sub_22EB4D054(a1, a2[4]);
  if ((v4 & 1) != 0)
    return 0;
  v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  v6 = *((_DWORD *)a2 + 7);
  v7 = *a2;
  result = sub_22E3CD3D4(*(_QWORD *)(*(_QWORD *)a1 + 88) + 2032, 40, 3);
  *(_QWORD *)result = v7;
  *(_DWORD *)(result + 8) = 27;
  *(_QWORD *)(result + 32) = v5;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 89;
  *(_DWORD *)(result + 28) = v6;
  return result;
}

uint64_t sub_22EBA0C7C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EE2C(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA0CC8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(a2 + 16);
  }
  if (!v4)
    return sub_22EC92F80();
  v5 = (_QWORD *)(a2 + 40);
  v6 = 8 * v4;
  while (1)
  {
    v7 = sub_22EB4D054(a1, *v5);
    if ((v7 & 1) != 0)
      break;
    v8 = v11;
    if (v11 >= 0x10uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = v11;
    }
    v12[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
    ++v11;
    ++v5;
    v6 -= 8;
    if (!v6)
      return sub_22EC92F80();
  }
  return 0;
}

_DWORD *sub_22EBA0E14(uint64_t a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
  }
  v9 = 0;
LABEL_11:
  if (!v9)
    return 0;
  return sub_22F3EB9D4(*(_QWORD *)(*(_QWORD *)a1 + 88), *a2, a2[3], a2[1], v13, v9);
}

_DWORD *sub_22EBA0F68(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EB4D054(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EB98CCC(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EB9F61C(&v51, a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7F24((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

_DWORD *sub_22EBA13E4(uint64_t a1, int a2, int a3)
{
  return sub_22ECCBA58(a1, a2, a3);
}

uint64_t sub_22EBA13F0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F560(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EBA143C(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA94BC(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EBA1594(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E41C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA15E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FE98(*a1, *(_DWORD *)(a2 + 44), (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 48), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA1634(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  _DWORD **v14;
  _DWORD **v15;
  _DWORD *v16;
  int v17;
  BOOL v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __int128 v35;
  size_t __n[2];
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  void *v42[2];
  _QWORD v43[16];
  unsigned __int8 **v44;
  uint64_t v45;
  _QWORD v46[18];

  v2 = a2;
  v46[16] = *MEMORY[0x24BDAC8D0];
  v44 = (unsigned __int8 **)v46;
  v45 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v45;
      }
      v44[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      LODWORD(v45) = v45 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v35 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v35, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v33 = *(__n128 *)(v2 + 72);
    v34 = *(_QWORD *)(v2 + 88);
    if (!v33.n128_u64[0] || (sub_22EB9F61C((__n128 *)v42, a1, &v33), v33 = *(__n128 *)v42, v34 = v43[0], v42[0]))
    {
      v42[0] = v43;
      v42[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v32 = v2;
        v14 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v15 = &v14[v11];
        do
        {
          v16 = *v14;
          if (*v14)
          {
            v39 = v41;
            v40 = 0x800000000;
            v17 = *(unsigned __int8 *)v16;
            v18 = v17 == 211;
            if (v17 == 211)
              v19 = v16;
            else
              v19 = 0;
            v20 = v19 + 16;
            if (v18)
              v21 = v20;
            else
              v21 = v16 + 20;
            v22 = v16[1];
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              do
              {
                v24 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
                v37 = v24;
                v38 = 0;
                if (sub_22E793870(a1 + 1, &v37, &v38) && v38 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v24 = *(_QWORD *)(v38 + 8);
                v25 = *(unsigned int *)(v24 + 28);
                v22 = v40;
                if (v40 >= (unint64_t)HIDWORD(v40))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v22 = v40;
                }
                *((_QWORD *)v39 + v22) = (v25 >> 13) & 3 | v24;
                LODWORD(v22) = v40 + 1;
                LODWORD(v40) = v40 + 1;
                ++v21;
                v23 -= 8;
              }
              while (v23);
            }
            v26 = *(_QWORD *)(*a1 + 88);
            v27 = *((_QWORD *)&v35 + 1);
            if (*((_QWORD *)&v35 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v28 = (void *)sub_22E3CD3D4(v26 + 2032, LODWORD(__n[1]), 3);
                memcpy(v28, (const void *)__n[0], LODWORD(__n[1]));
                v27 = *((_QWORD *)&v35 + 1);
                LODWORD(v22) = v40;
              }
              else
              {
                v28 = (void *)__n[0];
              }
            }
            else
            {
              v28 = 0;
            }
            v30 = sub_22F0605AC(v26, 0, v27, (uint64_t)v28, (uint64_t)&v33, 1, (*v16 >> 20) & 1, v39, (uint64_t)v39 + 8 * v22);
            v31 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v31 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v31) = v30;
            ++LODWORD(v42[1]);
            if (v39 != v41)
              free(v39);
          }
          else
          {
            v29 = LODWORD(v42[1]);
            if (LODWORD(v42[1]) >= (unint64_t)HIDWORD(v42[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v42[1]);
            }
            *((_QWORD *)v42[0] + v29) = 0;
            ++LODWORD(v42[1]);
          }
          ++v14;
        }
        while (v14 != v15);
        v13 = (unsigned __int8 **)v42[0];
        v12 = LODWORD(v42[1]);
        v2 = v32;
      }
      else
      {
        v12 = 0;
        v13 = (unsigned __int8 **)v43;
      }
      v9 = sub_22F33F420(*a1, v44, v45, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v35, (uint64_t)&v33, v13, v12);
      if (v42[0] != v43)
        free(v42[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v44 != v46)
    free(v44);
  return v9;
}

_DWORD *sub_22EBA1A70(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECAA0AC(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EBA1BBC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v14;
  uint64_t v15[9];

  v15[8] = *MEMORY[0x24BDAC8D0];
  v4 = a2 + 32;
  v5 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v5 & 1) != 0)
    return 0;
  v14 = 0;
  v6 = *(_DWORD *)(a2 + 16);
  if (v6 - 1 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(_DWORD *)(a2 + 16);
  }
  v7 = (_QWORD *)(a2 + 40);
  if (a2 + 40 == v4 + 8 * v6)
  {
    v11 = 0;
    return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
  }
  else
  {
    v8 = 8 * v6 - 8;
    while (1)
    {
      v9 = sub_22EB4D054(a1, *v7);
      if ((v9 & 1) != 0)
        break;
      v10 = v14;
      if (v14 >= 8uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v14;
      }
      v15[v10] = v9 & 0xFFFFFFFFFFFFFFFELL;
      v11 = ++v14;
      ++v7;
      v8 -= 8;
      if (!v8)
        return sub_22F33EB88(*a1, v5 & 0xFFFFFFFFFFFFFFFELL, v15, v11, *(_BYTE *)(a2 + 24), *(_BYTE *)(a2 + 25), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 20), 0, *(_DWORD *)(a2 + 4));
    }
    return 0;
  }
}

unsigned int *sub_22EBA1D50(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8EC4(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t sub_22EBA1EA8(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 16;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2F18(*a1, v13, v9, a2[12], a2[13], a2[14], *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EBA2000(_QWORD **a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v13;
  unsigned __int8 *v14[17];

  v14[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v13 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = a2 + 16;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v6);
      if ((v7 & 1) != 0)
        return 0;
      v8 = v13;
      if (v13 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v13;
      }
      v14[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      ++v13;
      ++v6;
      v5 -= 8;
      if (!v5)
      {
        v9 = a2[4];
        goto LABEL_11;
      }
    }
  }
  v9 = 0;
LABEL_11:
  v10 = sub_22EB4D054(a1, *(_QWORD *)&a2[2 * v9 + 16 + 2 * v9 + 2 * v9 + 2 * v9 + 2 * v9]);
  if ((v10 & 1) != 0)
    return 0;
  return sub_22ECA44D0(*a1, v14, v13, (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFFELL), *a2, a2[3], a2[12], a2[13], a2[14], 0, a2[1]);
}

_DWORD *sub_22EBA2190(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  int v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42[2];
  int v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  size_t __n[2];
  int v48[3];
  unint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[128];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  __int128 v57;
  _QWORD v58[10];

  v58[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v48[0] = *(_DWORD *)a2;
  v48[1] = v6;
  v48[2] = v4;
  v54 = v56;
  v55 = 0x1000000000;
  v46 = 0u;
  *(_OWORD *)__n = 0u;
  *(_QWORD *)&v44 = 0;
  DWORD2(v44) = 0;
  v51 = v53;
  v52 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 136);
    do
    {
      v9 = sub_22EB4D054(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v55;
      if (v55 >= (unint64_t)HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v55;
      }
      *((_QWORD *)v54 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v55) = v55 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EB98CCC(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_49;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v46, v14, v15);
  v44 = *(_OWORD *)(a2 + 56);
  v45 = *(_QWORD *)(a2 + 72);
  if ((_QWORD)v44)
  {
    sub_22EB9F61C((__n128 *)&v57, a1, (__n128 *)&v44);
    v44 = v57;
    v45 = v58[0];
    if (!(_QWORD)v57)
      goto LABEL_46;
  }
  v38 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 136 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        *(_QWORD *)&v57 = v58;
        *((_QWORD *)&v57 + 1) = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v49 = v27;
            v50 = 0;
            if (sub_22E793870(a1 + 1, &v49, &v50)
              && v50 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v50[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = DWORD2(v57);
            if (DWORD2(v57) >= (unint64_t)HIDWORD(v57))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = DWORD2(v57);
            }
            *(_QWORD *)(v57 + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++DWORD2(v57);
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v46 + 1);
        if (*((_QWORD *)&v46 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v46 + 1);
            LODWORD(v25) = DWORD2(v57);
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v44, 1, (*v19 >> 20) & 1, (const void *)v57, v57 + 8 * v25);
        v34 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v52;
        }
        *((_QWORD *)v51 + v34) = v33;
        LODWORD(v52) = v52 + 1;
        if ((_QWORD *)v57 != v58)
          free((void *)v57);
      }
      else
      {
        v32 = v52;
        if (v52 >= (unint64_t)HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v52;
        }
        *((_QWORD *)v51 + v32) = 0;
        LODWORD(v52) = v52 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v41 = v46;
  sub_22F0AB560(v42, (uint64_t)&v46 + 8);
  v39 = v44;
  v40 = v45;
  v35 = sub_22EC94100((_QWORD *)*a1, v38 + 80, 5u, v38 + 100, 5, (uint64_t)&v41, &v39, *(_DWORD *)(v38 + 120), *(_BYTE *)(v38 + 124), v37, *(_DWORD *)(v38 + 128), *(unsigned int *)(v38 + 132), (uint64_t)v54, v55, v48, 0, (unsigned __int8 **)v51, v52);
  if (v43)
    free(v42[1]);
LABEL_49:
  if (v51 != v53)
    free(v51);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v54 != v56)
    free(v54);
  return v35;
}

uint64_t sub_22EBA2668(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FCD4(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBA26B4(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA9DF0(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EBA2800(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9FB70(*a1, (unsigned __int8 *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA284C(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F620(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA2898(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F1E8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA28E4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9EFAC(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA2930(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = sub_22EB4D054(a1, v4);
    if ((v5 & 1) != 0)
      return 0;
  }
  else
  {
    v5 = 0;
  }
  return sub_22EC9F118(*a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(_DWORD *)(a2 + 12), (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL));
}

uint64_t sub_22EBA2988(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E49C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA29D4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F4A0(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBA2A20(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA2624(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EBA2B6C(uint64_t *a1, __n128 *a2)
{
  __n128 *v2;
  unsigned int v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  _DWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = a2[1].n128_u32[0];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = v2[1].n128_u32[0];
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = &v2[6].n128_u64[1];
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v28 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, v2[4].n128_u64[0], v2[4].n128_i64[1]);
    v31 = v2[5];
    v32 = v2[6].n128_u64[0];
    if (v31.n128_u64[0] && (sub_22EB9F61C((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], !v40[0]))
    {
      v28 = 0;
    }
    else
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v9 = v2[1].n128_u32[0];
      if ((_DWORD)v9)
      {
        v30 = v2;
        v10 = &v2[6].n128_u64[v9 + 1 + v9 + v9 + v9];
        v11 = &v10[v9];
        do
        {
          v12 = (_DWORD *)*v10;
          if (*v10)
          {
            v37 = v39;
            v38 = 0x800000000;
            v13 = *(unsigned __int8 *)v12;
            v14 = v13 == 211;
            if (v13 == 211)
              v15 = v12;
            else
              v15 = 0;
            v16 = v15 + 16;
            if (v14)
              v17 = v16;
            else
              v17 = v12 + 20;
            v18 = v12[1];
            if ((_DWORD)v18)
            {
              v19 = 8 * v18;
              do
              {
                v20 = *v17 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v20;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v20 = *(_QWORD *)(v36 + 8);
                v21 = *(unsigned int *)(v20 + 28);
                v18 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v18 = v38;
                }
                *((_QWORD *)v37 + v18) = (v21 >> 13) & 3 | v20;
                LODWORD(v18) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v17;
                v19 -= 8;
              }
              while (v19);
            }
            v22 = *(_QWORD *)(*a1 + 88);
            v23 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v24 = (void *)sub_22E3CD3D4(v22 + 2032, LODWORD(__n[1]), 3);
                memcpy(v24, (const void *)__n[0], LODWORD(__n[1]));
                v23 = *((_QWORD *)&v33 + 1);
                LODWORD(v18) = v38;
              }
              else
              {
                v24 = (void *)__n[0];
              }
            }
            else
            {
              v24 = 0;
            }
            v26 = sub_22F0605AC(v22, 0, v23, (uint64_t)v24, (uint64_t)&v31, 1, (*v12 >> 20) & 1, v37, (uint64_t)v37 + 8 * v18);
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = v26;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v25 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v25) = 0;
            ++LODWORD(v40[1]);
          }
          ++v10;
        }
        while (v10 != v11);
        v2 = v30;
      }
      v28 = sub_22ECA41D4((_QWORD *)*a1, (uint64_t)v42, v43, v2[3].n128_i32[0], v2->n128_u32[0], v2->n128_i32[3], v2[3].n128_i32[1], v2[3].n128_i32[2], v2->n128_i32[1], (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v28;
}

uint64_t sub_22EBA2FB0(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E1DC(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

uint64_t sub_22EBA2FFC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 64));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22ECA1458(*a1, *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 40), *(_DWORD *)(a2 + 32), (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), 0, *(_DWORD *)(a2 + 52), 0, *(_DWORD *)(a2 + 56), 0, *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBA3060(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v12;
  unsigned __int8 *v13[17];

  v13[16] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v12 = 0;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v12;
      if (v12 >= 0x10uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v12;
      }
      v13[v8] = (unsigned __int8 *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      v9 = ++v12;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
    }
    return 0;
  }
  else
  {
    v9 = 0;
    return sub_22ECA3D84(*a1, v13, v9, *a2, a2[3], a2[1]);
  }
}

uint64_t sub_22EBA31AC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 16));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33E25C(*a1, (_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL), *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBA31F8(_QWORD **a1, int *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v14;
  _DWORD *v15[5];

  v15[4] = *(_DWORD **)MEMORY[0x24BDAC8D0];
  v14 = 0;
  v4 = a2[4];
  if (v4 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 6;
    v6 = 8 * v4;
    while (1)
    {
      if (*v5)
      {
        v7 = sub_22EB4D054(a1, *v5);
        if ((v7 & 1) != 0)
          return 0;
        v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
        v9 = v14;
        v10 = (_DWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        v8 = 0;
        v10 = 0;
        v9 = v14;
      }
      if (v9 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v9 = v14;
        v10 = (_DWORD *)v8;
      }
      v15[v9] = v10;
      v11 = ++v14;
      ++v5;
      v6 -= 8;
      if (!v6)
        return sub_22ECA137C(*a1, v15, v11, *a2, a2[3], a2[1]);
    }
  }
  v11 = 0;
  return sub_22ECA137C(*a1, v15, v11, *a2, a2[3], a2[1]);
}

uint64_t sub_22EBA335C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  int v15;
  BOOL v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __int128 v33;
  size_t __n[2];
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  void *v40[2];
  _QWORD v41[16];
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[18];

  v2 = a2;
  v44[16] = *MEMORY[0x24BDAC8D0];
  v42 = v44;
  v43 = 0x1000000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_DWORD *)(v2 + 16);
  }
  if (v4)
  {
    v5 = 8 * v4;
    v6 = (_QWORD *)(v2 + 96);
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v43;
      if (v43 >= (unint64_t)HIDWORD(v43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v43;
      }
      v42[v8] = v7 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v43) = v43 + 1;
      ++v6;
      v5 -= 8;
      if (!v5)
        goto LABEL_9;
    }
    v9 = 0;
  }
  else
  {
LABEL_9:
    v33 = 0u;
    *(_OWORD *)__n = 0u;
    sub_22E8ACE30((uint64_t)&v33, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
    v31 = *(__n128 *)(v2 + 72);
    v32 = *(_QWORD *)(v2 + 88);
    if (!v31.n128_u64[0] || (sub_22EB9F61C((__n128 *)v40, a1, &v31), v31 = *(__n128 *)v40, v32 = v41[0], v40[0]))
    {
      v40[0] = v41;
      v40[1] = (void *)0x1000000000;
      v11 = *(unsigned int *)(v2 + 16);
      if ((_DWORD)v11)
      {
        v30 = v2;
        v12 = (_DWORD **)(v2 + 96 + 8 * v11 + 8 * v11 + 8 * v11 + 8 * v11);
        v13 = &v12[v11];
        do
        {
          v14 = *v12;
          if (*v12)
          {
            v37 = v39;
            v38 = 0x800000000;
            v15 = *(unsigned __int8 *)v14;
            v16 = v15 == 211;
            if (v15 == 211)
              v17 = v14;
            else
              v17 = 0;
            v18 = v17 + 16;
            if (v16)
              v19 = v18;
            else
              v19 = v14 + 20;
            v20 = v14[1];
            if ((_DWORD)v20)
            {
              v21 = 8 * v20;
              do
              {
                v22 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
                v35 = v22;
                v36 = 0;
                if (sub_22E793870(a1 + 1, &v35, &v36) && v36 != a1[1] + 16 * *((unsigned int *)a1 + 6))
                  v22 = *(_QWORD *)(v36 + 8);
                v23 = *(unsigned int *)(v22 + 28);
                v20 = v38;
                if (v38 >= (unint64_t)HIDWORD(v38))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v20 = v38;
                }
                *((_QWORD *)v37 + v20) = (v23 >> 13) & 3 | v22;
                LODWORD(v20) = v38 + 1;
                LODWORD(v38) = v38 + 1;
                ++v19;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = *(_QWORD *)(*a1 + 88);
            v25 = *((_QWORD *)&v33 + 1);
            if (*((_QWORD *)&v33 + 1))
            {
              if (HIDWORD(__n[1]))
              {
                v26 = (void *)sub_22E3CD3D4(v24 + 2032, LODWORD(__n[1]), 3);
                memcpy(v26, (const void *)__n[0], LODWORD(__n[1]));
                v25 = *((_QWORD *)&v33 + 1);
                LODWORD(v20) = v38;
              }
              else
              {
                v26 = (void *)__n[0];
              }
            }
            else
            {
              v26 = 0;
            }
            v28 = sub_22F0605AC(v24, 0, v25, (uint64_t)v26, (uint64_t)&v31, 1, (*v14 >> 20) & 1, v37, (uint64_t)v37 + 8 * v20);
            v29 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v29) = v28;
            ++LODWORD(v40[1]);
            if (v37 != v39)
              free(v37);
          }
          else
          {
            v27 = LODWORD(v40[1]);
            if (LODWORD(v40[1]) >= (unint64_t)HIDWORD(v40[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v27 = LODWORD(v40[1]);
            }
            *((_QWORD *)v40[0] + v27) = 0;
            ++LODWORD(v40[1]);
          }
          ++v12;
        }
        while (v12 != v13);
        v2 = v30;
      }
      v9 = sub_22F33F264(*a1, (uint64_t)v42, v43, *(_DWORD *)v2, *(_DWORD *)(v2 + 12), *(_DWORD *)(v2 + 48), *(_DWORD *)(v2 + 4), (uint64_t)&v33, (uint64_t)&v31);
      if (v40[0] != v41)
        free(v40[0]);
    }
    else
    {
      v9 = 0;
    }
    if (HIDWORD(__n[1]))
      free((void *)__n[0]);
  }
  if (v42 != v44)
    free(v42);
  return v9;
}

uint64_t sub_22EBA3798(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 32));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22EC9F344(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 4));
}

_DWORD *sub_22EBA37E4(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD **v17;
  _DWORD **v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  _DWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __int128 v40;
  size_t __n[2];
  int v42[3];
  unint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48;
  uint64_t v49;
  _BYTE v50[128];
  __n128 v51;
  _QWORD v52[10];

  v52[8] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a2 + 4);
  v6 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  v42[0] = *(_DWORD *)a2;
  v42[1] = v6;
  v42[2] = v4;
  v48 = v50;
  v49 = 0x1000000000;
  v40 = 0u;
  *(_OWORD *)__n = 0u;
  v38.n128_u64[0] = 0;
  v38.n128_u32[2] = 0;
  v39 = 0;
  v45 = v47;
  v46 = 0x1000000000;
  if (v5 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_DWORD *)(a2 + 16);
  }
  if (v5)
  {
    v7 = 8 * v5;
    v8 = (_QWORD *)(a2 + 104);
    do
    {
      v9 = sub_22EB4D054(a1, *v8);
      if ((v9 & 1) != 0)
        goto LABEL_46;
      v10 = v49;
      if (v49 >= (unint64_t)HIDWORD(v49))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v10 = v49;
      }
      *((_QWORD *)v48 + v10) = v9 & 0xFFFFFFFFFFFFFFFELL;
      LODWORD(v49) = v49 + 1;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  v11 = *(_QWORD *)(a2 + 40);
  if (v11)
  {
    v12 = sub_22EB98CCC(a1, v11, *(void **)(a2 + 48), 0, 0);
    if (!v12)
    {
LABEL_46:
      v35 = 0;
      goto LABEL_48;
    }
    v14 = v12;
    v15 = v13;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  sub_22E8ACE30((uint64_t)&v40, v14, v15);
  v38 = *(__n128 *)(a2 + 56);
  v39 = *(_QWORD *)(a2 + 72);
  if (v38.n128_u64[0])
  {
    sub_22EB9F61C(&v51, a1, &v38);
    v38 = v51;
    v39 = v52[0];
    if (!v51.n128_u64[0])
      goto LABEL_46;
  }
  v37 = a2;
  v16 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD **)(a2 + 104 + 8 * v16);
    v18 = &v17[v16];
    do
    {
      v19 = *v17;
      if (*v17)
      {
        v51.n128_u64[0] = (unint64_t)v52;
        v51.n128_u64[1] = 0x800000000;
        v20 = *(unsigned __int8 *)v19;
        v21 = v20 == 211;
        if (v20 == 211)
          v22 = v19;
        else
          v22 = 0;
        v23 = v22 + 16;
        if (v21)
          v24 = v23;
        else
          v24 = v19 + 20;
        v25 = v19[1];
        if ((_DWORD)v25)
        {
          v26 = 8 * v25;
          do
          {
            v27 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            v43 = v27;
            v44 = 0;
            if (sub_22E793870(a1 + 1, &v43, &v44)
              && v44 != (_QWORD *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
            {
              v27 = v44[1];
            }
            v28 = *(unsigned int *)(v27 + 28);
            v25 = v51.n128_u32[2];
            if (v51.n128_u32[2] >= (unint64_t)v51.n128_u32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v25 = v51.n128_u32[2];
            }
            *(_QWORD *)(v51.n128_u64[0] + 8 * v25) = (v28 >> 13) & 3 | v27;
            LODWORD(v25) = ++v51.n128_u32[2];
            ++v24;
            v26 -= 8;
          }
          while (v26);
        }
        v29 = *(_QWORD *)(*a1 + 88);
        v30 = *((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          if (HIDWORD(__n[1]))
          {
            v31 = (void *)sub_22E3CD3D4(v29 + 2032, LODWORD(__n[1]), 3);
            memcpy(v31, (const void *)__n[0], LODWORD(__n[1]));
            v30 = *((_QWORD *)&v40 + 1);
            LODWORD(v25) = v51.n128_u32[2];
          }
          else
          {
            v31 = (void *)__n[0];
          }
        }
        else
        {
          v31 = 0;
        }
        v33 = sub_22F0605AC(v29, 0, v30, (uint64_t)v31, (uint64_t)&v38, 1, (*v19 >> 20) & 1, (const void *)v51.n128_u64[0], v51.n128_u64[0] + 8 * v25);
        v34 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v34 = v46;
        }
        *((_QWORD *)v45 + v34) = v33;
        LODWORD(v46) = v46 + 1;
        if ((_QWORD *)v51.n128_u64[0] != v52)
          free((void *)v51.n128_u64[0]);
      }
      else
      {
        v32 = v46;
        if (v46 >= (unint64_t)HIDWORD(v46))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v32 = v46;
        }
        *((_QWORD *)v45 + v32) = 0;
        LODWORD(v46) = v46 + 1;
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v35 = sub_22ECA7CAC((_QWORD *)*a1, (int *)(v37 + 80), 2u, (int *)(v37 + 88), 2, (uint64_t)&v40, (__int128 *)&v38, *(unsigned int *)(v37 + 96), (uint64_t)v48, v49, v42, (unsigned __int8 **)v45, v46);
LABEL_48:
  if (v45 != v47)
    free(v45);
  if (HIDWORD(__n[1]))
    free((void *)__n[0]);
  if (v48 != v50)
    free(v48);
  return v35;
}

uint64_t sub_22EBA3C60(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_22EB4D054(a1, *(_QWORD *)(a2 + 24));
  if ((v4 & 1) != 0)
    return 0;
  else
    return sub_22F33ECC8(*a1, v4 & 0xFFFFFFFFFFFFFFFELL, *(_DWORD *)a2, *(_DWORD *)(a2 + 12), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 4));
}

unsigned int *sub_22EBA3CAC(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA8A30(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EBA3E04(_QWORD **a1, _DWORD *a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD v14[3];
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x24BDAC8D0];
  v15 = v17;
  v16 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = a2 + 20;
    v6 = 8 * v4;
    while (1)
    {
      v7 = sub_22EB4D054(a1, *v5);
      if ((v7 & 1) != 0)
        break;
      v8 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v8 = v16;
      }
      *((_QWORD *)v15 + v8) = v7 & 0xFFFFFFFFFFFFFFFELL;
      v9 = v16 + 1;
      LODWORD(v16) = v16 + 1;
      ++v5;
      v6 -= 8;
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
  }
  else
  {
    v9 = v16;
LABEL_11:
    v10 = a2[3];
    v11 = a2[1];
    v14[0] = *a2;
    v14[1] = v10;
    v14[2] = v11;
    v12 = sub_22ECA819C(*a1, (uint64_t)v15, v9, v14);
  }
  if (v15 != v17)
    free(v15);
  return v12;
}

_DWORD *sub_22EBA3F5C(uint64_t *a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[49];

  v16[48] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = 0x1000000000;
  v4 = a2[4];
  if (v4 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = a2[4];
  }
  if (v4)
  {
    v5 = 0;
    v6 = a2 + 6;
    v7 = 2 * v4;
    do
    {
      v8 = *(_QWORD *)&v6[2 * (v5 + 1)];
      v9 = *(_QWORD *)&v6[4 * a2[4] + v5];
      v10 = sub_22EB4D054(a1, *(_QWORD *)&v6[2 * v5]);
      if ((v10 & 1) == 0)
      {
        if (!v8 || (v8 = sub_22EB4D054(a1, v8), (v8 & 1) == 0))
        {
          v11 = (_QWORD *)sub_22F2BAB24((uint64_t)&v14);
          *v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
          v11[1] = v8 & 0xFFFFFFFFFFFFFFFELL;
          v11[2] = v9;
        }
      }
      v5 += 2;
    }
    while (v7 != v5);
  }
  v12 = sub_22ECB0F9C(*a1, *a2, a2[3], a2[1], (uint64_t)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

unint64_t *sub_22EBA40C8(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  size_t v17;
  unsigned __int32 v18;
  _QWORD *v19;
  int64x2_t v20;
  _QWORD v21[6];

  v2 = (unint64_t *)a2;
  v21[5] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*(_BYTE *)(*(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF0) + 16) != 18)
    return sub_22EB4DB90((_QWORD **)a1, a2);
  v5 = (uint64_t)(a2 + 1);
  for (i = *a2; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_13;
      v7 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v7 <= 0x39)
        break;
LABEL_8:
      if (sub_22F115668(i))
        v4 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_16;
    }
    if (v7 == 24)
      goto LABEL_15;
    if (v7 == 26)
      break;
    if (((1 << v7) & 0x20000000200003CLL) == 0)
      goto LABEL_8;
LABEL_13:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_13;
LABEL_15:
  v4 = i;
LABEL_16:
  sub_22F115668(v4);
  v9 = *v2;
  if (*v2 >= 0x10)
  {
    v19 = v21;
    v20 = vdupq_n_s64(0x20uLL);
    v21[4] = 0;
    v10 = sub_22F11598C(v9);
    if (v20.i64[0] < (unint64_t)v10)
      sub_22EEB52C0((uint64_t *)&v19, v10);
    v11 = v9 & 0xF;
    if ((v9 & 0xF) != 0)
      v12 = v9;
    else
      v12 = 0;
    if ((v9 & 0xF) != 0)
    {
      v9 = *(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0);
      if ((v9 & 0xFFFFFFFFFFFFFFF0) != 0)
        v13 = *(_QWORD *)((char *)&unk_22F481D78
                        + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
      else
        v13 = 1;
      v5 = (v5 + v13 - 1) & -v13;
    }
    v14 = sub_22EB9A938(a1, (uint64_t)&v19, v9, v5, 1);
    if (v14 < 0x10 || (v15 = v14, v11) && (v15 = sub_22E8C1750((_QWORD **)a1, v14, v12), v15 < 0x10))
    {
      v2 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(*a1 + 88);
      v17 = v20.i64[0] - v20.i64[1];
      v18 = v20.i32[0] - v20.i32[2];
      if (v20.i32[0] == v20.i32[2])
        v18 = sub_22F11598C(v15);
      v2 = (unint64_t *)sub_22E3CD3D4(v16 + 2032, v18 + 8, 3);
      *v2 = v15;
      memcpy(v2 + 1, (char *)v19 + v20.i64[1], v17);
    }
    if (v19 != v21)
    {
      if (v19)
        MEMORY[0x2348A0E84]();
    }
  }
  return v2;
}

uint64_t sub_22EBA43B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_22EBA4658(uint64_t *a1, unsigned int *a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v19;
  void *v20[2];
  _DWORD v21[66];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v8 = sub_22EB98CCC(a1, *((_QWORD *)a2 + 2), *((void **)a2 + 3), 0, 0);
  if (!v8)
    return 1;
  v10 = v8;
  v11 = v9;
  v12 = (*((_BYTE *)a2 + 2) & 4) != 0 ? a2[16] : 0;
  sub_22EB9F61C(&v19, a1, (__n128 *)a2 + 2);
  if (!v19.n128_u64[0])
    return 1;
  v13 = *a2;
  if ((v13 & 0x40000) == 0)
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v19, 0, a3, a4);
  v14 = a2[14];
  if (!v14)
    return sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v19, 0, a3, a4);
  v15 = a2[15];
  v20[0] = v21;
  v20[1] = (void *)0x800000000;
  v21[64] = v14;
  v21[65] = v15;
  v16 = (uint64_t)&a2[4 * ((v13 >> 18) & 1) + 14];
  if ((sub_22EBA43B8((uint64_t)a1, v16, v16 + 32 * a2[17]) & 1) != 0)
    v17 = 1;
  else
    v17 = sub_22F301540((_QWORD **)a1, v10, v11, v12, (uint64_t)&v19, (uint64_t)v20, a3, a4);
  if (v20[0] != v21)
    free(v20[0]);
  return v17;
}

uint64_t sub_22EBA47F0(uint64_t *a1, char *a2)
{
  unint64_t *v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  __n128 v7;
  uint64_t v8;
  __int128 v9;

  v4 = sub_22EB4DB90((_QWORD **)a1, *((uint64_t **)a2 + 3));
  if (!v4)
    return 1;
  v5 = (uint64_t *)v4;
  v6 = sub_22EFFB374((unsigned __int8 *)a2);
  sub_22EB4D054(a1, (unint64_t)v6, v7);
  if ((v8 & 1) != 0)
    return 1;
  *((_QWORD *)&v9 + 1) = *((unsigned int *)a2 + 9);
  *(_QWORD *)&v9 = *((_QWORD *)a2 + 5);
  return sub_22E95ADCC((_QWORD *)*a1, *((_DWORD *)a2 + 8), *((unsigned __int16 *)&unk_22F481D68 + *a2 + 110), v5, v8 & 0xFFFFFFFFFFFFFFFELL, v9, v9 >> 32);
}

uint64_t sub_22EBA4880(uint64_t *a1, unsigned int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int32 v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  __n128 v22;
  uint64_t v23;
  __int128 v24;
  void *v25[2];
  void *v26[2];
  _QWORD v27[32];
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((*((_BYTE *)a2 + 2) & 4) != 0 && (v4 = *((_QWORD *)a2 + 4)) != 0)
  {
    v5 = sub_22EB98CCC(a1, v4, *((void **)a2 + 5), 0, 0);
    if (!v5)
      return 1;
    v7 = v5;
    v8 = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&v24 = v9;
  v26[0] = 0;
  if (sub_22E793870(a1 + 1, &v24, v26) && v26[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
    v9 = *((_QWORD *)v26[0] + 1);
  if (!v9)
    return 1;
  v10 = *a2;
  if ((v10 & 0x100000) != 0)
    v11 = &a2[4 * ((v10 >> 18) & 1) + 8];
  else
    v11 = a2 + 4;
  v12 = *(_QWORD *)v11;
  if (*(_QWORD *)v11 == *((_QWORD *)a2 + 2))
  {
    v13 = *(_QWORD *)v11;
    v12 = v9;
  }
  else
  {
    *(_QWORD *)&v24 = *(_QWORD *)v11;
    v26[0] = 0;
    if (sub_22E793870(a1 + 1, &v24, v26) && v26[0] != (void *)(a1[1] + 16 * *((unsigned int *)a1 + 6)))
      v12 = *((_QWORD *)v26[0] + 1);
    if (!v12)
      return 1;
    v13 = *((_QWORD *)a2 + 2);
  }
  v14 = a2[1];
  v15 = *((_QWORD *)a2 + 3);
  v22.n128_u64[0] = *(_QWORD *)(v13 + 40);
  v22.n128_u32[2] = v14;
  v23 = v15;
  if (v22.n128_u64[0])
  {
    sub_22EB9F61C((__n128 *)v26, a1, &v22);
    v22 = *(__n128 *)v26;
    v23 = v27[0];
    if (!v26[0])
      return 1;
  }
  v26[0] = v27;
  v26[1] = (void *)0x800000000;
  v28 = 0;
  v16 = *a2;
  if ((v16 & 0x80000) == 0 || (v17 = &a2[4 * ((v16 >> 18) & 1) + 8 + 2 * ((v16 >> 20) & 1)], !*v17))
  {
    v19 = 0;
LABEL_28:
    v24 = 0u;
    *(_OWORD *)v25 = 0u;
    sub_22E8ACE30((uint64_t)&v24, v7, v8);
    v20 = sub_22EB24A3C(*a1, &v24, &v22, v9, v12, v19, 0);
    if (HIDWORD(v25[1]))
      free(v25[0]);
    goto LABEL_30;
  }
  v28 = *(_QWORD *)v17;
  v18 = (uint64_t)&v17[4 * ((v16 >> 19) & 1)];
  v19 = v26;
  if ((sub_22EBA43B8((uint64_t)a1, v18, v18 + 32 * v17[3]) & 1) == 0)
    goto LABEL_28;
  v20 = 1;
LABEL_30:
  if (v26[0] != v27)
    free(v26[0]);
  return v20;
}

unint64_t sub_22EBA4B10(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)(a1 + 8);
  v4 = (unsigned __int8 *)sub_22EFBC5B4(v3);
  result = sub_22EB935E0(v2, v4, (*(_BYTE *)(v3 + 96) & 0x60) == 32);
  if ((result & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v7 + 16);
    if (v10 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v10 = *(_DWORD *)(v7 + 16);
    }
    *(_OWORD *)(*(_QWORD *)(v7 + 8) + 16 * v10) = xmmword_22F45D8D0;
  }
  else
  {
    v11 = result & 0xFFFFFFFFFFFFFFFELL;
    result = sub_22F3369FC();
    v6 = result;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_DWORD *)(v7 + 16);
    if (v8 >= *(_DWORD *)(v7 + 20))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_DWORD *)(v7 + 16);
    }
    v9 = (unint64_t *)(*(_QWORD *)(v7 + 8) + 16 * v8);
    *v9 = v11;
    v9[1] = v6;
  }
  ++*(_DWORD *)(v7 + 16);
  return result;
}

uint64_t sub_22EBA4C80(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int *v5;
  uint64_t v6;

  v4 = *(_DWORD *)a2 & 0x7C0000;
  v5 = *(unsigned int **)(a2 + 16);
  if (v4 == 0x100000 && *(unsigned __int8 *)v5 == 163)
  {
    v6 = sub_22EBA4658(a1, v5, 1, 0);
    if ((v6 & 1) != 0)
      return 1;
  }
  else
  {
    v6 = sub_22EB4D054(a1, v5);
    if ((v6 & 1) != 0)
      return 1;
  }
  return sub_22EB2941C((_QWORD *)*a1, 0, *(_DWORD *)(a2 + 4), (*(_DWORD *)a2 >> 18) & 0x1F, v6 & 0xFFFFFFFFFFFFFFFELL);
}

void sub_22EBA4D04(unint64_t **a1)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  _BYTE *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  _BYTE *v36;
  uint64_t v37;
  char v38;
  _BOOL4 v39;
  uint64_t *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  unsigned __int32 v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int32 *v51;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  _BOOL4 v59;
  unsigned int v60;
  __n128 v61;

  v2 = (unint64_t)a1[1];
  v3 = **a1;
  v4 = *(_DWORD *)(v3 + 28);
  v5 = v4 & 0x7F;
  if (!v3 || v5 != 55)
  {
    if (v3 && v5 == 57)
    {
      v3 = *(_QWORD *)(v3 + 112);
      if ((*(_BYTE *)(v3 + 83) & 2) != 0
        && (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3) + 82) & 0x40) == 0)
      {
        if ((*(_BYTE *)(v3 + 82) & 0x80) != 0)
        {
          if ((*(_BYTE *)(v3 + 29) & 1) == 0)
            return;
          sub_22EFC8E88(v3);
          v14 = *((unsigned int *)v13 + 2);
          if ((_DWORD)v14)
          {
            v15 = 8 * v14;
            for (i = *v13; *(_WORD *)(*(_QWORD *)i + 32) != 155; i += 8)
            {
              v15 -= 8;
              if (!v15)
                return;
            }
          }
          else
          {
            i = *v13;
          }
          if (i == *v13 + 8 * v14)
            return;
        }
        sub_22EAC8314(v2, *(_DWORD *)a1[2], (_QWORD *)v3);
      }
      goto LABEL_69;
    }
    v8 = (v4 & 0x7E) - 58;
    if (v3)
      v9 = v8 >= 0xFFFFFFFC;
    else
      v9 = 0;
    if (!v9)
      goto LABEL_94;
    if ((*(_QWORD *)(v3 + 40) & 7) == 6 && *(_DWORD *)(*(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFFFF8) == 15)
    {
      v10 = *(_BYTE **)(v3 + 112);
      if ((v10[83] & 2) != 0
        && (*(_BYTE *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v10 + 32))(v10) + 82) & 0x40) == 0)
      {
        if (sub_22EFD3B9C((unint64_t)v10))
        {
          sub_22EAC9238(v2, *(_DWORD *)a1[2], (uint64_t)v10);
        }
        else if (sub_22EFD3F30((unint64_t)v10))
        {
          sub_22EACA4EC(v2, *(_DWORD *)a1[2], (uint64_t)v10);
        }
      }
      goto LABEL_94;
    }
    if (v5 != 56)
    {
LABEL_69:
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      if ((*(_BYTE *)(v27 + 82) & 0xC) == 0 && !sub_22EFD7260(v27)
        || (*(_QWORD *)(*(_QWORD *)(v2 + 72) + 8) & 0x2000000000) == 0)
      {
        goto LABEL_94;
      }
      v28 = *(_WORD *)(v3 + 80) & 0x7F;
      v29 = -40;
      if (v28 > 0x46)
      {
        if (v28 != 83)
        {
          if (v28 == 71)
          {
            v29 = -56;
            goto LABEL_88;
          }
          if (v28 == 81)
            goto LABEL_88;
LABEL_83:
          v30 = v28 - 52;
          v9 = v28 - 33 >= 5;
          v31 = -48;
          if (!v9)
            v31 = -64;
          if (v30 >= 6)
            v29 = v31;
          else
            v29 = -72;
        }
      }
      else
      {
        if (v28 > 0x18)
          goto LABEL_82;
        if (v28 != 16)
        {
          if (((1 << v28) & 0x1066) != 0)
            goto LABEL_88;
          if (v28 != 24)
          {
LABEL_82:
            if (v28 == 70)
            {
              v29 = -64;
              goto LABEL_88;
            }
            goto LABEL_83;
          }
        }
        v29 = -48;
      }
LABEL_88:
      v32 = *(_QWORD *)(v3 + 72 + v29 + 16);
      v33 = (_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8);
      if ((v32 & 4) != 0)
        v33 = (_QWORD *)*v33;
      if (v33)
        v34 = (uint64_t)(v33 - 8);
      else
        v34 = 0;
      sub_22EAB631C(v2, *(_DWORD *)a1[2], v34, 0);
      goto LABEL_94;
    }
    v11 = *(_WORD *)(v3 + 80) & 0x7F;
    v12 = -40;
    if (v11 > 0x46)
    {
      if (v11 == 83)
        goto LABEL_62;
      if (v11 == 71)
      {
        v12 = -56;
        goto LABEL_62;
      }
      if (v11 != 81)
      {
LABEL_57:
        v21 = v11 - 52;
        v9 = v11 - 33 >= 5;
        v22 = -48;
        if (!v9)
          v22 = -64;
        if (v21 >= 6)
          v12 = v22;
        else
          v12 = -72;
      }
    }
    else
    {
      if (v11 > 0x18)
        goto LABEL_56;
      if (v11 == 16)
      {
LABEL_33:
        v12 = -48;
        goto LABEL_62;
      }
      if (((1 << v11) & 0x1066) == 0)
      {
        if (v11 == 24)
          goto LABEL_33;
LABEL_56:
        if (v11 == 70)
        {
          v12 = -64;
          goto LABEL_62;
        }
        goto LABEL_57;
      }
    }
LABEL_62:
    v23 = *(_QWORD *)(v3 + 72 + v12 + 16);
    v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
    if ((v23 & 4) != 0)
      v24 = (_QWORD *)*v24;
    if (v24)
      v25 = v24 - 8;
    else
      v25 = 0;
    v26 = v25[16];
    if (v26 && ((*(unsigned __int16 *)(v26 + 8) | (*(unsigned __int8 *)(v26 + 10) << 16)) & 0x100000) != 0)
    {
      v58 = *(_QWORD *)(v3 + 112);
      v59 = sub_22F3B22D4(v58);
      v60 = *(_DWORD *)a1[2];
      if (v59)
        sub_22F32927C(v2, v60, v58);
      else
        sub_22EACBEB4(v2, v60, v58);
      goto LABEL_94;
    }
    goto LABEL_69;
  }
  v6 = *(_QWORD *)(v3 + 112);
  v7 = *(_QWORD *)(v6 + 80);
  if ((v7 & 0x2000000) != 0)
  {
    if ((*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 32))(v6) + 82) & 0x40) == 0)
    {
      if (sub_22EFC0EB8(v6))
      {
        if (sub_22EFD3AF0(v6, (int *)&v61))
        {
          sub_22EACB798(v2, *(_DWORD *)a1[2], v6);
        }
        else if (sub_22EFD83B0(v6, (int *)&v61))
        {
          sub_22EACBB98(v2, *(_DWORD *)a1[2], v6);
        }
      }
      else
      {
        if ((*(_BYTE *)(v6 + 82) & 0x80) != 0)
        {
          if ((*(_BYTE *)(v6 + 29) & 1) == 0)
            return;
          sub_22EFC8E88(v6);
          v18 = *((unsigned int *)v17 + 2);
          if ((_DWORD)v18)
          {
            v19 = 8 * v18;
            for (j = *v17; *(_WORD *)(*(_QWORD *)j + 32) != 155; j += 8)
            {
              v19 -= 8;
              if (!v19)
                return;
            }
          }
          else
          {
            j = *v17;
          }
          if (j == *v17 + 8 * v18)
            return;
        }
        sub_22EAC7348(v2, *(_DWORD *)a1[2], v6);
      }
      goto LABEL_94;
    }
    v7 = *(_QWORD *)(v6 + 80);
  }
  if ((v7 & 0x2000000000000000) != 0 && *(_QWORD *)(v6 + 168))
    sub_22EAC7C44(v2, *(_DWORD *)a1[2], v6);
LABEL_94:
  v35 = (uint64_t *)*a1;
  v36 = (_BYTE *)**a1;
  if ((v36[83] & 2) != 0)
  {
    v37 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v36 + 32))(v36);
    v35 = (uint64_t *)*a1;
    if ((*(_BYTE *)(v37 + 82) & 0x40) == 0)
    {
      v38 = (unsigned __int16)sub_22EAB3978(v2, *v35) >> 8;
      v35 = (uint64_t *)*a1;
      if (v38)
      {
        sub_22EABAA74(v2, *(_DWORD *)a1[2], *v35, v38);
        v35 = (uint64_t *)*a1;
      }
    }
  }
  v39 = sub_22EFC201C(*v35);
  v40 = (uint64_t *)*a1;
  v41 = **a1;
  if (v39)
  {
    v42 = sub_22EFC20A4(**a1);
    v43 = *(_QWORD *)(v41 + 144) & 6;
    v44 = v43 != 4;
    v45 = *(_QWORD *)(v41 + 144) & 0xFFFFFFFFFFFFFFF8;
    if (!v45)
      v44 = 1;
    if (v44)
    {
      if (v43 != 2 || v45 == 0)
      {
        v47 = *(_DWORD *)a1[2];
        goto LABEL_130;
      }
      v51 = (unsigned __int32 *)(v45 + 8);
    }
    else
    {
      v51 = (unsigned __int32 *)(v45 + 40);
    }
    v47 = *v51;
    if (*v51)
    {
      if (v42 == 1)
      {
        if ((*(_BYTE *)(v41 + 83) & 0xC0) == 0)
          return;
      }
      else
      {
        v47 = *(_DWORD *)a1[2];
      }
LABEL_132:
      v53 = *(_QWORD *)(v41 + 16);
      v54 = v53 & 0xFFFFFFFFFFFFFFF8;
      if ((v53 & 4) != 0)
      {
        v54 = *(_QWORD *)v54;
        if ((*(_WORD *)(v54 + 8) & 0x7Fu) - 35 > 2)
          goto LABEL_140;
      }
      else if ((*(_WORD *)(v54 + 8) & 0x7Fu) - 35 >= 3)
      {
LABEL_140:
        v55 = *v40;
        v56 = *(_QWORD *)(*v40 + 80);
        if ((v56 & 0xC0000000) != 0)
        {
          sub_22EE44C50(v2, v47, v55, 0, 0, 0);
        }
        else
        {
          *(_QWORD *)(v55 + 80) = v56 | 0x100000000;
          v61.n128_u64[0] = **a1;
          v61.n128_u32[2] = v47;
          v57 = sub_22EB87D64((_QWORD *)(v2 + 12160), &v61);
          (*(void (**)(_QWORD, unint64_t, __n128))(**(_QWORD **)(v2 + 96) + 72))(*(_QWORD *)(v2 + 96), **a1, v57);
        }
        return;
      }
      if (sub_22EA3DA94(v54 - 64))
      {
        v40 = (uint64_t *)*a1;
        if (*(_DWORD *)(v2 + 10680))
        {
          v61.n128_u64[0] = *v40;
          v61.n128_u32[2] = v47;
          sub_22EB87D64((_QWORD *)(v2 + 12240), &v61);
          return;
        }
      }
      else
      {
        v40 = (uint64_t *)*a1;
      }
      goto LABEL_140;
    }
    v47 = *(_DWORD *)a1[2];
    if (v43 != 2 || v45 == 0)
    {
      if (v44 || (*(_BYTE *)(v45 + 8) & 4) == 0)
        goto LABEL_130;
      v45 = *(_QWORD *)(v45 + 48);
    }
    if (v45)
    {
      *(_DWORD *)(v45 + 8) = v47;
      goto LABEL_132;
    }
LABEL_130:
    sub_22EFC2530(v41, v42, v47);
    v40 = (uint64_t *)*a1;
    v41 = **a1;
    goto LABEL_132;
  }
  if (v41)
  {
    v48 = 0;
    v49 = **a1;
    do
    {
      if ((sub_22EFC9084(v49, 0) & 1) == 0 && sub_22EFC201C(v49))
        sub_22EB4E494(v2, *(unsigned int *)a1[2], v49, *(unsigned __int8 *)a1[3]);
      if ((*(_BYTE *)(v49 + 104) & 3) != 0)
      {
        if (v48)
          return;
        v48 = 1;
      }
      v50 = sub_22E3CD31C((uint64_t *)(v49 + 104), v49);
      if (v50 == v41)
        break;
      v49 = v50;
    }
    while (v50);
  }
}

uint64_t sub_22EBA5470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[10];

  v17[8] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v4 = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v5 = *(_DWORD *)(a3 + 8);
      if (v5 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        v5 = *(_DWORD *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v5) = v4;
      ++*(_DWORD *)(a3 + 8);
    }
    else
    {
      v17[0] = a2 & 0xFFFFFFFFFFFFFFFBLL;
      v16 = 0x800000001;
      v7 = 1;
      do
      {
        v8 = v7;
        v9 = &v17[v7];
        v10 = *(v9 - 1);
        if ((v10 & 4) != 0)
        {
          v7 = v8 - 1;
          LODWORD(v16) = v8 - 1;
        }
        else
        {
          *(v9 - 1) = v10 | 4;
          v11 = *(unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFF8) - 1;
          if (v11 <= 0xEB)
            __asm { BR              X9 }
          v7 = v16;
          if ((_DWORD)v8 != (_DWORD)v16)
          {
            v12 = &v17[v16 - 1];
            if (&v17[v8] < v12)
            {
              v13 = &v17[v8 + 1];
              do
              {
                v14 = *(v13 - 1);
                *(v13 - 1) = *v12;
                *v12-- = v14;
              }
              while (v13++ < v12);
            }
          }
        }
      }
      while (v7);
    }
  }
  return 1;
}

uint64_t sub_22EBB0D90(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  int v5;
  uint64_t result;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t **v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  BOOL v94;
  uint64_t v95;
  uint64_t **v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t **v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  uint64_t **v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  uint64_t **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  BOOL v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t **v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t **v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t **v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t **v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  unint64_t *v206;
  unint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t **v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  BOOL v225;
  uint64_t v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned int v234;
  BOOL v235;
  uint64_t v236;
  uint64_t **v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  uint64_t **v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t **v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t **v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t **v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  uint64_t v276;
  uint64_t *v277;
  unsigned int v278;
  uint64_t v279;
  unsigned int v280;
  BOOL v281;
  uint64_t v282;
  uint64_t **v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t **v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t **v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  BOOL v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t **v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t **v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t **v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t **v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t *v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t **v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t **v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t **v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t **v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  BOOL v374;
  uint64_t v375;
  uint64_t **v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t **v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  uint64_t **v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t **v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t *v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t **v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  BOOL v412;
  uint64_t v413;
  uint64_t **v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t **v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t **v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t **v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t **v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t **v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t **v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t **v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t **v453;
  uint64_t *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t **v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t **v461;
  uint64_t *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t i;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  BOOL v472;
  uint64_t v473;
  uint64_t **v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t **v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t **v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t **v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  unsigned int v494;
  uint64_t v495;
  uint64_t **v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  uint64_t v501;
  uint64_t **v502;
  uint64_t *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t **v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t **v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t **v519;
  uint64_t *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  BOOL v534;
  uint64_t **v535;
  uint64_t *v536;
  uint64_t v537;
  uint64_t v538;
  BOOL v539;
  BOOL v540;
  BOOL v541;
  BOOL v542;
  BOOL v543;
  int *v544;
  BOOL v545;
  BOOL v546;
  BOOL v547;
  uint64_t **v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t v560;

  if (!a2)
    return 1;
  v4 = a2 + 28;
  v5 = *(_DWORD *)(a2 + 28) & 0x7F;
  if ((*(_DWORD *)(a2 + 28) & 0x200) != 0)
  {
    if (v5 == 38)
      return sub_22EBB4C18(a1, a2);
    return 1;
  }
  switch(v5)
  {
    case 0:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v8 = *v7;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v10 = *(_QWORD *)v9 + 8 * *(unsigned int *)(v9 + 8);
      }
      else
      {
        v10 = 0;
      }
      while (2)
      {
        if (v8 == (uint64_t *)v10)
          return 1;
        if ((sub_22EBB5C68(a1, *v8) & 1) != 0)
        {
          ++v8;
          continue;
        }
        break;
      }
      return 0;
    case 1:
      v248 = *(unint64_t **)(a2 + 96);
      if (v248)
      {
        result = sub_22EBB5088(a1, *v248, (uint64_t)(v248 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v249 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
      result = sub_22EBA5470(a1, v249, 0);
      if (!(_DWORD)result)
        return result;
      v250 = *(unsigned int *)(a2 + 112);
      if (!(_DWORD)v250)
        goto LABEL_454;
      v251 = 16 * v250;
      v252 = (_QWORD *)(*(_QWORD *)(a2 + 104) + 8);
      while (1)
      {
        if (*v252)
        {
          result = sub_22EBA5470(a1, *v252, 0);
          if (!(_DWORD)result)
            break;
        }
        v252 += 2;
        v251 -= 16;
        if (!v251)
        {
LABEL_454:
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v254 = *v253;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v256 = *(_QWORD *)v255 + 8 * *(unsigned int *)(v255 + 8);
            }
            else
            {
              v256 = 0;
            }
            while (v254 != (uint64_t *)v256)
            {
              if ((sub_22EBB5C68(a1, *v254) & 1) == 0)
                return 0;
              ++v254;
            }
          }
          return 1;
        }
      }
      return result;
    case 2:
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 80) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v217 = *v216;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v219 = *(_QWORD *)v218 + 8 * *(unsigned int *)(v218 + 8);
      }
      else
      {
        v219 = 0;
      }
      while (2)
      {
        if (v217 == (uint64_t *)v219)
          return 1;
        if ((sub_22EBB5C68(a1, *v217) & 1) != 0)
        {
          ++v217;
          continue;
        }
        break;
      }
      return 0;
    case 3:
      result = sub_22EBB0D90(a1);
      if (!(_DWORD)result)
        return result;
      v231 = *(_QWORD *)(a2 + 48);
      if (!v231)
        goto LABEL_421;
      v232 = *(unsigned int *)(v231 + 8);
      if (!(_DWORD)v232)
        goto LABEL_421;
      v233 = v231 + 16;
      while ((sub_22EBB57F0(a1, v233) & 1) != 0)
      {
        v233 += 32;
        if (!--v232)
        {
LABEL_421:
          v234 = *(_DWORD *)v4 & 0x7F;
          v235 = v234 > 0x39 || ((1 << v234) & 0x3F0003E01011066) == 0;
          if (v235
            && (v234 - 70 <= 0xD ? (v541 = ((1 << (v234 - 70)) & 0x2803) == 0) : (v541 = 1), v541 && v234 - 19 > 4))
          {
            v236 = 0;
          }
          else
          {
            v236 = sub_22EFCAE04(a2);
          }
          result = sub_22EBB5BCC(a1, v236);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v238 = *v237;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v240 = *(_QWORD *)v239 + 8 * *(unsigned int *)(v239 + 8);
            }
            else
            {
              v240 = 0;
            }
            while (v238 != (uint64_t *)v240)
            {
              if ((sub_22EBB5C68(a1, *v238) & 1) == 0)
                return 0;
              ++v238;
            }
          }
          return 1;
        }
      }
      return 0;
    case 4:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v173 = *v172;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v175 = *(_QWORD *)v174 + 8 * *(unsigned int *)(v174 + 8);
      }
      else
      {
        v175 = 0;
      }
      while (2)
      {
        if (v173 == (uint64_t *)v175)
          return 1;
        if ((sub_22EBB5C68(a1, *v173) & 1) != 0)
        {
          ++v173;
          continue;
        }
        break;
      }
      return 0;
    case 5:
      result = sub_22EBB5BCC(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v298 = *v297;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v300 = *(_QWORD *)v299 + 8 * *(unsigned int *)(v299 + 8);
      }
      else
      {
        v300 = 0;
      }
      while (2)
      {
        if (v298 == (uint64_t *)v300)
          return 1;
        if ((sub_22EBB5C68(a1, *v298) & 1) != 0)
        {
          ++v298;
          continue;
        }
        break;
      }
      return 0;
    case 6:
      result = sub_22EBB5BCC(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v325 = *v324;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v327 = *(_QWORD *)v326 + 8 * *(unsigned int *)(v326 + 8);
      }
      else
      {
        v327 = 0;
      }
      while (2)
      {
        if (v325 == (uint64_t *)v327)
          return 1;
        if ((sub_22EBB5C68(a1, *v325) & 1) != 0)
        {
          ++v325;
          continue;
        }
        break;
      }
      return 0;
    case 7:
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 40), 0);
      if (!(_DWORD)result)
        return result;
      v241 = *(_DWORD *)v4 & 0x7F;
      v242 = v241 > 0x39 || ((1 << v241) & 0x3F0003E01011066) == 0;
      v243 = !v242 || v241 - 70 <= 0xD && ((1 << (v241 - 70)) & 0x2803) != 0 || v241 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EBB5BCC(a1, v243);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v245 = *v244;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v247 = *(_QWORD *)v246 + 8 * *(unsigned int *)(v246 + 8);
      }
      else
      {
        v247 = 0;
      }
      while (2)
      {
        if (v245 == (uint64_t *)v247)
          return 1;
        if ((sub_22EBB5C68(a1, *v245) & 1) != 0)
        {
          ++v245;
          continue;
        }
        break;
      }
      return 0;
    case 8:
      v336 = *(_QWORD *)(a2 + 40);
      v337 = (unint64_t *)(v336 & 0xFFFFFFFFFFFFFFF8);
      if ((v336 & 4) != 0 && v337)
      {
        if ((sub_22EBB5088(a1, *v337, (uint64_t)(v337 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EBB0D90(a1);
        if (!(_DWORD)result)
          return result;
      }
      v478 = *(_DWORD *)v4 & 0x7F;
      if (v478 <= 0x39 && ((1 << v478) & 0x3F0003E01011066) != 0
        || v478 - 70 <= 0xD && ((1 << (v478 - 70)) & 0x2803) != 0
        || v478 - 19 <= 4)
      {
        v479 = sub_22EFCAE04(a2);
      }
      else
      {
        v479 = 0;
      }
      result = sub_22EBB5BCC(a1, v479);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v481 = *v480;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v483 = *(_QWORD *)v482 + 8 * *(unsigned int *)(v482 + 8);
      }
      else
      {
        v483 = 0;
      }
      while (2)
      {
        if (v481 == (uint64_t *)v483)
          return 1;
        if ((sub_22EBB5C68(a1, *v481) & 1) != 0)
        {
          ++v481;
          continue;
        }
        break;
      }
      return 0;
    case 9:
      v204 = *(_QWORD *)(a2 + 48);
      v205 = (unint64_t *)(v204 & 0xFFFFFFFFFFFFFFF8);
      if ((v204 & 4) != 0 && v205)
      {
        if ((sub_22EBB5088(a1, *v205, (uint64_t)(v205 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EBB0D90(a1);
        if (!(_DWORD)result)
          return result;
      }
      v465 = *(unsigned int *)(a2 + 36);
      if (!(_DWORD)v465)
        goto LABEL_859;
      for (i = 0; i != v465; ++i)
      {
        v467 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * i);
        v468 = *(_DWORD *)(v467 + 12) & 0x1FFFFFFF;
        if ((_DWORD)v468)
        {
          v469 = v467 + 16;
          v470 = 8 * v468;
          while ((sub_22EBB0D90(a1) & 1) != 0)
          {
            v469 += 8;
            v470 -= 8;
            if (!v470)
              goto LABEL_858;
          }
          return 0;
        }
LABEL_858:
        ;
      }
LABEL_859:
      v471 = *(_DWORD *)v4 & 0x7F;
      v472 = v471 > 0x39 || ((1 << v471) & 0x3F0003E01011066) == 0;
      if (v472 && (v471 - 70 <= 0xD ? (v547 = ((1 << (v471 - 70)) & 0x2803) == 0) : (v547 = 1), v547 && v471 - 19 > 4))
        v473 = 0;
      else
        v473 = sub_22EFCAE04(a2);
      result = sub_22EBB5BCC(a1, v473);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v475 = *v474;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v477 = *(_QWORD *)v476 + 8 * *(unsigned int *)(v476 + 8);
        }
        else
        {
          v477 = 0;
        }
        while (v475 != (uint64_t *)v477)
        {
          if ((sub_22EBB5C68(a1, *v475) & 1) == 0)
            return 0;
          ++v475;
        }
      }
      return 1;
    case 10:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v333 = *v332;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v335 = *(_QWORD *)v334 + 8 * *(unsigned int *)(v334 + 8);
      }
      else
      {
        v335 = 0;
      }
      while (2)
      {
        if (v333 == (uint64_t *)v335)
          return 1;
        if ((sub_22EBB5C68(a1, *v333) & 1) != 0)
        {
          ++v333;
          continue;
        }
        break;
      }
      return 0;
    case 11:
      return (sub_22EBB4C60(a1, a2) & 1) != 0;
    case 12:
      result = sub_22EBB5BCC(a1, a2 + 40);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v201 = *v200;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v203 = *(_QWORD *)v202 + 8 * *(unsigned int *)(v202 + 8);
      }
      else
      {
        v203 = 0;
      }
      while (2)
      {
        if (v201 == (uint64_t *)v203)
          return 1;
        if ((sub_22EBB5C68(a1, *v201) & 1) != 0)
        {
          ++v201;
          continue;
        }
        break;
      }
      return 0;
    case 13:
      if (!sub_22EBB4F48(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v316 = *(_DWORD *)(a2 + 24);
      v317 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v316;
      v560 = v317;
      if (!sub_22EBB4FD0(a1, &v558))
        return 0;
      if ((v318 = *(_DWORD *)v4 & 0x7F, v318 <= 0x39) && ((1 << v318) & 0x3F0003E01011066) != 0
        || v318 - 70 <= 0xD && ((1 << (v318 - 70)) & 0x2803) != 0
        || v318 - 19 <= 4)
      {
        v319 = sub_22EFCAE04(a2);
      }
      else
      {
        v319 = 0;
      }
      if (!sub_22EBB5BCC(a1, v319))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v321 = *v320;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v323 = *(_QWORD *)v322 + 8 * *(unsigned int *)(v322 + 8);
      }
      else
      {
        v323 = 0;
      }
      while (2)
      {
        if (v321 == (uint64_t *)v323)
          return 1;
        if ((sub_22EBB5C68(a1, *v321) & 1) != 0)
        {
          ++v321;
          continue;
        }
        break;
      }
      return 0;
    case 14:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v141 = *v140;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v143 = *(_QWORD *)v142 + 8 * *(unsigned int *)(v142 + 8);
      }
      else
      {
        v143 = 0;
      }
      while (2)
      {
        if (v141 == (uint64_t *)v143)
          return 1;
        if ((sub_22EBB5C68(a1, *v141) & 1) != 0)
        {
          ++v141;
          continue;
        }
        break;
      }
      return 0;
    case 15:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v221 = *v220;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v223 = *(_QWORD *)v222 + 8 * *(unsigned int *)(v222 + 8);
      }
      else
      {
        v223 = 0;
      }
      while (2)
      {
        if (v221 == (uint64_t *)v223)
          return 1;
        if ((sub_22EBB5C68(a1, *v221) & 1) != 0)
        {
          ++v221;
          continue;
        }
        break;
      }
      return 0;
    case 16:
      result = sub_22EBB5BCC(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v123 = *v122;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v125 = *(_QWORD *)v124 + 8 * *(unsigned int *)(v124 + 8);
      }
      else
      {
        v125 = 0;
      }
      while (2)
      {
        if (v123 == (uint64_t *)v125)
          return 1;
        if ((sub_22EBB5C68(a1, *v123) & 1) != 0)
        {
          ++v123;
          continue;
        }
        break;
      }
      return 0;
    case 17:
      result = sub_22EBB4F48(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v264 = *v263;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v266 = *(_QWORD *)v265 + 8 * *(unsigned int *)(v265 + 8);
      }
      else
      {
        v266 = 0;
      }
      while (2)
      {
        if (v264 == (uint64_t *)v266)
          return 1;
        if ((sub_22EBB5C68(a1, *v264) & 1) != 0)
        {
          ++v264;
          continue;
        }
        break;
      }
      return 0;
    case 18:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v329 = *v328;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v331 = *(_QWORD *)v330 + 8 * *(unsigned int *)(v330 + 8);
      }
      else
      {
        v331 = 0;
      }
      while (2)
      {
        if (v329 == (uint64_t *)v331)
          return 1;
        if ((sub_22EBB5C68(a1, *v329) & 1) != 0)
        {
          ++v329;
          continue;
        }
        break;
      }
      return 0;
    case 19:
      v361 = *(_QWORD *)(a2 + 112);
      if (!v361)
        goto LABEL_650;
      v362 = *(unsigned int *)(v361 + 8);
      if (!(_DWORD)v362)
        goto LABEL_650;
      v363 = (uint64_t *)(v361 + 16);
      v364 = 8 * v362;
      while ((sub_22EBB4D78(a1, *v363) & 1) != 0)
      {
        ++v363;
        v364 -= 8;
        if (!v364)
        {
LABEL_650:
          result = sub_22EBB5BCC(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v366 = *v365;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v368 = *(_QWORD *)v367 + 8 * *(unsigned int *)(v367 + 8);
            }
            else
            {
              v368 = 0;
            }
            while (v366 != (uint64_t *)v368)
            {
              if ((sub_22EBB5C68(a1, *v366) & 1) == 0)
                return 0;
              ++v366;
            }
          }
          return 1;
        }
      }
      return 0;
    case 20:
      result = sub_22EBB5BCC(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v284 = *v283;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v286 = *(_QWORD *)v285 + 8 * *(unsigned int *)(v285 + 8);
      }
      else
      {
        v286 = 0;
      }
      while (2)
      {
        if (v284 == (uint64_t *)v286)
          return 1;
        if ((sub_22EBB5C68(a1, *v284) & 1) != 0)
        {
          ++v284;
          continue;
        }
        break;
      }
      return 0;
    case 21:
      result = sub_22EBB5BCC(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v313 = *v312;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v315 = *(_QWORD *)v314 + 8 * *(unsigned int *)(v314 + 8);
      }
      else
      {
        v315 = 0;
      }
      while (2)
      {
        if (v313 == (uint64_t *)v315)
          return 1;
        if ((sub_22EBB5C68(a1, *v313) & 1) != 0)
        {
          ++v313;
          continue;
        }
        break;
      }
      return 0;
    case 22:
      v354 = *(_QWORD *)(a2 + 112);
      if (!v354)
        goto LABEL_637;
      v355 = *(unsigned int *)(v354 + 8);
      if (!(_DWORD)v355)
        goto LABEL_637;
      v356 = (uint64_t *)(v354 + 16);
      v357 = 8 * v355;
      while ((sub_22EBB4D78(a1, *v356) & 1) != 0)
      {
        ++v356;
        v357 -= 8;
        if (!v357)
        {
LABEL_637:
          v358 = (unint64_t *)sub_22F259044(a2);
          if (v358)
          {
            result = sub_22EBB5088(a1, *v358, (uint64_t)(v358 + 1));
            if (!(_DWORD)result)
              return result;
          }
          v359 = *(_QWORD *)(a2 + 120);
          if (!v359)
          {
            sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
            v359 = *(_QWORD *)(a2 + 120);
          }
          if (v359 < 8)
            v360 = 0;
          else
            v360 = *(_QWORD *)(v359 & 0xFFFFFFFFFFFFFFF8);
          if (v360 == a2)
          {
            v552 = sub_22F2590A8(a2);
            v553 = sub_22F25910C(a2);
            v554 = sub_22F259178(a2);
            v555 = sub_22F2591DC(a2);
            if (v552 != v553 && v554 != v555)
            {
              v556 = v554 + 4;
              v557 = v552 + 8;
              do
              {
                if (v557 == v553)
                  break;
                v557 += 8;
                v31 = v556 == v555;
                v556 += 4;
              }
              while (!v31);
            }
          }
          result = sub_22EBB5BCC(a1, a2 + 48);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v531 = *v530;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v533 = *(_QWORD *)v532 + 8 * *(unsigned int *)(v532 + 8);
            }
            else
            {
              v533 = 0;
            }
            while (v531 != (uint64_t *)v533)
            {
              if ((sub_22EBB5C68(a1, *v531) & 1) == 0)
                return 0;
              ++v531;
            }
          }
          return 1;
        }
      }
      return 0;
    case 23:
      v388 = *(_QWORD *)(a2 + 104);
      if (!v388)
      {
        sub_22E3CD31C((uint64_t *)(*(_QWORD *)(a2 + 96) + 88), *(_QWORD *)(a2 + 96));
        v388 = *(_QWORD *)(a2 + 104);
      }
      if (v388 < 8)
        v389 = 0;
      else
        v389 = *(_QWORD *)(v388 & 0xFFFFFFFFFFFFFFF8);
      if (v389 == a2)
      {
        v523 = sub_22F259248(a2);
        v525 = v524;
        v526 = sub_22F2592CC(a2);
        if (v523 != v525 && v526 != v527)
        {
          v528 = v526 + 4;
          v529 = v523 + 8;
          do
          {
            if (v529 == v525)
              break;
            v529 += 8;
            v31 = v528 == v527;
            v528 += 4;
          }
          while (!v31);
        }
      }
      result = sub_22EBB5BCC(a1, a2 + 48);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v485 = *v484;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v487 = *(_QWORD *)v486 + 8 * *(unsigned int *)(v486 + 8);
      }
      else
      {
        v487 = 0;
      }
      while (2)
      {
        if (v485 == (uint64_t *)v487)
          return 1;
        if ((sub_22EBB5C68(a1, *v485) & 1) != 0)
        {
          ++v485;
          continue;
        }
        break;
      }
      return 0;
    case 24:
      v207 = *(unint64_t **)(a2 + 88);
      if (v207)
      {
        result = sub_22EBB5088(a1, *v207, (uint64_t)(v207 + 1));
        if (!(_DWORD)result)
          return result;
      }
      v208 = *(unsigned int *)(a2 + 104);
      if (!(_DWORD)v208)
        goto LABEL_379;
      v209 = *(_QWORD *)(a2 + 96);
      v210 = 8 * v208;
      while ((sub_22EBB0D90(a1) & 1) != 0)
      {
        v209 += 8;
        v210 -= 8;
        if (!v210)
        {
LABEL_379:
          if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)a2 + 72))(a2))
          {
            v211 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
            result = sub_22EBA5470(a1, v211, 0);
            if (!(_DWORD)result)
              return result;
          }
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v213 = *v212;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v215 = *(_QWORD *)v214 + 8 * *(unsigned int *)(v214 + 8);
            }
            else
            {
              v215 = 0;
            }
            while (v213 != (uint64_t *)v215)
            {
              if ((sub_22EBB5C68(a1, *v213) & 1) == 0)
                return 0;
              ++v213;
            }
          }
          return 1;
        }
      }
      return 0;
    case 25:
      v206 = *(unint64_t **)(a2 + 64);
      if (v206)
      {
        if ((sub_22EBB5088(a1, *v206, (uint64_t)(v206 + 1)) & 1) == 0)
          return 0;
      }
      else
      {
        result = sub_22EB522D8(a1, *(_QWORD *)(a2 + 56));
        if (!(_DWORD)result)
          return result;
      }
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v507 = *v506;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v509 = *(_QWORD *)v508 + 8 * *(unsigned int *)(v508 + 8);
      }
      else
      {
        v509 = 0;
      }
      while (2)
      {
        if (v507 == (uint64_t *)v509)
          return 1;
        if ((sub_22EBB5C68(a1, *v507) & 1) != 0)
        {
          ++v507;
          continue;
        }
        break;
      }
      return 0;
    case 26:
      result = sub_22EBB6204(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      v411 = *(_DWORD *)v4 & 0x7F;
      v412 = v411 > 0x39 || ((1 << v411) & 0x3F0003E01011066) == 0;
      v413 = !v412 || v411 - 70 <= 0xD && ((1 << (v411 - 70)) & 0x2803) != 0 || v411 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EBB5BCC(a1, v413);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v415 = *v414;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v417 = *(_QWORD *)v416 + 8 * *(unsigned int *)(v416 + 8);
      }
      else
      {
        v417 = 0;
      }
      while (2)
      {
        if (v415 == (uint64_t *)v417)
          return 1;
        if ((sub_22EBB5C68(a1, *v415) & 1) != 0)
        {
          ++v415;
          continue;
        }
        break;
      }
      return 0;
    case 27:
      result = sub_22EBB6204(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 64), 0);
      if (!(_DWORD)result)
        return result;
      if ((v112 = *(_DWORD *)v4 & 0x7F, v112 <= 0x39) && ((1 << v112) & 0x3F0003E01011066) != 0
        || v112 - 70 <= 0xD && ((1 << (v112 - 70)) & 0x2803) != 0
        || v112 - 19 <= 4)
      {
        v113 = sub_22EFCAE04(a2);
      }
      else
      {
        v113 = 0;
      }
      result = sub_22EBB5BCC(a1, v113);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v115 = *v114;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v117 = *(_QWORD *)v116 + 8 * *(unsigned int *)(v116 + 8);
      }
      else
      {
        v117 = 0;
      }
      while (2)
      {
        if (v115 == (uint64_t *)v117)
          return 1;
        if ((sub_22EBB5C68(a1, *v115) & 1) != 0)
        {
          ++v115;
          continue;
        }
        break;
      }
      return 0;
    case 28:
      result = sub_22EBB6204(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EBB0D90(a1);
      if (!(_DWORD)result)
        return result;
      if ((v390 = *(_DWORD *)v4 & 0x7F, v390 <= 0x39) && ((1 << v390) & 0x3F0003E01011066) != 0
        || v390 - 70 <= 0xD && ((1 << (v390 - 70)) & 0x2803) != 0
        || v390 - 19 <= 4)
      {
        v391 = sub_22EFCAE04(a2);
      }
      else
      {
        v391 = 0;
      }
      result = sub_22EBB5BCC(a1, v391);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v393 = *v392;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v395 = *(_QWORD *)v394 + 8 * *(unsigned int *)(v394 + 8);
      }
      else
      {
        v395 = 0;
      }
      while (2)
      {
        if (v393 == (uint64_t *)v395)
          return 1;
        if ((sub_22EBB5C68(a1, *v393) & 1) != 0)
        {
          ++v393;
          continue;
        }
        break;
      }
      return 0;
    case 29:
      result = sub_22EBB6204(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EBB0D90(a1);
      if (!(_DWORD)result)
        return result;
      if ((v396 = *(_DWORD *)v4 & 0x7F, v396 <= 0x39) && ((1 << v396) & 0x3F0003E01011066) != 0
        || v396 - 70 <= 0xD && ((1 << (v396 - 70)) & 0x2803) != 0
        || v396 - 19 <= 4)
      {
        v397 = sub_22EFCAE04(a2);
      }
      else
      {
        v397 = 0;
      }
      result = sub_22EBB5BCC(a1, v397);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v399 = *v398;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v401 = *(_QWORD *)v400 + 8 * *(unsigned int *)(v400 + 8);
      }
      else
      {
        v401 = 0;
      }
      while (2)
      {
        if (v399 == (uint64_t *)v401)
          return 1;
        if ((sub_22EBB5C68(a1, *v399) & 1) != 0)
        {
          ++v399;
          continue;
        }
        break;
      }
      return 0;
    case 30:
      result = sub_22EBB0D90(a1);
      if (!(_DWORD)result)
        return result;
      result = sub_22EBB6204(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v338 = *(_DWORD *)v4 & 0x7F, v338 <= 0x39) && ((1 << v338) & 0x3F0003E01011066) != 0
        || v338 - 70 <= 0xD && ((1 << (v338 - 70)) & 0x2803) != 0
        || v338 - 19 <= 4)
      {
        v339 = sub_22EFCAE04(a2);
      }
      else
      {
        v339 = 0;
      }
      result = sub_22EBB5BCC(a1, v339);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v341 = *v340;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v343 = *(_QWORD *)v342 + 8 * *(unsigned int *)(v342 + 8);
      }
      else
      {
        v343 = 0;
      }
      while (2)
      {
        if (v341 == (uint64_t *)v343)
          return 1;
        if ((sub_22EBB5C68(a1, *v341) & 1) != 0)
        {
          ++v341;
          continue;
        }
        break;
      }
      return 0;
    case 31:
      result = sub_22EBB6204(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      result = sub_22EBB0D90(a1);
      if (!(_DWORD)result)
        return result;
      if ((v257 = *(_DWORD *)v4 & 0x7F, v257 <= 0x39) && ((1 << v257) & 0x3F0003E01011066) != 0
        || v257 - 70 <= 0xD && ((1 << (v257 - 70)) & 0x2803) != 0
        || v257 - 19 <= 4)
      {
        v258 = sub_22EFCAE04(a2);
      }
      else
      {
        v258 = 0;
      }
      result = sub_22EBB5BCC(a1, v258);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v260 = *v259;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v262 = *(_QWORD *)v261 + 8 * *(unsigned int *)(v261 + 8);
      }
      else
      {
        v262 = 0;
      }
      while (2)
      {
        if (v260 == (uint64_t *)v262)
          return 1;
        if ((sub_22EBB5C68(a1, *v260) & 1) != 0)
        {
          ++v260;
          continue;
        }
        break;
      }
      return 0;
    case 32:
      result = sub_22EBB0D90(a1);
      if (!(_DWORD)result)
        return result;
      if (*(_QWORD *)(a2 + 72) >= 8uLL && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v544 = sub_22F259350(a2);
        result = sub_22EBB57F0(a1, (uint64_t)v544);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EBB6204(a1, *(_QWORD *)(a2 + 56));
      if (!(_DWORD)result)
        return result;
      if ((v344 = *(_DWORD *)v4 & 0x7F, v344 <= 0x39) && ((1 << v344) & 0x3F0003E01011066) != 0
        || v344 - 70 <= 0xD && ((1 << (v344 - 70)) & 0x2803) != 0
        || v344 - 19 <= 4)
      {
        v345 = sub_22EFCAE04(a2);
      }
      else
      {
        v345 = 0;
      }
      result = sub_22EBB5BCC(a1, v345);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v347 = *v346;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v349 = *(_QWORD *)v348 + 8 * *(unsigned int *)(v348 + 8);
      }
      else
      {
        v349 = 0;
      }
      if (v347 == (uint64_t *)v349)
        return 1;
      while ((sub_22EBB5C68(a1, *v347) & 1) != 0)
      {
        if (++v347 == (uint64_t *)v349)
          return 1;
      }
      return 0;
    case 33:
      v144 = *(_QWORD *)(a2 + 120);
      if ((v144 & 4) == 0)
        goto LABEL_252;
      v145 = 0;
      while (1)
      {
        v146 = v144 & 0xFFFFFFFFFFFFFFF8;
        if (v145 >= *(unsigned int *)(v146 + 16))
          break;
        sub_22EBB6204(a1, *(_QWORD *)(*(_QWORD *)(v146 + 24) + 8 * v145++));
        v144 = *(_QWORD *)(a2 + 120);
        if ((v144 & 4) == 0)
        {
LABEL_252:
          v147 = 0;
          v148 = 0;
          goto LABEL_946;
        }
      }
      v147 = *(_QWORD *)v146;
      v148 = *(_QWORD *)(v146 + 8);
LABEL_946:
      result = sub_22EBB4F48(a1, v147, v148);
      if (!(_DWORD)result)
        return result;
      v510 = *(_QWORD *)(a2 + 128);
      if ((v510 & 4) != 0 && (v510 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        result = sub_22EBB5088(a1, *(_QWORD *)(v510 & 0xFFFFFFFFFFFFFFF8), (v510 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EBB5BCC(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v512 = *v511;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v514 = *(_QWORD *)v513 + 8 * *(unsigned int *)(v513 + 8);
      }
      else
      {
        v514 = 0;
      }
      if (v512 == (uint64_t *)v514)
        return 1;
      while ((sub_22EBB5C68(a1, *v512) & 1) != 0)
      {
        if (++v512 == (uint64_t *)v514)
          return 1;
      }
      return 0;
    case 34:
      result = sub_22EBB62A4(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EBB5BCC(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v119 = *v118;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v121 = *(_QWORD *)v120 + 8 * *(unsigned int *)(v120 + 8);
      }
      else
      {
        v121 = 0;
      }
      if (v119 == (uint64_t *)v121)
        return 1;
      while ((sub_22EBB5C68(a1, *v119) & 1) != 0)
      {
        if (++v119 == (uint64_t *)v121)
          return 1;
      }
      return 0;
    case 35:
      result = sub_22EBB6318(a1, a2);
      if (!(_DWORD)result)
        return result;
      result = sub_22EBB5BCC(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v101 = *v100;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v103 = *(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 8);
      }
      else
      {
        v103 = 0;
      }
      if (v101 == (uint64_t *)v103)
        return 1;
      while ((sub_22EBB5C68(a1, *v101) & 1) != 0)
      {
        if (++v101 == (uint64_t *)v103)
          return 1;
      }
      return 0;
    case 36:
      v104 = *(unint64_t ***)(a2 + 160);
      if (v104)
      {
        if (*v104)
        {
          result = sub_22EBB5088(a1, **v104, (uint64_t)(*v104 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v105 = *(_QWORD *)(a2 + 120);
      if ((v105 & 4) != 0)
      {
        v488 = (uint64_t *)(v105 & 0xFFFFFFFFFFFFFFF8);
        v106 = *v488;
        v107 = v488[1];
      }
      else
      {
        v106 = 0;
        v107 = 0;
      }
      result = sub_22EBB4F48(a1, v106, v107);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFD5760(a2) != 2)
        return 1;
      result = sub_22EBB5BCC(a1, a2 + 64);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v490 = *v489;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v492 = *(_QWORD *)v491 + 8 * *(unsigned int *)(v491 + 8);
      }
      else
      {
        v492 = 0;
      }
      if (v490 == (uint64_t *)v492)
        return 1;
      while ((sub_22EBB5C68(a1, *v490) & 1) != 0)
      {
        if (++v490 == (uint64_t *)v492)
          return 1;
      }
      return 0;
    case 37:
      v63 = *(_QWORD *)(a2 + 184);
      if (!v63)
        goto LABEL_104;
      v64 = *(_DWORD *)(v63 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v64)
        goto LABEL_104;
      v65 = v63 + 16;
      v66 = 8 * v64;
      while ((sub_22EBB0D90(a1) & 1) != 0)
      {
        v65 += 8;
        v66 -= 8;
        if (!v66)
        {
LABEL_104:
          v67 = *(_QWORD *)(a2 + 192);
          v68 = *(unsigned int *)(v67 + 8);
          if ((_DWORD)v68)
          {
            v69 = v67 + 16;
            while ((sub_22EBB57F0(a1, v69) & 1) != 0)
            {
              v69 += 32;
              if (!--v68)
                goto LABEL_108;
            }
            return 0;
          }
LABEL_108:
          result = sub_22EBB6318(a1, a2);
          if (!(_DWORD)result)
            return result;
          result = sub_22EBB5BCC(a1, a2 + 64);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v71 = *v70;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v73 = *(_QWORD *)v72 + 8 * *(unsigned int *)(v72 + 8);
            }
            else
            {
              v73 = 0;
            }
            if (v71 != (uint64_t *)v73)
            {
              while ((sub_22EBB5C68(a1, *v71) & 1) != 0)
              {
                if (++v71 == (uint64_t *)v73)
                  return 1;
              }
              return 0;
            }
          }
          return 1;
        }
      }
      return 0;
    case 38:
      v402 = *(_QWORD *)(a2 + 48);
      if (v402)
      {
        result = sub_22EB522D8(a1, v402 & 0xFFFFFFFFFFFFFFF0);
        if (!(_DWORD)result)
          return result;
      }
      result = sub_22EBB4C18(a1, a2);
      if (!(_DWORD)result)
        return result;
      v403 = *(_QWORD *)(a2 + 72);
      if (v403 >= 8 && (*(_QWORD *)(a2 + 72) & 6) != 2)
      {
        v404 = (unint64_t *)(v403 & 0xFFFFFFFFFFFFFFF8);
        if ((*(_QWORD *)(a2 + 72) & 6) == 4 && v404)
          v404 = (unint64_t *)v404[1];
        result = sub_22EBB5088(a1, *v404, (uint64_t)(v404 + 1));
        if (!(_DWORD)result)
          return result;
      }
      if ((v405 = *(_DWORD *)v4 & 0x7F, v405 <= 0x39) && ((1 << v405) & 0x3F0003E01011066) != 0
        || v405 - 70 <= 0xD && ((1 << (v405 - 70)) & 0x2803) != 0
        || v405 - 19 <= 4)
      {
        v406 = sub_22EFCAE04(a2);
      }
      else
      {
        v406 = 0;
      }
      result = sub_22EBB5BCC(a1, v406);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v408 = *v407;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v410 = *(_QWORD *)v409 + 8 * *(unsigned int *)(v409 + 8);
      }
      else
      {
        v410 = 0;
      }
      if (v408 == (uint64_t *)v410)
        return 1;
      while ((sub_22EBB5C68(a1, *v408) & 1) != 0)
      {
        if (++v408 == (uint64_t *)v410)
          return 1;
      }
      return 0;
    case 39:
      return (sub_22EBB4D78(a1, a2) & 1) != 0;
    case 40:
      v176 = *(_QWORD *)(a2 + 80);
      v177 = (unint64_t *)(v176 & 0xFFFFFFFFFFFFFFF8);
      if ((v176 & 4) != 0)
        v177 = (unint64_t *)*v177;
      result = sub_22EBB5088(a1, *v177, (uint64_t)(v177 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v178 = *(_DWORD *)v4 & 0x7F, v178 <= 0x39) && ((1 << v178) & 0x3F0003E01011066) != 0
        || v178 - 70 <= 0xD && ((1 << (v178 - 70)) & 0x2803) != 0
        || v178 - 19 <= 4)
      {
        v179 = sub_22EFCAE04(a2);
      }
      else
      {
        v179 = 0;
      }
      result = sub_22EBB5BCC(a1, v179);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v181 = *v180;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v183 = *(_QWORD *)v182 + 8 * *(unsigned int *)(v182 + 8);
      }
      else
      {
        v183 = 0;
      }
      if (v181 == (uint64_t *)v183)
        return 1;
      while ((sub_22EBB5C68(a1, *v181) & 1) != 0)
      {
        if (++v181 == (uint64_t *)v183)
          return 1;
      }
      return 0;
    case 41:
      v267 = *(_QWORD *)(a2 + 80);
      v268 = (unint64_t *)(v267 & 0xFFFFFFFFFFFFFFF8);
      if ((v267 & 4) != 0)
        v268 = (unint64_t *)*v268;
      result = sub_22EBB5088(a1, *v268, (uint64_t)(v268 + 1));
      if (!(_DWORD)result)
        return result;
      if ((v269 = *(_DWORD *)v4 & 0x7F, v269 <= 0x39) && ((1 << v269) & 0x3F0003E01011066) != 0
        || v269 - 70 <= 0xD && ((1 << (v269 - 70)) & 0x2803) != 0
        || v269 - 19 <= 4)
      {
        v270 = sub_22EFCAE04(a2);
      }
      else
      {
        v270 = 0;
      }
      result = sub_22EBB5BCC(a1, v270);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v272 = *v271;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v274 = *(_QWORD *)v273 + 8 * *(unsigned int *)(v273 + 8);
      }
      else
      {
        v274 = 0;
      }
      if (v272 == (uint64_t *)v274)
        return 1;
      while ((sub_22EBB5C68(a1, *v272) & 1) != 0)
      {
        if (++v272 == (uint64_t *)v274)
          return 1;
      }
      return 0;
    case 42:
      result = sub_22EBB4F48(a1, *(_QWORD *)(a2 + 72), *(_QWORD *)(a2 + 80));
      if (!(_DWORD)result)
        return result;
      v373 = *(_DWORD *)v4 & 0x7F;
      v374 = v373 > 0x39 || ((1 << v373) & 0x3F0003E01011066) == 0;
      v375 = !v374 || v373 - 70 <= 0xD && ((1 << (v373 - 70)) & 0x2803) != 0 || v373 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EBB5BCC(a1, v375);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v377 = *v376;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v379 = *(_QWORD *)v378 + 8 * *(unsigned int *)(v378 + 8);
      }
      else
      {
        v379 = 0;
      }
      if (v377 == (uint64_t *)v379)
        return 1;
      while ((sub_22EBB5C68(a1, *v377) & 1) != 0)
      {
        if (++v377 == (uint64_t *)v379)
          return 1;
      }
      return 0;
    case 43:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v41 = *v40;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v43 = *(_QWORD *)v42 + 8 * *(unsigned int *)(v42 + 8);
      }
      else
      {
        v43 = 0;
      }
      if (v41 == (uint64_t *)v43)
        return 1;
      while ((sub_22EBB5C68(a1, *v41) & 1) != 0)
      {
        if (++v41 == (uint64_t *)v43)
          return 1;
      }
      return 0;
    case 44:
      result = sub_22EBB4F48(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)result)
        return result;
      v133 = *(_DWORD *)v4 & 0x7F;
      v134 = v133 > 0x39 || ((1 << v133) & 0x3F0003E01011066) == 0;
      v135 = !v134 || v133 - 70 <= 0xD && ((1 << (v133 - 70)) & 0x2803) != 0 || v133 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EBB5BCC(a1, v135);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v137 = *v136;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v139 = *(_QWORD *)v138 + 8 * *(unsigned int *)(v138 + 8);
      }
      else
      {
        v139 = 0;
      }
      if (v137 == (uint64_t *)v139)
        return 1;
      while ((sub_22EBB5C68(a1, *v137) & 1) != 0)
      {
        if (++v137 == (uint64_t *)v139)
          return 1;
      }
      return 0;
    case 45:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v351 = *v350;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v353 = *(_QWORD *)v352 + 8 * *(unsigned int *)(v352 + 8);
      }
      else
      {
        v353 = 0;
      }
      if (v351 == (uint64_t *)v353)
        return 1;
      while ((sub_22EBB5C68(a1, *v351) & 1) != 0)
      {
        if (++v351 == (uint64_t *)v353)
          return 1;
      }
      return 0;
    case 46:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v435 = *v434;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v437 = *(_QWORD *)v436 + 8 * *(unsigned int *)(v436 + 8);
      }
      else
      {
        v437 = 0;
      }
      if (v435 == (uint64_t *)v437)
        return 1;
      while ((sub_22EBB5C68(a1, *v435) & 1) != 0)
      {
        if (++v435 == (uint64_t *)v437)
          return 1;
      }
      return 0;
    case 47:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v79 = *v78;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v81 = *(_QWORD *)v80 + 8 * *(unsigned int *)(v80 + 8);
      }
      else
      {
        v81 = 0;
      }
      if (v79 == (uint64_t *)v81)
        return 1;
      while ((sub_22EBB5C68(a1, *v79) & 1) != 0)
      {
        if (++v79 == (uint64_t *)v81)
          return 1;
      }
      return 0;
    case 48:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v150 = *v149;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v152 = *(_QWORD *)v151 + 8 * *(unsigned int *)(v151 + 8);
      }
      else
      {
        v152 = 0;
      }
      if (v150 == (uint64_t *)v152)
        return 1;
      while ((sub_22EBB5C68(a1, *v150) & 1) != 0)
      {
        if (++v150 == (uint64_t *)v152)
          return 1;
      }
      return 0;
    case 49:
      result = sub_22EBB6390(a1, a2);
      if (!(_DWORD)result)
        return result;
      v171 = *(_QWORD *)(a2 + 72);
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v515 = v171 & 0xFFFFFFFFFFFFFFFCLL;
        v516 = *(_QWORD *)(a2 + 72) & 3;
        if ((_DWORD)v516 && (_DWORD)v516 != 3)
          v515 = *(_QWORD *)(v515 + 8);
        if ((sub_22EBA5470(a1, v515, 0) & 1) == 0)
          return 0;
      }
      else if ((v171 & 3) != 0 && (v171 & 3) != 3)
      {
        result = sub_22EBA5470(a1, v171 & 0xFFFFFFFFFFFFFFFCLL, 0);
        if (!(_DWORD)result)
          return result;
      }
      v517 = *(_DWORD *)v4 & 0x7F;
      if (v517 <= 0x39 && ((1 << v517) & 0x3F0003E01011066) != 0
        || v517 - 70 <= 0xD && ((1 << (v517 - 70)) & 0x2803) != 0
        || v517 - 19 <= 4)
      {
        v518 = sub_22EFCAE04(a2);
      }
      else
      {
        v518 = 0;
      }
      result = sub_22EBB5BCC(a1, v518);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v520 = *v519;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v522 = *(_QWORD *)v521 + 8 * *(unsigned int *)(v521 + 8);
        }
        else
        {
          v522 = 0;
        }
        for (; v520 != (uint64_t *)v522; ++v520)
        {
          if ((sub_22EBB5C68(a1, *v520) & 1) == 0)
            return 0;
        }
      }
      return 1;
    case 50:
      result = sub_22EBB6390(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v33 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v33 = *(_QWORD *)(v33 + 8);
        result = sub_22EBA5470(a1, v33, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v34 = *(_DWORD *)v4 & 0x7F, v34 <= 0x39) && ((1 << v34) & 0x3F0003E01011066) != 0
        || (v34 - 70 <= 0xD ? (v542 = ((1 << (v34 - 70)) & 0x2803) == 0) : (v542 = 1), !v542 || v34 - 19 <= 4))
      {
        v35 = sub_22EFCAE04(a2);
      }
      else
      {
        v35 = 0;
      }
      result = sub_22EBB5BCC(a1, v35);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v37 = *v36;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v39 = *(_QWORD *)v38 + 8 * *(unsigned int *)(v38 + 8);
      }
      else
      {
        v39 = 0;
      }
      if (v37 == (uint64_t *)v39)
        return 1;
      while ((sub_22EBB5C68(a1, *v37) & 1) != 0)
      {
        if (++v37 == (uint64_t *)v39)
          return 1;
      }
      return 0;
    case 51:
      result = sub_22EBB6390(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(a2 + 68) & 1) != 0)
      {
        v450 = *(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_DWORD *)(a2 + 72) & 3) != 0 && (*(_DWORD *)(a2 + 72) & 3) != 3)
          v450 = *(_QWORD *)(v450 + 8);
        result = sub_22EBA5470(a1, v450, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v451 = *(_DWORD *)v4 & 0x7F, v451 <= 0x39) && ((1 << v451) & 0x3F0003E01011066) != 0
        || (v451 - 70 <= 0xD ? (v543 = ((1 << (v451 - 70)) & 0x2803) == 0) : (v543 = 1), !v543 || v451 - 19 <= 4))
      {
        v452 = sub_22EFCAE04(a2);
      }
      else
      {
        v452 = 0;
      }
      result = sub_22EBB5BCC(a1, v452);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v454 = *v453;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v456 = *(_QWORD *)v455 + 8 * *(unsigned int *)(v455 + 8);
      }
      else
      {
        v456 = 0;
      }
      if (v454 == (uint64_t *)v456)
        return 1;
      while ((sub_22EBB5C68(a1, *v454) & 1) != 0)
      {
        if (++v454 == (uint64_t *)v456)
          return 1;
      }
      return 0;
    case 52:
      result = sub_22EBB645C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v431 = *v430;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v433 = *(_QWORD *)v432 + 8 * *(unsigned int *)(v432 + 8);
      }
      else
      {
        v433 = 0;
      }
      if (v431 == (uint64_t *)v433)
        return 1;
      while ((sub_22EBB5C68(a1, *v431) & 1) != 0)
      {
        if (++v431 == (uint64_t *)v433)
          return 1;
      }
      return 0;
    case 53:
      result = sub_22EBB645C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v75 = *v74;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v77 = *(_QWORD *)v76 + 8 * *(unsigned int *)(v76 + 8);
      }
      else
      {
        v77 = 0;
      }
      if (v75 == (uint64_t *)v77)
        return 1;
      while ((sub_22EBB5C68(a1, *v75) & 1) != 0)
      {
        if (++v75 == (uint64_t *)v77)
          return 1;
      }
      return 0;
    case 54:
      result = sub_22EBB645C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v419 = *v418;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v421 = *(_QWORD *)v420 + 8 * *(unsigned int *)(v420 + 8);
      }
      else
      {
        v421 = 0;
      }
      if (v419 == (uint64_t *)v421)
        return 1;
      while ((sub_22EBB5C68(a1, *v419) & 1) != 0)
      {
        if (++v419 == (uint64_t *)v421)
          return 1;
      }
      return 0;
    case 55:
      result = sub_22EBB645C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v427 = *v426;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v429 = *(_QWORD *)v428 + 8 * *(unsigned int *)(v428 + 8);
      }
      else
      {
        v429 = 0;
      }
      if (v427 == (uint64_t *)v429)
        return 1;
      while ((sub_22EBB5C68(a1, *v427) & 1) != 0)
      {
        if (++v427 == (uint64_t *)v429)
          return 1;
      }
      return 0;
    case 56:
      result = sub_22EBB645C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v83 = *v82;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v85 = *(_QWORD *)v84 + 8 * *(unsigned int *)(v84 + 8);
      }
      else
      {
        v85 = 0;
      }
      if (v83 == (uint64_t *)v85)
        return 1;
      while ((sub_22EBB5C68(a1, *v83) & 1) != 0)
      {
        if (++v83 == (uint64_t *)v85)
          return 1;
      }
      return 0;
    case 57:
      result = sub_22EBB645C(a1, a2);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v370 = *v369;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v372 = *(_QWORD *)v371 + 8 * *(unsigned int *)(v371 + 8);
      }
      else
      {
        v372 = 0;
      }
      if (v370 == (uint64_t *)v372)
        return 1;
      while ((sub_22EBB5C68(a1, *v370) & 1) != 0)
      {
        if (++v370 == (uint64_t *)v372)
          return 1;
      }
      return 0;
    case 58:
      result = sub_22EBB6390(a1, a2);
      if (!(_DWORD)result)
        return result;
      v153 = *(_DWORD *)v4 & 0x7F;
      v154 = v153 > 0x39 || ((1 << v153) & 0x3F0003E01011066) == 0;
      v155 = !v154 || v153 - 70 <= 0xD && ((1 << (v153 - 70)) & 0x2803) != 0 || v153 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EBB5BCC(a1, v155);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v157 = *v156;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v159 = *(_QWORD *)v158 + 8 * *(unsigned int *)(v158 + 8);
      }
      else
      {
        v159 = 0;
      }
      if (v157 == (uint64_t *)v159)
        return 1;
      while ((sub_22EBB5C68(a1, *v157) & 1) != 0)
      {
        if (++v157 == (uint64_t *)v159)
          return 1;
      }
      return 0;
    case 59:
      result = sub_22EBB6390(a1, a2);
      if (!(_DWORD)result)
        return result;
      v380 = *(_QWORD *)(a2 + 72);
      if (v380 >= 4 && (*(_QWORD *)(a2 + 72) & 3) != 1)
      {
        v381 = v380 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(_QWORD *)(a2 + 72) & 3) == 2 && v381)
          v381 = *(_QWORD *)(v381 + 8);
        result = sub_22EBA5470(a1, v381, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v382 = *(_DWORD *)v4 & 0x7F, v382 <= 0x39) && ((1 << v382) & 0x3F0003E01011066) != 0
        || v382 - 70 <= 0xD && ((1 << (v382 - 70)) & 0x2803) != 0
        || v382 - 19 <= 4)
      {
        v383 = sub_22EFCAE04(a2);
      }
      else
      {
        v383 = 0;
      }
      result = sub_22EBB5BCC(a1, v383);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v385 = *v384;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v387 = *(_QWORD *)v386 + 8 * *(unsigned int *)(v386 + 8);
      }
      else
      {
        v387 = 0;
      }
      if (v385 == (uint64_t *)v387)
        return 1;
      while ((sub_22EBB5C68(a1, *v385) & 1) != 0)
      {
        if (++v385 == (uint64_t *)v387)
          return 1;
      }
      return 0;
    case 60:
      result = sub_22EBB6820(a1, a2);
      if (!(_DWORD)result)
        return result;
      v184 = *(_DWORD *)v4 & 0x7F;
      v185 = v184 > 0x39 || ((1 << v184) & 0x3F0003E01011066) == 0;
      v186 = !v185 || v184 - 70 <= 0xD && ((1 << (v184 - 70)) & 0x2803) != 0 || v184 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EBB5BCC(a1, v186);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v188 = *v187;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v190 = *(_QWORD *)v189 + 8 * *(unsigned int *)(v189 + 8);
      }
      else
      {
        v190 = 0;
      }
      if (v188 == (uint64_t *)v190)
        return 1;
      while ((sub_22EBB5C68(a1, *v188) & 1) != 0)
      {
        if (++v188 == (uint64_t *)v190)
          return 1;
      }
      return 0;
    case 61:
      result = sub_22EBB6820(a1, a2);
      if (!(_DWORD)result)
        return result;
      v287 = *(unsigned int *)(a2 + 100);
      if (!(_DWORD)v287)
        goto LABEL_514;
      v288 = a2 + 104;
      v289 = 8 * v287;
      while ((sub_22EBB0D90(a1) & 1) != 0)
      {
        v288 += 8;
        v289 -= 8;
        if (!v289)
        {
LABEL_514:
          v290 = *(_DWORD *)v4 & 0x7F;
          v291 = v290 > 0x39 || ((1 << v290) & 0x3F0003E01011066) == 0;
          if (v291
            && (v290 - 70 <= 0xD ? (v545 = ((1 << (v290 - 70)) & 0x2803) == 0) : (v545 = 1), v545 && v290 - 19 > 4))
          {
            v292 = 0;
          }
          else
          {
            v292 = sub_22EFCAE04(a2);
          }
          result = sub_22EBB5BCC(a1, v292);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v294 = *v293;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v296 = *(_QWORD *)v295 + 8 * *(unsigned int *)(v295 + 8);
          }
          else
          {
            v296 = 0;
          }
          if (v294 == (uint64_t *)v296)
            return 1;
          while ((sub_22EBB5C68(a1, *v294) & 1) != 0)
          {
            if (++v294 == (uint64_t *)v296)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 62:
      result = sub_22EBB6820(a1, a2);
      if (!(_DWORD)result)
        return result;
      v305 = *(_DWORD *)v4 & 0x7F;
      v306 = v305 > 0x39 || ((1 << v305) & 0x3F0003E01011066) == 0;
      v307 = !v306 || v305 - 70 <= 0xD && ((1 << (v305 - 70)) & 0x2803) != 0 || v305 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EBB5BCC(a1, v307);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v309 = *v308;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v311 = *(_QWORD *)v310 + 8 * *(unsigned int *)(v310 + 8);
      }
      else
      {
        v311 = 0;
      }
      if (v309 == (uint64_t *)v311)
        return 1;
      while ((sub_22EBB5C68(a1, *v309) & 1) != 0)
      {
        if (++v309 == (uint64_t *)v311)
          return 1;
      }
      return 0;
    case 63:
      result = sub_22EBB6820(a1, a2);
      if (!(_DWORD)result)
        return result;
      v224 = *(_DWORD *)v4 & 0x7F;
      v225 = v224 > 0x39 || ((1 << v224) & 0x3F0003E01011066) == 0;
      v226 = !v225 || v224 - 70 <= 0xD && ((1 << (v224 - 70)) & 0x2803) != 0 || v224 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EBB5BCC(a1, v226);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v228 = *v227;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v230 = *(_QWORD *)v229 + 8 * *(unsigned int *)(v229 + 8);
      }
      else
      {
        v230 = 0;
      }
      if (v228 == (uint64_t *)v230)
        return 1;
      while ((sub_22EBB5C68(a1, *v228) & 1) != 0)
      {
        if (++v228 == (uint64_t *)v230)
          return 1;
      }
      return 0;
    case 64:
      result = sub_22EBB6820(a1, a2);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
      if (v191 != 1024)
        goto LABEL_343;
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 88) & 0xFFFFFFFFFFFFFFF8, 0);
      if (!(_DWORD)result)
        return result;
      v191 = *(_DWORD *)(a2 + 96) & 0x600;
LABEL_343:
      if (v191 != 1024 && v191 != 512 && *(_QWORD *)(a2 + 88) >= 8uLL)
      {
        v192 = sub_22EFBC5B4(a2);
        v193 = v192;
        if (v192 && (*(_BYTE *)v192 & 0xFE) == 0xAC)
          v193 = *(_QWORD *)(v192 + 16);
        result = sub_22EBA5470(a1, v193, 0);
        if (!(_DWORD)result)
          return result;
      }
      if ((v194 = *(_DWORD *)v4 & 0x7F, v194 <= 0x39) && ((1 << v194) & 0x3F0003E01011066) != 0
        || v194 - 70 <= 0xD && ((1 << (v194 - 70)) & 0x2803) != 0
        || v194 - 19 <= 4)
      {
        v195 = sub_22EFCAE04(a2);
      }
      else
      {
        v195 = 0;
      }
      result = sub_22EBB5BCC(a1, v195);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v197 = *v196;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v199 = *(_QWORD *)v198 + 8 * *(unsigned int *)(v198 + 8);
      }
      else
      {
        v199 = 0;
      }
      if (v197 == (uint64_t *)v199)
        return 1;
      while ((sub_22EBB5C68(a1, *v197) & 1) != 0)
      {
        if (++v197 == (uint64_t *)v199)
          return 1;
      }
      return 0;
    case 65:
      v301 = *(unint64_t ***)(a2 + 120);
      if (v301)
      {
        if (*v301)
        {
          result = sub_22EBB5088(a1, **v301, (uint64_t)(*v301 + 1));
          if (!(_DWORD)result)
            return result;
        }
      }
      v302 = *(_QWORD *)(a2 + 56);
      if ((v302 & 4) != 0)
      {
        v493 = (uint64_t *)(v302 & 0xFFFFFFFFFFFFFFF8);
        v303 = *v493;
        v304 = v493[1];
      }
      else
      {
        v303 = 0;
        v304 = 0;
      }
      result = sub_22EBB4F48(a1, v303, v304);
      if (!(_DWORD)result)
        return result;
      if (sub_22EFBC2B0(a2) != 2)
        return 1;
      v494 = *(_DWORD *)v4 & 0x7F;
      if (v494 <= 0x39 && ((1 << v494) & 0x3F0003E01011066) != 0
        || v494 - 70 <= 0xD && ((1 << (v494 - 70)) & 0x2803) != 0
        || v494 - 19 <= 4)
      {
        v495 = sub_22EFCAE04(a2);
      }
      else
      {
        v495 = 0;
      }
      result = sub_22EBB5BCC(a1, v495);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v497 = *v496;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v499 = *(_QWORD *)v498 + 8 * *(unsigned int *)(v498 + 8);
      }
      else
      {
        v499 = 0;
      }
      if (v497 == (uint64_t *)v499)
        return 1;
      while ((sub_22EBB5C68(a1, *v497) & 1) != 0)
      {
        if (++v497 == (uint64_t *)v499)
          return 1;
      }
      return 0;
    case 66:
      v44 = *(_QWORD *)(a2 + 424);
      if (!v44)
        goto LABEL_68;
      v45 = *(_DWORD *)(v44 + 12) & 0x1FFFFFFF;
      if (!(_DWORD)v45)
        goto LABEL_68;
      v46 = v44 + 16;
      v47 = 8 * v45;
      while ((sub_22EBB0D90(a1) & 1) != 0)
      {
        v46 += 8;
        v47 -= 8;
        if (!v47)
        {
LABEL_68:
          v48 = *(_QWORD *)(a2 + 432);
          v49 = *(unsigned int *)(v48 + 8);
          if ((_DWORD)v49)
          {
            v50 = v48 + 16;
            while ((sub_22EBB57F0(a1, v50) & 1) != 0)
            {
              v50 += 32;
              if (!--v49)
                goto LABEL_72;
            }
          }
          else
          {
LABEL_72:
            result = sub_22EBB6820(a1, a2);
            if (!(_DWORD)result)
              return result;
            v51 = *(_DWORD *)v4 & 0x7F;
            v52 = v51 > 0x39 || ((1 << v51) & 0x3F0003E01011066) == 0;
            if (v52
              && (v51 - 70 <= 0xD ? (v546 = ((1 << (v51 - 70)) & 0x2803) == 0) : (v546 = 1), v546 && v51 - 19 > 4))
            {
              v53 = 0;
            }
            else
            {
              v53 = sub_22EFCAE04(a2);
            }
            result = sub_22EBB5BCC(a1, v53);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v55 = *v54;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v57 = *(_QWORD *)v56 + 8 * *(unsigned int *)(v56 + 8);
            }
            else
            {
              v57 = 0;
            }
            if (v55 == (uint64_t *)v57)
              return 1;
            while ((sub_22EBB5C68(a1, *v55) & 1) != 0)
            {
              if (++v55 == (uint64_t *)v57)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 67:
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 56), 0);
      if (!(_DWORD)result)
        return result;
      v126 = *(_DWORD *)v4 & 0x7F;
      v127 = v126 > 0x39 || ((1 << v126) & 0x3F0003E01011066) == 0;
      v128 = !v127 || v126 - 70 <= 0xD && ((1 << (v126 - 70)) & 0x2803) != 0 || v126 - 19 <= 4 ? sub_22EFCAE04(a2) : 0;
      result = sub_22EBB5BCC(a1, v128);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v130 = *v129;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v132 = *(_QWORD *)v131 + 8 * *(unsigned int *)(v131 + 8);
      }
      else
      {
        v132 = 0;
      }
      if (v130 == (uint64_t *)v132)
        return 1;
      while ((sub_22EBB5C68(a1, *v130) & 1) != 0)
      {
        if (++v130 == (uint64_t *)v132)
          return 1;
      }
      return 0;
    case 68:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v462 = *v461;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v464 = *(_QWORD *)v463 + 8 * *(unsigned int *)(v463 + 8);
      }
      else
      {
        v464 = 0;
      }
      if (v462 == (uint64_t *)v464)
        return 1;
      while ((sub_22EBB5C68(a1, *v462) & 1) != 0)
      {
        if (++v462 == (uint64_t *)v464)
          return 1;
      }
      return 0;
    case 69:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v109 = *v108;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v111 = *(_QWORD *)v110 + 8 * *(unsigned int *)(v110 + 8);
      }
      else
      {
        v111 = 0;
      }
      if (v109 == (uint64_t *)v111)
        return 1;
      while ((sub_22EBB5C68(a1, *v109) & 1) != 0)
      {
        if (++v109 == (uint64_t *)v111)
          return 1;
      }
      return 0;
    case 70:
      v21 = *(_DWORD **)(a2 + 56);
      v24 = *v21;
      v23 = (uint64_t *)(v21 + 4);
      v22 = v24;
      if (!v24)
        return (sub_22EB522D8(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      v25 = 8 * v22;
      while ((sub_22EBB6880(a1, *v23) & 1) != 0)
      {
        ++v23;
        v25 -= 8;
        if (!v25)
          return (sub_22EB522D8(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return 0;
    case 71:
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 88), 0);
      if ((_DWORD)result)
      {
        v62 = *(_QWORD *)(a2 + 96);
        if (!v62)
          return (sub_22EB522D8(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
        result = sub_22EBA5470(a1, v62, 0);
        if ((_DWORD)result)
          return (sub_22EB522D8(a1, *(_QWORD *)(a2 + 48)) & 1) != 0;
      }
      return result;
    case 72:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v423 = *v422;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v425 = *(_QWORD *)v424 + 8 * *(unsigned int *)(v424 + 8);
      }
      else
      {
        v425 = 0;
      }
      if (v423 == (uint64_t *)v425)
        return 1;
      while ((sub_22EBB5C68(a1, *v423) & 1) != 0)
      {
        if (++v423 == (uint64_t *)v425)
          return 1;
      }
      return 0;
    case 73:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v439 = *v438;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v441 = *(_QWORD *)v440 + 8 * *(unsigned int *)(v440 + 8);
      }
      else
      {
        v441 = 0;
      }
      if (v439 == (uint64_t *)v441)
        return 1;
      while ((sub_22EBB5C68(a1, *v439) & 1) != 0)
      {
        if (++v439 == (uint64_t *)v441)
          return 1;
      }
      return 0;
    case 74:
      if (!sub_22EBB4F48(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v442 = *(_DWORD *)(a2 + 24);
      v443 = *(_QWORD *)(a2 + 80);
      v558 = *(_QWORD *)(a2 + 40);
      v559 = v442;
      v560 = v443;
      if (!sub_22EBB4FD0(a1, &v558))
        return 0;
      if ((v444 = *(_DWORD *)v4 & 0x7F, v444 <= 0x39) && ((1 << v444) & 0x3F0003E01011066) != 0
        || v444 - 70 <= 0xD && ((1 << (v444 - 70)) & 0x2803) != 0
        || v444 - 19 <= 4)
      {
        v445 = sub_22EFCAE04(a2);
      }
      else
      {
        v445 = 0;
      }
      if (!sub_22EBB5BCC(a1, v445))
        return 0;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v447 = *v446;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v449 = *(_QWORD *)v448 + 8 * *(unsigned int *)(v448 + 8);
      }
      else
      {
        v449 = 0;
      }
      while (2)
      {
        if (v447 == (uint64_t *)v449)
          return 1;
        if ((sub_22EBB5C68(a1, *v447) & 1) != 0)
        {
          ++v447;
          continue;
        }
        break;
      }
      return 0;
    case 75:
      v86 = *(unsigned int **)(a2 + 40);
      v87 = *v86;
      v88 = v86[1];
      if (!(_DWORD)v88)
        goto LABEL_146;
      v89 = &v86[2 * v87 + 4];
      v90 = 8 * v88;
      while ((sub_22EBA5470(a1, *(_QWORD *)v89, 0) & 1) != 0)
      {
        v89 += 2;
        v90 -= 8;
        if (!v90)
        {
          v86 = *(unsigned int **)(a2 + 40);
          v87 = *v86;
LABEL_146:
          if ((_DWORD)v87)
          {
            v91 = (uint64_t *)(v86 + 4);
            v92 = 8 * v87;
            while ((sub_22EBB6880(a1, *v91) & 1) != 0)
            {
              ++v91;
              v92 -= 8;
              if (!v92)
                goto LABEL_150;
            }
          }
          else
          {
LABEL_150:
            v93 = *(_DWORD *)v4 & 0x7F;
            v94 = v93 > 0x39 || ((1 << v93) & 0x3F0003E01011066) == 0;
            if (v94
              && (v93 - 70 <= 0xD ? (v540 = ((1 << (v93 - 70)) & 0x2803) == 0) : (v540 = 1), v540 && v93 - 19 > 4))
            {
              v95 = 0;
            }
            else
            {
              v95 = sub_22EFCAE04(a2);
            }
            result = sub_22EBB5BCC(a1, v95);
            if (!(_DWORD)result)
              return result;
            if ((*(_BYTE *)(v4 + 1) & 1) == 0)
              return 1;
            sub_22EFC8E88(a2);
            v97 = *v96;
            if ((*(_BYTE *)(a2 + 29) & 1) != 0)
            {
              sub_22EFC8E88(a2);
              v99 = *(_QWORD *)v98 + 8 * *(unsigned int *)(v98 + 8);
            }
            else
            {
              v99 = 0;
            }
            if (v97 == (uint64_t *)v99)
              return 1;
            while ((sub_22EBB5C68(a1, *v97) & 1) != 0)
            {
              if (++v97 == (uint64_t *)v99)
                return 1;
            }
          }
          return 0;
        }
      }
      return 0;
    case 76:
      v275 = *(_DWORD **)(a2 + 40);
      v278 = *v275;
      v277 = (uint64_t *)(v275 + 4);
      v276 = v278;
      if (!v278)
        goto LABEL_1013;
      v279 = 8 * v276;
      while ((sub_22EBB6880(a1, *v277) & 1) != 0)
      {
        ++v277;
        v279 -= 8;
        if (!v279)
        {
          v280 = *(_DWORD *)v4 & 0x7F;
          v281 = v280 > 0x39 || ((1 << v280) & 0x3F0003E01011066) == 0;
          if (v281
            && (v280 - 70 <= 0xD ? (v539 = ((1 << (v280 - 70)) & 0x2803) == 0) : (v539 = 1), v539 && v280 - 19 > 4))
          {
LABEL_1013:
            v282 = 0;
          }
          else
          {
            v282 = sub_22EFCAE04(a2);
          }
          result = sub_22EBB5BCC(a1, v282);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v549 = *v548;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v551 = *(_QWORD *)v550 + 8 * *(unsigned int *)(v550 + 8);
          }
          else
          {
            v551 = 0;
          }
          if (v549 == (uint64_t *)v551)
            return 1;
          while ((sub_22EBB5C68(a1, *v549) & 1) != 0)
          {
            if (++v549 == (uint64_t *)v551)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 77:
      v26 = *(unsigned int **)(a2 + 40);
      v27 = v26[1];
      if (!(_DWORD)v27)
        goto LABEL_998;
      v28 = &v26[2 * *v26 + 4];
      v29 = 8 * v27;
      while ((sub_22EBA5470(a1, *(_QWORD *)v28, 0) & 1) != 0)
      {
        v28 += 2;
        v29 -= 8;
        if (!v29)
        {
          v30 = *(_DWORD *)v4 & 0x7F;
          v31 = v30 > 0x39 || ((1 << v30) & 0x3F0003E01011066) == 0;
          if (v31 && (v30 - 70 <= 0xD ? (v534 = ((1 << (v30 - 70)) & 0x2803) == 0) : (v534 = 1), v534 && v30 - 19 > 4))
LABEL_998:
            v32 = 0;
          else
            v32 = sub_22EFCAE04(a2);
          result = sub_22EBB5BCC(a1, v32);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v4 + 1) & 1) == 0)
            return 1;
          sub_22EFC8E88(a2);
          v536 = *v535;
          if ((*(_BYTE *)(a2 + 29) & 1) != 0)
          {
            sub_22EFC8E88(a2);
            v538 = *(_QWORD *)v537 + 8 * *(unsigned int *)(v537 + 8);
          }
          else
          {
            v538 = 0;
          }
          if (v536 == (uint64_t *)v538)
            return 1;
          while ((sub_22EBB5C68(a1, *v536) & 1) != 0)
          {
            if (++v536 == (uint64_t *)v538)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 78:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v458 = *v457;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v460 = *(_QWORD *)v459 + 8 * *(unsigned int *)(v459 + 8);
      }
      else
      {
        v460 = 0;
      }
      if (v458 == (uint64_t *)v460)
        return 1;
      while ((sub_22EBB5C68(a1, *v458) & 1) != 0)
      {
        if (++v458 == (uint64_t *)v460)
          return 1;
      }
      return 0;
    case 79:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v18 = *v17;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v20 = *(_QWORD *)v19 + 8 * *(unsigned int *)(v19 + 8);
      }
      else
      {
        v20 = 0;
      }
      if (v18 == (uint64_t *)v20)
        return 1;
      while ((sub_22EBB5C68(a1, *v18) & 1) != 0)
      {
        if (++v18 == (uint64_t *)v20)
          return 1;
      }
      return 0;
    case 80:
      result = sub_22EBB5BCC(a1, 0);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v59 = *v58;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v61 = *(_QWORD *)v60 + 8 * *(unsigned int *)(v60 + 8);
      }
      else
      {
        v61 = 0;
      }
      if (v59 == (uint64_t *)v61)
        return 1;
      while ((sub_22EBB5C68(a1, *v59) & 1) != 0)
      {
        if (++v59 == (uint64_t *)v61)
          return 1;
      }
      return 0;
    case 81:
      v166 = sub_22EFCAE04(a2);
      result = sub_22EBB5BCC(a1, v166);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v168 = *v167;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v170 = *(_QWORD *)v169 + 8 * *(unsigned int *)(v169 + 8);
      }
      else
      {
        v170 = 0;
      }
      if (v168 == (uint64_t *)v170)
        return 1;
      while ((sub_22EBB5C68(a1, *v168) & 1) != 0)
      {
        if (++v168 == (uint64_t *)v170)
          return 1;
      }
      return 0;
    case 82:
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 40) & 0xFFFFFFFFFFFFFFFCLL, 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 48), 0);
      if (!(_DWORD)result)
        return result;
      if ((v160 = *(_DWORD *)v4 & 0x7F, v160 <= 0x39) && ((1 << v160) & 0x3F0003E01011066) != 0
        || v160 - 70 <= 0xD && ((1 << (v160 - 70)) & 0x2803) != 0
        || v160 - 19 <= 4)
      {
        v161 = sub_22EFCAE04(a2);
      }
      else
      {
        v161 = 0;
      }
      result = sub_22EBB5BCC(a1, v161);
      if (!(_DWORD)result)
        return result;
      if ((*(_BYTE *)(v4 + 1) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v163 = *v162;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v165 = *(_QWORD *)v164 + 8 * *(unsigned int *)(v164 + 8);
      }
      else
      {
        v165 = 0;
      }
      if (v163 == (uint64_t *)v165)
        return 1;
      break;
    case 83:
      v11 = *(_QWORD *)(a2 + 88);
      v12 = *(_BYTE **)(v11 + 19016);
      v13 = *(_BYTE **)(v11 + 19024);
      v14 = v13 - v12;
      if (v13 == v12)
      {
        v15 = 0;
        v16 = 0;
      }
      else
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v13 - v12);
        memmove(v15, v12, v14);
        v16 = &v15[8 * (v14 >> 3)];
      }
      if (v16 - v15 == 8 && (*(_DWORD *)(*(_QWORD *)v15 + 28) & 0x7F) == 0x53)
      {
        operator delete(v15);
        result = sub_22EBB5BCC(a1, a2 + 40);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        if (v15 != v16)
        {
          v500 = v15;
          do
          {
            if ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 1 >= 2
              && ((*(_DWORD *)(*(_QWORD *)v500 + 28) & 0x7Fu) - 35 > 2
               || (v501 = *(_QWORD *)(*(_QWORD *)v500 + 128)) == 0
               || ((*(unsigned __int16 *)(v501 + 8) | (*(unsigned __int8 *)(v501 + 10) << 16)) & 0x100000) == 0)
              && !sub_22EBB0D90(a1))
            {
              if (v15)
                operator delete(v15);
              return 0;
            }
            v500 += 8;
          }
          while (v500 != v16);
        }
        if (v15)
          operator delete(v15);
      }
      if ((*(_BYTE *)(v4 + 1) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v503 = *v502;
        if ((*(_BYTE *)(a2 + 29) & 1) != 0)
        {
          sub_22EFC8E88(a2);
          v505 = *(_QWORD *)v504 + 8 * *(unsigned int *)(v504 + 8);
        }
        else
        {
          v505 = 0;
        }
        for (; v503 != (uint64_t *)v505; ++v503)
        {
          if ((sub_22EBB5C68(a1, *v503) & 1) == 0)
            return 0;
        }
      }
      return 1;
    default:
      return 1;
  }
  while ((sub_22EBB5C68(a1, *v163) & 1) != 0)
  {
    if (++v163 == (uint64_t *)v165)
      return 1;
  }
  return 0;
}

uint64_t sub_22EBB4C18(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((*(_BYTE *)(a2 + 60) & 4) != 0)
  {
    if (*(_QWORD *)(a2 + 152))
    {
      if ((sub_22EBA5470(a1, *(_QWORD *)(a2 + 152), 0) & 1) == 0)
        return 0;
    }
    else
    {
      result = sub_22EBB4EA8(a1, a2 + 80);
      if (!(_DWORD)result)
        return result;
    }
  }
  return 1;
}

uint64_t sub_22EBB4C60(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 40), 0);
  if ((_DWORD)result)
  {
    v5 = *(_DWORD *)(a2 + 28) & 0x7F;
    v6 = v5 > 0x39 || ((1 << v5) & 0x3F0003E01011066) == 0;
    if (v6 && (v5 - 70 <= 0xD ? (v8 = ((1 << (v5 - 70)) & 0x2803) == 0) : (v8 = 1), v8 && v5 - 19 > 4))
      v7 = 0;
    else
      v7 = sub_22EFCAE04(a2);
    result = sub_22EBB5BCC(a1, v7);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v10 = *v9;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v12 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 8);
      }
      else
      {
        v12 = 0;
      }
      if (v10 == v12)
      {
        return 1;
      }
      else
      {
        v13 = v10 + 8;
        do
        {
          result = sub_22EBB5C68(a1, *(_QWORD *)(v13 - 8));
          if ((_DWORD)result)
            v14 = v13 == v12;
          else
            v14 = 1;
          v13 += 8;
        }
        while (!v14);
      }
    }
  }
  return result;
}

uint64_t sub_22EBB4D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t result;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  if (!*(_DWORD *)(a2 + 96))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 80);
  v5 = (unint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (unint64_t *)*v5;
  result = sub_22EBB5088(a1, *v5, (uint64_t)(v5 + 1));
  if ((_DWORD)result)
  {
LABEL_5:
    v7 = *(_DWORD *)(a2 + 28) & 0x7F;
    v8 = v7 > 0x39 || ((1 << v7) & 0x3F0003E01011066) == 0;
    if (v8 && (v7 - 70 <= 0xD ? (v10 = ((1 << (v7 - 70)) & 0x2803) == 0) : (v10 = 1), v10 && v7 - 19 > 4))
      v9 = 0;
    else
      v9 = sub_22EFCAE04(a2);
    result = sub_22EBB5BCC(a1, v9);
    if ((_DWORD)result)
    {
      if ((*(_BYTE *)(a2 + 29) & 1) == 0)
        return 1;
      sub_22EFC8E88(a2);
      v12 = *v11;
      if ((*(_BYTE *)(a2 + 29) & 1) != 0)
      {
        sub_22EFC8E88(a2);
        v14 = *(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 8);
      }
      else
      {
        v14 = 0;
      }
      if (v12 == v14)
      {
        return 1;
      }
      else
      {
        v15 = v12 + 8;
        do
        {
          result = sub_22EBB5C68(a1, *(_QWORD *)(v15 - 8));
          if ((_DWORD)result)
            v16 = v15 == v14;
          else
            v16 = 1;
          v15 += 8;
        }
        while (!v16);
      }
    }
  }
  return result;
}

uint64_t sub_22EBB4EA8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  __int128 v11;
  uint64_t v12;

  result = sub_22EBB4F48(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    result = sub_22EBB4FD0(a1, (uint64_t *)&v11);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a2 + 64);
      if (v5 && (v6 = *(unsigned int *)(v5 + 8), (_DWORD)v6))
      {
        v7 = v5 + 16;
        v8 = v6 - 1;
        do
        {
          result = sub_22EBB57F0(a1, v7);
          v10 = v8-- != 0;
          if (!(_DWORD)result)
            break;
          v7 += 32;
        }
        while (v10);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_22EBB4F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  if (!a2)
    return 1;
  v5 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (result = sub_22EBB4F48(a1, v5, a3), (_DWORD)result))
  {
    if (*(_QWORD *)(a2 + 16) && (*(_BYTE *)(a2 + 8) & 4) != 0)
    {
      v7 = sub_22F0AB4E0((uint64_t)v9);
      return sub_22EBB5088(a1, v7, v8);
    }
    return 1;
  }
  return result;
}

uint64_t sub_22EBB4FD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  unint64_t v10;

  v2 = *a2;
  v3 = *a2 & 7;
  v4 = v3;
  if ((_DWORD)v3 == 7)
  {
    v5 = *(_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if (v5 >= 3)
      v5 = 3;
    v4 = v5 | 8;
  }
  if ((v4 - 3) < 3)
  {
    if ((v3 - 3) <= 2)
    {
      v6 = (_QWORD *)a2[2];
      if (v6)
      {
        if ((sub_22EBB5088(a1, *v6, v6 + 1) & 1) == 0)
          return 0;
      }
    }
    return 1;
  }
  if (v4 != 8)
    return 1;
  if ((~(_BYTE)v2 & 7) != 0)
    goto LABEL_15;
  v8 = v2 & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_DWORD *)v8;
  if (*(_DWORD *)v8 >= 3u)
    v9 = 3;
  if (v9)
LABEL_15:
    v10 = 0;
  else
    v10 = *(_QWORD *)(v8 + 16) & 0xFFFFFFFFFFFFFFF9;
  result = sub_22EBB5908(a1, v10);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t sub_22EBB5088(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;

  if (a2)
  {
    v4 = a2;
    do
    {
      v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      if ((v4 & 0xF) != 0)
      {
LABEL_4:
        if ((v6 & 0xFFFFFFFFFFFFFFF0) != 0)
          v7 = *(_QWORD *)((char *)&unk_22F481D78
                         + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 16) << 56) >> 53));
        else
          v7 = 1;
        a3 = (a3 + v7 - 1) & -v7;
        v4 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0);
      }
      else
      {
        result = 1;
        switch(*(_BYTE *)(v6 + 16))
        {
          case 0:
          case 1:
          case 0x16:
          case 0x17:
          case 0x36:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 - 1;
            goto LABEL_62;
          case 2:
          case 3:
          case 4:
          case 5:
            v21 = *(_QWORD *)(v4 + 32);
            if (v21 >= 0x10 && (*(_QWORD *)(v4 + 32) & 0xFLL) == 0)
              v73 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v73 = 1;
            result = sub_22EBB5088(a1, v21, (a3 + v73 + 15) & -v73);
            if (!(_DWORD)result)
              return result;
            v23 = *(_QWORD *)(a3 + 8);
            return sub_22EBA5470(a1, v23, 0);
          case 6:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 11;
            goto LABEL_62;
          case 7:
          case 0x25:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 7;
            goto LABEL_62;
          case 8:
            v4 = *(_QWORD *)(v4 + 32);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = v20 + a3;
            goto LABEL_62;
          case 0xA:
          case 0x20:
          case 0x24:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
            v4 = *(_QWORD *)(v4 + 32);
            goto LABEL_9;
          case 0xC:
          case 0x37:
          case 0x38:
            goto LABEL_76;
          case 0xD:
          case 0x30:
            v23 = *(_QWORD *)(v4 + 24);
            return sub_22EBA5470(a1, v23, 0);
          case 0xE:
            result = sub_22EB522D8(a1, *(_QWORD *)(v4 + 24));
            if (!(_DWORD)result)
              return result;
            if (!*(_QWORD *)(v4 + 40))
              return 1;
            result = sub_22EBB4F48(a1, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16));
            if (!(_DWORD)result)
              return result;
            v25 = *(_DWORD *)(a3 + 28);
            v74 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
            v75 = v25;
            sub_22EFC6D6C((uint64_t)&v76, v74);
            result = sub_22EBB4FD0(a1, &v74);
            if (!(_DWORD)result)
              return result;
            v26 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v26)
              return 1;
            v27 = v4 + 48;
            v28 = (uint64_t *)(a3 + 56);
            v29 = v26 - 1;
            do
            {
              v30 = *v28++;
              v77 = *(_OWORD *)v27;
              v78 = *(_QWORD *)(v27 + 16);
              v79 = v30;
              result = sub_22EBB57F0(a1, (uint64_t)&v77);
              v31 = v29-- != 0;
              v32 = v31;
              if (!(_DWORD)result)
                break;
              v27 += 24;
            }
            while ((v32 & 1) != 0);
            return result;
          case 0xF:
            result = sub_22EBB5908(a1, *(_QWORD *)(v4 + 40));
            if (!(_DWORD)result)
              return result;
            v24 = *(_QWORD *)(v4 + 24);
            return sub_22EB522D8(a1, v24);
          case 0x10:
            v33 = *(_QWORD *)(v4 + 40);
            goto LABEL_96;
          case 0x11:
            v23 = *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFFCLL;
            return sub_22EBA5470(a1, v23, 0);
          case 0x12:
            return sub_22EBB4F48(a1, *(_QWORD *)(v4 + 32), *(_QWORD *)(a3 + 8));
          case 0x13:
            v33 = *(_QWORD *)(v4 + 40);
            if (!v33)
              goto LABEL_97;
LABEL_96:
            result = sub_22EBA5470(a1, v33, 0);
            if (!(_DWORD)result)
              return result;
LABEL_97:
            v24 = *(_QWORD *)(v4 + 48);
            return sub_22EB522D8(a1, v24);
          case 0x14:
            v34 = *(_QWORD *)(a3 + 8);
            if (v34)
            {
              v35 = *(_QWORD *)(v4 + 32);
              if (v35)
              {
                result = sub_22EBB4F48(a1, v35, v34);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v36 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v36)
              return 1;
            v37 = v4 + 48;
            v38 = (uint64_t *)(a3 + 32);
            v39 = v36 - 1;
            do
            {
              v40 = *v38++;
              v77 = *(_OWORD *)v37;
              v78 = *(_QWORD *)(v37 + 16);
              v79 = v40;
              result = sub_22EBB57F0(a1, (uint64_t)&v77);
              v31 = v39-- != 0;
              v41 = v31;
              if (!(_DWORD)result)
                break;
              v37 += 24;
            }
            while ((v41 & 1) != 0);
            return result;
          case 0x15:
            v42 = *(_QWORD *)(v4 + 48);
            if (v42)
            {
              result = sub_22EBA5470(a1, v42, 0);
              if (!(_DWORD)result)
                return result;
            }
            v24 = *(_QWORD *)(v4 + 40);
            return sub_22EB522D8(a1, v24);
          case 0x18:
            v17 = *(_QWORD *)(v4 + 32);
            if (v17)
            {
              result = sub_22EBB4F48(a1, v17, *(_QWORD *)(a3 + 8));
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 40);
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              goto LABEL_60;
            v20 = 1;
            goto LABEL_61;
          case 0x19:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v43 = *(_QWORD *)(v4 + 24);
            v44 = sub_22E47EE80(&v77);
            return sub_22EBB5088(a1, v43, v44);
          case 0x1A:
            *(_QWORD *)&v77 = v4;
            *((_QWORD *)&v77 + 1) = a3;
            v45 = *(_QWORD *)(v4 + 24);
            v46 = sub_22E47EE80(&v77);
            result = sub_22EBB5088(a1, v45, v46);
            if (!(_DWORD)result)
              return result;
            v47 = v77;
            v48 = *(_QWORD *)(v77 + 16);
            if (*(_BYTE *)(v77 + 16) == 25 || (v48 & 0x3FFFC000000000) == 0)
              goto LABEL_126;
            v50 = 0;
            v51 = (unsigned __int16)(v48 >> 38);
            do
            {
              if (*(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * v50 + 16))
              {
                if ((sub_22EBB0D90(a1) & 1) == 0)
                  return 0;
              }
              else if (v50 < (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38))
              {
                result = sub_22EB522D8(a1, *(_QWORD *)(v47 + 40 + 8 * v50));
                if (!(_DWORD)result)
                  return result;
              }
              ++v50;
            }
            while (v51 != v50);
            v48 = *(_QWORD *)(v47 + 16);
LABEL_126:
            if ((v48 & 0x3C0000000000000) == 0x80000000000000)
            {
              v52 = (_DWORD *)((v47 + 8 * (unsigned __int16)(v48 >> 38) + 4 * ((v48 >> 59) & 1) + 47) & 0xFFFFFFFFFFFFFFF8);
              v55 = *v52;
              v54 = v52 + 2;
              v53 = v55;
              if (v55)
              {
                v56 = 8 * v53;
                while ((sub_22EB522D8(a1, *v54) & 1) != 0)
                {
                  ++v54;
                  v56 -= 8;
                  if (!v56)
                    goto LABEL_131;
                }
                return 0;
              }
            }
LABEL_131:
            v57 = sub_22F257D3C(v47);
            if (!v57)
              return 1;
            result = sub_22EBA5470(a1, v57, 0);
            if ((_DWORD)result)
              return 1;
            return result;
          case 0x1C:
            v4 = *(_QWORD *)(v4 + 24);
LABEL_9:
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
              v20 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
            else
              v20 = 1;
            v10 = a3 + v20 + 3;
            goto LABEL_62;
          case 0x1D:
          case 0x1E:
            result = sub_22EBA5470(a1, *(_QWORD *)(a3 + 16), 0);
            if (!(_DWORD)result)
              return result;
            result = sub_22EBA5470(a1, *(_QWORD *)(a3 + 24), 0);
            if (!(_DWORD)result)
              return result;
LABEL_76:
            v24 = *(_QWORD *)(v4 + 32);
            return sub_22EB522D8(a1, v24);
          case 0x1F:
            v19 = *(_QWORD **)(a3 + 8);
            if (v19)
            {
              if ((sub_22EBB5088(a1, *v19, v19 + 1) & 1) == 0)
                return 0;
            }
            else
            {
              result = sub_22EB522D8(a1, *(_QWORD *)(v4 + 40) & 0xFFFFFFFFFFFFFFF0);
              if (!(_DWORD)result)
                return result;
            }
            v4 = *(_QWORD *)(v4 + 32);
            v20 = 1;
            if (v4 >= 0x10 && (v4 & 0xF) == 0)
LABEL_60:
              v20 = *(_QWORD *)((char *)&unk_22F481D78
                              + ((uint64_t)((unint64_t)*(unsigned int *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0)
                                                                             + 16) << 56) >> 53));
LABEL_61:
            v10 = a3 + v20 + 15;
LABEL_62:
            a3 = v10 & -v20;
            break;
          case 0x21:
            v58 = *(_QWORD *)(v4 + 24);
            v59 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
            if (v59 != v4)
            {
              v60 = 1;
              if (v58 >= 0x10 && (v58 & 0xF) == 0)
                v60 = *(_QWORD *)((char *)&unk_22F481D78
                                + ((uint64_t)((unint64_t)*(unsigned int *)(v59 + 16) << 56) >> 53));
              result = sub_22EBB5088(a1, v58, (a3+ (((HIWORD(*(_DWORD *)(v4 + 16)) & 0x3F8) + 4 * (*(_DWORD *)(v4 + 16) >> 26) + 31) & 0x7F8)+ v60- 1) & -v60);
              if (!(_DWORD)result)
                return result;
            }
            v61 = (*(_DWORD *)(v4 + 16) >> 19) & 0x7F;
            if (!(_DWORD)v61)
              return 1;
            v62 = (_QWORD *)(a3 + 24);
            v63 = v61 - 1;
            do
            {
              v64 = (_QWORD *)*v62++;
              result = sub_22EBB5088(a1, *v64, v64 + 1);
              v31 = v63-- != 0;
              v65 = v31;
            }
            while ((_DWORD)result && (v65 & 1) != 0);
            return result;
          case 0x2A:
            v66 = *(_DWORD *)(v4 + 20);
            *((_QWORD *)&v77 + 1) = *(_QWORD *)(v4 + 40);
            LODWORD(v77) = 8;
            DWORD1(v77) = v66;
            return sub_22EBB59CC(a1, (uint64_t)&v77);
          case 0x2B:
            v24 = *(_QWORD *)(v4 + 8);
            return sub_22EB522D8(a1, v24);
          case 0x2E:
            result = sub_22EBB5908(a1, *(_QWORD *)(v4 + 32));
            if (!(_DWORD)result)
              return result;
            v67 = *(unsigned int *)(v4 + 20);
            if (!(_DWORD)v67)
              return 1;
            v68 = v4 + 40;
            v69 = (uint64_t *)(a3 + 16);
            v70 = v67 - 1;
            do
            {
              v71 = *v69++;
              v77 = *(_OWORD *)v68;
              v78 = *(_QWORD *)(v68 + 16);
              v79 = v71;
              result = sub_22EBB57F0(a1, (uint64_t)&v77);
              v31 = v70-- != 0;
              v72 = v31;
              if (!(_DWORD)result)
                break;
              v68 += 24;
            }
            while ((v72 & 1) != 0);
            return result;
          case 0x31:
          case 0x33:
            v13 = *(unint64_t **)(a3 + 16);
            v14 = *v13;
            a3 = (uint64_t)(v13 + 1);
            v4 = v14;
            break;
          case 0x39:
            goto LABEL_4;
          default:
            return result;
        }
      }
    }
    while (v4);
  }
  return 1;
}

uint64_t sub_22EBB57F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v11;

  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      v6 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (v6)
        result = sub_22EBB5088(a1, *v6, v6 + 1);
      else
        result = sub_22EB522D8(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      v5 = (_QWORD *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL);
      if (!*v5 || (result = sub_22EBB4F48(a1, *v5, v5[1]), (_DWORD)result))
        result = sub_22EBB5908(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL, 0);
      break;
    case 8:
      v7 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v7)
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = v7 - 1;
        do
        {
          result = sub_22EBB59CC(a1, v8);
          v11 = v9-- != 0;
          if (!(_DWORD)result)
            break;
          v8 += 24;
        }
        while (v11);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EBB5908(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  char v5;

  v2 = a2 & 0xFFFFFFFFFFFFFFF8;
  if ((a2 & 6) != 6 || v2 == 0)
  {
    if ((a2 & 6) != 4)
      return 1;
    if (!v2)
      return 1;
    result = sub_22EBB5968(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    if ((_DWORD)result)
      return 1;
  }
  else
  {
    v5 = sub_22EBB5968(a1, *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8);
    return (v5 & 1) != 0;
  }
  return result;
}

uint64_t sub_22EBB5968(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 1;
  v4 = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (result = sub_22EBB5968(a1, v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 && (*(_BYTE *)(a2 + 8) & 4) != 0)
      return sub_22EB522D8(a1, v6 & 0xFFFFFFFFFFFFFFF0);
    return 1;
  }
  return result;
}

uint64_t sub_22EBB59CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23[2];
  char v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)a1;
  v23[0] = 0;
  v21 = 3;
  v22 = 4;
  v20 = *(unsigned int *)(v4 + 1704);
  sub_22EB4DDB8(v4 + 3688, &v22, (int *)&v20, (__int16 *)(v4 + 1693), v23, &v21);
  v5 = *(unsigned int *)(v4 + 3696);
  v6 = v5 - 2;
  v7 = *(_QWORD *)(v4 + 3688);
  v8 = *(_DWORD *)(v7 + 576 * (v5 - 2));
  if (v8 == 5)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = *(_BYTE *)(v7 + 576 * v6 + 572);
    v9 = 1;
  }
  else if (v8 == 2)
  {
    *(_BYTE *)(v7 + 576 * v5 - 4) = 1;
    v9 = *(_BYTE *)(v7 + 576 * v6 + 573) != 0;
  }
  else
  {
    v9 = 0;
    *(_BYTE *)(v7 + 576 * v5 - 4) = 0;
  }
  v10 = v7 + 576 * v5;
  *(_BYTE *)(v10 - 3) = v9;
  *(_WORD *)(v4 + 1693) = 0;
  if (*(_DWORD *)(v4 + 1848))
  {
    llvm::SmallPtrSetImplBase::swap((llvm::SmallPtrSetImplBase *)(v4 + 1776), (llvm::SmallPtrSetImplBase *)(v10 - 560));
    sub_22EAEAE08(v4 + 1840, (uint64_t *)(v10 - 496));
  }
  if (*(_DWORD *)a2 == 7)
  {
    v12 = *(_QWORD *)a1;
    v13 = *(_DWORD **)(a2 + 8);
    v23[0] = *(_QWORD *)(*(_QWORD *)a1 + 88);
    v23[1] = v12;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    sub_22EB88244((uint64_t)v23, v13);
  }
  else if (*(_DWORD *)a2 == 2)
  {
    v11 = *(_QWORD *)(a2 + 16);
    if (v11)
      sub_22EB24348(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), v11, 1);
  }
  sub_22EB48E64(v4);
  result = 1;
  switch(*(_DWORD *)a2)
  {
    case 1:
      result = sub_22EB522D8(a1, *(_QWORD *)(a2 + 8));
      break;
    case 5:
    case 6:
      result = sub_22EBB5908(a1, *(_QWORD *)(a2 + 8));
      break;
    case 7:
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 8), 0);
      break;
    case 8:
      v15 = *(unsigned int *)(a2 + 4);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(a2 + 8);
        v17 = v15 - 1;
        do
        {
          result = sub_22EBB59CC(a1, v16);
          v19 = v17-- != 0;
          if (!(_DWORD)result)
            break;
          v16 += 24;
        }
        while (v19);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22EBB5BCC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (!a2)
    return 1;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
    sub_22EFCC320(a2);
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 1;
  while (1)
  {
    if ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 1 >= 2
      && ((*(_DWORD *)(v4 + 28) & 0x7Fu) - 35 > 2
       || (v5 = *(_QWORD *)(v4 + 128)) == 0
       || ((*(unsigned __int16 *)(v5 + 8) | (*(unsigned __int8 *)(v5 + 10) << 16)) & 0x100000) == 0))
    {
      result = sub_22EBB0D90(a1);
      if (!(_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (!v4)
      return 1;
  }
  return result;
}

uint64_t sub_22EBB5C68(uint64_t a1, uint64_t a2)
{
  if (a2)
    __asm { BR              X10 }
  return 1;
}

void sub_22EBB5CEC()
{
  uint64_t v0;
  uint64_t v1;

  if (sub_22EBA5470(v0, *(_QWORD *)(v1 + 40), 0))
    JUMPOUT(0x22EBB5CA8);
  JUMPOUT(0x22EBB5CDCLL);
}

void sub_22EBB5D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v2 = *(unsigned int *)(v1 + 48);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2;
    while ((sub_22EBA5470(v0, *v3, 0) & 1) != 0)
    {
      ++v3;
      v4 -= 8;
      if (!v4)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *(unsigned int *)(v1 + 64);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EBB5CD8);
    v6 = *(uint64_t **)(v1 + 72);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EBA5470(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EBB5CDCLL);
}

void sub_22EBB5E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBA5470(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EBB5CDCLL);
}

void sub_22EBB5E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBA5470(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EBB5CDCLL);
}

void sub_22EBB5EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBA5470(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EBB5CDCLL);
}

void sub_22EBB5EE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EBA5470(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EBB5CD8);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBA5470(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EBB5CDCLL);
}

void sub_22EBB5F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBA5470(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EBB5CDCLL);
}

void sub_22EBB5F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if (sub_22EBA5470(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 56);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 64);
      v4 = 8 * v2;
      do
      {
        if ((sub_22EBA5470(v0, *v3, 0) & 1) == 0)
          JUMPOUT(0x22EBB5E38);
        ++v3;
        v4 -= 8;
      }
      while (v4);
    }
    v5 = *(unsigned int *)(v1 + 72);
    if (!(_DWORD)v5)
      JUMPOUT(0x22EBB5CD8);
    v6 = *(uint64_t **)(v1 + 80);
    v7 = 8 * v5 - 8;
    do
    {
      v8 = *v6++;
      if (sub_22EBA5470(v0, v8, 0))
        v9 = v7 == 0;
      else
        v9 = 1;
      v7 -= 8;
    }
    while (!v9);
  }
  JUMPOUT(0x22EBB5CDCLL);
}

void sub_22EBB5FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBA5470(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EBB5CDCLL);
}

void sub_22EBB6020()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v2 = *(unsigned int *)(v1 + 36);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(v1 + 40);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBA5470(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EBB5CDCLL);
}

void sub_22EBB6058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EBA5470(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EBB5CD8);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBA5470(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EBB5CDCLL);
}

void sub_22EBB60A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  if (sub_22EBA5470(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if (!(_DWORD)v2)
      JUMPOUT(0x22EBB5CD8);
    v3 = *(uint64_t **)(v1 + 56);
    v4 = 8 * v2 - 8;
    do
    {
      v5 = *v3++;
      if (sub_22EBA5470(v0, v5, 0))
        v6 = v4 == 0;
      else
        v6 = 1;
      v4 -= 8;
    }
    while (!v6);
  }
  JUMPOUT(0x22EBB5CDCLL);
}

void sub_22EBB60F0()
{
  JUMPOUT(0x22EBB5CC4);
}

void sub_22EBB60F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (sub_22EBA5470(v0, *(_QWORD *)(v1 + 40), 0))
  {
    v2 = *(unsigned int *)(v1 + 48);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(v1 + 56);
      v4 = 8 * v2;
      while ((sub_22EBA5470(v0, *v3, 0) & 1) != 0)
      {
        ++v3;
        v4 -= 8;
        if (!v4)
          goto LABEL_6;
      }
LABEL_33:
      JUMPOUT(0x22EBB5E38);
    }
LABEL_6:
    v5 = *(unsigned int *)(v1 + 64);
    if ((_DWORD)v5)
    {
      v6 = *(uint64_t **)(v1 + 72);
      v7 = 8 * v5;
      while ((sub_22EBA5470(v0, *v6, 0) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_10;
      }
      goto LABEL_33;
    }
LABEL_10:
    v8 = *(unsigned int *)(v1 + 80);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)(v1 + 88);
      v10 = 8 * v8;
      while ((sub_22EBA5470(v0, *v9, 0) & 1) != 0)
      {
        ++v9;
        v10 -= 8;
        if (!v10)
          goto LABEL_14;
      }
      goto LABEL_33;
    }
LABEL_14:
    v11 = *(unsigned int *)(v1 + 96);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(v1 + 104);
      v13 = 8 * v11;
      while ((sub_22EBA5470(v0, *v12, 0) & 1) != 0)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_18:
    v14 = *(unsigned int *)(v1 + 128);
    if (!(_DWORD)v14)
      JUMPOUT(0x22EBB5CD8);
    v15 = *(uint64_t **)(v1 + 136);
    v16 = 8 * v14 - 8;
    do
    {
      v17 = *v15++;
      if (sub_22EBA5470(v0, v17, 0))
        v18 = v16 == 0;
      else
        v18 = 1;
      v16 -= 8;
    }
    while (!v18);
  }
  JUMPOUT(0x22EBB5CDCLL);
}

uint64_t sub_22EBB6204(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a2)
    return 1;
  v4 = a2 + 16;
  v5 = *(_DWORD *)(a2 + 12);
  if ((v5 & 0x1FFFFFFF) != 0)
  {
    v6 = 8 * (v5 & 0x1FFFFFFF);
    v7 = a2 + 16;
    while ((sub_22EBB0D90(a1) & 1) != 0)
    {
      v7 += 8;
      v6 -= 8;
      if (!v6)
      {
        v5 = *(_DWORD *)(a2 + 12);
        goto LABEL_7;
      }
    }
    return 0;
  }
  else
  {
LABEL_7:
    if ((v5 & 0x40000000) == 0)
      return 1;
    v8 = *(_QWORD *)(v4 + 8 * (v5 & 0x1FFFFFFF));
    if (!v8)
      return 1;
    result = sub_22EBA5470(a1, v8, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EBB62A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 120);
  if ((v3 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v3 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EBB6204(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v3 = *(_QWORD *)(a2 + 120);
      if ((v3 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  return sub_22EBB4F48(a1, v7, v8);
}

uint64_t sub_22EBB6318(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;

  result = sub_22EBB62A4(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_BYTE *)(a2 + 74) & 1) == 0)
      return 1;
    v5 = sub_22E46A3A0(a2);
    if (v5 == v6)
    {
      return 1;
    }
    else
    {
      v7 = v6;
      v8 = v5 + 24;
      do
      {
        result = sub_22EBB5088(a1, **(_QWORD **)(v8 - 8), *(_QWORD *)(v8 - 8) + 8);
        if ((_DWORD)result)
          v9 = v8 == v7;
        else
          v9 = 1;
        v8 += 24;
      }
      while (!v9);
    }
  }
  return result;
}

uint64_t sub_22EBB6390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t *v11;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EBB6204(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EBB4F48(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) != 0)
    {
      v11 = *(unint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 32);
      if (v11)
        return (sub_22EBB5088(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    else if (v10 >= 8)
    {
      v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
      return (sub_22EBB5088(a1, *v11, (uint64_t)(v11 + 1)) & 1) != 0;
    }
    result = sub_22EB522D8(a1, *(_QWORD *)(a2 + 48));
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t sub_22EBB645C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  _BOOL4 v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v4 = *(_QWORD *)(a2 + 56);
  if ((v4 & 4) != 0)
  {
    v5 = 0;
    while (1)
    {
      v6 = v4 & 0xFFFFFFFFFFFFFFF8;
      if (v5 >= *(unsigned int *)(v6 + 16))
        break;
      sub_22EBB6204(a1, *(_QWORD *)(*(_QWORD *)(v6 + 24) + 8 * v5++));
      v4 = *(_QWORD *)(a2 + 56);
      if ((v4 & 4) == 0)
        goto LABEL_5;
    }
    v7 = *(_QWORD *)v6;
    v8 = *(_QWORD *)(v6 + 8);
  }
  else
  {
LABEL_5:
    v7 = 0;
    v8 = 0;
  }
  result = sub_22EBB4F48(a1, v7, v8);
  if ((_DWORD)result)
  {
    v10 = *(_DWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 152);
    v38 = *(_QWORD *)(a2 + 40);
    v39 = v10;
    v40 = v11;
    result = sub_22EBB4FD0(a1, &v38);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFF8;
      if ((*(_QWORD *)(a2 + 144) & 6) == 4 && v12 != 0 && (*(_BYTE *)(v12 + 16) & 6) != 0)
      {
        v14 = *(_QWORD *)(v12 + 32);
        if (v14)
        {
          v15 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v15)
          {
            v16 = v14 + 16;
            while ((sub_22EBB57F0(a1, v16) & 1) != 0)
            {
              v16 += 32;
              if (!--v15)
                goto LABEL_19;
            }
            return 0;
          }
        }
      }
LABEL_19:
      v17 = *(_QWORD *)(a2 + 56);
      v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0)
        v18 = (unint64_t *)v18[4];
      if (v18)
      {
        result = sub_22EBB5088(a1, *v18, (uint64_t)(v18 + 1));
        if (!(_DWORD)result)
          return result;
        v17 = *(_QWORD *)(a2 + 56);
      }
      if ((v17 & 4) == 0
        || (v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40)) == 0
        || (result = sub_22EBA5470(a1, v19, 0), (_DWORD)result))
      {
        if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x37)
        {
          v20 = sub_22EFD7ED0(a2);
          v21 = sub_22EFD7ED0(a2) + 8 * ((*(_QWORD *)(a2 + 80) >> 40) & 0x1FFFFFLL);
          while (v20 != v21)
          {
            v22 = *(_QWORD *)v20;
            if ((*(_WORD *)(*(_QWORD *)v20 + 28) & 4) != 0)
            {
              v23 = (unint64_t *)(*(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8);
              if ((*(_QWORD *)v22 & 6) != 0 || v23 == 0)
                goto LABEL_37;
              result = sub_22EBB5088(a1, *v23, (uint64_t)(v23 + 1));
              if (!(_DWORD)result)
                return result;
              if ((*(_WORD *)(v22 + 28) & 4) != 0)
              {
LABEL_37:
                result = sub_22EBA5470(a1, *(_QWORD *)(v22 + 8), 0);
                if (!(_DWORD)result)
                  return result;
              }
            }
            v20 += 8;
          }
        }
        v25 = sub_22E49F868(a2) && (*(_BYTE *)(a2 + 83) & 2) == 0;
        if ((*(_DWORD *)(a2 + 28) & 0x7Eu) - 58 < 0xFFFFFFFC)
          goto LABEL_70;
        v26 = *(_WORD *)(a2 + 80) & 0x7F;
        v27 = -40;
        if (v26 > 0x46)
        {
          if (v26 == 83)
            goto LABEL_60;
          if (v26 == 71)
          {
            v27 = -56;
            goto LABEL_60;
          }
          if (v26 != 81)
          {
LABEL_55:
            v28 = v26 - 52;
            v29 = v26 - 33 >= 5;
            v30 = -48;
            if (!v29)
              v30 = -64;
            if (v28 >= 6)
              v27 = v30;
            else
              v27 = -72;
          }
        }
        else
        {
          if (v26 > 0x18)
            goto LABEL_54;
          if (v26 == 16)
          {
LABEL_46:
            v27 = -48;
            goto LABEL_60;
          }
          if (((1 << v26) & 0x1066) == 0)
          {
            if (v26 == 24)
              goto LABEL_46;
LABEL_54:
            if (v26 == 70)
            {
              v27 = -64;
              goto LABEL_60;
            }
            goto LABEL_55;
          }
        }
LABEL_60:
        v31 = *(_QWORD *)(a2 + 72 + v27 + 16);
        v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8);
        if ((v31 & 4) != 0)
          v32 = (_QWORD *)*v32;
        if (v32)
        {
          v33 = v32[8];
          if (v33)
          {
            if (((*(unsigned __int16 *)(v33 + 8) | (*(unsigned __int8 *)(v33 + 10) << 16)) & 0x100000) != 0)
            {
              v34 = sub_22EFD462C((unint64_t)(v32 - 8));
              if (v34)
              {
                if ((*(_DWORD *)(v34 + 28) & 0x7F) != 0x1D || (v34 = *(_QWORD *)(v34 + 48)) != 0)
                {
                  if (v34 == a2
                    || (v35 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v34 + 32))(v34),
                        v35 == (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 32))(a2)))
                  {
                    if (!v25)
                      return 1;
LABEL_71:
                    v36 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 64))(a2);
                    result = sub_22EBA5470(a1, v36, 0);
                    if (!(_DWORD)result)
                      return result;
                    if ((*(_WORD *)(a2 + 80) & 0x80) != 0)
                      sub_22EFCC320(a2 + 72);
                    v37 = *(_QWORD *)(a2 + 88);
                    if (v37)
                    {
                      do
                      {
                        if ((*(_DWORD *)(v37 + 28) & 0x7E) == 0x2E)
                        {
                          result = sub_22EBB0D90(a1);
                          if (!(_DWORD)result)
                            break;
                        }
                        result = 1;
                        v37 = *(_QWORD *)(v37 + 8) & 0xFFFFFFFFFFFFFFF8;
                      }
                      while (v37);
                      return result;
                    }
                    return 1;
                  }
                }
              }
            }
          }
        }
LABEL_70:
        if (!v25)
          return 1;
        goto LABEL_71;
      }
    }
  }
  return result;
}

uint64_t sub_22EBB6820(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;

  result = sub_22EBB6390(a1, a2);
  if ((_DWORD)result)
  {
    if ((*(_DWORD *)(a2 + 28) & 0x7F) == 0x40)
      return 1;
    if ((*(_BYTE *)(a2 + 97) & 8) != 0)
      return 1;
    v5 = sub_22EFBC5B4(a2);
    result = sub_22EBA5470(a1, v5, 0);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

uint64_t sub_22EBB6880(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *mm;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *i2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *n;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *ii;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *nn;
  uint64_t v79;
  uint64_t v80;
  _QWORD *i1;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *i;
  uint64_t v92;
  uint64_t v93;
  _QWORD *j;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *jj;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *kk;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *k;
  uint64_t v175;
  uint64_t v176;
  _QWORD *m;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;

  if (!a2)
    return 1;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 3:
      v85 = (_QWORD *)(a2 + 24);
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if ((_DWORD)result)
      {
        v86 = *(unsigned int *)(a2 + 16);
        if (!(_DWORD)v86)
          return 1;
        v87 = 8 * v86;
        do
        {
          if ((sub_22EBA5470(a1, *v85, 0) & 1) == 0)
            return 0;
          ++v85;
          v87 -= 8;
        }
        while (v87);
        return 1;
      }
      return result;
    case 4:
    case 7:
    case 0xC:
    case 0x13:
    case 0x15:
    case 0x23:
    case 0x3C:
    case 0x3D:
    case 0x46:
    case 0x4B:
      v5 = *(_QWORD *)(a2 + 16);
      return (sub_22EBA5470(a1, v5, 0) & 1) != 0;
    case 5:
      v137 = (_QWORD *)(a2 + 24);
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 24 + 8 * *(unsigned int *)(a2 + 16)), 0);
      if (!(_DWORD)result)
        return result;
      v138 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v138)
        return 1;
      v139 = 8 * v138;
      while ((sub_22EBA5470(a1, *v137, 0) & 1) != 0)
      {
        ++v137;
        v139 -= 8;
        if (!v139)
          return 1;
      }
      return 0;
    case 6:
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 24), 0);
      if (!(_DWORD)result)
        return result;
      v134 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v134)
        return 1;
      v135 = (_QWORD *)(a2 + 40);
      v136 = 8 * v134;
      while ((sub_22EBA5470(a1, *v135, 0) & 1) != 0)
      {
        ++v135;
        v136 -= 8;
        if (!v136)
          return 1;
      }
      return 0;
    case 0xE:
      v88 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v88)
        return 1;
      v89 = a2 + 24;
      v90 = 8 * v88;
      for (i = (_QWORD *)(a2 + 24); (sub_22EBA5470(a1, *i, 0) & 1) != 0; ++i)
      {
        v90 -= 8;
        if (!v90)
        {
          v92 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v92)
            return 1;
          v93 = 8 * v92;
          for (j = (_QWORD *)(v89 + 8 * v92); (sub_22EBA5470(a1, *j, 0) & 1) != 0; ++j)
          {
            v93 -= 8;
            if (!v93)
            {
              v95 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v95)
                return 1;
              v96 = (_QWORD *)(v89 + 8 * v95 + 8 * v95);
              v97 = 8 * v95;
              while ((sub_22EBA5470(a1, *v96, 0) & 1) != 0)
              {
                ++v96;
                v97 -= 8;
                if (!v97)
                {
                  v98 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v98)
                    return 1;
                  v99 = (_QWORD *)(v89 + 8 * v98 + 8 * v98 + 8 * v98);
                  v100 = 8 * v98;
                  while ((sub_22EBA5470(a1, *v99, 0) & 1) != 0)
                  {
                    ++v99;
                    v100 -= 8;
                    if (!v100)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0xF:
      v171 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v171)
        return 1;
      v172 = a2 + 24;
      v173 = 8 * v171;
      for (k = (_QWORD *)(a2 + 24); (sub_22EBA5470(a1, *k, 0) & 1) != 0; ++k)
      {
        v173 -= 8;
        if (!v173)
        {
          v175 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v175)
            return 1;
          v176 = 8 * v175;
          for (m = (_QWORD *)(v172 + 8 * v175); (sub_22EBA5470(a1, *m, 0) & 1) != 0; ++m)
          {
            v176 -= 8;
            if (!v176)
            {
              v178 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v178)
                return 1;
              v179 = (_QWORD *)(v172 + 8 * v178 + 8 * v178);
              v180 = 8 * v178;
              while ((sub_22EBA5470(a1, *v179, 0) & 1) != 0)
              {
                ++v179;
                v180 -= 8;
                if (!v180)
                {
                  v181 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v181)
                    return 1;
                  v182 = (_QWORD *)(v172 + 8 * v181 + 8 * v181 + 8 * v181);
                  v183 = 8 * v181;
                  while ((sub_22EBA5470(a1, *v182, 0) & 1) != 0)
                  {
                    ++v182;
                    v183 -= 8;
                    if (!v183)
                      return 1;
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x12:
      v184 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v184)
        return 1;
      v185 = (_QWORD *)(a2 + 40);
      v186 = 8 * v184;
      while ((sub_22EBA5470(a1, *v185, 0) & 1) != 0)
      {
        ++v185;
        v186 -= 8;
        if (!v186)
          return 1;
      }
      return 0;
    case 0x14:
    case 0x58:
      v5 = *(_QWORD *)(a2 + 24);
      return (sub_22EBA5470(a1, v5, 0) & 1) != 0;
    case 0x16:
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 40);
      return (sub_22EBA5470(a1, v5, 0) & 1) != 0;
    case 0x18:
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 48);
      return (sub_22EBA5470(a1, v5, 0) & 1) != 0;
    case 0x1A:
      v193 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v193)
        return 1;
      v194 = (_QWORD *)(a2 + 24);
      v195 = 8 * v193;
      while ((sub_22EBA5470(a1, *v194, 0) & 1) != 0)
      {
        ++v194;
        v195 -= 8;
        if (!v195)
          return 1;
      }
      return 0;
    case 0x1B:
    case 0x1C:
    case 0x21:
    case 0x24:
    case 0x34:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3E:
    case 0x4E:
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 32);
      return (sub_22EBA5470(a1, v5, 0) & 1) != 0;
    case 0x1D:
      v40 = a2 + 40;
      v41 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v41)
        goto LABEL_72;
      v42 = 8 * v41;
      v43 = (_QWORD *)(a2 + 40);
      while ((sub_22EBA5470(a1, *v43, 0) & 1) != 0)
      {
        ++v43;
        v42 -= 8;
        if (!v42)
        {
LABEL_72:
          result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          v44 = *(unsigned int *)(a2 + 16);
          if ((_DWORD)v44)
          {
            v45 = 8 * v44;
            for (n = (_QWORD *)(v40 + 8 * v44); (sub_22EBA5470(a1, *n, 0) & 1) != 0; ++n)
            {
              v45 -= 8;
              if (!v45)
              {
                v47 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v47)
                  return 1;
                v48 = (_QWORD *)(v40 + 8 * v47 + 8 * v47);
                v49 = 8 * v47;
                while ((sub_22EBA5470(a1, *v48, 0) & 1) != 0)
                {
                  ++v48;
                  v49 -= 8;
                  if (!v49)
                    return 1;
                }
                return 0;
              }
            }
            return 0;
          }
          return 1;
        }
      }
      return 0;
    case 0x1E:
      v82 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v82)
        return 1;
      v83 = (_QWORD *)(a2 + 24);
      v84 = 8 * v82;
      while ((sub_22EBA5470(a1, *v83, 0) & 1) != 0)
      {
        ++v83;
        v84 -= 8;
        if (!v84)
          return 1;
      }
      return 0;
    case 0x1F:
      v187 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v187)
        return 1;
      v188 = (_QWORD *)(a2 + 104);
      v189 = 8 * v187;
      while ((sub_22EBA5470(a1, *v188, 0) & 1) != 0)
      {
        ++v188;
        v189 -= 8;
        if (!v189)
          return 1;
      }
      return 0;
    case 0x22:
      v199 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v199)
        return 1;
      v200 = (_QWORD *)(a2 + 80);
      v201 = 8 * v199;
      while ((sub_22EBA5470(a1, *v200, 0) & 1) != 0)
      {
        ++v200;
        v201 -= 8;
        if (!v201)
          return 1;
      }
      return 0;
    case 0x25:
      if (!sub_22EBB4F48(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EBB4FD0(a1, (uint64_t *)&v208))
        return 0;
      v56 = a2 + 96;
      v57 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v57)
        goto LABEL_98;
      v58 = 8 * v57;
      v59 = (_QWORD *)(a2 + 96);
      while ((sub_22EBA5470(a1, *v59, 0) & 1) != 0)
      {
        ++v59;
        v58 -= 8;
        if (!v58)
        {
LABEL_98:
          if (sub_22EBA5470(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EBA5470(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v60 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v60)
              return 1;
            v61 = 8 * v60;
            for (ii = (_QWORD *)(v56 + 8 * v60); (sub_22EBA5470(a1, *ii, 0) & 1) != 0; ++ii)
            {
              v61 -= 8;
              if (!v61)
              {
                v63 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v63)
                  return 1;
                v64 = (_QWORD *)(v56 + 8 * v63 + 8 * v63);
                v65 = 8 * v63;
                while ((sub_22EBA5470(a1, *v64, 0) & 1) != 0)
                {
                  ++v64;
                  v65 -= 8;
                  if (!v65)
                  {
                    v66 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v66)
                      return 1;
                    v67 = (_QWORD *)(v56 + 8 * v66 + 8 * v66 + 8 * v66);
                    v68 = 8 * v66;
                    while ((sub_22EBA5470(a1, *v67, 0) & 1) != 0)
                    {
                      ++v67;
                      v68 -= 8;
                      if (!v68)
                      {
                        v69 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v69)
                          return 1;
                        v70 = (_QWORD *)(v56 + 8 * v69 + 8 * v69 + 8 * v69 + 8 * v69);
                        v71 = 8 * v69;
                        while ((sub_22EBA5470(a1, *v70, 0) & 1) != 0)
                        {
                          ++v70;
                          v71 -= 8;
                          if (!v71)
                          {
                            v72 = *(unsigned int *)(a2 + 16);
                            if (!(_DWORD)v72)
                              return 1;
                            v73 = (_QWORD *)(v56 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72 + 8 * v72);
                            v74 = 8 * v72;
                            while ((sub_22EBA5470(a1, *v73, 0) & 1) != 0)
                            {
                              ++v73;
                              v74 -= 8;
                              if (!v74)
                                return 1;
                            }
                            return 0;
                          }
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x27:
      v168 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v168)
        return 1;
      v169 = (_QWORD *)(a2 + 24);
      v170 = 8 * v168;
      while ((sub_22EBA5470(a1, *v169, 0) & 1) != 0)
      {
        ++v169;
        v170 -= 8;
        if (!v170)
          return 1;
      }
      return 0;
    case 0x29:
      v53 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v53)
        return 1;
      v54 = (_QWORD *)(a2 + 32);
      v55 = 8 * v53;
      while ((sub_22EBA5470(a1, *v54, 0) & 1) != 0)
      {
        ++v54;
        v55 -= 8;
        if (!v55)
          return 1;
      }
      return 0;
    case 0x2A:
      v50 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v50)
        return 1;
      v51 = (_QWORD *)(a2 + 80);
      v52 = 8 * v50;
      while ((sub_22EBA5470(a1, *v51, 0) & 1) != 0)
      {
        ++v51;
        v52 -= 8;
        if (!v52)
          return 1;
      }
      return 0;
    case 0x2B:
      v101 = a2 + 64;
      v102 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v102)
        goto LABEL_164;
      v103 = 8 * v102;
      v104 = (_QWORD *)(a2 + 64);
      while ((sub_22EBA5470(a1, *v104, 0) & 1) != 0)
      {
        ++v104;
        v103 -= 8;
        if (!v103)
        {
LABEL_164:
          result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v105 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v105)
            return 1;
          v106 = 8 * v105;
          for (jj = (_QWORD *)(v101 + 8 * v105); (sub_22EBA5470(a1, *jj, 0) & 1) != 0; ++jj)
          {
            v106 -= 8;
            if (!v106)
            {
              v108 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v108)
                return 1;
              v109 = (_QWORD *)(v101 + 8 * v108 + 8 * v108);
              v110 = 8 * v108;
              while ((sub_22EBA5470(a1, *v109, 0) & 1) != 0)
              {
                ++v109;
                v110 -= 8;
                if (!v110)
                {
                  v111 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v111)
                    return 1;
                  v112 = (_QWORD *)(v101 + 8 * v111 + 8 * v111 + 8 * v111);
                  v113 = 8 * v111;
                  while ((sub_22EBA5470(a1, *v112, 0) & 1) != 0)
                  {
                    ++v112;
                    v113 -= 8;
                    if (!v113)
                    {
                      v114 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v114)
                        return 1;
                      v115 = (_QWORD *)(v101 + 8 * v114 + 8 * v114 + 8 * v114 + 8 * v114);
                      v116 = 8 * v114;
                      while ((sub_22EBA5470(a1, *v115, 0) & 1) != 0)
                      {
                        ++v115;
                        v116 -= 8;
                        if (!v116)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2C:
      v117 = a2 + 64;
      v118 = *(unsigned int *)(a2 + 16);
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 64 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118 + 8 * v118), 0);
      if (!(_DWORD)result)
        return result;
      result = sub_22EBA5470(a1, *(_QWORD *)(v117+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8 * *(unsigned int *)(a2 + 16)+ 8), 0);
      if (!(_DWORD)result)
        return result;
      v119 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v119)
        goto LABEL_191;
      v120 = 8 * v119;
      v121 = (_QWORD *)(a2 + 64);
      while ((sub_22EBA5470(a1, *v121, 0) & 1) != 0)
      {
        ++v121;
        v120 -= 8;
        if (!v120)
        {
LABEL_191:
          result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 24), 0);
          if (!(_DWORD)result)
            return result;
          result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 40), 0);
          if (!(_DWORD)result)
            return result;
          v122 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v122)
            return 1;
          v123 = 8 * v122;
          for (kk = (_QWORD *)(v117 + 8 * v122); (sub_22EBA5470(a1, *kk, 0) & 1) != 0; ++kk)
          {
            v123 -= 8;
            if (!v123)
            {
              v125 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v125)
                return 1;
              v126 = (_QWORD *)(v117 + 8 * v125 + 8 * v125);
              v127 = 8 * v125;
              while ((sub_22EBA5470(a1, *v126, 0) & 1) != 0)
              {
                ++v126;
                v127 -= 8;
                if (!v127)
                {
                  v128 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v128)
                    return 1;
                  v129 = (_QWORD *)(v117 + 8 * v128 + 8 * v128 + 8 * v128);
                  v130 = 8 * v128;
                  while ((sub_22EBA5470(a1, *v129, 0) & 1) != 0)
                  {
                    ++v129;
                    v130 -= 8;
                    if (!v130)
                    {
                      v131 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v131)
                        return 1;
                      v132 = (_QWORD *)(v117 + 8 * v131 + 8 * v131 + 8 * v131 + 8 * v131);
                      v133 = 8 * v131;
                      while ((sub_22EBA5470(a1, *v132, 0) & 1) != 0)
                      {
                        ++v132;
                        v133 -= 8;
                        if (!v133)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
              return 0;
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x2E:
      v190 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v190)
        return 1;
      v191 = (_QWORD *)(a2 + 136);
      v192 = 8 * v190;
      while ((sub_22EBA5470(a1, *v191, 0) & 1) != 0)
      {
        ++v191;
        v192 -= 8;
        if (!v192)
          return 1;
      }
      return 0;
    case 0x35:
      v6 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v6)
        return 1;
      v7 = a2 + 24;
      v8 = 8 * v6;
      for (mm = (_QWORD *)(a2 + 24); (sub_22EBA5470(a1, *mm, 0) & 1) != 0; ++mm)
      {
        v8 -= 8;
        if (!v8)
        {
          v10 = *(unsigned int *)(a2 + 16);
          v11 = (uint64_t *)(v7 + 8 * v10);
          v208 = (unint64_t)v11;
          if ((_DWORD)v10)
          {
            v12 = 0;
            v13 = &v11[v10];
            while (1)
            {
              if ((v12 & 3) != 0)
              {
                if ((v12 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                  v14 = (_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 40);
                else
                  v14 = (_QWORD *)sub_22F3AC1A8(*v11);
                if ((sub_22EBA5470(a1, *v14, 0) & 1) == 0)
                  return 0;
                if (v12 < 4)
                  sub_22F3F2FE0((uint64_t)&v208, 1);
                else
                  sub_22F0D8720((uint64_t)&v208);
              }
              else
              {
                if (!sub_22EBA5470(a1, *v11, 0))
                  return 0;
                *(_QWORD *)&v208 = v11 + 1;
              }
              v12 = *((_QWORD *)&v208 + 1);
              v11 = (uint64_t *)v208;
              if ((uint64_t *)v208 == v13 && *((_QWORD *)&v208 + 1) == 0)
                return 1;
            }
          }
          return 1;
        }
      }
      return 0;
    case 0x3F:
      v75 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v75)
        return 1;
      v76 = a2 + 24;
      v77 = 8 * v75;
      for (nn = (_QWORD *)(a2 + 24); (sub_22EBA5470(a1, *nn, 0) & 1) != 0; ++nn)
      {
        v77 -= 8;
        if (!v77)
        {
          v79 = *(unsigned int *)(a2 + 16);
          if (!(_DWORD)v79)
            return 1;
          v80 = 8 * v79;
          for (i1 = (_QWORD *)(v76 + 8 * v79); (sub_22EBA5470(a1, *i1, 0) & 1) != 0; ++i1)
          {
            v80 -= 8;
            if (!v80)
              return 1;
          }
          return 0;
        }
      }
      return 0;
    case 0x42:
      if (!sub_22EBB4F48(a1, *(_QWORD *)(a2 + 64), *(_QWORD *)(a2 + 72)))
        return 0;
      v208 = *(_OWORD *)(a2 + 80);
      v209 = *(_QWORD *)(a2 + 96);
      if (!sub_22EBB4FD0(a1, (uint64_t *)&v208))
        return 0;
      v140 = a2 + 104;
      v141 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v141)
        goto LABEL_228;
      v142 = 8 * v141;
      v143 = (_QWORD *)(a2 + 104);
      while ((sub_22EBA5470(a1, *v143, 0) & 1) != 0)
      {
        ++v143;
        v142 -= 8;
        if (!v142)
        {
LABEL_228:
          if (sub_22EBA5470(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EBA5470(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v144 = *(unsigned int *)(a2 + 16);
            if ((_DWORD)v144)
            {
              v145 = 8 * v144;
              v146 = (_QWORD *)(v140 + 8 * v144);
              while ((sub_22EBA5470(a1, *v146, 0) & 1) != 0)
              {
                ++v146;
                v145 -= 8;
                if (!v145)
                {
                  v147 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v147)
                    goto LABEL_246;
                  v148 = (_QWORD *)(v140 + 8 * v147 + 8 * v147);
                  v149 = 8 * v147;
                  while ((sub_22EBA5470(a1, *v148, 0) & 1) != 0)
                  {
                    ++v148;
                    v149 -= 8;
                    if (!v149)
                    {
                      v150 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v150)
                        goto LABEL_246;
                      v151 = (_QWORD *)(v140 + 8 * v150 + 8 * v150 + 8 * v150);
                      v152 = 8 * v150;
                      while ((sub_22EBA5470(a1, *v151, 0) & 1) != 0)
                      {
                        ++v151;
                        v152 -= 8;
                        if (!v152)
                        {
                          v153 = *(unsigned int *)(a2 + 16);
                          if (!(_DWORD)v153)
                            goto LABEL_246;
                          v154 = (_QWORD *)(v140 + 8 * v153 + 8 * v153 + 8 * v153 + 8 * v153);
                          v155 = 8 * v153;
                          while ((sub_22EBA5470(a1, *v154, 0) & 1) != 0)
                          {
                            ++v154;
                            v155 -= 8;
                            if (!v155)
                              goto LABEL_246;
                          }
                          return 0;
                        }
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
            else
            {
LABEL_246:
              if (*(_DWORD *)(a2 + 48) != 1)
                return 1;
              v156 = *(unsigned int *)(a2 + 16);
              if (!(_DWORD)v156)
                return 1;
              v157 = (_QWORD *)(v140 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156 + 8 * v156);
              v158 = 8 * v156;
              while ((sub_22EBA5470(a1, *v157, 0) & 1) != 0)
              {
                ++v157;
                v158 -= 8;
                if (!v158)
                {
                  v159 = *(unsigned int *)(a2 + 16);
                  if (!(_DWORD)v159)
                    return 1;
                  v160 = (_QWORD *)(v140 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159 + 8 * v159);
                  v161 = 8 * v159;
                  while ((sub_22EBA5470(a1, *v160, 0) & 1) != 0)
                  {
                    ++v160;
                    v161 -= 8;
                    if (!v161)
                    {
                      v162 = *(unsigned int *)(a2 + 16);
                      if (!(_DWORD)v162)
                        return 1;
                      v163 = (_QWORD *)(v140 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162 + 8 * v162);
                      v164 = 8 * v162;
                      while ((sub_22EBA5470(a1, *v163, 0) & 1) != 0)
                      {
                        ++v163;
                        v164 -= 8;
                        if (!v164)
                          return 1;
                      }
                      return 0;
                    }
                  }
                  return 0;
                }
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x47:
      result = sub_22EBA5470(a1, *(_QWORD *)(a2 + 16), 0);
      if (!(_DWORD)result)
        return result;
      v5 = *(_QWORD *)(a2 + 64);
      return (sub_22EBA5470(a1, v5, 0) & 1) != 0;
    case 0x49:
      v202 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v202)
        return 1;
      v203 = (_QWORD *)(a2 + 24);
      v204 = 8 * v202;
      while ((sub_22EBA5470(a1, *v203, 0) & 1) != 0)
      {
        ++v203;
        v204 -= 8;
        if (!v204)
          return 1;
      }
      return 0;
    case 0x4C:
      v165 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v165)
        return 1;
      v166 = (_QWORD *)(a2 + 24);
      v167 = 8 * v165;
      while ((sub_22EBA5470(a1, *v166, 0) & 1) != 0)
      {
        ++v166;
        v167 -= 8;
        if (!v167)
          return 1;
      }
      return 0;
    case 0x4D:
      if (!sub_22EBB4F48(a1, *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64)))
        return 0;
      v208 = *(_OWORD *)(a2 + 72);
      v209 = *(_QWORD *)(a2 + 88);
      if (!sub_22EBB4FD0(a1, (uint64_t *)&v208))
        return 0;
      v24 = a2 + 96;
      v25 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v25)
        goto LABEL_49;
      v26 = 8 * v25;
      v27 = (_QWORD *)(a2 + 96);
      while ((sub_22EBA5470(a1, *v27, 0) & 1) != 0)
      {
        ++v27;
        v26 -= 8;
        if (!v26)
        {
LABEL_49:
          if (sub_22EBA5470(a1, *(_QWORD *)(a2 + 24), 0)
            && sub_22EBA5470(a1, *(_QWORD *)(a2 + 40), 0))
          {
            v28 = *(unsigned int *)(a2 + 16);
            if (!(_DWORD)v28)
              return 1;
            v29 = 8 * v28;
            for (i2 = (_QWORD *)(v24 + 8 * v28); (sub_22EBA5470(a1, *i2, 0) & 1) != 0; ++i2)
            {
              v29 -= 8;
              if (!v29)
              {
                v31 = *(unsigned int *)(a2 + 16);
                if (!(_DWORD)v31)
                  return 1;
                v32 = (_QWORD *)(v24 + 8 * v31 + 8 * v31);
                v33 = 8 * v31;
                while ((sub_22EBA5470(a1, *v32, 0) & 1) != 0)
                {
                  ++v32;
                  v33 -= 8;
                  if (!v33)
                  {
                    v34 = *(unsigned int *)(a2 + 16);
                    if (!(_DWORD)v34)
                      return 1;
                    v35 = (_QWORD *)(v24 + 8 * v34 + 8 * v34 + 8 * v34);
                    v36 = 8 * v34;
                    while ((sub_22EBA5470(a1, *v35, 0) & 1) != 0)
                    {
                      ++v35;
                      v36 -= 8;
                      if (!v36)
                      {
                        v37 = *(unsigned int *)(a2 + 16);
                        if (!(_DWORD)v37)
                          return 1;
                        v38 = (_QWORD *)(v24 + 8 * v37 + 8 * v37 + 8 * v37 + 8 * v37);
                        v39 = 8 * v37;
                        while ((sub_22EBA5470(a1, *v38, 0) & 1) != 0)
                        {
                          ++v38;
                          v39 -= 8;
                          if (!v39)
                            return 1;
                        }
                        return 0;
                      }
                    }
                    return 0;
                  }
                }
                return 0;
              }
            }
          }
          return 0;
        }
      }
      return 0;
    case 0x51:
      v16 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v16)
        return 1;
      v17 = (_QWORD *)(a2 + 104);
      v18 = 8 * v16;
      while ((sub_22EBA5470(a1, *v17, 0) & 1) != 0)
      {
        ++v17;
        v18 -= 8;
        if (!v18)
          return 1;
      }
      return 0;
    case 0x59:
      v205 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v205)
        return 1;
      v206 = (_QWORD *)(a2 + 80);
      v207 = 8 * v205;
      while ((sub_22EBA5470(a1, *v206, 0) & 1) != 0)
      {
        ++v206;
        v207 -= 8;
        if (!v207)
          return 1;
      }
      return 0;
    case 0x5A:
      v196 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v196)
        return 1;
      v197 = (_QWORD *)(a2 + 80);
      v198 = 8 * v196;
      while ((sub_22EBA5470(a1, *v197, 0) & 1) != 0)
      {
        ++v197;
        v198 -= 8;
        if (!v198)
          return 1;
      }
      return 0;
    case 0x5B:
      v19 = *(unsigned int *)(a2 + 16);
      if (!(_DWORD)v19)
        return 1;
      v20 = 0;
      v21 = a2 + 24;
      v22 = 2 * v19;
      break;
    default:
      return 1;
  }
  while (1)
  {
    v23 = *(_QWORD *)(v21 + 8 * (v20 + 1));
    result = sub_22EBA5470(a1, *(_QWORD *)(v21 + 8 * v20), 0);
    if (!(_DWORD)result)
      break;
    if ((sub_22EBA5470(a1, v23, 0) & 1) == 0)
      return 0;
    v20 += 2;
    if (v22 == v20)
      return 1;
  }
  return result;
}

uint64_t sub_22EBB7934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 == v3)
    v5 = 0;
  else
    v5 = *(uint64_t **)(a2 + 24);
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *(uint64_t **)(a2 + 16);
  v14 = 0;
  v15 = 0;
  v13 = v6;
  if (v6 == v5)
    return 1;
  v9 = 0;
  while (1)
  {
    if ((v9 & 3) == 0)
    {
      result = sub_22EBA5470(a1, *v6, a3);
      if (!(_DWORD)result)
        return result;
      v13 = v6 + 1;
      goto LABEL_18;
    }
    v10 = (_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFCLL) != 0 ? (v9 & 0xFFFFFFFFFFFFFFFCLL) + 40 : sub_22F3AC1A8(*v6));
    if ((sub_22EBA5470(a1, *v10, a3) & 1) == 0)
      return 0;
    if (v9 < 4)
      sub_22F3F2FE0((uint64_t)&v13, 1);
    else
      sub_22F0D8720((uint64_t)&v13);
LABEL_18:
    v6 = v13;
    v9 = v14;
    if (v13 == v5 && v14 == 0)
      return 1;
  }
}

unint64_t sub_22EBB7A2C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v8;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v6 = *(_QWORD *)a1 + 40 * v4;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_22F2F3FD8(a1);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_22F2F3FD8(a1);
    }
  }
  return v3;
}

uint64_t sub_22EBB7A94(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  __int128 v36[5];
  void *v37;
  uint64_t v38;
  _QWORD v39[12];

  v39[10] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3));
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 == *(_QWORD *)(*(_QWORD *)(*a1 + 88) + 16848))
  {
    v6 = sub_22EFFAC68(*(unsigned __int8 **)((char *)a2 + *((unsigned __int8 *)a2 + 3)));
    v7 = 0;
LABEL_8:
    v11 = 3513;
    goto LABEL_9;
  }
  v8 = v5 & 0xFFFFFFFFFFFFFFF0;
  v9 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(v9 + 16);
  if (v9 && v10 == 39)
  {
LABEL_7:
    v6 = *(_QWORD *)(v9 + 32);
    v7 = 1;
    goto LABEL_8;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39)
  {
    v9 = sub_22F10CF48(v9);
    if (v9)
      goto LABEL_7;
    v9 = *(_QWORD *)v8;
    v10 = *(unsigned __int8 *)(*(_QWORD *)v8 + 16);
  }
  if (v10 != 10)
    v9 = sub_22F10CF48(v9);
  v6 = *(_QWORD *)(v9 + 32);
  v7 = 2;
  v11 = 2957;
LABEL_9:
  v12 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if (v12)
    v13 = *(unsigned __int8 *)(v12 + 16) - 27 > 0xFFFFFFFD;
  else
    v13 = 0;
  if (!v13)
    v12 = sub_22F10CF48(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
  v14 = a1 + 1;
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                  + 16) & 0xFEu)
     - 2 <= 3)
  {
    v15 = (_QWORD *)*a1;
LABEL_17:
    sub_22EFF605C((uint64_t)a2);
    sub_22E8FCA40(v15, v16, v11, 0, (uint64_t)&v37);
    LOBYTE(v36[0]) = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v14 & 0xFFFFFFFFFFFFFFF0)
                                                                              + 8) & 0xFFFFFFFFFFFFFFF0)
                                                      + 16)
                   - 25 < 2;
    v17 = sub_22E894E38((uint64_t)&v37, (unsigned __int8 *)v36);
    sub_22E8901B8(v17, a1 + 1);
    sub_22E903BEC((unsigned int *)&v37);
    return 1;
  }
  v15 = (_QWORD *)*a1;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                                                + 16)
     - 25 <= 1)
    goto LABEL_17;
  *((_QWORD *)a2 + 1) = sub_22F1133DC(a1 + 1, v15[11]);
  *a2 = *a2 & 0xFFFFFCFF | ((sub_22E8BBBD0(*v14) & 3) << 8);
  if (*(_BYTE *)(v12 + 16) != 26 || v12 == 0)
  {
    v20 = a1[1];
    v21 = *(_QWORD *)(*a1 + 88);
    LOWORD(v37) = *(_DWORD *)(v12 + 16) >> 19;
    a1[1] = sub_22F369930(v21, v20, (unsigned __int16 *)&v37);
  }
  else
  {
    v35 = v7;
    v22 = (uint64_t *)(v12 + 40);
    v23 = *(_QWORD *)(v12 + 16);
    v24 = (unsigned __int16)(v23 >> 38);
    v37 = v39;
    v38 = 0x800000000;
    if (!(unsigned __int16)(v23 >> 38))
    {
      if ((v23 & 0x800000000000000) != 0)
      {
        v25 = a2[4];
        if (v25 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v25 = a2[4];
        }
        if (v25)
        {
          v26 = 0;
          v27 = 8 * v25;
          do
          {
            v28 = sub_22EF67758(*(_QWORD *)(*a1 + 88), *(_QWORD *)((char *)&a2[2 * (((unint64_t)*a2 >> 18) & 1) + 2 + v26 / 4]+ ((unint64_t)*a2 >> 24)));
            v29 = v38;
            if (v38 >= (unint64_t)HIDWORD(v38))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v29 = v38;
            }
            *((_QWORD *)v37 + v29) = v28;
            v30 = v38 + 1;
            LODWORD(v38) = v38 + 1;
            v26 += 8;
          }
          while (v27 != v26);
        }
        else
        {
          v30 = v38;
        }
        v22 = (uint64_t *)v37;
        v24 = v30;
      }
      else
      {
        v24 = 0;
      }
    }
    v31 = a1[1];
    v32 = *(_QWORD *)(*a1 + 88);
    sub_22E4913B4(v12, (uint64_t)v36);
    a1[1] = sub_22EF63D8C(v32, v31, v22, v24, v36, 0);
    if (v37 != v39)
      free(v37);
    v7 = v35;
  }
  if (v7 == 1)
  {
    v33 = sub_22EF5B848(*(_QWORD *)(*a1 + 88), a1[1], 0);
  }
  else
  {
    if (v7 != 2)
      goto LABEL_50;
    v33 = sub_22F36A4F8(*(_QWORD *)(*a1 + 88), a1[1]);
  }
  *v14 = v33;
LABEL_50:
  v34 = sub_22EB53364(a1, v4);
  if (v34 < 2)
    return 1;
  *(_QWORD *)((char *)a2 + *((unsigned __int8 *)a2 + 3)) = v34 & 0xFFFFFFFFFFFFFFFELL;
  return sub_22EBCC6C0(*a1, (uint64_t)a2);
}

unsigned int *sub_22EBB7E6C(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8[24];

  sub_22EFF605C(a2);
  sub_22E8FCA40(a1, v4, 0x13D9u, 0, (uint64_t)v8);
  sub_22F0D4E74(a2);
  v7 = v5;
  sub_22E8906A0((uint64_t)v8, &v7);
  return sub_22E903BEC(v8);
}

uint64_t sub_22EBB7ED4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int i;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  _QWORD v73[18];

  v3 = a3;
  v4 = (unsigned __int8 *)a2;
  v73[16] = *MEMORY[0x24BDAC8D0];
  v70 = a3;
  v6 = a1[1];
  if (!a3 || (*(_DWORD *)(a3 + 28) & 0x7Eu) - 58 < 0xFFFFFFFA)
  {
    if ((*(_DWORD *)(a3 + 28) & 0x7Fu) - 60 > 6)
    {
      v15 = *a1;
      sub_22EFF605C(a2);
      v17 = v16;
      v18 = (_QWORD *)v15;
      v19 = 5080;
      goto LABEL_65;
    }
    v12 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 16);
      if ((v13 & 0xFE) == 0x28)
      {
        if ((v13 & 0x100000) != 0)
        {
          do
          {
LABEL_13:
            while (1)
            {
              v12 = *(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0);
              if (!v12)
                break;
              v14 = *(_DWORD *)(v12 + 16);
              if ((v14 & 0xFE) != 0x28)
                break;
              if ((v14 & 0x100000) == 0)
                goto LABEL_23;
            }
            v12 = sub_22F10CF48(v12);
          }
          while ((*(_DWORD *)(v12 + 16) & 0x100000) != 0);
        }
        goto LABEL_23;
      }
    }
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) == 0x28)
    {
      v12 = sub_22F10CF48(v12);
      if (v12)
      {
        if ((*(_DWORD *)(v12 + 16) & 0x100000) != 0)
          goto LABEL_13;
LABEL_23:
        v6 = *(_QWORD *)(v12 + 32);
        goto LABEL_67;
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0)
                               + 16);
    }
    else
    {
      v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if ((v20 - 25) <= 1)
    {
      v47 = (_QWORD *)*a1;
      sub_22EFF605C((uint64_t)v4);
      v17 = v48;
      v18 = v47;
      v19 = 5070;
      goto LABEL_65;
    }
LABEL_67:
    v51 = 256;
LABEL_110:
    *(_QWORD *)(v3 + 48) = a1[1];
    *((_QWORD *)v4 + 1) = v6;
    *(_DWORD *)v4 = *(_DWORD *)v4 & 0xFFFFFCFF | v51;
    return (uint64_t)v4;
  }
  v7 = v6 & 0xFFFFFFFFFFFFFFF0;
  v8 = *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0);
  if (v8 && *(_BYTE *)(v8 + 16) == 39)
  {
LABEL_7:
    a1[1] = *(_QWORD *)(v8 + 32);
    v10 = sub_22EBB7ED4(a1, v4, v3);
    if ((v10 & 1) == 0)
      return sub_22E90092C(*a1, v10 & 0xFFFFFFFFFFFFFFFELL, v6, 13, 0, 0);
    return 1;
  }
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v9 == 39)
  {
    v8 = sub_22F10CF48(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF0));
    if (v8)
      goto LABEL_7;
    v8 = *(_QWORD *)v7;
    v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if ((v9 - 25) < 2)
  {
    if (*(_BYTE *)(v8 + 16) == 26 || v9 == 26 && (v8 = sub_22F10CF48(v8)) != 0)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFFFF0);
      v22 = *(unsigned __int8 *)(v21 + 16);
      if (v21)
        v23 = (v22 - 27) > 0xFFFFFFFD;
      else
        v23 = 0;
      if (!v23)
      {
        v21 = sub_22F10CF48(v21);
        if (!v21)
          goto LABEL_101;
        v22 = *(unsigned __int8 *)(v21 + 16);
      }
      if (v22 == 26)
        v24 = v21;
      else
        v24 = 0;
      v25 = *v4;
      if (v25 == 161)
        v26 = v4;
      else
        v26 = 0;
      if (v25 == 161 && v24 && (*(_QWORD *)(v24 + 16) & 0x83FFFC000000000) == 0x800000000000000)
      {
        v67 = (uint64_t)v26;
        v68 = *(_DWORD *)(v3 + 24);
        v66 = *(_QWORD *)(*a1 + 88);
        v27 = *(_QWORD *)(v3 + 16);
        v28 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFFFF8);
        if ((v27 & 4) != 0)
          v28 = (_QWORD *)*v28;
        v29 = *(_QWORD *)(v3 + 40);
        v65 = a1[1];
        v30 = *(_QWORD *)(v3 + 56);
        v31 = v30 & 0xFFFFFFFFFFFFFFF8;
        if ((v30 & 4) != 0)
          v31 = *(_QWORD *)(v31 + 32);
        v32 = (*(_DWORD *)(*a1 + 56) & 0xFC) != 4;
        v33 = (*(_QWORD *)(v3 + 80) & 0x300000) != 0;
        v71 = *(void **)(v3 + 40);
        LODWORD(v72) = v68;
        sub_22EFC6D6C((uint64_t)v73, v29);
        v34 = sub_22EFC4400(v66, (uint64_t)v28, v68, (uint64_t *)&v71, v65, v31, 0, v32, 0, v33, 0, 0);
        v35 = v34;
        v36 = *(_QWORD *)(v3 + 56);
        if ((v36 & 4) != 0)
        {
          v37 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFFFF8);
          if (*v37)
            sub_22EFBB0DC(v34, *v37, v37[1]);
        }
        v71 = v73;
        v72 = 0x1000000000;
        v38 = (unsigned __int16)(*(_QWORD *)(v8 + 16) >> 38);
        if ((unsigned __int16)(*(_QWORD *)(v8 + 16) >> 38))
        {
          v39 = (unint64_t *)(v8 + 40);
          v40 = 8 * v38;
          do
          {
            v41 = sub_22F31DD6C(*a1, v3 + 72, v68, *v39);
            v42 = v41;
            v43 = v72;
            v44 = *(_DWORD *)(v41 + 96);
            *(_DWORD *)(v41 + 96) = v44 & 0xFFF01FFF;
            if (v43 >= 0xFF)
            {
              sub_22F3AC2B8(v41, v43);
              v43 = v72;
            }
            else
            {
              *(_DWORD *)(v41 + 96) = v44 & 0xF0001FFF | (v43 << 20);
            }
            if (v43 >= HIDWORD(v72))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v43 = v72;
            }
            *((_QWORD *)v71 + v43) = v42;
            v38 = (v72 + 1);
            LODWORD(v72) = v72 + 1;
            ++v39;
            v40 -= 8;
          }
          while (v40);
          v52 = v71;
        }
        else
        {
          v52 = v73;
        }
        if (!v35 || (v53 = v35, (*(_DWORD *)(v35 + 28) & 0x7F) != 0x53))
        {
          v54 = *(_QWORD *)(v35 + 16);
          v55 = v54 & 0xFFFFFFFFFFFFFFF8;
          if ((v54 & 4) != 0)
            v55 = *(_QWORD *)v55;
          for (i = *(_WORD *)(v55 + 8) & 0x7F; i != 83; i = *(_WORD *)(v55 + 8) & 0x7F)
          {
            v57 = -40;
            if (i > 70)
            {
              if (i == 71)
              {
                v57 = -56;
              }
              else if (i != 81)
              {
                goto LABEL_84;
              }
            }
            else
            {
              if (i > 0x18)
                goto LABEL_83;
              if (i == 16)
                goto LABEL_77;
              if (((1 << i) & 0x1066) != 0)
                goto LABEL_90;
              if (i == 24)
              {
LABEL_77:
                v57 = -48;
              }
              else
              {
LABEL_83:
                if (i != 70)
                {
LABEL_84:
                  v58 = i - 52;
                  if ((i - 33) >= 5)
                    v59 = -48;
                  else
                    v59 = -64;
                  if (v58 >= 6)
                    v57 = v59;
                  else
                    v57 = -72;
                  goto LABEL_90;
                }
                v57 = -64;
              }
            }
LABEL_90:
            v60 = *(_QWORD *)(v55 + v57 + 16);
            v55 = v60 & 0xFFFFFFFFFFFFFFF8;
            if ((v60 & 4) != 0)
              v55 = *(_QWORD *)v55;
          }
          v53 = v55 - 40;
        }
        if (v38)
        {
          v61 = 8 * v38;
          v62 = (void *)sub_22E3CD3D4(*(_QWORD *)(v53 + 88) + 2032, 8 * v38, 3);
          *(_QWORD *)(v35 + 120) = v62;
          memmove(v62, v52, v61);
        }
        sub_22EFF6F50(v67, v35);
        v70 = *(_QWORD *)(v67 + 16);
        if (v71 != v73)
          free(v71);
      }
    }
LABEL_101:
    if ((*(_DWORD *)(v3 + 28) & 0x7Eu) - 58 > 0xFFFFFFFB
      && (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3) + 80) & 0xE000) != 0x4000)
    {
      if ((*(_QWORD *)(v3 + 40) & 7) == 6)
      {
        v63 = *a1;
        if ((*(_DWORD *)(*(_QWORD *)(v3 + 40) & 0xFFFFFFFFFFFFFFF8) - 1) < 4)
          goto LABEL_106;
      }
      else
      {
        v63 = *a1;
      }
      v64 = 0;
      v6 = *(_QWORD *)(*(_QWORD *)(v63 + 88) + 16848);
      goto LABEL_109;
    }
    v63 = *a1;
LABEL_106:
    v64 = 256;
LABEL_109:
    v51 = (*(unsigned __int8 *)(*(_QWORD *)(v63 + 72) + 1) << 31 >> 31) & v64;
    v3 = v70;
    goto LABEL_110;
  }
  v45 = *a1;
  sub_22EFF605C((uint64_t)v4);
  v17 = v46;
  v18 = (_QWORD *)v45;
  v19 = 5069;
LABEL_65:
  sub_22E8FCA40(v18, v17, v19, 0, (uint64_t)&v71);
  v49 = sub_22E890024((uint64_t)&v71, &v70);
  sub_22F0D4E74((uint64_t)v4);
  v69 = v50;
  sub_22E8906A0(v49, &v69);
  sub_22E903BEC((unsigned int *)&v71);
  return 1;
}

unint64_t sub_22EBB85D8(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  BOOL v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[12];
  unint64_t v34;
  int v35;

  v35 = a3;
  v10 = sub_22EAA96DC((uint64_t)a1, a4, a5);
  v34 = v10;
  v11 = sub_22EFC7ADC(v10 + 64);
  v12 = *(_QWORD *)(a5 + 8);
  if (v11)
    v13 = a6 == 0;
  else
    v13 = 0;
  if (v13)
  {
    if (v12)
      return sub_22EF65A30(a1[11], 6, v12, a2, 0);
    v14 = 0;
  }
  else
  {
    v14 = v12 != 0;
  }
  if (*(_DWORD *)(a5 + 4))
    v16 = *(_DWORD *)a5 == 0;
  else
    v16 = 1;
  v17 = v16 && !v14;
  if (v17 || (v10 ? (v18 = v10 + 64) : (v18 = 0), v19 = 0, (sub_22E958490(a1, a5, v18) & 1) == 0))
  {
    v20 = sub_22EFCE144(v10 + 64, a2);
    if (v20)
    {
      while (1)
      {
        v21 = (unint64_t *)(v20 & 0xFFFFFFFFFFFFFFF8);
        v22 = (v20 & 0xFFFFFFFFFFFFFFF8) == 0 || (v20 & 4) == 0;
        v23 = v20 & 0xFFFFFFFFFFFFFFF8;
        if (!v22)
          v23 = *v21;
        if (v23 && (*(_DWORD *)(v23 + 28) & 0x7Fu) - 38 >= 0xFFFFFFFD && sub_22EFC3A88(v23))
          break;
        if (!v22)
        {
          v20 = v21[1];
          if (v20)
            continue;
        }
        goto LABEL_31;
      }
      v27 = *(_QWORD *)(v23 + 48);
      if (v27)
        v19 = v27 & 0xFFFFFFFFFFFFFFF0;
      else
        v19 = sub_22EF6462C(a1[11], v23);
      sub_22EB17F48((uint64_t)a1, (_DWORD *)v23, (unsigned int *)&v35, 1, 0, 0, 0, 0);
      if ((*(_DWORD *)(v23 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA)
        sub_22EB4E494((uint64_t)a1, v35, v23, 0, v28, v29, v30, v31);
      else
        *(_DWORD *)(v23 + 28) |= 0x800u;
    }
    else
    {
LABEL_31:
      if ((*(_BYTE *)(v10 + 28) & 0x80) == 0)
      {
        if (*(_QWORD *)(a5 + 8))
        {
          v24 = *(_QWORD *)(a5 + 16);
          v33[0] = *(_QWORD *)(a5 + 8);
          v33[1] = v24;
          v25 = sub_22F0AB364(v33);
        }
        else
        {
          v25 = 0;
        }
        sub_22E8FCA40(a1, v25, 0xE03u, 0, (uint64_t)v33);
        v26 = sub_22E890024((uint64_t)v33, (uint64_t *)&v34);
        v32 = *(_QWORD *)a5;
        sub_22E8906A0(v26, &v32);
        sub_22E903BEC((unsigned int *)v33);
      }
      return 0;
    }
  }
  return v19;
}

unint64_t sub_22EBB87FC(_QWORD *a1, uint64_t a2, _QWORD *a3, unsigned int a4, uint64_t a5, uint64_t a6, unint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t *v9;
  BOOL v10;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int *v27;
  uint64_t v28;
  void **v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  const std::nothrow_t *v39;
  unint64_t v40;
  uint64_t *v41;
  BOOL v42;
  uint64_t *v43;
  unint64_t v44;
  unsigned int v45;
  int v47;
  _QWORD *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void **v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72[2];
  unsigned int *v73;
  uint64_t v74;
  __int16 v75;
  void *v76[2];
  char v77;
  _OWORD v78[2];
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[7];
  char v83;
  _QWORD v84[6];
  unint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  int v89;
  _BYTE v90[66];
  char v91;
  char v92;
  unsigned int v93;
  void *v94;
  uint64_t v95;
  _BYTE v96[64];
  void *v97[2];
  void *v98[2];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  unsigned int v104;
  uint64_t v105;
  __int128 v106;
  int v107;
  __int16 v108;
  char v109;
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  v93 = a4;
  v92 = a8;
  v9 = (uint64_t *)(a6 + 8);
  v8 = *(_QWORD *)(a6 + 8);
  if (*(_DWORD *)a6)
    v10 = *(_DWORD *)(a6 + 4) == 0;
  else
    v10 = 1;
  if (!v10 && v8 == 0)
    return 0;
  v91 = 0;
  v94 = v96;
  v95 = 0x800000000;
  v86 = v90;
  v87 = v90;
  v88 = 8;
  v89 = 0;
  if (a7 >= 0x10)
  {
    v17 = *(_QWORD *)(a7 & 0xFFFFFFFFFFFFFFF0);
    if (v17 && *(_BYTE *)(v17 + 16) == 57)
      a7 = *(_QWORD *)(v17 + 8);
  }
  else
  {
    a7 = 0;
  }
  v84[0] = &v85;
  v84[1] = a1;
  v84[2] = &v86;
  v84[3] = &v94;
  v84[4] = &v93;
  v84[5] = &v91;
  v85 = a7;
  v83 = 0;
  v82[0] = &v91;
  v82[1] = &v83;
  v82[2] = a1;
  v82[3] = &v92;
  v82[4] = a3;
  v82[5] = &v93;
  v82[6] = v84;
  if (v8)
  {
    v18 = *(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v18)
    {
      *(_OWORD *)v97 = 0u;
      *(_OWORD *)v98 = 0u;
      sub_22E8ACE30((uint64_t)v97, v18, *(_QWORD *)(a6 + 16));
      v16 = sub_22EBB92C8((uint64_t)v82, (uint64_t)v97);
      if (!HIDWORD(v98[1]))
        goto LABEL_43;
      v19 = v98[0];
      goto LABEL_18;
    }
  }
  if (a5)
  {
    v97[0] = 0;
    v97[1] = &v98[1];
    v98[0] = (void *)0x800000000;
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v102 = a1;
    v103 = a3;
    v104 = a4;
    sub_22EFC6D6C((uint64_t)&v105, (uint64_t)a3);
    v106 = xmmword_22F481F50;
    v107 = 16842752;
    v108 = 0;
    v109 = 0;
    sub_22EC56024((uint64_t)v97);
    sub_22EC63520(a1, v97, a5, 0, 0);
    v16 = sub_22EBCF790((uint64_t)v84, (uint64_t)v97);
    if (HIBYTE(v107))
    {
      if (LODWORD(v97[0]) == 5)
      {
        sub_22EC64D18(v102, (uint64_t)v97);
      }
      else if (v100 && (*(_DWORD *)(v102[9] + 52) & 0x400000) != 0)
      {
        sub_22E90B5FC((unint64_t)v102, (uint64_t)v97);
      }
    }
    if (v99)
    {
      v69 = sub_22EC6CBD0(v99);
      MEMORY[0x2348A0E9C](v69, 0x10E0C409F09D3C3);
    }
    if (v97[1] == &v98[1])
    {
      if (v16)
        goto LABEL_86;
    }
    else
    {
      free(v97[1]);
      if (v16)
        goto LABEL_86;
    }
    if (v91)
    {
LABEL_45:
      v16 = 0;
      goto LABEL_86;
    }
    a7 = v85;
  }
  if (a7 < 0x10)
  {
LABEL_44:
    if (v91)
      goto LABEL_45;
    if (v83)
    {
      if (*v9)
      {
        v21 = sub_22F0ABC50(v9, a1[11]);
        v22 = v31;
      }
      else
      {
        v21 = 0;
        v22 = 0;
      }
      v16 = sub_22ED717D8(a1, 6, 0, v21, v22, (uint64_t)a3, v93, 1);
      goto LABEL_86;
    }
    v23 = v95;
    if (*v9)
    {
      v24 = sub_22EBB92C8((uint64_t)v82, a6);
      if (v24)
      {
        v16 = v24;
        sub_22E8FCA40(a1, *(_DWORD *)(a6 + 4), 0x1465u, 0, (uint64_t)v97);
        v81 = *(_QWORD *)a6;
        v25 = sub_22E8906A0((uint64_t)v97, &v81);
        v26 = *(_DWORD *)(a6 + 4);
        v27 = (unsigned int *)a3[2];
        v28 = *v27;
        v75 = 1283;
        v72[0] = "::";
        v73 = v27 + 4;
        v74 = v28;
        llvm::Twine::str((llvm::Twine *)v72);
        if (v77 >= 0)
          v29 = v76;
        else
          v29 = (void **)v76[0];
        if (v77 >= 0)
          v30 = v77 & 0x7F;
        else
          v30 = (size_t)v76[1];
        sub_22E729148(v29, v30, v26, 0, (uint64_t)v78);
        sub_22E890748(v25, v78);
        if (SHIBYTE(v79) < 0)
          operator delete(*((void **)&v78[1] + 1));
        if (v77 < 0)
          operator delete(v76[0]);
LABEL_85:
        sub_22E903BEC((unsigned int *)v97);
        goto LABEL_86;
      }
      if (a5 && *(_QWORD *)(*v9 + 8) >= 8uLL && !v91)
      {
        v97[0] = 0;
        v97[1] = &v98[1];
        v98[0] = (void *)0x800000000;
        v99 = 0;
        v100 = 0;
        v101 = 0;
        v102 = a1;
        v103 = a3;
        v104 = v93;
        sub_22EFC6D6C((uint64_t)&v105, (uint64_t)a3);
        v106 = xmmword_22F481F50;
        v107 = 16842752;
        v108 = 0;
        v109 = 0;
        sub_22EC56024((uint64_t)v97);
        sub_22EC63520(a1, v97, a5, 0, 0);
        v16 = sub_22EBCF790((uint64_t)v84, (uint64_t)v97);
        if (HIBYTE(v107))
        {
          if (LODWORD(v97[0]) == 5)
          {
            sub_22EC64D18(v102, (uint64_t)v97);
          }
          else if (v100 && (*(_DWORD *)(v102[9] + 52) & 0x400000) != 0)
          {
            sub_22E90B5FC((unint64_t)v102, (uint64_t)v97);
          }
        }
        if (v99)
        {
          v71 = sub_22EC6CBD0(v99);
          MEMORY[0x2348A0E9C](v71, 0x10E0C409F09D3C3);
        }
        if (v97[1] == &v98[1])
        {
          if (v16)
          {
LABEL_75:
            sub_22E8FCA40(a1, *(_DWORD *)(a6 + 4), 0x14DAu, 0, (uint64_t)v97);
            v32 = *(_QWORD *)a6;
            *(_QWORD *)((char *)v78 + 12) = 0;
            BYTE4(v78[1]) = 0;
            v79 = 0uLL;
            *((_QWORD *)&v78[1] + 1) = 0;
            LOBYTE(v80) = 0;
            *(_QWORD *)&v78[0] = v32;
            BYTE8(v78[0]) = 1;
            sub_22E890748((uint64_t)v97, v78);
            if (SHIBYTE(v79) < 0)
              operator delete(*((void **)&v78[1] + 1));
            sub_22E903BEC((unsigned int *)v97);
            sub_22E8FCA40(a1, *(_DWORD *)(*((_QWORD *)v94 + v95 - 1) + 24), 0x15B8u, 0, (uint64_t)v97);
            if (v16 >= 0x10)
            {
              v34 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF0);
              v33 = v16;
              if (v34)
              {
                v33 = v16;
                if (*(_BYTE *)(v34 + 16) == 57)
                  v33 = *(_QWORD *)(v34 + 8);
              }
            }
            else
            {
              v33 = 0;
            }
            *(_QWORD *)&v78[0] = v33;
            sub_22E8901B8((uint64_t)v97, (uint64_t *)v78);
            goto LABEL_85;
          }
        }
        else
        {
          free(v97[1]);
          if (v16)
            goto LABEL_75;
        }
      }
    }
    sub_22E50D8F0((uint64_t)&v94, v23);
    v36 = (uint64_t *)v94;
    v37 = v95;
    v38 = (uint64_t *)((char *)v94 + 8 * v95);
    if (v95 < 0x81)
    {
LABEL_96:
      sub_22EC036B0(v36, v38, v37, 0, 0);
    }
    else
    {
      v39 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
      v40 = v95;
      while (1)
      {
        v41 = (uint64_t *)operator new(8 * v40, v39);
        if (v41)
          break;
        v42 = v40 > 1;
        v40 >>= 1;
        if (!v42)
          goto LABEL_96;
      }
      v43 = v41;
      sub_22EC036B0(v36, v38, v37, v41, v40);
      operator delete(v43);
    }
    if ((_DWORD)v95)
    {
      if ((_DWORD)v95 == 1 && v85 >= 0x10)
      {
        v44 = *(_QWORD *)v94;
        v45 = *(_DWORD *)(*(_QWORD *)v94 + 28) & 0x7F;
        if (v45 <= 0x2F && ((1 << v45) & 0xC00000060000) != 0)
        {
          v44 = sub_22EFBAEA4(*(_QWORD *)v94);
          v45 = *(_DWORD *)(v44 + 28) & 0x7F;
        }
        if (v45 - 43 < 0xFFFFFFF6)
        {
          v47 = v93;
          v48 = a1;
          v49 = 3251;
LABEL_109:
          sub_22E8FCA40(v48, v47, v49, 0, (uint64_t)v97);
          v76[0] = a3;
          v50 = sub_22E8BAE44((uint64_t)v97, (uint64_t *)v76);
          goto LABEL_119;
        }
        v53 = *(_QWORD *)(v44 + 48);
        if (v53)
          v54 = (void *)(v53 & 0xFFFFFFFFFFFFFFF0);
        else
          v54 = (void *)sub_22EF6462C(a1[11], v44);
        v76[0] = v54;
        sub_22E8FCA40(a1, v93, 0xCB4u, 0, (uint64_t)v97);
        v52 = sub_22E8901B8((uint64_t)v97, (uint64_t *)v76);
      }
      else
      {
        if (v85 >= 0x10)
          v51 = 3250;
        else
          v51 = 3254;
        sub_22E8FCA40(a1, v93, v51, 0, (uint64_t)v97);
        v76[0] = a3;
        v52 = sub_22E8BAE44((uint64_t)v97, (uint64_t *)v76);
      }
      v50 = sub_22E8901B8(v52, (uint64_t *)&v85);
LABEL_119:
      v55 = v50;
      if (v85 > 0xF)
      {
        v57 = sub_22F10C2A4(*(_QWORD *)(v85 & 0xFFFFFFFFFFFFFFF0));
        if (v57 && (*(_DWORD *)(v57 + 28) & 0x7Fu) - 35 <= 2)
          goto LABEL_144;
      }
      else if (a5)
      {
        v56 = *(_QWORD *)(a5 + 360);
        if (v56)
        {
          if ((*(_WORD *)(v56 + 8) & 0x7Fu) - 35 < 3)
          {
            v57 = v56 - 64;
LABEL_144:
            v66 = v93;
            sub_22EFC683C((uint64_t *)(v57 + 40), v72);
            if (SHIBYTE(v73) >= 0)
              v67 = v72;
            else
              v67 = (void **)v72[0];
            if (SHIBYTE(v73) >= 0)
              v68 = HIBYTE(v73) & 0x7F;
            else
              v68 = (size_t)v72[1];
            sub_22EBCFE20((uint64_t)v78, v66 | (v66 << 32), 1, v67, v68);
            if (SHIBYTE(v73) < 0)
              operator delete(v72[0]);
LABEL_126:
            sub_22E890748(v55, v78);
            if (SHIBYTE(v79) < 0)
              operator delete(*((void **)&v78[1] + 1));
            sub_22E903BEC((unsigned int *)v97);
            if ((_DWORD)v95)
            {
              v58 = (uint64_t *)v94;
              v59 = 8 * v95;
              do
              {
                v60 = *v58;
                *(_QWORD *)&v78[0] = v60;
                v61 = *(_DWORD *)(v60 + 28) & 0x7F;
                v62 = v61 > 0x2F || ((1 << v61) & 0xC00000060000) == 0;
                v63 = v60;
                if (!v62)
                {
                  v63 = sub_22EFBAEA4(v60);
                  v61 = *(_DWORD *)(v63 + 28) & 0x7F;
                }
                if (v61 - 43 >= 0xFFFFFFF6)
                {
                  sub_22E8FCA40(a1, *(_DWORD *)(v60 + 24), 0x15B8u, 0, (uint64_t)v97);
                  v64 = *(_QWORD *)(v63 + 48);
                  if (v64)
                    v65 = (void *)(v64 & 0xFFFFFFFFFFFFFFF0);
                  else
                    v65 = (void *)sub_22EF6462C(a1[11], v63);
                  v72[0] = v65;
                  sub_22E8901B8((uint64_t)v97, (uint64_t *)v72);
                }
                else
                {
                  sub_22E8FCA40(a1, *(_DWORD *)(v60 + 24), 0x15B7u, 0, (uint64_t)v97);
                  sub_22E890024((uint64_t)v97, (uint64_t *)v78);
                }
                sub_22E903BEC((unsigned int *)v97);
                v16 = 0;
                ++v58;
                v59 -= 8;
              }
              while (v59);
              goto LABEL_86;
            }
            goto LABEL_45;
          }
        }
      }
      v80 = 0;
      v79 = 0u;
      memset(v78, 0, sizeof(v78));
      goto LABEL_126;
    }
    v47 = v93;
    v48 = a1;
    v49 = 5042;
    goto LABEL_109;
  }
  v83 |= (*(_DWORD *)(*(_QWORD *)(a7 & 0xFFFFFFFFFFFFFFF0) + 16) & 0x400) != 0;
  v97[0] = 0;
  v97[1] = &v98[1];
  v98[0] = (void *)0x800000000;
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v102 = a1;
  v103 = a3;
  v104 = v93;
  sub_22EFC6D6C((uint64_t)&v105, (uint64_t)a3);
  v106 = xmmword_22F481F50;
  v107 = 16842752;
  v108 = 0;
  v109 = 0;
  sub_22EC56024((uint64_t)v97);
  v20 = sub_22E9580E4((uint64_t)a1, v85);
  if (v20)
  {
    sub_22EC611AC(a1, v97, v20, 0);
    v16 = sub_22EBCF790((uint64_t)v84, (uint64_t)v97);
  }
  else
  {
    v16 = 0;
  }
  if (HIBYTE(v107))
  {
    if (LODWORD(v97[0]) == 5)
    {
      sub_22EC64D18(v102, (uint64_t)v97);
    }
    else if (v100 && (*(_DWORD *)(v102[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v102, (uint64_t)v97);
    }
  }
  if (v99)
  {
    v70 = sub_22EC6CBD0(v99);
    MEMORY[0x2348A0E9C](v70, 0x10E0C409F09D3C3);
  }
  v19 = v97[1];
  if (v97[1] != &v98[1])
LABEL_18:
    free(v19);
LABEL_43:
  if (!v16)
    goto LABEL_44;
LABEL_86:
  if (v87 != v86)
    free(v87);
  if (v94 != v96)
    free(v94);
  return v16;
}

unint64_t sub_22EBB92C8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[64];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  _BYTE v24[24];
  int v25;
  __int16 v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (**(_BYTE **)a1)
    return 0;
  v5 = *(_QWORD **)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
    v7 = (sub_22F0AAC5C(v6) >> 2) & 1;
  else
    LOBYTE(v7) = 0;
  **(_BYTE **)(a1 + 8) |= v7;
  v8 = sub_22E958204((uint64_t)v5, a2, **(unsigned __int8 **)(a1 + 24));
  if (!v8)
    return 0;
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = **(_DWORD **)(a1 + 40);
  v14 = 0;
  v15 = v17;
  v16 = 0x800000000;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = v5;
  v22 = v10;
  v23 = v11;
  sub_22EFC6D6C((uint64_t)v24, v10);
  *(_OWORD *)&v24[8] = xmmword_22F481F50;
  v25 = 16842752;
  v26 = 0;
  v27 = 0;
  sub_22EC56024((uint64_t)&v14);
  if (sub_22E958490(v5, a2, v9))
  {
    v2 = 0;
    **(_BYTE **)a1 = 1;
  }
  else
  {
    sub_22EC611AC(v5, &v14, v9, 0);
    v2 = sub_22EBCF790(*(_QWORD *)(a1 + 48), (uint64_t)&v14);
  }
  if (HIBYTE(v25))
  {
    if ((_DWORD)v14 == 5)
    {
      sub_22EC64D18(v21, (uint64_t)&v14);
    }
    else if (v19 && (*(_DWORD *)(v21[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v21, (uint64_t)&v14);
    }
  }
  if (v18)
  {
    v13 = sub_22EC6CBD0(v18);
    MEMORY[0x2348A0E9C](v13, 0x10E0C409F09D3C3);
  }
  if (v15 != v17)
    free(v15);
  return v2;
}

uint64_t sub_22EBB94B4(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  void **v17;
  size_t v18;
  __int128 *p_dst;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[4];
  __int16 v25;
  void *v26[2];
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  __int128 __p;
  unint64_t v33;
  char v34;
  int v35;
  unsigned int v36[24];
  uint64_t v37;
  __int128 __dst;
  unint64_t v39;

  if ((a4 & 1) != 0)
    goto LABEL_27;
  v37 = *(_QWORD *)(a3 + 8);
  v7 = sub_22F1D31A0(v37, *(_QWORD *)(a1[10] + 56));
  if (v7 < 3)
    goto LABEL_27;
  v8 = v7;
  v9 = *(_DWORD *)(a3 + 28);
  v10 = sub_22F1E361C(*(_QWORD **)(a1[10] + 88), v9);
  if (v10 != 3 && v10 != 0)
    goto LABEL_27;
  sub_22E8FCA40(a1, v9, 0x1B2Bu, 0, (uint64_t)v36);
  v12 = sub_22E8BAE44((uint64_t)v36, &v37);
  v35 = v8;
  v13 = sub_22E8900C4(v12, &v35);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(unsigned int **)(v37 + 16);
  v16 = *v15;
  v24[0] = "operator\"\"";
  v24[1] = 10;
  v24[2] = v15 + 4;
  v24[3] = v16;
  v25 = 1285;
  llvm::Twine::str((llvm::Twine *)v24);
  if (v27 >= 0)
    v17 = v26;
  else
    v17 = (void **)v26[0];
  if (v27 >= 0)
    v18 = v27 & 0x7F;
  else
    v18 = (size_t)v26[1];
  v30 = 0;
  v31 = 0;
  v34 = 0;
  v28 = v14;
  v29 = 1;
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v18 >= 0x17)
  {
    v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v20 = v18 | 7;
    v21 = v20 + 1;
    p_dst = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&__dst + 1) = v18;
    v39 = v21 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v39) = v18;
    p_dst = &__dst;
    if (!v18)
      goto LABEL_22;
  }
  memmove(p_dst, v17, v18);
LABEL_22:
  *((_BYTE *)p_dst + v18) = 0;
  __p = __dst;
  v33 = v39;
  sub_22E890748(v13, &v28);
  if (SHIBYTE(v33) < 0)
    operator delete((void *)__p);
  if (v27 < 0)
    operator delete(v26[0]);
  sub_22E903BEC(v36);
LABEL_27:
  v22 = *(_QWORD *)(a2 + 8);
  if (!v22 || !*(_QWORD *)(v22 + 16) || (*(_QWORD *)(v22 + 8) & 6) == 2)
    return 0;
  sub_22E8FCA40(a1, *(_DWORD *)(a3 + 24), 0xE91u, 0, (uint64_t)v36);
  v28 = *(_QWORD *)(a2 + 8);
  sub_22EA02390((uint64_t)v36, &v28);
  sub_22E903BEC(v36);
  return 1;
}

uint64_t sub_22EBB9700(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;

  v25 = 0;
  v10 = a1[11];
  v11 = *a4;
  v12 = *(_QWORD *)(*a4 & 0xFFFFFFFFFFFFFFF0);
  if (!v12 || (v13 = *(_DWORD *)(v12 + 16), (v13 & 0xFE) != 0x28))
  {
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
      goto LABEL_4;
    v19 = v10;
    v12 = sub_22F10CF48(v12);
    v10 = v19;
    if (!v12)
      goto LABEL_4;
    v13 = *(_DWORD *)(v12 + 16);
  }
  if ((v13 & 0x100000) != 0)
  {
    do
    {
      v20 = v10;
      v12 = *(_QWORD *)(*(_QWORD *)(v12 + 32) & 0xFFFFFFFFFFFFFFF0);
      if (!v12 || (v21 = *(_DWORD *)(v12 + 16), (v21 & 0xFE) != 0x28))
      {
        v12 = sub_22F10CF48(v12);
        v21 = *(_DWORD *)(v12 + 16);
      }
      v10 = v20;
    }
    while ((v21 & 0x100000) != 0);
  }
  v11 = *(_QWORD *)(v12 + 32);
LABEL_4:
  v14 = sub_22EF67F34(v10, v11, &v25);
  v24 = v14;
  v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0);
  if (!v16 || *(_BYTE *)(v16 + 16) != 45)
  {
LABEL_8:
    if ((*(_BYTE *)(v15 + 17) & 8) != 0)
    {
      sub_22E8FCA40(a1, a3, 0x1409u, 0, (uint64_t)&v22);
      sub_22E8901B8((uint64_t)&v22, (uint64_t *)&v24);
      sub_22E903BEC((unsigned int *)&v22);
    }
    else if ((sub_22EE7DB78(a1, v14, a3) & 1) == 0)
    {
      v17 = sub_22E3CD3D4(a1[11] + 2032, 32, 3);
      sub_22F332AEC(v17, a2 | 1, (uint64_t)a4, a3 | (unint64_t)(a5 << 32));
      return v17;
    }
    return 1;
  }
  v22 = &unk_24FAB6EF8;
  v23 = 3595;
  v17 = 1;
  if ((sub_22EE8B0B0((uint64_t)a1, a3, v14) & 1) == 0)
  {
    v15 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_8;
  }
  return v17;
}

uint64_t sub_22EBB98E0(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30[24];
  uint64_t v31;
  void *v32;
  int v33;

  v8 = a5;
  v9 = (unint64_t)a4;
  if (!a4 || (*((_BYTE *)a4 + 1) & 0x80) != 0)
  {
    v19 = 0;
  }
  else
  {
    v13 = a4[1];
    v14 = v13 & 0xFFFFFFFFFFFFFFF0;
    v15 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
    if ((*(_DWORD *)(v15 + 16) & 0xFE00000u) >= 0x8180001 && v15 != 0 && *(_DWORD *)(v15 + 16) == 11)
    {
      v18 = sub_22EB19A28(a1);
      if ((v18 & 1) != 0)
        return 1;
      v9 = v18 & 0xFFFFFFFFFFFFFFFELL;
      v13 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v14 = v13 & 0xFFFFFFFFFFFFFFF0;
      v15 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF0);
    }
    v19 = 0;
    v20 = *(_QWORD *)(*(_QWORD *)(v15 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v20 && *(_BYTE *)(v20 + 16) == 45)
    {
      v21 = sub_22F114198(*(_QWORD *)(v20 + 24));
      v32 = &unk_24FAB6EF8;
      v33 = 3595;
      v22 = 1;
      if ((sub_22EE8B0B0(a1, a3, v13) & 1) != 0)
        return v22;
      sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v21 + 104) + 96), *(_QWORD *)(v21 + 104));
      if ((**(_QWORD **)(v21 + 128) & 0x400) != 0 && (*(_BYTE *)(v9 + 1) & 3) != 0)
      {
        v23 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576);
        if (v23 <= 3 && v23 != 2)
        {
          v29 = sub_22F32D9C4(a1, v9);
          if ((v29 & 1) != 0)
            return 1;
          v9 = v29 & 0xFFFFFFFFFFFFFFFELL;
        }
        sub_22EAB631C(a1, a3, v21, 0);
        v19 = 1;
      }
      else
      {
        v19 = 0;
      }
    }
    sub_22EB4E1D8((unsigned __int8 *)a1, (unsigned __int8 *)v9);
    if ((v9 & 1) != 0)
      return 1;
    v9 &= ~1uLL;
    v32 = 0;
    v28 = sub_22EF67F34(*(_QWORD *)(a1 + 88), v13, &v32);
    if ((*(_QWORD *)(v14 + 8) | v13 & 7) != (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFFF0) + 8) | v28 & 7))
      v9 = sub_22E90092C(a1, v9, v28, 5, (*(_DWORD *)v9 >> 8) & 3, 0) & 0xFFFFFFFFFFFFFFFELL;
  }
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a3, 0x1409u, 0, (uint64_t)&v32);
    v31 = *(_QWORD *)(v9 + 8);
    sub_22E8901B8((uint64_t)&v32, &v31);
    sub_22E903BEC((unsigned int *)&v32);
    return 1;
  }
  if (*(_DWORD *)(a1 + 10680) <= *(_DWORD *)(a1 + 11956)
    && sub_22F0005B0(v9, *(_QWORD *)(a1 + 88), v19, (uint64_t)a4, a5, a6, a7, a8))
  {
    sub_22EFF605C(v9);
    if ((_DWORD)v19)
      v27 = 6986;
    else
      v27 = 6987;
    sub_22E8FCA40((_QWORD *)a1, v26, v27, 0, (uint64_t)v30);
    sub_22E903BEC(v30);
  }
  v22 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 32, 3);
  sub_22F332B7C(v22, a2 | 1, v9, a3 | ((unint64_t)v8 << 32));
  return v22;
}

uint64_t sub_22EBB9BCC(_QWORD *a1, unsigned int a2, int a3, int a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38[24];
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  _BYTE v49[24];
  int v50;
  __int16 v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a1[9] + 60) & 1) != 0)
  {
    sub_22E8FCA40(a1, a2, 0x36u, 0, (uint64_t)&v39);
    sub_22F2F30F4((uint64_t)&v39, (uint64_t)"typeid");
    goto LABEL_43;
  }
  v10 = a6;
  v13 = a1[419];
  if ((v13 & 1) == 0)
  {
    if (v13)
      goto LABEL_4;
LABEL_28:
    v26 = a2;
    v27 = a1;
    v28 = 3989;
LABEL_42:
    sub_22E8FCA40(v27, v26, v28, 0, (uint64_t)&v39);
LABEL_43:
    sub_22E903BEC((unsigned int *)&v39);
    return 1;
  }
  v25 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[11] + 16048) + 16))(*(_QWORD *)(a1[11] + 16048), v13 >> 1);
  a1[419] = v25;
  if (!v25)
    goto LABEL_28;
LABEL_4:
  if (a1[427])
    goto LABEL_40;
  v14 = sub_22E3CB704((llvm::StringMapImpl *)(a1[10] + 544), "type_info", 9uLL);
  v39 = 0;
  v40 = v42;
  v41 = 0x800000000;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = a1;
  v47 = v14;
  v48 = 0;
  sub_22EFC6D6C((uint64_t)v49, v14);
  *(_OWORD *)&v49[8] = xmmword_22F4555C0;
  v50 = 16842752;
  v51 = 0;
  v52 = 0;
  sub_22EC56024((uint64_t)&v39);
  v15 = a1[419];
  if ((v15 & 1) != 0)
  {
    v15 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[11] + 16048) + 16))(*(_QWORD *)(a1[11] + 16048), v15 >> 1);
    a1[419] = v15;
  }
  if (v15)
    v16 = v15 + 48;
  else
    v16 = 0;
  sub_22EC611AC((uint64_t)a1, (uint64_t)&v39, v16, 0);
  if ((_DWORD)v39 == 2)
  {
    v17 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFFCLL;
    v18 = *(_DWORD *)(v17 + 28);
    if ((v18 & 0x7Fu) <= 0x2F && ((1 << (v18 & 0x7F)) & 0xC00000060000) != 0)
    {
      v17 = sub_22EFBAEA4(v17);
      v18 = *(_DWORD *)(v17 + 28);
    }
    if ((v18 & 0x7Eu) - 34 <= 3)
      goto LABEL_26;
  }
  a1[427] = 0;
  if ((*(_BYTE *)a1[9] & 0x10) != 0)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(a1[11] + 1960) + 80);
    v21 = sub_22E3CD31C((uint64_t *)(v20 + 72), v20);
    if (v21)
      v22 = v21 + 40;
    else
      v22 = 0;
    sub_22EC611AC((uint64_t)a1, (uint64_t)&v39, v22, 0);
    if ((_DWORD)v39 == 2)
    {
      v17 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFFCLL;
      v23 = *(_DWORD *)(v17 + 28);
      if ((v23 & 0x7Fu) <= 0x2F && ((1 << (v23 & 0x7F)) & 0xC00000060000) != 0)
      {
        v17 = sub_22EFBAEA4(v17);
        v23 = *(_DWORD *)(v17 + 28);
      }
      if ((v23 & 0x7Eu) - 34 < 4)
      {
LABEL_26:
        v24 = 0;
        a1[427] = v17;
        goto LABEL_31;
      }
    }
    a1[427] = 0;
  }
  sub_22E8FCA40(a1, a2, 0xF95u, 0, (uint64_t)v38);
  sub_22E903BEC(v38);
  v24 = 1;
LABEL_31:
  if (HIBYTE(v50))
  {
    if ((_DWORD)v39 == 5)
    {
      sub_22EC64D18(v46, (uint64_t)&v39);
    }
    else if (v44 && (*(_DWORD *)(v46[9] + 52) & 0x400000) != 0)
    {
      sub_22E90B5FC((unint64_t)v46, (uint64_t)&v39);
    }
  }
  if (v43)
  {
    v37 = sub_22EC6CBD0(v43);
    MEMORY[0x2348A0E9C](v37, 0x10E0C409F09D3C3);
  }
  if (v40 == v42)
  {
    if ((v24 & 1) != 0)
      return 1;
  }
  else
  {
    free(v40);
    if ((v24 & 1) != 0)
      return 1;
  }
LABEL_40:
  if ((*(_QWORD *)(a1[9] + 8) & 0x8000000000000) == 0)
  {
    v26 = a2;
    v27 = a1;
    v28 = 4021;
    goto LABEL_42;
  }
  v31 = a1[427];
  v32 = *(_QWORD *)(v31 + 48);
  if (v32)
  {
    v33 = v32 & 0xFFFFFFFFFFFFFFF0;
    if (a4)
      goto LABEL_48;
  }
  else
  {
    v33 = sub_22EF6462C(a1[11], v31);
    if (a4)
    {
LABEL_48:
      if (a5 >= 0x10)
      {
        v34 = *(_QWORD *)(a5 & 0xFFFFFFFFFFFFFFF0);
        if (!v34 || *(_BYTE *)(v34 + 16) != 57)
          goto LABEL_62;
        a5 = *(_QWORD *)(v34 + 8);
        if (a5 < 0x10)
          return 1;
        v35 = *(uint64_t **)(v34 + 24);
        if (!v35)
LABEL_62:
          v35 = sub_22EF579A8(a1[11], a5, a2);
        return sub_22EBB9700(a1, v33, a2, v35, v10);
      }
      return 1;
    }
  }
  v36 = sub_22EBB98E0((uint64_t)a1, v33, a2, (_QWORD *)a5, v10, a6, a7, a8);
  v29 = v36;
  if ((*(_QWORD *)(a1[9] + 8) & 0x10000000000000) == 0
    && (v36 & 1) == 0
    && *(unsigned __int8 *)(v36 & 0xFFFFFFFFFFFFFFFELL) == 135
    && sub_22F3C53E4(v36 & 0xFFFFFFFFFFFFFFFELL)
    && !sub_22F05FEE4(v29 & 0xFFFFFFFFFFFFFFFELL, a1[11]))
  {
    sub_22E8FCA40(a1, a2, 0x1A6Fu, 0, (uint64_t)&v39);
    LOBYTE(v38[0]) = (*(_BYTE *)(*(_QWORD *)(a1[13] + 40) + 40) & 3) == 1;
    sub_22E894E38((uint64_t)&v39, (unsigned __int8 *)v38);
    sub_22E903BEC((unsigned int *)&v39);
  }
  return v29;
}

uint64_t sub_22EBBA098(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  unsigned int v16[24];
  uint64_t v17;
  llvm *v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x24BDAC8D0];
  v10 = *a4;
  if ((*(_BYTE *)(*(_QWORD *)(*a4 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    v12 = 0;
  }
  else
  {
    v17 = 1;
    v18 = (llvm *)-4096;
    v20 = v22;
    v21 = 0x100000000;
    sub_22EBBA21C(v10, (uint64_t)&v17);
    if ((_DWORD)v21 == 1)
    {
      v12 = *(_QWORD *)(*(_QWORD *)v20 + 48);
      v13 = 1;
    }
    else
    {
      if ((_DWORD)v21)
        v11 = 5112;
      else
        v11 = 5113;
      sub_22E8FCA40(a1, a3, v11, 0, (uint64_t)v16);
      sub_22E903BEC(v16);
      v13 = 0;
      v12 = 0;
    }
    if (v20 != v22)
      free(v20);
    if ((v17 & 1) == 0)
      llvm::deallocate_buffer(v18, (void *)(8 * v19));
    if (!v13)
      return 1;
  }
  v15 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  return sub_22F332F70(v15, a2, (uint64_t)a4, v12, a3 | ((unint64_t)a5 << 32));
}

void sub_22EBBA21C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)(a1 & 0xFFFFFFFFFFFFFFF0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if (v4 == 39 || (v5 = v4 & 0xFE, v5 == 40))
  {
    v3 = *(_QWORD *)(sub_22F10ACF8(v3) & 0xFFFFFFFFFFFFFFF0);
  }
  else if ((v5 - 2) <= 3)
  {
    if (v3)
      goto LABEL_13;
LABEL_14:
    while ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFEu) - 2 <= 3)
    {
      v14 = v3;
      v15 = sub_22F10CF48(v3);
      v3 = v14;
      if (!v15)
        break;
      while (1)
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v15 + 32) & 0xFFFFFFFFFFFFFFF0);
        if (!v3)
          break;
LABEL_13:
        if ((*(_DWORD *)(v3 + 16) & 0xFEu) - 6 <= 0xFFFFFFFB)
          goto LABEL_14;
        v15 = v3;
      }
    }
  }
  v6 = sub_22F10C2A4(v3);
  if (v6)
  {
    v7 = v6;
    v8 = sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v6 + 104) + 96), *(_QWORD *)(v6 + 104));
    if ((*(_BYTE *)(v8 + 29) & 1) == 0)
      goto LABEL_21;
    sub_22EFC8E88(v8);
    v10 = *(uint64_t **)v9;
    v11 = *(unsigned int *)(v9 + 8);
    v12 = *(uint64_t **)v9;
    if ((_DWORD)v11)
    {
      v13 = 8 * v11;
      v12 = *(uint64_t **)v9;
      while (*(_WORD *)(*v12 + 32) != 342)
      {
        ++v12;
        v13 -= 8;
        if (!v13)
          goto LABEL_21;
      }
    }
    if (v12 != &v10[v11])
    {
      do
      {
        v23 = *v10++;
        v22 = v23;
      }
      while (*(_WORD *)(v23 + 32) != 342);
      v24 = v22;
      sub_22F332C0C(a2, &v24);
    }
    else
    {
LABEL_21:
      if ((*(_DWORD *)(v7 + 28) & 0x7E) == 0x24)
      {
        v16 = *(_QWORD *)(v7 + 168);
        v17 = *(unsigned int *)(v16 + 8);
        if ((_DWORD)v17)
        {
          v18 = 24 * v17;
          v19 = *(_QWORD *)v16 + 8;
          do
          {
            v20 = *(_DWORD *)(v19 - 8);
            if (v20 == 2)
            {
              v21 = (_QWORD *)(*(_QWORD *)(v19 + 8) + 48);
            }
            else
            {
              v21 = (_QWORD *)v19;
              if (v20 != 1)
                goto LABEL_29;
            }
            sub_22EBBA21C(*v21, a2);
LABEL_29:
            v19 += 24;
            v18 -= 24;
          }
          while (v18);
        }
      }
    }
  }
}

uint64_t sub_22EBBA3E8(_QWORD *a1, uint64_t a2, unsigned int a3, unint64_t a4, unsigned int a5)
{
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  unsigned int v15[24];
  uint64_t v16;
  llvm *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
  {
    v11 = 0;
  }
  else if (sub_22EFFBE1C(a4, a1[11], 1))
  {
    v11 = sub_22F36F3A4(a1[11], 0, 0);
  }
  else
  {
    v16 = 1;
    v17 = (llvm *)-4096;
    v19 = v21;
    v20 = 0x100000000;
    sub_22EBBA21C(*(_QWORD *)(a4 + 8), (uint64_t)&v16);
    if ((_DWORD)v20 == 1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)v19 + 48);
      v12 = 1;
    }
    else
    {
      if ((_DWORD)v20)
        v10 = 5112;
      else
        v10 = 5113;
      sub_22E8FCA40(a1, a3, v10, 0, (uint64_t)v15);
      sub_22E903BEC(v15);
      v12 = 0;
      v11 = 0;
    }
    if (v19 != v21)
      free(v19);
    if ((v16 & 1) == 0)
      llvm::deallocate_buffer(v17, (void *)(8 * v18));
    if (!v12)
      return 1;
  }
  v14 = sub_22E3CD3D4(a1[11] + 2032, 40, 3);
  return sub_22F33300C(v14, a2, a4, v11, a3 | ((unint64_t)a5 << 32));
}

uint64_t sub_22EBBA59C(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;

  v6 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 16, 3);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16400);
  *(_BYTE *)v6 = 117;
  if (byte_255E04EB3)
  {
    v8 = sub_22F0D3748(117);
    ++*((_DWORD *)v8 + 2);
  }
  v9 = *(_DWORD *)v6;
  *(_QWORD *)(v6 + 8) = v7;
  *(_DWORD *)v6 = v9 & 0xFFF800FF | ((a3 == 150) << 18);
  *(_DWORD *)(v6 + 4) = a2;
  return v6;
}

uint64_t sub_22EBBA634(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;

  result = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 16, 3);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16824);
  *(_BYTE *)result = 0x80;
  if (byte_255E04EB3)
  {
    v8 = result;
    v7 = sub_22F0D3748(128);
    result = v8;
    ++*((_DWORD *)v7 + 2);
  }
  v6 = *(_DWORD *)result & 0xFFFC00FF;
  *(_QWORD *)(result + 8) = v5;
  *(_DWORD *)result = v6;
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t sub_22EBBA6C4(uint64_t a1, uint64_t **a2, unsigned int a3, unsigned __int8 *a4)
{
  unint64_t v4;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t *v16;
  uint64_t v17;
  void **v18;

  v4 = (unint64_t)a4;
  if (a4)
  {
    v8 = a4;
    do
    {
      v9 = v8;
      v10 = *v8;
      if (v10 > 0xD5)
      {
        if (v10 == 233)
        {
          if ((*(_DWORD *)v8 & 0x7C0000) != 0x300000)
            goto LABEL_32;
          v10 = *(_DWORD *)v8;
          v12 = v8 + 16;
        }
        else
        {
          if (v10 != 214)
            break;
          v12 = v8 + 24;
        }
      }
      else if (v10 == 155)
      {
        if ((**((_DWORD **)v8 + 2) & 0x18000) != 0)
          goto LABEL_32;
        v12 = v8 + 24;
        if (!v9[48])
          v12 = v9 + 32;
        v10 = 155;
      }
      else
      {
        if (v10 != 176)
          break;
        v11 = *((unsigned int *)v8 + 5);
        if ((_DWORD)v11 == -1)
          goto LABEL_32;
        v12 = &v8[8 * v11 + 40];
        v10 = 176;
      }
      v8 = *(unsigned __int8 **)v12;
    }
    while (v8 != v9);
    if (v10 != 161)
      goto LABEL_32;
    LODWORD(a4) = 0;
    v13 = *((_QWORD *)v9 + 2);
    if (!v13 || (*(_DWORD *)(v13 + 28) & 0x7Fu) - 67 < 0xFFFFFFF9)
      return sub_22EBBA860(a1, a3, v4, (int)a4);
    if (!sub_22E3CB5E0(v13) || (v14 = *(_QWORD *)(v13 + 48), (v14 & 4) != 0))
    {
LABEL_32:
      LODWORD(a4) = 0;
      return sub_22EBBA860(a1, a3, v4, (int)a4);
    }
    LODWORD(a4) = 0;
    if (a2 && (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF0) + 8) & 4) == 0)
    {
      do
      {
        v15 = sub_22E3BA914((llvm::SmallPtrSetImplBase *)(a2 + 9), (void *)v13);
        v16 = a2[10];
        if (v16 == a2[9])
          v17 = 92;
        else
          v17 = 88;
        v18 = (void **)&v16[*(unsigned int *)((char *)a2 + v17)];
        LODWORD(a4) = v15 != v18;
        if (v15 != v18)
          break;
        if (((_WORD)a2[1] & 0x2961) != 0)
          break;
        a2 = (uint64_t **)*a2;
      }
      while (a2);
    }
  }
  return sub_22EBBA860(a1, a3, v4, (int)a4);
}

uint64_t sub_22EBBA860(uint64_t a1, unsigned int a2, unint64_t a3, int a4)
{
  unint64_t v5;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;

  v5 = a3;
  v31 = a3;
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) & 0x400000000000) == 0)
  {
    v8 = sub_22F1E361C(*(_QWORD **)(a1 + 112), a2);
    v9 = v8 == 3 || v8 == 0;
    if (v9 && (*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) == 0)
    {
      sub_22F308EA4((_QWORD *)a1, a2, 0xCE9u, 0, (uint64_t)&v25);
      sub_22F2F30F4((uint64_t)&v25, (uint64_t)"throw");
      sub_22E903BEC(&v25);
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) != 0)
  {
    sub_22F31C558(a1, a2, 0xC44u, (uint64_t)&v25);
    v15 = sub_22F2F30F4((uint64_t)&v25, (uint64_t)"throw");
    v16 = *(_QWORD *)(a1 + 216);
    v17 = (*(_WORD *)(v16 + 8) & 0x7E) - 52;
    if (v16)
      v18 = v16 - 72;
    else
      v18 = 0;
    if (v17 >= 6)
      v19 = 0;
    else
      v19 = v18;
    LODWORD(v23) = sub_22E9FDFC4(a1, v19, 0);
    sub_22E8900C4(v15, (int *)&v23);
    sub_22E903BEC(&v25);
  }
  v10 = *(_QWORD *)(a1 + 12888);
  if (v10 && (*(_BYTE *)(v10 + 10) & 2) != 0)
  {
    sub_22E8FCA40((_QWORD *)a1, a2, 0x10F1u, 0, (uint64_t)&v25);
    sub_22F2F30F4((uint64_t)&v25, (uint64_t)"throw");
    sub_22E903BEC(&v25);
    if (!v5)
      goto LABEL_32;
  }
  else if (!v5)
  {
    goto LABEL_32;
  }
  if ((*(_BYTE *)(v5 + 1) & 0x80) != 0)
    goto LABEL_30;
  if (a4)
  {
    v23 = sub_22ED3466C(a1, (uint64_t *)&v31, 1);
    v24 = v11;
    v5 = v31;
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  v12 = sub_22EF69FD4(*(_QWORD *)(a1 + 88), *(_QWORD *)(v5 + 8));
  if (sub_22EBBAAD4((_QWORD *)a1, a2, v12, v31))
    return 1;
  v25 = 5;
  v26 = 0;
  v27 = v12;
  v28 = 0;
  v29 = a2;
  v30 = 0;
  v13 = sub_22ED34B68();
  if ((v13 & 1) != 0)
    return 1;
  v5 = v13 & 0xFFFFFFFFFFFFFFFELL;
  v31 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if ((v13 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
LABEL_30:
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 15088) + 56) - 23) <= 1)
    {
      v20 = *(_QWORD *)(v5 + 8);
      sub_22F0D5A50(v5);
      sub_22E97DED0((_QWORD *)a1, v20, v21);
    }
  }
LABEL_32:
  v22 = sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 24, 3);
  return sub_22F3330A8(v22, v31, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16392), a2, a4);
}

uint64_t sub_22EBBAAD4(_QWORD *a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  void (**v27)(_QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int64_t v32;
  int64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52[24];
  _BYTE *v53;
  _BYTE *v54;
  uint64_t *v55;
  int v56;
  _BYTE v57[64];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[2];
  int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  llvm *v66[2];
  unsigned int v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD v71[3];

  v71[2] = *MEMORY[0x24BDAC8D0];
  v58 = a3;
  v59 = a4;
  v8 = *(_QWORD *)(a3 & 0xFFFFFFFFFFFFFFF0);
  if (v8 && *(_BYTE *)(v8 + 16) == 39
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 39 && (v8 = sub_22F10CF48(v8)) != 0)
  {
    v9 = 0;
    v10 = *(_QWORD *)(v8 + 32);
    v58 = v10;
    v11 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF0);
    v12 = *(_QWORD *)(*(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFF0);
    if (v12)
      v13 = (*(_DWORD *)(v12 + 16) & 0xFF800FF) == 86507531;
    else
      v13 = 0;
    if (v13)
      goto LABEL_18;
    v14 = 4878;
  }
  else
  {
    v14 = 4877;
    v9 = 1;
    v10 = a3;
  }
  sub_22F0D4E74(a4);
  v61[0] = v15;
  v53 = &unk_24FAB6EA8;
  LODWORD(v54) = v14;
  v55 = v61;
  v16 = 1;
  if ((sub_22EE8B0B0((uint64_t)a1, a2, v10) & 1) != 0)
    return v16;
  if (v9 && sub_22F111384(*(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0)))
  {
    sub_22E8FCA40(a1, a2, 0x130Fu, 0, (uint64_t)&v53);
    v17 = sub_22E8901B8((uint64_t)&v53, &v58);
    sub_22F0D4E74(v59);
    v61[0] = v18;
    sub_22E8906A0(v17, v61);
    sub_22E903BEC((unsigned int *)&v53);
    return 1;
  }
  v53 = &unk_24FAB6ED0;
  LODWORD(v54) = 4876;
  v55 = &v59;
  if ((sub_22EAB2EB4((uint64_t)a1, a2, a3, (void (***)(_QWORD, uint64_t, _QWORD, uint64_t))&v53) & 1) != 0)
    return 1;
  v11 = *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF0);
LABEL_18:
  v19 = sub_22F10C2A4(v11);
  if (!v19)
    return 0;
  v21 = v19;
  if ((*(_DWORD *)(v19 + 28) & 0x7Fu) - 35 > 2)
    return 0;
  sub_22EAB631C((uint64_t)a1, a2, v19, 0);
  v16 = 0;
  if (v9)
  {
    sub_22E3CD31C((uint64_t *)(*(_QWORD *)(v21 + 104) + 96), *(_QWORD *)(v21 + 104));
    if ((**(_QWORD **)(v21 + 128) & 0x8000000000000000) != 0)
      goto LABEL_29;
    v22 = sub_22EC6602C(a1, v21) & 0xFFFFFFFFFFFFFFF8;
    if (!v22)
      goto LABEL_29;
    sub_22EFF605C(v59);
    sub_22EB4E494(a1, v23, v22, 1);
    sub_22EFF605C(v59);
    v25 = v24;
    v54 = (_BYTE *)(a1[11] + 2128);
    LODWORD(v55) = 2584;
    v26 = v58;
    v53 = (_BYTE *)sub_22E3B8AAC((uint64_t)v54);
    v53[*v53 + 1] = 9;
    v27 = (void (**)(_QWORD, uint64_t, _QWORD, uint64_t))v53;
    v28 = *v53;
    *v53 = v28 + 1;
    v27[v28 + 2] = (void (*)(_QWORD, uint64_t, _QWORD, uint64_t))v26;
    sub_22E90A46C((uint64_t)a1, v25, v22, (uint64_t)&v53, 0);
    if (v53 && v54)
      sub_22E3BB10C((unint64_t)v54, (unint64_t)v53);
    sub_22EFF605C(v59);
    LODWORD(v53) = v29;
    v16 = 1;
    if ((sub_22EB17F48(a1, v22, &v53, 1, 0, 0, 0, 0) & 1) == 0)
    {
LABEL_29:
      v30 = a1[11];
      v31 = *(_DWORD *)(*(_QWORD *)(v30 + 15088) + 148);
      if (v31 != 11)
        goto LABEL_30;
      v68 = v21;
      v69 = v71;
      v70 = 0x200000000;
      v66[0] = 0;
      v66[1] = 0;
      v67 = 0;
      v53 = v57;
      v54 = v57;
      v55 = (uint64_t *)2;
      v56 = 0;
      v61[0] = 0;
      v61[1] = 0;
      v62 = 0;
      v64 = 0;
      v65 = 0;
      v63 = 0;
      *((_DWORD *)sub_22F29449C((uint64_t)v66, &v68) + 2) = 1;
      sub_22EBD0064(v61, &v68);
      sub_22EBD0174(v21, (uint64_t)v66, (uint64_t)&v53, v61, 1);
      v37 = v63;
      v38 = v64;
      while (v37 != v38)
      {
        v39 = *v37;
        v60 = *v37;
        if (*((_DWORD *)sub_22F29449C((uint64_t)v66, &v60) + 2) <= 1u)
        {
          v40 = v70;
          if (v70 >= (unint64_t)HIDWORD(v70))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v40 = v70;
          }
          v69[v40] = v39;
          LODWORD(v70) = v70 + 1;
        }
        ++v37;
      }
      sub_22F257CF8((uint64_t)v61);
      if (v54 != v53)
        free(v54);
      llvm::deallocate_buffer(v66[0], (void *)(16 * v67));
      if (!(_DWORD)v70)
      {
LABEL_61:
        v51 = 1;
        goto LABEL_63;
      }
      v41 = v69;
      v42 = (char *)&v69[v70];
      while (1)
      {
        v43 = *v41;
        v44 = sub_22EC6602C(a1, *v41);
        v45 = v44 & 0xFFFFFFFFFFFFFFF8;
        if ((v44 & 0xFFFFFFFFFFFFFFF8) != 0
          && (*(_BYTE *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v45 + 32))(v44 & 0xFFFFFFFFFFFFFFF8)
                       + 82) & 0x40) == 0)
        {
          sub_22EFF605C(v59);
          sub_22EB4E494(a1, v46, v45, 1);
          if ((*(_BYTE *)(v45 + 82) & 0x80) == 0)
          {
            (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1[11] + 15064) + 48))(*(_QWORD *)(a1[11] + 15064), *(_QWORD *)(v43 + 104), *(_QWORD *)(v45 + 112));
            v47 = *(_QWORD *)(*(_QWORD *)(v45 + 48) & 0xFFFFFFFFFFFFFFF0);
            if (v47)
              v48 = *(_BYTE *)(v47 + 16) == 26;
            else
              v48 = 0;
            if (!v48
              && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v47 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) != 26
               || (v47 = sub_22F10CF48(v47)) == 0))
            {
              LODWORD(v49) = 0;
LABEL_53:
              v50 = 1;
              while ((sub_22EB31584(a1, a2, v45, *(_QWORD *)(*(_QWORD *)(v45 + 120) + 8 * v50)) & 1) == 0)
              {
                if ((_DWORD)v49 == (_DWORD)++v50)
                  goto LABEL_56;
              }
              v51 = 0;
LABEL_63:
              if (v69 != v71)
                free(v69);
              if (v51)
              {
                v30 = a1[11];
                v31 = *(_DWORD *)(*(_QWORD *)(v30 + 15088) + 148);
LABEL_30:
                if (v31 <= 0xA)
                {
                  v32 = sub_22EF5D130(v30, v58);
                  v33 = sub_22F368788(a1[11]);
                  if (v33 < v32)
                  {
                    v34 = v33;
                    sub_22E8FCA40(a1, a2, 0x1B90u, 0, (uint64_t)v52);
                    sub_22E903BEC(v52);
                    sub_22E8FCA40(a1, a2, 0x17F1u, 0, (uint64_t)&v53);
                    v35 = sub_22E8901B8((uint64_t)&v53, &v58);
                    LODWORD(v61[0]) = v32;
                    v36 = sub_22E89519C(v35, (unsigned int *)v61);
                    LODWORD(v69) = v34;
                    sub_22E89519C(v36, (unsigned int *)&v69);
                    sub_22E903BEC((unsigned int *)&v53);
                  }
                }
                return 0;
              }
              return 1;
            }
            v49 = (unsigned __int16)(*(_QWORD *)(v47 + 16) >> 38);
            if (v49 != 1)
              goto LABEL_53;
          }
        }
LABEL_56:
        if (++v41 == (_QWORD *)v42)
          goto LABEL_61;
      }
    }
  }
  return v16;
}

unint64_t sub_22EBBB18C(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unint64_t v39;
  __int16 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int16 v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;

  v2 = sub_22E903070(a1, 0);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 10288);
  if (v2
    && (*(_WORD *)(v2 + 8) & 0x7Eu) - 58 >= 0xFFFFFFFC
    && (*(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)(v2 - 72) + 32))(v2 - 72) + 80) & 0xE000) != 0x4000
    && ((*(_QWORD *)(v3 - 32) & 7) != 6
     || (*(_DWORD *)(*(_QWORD *)(v3 - 32) & 0xFFFFFFFFFFFFFFF8) - 1) >= 4))
  {
    v4 = sub_22EFD7558(v3 - 72);
  }
  if (v4 > 0xF)
    goto LABEL_45;
  v5 = *(_QWORD *)(a1 + 216);
  if (!v5)
    return v4;
  v6 = *(_WORD *)(v5 + 8);
  if ((v6 & 0x7Eu) - 54 > 3)
    return v4;
  v7 = v6 & 0x7F;
  v8 = -40;
  if (v7 > 70)
  {
    if (v7 != 83)
    {
      if (v7 == 71)
      {
        v8 = -56;
        goto LABEL_26;
      }
      if (v7 == 81)
        goto LABEL_26;
LABEL_21:
      if ((v7 - 52) < 6)
      {
        v8 = -72;
      }
      else
      {
        v8 = -48;
        if ((v7 - 33) < 5)
          v8 = -64;
      }
    }
  }
  else
  {
    if (v7 > 0x18)
      goto LABEL_20;
    if (v7 != 16)
    {
      if (((1 << v7) & 0x1066) != 0)
        goto LABEL_26;
      if (v7 != 24)
      {
LABEL_20:
        if (v7 == 70)
        {
          v8 = -64;
          goto LABEL_26;
        }
        goto LABEL_21;
      }
    }
    v8 = -48;
  }
LABEL_26:
  v9 = *(_QWORD *)(v5 + v8 + 16);
  v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 4) != 0)
  {
    v10 = (_QWORD *)*v10;
    if (!v10)
      return v4;
  }
  else if (!v10)
  {
    return v4;
  }
  v11 = v10[8];
  if (!v11)
    return v4;
  if (((*(unsigned __int16 *)(v11 + 8) | (*(unsigned __int8 *)(v11 + 10) << 16)) & 0x100000) == 0)
    return v4;
  v12 = *(_QWORD *)(v5 - 32);
  if ((v12 & 7) != 6
    || *(_DWORD *)(v12 & 0xFFFFFFFFFFFFFFF8) != 42
    || *(_DWORD *)(a1 + 10680) <= *(_DWORD *)(a1 + 11956)
    || (*(_WORD *)(v3 + 8) & 0x7Fu) - 35 > 2)
  {
    return v4;
  }
  v13 = v3 ? v3 - 64 : 0;
  v14 = *(_QWORD *)(v13 + 48);
  v15 = v14 ? v14 & 0xFFFFFFFFFFFFFFF0 : sub_22EF6462C(*(_QWORD *)(a1 + 88), v13);
  v4 = sub_22EF5B848(*(_QWORD *)(a1 + 88), v15, 0);
  if (v4 < 0x10)
    return v4;
LABEL_45:
  v16 = *(_QWORD *)(a1 + 216);
  if (!v16)
    return v4;
  v17 = *(_WORD *)(v16 + 8);
  if ((v17 & 0x7Eu) - 54 > 3)
    return v4;
  v18 = v17 & 0x7F;
  v19 = -40;
  if (v18 > 70)
  {
    if (v18 == 83)
      goto LABEL_63;
    if (v18 == 71)
    {
      v19 = -56;
      goto LABEL_63;
    }
    if (v18 != 81)
    {
LABEL_58:
      if ((v18 - 52) < 6)
      {
        v19 = -72;
      }
      else
      {
        v19 = -48;
        if ((v18 - 33) < 5)
          v19 = -64;
      }
    }
  }
  else
  {
    if (v18 > 0x18)
      goto LABEL_57;
    if (v18 == 16)
    {
LABEL_50:
      v19 = -48;
      goto LABEL_63;
    }
    if (((1 << v18) & 0x1066) == 0)
    {
      if (v18 == 24)
        goto LABEL_50;
LABEL_57:
      if (v18 == 70)
      {
        v19 = -64;
        goto LABEL_63;
      }
      goto LABEL_58;
    }
  }
LABEL_63:
  v20 = *(_QWORD *)(v16 + v19 + 16);
  v21 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
  if ((v20 & 4) != 0)
  {
    v21 = (_QWORD *)*v21;
    if (v21)
      goto LABEL_65;
    return v4;
  }
  if (!v21)
    return v4;
LABEL_65:
  v22 = v21[8];
  if (!v22)
    return v4;
  if (((*(unsigned __int16 *)(v22 + 8) | (*(unsigned __int8 *)(v22 + 10) << 16)) & 0x100000) == 0)
    return v4;
  v75 = *(_QWORD *)(a1 + 216);
  v24 = *(_QWORD *)(v16 - 32);
  if ((v24 & 7) != 6 || *(_DWORD *)(v24 & 0xFFFFFFFFFFFFFFF8) != 42)
    return v4;
  v25 = *(_QWORD *)(a1 + 1896);
  v26 = *(int *)(a1 + 1904);
  v27 = *(_QWORD *)(a1 + 88);
  v28 = sub_22F10ACF8(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF0));
  if (!(_DWORD)v26)
    return sub_22EF5B848(v27, v28, 0);
  v29 = 0;
  v30 = v26 - 1;
  while (1)
  {
    v31 = *(_QWORD *)(v25 + 8 * v30);
    if ((*(_DWORD *)(v31 + 8) & 7) != 2)
      break;
    if (v29)
    {
      v32 = *(_QWORD *)(v29 + 1480);
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 16);
        v34 = (_QWORD *)(v33 & 0xFFFFFFFFFFFFFFF8);
        if ((v33 & 4) != 0)
          v34 = (_QWORD *)*v34;
        v35 = *(_QWORD *)(v31 + 1488);
        v36 = v35 ? v35 + 72 : 0;
        if (v34 != (_QWORD *)v36)
          break;
      }
    }
    v37 = *(_DWORD *)(v31 + 1256);
    if (v37 && (*(_BYTE *)(*(_QWORD *)(v31 + 1264) + 32 * (v37 - 1) + 24) & 3) == 0)
    {
      v39 = sub_22EF5DEB0(v27, v28);
      v28 = v39 | sub_22E8FB7BC(*(_QWORD *)(v31 + 1488));
      return sub_22EF5B848(v27, v28, 0);
    }
    v75 = sub_22F31DCF8(v75);
    v38 = v30--;
    v29 = v31;
    if (!v38)
      goto LABEL_92;
  }
  v31 = v29;
LABEL_92:
  if (!v31)
    return sub_22EF5B848(v27, v28, 0);
  if (!v75)
    return sub_22EF5B848(v27, v28, 0);
  v40 = *(_WORD *)(v75 + 8);
  if ((v40 & 0x7Eu) - 54 > 3)
    return sub_22EF5B848(v27, v28, 0);
  v41 = v40 & 0x7F;
  v42 = -40;
  if (v41 > 70)
  {
    if (v41 == 83)
      goto LABEL_111;
    if (v41 == 71)
    {
      v42 = -56;
      goto LABEL_111;
    }
    if (v41 != 81)
    {
LABEL_106:
      v43 = -48;
      if ((v41 - 33) < 5)
        v43 = -64;
      if ((v41 - 52) >= 6)
        v42 = v43;
      else
        v42 = -72;
    }
  }
  else
  {
    if (v41 > 0x18)
      goto LABEL_105;
    if (v41 == 16)
    {
LABEL_98:
      v42 = -48;
      goto LABEL_111;
    }
    if (((1 << v41) & 0x1066) == 0)
    {
      if (v41 == 24)
        goto LABEL_98;
LABEL_105:
      if (v41 == 70)
      {
        v42 = -64;
        goto LABEL_111;
      }
      goto LABEL_106;
    }
  }
LABEL_111:
  v44 = *(_QWORD *)(v75 + v42 + 16);
  v45 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF8);
  if ((v44 & 4) != 0)
    v45 = (_QWORD *)*v45;
  if (v45)
  {
    v46 = v45[8];
    if (v46)
    {
      if (((*(unsigned __int16 *)(v46 + 8) | (*(unsigned __int8 *)(v46 + 10) << 16)) & 0x100000) != 0
        && (*(_QWORD *)(v75 - 32) & 7) == 6
        && *(_DWORD *)(*(_QWORD *)(v75 - 32) & 0xFFFFFFFFFFFFFFF8) == 42)
      {
        v47 = -40;
        if (v41 > 70)
        {
          switch(v41)
          {
            case 'S':
              goto LABEL_136;
            case 'G':
              v47 = -56;
              goto LABEL_136;
            case 'Q':
              goto LABEL_136;
          }
        }
        else
        {
          if (v41 <= 0x18)
          {
            if (v41 == 16)
              goto LABEL_135;
            if (((1 << v41) & 0x1066) != 0)
              goto LABEL_136;
            if (v41 == 24)
              goto LABEL_135;
          }
          if (v41 == 70)
            goto LABEL_132;
        }
        if ((v41 - 52) < 6)
        {
          v47 = -72;
          goto LABEL_136;
        }
        if ((v41 - 33) < 5)
        {
LABEL_132:
          v47 = -64;
          goto LABEL_136;
        }
LABEL_135:
        v47 = -48;
LABEL_136:
        v48 = *(_QWORD *)(v75 + v47 + 16);
        v49 = v48 & 0xFFFFFFFFFFFFFFF8;
        if ((v48 & 4) != 0)
          v49 = *(_QWORD *)v49;
        while (v49)
        {
          v50 = *(_QWORD *)(v49 + 64);
          if (!v50)
            return sub_22EF5B848(v27, v28, 0);
          if (((*(unsigned __int16 *)(v50 + 8) | (*(unsigned __int8 *)(v50 + 10) << 16)) & 0x100000) == 0)
            return sub_22EF5B848(v27, v28, 0);
          v51 = ((unint64_t)*(unsigned int *)(v50 + 104) >> 5) & 0x7FFF;
          if (!(_DWORD)v51)
            return sub_22EF5B848(v27, v28, 0);
          v52 = *(uint64_t **)(v50 + 128);
          v53 = 16 * v51;
          while (1)
          {
            v54 = *v52;
            if ((*v52 & 0xFFFFFFFFFFFFFFFCLL) == 4)
              break;
            v52 += 2;
            v53 -= 16;
            if (!v53)
              return sub_22EF5B848(v27, v28, 0);
          }
          v55 = sub_22EFD462C(v49 - 64);
          if (v55 && (*(_DWORD *)(v55 + 28) & 0x7F) == 0x1D)
            v55 = *(_QWORD *)(v55 + 48);
          v56 = sub_22E8FB7BC(v55);
          if ((v54 & 2) != 0)
          {
            v28 = sub_22EF5DEB0(v27, v28) | v56;
            return sub_22EF5B848(v27, v28, 0);
          }
          v57 = *(_WORD *)(v49 + 8) & 0x7F;
          v58 = -40;
          if (v57 > 0x46)
          {
            switch(v57)
            {
              case 'S':
                goto LABEL_168;
              case 'G':
                v58 = -56;
                goto LABEL_168;
              case 'Q':
                goto LABEL_168;
            }
          }
          else
          {
            if (v57 <= 0x18)
            {
              if (v57 == 16)
                goto LABEL_166;
              if (((1 << v57) & 0x1066) != 0)
                goto LABEL_168;
              if (v57 == 24)
              {
LABEL_166:
                v58 = -48;
                goto LABEL_168;
              }
            }
            if (v57 == 70)
            {
              v58 = -64;
              goto LABEL_168;
            }
          }
          if (v57 - 33 >= 5)
            v59 = -48;
          else
            v59 = -64;
          if (v57 - 52 >= 6)
            v58 = v59;
          else
            v58 = -72;
LABEL_168:
          v60 = *(_QWORD *)(v49 + v58 + 16);
          v61 = v60 & 0xFFFFFFFFFFFFFFF8;
          if ((v60 & 4) != 0)
            v61 = *(_QWORD *)v61;
          if (!v61)
            return sub_22EF5B848(v27, v28, 0);
          v62 = *(_WORD *)(v61 + 8);
          if ((v62 & 0x7Eu) - 54 > 3)
            return sub_22EF5B848(v27, v28, 0);
          v63 = v62 & 0x7F;
          v64 = -40;
          if (v63 > 70)
          {
            switch(v63)
            {
              case 'S':
                goto LABEL_188;
              case 'G':
                v64 = -56;
                goto LABEL_188;
              case 'Q':
                goto LABEL_188;
            }
          }
          else
          {
            if (v63 <= 0x18)
            {
              if (v63 == 16)
                goto LABEL_187;
              if (((1 << v63) & 0x1066) != 0)
                goto LABEL_188;
              if (v63 == 24)
                goto LABEL_187;
            }
            if (v63 == 70)
              goto LABEL_184;
          }
          if ((v63 - 52) < 6)
          {
            v64 = -72;
            goto LABEL_188;
          }
          if ((v63 - 33) < 5)
          {
LABEL_184:
            v64 = -64;
            goto LABEL_188;
          }
LABEL_187:
          v64 = -48;
LABEL_188:
          v65 = *(_QWORD *)(v61 + v64 + 16);
          v66 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF8);
          if ((v65 & 4) != 0)
            v66 = (_QWORD *)*v66;
          if (!v66)
            return sub_22EF5B848(v27, v28, 0);
          v67 = v66[8];
          if (!v67)
            return sub_22EF5B848(v27, v28, 0);
          if (((*(unsigned __int16 *)(v67 + 8) | (*(unsigned __int8 *)(v67 + 10) << 16)) & 0x100000) == 0)
            return sub_22EF5B848(v27, v28, 0);
          v68 = *(_QWORD *)(v61 - 32);
          if ((v68 & 7) != 6 || *(_DWORD *)(v68 & 0xFFFFFFFFFFFFFFF8) != 42)
            return sub_22EF5B848(v27, v28, 0);
          v69 = -40;
          if ((*(_WORD *)(v49 + 8) & 0x7Fu) > 0x46)
          {
            switch(v57)
            {
              case 'S':
                goto LABEL_211;
              case 'G':
                v69 = -56;
                goto LABEL_211;
              case 'Q':
                goto LABEL_211;
            }
          }
          else
          {
            if (v57 <= 0x18)
            {
              if (v57 == 16)
                goto LABEL_210;
              if (((1 << v57) & 0x1066) != 0)
                goto LABEL_211;
              if (v57 == 24)
                goto LABEL_210;
            }
            if (v57 == 70)
              goto LABEL_207;
          }
          if (v57 - 52 < 6)
          {
            v69 = -72;
            goto LABEL_211;
          }
          if (v57 - 33 < 5)
          {
LABEL_207:
            v69 = -64;
            goto LABEL_211;
          }
LABEL_210:
          v69 = -48;
LABEL_211:
          v70 = *(_QWORD *)(v49 + v69 + 16);
          v71 = v70 & 0xFFFFFFFFFFFFFFF8;
          if ((v70 & 4) != 0)
            v71 = *(_QWORD *)v71;
          v72 = *(_WORD *)(v71 + 8) & 0x7F;
          v73 = -40;
          if (v72 > 0x46)
          {
            if (v72 != 83)
            {
              if (v72 == 71)
              {
                v73 = -56;
                goto LABEL_229;
              }
              if (v72 != 81)
                goto LABEL_223;
            }
          }
          else
          {
            if (v72 > 0x18)
              goto LABEL_218;
            if (v72 == 16)
              goto LABEL_228;
            if (((1 << v72) & 0x1066) == 0)
            {
              if (v72 == 24)
                goto LABEL_228;
LABEL_218:
              if (v72 != 70)
              {
LABEL_223:
                if (v72 - 52 < 6)
                {
                  v73 = -72;
                  goto LABEL_229;
                }
                if (v72 - 33 >= 5)
                {
LABEL_228:
                  v73 = -48;
                  goto LABEL_229;
                }
              }
              v73 = -64;
            }
          }
LABEL_229:
          v74 = *(_QWORD *)(v71 + v73 + 16);
          v49 = v74 & 0xFFFFFFFFFFFFFFF8;
          if ((v74 & 4) != 0)
            v49 = *(_QWORD *)v49;
        }
      }
    }
  }
  return sub_22EF5B848(v27, v28, 0);
}

uint64_t sub_22EBBBB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = *(_QWORD *)(a2 + 10288);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = 0;
  if (a3 && a5)
  {
    if ((*(_DWORD *)(a3 + 28) & 0x7F) == 0x1C)
      a3 = *(_QWORD *)(a3 + 48);
    v9 = sub_22EF6477C(*(_QWORD *)(a2 + 88), a3);
    if ((a4 & 0xCFFFFFFF8) != 0)
    {
      v10 = *(_QWORD *)(a2 + 88);
      v14 = a4;
      v11 = sub_22E491354((unsigned int *)&v14, v9);
      v12 = sub_22EF5DBC4(v10, v11, v14);
    }
    else
    {
      v12 = v9 | a4 & 7;
    }
    *(_QWORD *)(a2 + 10288) = sub_22EF5B848(*(_QWORD *)(a2 + 88), v12, 0);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t sub_22EBBBBEC(uint64_t a1, int a2, int a3, int a4, int *a5, int a6)
{
  unsigned int v6;
  unsigned __int8 v10;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  _BYTE *v37;
  char v38;
  char v39;
  uint64_t result;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned int v54[4];
  unint64_t v55;
  char v56;

  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 576);
  if (v6 <= 3 && v6 != 2 && a3 == 0)
    return 1;
  v10 = a3;
  if (a5)
    v13 = *a5;
  else
    v13 = *(_DWORD *)(a1 + 1904) - 1;
  v14 = 0;
  if (v13 < 0)
  {
LABEL_92:
    if (a4)
    {
LABEL_93:
      v41 = sub_22EBBB18C(a1);
      if (v14)
      {
        v42 = v41;
        v43 = (uint64_t *)(v41 & 0xFFFFFFFFFFFFFFF0);
        v44 = 8 * v13;
        do
        {
          v45 = *(_QWORD *)(*(_QWORD *)(a1 + 1896) + v44);
          v46 = v42;
          if (a6)
          {
            v47 = sub_22F10ACF8(*v43);
            v46 = sub_22EF5DEB0(*(_QWORD *)(a1 + 88), v47);
          }
          v18 = v14-- != 0;
          v48 = v14 != 0 && v18;
          v54[2] = a2;
          v54[3] = 0;
          v55 = v46;
          v56 = a6 ^ 1 | (4 * v48) | v56 & 0x80 | 8;
          v49 = (_OWORD *)sub_22E78DF7C(v45 + 1264, (unint64_t)v54, 1);
          v50 = (_OWORD *)(*(_QWORD *)(v45 + 1264) + 32 * *(unsigned int *)(v45 + 1272));
          v51 = v49[1];
          *v50 = *v49;
          v50[1] = v51;
          LODWORD(v50) = *(_DWORD *)(v45 + 1272) + 1;
          *(_DWORD *)(v45 + 1272) = (_DWORD)v50;
          *(_DWORD *)(v45 + 1256) = (_DWORD)v50;
          v44 -= 8;
        }
        while (v14);
      }
    }
    return 0;
  }
  v16 = v13;
  while (1)
  {
    v15 = *(_QWORD *)(a1 + 1896);
    v17 = *(_QWORD *)(v15 + 8 * v16);
    if (v17)
      v18 = (*(_DWORD *)(v17 + 8) & 7u) - 4 >= 0xFFFFFFFD;
    else
      v18 = 0;
    if (!v18)
      goto LABEL_92;
    v19 = *(_DWORD *)(v17 + 1256);
    if (v19)
      break;
    if ((*(_DWORD *)(v17 + 8) & 7) == 2)
      v20 = *(_QWORD *)(v15 + 8 * v16);
    else
      v20 = 0;
    if (!v20)
      goto LABEL_45;
    v21 = *(_QWORD *)(v20 + 1488);
    if (!v21)
      goto LABEL_45;
    v22 = *(_WORD *)(v21 + 80) & 0x7F;
    v23 = -40;
    if (v22 > 0x46)
    {
      if (v22 == 83)
        goto LABEL_40;
      if (v22 == 71)
      {
        v23 = -56;
        goto LABEL_40;
      }
      if (v22 != 81)
        goto LABEL_35;
    }
    else
    {
      if (v22 > 0x18)
        goto LABEL_34;
      if (v22 == 16)
        goto LABEL_27;
      if (((1 << v22) & 0x1066) == 0)
      {
        if (v22 == 24)
        {
LABEL_27:
          v23 = -48;
          goto LABEL_40;
        }
LABEL_34:
        if (v22 == 70)
        {
          v23 = -64;
          goto LABEL_40;
        }
LABEL_35:
        if (v22 - 33 >= 5)
          v23 = -48;
        else
          v23 = -64;
        if (v22 - 52 < 6)
          v23 = -72;
      }
    }
LABEL_40:
    v24 = *(_QWORD *)(v21 + 72 + v23 + 16);
    v25 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8);
    if ((v24 & 4) != 0)
      v25 = (_QWORD *)*v25;
    if (!v25)
      goto LABEL_45;
    v26 = v25[8];
    if (!v26
      || ((*(unsigned __int16 *)(v26 + 8) | (*(unsigned __int8 *)(v26 + 10) << 16)) & 0x100000) == 0
      || (*(_BYTE *)(v26 + 104) & 4) == 0)
    {
      goto LABEL_45;
    }
    v28 = -40;
    if ((*(_WORD *)(v21 + 80) & 0x7Fu) <= 0x46)
    {
      if (v22 <= 0x18)
      {
        if (v22 == 16)
          goto LABEL_56;
        if (((1 << v22) & 0x1066) != 0)
          goto LABEL_70;
        if (v22 == 24)
          goto LABEL_56;
      }
      if (v22 == 70)
        goto LABEL_68;
LABEL_66:
      if (v22 - 52 >= 6)
      {
        if (v22 - 33 >= 5)
        {
LABEL_56:
          v28 = -48;
          goto LABEL_70;
        }
LABEL_68:
        v28 = -64;
        goto LABEL_70;
      }
      v28 = -72;
      goto LABEL_70;
    }
    if (v22 == 83)
      goto LABEL_70;
    if (v22 == 71)
    {
      v28 = -56;
      goto LABEL_70;
    }
    if (v22 != 81)
      goto LABEL_66;
LABEL_70:
    v29 = *(_QWORD *)(v21 + 72 + v28 + 16);
    v30 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8);
    if ((v29 & 4) != 0)
      v30 = (_QWORD *)*v30;
    if (v30)
    {
      v31 = v30[8];
      if (v31)
      {
        if (((*(unsigned __int16 *)(v31 + 8) | (*(unsigned __int8 *)(v31 + 10) << 16)) & 0x100000) != 0
          && (*(_QWORD *)(v21 + 40) & 7) == 6
          && *(_DWORD *)(*(_QWORD *)(v21 + 40) & 0xFFFFFFFFFFFFFFF8) == 42)
        {
          v32 = *(_QWORD *)(v21 + 144);
          v33 = v32 & 6;
          v34 = v32 & 0xFFFFFFFFFFFFFFF8;
          v35 = v33 != 4 || v34 == 0;
          if (!v35 && *(_QWORD *)(v34 + 16) >= 8uLL)
          {
            if (!a4)
              return 1;
            sub_22E8FCA40((_QWORD *)a1, a2, 0x1303u, 0, (uint64_t)v54);
            if (v14)
              v52 = 0;
            else
              v52 = v10;
            v53 = v52;
LABEL_88:
            sub_22E894E38((uint64_t)v54, &v53);
            sub_22E903BEC(v54);
            goto LABEL_89;
          }
        }
      }
    }
LABEL_45:
    if (v14)
      v27 = 0;
    else
      v27 = v10;
    if ((v27 & 1) == 0 && (*(_DWORD *)(v17 + 1224) - 1) >= 4)
    {
      if (a4)
      {
        sub_22E8FCA40((_QWORD *)a1, a2, 0x1303u, 0, (uint64_t)v54);
        v53 = 0;
        goto LABEL_88;
      }
LABEL_89:
      if ((v10 & 1) == 0)
        sub_22EBBC02C((unsigned int *)a1, (_DWORD *)v20);
      return 1;
    }
    ++v14;
    --v16;
    if (v13 + 1 == v14)
    {
      v14 = v13 + 1;
      goto LABEL_92;
    }
  }
  v36 = *(_QWORD *)(v17 + 1264) + 32 * (v19 - 1);
  v39 = *(_BYTE *)(v36 + 24);
  v37 = (_BYTE *)(v36 + 24);
  v38 = v39;
  if (a4)
  {
    *v37 = v38 | 0x10;
    goto LABEL_93;
  }
  result = 0;
  *v37 = v38 | 0x20;
  return result;
}

unsigned int *sub_22EBBC02C(unsigned int *result, _DWORD *a2)
{
  unsigned int v3;
  size_t v4;
  char *v5;
  _DWORD v6[6];
  void *__p;
  char v8;
  unsigned int v9[24];

  v3 = a2[375];
  if (a2[306] != 1 || (*(_BYTE *)(*((_QWORD *)result + 9) + 1) & 0x10) != 0)
  {
    sub_22E8FCA40(result, a2[375], 0x1640u, 0, (uint64_t)v9);
    if (a2[377])
      v4 = 6;
    else
      v4 = 4;
    if (a2[377])
      v5 = ", this";
    else
      v5 = "this";
    sub_22E729148(v5, v4, v3, 0, (uint64_t)v6);
    sub_22E890748((uint64_t)v9, v6);
    if (v8 < 0)
      operator delete(__p);
    return sub_22E903BEC(v9);
  }
  return result;
}

unsigned int *sub_22EBBC0DC(_QWORD *a1, unsigned int a2)
{
  unint64_t v4;
  unsigned int v6[24];

  v4 = sub_22EBBB18C((uint64_t)a1);
  if (v4 > 0xF)
    return sub_22EBBC14C((uint64_t)a1, a2, v4, 0);
  sub_22E8FCA40(a1, a2, 0xE65u, 0, (uint64_t)v6);
  sub_22E903BEC(v6);
  return (unsigned int *)1;
}

unsigned int *sub_22EBBC14C(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  unsigned int *v8;
  unsigned int *v9;
  int v10;

  v8 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(a1 + 88) + 2032, 16, 3);
  v9 = sub_22EBD02B8(v8, a2, a3, a4);
  sub_22EFF605C((uint64_t)v9);
  sub_22EBBBBEC(a1, v10, 0, 1, 0, 0);
  return v8;
}

uint64_t sub_22EBBC1D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 10288) < 0x10uLL)
    return 0;
  result = sub_22F10C2A4(*(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    if ((*(_DWORD *)(result + 28) & 0x7Fu) - 35 <= 2)
      return (*(unsigned __int8 *)(result + 74) >> 1) & 1;
    return 0;
  }
  return result;
}

uint64_t sub_22EBBC220(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4, uint64_t a5, int a6)
{
  unint64_t v9;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15[2];

  if (!a2)
    return 1;
  v9 = a2;
  if (a2 >= 0x10)
  {
    v13 = *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFF0);
    if (v13)
    {
      if (*(_BYTE *)(v13 + 16) == 57)
      {
        v9 = *(_QWORD *)(v13 + 8);
        v11 = *(uint64_t **)(v13 + 24);
        if (v11)
          goto LABEL_5;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = sub_22EF579A8(*(_QWORD *)(a1 + 88), v9, 0);
LABEL_5:
  result = sub_22EBBC368();
  if ((result & 1) != 0)
  {
    v15[0] = *v11;
    v15[1] = (uint64_t)(v11 + 1);
    v14 = sub_22F116708(v15);
    return sub_22F32D6EC(a1, v14, a6, a4, a5, v9);
  }
  else if ((*(_DWORD *)(result & 0xFFFFFFFFFFFFFFFELL) & 0xC000) == 0x4000)
  {
    return (uint64_t)sub_22EBBCB14(a1, (_DWORD *)(result & 0xFFFFFFFFFFFFFFFELL), 0, 0, (uint64_t)sub_22F2E6FA4, (uint64_t)v15);
  }
  return result;
}

uint64_t sub_22EBBC368()
{
  uint64_t v0;
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v30;
  int v31;
  _QWORD *v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  unsigned __int8 *v43;
  int v44;
  void **v45;
  int v46;
  void **v47;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t *v64;
  int v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  _QWORD v72[2];
  int v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  unsigned __int8 v80;
  void *v81;
  int v82;
  unint64_t *v83;
  uint64_t v84;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v66 = v7;
  v67 = (_QWORD *)v0;
  v84 = *MEMORY[0x24BDAC8D0];
  v65 = v8;
  v80 = v8;
  v64 = (unint64_t *)v9;
  v10 = (uint64_t)(v9 + 1);
  v11 = *v9;
  v79 = v11;
  v12 = v11;
  for (i = v11; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v14 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v14 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v12 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v14 == 24)
      goto LABEL_13;
    if (v14 == 26)
      break;
    if (((1 << v14) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v12 = i;
LABEL_14:
  v15 = sub_22F115668(v12);
  v16 = v15;
  v78 = __PAIR64__(v2, v15);
  v17 = v67[11];
  v18 = v64;
  v19 = *v64;
  if ((*(_BYTE *)(*(_QWORD *)(v17 + 2000) + 60) & 1) != 0)
    v19 = sub_22EF5DD84(v17, v19, 4);
  v20 = v65;
  v73 = 9;
  v74 = 0;
  v75 = v19;
  v76 = 0;
  v21 = v16 << 32;
  v77 = v64;
  if (v4)
  {
    if (v65)
      v21 |= 1uLL;
  }
  else
  {
    v21 |= 4uLL;
  }
  v72[0] = v21;
  v72[1] = v66 | ((unint64_t)v2 << 32);
  v22 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v81) = 0;
  v23 = sub_22F110500((uint64_t)&v81, v22);
  if (!v23)
    goto LABEL_25;
  if (*(_BYTE *)(v23 + 16) != 15)
  {
    v41 = v6;
    v42 = v4;
    if (v65)
    {
      v41 = *(uint64_t **)(*v6 + 16);
      v42 = ((*(_QWORD *)(*v6 + 24) - (_QWORD)v41) >> 3);
    }
    if (v42 != 1)
    {
      if (v42)
      {
        sub_22F0D5A50(v41[1]);
        v33 = v46;
        v32 = v67;
        v34 = 2872;
      }
      else
      {
        v32 = v67;
        v33 = v16;
        v34 = 2873;
      }
      goto LABEL_63;
    }
    if ((*(_BYTE *)(v67[9] + 1) & 0x20) != 0
      && (v22 && *(_BYTE *)(v22 + 16) == 14
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) == 14 && sub_22F10CF48(v22)))
    {
      sub_22E8FCA40(v67, v16, 0x1918u, 0, (uint64_t)&v81);
      sub_22E8906A0((uint64_t)&v81, (uint64_t *)&v78);
      sub_22E903BEC((unsigned int *)&v81);
    }
    v71 = 0;
    v43 = (unsigned __int8 *)*v41;
    v71 = v43;
    if (*v43 == 180)
    {
      sub_22F0D5A50((uint64_t)v43);
      sub_22E8FCA40(v67, v44, 0xB3Au, 0, (uint64_t)&v81);
      v45 = (void **)sub_22E894E38((uint64_t)&v81, &v80);
LABEL_64:
      v47 = (void **)sub_22E8901B8((uint64_t)v45, (uint64_t *)&v79);
LABEL_65:
      sub_22E8906A0((uint64_t)v47, (uint64_t *)&v78);
LABEL_66:
      sub_22E903BEC((unsigned int *)&v81);
      return 1;
    }
    v70 = 0;
    if (sub_22EDC7260(v67, *v64, v10, (uint64_t *)&v71, (uint64_t *)&v70, 0, 0) == 1)
    {
      sub_22E8FCA40(v67, v16, 0xB37u, 0, (uint64_t)&v81);
      v53 = sub_22E8901B8((uint64_t)&v81, (uint64_t *)&v79);
      v69 = *((_QWORD *)v71 + 1);
      v54 = sub_22E8901B8(v53, &v69);
      v55 = sub_22E8906A0(v54, (uint64_t *)&v78);
      sub_22F0D4E74((uint64_t)v71);
      v68 = v56;
      sub_22E8906A0(v55, &v68);
      goto LABEL_66;
    }
    v11 = v70;
    if (v70 <= 0xF)
      return 1;
    v79 = v70;
LABEL_24:
    v73 = 9;
    v74 = 0;
    v75 = v11;
    v76 = 0;
    v77 = v64;
LABEL_25:
    v25 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF0);
    v26 = *(_DWORD *)(v25 + 16);
    if ((v26 & 0x400) != 0)
      goto LABEL_38;
    if (v4)
    {
      v27 = 0;
      v28 = 1;
      while ((*(_BYTE *)(v6[v27] + 1) & 0x80) == 0)
      {
        v27 = v28;
        if (v4 <= v28++)
        {
          if (v4 == 1 && (v65 & 1) == 0 && *(unsigned __int8 *)*v6 != 180)
            return sub_22E95EF24(v67, (uint64_t *)v64, v11, v66, *v6, v2);
          goto LABEL_33;
        }
      }
LABEL_38:
      v35 = v67[11];
      if (!v25 || (*(_DWORD *)(v25 + 16) & 0xFE) != 0x28)
      {
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0) + 16) & 0xFE) != 0x28)
        {
          v36 = (uint64_t *)&v79;
LABEL_42:
          v37 = *v36;
          if (v20)
            v38 = 0;
          else
            v38 = v66;
          if (v20)
            v39 = 0;
          else
            v39 = v2;
          v40 = sub_22E3CD3D4(v35 + 2032, 8 * v4 + 32, 3);
          sub_22F06199C(v40, v37, v18, v38, (uint64_t)v6, v4, v39);
          return v40;
        }
        v25 = sub_22F10CF48(v25);
        if (!v25)
        {
          v36 = (uint64_t *)&v79;
          v18 = v64;
          v20 = v65;
          goto LABEL_42;
        }
        v26 = *(_DWORD *)(v25 + 16);
        v18 = v64;
        v20 = v65;
      }
      if ((v26 & 0x100000) != 0)
      {
        v18 = v64;
        v20 = v65;
        do
        {
          v25 = *(_QWORD *)(*(_QWORD *)(v25 + 32) & 0xFFFFFFFFFFFFFFF0);
          if (v25)
          {
            v63 = *(_DWORD *)(v25 + 16);
            if ((v63 & 0xFE) == 0x28)
              continue;
          }
          v25 = sub_22F10CF48(v25);
          v63 = *(_DWORD *)(v25 + 16);
        }
        while ((v63 & 0x100000) != 0);
      }
      v36 = (uint64_t *)(v25 + 32);
      goto LABEL_42;
    }
LABEL_33:
    v30 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFF0;
    if ((*(_DWORD *)(*(_QWORD *)v30 + 16) & 0xFEu) - 2 <= 3)
    {
      if ((v65 & 1) == 0)
      {
        sub_22E8FCA40(v67, v16, 0x13FFu, 0, (uint64_t)&v81);
        v47 = &v81;
        goto LABEL_65;
      }
      v11 = sub_22EF5BA38(v67[11], v11);
      v30 = *(_QWORD *)(*(_QWORD *)(v79 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0;
    }
    v31 = *(_DWORD *)(*(_QWORD *)v30 + 16);
    if (v31 - 25 <= 1)
    {
      v32 = v67;
      v33 = v16;
      v34 = 3612;
LABEL_63:
      sub_22E8FCA40(v32, v33, v34, 0, (uint64_t)&v81);
      v45 = &v81;
      goto LABEL_64;
    }
    if ((v31 & 0xFF800FF) != 0x528000B)
    {
      v81 = &unk_24FAB6EA8;
      v82 = 3666;
      v83 = &v78;
      v40 = 1;
      if ((sub_22EE8B0B0((uint64_t)v67, v16, v11) & 1) != 0)
        return v40;
    }
    sub_22EC395BC(&v81, v67, &v73, v72, v6, v4, 0, 1);
    v49 = sub_22EC3DF80((int)&v81, (int)v67);
    v40 = v49;
    if ((v49 & 1) != 0)
    {
LABEL_102:
      sub_22EC3CE2C((uint64_t)&v81);
      return v40;
    }
    v50 = (unsigned __int8 *)(v49 & 0xFFFFFFFFFFFFFFFELL);
    if ((v49 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      v51 = *v50;
      if (v51 != 116)
      {
LABEL_83:
        if (v51 != 119 && v51 != 131 && v51 != 189)
        {
          v57 = *((_QWORD *)v50 + 1);
          v58 = v67[11];
          v59 = sub_22E8BBBD0(v79);
          if (v67[162] == v67[161])
          {
            v60 = 0;
            if (v65)
              v61 = 0;
            else
              v61 = v66;
            if (v65)
              v2 = 0;
            v62 = 40;
          }
          else
          {
            v60 = v67[162];
            if (v65)
              v61 = 0;
            else
              v61 = v66;
            if (v65)
              v2 = 0;
            if (HIDWORD(v60))
              v62 = 48;
            else
              v62 = 40;
          }
          v40 = sub_22E3CD3D4(v58 + 2032, v62, 3);
          sub_22F062AB0(v40, v57, v59, (uint64_t)v64, 5, (uint64_t)v50, 0, v60, v61, SHIDWORD(v61), v2);
        }
        goto LABEL_102;
      }
      v52 = (unsigned __int8 *)*((_QWORD *)v50 + 3);
    }
    else
    {
      v52 = 0;
    }
    v51 = *v52;
    goto LABEL_83;
  }
  v24 = sub_22EC4531C();
  v79 = v24;
  if (v24 >= 0x10)
  {
    v11 = v24;
    goto LABEL_24;
  }
  return 1;
}

_DWORD *sub_22EBBCB14(uint64_t a1, _DWORD *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __n128 v33;
  _DWORD *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  int v39;
  unsigned __int8 v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  llvm *v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  _QWORD v51[5];
  uint64_t v52;
  int64x2_t v53;
  uint64_t *v54;
  uint64_t v55;
  _BYTE v56[16];
  uint64_t v57;
  int64x2_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE v61[16];
  _QWORD v62[2];
  unsigned int v63;
  _QWORD v64[2];
  unsigned int v65;
  __int128 v66;
  __int128 v67;
  _QWORD v68[2];
  __int128 v69;
  _BYTE v70[24];
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return a2;
  v8 = *(_DWORD *)(a1 + 3696);
  if (!v8 || !*(_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * v8 - 564) || (*a2 & 0x1C000) == 0)
    return a2;
  v10 = *(_QWORD *)(a1 + 10208);
  v11 = *(_QWORD *)(a1 + 10200);
  v44 = 0;
  v45 = 0;
  v43 = a1;
  v46 = 0;
  v47 = v51;
  v48 = v51;
  v49 = 2;
  v50 = 0;
  v51[2] = a3;
  v51[3] = a5;
  v51[4] = a6;
  v52 = 1;
  v53 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v38 = v10 - v11;
  v54 = (uint64_t *)v56;
  v55 = 0x200000000;
  v57 = 1;
  v58 = v53;
  v59 = v61;
  v60 = 0x200000000;
  v12 = 224;
  v62[0] = 1;
  do
  {
    *(uint64_t *)((char *)&v43 + v12) = -4096;
    v12 += 16;
  }
  while (v12 != 256);
  v64[0] = 1;
  for (i = 264; i != 328; i += 16)
    *(uint64_t *)((char *)&v43 + i) = -4096;
  v40 = 0;
  v14 = sub_22EBD1178(&v43, (uint64_t)a2, &v40);
  if (v14 <= 1)
  {
    *(_QWORD *)&v66 = &v52;
    sub_22EBD196C((uint64_t)&v66, (uint64_t)a2, 0);
  }
  if ((_DWORD)v55)
  {
    v39 = v40;
    v15 = v54;
    v16 = 8 * v55;
    while (1)
    {
      v17 = *v15;
      v41 = v17;
      *(_QWORD *)&v66 = v17;
      v18 = sub_22F338CC8(v43 + 10176, (uint64_t *)&v66);
      if (*(_QWORD *)(v18 + 40))
        break;
LABEL_31:
      sub_22F338D48(v43, v17);
      ++v15;
      v16 -= 8;
      if (!v16)
        goto LABEL_39;
    }
    v19 = v18;
    if (v39)
    {
      v68[0] = 0;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      *(_QWORD *)&v67 = v68;
      HIDWORD(v67) = 1;
      v68[1] = 0;
      *(_QWORD *)&v69 = 0;
      *(_QWORD *)((char *)&v69 + 6) = 0;
      memset(v70, 0, sizeof(v70));
      goto LABEL_28;
    }
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v20 + 408);
    v22 = *(unsigned int *)(v20 + 48);
    v23 = *(_QWORD *)(v20 + 40);
    if (v21 >= v22)
      v21 = 0;
    sub_22F330280((uint64_t)&v66, v23 + 88 * v21);
    v24 = sub_22F333BB4(v62, &v41)[1];
    if ((v24 & 1) != 0)
      goto LABEL_28;
    v25 = (void **)(v24 & 0xFFFFFFFFFFFFFFFELL);
    if (!v25)
      goto LABEL_28;
    v26 = *(unsigned __int8 *)v25;
    if ((v26 + 45) < 2u)
    {
      v42 = v25;
      v25 = (void **)sub_22F2A150C(v64, (uint64_t *)&v42)[1];
      if (!v25)
        goto LABEL_28;
      v26 = *(unsigned __int8 *)v25;
    }
    if (v26 == 188)
    {
      if ((*((_BYTE *)v25 + 2) & 8) != 0)
        v32 = (unint64_t)v25[8];
      else
        v32 = (unint64_t)v25[3];
      v30 = v32 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_37:
      if (v30)
      {
        DWORD2(v67) = 0;
        sub_22F33852C((uint64_t)&v66, v30);
      }
      goto LABEL_28;
    }
    if (v26 == 161)
    {
      v27 = (unint64_t *)(v25 + 2);
      v28 = *(unsigned int *)v25;
      v29 = (unint64_t *)&v25[2 * ((v28 >> 18) & 1) + 4];
      if ((v28 & 0x100000) == 0)
        v29 = v27;
      v30 = *v29;
      goto LABEL_37;
    }
LABEL_28:
    v31 = *(_QWORD *)(v19 + 40);
    if (!v31)
      sub_22E4A06C4();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v31 + 48))(v31, &v66);
    v42 = (void **)v70;
    sub_22E8D19C8(&v42);
    if ((_QWORD *)v67 != v68)
      free((void *)v67);
    goto LABEL_31;
  }
LABEL_39:
  if ((v64[0] & 1) == 0)
    llvm::deallocate_buffer((llvm *)v64[1], (void *)(16 * v65));
  if ((v62[0] & 1) == 0)
    llvm::deallocate_buffer((llvm *)v62[1], (void *)(16 * v63));
  if (v59 != v61)
    free(v59);
  if ((v57 & 1) == 0)
    llvm::deallocate_buffer((llvm *)v58.i64[0], (void *)(8 * v58.u32[2]));
  if (v54 != (uint64_t *)v56)
    free(v54);
  if ((v52 & 1) == 0)
    llvm::deallocate_buffer((llvm *)v53.i64[0], (void *)(8 * v53.u32[2]));
  if (v48 != v47)
    free(v48);
  llvm::deallocate_buffer(v44, (void *)(16 * v46));
  if ((v14 & 1) == 0 && (_DWORD *)(v14 & 0xFFFFFFFFFFFFFFFELL) == a2)
    return a2;
  v35 = (_DWORD *)(*(_QWORD *)(a1 + 3688) + 576 * *(unsigned int *)(a1 + 3696) - 564);
  *v35 += 858993459 * (v38 >> 4) - 858993459 * ((*(_QWORD *)(a1 + 10208) - *(_QWORD *)(a1 + 10200)) >> 4);
  if ((v14 & 1) != 0 && a4)
  {
    v44 = 0;
    v45 = 0;
    v43 = a1;
    v46 = 0;
    v47 = v51;
    v48 = v51;
    v49 = 2;
    v50 = 0;
    sub_22EBCEF90(&v43, (unint64_t)a2, v33);
    v14 = v36;
    if (v48 != v47)
      free(v48);
    if (v46)
      v37 = (void *)(16 * v46);
    else
      v37 = 0;
    llvm::deallocate_buffer(v44, v37);
  }
  return (_DWORD *)v14;
}

BOOL sub_22EBBD024(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  BOOL v12;
  unint64_t v13;
  _BOOL8 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  void *v21;
  uint64_t v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x24BDAC8D0];
  v4 = sub_22E903070(a1, 1);
  v5 = v4 - 72;
  if (!v4)
    v5 = 0;
  if ((*(_WORD *)(v4 + 8) & 0x7Eu) - 52 >= 6)
    v6 = 0;
  else
    v6 = v5;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) != 0)
  {
    v7 = sub_22E9FE318(a1, v6, a2);
    if (v7 < 1)
      return 0;
    if (v7 == 1)
    {
      v8 = *(_QWORD *)(a2 + 16);
      v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
      if ((v8 & 4) != 0)
        v9 = (_QWORD *)*v9;
      v10 = sub_22EFCE144((unint64_t)v9, *(_QWORD *)(a2 + 40));
      if (v10)
      {
        while (1)
        {
          v11 = (unint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
          v12 = (v10 & 0xFFFFFFFFFFFFFFF8) == 0 || (v10 & 4) == 0;
          v13 = v10 & 0xFFFFFFFFFFFFFFF8;
          if (!v12)
            v13 = *v11;
          if (v13 && (*(_DWORD *)(v13 + 28) & 0x7Eu) - 58 >= 0xFFFFFFFA && (int)sub_22E9FE318(a1, v6, v13) > 1)
            return 0;
          if (!v12)
          {
            v10 = v11[1];
            if (v10)
              continue;
          }
          break;
        }
      }
    }
  }
  v21 = v23;
  v22 = 0x400000000;
  if ((sub_22EFD6DD0(a2, (uint64_t)&v21) & 1) != 0)
  {
    v14 = 1;
  }
  else if ((*(_BYTE *)(*(_QWORD *)(a1 + 72) + 68) & 0x20) != 0 && (_DWORD)v22)
  {
    v15 = (uint64_t *)v21;
    v16 = 8 * v22 - 8;
    do
    {
      v17 = *v15++;
      v18 = sub_22E9FE318(a1, v6, v17);
      v14 = v18 < 2;
      v19 = v18 > 1 || v16 == 0;
      v16 -= 8;
    }
    while (!v19);
  }
  else
  {
    v14 = 0;
  }
  if (v21 != v23)
    free(v21);
  return v14;
}

uint64_t sub_22EBBD1E4(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t (**v48)();
  unsigned int v49;
  int v50;

  if (*(_DWORD *)(a9 + 120) && (v17 = (uint64_t *)(a9 + 112), v16 = *(_QWORD *)(a9 + 112), *(_DWORD *)v16 == 2))
  {
    if (((**(_DWORD **)a9 >> 12) & 0x3Fu) - 33 <= 2)
    {
      v18 = *(_DWORD *)(v16 + 4);
      v19 = a1;
      v20 = 4000;
LABEL_18:
      sub_22E8FCA40(v19, v18, v20, 0, (uint64_t)&v48);
      v47 = *(_QWORD *)(a9 + 72);
      sub_22E8906A0((uint64_t)&v48, &v47);
      sub_22E903BEC((unsigned int *)&v48);
      return 1;
    }
    if ((*(_WORD *)(v16 + 32) & 0x80) != 0)
    {
      v18 = *(_DWORD *)(v16 + 4);
      v19 = a1;
      v20 = 4726;
      goto LABEL_18;
    }
    if (!(a10 | *(_QWORD *)(v16 + 40)))
    {
      v18 = *(_DWORD *)(v16 + 4);
      v19 = a1;
      v20 = 2714;
      goto LABEL_18;
    }
    v45 = *(_QWORD *)(v16 + 40);
    v46 = a4;
    v44 = a7;
    sub_22E8280F4(v16);
    sub_22F333148((uint64_t *)(a9 + 112), *(_QWORD *)(a9 + 112));
    v28 = *(unsigned int *)(a9 + 120);
    v21 = 1;
    if ((_DWORD)v28)
    {
      v29 = 0;
      v30 = 120 * v28;
      v40 = 120 * v28;
      do
      {
        v31 = *v17;
        if (*(_DWORD *)(*v17 + v29) != 2)
          break;
        v32 = *(_DWORD **)(v31 + v29 + 40);
        if (v32 && (*v32 & 0x18000) == 0)
        {
          v41 = v29;
          v43 = v31 + v29;
          if ((*(_BYTE *)(a1[9] + 1) & 4) != 0)
          {
            v38 = a1[11];
            v39 = *(unsigned __int8 **)(v31 + v29 + 40);
            v34 = sub_22EF67C8C(v38);
            v49 = sub_22EF6A330(v38, v34);
            if (v49 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v48);
            else
              v48 = 0;
            LOBYTE(v50) = 1;
            v35 = sub_22EF67C8C(a1[11]);
            v36 = sub_22ED02FD4(a1, v39, v35, (uint64_t)&v48, 3);
            v37 = v43;
            *(_QWORD *)(v43 + 40) = v36 & 0xFFFFFFFFFFFFFFFELL;
            if (v49 >= 0x41 && v48)
            {
              MEMORY[0x2348A0E84](v48, 0x1000C8000313F17);
              v37 = v43;
            }
            v33 = *(_QWORD *)(v37 + 40);
          }
          else
          {
            LOBYTE(v49) = 0;
            v48 = off_24FAB8300;
            v50 = 3999;
            v33 = sub_22EB4CB24(a1, (uint64_t)v32, 0, &v48, 1) & 0xFFFFFFFFFFFFFFFELL;
            *(_QWORD *)(v43 + 40) = v33;
          }
          v30 = v40;
          v29 = v41;
          if (!v33)
            return v21;
        }
        v29 += 120;
      }
      while (v30 != v29);
    }
  }
  else
  {
    v45 = 0;
    v46 = a4;
    v44 = a7;
    v21 = 0;
  }
  v22 = sub_22EE8156C((uint64_t)a1, a9, 0, a4, a5, a6, a7, a8);
  if ((*(_WORD *)(a9 + 1088) & 1) != 0 || (**(_QWORD **)a9 & 0x3F000) == 0x32000)
    return 1;
  v23 = v22;
  v42 = a8;
  v24 = *v22;
  if (a10 && *(unsigned __int8 *)a10 == 215)
    sub_22F0D4E74(a10);
  else
    v25 = 0;
  v26 = sub_22EBBD504((uint64_t)a1, a2 | ((unint64_t)*(unsigned int *)(a9 + 76) << 32), a3, v46, a5, a6, v44, v42, v24, v23, v45, v21, v25, (unsigned __int8 *)a10);
  v21 = v26;
  if ((v26 & 1) == 0)
    sub_22F31123C((unsigned int *)a1, v26 & 0xFFFFFFFFFFFFFFFELL);
  return v21;
}

uint64_t sub_22EBBD504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, unint64_t *a10, uint64_t a11, uint64_t a12, unint64_t a13, unsigned __int8 *a14)
{
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t *v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  int v52;
  int v53;
  _QWORD *v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  uint64_t *p_src;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *p_dst;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  BOOL v112;
  _BOOL4 v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  BOOL v119;
  char v120;
  int v121;
  unint64_t v122;
  _BOOL4 v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 *v139;
  unint64_t v140;
  unsigned __int8 *v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  BOOL *v151;
  int v152;
  _BOOL4 v153;
  _BOOL4 v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  BOOL *v165;
  int v166;
  void *v167;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  unint64_t v183;
  unint64_t v184;
  char *v185;
  unint64_t v186;
  int v187;
  BOOL *v188;
  char *v189;
  uint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  unint64_t v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unint64_t v212;
  unsigned int v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  unint64_t v222;
  uint64_t v223;
  unsigned __int8 *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  size_t v233;
  void *v234;
  unint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unsigned int *v243;
  int v244;
  int v245;
  uint64_t v246;
  int *v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  int v252;
  uint64_t v253;
  unsigned int v254;
  int v255;
  unint64_t v256;
  BOOL v257;
  int v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  int v262;
  int v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unsigned int v269;
  unsigned int v270;
  int v271;
  int v272;
  uint64_t *v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t *v276;
  uint64_t *v277;
  uint64_t v278;
  unsigned __int8 *v279;
  unint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  BOOL v284[8];
  uint64_t v285;
  unint64_t v286;
  int v287;
  unsigned int v288;
  char v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292[24];
  unsigned int v293[24];
  _DWORD v294[2];
  unint64_t v295;
  uint64_t *v296;
  uint64_t v297[4];
  _BYTE v298[24];
  unint64_t v299;
  unsigned int v300;
  char v301;
  unint64_t v302;
  unsigned int v303;
  unsigned int v304[25];
  unsigned __int8 v305;
  BOOL v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD v309[2];
  unsigned int v310;
  unint64_t v311;
  void *__src;
  __int128 __len;
  void *__p[2];
  uint64_t v315;
  char v316;
  unint64_t v317;
  unint64_t *v318;
  BOOL *v319;
  int v320;
  int v321;
  char v322;
  unint64_t __dst;
  __int128 v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  uint64_t v329;

  v14 = MEMORY[0x24BDAC7A8]();
  v269 = v16;
  v270 = v15;
  v273 = v17;
  v274 = v18;
  v272 = v19;
  v281 = v20;
  v283 = v14;
  v21 = a14;
  v280 = a13;
  v22 = a9;
  v278 = a11;
  v329 = *MEMORY[0x24BDAC8D0];
  v267 = HIDWORD(v23);
  v268 = v23;
  v24 = a12;
  v266 = a12 & 0xFFFFFFFFFFFFFF00;
  v276 = a10;
  v26 = (uint64_t)(a10 + 1);
  v25 = *a10;
  v317 = v25;
  v318 = a10 + 1;
  for (i = v25; ; i = sub_22F115B7C(i))
  {
    while (1)
    {
      if ((i & 0xF) != 0)
        goto LABEL_12;
      v28 = *(unsigned __int8 *)(*(_QWORD *)(i & 0xFFFFFFFFFFFFFFF0) + 16);
      if (v28 <= 0x39)
        break;
LABEL_7:
      if (sub_22F115668(i))
        v25 = i;
      i = sub_22F115B7C(i);
      if (!i)
        goto LABEL_14;
    }
    if (v28 == 24)
      goto LABEL_13;
    if (v28 == 26)
      break;
    if (((1 << v28) & 0x20000000200003CLL) == 0)
      goto LABEL_7;
LABEL_12:
    ;
  }
  if ((*(_BYTE *)(i + 23) & 0x10) == 0)
    goto LABEL_12;
LABEL_13:
  v25 = i;
LABEL_14:
  v29 = sub_22F115668(v25);
  v311 = v29 | ((unint64_t)sub_22F1167E8((uint64_t *)&v317) << 32);
  v30 = v281;
  v310 = v281;
  if (!HIDWORD(v280) || !(_DWORD)v280)
  {
    if (v21)
    {
      v33 = *v21;
      if (v33 == 180)
      {
        sub_22F0D5A50((uint64_t)v21);
        v40 = v39;
        sub_22F0D60E4((uint64_t)v21);
        v36 = 0;
        v41 = v40;
        v31 = 1;
        v38 = v41 | (v42 << 32);
        v309[0] = ((unint64_t)v29 << 32) | 1;
        v37 = 2;
        v277 = (uint64_t *)&a14;
        v35 = 1;
        goto LABEL_30;
      }
      if (v33 == 215)
      {
        v34 = (uint64_t *)(v21 + 24);
        v31 = *((unsigned int *)v21 + 1);
LABEL_29:
        v277 = v34;
        v37 = 0;
        v35 = 0;
        v38 = v29 | ((unint64_t)v29 << 32);
        v309[0] = ((unint64_t)v29 << 32) | 3;
        v36 = 1;
        goto LABEL_30;
      }
      v31 = 1;
    }
    else
    {
      v31 = 0;
    }
    v34 = (uint64_t *)&a14;
    goto LABEL_29;
  }
  v31 = v21 != 0;
  if (v21 && *v21 == 215)
  {
    v32 = (uint64_t *)(v21 + 24);
    v31 = *((unsigned int *)v21 + 1);
  }
  else
  {
    v32 = (uint64_t *)&a14;
  }
  v277 = v32;
  v35 = 0;
  v36 = 0;
  v309[0] = (unint64_t)v29 << 32;
  v37 = 1;
  v38 = v280;
LABEL_30:
  v309[1] = v38;
  v43 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v317) = 0;
  v44 = sub_22F110500((uint64_t)&v317, v43);
  v45 = (uint64_t *)v283;
  if (v44)
  {
    if (*(_BYTE *)(v44 + 16) == 15)
    {
      if (v24)
      {
        if (v278)
        {
          sub_22EFF605C(v278);
          v29 = v46;
        }
        sub_22E8FCA40((_QWORD *)v283, v29, 0xC6Bu, 0, (uint64_t)&v317);
        LODWORD(__dst) = 2;
        v47 = sub_22E8900C4((uint64_t)&v317, (int *)&__dst);
        if (v278)
          sub_22F0D4E74(v278);
        else
          v48 = (void *)v311;
        __src = v48;
        p_src = (uint64_t *)&__src;
LABEL_57:
        sub_22E8906A0(v47, p_src);
LABEL_58:
        sub_22E903BEC((unsigned int *)&v317);
        return 1;
      }
      LODWORD(v317) = 8;
      v318 = 0;
      v319 = (BOOL *)a9;
      v320 = 0;
      v321 = v281;
      v322 = 0;
      v59 = sub_22EC4531C();
      a9 = v59;
      if (v59 < 0x10)
        return 1;
LABEL_65:
      v69 = sub_22EF5C728(*(_QWORD *)(v283 + 88), v59);
      if (v69 && (v70 = v69, *(_BYTE *)(v69 + 16) == 2))
      {
        v71 = v31;
        v72 = *(_QWORD *)(v283 + 88);
        v73 = sub_22EF67C8C(v72);
        v74 = HIDWORD(v311);
        v278 = sub_22E3CD3D4(v72 + 2032, 32, 3);
        v75 = v72;
        v31 = v71;
        sub_22EFF8F1C(v278, v75, v70 + 40, v73, v74);
        a9 = *(_QWORD *)(v70 + 32);
        v68 = 1;
      }
      else
      {
        v68 = 0;
      }
      goto LABEL_69;
    }
    LOBYTE(v299) = v35;
    v49 = v31;
    v50 = v277;
    v51 = v49;
    if (v35)
    {
      v50 = *(uint64_t **)(*v277 + 16);
      v49 = ((*(_QWORD *)(*v277 + 24) - (_QWORD)v50) >> 3);
    }
    if (v49)
      v52 = v36;
    else
      v52 = 1;
    if (v52 == 1)
    {
      v53 = v281;
      v54 = (_QWORD *)v283;
      v55 = 2887;
      goto LABEL_46;
    }
    if (v49 >= 2)
    {
      sub_22F0D5A50(v50[1]);
      v53 = v56;
      v54 = (_QWORD *)v283;
      v55 = 2885;
LABEL_46:
      sub_22E8FCA40(v54, v53, v55, 0, (uint64_t)&v317);
      v57 = (uint64_t)&v317;
LABEL_47:
      v58 = sub_22E8901B8(v57, (uint64_t *)&a9);
      sub_22E8906A0(v58, (uint64_t *)&v311);
      goto LABEL_58;
    }
    if (v35 && (*(_BYTE *)(*(_QWORD *)(v283 + 72) + 1) & 8) == 0)
    {
      sub_22F0D5A50((uint64_t)a14);
      sub_22E8FCA40((_QWORD *)v283, v60, 0x143Bu, 0, (uint64_t)&v317);
      v61 = sub_22E8901B8((uint64_t)&v317, (uint64_t *)&a9);
      sub_22E8906A0(v61, (uint64_t *)&v311);
      sub_22E903BEC((unsigned int *)&v317);
    }
    __src = 0;
    v62 = (unsigned __int8 *)*v50;
    __src = v62;
    if (*v62 == 180)
    {
      sub_22F0D5A50((uint64_t)v62);
      sub_22E8FCA40((_QWORD *)v283, v63, 0xB3Au, 0, (uint64_t)&v317);
      v57 = sub_22E894E38((uint64_t)&v317, (unsigned __int8 *)&v299);
      goto LABEL_47;
    }
    __dst = 0;
    if (sub_22EDC7260((_QWORD *)v283, *v276, v26, (uint64_t *)&__src, (uint64_t *)&__dst, 0, 0) == 1)
    {
      sub_22E8FCA40((_QWORD *)v283, v281, 0xB46u, 0, (uint64_t)&v317);
      v65 = sub_22E8901B8((uint64_t)&v317, (uint64_t *)&a9);
      *(_QWORD *)v284 = *((_QWORD *)__src + 1);
      v66 = sub_22E8901B8(v65, (uint64_t *)v284);
      v47 = sub_22E8906A0(v66, (uint64_t *)&v311);
      sub_22F0D4E74((uint64_t)__src);
      v297[0] = v67;
      p_src = v297;
      goto LABEL_57;
    }
    if (__dst < 0x10)
      return 1;
    a9 = __dst;
    v31 = v51;
  }
  v68 = v24;
  if (!v24)
  {
    v59 = a9;
    goto LABEL_65;
  }
LABEL_69:
  v76 = a9;
  v77 = v311;
  __dst = a9;
  *(_QWORD *)v284 = v311;
  v78 = *(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0);
  v79 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v78 + 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  if ((v79 - 25) <= 1)
  {
    sub_22E8FCA40((_QWORD *)v283, v311, 0xB6Au, 0, (uint64_t)&v317);
    v80 = sub_22E8901B8((uint64_t)&v317, (uint64_t *)&__dst);
    LODWORD(__src) = 0;
    v81 = sub_22E8900C4(v80, (int *)&__src);
    v82 = sub_22E8906A0(v81, (uint64_t *)v284);
    goto LABEL_71;
  }
  if ((v79 & 0xFE) != 0x28)
  {
    if ((*(_BYTE *)(v78 + 17) & 4) == 0)
    {
      LODWORD(v318) = 4002;
      v319 = v284;
      v317 = (unint64_t)&unk_24FAB84B0;
      if ((sub_22EE8B0B0(v283, v311, a9) & 1) != 0)
        return 1;
      v76 = __dst;
    }
    v317 = (unint64_t)&unk_24FAB6EF8;
    LODWORD(v318) = 2621;
    if ((sub_22EAB2EB4(v283, v77, v76, (void (***)(_QWORD, uint64_t, _QWORD, uint64_t))&v317) & 1) != 0)
      return 1;
    if ((*(_BYTE *)(*(_QWORD *)(__dst & 0xFFFFFFFFFFFFFFF0) + 17) & 8) != 0)
    {
      sub_22E8FCA40((_QWORD *)v283, v77, 0x1406u, 0, (uint64_t)&v317);
      p_dst = (uint64_t *)&__dst;
    }
    else
    {
      v95 = *(_QWORD *)((__dst & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v95 & 8) != 0
        && (*(_DWORD *)((v95 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFF800) != 0
        && (*(_BYTE *)(*(_QWORD *)(v283 + 72) + 60) & 1) == 0)
      {
        sub_22E8FCA40((_QWORD *)v283, v77, 0xA28u, 0, (uint64_t)&v317);
        v172 = *(_QWORD *)(__dst & 0xFFFFFFFFFFFFFFF0);
        if ((*(_BYTE *)(v172 + 8) & 0xF) != 0)
          v172 = (unint64_t)sub_22F10D2BC(__dst);
        v297[0] = v172 & 0xFFFFFFFFFFFFFFF0;
        v173 = sub_22E8901B8((uint64_t)&v317, v297);
        v174 = *(_QWORD *)((__dst & 0xFFFFFFFFFFFFFFF0) + 8);
        if ((v174 & 8) != 0)
        {
          v176 = *(_QWORD *)((v174 & 0xFFFFFFFFFFFFFFF0) + 0x18);
          v175 = *(_QWORD *)((v174 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0xFFFFFFFF00000000;
        }
        else
        {
          v175 = 0;
          v176 = 0;
        }
        v299 = v175 | v176 | (v174 | __dst) & 7;
        sub_22F1191A4(&v299, *(_QWORD *)(v283 + 88), (uint64_t)&__src);
        v83 = *(unsigned __int8 *)(sub_22F2F3734(v173, &__src) + 80);
        if (SHIBYTE(__len) < 0)
          operator delete(__src);
LABEL_72:
        sub_22E903BEC((unsigned int *)&v317);
        if (v83)
          return 1;
LABEL_76:
        v88 = a9;
        if ((*(_WORD *)(*(_QWORD *)(v283 + 72) + 148) & 2) != 0)
        {
          v89 = *(_QWORD *)((a9 & 0xFFFFFFFFFFFFFFF0) + 8);
          if ((v89 & 8) == 0 || (*(_WORD *)((v89 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) == 0)
          {
            v153 = sub_22F40ACB8(*(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0));
            v88 = a9;
            if (v153)
            {
              v154 = sub_22F114FB4(*(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0));
              v155 = v31;
              v156 = *(_QWORD *)(v283 + 88);
              v157 = 128;
              if (v154)
                v157 = 64;
              v317 = v157;
              v158 = sub_22E491354((unsigned int *)&v317, v88);
              v159 = v156;
              v31 = v155;
              v88 = sub_22EF5DBC4(v159, v158, v317);
              a9 = v88;
            }
          }
        }
        v91 = sub_22EF5B848(*(_QWORD *)(v283 + 88), v88, 0);
        if (v68)
        {
          v92 = (unsigned __int8 *)v278;
          if (v278)
          {
            v93 = *(_QWORD *)(*(_QWORD *)(v278 + 8) & 0xFFFFFFFFFFFFFFF0);
            if ((*(_DWORD *)(v93 + 16) & 0xFF80000u) >= 0x8200001
              && v93
              && *(_DWORD *)(v93 + 16) == 11)
            {
              v94 = sub_22EB19A28(v283);
              if ((v94 & 1) != 0)
                return 1;
              v92 = (unsigned __int8 *)(v94 & 0xFFFFFFFFFFFFFFFELL);
            }
          }
        }
        else
        {
          v92 = (unsigned __int8 *)v278;
        }
        v99 = 0;
        v100 = 0;
        if (!v68 || !v92)
        {
          v279 = v92;
          goto LABEL_108;
        }
        if ((v92[1] & 0x80) != 0)
        {
          v279 = v92;
          v100 = 0;
          v99 = 0;
          goto LABEL_108;
        }
        if ((*(_BYTE *)(*(_QWORD *)(v283 + 72) + 1) & 4) != 0)
        {
          v137 = sub_22EF67C8C(*(_QWORD *)(v283 + 88));
          v138 = sub_22ECFABE8((uint64_t *)v283, v92, v137, 3, 0);
          v139 = v92;
          v101 = v138;
          if ((v138 & 1) == 0)
          {
            v140 = v91;
            v141 = v139;
            v142 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v139 + 1) & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
            if (v142 && *(_BYTE *)(v142 + 16) == 45)
            {
              sub_22E8FCA40((_QWORD *)v283, v310, 0x191Eu, 0, (uint64_t)&v317);
              __src = (void *)*((_QWORD *)v141 + 1);
              v170 = sub_22E8901B8((uint64_t)&v317, (uint64_t *)&__src);
              LODWORD(__dst) = 0;
              v171 = sub_22E8900C4(v170, (int *)&__dst);
              sub_22F2F30F4(v171, (uint64_t)"'size_t'");
              sub_22E903BEC((unsigned int *)&v317);
            }
            v91 = v140;
          }
        }
        else
        {
          LOWORD(v318) = 0;
          BYTE2(v318) = 0;
          v317 = (unint64_t)off_24FAB8538;
          v319 = (BOOL *)v92;
          v101 = sub_22ED03140(v283, v281, v92, &v317);
        }
        if ((v101 & 1) != 0)
          return 1;
        v143 = v101 & 0xFFFFFFFFFFFFFFFELL;
        if (!sub_22F1107D8(*(_QWORD *)(*(_QWORD *)(v143 + 8) & 0xFFFFFFFFFFFFFFF0)))
          return 1;
        v265 = v91;
        sub_22F00905C(v143, *(_QWORD *)(v283 + 88), 0, (uint64_t)v284);
        v279 = (unsigned __int8 *)v143;
        if (!(_BYTE)v286)
        {
          v99 = 0;
          v100 = 0;
          v152 = 1;
          if (v267)
          {
            if (!(_DWORD)v268)
            {
              v99 = 0;
              goto LABEL_188;
            }
            sub_22F0D5A50((uint64_t)v279);
            sub_22E8FCA40((_QWORD *)v283, v160, 0x14BEu, 0, (uint64_t)&v317);
            sub_22F0D4E74((uint64_t)v279);
            v297[0] = v161;
            v162 = sub_22E8906A0((uint64_t)&v317, v297);
            BYTE12(__len) = 0;
            *(_QWORD *)((char *)&__len + 4) = 0;
            v315 = 0;
            __p[0] = 0;
            __p[1] = 0;
            v316 = 0;
            __src = (void *)(v268 | (v268 << 32));
            v152 = 1;
            LOBYTE(__len) = 1;
            v163 = sub_22E890748(v162, &__src);
            BYTE12(v324) = 0;
            *(_QWORD *)((char *)&v324 + 4) = 0;
            v326 = 0;
            v327 = 0;
            v328 = 0;
            v325 = 0;
            __dst = v268 & 0xFFFFFFFF00000000 | v267;
            LOBYTE(v324) = 1;
            sub_22E890748(v163, &__dst);
            if (SHIBYTE(v327) < 0)
              operator delete(v325);
            if (SHIBYTE(v315) < 0)
              operator delete(__p[0]);
            sub_22E903BEC((unsigned int *)&v317);
            v100 = 0;
            v99 = 0;
            LODWORD(v267) = 0;
            LODWORD(v268) = 0;
          }
LABEL_187:
          v91 = v265;
LABEL_188:
          if ((_BYTE)v286 && v285 >= 0x41 && *(_QWORD *)v284)
            MEMORY[0x2348A0E84](*(_QWORD *)v284, 0x1000C8000313F17);
          if (!v152)
            return 1;
LABEL_108:
          v264 = v91;
          v308 = 0;
          v307 = 0;
          v102 = *(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0);
          if ((*(_BYTE *)(v102 + 17) & 4) != 0)
          {
            v104 = 0;
          }
          else
          {
            sub_22EF5CDF0(v45[11], v102);
            v104 = v103;
          }
          v105 = (uint64_t)v273;
          v106 = v274;
          v107 = *(_QWORD *)(v45[11] + 15088) + *(_QWORD *)(**(_QWORD **)(v45[11] + 15088) - 24);
          v108 = *(unsigned __int16 *)(v107 + 44);
          if (!*(_WORD *)(v107 + 44))
          {
            v109 = *(unsigned __int8 *)(v107 + 15);
            v110 = *(unsigned __int8 *)(v107 + 23);
            if (v109 <= v110)
              v108 = v110;
            else
              v108 = v109;
          }
          v111 = v45[9];
          v112 = v104 > v108;
          v113 = v104 > v108 && (*(_QWORD *)(v111 + 132) & 0x2000000000) != 0;
          v306 = v104 > v108 && (*(_QWORD *)(v111 + 132) & 0x2000000000) != 0;
          v114 = (*(_QWORD *)(v111 + 232) >> 33) & 1;
          v305 = v114;
          if (v272)
            v115 = 0;
          else
            v115 = 2;
          if ((*(_BYTE *)(*(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
          {
            if (v274)
            {
              v116 = 0;
              v117 = 1;
              while ((*(_BYTE *)(v273[v116] + 1) & 0x80) == 0)
              {
                v116 = v117;
                if (v274 <= v117++)
                  goto LABEL_123;
              }
            }
            else
            {
LABEL_123:
              v260 = v104;
              v262 = v37;
              v119 = v104 > v108;
              v120 = v35;
              v35 = v108;
              v121 = v99;
              v122 = v100;
              v85 = 1;
              if ((sub_22EBBF744(v45, v310, v270 | ((unint64_t)v269 << 32), v115, v115, a9, v68 != 0, &v306, &v305, v273, v274, &v308, &v307) & 1) != 0)return v85;
              v113 = v306;
              LODWORD(v114) = v305;
              v105 = (uint64_t)v273;
              v106 = v274;
              v100 = v122;
              v99 = v121;
              v108 = v35;
              LOBYTE(v35) = v120;
              v112 = v119;
              v37 = v262;
              v104 = v260;
            }
          }
          if (v113 && (_DWORD)v114)
          {
            sub_22E8FCA40(v45, v310, 0x139Fu, 0, (uint64_t)v304);
            sub_22E903BEC(v304);
            sub_22E8FCA40(v45, *(_DWORD *)(v308 + 24), 0x15A7u, 0, (uint64_t)&v317);
            __src = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v308 + 32))(v308);
            sub_22E890024((uint64_t)&v317, (uint64_t *)&__src);
            goto LABEL_58;
          }
          v257 = v112;
          if (!v68 || (*(_BYTE *)(*(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            v258 = 0;
          }
          else
          {
            v123 = sub_22EBC0944(v45, v310, a9);
            v105 = (uint64_t)v273;
            v106 = v274;
            v258 = v123;
          }
          v259 = v31;
          __dst = (unint64_t)&v324 + 8;
          *(_QWORD *)&v324 = 0x800000000;
          v124 = v308;
          if (!v308)
            goto LABEL_291;
          v125 = *(_QWORD *)(*(_QWORD *)(v308 + 48) & 0xFFFFFFFFFFFFFFF0);
          if (v125)
            v126 = *(_BYTE *)(v125 + 16) == 26;
          else
            v126 = 0;
          v263 = v37;
          v256 = v100;
          v254 = v108;
          v255 = v99;
          v261 = v104;
          if (!v126)
          {
            v127 = sub_22F10CF48(v125);
            v105 = (uint64_t)v273;
            v106 = v274;
            v125 = v127;
            v124 = v308;
          }
          v128 = ~(*(_QWORD *)(v125 + 16) >> 57) & 4;
          v85 = 1;
          if (v306 | v305)
            v129 = 2;
          else
            v129 = 1;
          v130 = v125;
          v131 = v105;
          v132 = v106;
          if ((sub_22EB326B0(v45, v270, v124, v125, v129, v105, v106, (uint64_t)&__dst, v128, 0, 0) & 1) != 0)
            goto LABEL_339;
          v252 = v270;
          v253 = v130;
          if ((_DWORD)v324)
          {
            v131 = __dst;
            v132 = v324;
          }
          v275 = v132;
          v133 = v45[11];
          v134 = sub_22EF67C8C(v133);
          v135 = sub_22EF5CDF0(v133, *(_QWORD *)(v134 & 0xFFFFFFFFFFFFFFF0));
          sub_22EF5CCD0(v45[11], *(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v317);
          v303 = v135;
          if (v135 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v302);
          }
          else
          {
            v136 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v135;
            if (!v135)
              v136 = 0;
            v302 = v136 & v317;
          }
          v99 = v255;
          LOBYTE(v299) = 0;
          v301 = 0;
          if (v68 || (*(_BYTE *)(*(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          {
            if (v255 && (*(_BYTE *)(*(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) == 0)
            {
              v284[0] = 0;
              LODWORD(__len) = v135;
              if (v135 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&__src);
              }
              else
              {
                if (v135)
                  v169 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v135;
                else
                  v169 = 0;
                __src = (void *)(v169 & v256);
              }
              llvm::APInt::umul_ov((llvm::APInt *)&__src, (const llvm::APInt *)&v302, v284);
              if (v301)
              {
                if (v300 >= 0x41 && v299)
                  MEMORY[0x2348A0E84](v299, 0x1000C8000313F17);
                v299 = v317;
                v300 = v318;
                LODWORD(v318) = 0;
              }
              else
              {
                v300 = v318;
                v299 = v317;
                LODWORD(v318) = 0;
                v301 = 1;
              }
              if (__len >= 0x41 && __src)
                MEMORY[0x2348A0E84](__src, 0x1000C8000313F17);
            }
          }
          else
          {
            v300 = v303;
            if (v303 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v299, (const llvm::APInt *)&v302);
            else
              v299 = v302;
            v301 = 1;
          }
          v271 = v68;
          v177 = v45[11];
          LODWORD(__len) = v135;
          if (v135 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&__src);
          else
            __src = 0;
          v178 = v134;
          sub_22F331408((llvm::APInt *)&v317, (llvm::APInt *)&v299, (llvm::APInt *)&__src);
          sub_22EFF8F1C((uint64_t)v284, v177, (uint64_t)&v317, v134, 0);
          if (v318 >= 0x41 && v317)
            MEMORY[0x2348A0E84](v317, 0x1000C8000313F17);
          if (__len >= 0x41 && __src)
            MEMORY[0x2348A0E84](__src, 0x1000C8000313F17);
          sub_22E5BBE34((uint64_t)v298, 0, v134, 0, 0, 0);
          v179 = v45[421];
          if ((v179 & 1) != 0)
          {
            v179 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v45[11] + 16048) + 16))(*(_QWORD *)(v45[11] + 16048), v179 >> 1);
            v45[421] = v179;
            if (!v179)
              goto LABEL_231;
          }
          else if (!v179)
          {
            goto LABEL_231;
          }
          v180 = *(_QWORD *)(v179 + 48);
          if (v180)
            v178 = v180 & 0xFFFFFFFFFFFFFFF0;
          else
            v178 = sub_22EF6462C(v45[11], v179);
LABEL_231:
          v181 = v45[11];
          v182 = sub_22EF5CDF0(v181, *(_QWORD *)(v134 & 0xFFFFFFFFFFFFFFF0));
          v183 = sub_22EF5CDF0(v45[11], *(_QWORD *)(*(_QWORD *)(v45[11] + 16408) & 0xFFFFFFFFFFFFFFF0));
          LODWORD(v318) = v182;
          if (v182 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v317);
          }
          else
          {
            if (v182)
              v184 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v182;
            else
              v184 = 0;
            v317 = v184 & (v261 / v183);
          }
          v68 = v271;
          sub_22EFF8F1C((uint64_t)v297, v181, (uint64_t)&v317, v134, 0);
          if (v318 >= 0x41 && v317)
            MEMORY[0x2348A0E84](v317, 0x1000C8000313F17);
          LOBYTE(v294[0]) = -103;
          if (byte_255E04EB3)
          {
            v185 = sub_22F0D3748(153);
            ++*((_DWORD *)v185 + 2);
          }
          v295 = v178;
          v296 = v297;
          v294[1] = 0;
          v294[0] = v294[0] & 0xF80000FF | 0x780000;
          __src = (char *)&__len + 8;
          *(_QWORD *)&__len = 0x800000000;
          v186 = v275;
          if (v275 + v129 <= 8)
          {
            v187 = 0;
            if (v301)
              v188 = v284;
            else
              v188 = v298;
            v189 = (char *)&__len + 8;
            v190 = (uint64_t *)v131;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v187 = __len;
            if (v301)
              v188 = v284;
            else
              v188 = v298;
            if (__len >= DWORD1(__len))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              *((_QWORD *)__src + __len) = v188;
              v187 = __len;
              v190 = (uint64_t *)v131;
              v186 = v275;
LABEL_251:
              v191 = (v187 + 1);
              LODWORD(__len) = v187 + 1;
              v45 = (uint64_t *)v283;
              if (v306)
              {
                v305 = 0;
                if (v191 >= DWORD1(__len))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                  v190 = (uint64_t *)v131;
                  v186 = v275;
                  *((_QWORD *)__src + __len) = v294;
                  LODWORD(v191) = __len + 1;
                }
                else
                {
                  *((_QWORD *)__src + v191) = v294;
                  LODWORD(v191) = v187 + 2;
                }
                LODWORD(__len) = v191;
              }
              if (!v305)
              {
LABEL_360:
                sub_22F2ECCD8((uint64_t)&__src, (uint64_t)__src + 8 * v191, v190, &v190[v186]);
                sub_22EB18D60((uint64_t)v45, v308, v252, (uint64_t)__src, __len);
                v245 = v310;
                sub_22E97E434(v45, v308, v253, 0, __src, __len, 0, v310, v281, v128);
                v106 = v275;
                v203 = 1;
                if (!v275 && !v306)
                {
                  if ((*(_BYTE *)(v308 + 29) & 2) != 0)
                  {
                    v106 = 0;
                    v45 = (uint64_t *)v283;
                    v68 = v271;
                    if (!v257)
                      goto LABEL_281;
                    goto LABEL_371;
                  }
                  v246 = *(_QWORD *)(v308 + 56);
                  if ((v246 & 4) != 0 && (v251 = v246 & 0xFFFFFFFFFFFFFFF8, *(_DWORD *)(v251 + 16)))
                  {
                    v247 = **(int ***)(v251 + 24);
                    if (!*v247)
                      goto LABEL_375;
                  }
                  else
                  {
                    if (!*(_DWORD *)(v308 + 64))
                    {
LABEL_375:
                      v106 = 0;
                      v45 = (uint64_t *)v283;
                      goto LABEL_280;
                    }
                    v247 = (int *)(v308 + 64);
                  }
                  v248 = sub_22F1E361C(*(_QWORD **)(v283 + 112), *v247);
                  if (!v257 || !v248)
                    goto LABEL_375;
                  v106 = 0;
                  v45 = (uint64_t *)v283;
                  v68 = v271;
                  if (v248 != 3)
                  {
LABEL_371:
                    sub_22E8FCA40(v45, v245, 0x1AD4u, 0, (uint64_t)&v317);
                    v249 = sub_22E8901B8((uint64_t)&v317, (uint64_t *)&a9);
                    v291 = v261
                         / (unint64_t)sub_22EF5CDF0(v45[11], *(_QWORD *)(*(_QWORD *)(v45[11] + 16408) & 0xFFFFFFFFFFFFFFF0));
                    v250 = sub_22E89519C(v249, &v291);
                    v290 = v254
                         / (unint64_t)sub_22EF5CDF0(v45[11], *(_QWORD *)(*(_QWORD *)(v45[11] + 16408) & 0xFFFFFFFFFFFFFFF0));
                    sub_22E89519C(v250, &v290);
                    sub_22E903BEC((unsigned int *)&v317);
                    v106 = 0;
                    v203 = 1;
                  }
                }
LABEL_281:
                if (__src != (char *)&__len + 8)
                {
                  free(__src);
                  v106 = v275;
                }
                v100 = v256;
                if (v301 && v300 >= 0x41 && v299)
                {
                  MEMORY[0x2348A0E84](v299, 0x1000C8000313F17);
                  v106 = v275;
                }
                if (v303 >= 0x41 && v302)
                {
                  MEMORY[0x2348A0E84](v302, 0x1000C8000313F17);
                  v106 = v275;
                }
                v105 = v131;
                v30 = v281;
                v37 = v263;
                if (!v203)
                  goto LABEL_325;
LABEL_291:
                v204 = v259;
                if (!v68)
                  goto LABEL_302;
                if (!a14)
                  goto LABEL_302;
                v205 = *a14;
                if (v205 == 179)
                  goto LABEL_302;
                if (v205 == 215)
                {
                  if (!*((_DWORD *)a14 + 1))
                    goto LABEL_302;
                }
                else if ((v205 & 0xFE) == 0x76)
                {
                  if ((a14[2] & 0x10) == 0)
                  {
                    v206 = v105;
                    v207 = v106;
                    v208 = sub_22EFC0EB8(*((_QWORD *)a14 + 2));
                    v106 = v207;
                    v204 = v259;
                    v105 = v206;
                    if (!v208)
                      goto LABEL_302;
                  }
                }
                else if ((v35 & 1) != 0)
                {
LABEL_302:
                  v212 = a9;
                  if ((*(_BYTE *)(*(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
                  {
                    v216 = v37;
                    v217 = v106;
                    v218 = v105;
                    v213 = v268;
                    goto LABEL_334;
                  }
                  v213 = v268;
                  if (v204)
                  {
                    v214 = 0;
                    while ((*(_BYTE *)(v277[v214] + 1) & 0x80) == 0)
                    {
                      if (++v214 >= v204)
                        goto LABEL_307;
                    }
                    v216 = v37;
                    v217 = v106;
                    v218 = v105;
LABEL_334:
                    if (v308)
                    {
                      v85 = 1;
                      if ((sub_22EB17F48(v283, v308, &v310, 1, 0, 0, 0, 0) & 1) != 0)
                        goto LABEL_339;
                      sub_22EB4E494(v283, v310, v308, 1);
                    }
                    v231 = v307;
                    if (v307)
                    {
                      v85 = 1;
                      if ((sub_22EB17F48(v283, v307, &v310, 1, 0, 0, 0, 0) & 1) != 0)
                        goto LABEL_339;
                      sub_22EB4E494(v283, v310, v231, 1);
                    }
                    v85 = (uint64_t)sub_22F3C554C(*(_QWORD *)(v283 + 88), v272, v308, v231, v306, v305, v258, v90, v218, v217, v213 | ((unint64_t)v267 << 32), (uint64_t)v279, v266 | v68, SHIDWORD(v266), v216, (uint64_t)a14, v264, (uint64_t)v276, v30,
                                     v280);
LABEL_339:
                    if ((__int128 *)__dst != (__int128 *)((char *)&v324 + 8))
                      free((void *)__dst);
                    return v85;
                  }
LABEL_307:
                  v215 = v99;
                  v216 = v37;
                  v217 = v106;
                  v218 = v105;
                  if (v215)
                  {
                    v219 = *(_QWORD *)(v283 + 88);
                    v220 = sub_22EF67C8C(v219);
                    v221 = sub_22EF5CDF0(v219, *(_QWORD *)(v220 & 0xFFFFFFFFFFFFFFF0));
                    LODWORD(v318) = v221;
                    if (v221 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v317);
                    }
                    else
                    {
                      v222 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v221;
                      if (!v221)
                        v222 = 0;
                      v317 = v222 & v100;
                    }
                    v212 = sub_22EF5FE30(v219, v212, (const llvm::APInt *)&v317, v279, 0, 0);
                    if (v318 >= 0x41 && v317)
                      MEMORY[0x2348A0E84](v317, 0x1000C8000313F17);
                    v204 = v259;
                  }
                  else if (v68)
                  {
                    v212 = sub_22EF6096C(*(_QWORD *)(v283 + 88), a9, 0, 0, 0, 0, 0);
                  }
                  *(_DWORD *)v284 = 8;
                  v285 = 0;
                  v286 = v212;
                  v287 = 0;
                  v288 = v310;
                  v289 = 0;
                  sub_22EC395BC(&v317, v283, v284, v309, v277, v204, 0, 1);
                  v223 = sub_22EC3DF80((int)&v317, v283);
                  if ((v223 & 1) == 0)
                  {
                    v224 = (unsigned __int8 *)(v223 & 0xFFFFFFFFFFFFFFFELL);
                    if ((v223 & 0xFFFFFFFFFFFFFFFELL) != 0)
                    {
                      v225 = (uint64_t)v279;
                      if (*v224 == 116)
                        v224 = (unsigned __int8 *)(*((_QWORD *)v224 + 3) & 0xFFFFFFFFFFFFFFFELL);
                    }
                    else
                    {
                      v225 = (uint64_t)v279;
                    }
                    a14 = v224;
                    if (v68 && !v225)
                    {
                      v226 = sub_22EF5C728(*(_QWORD *)(v283 + 88), *((_QWORD *)v224 + 1));
                      if (v226 && *(_BYTE *)(v226 + 16) == 2)
                      {
                        v227 = *(_QWORD *)(v283 + 88);
                        v282 = v226 + 40;
                        v228 = sub_22EF67C8C(v227);
                        v229 = HIDWORD(v311);
                        v225 = sub_22E3CD3D4(v227 + 2032, 32, 3);
                        sub_22EFF8F1C(v225, v227, v282, v228, v229);
                      }
                      else
                      {
                        sub_22E8FCA40((_QWORD *)v283, SHIDWORD(v311), 0xFA1u, 0, (uint64_t)&__src);
                        sub_22F0D4E74((uint64_t)a14);
                        v297[0] = v230;
                        sub_22E8906A0((uint64_t)&__src, v297);
                        sub_22E903BEC((unsigned int *)&__src);
                        v225 = 0;
                      }
                    }
                    v279 = (unsigned __int8 *)v225;
                    sub_22EC3CE2C((uint64_t)&v317);
                    goto LABEL_334;
                  }
                  sub_22EC3CE2C((uint64_t)&v317);
LABEL_325:
                  v85 = 1;
                  goto LABEL_339;
                }
                sub_22F0D5A50(*v277);
                v210 = v209;
                sub_22F0D60E4(v277[v204 - 1]);
                __src = (void *)__PAIR64__(v211, v210);
                sub_22E8FCA40(v45, v310, 0xF9Eu, 0, (uint64_t)&v317);
                sub_22E8906A0((uint64_t)&v317, (uint64_t *)&__src);
                sub_22E903BEC((unsigned int *)&v317);
                goto LABEL_325;
              }
              v192 = *(_QWORD *)(v283 + 3376);
              if ((v192 & 1) != 0)
              {
                v192 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v283 + 88) + 16048)
                                                                                      + 16))(*(_QWORD *)(*(_QWORD *)(v283 + 88) + 16048), v192 >> 1, v190);
                *(_QWORD *)(v283 + 3376) = v192;
              }
              if (v192)
              {
                v193 = *(_QWORD *)(v192 + 48);
                if (v193)
                {
                  v194 = v193 & 0xFFFFFFFFFFFFFFF0;
                  goto LABEL_264;
                }
                v195 = sub_22EF6462C(*(_QWORD *)(v283 + 88), v192);
              }
              else
              {
                v195 = sub_22EF60A6C(*(_QWORD *)(v283 + 88), 64, 0);
              }
              v194 = v195;
LABEL_264:
              if (sub_22EF5CDF0(*(_QWORD *)(v283 + 88), *(_QWORD *)(v194 & 0xFFFFFFFFFFFFFFF0)) == 64)
              {
                v196 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v194 & 0xFFFFFFFFFFFFFFF0) + 8) & 0xFFFFFFFFFFFFFFF0);
                v197 = *(_DWORD *)(v196 + 16);
                if (v196 && v197 == 11)
                {
                  if (((*(_DWORD *)(v196 + 16) >> 19) & 0x1FEu) - 166 < 0x14)
                    goto LABEL_273;
                }
                else if (v196 && v197 == 44)
                {
                  v198 = sub_22F114198(*(_QWORD *)(v196 + 24));
                  if ((*(_BYTE *)(v198 + 74) & 1) != 0 || *(_QWORD *)(v198 + 128) > 7uLL)
                    goto LABEL_273;
                }
                else if (v197 == 9)
                {
LABEL_273:
                  if ((*(_BYTE *)(*(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
                  {
                    v201 = 0;
                    LODWORD(v200) = 0;
                    LODWORD(v199) = 0;
                  }
                  else
                  {
                    v199 = sub_22F368F30(*(_QWORD *)(v283 + 88), a9);
                    v200 = v199 >> 16;
                    v201 = HIDWORD(v199);
                    if (v271 && v279 || (LODWORD(v200) = v200 | 0x80, v271))
                      LODWORD(v200) = v200 | 0x80;
                  }
                  v240 = *(_QWORD *)(v283 + 88);
                  LODWORD(v318) = 64;
                  v317 = v201 | ((v200 & 0x3C0 | (unsigned __int16)((_WORD)v200 << 12) | ((_DWORD)v199 << 16) | (16 * (_DWORD)v200) & 0x300 | ((unsigned __int16)(v200 & 0xC000) >> 14)) << 32);
                  v241 = sub_22F36C2DC(v240, 1, 64);
                  v242 = sub_22E3CD3D4(v240 + 2032, 32, 3);
                  sub_22EFF8F1C(v242, v240, (uint64_t)&v317, v241, 0);
                  v243 = (unsigned int *)sub_22E3CD3D4(*(_QWORD *)(v283 + 88) + 2032, 24, 3);
                  sub_22F003694(v243, v194, 30, v242, 0, 0, 0);
                  v244 = __len;
                  if (__len >= DWORD1(__len))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    *((_QWORD *)__src + __len) = v243;
                    v244 = __len;
                  }
                  else
                  {
                    *((_QWORD *)__src + __len) = v243;
                  }
                  LODWORD(v191) = v244 + 1;
                  LODWORD(__len) = v244 + 1;
                  v190 = (uint64_t *)v131;
                  v186 = v275;
                  v45 = (uint64_t *)v283;
                  v68 = v271;
                  goto LABEL_360;
                }
              }
              v45 = (uint64_t *)v283;
              sub_22E8FCA40((_QWORD *)v283, v310, 0x139Eu, 0, (uint64_t)v293);
              sub_22E903BEC(v293);
              v202 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v192 + 32))(v192);
              sub_22E8FCA40((_QWORD *)v283, *(_DWORD *)(v202 + 24), 0x64u, 0, (uint64_t)v292);
              sub_22E903BEC(v292);
              v203 = 0;
              v106 = v275;
LABEL_280:
              v68 = v271;
              goto LABEL_281;
            }
            v189 = (char *)__src;
            v190 = (uint64_t *)v131;
            v186 = v275;
          }
          *(_QWORD *)&v189[8 * v187] = v188;
          goto LABEL_251;
        }
        if (!BYTE4(v285))
        {
          v164 = v285 - 1;
          v165 = v284;
          if (v285 >= 0x41)
            v165 = (BOOL *)(*(_QWORD *)v284 + 8 * (v164 >> 6));
          if (((*(_QWORD *)v165 >> v164) & 1) != 0)
          {
            sub_22F0D5A50(v143);
            sub_22E8FCA40((_QWORD *)v283, v166, 0x1385u, 0, (uint64_t)&v317);
            sub_22F0D4E74(v143);
            __src = v167;
            sub_22E8906A0((uint64_t)&v317, (uint64_t *)&__src);
            sub_22E903BEC((unsigned int *)&v317);
            v100 = 0;
            v99 = 0;
            v152 = 0;
            goto LABEL_187;
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(a9 & 0xFFFFFFFFFFFFFFF0) + 17) & 4) != 0)
          goto LABEL_169;
        v144 = sub_22F10B100(*(_QWORD *)(v283 + 88), a9, (llvm::APInt *)v284);
        v145 = v31;
        v146 = *(_QWORD *)(v283 + 88);
        v147 = *(_QWORD *)(sub_22EF67C8C(v146) & 0xFFFFFFFFFFFFFFF0);
        v148 = v146;
        v31 = v145;
        v149 = sub_22EF5CDF0(v148, v147);
        v150 = v149 >= 0x3D ? 61 : v149;
        if (v144 <= v150)
        {
LABEL_169:
          v151 = v284;
          if (v285 >= 0x41)
            v151 = *(BOOL **)v284;
          v100 = *(_QWORD *)v151;
          v99 = 1;
          v152 = 1;
          goto LABEL_187;
        }
        sub_22F0D5A50((uint64_t)v279);
        sub_22E8FCA40((_QWORD *)v283, v232, 0xAA7u, 0, (uint64_t)&v317);
        __src = __p;
        __len = xmmword_22F455490;
        llvm::APInt::toString();
        v233 = __len;
        if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8)
          abort();
        v234 = __src;
        if ((unint64_t)__len >= 0x17)
        {
          v236 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
          if (((unint64_t)__len | 7) != 0x17)
            v236 = __len | 7;
          v237 = v236 + 1;
          v235 = (unint64_t *)operator new(v236 + 1);
          *(_QWORD *)&v324 = v233;
          *((_QWORD *)&v324 + 1) = v237 | 0x8000000000000000;
          __dst = (unint64_t)v235;
        }
        else
        {
          HIBYTE(v324) = __len;
          v235 = &__dst;
          if (!(_QWORD)__len)
            goto LABEL_351;
        }
        memmove(v235, v234, v233);
LABEL_351:
        *((_BYTE *)v235 + v233) = 0;
        if (__src != __p)
          free(__src);
        v238 = sub_22F2F3734((uint64_t)&v317, (void **)&__dst);
        sub_22F0D4E74((uint64_t)v279);
        __src = v239;
        sub_22E8906A0(v238, (uint64_t *)&__src);
        if (SHIBYTE(v324) < 0)
          operator delete((void *)__dst);
        sub_22E903BEC((unsigned int *)&v317);
        v100 = 0;
        v99 = 0;
        v152 = 0;
        v30 = v281;
        v45 = (uint64_t *)v283;
        v31 = v145;
        goto LABEL_187;
      }
      if ((*(_WORD *)(*(_QWORD *)(v283 + 72) + 148) & 2) == 0)
        goto LABEL_76;
      v96 = sub_22EF5C728(*(_QWORD *)(v283 + 88), __dst);
      if (!v96)
        goto LABEL_76;
      __src = (void *)sub_22EF5BA38(*(_QWORD *)(v283 + 88), *(_QWORD *)(v96 + 32));
      v97 = *(_QWORD *)(((unint64_t)__src & 0xFFFFFFFFFFFFFFF0) + 8);
      if ((v97 & 8) != 0 && (*(_WORD *)((v97 & 0xFFFFFFFFFFFFFFF0) + 0x18) & 0x1C0) != 0)
        goto LABEL_76;
      if (!sub_22F40ACB8(*(_QWORD *)((unint64_t)__src & 0xFFFFFFFFFFFFFFF0)))
        goto LABEL_76;
      sub_22E8FCA40((_QWORD *)v283, v77, 0xA6Du, 0, (uint64_t)&v317);
      p_dst = (uint64_t *)&__src;
    }
    v82 = sub_22E8901B8((uint64_t)&v317, p_dst);
LABEL_71:
    v83 = *(unsigned __int8 *)(v82 + 80);
    goto LABEL_72;
  }
  sub_22E8FCA40((_QWORD *)v283, v311, 0xB6Au, 0, (uint64_t)&v317);
  v84 = sub_22E8901B8((uint64_t)&v317, (uint64_t *)&__dst);
  v85 = 1;
  LODWORD(__src) = 1;
  v86 = sub_22E8900C4(v84, (int *)&__src);
  v87 = *(unsigned __int8 *)(sub_22E8906A0(v86, (uint64_t *)v284) + 80);
  sub_22E903BEC((unsigned int *)&v317);
  if (!v87)
    goto LABEL_76;
  return v85;
}

