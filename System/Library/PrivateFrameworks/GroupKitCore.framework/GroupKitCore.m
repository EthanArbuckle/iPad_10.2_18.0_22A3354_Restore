uint64_t InitGPKCreateGroupRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t static InitGPKCreateGroupRequest.Response.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t InitGPKCreateGroupRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL InitGPKCreateGroupRequest.Response.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t InitGPKCreateGroupRequest.Response.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t InitGPKCreateGroupRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKCreateGroupRequest.Response.CodingKeys, &type metadata for InitGPKCreateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKCreateGroupRequest.Response.CodingKeys, &type metadata for InitGPKCreateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKCreateGroupRequest.Response.CodingKeys, &type metadata for InitGPKCreateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKCreateGroupRequest.Response.CodingKeys, &type metadata for InitGPKCreateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKCreateGroupRequest.Response.CodingKeys, &type metadata for InitGPKCreateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t InitGPKCreateGroupRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t InitGPKCreateGroupRequest.Response.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InitGPKCreateGroupRequest.Response.CodingKeys()
{
  return static InitGPKCreateGroupRequest.Response.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance InitGPKCreateGroupRequest.Response.CodingKeys()
{
  return InitGPKCreateGroupRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InitGPKCreateGroupRequest.Response.CodingKeys()
{
  return InitGPKCreateGroupRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InitGPKCreateGroupRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InitGPKCreateGroupRequest.Response.CodingKeys()
{
  return InitGPKCreateGroupRequest.Response.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance InitGPKCreateGroupRequest.Response.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = InitGPKCreateGroupRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InitGPKCreateGroupRequest.Response.CodingKeys()
{
  return InitGPKCreateGroupRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance InitGPKCreateGroupRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitGPKCreateGroupRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InitGPKCreateGroupRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InitGPKCreateGroupRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InitGPKCreateGroupRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[2];
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = a1;
  v22 = 0;
  v21 = 0;
  v16 = type metadata accessor for GPKGroupID();
  v13 = *(_QWORD *)(v16 - 8);
  v6 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v5 - v6;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InitGPKCreateGroupRequest.Response.CodingKeys>);
  v8 = *(_QWORD *)(v15 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v5 - v9;
  v22 = v2;
  v21 = v1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v14, v16);
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v19 = v3;
  v20 = v3;
  if (v3)
    v5[1] = v20;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v15);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    v2 = MEMORY[0x2426354EC]((char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = v2;
    return v2;
  }
  return v4;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0)
    return (_QWORD *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  return result;
}

unint64_t lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID;
  if (!lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID)
  {
    v0 = type metadata accessor for GPKGroupID();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D990], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID;
  if (!lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID)
  {
    v0 = type metadata accessor for GPKGroupID();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D998], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID;
  if (!lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID)
  {
    v0 = type metadata accessor for GPKGroupID();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D9A0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroupID and conformance GPKGroupID);
    return v1;
  }
  return v3;
}

uint64_t InitGPKCreateGroupRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v11 = a2;
  v20 = a1;
  v29 = 0;
  v16 = 0;
  v12 = type metadata accessor for GPKGroupID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v15 = (char *)v6 - v14;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InitGPKCreateGroupRequest.Response.CodingKeys>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v23 = (char *)v6 - v19;
  v21 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for InitGPKCreateGroupRequest.Response() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v20);
  v22 = (uint64_t)v6 - v21;
  v29 = v2;
  v25 = v2[3];
  v26 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v25);
  lazy protocol witness table accessor for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys();
  v3 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v27 = v3;
  v28 = v3;
  if (v3)
  {
    v8 = v28;
  }
  else
  {
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v4;
    v10 = v4;
    if (!v4)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22, v15, v12);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
      outlined init with copy of InitGPKCreateGroupRequest.Response(v22, v11);
      __swift_destroy_boxed_opaque_existential_1(v20);
      return outlined destroy of InitGPKCreateGroupRequest.Response(v22);
    }
    v7 = v10;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v20);
}

uint64_t type metadata accessor for InitGPKCreateGroupRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for InitGPKCreateGroupRequest.Response;
  if (!type metadata singleton initialization cache for InitGPKCreateGroupRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if ((*(_DWORD *)(*(_QWORD *)(v2 - 8) + 80) & 0x20000) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
}

uint64_t outlined init with copy of InitGPKCreateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of InitGPKCreateGroupRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t InitGPKCreateGroupRequest.Response.init(groupId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InitGPKCreateGroupRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InitGPKCreateGroupRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InitGPKCreateGroupRequest.Response(uint64_t a1)
{
  return InitGPKCreateGroupRequest.Response.encode(to:)(a1);
}

void variable initialization expression of InitGPKCreateGroupRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t InitGPKCreateGroupRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t InitGPKCreateGroupRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t outlined assign with take of Any?(_OWORD *a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a2);
    *(_OWORD *)a2 = *a1;
    *(_OWORD *)(a2 + 16) = a1[1];
  }
  else
  {
    *(_OWORD *)a2 = *a1;
    *(_OWORD *)(a2 + 16) = a1[1];
  }
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if ((*(_DWORD *)(*(_QWORD *)(v2 - 8) + 80) & 0x20000) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t (*InitGPKCreateGroupRequest.bodyContent.modify())()
{
  return InitGPKCreateGroupRequest.bodyContent.modify;
}

uint64_t InitGPKCreateGroupRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initCreateGroup.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InitGPKCreateGroupRequest.httpMethod.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GET", 3uLL, 1)._countAndFlagsBits;
}

double InitGPKCreateGroupRequest.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *a1 = 0uLL;
  result = 0.0;
  a1[1] = 0uLL;
  return result;
}

_OWORD *InitGPKCreateGroupRequest.init(bodyContent:)@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return outlined init with take of Any?(a1, a2);
}

_OWORD *outlined init with take of Any?(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  a2[1] = a1[1];
  return a2;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in InitGPKCreateGroupRequest()
{
  return lazy protocol witness table accessor for type InitGPKCreateGroupRequest.Response and conformance InitGPKCreateGroupRequest.Response();
}

unint64_t lazy protocol witness table accessor for type InitGPKCreateGroupRequest.Response and conformance InitGPKCreateGroupRequest.Response()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response and conformance InitGPKCreateGroupRequest.Response;
  if (!lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response and conformance InitGPKCreateGroupRequest.Response)
  {
    inited = type metadata accessor for InitGPKCreateGroupRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKCreateGroupRequest.Response, inited);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKCreateGroupRequest.Response and conformance InitGPKCreateGroupRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance InitGPKCreateGroupRequest()
{
  return InitGPKCreateGroupRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance InitGPKCreateGroupRequest()
{
  return InitGPKCreateGroupRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance InitGPKCreateGroupRequest@<X0>(uint64_t a1@<X8>)
{
  return InitGPKCreateGroupRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance InitGPKCreateGroupRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for InitGPKCreateGroupRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for InitGPKCreateGroupRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for InitGPKCreateGroupRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for InitGPKCreateGroupRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t __swift_assign_boxed_opaque_existential_0(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE v10[24];

  v8 = (_QWORD *)result;
  if ((uint64_t *)result != a2)
  {
    v6 = *(_QWORD *)(result + 24);
    v7 = a2[3];
    if (v6 == v7)
    {
      if ((*(_DWORD *)(*(_QWORD *)(v6 - 8) + 80) & 0x20000) != 0)
      {
        v5 = *a2;
        swift_retain();
        result = swift_release();
        *v8 = v5;
      }
      else
      {
        return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(v6 - 8) + 24))(result, a2);
      }
    }
    else
    {
      *(_QWORD *)(result + 24) = v7;
      v4 = (*(_DWORD *)(*(_QWORD *)(v7 - 8) + 80) & 0x20000) == 0;
      if ((*(_DWORD *)(*(_QWORD *)(v6 - 8) + 80) & 0x20000) != 0)
      {
        if ((*(_DWORD *)(*(_QWORD *)(v7 - 8) + 80) & 0x20000) != 0)
        {
          v2 = *a2;
          swift_retain();
          *v8 = v2;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(v7 - 8) + 16))(result, a2);
        }
        return swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v10, result);
        if (v4)
        {
          (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v7 - 8) + 16))(v8, a2);
        }
        else
        {
          v3 = *a2;
          swift_retain();
          *v8 = v3;
        }
        return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)(v6 - 8) + 8))(v10);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy32_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for InitGPKCreateGroupRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InitGPKCreateGroupRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InitGPKCreateGroupRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitGPKCreateGroupRequest()
{
  return &type metadata for InitGPKCreateGroupRequest;
}

uint64_t initializeBufferWithCopyOfBuffer for InitGPKCreateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (**(uint64_t (***)(uint64_t, uint64_t))(v2 - 8))(a1, a2);
}

uint64_t destroy for InitGPKCreateGroupRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

uint64_t initializeWithCopy for InitGPKCreateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  return a1;
}

uint64_t assignWithCopy for InitGPKCreateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  return a1;
}

uint64_t initializeWithTake for InitGPKCreateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  return a1;
}

uint64_t assignWithTake for InitGPKCreateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitGPKCreateGroupRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D300B48(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for InitGPKCreateGroupRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D300BA4(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for InitGPKCreateGroupRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for InitGPKCreateGroupRequest.Response.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for InitGPKCreateGroupRequest.Response.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for InitGPKCreateGroupRequest.Response.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for InitGPKCreateGroupRequest.Response.CodingKeys()
{
  return &type metadata for InitGPKCreateGroupRequest.Response.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in InitGPKCreateGroupRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in InitGPKCreateGroupRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in InitGPKCreateGroupRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitGPKCreateGroupRequest.Response.CodingKeys and conformance InitGPKCreateGroupRequest.Response.CodingKeys();
}

uint64_t Nonce.data.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (((a2 >> 62) & 3) == 1)
    return swift_retain();
  if (((a2 >> 62) & 3) == 2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t *Nonce.init(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  uint64_t v7;
  unint64_t v8;

  v7 = 0;
  v8 = 0;
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  v7 = a1;
  v8 = a2;
  *a3 = a1;
  a3[1] = a2;
  outlined consume of Data._Representation(a1, a2);
  result = &v7;
  outlined destroy of Nonce((uint64_t)&v7);
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (((a2 >> 62) & 3) == 1)
    return swift_release();
  if (((a2 >> 62) & 3) == 2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Nonce(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t Nonce.hexString.getter()
{
  uint64_t *v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *v0;
  v3 = v0[1];
  outlined copy of Data._Representation(*v0, v3);
  v4 = Data.hexString.getter();
  outlined consume of Data._Representation(v2, v3);
  return v4;
}

_QWORD *Nonce.init(hexString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0;
  v11 = 0;
  v12 = 0;
  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v8 = Data.init(hexString:)();
  if ((v3 & 0xF000000000000000) == 0xF000000000000000)
  {
    result = (_QWORD *)swift_bridgeObjectRelease();
    *a3 = 0;
    a3[1] = 0xF000000000000000;
  }
  else
  {
    v11 = v8;
    v12 = v3;
    Nonce.init(_:)(v8, v3, &v9);
    v5 = v9;
    v6 = v10;
    outlined copy of Data._Representation(v9, v10);
    v15 = v5;
    v16 = v6;
    *a3 = v5;
    a3[1] = v6;
    swift_bridgeObjectRelease();
    result = &v15;
    outlined destroy of Nonce((uint64_t)&v15);
  }
  return result;
}

uint64_t *Nonce.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t *result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;

  v35 = 0;
  v36 = 0;
  v29 = 0;
  v30 = 0;
  v23 = 0;
  v24 = 0;
  v34 = a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v20)
  {
    __swift_project_boxed_opaque_existential_1(v31, v32);
    v16 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    v17 = v2;
    v29 = v16;
    v30 = v2;
    swift_bridgeObjectRetain();
    v15 = Data.init(hexString:)();
    if ((v3 & 0xF000000000000000) != 0xF000000000000000)
    {
      v23 = v15;
      v24 = v3;
      Nonce.init(_:)(v15, v3, &v21);
      v9 = v21;
      v10 = v22;
      outlined copy of Data._Representation(v21, v22);
      v35 = v9;
      v36 = v10;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      *a2 = v9;
      a2[1] = v10;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      result = &v35;
      outlined destroy of Nonce((uint64_t)&v35);
      return result;
    }
    v14 = type metadata accessor for DecodingError();
    swift_allocError();
    v13 = v4;
    v12 = v32;
    v11 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    MEMORY[0x242635090](v12, v11);
    v27 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v28 = v5;
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cannot decode data from string: ", 0x20uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    v25 = v16;
    v26 = v17;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v14 - 8) + 104))(v13, *MEMORY[0x24BEE26D8]);
    swift_willThrow();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
  return (uint64_t *)__swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DefaultStringInterpolation()
{
  swift_bridgeObjectRelease();
}

uint64_t Nonce.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = 0;
  v8 = a1;
  v3 = *v1;
  v4 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  outlined copy of Data._Representation(v3, v4);
  Data.hexString.getter();
  outlined consume of Data._Representation(v3, v4);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t *protocol witness for Decodable.init(from:) in conformance Nonce@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Nonce.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Nonce(_QWORD *a1)
{
  return Nonce.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for Nonce(uint64_t *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  result = a1;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t destroy for Nonce(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *initializeWithCopy for Nonce(uint64_t *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  result = a1;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t *assignWithCopy for Nonce(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  v2 = *a1;
  v3 = a1[1];
  *a1 = v5;
  a1[1] = v6;
  outlined consume of Data._Representation(v2, v3);
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for Nonce(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Nonce(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  int v5;

  if (a2)
  {
    if (a2 > 0xC && *(_BYTE *)(a1 + 16))
    {
      v5 = *(_OWORD *)a1 + 12;
    }
    else
    {
      v2 = HIBYTE(*(_QWORD *)(a1 + 8)) >> 4;
      v3 = 15 - (((4 * v2) | (v2 >> 2)) & 0xF);
      if (v3 >= 0xC)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Nonce(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0xC;
  if (a2 > 0xC)
  {
    *(_OWORD *)result = a2 - 13;
    if (a3 > 0xC)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0xC)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 0;
      else
        __break(1u);
    }
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Nonce()
{
  return &type metadata for Nonce;
}

uint64_t dispatch thunk of MetricsReporting.report(log:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

GroupKitCore::EventIdentifier_optional __swiftcall EventIdentifier.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  GroupKitCore::EventIdentifier_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "com.apple.authkit.user-info-changed";
  *(_QWORD *)(v2 + 8) = 35;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "com.apple.groupkitd.xpcactivity.kds.register";
  *(_QWORD *)(v2 + 32) = 44;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "com.apple.groupkitd.bgtask.healthcheck";
  *(_QWORD *)(v2 + 56) = 38;
  *(_BYTE *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = GroupKitCore_EventIdentifier_userInfoChangedNotification;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = GroupKitCore_EventIdentifier_keyRegistration;
      goto LABEL_8;
    case 2:
      v7.value = GroupKitCore_EventIdentifier_healthCheck;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (GroupKitCore::EventIdentifier_optional)3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  type metadata accessor for Array();
  Array._endMutation()();
}

uint64_t EventIdentifier.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.authkit.user-info-changed", 0x23uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd.xpcactivity.kds.register", 0x2CuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd.bgtask.healthcheck", 0x26uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EventIdentifier()
{
  lazy protocol witness table accessor for type EventIdentifier and conformance EventIdentifier();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance EventIdentifier()
{
  lazy protocol witness table accessor for type EventIdentifier and conformance EventIdentifier();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EventIdentifier()
{
  lazy protocol witness table accessor for type EventIdentifier and conformance EventIdentifier();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance EventIdentifier()
{
  lazy protocol witness table accessor for type EventIdentifier and conformance EventIdentifier();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKitCore::EventIdentifier_optional protocol witness for RawRepresentable.init(rawValue:) in conformance EventIdentifier@<W0>(Swift::String *a1@<X0>, GroupKitCore::EventIdentifier_optional *a2@<X8>)
{
  GroupKitCore::EventIdentifier_optional result;

  result.value = EventIdentifier.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance EventIdentifier@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = EventIdentifier.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t variable initialization expression of EventService.queue()
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  v2 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (uint64_t)&v1 - v2;
  v3 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.Attributes() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)&v1 - v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DispatchQoS() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v6 = (char *)&v1 - v4;
  type metadata accessor for OS_dispatch_queue();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.queue.eventservice", 0x25uLL, 1);
  default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v8);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  specialized static Array._allocateUninitialized(_:)(0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v3;

  v3 = *MEMORY[0x24BEE5750];
  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 8) + 104))(a1, v3);
}

uint64_t EventService.__allocating_init(serviceBuilder:)(uint64_t a1)
{
  swift_allocObject();
  return EventService.init(serviceBuilder:)(a1);
}

uint64_t EventService.init(serviceBuilder:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v18 = 0;
  v17 = 0;
  v14 = 0;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v13 = (uint64_t)&v6 - v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.Attributes() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v12 = (char *)&v6 - v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DispatchQoS() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v11 = (char *)&v6 - v9;
  v18 = v2;
  v17 = v1;
  type metadata accessor for OS_dispatch_queue();
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.queue.eventservice", 0x25uLL, 1);
  default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v13);
  v3 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v4 = v16;
  *(_QWORD *)(v16 + 16) = v3;
  swift_retain();
  *(_QWORD *)(v4 + 24) = v15;
  swift_release();
  return v16;
}

Swift::Void __swiftcall EventService.startListeningForEvents()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t countAndFlagsBits;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *object;
  _BYTE v43[24];
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[960];
  _BYTE v47[24];
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[960];
  uint64_t v51;

  v51 = 0;
  v40 = type metadata accessor for LogSubsystem();
  v38 = *(_QWORD *)(v40 - 8);
  v9 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v39 = (uint64_t)&v8 - v9;
  v51 = v0;
  v10 = *(_QWORD *)(v0 + 24);
  swift_retain();
  v11 = (id *)v50;
  outlined init with copy of Dependencies(v10 + 16, (uint64_t)v50);
  swift_release();
  v19 = v47;
  outlined init with copy of EventSource((uint64_t)(v11 + 84), (uint64_t)v47);
  outlined destroy of Dependencies(v11);
  v14 = v48;
  v15 = v49;
  __swift_project_boxed_opaque_existential_1(v19, v48);
  v13 = EventIdentifier.rawValue.getter(0);
  v18 = v1;
  v17 = *(id *)(v25 + 16);
  v2 = v17;
  v24 = &unk_250E1C148;
  v22 = 24;
  v23 = 7;
  v16 = swift_allocObject();
  swift_retain();
  v12 = v25;
  swift_weakInit();
  swift_release();
  swift_retain();
  (*(void (**)(uint64_t, uint64_t, id, uint64_t (*)(_QWORD *), uint64_t, uint64_t))(v15 + 8))(v13, v18, v17, partial apply for closure #1 in EventService.startListeningForEvents(), v16, v14);
  v3 = v25;
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  v20 = *(_QWORD *)(v3 + 24);
  swift_retain();
  v21 = (id *)v46;
  outlined init with copy of Dependencies(v20 + 16, (uint64_t)v46);
  swift_release();
  v33 = v43;
  outlined init with copy of EventSource((uint64_t)(v21 + 89), (uint64_t)v43);
  outlined destroy of Dependencies(v21);
  v28 = v44;
  v29 = v45;
  __swift_project_boxed_opaque_existential_1(v33, v44);
  v27 = EventIdentifier.rawValue.getter(2);
  v32 = v4;
  v31 = *(id *)(v25 + 16);
  v5 = v31;
  v30 = swift_allocObject();
  swift_retain();
  v26 = v25;
  swift_weakInit();
  swift_release();
  swift_retain();
  (*(void (**)(uint64_t, uint64_t, id, uint64_t (*)(_QWORD *), uint64_t, uint64_t))(v29 + 8))(v27, v32, v31, partial apply for closure #2 in EventService.startListeningForEvents(), v30, v28);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  v34 = 1;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Event observation started", 0x19uLL, 1);
  countAndFlagsBits = v6._countAndFlagsBits;
  object = v6._object;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/EventService.swift", 0x1FuLL, v34 & 1);
  v37 = v7._countAndFlagsBits;
  v41 = v7._object;
  v36 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v39);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of Dependencies(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v26 = *(id *)a1;
  v2 = *(id *)a1;
  *(_QWORD *)a2 = v26;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2 + 8, a1 + 8);
  v4 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 72) = v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2 + 48, a1 + 48);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  v27 = *(_QWORD *)(a1 + 96);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 96) = v27;
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  v28 = *(_QWORD *)(a1 + 112);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 112) = v28;
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  v29 = *(_QWORD *)(a1 + 128);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 128) = v29;
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 136);
  v30 = *(_QWORD *)(a1 + 144);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 144) = v30;
  *(_BYTE *)(a2 + 152) = *(_BYTE *)(a1 + 152);
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a2 + 176) = *(_QWORD *)(a1 + 176);
  v5 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a2 + 208) = v5;
  *(_QWORD *)(a2 + 216) = *(_QWORD *)(a1 + 216);
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a2 + 184, a1 + 184);
  v6 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a2 + 248) = v6;
  *(_QWORD *)(a2 + 256) = *(_QWORD *)(a1 + 256);
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a2 + 224, a1 + 224);
  v7 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a2 + 288) = v7;
  *(_QWORD *)(a2 + 296) = *(_QWORD *)(a1 + 296);
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a2 + 264, a1 + 264);
  v8 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a2 + 328) = v8;
  *(_QWORD *)(a2 + 336) = *(_QWORD *)(a1 + 336);
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a2 + 304, a1 + 304);
  v9 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a2 + 368) = v9;
  *(_QWORD *)(a2 + 376) = *(_QWORD *)(a1 + 376);
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a2 + 344, a1 + 344);
  v31 = *(_QWORD *)(a1 + 384);
  swift_unknownObjectRetain();
  *(_QWORD *)(a2 + 384) = v31;
  v10 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a2 + 416) = v10;
  *(_QWORD *)(a2 + 424) = *(_QWORD *)(a1 + 424);
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a2 + 392, a1 + 392);
  v32 = *(_QWORD *)(a1 + 432);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 432) = v32;
  v11 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a2 + 464) = v11;
  *(_QWORD *)(a2 + 472) = *(_QWORD *)(a1 + 472);
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a2 + 440, a1 + 440);
  v33 = *(_QWORD *)(a1 + 480);
  swift_unknownObjectRetain();
  v12 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a2 + 480) = v33;
  *(_QWORD *)(a2 + 488) = v12;
  v13 = *(_QWORD *)(a1 + 520);
  *(_QWORD *)(a2 + 520) = v13;
  *(_QWORD *)(a2 + 528) = *(_QWORD *)(a1 + 528);
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a2 + 496, a1 + 496);
  v14 = *(_QWORD *)(a1 + 560);
  *(_QWORD *)(a2 + 560) = v14;
  *(_QWORD *)(a2 + 568) = *(_QWORD *)(a1 + 568);
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a2 + 536, a1 + 536);
  v34 = *(_QWORD *)(a1 + 576);
  swift_unknownObjectRetain();
  v15 = *(_QWORD *)(a1 + 584);
  *(_QWORD *)(a2 + 576) = v34;
  *(_QWORD *)(a2 + 584) = v15;
  v16 = *(_QWORD *)(a1 + 616);
  *(_QWORD *)(a2 + 616) = v16;
  *(_QWORD *)(a2 + 624) = *(_QWORD *)(a1 + 624);
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a2 + 592, a1 + 592);
  v17 = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a2 + 656) = v17;
  *(_QWORD *)(a2 + 664) = *(_QWORD *)(a1 + 664);
  (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a2 + 632, a1 + 632);
  v18 = *(_QWORD *)(a1 + 696);
  *(_QWORD *)(a2 + 696) = v18;
  *(_QWORD *)(a2 + 704) = *(_QWORD *)(a1 + 704);
  (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a2 + 672, a1 + 672);
  v19 = *(_QWORD *)(a1 + 736);
  *(_QWORD *)(a2 + 736) = v19;
  *(_QWORD *)(a2 + 744) = *(_QWORD *)(a1 + 744);
  (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a2 + 712, a1 + 712);
  *(_DWORD *)(a2 + 752) = *(_DWORD *)(a1 + 752);
  v20 = *(_QWORD *)(a1 + 784);
  *(_QWORD *)(a2 + 784) = v20;
  *(_QWORD *)(a2 + 792) = *(_QWORD *)(a1 + 792);
  (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a2 + 760, a1 + 760);
  v21 = *(_QWORD *)(a1 + 824);
  *(_QWORD *)(a2 + 824) = v21;
  *(_QWORD *)(a2 + 832) = *(_QWORD *)(a1 + 832);
  (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a2 + 800, a1 + 800);
  v22 = *(_QWORD *)(a1 + 864);
  *(_QWORD *)(a2 + 864) = v22;
  *(_QWORD *)(a2 + 872) = *(_QWORD *)(a1 + 872);
  (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a2 + 840, a1 + 840);
  v23 = *(_QWORD *)(a1 + 904);
  *(_QWORD *)(a2 + 904) = v23;
  *(_QWORD *)(a2 + 912) = *(_QWORD *)(a1 + 912);
  (**(void (***)(uint64_t, uint64_t))(v23 - 8))(a2 + 880, a1 + 880);
  v24 = *(_QWORD *)(a1 + 944);
  *(_QWORD *)(a2 + 944) = v24;
  *(_QWORD *)(a2 + 952) = *(_QWORD *)(a1 + 952);
  (**(void (***)(uint64_t, uint64_t))(v24 - 8))(a2 + 920, a1 + 920);
  return a2;
}

uint64_t outlined init with copy of EventSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

id *outlined destroy of Dependencies(id *a1)
{

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 6));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 23));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 28));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 33));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 38));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 43));
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 49));
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 55));
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 62));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 67));
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 74));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 79));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 84));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 89));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 95));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 100));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 105));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 110));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 115));
  return a1;
}

uint64_t sub_23D303320()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in EventService.startListeningForEvents()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  _QWORD v12[4];
  unint64_t v13;
  Builtin::Word v14;
  void *object;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  Builtin::Word v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t countAndFlagsBits;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Strong;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v16 = a1;
  v12[3] = a2;
  v40 = 0;
  v39 = 0;
  v20 = 0;
  v31 = type metadata accessor for LogSubsystem();
  v29 = *(_QWORD *)(v31 - 8);
  v13 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v30 = (uint64_t)v12 - v13;
  v40 = MEMORY[0x24BDAC7A8](v16);
  v34 = v2 + 16;
  v39 = v2 + 16;
  v14 = 29;
  v3 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v22 = &v37;
  v37 = v3;
  v38 = v4;
  v25 = 1;
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Received notification event: ", v14, 1);
  object = v5._object;
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v18 = v16[3];
  v17 = v16[4];
  __swift_project_boxed_opaque_existential_1(v16, v18);
  v6 = (*(uint64_t (**)(uint64_t))(v17 + 8))(v18);
  v19 = v36;
  v36[0] = v6;
  v36[1] = v7;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v20, v25 & 1);
  v21 = v8._object;
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  v24 = v37;
  v23 = v38;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v26 = String.init(stringInterpolation:)();
  v33 = v9;
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/EventService.swift", 0x1FuLL, v25 & 1);
  countAndFlagsBits = v10._countAndFlagsBits;
  v32 = v10._object;
  v27 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v30);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v12[1] = &Strong;
    v12[2] = Strong;
    swift_retain();
    outlined destroy of EventService?();
    swift_endAccess();
    EventService.handleUserInfoChangeNotification(event:)((uint64_t)v16);
    return swift_release();
  }
  else
  {
    outlined destroy of EventService?();
    return swift_endAccess();
  }
}

uint64_t partial apply for closure #1 in EventService.startListeningForEvents()(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in EventService.startListeningForEvents()(a1, v1);
}

uint64_t default argument 1 of gpklog(_:type:fileID:line:subsystem:)()
{
  return static os_log_type_t.default.getter();
}

uint64_t default argument 4 of gpklog(_:type:fileID:line:subsystem:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v3;

  v3 = *MEMORY[0x24BE3DAA0];
  v1 = type metadata accessor for LogSubsystem();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 8) + 104))(a1, v3);
}

uint64_t EventService.handleUserInfoChangeNotification(event:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  const void *v4;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v11[40];
  uint64_t v12;
  uint64_t v13;

  v7 = a1;
  v13 = 0;
  v12 = 0;
  v6 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (uint64_t)&v6 - v6;
  v13 = MEMORY[0x24BDAC7A8](v7);
  v12 = v1;
  v2 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v10, 1);
  swift_retain();
  v8 = v11;
  outlined init with copy of EventHandle(v7, (uint64_t)v11);
  v3 = (_QWORD *)swift_allocObject();
  v4 = v8;
  v9 = v3;
  v3[2] = 0;
  v3[3] = 0;
  v3[4] = v1;
  outlined init with take of EventHandle(v4, v3 + 5);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v10, (uint64_t)&async function pointer to partial apply for closure #1 in EventService.handleUserInfoChangeNotification(event:), (uint64_t)v9, MEMORY[0x24BEE4AE0] + 8);
  return swift_release();
}

uint64_t closure #2 in EventService.startListeningForEvents()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  _QWORD v12[4];
  unint64_t v13;
  Builtin::Word v14;
  void *object;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  Builtin::Word v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t countAndFlagsBits;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t Strong;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v16 = a1;
  v12[3] = a2;
  v40 = 0;
  v39 = 0;
  v20 = 0;
  v31 = type metadata accessor for LogSubsystem();
  v29 = *(_QWORD *)(v31 - 8);
  v13 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v30 = (uint64_t)v12 - v13;
  v40 = MEMORY[0x24BDAC7A8](v16);
  v34 = v2 + 16;
  v39 = v2 + 16;
  v14 = 26;
  v3 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v22 = &v37;
  v37 = v3;
  v38 = v4;
  v25 = 1;
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Received background task: ", v14, 1);
  object = v5._object;
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v18 = v16[3];
  v17 = v16[4];
  __swift_project_boxed_opaque_existential_1(v16, v18);
  v6 = (*(uint64_t (**)(uint64_t))(v17 + 8))(v18);
  v19 = v36;
  v36[0] = v6;
  v36[1] = v7;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v20, v25 & 1);
  v21 = v8._object;
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  v24 = v37;
  v23 = v38;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v26 = String.init(stringInterpolation:)();
  v33 = v9;
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/EventService.swift", 0x1FuLL, v25 & 1);
  countAndFlagsBits = v10._countAndFlagsBits;
  v32 = v10._object;
  v27 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v30);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v12[1] = &Strong;
    v12[2] = Strong;
    swift_retain();
    outlined destroy of EventService?();
    swift_endAccess();
    EventService.handleHealthCheckBackgroundActivity(event:)((uint64_t)v16);
    return swift_release();
  }
  else
  {
    outlined destroy of EventService?();
    return swift_endAccess();
  }
}

uint64_t partial apply for closure #2 in EventService.startListeningForEvents()(_QWORD *a1)
{
  uint64_t v1;

  return closure #2 in EventService.startListeningForEvents()(a1, v1);
}

uint64_t EventService.handleHealthCheckBackgroundActivity(event:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  char *v12;
  _BYTE v13[40];
  uint64_t v14;
  uint64_t v15;

  v9 = a1;
  v15 = 0;
  v14 = 0;
  v8 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (char *)&v8 - v8;
  v15 = MEMORY[0x24BDAC7A8](v9);
  v14 = v1;
  v2 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v12, 1);
  v10 = v13;
  outlined init with copy of EventHandle(v9, (uint64_t)v13);
  swift_retain();
  v3 = (_QWORD *)swift_allocObject();
  v4 = v10;
  v11 = v3;
  v3[2] = 0;
  v3[3] = 0;
  outlined init with take of EventHandle(v4, v3 + 4);
  v5 = (uint64_t)v11;
  v6 = (uint64_t)v12;
  v11[9] = v1;
  _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC(v6, (uint64_t)&async function pointer to partial apply for closure #1 in EventService.handleHealthCheckBackgroundActivity(event:), v5);
  return swift_release();
}

uint64_t closure #1 in EventService.handleUserInfoChangeNotification(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[27] = a5;
  v5[26] = a4;
  v5[19] = v5;
  v5[20] = 0;
  v5[21] = 0;
  v5[22] = 0;
  v5[24] = 0;
  v6 = type metadata accessor for LogSubsystem();
  v5[28] = v6;
  v5[29] = *(_QWORD *)(v6 - 8);
  v5[30] = swift_task_alloc();
  v5[20] = a4;
  v5[21] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in EventService.handleUserInfoChangeNotification(event:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[19] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 248) = v2;
  *v2 = *(_QWORD *)(v4 + 152);
  v2[1] = closure #1 in EventService.handleUserInfoChangeNotification(event:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 152) = *v1;
  *(_QWORD *)(v2 + 256) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v1 = (void *)v0[32];
  v0[19] = v0;
  swift_retain();
  v0[7] = 0;
  v0[8] = 0;
  v0[9] = 0;
  v0[10] = 0;
  v0[11] = 0;
  v17 = ServiceBuilder.keyDistributionService(for:)((uint64_t)(v0 + 7));
  v0[33] = v17;
  outlined destroy of Client?((uint64_t)(v16 + 7));
  swift_release();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v16 + 2));
    v12 = v16[30];
    v11 = v16[29];
    v13 = v16[28];
    v5 = v1;
    v16[22] = v1;
    v16[15] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v16[16] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("While handling key registration, caught error ", 0x2EuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    v16[17] = Error.localizedDescription.getter();
    v16[18] = v8;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/EventService.swift", 0x1FuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v10 = (_QWORD *)v16[27];
    v15 = v10[3];
    v14 = v10[4];
    __swift_project_boxed_opaque_existential_1(v10, v15);
    (*(void (**)(uint64_t))(v14 + 16))(v15);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v16[19] + 8))();
  }
  else
  {
    v16[24] = v17;
    v16[25] = v17;
    v2 = (_QWORD *)swift_task_alloc();
    v16[34] = v2;
    v3 = type metadata accessor for KeyDistributionService();
    *v2 = v16[19];
    v2[1] = closure #1 in EventService.handleUserInfoChangeNotification(event:);
    return KeyDistributionServiceProviding.register()(v3, (uint64_t)&protocol witness table for KeyDistributionService);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 152) = *v1;
  *(_QWORD *)(v2 + 280) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 152) = v0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v1 = *(_QWORD **)(v0 + 216);
  v4 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  (*(void (**)(uint64_t))(v3 + 16))(v4);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 152) + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v0[19] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v11 = (void *)v0[32];
  v9 = v0[30];
  v8 = v0[29];
  v10 = v0[28];
  v1 = v11;
  v0[22] = v11;
  v0[15] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[16] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("While handling key registration, caught error ", 0x2EuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v0[17] = Error.localizedDescription.getter();
  v0[18] = v4;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/EventService.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v6 = (_QWORD *)v0[27];
  v13 = v6[3];
  v12 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v13);
  (*(void (**)(uint64_t))(v12 + 16))(v13);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[19] + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v0[19] = v0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v11 = (void *)v0[35];
  v9 = v0[30];
  v8 = v0[29];
  v10 = v0[28];
  v1 = v11;
  v0[22] = v11;
  v0[15] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[16] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("While handling key registration, caught error ", 0x2EuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v0[17] = Error.localizedDescription.getter();
  v0[18] = v4;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/EventService.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v6 = (_QWORD *)v0[27];
  v13 = v6[3];
  v12 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v13);
  (*(void (**)(uint64_t))(v12 + 16))(v13);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[19] + 8))();
}

uint64_t outlined init with copy of EventHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t sub_23D30481C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return swift_deallocObject();
}

void *outlined init with take of EventHandle(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t partial apply for closure #1 in EventService.handleUserInfoChangeNotification(event:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in EventService.handleUserInfoChangeNotification(event:);
  return closure #1 in EventService.handleUserInfoChangeNotification(event:)(a1, v5, v6, v7, (uint64_t)(v1 + 5));
}

uint64_t partial apply for closure #1 in EventService.handleUserInfoChangeNotification(event:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;

  v11 = type metadata accessor for TaskPriority();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  }
  v6 = *(_QWORD *)(a3 + 16);
  swift_unknownObjectRetain();
  if (v6)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a4;
  v5[3] = a2;
  v5[4] = a3;
  return swift_task_create();
}

uint64_t closure #1 in EventService.handleHealthCheckBackgroundActivity(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[42] = a5;
  v5[41] = a4;
  v5[32] = v5;
  v5[33] = 0;
  v5[34] = 0;
  v5[35] = 0;
  v5[37] = 0;
  memset(v5 + 2, 0, 0x30uLL);
  v5[39] = 0;
  v6 = type metadata accessor for LogSubsystem();
  v5[43] = v6;
  v5[44] = *(_QWORD *)(v6 - 8);
  v5[45] = swift_task_alloc();
  v5[33] = a4;
  v5[34] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in EventService.handleHealthCheckBackgroundActivity(event:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v0[32] = v0;
  v1 = swift_retain();
  ServiceBuilder.readinessChecker()(v1);
  swift_release();
  v7 = v0[11];
  v5 = v0[12];
  __swift_project_boxed_opaque_existential_1(v0 + 8, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + **(int **)(v5 + 8));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 368) = v2;
  *v2 = *(_QWORD *)(v4 + 256);
  v2[1] = closure #1 in EventService.handleHealthCheckBackgroundActivity(event:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 256) = *v1;
  *(_QWORD *)(v2 + 376) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v1 = (void *)v0[47];
  v0[32] = v0;
  swift_retain();
  v0[13] = 0;
  v0[14] = 0;
  v0[15] = 0;
  v0[16] = 0;
  v0[17] = 0;
  v15 = ServiceBuilder.keyDistributionService(for:)((uint64_t)(v0 + 13));
  v0[48] = v15;
  outlined destroy of Client?((uint64_t)(v14 + 13));
  swift_release();
  if (v1)
  {
    v11 = v14[45];
    v10 = v14[44];
    v12 = v14[43];
    v13 = (_QWORD *)v14[41];
    v5 = v1;
    v14[35] = v1;
    v14[24] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v14[25] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("While handling key registration, caught error ", 0x2EuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    v14[26] = Error.localizedDescription.getter();
    v14[27] = v8;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/EventService.swift", 0x1FuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v14 + 8));
    $defer #1 () in closure #1 in EventService.handleHealthCheckBackgroundActivity(event:)(v13);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v14[32] + 8))();
  }
  else
  {
    v14[37] = v15;
    v14[38] = v15;
    v2 = (_QWORD *)swift_task_alloc();
    v14[49] = v2;
    v3 = type metadata accessor for KeyDistributionService();
    *v2 = v14[32];
    v2[1] = closure #1 in EventService.handleHealthCheckBackgroundActivity(event:);
    return KeyDistributionServiceProviding.register()(v3, (uint64_t)&protocol witness table for KeyDistributionService);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 256) = *v1;
  *(_QWORD *)(v2 + 400) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  void (*v2)(uint64_t, uint64_t);
  _QWORD *v3;
  id v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (void *)v0[50];
  v16 = v0[45];
  v15 = v0[44];
  v17 = v0[43];
  v0[32] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Key registration health check ✅", 0x21uLL, 0);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/EventService.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v16);
  gpklog(_:type:fileID:line:subsystem:)();
  v2 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v0[51] = v2;
  v2(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  ServiceBuilder.managedMemberService()(v0 + 2);
  swift_release();
  if (v1)
  {
    v12 = (void (*)(uint64_t, uint64_t))v14[51];
    v10 = v14[45];
    v11 = v14[43];
    v13 = (_QWORD *)v14[41];
    v5 = v1;
    v14[39] = v1;
    v14[28] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v14[29] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occured while performing membership management: ", 0x36uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    v14[30] = Error.localizedDescription.getter();
    v14[31] = v8;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/EventService.swift", 0x1FuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
    gpklog(_:type:fileID:line:subsystem:)();
    v12(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v14 + 8));
    $defer #1 () in closure #1 in EventService.handleHealthCheckBackgroundActivity(event:)(v13);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v14[32] + 8))();
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc();
    v14[52] = v3;
    *v3 = v14[32];
    v3[1] = closure #1 in EventService.handleHealthCheckBackgroundActivity(event:);
    return ManagedMemberService.performMembershipManagement()();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 256) = *v1;
  *(_QWORD *)(v2 + 424) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t v5;

  v3 = (void (*)(uint64_t, uint64_t))v0[51];
  v5 = v0[45];
  v2 = v0[43];
  v4 = (_QWORD *)v0[41];
  v0[32] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Membership management performed for managed members ✅", 0x37uLL, 0);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/EventService.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  v3(v5, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ManagedMemberService((uint64_t)(v0 + 2));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 8));
  $defer #1 () in closure #1 in EventService.handleHealthCheckBackgroundActivity(event:)(v4);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[32] + 8))();
}

{
  uint64_t v0;
  _QWORD *v2;

  v2 = *(_QWORD **)(v0 + 328);
  *(_QWORD *)(v0 + 256) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  $defer #1 () in closure #1 in EventService.handleHealthCheckBackgroundActivity(event:)(v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 256) + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;

  v0[32] = v0;
  swift_release();
  v10 = (void *)v0[50];
  v8 = v0[45];
  v7 = v0[44];
  v9 = v0[43];
  v11 = (_QWORD *)v0[41];
  v1 = v10;
  v0[35] = v10;
  v0[24] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[25] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("While handling key registration, caught error ", 0x2EuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v0[26] = Error.localizedDescription.getter();
  v0[27] = v4;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/EventService.swift", 0x1FuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v8);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 8));
  $defer #1 () in closure #1 in EventService.handleHealthCheckBackgroundActivity(event:)(v11);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[32] + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;
  _QWORD *v11;

  v0[32] = v0;
  outlined destroy of ManagedMemberService((uint64_t)(v0 + 2));
  v10 = (void *)v0[53];
  v9 = (void (*)(uint64_t, uint64_t))v0[51];
  v7 = v0[45];
  v8 = v0[43];
  v11 = (_QWORD *)v0[41];
  v1 = v10;
  v0[39] = v10;
  v0[28] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[29] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occured while performing membership management: ", 0x36uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v0[30] = Error.localizedDescription.getter();
  v0[31] = v4;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/EventService.swift", 0x1FuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 8));
  $defer #1 () in closure #1 in EventService.handleHealthCheckBackgroundActivity(event:)(v11);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[32] + 8))();
}

uint64_t sub_23D305D68()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EventService.handleHealthCheckBackgroundActivity(event:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[9];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in EventService.handleHealthCheckBackgroundActivity(event:);
  return closure #1 in EventService.handleHealthCheckBackgroundActivity(event:)(a1, v5, v6, (uint64_t)(v1 + 4), v7);
}

uint64_t partial apply for closure #1 in EventService.handleHealthCheckBackgroundActivity(event:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t $defer #1 () in closure #1 in EventService.handleHealthCheckBackgroundActivity(event:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1[3];
  v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(uint64_t))(v2 + 16))(v3);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for TaskPriority();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v8 + 48))(a1, 1) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  }
  v4 = *(_QWORD *)(a3 + 16);
  swift_unknownObjectRetain();
  if (v4)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t EventService.deinit()
{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  return v2;
}

uint64_t EventService.__deallocating_deinit()
{
  EventService.deinit();
  return swift_deallocClassInstance();
}

unint64_t base witness table accessor for Equatable in EventIdentifier()
{
  return lazy protocol witness table accessor for type EventIdentifier and conformance EventIdentifier();
}

unint64_t lazy protocol witness table accessor for type EventIdentifier and conformance EventIdentifier()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type EventIdentifier and conformance EventIdentifier;
  if (!lazy protocol witness table cache variable for type EventIdentifier and conformance EventIdentifier)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for EventIdentifier, &type metadata for EventIdentifier);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type EventIdentifier and conformance EventIdentifier);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type EventIdentifier and conformance EventIdentifier;
  if (!lazy protocol witness table cache variable for type EventIdentifier and conformance EventIdentifier)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for EventIdentifier, &type metadata for EventIdentifier);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type EventIdentifier and conformance EventIdentifier);
    return v0;
  }
  return v2;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for EventIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for EventIdentifier(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for EventIdentifier(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for EventIdentifier(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for EventIdentifier()
{
  return &type metadata for EventIdentifier;
}

uint64_t type metadata accessor for EventService()
{
  return objc_opt_self();
}

uint64_t method lookup function for EventService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EventService.__allocating_init(serviceBuilder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for TaskPriority();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of Client?(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ManagedMemberService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
}

Swift::Void __swiftcall Array._endMutation()()
{
  _QWORD *v0;

  *v0 = *v0;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result > 0)
    {
      type metadata accessor for OS_dispatch_queue.Attributes();
      v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v1 + 16) = v4;
      v3 = v1;
    }
    else
    {
      v2 = MEMORY[0x24BEE4AF8];
      swift_retain();
      v3 = v2;
    }
    type metadata accessor for OS_dispatch_queue.Attributes();
    return v3;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result > 0)
    {
      type metadata accessor for DispatchWorkItemFlags();
      v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v1 + 16) = v4;
      v3 = v1;
    }
    else
    {
      v2 = MEMORY[0x24BEE4AF8];
      swift_retain();
      v3 = v2;
    }
    type metadata accessor for DispatchWorkItemFlags();
    return v3;
  }
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0_;
  return v5(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D306974()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int *v5;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(int **)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu))(a1, v5);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of EventService?()
{
  swift_release();
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v0 = type metadata accessor for OS_dispatch_queue.Attributes();
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE5698], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    v2 = MEMORY[0x2426354F8](255, (char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = v2;
    return v2;
  }
  return v4;
}

id CoreDataMetadataStore.context.getter()
{
  id *v0;
  id v1;
  id v3;

  v3 = *v0;
  v1 = *v0;
  return v3;
}

GroupKitCore::CoreDataMetadataStore __swiftcall CoreDataMetadataStore.init(context:clientModelVersion:)(NSManagedObjectContext context, Swift::Float clientModelVersion)
{
  uint64_t v2;
  objc_class *v3;
  objc_class *v4;
  objc_class *p_isa;
  float v6;
  uint64_t v7;
  Class isa;
  Swift::Float v11;
  GroupKitCore::CoreDataMetadataStore result;

  v7 = v2;
  isa = 0;
  v11 = 0.0;
  v3 = context.super.isa;
  v4 = context.super.isa;
  isa = context.super.isa;
  v11 = clientModelVersion;
  *(NSManagedObjectContext *)v7 = context;
  *(Swift::Float *)(v7 + 8) = clientModelVersion;

  p_isa = (objc_class *)&isa;
  outlined destroy of CoreDataMetadataStore((id *)&isa);
  result.context.super.isa = p_isa;
  result.clientModelVersion = v6;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CoreDataMetadataStore(id *a1)
{

}

void CoreDataMetadataStore.store(metaData:groupID:)(uint64_t a1, uint64_t a2)
{
  CoreDataMetadataStore.store(metaData:groupID:clearOldMetadata:)(a1, a2, 1);
}

void CoreDataMetadataStore.store(metaData:groupID:clearOldMetadata:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  char v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  _QWORD v10[2];
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  int v26;
  char v27;
  uint64_t v28;
  id v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v17 = a1;
  v14 = a2;
  v21 = a3;
  v33 = 0;
  v32 = 0;
  v31 = 0;
  v29 = 0;
  v30 = 0;
  v15 = type metadata accessor for GPKGroupID();
  v13 = *(_QWORD *)(v15 - 8);
  v11 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = (char *)v10 - v11;
  v33 = MEMORY[0x24BDAC7A8](v17);
  v32 = v3;
  v20 = 1;
  v31 = v4 & 1;
  v12 = *(id *)v6;
  v5 = v12;
  v19 = *(_DWORD *)(v6 + 8);
  v29 = v12;
  v30 = v19;
  v7 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v14, v15);
  v8 = v5;
  v9 = v16;
  swift_bridgeObjectRetain();
  v24 = v18;
  v25 = v5;
  v26 = v19;
  v27 = v21 & v20;
  v28 = v17;
  NSManagedObjectContext.sync<A>(work:)();
  v22 = v9;
  v23 = v9;
  if (v9)
    v10[1] = v23;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v15);

  swift_bridgeObjectRelease();
}

void closure #1 in CoreDataMetadataStore.store(metaData:groupID:clearOldMetadata:)(uint64_t a1, void *a2, int a3, uint64_t a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _BYTE *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  _BYTE *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  void *v41;
  _BYTE v42[24];
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  unsigned int v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  id *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t i;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _BYTE *v91;
  float v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t countAndFlagsBits;
  id v109;
  void *object;
  id v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  void *v118;
  _QWORD v119[2];
  uint64_t v120;
  uint64_t v121;
  id v122;
  uint64_t v123;
  id v124[4];
  uint64_t v125;
  void *v126;
  id v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  id v133;
  void *v134;
  void *v135;
  uint64_t v136;

  v96 = a1;
  v109 = a2;
  v92 = a5;
  v93 = a3;
  v94 = a4;
  v136 = *MEMORY[0x24BDAC8D0];
  v132 = 0;
  v130 = 0;
  v131 = 0;
  v129 = 0;
  v128 = 0;
  v127 = 0;
  v126 = 0;
  v125 = 0;
  v124[2] = 0;
  v124[3] = 0;
  v122 = 0;
  v120 = 0;
  v121 = 0;
  v97 = 0;
  v88 = type metadata accessor for GPKGroupID();
  v89 = *(_QWORD *)(v88 - 8);
  v90 = (*(_QWORD *)(v89 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v91 = &v42[-v90];
  v104 = type metadata accessor for UUID();
  v103 = *(_QWORD *)(v104 - 8);
  v95 = (*(_QWORD *)(v103 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v97);
  v105 = &v42[-v95];
  v132 = v5;
  v130 = v6;
  v131 = v7;
  v98 = 1;
  v129 = v8 & 1;
  v128 = v9;
  v112 = type metadata accessor for MetaData();
  v114 = (id)static MetaData.fetchRequest()();
  v127 = v114;
  v99 = type metadata accessor for NSPredicate();
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID == %@", 0xDuLL, v98 & 1);
  countAndFlagsBits = v10._countAndFlagsBits;
  object = v10._object;
  v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v106 = _allocateUninitializedArray<A>(_:)();
  v102 = v11;
  GPKGroupID.uuid.getter();
  v100 = UUID.uuidString.getter();
  v101 = v12;
  v102[3] = MEMORY[0x24BEE0D00];
  v13 = lazy protocol witness table accessor for type String and conformance String();
  v14 = v100;
  v15 = v101;
  v16 = v102;
  v17 = v103;
  v18 = v104;
  v19 = v13;
  v20 = v105;
  v102[4] = v19;
  *v16 = v14;
  v16[1] = v15;
  (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v20, v18);
  _finalizeUninitializedArray<A>(_:)();
  v21 = (void *)NSPredicate.init(format:_:)();
  v22 = v109;
  v111 = v21;
  swift_bridgeObjectRelease();
  objc_msgSend(v114, sel_setPredicate_, v111);

  v23 = v22;
  v24 = v113;
  v25 = NSManagedObjectContext.fetch<A>(_:)();
  v115 = v24;
  v116 = (void *)v25;
  v117 = v24;
  if (v24)
  {
    v47 = v117;

    v48 = v47;
    return;
  }
  v87 = v116;

  v126 = v87;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MetaData));
  _allocateUninitializedArray<A>(_:)();
  v125 = Dictionary.init(dictionaryLiteral:)();
  if ((v93 & 1) != 0)
  {
    v118 = v87;
    v26 = v109;
    v82 = v42;
    MEMORY[0x24BDAC7A8](v42);
    v27 = &v42[-32];
    v83 = &v42[-32];
    *((_QWORD *)v27 + 2) = v109;
    *((_DWORD *)v27 + 6) = v28;
    v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MetaData]);
    lazy protocol witness table accessor for type [MetaData] and conformance [A]();
    v29 = v115;
    Sequence.forEach(_:)();
    v85 = v29;
    v86 = v29;
    if (v29)
    {
      v46 = v86;

      outlined destroy of [String : MetaData]();
      swift_bridgeObjectRelease();

      v48 = v46;
      return;
    }

    v81 = v85;
  }
  else
  {
    swift_bridgeObjectRetain();
    v124[1] = v87;
    v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MetaData]);
    lazy protocol witness table accessor for type [MetaData] and conformance [A]();
    Collection<>.makeIterator()();
    for (i = v115; ; i = v77)
    {
      v77 = i;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[MetaData]>);
      IndexingIterator.next()();
      v78 = v135;
      if (!v135)
        break;
      v76 = v78;
      v74 = v78;
      v122 = v78;
      v75 = objc_msgSend(v78, sel_key);
      if (v75)
      {
        v73 = v75;
        v68 = v75;
        v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v70 = v30;

        v71 = v69;
        v72 = v70;
      }
      else
      {
        v71 = 0;
        v72 = 0;
      }
      v66 = v72;
      v67 = v71;
      if (v72)
      {
        v64 = v67;
        v65 = v66;
        v63 = v66;
        v60 = v67;
        v120 = v67;
        v121 = v66;
        swift_bridgeObjectRetain();
        v32 = v74;
        v62 = &v133;
        v133 = v74;
        v61 = v119;
        v119[0] = v60;
        v119[1] = v63;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MetaData]);
        Dictionary.subscript.setter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v31 = v109;
        objc_msgSend(v109, sel_deleteObject_, v74);

      }
    }
    outlined destroy of IndexingIterator<[MetaData]>();
    v81 = v77;
  }
  v59 = v81;
  swift_bridgeObjectRetain();
  if (v94)
  {
    v58 = v94;
    v123 = v94;
    v33 = v109;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v89 + 16))(v91, v96, v88);
    v52 = v42;
    MEMORY[0x24BDAC7A8](v42);
    v34 = v109;
    v35 = &v42[-48];
    v53 = &v42[-48];
    *((_QWORD *)v35 + 2) = &v125;
    *((_QWORD *)v35 + 3) = v34;
    *((_DWORD *)v35 + 8) = v36;
    *((_QWORD *)v35 + 5) = v37;
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
    lazy protocol witness table accessor for type [GPKMetadata] and conformance [A]();
    v38 = v59;
    Sequence.forEach(_:)();
    v55 = v38;
    v56 = v38;
    if (v38)
    {
      v45 = v56;

      (*(void (**)(_BYTE *, uint64_t))(v89 + 8))(v91, v88);
      outlined destroy of [GPKMetadata]();
      outlined destroy of [String : MetaData]();
      swift_bridgeObjectRelease();

      return;
    }

    (*(void (**)(_BYTE *, uint64_t))(v89 + 8))(v91, v88);
    outlined destroy of [GPKMetadata]();
    v57 = v55;
  }
  else
  {
    v57 = v59;
  }
  v49 = v57;
  v134 = 0;
  v39 = v109;
  v124[0] = v134;
  v51 = objc_msgSend(v109, sel_save_, v124);
  v50 = v124[0];
  v40 = v124[0];
  v41 = v134;
  v134 = v50;

  if ((v51 & 1) == 0)
  {
    v43 = v134;
    v44 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  outlined destroy of [String : MetaData]();
  swift_bridgeObjectRelease();

}

void partial apply for closure #1 in CoreDataMetadataStore.store(metaData:groupID:clearOldMetadata:)()
{
  uint64_t v0;

  closure #1 in CoreDataMetadataStore.store(metaData:groupID:clearOldMetadata:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 36) & 1, *(_QWORD *)(v0 + 40), *(float *)(v0 + 32));
}

void closure #1 in closure #1 in CoreDataMetadataStore.store(metaData:groupID:clearOldMetadata:)(uint64_t *a1, id a2)
{
  id v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a2;
  objc_msgSend(a2, sel_deleteObject_, v3);

}

void closure #2 in closure #1 in CoreDataMetadataStore.store(metaData:groupID:clearOldMetadata:)(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  id v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  _QWORD v34[2];
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v15 = a1;
  v27 = a2;
  v20 = a3;
  v21 = a5;
  v22 = a4;
  v40 = 0;
  v39 = 0;
  v37 = 0;
  v38 = 0;
  v36 = 0;
  v33 = 0;
  v28 = 0;
  v16 = type metadata accessor for GPKGroupID();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v19 = (char *)v14 - v18;
  v23 = type metadata accessor for GPKMetadata();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v14 - v25;
  v40 = a1;
  v39 = v6;
  v37 = v7;
  v38 = v8;
  v36 = v9;
  v10 = GPKMetadata.key.getter();
  v29 = *v27;
  v31 = v34;
  v34[0] = v10;
  v34[1] = v11;
  v30 = type metadata accessor for MetaData();
  MEMORY[0x24263485C](&v35, v31, v29, MEMORY[0x24BEE0D00]);
  outlined destroy of String();
  v32 = v35;
  if (v35)
  {
    v14[1] = v32;
    v14[0] = v32;
    v33 = v32;
    v12 = v20;
    objc_msgSend(v20, sel_deleteObject_, v14[0]);

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v15, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v22, v16);
  v13 = v20;

}

uint64_t CoreDataMetadataStore.metaData(groupID:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v10 = a1;
  v2 = v1;
  v14 = v2;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v16 = (uint64_t)v8 - v13;
  v25 = a1;
  v4 = *((_DWORD *)v14 + 2);
  v23 = *v14;
  v24 = v4;
  v15 = &v21;
  v21 = v23;
  v22 = v4;
  GPKGroupID.uuid.getter();
  v5 = v17;
  v6 = CoreDataMetadataStore.metaData(groupID:)(v16);
  v18 = v5;
  v19 = v6;
  v20 = v5;
  if (v5)
  {
    v8[1] = v20;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v11);
    return v8[2];
  }
  else
  {
    v9 = v19;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v11);
    return v9;
  }
}

{
  id v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  _QWORD v7[2];
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  id v21;
  int v22;
  uint64_t v23;
  id v24;
  int v25;
  uint64_t v26;

  v11 = a1;
  v26 = 0;
  v24 = 0;
  v25 = 0;
  v12 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v12 - 8);
  v8 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (char *)v7 - v8;
  v26 = MEMORY[0x24BDAC7A8](v11);
  v9 = *(id *)v2;
  v1 = v9;
  v14 = *(_DWORD *)(v2 + 8);
  v24 = v9;
  v25 = v14;
  v3 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v11, v12);
  v4 = v1;
  v15 = &v19;
  v20 = v13;
  v21 = v1;
  v22 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]?);
  v5 = v16;
  NSManagedObjectContext.sync<A>(work:)();
  v17 = v5;
  v18 = v5;
  if (v5)
  {
    v7[0] = v18;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v12);

    return v7[1];
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v12);

    return v23;
  }
}

void closure #1 in CoreDataMetadataStore.metaData(groupID:)(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void *v11;
  uint64_t v12;
  void *v13;

  type metadata accessor for MetaData();
  v13 = (void *)static MetaData.fetchRequest()();
  type metadata accessor for NSPredicate();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID == %@", 0xDuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  v7 = UUID.uuidString.getter();
  v8 = v3;
  v9[3] = MEMORY[0x24BEE0D00];
  v9[4] = lazy protocol witness table accessor for type String and conformance String();
  *v9 = v7;
  v9[1] = v8;
  _finalizeUninitializedArray<A>(_:)();
  v11 = (void *)NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_setPredicate_, v11);

  v4 = a1;
  NSManagedObjectContext.fetch<A>(_:)();

  if (!v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MetaData]);
    type metadata accessor for GPKMetadata();
    lazy protocol witness table accessor for type [MetaData] and conformance [A]();
    v5 = Sequence.compactMap<A>(_:)();
    swift_bridgeObjectRetain();
    *a2 = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

}

void partial apply for closure #1 in CoreDataMetadataStore.metaData(groupID:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in CoreDataMetadataStore.metaData(groupID:)(*(void **)(v1 + 24), a1);
}

uint64_t closure #1 in closure #1 in CoreDataMetadataStore.metaData(groupID:)@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v14;
  id v15;

  v14 = *a1;
  v15 = objc_msgSend(*a1, sel_key);
  if (v15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v2;

    v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  if (v12)
  {
    v10 = objc_msgSend(v14, sel_value);
    if (v10)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v5;

      v9 = v8;
    }
    else
    {
      v9 = 0xF000000000000000;
    }
    if ((v9 & 0xF000000000000000) == 0xF000000000000000)
    {
      v6 = type metadata accessor for GPKMetadata();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, 1);
      return swift_bridgeObjectRelease();
    }
    else
    {
      objc_msgSend(v14, sel_version);
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int32 and conformance Int32();
      UnsignedInteger<>.init<A>(_:)();
      GPKMetadata.init(key:value:version:)();
      v7 = type metadata accessor for GPKMetadata();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a2, 0, 1);
    }
  }
  else
  {
    v3 = type metadata accessor for GPKMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1);
  }
}

void CoreDataMetadataStore.deleteMetadata(withKey:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  _QWORD v10[2];
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  int v27;
  id v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v20 = a1;
  v17 = a2;
  v14 = a3;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  v15 = type metadata accessor for GPKGroupID();
  v13 = *(_QWORD *)(v15 - 8);
  v11 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = (char *)v10 - v11;
  v31 = MEMORY[0x24BDAC7A8](v20);
  v32 = v3;
  v30 = v4;
  v12 = *(id *)v6;
  v5 = v12;
  v18 = *(_DWORD *)(v6 + 8);
  v28 = v12;
  v29 = v18;
  v7 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v14, v15);
  swift_bridgeObjectRetain();
  v8 = v5;
  v9 = v19;
  v23 = v16;
  v24 = v20;
  v25 = v17;
  v26 = v5;
  v27 = v18;
  NSManagedObjectContext.sync<A>(work:)();
  v21 = v9;
  v22 = v9;
  if (v9)
    v10[1] = v22;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v15);
  swift_bridgeObjectRelease();

}

void closure #1 in CoreDataMetadataStore.deleteMetadata(withKey:for:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  unsigned int v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t i;
  float v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  Swift::String v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  Swift::String v72;
  id v73;
  id v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void *v87;
  id v88[4];
  void *v89;
  void *v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;

  v68 = a2;
  v69 = a3;
  v79 = a4;
  v53 = a5;
  v101 = *MEMORY[0x24BDAC8D0];
  v98 = 0;
  v96 = 0;
  v97 = 0;
  v94 = 0;
  v95 = 0;
  v93 = 0;
  v92 = 0;
  v91 = 0;
  v90 = 0;
  v89 = 0;
  v88[2] = 0;
  v88[3] = 0;
  v87 = 0;
  v78 = 0;
  v59 = type metadata accessor for UUID();
  v58 = *(_QWORD *)(v59 - 8);
  v54 = (*(_QWORD *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v60 = (char *)&v39 - v54;
  v98 = a1;
  v96 = v6;
  v97 = v7;
  v94 = v8;
  v95 = v9;
  v76 = type metadata accessor for NSPredicate();
  v63 = 1;
  v62 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID == %@", 0xDuLL, 1);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v64 = 1;
  v61 = _allocateUninitializedArray<A>(_:)();
  v57 = v10;
  GPKGroupID.uuid.getter();
  v55 = UUID.uuidString.getter();
  v56 = v11;
  v66 = MEMORY[0x24BEE0D00];
  v57[3] = MEMORY[0x24BEE0D00];
  v12 = lazy protocol witness table accessor for type String and conformance String();
  v13 = v55;
  v14 = v56;
  v15 = v57;
  v16 = v58;
  v17 = v59;
  v18 = v12;
  v19 = v60;
  v67 = v18;
  v57[4] = v18;
  *v15 = v13;
  v15[1] = v14;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v17);
  _finalizeUninitializedArray<A>(_:)();
  v73 = (id)NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
  v93 = v73;
  v72 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("key == %@", 9uLL, v63 & 1);
  v65 = _allocateUninitializedArray<A>(_:)();
  v70 = v20;
  swift_bridgeObjectRetain();
  v21 = v67;
  v22 = v68;
  v23 = v69;
  v24 = v70;
  v70[3] = v66;
  v24[4] = v21;
  *v24 = v22;
  v24[1] = v23;
  _finalizeUninitializedArray<A>(_:)();
  v74 = (id)NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
  v92 = v74;
  type metadata accessor for NSCompoundPredicate();
  v77 = _allocateUninitializedArray<A>(_:)();
  v75 = v25;
  v26 = v73;
  v27 = v74;
  *v75 = v73;
  v28 = v27;
  v75[1] = v74;
  _finalizeUninitializedArray<A>(_:)();
  v80 = @nonobjc NSCompoundPredicate.__allocating_init(andPredicateWithSubpredicates:)();
  v91 = v80;
  v81 = type metadata accessor for MetaData();
  v29 = (void *)static MetaData.fetchRequest()();
  v30 = v79;
  v83 = v29;
  v90 = v29;
  v31 = v80;
  objc_msgSend(v83, sel_setPredicate_, v80);

  v32 = v30;
  v33 = v82;
  v34 = NSManagedObjectContext.fetch<A>(_:)();
  v84 = v33;
  v85 = (void *)v34;
  v86 = v33;
  if (v33)
  {
    v42 = v86;

  }
  else
  {
    v50 = v85;

    v89 = v50;
    swift_bridgeObjectRetain();
    v88[1] = v50;
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MetaData]);
    lazy protocol witness table accessor for type [MetaData] and conformance [A]();
    Collection<>.makeIterator()();
    for (i = v84; ; i = v48)
    {
      v48 = i;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[MetaData]>);
      IndexingIterator.next()();
      v49 = v100;
      if (!v100)
        break;
      v47 = v49;
      v44 = v49;
      v87 = v49;
      v38 = v79;
      objc_msgSend(v79, sel_deleteObject_, v44);

    }
    outlined destroy of IndexingIterator<[MetaData]>();
    v99 = 0;
    v35 = v79;
    v88[0] = v99;
    v46 = objc_msgSend(v79, sel_save_, v88);
    v45 = v88[0];
    v36 = v88[0];
    v37 = v99;
    v99 = v45;

    if ((v46 & 1) != 0)
    {
      swift_bridgeObjectRelease();

    }
    else
    {
      v40 = v99;
      v41 = _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_bridgeObjectRelease();

      v43 = v41;
    }
  }
}

void partial apply for closure #1 in CoreDataMetadataStore.deleteMetadata(withKey:for:)()
{
  uint64_t v0;

  closure #1 in CoreDataMetadataStore.deleteMetadata(withKey:for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(float *)(v0 + 48));
}

id @nonobjc NSCompoundPredicate.__allocating_init(andPredicateWithSubpredicates:)()
{
  Class isa;
  id v2;

  type metadata accessor for NSPredicate();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_andPredicateWithSubpredicates_, isa);

  swift_bridgeObjectRelease();
  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CoreDataMetadataStore.deleteAllData()()
{
  id v0;
  id *v1;
  Swift::String v2;
  Swift::String v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  Swift::String v13;
  void *v14;
  unint64_t v15;
  id v16;
  int v17;
  uint64_t countAndFlagsBits;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  void *v25;
  void *object;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id *v31;

  v31 = 0;
  v23 = type metadata accessor for LogSubsystem();
  v21 = *(_QWORD *)(v23 - 8);
  v15 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v22 = (uint64_t)&v9 - v15;
  v16 = *v1;
  v0 = v16;
  v31 = v1;
  v17 = 1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Deleting all metadata", 0x15uLL, 1);
  countAndFlagsBits = v2._countAndFlagsBits;
  object = v2._object;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataStore.swift", 0x20uLL, v17 & 1);
  v20 = v3._countAndFlagsBits;
  v25 = v3._object;
  v19 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v22);
  gpklog(_:type:fileID:line:subsystem:)();
  v24 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v24(v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v0;
  v5 = v0;
  v6 = v0;
  v7 = v27;
  v30 = v0;
  NSManagedObjectContext.sync<A>(work:)();
  v28 = v7;
  v29 = v7;
  if (v7)
  {
    v9 = v29;

  }
  else
  {

    v10 = 1;
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("All metadata deleted", 0x14uLL, 1);
    v11 = v8._countAndFlagsBits;
    v14 = v8._object;
    v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataStore.swift", 0x20uLL, v10 & 1);
    v12 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v22);
    gpklog(_:type:fileID:line:subsystem:)();
    v24(v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void closure #1 in CoreDataMetadataStore.deleteAllData()(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  _QWORD v6[4];
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unsigned int v12;
  void *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25[2];
  void *v26;
  id v27;
  void *v28;
  void *v29;
  uint64_t v30;

  v18 = a1;
  v30 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v28 = a1;
  v19 = type metadata accessor for MetaData();
  v21 = (id)static MetaData.fetchRequest()();
  v27 = v21;
  v22 = v20;
  v23 = (void *)NSManagedObjectContext.fetch<A>(_:)();
  v24 = v20;
  if (v20)
  {

    v10 = v24;
  }
  else
  {
    v13 = v23;
    v26 = v23;
    v25[1] = v23;
    v1 = v18;
    v14 = &v7;
    MEMORY[0x24BDAC7A8](&v7);
    v15 = v6;
    v6[2] = v2;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MetaData]);
    lazy protocol witness table accessor for type [MetaData] and conformance [A]();
    v3 = v22;
    Sequence.forEach(_:)();
    v17 = v3;
    if (v3)
    {
      __break(1u);
    }
    else
    {

      v29 = 0;
      v25[0] = 0;
      v12 = objc_msgSend(v18, sel_save_, v25);
      v11 = v25[0];
      v4 = v25[0];
      v5 = v29;
      v29 = v11;

      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease();

        return;
      }
    }
    v8 = v29;
    v9 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();

  }
}

void partial apply for closure #1 in CoreDataMetadataStore.deleteAllData()()
{
  uint64_t v0;

  closure #1 in CoreDataMetadataStore.deleteAllData()(*(void **)(v0 + 16));
}

id closure #1 in closure #1 in CoreDataMetadataStore.deleteAllData()(int a1, id a2)
{
  return objc_msgSend(a2, sel_deleteObject_);
}

void protocol witness for MetadataStore.store(metaData:groupID:) in conformance CoreDataMetadataStore(uint64_t a1, uint64_t a2)
{
  CoreDataMetadataStore.store(metaData:groupID:)(a1, a2);
}

void protocol witness for MetadataStore.store(metaData:groupID:clearOldMetadata:) in conformance CoreDataMetadataStore(uint64_t a1, uint64_t a2, char a3)
{
  CoreDataMetadataStore.store(metaData:groupID:clearOldMetadata:)(a1, a2, a3 & 1);
}

uint64_t protocol witness for MetadataStore.metaData(groupID:) in conformance CoreDataMetadataStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v4 = CoreDataMetadataStore.metaData(groupID:)(a1);
  if (v1)
    return v3;
  else
    return v4;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v4 = CoreDataMetadataStore.metaData(groupID:)(a1);
  if (v1)
    return v3;
  else
    return v4;
}

void protocol witness for MetadataStore.deleteMetadata(withKey:for:) in conformance CoreDataMetadataStore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CoreDataMetadataStore.deleteMetadata(withKey:for:)(a1, a2, a3);
}

void protocol witness for MetadataStore.deleteAllData() in conformance CoreDataMetadataStore()
{
  CoreDataMetadataStore.deleteAllData()();
}

uint64_t dispatch thunk of MetadataStore.store(metaData:groupID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of MetadataStore.store(metaData:groupID:clearOldMetadata:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a5 + 16))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of MetadataStore.metaData(groupID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of MetadataStore.deleteMetadata(withKey:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of MetadataStore.deleteAllData()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t initializeBufferWithCopyOfBuffer for CoreDataMetadataStore(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t result;
  id v4;

  v4 = *(id *)a2;
  v2 = *(id *)a2;
  result = a1;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

void destroy for CoreDataMetadataStore(id *a1)
{

}

uint64_t initializeWithCopy for CoreDataMetadataStore(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t result;
  id v4;

  v4 = *(id *)a2;
  v2 = *(id *)a2;
  result = a1;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

float assignWithCopy for CoreDataMetadataStore(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  float result;
  id v5;

  v5 = *(id *)a2;
  v2 = *(id *)a2;
  v3 = *(void **)a1;
  *(_QWORD *)a1 = v5;

  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

float assignWithTake for CoreDataMetadataStore(uint64_t a1, uint64_t a2)
{
  void *v2;
  float result;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CoreDataMetadataStore(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(_BYTE *)(a1 + 12))
    {
      v4 = *(_QWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (*(_QWORD *)a1 < 0x100000000uLL)
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreDataMetadataStore(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_DWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 12) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 12) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreDataMetadataStore()
{
  return &type metadata for CoreDataMetadataStore;
}

id partial apply for closure #1 in closure #1 in CoreDataMetadataStore.deleteAllData()(int a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CoreDataMetadataStore.deleteAllData()(a1, *(id *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type [MetaData] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [MetaData] and conformance [A];
  if (!lazy protocol witness table cache variable for type [MetaData] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MetaData]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [MetaData] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [MetaData] and conformance [A];
  if (!lazy protocol witness table cache variable for type [MetaData] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MetaData]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [MetaData] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t type metadata accessor for NSPredicate()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSPredicate;
  if (!lazy cache variable for type metadata for NSPredicate)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSPredicate);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return v0;
  }
  return v2;
}

unint64_t type metadata accessor for NSCompoundPredicate()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSCompoundPredicate;
  if (!lazy cache variable for type metadata for NSCompoundPredicate)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSCompoundPredicate);
    return ObjCClassMetadata;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[MetaData]>()
{
  swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE4540], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE4518], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE4538], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE3FC8], MEMORY[0x24BEE3F88]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return v0;
  }
  return v2;
}

void partial apply for closure #2 in closure #1 in CoreDataMetadataStore.store(metaData:groupID:clearOldMetadata:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in closure #1 in CoreDataMetadataStore.store(metaData:groupID:clearOldMetadata:)(a1, *(uint64_t **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 40), *(float *)(v1 + 32));
}

unint64_t lazy protocol witness table accessor for type [GPKMetadata] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMetadata] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMetadata] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMetadata]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMetadata] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMetadata] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMetadata] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMetadata]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMetadata] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMetadata] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMetadata] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMetadata]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12D8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMetadata] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GPKMetadata]()
{
  swift_bridgeObjectRelease();
}

void partial apply for closure #1 in closure #1 in CoreDataMetadataStore.store(metaData:groupID:clearOldMetadata:)(uint64_t *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in CoreDataMetadataStore.store(metaData:groupID:clearOldMetadata:)(a1, *(id *)(v1 + 16));
}

uint64_t one-time initialization function for scheme()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("metadatakey", 0xBuLL, 1);
  result = v1._countAndFlagsBits;
  static MetadataKeyGenerator.scheme = (__int128)v1;
  return result;
}

__int128 *MetadataKeyGenerator.scheme.unsafeMutableAddressor()
{
  if (one-time initialization token for scheme != -1)
    swift_once();
  return &static MetadataKeyGenerator.scheme;
}

uint64_t one-time initialization function for groupMetadataPrefix()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.metadata.group.key", 0x25uLL, 1);
  result = v1._countAndFlagsBits;
  static MetadataKeyGenerator.groupMetadataPrefix = (__int128)v1;
  return result;
}

__int128 *MetadataKeyGenerator.groupMetadataPrefix.unsafeMutableAddressor()
{
  if (one-time initialization token for groupMetadataPrefix != -1)
    swift_once();
  return &static MetadataKeyGenerator.groupMetadataPrefix;
}

uint64_t one-time initialization function for groupMemberMetadataPrefix()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.metadata.group.member.key", 0x2CuLL, 1);
  result = v1._countAndFlagsBits;
  static MetadataKeyGenerator.groupMemberMetadataPrefix = (__int128)v1;
  return result;
}

__int128 *MetadataKeyGenerator.groupMemberMetadataPrefix.unsafeMutableAddressor()
{
  if (one-time initialization token for groupMemberMetadataPrefix != -1)
    swift_once();
  return &static MetadataKeyGenerator.groupMemberMetadataPrefix;
}

uint64_t one-time initialization function for managedMembersMetadataPrefix()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.metadata.group.managedmembers.key", 0x34uLL, 1);
  result = v1._countAndFlagsBits;
  static MetadataKeyGenerator.managedMembersMetadataPrefix = (__int128)v1;
  return result;
}

__int128 *MetadataKeyGenerator.managedMembersMetadataPrefix.unsafeMutableAddressor()
{
  if (one-time initialization token for managedMembersMetadataPrefix != -1)
    swift_once();
  return &static MetadataKeyGenerator.managedMembersMetadataPrefix;
}

uint64_t static MetadataKeyGenerator.groupMetadataKey(for:)()
{
  Swift::String *v0;
  __int128 *v1;
  __int128 *v2;
  void *v3;
  unint64_t v4;
  NSDataBase64EncodingOptions v5;
  Swift::String *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t countAndFlagsBits;

  _allocateUninitializedArray<A>(_:)();
  v7 = v0;
  v1 = MetadataKeyGenerator.scheme.unsafeMutableAddressor();
  outlined init with copy of String(v1, v7);
  v7[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("://", 3uLL, 1);
  v2 = MetadataKeyGenerator.groupMetadataPrefix.unsafeMutableAddressor();
  outlined init with copy of String(v2, &v7[2]._countAndFlagsBits);
  v7[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("?gid=", 5uLL, 1);
  v7[4]._countAndFlagsBits = GPKGroupID.hexString.getter();
  v7[4]._object = v3;
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  default argument 0 of BidirectionalCollection<>.joined(separator:)();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  outlined destroy of [String]();
  MEMORY[0x242634964]();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  v8 = Data.init<A>(_:)();
  v9 = v4;
  v5 = default argument 0 of Data.base64EncodedString(options:)();
  countAndFlagsBits = Data.base64EncodedString(options:)(v5)._countAndFlagsBits;
  outlined consume of Data._Representation(v8, v9);
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

_QWORD *outlined init with copy of String(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a2 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  result = a2;
  a2[1] = v4;
  return result;
}

uint64_t default argument 0 of BidirectionalCollection<>.joined(separator:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12B0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [String]()
{
  swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View;
  if (!lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE0C58], MEMORY[0x24BEE0C50]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View);
    return v0;
  }
  return v2;
}

uint64_t default argument 0 of Data.base64EncodedString(options:)()
{
  return 0;
}

uint64_t static MetadataKeyGenerator.memberMetadataKey(userID:groupID:)()
{
  Swift::String *v0;
  __int128 *v1;
  __int128 *v2;
  void *v3;
  void *v4;
  unint64_t v5;
  NSDataBase64EncodingOptions v6;
  Swift::String *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t countAndFlagsBits;

  _allocateUninitializedArray<A>(_:)();
  v8 = v0;
  v1 = MetadataKeyGenerator.scheme.unsafeMutableAddressor();
  outlined init with copy of String(v1, v8);
  v8[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("://", 3uLL, 1);
  v2 = MetadataKeyGenerator.groupMemberMetadataPrefix.unsafeMutableAddressor();
  outlined init with copy of String(v2, &v8[2]._countAndFlagsBits);
  v8[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("?gid=", 5uLL, 1);
  v8[4]._countAndFlagsBits = GPKGroupID.hexString.getter();
  v8[4]._object = v3;
  v8[5] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("&puid=", 6uLL, 1);
  v8[6]._countAndFlagsBits = GPKUserID.hexString.getter();
  v8[6]._object = v4;
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  default argument 0 of BidirectionalCollection<>.joined(separator:)();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  outlined destroy of [String]();
  MEMORY[0x242634964]();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  v9 = Data.init<A>(_:)();
  v10 = v5;
  v6 = default argument 0 of Data.base64EncodedString(options:)();
  countAndFlagsBits = Data.base64EncodedString(options:)(v6)._countAndFlagsBits;
  outlined consume of Data._Representation(v9, v10);
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t static MetadataKeyGenerator.memberUserID(fromKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  _BYTE v17[12];
  int v18;
  uint64_t countAndFlagsBits;
  int v20;
  Swift::String v21;
  void *object;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  unint64_t v60;
  _BYTE *v61;
  unint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _BYTE *v67;
  unint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(_BYTE *, uint64_t);
  _QWORD v76[3];
  _QWORD v77[2];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BYTE *v83;

  v65 = a1;
  v64 = a2;
  v83 = 0;
  v82 = 0;
  v80 = 0;
  v81 = 0;
  v55 = 0;
  v71 = 0;
  v56 = type metadata accessor for LogSubsystem();
  v57 = *(_QWORD *)(v56 - 8);
  v58 = (*(_QWORD *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v56);
  v59 = &v17[-v58];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLQueryItem?);
  v60 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v61 = &v17[-v60];
  v62 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v17[-v60]);
  v63 = &v17[-v62];
  v83 = &v17[-v62];
  v66 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v65);
  v67 = &v17[-v66];
  v68 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v72 = &v17[-v68];
  v69 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v70 = &v17[-v69];
  v82 = &v17[-v69];
  v80 = v8;
  v81 = v9;
  static MetadataKeyGenerator.components(forKey:)(v8, v9, &v17[-v69]);
  outlined init with copy of URLComponents?(v70, v72);
  v73 = type metadata accessor for URLComponents();
  v74 = *(_QWORD *)(v73 - 8);
  v75 = *(unsigned int (**)(_BYTE *, uint64_t))(v74 + 48);
  if (v75(v72, 1) == 1)
  {
    v24 = 0;
    outlined destroy of URLComponents?((uint64_t)v72);
    v53 = v24;
    v54 = v24;
  }
  else
  {
    v51 = URLComponents.host.getter();
    v52 = v10;
    (*(void (**)(_BYTE *, uint64_t))(v74 + 8))(v72, v73);
    v53 = v51;
    v54 = v52;
  }
  v48 = v54;
  v47 = v53;
  swift_bridgeObjectRetain();
  v11 = MetadataKeyGenerator.groupMemberMetadataPrefix.unsafeMutableAddressor();
  v49 = *(_QWORD *)v11;
  v50 = *((_QWORD *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77[0] = v47;
  v77[1] = v48;
  v78 = v49;
  v79 = v50;
  if (v48)
  {
    outlined init with copy of String?(v77, v76);
    if (v79)
    {
      v40 = v76[0];
      v43 = v76[1];
      swift_bridgeObjectRetain();
      v41 = v78;
      v44 = v77;
      v42 = v79;
      swift_bridgeObjectRetain();
      v45 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of String?();
      v46 = v45;
      goto LABEL_9;
    }
    outlined destroy of String();
    goto LABEL_11;
  }
  if (v79)
  {
LABEL_11:
    outlined destroy of (String?, String?)();
    v46 = 0;
    goto LABEL_9;
  }
  outlined destroy of String?();
  v46 = 1;
LABEL_9:
  v39 = v46;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0)
  {
    v23 = 0;
    v18 = 1;
    v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Metadata key is not member key", 0x1EuLL, 1);
    countAndFlagsBits = v16._countAndFlagsBits;
    object = v16._object;
    v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataKeyGenerator.swift", 0x27uLL, v18 & 1);
    v20 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v59);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(_BYTE *, uint64_t))(v57 + 8))(v59, v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of URLComponents?((uint64_t)v70);
    v28 = v23;
    v29 = v23;
    return v28;
  }
  outlined init with copy of URLComponents?(v70, v67);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v75)(v67, 1, v73) == 1)
  {
    outlined destroy of URLComponents?((uint64_t)v67);
LABEL_24:
    v15 = type metadata accessor for URLQueryItem();
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v63, 1);
    goto LABEL_20;
  }
  v38 = URLComponents.queryItems.getter();
  (*(void (**)(_BYTE *, uint64_t))(v74 + 8))(v67, v73);
  if (!v38)
    goto LABEL_24;
  v37 = v38;
  v12 = v55;
  v76[2] = v38;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URLQueryItem]);
  lazy protocol witness table accessor for type [URLQueryItem] and conformance [A]();
  result = Sequence.first(where:)();
  if (!v12)
  {
    outlined destroy of [URLQueryItem]();
LABEL_20:
    outlined init with copy of URLQueryItem?(v63, v61);
    v34 = type metadata accessor for URLQueryItem();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t))(v35 + 48))(v61, 1) == 1)
    {
      v25 = 0;
      outlined destroy of URLQueryItem?((uint64_t)v61);
      v32 = v25;
      v33 = v25;
    }
    else
    {
      v30 = URLQueryItem.value.getter();
      v31 = v14;
      (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v61, v34);
      v32 = v30;
      v33 = v31;
    }
    v27 = v33;
    v26 = v32;
    outlined destroy of URLQueryItem?((uint64_t)v63);
    outlined destroy of URLComponents?((uint64_t)v70);
    v28 = v26;
    v29 = v27;
    return v28;
  }
  __break(1u);
  return result;
}

uint64_t static MetadataKeyGenerator.components(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;
  __int128 *v17;
  Swift::String v18;
  uint64_t v20;
  Builtin::Word v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  Builtin::Word v26[7];
  int v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  Swift::String v34;
  void *v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Builtin::Word v54;
  void *object;
  void *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t countAndFlagsBits;
  void (*v63)(uint64_t, uint64_t);
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD v96[2];
  _QWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  Builtin::Word v110;
  Builtin::Word v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;

  v80 = a3;
  v93 = a1;
  v92 = a2;
  v114 = 0;
  v112 = 0;
  v113 = 0;
  v106 = 0;
  v107 = 0;
  v104 = 0;
  v105 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?);
  v81 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v82 = (char *)v26 - v81;
  v83 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v26 - v81);
  v84 = (char *)v26 - v83;
  v114 = (char *)v26 - v83;
  v85 = 0;
  v86 = type metadata accessor for LogSubsystem();
  v87 = *(_QWORD *)(v86 - 8);
  v88 = (*(_QWORD *)(v87 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v85);
  v89 = (uint64_t)v26 - v88;
  v90 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for String.Encoding() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v93);
  v91 = (char *)v26 - v90;
  v112 = v5;
  v113 = v6;
  default argument 1 of Data.init(base64Encoded:options:)();
  v94 = Data.init(base64Encoded:options:)();
  v95 = v7;
  if ((v7 & 0xF000000000000000) == 0xF000000000000000)
    goto LABEL_22;
  v78 = v94;
  v79 = v95;
  v75 = v95;
  v74 = v94;
  v106 = v94;
  v107 = v95;
  static String.Encoding.utf8.getter();
  v76 = String.init(data:encoding:)();
  v77 = v8;
  if (!v8)
  {
    outlined consume of Data._Representation(v74, v75);
LABEL_22:
    v26[0] = 22;
    v20 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v26[3] = (Builtin::Word)&v110;
    v110 = v20;
    v111 = v21;
    v31 = 1;
    v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid metadata key: ", v26[0], 1);
    v26[1] = (Builtin::Word)v22._object;
    DefaultStringInterpolation.appendLiteral(_:)(v22);
    swift_bridgeObjectRelease();
    v108 = v93;
    v109 = v92;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v30 = 0;
    v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v31 & 1);
    v26[2] = (Builtin::Word)v23._object;
    DefaultStringInterpolation.appendLiteral(_:)(v23);
    swift_bridgeObjectRelease();
    v26[5] = v110;
    v26[4] = v111;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v26[6] = String.init(stringInterpolation:)();
    v29 = v24;
    v27 = static os_log_type_t.error.getter();
    v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataKeyGenerator.swift", 0x27uLL, v31 & 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v89);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v89, v86);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = type metadata accessor for URLComponents();
    return (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)(v25 - 8) + 56))(v80, v31);
  }
  v72 = v76;
  v73 = v77;
  v67 = v77;
  v66 = v76;
  v104 = v76;
  v105 = v77;
  v54 = 21;
  v9 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v57 = &v102;
  v102 = v9;
  v103 = v10;
  v69 = 1;
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Parsed metadata key: ", v54, 1);
  object = v11._object;
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  v100 = v66;
  v101 = v67;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v68 = 0;
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v69 & 1);
  v56 = v12._object;
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease();
  v59 = v102;
  v58 = v103;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v60 = String.init(stringInterpolation:)();
  v65 = v13;
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataKeyGenerator.swift", 0x27uLL, v69 & 1);
  countAndFlagsBits = v14._countAndFlagsBits;
  v64 = v14._object;
  v61 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v89);
  gpklog(_:type:fileID:line:subsystem:)();
  v63 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
  v63(v89, v86);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  URLComponents.init(string:)();
  outlined init with copy of URLComponents?(v84, v82);
  v70 = type metadata accessor for URLComponents();
  v71 = *(_QWORD *)(v70 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v71 + 48))(v82, v69) == 1)
  {
    v37 = 0;
    outlined destroy of URLComponents?((uint64_t)v82);
    v52 = v37;
    v53 = v37;
  }
  else
  {
    v50 = URLComponents.scheme.getter();
    v51 = v16;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v82, v70);
    v52 = v50;
    v53 = v51;
  }
  v47 = v53;
  v46 = v52;
  swift_bridgeObjectRetain();
  v17 = MetadataKeyGenerator.scheme.unsafeMutableAddressor();
  v48 = *(_QWORD *)v17;
  v49 = *((_QWORD *)v17 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v97[0] = v46;
  v97[1] = v47;
  v98 = v48;
  v99 = v49;
  if (!v47)
  {
    if (!v99)
    {
      outlined destroy of String?();
      v45 = 1;
      goto LABEL_15;
    }
    goto LABEL_18;
  }
  outlined init with copy of String?(v97, v96);
  if (!v99)
  {
    outlined destroy of String();
LABEL_18:
    outlined destroy of (String?, String?)();
    v45 = 0;
    goto LABEL_15;
  }
  v39 = v96[0];
  v42 = v96[1];
  swift_bridgeObjectRetain();
  v40 = v98;
  v43 = v97;
  v41 = v99;
  swift_bridgeObjectRetain();
  v44 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String?();
  v45 = v44;
LABEL_15:
  v38 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v38 & 1) != 0)
  {
    outlined init with copy of URLComponents?(v84, v80);
  }
  else
  {
    v36 = 1;
    v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Metadata key is not member key", 0x1EuLL, 1);
    v32 = v18._countAndFlagsBits;
    v35 = v18._object;
    v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataKeyGenerator.swift", 0x27uLL, v36 & 1);
    v33 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v89);
    gpklog(_:type:fileID:line:subsystem:)();
    v63(v89, v86);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, _QWORD, _QWORD, uint64_t))(v71 + 56))(v80, v36, v36, v70);
  }
  outlined destroy of URLComponents?((uint64_t)v84);
  swift_bridgeObjectRelease();
  return outlined consume of Data._Representation(v74, v75);
}

void *outlined init with copy of URLComponents?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URLComponents();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of URLComponents?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for URLComponents();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of (String?, String?)()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void *outlined init with copy of URLQueryItem?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URLQueryItem();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLQueryItem?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of URLQueryItem?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for URLQueryItem();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t closure #1 in static MetadataKeyGenerator.memberUserID(fromKey:)()
{
  char v1;

  URLQueryItem.name.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("puid", 4uLL, 1);
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

unint64_t lazy protocol witness table accessor for type [URLQueryItem] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [URLQueryItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [URLQueryItem] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [URLQueryItem]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [URLQueryItem] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [URLQueryItem]()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String?()
{
  swift_bridgeObjectRelease();
}

_QWORD *outlined init with copy of String?(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a2 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  result = a2;
  a2[1] = v4;
  return result;
}

uint64_t static MetadataKeyGenerator.groupID(fromKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;

  v29 = a1;
  v28 = a2;
  v40 = 0;
  v39 = 0;
  v37 = 0;
  v38 = 0;
  v23 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLQueryItem?);
  v24 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v25 = (char *)v12 - v24;
  v26 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v12 - v24);
  v27 = (char *)v12 - v26;
  v40 = (char *)v12 - v26;
  v30 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)v12 - v30;
  v31 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v32 = (char *)v12 - v31;
  v39 = (char *)v12 - v31;
  v37 = v6;
  v38 = v7;
  static MetadataKeyGenerator.components(forKey:)(v6, v7, (char *)v12 - v31);
  outlined init with copy of URLComponents?(v32, v33);
  v34 = type metadata accessor for URLComponents();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v35 + 48))(v33, 1) == 1)
  {
    outlined destroy of URLComponents?((uint64_t)v33);
LABEL_12:
    v11 = type metadata accessor for URLQueryItem();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v27, 1);
    goto LABEL_8;
  }
  v22 = URLComponents.queryItems.getter();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v34);
  if (!v22)
    goto LABEL_12;
  v21 = v22;
  v8 = v23;
  v36 = v22;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [URLQueryItem]);
  lazy protocol witness table accessor for type [URLQueryItem] and conformance [A]();
  result = Sequence.first(where:)();
  if (v8)
  {
    __break(1u);
    return result;
  }
  outlined destroy of [URLQueryItem]();
LABEL_8:
  outlined init with copy of URLQueryItem?(v27, v25);
  v18 = type metadata accessor for URLQueryItem();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v19 + 48))(v25, 1) == 1)
  {
    v12[0] = 0;
    outlined destroy of URLQueryItem?((uint64_t)v25);
    v16 = v12[0];
    v17 = v12[0];
  }
  else
  {
    v14 = URLQueryItem.value.getter();
    v15 = v10;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
    v16 = v14;
    v17 = v15;
  }
  v12[1] = v17;
  v13 = v16;
  outlined destroy of URLQueryItem?((uint64_t)v27);
  outlined destroy of URLComponents?((uint64_t)v32);
  return v13;
}

uint64_t closure #1 in static MetadataKeyGenerator.groupID(fromKey:)()
{
  char v1;

  URLQueryItem.name.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gid", 3uLL, 1);
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t static MetadataKeyGenerator.managedMembersKey(for:)()
{
  Swift::String *v0;
  __int128 *v1;
  __int128 *v2;
  void *v3;
  unint64_t v4;
  NSDataBase64EncodingOptions v5;
  Swift::String *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t countAndFlagsBits;

  _allocateUninitializedArray<A>(_:)();
  v7 = v0;
  v1 = MetadataKeyGenerator.scheme.unsafeMutableAddressor();
  outlined init with copy of String(v1, v7);
  v7[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("://", 3uLL, 1);
  v2 = MetadataKeyGenerator.managedMembersMetadataPrefix.unsafeMutableAddressor();
  outlined init with copy of String(v2, &v7[2]._countAndFlagsBits);
  v7[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("?gid=", 5uLL, 1);
  v7[4]._countAndFlagsBits = GPKGroupID.hexString.getter();
  v7[4]._object = v3;
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  default argument 0 of BidirectionalCollection<>.joined(separator:)();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  outlined destroy of [String]();
  MEMORY[0x242634964]();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  v8 = Data.init<A>(_:)();
  v9 = v4;
  v5 = default argument 0 of Data.base64EncodedString(options:)();
  countAndFlagsBits = Data.base64EncodedString(options:)(v5)._countAndFlagsBits;
  outlined consume of Data._Representation(v8, v9);
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t static MetadataKeyGenerator.isManagedMembersKey(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v25 = a1;
  v24 = a2;
  v34 = 0;
  v35 = 0;
  v26 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (uint64_t)&v7 - v26;
  v34 = v2;
  v35 = v3;
  static MetadataKeyGenerator.components(forKey:)(v2, v3, (char *)&v7 - v26);
  v28 = type metadata accessor for URLComponents();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v29 + 48))(v27, 1) == 1)
  {
    v7 = 0;
    outlined destroy of URLComponents?(v27);
    v22 = v7;
    v23 = v7;
  }
  else
  {
    v20 = URLComponents.host.getter();
    v21 = v4;
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    v22 = v20;
    v23 = v21;
  }
  v17 = v23;
  v16 = v22;
  swift_bridgeObjectRetain();
  v5 = MetadataKeyGenerator.managedMembersMetadataPrefix.unsafeMutableAddressor();
  v18 = *(_QWORD *)v5;
  v19 = *((_QWORD *)v5 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v31[0] = v16;
  v31[1] = v17;
  v32 = v18;
  v33 = v19;
  if (!v17)
  {
    if (!v33)
    {
      outlined destroy of String?();
      v15 = 1;
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  outlined init with copy of String?(v31, v30);
  if (!v33)
  {
    outlined destroy of String();
LABEL_10:
    outlined destroy of (String?, String?)();
    v15 = 0;
    goto LABEL_9;
  }
  v9 = v30[0];
  v12 = v30[1];
  swift_bridgeObjectRetain();
  v10 = v32;
  v13 = v31;
  v11 = v33;
  swift_bridgeObjectRetain();
  v14 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String?();
  v15 = v14;
LABEL_9:
  v8 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t default argument 1 of Data.init(base64Encoded:options:)()
{
  return 0;
}

ValueMetadata *type metadata accessor for MetadataKeyGenerator()
{
  return &type metadata for MetadataKeyGenerator;
}

uint64_t variable initialization expression of ExponentialRetryScheduler.currentRetry()
{
  return 0;
}

BOOL ExponentialRetryScheduler.canRetry.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 32);
  swift_endAccess();
  return v2 < *(_QWORD *)(v0 + 16);
}

double default argument 1 of ExponentialRetryScheduler.init(maxRetries:power:)()
{
  return 2.0;
}

uint64_t ExponentialRetryScheduler.__allocating_init(maxRetries:power:)(uint64_t a1, double a2)
{
  swift_allocObject();
  return ExponentialRetryScheduler.init(maxRetries:power:)(a1, a2);
}

uint64_t ExponentialRetryScheduler.init(maxRetries:power:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t result;

  result = v2;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
  return result;
}

uint64_t ExponentialRetryScheduler.schedule<A>(_:shouldRetry:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v15;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);

  v8 = v6;
  v15 = v8;
  *(_QWORD *)(v7 + 328) = v8;
  *(_QWORD *)(v7 + 320) = a6;
  *(_QWORD *)(v7 + 312) = a5;
  *(_QWORD *)(v7 + 304) = a4;
  *(_QWORD *)(v7 + 296) = a3;
  *(_QWORD *)(v7 + 288) = a2;
  *(_QWORD *)(v7 + 280) = a1;
  *(_QWORD *)(v7 + 184) = v7;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)(v7 + 112) = 0;
  *(_QWORD *)(v7 + 192) = 0;
  *(_QWORD *)(v7 + 200) = 0;
  *(_BYTE *)(v7 + 464) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  *(_QWORD *)(v7 + 240) = 0;
  *(_QWORD *)(v7 + 336) = *(_QWORD *)(a6 - 8);
  *(_QWORD *)(v7 + 344) = swift_task_alloc();
  v10 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v7 + 352) = v10;
  *(_QWORD *)(v7 + 360) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 + 368) = swift_task_alloc();
  *(_QWORD *)(v7 + 376) = type metadata accessor for Optional();
  *(_QWORD *)(v7 + 384) = swift_task_alloc();
  *(_QWORD *)(v7 + 392) = swift_task_alloc();
  *(_QWORD *)(v7 + 400) = swift_task_alloc();
  *(_QWORD *)(v7 + 408) = swift_task_alloc();
  *(_QWORD *)(v7 + 88) = a2;
  *(_QWORD *)(v7 + 96) = a3;
  *(_QWORD *)(v7 + 104) = a4;
  *(_QWORD *)(v7 + 112) = a5;
  *(_QWORD *)(v7 + 192) = v15;
  v18 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v17 + 416) = v11;
  *v11 = *(_QWORD *)(v17 + 184);
  v11[1] = ExponentialRetryScheduler.schedule<A>(_:shouldRetry:);
  return v18(a1);
}

uint64_t ExponentialRetryScheduler.schedule<A>(_:shouldRetry:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 184) = *v1;
  *(_QWORD *)(v2 + 424) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 184) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 184) + 8))();
}

{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD *v14;
  id v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unsigned int (*v43)(void *, uint64_t, uint64_t);
  void *v44;
  char v45;
  char v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  v48 = (void *)v0[53];
  v51 = v0[51];
  v49 = v0[42];
  v50 = v0[40];
  v52 = v0[38];
  v0[23] = v0;
  v1 = v48;
  v0[25] = v48;
  v2 = v48;
  v3 = v48;
  v0[26] = v48;
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56);
  v0[54] = v4;
  v4(v51, 1, 1, v50);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed Error) -> (@unowned Bool))?(v52);
  if (v52)
  {
    v44 = *(void **)(v47 + 424);
    v45 = (*(uint64_t (**)(void))(v47 + 304))();

    swift_release();
    v46 = v45 & 1;
  }
  else
  {

    v46 = 2;
  }
  if (v46 == 2)
    v53 = 1;
  else
    v53 = v46 & 1;
  v38 = *(_QWORD *)(v47 + 368);
  v37 = *(_QWORD *)(v47 + 360);
  v39 = *(_QWORD *)(v47 + 352);
  *(_BYTE *)(v47 + 467) = v53 & 1;
  *(_BYTE *)(v47 + 464) = v53 & 1;
  *(_QWORD *)(v47 + 120) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v47 + 128) = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Should retry: ", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v47 + 465) = v53 & 1;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", can retry: ", 0xDuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v47 + 466) = ExponentialRetryScheduler.canRetry.getter();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ExponentialRetryScheduler.swift", 0x2CuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v38);
  gpklog(_:type:fileID:line:subsystem:)();
  v9 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  *(_QWORD *)(v47 + 440) = v9;
  v9(v38, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = *(void **)(v47 + 400);
  v40 = *(_QWORD *)(v47 + 336);
  v41 = *(_QWORD *)(v47 + 320);
  outlined init with copy of A?(*(const void **)(v47 + 408), v42, v41, *(_QWORD *)(v47 + 376));
  v43 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v40 + 48);
  v36 = v43(v42, 1, v41) == 1;
  outlined destroy of A?(*(_QWORD *)(v47 + 400), *(_QWORD *)(v47 + 320));
  if (v36 && (*(_BYTE *)(v47 + 467) & 1) != 0 && ExponentialRetryScheduler.canRetry.getter())
  {
    v35 = *(void (**)(uint64_t, uint64_t))(v47 + 440);
    v33 = *(_QWORD *)(v47 + 368);
    v34 = *(_QWORD *)(v47 + 352);
    v32 = *(_QWORD *)(v47 + 328);
    swift_beginAccess();
    v31 = *(_QWORD *)(v32 + 32);
    swift_endAccess();
    *(_QWORD *)(v47 + 216) = v31;
    *(_QWORD *)(v47 + 136) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v47 + 144) = v10;
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Scheduling to retry the task. retryIndex: ", 0x2AuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v47 + 224) = v31;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", maxRetry: ", 0xCuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v47 + 232) = *(_QWORD *)(v32 + 16);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ExponentialRetryScheduler.swift", 0x2CuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v33);
    gpklog(_:type:fileID:line:subsystem:)();
    v35(v33, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v47 + 448) = v14;
    *v14 = *(_QWORD *)(v47 + 184);
    v14[1] = ExponentialRetryScheduler.schedule<A>(_:shouldRetry:);
    return ExponentialRetryScheduler._schedule<A>(_:)(*(_QWORD *)(v47 + 392), *(_QWORD *)(v47 + 288), *(_QWORD *)(v47 + 296));
  }
  else
  {
    v30 = *(void **)(v47 + 384);
    v29 = *(_QWORD *)(v47 + 320);
    outlined init with copy of A?(*(const void **)(v47 + 408), v30, v29, *(_QWORD *)(v47 + 376));
    if (v43(v30, 1, v29) == 1)
    {
      v18 = *(void (**)(uint64_t, uint64_t))(v47 + 440);
      v20 = *(id *)(v47 + 424);
      v21 = *(_QWORD *)(v47 + 408);
      v22 = *(_QWORD *)(v47 + 368);
      v17 = *(_QWORD *)(v47 + 352);
      v19 = *(_QWORD *)(v47 + 320);
      outlined destroy of A?(*(_QWORD *)(v47 + 384), v19);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("All retry failed", 0x10uLL, 1);
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ExponentialRetryScheduler.swift", 0x2CuLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v22);
      gpklog(_:type:fileID:line:subsystem:)();
      v18(v22, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = *(id *)(v47 + 208);
      swift_willThrow();
      outlined destroy of A?(v21, v19);

    }
    else
    {
      v28 = *(id *)(v47 + 424);
      v26 = *(_QWORD *)(v47 + 408);
      v25 = *(_QWORD *)(v47 + 344);
      v24 = *(_QWORD *)(v47 + 336);
      v27 = *(_QWORD *)(v47 + 320);
      v23 = *(_QWORD *)(v47 + 280);
      (*(void (**)(void))(v24 + 32))();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v25, v27);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v27);
      outlined destroy of A?(v26, v27);

    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v47 + 184) + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 184) = *v1;
  *(_QWORD *)(v2 + 456) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  _QWORD *v10;
  id v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  BOOL v32;
  uint64_t v33;
  const void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned int (*v46)(void *, uint64_t, uint64_t);

  v42 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
  v1 = *(void (**)(void))(v0 + 432);
  v35 = *(void **)(v0 + 408);
  v34 = *(const void **)(v0 + 392);
  v37 = *(_QWORD *)(v0 + 376);
  v40 = *(_QWORD *)(v0 + 368);
  v41 = *(_QWORD *)(v0 + 352);
  v39 = *(_QWORD *)(v0 + 328);
  v36 = *(_QWORD *)(v0 + 320);
  *(_QWORD *)(v0 + 184) = v0;
  v1();
  outlined assign with take of A?(v34, v35, v36, v37);
  *(_QWORD *)(v0 + 168) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 176) = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Retry succeeded at index: ", 0x1AuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v38 = *(_QWORD *)(v39 + 32);
  swift_endAccess();
  *(_QWORD *)(v0 + 264) = v38;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", maxRetry: ", 0xCuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 272) = *(_QWORD *)(v39 + 16);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ExponentialRetryScheduler.swift", 0x2CuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v40);
  gpklog(_:type:fileID:line:subsystem:)();
  v42(v40, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = *(void **)(v0 + 400);
  v43 = *(_QWORD *)(v0 + 336);
  v44 = *(_QWORD *)(v0 + 320);
  outlined init with copy of A?(*(const void **)(v0 + 408), v45, v44, *(_QWORD *)(v0 + 376));
  v46 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v43 + 48);
  v32 = v46(v45, 1, v44) == 1;
  outlined destroy of A?(*(_QWORD *)(v33 + 400), *(_QWORD *)(v33 + 320));
  if (v32 && (*(_BYTE *)(v33 + 467) & 1) != 0 && ExponentialRetryScheduler.canRetry.getter())
  {
    v31 = *(void (**)(uint64_t, uint64_t))(v33 + 440);
    v29 = *(_QWORD *)(v33 + 368);
    v30 = *(_QWORD *)(v33 + 352);
    v28 = *(_QWORD *)(v33 + 328);
    swift_beginAccess();
    v27 = *(_QWORD *)(v28 + 32);
    swift_endAccess();
    *(_QWORD *)(v33 + 216) = v27;
    *(_QWORD *)(v33 + 136) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v33 + 144) = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Scheduling to retry the task. retryIndex: ", 0x2AuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v33 + 224) = v27;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", maxRetry: ", 0xCuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v33 + 232) = *(_QWORD *)(v28 + 16);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ExponentialRetryScheduler.swift", 0x2CuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v29);
    gpklog(_:type:fileID:line:subsystem:)();
    v31(v29, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v33 + 448) = v10;
    *v10 = *(_QWORD *)(v33 + 184);
    v10[1] = ExponentialRetryScheduler.schedule<A>(_:shouldRetry:);
    return ExponentialRetryScheduler._schedule<A>(_:)(*(_QWORD *)(v33 + 392), *(_QWORD *)(v33 + 288), *(_QWORD *)(v33 + 296));
  }
  else
  {
    v26 = *(void **)(v33 + 384);
    v25 = *(_QWORD *)(v33 + 320);
    outlined init with copy of A?(*(const void **)(v33 + 408), v26, v25, *(_QWORD *)(v33 + 376));
    if (v46(v26, 1, v25) == 1)
    {
      v14 = *(void (**)(uint64_t, uint64_t))(v33 + 440);
      v16 = *(id *)(v33 + 424);
      v17 = *(_QWORD *)(v33 + 408);
      v18 = *(_QWORD *)(v33 + 368);
      v13 = *(_QWORD *)(v33 + 352);
      v15 = *(_QWORD *)(v33 + 320);
      outlined destroy of A?(*(_QWORD *)(v33 + 384), v15);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("All retry failed", 0x10uLL, 1);
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ExponentialRetryScheduler.swift", 0x2CuLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v18);
      gpklog(_:type:fileID:line:subsystem:)();
      v14(v18, v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = *(id *)(v33 + 208);
      swift_willThrow();
      outlined destroy of A?(v17, v15);

    }
    else
    {
      v24 = *(id *)(v33 + 424);
      v22 = *(_QWORD *)(v33 + 408);
      v21 = *(_QWORD *)(v33 + 344);
      v20 = *(_QWORD *)(v33 + 336);
      v23 = *(_QWORD *)(v33 + 320);
      v19 = *(_QWORD *)(v33 + 280);
      (*(void (**)(void))(v20 + 32))();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v21, v23);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v23);
      outlined destroy of A?(v22, v23);

    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v33 + 184) + 8))();
  }
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  id v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  _QWORD *v12;
  id v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  unsigned int (*v45)(void *, uint64_t, uint64_t);

  v41 = *(void **)(v0 + 456);
  v40 = *(void (**)(uint64_t, uint64_t))(v0 + 440);
  v38 = *(_QWORD *)(v0 + 368);
  v39 = *(_QWORD *)(v0 + 352);
  v37 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 184) = v0;
  v1 = v41;
  *(_QWORD *)(v0 + 240) = v41;
  *(_QWORD *)(v0 + 152) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 160) = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occured during retry at index: ", 0x25uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v36 = *(_QWORD *)(v37 + 32);
  swift_endAccess();
  *(_QWORD *)(v0 + 248) = v36;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", maxRetry: ", 0xCuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v37 + 16);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ExponentialRetryScheduler.swift", 0x2CuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v38);
  gpklog(_:type:fileID:line:subsystem:)();
  v40(v38, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v41;
  v7 = *(void **)(v0 + 208);
  *(_QWORD *)(v0 + 208) = v41;

  v44 = *(void **)(v0 + 400);
  v42 = *(_QWORD *)(v0 + 336);
  v43 = *(_QWORD *)(v0 + 320);
  outlined init with copy of A?(*(const void **)(v0 + 408), v44, v43, *(_QWORD *)(v0 + 376));
  v45 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v42 + 48);
  v34 = v45(v44, 1, v43) == 1;
  outlined destroy of A?(*(_QWORD *)(v35 + 400), *(_QWORD *)(v35 + 320));
  if (v34 && (*(_BYTE *)(v35 + 467) & 1) != 0 && ExponentialRetryScheduler.canRetry.getter())
  {
    v33 = *(void (**)(uint64_t, uint64_t))(v35 + 440);
    v31 = *(_QWORD *)(v35 + 368);
    v32 = *(_QWORD *)(v35 + 352);
    v30 = *(_QWORD *)(v35 + 328);
    swift_beginAccess();
    v29 = *(_QWORD *)(v30 + 32);
    swift_endAccess();
    *(_QWORD *)(v35 + 216) = v29;
    *(_QWORD *)(v35 + 136) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v35 + 144) = v8;
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Scheduling to retry the task. retryIndex: ", 0x2AuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v35 + 224) = v29;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", maxRetry: ", 0xCuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v10);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v35 + 232) = *(_QWORD *)(v30 + 16);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ExponentialRetryScheduler.swift", 0x2CuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v31);
    gpklog(_:type:fileID:line:subsystem:)();
    v33(v31, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v35 + 448) = v12;
    *v12 = *(_QWORD *)(v35 + 184);
    v12[1] = ExponentialRetryScheduler.schedule<A>(_:shouldRetry:);
    return ExponentialRetryScheduler._schedule<A>(_:)(*(_QWORD *)(v35 + 392), *(_QWORD *)(v35 + 288), *(_QWORD *)(v35 + 296));
  }
  else
  {
    v28 = *(void **)(v35 + 384);
    v27 = *(_QWORD *)(v35 + 320);
    outlined init with copy of A?(*(const void **)(v35 + 408), v28, v27, *(_QWORD *)(v35 + 376));
    if (v45(v28, 1, v27) == 1)
    {
      v16 = *(void (**)(uint64_t, uint64_t))(v35 + 440);
      v18 = *(id *)(v35 + 424);
      v19 = *(_QWORD *)(v35 + 408);
      v20 = *(_QWORD *)(v35 + 368);
      v15 = *(_QWORD *)(v35 + 352);
      v17 = *(_QWORD *)(v35 + 320);
      outlined destroy of A?(*(_QWORD *)(v35 + 384), v17);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("All retry failed", 0x10uLL, 1);
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ExponentialRetryScheduler.swift", 0x2CuLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
      gpklog(_:type:fileID:line:subsystem:)();
      v16(v20, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = *(id *)(v35 + 208);
      swift_willThrow();
      outlined destroy of A?(v19, v17);

    }
    else
    {
      v26 = *(id *)(v35 + 424);
      v24 = *(_QWORD *)(v35 + 408);
      v23 = *(_QWORD *)(v35 + 344);
      v22 = *(_QWORD *)(v35 + 336);
      v25 = *(_QWORD *)(v35 + 320);
      v21 = *(_QWORD *)(v35 + 280);
      (*(void (**)(void))(v22 + 32))();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v23, v25);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v25);
      outlined destroy of A?(v24, v25);

    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v35 + 184) + 8))();
  }
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed Error) -> (@unowned Bool))?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

void *outlined init with copy of A?(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a2, a1, a3);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
  }
  return a2;
}

uint64_t outlined destroy of A?(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  return a1;
}

{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  return a1;
}

uint64_t ExponentialRetryScheduler._schedule<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[21] = v3;
  v4[20] = a3;
  v4[19] = a2;
  v4[18] = a1;
  v4[12] = v4;
  v4[8] = 0;
  v4[9] = 0;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v4[16] = 0;
  v5 = type metadata accessor for LogSubsystem();
  v4[22] = v5;
  v4[23] = *(_QWORD *)(v5 - 8);
  v4[24] = swift_task_alloc();
  v4[8] = a2;
  v4[9] = a3;
  v4[13] = v3;
  return swift_task_switch();
}

uint64_t ExponentialRetryScheduler._schedule<A>(_:)()
{
  uint64_t v0;
  Swift::Double v1;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  long double *v10;
  uint64_t v11;
  uint64_t v12;
  long double v13;
  long double v14;
  double v15;

  v11 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 96) = v0;
  v13 = *(double *)(v11 + 24);
  swift_beginAccess();
  v12 = *(_QWORD *)(v11 + 32);
  swift_endAccess();
  v14 = pow(v13, (double)v12);
  *(long double *)(v0 + 112) = v14;
  v1 = Double.init(_:)(v14);
  *(Swift::Double *)(v0 + 120) = v1;
  v15 = 1000000000.0 * v1;
  if (((COERCE_UNSIGNED_INT64(1000000000.0 * v1) >> 52) & 0x7FF) == 0x7FF || v15 <= -1.0 || v15 >= 1.84467441e19)
    return _assertionFailure(_:_:file:line:flags:)();
  v8 = *((_QWORD *)v10 + 24);
  v7 = *((_QWORD *)v10 + 23);
  v9 = *((_QWORD *)v10 + 22);
  *((_QWORD *)v10 + 16) = (unint64_t)v15;
  *((_QWORD *)v10 + 10) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *((_QWORD *)v10 + 11) = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Scheduled after ", 0x10uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  v10[17] = v14;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" second(s)", 0xAuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ExponentialRetryScheduler.swift", 0x2CuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v8);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)swift_task_alloc();
  *((_QWORD *)v10 + 25) = v6;
  *v6 = *((_QWORD *)v10 + 12);
  v6[1] = ExponentialRetryScheduler._schedule<A>(_:);
  return static Task<>.sleep(nanoseconds:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  _QWORD *v4;
  int *v5;
  uint64_t (*v6)(_QWORD);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 96) = v0;
  result = swift_beginAccess();
  v2 = *(_QWORD *)(v8 + 32);
  v9 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = (int *)v7[19];
    *(_QWORD *)(v8 + 32) = v9;
    swift_endAccess();
    v6 = (uint64_t (*)(_QWORD))((char *)v5 + *v5);
    v4 = (_QWORD *)swift_task_alloc();
    v7[26] = v4;
    *v4 = v7[12];
    v4[1] = ExponentialRetryScheduler._schedule<A>(_:);
    return v6(v7[18]);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = *v1;
  *(_QWORD *)(v2 + 216) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

_QWORD *ExponentialRetryScheduler._schedule<A>(_:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = *v1;
  v4 = (_QWORD *)(v2 + 96);
  swift_task_dealloc();
  if (!v0)
    return (_QWORD *)swift_task_switch();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

void *outlined assign with take of A?(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  unsigned int (*v10)(void);

  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(unsigned int (**)(void))(v9 + 48);
  if (v10())
  {
    if (((unsigned int (*)(const void *, uint64_t, uint64_t))v10)(a1, 1, a3))
    {
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(a2, a1, a3);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
    }
  }
  else if (((unsigned int (*)(const void *, uint64_t, uint64_t))v10)(a1, 1, a3))
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(a2, a3);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a2, a1, a3);
  }
  return a2;
}

uint64_t ExponentialRetryScheduler.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ExponentialRetryScheduler.__deallocating_deinit()
{
  ExponentialRetryScheduler.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for RetryScheduler.schedule<A>(_:) in conformance ExponentialRetryScheduler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  *(_QWORD *)(v6 + 16) = v6;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = *(_QWORD *)(v6 + 16);
  v7[1] = protocol witness for RetryScheduler.schedule<A>(_:) in conformance ExponentialRetryScheduler;
  return RetryScheduler.schedule<A>(_:)(a1, a2, a3, a5, a4, a6);
}

_QWORD *protocol witness for RetryScheduler.schedule<A>(_:) in conformance ExponentialRetryScheduler()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for RetryScheduler.schedule<A>(_:shouldRetry:) in conformance ExponentialRetryScheduler(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;

  *(_QWORD *)(v6 + 16) = v6;
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = *(_QWORD *)(v6 + 16);
  v7[1] = protocol witness for RetryScheduler.schedule<A>(_:shouldRetry:) in conformance ExponentialRetryScheduler;
  return ExponentialRetryScheduler.schedule<A>(_:shouldRetry:)(a1, a2, a3, a4, a5, a6);
}

_QWORD *protocol witness for RetryScheduler.schedule<A>(_:shouldRetry:) in conformance ExponentialRetryScheduler()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t type metadata accessor for ExponentialRetryScheduler()
{
  return objc_opt_self();
}

uint64_t method lookup function for ExponentialRetryScheduler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ExponentialRetryScheduler.__allocating_init(maxRetries:power:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NetworkingSession.dataTask(request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + **(int **)(a3 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of NetworkingSession.dataTask(request:);
  return v8(a1, a2, a3);
}

{
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  *(_QWORD *)(*v3 + 16) = *v3;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 16) + 8))(a1, a2, a3);
}

uint64_t dispatch thunk of IdentityServiceEventDelegate.didReceiveMessage(_:fromID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + **(int **)(a5 + 8));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = dispatch thunk of IdentityServiceEventDelegate.didReceiveMessage(_:fromID:);
  return v12(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of IdentityServiceEventDelegate.didReceiveMessage(_:fromID:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of IdentityServiceProviding.eventDelegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of IdentityServiceProviding.eventDelegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of IdentityServiceProviding.eventDelegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of IdentityServiceProviding.setup(queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of IdentityServiceProviding.sendMessage(_:to:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v6 + 16) = v6;
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 + 40)
                                                                                     + **(int **)(a6 + 40));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = *(_QWORD *)(v6 + 16);
  v7[1] = dispatch thunk of IdentityServiceProviding.sendMessage(_:to:priority:);
  return v14(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of IdentityServiceProviding.sendMessage(_:to:priority:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 16) = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 8))(a1, a2);
}

uint64_t AccountNotificationService.accountStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AccountStore(v1, a1);
}

uint64_t outlined init with copy of AccountStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t AccountNotificationService.userStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserStore(v1 + 40, a1);
}

uint64_t outlined init with copy of UserStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t AccountNotificationService.groupBlobStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CachedGroupStore(v1 + 80, a1);
}

uint64_t outlined init with copy of CachedGroupStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t AccountNotificationService.signOut()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[31] = v0;
  v1[29] = v1;
  v1[30] = 0;
  v2 = type metadata accessor for InternalErrorCode();
  v1[32] = v2;
  v1[33] = *(_QWORD *)(v2 - 8);
  v1[34] = swift_task_alloc();
  v3 = type metadata accessor for LogSubsystem();
  v1[35] = v3;
  v1[36] = *(_QWORD *)(v3 - 8);
  v1[37] = swift_task_alloc();
  v1[30] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v20 = v0[37];
  v19 = v0[36];
  v21 = v0[35];
  v23 = v0[31];
  v0[29] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Handling signout", 0x10uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/AccountNotificationService.swift", 0x2DuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
  gpklog(_:type:fileID:line:subsystem:)();
  v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v22(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of AccountStore(v23, (uint64_t)(v0 + 7));
  v25 = v0[10];
  v24 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v25);
  (*(void (**)(uint64_t))(v24 + 8))(v25);
  if (v0[15])
  {
    v13 = v18[37];
    v14 = v18[35];
    v17 = v18[34];
    v15 = v18[33];
    v16 = v18[32];
    outlined init with take of Account(v18 + 12, v18 + 2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v18 + 7));
    v18[27] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v18[28] = v1;
    v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("User's primary account", 0x16uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v2);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Account);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" still existing. User hasn't signout from the device so ignoring the request", 0x4CuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/AccountNotificationService.swift", 0x2DuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
    gpklog(_:type:fileID:line:subsystem:)();
    v22(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x24BE3DE90], v16);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v18 + 2));
  }
  else
  {
    v10 = v18[31];
    outlined destroy of Account?((uint64_t)(v18 + 12));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v18 + 7));
    outlined init with copy of CachedGroupStore(v10 + 80, (uint64_t)(v18 + 17));
    v12 = v18[20];
    v11 = v18[21];
    __swift_project_boxed_opaque_existential_1(v18 + 17, v12);
    (*(void (**)(uint64_t))(v11 + 24))(v12);
    v7 = v18[31];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v18 + 17));
    outlined init with copy of UserStore(v7 + 40, (uint64_t)(v18 + 22));
    v9 = v18[25];
    v8 = v18[26];
    __swift_project_boxed_opaque_existential_1(v18 + 22, v9);
    (*(void (**)(uint64_t))(v8 + 88))(v9);
    v6 = v18[37];
    v5 = v18[35];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v18 + 22));
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("All stores reset successfully", 0x1DuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/AccountNotificationService.swift", 0x2DuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
    gpklog(_:type:fileID:line:subsystem:)();
    v22(v6, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v18[29] + 8))();
}

uint64_t outlined destroy of Account?(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

void *outlined init with take of Account(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *AccountNotificationService.init(accountStore:userStore:groupBlobStore:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, uint64_t a4@<X8>)
{
  outlined init with take of AccountStore(a1, (void *)a4);
  outlined init with take of UserStore(a2, (void *)(a4 + 40));
  return outlined init with take of CachedGroupStore(a3, (void *)(a4 + 80));
}

void *outlined init with take of AccountStore(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of UserStore(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of CachedGroupStore(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t initializeBufferWithCopyOfBuffer for AccountNotificationService(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for AccountNotificationService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 80);
}

_QWORD *initializeWithCopy for AccountNotificationService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v4 = a2[13];
  a1[13] = v4;
  a1[14] = a2[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  return a1;
}

uint64_t assignWithCopy for AccountNotificationService(uint64_t a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, a2 + 5);
  __swift_assign_boxed_opaque_existential_1(a1 + 80, a2 + 10);
  return a1;
}

uint64_t __swift_assign_boxed_opaque_existential_1(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE v10[24];

  v8 = (_QWORD *)result;
  if ((uint64_t *)result != a2)
  {
    v6 = *(_QWORD *)(result + 24);
    v7 = a2[3];
    if (v6 == v7)
    {
      if ((*(_DWORD *)(*(_QWORD *)(v6 - 8) + 80) & 0x20000) != 0)
      {
        v5 = *a2;
        swift_retain();
        result = swift_release();
        *v8 = v5;
      }
      else
      {
        return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(v6 - 8) + 24))(result, a2);
      }
    }
    else
    {
      *(_QWORD *)(result + 24) = v7;
      *(_QWORD *)(result + 32) = a2[4];
      v4 = (*(_DWORD *)(*(_QWORD *)(v7 - 8) + 80) & 0x20000) == 0;
      if ((*(_DWORD *)(*(_QWORD *)(v6 - 8) + 80) & 0x20000) != 0)
      {
        if ((*(_DWORD *)(*(_QWORD *)(v7 - 8) + 80) & 0x20000) != 0)
        {
          v2 = *a2;
          swift_retain();
          *v8 = v2;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(v7 - 8) + 16))(result, a2);
        }
        return swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v10, result);
        if (v4)
        {
          (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v7 - 8) + 16))(v8, a2);
        }
        else
        {
          v3 = *a2;
          swift_retain();
          *v8 = v3;
        }
        return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)(v6 - 8) + 8))(v10);
      }
    }
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy120_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x78uLL);
}

uint64_t assignWithTake for AccountNotificationService(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  memcpy((void *)a1, (const void *)a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountNotificationService(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 120))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountNotificationService(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 112) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 120) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 120) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountNotificationService()
{
  return &type metadata for AccountNotificationService;
}

uint64_t InitRegisterUserKeyInfoRequest.Response.gpkUserId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t static InitRegisterUserKeyInfoRequest.Response.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t InitRegisterUserKeyInfoRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL InitRegisterUserKeyInfoRequest.Response.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t InitRegisterUserKeyInfoRequest.Response.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t InitRegisterUserKeyInfoRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitRegisterUserKeyInfoRequest.Response.CodingKeys, &type metadata for InitRegisterUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitRegisterUserKeyInfoRequest.Response.CodingKeys, &type metadata for InitRegisterUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitRegisterUserKeyInfoRequest.Response.CodingKeys, &type metadata for InitRegisterUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitRegisterUserKeyInfoRequest.Response.CodingKeys, &type metadata for InitRegisterUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitRegisterUserKeyInfoRequest.Response.CodingKeys, &type metadata for InitRegisterUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t InitRegisterUserKeyInfoRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t InitRegisterUserKeyInfoRequest.Response.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return static InitRegisterUserKeyInfoRequest.Response.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return InitRegisterUserKeyInfoRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return InitRegisterUserKeyInfoRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return InitRegisterUserKeyInfoRequest.Response.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = InitRegisterUserKeyInfoRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return InitRegisterUserKeyInfoRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitRegisterUserKeyInfoRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InitRegisterUserKeyInfoRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[2];
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = a1;
  v22 = 0;
  v21 = 0;
  v16 = type metadata accessor for GPKUserID();
  v13 = *(_QWORD *)(v16 - 8);
  v6 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v5 - v6;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InitRegisterUserKeyInfoRequest.Response.CodingKeys>);
  v8 = *(_QWORD *)(v15 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v5 - v9;
  v22 = v2;
  v21 = v1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v14, v16);
  lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v3 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v19 = v3;
  v20 = v3;
  if (v3)
    v5[1] = v20;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v15);
}

unint64_t lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID;
  if (!lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID)
  {
    v0 = type metadata accessor for GPKUserID();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E6C0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID;
  if (!lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID)
  {
    v0 = type metadata accessor for GPKUserID();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E6D8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID;
  if (!lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID)
  {
    v0 = type metadata accessor for GPKUserID();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E6C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID;
  if (!lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID)
  {
    v0 = type metadata accessor for GPKUserID();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E6E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID;
  if (!lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID)
  {
    v0 = type metadata accessor for GPKUserID();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E6D0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKUserID and conformance GPKUserID);
    return v1;
  }
  return v3;
}

uint64_t InitRegisterUserKeyInfoRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v11 = a2;
  v20 = a1;
  v29 = 0;
  v16 = 0;
  v12 = type metadata accessor for GPKUserID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v6 - v14;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InitRegisterUserKeyInfoRequest.Response.CodingKeys>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v23 = (char *)v6 - v19;
  v21 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for InitRegisterUserKeyInfoRequest.Response() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v20);
  v22 = (uint64_t)v6 - v21;
  v29 = v2;
  v25 = v2[3];
  v26 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v25);
  lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys();
  v3 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v27 = v3;
  v28 = v3;
  if (v3)
  {
    v8 = v28;
  }
  else
  {
    lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v4 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v4;
    v10 = v4;
    if (!v4)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22, v15, v12);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
      outlined init with copy of InitRegisterUserKeyInfoRequest.Response(v22, v11);
      __swift_destroy_boxed_opaque_existential_1(v20);
      return outlined destroy of InitRegisterUserKeyInfoRequest.Response(v22);
    }
    v7 = v10;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v20);
}

uint64_t type metadata accessor for InitRegisterUserKeyInfoRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for InitRegisterUserKeyInfoRequest.Response;
  if (!type metadata singleton initialization cache for InitRegisterUserKeyInfoRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t outlined init with copy of InitRegisterUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of InitRegisterUserKeyInfoRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t InitRegisterUserKeyInfoRequest.Response.init(gpkUserId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InitRegisterUserKeyInfoRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InitRegisterUserKeyInfoRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InitRegisterUserKeyInfoRequest.Response(uint64_t a1)
{
  return InitRegisterUserKeyInfoRequest.Response.encode(to:)(a1);
}

void variable initialization expression of InitRegisterUserKeyInfoRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t InitRegisterUserKeyInfoRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t InitRegisterUserKeyInfoRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*InitRegisterUserKeyInfoRequest.bodyContent.modify())()
{
  return InitRegisterUserKeyInfoRequest.bodyContent.modify;
}

double InitRegisterUserKeyInfoRequest.init(keyProtocolVersion:)@<D0>(int a1@<W0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;

  v14 = 0;
  v15 = a1;
  v16 = 0uLL;
  v17 = 0uLL;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  v3 = HTTPBodyKey.keyNameSpace.unsafeMutableAddressor();
  outlined init with copy of String(v3, (_QWORD *)v9);
  v4 = HTTPBodyValue.keyNameSpaceValue.unsafeMutableAddressor();
  v7 = *(_QWORD *)v4;
  v8 = *((_QWORD *)v4 + 1);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v9 + 40) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = v8;
  v5 = HTTPBodyKey.keyProtocolVersion.unsafeMutableAddressor();
  outlined init with copy of String(v5, (_QWORD *)(v9 + 48));
  *(_QWORD *)(v9 + 88) = MEMORY[0x24BEE44F0];
  *(_DWORD *)(v9 + 64) = a1;
  _finalizeUninitializedArray<A>(_:)();
  v14 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(_QWORD *)&v12 = v14;
  outlined assign with take of Any?(&v12, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  *a2 = v16;
  result = *(double *)&v17;
  a2[1] = v17;
  return result;
}

uint64_t InitRegisterUserKeyInfoRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initRegisterUserKeyInfo.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in InitRegisterUserKeyInfoRequest()
{
  return lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest.Response and conformance InitRegisterUserKeyInfoRequest.Response();
}

unint64_t lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest.Response and conformance InitRegisterUserKeyInfoRequest.Response()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response and conformance InitRegisterUserKeyInfoRequest.Response;
  if (!lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response and conformance InitRegisterUserKeyInfoRequest.Response)
  {
    inited = type metadata accessor for InitRegisterUserKeyInfoRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for InitRegisterUserKeyInfoRequest.Response, inited);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InitRegisterUserKeyInfoRequest.Response and conformance InitRegisterUserKeyInfoRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance InitRegisterUserKeyInfoRequest()
{
  return InitRegisterUserKeyInfoRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance InitRegisterUserKeyInfoRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance InitRegisterUserKeyInfoRequest@<X0>(uint64_t a1@<X8>)
{
  return InitRegisterUserKeyInfoRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance InitRegisterUserKeyInfoRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for InitRegisterUserKeyInfoRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for InitRegisterUserKeyInfoRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for InitRegisterUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for InitRegisterUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for InitRegisterUserKeyInfoRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InitRegisterUserKeyInfoRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InitRegisterUserKeyInfoRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitRegisterUserKeyInfoRequest()
{
  return &type metadata for InitRegisterUserKeyInfoRequest;
}

uint64_t initializeBufferWithCopyOfBuffer for InitRegisterUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  return (**(uint64_t (***)(uint64_t, uint64_t))(v2 - 8))(a1, a2);
}

uint64_t destroy for InitRegisterUserKeyInfoRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

uint64_t initializeWithCopy for InitRegisterUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  return a1;
}

uint64_t assignWithCopy for InitRegisterUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  return a1;
}

uint64_t initializeWithTake for InitRegisterUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  return a1;
}

uint64_t assignWithTake for InitRegisterUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitRegisterUserKeyInfoRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D312880(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for InitRegisterUserKeyInfoRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3128DC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for InitRegisterUserKeyInfoRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for InitRegisterUserKeyInfoRequest.Response.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for InitRegisterUserKeyInfoRequest.Response.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return &type metadata for InitRegisterUserKeyInfoRequest.Response.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in InitRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitRegisterUserKeyInfoRequest.Response.CodingKeys and conformance InitRegisterUserKeyInfoRequest.Response.CodingKeys();
}

BOOL static ClientPriority.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  return ((*a1 & 1) != 0) == (unint64_t)((*a2 & 1) != 0);
}

uint64_t ClientPriority.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t ClientPriority.hashValue.getter()
{
  lazy protocol witness table accessor for type ClientPriority and conformance ClientPriority();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type ClientPriority and conformance ClientPriority()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ClientPriority and conformance ClientPriority;
  if (!lazy protocol witness table cache variable for type ClientPriority and conformance ClientPriority)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for ClientPriority, &type metadata for ClientPriority);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ClientPriority and conformance ClientPriority);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ClientPriority and conformance ClientPriority;
  if (!lazy protocol witness table cache variable for type ClientPriority and conformance ClientPriority)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for ClientPriority, &type metadata for ClientPriority);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ClientPriority and conformance ClientPriority);
    return v0;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ClientPriority(_BYTE *a1, _BYTE *a2)
{
  return static ClientPriority.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ClientPriority()
{
  return ClientPriority.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ClientPriority()
{
  return ClientPriority.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ClientPriority(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

GroupKitCore::EntitlementKey_optional __swiftcall EntitlementKey.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  GroupKitCore::EntitlementKey_optional result;
  char *v5;
  Swift::Int v7;
  char v8;

  v5 = v1;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "com.apple.private.groupkit.allgroups";
  *(_QWORD *)(v3 + 8) = 36;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "com.apple.private.groupkit.member.profile";
  *(_QWORD *)(v3 + 32) = 41;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "com.apple.private.groupkit.keys";
  *(_QWORD *)(v3 + 56) = 31;
  *(_BYTE *)(v3 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, rawValue);
  swift_bridgeObjectRelease();
  if (v7)
  {
    if (v7 == 1)
    {
      v8 = 1;
    }
    else
    {
      if (v7 != 2)
      {
        result.value = swift_bridgeObjectRelease();
        *v5 = 3;
        return result;
      }
      v8 = 2;
    }
  }
  else
  {
    v8 = 0;
  }
  *v5 = v8;
  return (GroupKitCore::EntitlementKey_optional)swift_bridgeObjectRelease();
}

uint64_t EntitlementKey.rawValue.getter()
{
  _BYTE *v0;

  if (!*v0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.private.groupkit.allgroups", 0x24uLL, 1)._countAndFlagsBits;
  if (*v0 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.private.groupkit.member.profile", 0x29uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.private.groupkit.keys", 0x1FuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EntitlementKey()
{
  lazy protocol witness table accessor for type EntitlementKey and conformance EntitlementKey();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type EntitlementKey and conformance EntitlementKey()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type EntitlementKey and conformance EntitlementKey;
  if (!lazy protocol witness table cache variable for type EntitlementKey and conformance EntitlementKey)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for EntitlementKey, &type metadata for EntitlementKey);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type EntitlementKey and conformance EntitlementKey);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type EntitlementKey and conformance EntitlementKey;
  if (!lazy protocol witness table cache variable for type EntitlementKey and conformance EntitlementKey)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for EntitlementKey, &type metadata for EntitlementKey);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type EntitlementKey and conformance EntitlementKey);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance EntitlementKey()
{
  lazy protocol witness table accessor for type EntitlementKey and conformance EntitlementKey();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EntitlementKey()
{
  lazy protocol witness table accessor for type EntitlementKey and conformance EntitlementKey();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance EntitlementKey()
{
  lazy protocol witness table accessor for type EntitlementKey and conformance EntitlementKey();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKitCore::EntitlementKey_optional protocol witness for RawRepresentable.init(rawValue:) in conformance EntitlementKey(Swift::String *a1)
{
  return EntitlementKey.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance EntitlementKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = EntitlementKey.rawValue.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t Client.isOwner.getter(uint64_t a1, uint64_t a2)
{
  return Client.isOwner.getter(a1, a2) & 1;
}

{
  uint64_t v2;
  Swift::String *v3;
  Swift::String *v5;
  char v6;
  char v7;

  (*(void (**)(void))(a2 + 8))();
  if (v2)
  {
    _allocateUninitializedArray<A>(_:)();
    v5 = v3;
    *v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd", 0x13uLL, 1);
    v5[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkittester", 0x18uLL, 1);
    v5[2] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.gpktool", 0x11uLL, 1);
    _finalizeUninitializedArray<A>(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    Set.init<A>(_:)();
    String.lowercased()();
    v6 = Set.contains(_:)();
    outlined destroy of String();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

unint64_t base witness table accessor for Equatable in ClientPriority()
{
  return lazy protocol witness table accessor for type ClientPriority and conformance ClientPriority();
}

unint64_t base witness table accessor for Equatable in EntitlementKey()
{
  return lazy protocol witness table accessor for type EntitlementKey and conformance EntitlementKey();
}

uint64_t getEnumTagSinglePayload for ClientPriority(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for ClientPriority(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for ClientPriority(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for ClientPriority(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ClientPriority()
{
  return &type metadata for ClientPriority;
}

uint64_t getEnumTagSinglePayload for EntitlementKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for EntitlementKey(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for EntitlementKey(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for EntitlementKey(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for EntitlementKey()
{
  return &type metadata for EntitlementKey;
}

uint64_t dispatch thunk of Client.bundleIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Client.priority.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Client.isOwner.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))() & 1;
}

uint64_t dispatch thunk of Client.hasEntitlement(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))() & 1;
}

uint64_t InitFetchSeedHistoryRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t *InitFetchSeedHistoryRequest.Response.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t SeedHistory;

  SeedHistory = type metadata accessor for InitFetchSeedHistoryRequest.Response();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(SeedHistory + 20)), a1);
}

uint64_t type metadata accessor for InitFetchSeedHistoryRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for InitFetchSeedHistoryRequest.Response;
  if (!type metadata singleton initialization cache for InitFetchSeedHistoryRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t *outlined init with copy of Nonce(uint64_t *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  outlined copy of Data._Representation(*a1, v4);
  result = a2;
  *a2 = v3;
  a2[1] = v4;
  return result;
}

BOOL static InitFetchSeedHistoryRequest.Response.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t InitFetchSeedHistoryRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t InitFetchSeedHistoryRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t InitFetchSeedHistoryRequest.Response.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t InitFetchSeedHistoryRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchSeedHistoryRequest.Response.CodingKeys, &type metadata for InitFetchSeedHistoryRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchSeedHistoryRequest.Response.CodingKeys, &type metadata for InitFetchSeedHistoryRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchSeedHistoryRequest.Response.CodingKeys, &type metadata for InitFetchSeedHistoryRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchSeedHistoryRequest.Response.CodingKeys, &type metadata for InitFetchSeedHistoryRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchSeedHistoryRequest.Response.CodingKeys, &type metadata for InitFetchSeedHistoryRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t InitFetchSeedHistoryRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t InitFetchSeedHistoryRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InitFetchSeedHistoryRequest.Response.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static InitFetchSeedHistoryRequest.Response.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance InitFetchSeedHistoryRequest.Response.CodingKeys()
{
  return InitFetchSeedHistoryRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InitFetchSeedHistoryRequest.Response.CodingKeys()
{
  return InitFetchSeedHistoryRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InitFetchSeedHistoryRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InitFetchSeedHistoryRequest.Response.CodingKeys()
{
  _BYTE *v0;

  return InitFetchSeedHistoryRequest.Response.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InitFetchSeedHistoryRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitFetchSeedHistoryRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InitFetchSeedHistoryRequest.Response.CodingKeys()
{
  return InitFetchSeedHistoryRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance InitFetchSeedHistoryRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitFetchSeedHistoryRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InitFetchSeedHistoryRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InitFetchSeedHistoryRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InitFetchSeedHistoryRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD v31[2];
  char v32;
  uint64_t v33;
  _QWORD *v34;

  v15 = a1;
  v34 = 0;
  v33 = 0;
  v25 = type metadata accessor for GPKGroupID();
  v21 = *(_QWORD *)(v25 - 8);
  v14 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v7 - v14;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InitFetchSeedHistoryRequest.Response.CodingKeys>);
  v16 = *(_QWORD *)(v24 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v7 - v17;
  v34 = v2;
  v33 = v1;
  v18 = v2[3];
  v19 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v18);
  lazy protocol witness table accessor for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v27, v22, v25);
  v23 = &v32;
  v32 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v28 = v3;
  v29 = v3;
  if (v3)
  {
    v7[2] = v29;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    v4 = (uint64_t *)(v22 + *(int *)(type metadata accessor for InitFetchSeedHistoryRequest.Response() + 20));
    v8 = *v4;
    v9 = v4[1];
    outlined copy of Data._Representation(v8, v9);
    v11 = v31;
    v31[0] = v8;
    v31[1] = v9;
    v10 = &v30;
    v30 = 1;
    lazy protocol witness table accessor for type Nonce and conformance Nonce();
    v5 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = v5;
    v13 = v5;
    if (v5)
      v7[1] = v13;
    outlined destroy of Nonce((uint64_t)v31);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
}

unint64_t lazy protocol witness table accessor for type Nonce and conformance Nonce()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Nonce and conformance Nonce;
  if (!lazy protocol witness table cache variable for type Nonce and conformance Nonce)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for Nonce, &type metadata for Nonce);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Nonce and conformance Nonce);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Nonce and conformance Nonce;
  if (!lazy protocol witness table cache variable for type Nonce and conformance Nonce)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for Nonce, &type metadata for Nonce);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Nonce and conformance Nonce);
    return v0;
  }
  return v2;
}

uint64_t InitFetchSeedHistoryRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t SeedHistory;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  char v47;

  v23 = a2;
  v32 = a1;
  v46 = 0;
  v28 = 0;
  v24 = type metadata accessor for GPKGroupID();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v12 - v26;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InitFetchSeedHistoryRequest.Response.CodingKeys>);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v36 = (char *)&v12 - v31;
  SeedHistory = type metadata accessor for InitFetchSeedHistoryRequest.Response();
  v34 = (*(_QWORD *)(*(_QWORD *)(SeedHistory - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v32);
  v35 = (uint64_t)&v12 - v34;
  v47 = 0;
  v46 = v2;
  v38 = v2[3];
  v39 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v38);
  lazy protocol witness table accessor for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys();
  v3 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v40 = v3;
  v41 = v3;
  if (v3)
  {
    v15 = v41;
  }
  else
  {
    v20 = &v45;
    v45 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v4;
    v22 = v4;
    if (v4)
    {
      v14 = v22;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v14;
    }
    else
    {
      v16 = 1;
      v47 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v35, v27, v24);
      v17 = &v42;
      v42 = v16;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v5 = v21;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v18 = v5;
      v19 = v5;
      if (!v5)
      {
        v6 = v29;
        v7 = v36;
        v8 = v30;
        v9 = v44;
        v10 = (_QWORD *)(v35 + *(int *)(SeedHistory + 20));
        v47 = 3;
        *v10 = v43;
        v10[1] = v9;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v6);
        outlined init with copy of InitFetchSeedHistoryRequest.Response(v35, v23);
        __swift_destroy_boxed_opaque_existential_1(v32);
        return outlined destroy of InitFetchSeedHistoryRequest.Response(v35);
      }
      v13 = v19;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v13;
    }
  }
  v12 = v15;
  result = __swift_destroy_boxed_opaque_existential_1(v32);
  if ((v47 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v35, v24);
  return result;
}

uint64_t outlined init with copy of InitFetchSeedHistoryRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(type metadata accessor for InitFetchSeedHistoryRequest.Response() + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  outlined copy of Data._Representation(v7, v8);
  result = a2;
  v4 = (uint64_t *)(a2 + v6);
  *v4 = v7;
  v4[1] = v8;
  return result;
}

uint64_t outlined destroy of InitFetchSeedHistoryRequest.Response(uint64_t a1)
{
  uint64_t v1;
  uint64_t SeedHistory;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  SeedHistory = type metadata accessor for InitFetchSeedHistoryRequest.Response();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(SeedHistory + 20)), *(_QWORD *)(a1 + *(int *)(SeedHistory + 20) + 8));
  return a1;
}

uint64_t InitFetchSeedHistoryRequest.Response.init(groupId:nonce:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  v8 = *a2;
  v9 = a2[1];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a3, a1);
  result = type metadata accessor for InitFetchSeedHistoryRequest.Response();
  v5 = (_QWORD *)(a3 + *(int *)(result + 20));
  *v5 = v8;
  v5[1] = v9;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InitFetchSeedHistoryRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InitFetchSeedHistoryRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InitFetchSeedHistoryRequest.Response(uint64_t a1)
{
  return InitFetchSeedHistoryRequest.Response.encode(to:)(a1);
}

void variable initialization expression of InitFetchSeedHistoryRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t InitFetchSeedHistoryRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t InitFetchSeedHistoryRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*InitFetchSeedHistoryRequest.bodyContent.modify())()
{
  return InitFetchSeedHistoryRequest.bodyContent.modify;
}

uint64_t InitFetchSeedHistoryRequest.init(groupID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  v14 = a1;
  memset(v15, 0, sizeof(v15));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v8 = v2;
  v3 = HTTPBodyKey.groupID.unsafeMutableAddressor();
  outlined init with copy of String(v3, v8);
  v4 = GPKGroupID.hexString.getter();
  v8[5] = MEMORY[0x24BEE0D00];
  v8[2] = v4;
  v8[3] = v5;
  _finalizeUninitializedArray<A>(_:)();
  v13 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(_QWORD *)&v11 = v13;
  outlined assign with take of Any?(&v11, (uint64_t)v15);
  swift_bridgeObjectRelease();
  outlined init with copy of InitFetchSeedHistoryRequest((uint64_t)v15, a2);
  v6 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1);
  return outlined destroy of InitFetchSeedHistoryRequest((uint64_t)v15);
}

uint64_t outlined init with copy of InitFetchSeedHistoryRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t outlined destroy of InitFetchSeedHistoryRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t InitFetchSeedHistoryRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initFetchSeedHistory.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in InitFetchSeedHistoryRequest()
{
  return lazy protocol witness table accessor for type InitFetchSeedHistoryRequest.Response and conformance InitFetchSeedHistoryRequest.Response();
}

unint64_t lazy protocol witness table accessor for type InitFetchSeedHistoryRequest.Response and conformance InitFetchSeedHistoryRequest.Response()
{
  uint64_t SeedHistory;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response and conformance InitFetchSeedHistoryRequest.Response;
  if (!lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response and conformance InitFetchSeedHistoryRequest.Response)
  {
    SeedHistory = type metadata accessor for InitFetchSeedHistoryRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchSeedHistoryRequest.Response, SeedHistory);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchSeedHistoryRequest.Response and conformance InitFetchSeedHistoryRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance InitFetchSeedHistoryRequest()
{
  return InitFetchSeedHistoryRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance InitFetchSeedHistoryRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance InitFetchSeedHistoryRequest@<X0>(uint64_t a1@<X8>)
{
  return InitFetchSeedHistoryRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance InitFetchSeedHistoryRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for InitFetchSeedHistoryRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for InitFetchSeedHistoryRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for InitFetchSeedHistoryRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for InitFetchSeedHistoryRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for InitFetchSeedHistoryRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InitFetchSeedHistoryRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InitFetchSeedHistoryRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitFetchSeedHistoryRequest()
{
  return &type metadata for InitFetchSeedHistoryRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for InitFetchSeedHistoryRequest.Response(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v14;

  v14 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v14 & 0x20000) != 0)
  {
    v9 = *a2;
    swift_retain();
    *a1 = v9;
    return *a1 + ((v14 + 16) & ~(unint64_t)v14);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v7 = (_QWORD *)((char *)a1 + *(int *)(a3 + 20));
    v4 = (uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v6 = *v4;
    v8 = v4[1];
    outlined copy of Data._Representation(*v4, v8);
    *v7 = v6;
    v7[1] = v8;
    return (unint64_t)a1;
  }
}

uint64_t destroy for InitFetchSeedHistoryRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for InitFetchSeedHistoryRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a2 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  result = a1;
  v5 = (uint64_t *)(a1 + v8);
  *v5 = v9;
  v5[1] = v10;
  return result;
}

uint64_t assignWithCopy for InitFetchSeedHistoryRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v10 = *(int *)(a3 + 20);
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a2 + v10 + 8);
  outlined copy of Data._Representation(v11, v12);
  v4 = (uint64_t *)(a1 + v10);
  v5 = *(_QWORD *)(a1 + v10);
  v6 = *(_QWORD *)(a1 + v10 + 8);
  *v4 = v11;
  v4[1] = v12;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

__n128 initializeWithTake for InitFetchSeedHistoryRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = *(__n128 *)(a2 + *(int *)(a3 + 20));
  *(__n128 *)(a1 + *(int *)(a3 + 20)) = result;
  return result;
}

uint64_t assignWithTake for InitFetchSeedHistoryRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + *(int *)(a3 + 20));
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitFetchSeedHistoryRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D315F00(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for InitFetchSeedHistoryRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D315FFC(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 12)
  {
    v5 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v5 = 0;
    v5[1] = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for InitFetchSeedHistoryRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for InitFetchSeedHistoryRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for InitFetchSeedHistoryRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for InitFetchSeedHistoryRequest.Response.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for InitFetchSeedHistoryRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InitFetchSeedHistoryRequest.Response.CodingKeys()
{
  return &type metadata for InitFetchSeedHistoryRequest.Response.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in InitFetchSeedHistoryRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in InitFetchSeedHistoryRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in InitFetchSeedHistoryRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitFetchSeedHistoryRequest.Response.CodingKeys and conformance InitFetchSeedHistoryRequest.Response.CodingKeys();
}

uint64_t KeyAlgorithm.init(rawValue:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  Swift::String string;
  Swift::Int v8;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v3 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v4 = "Verification_ECDSA_P256_Encryption_ECDH_P256";
  *(_QWORD *)(v4 + 8) = 44;
  *(_BYTE *)(v4 + 16) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v3, string);
  swift_bridgeObjectRelease();
  if (v8)
  {
    result = swift_bridgeObjectRelease();
    *a3 = 1;
  }
  else
  {
    *a3 = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t KeyAlgorithm.rawValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Verification_ECDSA_P256_Encryption_ECDH_P256", 0x2CuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance KeyAlgorithm()
{
  lazy protocol witness table accessor for type KeyAlgorithm and conformance KeyAlgorithm();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type KeyAlgorithm and conformance KeyAlgorithm()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyAlgorithm and conformance KeyAlgorithm;
  if (!lazy protocol witness table cache variable for type KeyAlgorithm and conformance KeyAlgorithm)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for KeyAlgorithm, &type metadata for KeyAlgorithm);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyAlgorithm and conformance KeyAlgorithm);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type KeyAlgorithm and conformance KeyAlgorithm;
  if (!lazy protocol witness table cache variable for type KeyAlgorithm and conformance KeyAlgorithm)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for KeyAlgorithm, &type metadata for KeyAlgorithm);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type KeyAlgorithm and conformance KeyAlgorithm);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance KeyAlgorithm()
{
  lazy protocol witness table accessor for type KeyAlgorithm and conformance KeyAlgorithm();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance KeyAlgorithm()
{
  lazy protocol witness table accessor for type KeyAlgorithm and conformance KeyAlgorithm();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance KeyAlgorithm()
{
  lazy protocol witness table accessor for type KeyAlgorithm and conformance KeyAlgorithm();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance KeyAlgorithm@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return KeyAlgorithm.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8), a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance KeyAlgorithm@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = KeyAlgorithm.rawValue.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

void variable initialization expression of CryptoInviteEnvelope._invite(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
}

uint64_t CryptoInviteEnvelope._invite.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  outlined init with copy of CryptoInvite?((_QWORD *)(v1 + 16), a1);
  return swift_endAccess();
}

_QWORD *outlined init with copy of CryptoInvite?(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  if (a1[3])
  {
    v2 = a1[3];
    a2[3] = v2;
    a2[4] = a1[4];
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    memcpy(a2, a1, 0x28uLL);
  }
  return a2;
}

uint64_t CryptoInviteEnvelope._invite.setter(_QWORD *a1)
{
  uint64_t v1;
  _QWORD v4[7];

  v4[5] = 0;
  v4[6] = a1;
  outlined init with copy of CryptoInvite?(a1, v4);
  swift_beginAccess();
  outlined assign with take of CryptoInvite?(v4, (_QWORD *)(v1 + 16));
  swift_endAccess();
  return outlined destroy of CryptoInvite?((uint64_t)a1);
}

_QWORD *outlined assign with take of CryptoInvite?(const void *a1, _QWORD *a2)
{
  if (a2[3])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    memcpy(a2, a1, 0x28uLL);
  }
  else
  {
    memcpy(a2, a1, 0x28uLL);
  }
  return a2;
}

uint64_t outlined destroy of CryptoInvite?(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t one-time initialization function for empty()
{
  uint64_t result;

  type metadata accessor for CryptoInviteEnvelope();
  result = CryptoInviteEnvelope.__allocating_init()();
  static CryptoInviteEnvelope.empty = result;
  return result;
}

uint64_t type metadata accessor for CryptoInviteEnvelope()
{
  return objc_opt_self();
}

uint64_t CryptoInviteEnvelope.__allocating_init()()
{
  swift_allocObject();
  return CryptoInviteEnvelope.().init()();
}

uint64_t *CryptoInviteEnvelope.empty.unsafeMutableAddressor()
{
  if (one-time initialization token for empty != -1)
    swift_once();
  return &static CryptoInviteEnvelope.empty;
}

uint64_t static CryptoInviteEnvelope.empty.getter()
{
  uint64_t v1;

  v1 = *CryptoInviteEnvelope.empty.unsafeMutableAddressor();
  swift_retain();
  return v1;
}

BOOL CryptoInviteEnvelope.isEmpty.getter()
{
  uint64_t v0;
  BOOL v2;
  _QWORD v3[9];

  v3[8] = 0;
  swift_beginAccess();
  outlined init with copy of CryptoInvite?((_QWORD *)(v0 + 16), v3);
  swift_endAccess();
  v2 = v3[3] == 0;
  outlined destroy of CryptoInvite?((uint64_t)v3);
  return v2;
}

uint64_t CryptoInviteEnvelope.().init()()
{
  _QWORD *v0;
  uint64_t v2;
  _QWORD v3[5];
  _QWORD *v4;

  v4 = v0;
  v0[2] = 0;
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = 0;
  v0[6] = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  outlined assign with take of CryptoInvite?(v3, v0 + 2);
  swift_endAccess();
  return v2;
}

uint64_t CryptoInviteEnvelope.__allocating_init(_:)(uint64_t a1)
{
  swift_allocObject();
  return CryptoInviteEnvelope.init(_:)(a1);
}

uint64_t CryptoInviteEnvelope.init(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v4;
  _BYTE v5[40];
  _QWORD *v6;
  uint64_t v7;

  v7 = a1;
  v6 = v1;
  v1[2] = 0;
  v1[3] = 0;
  v1[4] = 0;
  v1[5] = 0;
  v1[6] = 0;
  outlined init with copy of CryptoInvite(a1, (uint64_t)v5);
  swift_beginAccess();
  outlined assign with take of CryptoInvite?(v5, v1 + 2);
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v4;
}

uint64_t outlined init with copy of CryptoInvite(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

void *CryptoInviteEnvelope.invite.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[9];

  v4[8] = 0;
  swift_beginAccess();
  outlined init with copy of CryptoInvite?((_QWORD *)(v1 + 16), v4);
  swift_endAccess();
  if (!v4[3])
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return outlined init with take of CryptoInvite(v4, a1);
}

void *outlined init with take of CryptoInvite(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t key path getter for CryptoInviteEnvelope.invite : CryptoInviteEnvelope@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[40];
  uint64_t v6;

  v3 = *a1;
  swift_retain();
  v6 = v3;
  CryptoInviteEnvelope.invite.getter(v5);
  outlined init with take of CryptoInvite(v5, a2);
  return swift_release();
}

uint64_t key path setter for CryptoInviteEnvelope.invite : CryptoInviteEnvelope(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with copy of CryptoInvite(a1, (uint64_t)v2);
  swift_retain();
  CryptoInviteEnvelope.invite.setter((uint64_t)v2);
  return swift_release();
}

uint64_t CryptoInviteEnvelope.invite.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[40];
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = a1;
  outlined init with copy of CryptoInvite(a1, (uint64_t)v4);
  swift_beginAccess();
  outlined assign with take of CryptoInvite?(v4, (_QWORD *)(v1 + 16));
  swift_endAccess();
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void (*CryptoInviteEnvelope.invite.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x58uLL);
  *a1 = v4;
  v4[10] = v1;
  CryptoInviteEnvelope.invite.getter(v4);
  return CryptoInviteEnvelope.invite.modify;
}

void CryptoInviteEnvelope.invite.modify(void **a1, char a2)
{
  void *v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of CryptoInvite((uint64_t)v2, (uint64_t)v2 + 40);
    CryptoInviteEnvelope.invite.setter((uint64_t)v2 + 40);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    CryptoInviteEnvelope.invite.setter((uint64_t)v2);
  }
  free(v2);
}

uint64_t CryptoInviteEnvelope.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of CryptoInvite?(v0 + 16);
  return v2;
}

uint64_t CryptoInviteEnvelope.__deallocating_deinit()
{
  CryptoInviteEnvelope.deinit();
  return swift_deallocClassInstance();
}

unint64_t base witness table accessor for Equatable in KeyAlgorithm()
{
  return lazy protocol witness table accessor for type KeyAlgorithm and conformance KeyAlgorithm();
}

uint64_t getEnumTagSinglePayload for KeyAlgorithm(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for KeyAlgorithm(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for KeyAlgorithm()
{
  return 0;
}

ValueMetadata *type metadata accessor for KeyAlgorithm()
{
  return &type metadata for KeyAlgorithm;
}

uint64_t dispatch thunk of static CryptoUserRole.Administrator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static CryptoUserRole.Member.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CryptoUserRole.groupKitRole.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CryptoGroup.cryptoGroupID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CryptoGroup.cryptoGroupMemberID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CryptoGroup.version.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CryptoGroup.cryptoMembership.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CryptoGroupID.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CryptoGroupID.hintHash.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CryptoUserID.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CryptoUserAndPublicKeyInfo.cryptoUserID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CryptoUserAndPublicKeyInfo.cryptoUserRole.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CryptoUserAndPublicKeyInfo.keyingInfoBlob.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CryptoGroupMembership.cryptoRoles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CryptoGroupMembership.init(members:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CryptoUserKeyingInfo.serializePublicKeysAndSignatures()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CryptoUserKeyingInfo.compressedEncryptionKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CryptoUserKeyingInfo.serializedEncryptionKeySignature.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CryptoUserKeyingInfo.compressedVerificationKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CryptoUserKeyingInfo.serializedVerificationKeySelfSignature.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static CryptoSynchronizationResult.success.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static CryptoSynchronizationResult.conflict.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CryptoServerUpdateBlobs.groupBlob.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CryptoServerUpdateBlobs.newRSVPResponseBlobs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CryptoServerUpdateBlobs.memberSeedBlob.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CryptoServerUpdateBlobs.adminSeedBlob.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CryptoServerUpdateBlobs.creatorRSVP.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t method lookup function for CryptoInviteEnvelope()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CryptoInviteEnvelope.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of CryptoInvite.cryptoInvitersID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CryptoInvite.cryptoInvitedID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t initializeBufferWithCopyOfBuffer for CryptoServiceMessageRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CryptoServiceMessageRequest(uint64_t result)
{
  unint64_t v1;

  v1 = *(unsigned __int8 *)(result + 40);
  if (v1 <= 4)
    __asm { BR              X8 }
  return result;
}

void initializeWithCopy for CryptoServiceMessageRequest(uint64_t a1, uint64_t a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D317BE8()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v0 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v2 + 24) = v0;
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v3 + 32);
  (**(void (***)(void))(v0 - 8))();
  *(_BYTE *)(v2 + 40) = 0;
  return v2;
}

void __spoils<X1,X8,X11> assignWithCopy for CryptoServiceMessageRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 != a2)
  {
    outlined destroy of CryptoServiceMessageRequest(v2);
    __asm { BR              X8 }
  }
}

void __spoils<X8,X11> outlined destroy of CryptoServiceMessageRequest(uint64_t a1)
{
  unint64_t v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 <= 4)
    __asm { BR              X8 }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy41_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x29uLL);
}

void *assignWithTake for CryptoServiceMessageRequest(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of CryptoServiceMessageRequest((uint64_t)a1);
    memcpy(a1, a2, 0x29uLL);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CryptoServiceMessageRequest(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v4;

  if (a2)
  {
    if (a2 >= 0xFC && *(_BYTE *)(a1 + 41))
    {
      v4 = *(_DWORD *)a1 + 251;
    }
    else
    {
      v2 = *(unsigned __int8 *)(a1 + 40) ^ 0xFF;
      if (v2 >= 0xFB)
        v2 = -1;
      v4 = v2;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CryptoServiceMessageRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 41);
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 32) = 0;
    *(_BYTE *)(result + 40) = 0;
    if (a3 >= 0xFC)
      *v3 = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *v3 = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for CryptoServiceMessageRequest(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t destructiveInjectEnumTag for CryptoServiceMessageRequest(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CryptoServiceMessageRequest()
{
  return &type metadata for CryptoServiceMessageRequest;
}

uint64_t dispatch thunk of CryptoServiceMessageRequestMetadata.cryptoGroupID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CryptoServiceMessageRequestMetadata.cryptoRequesterID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CryptoServiceMessageRequestMetadata.cryptoRole.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> LookupMultiUserKeyInfoRequest.Response.kdsUserKeyInfos.getter()
{
  swift_bridgeObjectRetain();
}

uint64_t static LookupMultiUserKeyInfoRequest.Response.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t LookupMultiUserKeyInfoRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL LookupMultiUserKeyInfoRequest.Response.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("kdsUserKeyInfos", 0xFuLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t LookupMultiUserKeyInfoRequest.Response.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t LookupMultiUserKeyInfoRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.Response.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.Response.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.Response.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.Response.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.Response.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t LookupMultiUserKeyInfoRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t LookupMultiUserKeyInfoRequest.Response.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("kdsUserKeyInfos", 0xFuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  return static LookupMultiUserKeyInfoRequest.Response.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  return LookupMultiUserKeyInfoRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  return LookupMultiUserKeyInfoRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  return LookupMultiUserKeyInfoRequest.Response.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = LookupMultiUserKeyInfoRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  return LookupMultiUserKeyInfoRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = LookupMultiUserKeyInfoRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t LookupMultiUserKeyInfoRequest.Response.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v13 = a1;
  v24 = 0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LookupMultiUserKeyInfoRequest.Response.CodingKeys>);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v17 = (char *)&v4 - v16;
  v24 = (_QWORD *)MEMORY[0x24BDAC7A8](v13);
  v19 = v24[3];
  v20 = v24[4];
  __swift_project_boxed_opaque_existential_1(v24, v19);
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys();
  v1 = v18;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v21 = v1;
  v22 = v1;
  if (v1)
  {
    v6 = v22;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LookupMultiUserKeyInfoRequest.KeyLookupResult]);
    lazy protocol witness table accessor for type [LookupMultiUserKeyInfoRequest.KeyLookupResult] and conformance <A> [A]();
    v2 = v21;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v2;
    v12 = v2;
    if (!v2)
    {
      v8 = v23;
      swift_bridgeObjectRetain();
      v7 = &v25;
      v25 = v8;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      __swift_destroy_boxed_opaque_existential_1(v13);
      outlined destroy of LookupMultiUserKeyInfoRequest.Response();
      return v8;
    }
    v5 = v12;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v6 = v5;
  }
  v4 = v6;
  __swift_destroy_boxed_opaque_existential_1(v13);
  return v9;
}

unint64_t lazy protocol witness table accessor for type [LookupMultiUserKeyInfoRequest.KeyLookupResult] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [LookupMultiUserKeyInfoRequest.KeyLookupResult] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [LookupMultiUserKeyInfoRequest.KeyLookupResult] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [LookupMultiUserKeyInfoRequest.KeyLookupResult]);
    v4 = lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.KeyLookupResult and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [LookupMultiUserKeyInfoRequest.KeyLookupResult] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.KeyLookupResult and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.KeyLookupResult, &type metadata for LookupMultiUserKeyInfoRequest.KeyLookupResult);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of LookupMultiUserKeyInfoRequest.Response()
{
  swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance LookupMultiUserKeyInfoRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = LookupMultiUserKeyInfoRequest.Response.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t LookupMultiUserKeyInfoRequest.KeyLookupResult.gpkUserId.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t LookupMultiUserKeyInfoRequest.KeyLookupResult.lookupHandle.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t LookupMultiUserKeyInfoRequest.KeyLookupResult.lookupUserStatusInd.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t LookupMultiUserKeyInfoRequest.KeyLookupResult.keyInfos.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v2;
}

void static LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D318B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D318BC0
                                                                                       + *((int *)qword_23D318C28 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D318BD0()
{
  uint64_t v1;

  return v1 == 0;
}

void LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D318C88()
{
  return Hasher.combine<A>(_:)();
}

uint64_t LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("lookupHandle", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("lookupUserStatusInd", 0x13uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyInfos", 8uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.intValue.getter()
{
  return 0;
}

void LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3190E8()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys(char *a1)
{
  char v1;

  static LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys()
{
  return LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys(uint64_t a1)
{
  char *v1;

  LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys()
{
  char *v0;

  LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys()
{
  return LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys();
  return CodingKey.debugDescription.getter();
}

_QWORD *LookupMultiUserKeyInfoRequest.KeyLookupResult.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  _QWORD *v62;
  _QWORD v63[2];
  _QWORD v64[3];
  char v65;
  uint64_t v66;
  char v67;

  v46 = a2;
  v47 = a1;
  v62 = 0;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys>);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v51 = (char *)&v18 - v50;
  v67 = 0;
  v62 = (_QWORD *)MEMORY[0x24BDAC7A8](v47);
  v53 = v62[3];
  v54 = v62[4];
  __swift_project_boxed_opaque_existential_1(v62, v53);
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys();
  v2 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v55 = v2;
  v56 = v2;
  if (v2)
  {
    v20 = v56;
  }
  else
  {
    v61 = 0;
    v3 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v42 = 0;
    v43 = v3;
    v44 = v4;
    v45 = 0;
    v36 = v4;
    v35 = v3;
    v37 = 1;
    v67 = 1;
    swift_bridgeObjectRetain();
    v63[0] = v35;
    v63[1] = v36;
    v60 = v37;
    v5 = KeyedDecodingContainer.decode(_:forKey:)();
    v38 = 0;
    v39 = v5;
    v40 = v6;
    v41 = 0;
    v30 = v6;
    v29 = v5;
    v67 = 3;
    swift_bridgeObjectRetain();
    v64[0] = v29;
    v64[1] = v30;
    v59 = 2;
    v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v31 = 0;
    v32 = v7;
    v33 = v8;
    v34 = 0;
    v23 = v8;
    v24 = v7;
    v64[2] = v7;
    v65 = v8 & 1;
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LookupMultiUserKeyInfoRequest.MaybeKeyInfo]);
    v25 = &v57;
    v57 = 3;
    lazy protocol witness table accessor for type [LookupMultiUserKeyInfoRequest.MaybeKeyInfo] and conformance <A> [A]();
    v9 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v27 = v9;
    v28 = v9;
    if (!v9)
    {
      v22 = v58;
      v21 = v63;
      v67 = 11;
      swift_bridgeObjectRetain();
      v66 = v22;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v47);
      result = v21;
      outlined destroy of LookupMultiUserKeyInfoRequest.KeyLookupResult();
      v11 = v36;
      v12 = v29;
      v13 = v30;
      v14 = v24;
      v15 = v23;
      v16 = v46;
      v17 = v22;
      *v46 = v35;
      v16[1] = v11;
      v16[2] = v12;
      v16[3] = v13;
      v16[4] = v14;
      *((_BYTE *)v16 + 40) = v15 & 1;
      v16[6] = v17;
      return result;
    }
    v19 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
    v20 = v19;
  }
  v18 = v20;
  result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1(v47);
  if ((v67 & 1) != 0)
  {
    result = v63;
    outlined destroy of String?();
  }
  if ((v67 & 2) != 0)
  {
    result = v64;
    outlined destroy of String();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [LookupMultiUserKeyInfoRequest.MaybeKeyInfo] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [LookupMultiUserKeyInfoRequest.MaybeKeyInfo] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [LookupMultiUserKeyInfoRequest.MaybeKeyInfo] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [LookupMultiUserKeyInfoRequest.MaybeKeyInfo]);
    v4 = lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [LookupMultiUserKeyInfoRequest.MaybeKeyInfo] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.MaybeKeyInfo, &type metadata for LookupMultiUserKeyInfoRequest.MaybeKeyInfo);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of LookupMultiUserKeyInfoRequest.KeyLookupResult()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void __swiftcall LookupMultiUserKeyInfoRequest.KeyLookupResult.init(gpkUserId:lookupHandle:lookupUserStatusInd:keyInfos:)(GroupKitCore::LookupMultiUserKeyInfoRequest::KeyLookupResult *__return_ptr retstr, Swift::String_optional gpkUserId, Swift::String lookupHandle, Swift::Int_optional lookupUserStatusInd, Swift::OpaquePointer keyInfos)
{
  retstr->gpkUserId = gpkUserId;
  retstr->lookupHandle = lookupHandle;
  retstr->lookupUserStatusInd.value = lookupUserStatusInd.value;
  retstr->lookupUserStatusInd.is_nil = lookupUserStatusInd.is_nil;
  retstr->keyInfos = keyInfos;
}

BOOL LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String string;
  Swift::Int v6;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "doesKeyExist";
  *(_QWORD *)(v3 + 8) = 12;
  *(_BYTE *)(v3 + 16) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, string);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 != 0;
}

uint64_t LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  char v3;

  swift_bridgeObjectRetain();
  if (LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.init(rawValue:)(a1, a2))
  {
    swift_bridgeObjectRelease();
    v3 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.rawValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("doesKeyExist", 0xCuLL, 1)._countAndFlagsBits;
}

uint64_t LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.stringValue.getter()
{
  return LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.rawValue.getter();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance LookupMultiUserKeyInfoRequest.KeyLookupResult@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t __src[7];

  result = LookupMultiUserKeyInfoRequest.KeyLookupResult.init(from:)(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x38uLL);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

BOOL protocol witness for RawRepresentable.init(rawValue:) in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.rawValue.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  return LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  return LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys();
  return CodingKey.debugDescription.getter();
}

_QWORD *LookupMultiUserKeyInfoRequest.MaybeKeyInfo.init(from:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _BYTE *v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[17];
  _BYTE v34[136];
  _BYTE v35[40];
  _BYTE v36[136];
  _QWORD v37[17];
  char v38;
  _QWORD *v39;
  _QWORD v40[17];
  char *v41;

  v22 = a2;
  v23 = a1;
  v41 = 0;
  v39 = 0;
  v38 = 0;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys>);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v27 = (char *)&v6 - v26;
  v41 = (char *)&v6 - v26;
  v39 = (_QWORD *)MEMORY[0x24BDAC7A8](v23);
  v29 = v39[3];
  v30 = v39[4];
  __swift_project_boxed_opaque_existential_1(v39, v29);
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys();
  v2 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v31 = v2;
  v32 = v2;
  if (v2)
  {
    v8 = v32;
  }
  else
  {
    v3 = KeyedDecodingContainer.decode(_:forKey:)();
    v19 = 0;
    v20 = v3;
    v21 = 0;
    v38 = v3 & 1;
    if ((v3 & 1) == 0)
    {
      v11 = v37;
      _s12GroupKitCore29LookupMultiUserKeyInfoRequestV05MaybegH0OWOi0_(v37);
      outlined init with take of LookupMultiUserKeyInfoRequest.MaybeKeyInfo(v11, v40);
      v15 = v19;
      goto LABEL_6;
    }
    v16 = v35;
    outlined init with copy of Decoder(v23, (uint64_t)v35);
    v4 = v19;
    UserKeyInfo.init(from:)((uint64_t)v16, v36);
    v17 = v4;
    v18 = v4;
    if (!v4)
    {
      v14 = v33;
      v12 = 136;
      memcpy(v33, v36, sizeof(v33));
      outlined retain of UserKeyInfo(v33);
      v13 = v34;
      memcpy(v34, v14, v12);
      _s12GroupKitCore29LookupMultiUserKeyInfoRequestV05MaybegH0OWOi_(v13);
      outlined init with take of LookupMultiUserKeyInfoRequest.MaybeKeyInfo(v13, v40);
      outlined release of UserKeyInfo(v14);
      v15 = v17;
LABEL_6:
      v10 = v15;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
      v9 = v40;
      outlined init with copy of LookupMultiUserKeyInfoRequest.MaybeKeyInfo(v40, v22);
      __swift_destroy_boxed_opaque_existential_1(v23);
      return outlined destroy of LookupMultiUserKeyInfoRequest.MaybeKeyInfo(v9);
    }
    v7 = v18;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    v8 = v7;
  }
  v6 = v8;
  return (_QWORD *)__swift_destroy_boxed_opaque_existential_1(v23);
}

_QWORD *_s12GroupKitCore29LookupMultiUserKeyInfoRequestV05MaybegH0OWOi0_(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[8] = 0;
  result[9] = 0;
  result[10] = 0;
  result[11] = 0;
  result[12] = 0;
  result[13] = 0;
  result[14] = 0;
  result[15] = 0;
  result[16] = 0;
  return result;
}

void *outlined init with take of LookupMultiUserKeyInfoRequest.MaybeKeyInfo(const void *a1, void *a2)
{
  memcpy(a2, a1, 0x88uLL);
  return a2;
}

char *outlined init with copy of LookupMultiUserKeyInfoRequest.MaybeKeyInfo(_QWORD *a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (a1[1])
  {
    *(_QWORD *)a2 = *a1;
    v6 = a1[1];
    swift_bridgeObjectRetain();
    *((_QWORD *)a2 + 1) = v6;
    v7 = a1[2];
    v8 = a1[3];
    outlined copy of Data._Representation(v7, v8);
    *((_QWORD *)a2 + 2) = v7;
    *((_QWORD *)a2 + 3) = v8;
    v9 = a1[4];
    v10 = a1[5];
    outlined copy of Data._Representation(v9, v10);
    *((_QWORD *)a2 + 4) = v9;
    *((_QWORD *)a2 + 5) = v10;
    v11 = a1[6];
    v12 = a1[7];
    outlined copy of Data._Representation(v11, v12);
    *((_QWORD *)a2 + 6) = v11;
    *((_QWORD *)a2 + 7) = v12;
    v13 = a1[8];
    v14 = a1[9];
    outlined copy of Data._Representation(v13, v14);
    *((_QWORD *)a2 + 8) = v13;
    *((_QWORD *)a2 + 9) = v14;
    *((_DWORD *)a2 + 20) = *((_DWORD *)a1 + 20);
    *((_QWORD *)a2 + 11) = a1[11];
    v15 = a1[12];
    swift_bridgeObjectRetain();
    *((_QWORD *)a2 + 12) = v15;
    if ((a1[14] & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 13);
    }
    else
    {
      v4 = a1[13];
      v5 = a1[14];
      outlined copy of Data._Representation(v4, v5);
      *((_QWORD *)a2 + 13) = v4;
      *((_QWORD *)a2 + 14) = v5;
    }
    *((_QWORD *)a2 + 15) = a1[15];
    v3 = a1[16];
    swift_bridgeObjectRetain();
    *((_QWORD *)a2 + 16) = v3;
  }
  else
  {
    memcpy(a2, a1, 0x88uLL);
  }
  return a2;
}

_QWORD *outlined destroy of LookupMultiUserKeyInfoRequest.MaybeKeyInfo(_QWORD *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(a1[2], a1[3]);
    outlined consume of Data._Representation(a1[4], a1[5]);
    outlined consume of Data._Representation(a1[6], a1[7]);
    outlined consume of Data._Representation(a1[8], a1[9]);
    swift_bridgeObjectRelease();
    if ((a1[14] & 0xF000000000000000) != 0xF000000000000000)
      outlined consume of Data._Representation(a1[13], a1[14]);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t outlined init with copy of Decoder(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

_QWORD *outlined retain of UserKeyInfo(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[13];
  v11 = a1[14];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v2, v3);
  outlined copy of Data._Representation(v4, v5);
  outlined copy of Data._Representation(v6, v7);
  outlined copy of Data._Representation(v8, v9);
  swift_bridgeObjectRetain();
  outlined copy of Data?(v10, v11);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of Data?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined copy of Data._Representation(result, a2);
  return result;
}

_QWORD *outlined release of UserKeyInfo(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[13];
  v11 = a1[14];
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v2, v3);
  outlined consume of Data._Representation(v4, v5);
  outlined consume of Data._Representation(v6, v7);
  outlined consume of Data._Representation(v8, v9);
  swift_bridgeObjectRelease();
  outlined consume of Data?(v10, v11);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined consume of Data?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(result, a2);
  return result;
}

_QWORD *protocol witness for Decodable.init(from:) in conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return LookupMultiUserKeyInfoRequest.MaybeKeyInfo.init(from:)(a1, a2);
}

uint64_t LookupMultiUserKeyInfoRequest.Body.keyNameSpace.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t LookupMultiUserKeyInfoRequest.Body.keyProtocolVersion.getter()
{
  uint64_t v0;
  uint64_t v2;

  LODWORD(v2) = *(_DWORD *)(v0 + 16);
  BYTE4(v2) = *(_BYTE *)(v0 + 20) & 1;
  return v2;
}

uint64_t LookupMultiUserKeyInfoRequest.Body.phoneNumberHashHandles.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t LookupMultiUserKeyInfoRequest.Body.emailHashHandles.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t LookupMultiUserKeyInfoRequest.Body.gpkUserIds.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v2;
}

unint64_t LookupMultiUserKeyInfoRequest.Body.init(keyProtocolVersion:userIDs:phoneNumberHashHandles:emailHashHandles:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  unint64_t v3;
  unint64_t result;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD __b[6];

  memset(__b, 0, sizeof(__b));
  v2 = HTTPBodyValue.keyNameSpaceValue.unsafeMutableAddressor();
  v7 = *(_QWORD *)v2;
  v8 = *((_QWORD *)v2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[0] = v7;
  __b[1] = v8;
  LODWORD(__b[2]) = a1;
  BYTE4(__b[2]) = 0;
  v13 = MEMORY[0x24BEE0D00];
  v10 = (unint64_t)Array.convertEmptyToOptional()();
  swift_bridgeObjectRetain();
  __b[3] = v10;
  v11 = (unint64_t)Array.convertEmptyToOptional()();
  swift_bridgeObjectRetain();
  __b[4] = v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID]);
  v3 = lazy protocol witness table accessor for type [GPKUserID] and conformance [A]();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in LookupMultiUserKeyInfoRequest.Body.init(keyProtocolVersion:userIDs:phoneNumberHashHandles:emailHashHandles:), 0, v12, v13, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v14);
  v5 = (unint64_t)Array.convertEmptyToOptional()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __b[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of LookupMultiUserKeyInfoRequest.Body();
  result = v5;
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = a1;
  *(_BYTE *)(a2 + 20) = 0;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = v5;
  return result;
}

uint64_t closure #1 in LookupMultiUserKeyInfoRequest.Body.init(keyProtocolVersion:userIDs:phoneNumberHashHandles:emailHashHandles:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = GPKUserID.description.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v14;
  _QWORD v15[2];
  void (*v16)(char *, _QWORD);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  void (*v30)(char *, char *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t AssociatedTypeWitness;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  Swift::Int v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v30 = a1;
  v31 = a2;
  v53 = a3;
  v44 = a4;
  v32 = a5;
  v52 = a6;
  v34 = a8;
  v35 = "Fatal error";
  v36 = "Index out of bounds";
  v37 = "Swift/Collection.swift";
  v38 = "Range requires lowerBound <= upperBound";
  v39 = "Swift/Range.swift";
  v40 = "Index out of range";
  v67 = a3;
  v66 = a4;
  v65 = a5;
  v41 = *(_QWORD *)(a5 - 8);
  v42 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v43 = (char *)v15 - v42;
  v45 = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v47 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v45);
  v49 = (char *)v15 - v48;
  v50 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v51 = (char *)v15 - v50;
  v54 = swift_getAssociatedTypeWitness();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v53);
  v57 = (char *)v15 - v56;
  v58 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v59 = (char *)v15 - v58;
  v60 = dispatch thunk of Collection.count.getter();
  if (v60)
  {
    v64 = Array.init()();
    v29 = type metadata accessor for ContiguousArray();
    ContiguousArray.reserveCapacity(_:)(v60);
    result = dispatch thunk of Collection.startIndex.getter();
    if (v60 >= 0)
    {
      v27 = 0;
      for (i = v33; ; i = v18)
      {
        v25 = i;
        v26 = v27;
        if (v27 == v60)
          goto LABEL_17;
        if (v26 < 0 || v26 >= v60)
          goto LABEL_16;
        v62 = v26;
        if (v60 < 0)
          goto LABEL_15;
        if (v26 >= v60)
          break;
        v24 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          return result;
        }
        v63 = 0;
        v23 = v24;
LABEL_18:
        v22 = v23;
        if ((v63 & 1) != 0)
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v57, v59, v54);
          _expectEnd<A>(of:is:)();
          (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
          v19 = v64;
          swift_retain();
          swift_release();
          v20 = v19;
          v21 = v25;
          return v20;
        }
        v17 = &v61;
        v16 = (void (*)(char *, _QWORD))dispatch thunk of Collection.subscript.read();
        (*(void (**)(char *))(v47 + 16))(v49);
        v16(v17, 0);
        v14 = v25;
        v30(v49, v43);
        v18 = v14;
        if (v14)
        {
          (*(void (**)(char *, uint64_t))(v47 + 8))(v49, AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v55 + 8))(v59, v54);
          outlined destroy of ContiguousArray<A1>();
          (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v34, v43, v32);
          return v15[1];
        }
        (*(void (**)(char *, uint64_t))(v47 + 8))(v49, AssociatedTypeWitness);
        ContiguousArray.append(_:)();
        dispatch thunk of Collection.formIndex(after:)();
        result = v18;
        v27 = v22;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_17:
      v62 = 0;
      v63 = 1;
      v23 = v26;
      goto LABEL_18;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v20 = static Array._allocateUninitialized(_:)();
  v21 = v33;
  return v20;
}

unint64_t lazy protocol witness table accessor for type [GPKUserID] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKUserID] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKUserID] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKUserID]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKUserID] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of LookupMultiUserKeyInfoRequest.Body()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void static LookupMultiUserKeyInfoRequest.Body.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D31B520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D31B578
                                                                                       + *((int *)qword_23D31B5F0 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D31B588()
{
  uint64_t v1;

  return v1 == 0;
}

void LookupMultiUserKeyInfoRequest.Body.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D31B654()
{
  return Hasher.combine<A>(_:)();
}

uint64_t LookupMultiUserKeyInfoRequest.Body.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  unsigned __int8 v7;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyNameSpace", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 0;
LABEL_12:
    swift_bridgeObjectRelease();
    return v7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyProtocolVersion", 0x12uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 1;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("phoneNumberHashHandles", 0x16uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 2;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("emailHashHandles", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 3;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserIds", 0xAuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 4;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 5;
}

uint64_t LookupMultiUserKeyInfoRequest.Body.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t LookupMultiUserKeyInfoRequest.Body.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.Body.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.Body.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.Body.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.Body.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.Body.CodingKeys, &type metadata for LookupMultiUserKeyInfoRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t LookupMultiUserKeyInfoRequest.Body.CodingKeys.intValue.getter()
{
  return 0;
}

void LookupMultiUserKeyInfoRequest.Body.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D31BB64()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyNameSpace", 0xCuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys(char *a1)
{
  char v1;

  static LookupMultiUserKeyInfoRequest.Body.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys()
{
  return LookupMultiUserKeyInfoRequest.Body.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys(uint64_t a1)
{
  char *v1;

  LookupMultiUserKeyInfoRequest.Body.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys()
{
  char *v0;

  LookupMultiUserKeyInfoRequest.Body.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = LookupMultiUserKeyInfoRequest.Body.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys()
{
  return LookupMultiUserKeyInfoRequest.Body.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = LookupMultiUserKeyInfoRequest.Body.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t LookupMultiUserKeyInfoRequest.Body.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  int v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v33 = a1;
  v57 = 0;
  v56 = 0;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<LookupMultiUserKeyInfoRequest.Body.CodingKeys>);
  v34 = *(_QWORD *)(v43 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v38 = (char *)v11 - v35;
  v57 = (_QWORD *)MEMORY[0x24BDAC7A8](v33);
  v56 = v1;
  v36 = v57[3];
  v37 = v57[4];
  __swift_project_boxed_opaque_existential_1(v57, v36);
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v2 = v40;
  v41 = *v39;
  v42 = v39[1];
  swift_bridgeObjectRetain();
  v55 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v44 = v2;
  v45 = v2;
  if (v2)
  {
    v14 = v45;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v38, v43);
    v15 = v14;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = v44;
    v4 = *((_DWORD *)v39 + 4);
    v5 = *((_BYTE *)v39 + 20);
    v54 = 1;
    v52 = v4;
    v53 = v5 & 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v31 = v3;
    v32 = v3;
    if (v3)
    {
      v13 = v32;
      result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v38, v43);
      v15 = v13;
    }
    else
    {
      v24 = &v60;
      outlined init with take of [String]?(v39 + 3, &v60);
      outlined retain of [String]?();
      v27 = &v51;
      outlined init with take of [String]?(v24, &v51);
      v25 = &v50;
      v50 = 2;
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      v6 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
      v7 = v31;
      v28 = v6;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      v29 = v7;
      v30 = v7;
      if (v7)
      {
        v12 = v30;
        outlined destroy of [String]?();
        result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v38, v43);
        v15 = v12;
      }
      else
      {
        outlined destroy of [String]?();
        v20 = &v59;
        outlined init with take of [String]?(v39 + 4, &v59);
        outlined retain of [String]?();
        v21 = &v49;
        outlined init with take of [String]?(v20, &v49);
        v8 = v29;
        v48 = 3;
        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
        v22 = v8;
        v23 = v8;
        if (v8)
        {
          v11[2] = v23;
          outlined destroy of [String]?();
          return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v38, v43);
        }
        else
        {
          outlined destroy of [String]?();
          v16 = &v58;
          outlined init with take of [String]?(v39 + 5, &v58);
          outlined retain of [String]?();
          v17 = &v47;
          outlined init with take of [String]?(v16, &v47);
          v9 = v22;
          v46 = 4;
          KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
          v18 = v9;
          v19 = v9;
          if (v9)
            v11[1] = v19;
          outlined destroy of [String]?();
          return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v38, v43);
        }
      }
    }
  }
  return result;
}

_QWORD *outlined init with take of [String]?(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = *a1;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined retain of [String]?()
{
  swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v4 = MEMORY[0x24BEE0D08];
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12A0], v0, &v4);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = lazy protocol witness table cache variable for type [String] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance <A> [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v4 = MEMORY[0x24BEE0D38];
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v0, &v4);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [String]?()
{
  swift_bridgeObjectRelease();
}

uint64_t *LookupMultiUserKeyInfoRequest.Body.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  _QWORD *v65;
  _QWORD v66[2];
  int v67;
  char v68;
  uint64_t v69;
  _QWORD v70[2];
  char v71;

  v45 = a2;
  v46 = a1;
  v65 = 0;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<LookupMultiUserKeyInfoRequest.Body.CodingKeys>);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v50 = (char *)&v16 - v49;
  v71 = 0;
  v65 = (_QWORD *)MEMORY[0x24BDAC7A8](v46);
  v52 = v65[3];
  v53 = v65[4];
  __swift_project_boxed_opaque_existential_1(v65, v52);
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys();
  v2 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v54 = v2;
  v55 = v2;
  if (v2)
  {
    v18 = v55;
  }
  else
  {
    v64 = 0;
    v3 = KeyedDecodingContainer.decode(_:forKey:)();
    v41 = 0;
    v42 = v3;
    v43 = v4;
    v44 = 0;
    v35 = v4;
    v34 = v3;
    v36 = 1;
    v71 = 1;
    swift_bridgeObjectRetain();
    v66[0] = v34;
    v66[1] = v35;
    v63 = v36;
    v5 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v37 = 0;
    v62 = v5;
    v38 = v5;
    v39 = BYTE4(v5);
    v40 = 0;
    v27 = BYTE4(v5);
    v28 = v5;
    v67 = v5;
    v68 = BYTE4(v5) & 1;
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v29 = &v60;
    v60 = 2;
    v6 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
    v7 = v37;
    v31 = v6;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v32 = v7;
    v33 = v7;
    if (!v7)
    {
      v24 = v61;
      v71 = 5;
      swift_bridgeObjectRetain();
      v69 = v24;
      v58 = 3;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v25 = 0;
      v26 = 0;
      v21 = v59;
      v71 = 13;
      swift_bridgeObjectRetain();
      v70[0] = v21;
      v56 = 4;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v22 = 0;
      v23 = 0;
      v20 = v57;
      v19 = v66;
      v71 = 29;
      swift_bridgeObjectRetain();
      v70[1] = v20;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v47);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v46);
      result = v19;
      outlined destroy of LookupMultiUserKeyInfoRequest.Body();
      v9 = v35;
      v10 = v28;
      v11 = v27;
      v12 = v24;
      v13 = v21;
      v14 = v45;
      v15 = v20;
      *v45 = v34;
      v14[1] = v9;
      *((_DWORD *)v14 + 4) = v10;
      *((_BYTE *)v14 + 20) = v11 & 1;
      v14[3] = v12;
      v14[4] = v13;
      v14[5] = v15;
      return result;
    }
    v17 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v47);
    v18 = v17;
  }
  v16 = v18;
  result = (uint64_t *)__swift_destroy_boxed_opaque_existential_1(v46);
  if ((v71 & 1) != 0)
  {
    result = v66;
    outlined destroy of String();
  }
  if ((v71 & 4) != 0)
  {
    result = &v69;
    outlined destroy of [String]?();
  }
  if ((v71 & 8) != 0)
  {
    result = v70;
    outlined destroy of [String]?();
  }
  return result;
}

uint64_t *protocol witness for Decodable.init(from:) in conformance LookupMultiUserKeyInfoRequest.Body@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t *result;
  uint64_t __src[6];

  result = LookupMultiUserKeyInfoRequest.Body.init(from:)(a1, __src);
  if (!v2)
    return (uint64_t *)memcpy(a2, __src, 0x30uLL);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LookupMultiUserKeyInfoRequest.Body(uint64_t a1)
{
  const void *v1;
  _BYTE __dst[48];

  memcpy(__dst, v1, sizeof(__dst));
  return LookupMultiUserKeyInfoRequest.Body.encode(to:)(a1);
}

void variable initialization expression of LookupMultiUserKeyInfoRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t LookupMultiUserKeyInfoRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t LookupMultiUserKeyInfoRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*LookupMultiUserKeyInfoRequest.bodyContent.modify())()
{
  return LookupMultiUserKeyInfoRequest.bodyContent.modify;
}

uint64_t LookupMultiUserKeyInfoRequest.init(keyProtocolVersion:userIDs:phoneNumberHashHandles:emailHashHandles:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE __dst[48];
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  char v42[8];

  v15 = a5;
  v17 = a1;
  v18 = a2;
  v19 = a3;
  v20 = a4;
  v40 = 0u;
  v41 = 0u;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v35 = 0;
  v21 = 0;
  v23 = type metadata accessor for DictionaryEncoder.DataEncodingStrategy();
  v22 = *(_QWORD *)(v23 - 8);
  v16 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v24 = (char *)v12 - v16;
  v39 = v5;
  v38 = v6;
  v37 = v7;
  v36 = v8;
  v40 = 0uLL;
  v41 = 0uLL;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = v42;
  LookupMultiUserKeyInfoRequest.Body.init(keyProtocolVersion:userIDs:phoneNumberHashHandles:emailHashHandles:)(v17, (uint64_t)v42);
  type metadata accessor for DictionaryEncoder();
  v25 = DictionaryEncoder.__allocating_init()();
  v35 = v25;
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v24, *MEMORY[0x24BDFC528], v23);
  dispatch thunk of DictionaryEncoder.dataEncodingStrategy.setter();
  v28 = __dst;
  memcpy(__dst, v26, sizeof(__dst));
  lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Body and conformance LookupMultiUserKeyInfoRequest.Body();
  v9 = v27;
  v10 = dispatch thunk of DictionaryEncoder.encode<A>(_:)();
  v29 = v9;
  v30 = v10;
  v31 = v9;
  if (v9)
  {
    v12[1] = v31;
    swift_release();
    outlined release of LookupMultiUserKeyInfoRequest.Body((uint64_t)v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined destroy of LookupMultiUserKeyInfoRequest((uint64_t)&v40);
  }
  else
  {
    v13 = v30;
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(_QWORD *)&v33 = v13;
    v14 = &v40;
    outlined assign with take of Any?(&v33, (uint64_t)&v40);
    swift_release();
    outlined release of LookupMultiUserKeyInfoRequest.Body((uint64_t)v42);
    outlined init with copy of LookupMultiUserKeyInfoRequest((uint64_t)v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined destroy of LookupMultiUserKeyInfoRequest((uint64_t)v14);
  }
}

unint64_t lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Body and conformance LookupMultiUserKeyInfoRequest.Body()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body and conformance LookupMultiUserKeyInfoRequest.Body;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body and conformance LookupMultiUserKeyInfoRequest.Body)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.Body, &type metadata for LookupMultiUserKeyInfoRequest.Body);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Body and conformance LookupMultiUserKeyInfoRequest.Body);
    return v0;
  }
  return v2;
}

uint64_t outlined release of LookupMultiUserKeyInfoRequest.Body(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of LookupMultiUserKeyInfoRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t outlined init with copy of LookupMultiUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t LookupMultiUserKeyInfoRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.lookupMultiUserKeyInfo.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in LookupMultiUserKeyInfoRequest()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Response and conformance LookupMultiUserKeyInfoRequest.Response();
}

unint64_t lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Response and conformance LookupMultiUserKeyInfoRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response and conformance LookupMultiUserKeyInfoRequest.Response;
  if (!lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response and conformance LookupMultiUserKeyInfoRequest.Response)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for LookupMultiUserKeyInfoRequest.Response, &type metadata for LookupMultiUserKeyInfoRequest.Response);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type LookupMultiUserKeyInfoRequest.Response and conformance LookupMultiUserKeyInfoRequest.Response);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance LookupMultiUserKeyInfoRequest()
{
  return LookupMultiUserKeyInfoRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance LookupMultiUserKeyInfoRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance LookupMultiUserKeyInfoRequest@<X0>(uint64_t a1@<X8>)
{
  return LookupMultiUserKeyInfoRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance LookupMultiUserKeyInfoRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for LookupMultiUserKeyInfoRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for LookupMultiUserKeyInfoRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for LookupMultiUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for LookupMultiUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for LookupMultiUserKeyInfoRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupMultiUserKeyInfoRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LookupMultiUserKeyInfoRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for LookupMultiUserKeyInfoRequest()
{
  return &type metadata for LookupMultiUserKeyInfoRequest;
}

ValueMetadata *type metadata accessor for LookupMultiUserKeyInfoRequest.Response()
{
  return &type metadata for LookupMultiUserKeyInfoRequest.Response;
}

uint64_t getEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.Response.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.Response.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  return &type metadata for LookupMultiUserKeyInfoRequest.Response.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for LookupMultiUserKeyInfoRequest.KeyLookupResult(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for LookupMultiUserKeyInfoRequest.KeyLookupResult()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LookupMultiUserKeyInfoRequest.KeyLookupResult(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 48) = v7;
  return result;
}

uint64_t assignWithCopy for LookupMultiUserKeyInfoRequest.KeyLookupResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy56_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x38uLL);
}

uint64_t assignWithTake for LookupMultiUserKeyInfoRequest.KeyLookupResult(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.KeyLookupResult(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.KeyLookupResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 56) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 56) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for LookupMultiUserKeyInfoRequest.KeyLookupResult()
{
  return &type metadata for LookupMultiUserKeyInfoRequest.KeyLookupResult;
}

uint64_t getEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys()
{
  return &type metadata for LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for LookupMultiUserKeyInfoRequest.MaybeKeyInfo(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for LookupMultiUserKeyInfoRequest.MaybeKeyInfo(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 8))
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
    outlined consume of Data._Representation(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
    swift_bridgeObjectRelease();
    if ((*(_QWORD *)(v1 + 112) & 0xF000000000000000) != 0xF000000000000000)
      outlined consume of Data._Representation(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for LookupMultiUserKeyInfoRequest.MaybeKeyInfo(char *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if (a2[1])
  {
    *(_QWORD *)a1 = *a2;
    v6 = a2[1];
    swift_bridgeObjectRetain();
    *((_QWORD *)a1 + 1) = v6;
    v7 = a2[2];
    v8 = a2[3];
    outlined copy of Data._Representation(v7, v8);
    *((_QWORD *)a1 + 2) = v7;
    *((_QWORD *)a1 + 3) = v8;
    v9 = a2[4];
    v10 = a2[5];
    outlined copy of Data._Representation(v9, v10);
    *((_QWORD *)a1 + 4) = v9;
    *((_QWORD *)a1 + 5) = v10;
    v11 = a2[6];
    v12 = a2[7];
    outlined copy of Data._Representation(v11, v12);
    *((_QWORD *)a1 + 6) = v11;
    *((_QWORD *)a1 + 7) = v12;
    v13 = a2[8];
    v14 = a2[9];
    outlined copy of Data._Representation(v13, v14);
    *((_QWORD *)a1 + 8) = v13;
    *((_QWORD *)a1 + 9) = v14;
    *((_DWORD *)a1 + 20) = *((_DWORD *)a2 + 20);
    *((_QWORD *)a1 + 11) = a2[11];
    v15 = a2[12];
    swift_bridgeObjectRetain();
    *((_QWORD *)a1 + 12) = v15;
    if ((a2[14] & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    }
    else
    {
      v4 = a2[13];
      v5 = a2[14];
      outlined copy of Data._Representation(v4, v5);
      *((_QWORD *)a1 + 13) = v4;
      *((_QWORD *)a1 + 14) = v5;
    }
    *((_QWORD *)a1 + 15) = a2[15];
    v3 = a2[16];
    swift_bridgeObjectRetain();
    *((_QWORD *)a1 + 16) = v3;
  }
  else
  {
    memcpy(a1, a2, 0x88uLL);
  }
  return a1;
}

uint64_t assignWithCopy for LookupMultiUserKeyInfoRequest.MaybeKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a2 + 8))
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v31 = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      *(_QWORD *)(a1 + 8) = v31;
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(a2 + 16);
      v33 = *(_QWORD *)(a2 + 24);
      outlined copy of Data._Representation(v32, v33);
      v2 = *(_QWORD *)(a1 + 16);
      v3 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v32;
      *(_QWORD *)(a1 + 24) = v33;
      outlined consume of Data._Representation(v2, v3);
      v34 = *(_QWORD *)(a2 + 32);
      v35 = *(_QWORD *)(a2 + 40);
      outlined copy of Data._Representation(v34, v35);
      v4 = *(_QWORD *)(a1 + 32);
      v5 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v34;
      *(_QWORD *)(a1 + 40) = v35;
      outlined consume of Data._Representation(v4, v5);
      v36 = *(_QWORD *)(a2 + 48);
      v37 = *(_QWORD *)(a2 + 56);
      outlined copy of Data._Representation(v36, v37);
      v6 = *(_QWORD *)(a1 + 48);
      v7 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v36;
      *(_QWORD *)(a1 + 56) = v37;
      outlined consume of Data._Representation(v6, v7);
      v38 = *(_QWORD *)(a2 + 64);
      v39 = *(_QWORD *)(a2 + 72);
      outlined copy of Data._Representation(v38, v39);
      v8 = *(_QWORD *)(a1 + 64);
      v9 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 64) = v38;
      *(_QWORD *)(a1 + 72) = v39;
      outlined consume of Data._Representation(v8, v9);
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      v40 = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRetain();
      *(_QWORD *)(a1 + 96) = v40;
      swift_bridgeObjectRelease();
      if ((*(_QWORD *)(a1 + 112) & 0xF000000000000000) == 0xF000000000000000)
      {
        if ((*(_QWORD *)(a2 + 112) & 0xF000000000000000) == 0xF000000000000000)
        {
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        }
        else
        {
          v27 = *(_QWORD *)(a2 + 104);
          v28 = *(_QWORD *)(a2 + 112);
          outlined copy of Data._Representation(v27, v28);
          *(_QWORD *)(a1 + 104) = v27;
          *(_QWORD *)(a1 + 112) = v28;
        }
      }
      else if ((*(_QWORD *)(a2 + 112) & 0xF000000000000000) == 0xF000000000000000)
      {
        outlined destroy of Data(a1 + 104);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      }
      else
      {
        v29 = *(_QWORD *)(a2 + 104);
        v30 = *(_QWORD *)(a2 + 112);
        outlined copy of Data._Representation(v29, v30);
        v10 = *(_QWORD *)(a1 + 104);
        v11 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 104) = v29;
        *(_QWORD *)(a1 + 112) = v30;
        outlined consume of Data._Representation(v10, v11);
      }
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v26 = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
      *(_QWORD *)(a1 + 128) = v26;
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of UserKeyInfo(a1);
      memcpy((void *)a1, (const void *)a2, 0x88uLL);
    }
  }
  else if (*(_QWORD *)(a2 + 8))
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v16 = *(_QWORD *)(a2 + 8);
    swift_bridgeObjectRetain();
    *(_QWORD *)(a1 + 8) = v16;
    v17 = *(_QWORD *)(a2 + 16);
    v18 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v17, v18);
    *(_QWORD *)(a1 + 16) = v17;
    *(_QWORD *)(a1 + 24) = v18;
    v19 = *(_QWORD *)(a2 + 32);
    v20 = *(_QWORD *)(a2 + 40);
    outlined copy of Data._Representation(v19, v20);
    *(_QWORD *)(a1 + 32) = v19;
    *(_QWORD *)(a1 + 40) = v20;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = *(_QWORD *)(a2 + 56);
    outlined copy of Data._Representation(v21, v22);
    *(_QWORD *)(a1 + 48) = v21;
    *(_QWORD *)(a1 + 56) = v22;
    v23 = *(_QWORD *)(a2 + 64);
    v24 = *(_QWORD *)(a2 + 72);
    outlined copy of Data._Representation(v23, v24);
    *(_QWORD *)(a1 + 64) = v23;
    *(_QWORD *)(a1 + 72) = v24;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v25 = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain();
    *(_QWORD *)(a1 + 96) = v25;
    if ((*(_QWORD *)(a2 + 112) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 104);
      v15 = *(_QWORD *)(a2 + 112);
      outlined copy of Data._Representation(v14, v15);
      *(_QWORD *)(a1 + 104) = v14;
      *(_QWORD *)(a1 + 112) = v15;
    }
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    v13 = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    *(_QWORD *)(a1 + 128) = v13;
  }
  else
  {
    memcpy((void *)a1, (const void *)a2, 0x88uLL);
  }
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Data(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t outlined destroy of UserKeyInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 112) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy136_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x88uLL);
}

_QWORD *assignWithTake for LookupMultiUserKeyInfoRequest.MaybeKeyInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (a1[1])
  {
    if (a2[1])
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRelease();
      v2 = a2[3];
      v3 = a1[2];
      v4 = a1[3];
      a1[2] = a2[2];
      a1[3] = v2;
      outlined consume of Data._Representation(v3, v4);
      v5 = a2[5];
      v6 = a1[4];
      v7 = a1[5];
      a1[4] = a2[4];
      a1[5] = v5;
      outlined consume of Data._Representation(v6, v7);
      v8 = a2[7];
      v9 = a1[6];
      v10 = a1[7];
      a1[6] = a2[6];
      a1[7] = v8;
      outlined consume of Data._Representation(v9, v10);
      v11 = a2[9];
      v12 = a1[8];
      v13 = a1[9];
      a1[8] = a2[8];
      a1[9] = v11;
      outlined consume of Data._Representation(v12, v13);
      *((_DWORD *)a1 + 20) = *((_DWORD *)a2 + 20);
      a1[11] = a2[11];
      a1[12] = a2[12];
      swift_bridgeObjectRelease();
      if ((a1[14] & 0xF000000000000000) == 0xF000000000000000)
      {
        *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
      }
      else if ((a2[14] & 0xF000000000000000) == 0xF000000000000000)
      {
        outlined destroy of Data((uint64_t)(a1 + 13));
        *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
      }
      else
      {
        v14 = a2[14];
        v15 = a1[13];
        v16 = a1[14];
        a1[13] = a2[13];
        a1[14] = v14;
        outlined consume of Data._Representation(v15, v16);
      }
      a1[15] = a2[15];
      a1[16] = a2[16];
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of UserKeyInfo((uint64_t)a1);
      memcpy(a1, a2, 0x88uLL);
    }
  }
  else
  {
    memcpy(a1, a2, 0x88uLL);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.MaybeKeyInfo(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 136))
    {
      v5 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 8)))
        v4 = *(_QWORD *)(a1 + 8);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_QWORD *storeEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.MaybeKeyInfo(_QWORD *result, unsigned int a2, unsigned int a3)
{
  _BYTE *v3;

  v3 = result + 17;
  if (a2 > 0x7FFFFFFE)
  {
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 - 0x7FFFFFFF;
    result[16] = 0;
    if (a3 >= 0x7FFFFFFF)
      *v3 = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *v3 = 0;
    if (a2)
      result[1] = a2;
  }
  return result;
}

uint64_t getEnumTag for LookupMultiUserKeyInfoRequest.MaybeKeyInfo(uint64_t a1)
{
  return getEnumTagSinglePayload for UserKeyInfo(a1, 1);
}

_QWORD *destructiveInjectEnumTag for LookupMultiUserKeyInfoRequest.MaybeKeyInfo(_QWORD *a1, int a2)
{
  return storeEnumTagSinglePayload for UserKeyInfo(a1, a2, 1);
}

ValueMetadata *type metadata accessor for LookupMultiUserKeyInfoRequest.MaybeKeyInfo()
{
  return &type metadata for LookupMultiUserKeyInfoRequest.MaybeKeyInfo;
}

uint64_t getEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  return &type metadata for LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for LookupMultiUserKeyInfoRequest.Body(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for LookupMultiUserKeyInfoRequest.Body()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LookupMultiUserKeyInfoRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v4 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 32) = v5;
  v8 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 40) = v8;
  return result;
}

uint64_t assignWithCopy for LookupMultiUserKeyInfoRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v4 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy48_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x30uLL);
}

uint64_t assignWithTake for LookupMultiUserKeyInfoRequest.Body(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.Body(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 8)))
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.Body(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 8) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for LookupMultiUserKeyInfoRequest.Body()
{
  return &type metadata for LookupMultiUserKeyInfoRequest.Body;
}

uint64_t getEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.Body.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v7 = ((a2 + 4) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 5;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for LookupMultiUserKeyInfoRequest.Body.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for LookupMultiUserKeyInfoRequest.Body.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for LookupMultiUserKeyInfoRequest.Body.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for LookupMultiUserKeyInfoRequest.Body.CodingKeys()
{
  return &type metadata for LookupMultiUserKeyInfoRequest.Body.CodingKeys;
}

unint64_t base witness table accessor for Equatable in LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in LookupMultiUserKeyInfoRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in LookupMultiUserKeyInfoRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for Equatable in LookupMultiUserKeyInfoRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Body.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys and conformance LookupMultiUserKeyInfoRequest.MaybeKeyInfo.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys();
}

unint64_t base witness table accessor for Equatable in LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys and conformance LookupMultiUserKeyInfoRequest.KeyLookupResult.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in LookupMultiUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type LookupMultiUserKeyInfoRequest.Response.CodingKeys and conformance LookupMultiUserKeyInfoRequest.Response.CodingKeys();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ContiguousArray<A1>()
{
  swift_release();
}

{
  swift_release();
}

uint64_t dispatch thunk of ProfilePictureFetching.fetchProfilePicture(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 8) + **(int **)(a4 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of ProfilePictureFetching.fetchProfilePicture(for:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ProfilePictureFetching.fetchProfilePicture(for:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of ClientBuilding.buildClient(for:listener:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t RSVPQueue.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RSVPQueue(maxSequenceNumber: ", 0x1DuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v0);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" messages: ", 0xBuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RSVPMessage]);
  lazy protocol witness table accessor for type [RSVPMessage] and conformance [A]();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [RSVPMessage]();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

unint64_t lazy protocol witness table accessor for type [RSVPMessage] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [RSVPMessage] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RSVPMessage] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RSVPMessage]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [RSVPMessage] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [RSVPMessage] and conformance [A];
  if (!lazy protocol witness table cache variable for type [RSVPMessage] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RSVPMessage]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [RSVPMessage] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [RSVPMessage]()
{
  swift_bridgeObjectRelease();
}

uint64_t RSVPQueue.maxSequenceNumber.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t RSVPQueue.messages.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v2;
}

BOOL static RSVPQueue.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t RSVPQueue.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t RSVPQueue.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("maxSequenceNumber", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("messages", 8uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t RSVPQueue.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t RSVPQueue.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPQueue.CodingKeys, &type metadata for RSVPQueue.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPQueue.CodingKeys, &type metadata for RSVPQueue.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPQueue.CodingKeys, &type metadata for RSVPQueue.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPQueue.CodingKeys, &type metadata for RSVPQueue.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPQueue.CodingKeys, &type metadata for RSVPQueue.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t RSVPQueue.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t RSVPQueue.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("messages", 8uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("maxSequenceNumber", 0x11uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RSVPQueue.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static RSVPQueue.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RSVPQueue.CodingKeys()
{
  return RSVPQueue.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RSVPQueue.CodingKeys()
{
  return RSVPQueue.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RSVPQueue.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RSVPQueue.CodingKeys()
{
  _BYTE *v0;

  return RSVPQueue.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RSVPQueue.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RSVPQueue.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance RSVPQueue.CodingKeys()
{
  return RSVPQueue.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RSVPQueue.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RSVPQueue.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RSVPQueue.CodingKeys()
{
  lazy protocol witness table accessor for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RSVPQueue.CodingKeys()
{
  lazy protocol witness table accessor for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t RSVPQueue.encode(to:)(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[8];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  int *v22;
  _QWORD *v23;

  v7 = a1;
  v23 = 0;
  v22 = 0;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RSVPQueue.CodingKeys>);
  v8 = *(_QWORD *)(v15 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (char *)v5 - v9;
  v23 = (_QWORD *)MEMORY[0x24BDAC7A8](v7);
  v14 = *v1;
  v10 = *((_QWORD *)v1 + 1);
  v22 = v1;
  v11 = v23[3];
  v12 = v23[4];
  __swift_project_boxed_opaque_existential_1(v23, v11);
  lazy protocol witness table accessor for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v2 = v16;
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v17 = v2;
  v18 = v2;
  if (v2)
  {
    v5[2] = v18;
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v15);
  }
  else
  {
    swift_bridgeObjectRetain();
    v5[6] = &v20;
    v20 = v10;
    v5[4] = &v19;
    v19 = 1;
    v5[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RSVPMessage]);
    lazy protocol witness table accessor for type [RSVPMessage] and conformance <A> [A]();
    v3 = v17;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v5[7] = v3;
    v6 = v3;
    if (v3)
      v5[1] = v6;
    outlined destroy of [RSVPMessage]();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v15);
  }
}

unint64_t lazy protocol witness table accessor for type [RSVPMessage] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [RSVPMessage] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [RSVPMessage] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RSVPMessage]);
    v4 = lazy protocol witness table accessor for type RSVPMessage and conformance RSVPMessage();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [RSVPMessage] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [RSVPMessage] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [RSVPMessage] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RSVPMessage]);
    v4 = lazy protocol witness table accessor for type RSVPMessage and conformance RSVPMessage();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [RSVPMessage] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type RSVPMessage and conformance RSVPMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RSVPMessage and conformance RSVPMessage;
  if (!lazy protocol witness table cache variable for type RSVPMessage and conformance RSVPMessage)
  {
    v0 = type metadata accessor for RSVPMessage();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage and conformance RSVPMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RSVPMessage and conformance RSVPMessage;
  if (!lazy protocol witness table cache variable for type RSVPMessage and conformance RSVPMessage)
  {
    v0 = type metadata accessor for RSVPMessage();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage and conformance RSVPMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RSVPMessage and conformance RSVPMessage;
  if (!lazy protocol witness table cache variable for type RSVPMessage and conformance RSVPMessage)
  {
    v0 = type metadata accessor for RSVPMessage();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage and conformance RSVPMessage);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for RSVPMessage()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for RSVPMessage;
  if (!type metadata singleton initialization cache for RSVPMessage)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t RSVPQueue.init(from:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;

  v22 = a2;
  v23 = a1;
  v36 = 0;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RSVPQueue.CodingKeys>);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v27 = (char *)v9 - v26;
  v36 = (_QWORD *)MEMORY[0x24BDAC7A8](v23);
  v29 = v36[3];
  v30 = v36[4];
  __swift_project_boxed_opaque_existential_1(v36, v29);
  lazy protocol witness table accessor for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys();
  v2 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v31 = v2;
  v32 = v2;
  if (v2)
  {
    v11 = v32;
  }
  else
  {
    v35 = 0;
    v3 = KeyedDecodingContainer.decode(_:forKey:)();
    v19 = 0;
    v20 = v3;
    v21 = 0;
    v14 = v3;
    v37 = v3;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RSVPMessage]);
    v15 = &v33;
    v33 = 1;
    lazy protocol witness table accessor for type [RSVPMessage] and conformance <A> [A]();
    v4 = v19;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v17 = v4;
    v18 = v4;
    if (!v4)
    {
      v12 = v34;
      v13 = &v37;
      swift_bridgeObjectRetain();
      v38 = v12;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
      v5 = v22;
      v6 = v12;
      v7 = v23;
      *v22 = v14;
      *((_QWORD *)v5 + 1) = v6;
      __swift_destroy_boxed_opaque_existential_1(v7);
      result = (uint64_t)v13;
      outlined destroy of RSVPQueue();
      return result;
    }
    v10 = v18;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    v11 = v10;
  }
  v9[1] = v11;
  return __swift_destroy_boxed_opaque_existential_1(v23);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of RSVPQueue()
{
  swift_bridgeObjectRelease();
}

uint64_t RSVPQueue.init(maxSequenceNumber:messages:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance RSVPQueue@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return RSVPQueue.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RSVPQueue(uint64_t a1)
{
  return RSVPQueue.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RSVPQueue()
{
  return RSVPQueue.description.getter();
}

uint64_t RSVPMessage.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  char v6;
  Swift::String v7;
  Swift::String v8;
  _BYTE *v9;
  void *v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  void *v15;
  void *v16;
  Swift::String *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t *v24;
  Swift::String *v25;
  void *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  void *object;
  char *v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _BYTE *v43;
  void *v44;
  int *v45;
  uint64_t v46;
  unsigned int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
  v32 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v33 = (char *)&v15 - v32;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v34 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v48 = (char *)&v15 - v34;
  v46 = 0;
  v42 = type metadata accessor for GPKGroupID();
  v40 = *(_QWORD *)(v42 - 8);
  v35 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v41 = (char *)&v15 - v35;
  v60 = v0;
  v3 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v39 = &v58;
  v58 = v3;
  v59 = v4;
  v47 = 1;
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RSVPMessage(", 0xCuLL, 1);
  object = v5._object;
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v6 = *v43;
  v37 = &v57;
  v57 = v6;
  lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", groupID: ", 0xBuLL, v47 & 1);
  v38 = v7._object;
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  v45 = (int *)type metadata accessor for RSVPMessage();
  (*(void (**)(char *, _BYTE *, uint64_t))(v40 + 16))(v41, &v43[v45[5]], v42);
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", userID: ", 0xAuLL, v47 & 1);
  v44 = v8._object;
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  v9 = v43;
  swift_bridgeObjectRelease();
  outlined init with copy of GPKUserID?(&v9[v45[6]], v48);
  v49 = type metadata accessor for GPKUserID();
  v50 = *(_QWORD *)(v49 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v50 + 48))(v48, v47) == 1)
  {
    v15 = 0;
    outlined destroy of GPKUserID?((uint64_t)v48);
    v31._countAndFlagsBits = (uint64_t)v15;
    v31._object = v15;
  }
  else
  {
    v30._countAndFlagsBits = GPKUserID.description.getter();
    v30._object = v10;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v48, v49);
    v31 = v30;
  }
  v55 = v31;
  if (v31._object)
  {
    v56 = v55;
  }
  else
  {
    v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<nil>", 5uLL, 1);
    outlined destroy of String?();
  }
  v25 = &v54;
  v54 = v56;
  v24 = &v58;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v27 = 1;
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", 2uLL, 1);
  v26 = v11._object;
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  outlined init with copy of GPKMemberRole?(&v43[v45[7]], v33);
  v28 = type metadata accessor for GPKMemberRole();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, _QWORD))(v29 + 48))(v33, v27) == 1)
  {
    v16 = 0;
    outlined destroy of GPKMemberRole?((uint64_t)v33);
    v23._countAndFlagsBits = (uint64_t)v16;
    v23._object = v16;
  }
  else
  {
    v22._countAndFlagsBits = GPKMemberRole.description.getter();
    v22._object = v12;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v28);
    v23 = v22;
  }
  v52 = v23;
  if (v23._object)
  {
    v53 = v52;
  }
  else
  {
    v53 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<nil>", 5uLL, 1);
    outlined destroy of String?();
  }
  v17 = &v51;
  v51 = v53;
  v19 = &v58;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v18 = v13._object;
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease();
  v21 = v58;
  v20 = v59;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

unint64_t lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType;
  if (!lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage.MessageType, &type metadata for RSVPMessage.MessageType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType;
  if (!lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage.MessageType, &type metadata for RSVPMessage.MessageType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType;
  if (!lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage.MessageType, &type metadata for RSVPMessage.MessageType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType;
  if (!lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage.MessageType, &type metadata for RSVPMessage.MessageType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType;
  if (!lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage.MessageType, &type metadata for RSVPMessage.MessageType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType);
    return v0;
  }
  return v2;
}

void *outlined init with copy of GPKUserID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for GPKUserID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of GPKUserID?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for GPKUserID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

void *outlined init with copy of GPKMemberRole?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for GPKMemberRole();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of GPKMemberRole?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for GPKMemberRole();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

void RSVPMessage.MessageType.description.getter()
{
  __asm { BR              X8 }
}

uint64_t sub_23D3223C8()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("accept", 6uLL, 1)._countAndFlagsBits;
}

GroupKitCore::RSVPMessage::MessageType_optional __swiftcall RSVPMessage.MessageType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v3;

  switch(rawValue)
  {
    case 1:
      v3 = 0;
LABEL_12:
      *v1 = v3;
      return (GroupKitCore::RSVPMessage::MessageType_optional)rawValue;
    case 2:
      v3 = 1;
      goto LABEL_12;
    case 3:
      v3 = 2;
      goto LABEL_12;
    case 4:
      v3 = 3;
      goto LABEL_12;
    case 5:
      v3 = 4;
      goto LABEL_12;
  }
  *v1 = 5;
  return (GroupKitCore::RSVPMessage::MessageType_optional)rawValue;
}

void RSVPMessage.MessageType.rawValue.getter()
{
  __asm { BR              X8 }
}

uint64_t sub_23D3225DC()
{
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RSVPMessage.MessageType()
{
  lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RSVPMessage.MessageType()
{
  lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RSVPMessage.MessageType()
{
  lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance RSVPMessage.MessageType()
{
  lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKitCore::RSVPMessage::MessageType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RSVPMessage.MessageType(Swift::Int *a1)
{
  return RSVPMessage.MessageType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RSVPMessage.MessageType(_QWORD *a1@<X8>)
{
  uint64_t v1;

  RSVPMessage.MessageType.rawValue.getter();
  *a1 = v1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance RSVPMessage.MessageType()
{
  lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RSVPMessage.MessageType()
{
  lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for CustomStringConvertible.description.getter in conformance RSVPMessage.MessageType()
{
  RSVPMessage.MessageType.description.getter();
}

void RSVPMessage.messageType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t RSVPMessage.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for RSVPMessage() + 20);
  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

void *RSVPMessage.requesterID.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for RSVPMessage();
  return outlined init with copy of GPKUserID?((const void *)(v1 + *(int *)(v2 + 24)), a1);
}

void *RSVPMessage.role.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for RSVPMessage();
  return outlined init with copy of GPKMemberRole?((const void *)(v1 + *(int *)(v2 + 28)), a1);
}

void static RSVPMessage.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D322A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D322A78
                                                                                       + *((int *)qword_23D322AE0 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D322A88()
{
  uint64_t v1;

  return v1 == 0;
}

void RSVPMessage.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D322B40()
{
  return Hasher.combine<A>(_:)();
}

uint64_t RSVPMessage.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("messageType", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("requesterID", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("role", 4uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t RSVPMessage.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t RSVPMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage.CodingKeys, &type metadata for RSVPMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage.CodingKeys, &type metadata for RSVPMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage.CodingKeys, &type metadata for RSVPMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage.CodingKeys, &type metadata for RSVPMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPMessage.CodingKeys, &type metadata for RSVPMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t RSVPMessage.CodingKeys.intValue.getter()
{
  return 0;
}

void RSVPMessage.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D322FA0()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("messageType", 0xBuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RSVPMessage.CodingKeys(char *a1)
{
  char v1;

  static RSVPMessage.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RSVPMessage.CodingKeys()
{
  return RSVPMessage.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance RSVPMessage.CodingKeys(uint64_t a1)
{
  char *v1;

  RSVPMessage.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RSVPMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance RSVPMessage.CodingKeys()
{
  char *v0;

  RSVPMessage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RSVPMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RSVPMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance RSVPMessage.CodingKeys()
{
  return RSVPMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RSVPMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RSVPMessage.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RSVPMessage.CodingKeys()
{
  lazy protocol witness table accessor for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RSVPMessage.CodingKeys()
{
  lazy protocol witness table accessor for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t RSVPMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;

  v35 = a1;
  v54 = 0;
  v53 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
  v27 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v28 = (char *)v11 - v27;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v29 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)v11 - v29;
  v31 = type metadata accessor for GPKGroupID();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)v11 - v33;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RSVPMessage.CodingKeys>);
  v36 = *(_QWORD *)(v43 - 8);
  v37 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (_QWORD *)MEMORY[0x24BDAC7A8](v35);
  v40 = (char *)v11 - v37;
  v54 = v4;
  v53 = v1;
  v38 = v4[3];
  v39 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v38);
  lazy protocol witness table accessor for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v5 = *v41;
  v45 = &v52;
  v52 = v5;
  v42 = &v51;
  v51 = 0;
  lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType();
  v6 = v44;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v46 = v6;
  v47 = v6;
  if (v6)
  {
    v13 = v47;
    result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v40, v43);
    v14 = v13;
  }
  else
  {
    v23 = (int *)type metadata accessor for RSVPMessage();
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v34, &v41[v23[5]], v31);
    v24 = &v50;
    v50 = 1;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v7 = v46;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v25 = v7;
    v26 = v7;
    if (v7)
    {
      v12 = v26;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
      result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v40, v43);
      v14 = v12;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
      outlined init with copy of GPKUserID?(&v41[v23[6]], v30);
      v19 = &v49;
      v49 = 2;
      v20 = type metadata accessor for GPKUserID();
      lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
      v8 = v25;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      v21 = v8;
      v22 = v8;
      if (v8)
      {
        v11[2] = v22;
        outlined destroy of GPKUserID?((uint64_t)v30);
        return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v40, v43);
      }
      else
      {
        outlined destroy of GPKUserID?((uint64_t)v30);
        outlined init with copy of GPKMemberRole?(&v41[v23[7]], v28);
        v15 = &v48;
        v48 = 3;
        v16 = type metadata accessor for GPKMemberRole();
        lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
        v9 = v21;
        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
        v17 = v9;
        v18 = v9;
        if (v9)
          v11[1] = v18;
        outlined destroy of GPKMemberRole?((uint64_t)v28);
        return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v40, v43);
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole;
  if (!lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole)
  {
    v0 = type metadata accessor for GPKMemberRole();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DAD8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole;
  if (!lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole)
  {
    v0 = type metadata accessor for GPKMemberRole();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DAF0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole;
  if (!lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole)
  {
    v0 = type metadata accessor for GPKMemberRole();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DAE0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole;
  if (!lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole)
  {
    v0 = type metadata accessor for GPKMemberRole();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DAF8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole;
  if (!lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole)
  {
    v0 = type metadata accessor for GPKMemberRole();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DAE8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMemberRole and conformance GPKMemberRole);
    return v1;
  }
  return v3;
}

uint64_t RSVPMessage.init(from:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int *v49;
  unint64_t v50;
  _BYTE *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  _BYTE v61[2];
  _QWORD *v62;
  char v63;

  v35 = a2;
  v48 = a1;
  v62 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
  v36 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v37 = (char *)v14 - v36;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v38 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v39 = (char *)v14 - v38;
  v44 = 0;
  v40 = type metadata accessor for GPKGroupID();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v43 = (char *)v14 - v42;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RSVPMessage.CodingKeys>);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v44);
  v52 = (char *)v14 - v47;
  v49 = (int *)type metadata accessor for RSVPMessage();
  v50 = (*(_QWORD *)(*((_QWORD *)v49 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (_QWORD *)MEMORY[0x24BDAC7A8](v48);
  v51 = (char *)v14 - v50;
  v63 = 0;
  v62 = v4;
  v54 = v4[3];
  v55 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v54);
  lazy protocol witness table accessor for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys();
  v5 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v56 = v5;
  v57 = v5;
  if (v5)
  {
    v19 = v57;
  }
  else
  {
    v32 = v61;
    v61[0] = 0;
    lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType();
    v6 = v56;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v33 = v6;
    v34 = v6;
    if (v6)
    {
      v18 = v34;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v45);
      v19 = v18;
    }
    else
    {
      *v51 = v61[1];
      v29 = &v60;
      v60 = 1;
      lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
      v7 = v33;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v30 = v7;
      v31 = v7;
      if (v7)
      {
        v17 = v31;
        (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v45);
        v19 = v17;
      }
      else
      {
        v8 = &v51[v49[5]];
        v24 = 2;
        v63 = 2;
        (*(void (**)(_BYTE *, char *, uint64_t))(v41 + 32))(v8, v43, v40);
        v26 = type metadata accessor for GPKUserID();
        v25 = &v59;
        v59 = v24;
        lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
        v9 = v30;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        v27 = v9;
        v28 = v9;
        if (v9)
        {
          v16 = v28;
          (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v45);
          v19 = v16;
        }
        else
        {
          v10 = &v51[v49[6]];
          v63 = 6;
          outlined init with take of GPKUserID?(v39, v10);
          v21 = type metadata accessor for GPKMemberRole();
          v20 = &v58;
          v58 = 3;
          lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
          v11 = v27;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          v22 = v11;
          v23 = v11;
          if (!v11)
          {
            v12 = &v51[v49[7]];
            v63 = 14;
            outlined init with take of GPKMemberRole?(v37, v12);
            (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v45);
            outlined init with copy of RSVPMessage(v51, v35);
            __swift_destroy_boxed_opaque_existential_1(v48);
            return outlined destroy of RSVPMessage((uint64_t)v51);
          }
          v15 = v23;
          (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v45);
          v19 = v15;
        }
      }
    }
  }
  v14[1] = v19;
  result = __swift_destroy_boxed_opaque_existential_1(v48);
  if ((v63 & 2) != 0)
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v41 + 8))(&v51[v49[5]], v40);
  if ((v63 & 4) != 0)
    return outlined destroy of GPKUserID?((uint64_t)&v51[v49[6]]);
  return result;
}

void *outlined init with take of GPKUserID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for GPKUserID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

void *outlined init with take of GPKMemberRole?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for GPKMemberRole();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

_BYTE *outlined init with copy of RSVPMessage(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *__dst;
  _BYTE *__src;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  *a2 = *a1;
  v12 = (int *)type metadata accessor for RSVPMessage();
  v10 = v12[5];
  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v2 - 8) + 16))(&a2[v10], &a1[v10]);
  v13 = v12[6];
  v15 = type metadata accessor for GPKUserID();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t))(v16 + 48))(&a1[v13], 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
    memcpy(&a2[v13], &a1[v13], *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v16 + 16))();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(&a2[v13], 0, 1, v15);
  }
  __dst = &a2[v12[7]];
  __src = &a1[v12[7]];
  v8 = type metadata accessor for GPKMemberRole();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t))(v9 + 48))(__src, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 16))(__dst, __src, v8);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
  }
  return a2;
}

uint64_t outlined destroy of RSVPMessage(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v7 = (int *)type metadata accessor for RSVPMessage();
  v6 = v7[5];
  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v6);
  v8 = v7[6];
  v10 = type metadata accessor for GPKUserID();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v11 + 48))(a1 + v8, 1))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1 + v8, v10);
  v3 = a1 + v7[7];
  v4 = type metadata accessor for GPKMemberRole();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(v3, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  return a1;
}

void *RSVPMessage.init(messageType:groupID:requesterID:role:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, const void *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  int *v10;

  *a5 = *a1;
  v10 = (int *)type metadata accessor for RSVPMessage();
  v7 = v10[5];
  v5 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(&a5[v7], a2);
  outlined init with take of GPKUserID?(a3, &a5[v10[6]]);
  return outlined init with take of GPKMemberRole?(a4, &a5[v10[7]]);
}

uint64_t protocol witness for Decodable.init(from:) in conformance RSVPMessage@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return RSVPMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RSVPMessage(uint64_t a1)
{
  return RSVPMessage.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RSVPMessage()
{
  return RSVPMessage.description.getter();
}

unint64_t base witness table accessor for Equatable in RSVPMessage.MessageType()
{
  return lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType();
}

uint64_t initializeBufferWithCopyOfBuffer for RSVPQueue(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t destroy for RSVPQueue()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RSVPQueue(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t assignWithCopy for RSVPQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithTake for RSVPQueue(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for RSVPQueue(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    {
      v4 = *(_OWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (*(_QWORD *)(a1 + 8) < 0x100000000uLL)
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RSVPQueue(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_OWORD *)result = a2 + 0x80000000;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 8) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RSVPQueue()
{
  return &type metadata for RSVPQueue;
}

uint64_t getEnumTagSinglePayload for RSVPQueue.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for RSVPQueue.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for RSVPQueue.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for RSVPQueue.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RSVPQueue.CodingKeys()
{
  return &type metadata for RSVPQueue.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for RSVPMessage(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *__dst;
  char *__src;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v22;

  v22 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v22 & 0x20000) != 0)
  {
    v17 = *a2;
    swift_retain();
    *a1 = v17;
    return *a1 + ((v22 + 16) & ~(unint64_t)v22);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v12 = (char *)a1 + a3[5];
    v11 = (char *)a2 + a3[5];
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v12, v11);
    __dst = (char *)a1 + a3[6];
    __src = (char *)a2 + a3[6];
    v15 = type metadata accessor for GPKUserID();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v16 + 48))(__src, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, __src, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    v7 = (char *)a1 + a3[7];
    v8 = (char *)a2 + a3[7];
    v9 = type metadata accessor for GPKMemberRole();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v10 + 48))(v8, 1))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for RSVPMessage(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v7 = a2[5];
  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v7);
  v9 = a2[6];
  v11 = type metadata accessor for GPKUserID();
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1 + v9, 1))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1 + v9, v11);
  v4 = a1 + a2[7];
  v5 = type metadata accessor for GPKMemberRole();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(v4, 1);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_BYTE *initializeWithCopy for RSVPMessage(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *__dst;
  _BYTE *__src;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v11 = a3[5];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v3 - 8) + 16))(&a1[v11], &a2[v11]);
  v14 = a3[6];
  v16 = type metadata accessor for GPKUserID();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t))(v17 + 48))(&a2[v14], 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
    memcpy(&a1[v14], &a2[v14], *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v17 + 16))();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(&a1[v14], 0, 1, v16);
  }
  __dst = &a1[a3[7]];
  __src = &a2[a3[7]];
  v9 = type metadata accessor for GPKMemberRole();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t))(v10 + 48))(__src, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(__dst, __src, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  return a1;
}

_BYTE *assignWithCopy for RSVPMessage(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *__src;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_BYTE *, uint64_t, uint64_t);

  *a1 = *a2;
  v14 = a3[5];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v3 - 8) + 24))(&a1[v14], &a2[v14]);
  v17 = a3[6];
  v19 = type metadata accessor for GPKUserID();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48);
  if (((unsigned int (*)(_BYTE *, uint64_t))v21)(&a1[v17], 1))
  {
    if (v21(&a2[v17], 1, v19))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
      memcpy(&a1[v17], &a2[v17], *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      (*(void (**)(void))(v20 + 16))();
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(&a1[v17], 0, 1, v19);
    }
  }
  else if (v21(&a2[v17], 1, v19))
  {
    (*(void (**)(void))(v20 + 8))();
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
    memcpy(&a1[v17], &a2[v17], *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 24))(&a1[v17], &a2[v17], v19);
  }
  v10 = &a1[a3[7]];
  __src = &a2[a3[7]];
  v11 = type metadata accessor for GPKMemberRole();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48);
  if (((unsigned int (*)(_BYTE *, uint64_t))v13)(v10, 1))
  {
    if (v13(__src, 1, v11))
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
      memcpy(v10, __src, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16))(v10, __src, v11);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    }
  }
  else if (v13(__src, 1, v11))
  {
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v10, v11);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
    memcpy(v10, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 24))(v10, __src, v11);
  }
  return a1;
}

_BYTE *initializeWithTake for RSVPMessage(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *__dst;
  _BYTE *__src;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v11 = a3[5];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v11], &a2[v11]);
  v14 = a3[6];
  v16 = type metadata accessor for GPKUserID();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t))(v17 + 48))(&a2[v14], 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
    memcpy(&a1[v14], &a2[v14], *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v17 + 32))();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(&a1[v14], 0, 1, v16);
  }
  __dst = &a1[a3[7]];
  __src = &a2[a3[7]];
  v9 = type metadata accessor for GPKMemberRole();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t))(v10 + 48))(__src, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(__dst, __src, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  return a1;
}

_BYTE *assignWithTake for RSVPMessage(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *__src;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(_BYTE *, uint64_t, uint64_t);

  *a1 = *a2;
  v14 = a3[5];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v3 - 8) + 40))(&a1[v14], &a2[v14]);
  v17 = a3[6];
  v19 = type metadata accessor for GPKUserID();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48);
  if (((unsigned int (*)(_BYTE *, uint64_t))v21)(&a1[v17], 1))
  {
    if (v21(&a2[v17], 1, v19))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
      memcpy(&a1[v17], &a2[v17], *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      (*(void (**)(void))(v20 + 32))();
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(&a1[v17], 0, 1, v19);
    }
  }
  else if (v21(&a2[v17], 1, v19))
  {
    (*(void (**)(void))(v20 + 8))();
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
    memcpy(&a1[v17], &a2[v17], *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 40))(&a1[v17], &a2[v17], v19);
  }
  v10 = &a1[a3[7]];
  __src = &a2[a3[7]];
  v11 = type metadata accessor for GPKMemberRole();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48);
  if (((unsigned int (*)(_BYTE *, uint64_t))v13)(v10, 1))
  {
    if (v13(__src, 1, v11))
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
      memcpy(v10, __src, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v10, __src, v11);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    }
  }
  else if (v13(__src, 1, v11))
  {
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v10, v11);
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
    memcpy(v10, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 40))(v10, __src, v11);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for RSVPMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D325C70(unsigned __int8 *a1, unsigned int a2, int *a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  if (a2 == 251)
  {
    v3 = *a1 - 5;
    if (v3 < 0)
      v3 = -1;
    return (v3 + 1);
  }
  else
  {
    v9 = type metadata accessor for GPKGroupID();
    v10 = *(_QWORD *)(v9 - 8);
    if (a2 == *(_DWORD *)(v10 + 84))
    {
      return (*(unsigned int (**)(unsigned __int8 *, _QWORD, uint64_t))(v10 + 48))(&a1[a3[5]], a2, v9);
    }
    else
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
      v8 = *(_QWORD *)(v7 - 8);
      if (a2 == *(_DWORD *)(v8 + 84))
      {
        return (*(unsigned int (**)(unsigned __int8 *, _QWORD, uint64_t))(v8 + 48))(&a1[a3[6]], a2, v7);
      }
      else
      {
        v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
        v6 = *(_QWORD *)(v5 - 8);
        if (a2 == *(_DWORD *)(v6 + 84))
          return (*(unsigned int (**)(unsigned __int8 *, _QWORD, uint64_t))(v6 + 48))(&a1[a3[7]], a2, v5);
        else
          __break(1u);
      }
    }
  }
  return v11;
}

uint64_t storeEnumTagSinglePayload for RSVPMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_23D325E04(_BYTE *result, unsigned int a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  v9 = result;
  if (a3 == 251)
  {
    *result = a2 + 4;
  }
  else
  {
    v7 = type metadata accessor for GPKGroupID();
    v8 = *(_QWORD *)(v7 - 8);
    if (a3 == *(_DWORD *)(v8 + 84))
    {
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD, _QWORD, uint64_t))(v8 + 56))(&v9[a4[5]], a2, a2, v7);
    }
    else
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
      v6 = *(_QWORD *)(v5 - 8);
      if (a3 == *(_DWORD *)(v6 + 84))
      {
        return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD, _QWORD, uint64_t))(v6 + 56))(&v9[a4[6]], a2, a2, v5);
      }
      else
      {
        result = (_BYTE *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
        v4 = *((_QWORD *)result - 1);
        if (a3 == *(_DWORD *)(v4 + 84))
          return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD, _QWORD, _BYTE *))(v4 + 56))(&v9[a4[7]], a2, a2, result);
        else
          __break(1u);
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for RSVPMessage()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    v4 = type metadata accessor for GPKUserID?();
    if (v1 <= 0x3F)
    {
      v4 = type metadata accessor for GPKMemberRole?();
      if (v2 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v4;
}

uint64_t type metadata accessor for GPKUserID?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GPKUserID?;
  if (!lazy cache variable for type metadata for GPKUserID?)
  {
    type metadata accessor for GPKUserID();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GPKUserID?);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for GPKMemberRole?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GPKMemberRole?;
  if (!lazy cache variable for type metadata for GPKMemberRole?)
  {
    type metadata accessor for GPKMemberRole();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GPKMemberRole?);
      return v1;
    }
  }
  return v4;
}

uint64_t getEnumTagSinglePayload for RSVPMessage.MessageType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v7 = ((a2 + 4) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 5;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for RSVPMessage.MessageType(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for RSVPMessage.MessageType(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for RSVPMessage.MessageType(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RSVPMessage.MessageType()
{
  return &type metadata for RSVPMessage.MessageType;
}

uint64_t getEnumTagSinglePayload for RSVPMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for RSVPMessage.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for RSVPMessage.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for RSVPMessage.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RSVPMessage.CodingKeys()
{
  return &type metadata for RSVPMessage.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in RSVPMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in RSVPMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in RSVPMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPMessage.CodingKeys and conformance RSVPMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in RSVPQueue.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in RSVPQueue.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys();
}

unint64_t base witness table accessor for Equatable in RSVPQueue.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPQueue.CodingKeys and conformance RSVPQueue.CodingKeys();
}

uint64_t variable initialization expression of Transaction.id()
{
  return UUID.init()();
}

uint64_t Transaction.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t Transaction.name.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Transaction() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for Transaction()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for Transaction;
  if (!type metadata singleton initialization cache for Transaction)
    return swift_getSingletonMetadata();
  return v1;
}

_QWORD *Transaction.retryScheduler.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for Transaction();
  return outlined init with copy of RetryScheduler?((_QWORD *)(v1 + *(int *)(v2 + 24)), a1);
}

_QWORD *outlined init with copy of RetryScheduler?(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  if (a1[3])
  {
    v2 = a1[3];
    a2[3] = v2;
    a2[4] = a1[4];
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    memcpy(a2, a1, 0x28uLL);
  }
  return a2;
}

uint64_t Transaction.init(name:retryScheduler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v16 = a4;
  v13 = a1;
  v18 = a2;
  v17 = (_QWORD *)a3;
  v24 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  v14 = type metadata accessor for Transaction();
  v12 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v19 = (uint64_t)&v11 - v12;
  v24 = (char *)&v11 - v12;
  v22 = v4;
  v23 = v5;
  v21 = v6;
  UUID.init()();
  swift_bridgeObjectRetain();
  v7 = v17;
  v8 = v18;
  v9 = (_QWORD *)(v19 + *(int *)(v14 + 20));
  *v9 = v13;
  v9[1] = v8;
  v15 = v20;
  outlined init with copy of RetryScheduler?(v7, v20);
  outlined init with take of RetryScheduler?(v15, (void *)(v19 + *(int *)(v14 + 24)));
  outlined init with copy of Transaction(v19, v16);
  outlined destroy of RetryScheduler?((uint64_t)v17);
  swift_bridgeObjectRelease();
  return outlined destroy of Transaction(v19);
}

void *outlined init with take of RetryScheduler?(const void *a1, void *a2)
{
  memcpy(a2, a1, 0x28uLL);
  return a2;
}

uint64_t outlined init with copy of Transaction(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v11 = type metadata accessor for Transaction();
  v3 = (_QWORD *)(a1 + *(int *)(v11 + 20));
  v9 = (_QWORD *)(a2 + *(int *)(v11 + 20));
  *v9 = *v3;
  v10 = v3[1];
  swift_bridgeObjectRetain();
  v9[1] = v10;
  v12 = *(int *)(v11 + 24);
  if (*(_QWORD *)(a1 + v12 + 24))
  {
    v4 = *(_QWORD *)(a1 + v12 + 24);
    v5 = a2 + v12;
    *(_QWORD *)(v5 + 24) = v4;
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(a1 + v12 + 32);
    (**(void (***)(void))(v4 - 8))();
  }
  else
  {
    memcpy((void *)(a2 + v12), (const void *)(a1 + v12), 0x28uLL);
  }
  return a2;
}

uint64_t outlined destroy of RetryScheduler?(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t outlined destroy of Transaction(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v3 = type metadata accessor for Transaction();
  swift_bridgeObjectRelease();
  v5 = *(int *)(v3 + 24);
  if (*(_QWORD *)(a1 + v5 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1 + v5);
  return a1;
}

uint64_t Transaction.perform<A>(_:shouldRetry:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v7[26] = v6;
  v7[25] = a6;
  v7[24] = a5;
  v7[23] = a4;
  v7[22] = a3;
  v7[21] = a2;
  v7[20] = a1;
  v7[18] = v7;
  v7[12] = 0;
  v7[13] = 0;
  v7[14] = 0;
  v7[15] = 0;
  v7[19] = 0;
  v8 = type metadata accessor for LogSubsystem();
  v7[27] = v8;
  v7[28] = *(_QWORD *)(v8 - 8);
  v7[29] = swift_task_alloc();
  v7[12] = a2;
  v7[13] = a3;
  v7[14] = a4;
  v7[15] = a5;
  v7[19] = v6;
  return swift_task_switch();
}

uint64_t Transaction.perform<A>(_:shouldRetry:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  _QWORD *v4;
  _QWORD *v6;
  int *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = v0[29];
  v13 = v0[28];
  v15 = v0[27];
  v17 = v0[26];
  v0[18] = v0;
  v0[16] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[17] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Performing ", 0xBuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v16 = type metadata accessor for Transaction();
  lazy protocol witness table accessor for type Transaction and conformance Transaction();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Transaction.swift", 0x1EuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of RetryScheduler?((_QWORD *)(v17 + *(int *)(v16 + 24)), v0 + 7);
  if (v0[10])
  {
    outlined init with take of RetryScheduler(v12 + 7, v12 + 2);
    v9 = v12[5];
    v10 = v12[6];
    __swift_project_boxed_opaque_existential_1(v12 + 2, v9);
    v11 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 + 16) + **(int **)(v10 + 16));
    v4 = (_QWORD *)swift_task_alloc();
    v12[30] = v4;
    *v4 = v12[18];
    v4[1] = Transaction.perform<A>(_:shouldRetry:);
    return v11(v12[20], v12[21], v12[22], v12[23], v12[24], v12[25], v9, v10);
  }
  else
  {
    v7 = (int *)v12[21];
    outlined destroy of RetryScheduler?((uint64_t)(v12 + 7));
    v8 = (uint64_t (*)(_QWORD))((char *)v7 + *v7);
    v6 = (_QWORD *)swift_task_alloc();
    v12[32] = v6;
    *v6 = v12[18];
    v6[1] = Transaction.perform<A>(_:shouldRetry:);
    return v8(v12[20]);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 144) = *v1;
  *(_QWORD *)(v2 + 248) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 144) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 144) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 144) = *v1;
  *(_QWORD *)(v2 + 264) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 144) = v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 144) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 144) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 144) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 144) = v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 144) + 8))();
}

unint64_t lazy protocol witness table accessor for type Transaction and conformance Transaction()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Transaction and conformance Transaction;
  if (!lazy protocol witness table cache variable for type Transaction and conformance Transaction)
  {
    v0 = type metadata accessor for Transaction();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for Transaction, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Transaction and conformance Transaction);
    return v1;
  }
  return v3;
}

void *outlined init with take of RetryScheduler(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t Transaction.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t *v5;
  Swift::String v6;
  uint64_t v8;
  unint64_t v9;
  void *object;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v28 = 0;
  v15 = 0;
  v13 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v13 - 8);
  v9 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v12 = (char *)&v8 - v9;
  v28 = v0;
  v1 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v22 = &v26;
  v26 = v1;
  v27 = v2;
  v20 = 1;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<Transaction: ", 0xEuLL, 1);
  object = v3._object;
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v12, v16, v13);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v12, v13);
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" - ", 3uLL, v20 & 1);
  v14 = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  v5 = (uint64_t *)(v16 + *(int *)(type metadata accessor for Transaction() + 20));
  v17 = *v5;
  v18 = v5[1];
  swift_bridgeObjectRetain();
  v19 = v25;
  v25[0] = v17;
  v25[1] = v18;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(">", 1uLL, v20 & 1);
  v21 = v6._object;
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  v24 = v26;
  v23 = v27;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x242635504](MEMORY[0x24BDCEAB8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x242635504](MEMORY[0x24BDCEA70], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x242635504](MEMORY[0x24BDCEAA8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x242635504](MEMORY[0x24BDCEA88], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Transaction()
{
  return Transaction.description.getter();
}

unint64_t initializeBufferWithCopyOfBuffer for Transaction(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  uint64_t v8;
  _QWORD *__dst;
  _QWORD *__src;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    v3 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v4 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v8 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v7 + 1) = v8;
    __dst = (_QWORD *)((char *)a1 + *(int *)(a3 + 24));
    __src = (uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    if (__src[3])
    {
      v5 = __src[3];
      __dst[3] = v5;
      __dst[4] = __src[4];
      (**(void (***)(void))(v5 - 8))();
    }
    else
    {
      memcpy(__dst, __src, 0x28uLL);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for Transaction(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  result = a1;
  v6 = *(int *)(a2 + 24);
  if (*(_QWORD *)(a1 + v6 + 24))
    return __swift_destroy_boxed_opaque_existential_1(a1 + v6);
  return result;
}

uint64_t initializeWithCopy for Transaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v13;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v4 = (_QWORD *)(a2 + *(int *)(a3 + 20));
  v9 = (_QWORD *)(a1 + *(int *)(a3 + 20));
  *v9 = *v4;
  v10 = v4[1];
  swift_bridgeObjectRetain();
  v9[1] = v10;
  v13 = *(int *)(a3 + 24);
  if (*(_QWORD *)(a2 + v13 + 24))
  {
    v5 = *(_QWORD *)(a2 + v13 + 24);
    v6 = a1 + v13;
    *(_QWORD *)(v6 + 24) = v5;
    *(_QWORD *)(v6 + 32) = *(_QWORD *)(a2 + v13 + 32);
    (**(void (***)(void))(v5 - 8))();
  }
  else
  {
    memcpy((void *)(a1 + v13), (const void *)(a2 + v13), 0x28uLL);
  }
  return a1;
}

uint64_t assignWithCopy for Transaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v13;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v4 = (_QWORD *)(a2 + *(int *)(a3 + 20));
  v9 = (_QWORD *)(a1 + *(int *)(a3 + 20));
  *v9 = *v4;
  v10 = v4[1];
  swift_bridgeObjectRetain();
  v9[1] = v10;
  swift_bridgeObjectRelease();
  v13 = *(int *)(a3 + 24);
  if (*(_QWORD *)(a1 + v13 + 24))
  {
    if (*(_QWORD *)(a2 + v13 + 24))
    {
      __swift_assign_boxed_opaque_existential_1(a1 + v13, (uint64_t *)(a2 + v13));
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + v13);
      memcpy((void *)(a1 + v13), (const void *)(a2 + v13), 0x28uLL);
    }
  }
  else if (*(_QWORD *)(a2 + v13 + 24))
  {
    v5 = *(_QWORD *)(a2 + v13 + 24);
    v6 = a1 + v13;
    *(_QWORD *)(v6 + 24) = v5;
    *(_QWORD *)(v6 + 32) = *(_QWORD *)(a2 + v13 + 32);
    (**(void (***)(void))(v5 - 8))();
  }
  else
  {
    memcpy((void *)(a1 + v13), (const void *)(a2 + v13), 0x28uLL);
  }
  return a1;
}

uint64_t initializeWithTake for Transaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  memcpy((void *)(a1 + *(int *)(a3 + 24)), (const void *)(a2 + *(int *)(a3 + 24)), 0x28uLL);
  return a1;
}

uint64_t assignWithTake for Transaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;

  v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (_QWORD *)(a2 + *(int *)(a3 + 20));
  v5 = (_QWORD *)(a1 + *(int *)(a3 + 20));
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 24);
  if (*(_QWORD *)(a1 + v10 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1 + v10);
  memcpy((void *)(a1 + v10), (const void *)(a2 + v10), 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for Transaction()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3283F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for Transaction()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3284F0(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for Transaction()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t IDSMessageEnvelope.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t IDSMessageEnvelope.domain.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + *(int *)(a1 + 44));
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t IDSMessageEnvelope.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String string;
  Swift::Int v7;
  char v8;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "value";
  *(_QWORD *)(v3 + 8) = 5;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "domain";
  *(_QWORD *)(v3 + 32) = 6;
  *(_BYTE *)(v3 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, string);
  swift_bridgeObjectRelease();
  if (!v7)
  {
    v8 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v8 & 1;
  }
  if (v7 == 1)
  {
    v8 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t IDSMessageEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  char v6;

  swift_bridgeObjectRetain();
  v6 = IDSMessageEnvelope.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 2)
    return 2;
  else
    return v6 & 1;
}

uint64_t IDSMessageEnvelope.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t IDSMessageEnvelope.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t IDSMessageEnvelope.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("domain", 6uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("value", 5uLL, 1)._countAndFlagsBits;
}

uint64_t IDSMessageEnvelope.CodingKeys.stringValue.getter(char a1)
{
  return IDSMessageEnvelope.CodingKeys.rawValue.getter(a1 & 1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IDSMessageEnvelope<A>.CodingKeys()
{
  MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>.CodingKeys);
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance IDSMessageEnvelope<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>.CodingKeys, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance IDSMessageEnvelope<A>.CodingKeys()
{
  MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>.CodingKeys);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance IDSMessageEnvelope<A>.CodingKeys()
{
  MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>.CodingKeys);
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance IDSMessageEnvelope<A>.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = IDSMessageEnvelope.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance IDSMessageEnvelope<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;
  uint64_t v3;

  result = IDSMessageEnvelope.CodingKeys.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IDSMessageEnvelope<A>.CodingKeys()
{
  _BYTE *v0;

  return IDSMessageEnvelope.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IDSMessageEnvelope<A>.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = IDSMessageEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance IDSMessageEnvelope<A>.CodingKeys()
{
  return IDSMessageEnvelope.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance IDSMessageEnvelope<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = IDSMessageEnvelope.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IDSMessageEnvelope<A>.CodingKeys()
{
  MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>.CodingKeys);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IDSMessageEnvelope<A>.CodingKeys()
{
  MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>.CodingKeys);
  return CodingKey.debugDescription.getter();
}

uint64_t default argument 1 of IDSMessageEnvelope.init(value:domain:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpk", 3uLL, 1)._countAndFlagsBits;
}

uint64_t IDSMessageEnvelope.init(value:domain:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;

  v23 = a5;
  v26 = a1;
  v22 = a2;
  v24 = a3;
  v28 = a4;
  v33 = 0;
  v32 = 0;
  v30 = 0;
  v31 = 0;
  v34 = a4;
  v25 = *(_QWORD *)(a4 - 8);
  v20 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v21 = (char *)&v19 - v20;
  v29 = type metadata accessor for IDSMessageEnvelope(0, v5, v6, v7);
  v8 = MEMORY[0x24BDAC7A8](v21);
  v27 = (uint64_t)&v19 - v9;
  v33 = (char *)&v19 - v9;
  v32 = v10;
  v30 = v22;
  v31 = v24;
  (*(void (**)(double))(v11 + 16))(v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v27, v21, v28);
  swift_bridgeObjectRetain();
  v12 = v27;
  v13 = v23;
  v14 = v24;
  v15 = v28;
  v16 = v29;
  v17 = (_QWORD *)(v27 + *(int *)(v29 + 44));
  *v17 = v22;
  v17[1] = v14;
  outlined init with copy of IDSMessageEnvelope<A>(v12, v13, v15, v16);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v28);
  result = v27;
  outlined destroy of IDSMessageEnvelope<A>(v27, v28);
  return result;
}

uint64_t type metadata accessor for IDSMessageEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IDSMessageEnvelope);
}

uint64_t outlined init with copy of IDSMessageEnvelope<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;

  (*(void (**)(void))(*(_QWORD *)(a3 - 8) + 16))();
  v4 = (_QWORD *)(a1 + *(int *)(a4 + 44));
  v9 = (_QWORD *)(a2 + *(int *)(a4 + 44));
  *v9 = *v4;
  v10 = v4[1];
  swift_bridgeObjectRetain();
  result = a2;
  v9[1] = v10;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IDSMessageEnvelope<A>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(a2 - 8) + 8))();
  swift_bridgeObjectRelease();
}

uint64_t IDSMessageEnvelope.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t result;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  _QWORD *v58;
  char v59;
  char *v60;
  char *v61;
  uint64_t v62;

  v33 = a5;
  v44 = a1;
  v39 = a2;
  v37 = a3;
  v38 = a4;
  v61 = 0;
  v60 = 0;
  v58 = 0;
  v62 = a2;
  v34 = *(_QWORD *)(a2 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v36 = (char *)v23 - v35;
  v49 = type metadata accessor for IDSMessageEnvelope.CodingKeys(255, v5, v6, v7);
  v50 = MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>.CodingKeys);
  v40 = 0;
  v41 = type metadata accessor for KeyedDecodingContainer();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v40);
  v48 = (char *)v23 - v43;
  v61 = (char *)v23 - v43;
  v45 = type metadata accessor for IDSMessageEnvelope(v8, v9, v10, v11);
  v46 = (*(_QWORD *)(*(_QWORD *)(v45 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (_QWORD *)MEMORY[0x24BDAC7A8](v44);
  v47 = (uint64_t)v23 - v46;
  v60 = (char *)v23 - v46;
  v59 = 0;
  v58 = v12;
  v52 = v12[3];
  v53 = v12[4];
  __swift_project_boxed_opaque_existential_1(v12, v52);
  v13 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v54 = v13;
  v55 = v13;
  if (v13)
  {
    v25 = v55;
  }
  else
  {
    v57 = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v31 = 0;
    v32 = 0;
    v26 = 1;
    v59 = 1;
    (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v47, v36, v39);
    v14 = v31;
    v56 = v26;
    v15 = KeyedDecodingContainer.decode(_:forKey:)();
    v27 = v14;
    v28 = v15;
    v29 = v16;
    v30 = v14;
    if (!v14)
    {
      v17 = v41;
      v18 = v48;
      v19 = v42;
      v20 = v29;
      v21 = (uint64_t *)(v47 + *(int *)(v45 + 44));
      v59 = 3;
      *v21 = v28;
      v21[1] = v20;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v17);
      outlined init with copy of IDSMessageEnvelope<A>(v47, v33, v39, v45);
      __swift_destroy_boxed_opaque_existential_1(v44);
      result = v47;
      outlined destroy of IDSMessageEnvelope<A>(v47, v39);
      return result;
    }
    v24 = v30;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
    v25 = v24;
  }
  v23[1] = v25;
  result = __swift_destroy_boxed_opaque_existential_1(v44);
  if ((v59 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v47, v39);
  return result;
}

uint64_t type metadata accessor for IDSMessageEnvelope.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IDSMessageEnvelope.CodingKeys);
}

uint64_t IDSMessageEnvelope.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;

  v15 = a1;
  v13 = a2;
  v36 = 0;
  v35 = 0;
  v34 = 0;
  v26 = *(_QWORD *)(a2 + 16);
  v37 = v26;
  v23 = *(_QWORD *)(v26 - 8);
  v14 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v29 = (char *)v11 - v14;
  v4 = *(_QWORD *)(v3 + 24);
  v27 = *(_QWORD *)(v3 + 32);
  v18 = type metadata accessor for IDSMessageEnvelope.CodingKeys(255, v5, v4, v27);
  v19 = MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>.CodingKeys);
  v25 = type metadata accessor for KeyedEncodingContainer();
  v16 = *(_QWORD *)(v25 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v22 = (char *)v11 - v17;
  v36 = (char *)v11 - v17;
  v35 = v6;
  v34 = v2;
  v20 = v6[3];
  v21 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v20);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v29, v24, v26);
  v7 = v28;
  v33 = 0;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v30 = v7;
  v31 = v7;
  if (v7)
  {
    v11[1] = v31;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v22, v25);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v26);
    v8 = v30;
    v9 = (_QWORD *)(v24 + *(int *)(v13 + 44));
    v11[3] = *v9;
    v11[4] = v9[1];
    swift_bridgeObjectRetain();
    v32 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[5] = v8;
    v12 = v8;
    if (v8)
      v11[0] = v12;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v22, v25);
  }
}

uint64_t base witness table accessor for Equatable in IDSMessageEnvelope<A>.CodingKeys(uint64_t a1)
{
  return MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>.CodingKeys, a1);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in IDSMessageEnvelope<A>.CodingKeys(uint64_t a1)
{
  return MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>.CodingKeys, a1);
}

uint64_t base witness table accessor for CustomStringConvertible in IDSMessageEnvelope<A>.CodingKeys(uint64_t a1)
{
  return MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>.CodingKeys, a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IDSMessageEnvelope<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return IDSMessageEnvelope.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IDSMessageEnvelope<A>(uint64_t a1, uint64_t a2)
{
  return IDSMessageEnvelope.encode(to:)(a1, a2);
}

uint64_t type metadata instantiation function for IDSMessageEnvelope()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for IDSMessageEnvelope()
{
  unint64_t v0;
  uint64_t v2;

  v2 = swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for IDSMessageEnvelope(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v12;

  v12 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v12 & 0x20000) != 0)
  {
    v7 = *a2;
    swift_retain();
    *a1 = v7;
    return *a1 + ((v12 + 16) & ~(unint64_t)v12);
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))(a1, a2);
    v3 = *(int *)(a3 + 44);
    v5 = (char *)a1 + v3;
    *(_QWORD *)((char *)a1 + v3) = *(uint64_t *)((char *)a2 + v3);
    v6 = *(uint64_t *)((char *)a2 + v3 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v5 + 1) = v6;
    return (unint64_t)a1;
  }
}

uint64_t destroy for IDSMessageEnvelope(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IDSMessageEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  v3 = (_QWORD *)(a2 + *(int *)(a3 + 44));
  v8 = (_QWORD *)(a1 + *(int *)(a3 + 44));
  *v8 = *v3;
  v9 = v3[1];
  swift_bridgeObjectRetain();
  result = a1;
  v8[1] = v9;
  return result;
}

uint64_t assignWithCopy for IDSMessageEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v7;
  uint64_t v8;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  v3 = (_QWORD *)(a2 + *(int *)(a3 + 44));
  v7 = (_QWORD *)(a1 + *(int *)(a3 + 44));
  *v7 = *v3;
  v8 = v3[1];
  swift_bridgeObjectRetain();
  v7[1] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for IDSMessageEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  result = *(__n128 *)(a2 + *(int *)(a3 + 44));
  *(__n128 *)(a1 + *(int *)(a3 + 44)) = result;
  return result;
}

uint64_t assignWithTake for IDSMessageEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  v3 = (_QWORD *)(a2 + *(int *)(a3 + 44));
  v4 = (_QWORD *)(a1 + *(int *)(a3 + 44));
  *v4 = *v3;
  v4[1] = v3[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSMessageEnvelope()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D329B5C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  if (a2 == *(_DWORD *)(v7 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 44) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 44) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for IDSMessageEnvelope()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D329C58(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a4 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  if (a3 == *(_DWORD *)(v5 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(result, a2, a2, v4);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(result + *(int *)(a4 + 44) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata instantiation function for IDSMessageEnvelope.CodingKeys()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t getEnumTagSinglePayload for IDSMessageEnvelope.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for IDSMessageEnvelope.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for IDSMessageEnvelope.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for IDSMessageEnvelope.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x242635498](a1, v6, a5);
}

uint64_t InvitationIDSMessage.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t InvitationIDSMessage.memberHandles.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for InvitationIDSMessage() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for InvitationIDSMessage()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for InvitationIDSMessage;
  if (!type metadata singleton initialization cache for InvitationIDSMessage)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t InvitationIDSMessage.groupDomain.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for InvitationIDSMessage() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t InvitationIDSMessage.invitationToken.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for InvitationIDSMessage() + 28);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t InvitationIDSMessage.groupBlobEnvelope.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for InvitationIDSMessage();
  return outlined init with copy of GroupBlobEnvelope(v1 + *(int *)(v2 + 32), a1);
}

uint64_t outlined init with copy of GroupBlobEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  int *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v30 = *(_QWORD *)(a1 + 8);
  v31 = *(_QWORD *)(a1 + 16);
  outlined copy of Data._Representation(v30, v31);
  *(_QWORD *)(a2 + 8) = v30;
  *(_QWORD *)(a2 + 16) = v31;
  v32 = *(_QWORD *)(a1 + 24);
  v33 = *(_QWORD *)(a1 + 32);
  outlined copy of Data._Representation(v32, v33);
  *(_QWORD *)(a2 + 24) = v32;
  *(_QWORD *)(a2 + 32) = v33;
  v38 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v34 = v38[7];
  v36 = type metadata accessor for UnknownStorage();
  v37 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
  v37(a2 + v34, a1 + v34);
  v39 = v38[8];
  v41 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v42 + 48))(a1 + v39, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a2 + v39), (const void *)(a1 + v39), *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v29 = *(_QWORD *)(a1 + v39);
    swift_bridgeObjectRetain();
    *(_QWORD *)(a2 + v39) = v29;
    ((void (*)(uint64_t, uint64_t, uint64_t))v37)(a2 + v39 + *(int *)(v41 + 20), a1 + v39 + *(int *)(v41 + 20), v36);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(a2 + v39, 0, 1, v41);
  }
  __dst = (_QWORD *)(a2 + v38[9]);
  __src = (uint64_t *)(a1 + v38[9]);
  v27 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v28 + 48))(__src, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v17 = *__src;
    v18 = __src[1];
    outlined copy of Data._Representation(*__src, v18);
    *__dst = v17;
    __dst[1] = v18;
    v19 = __src[2];
    v20 = __src[3];
    outlined copy of Data._Representation(v19, v20);
    __dst[2] = v19;
    __dst[3] = v20;
    v21 = __src[4];
    v22 = __src[5];
    outlined copy of Data._Representation(v21, v22);
    __dst[4] = v21;
    __dst[5] = v22;
    v23 = __src[6];
    v24 = __src[7];
    outlined copy of Data._Representation(v23, v24);
    __dst[6] = v23;
    __dst[7] = v24;
    ((void (*)(char *, char *, uint64_t))v37)((char *)__dst + *(int *)(v27 + 32), (char *)__src + *(int *)(v27 + 32), v36);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
  }
  v13 = (_QWORD *)(a2 + v38[10]);
  v14 = (uint64_t *)(a1 + v38[10]);
  v15 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v16 + 48))(v14, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v7 = *v14;
    v8 = v14[1];
    outlined copy of Data._Representation(*v14, v8);
    *v13 = v7;
    v13[1] = v8;
    v9 = v14[2];
    v10 = v14[3];
    outlined copy of Data._Representation(v9, v10);
    v13[2] = v9;
    v13[3] = v10;
    v11 = v14[4];
    v12 = v14[5];
    outlined copy of Data._Representation(v11, v12);
    v13[4] = v11;
    v13[5] = v12;
    ((void (*)(char *, char *, uint64_t))v37)((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v36);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v5 = type metadata accessor for GroupBlobEnvelope();
  result = a2;
  *(_DWORD *)(a2 + *(int *)(v5 + 20)) = *(_DWORD *)(a1 + *(int *)(v5 + 20));
  return result;
}

void static InvitationIDSMessage.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D32A828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D32A880
                                                                                       + *((int *)qword_23D32A8F8 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D32A890()
{
  uint64_t v1;

  return v1 == 0;
}

void InvitationIDSMessage.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D32A95C()
{
  return Hasher.combine<A>(_:)();
}

uint64_t InvitationIDSMessage.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  unsigned __int8 v7;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 0;
LABEL_12:
    swift_bridgeObjectRelease();
    return v7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("memberHandles", 0xDuLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 1;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupDomain", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 2;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("invitationToken", 0xFuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 3;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupBlobEnvelope", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 4;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 5;
}

uint64_t InvitationIDSMessage.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t InvitationIDSMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InvitationIDSMessage.CodingKeys, &type metadata for InvitationIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InvitationIDSMessage.CodingKeys, &type metadata for InvitationIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InvitationIDSMessage.CodingKeys, &type metadata for InvitationIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InvitationIDSMessage.CodingKeys, &type metadata for InvitationIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InvitationIDSMessage.CodingKeys, &type metadata for InvitationIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t InvitationIDSMessage.CodingKeys.intValue.getter()
{
  return 0;
}

void InvitationIDSMessage.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D32AE6C()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InvitationIDSMessage.CodingKeys(char *a1)
{
  char v1;

  static InvitationIDSMessage.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance InvitationIDSMessage.CodingKeys()
{
  return InvitationIDSMessage.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance InvitationIDSMessage.CodingKeys(uint64_t a1)
{
  char *v1;

  InvitationIDSMessage.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InvitationIDSMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance InvitationIDSMessage.CodingKeys()
{
  char *v0;

  InvitationIDSMessage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InvitationIDSMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InvitationIDSMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InvitationIDSMessage.CodingKeys()
{
  return InvitationIDSMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance InvitationIDSMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InvitationIDSMessage.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InvitationIDSMessage.CodingKeys()
{
  lazy protocol witness table accessor for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InvitationIDSMessage.CodingKeys()
{
  lazy protocol witness table accessor for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InvitationIDSMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  _QWORD v58[2];
  char v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  _QWORD *v64;

  v41 = a1;
  v64 = 0;
  v63 = 0;
  v36 = 0;
  v37 = type metadata accessor for GroupBlobEnvelope();
  v38 = (*(_QWORD *)(*(_QWORD *)(v37 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v39 = (uint64_t)v11 - v38;
  v51 = type metadata accessor for GPKGroupID();
  v47 = *(_QWORD *)(v51 - 8);
  v40 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v51);
  v53 = (char *)v11 - v40;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InvitationIDSMessage.CodingKeys>);
  v42 = *(_QWORD *)(v50 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v41);
  v46 = (char *)v11 - v43;
  v64 = v2;
  v63 = v1;
  v44 = v2[3];
  v45 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v44);
  lazy protocol witness table accessor for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v53, v48, v51);
  v49 = &v62;
  v62 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v52;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v54 = v3;
  v55 = v3;
  if (v3)
  {
    v14 = v55;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v53, v51);
    result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v50);
    v15 = v14;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v53, v51);
    v29 = (int *)type metadata accessor for InvitationIDSMessage();
    v30 = *(_QWORD *)(v48 + v29[5]);
    swift_bridgeObjectRetain();
    v33 = &v61;
    v61 = v30;
    v31 = &v60;
    v60 = 1;
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : String]);
    lazy protocol witness table accessor for type [GPKUserID : String] and conformance <> [A : B]();
    v4 = v54;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v34 = v4;
    v35 = v4;
    if (v4)
    {
      v13 = v35;
      outlined destroy of [GPKUserID : String]();
      result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v50);
      v15 = v13;
    }
    else
    {
      outlined destroy of [GPKUserID : String]();
      v5 = v34;
      v6 = (uint64_t *)(v48 + v29[6]);
      v25 = *v6;
      v26 = v6[1];
      swift_bridgeObjectRetain();
      v59 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v27 = v5;
      v28 = v5;
      if (v5)
      {
        v12 = v28;
        swift_bridgeObjectRelease();
        result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v50);
        v15 = v12;
      }
      else
      {
        swift_bridgeObjectRelease();
        v7 = (uint64_t *)(v48 + v29[7]);
        v19 = *v7;
        v20 = v7[1];
        outlined copy of Data._Representation(v19, v20);
        v22 = v58;
        v58[0] = v19;
        v58[1] = v20;
        v21 = &v57;
        v57 = 3;
        lazy protocol witness table accessor for type Data and conformance Data();
        v8 = v27;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v23 = v8;
        v24 = v8;
        if (v8)
        {
          v11[1] = v24;
          outlined destroy of Data((uint64_t)v58);
          return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v50);
        }
        else
        {
          outlined destroy of Data((uint64_t)v58);
          outlined init with copy of GroupBlobEnvelope(v48 + v29[8], v39);
          v16 = &v56;
          v56 = 4;
          lazy protocol witness table accessor for type GroupBlobEnvelope and conformance GroupBlobEnvelope();
          v9 = v23;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v17 = v9;
          v18 = v9;
          if (v9)
            v11[0] = v18;
          outlined destroy of GroupBlobEnvelope(v39);
          return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v46, v50);
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BDCDE28], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BDCDE48], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BDCDE20], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type GroupBlobEnvelope and conformance GroupBlobEnvelope()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupBlobEnvelope and conformance GroupBlobEnvelope;
  if (!lazy protocol witness table cache variable for type GroupBlobEnvelope and conformance GroupBlobEnvelope)
  {
    v0 = type metadata accessor for GroupBlobEnvelope();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GroupBlobEnvelope, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupBlobEnvelope and conformance GroupBlobEnvelope);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupBlobEnvelope and conformance GroupBlobEnvelope;
  if (!lazy protocol witness table cache variable for type GroupBlobEnvelope and conformance GroupBlobEnvelope)
  {
    v0 = type metadata accessor for GroupBlobEnvelope();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GroupBlobEnvelope, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupBlobEnvelope and conformance GroupBlobEnvelope);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of GroupBlobEnvelope(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v12;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v9 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v6 = v9[7];
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(a1 + v6);
  v10 = v9[8];
  v12 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(a1 + v10, 1))
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v8)(a1 + v10 + *(int *)(v12 + 20), v7);
  }
  v4 = a1 + v9[9];
  v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56));
    ((void (*)(uint64_t, uint64_t))v8)(v4 + *(int *)(v5 + 32), v7);
  }
  v2 = a1 + v9[10];
  v3 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
    ((void (*)(uint64_t, uint64_t))v8)(v2 + *(int *)(v3 + 28), v7);
  }
  return a1;
}

void InvitationIDSMessage.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  char v70;

  v39 = a2;
  v51 = a1;
  v69 = 0;
  v47 = 0;
  v40 = type metadata accessor for GroupBlobEnvelope();
  v41 = (*(_QWORD *)(*(_QWORD *)(v40 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v42 = (uint64_t)v15 - v41;
  v43 = type metadata accessor for GPKGroupID();
  v44 = *(_QWORD *)(v43 - 8);
  v45 = (*(_QWORD *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v43);
  v46 = (char *)v15 - v45;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InvitationIDSMessage.CodingKeys>);
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v47);
  v55 = (char *)v15 - v50;
  v52 = (int *)type metadata accessor for InvitationIDSMessage();
  v53 = (*(_QWORD *)(*((_QWORD *)v52 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v51);
  v54 = (uint64_t)v15 - v53;
  v70 = 0;
  v69 = v2;
  v57 = v2[3];
  v58 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v57);
  lazy protocol witness table accessor for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys();
  v3 = v56;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v59 = v3;
  v60 = v3;
  if (v3)
  {
    v20 = v60;
  }
  else
  {
    v36 = &v68;
    v68 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v59;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v37 = v4;
    v38 = v4;
    if (v4)
    {
      v19 = v38;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v55, v48);
      v20 = v19;
    }
    else
    {
      v31 = 1;
      v70 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v54, v46, v43);
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : String]);
      v32 = &v66;
      v66 = v31;
      lazy protocol witness table accessor for type [GPKUserID : String] and conformance <> [A : B]();
      v5 = v37;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v34 = v5;
      v35 = v5;
      if (v5)
      {
        v18 = v35;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v55, v48);
        v20 = v18;
      }
      else
      {
        v6 = v52[5];
        v70 = 3;
        *(_QWORD *)(v54 + v6) = v67;
        v65 = 2;
        v7 = KeyedDecodingContainer.decode(_:forKey:)();
        v27 = 0;
        v28 = v7;
        v29 = v8;
        v30 = 0;
        v9 = (uint64_t *)(v54 + v52[6]);
        v70 = 7;
        *v9 = v7;
        v9[1] = v8;
        v24 = &v62;
        v62 = 3;
        lazy protocol witness table accessor for type Data and conformance Data();
        v10 = v27;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v25 = v10;
        v26 = v10;
        if (v10)
        {
          v17 = v26;
          (*(void (**)(char *, uint64_t))(v49 + 8))(v55, v48);
          v20 = v17;
        }
        else
        {
          v11 = v64;
          v12 = (_QWORD *)(v54 + v52[7]);
          v70 = 15;
          *v12 = v63;
          v12[1] = v11;
          v21 = &v61;
          v61 = 4;
          lazy protocol witness table accessor for type GroupBlobEnvelope and conformance GroupBlobEnvelope();
          v13 = v25;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v22 = v13;
          v23 = v13;
          if (!v13)
          {
            v14 = v54 + v52[8];
            v70 = 31;
            outlined init with take of GroupBlobEnvelope(v42, v14);
            (*(void (**)(char *, uint64_t))(v49 + 8))(v55, v48);
            outlined init with copy of InvitationIDSMessage(v54, v39);
            __swift_destroy_boxed_opaque_existential_1(v51);
            outlined destroy of InvitationIDSMessage(v54);
            return;
          }
          v16 = v23;
          (*(void (**)(char *, uint64_t))(v49 + 8))(v55, v48);
          v20 = v16;
        }
      }
    }
  }
  v15[1] = v20;
  __swift_destroy_boxed_opaque_existential_1(v51);
  if ((v70 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v54, v43);
  if ((v70 & 2) != 0)
    outlined destroy of [GPKUserID : String]();
  if ((v70 & 4) != 0)
    outlined destroy of String();
  if ((v70 & 8) != 0)
    outlined destroy of Data(v54 + v52[7]);
}

uint64_t outlined init with take of GroupBlobEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *__dst;
  _OWORD *__src;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  int *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v19 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v15 = v19[7];
  v17 = type metadata accessor for UnknownStorage();
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
  v18(a2 + v15, a1 + v15);
  v20 = v19[8];
  v22 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v23 + 48))(a1 + v20, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a2 + v20), (const void *)(a1 + v20), *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    *(_QWORD *)(a2 + v20) = *(_QWORD *)(a1 + v20);
    ((void (*)(uint64_t, uint64_t, uint64_t))v18)(a2 + v20 + *(int *)(v22 + 20), a1 + v20 + *(int *)(v22 + 20), v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(a2 + v20, 0, 1, v22);
  }
  __dst = (_OWORD *)(a2 + v19[9]);
  __src = (_OWORD *)(a1 + v19[9]);
  v13 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v14 + 48))(__src, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *__dst = *__src;
    __dst[1] = __src[1];
    __dst[2] = __src[2];
    __dst[3] = __src[3];
    ((void (*)(char *, char *, uint64_t))v18)((char *)__dst + *(int *)(v13 + 32), (char *)__src + *(int *)(v13 + 32), v17);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  v7 = (_OWORD *)(a2 + v19[10]);
  v8 = (_OWORD *)(a1 + v19[10]);
  v9 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v10 + 48))(v8, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    *v7 = *v8;
    v7[1] = v8[1];
    v7[2] = v8[2];
    ((void (*)(char *, char *, uint64_t))v18)((char *)v7 + *(int *)(v9 + 28), (char *)v8 + *(int *)(v9 + 28), v17);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v5 = type metadata accessor for GroupBlobEnvelope();
  result = a2;
  *(_DWORD *)(a2 + *(int *)(v5 + 20)) = *(_DWORD *)(a1 + *(int *)(v5 + 20));
  return result;
}

uint64_t outlined init with copy of InvitationIDSMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int *v42;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v42 = (int *)type metadata accessor for InvitationIDSMessage();
  v35 = v42[5];
  v36 = *(_QWORD *)(a1 + v35);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + v35) = v36;
  v3 = v42[6];
  v37 = a2 + v3;
  *(_QWORD *)(a2 + v3) = *(_QWORD *)(a1 + v3);
  v38 = *(_QWORD *)(a1 + v3 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v37 + 8) = v38;
  v39 = v42[7];
  v40 = *(_QWORD *)(a1 + v39);
  v41 = *(_QWORD *)(a1 + v39 + 8);
  outlined copy of Data._Representation(v40, v41);
  v4 = (uint64_t *)(a2 + v39);
  *v4 = v40;
  v4[1] = v41;
  v45 = v42[8];
  v50 = (_QWORD *)(a2 + v45);
  *(_DWORD *)(a2 + v45) = *(_DWORD *)(a1 + v45);
  v46 = *(_QWORD *)(a1 + v45 + 8);
  v47 = *(_QWORD *)(a1 + v45 + 16);
  outlined copy of Data._Representation(v46, v47);
  v50[1] = v46;
  v50[2] = v47;
  v48 = *(_QWORD *)(a1 + v45 + 24);
  v49 = *(_QWORD *)(a1 + v45 + 32);
  outlined copy of Data._Representation(v48, v49);
  v50[3] = v48;
  v50[4] = v49;
  v54 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v51 = v54[7];
  v52 = type metadata accessor for UnknownStorage();
  v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16);
  ((void (*)(uint64_t, uint64_t))v53)(a2 + v45 + v51, a1 + v45 + v51);
  v55 = v54[8];
  v56 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v57 + 48))(a1 + v45 + v55, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a2 + v45 + v55), (const void *)(a1 + v45 + v55), *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v33 = (char *)(a1 + v45 + v55);
    v32 = *(_QWORD *)v33;
    swift_bridgeObjectRetain();
    v34 = (char *)(a2 + v45 + v55);
    *(_QWORD *)v34 = v32;
    v53(&v34[*(int *)(v56 + 20)], &v33[*(int *)(v56 + 20)], v52);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v34, 0, 1, v56);
  }
  __dst = (_QWORD *)(a2 + v45 + v54[9]);
  __src = (uint64_t *)(a1 + v45 + v54[9]);
  v30 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v31 + 48))(__src, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v20 = *__src;
    v21 = __src[1];
    outlined copy of Data._Representation(*__src, v21);
    *__dst = v20;
    __dst[1] = v21;
    v22 = __src[2];
    v23 = __src[3];
    outlined copy of Data._Representation(v22, v23);
    __dst[2] = v22;
    __dst[3] = v23;
    v24 = __src[4];
    v25 = __src[5];
    outlined copy of Data._Representation(v24, v25);
    __dst[4] = v24;
    __dst[5] = v25;
    v26 = __src[6];
    v27 = __src[7];
    outlined copy of Data._Representation(v26, v27);
    __dst[6] = v26;
    __dst[7] = v27;
    v53((char *)__dst + *(int *)(v30 + 32), (char *)__src + *(int *)(v30 + 32), v52);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
  }
  v16 = (_QWORD *)(a2 + v45 + v54[10]);
  v17 = (uint64_t *)(a1 + v45 + v54[10]);
  v18 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v19 + 48))(v17, 1))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v10 = *v17;
    v11 = v17[1];
    outlined copy of Data._Representation(*v17, v11);
    *v16 = v10;
    v16[1] = v11;
    v12 = v17[2];
    v13 = v17[3];
    outlined copy of Data._Representation(v12, v13);
    v16[2] = v12;
    v16[3] = v13;
    v14 = v17[4];
    v15 = v17[5];
    outlined copy of Data._Representation(v14, v15);
    v16[4] = v14;
    v16[5] = v15;
    v53((char *)v16 + *(int *)(v18 + 28), (char *)v17 + *(int *)(v18 + 28), v52);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v8 = type metadata accessor for GroupBlobEnvelope();
  result = a2;
  *(_DWORD *)(a2 + v45 + *(int *)(v8 + 20)) = *(_DWORD *)(a1 + v45 + *(int *)(v8 + 20));
  return result;
}

uint64_t outlined destroy of InvitationIDSMessage(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  int *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v7 = type metadata accessor for InvitationIDSMessage();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(v7 + 28)), *(_QWORD *)(a1 + *(int *)(v7 + 28) + 8));
  v9 = *(int *)(v7 + 32);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v9 + 8), *(_QWORD *)(a1 + v9 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v9 + 24), *(_QWORD *)(a1 + v9 + 32));
  v13 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v10 = v13[7];
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(a1 + v9 + v10);
  v14 = v13[8];
  v15 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(a1 + v9 + v14, 1))
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v12)(a1 + v9 + v14 + *(int *)(v15 + 20), v11);
  }
  v5 = a1 + v9 + v13[9];
  v6 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56));
    ((void (*)(uint64_t, uint64_t))v12)(v5 + *(int *)(v6 + 32), v11);
  }
  v3 = a1 + v9 + v13[10];
  v4 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
    ((void (*)(uint64_t, uint64_t))v12)(v3 + *(int *)(v4 + 28), v11);
  }
  return a1;
}

uint64_t InvitationIDSMessage.init(groupID:memberHandles:groupDomain:invitationToken:groupBlobEnvelope:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  _QWORD *v11;

  v8 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a8, a1);
  v9 = (int *)type metadata accessor for InvitationIDSMessage();
  *(_QWORD *)(a8 + v9[5]) = a2;
  v10 = (_QWORD *)(a8 + v9[6]);
  *v10 = a3;
  v10[1] = a4;
  v11 = (_QWORD *)(a8 + v9[7]);
  *v11 = a5;
  v11[1] = a6;
  return outlined init with take of GroupBlobEnvelope(a7, a8 + v9[8]);
}

void protocol witness for Decodable.init(from:) in conformance InvitationIDSMessage(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  InvitationIDSMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InvitationIDSMessage(uint64_t a1)
{
  return InvitationIDSMessage.encode(to:)(a1);
}

GroupKitCore::RSVPResponseIDSMessage::DestinationMemberType_optional __swiftcall RSVPResponseIDSMessage.DestinationMemberType.init(rawValue:)(Swift::Int rawValue)
{
  char v3;

  if (!rawValue)
  {
    v3 = 0;
    return (GroupKitCore::RSVPResponseIDSMessage::DestinationMemberType_optional)(v3 & 1);
  }
  if (rawValue == 1)
  {
    v3 = 1;
    return (GroupKitCore::RSVPResponseIDSMessage::DestinationMemberType_optional)(v3 & 1);
  }
  return (GroupKitCore::RSVPResponseIDSMessage::DestinationMemberType_optional)2;
}

BOOL RSVPResponseIDSMessage.DestinationMemberType.rawValue.getter(char a1)
{
  return (a1 & 1) != 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RSVPResponseIDSMessage.DestinationMemberType()
{
  lazy protocol witness table accessor for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RSVPResponseIDSMessage.DestinationMemberType()
{
  lazy protocol witness table accessor for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RSVPResponseIDSMessage.DestinationMemberType()
{
  lazy protocol witness table accessor for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance RSVPResponseIDSMessage.DestinationMemberType()
{
  lazy protocol witness table accessor for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKitCore::RSVPResponseIDSMessage::DestinationMemberType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RSVPResponseIDSMessage.DestinationMemberType@<W0>(Swift::Int *a1@<X0>, GroupKitCore::RSVPResponseIDSMessage::DestinationMemberType_optional *a2@<X8>)
{
  GroupKitCore::RSVPResponseIDSMessage::DestinationMemberType_optional result;

  result.value = RSVPResponseIDSMessage.DestinationMemberType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

BOOL protocol witness for RawRepresentable.rawValue.getter in conformance RSVPResponseIDSMessage.DestinationMemberType@<W0>(_BOOL8 *a1@<X8>)
{
  _BYTE *v1;
  _BOOL8 result;

  result = RSVPResponseIDSMessage.DestinationMemberType.rawValue.getter(*v1 & 1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance RSVPResponseIDSMessage.DestinationMemberType()
{
  lazy protocol witness table accessor for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RSVPResponseIDSMessage.DestinationMemberType()
{
  lazy protocol witness table accessor for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType();
  return RawRepresentable<>.encode(to:)();
}

uint64_t RSVPResponseIDSMessage.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t RSVPResponseIDSMessage.responseFrom.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for RSVPResponseIDSMessage() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for RSVPResponseIDSMessage()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for RSVPResponseIDSMessage;
  if (!type metadata singleton initialization cache for RSVPResponseIDSMessage)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t RSVPResponseIDSMessage.response.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for RSVPResponseIDSMessage() + 24);
  v2 = type metadata accessor for GPKGroup.JoinState();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

void *RSVPResponseIDSMessage.invitationID.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for RSVPResponseIDSMessage();
  return outlined init with copy of UUID?((const void *)(v1 + *(int *)(v2 + 28)), a1);
}

void *outlined init with copy of UUID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t RSVPResponseIDSMessage.destinationMemberType.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for RSVPResponseIDSMessage() + 32)) & 1;
}

uint64_t RSVPResponseIDSMessage.destinationMemberType.setter(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for RSVPResponseIDSMessage();
  result = a1;
  *(_BYTE *)(v1 + *(int *)(v2 + 32)) = a1 & 1;
  return result;
}

uint64_t (*RSVPResponseIDSMessage.destinationMemberType.modify())()
{
  type metadata accessor for RSVPResponseIDSMessage();
  return RSVPResponseIDSMessage.destinationMemberType.modify;
}

void static RSVPResponseIDSMessage.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D32D6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D32D700
                                                                                       + *((int *)qword_23D32D778 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D32D710()
{
  uint64_t v1;

  return v1 == 0;
}

void RSVPResponseIDSMessage.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D32D7DC()
{
  return Hasher.combine<A>(_:)();
}

uint64_t RSVPResponseIDSMessage.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  unsigned __int8 v7;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 0;
LABEL_12:
    swift_bridgeObjectRelease();
    return v7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("responseFrom", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 1;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("response", 8uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 2;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("invitationID", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 3;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("destinationMemberType", 0x15uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 4;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 5;
}

uint64_t RSVPResponseIDSMessage.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t RSVPResponseIDSMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseIDSMessage.CodingKeys, &type metadata for RSVPResponseIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseIDSMessage.CodingKeys, &type metadata for RSVPResponseIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseIDSMessage.CodingKeys, &type metadata for RSVPResponseIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseIDSMessage.CodingKeys, &type metadata for RSVPResponseIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseIDSMessage.CodingKeys, &type metadata for RSVPResponseIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t RSVPResponseIDSMessage.CodingKeys.intValue.getter()
{
  return 0;
}

void RSVPResponseIDSMessage.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D32DCEC()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RSVPResponseIDSMessage.CodingKeys(char *a1)
{
  char v1;

  static RSVPResponseIDSMessage.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RSVPResponseIDSMessage.CodingKeys()
{
  return RSVPResponseIDSMessage.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance RSVPResponseIDSMessage.CodingKeys(uint64_t a1)
{
  char *v1;

  RSVPResponseIDSMessage.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RSVPResponseIDSMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance RSVPResponseIDSMessage.CodingKeys()
{
  char *v0;

  RSVPResponseIDSMessage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RSVPResponseIDSMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RSVPResponseIDSMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance RSVPResponseIDSMessage.CodingKeys()
{
  return RSVPResponseIDSMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RSVPResponseIDSMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RSVPResponseIDSMessage.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RSVPResponseIDSMessage.CodingKeys()
{
  lazy protocol witness table accessor for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RSVPResponseIDSMessage.CodingKeys()
{
  lazy protocol witness table accessor for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t RSVPResponseIDSMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  _BYTE v60[2];
  char v61;
  uint64_t v62;
  _QWORD *v63;

  v42 = a1;
  v63 = 0;
  v62 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v34 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v35 = (char *)v13 - v34;
  v36 = 0;
  v37 = type metadata accessor for GPKGroup.JoinState();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)v13 - v39;
  v52 = type metadata accessor for GPKGroupID();
  v48 = *(_QWORD *)(v52 - 8);
  v41 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v54 = (char *)v13 - v41;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RSVPResponseIDSMessage.CodingKeys>);
  v43 = *(_QWORD *)(v51 - 8);
  v44 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (_QWORD *)MEMORY[0x24BDAC7A8](v42);
  v47 = (char *)v13 - v44;
  v63 = v3;
  v62 = v1;
  v45 = v3[3];
  v46 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v45);
  lazy protocol witness table accessor for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v54, v49, v52);
  v50 = &v61;
  v61 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v4 = v53;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v55 = v4;
  v56 = v4;
  if (v4)
  {
    v16 = v56;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v54, v52);
    result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v47, v51);
    v17 = v16;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v54, v52);
    v5 = type metadata accessor for RSVPResponseIDSMessage();
    v6 = v55;
    v29 = (int *)v5;
    v7 = (uint64_t *)(v49 + *(int *)(v5 + 20));
    v30 = *v7;
    v31 = v7[1];
    swift_bridgeObjectRetain();
    v60[1] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v32 = v6;
    v33 = v6;
    if (v6)
    {
      v15 = v33;
      swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v47, v51);
      v17 = v15;
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v40, v49 + v29[6], v37);
      v26 = v60;
      v60[0] = 2;
      lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
      v8 = v32;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v27 = v8;
      v28 = v8;
      if (v8)
      {
        v14 = v28;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
        result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v47, v51);
        v17 = v14;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
        outlined init with copy of UUID?((const void *)(v49 + v29[7]), v35);
        v22 = &v59;
        v59 = 3;
        v23 = type metadata accessor for UUID();
        lazy protocol witness table accessor for type UUID and conformance UUID();
        v9 = v27;
        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
        v24 = v9;
        v25 = v9;
        if (v9)
        {
          v13[1] = v25;
          outlined destroy of UUID?((uint64_t)v35);
          return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v47, v51);
        }
        else
        {
          outlined destroy of UUID?((uint64_t)v35);
          v10 = *(_BYTE *)(v49 + v29[8]) & 1;
          v19 = &v58;
          v58 = v10;
          v18 = &v57;
          v57 = 4;
          lazy protocol witness table accessor for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType();
          v11 = v24;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v20 = v11;
          v21 = v11;
          if (v11)
            v13[0] = v21;
          return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v47, v51);
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState;
  if (!lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState)
  {
    v0 = type metadata accessor for GPKGroup.JoinState();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E4F0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState;
  if (!lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState)
  {
    v0 = type metadata accessor for GPKGroup.JoinState();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E508], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState;
  if (!lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState)
  {
    v0 = type metadata accessor for GPKGroup.JoinState();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E500], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState;
  if (!lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState)
  {
    v0 = type metadata accessor for GPKGroup.JoinState();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E4F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState;
  if (!lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState)
  {
    v0 = type metadata accessor for GPKGroup.JoinState();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E510], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup.JoinState and conformance GPKGroup.JoinState);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType;
  if (!lazy protocol witness table cache variable for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseIDSMessage.DestinationMemberType, &type metadata for RSVPResponseIDSMessage.DestinationMemberType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType;
  if (!lazy protocol witness table cache variable for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseIDSMessage.DestinationMemberType, &type metadata for RSVPResponseIDSMessage.DestinationMemberType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType;
  if (!lazy protocol witness table cache variable for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseIDSMessage.DestinationMemberType, &type metadata for RSVPResponseIDSMessage.DestinationMemberType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType;
  if (!lazy protocol witness table cache variable for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseIDSMessage.DestinationMemberType, &type metadata for RSVPResponseIDSMessage.DestinationMemberType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType);
    return v0;
  }
  return v2;
}

uint64_t RSVPResponseIDSMessage.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[2];
  char v71;
  _BYTE v72[2];
  char v73;
  _QWORD *v74;
  char v75;

  v45 = a2;
  v60 = a1;
  v74 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v46 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v47 = (char *)v20 - v46;
  v56 = 0;
  v48 = type metadata accessor for GPKGroup.JoinState();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v56);
  v51 = (char *)v20 - v50;
  v52 = type metadata accessor for GPKGroupID();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = (*(_QWORD *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v55 = (char *)v20 - v54;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RSVPResponseIDSMessage.CodingKeys>);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = (*(_QWORD *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v56);
  v64 = (char *)v20 - v59;
  v61 = (int *)type metadata accessor for RSVPResponseIDSMessage();
  v62 = (*(_QWORD *)(*((_QWORD *)v61 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (_QWORD *)MEMORY[0x24BDAC7A8](v60);
  v63 = (uint64_t)v20 - v62;
  v75 = 0;
  v74 = v3;
  v66 = v3[3];
  v67 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v66);
  lazy protocol witness table accessor for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys();
  v4 = v65;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v68 = v4;
  v69 = v4;
  if (v4)
  {
    v26 = v69;
  }
  else
  {
    v42 = &v73;
    v73 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v5 = v68;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v43 = v5;
    v44 = v5;
    if (v5)
    {
      v25 = v44;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v64, v57);
      v26 = v25;
    }
    else
    {
      v37 = 1;
      v75 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v63, v55, v52);
      v6 = v43;
      v72[1] = v37;
      v7 = KeyedDecodingContainer.decode(_:forKey:)();
      v38 = v6;
      v39 = v7;
      v40 = v8;
      v41 = v6;
      if (v6)
      {
        v24 = v41;
        (*(void (**)(char *, uint64_t))(v58 + 8))(v64, v57);
        v26 = v24;
      }
      else
      {
        v9 = v40;
        v10 = (uint64_t *)(v63 + v61[5]);
        v75 = 3;
        *v10 = v39;
        v10[1] = v9;
        v34 = v72;
        v72[0] = 2;
        lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
        v11 = v38;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v35 = v11;
        v36 = v11;
        if (v11)
        {
          v23 = v36;
          (*(void (**)(char *, uint64_t))(v58 + 8))(v64, v57);
          v26 = v23;
        }
        else
        {
          v12 = v63 + v61[6];
          v75 = 7;
          (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v12, v51, v48);
          v31 = type metadata accessor for UUID();
          v30 = &v71;
          v71 = 3;
          lazy protocol witness table accessor for type UUID and conformance UUID();
          v13 = v35;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          v32 = v13;
          v33 = v13;
          if (v13)
          {
            v22 = v33;
            (*(void (**)(char *, uint64_t))(v58 + 8))(v64, v57);
            v26 = v22;
          }
          else
          {
            v14 = (void *)(v63 + v61[7]);
            v75 = 15;
            outlined init with take of UUID?(v47, v14);
            v27 = v70;
            v70[0] = 4;
            lazy protocol witness table accessor for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType();
            v15 = v32;
            KeyedDecodingContainer.decode<A>(_:forKey:)();
            v28 = v15;
            v29 = v15;
            if (!v15)
            {
              v16 = v57;
              v17 = v64;
              v18 = v58;
              *(_BYTE *)(v63 + v61[8]) = v70[1] & 1;
              (*(void (**)(char *, uint64_t))(v18 + 8))(v17, v16);
              outlined init with copy of RSVPResponseIDSMessage(v63, v45);
              __swift_destroy_boxed_opaque_existential_1(v60);
              return outlined destroy of RSVPResponseIDSMessage(v63);
            }
            v21 = v29;
            (*(void (**)(char *, uint64_t))(v58 + 8))(v64, v57);
            v26 = v21;
          }
        }
      }
    }
  }
  v20[1] = v26;
  result = __swift_destroy_boxed_opaque_existential_1(v60);
  if ((v75 & 1) != 0)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v63, v52);
  if ((v75 & 2) != 0)
  {
    result = v63 + v61[5];
    outlined destroy of String();
  }
  if ((v75 & 4) != 0)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v63 + v61[6], v48);
  if ((v75 & 8) != 0)
    return outlined destroy of UUID?(v63 + v61[7]);
  return result;
}

void *outlined init with take of UUID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined init with copy of RSVPResponseIDSMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v11 = (int *)type metadata accessor for RSVPResponseIDSMessage();
  v3 = (_QWORD *)(a1 + v11[5]);
  v7 = (_QWORD *)(a2 + v11[5]);
  *v7 = *v3;
  v8 = v3[1];
  swift_bridgeObjectRetain();
  v7[1] = v8;
  v9 = v11[6];
  v4 = type metadata accessor for GPKGroup.JoinState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2 + v9, a1 + v9);
  v12 = v11[7];
  v14 = type metadata accessor for UUID();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v15 + 48))(a1 + v12, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy((void *)(a2 + v12), (const void *)(a1 + v12), *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v15 + 16))();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2 + v12, 0, 1, v14);
  }
  result = a2;
  *(_BYTE *)(a2 + v11[8]) = *(_BYTE *)(a1 + v11[8]) & 1;
  return result;
}

uint64_t outlined destroy of RSVPResponseIDSMessage(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v5 = type metadata accessor for RSVPResponseIDSMessage();
  swift_bridgeObjectRelease();
  v4 = *(int *)(v5 + 24);
  v2 = type metadata accessor for GPKGroup.JoinState();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v4);
  v6 = *(int *)(v5 + 28);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v9 + 48))(a1 + v6, 1))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1 + v6, v8);
  return a1;
}

int *RSVPResponseIDSMessage.init(groupID:responseFrom:response:invitationID:destinationMemberType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const void *a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int *result;
  uint64_t v14;
  int *v19;

  v7 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a7, a1);
  v19 = (int *)type metadata accessor for RSVPResponseIDSMessage();
  v8 = (_QWORD *)(a7 + v19[5]);
  *v8 = a2;
  v8[1] = a3;
  v14 = v19[6];
  v9 = type metadata accessor for GPKGroup.JoinState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a7 + v14, a4);
  outlined init with take of UUID?(a5, (void *)(a7 + v19[7]));
  result = v19;
  *(_BYTE *)(a7 + v19[8]) = a6 & 1;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance RSVPResponseIDSMessage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return RSVPResponseIDSMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RSVPResponseIDSMessage(uint64_t a1)
{
  return RSVPResponseIDSMessage.encode(to:)(a1);
}

uint64_t MembershipUpdateIDSMessage.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t MembershipUpdateIDSMessage.from.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MembershipUpdateIDSMessage() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for MembershipUpdateIDSMessage()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for MembershipUpdateIDSMessage;
  if (!type metadata singleton initialization cache for MembershipUpdateIDSMessage)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t MembershipUpdateIDSMessage.addedHandles.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MembershipUpdateIDSMessage() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t MembershipUpdateIDSMessage.removedHandles.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MembershipUpdateIDSMessage() + 28));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t MembershipUpdateIDSMessage.toggledHandles.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for MembershipUpdateIDSMessage() + 32));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t variable initialization expression of MembershipUpdateIDSMessage.groupBlobEnvelope@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GroupBlobEnvelope();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 1);
}

_QWORD *MembershipUpdateIDSMessage.groupBlobEnvelope.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t updated;

  updated = type metadata accessor for MembershipUpdateIDSMessage();
  return outlined init with copy of GroupBlobEnvelope?((_QWORD *)(v1 + *(int *)(updated + 36)), a1);
}

_QWORD *outlined init with copy of GroupBlobEnvelope?(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *);
  int *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v45;
  uint64_t v46;

  v45 = type metadata accessor for GroupBlobEnvelope();
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(v46 + 48))(a1, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)a1;
    v30 = a1[1];
    v31 = a1[2];
    outlined copy of Data._Representation(v30, v31);
    a2[1] = v30;
    a2[2] = v31;
    v32 = a1[3];
    v33 = a1[4];
    outlined copy of Data._Representation(v32, v33);
    a2[3] = v32;
    a2[4] = v33;
    v38 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v35 = (char *)a2 + v38[7];
    v34 = (char *)a1 + v38[7];
    v36 = type metadata accessor for UnknownStorage();
    v37 = *(void (**)(char *, char *))(*(_QWORD *)(v36 - 8) + 16);
    v37(v35, v34);
    v39 = (_QWORD *)((char *)a2 + v38[8]);
    v40 = (_QWORD *)((char *)a1 + v38[8]);
    v41 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v42 + 48))(v40, 1))
    {
      v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
    }
    else
    {
      v29 = *v40;
      swift_bridgeObjectRetain();
      *v39 = v29;
      ((void (*)(char *, char *, uint64_t))v37)((char *)v39 + *(int *)(v41 + 20), (char *)v40 + *(int *)(v41 + 20), v36);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    __dst = (_QWORD *)((char *)a2 + v38[9]);
    __src = (_QWORD *)((char *)a1 + v38[9]);
    v27 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v28 + 48))(__src, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      v17 = *__src;
      v18 = __src[1];
      outlined copy of Data._Representation(*__src, v18);
      *__dst = v17;
      __dst[1] = v18;
      v19 = __src[2];
      v20 = __src[3];
      outlined copy of Data._Representation(v19, v20);
      __dst[2] = v19;
      __dst[3] = v20;
      v21 = __src[4];
      v22 = __src[5];
      outlined copy of Data._Representation(v21, v22);
      __dst[4] = v21;
      __dst[5] = v22;
      v23 = __src[6];
      v24 = __src[7];
      outlined copy of Data._Representation(v23, v24);
      __dst[6] = v23;
      __dst[7] = v24;
      ((void (*)(char *, char *, uint64_t))v37)((char *)__dst + *(int *)(v27 + 32), (char *)__src + *(int *)(v27 + 32), v36);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
    }
    v13 = (_QWORD *)((char *)a2 + v38[10]);
    v14 = (_QWORD *)((char *)a1 + v38[10]);
    v15 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v16 + 48))(v14, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v7 = *v14;
      v8 = v14[1];
      outlined copy of Data._Representation(*v14, v8);
      *v13 = v7;
      v13[1] = v8;
      v9 = v14[2];
      v10 = v14[3];
      outlined copy of Data._Representation(v9, v10);
      v13[2] = v9;
      v13[3] = v10;
      v11 = v14[4];
      v12 = v14[5];
      outlined copy of Data._Representation(v11, v12);
      v13[4] = v11;
      v13[5] = v12;
      ((void (*)(char *, char *, uint64_t))v37)((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v36);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    *(_DWORD *)((char *)a2 + *(int *)(v45 + 20)) = *(_DWORD *)((char *)a1 + *(int *)(v45 + 20));
    (*(void (**)(void))(v46 + 56))();
  }
  return a2;
}

uint64_t MembershipUpdateIDSMessage.groupBlobEnvelope.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t updated;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v8 = a1;
  v6 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v8);
  v7 = (_DWORD *)((char *)&v5 - v6);
  outlined init with copy of GroupBlobEnvelope?(v2, (uint64_t *)((char *)&v5 - v6));
  updated = type metadata accessor for MembershipUpdateIDSMessage();
  outlined assign with take of GroupBlobEnvelope?(v7, (_DWORD *)(v1 + *(int *)(updated + 36)));
  return outlined destroy of GroupBlobEnvelope?(v8);
}

_DWORD *outlined assign with take of GroupBlobEnvelope?(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *);
  int *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *__dst;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(_OWORD *, uint64_t, uint64_t);
  _OWORD *__src;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(_OWORD *, uint64_t, uint64_t);
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *);
  int *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int (*v78)(_QWORD *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  unsigned int (*v83)(_DWORD *, uint64_t, uint64_t);

  v81 = type metadata accessor for GroupBlobEnvelope();
  v82 = *(_QWORD *)(v81 - 8);
  v83 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v82 + 48);
  if (((unsigned int (*)(_DWORD *, uint64_t))v83)(a2, 1))
  {
    if (v83(a1, 1, v81))
    {
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      *a2 = *a1;
      *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 2);
      *(_OWORD *)(a2 + 6) = *(_OWORD *)(a1 + 6);
      v53 = (int *)type metadata accessor for GKCrypto_GroupBlob();
      v50 = (char *)a2 + v53[7];
      v49 = (char *)a1 + v53[7];
      v51 = type metadata accessor for UnknownStorage();
      v52 = *(void (**)(char *, char *))(*(_QWORD *)(v51 - 8) + 32);
      v52(v50, v49);
      v54 = (_QWORD *)((char *)a2 + v53[8]);
      v55 = (_QWORD *)((char *)a1 + v53[8]);
      v56 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
      v57 = *(_QWORD *)(v56 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t))(v57 + 48))(v55, 1))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        *v54 = *v55;
        ((void (*)(char *, char *, uint64_t))v52)((char *)v54 + *(int *)(v56 + 20), (char *)v55 + *(int *)(v56 + 20), v51);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      }
      v45 = (_OWORD *)((char *)a2 + v53[9]);
      v46 = (_OWORD *)((char *)a1 + v53[9]);
      v47 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
      v48 = *(_QWORD *)(v47 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t))(v48 + 48))(v46, 1))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        *v45 = *v46;
        v45[1] = v46[1];
        v45[2] = v46[2];
        v45[3] = v46[3];
        ((void (*)(char *, char *, uint64_t))v52)((char *)v45 + *(int *)(v47 + 32), (char *)v46 + *(int *)(v47 + 32), v51);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      v41 = (_OWORD *)((char *)a2 + v53[10]);
      v42 = (_OWORD *)((char *)a1 + v53[10]);
      v43 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t))(v44 + 48))(v42, 1))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        *v41 = *v42;
        v41[1] = v42[1];
        v41[2] = v42[2];
        ((void (*)(char *, char *, uint64_t))v52)((char *)v41 + *(int *)(v43 + 28), (char *)v42 + *(int *)(v43 + 28), v51);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      *(_DWORD *)((char *)a2 + *(int *)(v81 + 20)) = *(_DWORD *)((char *)a1 + *(int *)(v81 + 20));
      (*(void (**)(void))(v82 + 56))();
    }
  }
  else if (v83(a1, 1, v81))
  {
    outlined destroy of GroupBlobEnvelope((uint64_t)a2);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    v2 = *((_QWORD *)a1 + 2);
    v3 = *((_QWORD *)a2 + 1);
    v4 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = *((_QWORD *)a1 + 1);
    *((_QWORD *)a2 + 2) = v2;
    outlined consume of Data._Representation(v3, v4);
    v5 = *((_QWORD *)a1 + 4);
    v6 = *((_QWORD *)a2 + 3);
    v7 = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 3) = *((_QWORD *)a1 + 3);
    *((_QWORD *)a2 + 4) = v5;
    outlined consume of Data._Representation(v6, v7);
    v73 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v69 = (char *)a2 + v73[7];
    v68 = (char *)a1 + v73[7];
    v70 = type metadata accessor for UnknownStorage();
    v71 = *(_QWORD *)(v70 - 8);
    v72 = *(void (**)(char *, char *))(v71 + 40);
    v72(v69, v68);
    v75 = (_QWORD *)((char *)a2 + v73[8]);
    v74 = (_QWORD *)((char *)a1 + v73[8]);
    v76 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v77 = *(_QWORD *)(v76 - 8);
    v78 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v77 + 48);
    if (((unsigned int (*)(_QWORD *, uint64_t))v78)(v75, 1))
    {
      if (v78(v74, 1, v76))
      {
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
        memcpy(v75, v74, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        *v75 = *v74;
        (*(void (**)(char *, char *, uint64_t))(v71 + 32))((char *)v75 + *(int *)(v76 + 20), (char *)v74 + *(int *)(v76 + 20), v70);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v75, 0, 1, v76);
      }
    }
    else if (v78(v74, 1, v76))
    {
      outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v75);
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v75, v74, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      *v75 = *v74;
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v72)((char *)v75 + *(int *)(v76 + 20), (char *)v74 + *(int *)(v76 + 20), v70);
    }
    v64 = (_OWORD *)((char *)a2 + v73[9]);
    __src = (_OWORD *)((char *)a1 + v73[9]);
    v65 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v66 = *(_QWORD *)(v65 - 8);
    v67 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v66 + 48);
    if (((unsigned int (*)(_OWORD *, uint64_t))v67)(v64, 1))
    {
      if (v67(__src, 1, v65))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        memcpy(v64, __src, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        *v64 = *__src;
        v64[1] = __src[1];
        v64[2] = __src[2];
        v64[3] = __src[3];
        (*(void (**)(char *, char *, uint64_t))(v71 + 32))((char *)v64 + *(int *)(v65 + 32), (char *)__src + *(int *)(v65 + 32), v70);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v64, 0, 1, v65);
      }
    }
    else if (v67(__src, 1, v65))
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v64);
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(v64, __src, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v10 = *((_QWORD *)__src + 1);
      v11 = *(_QWORD *)v64;
      v12 = *((_QWORD *)v64 + 1);
      *(_QWORD *)v64 = *(_QWORD *)__src;
      *((_QWORD *)v64 + 1) = v10;
      outlined consume of Data._Representation(v11, v12);
      v13 = *((_QWORD *)__src + 3);
      v14 = *((_QWORD *)v64 + 2);
      v15 = *((_QWORD *)v64 + 3);
      *((_QWORD *)v64 + 2) = *((_QWORD *)__src + 2);
      *((_QWORD *)v64 + 3) = v13;
      outlined consume of Data._Representation(v14, v15);
      v16 = *((_QWORD *)__src + 5);
      v17 = *((_QWORD *)v64 + 4);
      v18 = *((_QWORD *)v64 + 5);
      *((_QWORD *)v64 + 4) = *((_QWORD *)__src + 4);
      *((_QWORD *)v64 + 5) = v16;
      outlined consume of Data._Representation(v17, v18);
      v19 = *((_QWORD *)__src + 7);
      v20 = *((_QWORD *)v64 + 6);
      v21 = *((_QWORD *)v64 + 7);
      *((_QWORD *)v64 + 6) = *((_QWORD *)__src + 6);
      *((_QWORD *)v64 + 7) = v19;
      outlined consume of Data._Representation(v20, v21);
      ((void (*)(char *, char *, uint64_t))v72)((char *)v64 + *(int *)(v65 + 32), (char *)__src + *(int *)(v65 + 32), v70);
    }
    __dst = (_OWORD *)((char *)a2 + v73[10]);
    v58 = (_OWORD *)((char *)a1 + v73[10]);
    v60 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v61 = *(_QWORD *)(v60 - 8);
    v62 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v61 + 48);
    if (((unsigned int (*)(_OWORD *, uint64_t))v62)(__dst, 1))
    {
      if (v62(v58, 1, v60))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
        memcpy(__dst, v58, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        *__dst = *v58;
        __dst[1] = v58[1];
        __dst[2] = v58[2];
        (*(void (**)(char *, char *, uint64_t))(v71 + 32))((char *)__dst + *(int *)(v60 + 28), (char *)v58 + *(int *)(v60 + 28), v70);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v61 + 56))(__dst, 0, 1, v60);
      }
    }
    else if (v62(v58, 1, v60))
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)__dst);
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(__dst, v58, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v24 = *((_QWORD *)v58 + 1);
      v25 = *(_QWORD *)__dst;
      v26 = *((_QWORD *)__dst + 1);
      *(_QWORD *)__dst = *(_QWORD *)v58;
      *((_QWORD *)__dst + 1) = v24;
      outlined consume of Data._Representation(v25, v26);
      v27 = *((_QWORD *)v58 + 3);
      v28 = *((_QWORD *)__dst + 2);
      v29 = *((_QWORD *)__dst + 3);
      *((_QWORD *)__dst + 2) = *((_QWORD *)v58 + 2);
      *((_QWORD *)__dst + 3) = v27;
      outlined consume of Data._Representation(v28, v29);
      v30 = *((_QWORD *)v58 + 5);
      v31 = *((_QWORD *)__dst + 4);
      v32 = *((_QWORD *)__dst + 5);
      *((_QWORD *)__dst + 4) = *((_QWORD *)v58 + 4);
      *((_QWORD *)__dst + 5) = v30;
      outlined consume of Data._Representation(v31, v32);
      ((void (*)(char *, char *, uint64_t))v72)((char *)__dst + *(int *)(v60 + 28), (char *)v58 + *(int *)(v60 + 28), v70);
    }
    *(_DWORD *)((char *)a2 + *(int *)(v81 + 20)) = *(_DWORD *)((char *)a1 + *(int *)(v81 + 20));
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  swift_bridgeObjectRelease();
  v3 = *(int *)(type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys() + 20);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

uint64_t outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v3 = *(int *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys() + 32);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

uint64_t outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v3 = *(int *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures() + 28);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

uint64_t outlined destroy of GroupBlobEnvelope?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  int *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for GroupBlobEnvelope();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
    v10 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v7 = a1 + v10[7];
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v7);
    v11 = a1 + v10[8];
    v12 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1))
    {
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v9)(v11 + *(int *)(v12 + 20), v8);
    }
    v5 = a1 + v10[9];
    v6 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56));
      ((void (*)(uint64_t, uint64_t))v9)(v5 + *(int *)(v6 + 32), v8);
    }
    v3 = a1 + v10[10];
    v4 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
      outlined consume of Data._Representation(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
      ((void (*)(uint64_t, uint64_t))v9)(v3 + *(int *)(v4 + 28), v8);
    }
  }
  return a1;
}

uint64_t (*MembershipUpdateIDSMessage.groupBlobEnvelope.modify())()
{
  type metadata accessor for MembershipUpdateIDSMessage();
  return MembershipUpdateIDSMessage.groupBlobEnvelope.modify;
}

void static MembershipUpdateIDSMessage.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D330B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D330BD0
                                                                                       + *((int *)qword_23D330C58 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D330BE0()
{
  uint64_t v1;

  return v1 == 0;
}

void MembershipUpdateIDSMessage.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D330CC0()
{
  return Hasher.combine<A>(_:)();
}

uint64_t MembershipUpdateIDSMessage.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  unsigned __int8 v8;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 0;
LABEL_14:
    swift_bridgeObjectRelease();
    return v8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("from", 4uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 1;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("addedHandles", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 2;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("removedHandles", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 3;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("toggledHandles", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 4;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupBlobEnvelope", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 5;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 6;
}

uint64_t MembershipUpdateIDSMessage.CodingKeys.init(intValue:)()
{
  return 6;
}

uint64_t MembershipUpdateIDSMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for MembershipUpdateIDSMessage.CodingKeys, &type metadata for MembershipUpdateIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for MembershipUpdateIDSMessage.CodingKeys, &type metadata for MembershipUpdateIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for MembershipUpdateIDSMessage.CodingKeys, &type metadata for MembershipUpdateIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for MembershipUpdateIDSMessage.CodingKeys, &type metadata for MembershipUpdateIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for MembershipUpdateIDSMessage.CodingKeys, &type metadata for MembershipUpdateIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t MembershipUpdateIDSMessage.CodingKeys.intValue.getter()
{
  return 0;
}

void MembershipUpdateIDSMessage.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D331278()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MembershipUpdateIDSMessage.CodingKeys(char *a1)
{
  char v1;

  static MembershipUpdateIDSMessage.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MembershipUpdateIDSMessage.CodingKeys()
{
  return MembershipUpdateIDSMessage.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MembershipUpdateIDSMessage.CodingKeys(uint64_t a1)
{
  char *v1;

  MembershipUpdateIDSMessage.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MembershipUpdateIDSMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance MembershipUpdateIDSMessage.CodingKeys()
{
  char *v0;

  MembershipUpdateIDSMessage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MembershipUpdateIDSMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = MembershipUpdateIDSMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance MembershipUpdateIDSMessage.CodingKeys()
{
  return MembershipUpdateIDSMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MembershipUpdateIDSMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = MembershipUpdateIDSMessage.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MembershipUpdateIDSMessage.CodingKeys()
{
  lazy protocol witness table accessor for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MembershipUpdateIDSMessage.CodingKeys()
{
  lazy protocol witness table accessor for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t MembershipUpdateIDSMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t updated;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[2];
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;

  v45 = a1;
  v69 = 0;
  v68 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
  v42 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v43 = (_QWORD *)((char *)v14 - v42);
  v55 = type metadata accessor for GPKGroupID();
  v51 = *(_QWORD *)(v55 - 8);
  v44 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v55);
  v57 = (char *)v14 - v44;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MembershipUpdateIDSMessage.CodingKeys>);
  v46 = *(_QWORD *)(v54 - 8);
  v47 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (_QWORD *)MEMORY[0x24BDAC7A8](v45);
  v50 = (char *)v14 - v47;
  v69 = v3;
  v68 = v1;
  v48 = v3[3];
  v49 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v48);
  lazy protocol witness table accessor for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v57, v52, v55);
  v53 = &v67;
  v67 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v4 = v56;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v58 = v4;
  v59 = v4;
  if (v4)
  {
    v18 = v59;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v55);
    result = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v50, v54);
    v19 = v18;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v55);
    updated = type metadata accessor for MembershipUpdateIDSMessage();
    v6 = v58;
    v37 = (int *)updated;
    v7 = (uint64_t *)(v52 + *(int *)(updated + 20));
    v38 = *v7;
    v39 = v7[1];
    swift_bridgeObjectRetain();
    v66 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v40 = v6;
    v41 = v6;
    if (v6)
    {
      v17 = v41;
      swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v50, v54);
      v19 = v17;
    }
    else
    {
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(v52 + v37[6]);
      swift_bridgeObjectRetain();
      v33 = &v65;
      v65 = v30;
      v31 = &v64;
      v64 = 2;
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : String]);
      v8 = lazy protocol witness table accessor for type [GPKUserID : String] and conformance <> [A : B]();
      v9 = v40;
      v34 = v8;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      v35 = v9;
      v36 = v9;
      if (v9)
      {
        v16 = v36;
        outlined destroy of [GPKUserID : String]?();
        result = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v50, v54);
        v19 = v16;
      }
      else
      {
        outlined destroy of [GPKUserID : String]?();
        v10 = v35;
        v27 = *(_QWORD *)(v52 + v37[7]);
        swift_bridgeObjectRetain();
        v63 = v27;
        v62 = 3;
        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
        v28 = v10;
        v29 = v10;
        if (v10)
        {
          v15 = v29;
          outlined destroy of [GPKUserID : String]?();
          result = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v50, v54);
          v19 = v15;
        }
        else
        {
          outlined destroy of [GPKUserID : String]?();
          v11 = v28;
          v24 = *(_QWORD *)(v52 + v37[8]);
          swift_bridgeObjectRetain();
          v61 = v24;
          v60[1] = 4;
          KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
          v25 = v11;
          v26 = v11;
          if (v11)
          {
            v14[1] = v26;
            outlined destroy of [GPKUserID : String]?();
            return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v50, v54);
          }
          else
          {
            outlined destroy of [GPKUserID : String]?();
            outlined init with copy of GroupBlobEnvelope?((_QWORD *)(v52 + v37[9]), v43);
            v20 = v60;
            v60[0] = 5;
            v21 = type metadata accessor for GroupBlobEnvelope();
            lazy protocol witness table accessor for type GroupBlobEnvelope and conformance GroupBlobEnvelope();
            v12 = v25;
            KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
            v22 = v12;
            v23 = v12;
            if (v12)
              v14[0] = v23;
            outlined destroy of GroupBlobEnvelope?((uint64_t)v43);
            return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v50, v54);
          }
        }
      }
    }
  }
  return result;
}

uint64_t MembershipUpdateIDSMessage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int *updated;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[2];
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  char v73;
  _QWORD *v74;
  char v75;

  v43 = a2;
  v59 = a1;
  v74 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
  v44 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v45 = (_DWORD *)((char *)v18 - v44);
  v53 = 0;
  v46 = type metadata accessor for GPKGroupID();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v46);
  v49 = (char *)v18 - v48;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MembershipUpdateIDSMessage.CodingKeys>);
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v53);
  v60 = (char *)v18 - v52;
  updated = (int *)type metadata accessor for MembershipUpdateIDSMessage();
  v55 = (*(_QWORD *)(*((_QWORD *)updated - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v53);
  v56 = (uint64_t)v18 - v55;
  v75 = 0;
  v74 = v59;
  v57 = *(int *)(v3 + 36);
  v75 = 32;
  v58 = type metadata accessor for GroupBlobEnvelope();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v56 + v57, 1);
  v62 = v59[3];
  v63 = v59[4];
  __swift_project_boxed_opaque_existential_1(v59, v62);
  lazy protocol witness table accessor for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys();
  v4 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v64 = v4;
  v65 = v4;
  if (v4)
  {
    v23 = v65;
  }
  else
  {
    v40 = &v73;
    v73 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v5 = v64;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v41 = v5;
    v42 = v5;
    if (v5)
    {
      v22 = v42;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v60, v50);
      v23 = v22;
    }
    else
    {
      v75 = 33;
      (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v56, v49, v46);
      v6 = v41;
      v72 = 1;
      v7 = KeyedDecodingContainer.decode(_:forKey:)();
      v36 = v6;
      v37 = v7;
      v38 = v8;
      v39 = v6;
      if (v6)
      {
        v21 = v39;
        (*(void (**)(char *, uint64_t))(v51 + 8))(v60, v50);
        v23 = v21;
      }
      else
      {
        v9 = v38;
        v10 = (uint64_t *)(v56 + updated[5]);
        v75 = 35;
        *v10 = v37;
        v10[1] = v9;
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : String]);
        v31 = &v70;
        v70 = 2;
        v11 = lazy protocol witness table accessor for type [GPKUserID : String] and conformance <> [A : B]();
        v12 = v36;
        v33 = v11;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        v34 = v12;
        v35 = v12;
        if (v12)
        {
          v20 = v35;
          (*(void (**)(char *, uint64_t))(v51 + 8))(v60, v50);
          v23 = v20;
        }
        else
        {
          v13 = updated[6];
          v75 = 39;
          *(_QWORD *)(v56 + v13) = v71;
          v68 = 3;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          v29 = 0;
          v30 = 0;
          v14 = updated[7];
          v75 = 47;
          *(_QWORD *)(v56 + v14) = v69;
          v66[1] = 4;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          v27 = 0;
          v28 = 0;
          v15 = updated[8];
          v75 = 63;
          *(_QWORD *)(v56 + v15) = v67;
          v24 = v66;
          v66[0] = 5;
          lazy protocol witness table accessor for type GroupBlobEnvelope and conformance GroupBlobEnvelope();
          v16 = v27;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          v25 = v16;
          v26 = v16;
          if (!v16)
          {
            outlined assign with take of GroupBlobEnvelope?(v45, (_DWORD *)(v56 + updated[9]));
            (*(void (**)(char *, uint64_t))(v51 + 8))(v60, v50);
            outlined init with copy of MembershipUpdateIDSMessage(v56, v43);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
            return outlined destroy of MembershipUpdateIDSMessage(v56);
          }
          v19 = v26;
          (*(void (**)(char *, uint64_t))(v51 + 8))(v60, v50);
          v23 = v19;
        }
      }
    }
  }
  v18[1] = v23;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  if ((v75 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v56, v46);
  if ((v75 & 2) != 0)
    outlined destroy of String();
  if ((v75 & 4) != 0)
    outlined destroy of [GPKUserID : String]?();
  if ((v75 & 8) != 0)
    outlined destroy of [GPKUserID : String]?();
  if ((v75 & 0x10) != 0)
    outlined destroy of [GPKUserID : String]?();
  return outlined destroy of GroupBlobEnvelope?(v56 + updated[9]);
}

uint64_t outlined init with copy of MembershipUpdateIDSMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  _QWORD *v40;
  int *v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  int *updated;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  updated = (int *)type metadata accessor for MembershipUpdateIDSMessage();
  v3 = (_QWORD *)(a1 + updated[5]);
  v46 = (_QWORD *)(a2 + updated[5]);
  *v46 = *v3;
  v47 = v3[1];
  swift_bridgeObjectRetain();
  v46[1] = v47;
  v48 = updated[6];
  v49 = *(_QWORD *)(a1 + v48);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + v48) = v49;
  v50 = updated[7];
  v51 = *(_QWORD *)(a1 + v50);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + v50) = v51;
  v52 = updated[8];
  v54 = *(_QWORD *)(a1 + v52);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + v52) = v54;
  v56 = updated[9];
  v58 = type metadata accessor for GroupBlobEnvelope();
  v59 = *(_QWORD *)(v58 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v59 + 48))(a1 + v56, 1))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy((void *)(a2 + v56), (const void *)(a1 + v56), *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v40 = (_QWORD *)(a2 + v56);
    *(_DWORD *)(a2 + v56) = *(_DWORD *)(a1 + v56);
    v32 = *(_QWORD *)(a1 + v56 + 8);
    v33 = *(_QWORD *)(a1 + v56 + 16);
    outlined copy of Data._Representation(v32, v33);
    v40[1] = v32;
    v40[2] = v33;
    v34 = *(_QWORD *)(a1 + v56 + 24);
    v35 = *(_QWORD *)(a1 + v56 + 32);
    outlined copy of Data._Representation(v34, v35);
    v40[3] = v34;
    v40[4] = v35;
    v41 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v37 = a2 + v56 + v41[7];
    v36 = a1 + v56 + v41[7];
    v38 = type metadata accessor for UnknownStorage();
    v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
    ((void (*)(uint64_t, uint64_t))v39)(v37, v36);
    v42 = (_QWORD *)(a2 + v56 + v41[8]);
    v43 = (uint64_t *)(a1 + v56 + v41[8]);
    v44 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v45 = *(_QWORD *)(v44 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v45 + 48))(v43, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v31 = *v43;
      swift_bridgeObjectRetain();
      *v42 = v31;
      v39((char *)v42 + *(int *)(v44 + 20), (char *)v43 + *(int *)(v44 + 20), v38);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
    __dst = (_QWORD *)(a2 + v56 + v41[9]);
    __src = (uint64_t *)(a1 + v56 + v41[9]);
    v29 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v30 + 48))(__src, 1))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      v19 = *__src;
      v20 = __src[1];
      outlined copy of Data._Representation(*__src, v20);
      *__dst = v19;
      __dst[1] = v20;
      v21 = __src[2];
      v22 = __src[3];
      outlined copy of Data._Representation(v21, v22);
      __dst[2] = v21;
      __dst[3] = v22;
      v23 = __src[4];
      v24 = __src[5];
      outlined copy of Data._Representation(v23, v24);
      __dst[4] = v23;
      __dst[5] = v24;
      v25 = __src[6];
      v26 = __src[7];
      outlined copy of Data._Representation(v25, v26);
      __dst[6] = v25;
      __dst[7] = v26;
      v39((char *)__dst + *(int *)(v29 + 32), (char *)__src + *(int *)(v29 + 32), v38);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
    }
    v15 = (_QWORD *)(a2 + v56 + v41[10]);
    v16 = (uint64_t *)(a1 + v56 + v41[10]);
    v17 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v18 + 48))(v16, 1))
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v9 = *v16;
      v10 = v16[1];
      outlined copy of Data._Representation(*v16, v10);
      *v15 = v9;
      v15[1] = v10;
      v11 = v16[2];
      v12 = v16[3];
      outlined copy of Data._Representation(v11, v12);
      v15[2] = v11;
      v15[3] = v12;
      v13 = v16[4];
      v14 = v16[5];
      outlined copy of Data._Representation(v13, v14);
      v15[4] = v13;
      v15[5] = v14;
      v39((char *)v15 + *(int *)(v17 + 28), (char *)v16 + *(int *)(v17 + 28), v38);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    *(_DWORD *)(a2 + v56 + *(int *)(v58 + 20)) = *(_DWORD *)(a1 + v56 + *(int *)(v58 + 20));
    (*(void (**)(void))(v59 + 56))();
  }
  return a2;
}

uint64_t outlined destroy of MembershipUpdateIDSMessage(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t updated;
  uint64_t v15;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  updated = type metadata accessor for MembershipUpdateIDSMessage();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = *(int *)(updated + 36);
  v2 = type metadata accessor for GroupBlobEnvelope();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1 + v15, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v15 + 8), *(_QWORD *)(a1 + v15 + 16));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v15 + 24), *(_QWORD *)(a1 + v15 + 32));
    v11 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v8 = a1 + v15 + v11[7];
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v10(v8);
    v12 = a1 + v15 + v11[8];
    v13 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1))
    {
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v10)(v12 + *(int *)(v13 + 20), v9);
    }
    v6 = a1 + v15 + v11[9];
    v7 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
      outlined consume of Data._Representation(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
      outlined consume of Data._Representation(*(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56));
      ((void (*)(uint64_t, uint64_t))v10)(v6 + *(int *)(v7 + 32), v9);
    }
    v4 = a1 + v15 + v11[10];
    v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
      outlined consume of Data._Representation(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
      ((void (*)(uint64_t, uint64_t))v10)(v4 + *(int *)(v5 + 28), v9);
    }
  }
  return a1;
}

_DWORD *MembershipUpdateIDSMessage.init(groupID:from:addedHandles:removedHandles:toggledHandles:groupBlobEnvelope:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _DWORD *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  int *updated;
  _QWORD *v10;

  v8 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a8, a1);
  updated = (int *)type metadata accessor for MembershipUpdateIDSMessage();
  v10 = (_QWORD *)(a8 + updated[5]);
  *v10 = a2;
  v10[1] = a3;
  *(_QWORD *)(a8 + updated[6]) = a4;
  *(_QWORD *)(a8 + updated[7]) = a5;
  *(_QWORD *)(a8 + updated[8]) = a6;
  return outlined init with take of GroupBlobEnvelope?(a7, (_DWORD *)(a8 + updated[9]));
}

_DWORD *outlined init with take of GroupBlobEnvelope?(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *__dst;
  _OWORD *__src;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *);
  int *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v26;
  uint64_t v27;

  v26 = type metadata accessor for GroupBlobEnvelope();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t))(v27 + 48))(a1, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 2);
    *(_OWORD *)(a2 + 6) = *(_OWORD *)(a1 + 6);
    v19 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v16 = (char *)a2 + v19[7];
    v15 = (char *)a1 + v19[7];
    v17 = type metadata accessor for UnknownStorage();
    v18 = *(void (**)(char *, char *))(*(_QWORD *)(v17 - 8) + 32);
    v18(v16, v15);
    v20 = (_QWORD *)((char *)a2 + v19[8]);
    v21 = (_QWORD *)((char *)a1 + v19[8]);
    v22 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v23 + 48))(v21, 1))
    {
      v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
    }
    else
    {
      *v20 = *v21;
      ((void (*)(char *, char *, uint64_t))v18)((char *)v20 + *(int *)(v22 + 20), (char *)v21 + *(int *)(v22 + 20), v17);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    __dst = (_OWORD *)((char *)a2 + v19[9]);
    __src = (_OWORD *)((char *)a1 + v19[9]);
    v13 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(v14 + 48))(__src, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      __dst[2] = __src[2];
      __dst[3] = __src[3];
      ((void (*)(char *, char *, uint64_t))v18)((char *)__dst + *(int *)(v13 + 32), (char *)__src + *(int *)(v13 + 32), v17);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    v7 = (_OWORD *)((char *)a2 + v19[10]);
    v8 = (_OWORD *)((char *)a1 + v19[10]);
    v9 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(v10 + 48))(v8, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      *v7 = *v8;
      v7[1] = v8[1];
      v7[2] = v8[2];
      ((void (*)(char *, char *, uint64_t))v18)((char *)v7 + *(int *)(v9 + 28), (char *)v8 + *(int *)(v9 + 28), v17);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    *(_DWORD *)((char *)a2 + *(int *)(v26 + 20)) = *(_DWORD *)((char *)a1 + *(int *)(v26 + 20));
    (*(void (**)(void))(v27 + 56))();
  }
  return a2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance MembershipUpdateIDSMessage@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MembershipUpdateIDSMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MembershipUpdateIDSMessage(uint64_t a1)
{
  return MembershipUpdateIDSMessage.encode(to:)(a1);
}

GroupKitCore::GroupEventIDSMessage::Event_optional __swiftcall GroupEventIDSMessage.Event.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  GroupKitCore::GroupEventIDSMessage::Event_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "metadataUpdated";
  *(_QWORD *)(v2 + 8) = 15;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "groupDeleted";
  *(_QWORD *)(v2 + 32) = 12;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "removedFromGroup";
  *(_QWORD *)(v2 + 56) = 16;
  *(_BYTE *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = GroupKitCore_GroupEventIDSMessage_Event_metadataUpdated;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = GroupKitCore_GroupEventIDSMessage_Event_groupDeleted;
      goto LABEL_8;
    case 2:
      v7.value = GroupKitCore_GroupEventIDSMessage_Event_removedFromGroup;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (GroupKitCore::GroupEventIDSMessage::Event_optional)3;
}

uint64_t GroupEventIDSMessage.Event.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("metadataUpdated", 0xFuLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupDeleted", 0xCuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("removedFromGroup", 0x10uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupEventIDSMessage.Event()
{
  lazy protocol witness table accessor for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GroupEventIDSMessage.Event()
{
  lazy protocol witness table accessor for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupEventIDSMessage.Event()
{
  lazy protocol witness table accessor for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GroupEventIDSMessage.Event()
{
  lazy protocol witness table accessor for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKitCore::GroupEventIDSMessage::Event_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GroupEventIDSMessage.Event@<W0>(Swift::String *a1@<X0>, GroupKitCore::GroupEventIDSMessage::Event_optional *a2@<X8>)
{
  GroupKitCore::GroupEventIDSMessage::Event_optional result;

  result.value = GroupEventIDSMessage.Event.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GroupEventIDSMessage.Event@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = GroupEventIDSMessage.Event.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupEventIDSMessage.Event()
{
  lazy protocol witness table accessor for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupEventIDSMessage.Event()
{
  lazy protocol witness table accessor for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event();
  return RawRepresentable<>.encode(to:)();
}

uint64_t GroupEventIDSMessage.event.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t GroupEventIDSMessage.groupID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GroupEventIDSMessage() + 20);
  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GroupEventIDSMessage()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GroupEventIDSMessage;
  if (!type metadata singleton initialization cache for GroupEventIDSMessage)
    return swift_getSingletonMetadata();
  return v1;
}

double GroupEventIDSMessage.version.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for GroupEventIDSMessage() + 24));
}

uint64_t variable initialization expression of GroupEventIDSMessage.eventInfo()
{
  return 0;
}

uint64_t GroupEventIDSMessage.eventInfo.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for GroupEventIDSMessage() + 28));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GroupEventIDSMessage.eventInfo.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v1 + *(int *)(type metadata accessor for GroupEventIDSMessage() + 28)) = a1;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*GroupEventIDSMessage.eventInfo.modify())()
{
  type metadata accessor for GroupEventIDSMessage();
  return GroupEventIDSMessage.eventInfo.modify;
}

double default argument 2 of GroupEventIDSMessage.init(event:groupID:version:eventInfo:)()
{
  return 1.0;
}

uint64_t GroupEventIDSMessage.init(event:groupID:version:eventInfo:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>, double a5@<D0>)
{
  double v5;
  char v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  double v19;
  int *v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char v30;
  char *v31;

  v21 = a4;
  v17 = a1;
  v24 = a2;
  v19 = a5;
  v22 = a3;
  v31 = 0;
  v30 = 0;
  v29 = 0;
  v28 = 0.0;
  v27 = 0;
  v16 = 0;
  v25 = type metadata accessor for GPKGroupID();
  v23 = *(_QWORD *)(v25 - 8);
  v15 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v18 = (char *)&v14 - v15;
  v20 = (int *)type metadata accessor for GroupEventIDSMessage();
  v5 = MEMORY[0x24BDAC7A8](v18);
  v6 = v17;
  v8 = (char *)&v14 - v7;
  v26 = (char *)&v14 - v7;
  v31 = (char *)&v14 - v7;
  v30 = v17;
  v29 = v9;
  v28 = v5;
  v27 = v10;
  *(_QWORD *)&v8[*(int *)(v11 + 28)] = v16;
  *v8 = v6;
  (*(void (**)(void))(v12 + 16))();
  (*(void (**)(_BYTE *, char *, uint64_t))(v23 + 32))(&v26[v20[5]], v18, v25);
  *(double *)&v26[v20[6]] = v19;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v26[v20[7]] = v22;
  swift_bridgeObjectRelease();
  outlined init with copy of GroupEventIDSMessage(v26, v21);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
  return outlined destroy of GroupEventIDSMessage((uint64_t)v26);
}

_BYTE *outlined init with copy of GroupEventIDSMessage(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  _BYTE *result;
  uint64_t v4;
  int *v5;
  uint64_t v8;
  uint64_t v9;

  *a2 = *a1;
  v5 = (int *)type metadata accessor for GroupEventIDSMessage();
  v4 = v5[5];
  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v2 - 8) + 16))(&a2[v4], &a1[v4]);
  *(_QWORD *)&a2[v5[6]] = *(_QWORD *)&a1[v5[6]];
  v8 = v5[7];
  v9 = *(_QWORD *)&a1[v8];
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)&a2[v8] = v9;
  return result;
}

uint64_t outlined destroy of GroupEventIDSMessage(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for GroupEventIDSMessage() + 20);
  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *GroupEventIDSMessage.init(from:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  _BYTE *result;
  _QWORD v15[2];
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char *v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  Class isa;
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int *v62;
  _BYTE *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  id v72[2];
  _BYTE v73[2];
  char v74;
  _BYTE v75[2];
  _QWORD *v76;
  char *v77;
  char *v78;
  char v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;

  v51 = a2;
  v60 = a1;
  v85 = *MEMORY[0x24BDAC8D0];
  v78 = 0;
  v77 = 0;
  v76 = 0;
  v81 = 0;
  v82 = 0;
  v59 = 0;
  v52 = type metadata accessor for GPKGroupID();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = (*(_QWORD *)(v53 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v55 = (char *)v15 - v54;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupEventIDSMessage.CodingKeys>);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = (*(_QWORD *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v59);
  v64 = (char *)v15 - v58;
  v78 = (char *)v15 - v58;
  v62 = (int *)type metadata accessor for GroupEventIDSMessage();
  v61 = (*(_QWORD *)(*((_QWORD *)v62 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v60);
  v63 = (char *)v15 - v61;
  v77 = (char *)v15 - v61;
  v70 = 0;
  v76 = v2;
  v3 = v62[7];
  v70 = 8;
  *(_QWORD *)&v63[v3] = v4;
  v66 = v2[3];
  v67 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v66);
  lazy protocol witness table accessor for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys();
  v5 = v65;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v68 = v5;
  v69 = v5;
  if (v5)
  {
    v22 = v69;
  }
  else
  {
    v48 = v75;
    v75[0] = 0;
    lazy protocol witness table accessor for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event();
    v6 = v68;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v49 = v6;
    v50 = v6;
    if (v6)
    {
      v21 = v50;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v56);
      v22 = v21;
    }
    else
    {
      *v63 = v75[1];
      v45 = &v74;
      v74 = 1;
      lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
      v7 = v49;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v46 = v7;
      v47 = v7;
      if (v7)
      {
        v20 = v47;
        (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v56);
        v22 = v20;
      }
      else
      {
        v8 = &v63[v62[5]];
        v70 = 10;
        (*(void (**)(_BYTE *, char *, uint64_t))(v53 + 32))(v8, v55, v52);
        v9 = v46;
        v73[1] = 2;
        KeyedDecodingContainer.decode(_:forKey:)();
        v42 = v9;
        v43 = v10;
        v44 = v9;
        if (v9)
        {
          v19 = v44;
          (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v56);
          v22 = v19;
        }
        else
        {
          *(_QWORD *)&v63[v62[6]] = v43;
          v39 = v73;
          v73[0] = 3;
          lazy protocol witness table accessor for type Data and conformance Data();
          v11 = v42;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          v40 = v11;
          v41 = v11;
          if (v11)
          {
            v18 = v41;
            (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v56);
            v22 = v18;
          }
          else
          {
            v37 = v83;
            v38 = v84;
            if ((v84 & 0xF000000000000000) == 0xF000000000000000)
            {
              *(_QWORD *)&v63[v62[7]] = 0;
              swift_bridgeObjectRelease();
LABEL_14:
              (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v56);
              outlined init with copy of GroupEventIDSMessage(v63, v51);
              __swift_destroy_boxed_opaque_existential_1(v60);
              return (_BYTE *)outlined destroy of GroupEventIDSMessage((uint64_t)v63);
            }
            v35 = v37;
            v36 = v38;
            v27 = v38;
            v28 = v37;
            v81 = v37;
            v82 = v38;
            v29 = 0;
            v80 = 0;
            v31 = (id)objc_opt_self();
            outlined copy of Data._Representation(v28, v27);
            isa = Data._bridgeToObjectiveC()().super.isa;
            outlined consume of Data._Representation(v28, v27);
            type metadata accessor for NSJSONReadingOptions();
            v30 = _allocateUninitializedArray<A>(_:)();
            lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
            SetAlgebra<>.init(arrayLiteral:)();
            v72[0] = v80;
            v34 = objc_msgSend(v31, sel_JSONObjectWithData_options_error_, isa, v72[1], v72);
            v32 = v72[0];
            v12 = v72[0];
            v13 = v80;
            v80 = v32;

            if (v34)
            {
              v26 = v34;
              v24 = v34;
              v25 = &v79;
              _bridgeAnyObjectToAny(_:)();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
              if ((swift_dynamicCast() & 1) != 0)
                v23 = v71;
              else
                v23 = 0;
              *(_QWORD *)&v63[v62[7]] = v23;
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              outlined consume of Data._Representation(v28, v27);
              goto LABEL_14;
            }
            v16 = v80;
            v17 = _convertNSErrorToError(_:)();

            swift_willThrow();
            outlined consume of Data._Representation(v28, v27);
            (*(void (**)(char *, uint64_t))(v57 + 8))(v64, v56);
            v22 = v17;
          }
        }
      }
    }
  }
  v15[0] = v22;
  __swift_destroy_boxed_opaque_existential_1(v60);
  if ((v70 & 2) != 0)
    (*(void (**)(_BYTE *, uint64_t))(v53 + 8))(&v63[v62[5]], v52);
  result = &v63[v62[7]];
  outlined destroy of [String : Any]?();
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GroupEventIDSMessage.CodingKeys, &type metadata for GroupEventIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GroupEventIDSMessage.CodingKeys, &type metadata for GroupEventIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GroupEventIDSMessage.CodingKeys, &type metadata for GroupEventIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GroupEventIDSMessage.CodingKeys, &type metadata for GroupEventIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GroupEventIDSMessage.CodingKeys, &type metadata for GroupEventIDSMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event;
  if (!lazy protocol witness table cache variable for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GroupEventIDSMessage.Event, &type metadata for GroupEventIDSMessage.Event);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event;
  if (!lazy protocol witness table cache variable for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GroupEventIDSMessage.Event, &type metadata for GroupEventIDSMessage.Event);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event;
  if (!lazy protocol witness table cache variable for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GroupEventIDSMessage.Event, &type metadata for GroupEventIDSMessage.Event);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event;
  if (!lazy protocol witness table cache variable for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GroupEventIDSMessage.Event, &type metadata for GroupEventIDSMessage.Event);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event);
    return v0;
  }
  return v2;
}

uint64_t type metadata accessor for NSJSONReadingOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for NSJSONReadingOptions;
  if (!lazy cache variable for type metadata for NSJSONReadingOptions)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSJSONReadingOptions);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    v0 = type metadata accessor for NSJSONReadingOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSJSONReadingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    v0 = type metadata accessor for NSJSONReadingOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSJSONReadingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    v0 = type metadata accessor for NSJSONReadingOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSJSONReadingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    v0 = type metadata accessor for NSJSONReadingOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSJSONReadingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions)
  {
    v0 = type metadata accessor for NSJSONReadingOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSJSONReadingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONReadingOptions and conformance NSJSONReadingOptions);
    return v1;
  }
  return v3;
}

void static GroupEventIDSMessage.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D33472C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D334778
                                                                                       + *((int *)qword_23D3347E0 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D334788()
{
  uint64_t v1;

  return v1 == 0;
}

void GroupEventIDSMessage.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D334840()
{
  return Hasher.combine<A>(_:)();
}

GroupKitCore::GroupEventIDSMessage::CodingKeys_optional __swiftcall GroupEventIDSMessage.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char v3;
  char v4;
  char v5;
  char v6;
  GroupKitCore::GroupEventIDSMessage::CodingKeys_optional v7;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("event", 5uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7.value = GroupKitCore_GroupEventIDSMessage_CodingKeys_event;
LABEL_10:
    swift_bridgeObjectRelease();
    return v7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7.value = GroupKitCore_GroupEventIDSMessage_CodingKeys_groupID;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7.value = GroupKitCore_GroupEventIDSMessage_CodingKeys_version;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("eventInfo", 9uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7.value = GroupKitCore_GroupEventIDSMessage_CodingKeys_eventInfo;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (GroupKitCore::GroupEventIDSMessage::CodingKeys_optional)4;
}

GroupKitCore::GroupEventIDSMessage::CodingKeys_optional __swiftcall GroupEventIDSMessage.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (GroupKitCore::GroupEventIDSMessage::CodingKeys_optional)4;
}

uint64_t GroupEventIDSMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

uint64_t GroupEventIDSMessage.CodingKeys.intValue.getter()
{
  return 0;
}

void GroupEventIDSMessage.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D334C34()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("event", 5uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupEventIDSMessage.CodingKeys(char *a1)
{
  char v1;

  static GroupEventIDSMessage.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GroupEventIDSMessage.CodingKeys()
{
  return GroupEventIDSMessage.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance GroupEventIDSMessage.CodingKeys(uint64_t a1)
{
  char *v1;

  GroupEventIDSMessage.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupEventIDSMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance GroupEventIDSMessage.CodingKeys()
{
  char *v0;

  GroupEventIDSMessage.CodingKeys.stringValue.getter(*v0);
}

GroupKitCore::GroupEventIDSMessage::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance GroupEventIDSMessage.CodingKeys@<W0>(uint64_t a1@<X0>, GroupKitCore::GroupEventIDSMessage::CodingKeys_optional *a2@<X8>)
{
  GroupKitCore::GroupEventIDSMessage::CodingKeys_optional result;

  result.value = GroupEventIDSMessage.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GroupEventIDSMessage.CodingKeys()
{
  return GroupEventIDSMessage.CodingKeys.intValue.getter();
}

GroupKitCore::GroupEventIDSMessage::CodingKeys_optional protocol witness for CodingKey.init(intValue:) in conformance GroupEventIDSMessage.CodingKeys@<W0>(Swift::Int a1@<X0>, GroupKitCore::GroupEventIDSMessage::CodingKeys_optional *a2@<X8>)
{
  GroupKitCore::GroupEventIDSMessage::CodingKeys_optional result;

  result.value = GroupEventIDSMessage.CodingKeys.init(intValue:)(a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupEventIDSMessage.CodingKeys()
{
  lazy protocol witness table accessor for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupEventIDSMessage.CodingKeys()
{
  lazy protocol witness table accessor for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GroupEventIDSMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  Class isa;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  id v62[2];
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  _QWORD v71[2];
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;

  v48 = a1;
  v75 = *MEMORY[0x24BDAC8D0];
  v70 = 0;
  v69 = 0;
  v68 = 0;
  v63 = 0;
  v72 = 0;
  v73 = 0;
  v44 = type metadata accessor for GPKGroupID();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = (*(_QWORD *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v44);
  v47 = (char *)v12 - v46;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupEventIDSMessage.CodingKeys>);
  v49 = *(_QWORD *)(v56 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v48);
  v53 = (char *)v12 - v50;
  v70 = (char *)v12 - v50;
  v69 = v2;
  v68 = v1;
  v51 = v2[3];
  v52 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v51);
  lazy protocol witness table accessor for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v3 = *v54;
  v58 = &v67;
  v67 = v3;
  v55 = &v66;
  v66 = 0;
  lazy protocol witness table accessor for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event();
  v4 = v57;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v59 = v4;
  v60 = v4;
  if (v4)
  {
    v17 = v60;
    result = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v53, v56);
    v18 = v17;
  }
  else
  {
    v40 = type metadata accessor for GroupEventIDSMessage();
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v47, &v54[*(int *)(v40 + 20)], v44);
    v41 = &v65;
    v65 = 1;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v5 = v59;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v42 = v5;
    v43 = v5;
    if (v5)
    {
      v16 = v43;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v44);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v53, v56);
      result = v16;
      v18 = v16;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v44);
      v6 = v42;
      v64 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v38 = v6;
      v39 = v6;
      if (v6)
      {
        v15 = v39;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v53, v56);
        result = v15;
        v18 = v15;
      }
      else
      {
        v37 = *(_QWORD *)&v54[*(int *)(v40 + 28)];
        swift_bridgeObjectRetain();
        if (!v37)
        {
          v35 = v38;
LABEL_10:
          v19 = v35;
          return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v53, v56);
        }
        v36 = v37;
        v28 = v37;
        v63 = v37;
        v29 = 0;
        v74 = 0;
        v31 = (id)objc_opt_self();
        swift_bridgeObjectRetain();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        type metadata accessor for NSJSONWritingOptions();
        v30 = _allocateUninitializedArray<A>(_:)();
        lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
        SetAlgebra<>.init(arrayLiteral:)();
        v62[0] = v74;
        v34 = objc_msgSend(v31, sel_dataWithJSONObject_options_error_, isa, v62[1], v62);
        v32 = v62[0];
        v7 = v62[0];
        v8 = v74;
        v74 = v32;

        swift_unknownObjectRelease();
        if (v34)
        {
          v27 = v34;
          v20 = v34;
          v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          v22 = v9;
          v72 = v21;
          v73 = v9;

          v24 = v71;
          v71[0] = v21;
          v71[1] = v22;
          v23 = &v61;
          v61 = 3;
          lazy protocol witness table accessor for type Data and conformance Data();
          v10 = v38;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v25 = v10;
          v26 = v10;
          if (!v10)
          {
            outlined consume of Data._Representation(v21, v22);
            swift_bridgeObjectRelease();
            v35 = v25;
            goto LABEL_10;
          }
          v12[2] = v26;
          outlined consume of Data._Representation(v21, v22);
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v53, v56);
        }
        else
        {
          v13 = v74;
          v14 = _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v49 + 8))(v53, v56);
          result = v14;
          v18 = v14;
        }
      }
    }
  }
  return result;
}

_BYTE *protocol witness for Decodable.init(from:) in conformance GroupEventIDSMessage@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return GroupEventIDSMessage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupEventIDSMessage(uint64_t a1)
{
  return GroupEventIDSMessage.encode(to:)(a1);
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance NSJSONReadingOptions()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance NSJSONReadingOptions()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSJSONReadingOptions()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance NSJSONReadingOptions()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance NSJSONReadingOptions()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSJSONReadingOptions()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance NSJSONReadingOptions()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance NSJSONWritingOptions()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance NSJSONWritingOptions()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSJSONReadingOptions()
{
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  return SetAlgebra<>.init(arrayLiteral:)();
}

NSJSONReadingOptions protocol witness for OptionSet.init(rawValue:) in conformance NSJSONReadingOptions@<X0>(Swift::UInt *a1@<X0>, NSJSONReadingOptions *a2@<X8>)
{
  NSJSONReadingOptions result;

  result = NSJSONReadingOptions.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSJSONWritingOptions()
{
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  return SetAlgebra<>.init(arrayLiteral:)();
}

NSJSONWritingOptions protocol witness for OptionSet.init(rawValue:) in conformance NSJSONWritingOptions@<X0>(Swift::UInt *a1@<X0>, NSJSONWritingOptions *a2@<X8>)
{
  NSJSONWritingOptions result;

  result = NSJSONWritingOptions.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

NSJSONReadingOptions protocol witness for RawRepresentable.init(rawValue:) in conformance NSJSONReadingOptions@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  NSJSONReadingOptions result;

  result = NSJSONReadingOptions.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSJSONReadingOptions@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = NSJSONReadingOptions.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

NSJSONWritingOptions protocol witness for RawRepresentable.init(rawValue:) in conformance NSJSONWritingOptions@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  NSJSONWritingOptions result;

  result = NSJSONWritingOptions.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSJSONWritingOptions@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = NSJSONWritingOptions.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for NSJSONWritingOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for NSJSONWritingOptions;
  if (!lazy cache variable for type metadata for NSJSONWritingOptions)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSJSONWritingOptions);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    v0 = type metadata accessor for NSJSONWritingOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSJSONWritingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    v0 = type metadata accessor for NSJSONWritingOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSJSONWritingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    v0 = type metadata accessor for NSJSONWritingOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSJSONWritingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    v0 = type metadata accessor for NSJSONWritingOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSJSONWritingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions;
  if (!lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions)
  {
    v0 = type metadata accessor for NSJSONWritingOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSJSONWritingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSJSONWritingOptions and conformance NSJSONWritingOptions);
    return v1;
  }
  return v3;
}

unint64_t base witness table accessor for Equatable in RSVPResponseIDSMessage.DestinationMemberType()
{
  return lazy protocol witness table accessor for type RSVPResponseIDSMessage.DestinationMemberType and conformance RSVPResponseIDSMessage.DestinationMemberType();
}

unint64_t base witness table accessor for Equatable in GroupEventIDSMessage.Event()
{
  return lazy protocol witness table accessor for type GroupEventIDSMessage.Event and conformance GroupEventIDSMessage.Event();
}

unint64_t base witness table accessor for Equatable in GroupEventIDSMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in GroupEventIDSMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in GroupEventIDSMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type GroupEventIDSMessage.CodingKeys and conformance GroupEventIDSMessage.CodingKeys();
}

unint64_t initializeBufferWithCopyOfBuffer for InvitationIDSMessage(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *__dst;
  char *__src;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *);
  _QWORD *v50;
  int *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v62;

  v62 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v62 & 0x20000) != 0)
  {
    v57 = *a2;
    swift_retain();
    *a1 = v57;
    return *a1 + ((v62 + 16) & ~(unint64_t)v62);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v35 = a3[5];
    v36 = *(uint64_t *)((char *)a2 + v35);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v35) = v36;
    v4 = a3[6];
    v37 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v38 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v37 + 1) = v38;
    v40 = (_QWORD *)((char *)a1 + a3[7]);
    v5 = (uint64_t *)((char *)a2 + a3[7]);
    v39 = *v5;
    v41 = v5[1];
    outlined copy of Data._Representation(*v5, v41);
    *v40 = v39;
    v40[1] = v41;
    v6 = a3[8];
    v50 = (_QWORD *)((char *)a1 + v6);
    v52 = (char *)a2 + v6;
    *(_DWORD *)((char *)a1 + v6) = *(_DWORD *)((char *)a2 + v6);
    v42 = *(uint64_t *)((char *)a2 + v6 + 8);
    v43 = *(uint64_t *)((char *)a2 + v6 + 16);
    outlined copy of Data._Representation(v42, v43);
    v50[1] = v42;
    v50[2] = v43;
    v44 = *((_QWORD *)v52 + 3);
    v45 = *((_QWORD *)v52 + 4);
    outlined copy of Data._Representation(v44, v45);
    v50[3] = v44;
    v50[4] = v45;
    v51 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v47 = (char *)v50 + v51[7];
    v46 = &v52[v51[7]];
    v48 = type metadata accessor for UnknownStorage();
    v49 = *(void (**)(char *, char *))(*(_QWORD *)(v48 - 8) + 16);
    v49(v47, v46);
    v53 = (_QWORD *)((char *)v50 + v51[8]);
    v54 = &v52[v51[8]];
    v55 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v56 + 48))(v54, 1))
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v34 = *(_QWORD *)v54;
      swift_bridgeObjectRetain();
      *v53 = v34;
      ((void (*)(char *, char *, uint64_t))v49)((char *)v53 + *(int *)(v55 + 20), &v54[*(int *)(v55 + 20)], v48);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
    }
    __dst = (_QWORD *)((char *)v50 + v51[9]);
    __src = &v52[v51[9]];
    v32 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v33 + 48))(__src, 1))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v22 = *(_QWORD *)__src;
      v23 = *((_QWORD *)__src + 1);
      outlined copy of Data._Representation(*(_QWORD *)__src, v23);
      *__dst = v22;
      __dst[1] = v23;
      v24 = *((_QWORD *)__src + 2);
      v25 = *((_QWORD *)__src + 3);
      outlined copy of Data._Representation(v24, v25);
      __dst[2] = v24;
      __dst[3] = v25;
      v26 = *((_QWORD *)__src + 4);
      v27 = *((_QWORD *)__src + 5);
      outlined copy of Data._Representation(v26, v27);
      __dst[4] = v26;
      __dst[5] = v27;
      v28 = *((_QWORD *)__src + 6);
      v29 = *((_QWORD *)__src + 7);
      outlined copy of Data._Representation(v28, v29);
      __dst[6] = v28;
      __dst[7] = v29;
      ((void (*)(char *, char *, uint64_t))v49)((char *)__dst + *(int *)(v32 + 32), &__src[*(int *)(v32 + 32)], v48);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
    }
    v18 = (_QWORD *)((char *)v50 + v51[10]);
    v19 = &v52[v51[10]];
    v20 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v21 + 48))(v19, 1))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v12 = *(_QWORD *)v19;
      v13 = *((_QWORD *)v19 + 1);
      outlined copy of Data._Representation(*(_QWORD *)v19, v13);
      *v18 = v12;
      v18[1] = v13;
      v14 = *((_QWORD *)v19 + 2);
      v15 = *((_QWORD *)v19 + 3);
      outlined copy of Data._Representation(v14, v15);
      v18[2] = v14;
      v18[3] = v15;
      v16 = *((_QWORD *)v19 + 4);
      v17 = *((_QWORD *)v19 + 5);
      outlined copy of Data._Representation(v16, v17);
      v18[4] = v16;
      v18[5] = v17;
      ((void (*)(char *, char *, uint64_t))v49)((char *)v18 + *(int *)(v20 + 28), &v19[*(int *)(v20 + 28)], v48);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v10 = type metadata accessor for GroupBlobEnvelope();
    *(_DWORD *)((char *)v50 + *(int *)(v10 + 20)) = *(_DWORD *)&v52[*(int *)(v10 + 20)];
    return (unint64_t)a1;
  }
}

uint64_t destroy for InvitationIDSMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  int *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 28)), *(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
  v10 = *(int *)(a2 + 32);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v10 + 8), *(_QWORD *)(a1 + v10 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v10 + 24), *(_QWORD *)(a1 + v10 + 32));
  v14 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v11 = v14[7];
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(a1 + v10 + v11);
  v15 = v14[8];
  v16 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(a1 + v10 + v15, 1))
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v13)(a1 + v10 + v15 + *(int *)(v16 + 20), v12);
  }
  v6 = a1 + v10 + v14[9];
  v7 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56));
    ((void (*)(uint64_t, uint64_t))v13)(v6 + *(int *)(v7 + 32), v12);
  }
  v4 = a1 + v10 + v14[10];
  v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v4 + *(int *)(v5 + 28), v12);
  }
  return result;
}

uint64_t initializeWithCopy for InvitationIDSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v36 = a3[5];
  v37 = *(_QWORD *)(a2 + v36);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v36) = v37;
  v4 = (_QWORD *)(a2 + a3[6]);
  v38 = (_QWORD *)(a1 + a3[6]);
  *v38 = *v4;
  v39 = v4[1];
  swift_bridgeObjectRetain();
  v38[1] = v39;
  v40 = a3[7];
  v41 = *(_QWORD *)(a2 + v40);
  v42 = *(_QWORD *)(a2 + v40 + 8);
  outlined copy of Data._Representation(v41, v42);
  v5 = (uint64_t *)(a1 + v40);
  *v5 = v41;
  v5[1] = v42;
  v46 = a3[8];
  v51 = (_QWORD *)(a1 + v46);
  *(_DWORD *)(a1 + v46) = *(_DWORD *)(a2 + v46);
  v47 = *(_QWORD *)(a2 + v46 + 8);
  v48 = *(_QWORD *)(a2 + v46 + 16);
  outlined copy of Data._Representation(v47, v48);
  v51[1] = v47;
  v51[2] = v48;
  v49 = *(_QWORD *)(a2 + v46 + 24);
  v50 = *(_QWORD *)(a2 + v46 + 32);
  outlined copy of Data._Representation(v49, v50);
  v51[3] = v49;
  v51[4] = v50;
  v55 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v52 = v55[7];
  v53 = type metadata accessor for UnknownStorage();
  v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16);
  ((void (*)(uint64_t, uint64_t))v54)(a1 + v46 + v52, a2 + v46 + v52);
  v56 = v55[8];
  v57 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v58 = *(_QWORD *)(v57 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v58 + 48))(a2 + v46 + v56, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a1 + v46 + v56), (const void *)(a2 + v46 + v56), *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v34 = (char *)(a2 + v46 + v56);
    v33 = *(_QWORD *)v34;
    swift_bridgeObjectRetain();
    v35 = (char *)(a1 + v46 + v56);
    *(_QWORD *)v35 = v33;
    v54(&v35[*(int *)(v57 + 20)], &v34[*(int *)(v57 + 20)], v53);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v35, 0, 1, v57);
  }
  __dst = (_QWORD *)(a1 + v46 + v55[9]);
  __src = (uint64_t *)(a2 + v46 + v55[9]);
  v31 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v32 + 48))(__src, 1))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v21 = *__src;
    v22 = __src[1];
    outlined copy of Data._Representation(*__src, v22);
    *__dst = v21;
    __dst[1] = v22;
    v23 = __src[2];
    v24 = __src[3];
    outlined copy of Data._Representation(v23, v24);
    __dst[2] = v23;
    __dst[3] = v24;
    v25 = __src[4];
    v26 = __src[5];
    outlined copy of Data._Representation(v25, v26);
    __dst[4] = v25;
    __dst[5] = v26;
    v27 = __src[6];
    v28 = __src[7];
    outlined copy of Data._Representation(v27, v28);
    __dst[6] = v27;
    __dst[7] = v28;
    v54((char *)__dst + *(int *)(v31 + 32), (char *)__src + *(int *)(v31 + 32), v53);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
  }
  v17 = (_QWORD *)(a1 + v46 + v55[10]);
  v18 = (uint64_t *)(a2 + v46 + v55[10]);
  v19 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v20 + 48))(v18, 1))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v11 = *v18;
    v12 = v18[1];
    outlined copy of Data._Representation(*v18, v12);
    *v17 = v11;
    v17[1] = v12;
    v13 = v18[2];
    v14 = v18[3];
    outlined copy of Data._Representation(v13, v14);
    v17[2] = v13;
    v17[3] = v14;
    v15 = v18[4];
    v16 = v18[5];
    outlined copy of Data._Representation(v15, v16);
    v17[4] = v15;
    v17[5] = v16;
    v54((char *)v17 + *(int *)(v19 + 28), (char *)v18 + *(int *)(v19 + 28), v53);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v9 = type metadata accessor for GroupBlobEnvelope();
  result = a1;
  *(_DWORD *)(a1 + v46 + *(int *)(v9 + 20)) = *(_DWORD *)(a2 + v46 + *(int *)(v9 + 20));
  return result;
}

uint64_t assignWithCopy for InvitationIDSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t *, uint64_t, uint64_t);
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t *__src;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int (*v71)(uint64_t *, uint64_t, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  void *__dst;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  int *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int (*v103)(uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v79 = a3[5];
  v80 = *(_QWORD *)(a2 + v79);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v79) = v80;
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)(a2 + a3[6]);
  v81 = (_QWORD *)(a1 + a3[6]);
  *v81 = *v4;
  v82 = v4[1];
  swift_bridgeObjectRetain();
  v81[1] = v82;
  swift_bridgeObjectRelease();
  v83 = a3[7];
  v84 = *(_QWORD *)(a2 + v83);
  v85 = *(_QWORD *)(a2 + v83 + 8);
  outlined copy of Data._Representation(v84, v85);
  v5 = (uint64_t *)(a1 + v83);
  v6 = *(_QWORD *)(a1 + v83);
  v7 = *(_QWORD *)(a1 + v83 + 8);
  *v5 = v84;
  v5[1] = v85;
  outlined consume of Data._Representation(v6, v7);
  v89 = a3[8];
  v99 = (_QWORD *)(a1 + v89);
  *(_DWORD *)(a1 + v89) = *(_DWORD *)(a2 + v89);
  v90 = *(_QWORD *)(a2 + v89 + 8);
  v91 = *(_QWORD *)(a2 + v89 + 16);
  outlined copy of Data._Representation(v90, v91);
  v8 = *(_QWORD *)(a1 + v89 + 8);
  v9 = *(_QWORD *)(a1 + v89 + 16);
  v99[1] = v90;
  v99[2] = v91;
  outlined consume of Data._Representation(v8, v9);
  v92 = *(_QWORD *)(a2 + v89 + 24);
  v93 = *(_QWORD *)(a2 + v89 + 32);
  outlined copy of Data._Representation(v92, v93);
  v10 = *(_QWORD *)(a1 + v89 + 24);
  v11 = *(_QWORD *)(a1 + v89 + 32);
  v99[3] = v92;
  v99[4] = v93;
  outlined consume of Data._Representation(v10, v11);
  v98 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v94 = v98[7];
  v95 = type metadata accessor for UnknownStorage();
  v96 = *(_QWORD *)(v95 - 8);
  v97 = *(void (**)(uint64_t, uint64_t))(v96 + 24);
  v97(a1 + v89 + v94, a2 + v89 + v94);
  v100 = v98[8];
  v101 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v102 = *(_QWORD *)(v101 - 8);
  v103 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v103)(a1 + v89 + v100, 1))
  {
    if (v103(a2 + v89 + v100, 1, v101))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy((void *)(a1 + v89 + v100), (const void *)(a2 + v89 + v100), *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v73 = (char *)(a2 + v89 + v100);
      v72 = *(_QWORD *)v73;
      swift_bridgeObjectRetain();
      v74 = (char *)(a1 + v89 + v100);
      *(_QWORD *)v74 = v72;
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(&v74[*(int *)(v101 + 20)], &v73[*(int *)(v101 + 20)], v95);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v74, 0, 1, v101);
    }
  }
  else if (v103(a2 + v89 + v100, 1, v101))
  {
    __dst = (void *)(a1 + v89 + v100);
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)__dst);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(__dst, (const void *)(a2 + v89 + v100), *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v78 = (uint64_t *)(a2 + v89 + v100);
    v76 = *v78;
    swift_bridgeObjectRetain();
    v77 = (_QWORD *)(a1 + v89 + v100);
    *v77 = v76;
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v97)((char *)v77 + *(int *)(v101 + 20), (char *)v78 + *(int *)(v101 + 20), v95);
  }
  v68 = (_QWORD *)(a1 + v89 + v98[9]);
  __src = (uint64_t *)(a2 + v89 + v98[9]);
  v69 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v70 = *(_QWORD *)(v69 - 8);
  v71 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v70 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v71)(v68, 1))
  {
    if (v71(__src, 1, v69))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(v68, __src, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v51 = *__src;
      v52 = __src[1];
      outlined copy of Data._Representation(*__src, v52);
      *v68 = v51;
      v68[1] = v52;
      v53 = __src[2];
      v54 = __src[3];
      outlined copy of Data._Representation(v53, v54);
      v68[2] = v53;
      v68[3] = v54;
      v55 = __src[4];
      v56 = __src[5];
      outlined copy of Data._Representation(v55, v56);
      v68[4] = v55;
      v68[5] = v56;
      v57 = __src[6];
      v58 = __src[7];
      outlined copy of Data._Representation(v57, v58);
      v68[6] = v57;
      v68[7] = v58;
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))((char *)v68 + *(int *)(v69 + 32), (char *)__src + *(int *)(v69 + 32), v95);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v68, 0, 1, v69);
    }
  }
  else if (v71(__src, 1, v69))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v68);
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(v68, __src, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v59 = *__src;
    v60 = __src[1];
    outlined copy of Data._Representation(*__src, v60);
    v14 = *v68;
    v15 = v68[1];
    *v68 = v59;
    v68[1] = v60;
    outlined consume of Data._Representation(v14, v15);
    v61 = __src[2];
    v62 = __src[3];
    outlined copy of Data._Representation(v61, v62);
    v16 = v68[2];
    v17 = v68[3];
    v68[2] = v61;
    v68[3] = v62;
    outlined consume of Data._Representation(v16, v17);
    v63 = __src[4];
    v64 = __src[5];
    outlined copy of Data._Representation(v63, v64);
    v18 = v68[4];
    v19 = v68[5];
    v68[4] = v63;
    v68[5] = v64;
    outlined consume of Data._Representation(v18, v19);
    v65 = __src[6];
    v66 = __src[7];
    outlined copy of Data._Representation(v65, v66);
    v20 = v68[6];
    v21 = v68[7];
    v68[6] = v65;
    v68[7] = v66;
    outlined consume of Data._Representation(v20, v21);
    ((void (*)(char *, char *, uint64_t))v97)((char *)v68 + *(int *)(v69 + 32), (char *)__src + *(int *)(v69 + 32), v95);
  }
  v47 = (_QWORD *)(a1 + v89 + v98[10]);
  v46 = (uint64_t *)(a2 + v89 + v98[10]);
  v48 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v49 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v50)(v47, 1))
  {
    if (v50(v46, 1, v48))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v47, v46, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v34 = *v46;
      v35 = v46[1];
      outlined copy of Data._Representation(*v46, v35);
      *v47 = v34;
      v47[1] = v35;
      v36 = v46[2];
      v37 = v46[3];
      outlined copy of Data._Representation(v36, v37);
      v47[2] = v36;
      v47[3] = v37;
      v38 = v46[4];
      v39 = v46[5];
      outlined copy of Data._Representation(v38, v39);
      v47[4] = v38;
      v47[5] = v39;
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))((char *)v47 + *(int *)(v48 + 28), (char *)v46 + *(int *)(v48 + 28), v95);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v47, 0, 1, v48);
    }
  }
  else if (v50(v46, 1, v48))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v47);
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v47, v46, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v40 = *v46;
    v41 = v46[1];
    outlined copy of Data._Representation(*v46, v41);
    v24 = *v47;
    v25 = v47[1];
    *v47 = v40;
    v47[1] = v41;
    outlined consume of Data._Representation(v24, v25);
    v42 = v46[2];
    v43 = v46[3];
    outlined copy of Data._Representation(v42, v43);
    v26 = v47[2];
    v27 = v47[3];
    v47[2] = v42;
    v47[3] = v43;
    outlined consume of Data._Representation(v26, v27);
    v44 = v46[4];
    v45 = v46[5];
    outlined copy of Data._Representation(v44, v45);
    v28 = v47[4];
    v29 = v47[5];
    v47[4] = v44;
    v47[5] = v45;
    outlined consume of Data._Representation(v28, v29);
    ((void (*)(char *, char *, uint64_t))v97)((char *)v47 + *(int *)(v48 + 28), (char *)v46 + *(int *)(v48 + 28), v95);
  }
  v32 = type metadata accessor for GroupBlobEnvelope();
  result = a1;
  *(_DWORD *)(a1 + v89 + *(int *)(v32 + 20)) = *(_DWORD *)(a2 + v89 + *(int *)(v32 + 20));
  return result;
}

uint64_t initializeWithTake for InvitationIDSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *__dst;
  _OWORD *__src;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  v22 = a3[8];
  v23 = a1 + v22;
  *(_DWORD *)v23 = *(_DWORD *)(a2 + v22);
  *(_OWORD *)(v23 + 8) = *(_OWORD *)(a2 + v22 + 8);
  *(_OWORD *)(v23 + 24) = *(_OWORD *)(a2 + v22 + 24);
  v27 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v24 = v27[7];
  v25 = type metadata accessor for UnknownStorage();
  v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32);
  ((void (*)(uint64_t, uint64_t))v26)(a1 + v22 + v24, a2 + v22 + v24);
  v28 = v27[8];
  v29 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v30 + 48))(a2 + v22 + v28, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a1 + v22 + v28), (const void *)(a2 + v22 + v28), *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v4 = (char *)(a2 + v22 + v28);
    v18 = (char *)(a1 + v22 + v28);
    *(_QWORD *)v18 = *(_QWORD *)v4;
    v26(&v18[*(int *)(v29 + 20)], &v4[*(int *)(v29 + 20)], v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v18, 0, 1, v29);
  }
  __dst = (_OWORD *)(a1 + v22 + v27[9]);
  __src = (_OWORD *)(a2 + v22 + v27[9]);
  v16 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v17 + 48))(__src, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *__dst = *__src;
    __dst[1] = __src[1];
    __dst[2] = __src[2];
    __dst[3] = __src[3];
    v26((char *)__dst + *(int *)(v16 + 32), (char *)__src + *(int *)(v16 + 32), v25);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
  }
  v10 = (_OWORD *)(a1 + v22 + v27[10]);
  v11 = (_OWORD *)(a2 + v22 + v27[10]);
  v12 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v13 + 48))(v11, 1))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    *v10 = *v11;
    v10[1] = v11[1];
    v10[2] = v11[2];
    v26((char *)v10 + *(int *)(v12 + 28), (char *)v11 + *(int *)(v12 + 28), v25);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v8 = type metadata accessor for GroupBlobEnvelope();
  result = a1;
  *(_DWORD *)(a1 + v22 + *(int *)(v8 + 20)) = *(_DWORD *)(a2 + v22 + *(int *)(v8 + 20));
  return result;
}

uint64_t assignWithTake for InvitationIDSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  _OWORD *v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(_OWORD *, uint64_t, uint64_t);
  _OWORD *__src;
  _OWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(_OWORD *, uint64_t, uint64_t);
  char *v58;
  void *__dst;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)(a2 + a3[6]);
  v5 = (_QWORD *)(a1 + a3[6]);
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  v6 = (uint64_t *)(a2 + a3[7]);
  v7 = *v6;
  v8 = v6[1];
  v9 = (uint64_t *)(a1 + a3[7]);
  v10 = *v9;
  v11 = v9[1];
  *v9 = v7;
  v9[1] = v8;
  outlined consume of Data._Representation(v10, v11);
  v65 = a3[8];
  v71 = a1 + v65;
  *(_DWORD *)v71 = *(_DWORD *)(a2 + v65);
  v12 = *(_QWORD *)(a2 + v65 + 16);
  v13 = *(_QWORD *)(a1 + v65 + 8);
  v14 = *(_QWORD *)(a1 + v65 + 16);
  *(_QWORD *)(v71 + 8) = *(_QWORD *)(a2 + v65 + 8);
  *(_QWORD *)(v71 + 16) = v12;
  outlined consume of Data._Representation(v13, v14);
  v15 = *(_QWORD *)(a2 + v65 + 32);
  v16 = *(_QWORD *)(a1 + v65 + 24);
  v17 = *(_QWORD *)(a1 + v65 + 32);
  *(_QWORD *)(v71 + 24) = *(_QWORD *)(a2 + v65 + 24);
  *(_QWORD *)(v71 + 32) = v15;
  outlined consume of Data._Representation(v16, v17);
  v70 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v66 = v70[7];
  v67 = type metadata accessor for UnknownStorage();
  v68 = *(_QWORD *)(v67 - 8);
  v69 = *(void (**)(uint64_t, uint64_t))(v68 + 40);
  v69(a1 + v65 + v66, a2 + v65 + v66);
  v72 = v70[8];
  v73 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v74 = *(_QWORD *)(v73 - 8);
  v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v75)(a1 + v65 + v72, 1))
  {
    if (v75(a2 + v65 + v72, 1, v73))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy((void *)(a1 + v65 + v72), (const void *)(a2 + v65 + v72), *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v19 = (char *)(a2 + v65 + v72);
      v58 = (char *)(a1 + v65 + v72);
      *(_QWORD *)v58 = *(_QWORD *)v19;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(&v58[*(int *)(v73 + 20)], &v19[*(int *)(v73 + 20)], v67);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v58, 0, 1, v73);
    }
  }
  else if (v75(a2 + v65 + v72, 1, v73))
  {
    __dst = (void *)(a1 + v65 + v72);
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)__dst);
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(__dst, (const void *)(a2 + v65 + v72), *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v61 = (_QWORD *)(a2 + v65 + v72);
    v60 = (_QWORD *)(a1 + v65 + v72);
    *v60 = *v61;
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v69)((char *)v60 + *(int *)(v73 + 20), (char *)v61 + *(int *)(v73 + 20), v67);
  }
  v54 = (_OWORD *)(a1 + v65 + v70[9]);
  __src = (_OWORD *)(a2 + v65 + v70[9]);
  v55 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v56 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v57)(v54, 1))
  {
    if (v57(__src, 1, v55))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(v54, __src, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      *v54 = *__src;
      v54[1] = __src[1];
      v54[2] = __src[2];
      v54[3] = __src[3];
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))((char *)v54 + *(int *)(v55 + 32), (char *)__src + *(int *)(v55 + 32), v67);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v54, 0, 1, v55);
    }
  }
  else if (v57(__src, 1, v55))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v54);
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(v54, __src, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v21 = *((_QWORD *)__src + 1);
    v22 = *(_QWORD *)v54;
    v23 = *((_QWORD *)v54 + 1);
    *(_QWORD *)v54 = *(_QWORD *)__src;
    *((_QWORD *)v54 + 1) = v21;
    outlined consume of Data._Representation(v22, v23);
    v24 = *((_QWORD *)__src + 3);
    v25 = *((_QWORD *)v54 + 2);
    v26 = *((_QWORD *)v54 + 3);
    *((_QWORD *)v54 + 2) = *((_QWORD *)__src + 2);
    *((_QWORD *)v54 + 3) = v24;
    outlined consume of Data._Representation(v25, v26);
    v27 = *((_QWORD *)__src + 5);
    v28 = *((_QWORD *)v54 + 4);
    v29 = *((_QWORD *)v54 + 5);
    *((_QWORD *)v54 + 4) = *((_QWORD *)__src + 4);
    *((_QWORD *)v54 + 5) = v27;
    outlined consume of Data._Representation(v28, v29);
    v30 = *((_QWORD *)__src + 7);
    v31 = *((_QWORD *)v54 + 6);
    v32 = *((_QWORD *)v54 + 7);
    *((_QWORD *)v54 + 6) = *((_QWORD *)__src + 6);
    *((_QWORD *)v54 + 7) = v30;
    outlined consume of Data._Representation(v31, v32);
    ((void (*)(char *, char *, uint64_t))v69)((char *)v54 + *(int *)(v55 + 32), (char *)__src + *(int *)(v55 + 32), v67);
  }
  v49 = (_OWORD *)(a1 + v65 + v70[10]);
  v48 = (_OWORD *)(a2 + v65 + v70[10]);
  v50 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v51 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v52)(v49, 1))
  {
    if (v52(v48, 1, v50))
    {
      v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v49, v48, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      *v49 = *v48;
      v49[1] = v48[1];
      v49[2] = v48[2];
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))((char *)v49 + *(int *)(v50 + 28), (char *)v48 + *(int *)(v50 + 28), v67);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v49, 0, 1, v50);
    }
  }
  else if (v52(v48, 1, v50))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v49);
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v49, v48, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v35 = *((_QWORD *)v48 + 1);
    v36 = *(_QWORD *)v49;
    v37 = *((_QWORD *)v49 + 1);
    *(_QWORD *)v49 = *(_QWORD *)v48;
    *((_QWORD *)v49 + 1) = v35;
    outlined consume of Data._Representation(v36, v37);
    v38 = *((_QWORD *)v48 + 3);
    v39 = *((_QWORD *)v49 + 2);
    v40 = *((_QWORD *)v49 + 3);
    *((_QWORD *)v49 + 2) = *((_QWORD *)v48 + 2);
    *((_QWORD *)v49 + 3) = v38;
    outlined consume of Data._Representation(v39, v40);
    v41 = *((_QWORD *)v48 + 5);
    v42 = *((_QWORD *)v49 + 4);
    v43 = *((_QWORD *)v49 + 5);
    *((_QWORD *)v49 + 4) = *((_QWORD *)v48 + 4);
    *((_QWORD *)v49 + 5) = v41;
    outlined consume of Data._Representation(v42, v43);
    ((void (*)(char *, char *, uint64_t))v69)((char *)v49 + *(int *)(v50 + 28), (char *)v48 + *(int *)(v50 + 28), v67);
  }
  v46 = type metadata accessor for GroupBlobEnvelope();
  result = a1;
  *(_DWORD *)(a1 + v65 + *(int *)(v46 + 20)) = *(_DWORD *)(a2 + v65 + *(int *)(v46 + 20));
  return result;
}

uint64_t getEnumTagSinglePayload for InvitationIDSMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D338A14(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v11;
  uint64_t v12;

  v11 = type metadata accessor for GPKGroupID();
  v12 = *(_QWORD *)(v11 - 8);
  if (a2 == *(_DWORD *)(v12 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v12 + 48))(a1, a2, v11);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v6 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20)) < 0x100000000uLL)
      v6 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    return (v6 + 1);
  }
  else
  {
    v4 = type metadata accessor for GroupBlobEnvelope();
    v5 = *(_QWORD *)(v4 - 8);
    if (a2 == *(_DWORD *)(v5 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + *(int *)(a3 + 32), a2, v4);
    else
      __break(1u);
  }
  return v7;
}

uint64_t storeEnumTagSinglePayload for InvitationIDSMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D338B64(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2 - 1;
  }
  else
  {
    result = type metadata accessor for GroupBlobEnvelope();
    v5 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v5 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + *(int *)(a4 + 32), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for InvitationIDSMessage()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    v3 = type metadata accessor for GroupBlobEnvelope();
    if (v1 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

uint64_t getEnumTagSinglePayload for InvitationIDSMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v7 = ((a2 + 4) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 5;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for InvitationIDSMessage.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for InvitationIDSMessage.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for InvitationIDSMessage.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for InvitationIDSMessage.CodingKeys()
{
  return &type metadata for InvitationIDSMessage.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for RSVPResponseIDSMessage(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *__dst;
  char *__src;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v21;

  v21 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v21 & 0x20000) != 0)
  {
    v16 = *a2;
    swift_retain();
    *a1 = v16;
    return *a1 + ((v21 + 16) & ~(unint64_t)v21);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v4 = a3[5];
    v8 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(_QWORD *)((char *)a2 + v4);
    v9 = *(_QWORD *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v8 + 1) = v9;
    v11 = (char *)a1 + a3[6];
    v10 = (char *)a2 + a3[6];
    v5 = type metadata accessor for GPKGroup.JoinState();
    (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(v11, v10);
    __dst = (char *)a1 + a3[7];
    __src = (char *)a2 + a3[7];
    v14 = type metadata accessor for UUID();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v15 + 48))(__src, 1))
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, __src, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]) & 1;
    return (unint64_t)a1;
  }
}

uint64_t destroy for RSVPResponseIDSMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  v5 = *(int *)(a2 + 24);
  v3 = type metadata accessor for GPKGroup.JoinState();
  (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1 + v5);
  v7 = *(int *)(a2 + 28);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 48))(a1 + v7, 1);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1 + v7, v9);
  return result;
}

uint64_t initializeWithCopy for RSVPResponseIDSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v4 = (_QWORD *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + a3[5]);
  *v8 = *v4;
  v9 = v4[1];
  swift_bridgeObjectRetain();
  v8[1] = v9;
  v10 = a3[6];
  v5 = type metadata accessor for GPKGroup.JoinState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1 + v10, a2 + v10);
  v13 = a3[7];
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v16 + 48))(a2 + v13, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy((void *)(a1 + v13), (const void *)(a2 + v13), *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v16 + 16))();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1 + v13, 0, 1, v15);
  }
  result = a1;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]) & 1;
  return result;
}

uint64_t assignWithCopy for RSVPResponseIDSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v4 = (_QWORD *)(a2 + a3[5]);
  v9 = (_QWORD *)(a1 + a3[5]);
  *v9 = *v4;
  v10 = v4[1];
  swift_bridgeObjectRetain();
  v9[1] = v10;
  swift_bridgeObjectRelease();
  v11 = a3[6];
  v5 = type metadata accessor for GPKGroup.JoinState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a1 + v11, a2 + v11);
  v14 = a3[7];
  v16 = type metadata accessor for UUID();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v18)(a1 + v14, 1))
  {
    if (v18(a2 + v14, 1, v16))
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy((void *)(a1 + v14), (const void *)(a2 + v14), *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(void))(v17 + 16))();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(a1 + v14, 0, 1, v16);
    }
  }
  else if (v18(a2 + v14, 1, v16))
  {
    (*(void (**)(void))(v17 + 8))();
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy((void *)(a1 + v14), (const void *)(a2 + v14), *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 24))(a1 + v14, a2 + v14, v16);
  }
  result = a1;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]) & 1;
  return result;
}

uint64_t initializeWithTake for RSVPResponseIDSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v4 = type metadata accessor for GPKGroup.JoinState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1 + v7, a2 + v7);
  v10 = a3[7];
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v13 + 48))(a2 + v10, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy((void *)(a1 + v10), (const void *)(a2 + v10), *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v13 + 32))();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1 + v10, 0, 1, v12);
  }
  result = a1;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]) & 1;
  return result;
}

uint64_t assignWithTake for RSVPResponseIDSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (_QWORD *)(a2 + a3[5]);
  v5 = (_QWORD *)(a1 + a3[5]);
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v6 = type metadata accessor for GPKGroup.JoinState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1 + v10, a2 + v10);
  v13 = a3[7];
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v17)(a1 + v13, 1))
  {
    if (v17(a2 + v13, 1, v15))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy((void *)(a1 + v13), (const void *)(a2 + v13), *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void))(v16 + 32))();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(a1 + v13, 0, 1, v15);
    }
  }
  else if (v17(a2 + v13, 1, v15))
  {
    (*(void (**)(void))(v16 + 8))();
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy((void *)(a1 + v13), (const void *)(a2 + v13), *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 40))(a1 + v13, a2 + v13, v15);
  }
  result = a1;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]) & 1;
  return result;
}

uint64_t getEnumTagSinglePayload for RSVPResponseIDSMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D339D54(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v13;
  uint64_t v14;

  v13 = type metadata accessor for GPKGroupID();
  v14 = *(_QWORD *)(v13 - 8);
  if (a2 == *(_DWORD *)(v14 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v14 + 48))(a1, a2, v13);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v8 = -1;
    if (*(_QWORD *)(a1 + a3[5] + 8) < 0x100000000uLL)
      v8 = *(_QWORD *)(a1 + a3[5] + 8);
    return (v8 + 1);
  }
  else
  {
    v6 = type metadata accessor for GPKGroup.JoinState();
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + a3[6], a2, v6);
    }
    else
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      v5 = *(_QWORD *)(v4 - 8);
      if (a2 == *(_DWORD *)(v5 + 84))
        return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + a3[7], a2, v4);
      else
        __break(1u);
    }
  }
  return v9;
}

uint64_t storeEnumTagSinglePayload for RSVPResponseIDSMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D339F04(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;

  result = type metadata accessor for GPKGroupID();
  v12 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v12 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v12 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + a4[5] + 8) = a2 - 1;
  }
  else
  {
    v6 = type metadata accessor for GPKGroup.JoinState();
    v7 = *(_QWORD *)(v6 - 8);
    if (a3 == *(_DWORD *)(v7 + 84))
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v7 + 56))(a1 + a4[6], a2, a2, v6);
    }
    else
    {
      result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      v5 = *(_QWORD *)(result - 8);
      if (a3 == *(_DWORD *)(v5 + 84))
        return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + a4[7], a2, a2, result);
      else
        __break(1u);
    }
  }
  return result;
}

uint64_t type metadata completion function for RSVPResponseIDSMessage()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;

  v4 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    v4 = type metadata accessor for GPKGroup.JoinState();
    if (v1 <= 0x3F)
    {
      v4 = type metadata accessor for UUID?();
      if (v2 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return v4;
}

uint64_t type metadata accessor for UUID?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for UUID?;
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for UUID?);
      return v1;
    }
  }
  return v4;
}

uint64_t getEnumTagSinglePayload for RSVPResponseIDSMessage.DestinationMemberType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for RSVPResponseIDSMessage.DestinationMemberType(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for RSVPResponseIDSMessage.DestinationMemberType(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for RSVPResponseIDSMessage.DestinationMemberType(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RSVPResponseIDSMessage.DestinationMemberType()
{
  return &type metadata for RSVPResponseIDSMessage.DestinationMemberType;
}

uint64_t getEnumTagSinglePayload for RSVPResponseIDSMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v7 = ((a2 + 4) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 5;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for RSVPResponseIDSMessage.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for RSVPResponseIDSMessage.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for RSVPResponseIDSMessage.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RSVPResponseIDSMessage.CodingKeys()
{
  return &type metadata for RSVPResponseIDSMessage.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for MembershipUpdateIDSMessage(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *);
  int *v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v63;

  v63 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v63 & 0x20000) != 0)
  {
    v58 = *a2;
    swift_retain();
    *a1 = v58;
    return *a1 + ((v63 + 16) & ~(unint64_t)v63);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v4 = a3[5];
    v46 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v47 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v46 + 1) = v47;
    v48 = a3[6];
    v49 = *(uint64_t *)((char *)a2 + v48);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v48) = v49;
    v50 = a3[7];
    v51 = *(uint64_t *)((char *)a2 + v50);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v50) = v51;
    v52 = a3[8];
    v53 = *(uint64_t *)((char *)a2 + v52);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v52) = v53;
    v54 = (_QWORD *)((char *)a1 + a3[9]);
    v55 = (uint64_t *)((char *)a2 + a3[9]);
    v56 = type metadata accessor for GroupBlobEnvelope();
    v57 = *(_QWORD *)(v56 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v57 + 48))(v55, 1))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v54 = *(_DWORD *)v55;
      v33 = v55[1];
      v34 = v55[2];
      outlined copy of Data._Representation(v33, v34);
      v54[1] = v33;
      v54[2] = v34;
      v35 = v55[3];
      v36 = v55[4];
      outlined copy of Data._Representation(v35, v36);
      v54[3] = v35;
      v54[4] = v36;
      v41 = (int *)type metadata accessor for GKCrypto_GroupBlob();
      v38 = (char *)v54 + v41[7];
      v37 = (char *)v55 + v41[7];
      v39 = type metadata accessor for UnknownStorage();
      v40 = *(void (**)(char *, char *))(*(_QWORD *)(v39 - 8) + 16);
      v40(v38, v37);
      v42 = (_QWORD *)((char *)v54 + v41[8]);
      v43 = (_QWORD *)((char *)v55 + v41[8]);
      v44 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
      v45 = *(_QWORD *)(v44 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v45 + 48))(v43, 1))
      {
        v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
      }
      else
      {
        v32 = *v43;
        swift_bridgeObjectRetain();
        *v42 = v32;
        ((void (*)(char *, char *, uint64_t))v40)((char *)v42 + *(int *)(v44 + 20), (char *)v43 + *(int *)(v44 + 20), v39);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
      __dst = (_QWORD *)((char *)v54 + v41[9]);
      __src = (_QWORD *)((char *)v55 + v41[9]);
      v30 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v31 + 48))(__src, 1))
      {
        v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        v20 = *__src;
        v21 = __src[1];
        outlined copy of Data._Representation(*__src, v21);
        *__dst = v20;
        __dst[1] = v21;
        v22 = __src[2];
        v23 = __src[3];
        outlined copy of Data._Representation(v22, v23);
        __dst[2] = v22;
        __dst[3] = v23;
        v24 = __src[4];
        v25 = __src[5];
        outlined copy of Data._Representation(v24, v25);
        __dst[4] = v24;
        __dst[5] = v25;
        v26 = __src[6];
        v27 = __src[7];
        outlined copy of Data._Representation(v26, v27);
        __dst[6] = v26;
        __dst[7] = v27;
        ((void (*)(char *, char *, uint64_t))v40)((char *)__dst + *(int *)(v30 + 32), (char *)__src + *(int *)(v30 + 32), v39);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
      }
      v16 = (_QWORD *)((char *)v54 + v41[10]);
      v17 = (_QWORD *)((char *)v55 + v41[10]);
      v18 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v19 + 48))(v17, 1))
      {
        v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        v10 = *v17;
        v11 = v17[1];
        outlined copy of Data._Representation(*v17, v11);
        *v16 = v10;
        v16[1] = v11;
        v12 = v17[2];
        v13 = v17[3];
        outlined copy of Data._Representation(v12, v13);
        v16[2] = v12;
        v16[3] = v13;
        v14 = v17[4];
        v15 = v17[5];
        outlined copy of Data._Representation(v14, v15);
        v16[4] = v14;
        v16[5] = v15;
        ((void (*)(char *, char *, uint64_t))v40)((char *)v16 + *(int *)(v18 + 28), (char *)v17 + *(int *)(v18 + 28), v39);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      *(_DWORD *)((char *)v54 + *(int *)(v56 + 20)) = *(_DWORD *)((char *)v55 + *(int *)(v56 + 20));
      (*(void (**)(void))(v57 + 56))();
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for MembershipUpdateIDSMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = *(int *)(a2 + 36);
  v3 = type metadata accessor for GroupBlobEnvelope();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(a1 + v16, 1);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v16 + 8), *(_QWORD *)(a1 + v16 + 16));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v16 + 24), *(_QWORD *)(a1 + v16 + 32));
    v12 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v9 = a1 + v16 + v12[7];
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v11(v9);
    v13 = a1 + v16 + v12[8];
    v14 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1))
    {
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v11)(v13 + *(int *)(v14 + 20), v10);
    }
    v7 = a1 + v16 + v12[9];
    v8 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24));
      outlined consume of Data._Representation(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40));
      outlined consume of Data._Representation(*(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56));
      ((void (*)(uint64_t, uint64_t))v11)(v7 + *(int *)(v8 + 32), v10);
    }
    v5 = a1 + v16 + v12[10];
    v6 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1);
    if (!(_DWORD)result)
    {
      outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v5 + *(int *)(v6 + 28), v10);
    }
  }
  return result;
}

uint64_t initializeWithCopy for MembershipUpdateIDSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  _QWORD *v41;
  int *v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v4 = (_QWORD *)(a2 + a3[5]);
  v47 = (_QWORD *)(a1 + a3[5]);
  *v47 = *v4;
  v48 = v4[1];
  swift_bridgeObjectRetain();
  v47[1] = v48;
  v49 = a3[6];
  v50 = *(_QWORD *)(a2 + v49);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v49) = v50;
  v51 = a3[7];
  v52 = *(_QWORD *)(a2 + v51);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v51) = v52;
  v53 = a3[8];
  v55 = *(_QWORD *)(a2 + v53);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v53) = v55;
  v57 = a3[9];
  v59 = type metadata accessor for GroupBlobEnvelope();
  v60 = *(_QWORD *)(v59 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v60 + 48))(a2 + v57, 1))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy((void *)(a1 + v57), (const void *)(a2 + v57), *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v41 = (_QWORD *)(a1 + v57);
    *(_DWORD *)(a1 + v57) = *(_DWORD *)(a2 + v57);
    v33 = *(_QWORD *)(a2 + v57 + 8);
    v34 = *(_QWORD *)(a2 + v57 + 16);
    outlined copy of Data._Representation(v33, v34);
    v41[1] = v33;
    v41[2] = v34;
    v35 = *(_QWORD *)(a2 + v57 + 24);
    v36 = *(_QWORD *)(a2 + v57 + 32);
    outlined copy of Data._Representation(v35, v36);
    v41[3] = v35;
    v41[4] = v36;
    v42 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v38 = a1 + v57 + v42[7];
    v37 = a2 + v57 + v42[7];
    v39 = type metadata accessor for UnknownStorage();
    v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
    ((void (*)(uint64_t, uint64_t))v40)(v38, v37);
    v43 = (_QWORD *)(a1 + v57 + v42[8]);
    v44 = (uint64_t *)(a2 + v57 + v42[8]);
    v45 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v46 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v46 + 48))(v44, 1))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      v32 = *v44;
      swift_bridgeObjectRetain();
      *v43 = v32;
      v40((char *)v43 + *(int *)(v45 + 20), (char *)v44 + *(int *)(v45 + 20), v39);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    __dst = (_QWORD *)(a1 + v57 + v42[9]);
    __src = (uint64_t *)(a2 + v57 + v42[9]);
    v30 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v31 + 48))(__src, 1))
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v20 = *__src;
      v21 = __src[1];
      outlined copy of Data._Representation(*__src, v21);
      *__dst = v20;
      __dst[1] = v21;
      v22 = __src[2];
      v23 = __src[3];
      outlined copy of Data._Representation(v22, v23);
      __dst[2] = v22;
      __dst[3] = v23;
      v24 = __src[4];
      v25 = __src[5];
      outlined copy of Data._Representation(v24, v25);
      __dst[4] = v24;
      __dst[5] = v25;
      v26 = __src[6];
      v27 = __src[7];
      outlined copy of Data._Representation(v26, v27);
      __dst[6] = v26;
      __dst[7] = v27;
      v40((char *)__dst + *(int *)(v30 + 32), (char *)__src + *(int *)(v30 + 32), v39);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
    }
    v16 = (_QWORD *)(a1 + v57 + v42[10]);
    v17 = (uint64_t *)(a2 + v57 + v42[10]);
    v18 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v19 + 48))(v17, 1))
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v10 = *v17;
      v11 = v17[1];
      outlined copy of Data._Representation(*v17, v11);
      *v16 = v10;
      v16[1] = v11;
      v12 = v17[2];
      v13 = v17[3];
      outlined copy of Data._Representation(v12, v13);
      v16[2] = v12;
      v16[3] = v13;
      v14 = v17[4];
      v15 = v17[5];
      outlined copy of Data._Representation(v14, v15);
      v16[4] = v14;
      v16[5] = v15;
      v40((char *)v16 + *(int *)(v18 + 28), (char *)v17 + *(int *)(v18 + 28), v39);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    *(_DWORD *)(a1 + v57 + *(int *)(v59 + 20)) = *(_DWORD *)(a2 + v57 + *(int *)(v59 + 20));
    (*(void (**)(void))(v60 + 56))();
  }
  return a1;
}

uint64_t assignWithCopy for MembershipUpdateIDSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  _QWORD *v69;
  int *v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(uint64_t *, uint64_t, uint64_t);
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t *__src;
  _QWORD *__dst;
  uint64_t v110;
  uint64_t v111;
  unsigned int (*v112)(uint64_t *, uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  _QWORD *v124;
  int *v125;
  uint64_t *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int (*v130)(uint64_t *, uint64_t, uint64_t);
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t v143;
  uint64_t v144;
  unsigned int (*v145)(uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v4 = (_QWORD *)(a2 + a3[5]);
  v131 = (_QWORD *)(a1 + a3[5]);
  *v131 = *v4;
  v132 = v4[1];
  swift_bridgeObjectRetain();
  v131[1] = v132;
  swift_bridgeObjectRelease();
  v5 = a3[6];
  v133 = (_QWORD *)(a1 + v5);
  v134 = *(_QWORD *)(a2 + v5);
  swift_bridgeObjectRetain();
  *v133 = v134;
  swift_bridgeObjectRelease();
  v6 = a3[7];
  v135 = (_QWORD *)(a1 + v6);
  v136 = *(_QWORD *)(a2 + v6);
  swift_bridgeObjectRetain();
  *v135 = v136;
  swift_bridgeObjectRelease();
  v7 = a3[8];
  v138 = (_QWORD *)(a1 + v7);
  v139 = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRetain();
  *v138 = v139;
  swift_bridgeObjectRelease();
  v141 = a3[9];
  v143 = type metadata accessor for GroupBlobEnvelope();
  v144 = *(_QWORD *)(v143 - 8);
  v145 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v145)(a1 + v141, 1))
  {
    if (v145(a2 + v141, 1, v143))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
      memcpy((void *)(a1 + v141), (const void *)(a2 + v141), *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v69 = (_QWORD *)(a1 + v141);
      *(_DWORD *)(a1 + v141) = *(_DWORD *)(a2 + v141);
      v61 = *(_QWORD *)(a2 + v141 + 8);
      v62 = *(_QWORD *)(a2 + v141 + 16);
      outlined copy of Data._Representation(v61, v62);
      v69[1] = v61;
      v69[2] = v62;
      v63 = *(_QWORD *)(a2 + v141 + 24);
      v64 = *(_QWORD *)(a2 + v141 + 32);
      outlined copy of Data._Representation(v63, v64);
      v69[3] = v63;
      v69[4] = v64;
      v70 = (int *)type metadata accessor for GKCrypto_GroupBlob();
      v66 = a1 + v141 + v70[7];
      v65 = a2 + v141 + v70[7];
      v67 = type metadata accessor for UnknownStorage();
      v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16);
      ((void (*)(uint64_t, uint64_t))v68)(v66, v65);
      v71 = (_QWORD *)(a1 + v141 + v70[8]);
      v72 = (uint64_t *)(a2 + v141 + v70[8]);
      v73 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
      v74 = *(_QWORD *)(v73 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v74 + 48))(v72, 1))
      {
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
        memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v60 = *v72;
        swift_bridgeObjectRetain();
        *v71 = v60;
        v68((char *)v71 + *(int *)(v73 + 20), (char *)v72 + *(int *)(v73 + 20), v67);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
      }
      v56 = (_QWORD *)(a1 + v141 + v70[9]);
      v57 = (uint64_t *)(a2 + v141 + v70[9]);
      v58 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
      v59 = *(_QWORD *)(v58 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v59 + 48))(v57, 1))
      {
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
      }
      else
      {
        v48 = *v57;
        v49 = v57[1];
        outlined copy of Data._Representation(*v57, v49);
        *v56 = v48;
        v56[1] = v49;
        v50 = v57[2];
        v51 = v57[3];
        outlined copy of Data._Representation(v50, v51);
        v56[2] = v50;
        v56[3] = v51;
        v52 = v57[4];
        v53 = v57[5];
        outlined copy of Data._Representation(v52, v53);
        v56[4] = v52;
        v56[5] = v53;
        v54 = v57[6];
        v55 = v57[7];
        outlined copy of Data._Representation(v54, v55);
        v56[6] = v54;
        v56[7] = v55;
        v68((char *)v56 + *(int *)(v58 + 32), (char *)v57 + *(int *)(v58 + 32), v67);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      }
      v44 = (_QWORD *)(a1 + v141 + v70[10]);
      v45 = (uint64_t *)(a2 + v141 + v70[10]);
      v46 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v47 + 48))(v45, 1))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v38 = *v45;
        v39 = v45[1];
        outlined copy of Data._Representation(*v45, v39);
        *v44 = v38;
        v44[1] = v39;
        v40 = v45[2];
        v41 = v45[3];
        outlined copy of Data._Representation(v40, v41);
        v44[2] = v40;
        v44[3] = v41;
        v42 = v45[4];
        v43 = v45[5];
        outlined copy of Data._Representation(v42, v43);
        v44[4] = v42;
        v44[5] = v43;
        v68((char *)v44 + *(int *)(v46 + 28), (char *)v45 + *(int *)(v46 + 28), v67);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      }
      *(_DWORD *)(a1 + v141 + *(int *)(v143 + 20)) = *(_DWORD *)(a2 + v141 + *(int *)(v143 + 20));
      (*(void (**)(void))(v144 + 56))();
    }
  }
  else if (v145(a2 + v141, 1, v143))
  {
    outlined destroy of GroupBlobEnvelope(a1 + v141);
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy((void *)(a1 + v141), (const void *)(a2 + v141), *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v124 = (_QWORD *)(a1 + v141);
    *(_DWORD *)(a1 + v141) = *(_DWORD *)(a2 + v141);
    v115 = *(_QWORD *)(a2 + v141 + 8);
    v116 = *(_QWORD *)(a2 + v141 + 16);
    outlined copy of Data._Representation(v115, v116);
    v8 = *(_QWORD *)(a1 + v141 + 8);
    v9 = *(_QWORD *)(a1 + v141 + 16);
    v124[1] = v115;
    v124[2] = v116;
    outlined consume of Data._Representation(v8, v9);
    v117 = *(_QWORD *)(a2 + v141 + 24);
    v118 = *(_QWORD *)(a2 + v141 + 32);
    outlined copy of Data._Representation(v117, v118);
    v10 = *(_QWORD *)(a1 + v141 + 24);
    v11 = *(_QWORD *)(a1 + v141 + 32);
    v124[3] = v117;
    v124[4] = v118;
    outlined consume of Data._Representation(v10, v11);
    v125 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v120 = a1 + v141 + v125[7];
    v119 = a2 + v141 + v125[7];
    v121 = type metadata accessor for UnknownStorage();
    v122 = *(_QWORD *)(v121 - 8);
    v123 = *(void (**)(char *, char *, uint64_t))(v122 + 24);
    ((void (*)(uint64_t, uint64_t))v123)(v120, v119);
    v127 = (_QWORD *)(a1 + v141 + v125[8]);
    v126 = (uint64_t *)(a2 + v141 + v125[8]);
    v128 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v129 = *(_QWORD *)(v128 - 8);
    v130 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v129 + 48);
    if (((unsigned int (*)(_QWORD *, uint64_t))v130)(v127, 1))
    {
      if (v130(v126, 1, v128))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
        memcpy(v127, v126, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        v113 = *v126;
        swift_bridgeObjectRetain();
        *v127 = v113;
        (*(void (**)(char *, char *, uint64_t))(v122 + 16))((char *)v127 + *(int *)(v128 + 20), (char *)v126 + *(int *)(v128 + 20), v121);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v127, 0, 1, v128);
      }
    }
    else if (v130(v126, 1, v128))
    {
      outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v127);
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v127, v126, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v114 = *v126;
      swift_bridgeObjectRetain();
      *v127 = v114;
      swift_bridgeObjectRelease();
      v123((char *)v127 + *(int *)(v128 + 20), (char *)v126 + *(int *)(v128 + 20), v121);
    }
    __dst = (_QWORD *)(a1 + v141 + v125[9]);
    __src = (uint64_t *)(a2 + v141 + v125[9]);
    v110 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v111 = *(_QWORD *)(v110 - 8);
    v112 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v111 + 48);
    if (((unsigned int (*)(_QWORD *, uint64_t))v112)(__dst, 1))
    {
      if (v112(__src, 1, v110))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        v92 = *__src;
        v93 = __src[1];
        outlined copy of Data._Representation(*__src, v93);
        *__dst = v92;
        __dst[1] = v93;
        v94 = __src[2];
        v95 = __src[3];
        outlined copy of Data._Representation(v94, v95);
        __dst[2] = v94;
        __dst[3] = v95;
        v96 = __src[4];
        v97 = __src[5];
        outlined copy of Data._Representation(v96, v97);
        __dst[4] = v96;
        __dst[5] = v97;
        v98 = __src[6];
        v99 = __src[7];
        outlined copy of Data._Representation(v98, v99);
        __dst[6] = v98;
        __dst[7] = v99;
        (*(void (**)(char *, char *, uint64_t))(v122 + 16))((char *)__dst + *(int *)(v110 + 32), (char *)__src + *(int *)(v110 + 32), v121);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v111 + 56))(__dst, 0, 1, v110);
      }
    }
    else if (v112(__src, 1, v110))
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)__dst);
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v100 = *__src;
      v101 = __src[1];
      outlined copy of Data._Representation(*__src, v101);
      v14 = *__dst;
      v15 = __dst[1];
      *__dst = v100;
      __dst[1] = v101;
      outlined consume of Data._Representation(v14, v15);
      v102 = __src[2];
      v103 = __src[3];
      outlined copy of Data._Representation(v102, v103);
      v16 = __dst[2];
      v17 = __dst[3];
      __dst[2] = v102;
      __dst[3] = v103;
      outlined consume of Data._Representation(v16, v17);
      v104 = __src[4];
      v105 = __src[5];
      outlined copy of Data._Representation(v104, v105);
      v18 = __dst[4];
      v19 = __dst[5];
      __dst[4] = v104;
      __dst[5] = v105;
      outlined consume of Data._Representation(v18, v19);
      v106 = __src[6];
      v107 = __src[7];
      outlined copy of Data._Representation(v106, v107);
      v20 = __dst[6];
      v21 = __dst[7];
      __dst[6] = v106;
      __dst[7] = v107;
      outlined consume of Data._Representation(v20, v21);
      v123((char *)__dst + *(int *)(v110 + 32), (char *)__src + *(int *)(v110 + 32), v121);
    }
    v88 = (_QWORD *)(a1 + v141 + v125[10]);
    v87 = (uint64_t *)(a2 + v141 + v125[10]);
    v89 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v90 = *(_QWORD *)(v89 - 8);
    v91 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v90 + 48);
    if (((unsigned int (*)(_QWORD *, uint64_t))v91)(v88, 1))
    {
      if (v91(v87, 1, v89))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
        memcpy(v88, v87, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v75 = *v87;
        v76 = v87[1];
        outlined copy of Data._Representation(*v87, v76);
        *v88 = v75;
        v88[1] = v76;
        v77 = v87[2];
        v78 = v87[3];
        outlined copy of Data._Representation(v77, v78);
        v88[2] = v77;
        v88[3] = v78;
        v79 = v87[4];
        v80 = v87[5];
        outlined copy of Data._Representation(v79, v80);
        v88[4] = v79;
        v88[5] = v80;
        (*(void (**)(char *, char *, uint64_t))(v122 + 16))((char *)v88 + *(int *)(v89 + 28), (char *)v87 + *(int *)(v89 + 28), v121);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v88, 0, 1, v89);
      }
    }
    else if (v91(v87, 1, v89))
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v88);
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v88, v87, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v81 = *v87;
      v82 = v87[1];
      outlined copy of Data._Representation(*v87, v82);
      v24 = *v88;
      v25 = v88[1];
      *v88 = v81;
      v88[1] = v82;
      outlined consume of Data._Representation(v24, v25);
      v83 = v87[2];
      v84 = v87[3];
      outlined copy of Data._Representation(v83, v84);
      v26 = v88[2];
      v27 = v88[3];
      v88[2] = v83;
      v88[3] = v84;
      outlined consume of Data._Representation(v26, v27);
      v85 = v87[4];
      v86 = v87[5];
      outlined copy of Data._Representation(v85, v86);
      v28 = v88[4];
      v29 = v88[5];
      v88[4] = v85;
      v88[5] = v86;
      outlined consume of Data._Representation(v28, v29);
      v123((char *)v88 + *(int *)(v89 + 28), (char *)v87 + *(int *)(v89 + 28), v121);
    }
    *(_DWORD *)(a1 + v141 + *(int *)(v143 + 20)) = *(_DWORD *)(a2 + v141 + *(int *)(v143 + 20));
  }
  return a1;
}

uint64_t initializeWithTake for MembershipUpdateIDSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *__dst;
  _OWORD *__src;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v29 = a3[9];
  v31 = type metadata accessor for GroupBlobEnvelope();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v32 + 48))(a2 + v29, 1))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy((void *)(a1 + v29), (const void *)(a2 + v29), *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v21 = a1 + v29;
    *(_DWORD *)v21 = *(_DWORD *)(a2 + v29);
    *(_OWORD *)(v21 + 8) = *(_OWORD *)(a2 + v29 + 8);
    *(_OWORD *)(v21 + 24) = *(_OWORD *)(a2 + v29 + 24);
    v22 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v18 = a1 + v29 + v22[7];
    v17 = a2 + v29 + v22[7];
    v19 = type metadata accessor for UnknownStorage();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
    ((void (*)(uint64_t, uint64_t))v20)(v18, v17);
    v23 = (_QWORD *)(a1 + v29 + v22[8]);
    v24 = (_QWORD *)(a2 + v29 + v22[8]);
    v25 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v26 + 48))(v24, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      *v23 = *v24;
      v20((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v19);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    __dst = (_OWORD *)(a1 + v29 + v22[9]);
    __src = (_OWORD *)(a2 + v29 + v22[9]);
    v15 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(v16 + 48))(__src, 1))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      __dst[2] = __src[2];
      __dst[3] = __src[3];
      v20((char *)__dst + *(int *)(v15 + 32), (char *)__src + *(int *)(v15 + 32), v19);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    v9 = (_OWORD *)(a1 + v29 + v22[10]);
    v10 = (_OWORD *)(a2 + v29 + v22[10]);
    v11 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(v12 + 48))(v10, 1))
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      *v9 = *v10;
      v9[1] = v10[1];
      v9[2] = v10[2];
      v20((char *)v9 + *(int *)(v11 + 28), (char *)v10 + *(int *)(v11 + 28), v19);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(_DWORD *)(a1 + v29 + *(int *)(v31 + 20)) = *(_DWORD *)(a2 + v29 + *(int *)(v31 + 20));
    (*(void (**)(void))(v32 + 56))();
  }
  return a1;
}

uint64_t assignWithTake for MembershipUpdateIDSMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  int *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(_OWORD *, uint64_t, uint64_t);
  _OWORD *__src;
  _OWORD *__dst;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(_OWORD *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  int *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(_QWORD *, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (_QWORD *)(a2 + a3[5]);
  v5 = (_QWORD *)(a1 + a3[5]);
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  v87 = a3[9];
  v89 = type metadata accessor for GroupBlobEnvelope();
  v90 = *(_QWORD *)(v89 - 8);
  v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v91)(a1 + v87, 1))
  {
    if (v91(a2 + v87, 1, v89))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
      memcpy((void *)(a1 + v87), (const void *)(a2 + v87), *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      v57 = a1 + v87;
      *(_DWORD *)v57 = *(_DWORD *)(a2 + v87);
      *(_OWORD *)(v57 + 8) = *(_OWORD *)(a2 + v87 + 8);
      *(_OWORD *)(v57 + 24) = *(_OWORD *)(a2 + v87 + 24);
      v58 = (int *)type metadata accessor for GKCrypto_GroupBlob();
      v54 = a1 + v87 + v58[7];
      v53 = a2 + v87 + v58[7];
      v55 = type metadata accessor for UnknownStorage();
      v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32);
      ((void (*)(uint64_t, uint64_t))v56)(v54, v53);
      v59 = (_QWORD *)(a1 + v87 + v58[8]);
      v60 = (_QWORD *)(a2 + v87 + v58[8]);
      v61 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
      v62 = *(_QWORD *)(v61 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t))(v62 + 48))(v60, 1))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        *v59 = *v60;
        v56((char *)v59 + *(int *)(v61 + 20), (char *)v60 + *(int *)(v61 + 20), v55);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
      }
      v49 = (_OWORD *)(a1 + v87 + v58[9]);
      v50 = (_OWORD *)(a2 + v87 + v58[9]);
      v51 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
      v52 = *(_QWORD *)(v51 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t))(v52 + 48))(v50, 1))
      {
        v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        *v49 = *v50;
        v49[1] = v50[1];
        v49[2] = v50[2];
        v49[3] = v50[3];
        v56((char *)v49 + *(int *)(v51 + 32), (char *)v50 + *(int *)(v51 + 32), v55);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      }
      v45 = (_OWORD *)(a1 + v87 + v58[10]);
      v46 = (_OWORD *)(a2 + v87 + v58[10]);
      v47 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
      v48 = *(_QWORD *)(v47 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t))(v48 + 48))(v46, 1))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        *v45 = *v46;
        v45[1] = v46[1];
        v45[2] = v46[2];
        v56((char *)v45 + *(int *)(v47 + 28), (char *)v46 + *(int *)(v47 + 28), v55);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      *(_DWORD *)(a1 + v87 + *(int *)(v89 + 20)) = *(_DWORD *)(a2 + v87 + *(int *)(v89 + 20));
      (*(void (**)(void))(v90 + 56))();
    }
  }
  else if (v91(a2 + v87, 1, v89))
  {
    outlined destroy of GroupBlobEnvelope(a1 + v87);
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy((void *)(a1 + v87), (const void *)(a2 + v87), *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v78 = a1 + v87;
    *(_DWORD *)v78 = *(_DWORD *)(a2 + v87);
    v6 = *(_QWORD *)(a2 + v87 + 16);
    v7 = *(_QWORD *)(a1 + v87 + 8);
    v8 = *(_QWORD *)(a1 + v87 + 16);
    *(_QWORD *)(v78 + 8) = *(_QWORD *)(a2 + v87 + 8);
    *(_QWORD *)(v78 + 16) = v6;
    outlined consume of Data._Representation(v7, v8);
    v9 = *(_QWORD *)(a2 + v87 + 32);
    v10 = *(_QWORD *)(a1 + v87 + 24);
    v11 = *(_QWORD *)(a1 + v87 + 32);
    *(_QWORD *)(v78 + 24) = *(_QWORD *)(a2 + v87 + 24);
    *(_QWORD *)(v78 + 32) = v9;
    outlined consume of Data._Representation(v10, v11);
    v79 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v74 = a1 + v87 + v79[7];
    v73 = a2 + v87 + v79[7];
    v75 = type metadata accessor for UnknownStorage();
    v76 = *(_QWORD *)(v75 - 8);
    v77 = *(void (**)(char *, char *, uint64_t))(v76 + 40);
    ((void (*)(uint64_t, uint64_t))v77)(v74, v73);
    v81 = (_QWORD *)(a1 + v87 + v79[8]);
    v80 = (_QWORD *)(a2 + v87 + v79[8]);
    v82 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v83 = *(_QWORD *)(v82 - 8);
    v84 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v83 + 48);
    if (((unsigned int (*)(_QWORD *, uint64_t))v84)(v81, 1))
    {
      if (v84(v80, 1, v82))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
        memcpy(v81, v80, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        *v81 = *v80;
        (*(void (**)(char *, char *, uint64_t))(v76 + 32))((char *)v81 + *(int *)(v82 + 20), (char *)v80 + *(int *)(v82 + 20), v75);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v81, 0, 1, v82);
      }
    }
    else if (v84(v80, 1, v82))
    {
      outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v81);
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v81, v80, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      *v81 = *v80;
      swift_bridgeObjectRelease();
      v77((char *)v81 + *(int *)(v82 + 20), (char *)v80 + *(int *)(v82 + 20), v75);
    }
    __dst = (_OWORD *)(a1 + v87 + v79[9]);
    __src = (_OWORD *)(a2 + v87 + v79[9]);
    v70 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v71 = *(_QWORD *)(v70 - 8);
    v72 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v71 + 48);
    if (((unsigned int (*)(_OWORD *, uint64_t))v72)(__dst, 1))
    {
      if (v72(__src, 1, v70))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        *__dst = *__src;
        __dst[1] = __src[1];
        __dst[2] = __src[2];
        __dst[3] = __src[3];
        (*(void (**)(char *, char *, uint64_t))(v76 + 32))((char *)__dst + *(int *)(v70 + 32), (char *)__src + *(int *)(v70 + 32), v75);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v71 + 56))(__dst, 0, 1, v70);
      }
    }
    else if (v72(__src, 1, v70))
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)__dst);
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v14 = *((_QWORD *)__src + 1);
      v15 = *(_QWORD *)__dst;
      v16 = *((_QWORD *)__dst + 1);
      *(_QWORD *)__dst = *(_QWORD *)__src;
      *((_QWORD *)__dst + 1) = v14;
      outlined consume of Data._Representation(v15, v16);
      v17 = *((_QWORD *)__src + 3);
      v18 = *((_QWORD *)__dst + 2);
      v19 = *((_QWORD *)__dst + 3);
      *((_QWORD *)__dst + 2) = *((_QWORD *)__src + 2);
      *((_QWORD *)__dst + 3) = v17;
      outlined consume of Data._Representation(v18, v19);
      v20 = *((_QWORD *)__src + 5);
      v21 = *((_QWORD *)__dst + 4);
      v22 = *((_QWORD *)__dst + 5);
      *((_QWORD *)__dst + 4) = *((_QWORD *)__src + 4);
      *((_QWORD *)__dst + 5) = v20;
      outlined consume of Data._Representation(v21, v22);
      v23 = *((_QWORD *)__src + 7);
      v24 = *((_QWORD *)__dst + 6);
      v25 = *((_QWORD *)__dst + 7);
      *((_QWORD *)__dst + 6) = *((_QWORD *)__src + 6);
      *((_QWORD *)__dst + 7) = v23;
      outlined consume of Data._Representation(v24, v25);
      v77((char *)__dst + *(int *)(v70 + 32), (char *)__src + *(int *)(v70 + 32), v75);
    }
    v64 = (_OWORD *)(a1 + v87 + v79[10]);
    v63 = (_OWORD *)(a2 + v87 + v79[10]);
    v65 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v66 = *(_QWORD *)(v65 - 8);
    v67 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v66 + 48);
    if (((unsigned int (*)(_OWORD *, uint64_t))v67)(v64, 1))
    {
      if (v67(v63, 1, v65))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
        memcpy(v64, v63, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        *v64 = *v63;
        v64[1] = v63[1];
        v64[2] = v63[2];
        (*(void (**)(char *, char *, uint64_t))(v76 + 32))((char *)v64 + *(int *)(v65 + 28), (char *)v63 + *(int *)(v65 + 28), v75);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v64, 0, 1, v65);
      }
    }
    else if (v67(v63, 1, v65))
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v64);
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v64, v63, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v28 = *((_QWORD *)v63 + 1);
      v29 = *(_QWORD *)v64;
      v30 = *((_QWORD *)v64 + 1);
      *(_QWORD *)v64 = *(_QWORD *)v63;
      *((_QWORD *)v64 + 1) = v28;
      outlined consume of Data._Representation(v29, v30);
      v31 = *((_QWORD *)v63 + 3);
      v32 = *((_QWORD *)v64 + 2);
      v33 = *((_QWORD *)v64 + 3);
      *((_QWORD *)v64 + 2) = *((_QWORD *)v63 + 2);
      *((_QWORD *)v64 + 3) = v31;
      outlined consume of Data._Representation(v32, v33);
      v34 = *((_QWORD *)v63 + 5);
      v35 = *((_QWORD *)v64 + 4);
      v36 = *((_QWORD *)v64 + 5);
      *((_QWORD *)v64 + 4) = *((_QWORD *)v63 + 4);
      *((_QWORD *)v64 + 5) = v34;
      outlined consume of Data._Representation(v35, v36);
      v77((char *)v64 + *(int *)(v65 + 28), (char *)v63 + *(int *)(v65 + 28), v75);
    }
    *(_DWORD *)(a1 + v87 + *(int *)(v89 + 20)) = *(_DWORD *)(a2 + v87 + *(int *)(v89 + 20));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MembershipUpdateIDSMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D33DC58(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v11;
  uint64_t v12;

  v11 = type metadata accessor for GPKGroupID();
  v12 = *(_QWORD *)(v11 - 8);
  if (a2 == *(_DWORD *)(v12 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v12 + 48))(a1, a2, v11);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v6 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) < 0x100000000uLL)
      v6 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    return (v6 + 1);
  }
  else
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    v5 = *(_QWORD *)(v4 - 8);
    if (a2 == *(_DWORD *)(v5 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + *(int *)(a3 + 36), a2, v4);
    else
      __break(1u);
  }
  return v7;
}

uint64_t storeEnumTagSinglePayload for MembershipUpdateIDSMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D33DDB0(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2 - 1;
  }
  else
  {
    result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    v5 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v5 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + *(int *)(a4 + 36), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for MembershipUpdateIDSMessage()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    v3 = type metadata accessor for GroupBlobEnvelope?();
    if (v1 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

uint64_t type metadata accessor for GroupBlobEnvelope?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GroupBlobEnvelope?;
  if (!lazy cache variable for type metadata for GroupBlobEnvelope?)
  {
    type metadata accessor for GroupBlobEnvelope();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GroupBlobEnvelope?);
      return v1;
    }
  }
  return v4;
}

uint64_t getEnumTagSinglePayload for MembershipUpdateIDSMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFA)
      goto LABEL_15;
    v7 = ((a2 + 5) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 250;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 6;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for MembershipUpdateIDSMessage.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFA)
  {
    v5 = ((a3 + 5) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFA)
  {
    v4 = ((a2 - 251) >> 8) + 1;
    *result = a2 + 5;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for MembershipUpdateIDSMessage.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for MembershipUpdateIDSMessage.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MembershipUpdateIDSMessage.CodingKeys()
{
  return &type metadata for MembershipUpdateIDSMessage.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for GroupEventIDSMessage(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v14;

  v14 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v14 & 0x20000) != 0)
  {
    v9 = *a2;
    swift_retain();
    *a1 = v9;
    return *a1 + ((v14 + 16) & ~(unint64_t)v14);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v6 = (char *)a1 + a3[5];
    v5 = (char *)a2 + a3[5];
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v6, v5);
    *(_QWORD *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v7 = a3[7];
    v8 = *(uint64_t *)((char *)a2 + v7);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v7) = v8;
    return (unint64_t)a1;
  }
}

uint64_t destroy for GroupEventIDSMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(a2 + 20);
  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v4);
  return swift_bridgeObjectRelease();
}

_BYTE *initializeWithCopy for GroupEventIDSMessage(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v3;
  _BYTE *result;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v5 = a3[5];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v3 - 8) + 16))(&a1[v5], &a2[v5]);
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v9 = a3[7];
  v10 = *(_QWORD *)&a2[v9];
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)&a1[v9] = v10;
  return result;
}

_BYTE *assignWithCopy for GroupEventIDSMessage(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v3 - 8) + 24))(&a1[v6], &a2[v6]);
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v4 = a3[7];
  v9 = &a1[v4];
  v10 = *(_QWORD *)&a2[v4];
  swift_bridgeObjectRetain();
  *v9 = v10;
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *initializeWithTake for GroupEventIDSMessage(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v3;
  _BYTE *result;
  uint64_t v5;

  *a1 = *a2;
  v5 = a3[5];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v5], &a2[v5]);
  result = a1;
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return result;
}

_BYTE *assignWithTake for GroupEventIDSMessage(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v3;
  uint64_t v5;

  *a1 = *a2;
  v5 = a3[5];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v3 - 8) + 40))(&a1[v5], &a2[v5]);
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupEventIDSMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D33E8DC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;
  int v5;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1 + *(int *)(a3 + 20), a2, v10);
  }
  else if (a2 == 2147483646)
  {
    v5 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 28)) < 0x100000000uLL)
      v5 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
    v3 = v5 - 1;
    if (v5 - 1 < 0)
      v3 = -1;
    return (v3 + 1);
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for GroupEventIDSMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D33E9F8(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  if (a3 == 2147483646)
    *(_QWORD *)(a1 + *(int *)(a4 + 28)) = a2;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for GroupEventIDSMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for GroupEventIDSMessage.Event(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GroupEventIDSMessage.Event(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for GroupEventIDSMessage.Event(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GroupEventIDSMessage.Event(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GroupEventIDSMessage.Event()
{
  return &type metadata for GroupEventIDSMessage.Event;
}

uint64_t getEnumTagSinglePayload for GroupEventIDSMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GroupEventIDSMessage.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for GroupEventIDSMessage.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for GroupEventIDSMessage.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GroupEventIDSMessage.CodingKeys()
{
  return &type metadata for GroupEventIDSMessage.CodingKeys;
}

unint64_t base witness table accessor for RawRepresentable in NSJSONReadingOptions()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t base witness table accessor for SetAlgebra in NSJSONReadingOptions()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t base witness table accessor for RawRepresentable in NSJSONWritingOptions()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t base witness table accessor for SetAlgebra in NSJSONWritingOptions()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t base witness table accessor for Equatable in NSJSONWritingOptions()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSJSONWritingOptions()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t base witness table accessor for Equatable in NSJSONReadingOptions()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSJSONReadingOptions()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in MembershipUpdateIDSMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in MembershipUpdateIDSMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in MembershipUpdateIDSMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type MembershipUpdateIDSMessage.CodingKeys and conformance MembershipUpdateIDSMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in RSVPResponseIDSMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in RSVPResponseIDSMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in RSVPResponseIDSMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPResponseIDSMessage.CodingKeys and conformance RSVPResponseIDSMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in InvitationIDSMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in InvitationIDSMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in InvitationIDSMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type InvitationIDSMessage.CodingKeys and conformance InvitationIDSMessage.CodingKeys();
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE1EC8], MEMORY[0x24BEE1E88]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return v0;
  }
  return v2;
}

uint64_t GroupKitDaemon.serviceBuilder.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v2;
}

id GroupKitDaemon.clientConnection.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v5;
  id v6;
  uint64_t v8;
  void *v9;

  swift_beginAccess();
  v9 = *(void **)(v0 + 24);
  v1 = v9;
  swift_endAccess();
  if (v9)
    return v9;
  type metadata accessor for ClientConnection();
  v5 = *(_QWORD *)(v8 + 16);
  swift_retain();
  v6 = ClientConnection.__allocating_init(serviceBuilder:)(v5);
  v2 = v6;
  swift_beginAccess();
  v3 = *(void **)(v8 + 24);
  *(_QWORD *)(v8 + 24) = v6;

  swift_endAccess();
  return v6;
}

uint64_t key path getter for GroupKitDaemon.clientConnection : GroupKitDaemon@<X0>(id *a1@<X8>)
{
  swift_retain();
  *a1 = GroupKitDaemon.clientConnection.getter();
  return swift_release();
}

uint64_t key path setter for GroupKitDaemon.clientConnection : GroupKitDaemon(id *a1)
{
  id v1;
  id v3;

  v3 = *a1;
  v1 = *a1;
  swift_retain();
  GroupKitDaemon.clientConnection.setter(v3);
  return swift_release();
}

void GroupKitDaemon.clientConnection.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v2 = a1;
  swift_beginAccess();
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;

  swift_endAccess();
}

uint64_t variable initialization expression of GroupKitDaemon.$__lazy_storage_$_clientConnection()
{
  return 0;
}

uint64_t GroupKitDaemon.eventService.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  swift_beginAccess();
  v6 = *(_QWORD *)(v0 + 32);
  swift_retain();
  swift_endAccess();
  if (v6)
    return v6;
  type metadata accessor for EventService();
  v2 = *(_QWORD *)(v5 + 16);
  swift_retain();
  v3 = EventService.__allocating_init(serviceBuilder:)(v2);
  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v5 + 32) = v3;
  swift_release();
  swift_endAccess();
  return v3;
}

uint64_t key path getter for GroupKitDaemon.eventService : GroupKitDaemon@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  *a1 = GroupKitDaemon.eventService.getter();
  return swift_release();
}

uint64_t key path setter for GroupKitDaemon.eventService : GroupKitDaemon(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_retain();
  swift_retain();
  GroupKitDaemon.eventService.setter(v2);
  return swift_release();
}

uint64_t GroupKitDaemon.eventService.setter(uint64_t a1)
{
  uint64_t v1;

  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t variable initialization expression of GroupKitDaemon.$__lazy_storage_$_eventService()
{
  return 0;
}

uint64_t GroupKitDaemon.__allocating_init(dependencies:)(id *a1)
{
  swift_allocObject();
  return GroupKitDaemon.init(dependencies:)(a1);
}

uint64_t GroupKitDaemon.init(dependencies:)(id *a1)
{
  uint64_t v1;
  uint64_t v4;
  id v5[120];
  uint64_t v6;
  id *v7;

  v7 = a1;
  v6 = v1;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  type metadata accessor for ServiceBuilder();
  outlined init with copy of Dependencies((uint64_t)a1, (uint64_t)v5);
  *(_QWORD *)(v4 + 16) = ServiceBuilder.__allocating_init(dependencies:)(v5);
  outlined destroy of Dependencies(a1);
  return v4;
}

Swift::Void __swiftcall GroupKitDaemon.start()()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  unint64_t v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t countAndFlagsBits;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *object;
  uint64_t v15;

  v15 = 0;
  v12 = type metadata accessor for LogSubsystem();
  v10 = *(_QWORD *)(v12 - 8);
  v3 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v11 = (uint64_t)&v3 - v3;
  v15 = v0;
  v4 = GroupKitDaemon.clientConnection.getter();
  ClientConnection.startListeningForConnectionRequest()();

  v5 = GroupKitDaemon.eventService.getter();
  EventService.startListeningForEvents()();
  swift_release();
  v6 = 1;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Daemon started", 0xEuLL, 1);
  countAndFlagsBits = v1._countAndFlagsBits;
  object = v1._object;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKitDaemon.swift", 0x21uLL, v6 & 1);
  v9 = v2._countAndFlagsBits;
  v13 = v2._object;
  v8 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t GroupKitDaemon.deinit()
{
  uint64_t v0;
  uint64_t v2;

  swift_release();
  outlined destroy of ClientConnection?((id *)(v0 + 24));
  outlined destroy of EventService?();
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ClientConnection?(id *a1)
{

}

uint64_t GroupKitDaemon.__deallocating_deinit()
{
  GroupKitDaemon.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GroupKitDaemon()
{
  return objc_opt_self();
}

uint64_t method lookup function for GroupKitDaemon()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GroupKitDaemon.__allocating_init(dependencies:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t variable initialization expression of ClientConnection.connectionQueue()
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  Swift::String v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  v2 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v8 = (uint64_t)&v1 - v2;
  v3 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.Attributes() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v7 = (char *)&v1 - v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DispatchQoS() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v6 = (char *)&v1 - v4;
  type metadata accessor for OS_dispatch_queue();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd.xpc.clientconnection", 0x28uLL, 1);
  default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v8);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

id ClientConnection.__allocating_init(serviceBuilder:)(uint64_t a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return ClientConnection.init(serviceBuilder:)(a1);
}

id ClientConnection.init(serviceBuilder:)(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  objc_class *ObjectType;
  uint64_t v21;
  id v22;
  objc_super v23;
  uint64_t v24;
  id v25;

  v21 = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  v25 = 0;
  v24 = 0;
  v17 = 0;
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (uint64_t)&v10 - v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.Attributes() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v17);
  v15 = (char *)&v10 - v11;
  v12 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DispatchQoS() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v21);
  v14 = (char *)&v10 - v12;
  v24 = v2;
  v3 = v1;
  v4 = v1;
  v25 = v1;
  v18 = OBJC_IVAR____TtC12GroupKitCore16ClientConnection_connectionQueue;
  type metadata accessor for OS_dispatch_queue();
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd.xpc.clientconnection", 0x28uLL, 1);
  default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v16);
  v5 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v6 = v19;
  *(_QWORD *)&v19[v18] = v5;

  swift_retain();
  v7 = v19;
  *(_QWORD *)&v19[OBJC_IVAR____TtC12GroupKitCore16ClientConnection_serviceBuilder] = v21;

  v23.receiver = v25;
  v23.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v23, sel_init);
  v8 = v22;
  v25 = v22;
  swift_release();

  return v22;
}

Swift::Void __swiftcall ClientConnection.startListeningForConnectionRequest()()
{
  uint64_t v0;
  id v1;
  Swift::String v2;
  uint64_t v3;
  int v4;
  uint64_t countAndFlagsBits;
  int v6;
  Swift::String v7;
  void *object;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char *v16;
  uint64_t v17;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  v21 = 0;
  v9 = type metadata accessor for LogSubsystem();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (uint64_t)&v3 - v11;
  v21 = v0;
  v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12GroupKitCore16ClientConnection_serviceBuilder);
  swift_retain();
  v14 = ServiceBuilder.listeners.getter();
  swift_release();
  v20 = v14;
  v1 = v15;
  v16 = &v18;
  v19 = v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSXPCListener]);
  lazy protocol witness table accessor for type [NSXPCListener] and conformance [A]();
  Sequence.forEach(_:)();

  outlined destroy of [NSXPCListener]();
  v4 = 1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("XPC client connection listener resumed", 0x26uLL, 1);
  countAndFlagsBits = v2._countAndFlagsBits;
  object = v2._object;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ClientConnection.swift", 0x23uLL, v4 & 1);
  v6 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

id closure #1 in ClientConnection.startListeningForConnectionRequest()(id *a1, id a2)
{
  id v2;
  id v5;

  v5 = *a1;
  v2 = a2;
  objc_msgSend(v5, sel_setDelegate_, a2);
  swift_unknownObjectRelease();
  return objc_msgSend(v5, sel_resume);
}

id partial apply for closure #1 in ClientConnection.startListeningForConnectionRequest()(id *a1)
{
  uint64_t v1;

  return closure #1 in ClientConnection.startListeningForConnectionRequest()(a1, *(id *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type [NSXPCListener] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [NSXPCListener] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NSXPCListener] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NSXPCListener]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [NSXPCListener] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [NSXPCListener]()
{
  swift_bridgeObjectRelease();
}

uint64_t ClientConnection.connectionWasInterrupted(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v9;
  unint64_t v10;
  Builtin::Word v11;
  void *object;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  Builtin::Word v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t countAndFlagsBits;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v13 = a1;
  v34 = 0;
  v33 = 0;
  v16 = 0;
  v27 = type metadata accessor for LogSubsystem();
  v25 = *(_QWORD *)(v27 - 8);
  v10 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v26 = (uint64_t)&v9 - v10;
  v34 = MEMORY[0x24BDAC7A8](v13);
  v33 = v1;
  v11 = 34;
  v2 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v18 = &v31;
  v31 = v2;
  v32 = v3;
  v21 = 1;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Client connection was interrupted ", v11, 1);
  object = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  v15 = &v30;
  v30 = v13;
  v14 = type metadata accessor for NSXPCConnection();
  lazy protocol witness table accessor for type NSXPCConnection and conformance NSObject();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v16, v21 & 1);
  v17 = v5._object;
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v20 = v31;
  v19 = v32;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v22 = String.init(stringInterpolation:)();
  v29 = v6;
  v23 = static os_log_type_t.error.getter();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ClientConnection.swift", 0x23uLL, v21 & 1);
  countAndFlagsBits = v7._countAndFlagsBits;
  v28 = v7._object;
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v26);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for NSXPCConnection()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSXPCConnection;
  if (!lazy cache variable for type metadata for NSXPCConnection)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSXPCConnection);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type NSXPCConnection and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSXPCConnection and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSXPCConnection and conformance NSObject)
  {
    v0 = type metadata accessor for NSXPCConnection();
    v1 = MEMORY[0x242635504](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSXPCConnection and conformance NSObject);
    return v1;
  }
  return v3;
}

uint64_t ClientConnection.connectionWasInvalidated(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v9;
  unint64_t v10;
  Builtin::Word v11;
  void *object;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  Builtin::Word v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t countAndFlagsBits;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v13 = a1;
  v34 = 0;
  v33 = 0;
  v16 = 0;
  v27 = type metadata accessor for LogSubsystem();
  v25 = *(_QWORD *)(v27 - 8);
  v10 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v26 = (uint64_t)&v9 - v10;
  v34 = MEMORY[0x24BDAC7A8](v13);
  v33 = v1;
  v11 = 34;
  v2 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v18 = &v31;
  v31 = v2;
  v32 = v3;
  v21 = 1;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Client connection was invalidated ", v11, 1);
  object = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  v15 = &v30;
  v30 = v13;
  v14 = type metadata accessor for NSXPCConnection();
  lazy protocol witness table accessor for type NSXPCConnection and conformance NSObject();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v16, v21 & 1);
  v17 = v5._object;
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v20 = v31;
  v19 = v32;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v22 = String.init(stringInterpolation:)();
  v29 = v6;
  v23 = static os_log_type_t.error.getter();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ClientConnection.swift", 0x23uLL, v21 & 1);
  countAndFlagsBits = v7._countAndFlagsBits;
  v28 = v7._object;
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v26);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id ClientConnection.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t ClientConnection.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"GroupKitCore.ClientConnection")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"GroupKitCore.ClientConnection", 29, (unint64_t)"init()", 6, 2, (unint64_t)"GroupKitCore/ClientConnection.swift", 35, 2, v1, 0x10uLL, 0xDuLL);
  __break(1u);
  return result;
}

id ClientConnection.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Bool __swiftcall ClientConnection.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  objc_class *v19;
  id v20;
  id v21;
  id v22;
  char *v23;
  objc_class *v24;
  uint64_t v25;
  Class v26;
  char *v27;
  objc_class *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t (*v32)(uint64_t);
  Class v33;
  id v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  id v41;
  int v42;
  uint64_t v43;
  int v44;
  Swift::String v45;
  void *v46;
  int v47;
  Builtin::Word v48;
  uint64_t v49;
  int v50;
  Swift::String v51;
  void *v52;
  int v53;
  uint64_t v54;
  int v55;
  Swift::String v56;
  void *v57;
  int v58;
  uint64_t v59;
  int v60;
  Swift::String v61;
  void *v62;
  void **v63;
  uint64_t *v64;
  void *v65;
  uint64_t v66;
  id *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  __objc2_class_ro *v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t (*v89)(uint64_t);
  uint64_t v90;
  void *v91;
  void *v92;
  id v93;
  int v94;
  uint64_t v95;
  int v96;
  Swift::String v97;
  void *v98;
  id v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  Class *v109;
  uint64_t *v110;
  int v111;
  Builtin::Word v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  Swift::String v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  Swift::String *v140;
  void *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t countAndFlagsBits;
  void (*v148)(uint64_t, uint64_t);
  void *v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  int v155;
  id v156;
  Swift::String v157;
  Swift::String v158;
  id v159;
  char *v160;
  void *v161;
  Class isa;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  void *object;
  uint64_t v168;
  unint64_t v169;
  Class *v170;
  uint64_t *v171;
  int v172;
  void *v173;
  Class v174;
  id v175;
  _QWORD v176[6];
  uint64_t v177;
  int v178;
  int v179;
  uint64_t (*v180)(uint64_t);
  void *v181;
  void (*v182)();
  uint64_t v183;
  id v184;
  uint64_t v185;
  _BYTE v186[40];
  _QWORD *v187;
  _QWORD v188[120];
  _BYTE v189[40];
  uint64_t v190;
  uint64_t v191;
  Class v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _BYTE v201[24];
  uint64_t v202;
  uint64_t v203;
  _BYTE v204[960];
  _QWORD v205[3];
  uint64_t v206;
  uint64_t v207;
  _QWORD __dst[3];
  uint64_t v209;
  uint64_t v210;
  Swift::String v211;
  Swift::String v212;
  Swift::String v213;
  Class v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;

  isa = _.super.isa;
  v174 = shouldAcceptNewConnection.super.isa;
  v219 = 0;
  v218 = 0;
  v217 = 0;
  v161 = 0;
  v199 = 0;
  v200 = 0;
  v190 = 0;
  v187 = 0;
  v185 = 0;
  v184 = 0;
  v168 = 0;
  v163 = type metadata accessor for LogSubsystem();
  v164 = *(_QWORD *)(v163 - 8);
  v165 = (*(_QWORD *)(v164 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v166 = (uint64_t)&v41 - v165;
  v219 = MEMORY[0x24BDAC7A8](isa);
  v218 = v3;
  v217 = v2;
  v4 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v171 = &v215;
  v215 = v4;
  v216 = v5;
  v172 = 1;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Should accept new connection ", 0x1DuLL, 1);
  object = v6._object;
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  v170 = &v214;
  v214 = v174;
  v169 = type metadata accessor for NSXPCConnection();
  lazy protocol witness table accessor for type NSXPCConnection and conformance NSObject();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" with service name: ", 0x14uLL, v172 & 1);
  v173 = v7._object;
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  v175 = -[objc_class serviceName](v174, sel_serviceName);
  if (v175)
  {
    v159 = v175;
    v156 = v175;
    v157._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v157._object = v8;

    v158 = v157;
  }
  else
  {
    v158._countAndFlagsBits = 0;
    v158._object = 0;
  }
  v212 = v158;
  if (v158._object)
  {
    v213 = v212;
  }
  else
  {
    v213 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<anonymous>", 0xBuLL, 1);
    outlined destroy of String?();
  }
  v140 = &v211;
  v211 = v213;
  v142 = &v215;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v151 = 1;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v141 = v9._object;
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  v144 = v215;
  v143 = v216;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v145 = String.init(stringInterpolation:)();
  v150 = v10;
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ClientConnection.swift", 0x23uLL, v151 & 1);
  countAndFlagsBits = v11._countAndFlagsBits;
  v149 = v11._object;
  v146 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v166);
  gpklog(_:type:fileID:line:subsystem:)();
  v148 = *(void (**)(uint64_t, uint64_t))(v164 + 8);
  v148(v166, v163);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v154 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit", 0x12uLL, v151 & 1)._object;
  v153 = String.utf8CString.getter();
  swift_retain();
  swift_release();
  swift_retain();
  v152 = v153 + 32;
  swift_bridgeObjectRelease();
  v155 = os_variant_allows_internal_security_policies();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((v155 & 1) == 0)
  {
    v42 = 1;
    v39 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Connection attempt received from non-internal build. declining.", 0x3FuLL, 1);
    v43 = v39._countAndFlagsBits;
    v46 = v39._object;
    v44 = static os_log_type_t.error.getter();
    v45 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ClientConnection.swift", 0x23uLL, v42 & 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v166);
    gpklog(_:type:fileID:line:subsystem:)();
    v148(v166, v163);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = v161;
  v134 = *(_QWORD *)&v160[OBJC_IVAR____TtC12GroupKitCore16ClientConnection_serviceBuilder];
  swift_retain();
  v135 = (id *)v204;
  outlined init with copy of Dependencies(v134 + 16, (uint64_t)v204);
  swift_release();
  v136 = v201;
  outlined init with copy of ClientBuilding((uint64_t)(v135 + 43), (uint64_t)v201);
  outlined destroy of Dependencies(v135);
  v137 = v202;
  v138 = v203;
  __swift_project_boxed_opaque_existential_1(v136, v202);
  (*(void (**)(_QWORD *__return_ptr, Class, Class, uint64_t))(v138 + 8))(v205, v174, isa, v137);
  v139 = v12;
  if (v12)
  {
    v41 = v139;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v201);

    memset(v205, 0, sizeof(v205));
    v206 = 0;
    v207 = 0;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v201);
  }
  if (!v206)
  {
    outlined destroy of Client?((uint64_t)v205);
LABEL_20:
    v48 = 35;
    v47 = 1;
    v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unable to obtain client information", 0x23uLL, 1);
    v49 = v38._countAndFlagsBits;
    v52 = v38._object;
    v51 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ClientConnection.swift", v48, v47 & 1);
    v50 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v166);
    gpklog(_:type:fileID:line:subsystem:)();
    v148(v166, v163);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v129 = __dst;
  outlined init with take of Client(v205, __dst);
  v131 = v209;
  v130 = v210;
  __swift_project_boxed_opaque_existential_1(v129, v209);
  v132 = (*(uint64_t (**)(uint64_t))(v130 + 8))(v131);
  v133 = v13;
  if (!v13)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
    goto LABEL_20;
  }
  v127 = v132;
  v128 = v133;
  v115 = v133;
  v114 = v132;
  v199 = v132;
  v200 = v133;
  v112 = 49;
  v14 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v117 = &v197;
  v197 = v14;
  v198 = v15;
  v120 = 1;
  v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Connection received from client with identifier: ", v112, 1);
  v113 = v16._object;
  DefaultStringInterpolation.appendLiteral(_:)(v16);
  swift_bridgeObjectRelease();
  v195 = v114;
  v196 = v115;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v120 & 1);
  v116 = v17._object;
  DefaultStringInterpolation.appendLiteral(_:)(v17);
  swift_bridgeObjectRelease();
  v119 = v197;
  v118 = v198;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v121 = String.init(stringInterpolation:)();
  v124 = v18;
  v123 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ClientConnection.swift", 0x23uLL, v120 & 1);
  v122 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v166);
  gpklog(_:type:fileID:line:subsystem:)();
  v148(v166, v163);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v125 = v209;
  v126 = v210;
  __swift_project_boxed_opaque_existential_1(__dst, v209);
  v194 = 0;
  if (((*(uint64_t (**)(char *, uint64_t))(v126 + 32))(&v194, v125) & 1) != 0)
  {
    v105 = *(_QWORD *)&v160[OBJC_IVAR____TtC12GroupKitCore16ClientConnection_serviceBuilder];
    swift_retain();
    v106 = ServiceBuilder.listeners.getter();
    swift_release();
    v110 = &v193;
    v193 = v106;
    v109 = &v192;
    v192 = isa;
    v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSXPCListener]);
    v108 = lazy protocol witness table accessor for type [NSXPCListener] and conformance [A]();
    lazy protocol witness table accessor for type NSXPCListener and conformance NSObject();
    v111 = Sequence<>.contains(_:)();
    outlined destroy of [NSXPCListener]();
    if ((v111 & 1) != 0)
    {
      v74 = 0;
      type metadata accessor for ClientMessageBroadcaster();
      v19 = v174;
      v63 = (void **)&v160[OBJC_IVAR____TtC12GroupKitCore16ClientConnection_connectionQueue];
      v64 = &v191;
      v85 = 32;
      swift_beginAccess();
      v65 = *v63;
      v20 = v65;
      swift_endAccess();
      v102 = ClientMessageBroadcaster.__allocating_init(connection:queue:)(v174, v65);
      v190 = v102;
      type metadata accessor for DaemonGroupManager();
      v103 = __dst;
      v70 = v189;
      outlined init with copy of Client((uint64_t)__dst, (uint64_t)v189);
      v71 = &ClientConnection;
      v68 = *(_QWORD *)&v160[OBJC_IVAR____TtC12GroupKitCore16ClientConnection_serviceBuilder];
      swift_retain();
      swift_retain();
      v66 = *(_QWORD *)&v160[(unint64_t)v71[39].weak_ivar_lyt];
      swift_retain();
      v67 = (id *)v188;
      outlined init with copy of Dependencies(v66 + 16, (uint64_t)v188);
      swift_release();
      v69 = v188[22];
      outlined destroy of Dependencies(v67);
      v101 = DaemonGroupManager.__allocating_init(client:builder:clientMessageBroadcaster:maxRetries:)((uint64_t)v70, v68, v102, v69);
      v187 = v101;
      type metadata accessor for DaemonService();
      v72 = v186;
      outlined init with copy of Client((uint64_t)v103, (uint64_t)v186);
      v73 = *(_QWORD *)&v160[(unint64_t)v71[39].weak_ivar_lyt];
      swift_retain();
      swift_retain();
      v100 = DaemonService.__allocating_init(client:builder:groupManager:)((uint64_t)v72, v73, (uint64_t)v101);
      v185 = v100;
      v76 = type metadata accessor for NSXPCInterface();
      v75 = &unk_256C7A3A0;
      v21 = &unk_256C7A3A0;
      v99 = @nonobjc NSXPCInterface.__allocating_init(with:)(v75);
      v184 = v99;
      v22 = v99;
      -[objc_class setExportedInterface:](v174, sel_setExportedInterface_, v99);

      swift_retain();
      -[objc_class setExportedObject:](v174, sel_setExportedObject_, v100);
      swift_unknownObjectRelease();
      v81 = &unk_250E1DA78;
      v82 = 24;
      v86 = 7;
      v79 = swift_allocObject();
      v77 = v79 + 16;
      v23 = v160;
      v78 = v160;
      swift_unknownObjectWeakInit();

      swift_retain();
      v24 = v174;
      v25 = swift_allocObject();
      v26 = v174;
      *(_QWORD *)(v25 + 16) = v79;
      *(_QWORD *)(v25 + 24) = v26;
      v182 = partial apply for closure #1 in ClientConnection.listener(_:shouldAcceptNewConnection:);
      v183 = v25;
      v87 = MEMORY[0x24BDAC760];
      v177 = MEMORY[0x24BDAC760];
      v88 = 1107296256;
      v178 = 1107296256;
      v179 = 0;
      v89 = thunk for @escaping @callee_guaranteed () -> ();
      v180 = thunk for @escaping @callee_guaranteed () -> ();
      v181 = &block_descriptor;
      v80 = _Block_copy(&v177);
      swift_release();
      swift_release();
      -[objc_class setInterruptionHandler:](v174, sel_setInterruptionHandler_, v80);
      _Block_release(v80);
      v90 = swift_allocObject();
      v83 = v90 + 16;
      v27 = v160;
      v84 = v160;
      swift_unknownObjectWeakInit();

      swift_retain();
      v28 = v174;
      v29 = swift_allocObject();
      v30 = v87;
      v31 = v88;
      v32 = v89;
      v33 = v174;
      *(_QWORD *)(v29 + 16) = v90;
      *(_QWORD *)(v29 + 24) = v33;
      v176[4] = partial apply for closure #2 in ClientConnection.listener(_:shouldAcceptNewConnection:);
      v176[5] = v29;
      v176[0] = v30;
      v176[1] = v31;
      v176[2] = v32;
      v176[3] = &block_descriptor_10;
      v91 = _Block_copy(v176);
      swift_release();
      swift_release();
      -[objc_class setInvalidationHandler:](v174, sel_setInvalidationHandler_, v91);
      _Block_release(v91);
      v92 = &unk_256C7AB90;
      v34 = &unk_256C7AB90;
      v93 = @nonobjc NSXPCInterface.__allocating_init(with:)(v92);
      -[objc_class setRemoteObjectInterface:](v174, sel_setRemoteObjectInterface_);

      -[objc_class resume](v174, sel_resume);
      v94 = 1;
      v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Connection accepted and resumed", 0x1FuLL, 1);
      v95 = v35._countAndFlagsBits;
      v98 = v35._object;
      v97 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ClientConnection.swift", 0x23uLL, v94 & 1);
      v96 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v166);
      gpklog(_:type:fileID:line:subsystem:)();
      v148(v166, v163);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
      return 1;
    }
    else
    {
      v58 = 1;
      v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown listener attempting to establish connection groupkit daemon", 0x43uLL, 1);
      v59 = v36._countAndFlagsBits;
      v62 = v36._object;
      v60 = static os_log_type_t.error.getter();
      v61 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ClientConnection.swift", 0x23uLL, v58 & 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v166);
      gpklog(_:type:fileID:line:subsystem:)();
      v148(v166, v163);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
      return 0;
    }
  }
  else
  {
    v53 = 1;
    v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("connection is not entitled. declining.", 0x26uLL, 1);
    v54 = v37._countAndFlagsBits;
    v57 = v37._object;
    v55 = static os_log_type_t.error.getter();
    v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ClientConnection.swift", 0x23uLL, v53 & 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v166);
    gpklog(_:type:fileID:line:subsystem:)();
    v148(v166, v163);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
    return 0;
  }
}

id @nonobjc NSXPCInterface.__allocating_init(with:)(void *a1)
{
  id v3;

  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_interfaceWithProtocol_, a1);

  return v3;
}

void closure #1 in ClientConnection.listener(_:shouldAcceptNewConnection:)(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  uint64_t v5;
  id v6[6];

  v5 = a1 + 16;
  v6[5] = (id)(a1 + 16);
  v6[4] = a2;
  swift_beginAccess();
  v6[0] = (id)MEMORY[0x242635600](v5);
  if (v6[0])
  {
    v3 = v6[0];
    v2 = v6[0];
    outlined destroy of ClientConnection?(v6);
    swift_endAccess();
    ClientConnection.connectionWasInterrupted(_:)((uint64_t)a2);

  }
  else
  {
    outlined destroy of ClientConnection?(v6);
    swift_endAccess();
  }
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v1 = swift_retain();
  v3(v1);
  return swift_release();
}

void closure #2 in ClientConnection.listener(_:shouldAcceptNewConnection:)(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  uint64_t v5;
  id v6[6];

  v5 = a1 + 16;
  v6[5] = (id)(a1 + 16);
  v6[4] = a2;
  swift_beginAccess();
  v6[0] = (id)MEMORY[0x242635600](v5);
  if (v6[0])
  {
    v3 = v6[0];
    v2 = v6[0];
    outlined destroy of ClientConnection?(v6);
    swift_endAccess();
    ClientConnection.connectionWasInvalidated(_:)((uint64_t)a2);

  }
  else
  {
    outlined destroy of ClientConnection?(v6);
    swift_endAccess();
  }
}

uint64_t specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(uint64_t (*a1)(uint64_t *, uint64_t), uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;

  if (a3 < 0x80uLL)
  {
    if (a3 > 0xFF)
      goto LABEL_12;
    v5 = (a3 + 1);
  }
  else
  {
    v7 = (a3 & 0x3F) << 8;
    if (a3 >> 6 < 0x20uLL)
    {
      v5 = (v7 | (a3 >> 6)) + 33217;
    }
    else
    {
      v6 = (v7 | (a3 >> 6) & 0x3F) << 8;
      if (a3 >> 12 < 0x10uLL)
        v5 = (v6 | (a3 >> 12)) + 8487393;
      else
        v5 = ((a3 >> 18) | ((v6 | (a3 >> 12) & 0x3F) << 8)) - 2122219023;
    }
  }
  v4 = 4 - ((uint64_t)__clz(v5) >> 3);
  v8 = (v5 - 0x101010101010101) & ((1 << ((8 * v4) & 0x3F)) - 1);
  if (v4 >= 0)
    return a1(&v8, v4);
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_12:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, unint64_t a10, unint64_t a11)
{
  unsigned int v11;
  uint64_t result;
  char v13[8];
  uint64_t v14;
  uint64_t (*v15)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  char *v16;
  uint64_t v17[2];
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v20 = a9;
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = a10;
  v29 = a11;
  v30 = "Fatal error";
  v31 = "Unexpectedly found nil while unwrapping an Optional value";
  v32 = "Swift/StaticString.swift";
  v33 = "Not enough bits to represent the passed value";
  v34 = "Swift/Integers.swift";
  v35 = "UnsafeBufferPointer with negative count";
  v36 = "Swift/UnsafeBufferPointer.swift";
  v37 = 0;
  v39 = a6;
  v40 = a7;
  v41 = a8;
  v42 = a1;
  v43 = a2;
  v44 = a10;
  v45 = a11;
  if ((a5 & 1) != 0)
  {
    if (v23 <= 0xFFFFFFFF)
    {
      v19 = v23;
      if ((v23 < 0xD800 || v19 > 0xDFFF) && v19 <= 0x10FFFF)
      {
        v18 = v17;
        MEMORY[0x24BDAC7A8](v17);
        v15 = partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
        v16 = &v38;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)((uint64_t (*)(uint64_t *, uint64_t))partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:), (uint64_t)v13, v11);
        return (uint64_t)v18;
      }
      v13[0] = 2;
      v14 = 148;
      LODWORD(v15) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v13[0] = 2;
    v14 = 3455;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v23)
    v46 = v23;
  else
    v46 = 0;
  v17[0] = v46;
  if (!v46)
  {
    v13[0] = 2;
    v14 = 136;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24 >= 0)
    return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v17[0], v24, v25, v26, v27, v21, v22, v28, v20, v29);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of ClientBuilding(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

void *outlined init with take of Client(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

unint64_t lazy protocol witness table accessor for type NSXPCListener and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSXPCListener and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSXPCListener and conformance NSObject)
  {
    v0 = type metadata accessor for NSXPCListener();
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE5BE0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSXPCListener and conformance NSObject);
    return v1;
  }
  return v3;
}

unint64_t type metadata accessor for NSXPCListener()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSXPCListener;
  if (!lazy cache variable for type metadata for NSXPCListener)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSXPCListener);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t outlined init with copy of Client(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

unint64_t type metadata accessor for NSXPCInterface()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSXPCInterface;
  if (!lazy cache variable for type metadata for NSXPCInterface)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSXPCInterface);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_23D342E44()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_23D342E80()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in ClientConnection.listener(_:shouldAcceptNewConnection:)()
{
  uint64_t v0;

  closure #1 in ClientConnection.listener(_:shouldAcceptNewConnection:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_23D342F2C()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in ClientConnection.listener(_:shouldAcceptNewConnection:)()
{
  uint64_t v0;

  closure #2 in ClientConnection.listener(_:shouldAcceptNewConnection:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t type metadata accessor for ClientConnection()
{
  return objc_opt_self();
}

uint64_t method lookup function for ClientConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ClientConnection.__allocating_init(serviceBuilder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  unsigned int v10;
  uint64_t result;
  char v12[8];
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v20 = a9;
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = a10;
  v29 = "Fatal error";
  v30 = "Unexpectedly found nil while unwrapping an Optional value";
  v31 = "Swift/StaticString.swift";
  v32 = "Not enough bits to represent the passed value";
  v33 = "Swift/Integers.swift";
  v34 = "UnsafeBufferPointer with negative count";
  v35 = "Swift/UnsafeBufferPointer.swift";
  v36 = 0;
  v38 = a6;
  v39 = a7;
  v40 = a1;
  v41 = a2;
  v42 = a8;
  v43 = a10;
  if ((a5 & 1) != 0)
  {
    if (v23 <= 0xFFFFFFFF)
    {
      v19 = v23;
      if ((v23 < 0xD800 || v19 > 0xDFFF) && v19 <= 0x10FFFF)
      {
        v18 = &v16;
        MEMORY[0x24BDAC7A8](&v16);
        v14 = partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
        v15 = &v37;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)((uint64_t (*)(uint64_t *, uint64_t))closure #1 in StaticString.withUTF8Buffer<A>(_:)specialized partial apply, (uint64_t)v12, v10);
        return (uint64_t)v18;
      }
      v12[0] = 2;
      v13 = 148;
      LODWORD(v14) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v12[0] = 2;
    v13 = 3455;
    LODWORD(v14) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v23)
    v44 = v23;
  else
    v44 = 0;
  v17 = v44;
  if (!v44)
  {
    v12[0] = 2;
    v13 = 136;
    LODWORD(v14) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24 >= 0)
    return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v17, v24, v25, v26, v21, v22, v27, v28);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), a3, *(_QWORD *)(v3 + 64));
}

uint64_t partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t result;

  if (!a3)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (a4 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (a4 <= 0x7FFFFFFF)
    {
      if (!a5)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      if (a6 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (a6 <= 0x7FFFFFFF)
        {
          if (!a1)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          if (a2 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (a2 <= 0x7FFFFFFF)
            {
              if (a7 <= 0xFFFFFFFF)
              {
                if (a8 <= 0xFFFFFFFF)
                  return _swift_stdlib_reportUnimplementedInitializerInFile();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t closure #1 in StaticString.withUTF8Buffer<A>(_:)specialized partial apply(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t UserKeyInfo.keyNameSpace.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t UserKeyInfo.encryptionPublicKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 24));
  return v2;
}

uint64_t UserKeyInfo.encryptionPublicKeySignature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 40));
  return v2;
}

uint64_t UserKeyInfo.verificationPublicKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 48);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 56));
  return v2;
}

uint64_t UserKeyInfo.verificationPublicKeySignature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 72));
  return v2;
}

uint64_t UserKeyInfo.keyVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 80);
}

uint64_t UserKeyInfo.keyAlgorithm.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t UserKeyInfo.signatureVerificationKeyPair.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 104);
  outlined copy of Data?(v2, *(_QWORD *)(v0 + 112));
  return v2;
}

uint64_t static UserKeyInfo.Metadata.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t UserKeyInfo.Metadata.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL UserKeyInfo.Metadata.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyProtocolVersion", 0x12uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t UserKeyInfo.Metadata.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t UserKeyInfo.Metadata.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo.Metadata.CodingKeys, &type metadata for UserKeyInfo.Metadata.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo.Metadata.CodingKeys, &type metadata for UserKeyInfo.Metadata.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo.Metadata.CodingKeys, &type metadata for UserKeyInfo.Metadata.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo.Metadata.CodingKeys, &type metadata for UserKeyInfo.Metadata.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo.Metadata.CodingKeys, &type metadata for UserKeyInfo.Metadata.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t UserKeyInfo.Metadata.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t UserKeyInfo.Metadata.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyProtocolVersion", 0x12uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UserKeyInfo.Metadata.CodingKeys()
{
  return static UserKeyInfo.Metadata.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UserKeyInfo.Metadata.CodingKeys()
{
  return UserKeyInfo.Metadata.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UserKeyInfo.Metadata.CodingKeys()
{
  return UserKeyInfo.Metadata.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UserKeyInfo.Metadata.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance UserKeyInfo.Metadata.CodingKeys()
{
  return UserKeyInfo.Metadata.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance UserKeyInfo.Metadata.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = UserKeyInfo.Metadata.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance UserKeyInfo.Metadata.CodingKeys()
{
  return UserKeyInfo.Metadata.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance UserKeyInfo.Metadata.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = UserKeyInfo.Metadata.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UserKeyInfo.Metadata.CodingKeys()
{
  lazy protocol witness table accessor for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UserKeyInfo.Metadata.CodingKeys()
{
  lazy protocol witness table accessor for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t UserKeyInfo.Metadata.encode(to:)(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  int v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = a1;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v24 = a2;
  v12 = a2;
  v13 = BYTE4(a2);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<UserKeyInfo.Metadata.CodingKeys>);
  v7 = *(_QWORD *)(v15 - 8);
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = (char *)&v5 - v8;
  v23 = (_QWORD *)MEMORY[0x24BDAC7A8](v6);
  v21 = v12;
  v14 = 1;
  v22 = v2 & 1;
  v9 = v23[3];
  v10 = v23[4];
  __swift_project_boxed_opaque_existential_1(v23, v9);
  lazy protocol witness table accessor for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v3 = v16;
  v19 = v12;
  v20 = v13 & 1 & v14;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v17 = v3;
  v18 = v3;
  if (v3)
    v5 = v18;
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v15);
}

uint64_t UserKeyInfo.Metadata.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  char v26;

  v12 = a1;
  v24 = 0;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<UserKeyInfo.Metadata.CodingKeys>);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = (char *)v4 - v15;
  v24 = (_QWORD *)MEMORY[0x24BDAC7A8](v12);
  v18 = v24[3];
  v19 = v24[4];
  __swift_project_boxed_opaque_existential_1(v24, v18);
  lazy protocol witness table accessor for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys();
  v1 = v17;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v20 = v1;
  v21 = v1;
  if (v1)
  {
    v4[3] = v21;
    v4[0] = v21;
    __swift_destroy_boxed_opaque_existential_1(v12);
    return v4[1];
  }
  else
  {
    v2 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v8 = 0;
    v23 = v2;
    v9 = v2;
    v10 = BYTE4(v2);
    v11 = 0;
    v6 = BYTE4(v2);
    v5 = v2;
    v25 = v2;
    v7 = 1;
    v26 = BYTE4(v2) & 1;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    __swift_destroy_boxed_opaque_existential_1(v12);
    LODWORD(v22) = v5;
    BYTE4(v22) = v6 & 1 & v7;
    return v22;
  }
}

uint64_t UserKeyInfo.Metadata.init(keyProtocolVersion:)(uint64_t a1)
{
  uint64_t v2;

  LODWORD(v2) = a1;
  BYTE4(v2) = BYTE4(a1) & 1;
  return v2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance UserKeyInfo.Metadata@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = UserKeyInfo.Metadata.init(from:)(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UserKeyInfo.Metadata(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  LODWORD(v3) = *(_DWORD *)v1;
  BYTE4(v3) = *(_BYTE *)(v1 + 4) & 1;
  return UserKeyInfo.Metadata.encode(to:)(a1, v3);
}

uint64_t UserKeyInfo.init(keyNameSpace:encryptionPublicKey:encryptionPublicKeySignature:verificationPublicKey:verificationPublicKeySignature:keyVersion:keyAlgorithm:signatureVerificationKeyPair:keyProtocolVersion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, unint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v30[17];
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD __b[18];

  memset(__b, 0, 0x88uLL);
  __b[17] = a17;
  v46 = a1;
  v47 = a2;
  v44 = a3;
  v45 = a4;
  v42 = a5;
  v43 = a6;
  v40 = a7;
  v41 = a8;
  v38 = a10;
  v39 = a11;
  v37 = a12;
  v35 = a13;
  v36 = a14;
  v33 = a15;
  v34 = a16;
  v31 = a17;
  v32 = BYTE4(a17) & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[0] = a1;
  __b[1] = a2;
  outlined copy of Data._Representation(a3, a4);
  outlined copy of Data._Representation(a3, a4);
  __b[2] = a3;
  __b[3] = a4;
  outlined copy of Data._Representation(a5, a6);
  outlined copy of Data._Representation(a5, a6);
  __b[4] = a5;
  __b[5] = a6;
  outlined copy of Data._Representation(a7, a8);
  outlined copy of Data._Representation(a7, a8);
  __b[6] = a7;
  __b[7] = a8;
  outlined copy of Data._Representation(a10, a11);
  outlined copy of Data._Representation(a10, a11);
  __b[8] = a10;
  __b[9] = a11;
  LODWORD(__b[10]) = a12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[11] = a13;
  __b[12] = a14;
  outlined copy of Data._Representation(a15, a16);
  outlined copy of Data?(a15, a16);
  __b[13] = a15;
  __b[14] = a16;
  if ((a17 & 0x100000000) != 0)
  {
    __b[15] = 0;
    __b[16] = 0;
  }
  else
  {
    __b[15] = static UserKeyInfo.serializedMetadata(keyProtocolVersion:)(a17);
    __b[16] = v17;
  }
  v19 = __b[15];
  v20 = __b[16];
  swift_bridgeObjectRetain();
  v30[0] = a1;
  v30[1] = a2;
  v30[2] = a3;
  v30[3] = a4;
  v30[4] = a5;
  v30[5] = a6;
  v30[6] = a7;
  v30[7] = a8;
  v30[8] = a10;
  v30[9] = a11;
  LODWORD(v30[10]) = a12;
  v30[11] = a13;
  v30[12] = a14;
  v30[13] = a15;
  v30[14] = a16;
  v30[15] = v19;
  v30[16] = v20;
  outlined retain of UserKeyInfo(v30);
  swift_bridgeObjectRelease();
  outlined consume of Data?(a15, a16);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(a10, a11);
  outlined consume of Data._Representation(a7, a8);
  outlined consume of Data._Representation(a5, a6);
  outlined consume of Data._Representation(a3, a4);
  swift_bridgeObjectRelease();
  memcpy(a9, v30, 0x88uLL);
  outlined consume of Data._Representation(a15, a16);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(a10, a11);
  outlined consume of Data._Representation(a7, a8);
  outlined consume of Data._Representation(a5, a6);
  outlined consume of Data._Representation(a3, a4);
  swift_bridgeObjectRelease();
  return outlined destroy of UserKeyInfo((uint64_t)__b);
}

uint64_t static UserKeyInfo.serializedMetadata(keyProtocolVersion:)(unsigned int a1)
{
  int v1;
  char v2;
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  Class isa;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55[2];
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  char v60;
  int v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;

  v42 = a1;
  v66 = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  v58 = 0;
  v61 = 0;
  v62 = 0;
  v57 = 0;
  v56 = 0;
  v63 = 0;
  v64 = 0;
  v45 = 0;
  v43 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for String.Encoding() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v44 = (char *)&v8 - v43;
  v58 = v1;
  LODWORD(v54) = v1;
  v48 = 1;
  BYTE4(v54) = v2 & 1;
  v53 = UserKeyInfo.Metadata.init(keyProtocolVersion:)(v54);
  v46 = v53;
  v47 = BYTE4(v53);
  v61 = v53;
  v62 = BYTE4(v53) & 1 & v48;
  type metadata accessor for DictionaryEncoder();
  v49 = DictionaryEncoder.__allocating_init()();
  v57 = v49;
  v50 = &v59;
  v59 = v46;
  v60 = v47 & 1 & v48;
  lazy protocol witness table accessor for type UserKeyInfo.Metadata and conformance UserKeyInfo.Metadata();
  v51 = dispatch thunk of DictionaryEncoder.encode<A>(_:)();
  v52 = 0;
  v40 = v51;
  v39 = v51;
  if (v51)
  {
    v38 = v39;
    v31 = v39;
    v56 = v39;
    v32 = 0;
    v65 = 0;
    v34 = (id)objc_opt_self();
    swift_bridgeObjectRetain();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    type metadata accessor for NSJSONWritingOptions();
    v33 = _allocateUninitializedArray<A>(_:)();
    lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
    SetAlgebra<>.init(arrayLiteral:)();
    v55[0] = v65;
    v37 = objc_msgSend(v34, sel_dataWithJSONObject_options_error_, isa, v55[1], v55);
    v35 = v55[0];
    v3 = v55[0];
    v4 = v65;
    v65 = v35;

    swift_unknownObjectRelease();
    if (v37)
    {
      v30 = v37;
      v25 = v37;
      v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = v5;

      v28 = v26;
      v29 = v27;
    }
    else
    {
      v11 = 0;
      v12 = 0xF000000000000000;
      v9 = v65;
      v10 = (id)_convertNSErrorToError(_:)();

      swift_willThrow();
      v28 = v11;
      v29 = v12;
    }
    v23 = v29;
    v24 = v28;
    if ((v29 & 0xF000000000000000) == 0xF000000000000000)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v19 = v45;
      v20 = v45;
    }
    else
    {
      v21 = v24;
      v22 = v23;
      v16 = v23;
      v15 = v24;
      v63 = v24;
      v64 = v23;
      static String.Encoding.utf8.getter();
      v17 = String.init(data:encoding:)();
      v18 = v6;
      outlined consume of Data._Representation(v15, v16);
      swift_bridgeObjectRelease();
      swift_release();
      v19 = v17;
      v20 = v18;
    }
  }
  else
  {
    swift_release();
    v19 = v45;
    v20 = v45;
  }
  v13 = v20;
  v14 = v19;
  return v19;
}

unint64_t lazy protocol witness table accessor for type UserKeyInfo.Metadata and conformance UserKeyInfo.Metadata()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo.Metadata and conformance UserKeyInfo.Metadata;
  if (!lazy protocol witness table cache variable for type UserKeyInfo.Metadata and conformance UserKeyInfo.Metadata)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo.Metadata, &type metadata for UserKeyInfo.Metadata);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo.Metadata and conformance UserKeyInfo.Metadata);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo.Metadata and conformance UserKeyInfo.Metadata;
  if (!lazy protocol witness table cache variable for type UserKeyInfo.Metadata and conformance UserKeyInfo.Metadata)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo.Metadata, &type metadata for UserKeyInfo.Metadata);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo.Metadata and conformance UserKeyInfo.Metadata);
    return v0;
  }
  return v2;
}

uint64_t UserKeyInfo.serializedForCrypto()()
{
  const void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  _QWORD v24[17];
  _BYTE __dst[136];

  v13 = type metadata accessor for GKCrypto_UserKeys();
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v18 = (uint64_t)v7 - v14;
  v17 = v24;
  v16 = 136;
  memcpy(v24, v0, sizeof(v24));
  memcpy(__dst, v15, sizeof(__dst));
  outlined retain of UserKeyInfo(v24);
  v19 = v23;
  v23[2] = v17;
  v1 = lazy protocol witness table accessor for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys();
  v2 = v20;
  v21 = v1;
  static Message.with(_:)();
  v22 = v2;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    outlined release of UserKeyInfo(v24);
    default argument 0 of Message.serializedData(partial:)();
    v3 = v22;
    v4 = Message.serializedData(partial:)();
    v9 = v3;
    v10 = v4;
    v11 = v5;
    v12 = v3;
    if (!v3)
    {
      v7[2] = v11;
      v8 = v10;
      outlined destroy of GKCrypto_UserKeys(v18);
      return v8;
    }
  }
  v7[0] = v12;
  outlined destroy of GKCrypto_UserKeys(v18);
  return v7[1];
}

uint64_t *closure #1 in UserKeyInfo.serializedForCrypto()(uint64_t a1, _OWORD *a2)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_DWORD *)a1 = 1;
  v8 = a2[1];
  outlined retain of Data((uint64_t)&v8);
  outlined assign with take of Data((uint64_t *)&v8, (uint64_t *)(a1 + 8));
  v7 = a2[3];
  outlined retain of Data((uint64_t)&v7);
  outlined assign with take of Data((uint64_t *)&v7, (uint64_t *)(a1 + 24));
  v6 = a2[2];
  outlined retain of Data((uint64_t)&v6);
  outlined assign with take of Data((uint64_t *)&v6, (uint64_t *)(a1 + 40));
  v5 = a2[4];
  outlined retain of Data((uint64_t)&v5);
  return outlined assign with take of Data((uint64_t *)&v5, (uint64_t *)(a1 + 56));
}

uint64_t *partial apply for closure #1 in UserKeyInfo.serializedForCrypto()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in UserKeyInfo.serializedForCrypto()(a1, *(_OWORD **)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys)
  {
    v0 = type metadata accessor for GKCrypto_UserKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_UserKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys)
  {
    v0 = type metadata accessor for GKCrypto_UserKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_UserKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys)
  {
    v0 = type metadata accessor for GKCrypto_UserKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_UserKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys)
  {
    v0 = type metadata accessor for GKCrypto_UserKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_UserKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys)
  {
    v0 = type metadata accessor for GKCrypto_UserKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_UserKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_UserKeys and conformance GKCrypto_UserKeys);
    return v1;
  }
  return v3;
}

uint64_t default argument 0 of Message.serializedData(partial:)()
{
  return 0;
}

uint64_t outlined destroy of GKCrypto_UserKeys(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  v3 = *(int *)(type metadata accessor for GKCrypto_UserKeys() + 44);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

uint64_t UserKeyInfo.metadataEncodedKeyProtocolVersion.getter()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  id v3;
  void *v4;
  id v6;
  id v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  Class isa;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  id v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  char v30;
  unsigned int v31;
  char v32;
  void *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v29 = 0;
  v30 = 0;
  v18 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v0 + 128);
  type metadata accessor for DictionaryDecoder();
  v25 = DictionaryDecoder.__allocating_init()();
  swift_bridgeObjectRetain();
  if (!v19)
    goto LABEL_16;
  v23 = v18;
  v24 = v19;
  v33 = 0;
  v14 = (id)objc_opt_self();
  v22[2] = (id)MEMORY[0x242634964](v18, v19);
  v22[3] = v1;
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  v13 = Data.init<A>(_:)();
  v12 = v2;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v13, v12);
  type metadata accessor for NSJSONReadingOptions();
  _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  v22[0] = v33;
  v17 = objc_msgSend(v14, sel_JSONObjectWithData_options_error_, isa, v22[1], v22);
  v15 = v22[0];
  v3 = v22[0];
  v4 = v33;
  v33 = v15;

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    if ((swift_dynamicCast() & 1) != 0)
      v11 = v21;
    else
      v11 = 0;
    swift_unknownObjectRelease();
    v10 = v11;
  }
  else
  {
    v6 = v33;
    v7 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    v10 = 0;
  }
  if (!v10)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    swift_release();
    return 0;
  }
  lazy protocol witness table accessor for type UserKeyInfo.Metadata and conformance UserKeyInfo.Metadata();
  dispatch thunk of DictionaryDecoder.decode<A>(_:from:)();
  v9 = (v31 | ((unint64_t)(v32 & 1) << 32)) & 0xFFFFFFFFFFLL;
  v29 = v31;
  v30 = BYTE4(v9) & 1;
  v27 = v31;
  v28 = BYTE4(v9) & 1;
  if ((v9 & 0x100000000) != 0)
    v20 = 0;
  else
    v20 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v20;
}

void static UserKeyInfo.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3457B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D345838
                                                                                       + *((int *)qword_23D3458F0 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D345848()
{
  uint64_t v1;

  return v1 == 0;
}

void UserKeyInfo.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D345964()
{
  return Hasher.combine<A>(_:)();
}

uint64_t UserKeyInfo.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unsigned __int8 v11;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyNameSpace", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v10 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 0;
LABEL_20:
    swift_bridgeObjectRelease();
    return v11;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("encryptionPublicKey", 0x13uLL, 1);
  swift_bridgeObjectRetain();
  v9 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 1;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("encryptionPublicKeySignature", 0x1CuLL, 1);
  swift_bridgeObjectRetain();
  v8 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 2;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("verificationPublicKey", 0x15uLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 3;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("verificationPublicKeySignature", 0x1EuLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 4;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyVersion", 0xAuLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 5;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyAlgorithm", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 6;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signatureVerificationKeyPair", 0x1CuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 7;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("metadata", 8uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 8;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 9;
}

uint64_t UserKeyInfo.CodingKeys.init(intValue:)()
{
  return 9;
}

uint64_t UserKeyInfo.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo.CodingKeys, &type metadata for UserKeyInfo.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo.CodingKeys, &type metadata for UserKeyInfo.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo.CodingKeys, &type metadata for UserKeyInfo.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo.CodingKeys, &type metadata for UserKeyInfo.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for UserKeyInfo.CodingKeys, &type metadata for UserKeyInfo.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t UserKeyInfo.CodingKeys.intValue.getter()
{
  return 0;
}

void UserKeyInfo.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D346114()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyNameSpace", 0xCuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UserKeyInfo.CodingKeys(char *a1)
{
  char v1;

  static UserKeyInfo.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UserKeyInfo.CodingKeys()
{
  return UserKeyInfo.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance UserKeyInfo.CodingKeys(uint64_t a1)
{
  char *v1;

  UserKeyInfo.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UserKeyInfo.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance UserKeyInfo.CodingKeys()
{
  char *v0;

  UserKeyInfo.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance UserKeyInfo.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = UserKeyInfo.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance UserKeyInfo.CodingKeys()
{
  return UserKeyInfo.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance UserKeyInfo.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = UserKeyInfo.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UserKeyInfo.CodingKeys()
{
  lazy protocol witness table accessor for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UserKeyInfo.CodingKeys()
{
  lazy protocol witness table accessor for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t UserKeyInfo.encode(to:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD **v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  _QWORD v69[2];
  char v70;
  char v71;
  char v72;
  _QWORD v73[2];
  char v74;
  _QWORD v75[2];
  char v76;
  _QWORD v77[2];
  char v78;
  _QWORD v79[2];
  char v80;
  uint64_t *v81;
  _QWORD *v82;

  v42 = &v82;
  v39 = a1;
  v82 = 0;
  v81 = 0;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<UserKeyInfo.CodingKeys>);
  v40 = *(_QWORD *)(v64 - 8);
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v60 = (char *)v12 - v41;
  v82 = (_QWORD *)MEMORY[0x24BDAC7A8](v39);
  v62 = *v1;
  v63 = v1[1];
  v43 = v1[2];
  v44 = v1[3];
  v45 = v1[4];
  v46 = v1[5];
  v47 = v1[6];
  v48 = v1[7];
  v49 = v1[8];
  v50 = v1[9];
  v51 = *((_DWORD *)v1 + 20);
  v52 = v1[11];
  v53 = v1[12];
  v54 = v1[13];
  v55 = v1[14];
  v56 = v1[15];
  v57 = v1[16];
  v81 = v1;
  v58 = v82[3];
  v59 = v82[4];
  __swift_project_boxed_opaque_existential_1(v82, v58);
  lazy protocol witness table accessor for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v2 = v61;
  swift_bridgeObjectRetain();
  v80 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v65 = v2;
  v66 = v2;
  if (v2)
  {
    v18 = v66;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v60, v64);
    v19 = v18;
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined copy of Data._Representation(v43, v44);
    v35 = v79;
    v79[0] = v43;
    v79[1] = v44;
    v34 = &v78;
    v78 = 1;
    v3 = lazy protocol witness table accessor for type Data and conformance Data();
    v4 = v65;
    v36 = v3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v37 = v4;
    v38 = v4;
    if (v4)
    {
      v17 = v38;
      outlined destroy of Data((uint64_t)v79);
      result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v60, v64);
      v19 = v17;
    }
    else
    {
      outlined destroy of Data((uint64_t)v79);
      outlined copy of Data._Representation(v45, v46);
      v5 = v37;
      v77[0] = v45;
      v77[1] = v46;
      v76 = 2;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v32 = v5;
      v33 = v5;
      if (v5)
      {
        v16 = v33;
        outlined destroy of Data((uint64_t)v77);
        result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v60, v64);
        v19 = v16;
      }
      else
      {
        outlined destroy of Data((uint64_t)v77);
        outlined copy of Data._Representation(v47, v48);
        v6 = v32;
        v75[0] = v47;
        v75[1] = v48;
        v74 = 3;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v30 = v6;
        v31 = v6;
        if (v6)
        {
          v15 = v31;
          outlined destroy of Data((uint64_t)v75);
          result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v60, v64);
          v19 = v15;
        }
        else
        {
          outlined destroy of Data((uint64_t)v75);
          outlined copy of Data._Representation(v49, v50);
          v7 = v30;
          v73[0] = v49;
          v73[1] = v50;
          v72 = 4;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v28 = v7;
          v29 = v7;
          if (v7)
          {
            v14 = v29;
            outlined destroy of Data((uint64_t)v73);
            result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v60, v64);
            v19 = v14;
          }
          else
          {
            outlined destroy of Data((uint64_t)v73);
            v8 = v28;
            v71 = 5;
            KeyedEncodingContainer.encode(_:forKey:)();
            v26 = v8;
            v27 = v8;
            if (v8)
            {
              v13 = v27;
              result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v60, v64);
              v19 = v13;
            }
            else
            {
              swift_bridgeObjectRetain();
              v70 = 6;
              KeyedEncodingContainer.encode(_:forKey:)();
              v24 = 0;
              v25 = 0;
              swift_bridgeObjectRelease();
              outlined copy of Data?(v54, v55);
              v9 = v24;
              v69[0] = v54;
              v69[1] = v55;
              v68 = 7;
              KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
              v22 = v9;
              v23 = v9;
              if (v9)
              {
                v12[1] = v23;
                outlined destroy of Data?((uint64_t)v69);
                return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v60, v64);
              }
              else
              {
                outlined destroy of Data?((uint64_t)v69);
                v10 = v22;
                swift_bridgeObjectRetain();
                v67 = 8;
                KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
                v20 = v10;
                v21 = v10;
                if (v10)
                  v12[0] = v21;
                swift_bridgeObjectRelease();
                return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v60, v64);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t outlined destroy of Data?(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *UserKeyInfo.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[10];
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  char v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  _QWORD *v110;
  _QWORD v111[2];
  _QWORD v112[2];
  _QWORD v113[2];
  _QWORD v114[2];
  _QWORD v115[2];
  int v116;
  _QWORD v117[2];
  _QWORD v118[4];
  __int16 v119;

  v72 = a2;
  v73 = a1;
  v110 = 0;
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<UserKeyInfo.CodingKeys>);
  v75 = *(_QWORD *)(v74 - 8);
  v76 = (*(_QWORD *)(v75 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v77 = (char *)&v18 - v76;
  v119 = 0;
  v110 = (_QWORD *)MEMORY[0x24BDAC7A8](v73);
  v79 = v110[3];
  v80 = v110[4];
  __swift_project_boxed_opaque_existential_1(v110, v79);
  lazy protocol witness table accessor for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys();
  v2 = v78;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v81 = v2;
  v82 = v2;
  if (v2)
  {
    v25 = v82;
  }
  else
  {
    v109 = 0;
    v3 = KeyedDecodingContainer.decode(_:forKey:)();
    v68 = 0;
    v69 = v3;
    v70 = v4;
    v71 = 0;
    v63 = v4;
    v62 = v3;
    v119 = 1;
    swift_bridgeObjectRetain();
    v111[0] = v62;
    v111[1] = v63;
    v64 = &v106;
    v106 = 1;
    v5 = lazy protocol witness table accessor for type Data and conformance Data();
    v6 = v68;
    v65 = v5;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v66 = v6;
    v67 = v6;
    if (v6)
    {
      v24 = v67;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v74);
      v25 = v24;
    }
    else
    {
      v58 = v107;
      v59 = v108;
      v119 = 3;
      outlined copy of Data._Representation(v107, v108);
      v7 = v66;
      v112[0] = v58;
      v112[1] = v59;
      v103 = 2;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v60 = v7;
      v61 = v7;
      if (v7)
      {
        v23 = v61;
        outlined consume of Data._Representation(v58, v59);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v74);
        v25 = v23;
      }
      else
      {
        v54 = v104;
        v55 = v105;
        v119 = 7;
        outlined copy of Data._Representation(v104, v105);
        v8 = v60;
        v113[0] = v54;
        v113[1] = v55;
        v100 = 3;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v56 = v8;
        v57 = v8;
        if (v8)
        {
          v22 = v57;
          outlined consume of Data._Representation(v54, v55);
          outlined consume of Data._Representation(v58, v59);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v74);
          v25 = v22;
        }
        else
        {
          v50 = v101;
          v51 = v102;
          v119 = 15;
          outlined copy of Data._Representation(v101, v102);
          v9 = v56;
          v114[0] = v50;
          v114[1] = v51;
          v97 = 4;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v52 = v9;
          v53 = v9;
          if (v9)
          {
            v21 = v53;
            outlined consume of Data._Representation(v50, v51);
            outlined consume of Data._Representation(v54, v55);
            outlined consume of Data._Representation(v58, v59);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v74);
            v25 = v21;
          }
          else
          {
            v45 = v98;
            v46 = v99;
            v119 = 31;
            outlined copy of Data._Representation(v98, v99);
            v10 = v52;
            v115[0] = v45;
            v115[1] = v46;
            v96 = 5;
            v11 = KeyedDecodingContainer.decode(_:forKey:)();
            v47 = v10;
            v48 = v11;
            v49 = v10;
            if (v10)
            {
              v20 = v49;
              outlined consume of Data._Representation(v45, v46);
              outlined consume of Data._Representation(v50, v51);
              outlined consume of Data._Representation(v54, v55);
              outlined consume of Data._Representation(v58, v59);
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v74);
              v25 = v20;
            }
            else
            {
              v40 = v48;
              v116 = v48;
              v95 = 6;
              v12 = KeyedDecodingContainer.decode(_:forKey:)();
              v41 = 0;
              v42 = v12;
              v43 = v13;
              v44 = 0;
              v37 = v13;
              v36 = v12;
              v119 = 95;
              swift_bridgeObjectRetain();
              v117[0] = v36;
              v117[1] = v37;
              v92 = 7;
              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
              v38 = 0;
              v39 = 0;
              v30 = v93;
              v31 = v94;
              v119 = 223;
              outlined copy of Data?(v93, v94);
              v14 = v38;
              v118[0] = v30;
              v118[1] = v31;
              v91 = 8;
              v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
              v32 = v14;
              v33 = v15;
              v34 = v16;
              v35 = v14;
              if (!v14)
              {
                v27 = v34;
                v26 = v33;
                v29 = v111;
                v119 = 479;
                swift_bridgeObjectRetain();
                v118[2] = v26;
                v118[3] = v27;
                (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v74);
                v28 = v83;
                v83[0] = v62;
                v83[1] = v63;
                v83[2] = v58;
                v83[3] = v59;
                v83[4] = v54;
                v83[5] = v55;
                v83[6] = v50;
                v83[7] = v51;
                v83[8] = v45;
                v83[9] = v46;
                v84 = v40;
                v85 = v36;
                v86 = v37;
                v87 = v30;
                v88 = v31;
                v89 = v26;
                v90 = v27;
                outlined retain of UserKeyInfo(v83);
                swift_bridgeObjectRelease();
                outlined consume of Data?(v30, v31);
                swift_bridgeObjectRelease();
                outlined consume of Data._Representation(v45, v46);
                outlined consume of Data._Representation(v50, v51);
                outlined consume of Data._Representation(v54, v55);
                outlined consume of Data._Representation(v58, v59);
                swift_bridgeObjectRelease();
                memcpy(v72, v28, 0x88uLL);
                __swift_destroy_boxed_opaque_existential_1(v73);
                return (_QWORD *)outlined destroy of UserKeyInfo((uint64_t)v29);
              }
              v19 = v35;
              outlined consume of Data?(v30, v31);
              swift_bridgeObjectRelease();
              outlined consume of Data._Representation(v45, v46);
              outlined consume of Data._Representation(v50, v51);
              outlined consume of Data._Representation(v54, v55);
              outlined consume of Data._Representation(v58, v59);
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v74);
              v25 = v19;
            }
          }
        }
      }
    }
  }
  v18 = v25;
  result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1(v73);
  if ((v119 & 1) != 0)
  {
    result = v111;
    outlined destroy of String();
  }
  if ((v119 & 2) != 0)
  {
    result = v112;
    outlined destroy of Data((uint64_t)v112);
  }
  if ((v119 & 4) != 0)
  {
    result = v113;
    outlined destroy of Data((uint64_t)v113);
  }
  if ((v119 & 8) != 0)
  {
    result = v114;
    outlined destroy of Data((uint64_t)v114);
  }
  if ((v119 & 0x10) != 0)
  {
    result = v115;
    outlined destroy of Data((uint64_t)v115);
  }
  if ((v119 & 0x40) != 0)
  {
    result = v117;
    outlined destroy of String();
  }
  if ((v119 & 0x80) != 0)
    return (_QWORD *)outlined destroy of Data?((uint64_t)v118);
  return result;
}

_QWORD *protocol witness for Decodable.init(from:) in conformance UserKeyInfo@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return UserKeyInfo.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UserKeyInfo(uint64_t a1)
{
  return UserKeyInfo.encode(to:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for UserKeyInfo(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for UserKeyInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 112) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UserKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  outlined copy of Data._Representation(v11, v12);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  outlined copy of Data._Representation(v13, v14);
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 96) = v16;
  if ((*(_QWORD *)(a2 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 104);
    v5 = *(_QWORD *)(a2 + 112);
    outlined copy of Data._Representation(v4, v5);
    *(_QWORD *)(a1 + 104) = v4;
    *(_QWORD *)(a1 + 112) = v5;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v3 = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 128) = v3;
  return result;
}

uint64_t assignWithCopy for UserKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v18 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v18;
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(a2 + 16);
  v20 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v19, v20);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 24) = v20;
  outlined consume of Data._Representation(v2, v3);
  v21 = *(_QWORD *)(a2 + 32);
  v22 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v21, v22);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v21;
  *(_QWORD *)(a1 + 40) = v22;
  outlined consume of Data._Representation(v4, v5);
  v23 = *(_QWORD *)(a2 + 48);
  v24 = *(_QWORD *)(a2 + 56);
  outlined copy of Data._Representation(v23, v24);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v23;
  *(_QWORD *)(a1 + 56) = v24;
  outlined consume of Data._Representation(v6, v7);
  v25 = *(_QWORD *)(a2 + 64);
  v26 = *(_QWORD *)(a2 + 72);
  outlined copy of Data._Representation(v25, v26);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v25;
  *(_QWORD *)(a1 + 72) = v26;
  outlined consume of Data._Representation(v8, v9);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v28 = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 96) = v28;
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(a2 + 112) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 104);
      v15 = *(_QWORD *)(a2 + 112);
      outlined copy of Data._Representation(v14, v15);
      *(_QWORD *)(a1 + 104) = v14;
      *(_QWORD *)(a1 + 112) = v15;
    }
  }
  else if ((*(_QWORD *)(a2 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + 104);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  }
  else
  {
    v16 = *(_QWORD *)(a2 + 104);
    v17 = *(_QWORD *)(a2 + 112);
    outlined copy of Data._Representation(v16, v17);
    v10 = *(_QWORD *)(a1 + 104);
    v11 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = v16;
    *(_QWORD *)(a1 + 112) = v17;
    outlined consume of Data._Representation(v10, v11);
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 128) = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UserKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v2;
  outlined consume of Data._Representation(v3, v4);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  outlined consume of Data._Representation(v12, v13);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  }
  else if ((*(_QWORD *)(a2 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + 104);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  }
  else
  {
    v14 = *(_QWORD *)(a2 + 112);
    v15 = *(_QWORD *)(a1 + 104);
    v16 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v14;
    outlined consume of Data._Representation(v15, v16);
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserKeyInfo(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 136))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 8)))
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for UserKeyInfo(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 17;
  if (a2 < 0)
  {
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[16] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for UserKeyInfo()
{
  return &type metadata for UserKeyInfo;
}

uint64_t __swift_memcpy5_4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)result = *(_DWORD *)a2;
  *(_BYTE *)(result + 4) = *(_BYTE *)(a2 + 4);
  return result;
}

uint64_t getEnumTagSinglePayload for UserKeyInfo.Metadata(uint64_t a1, int a2)
{
  int v3;

  if (a2)
  {
    if (*(_BYTE *)(a1 + 5))
      v3 = *(_DWORD *)a1;
    else
      v3 = -1;
  }
  else
  {
    v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for UserKeyInfo.Metadata(uint64_t result, int a2, int a3)
{
  _BOOL4 v3;

  v3 = a3 != 0;
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 0;
    if (a3)
    {
      if (v3)
        *(_BYTE *)(result + 5) = 1;
      else
        __break(1u);
    }
  }
  else if (a3)
  {
    if (v3)
      *(_BYTE *)(result + 5) = 0;
    else
      __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for UserKeyInfo.Metadata()
{
  return &type metadata for UserKeyInfo.Metadata;
}

uint64_t getEnumTagSinglePayload for UserKeyInfo.Metadata.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for UserKeyInfo.Metadata.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for UserKeyInfo.Metadata.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for UserKeyInfo.Metadata.CodingKeys()
{
  return &type metadata for UserKeyInfo.Metadata.CodingKeys;
}

uint64_t getEnumTagSinglePayload for UserKeyInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF7)
      goto LABEL_15;
    v7 = ((a2 + 8) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 247;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 9;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for UserKeyInfo.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF7)
  {
    v5 = ((a3 + 8) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF7)
  {
    v4 = ((a2 - 248) >> 8) + 1;
    *result = a2 + 8;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 8;
  }
  return result;
}

uint64_t getEnumTag for UserKeyInfo.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for UserKeyInfo.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for UserKeyInfo.CodingKeys()
{
  return &type metadata for UserKeyInfo.CodingKeys;
}

unint64_t _sSo20NSJSONWritingOptionsVs9OptionSetSCSYWb_0()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t _sSo20NSJSONWritingOptionsVs9OptionSetSCs0D7AlgebraPWb_0()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t _sSo20NSJSONReadingOptionsVs9OptionSetSCSYWb_0()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t _sSo20NSJSONReadingOptionsVs9OptionSetSCs0D7AlgebraPWb_0()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in UserKeyInfo.CodingKeys()
{
  return lazy protocol witness table accessor for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in UserKeyInfo.CodingKeys()
{
  return lazy protocol witness table accessor for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys();
}

unint64_t base witness table accessor for Equatable in UserKeyInfo.CodingKeys()
{
  return lazy protocol witness table accessor for type UserKeyInfo.CodingKeys and conformance UserKeyInfo.CodingKeys();
}

unint64_t _sSo20NSJSONReadingOptionsVs10SetAlgebraSCSQWb_0()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t _sSo20NSJSONReadingOptionsVs10SetAlgebraSCs25ExpressibleByArrayLiteralPWb_0()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t _sSo20NSJSONWritingOptionsVs10SetAlgebraSCSQWb_0()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t _sSo20NSJSONWritingOptionsVs10SetAlgebraSCs25ExpressibleByArrayLiteralPWb_0()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in UserKeyInfo.Metadata.CodingKeys()
{
  return lazy protocol witness table accessor for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in UserKeyInfo.Metadata.CodingKeys()
{
  return lazy protocol witness table accessor for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys();
}

unint64_t base witness table accessor for Equatable in UserKeyInfo.Metadata.CodingKeys()
{
  return lazy protocol witness table accessor for type UserKeyInfo.Metadata.CodingKeys and conformance UserKeyInfo.Metadata.CodingKeys();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined retain of Data(uint64_t a1)
{
  outlined copy of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *outlined assign with take of Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a2;
  v6 = a2[1];
  *a2 = v3;
  a2[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a2;
}

void *static Difference.empty()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];

  v11[5] = a1;
  type metadata accessor for Difference.Change(0, a1, a2, a3);
  v9 = _allocateUninitializedArray<A>(_:)();
  v8 = _allocateUninitializedArray<A>(_:)();
  v6 = _allocateUninitializedArray<A>(_:)();
  v7 = _allocateUninitializedArray<A>(_:)();
  v4 = _allocateUninitializedArray<A>(_:)();
  Difference.init(all:insertions:removals:changes:unchanged:)(v9, v8, v6, v7, v4, v11);
  return memcpy(a4, v11, 0x28uLL);
}

uint64_t type metadata accessor for Difference.Change(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a4, a4, (uint64_t)&nominal type descriptor for Difference.Change);
}

uint64_t Difference.init(all:insertions:removals:changes:unchanged:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t Difference.all.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Difference.insertions.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Difference.removals.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Difference.changes.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Difference.unchanged.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

void *Array.difference<A>(from:identifier:hasChanges:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  void (*v54)(char *, uint64_t);
  void (*v55)(char *, char *, uint64_t);
  void (*v56)(char *, char *, uint64_t);
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  unsigned int (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t i;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  char *v73;
  _QWORD *v74;
  unint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  char *v80;
  uint64_t (*v81)(char *, char *);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t TupleTypeMetadata2;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[9];
  _QWORD v108[2];
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[5];

  v64 = a7;
  v93 = a1;
  v95 = a2;
  v81 = (uint64_t (*)(char *, char *))a3;
  v82 = a4;
  v83 = a5;
  v94 = a6;
  v122 = 0;
  v121 = 0;
  v120 = 0;
  v119 = 0;
  v118 = 0;
  v116 = 0;
  v117 = 0;
  v115 = 0;
  v114 = 0;
  v113 = 0;
  v112 = 0;
  v111 = 0;
  v110 = 0;
  v109 = 0;
  v97 = 0;
  v107[7] = 0;
  v107[8] = 0;
  v65 = *a2;
  v67 = (_QWORD *)MEMORY[0x24BEE46A8];
  v7 = *MEMORY[0x24BEE46A8];
  v99 = 0;
  v96 = *(_QWORD *)(v65 + v7);
  v124 = v96;
  v92 = type metadata accessor for Difference.Change(0, v96, a3, a4);
  v66 = (*(_QWORD *)(*(_QWORD *)(v92 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v68 = (char *)&v35 - v66;
  v98 = *(_QWORD *)(v8 + *v67 + 8);
  v123 = v98;
  v69 = *(_QWORD *)(v98 - 8);
  v70 = (*(_QWORD *)(v69 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v71 = (char *)&v35 - v70;
  v72 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v73 = (char *)&v35 - v72;
  v122 = (char *)&v35 - v72;
  v74 = *(_QWORD **)(v12 - 8);
  v75 = (v74[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v76 = (char *)&v35 - v75;
  v121 = (char *)&v35 - v75;
  v77 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v78 = (char *)&v35 - v77;
  v79 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v17);
  v80 = (char *)&v35 - v79;
  v120 = (char *)&v35 - v79;
  v84 = type metadata accessor for Optional();
  v88 = *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64);
  v85 = (v88 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v99);
  v86 = (uint64_t)&v35 - v85;
  v87 = (v88 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v89 = (char *)&v35 - v87;
  v90 = (v88 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v91 = (char *)&v35 - v90;
  v119 = v93;
  v118 = v20;
  v116 = v21;
  v117 = v22;
  v115 = v23;
  v114 = _allocateUninitializedArray<A>(_:)();
  v113 = _allocateUninitializedArray<A>(_:)();
  v112 = _allocateUninitializedArray<A>(_:)();
  v111 = _allocateUninitializedArray<A>(_:)();
  v110 = _allocateUninitializedArray<A>(_:)();
  v108[1] = v93;
  swift_retain();
  v100 = v107;
  v107[2] = v94;
  v107[3] = v95;
  v101 = type metadata accessor for Array();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v104 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v101, v103);
  v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Array.difference<A>(from:identifier:hasChanges:), (uint64_t)v100, v101, TupleTypeMetadata2, MEMORY[0x24BEE4078], v104, MEMORY[0x24BEE40A8], v103);
  v105 = 0;
  v106 = v24;
  v60 = v24;
  swift_release();
  v62 = v108;
  v108[0] = v60;
  v61 = type metadata accessor for Array();
  MEMORY[0x242635504](MEMORY[0x24BEE12C8]);
  v109 = Dictionary.init<A>(uniqueKeysWithValues:)();
  swift_bridgeObjectRetain();
  v107[6] = v83;
  Collection<>.makeIterator()();
  for (i = v105; ; i = v58)
  {
    v58 = i;
    type metadata accessor for IndexingIterator();
    IndexingIterator.next()();
    v59 = (unsigned int (*)(char *, uint64_t, uint64_t))v74[6];
    if (v59(v91, 1, v96) == 1)
      break;
    v55 = (void (*)(char *, char *, uint64_t))v74[4];
    v55(v80, v91, v96);
    v56 = (void (*)(char *, char *, uint64_t))v74[2];
    v56(v78, v80, v96);
    swift_retain();
    swift_getAtKeyPath();
    swift_release();
    v57 = (void (*)(char *, uint64_t))v74[1];
    v57(v78, v96);
    (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v71, v73, v98);
    MEMORY[0x24263485C](v71, v109, v98, v96, v94);
    if (v59(v89, 1, v96) == 1)
    {
      outlined destroy of A?((uint64_t)v89, v96);
      v53 = *(void (**)(char *, uint64_t))(v69 + 8);
      v53(v71, v98);
      v56(v68, v80, v96);
      swift_storeEnumTagMultiPayload();
      type metadata accessor for Array();
      Array.append(_:)();
      v56(v78, v80, v96);
      Array.append(_:)();
      v53(v73, v98);
    }
    else
    {
      v55(v76, v89, v96);
      v54 = *(void (**)(char *, uint64_t))(v69 + 8);
      v54(v71, v98);
      v81(v80, v76);
      v56(v68, v80, v96);
      swift_storeEnumTagMultiPayload();
      type metadata accessor for Array();
      Array.append(_:)();
      v56(v78, v80, v96);
      Array.append(_:)();
      type metadata accessor for Dictionary();
      Dictionary.removeValue(forKey:)();
      outlined destroy of A?(v86, v96);
      v57(v76, v96);
      v54(v73, v98);
    }
    v57(v80, v96);
  }
  v25 = v58;
  outlined destroy of IndexingIterator<[A]>();
  v46 = v109;
  swift_bridgeObjectRetain();
  v107[5] = v46;
  v47 = &v35;
  v48 = 15;
  MEMORY[0x24BDAC7A8](&v35);
  v37 = v26;
  v38 = v27;
  v39 = v28;
  v40 = &v110;
  v41 = &v113;
  v49 = &v35;
  v50 = (v48 + 56) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v35);
  v29 = (uint64_t *)((char *)&v35 - v50);
  v51 = v29;
  v29[2] = v30;
  v29[3] = v31;
  v29[4] = v32;
  v29[5] = partial apply for closure #2 in Array.difference<A>(from:identifier:hasChanges:);
  v29[6] = v33;
  v52 = type metadata accessor for Dictionary();
  MEMORY[0x242635504](MEMORY[0x24BEE04D8]);
  result = (void *)Sequence.forEach(_:)();
  if (v25)
  {
    __break(1u);
  }
  else
  {
    outlined destroy of [A1 : A]();
    v40 = &v110;
    v35 = v110;
    swift_bridgeObjectRetain();
    v44 = &v114;
    v36 = v114;
    swift_bridgeObjectRetain();
    v43 = &v113;
    v37 = v113;
    swift_bridgeObjectRetain();
    v42 = &v112;
    v38 = v112;
    swift_bridgeObjectRetain();
    v41 = &v111;
    v39 = v111;
    swift_bridgeObjectRetain();
    v45 = v125;
    Difference.init(all:insertions:removals:changes:unchanged:)(v35, v36, v37, v38, v39, v125);
    outlined destroy of [A1 : A]();
    outlined destroy of [Difference<A>.Change]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    outlined destroy of [A]();
    return memcpy(v64, v45, 0x28uLL);
  }
  return result;
}

uint64_t closure #1 in Array.difference<A>(from:identifier:hasChanges:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = a3;
  v11 = a1;
  v13 = a2;
  v19 = 0;
  v18 = 0;
  v3 = *a2;
  v8 = (_QWORD *)MEMORY[0x24BEE46A8];
  v16 = *(_QWORD *)(v3 + *MEMORY[0x24BEE46A8]);
  v20 = v16;
  v14 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](0);
  v15 = (char *)&v8 - v4;
  v19 = v11;
  v18 = v5;
  v17 = *(_QWORD *)(v6 + *v8 + 8);
  v9 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v12(v15, v11, v16);
  swift_retain();
  swift_getAtKeyPath();
  v12((char *)(v10 + v9), v11, v16);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v15, v16);
}

uint64_t partial apply for closure #1 in Array.difference<A>(from:identifier:hasChanges:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Array.difference<A>(from:identifier:hasChanges:)(a1, *(_QWORD **)(v2 + 24), a2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[A]>()
{
  swift_bridgeObjectRelease();
}

uint64_t closure #2 in Array.difference<A>(from:identifier:hasChanges:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(double);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v18 = a1;
  v22 = a2;
  v21 = a4;
  v24 = a5;
  v30 = 0;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v32 = a5;
  v31 = a6;
  v16 = *(_QWORD *)(a5 - 8);
  v15 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v26 = (char *)&v15 - v15;
  v25 = 0;
  v19 = type metadata accessor for Difference.Change(0, v7, v8, v9);
  v17 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v19);
  v20 = (char *)&v15 - v17;
  v30 = v18;
  v29 = v11;
  v28 = a3;
  v27 = v12;
  v23 = *(void (**)(double))(v13 + 16);
  v23(v10);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Array();
  Array.append(_:)();
  ((void (*)(char *, uint64_t, uint64_t))v23)(v26, v22, v24);
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t partial apply for closure #2 in Array.difference<A>(from:identifier:hasChanges:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #2 in Array.difference<A>(from:identifier:hasChanges:)(a1, a2, v2[5], v2[6], v2[2], v2[3]);
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed A1, @in_guaranteed A) -> ()(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return a2(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A1, @in_guaranteed A) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@in_guaranteed A1, @in_guaranteed A) -> ()(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 40));
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [Difference<A>.Change]()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [A]()
{
  swift_bridgeObjectRelease();
}

uint64_t type metadata instantiation function for Difference()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for Difference(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for Difference()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Difference(_QWORD *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;

  v3 = *a2;
  swift_bridgeObjectRetain();
  *a1 = v3;
  v4 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v4;
  v5 = a2[2];
  swift_bridgeObjectRetain();
  a1[2] = v5;
  v6 = a2[3];
  swift_bridgeObjectRetain();
  a1[3] = v6;
  v9 = a2[4];
  swift_bridgeObjectRetain();
  result = a1;
  a1[4] = v9;
  return result;
}

_QWORD *assignWithCopy for Difference(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a2;
  swift_bridgeObjectRetain();
  *a1 = v3;
  swift_bridgeObjectRelease();
  v4 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[2];
  swift_bridgeObjectRetain();
  a1[2] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[3];
  swift_bridgeObjectRetain();
  a1[3] = v6;
  swift_bridgeObjectRelease();
  v8 = a2[4];
  swift_bridgeObjectRetain();
  a1[4] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy40_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x28uLL);
}

_QWORD *assignWithTake for Difference(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Difference(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Difference(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 40) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 40) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

uint64_t type metadata accessor for Difference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a4, a4, (uint64_t)&nominal type descriptor for Difference);
}

uint64_t type metadata instantiation function for Difference.Change()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Difference.Change()
{
  unint64_t v0;
  uint64_t v2;

  v2 = swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for Difference.Change(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  int v7;

  v7 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v7 & 0x20000) == 0)
  {
    v3 = (char *)&loc_23D34A990 + dword_23D34AA9C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X8 }
  }
  v5 = *a2;
  swift_retain();
  *a1 = v5;
  return *a1 + ((v7 + 16) & ~(unint64_t)v7);
}

uint64_t destroy for Difference.Change()
{
  uint64_t result;

  result = swift_getEnumCaseMultiPayload();
  if (result <= 3uLL)
    __asm { BR              X8 }
  return result;
}

void initializeWithCopy for Difference.Change()
{
  char *v0;

  v0 = (char *)&loc_23D34ABE0 + *((int *)qword_23D34ACE0 + swift_getEnumCaseMultiPayload());
  __asm { BR              X8 }
}

uint64_t sub_23D34ABF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v0 - 8) = v1;
  (*(void (**)())(*(_QWORD *)(v1 - 8) + 16))();
  swift_storeEnumTagMultiPayload();
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithCopy for Difference.Change(uint64_t a1, uint64_t a2)
{
  char *v2;

  if (a1 != a2)
  {
    outlined destroy of Difference<A>.Change();
    v2 = (char *)&loc_23D34AD58 + dword_23D34AE2C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X8 }
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Difference<A>.Change()
{
  unint64_t EnumCaseMultiPayload;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload <= 3)
    __asm { BR              X8 }
}

void initializeWithTake for Difference.Change()
{
  char *v0;

  v0 = (char *)&loc_23D34AF50 + *((int *)qword_23D34B050 + swift_getEnumCaseMultiPayload());
  __asm { BR              X8 }
}

uint64_t sub_23D34AF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v0 - 8) = v1;
  (*(void (**)())(*(_QWORD *)(v1 - 8) + 32))();
  swift_storeEnumTagMultiPayload();
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithTake for Difference.Change(uint64_t a1, uint64_t a2)
{
  char *v2;

  if (a1 != a2)
  {
    outlined destroy of Difference<A>.Change();
    v2 = (char *)&loc_23D34B0C8 + dword_23D34B19C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X8 }
  }
}

uint64_t getEnumTagSinglePayload for Difference.Change(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for Difference.Change(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t getEnumTag for Difference.Change()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t destructiveInjectEnumTag for Difference.Change()
{
  return swift_storeEnumTagMultiPayload();
}

GroupKitCore::Metrics::Event_optional __swiftcall Metrics.Event.init(rawValue:)(Swift::Int32 rawValue)
{
  switch(rawValue)
  {
    case 1:
      return 0;
    case 2:
      return (GroupKitCore::Metrics::Event_optional)1;
    case 3:
      return (GroupKitCore::Metrics::Event_optional)2;
    case 4:
      return (GroupKitCore::Metrics::Event_optional)3;
    case 5:
      return (GroupKitCore::Metrics::Event_optional)4;
    case 6:
      return (GroupKitCore::Metrics::Event_optional)5;
    case 7:
      return (GroupKitCore::Metrics::Event_optional)6;
    case 8:
      return (GroupKitCore::Metrics::Event_optional)7;
    case 9:
      return (GroupKitCore::Metrics::Event_optional)8;
  }
  return (GroupKitCore::Metrics::Event_optional)9;
}

void Metrics.Event.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D34B3CC()
{
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Metrics.Event()
{
  lazy protocol witness table accessor for type Metrics.Event and conformance Metrics.Event();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Metrics.Event()
{
  lazy protocol witness table accessor for type Metrics.Event and conformance Metrics.Event();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Metrics.Event()
{
  lazy protocol witness table accessor for type Metrics.Event and conformance Metrics.Event();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Metrics.Event()
{
  lazy protocol witness table accessor for type Metrics.Event and conformance Metrics.Event();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKitCore::Metrics::Event_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Metrics.Event@<W0>(Swift::Int32 *a1@<X0>, GroupKitCore::Metrics::Event_optional *a2@<X8>)
{
  GroupKitCore::Metrics::Event_optional result;

  result.value = Metrics.Event.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Metrics.Event(_DWORD *a1@<X8>)
{
  char *v1;
  int v2;

  Metrics.Event.rawValue.getter(*v1);
  *a1 = v2;
}

uint64_t Metrics.reporter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MetricsReporting(v1, a1);
}

uint64_t outlined init with copy of MetricsReporting(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t Metrics.keyValueStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of KeyValueStore(v1 + 40, a1);
}

uint64_t outlined init with copy of KeyValueStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

_QWORD *Metrics.client.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Client?((_QWORD *)(v1 + 80), a1);
}

_QWORD *outlined init with copy of Client?(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  if (a1[3])
  {
    v2 = a1[3];
    a2[3] = v2;
    a2[4] = a1[4];
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    memcpy(a2, a1, 0x28uLL);
  }
  return a2;
}

uint64_t variable initialization expression of Metrics.configuration@<X0>(uint64_t a1@<X8>)
{
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd", 0x13uLL, 1);
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit", 0x12uLL, 1);
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("default", 7uLL, 1);
  return MetricsConfiguration.init(sessionID:componentType:batchEvent:clientVersion:clientBundleID:clientName:serviceName:)(0, 38, 1, 0, v1._countAndFlagsBits, (uint64_t)v1._object, v2._countAndFlagsBits, (uint64_t)v2._object, a1, v3._countAndFlagsBits, (uint64_t)v3._object);
}

uint64_t Metrics.category.getter()
{
  uint64_t v0;
  uint64_t v3;
  unsigned __int16 v4;
  _QWORD v5[6];

  v5[5] = 0;
  outlined init with copy of KeyValueStore(v0 + 40, (uint64_t)v5);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RTCCategoryOverride", 0x13uLL, 1);
  v3 = dispatch thunk of KeyValueStore.integer(forKey:)();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if (v3 <= 0)
  {
    return 700;
  }
  else
  {
    lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    lazy protocol witness table accessor for type UInt16 and conformance UInt16();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    return v4;
  }
}

unint64_t lazy protocol witness table accessor for type UInt16 and conformance UInt16()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt16 and conformance UInt16;
  if (!lazy protocol witness table cache variable for type UInt16 and conformance UInt16)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE44C0], MEMORY[0x24BEE4478]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt16 and conformance UInt16);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt16 and conformance UInt16;
  if (!lazy protocol witness table cache variable for type UInt16 and conformance UInt16)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE44A0], MEMORY[0x24BEE4478]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt16 and conformance UInt16);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return v0;
  }
  return v2;
}

uint64_t variable initialization expression of Metrics.rtcType()
{
  return 0;
}

uint64_t default argument 2 of Metrics.callAsFunction(_:duration:eventInfo:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  return Dictionary.init(dictionaryLiteral:)();
}

Swift::Void __swiftcall Metrics.callAsFunction(_:duration:eventInfo:)(GroupKitCore::Metrics::Event _, Swift::Double duration, Swift::OpaquePointer eventInfo)
{
  __int128 *v3;
  __int128 *v4;
  int v5;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76;
  uint64_t v77;
  _QWORD __b[12];
  uint64_t v79[2];
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[3];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  Swift::Double v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  void *rawValue;
  Swift::Double v128;
  GroupKitCore::Metrics::Event v129;

  v125 = 0;
  memset(__b, 0, sizeof(__b));
  v129 = _;
  v128 = duration;
  rawValue = eventInfo._rawValue;
  v126 = v59;
  swift_bridgeObjectRetain();
  v125 = eventInfo._rawValue;
  v3 = MetricsPayloadKey.success.unsafeMutableAddressor();
  v51 = *(_QWORD *)v3;
  v52 = *((_QWORD *)v3 + 1);
  swift_bridgeObjectRetain();
  v124 = MEMORY[0x24BEE1328];
  v123 = 1;
  v121 = v51;
  v122 = v52;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  Dictionary.subscript.setter();
  v4 = MetricsPayloadKey.eventType.unsafeMutableAddressor();
  v54 = *(_QWORD *)v4;
  v55 = *((_QWORD *)v4 + 1);
  swift_bridgeObjectRetain();
  Metrics.Event.rawValue.getter(_);
  v120 = MEMORY[0x24BEE3F88];
  v119 = v5;
  v117 = v54;
  v118 = v55;
  Dictionary.subscript.setter();
  v6 = MetricsPayloadKey.duration.unsafeMutableAddressor();
  v57 = *(_QWORD *)v6;
  v58 = *((_QWORD *)v6 + 1);
  swift_bridgeObjectRetain();
  v116 = MEMORY[0x24BEE13C8];
  v115 = duration;
  v113 = v57;
  v114 = v58;
  Dictionary.subscript.setter();
  v7 = MetricsPayloadKey.groupKitClientID.unsafeMutableAddressor();
  v60 = *(_QWORD *)v7;
  v61 = *((_QWORD *)v7 + 1);
  swift_bridgeObjectRetain();
  outlined init with copy of Client?((_QWORD *)(v59 + 80), v102);
  if (v103)
  {
    v45 = v103;
    v44 = v104;
    __swift_project_boxed_opaque_existential_1(v102, v103);
    v46 = (*(uint64_t (**)(uint64_t))(v44 + 8))(v45);
    v47 = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
    v48 = v46;
    v49 = v47;
  }
  else
  {
    outlined destroy of Client?((uint64_t)v102);
    v48 = 0;
    v49 = 0;
  }
  if (v49)
  {
    v108 = MEMORY[0x24BEE0D00];
    v105 = v48;
    v106 = v49;
  }
  else
  {
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v108 = 0;
  }
  if (v108)
  {
    outlined init with take of Any((uint64_t)&v105, (uint64_t)&v109);
  }
  else
  {
    v42 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v43 = objc_msgSend(v42, sel_bundleIdentifier);
    if (v43)
    {
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v39 = v9;

      v40 = v38;
      v41 = v39;
    }
    else
    {
      v40 = 0;
      v41 = 0;
    }

    if (v41)
    {
      v112 = MEMORY[0x24BEE0D00];
      v109 = v40;
      v110 = v41;
    }
    else
    {
      v109 = 0;
      v110 = 0;
      v111 = 0;
      v112 = 0;
    }
    outlined destroy of Any?((uint64_t)&v105);
  }
  v100 = v60;
  v101 = v61;
  Dictionary.subscript.setter();
  v10 = (uint64_t)v125;
  swift_bridgeObjectRetain();
  v21 = Metrics.category.getter();
  v22 = *(_WORD *)(v59 + 200);
  v11 = *(_QWORD *)(v59 + 120);
  v12 = *(_QWORD *)(v59 + 128);
  v13 = *(_BYTE *)(v59 + 136);
  v14 = *(_QWORD *)(v59 + 144);
  v15 = *(_QWORD *)(v59 + 152);
  v16 = *(_QWORD *)(v59 + 160);
  v17 = *(_QWORD *)(v59 + 168);
  v18 = *(_QWORD *)(v59 + 176);
  v19 = *(_QWORD *)(v59 + 184);
  v20 = *(_QWORD *)(v59 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v79[0] = v11;
  v79[1] = v12;
  v80 = v13 & 1;
  v81 = v14;
  v82 = v15;
  v83 = v16;
  v84 = v17;
  v85 = v18;
  v86 = v19;
  v87 = v20;
  MetricsLog.init(payload:category:rtcType:configuration:)(v10, v21, v22, v79, (uint64_t)&v88);
  v34 = v88;
  v23 = v89;
  v24 = HIWORD(v89);
  v25 = v90;
  v26 = v91;
  v27 = v92;
  v28 = v93;
  v29 = v94;
  v35 = v95;
  v30 = v96;
  v36 = v97;
  v31 = v98;
  v37 = v99;
  __b[0] = v88;
  LODWORD(__b[1]) = v89;
  __b[2] = v90;
  __b[3] = v91;
  LOBYTE(__b[4]) = v92 & 1;
  __b[5] = v93;
  __b[6] = v94;
  __b[7] = v95;
  __b[8] = v96;
  __b[9] = v97;
  __b[10] = v98;
  __b[11] = v99;
  outlined init with copy of MetricsReporting(v59, (uint64_t)v75);
  v32 = v76;
  v33 = v77;
  __swift_project_boxed_opaque_existential_1(v75, v76);
  v62 = v34;
  v63 = v23;
  v64 = v24;
  v65 = v25;
  v66 = v26;
  v67 = v27 & 1;
  v68 = v28;
  v69 = v29;
  v70 = v35;
  v71 = v30;
  v72 = v36;
  v73 = v31;
  v74 = v37;
  (*(void (**)(uint64_t *, uint64_t))(v33 + 8))(&v62, v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [String : Any]();
}

__n128 outlined init with take of Any(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t Metrics.callAsFunction(error:for:duration:)(void *a1, char a2, double a3)
{
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  int v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _UNKNOWN **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v71;
  __int16 v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[3];
  uint64_t v85;
  uint64_t v86;
  _QWORD __b[12];
  uint64_t v88[2];
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[3];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD v135[3];
  uint64_t v136;
  uint64_t v137;
  void *v138;
  _QWORD __dst[3];
  uint64_t v140;
  _UNKNOWN **v141;
  uint64_t v142;
  double v143;
  char v144;
  void *v145;

  v134 = 0;
  memset(__b, 0, sizeof(__b));
  v145 = a1;
  v144 = a2;
  v143 = a3;
  v142 = v3;
  v4 = a1;
  v138 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MetricsEventConvertible);
  if ((swift_dynamicCast() & 1) == 0)
  {
    memset(v135, 0, sizeof(v135));
    v136 = 0;
    v137 = 0;
  }
  v5 = a1;
  if (v136)
  {
    outlined init with take of MetricsEventConvertible(v135, __dst);
  }
  else
  {
    v66 = type metadata accessor for InternalError();
    v6 = a1;
    v7 = InternalError.__allocating_init(_:)();
    v140 = v66;
    v141 = &protocol witness table for InternalError;
    __dst[0] = v7;
    outlined destroy of MetricsEventConvertible?((uint64_t)v135);
  }

  v57 = v140;
  v56 = v141;
  __swift_project_boxed_opaque_existential_1(__dst, v140);
  v134 = ((uint64_t (*)(uint64_t))v56[1])(v57);
  v8 = MetricsPayloadKey.success.unsafeMutableAddressor();
  v58 = *(_QWORD *)v8;
  v59 = *((_QWORD *)v8 + 1);
  swift_bridgeObjectRetain();
  v133 = MEMORY[0x24BEE1328];
  v132 = 0;
  v130 = v58;
  v131 = v59;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  Dictionary.subscript.setter();
  v9 = MetricsPayloadKey.eventType.unsafeMutableAddressor();
  v60 = *(_QWORD *)v9;
  v61 = *((_QWORD *)v9 + 1);
  swift_bridgeObjectRetain();
  Metrics.Event.rawValue.getter(a2);
  v129 = MEMORY[0x24BEE3F88];
  v128 = v10;
  v126 = v60;
  v127 = v61;
  Dictionary.subscript.setter();
  v11 = MetricsPayloadKey.duration.unsafeMutableAddressor();
  v62 = *(_QWORD *)v11;
  v63 = *((_QWORD *)v11 + 1);
  swift_bridgeObjectRetain();
  v125 = MEMORY[0x24BEE13C8];
  v124 = a3;
  v122 = v62;
  v123 = v63;
  Dictionary.subscript.setter();
  v12 = MetricsPayloadKey.groupKitClientID.unsafeMutableAddressor();
  v64 = *(_QWORD *)v12;
  v65 = *((_QWORD *)v12 + 1);
  swift_bridgeObjectRetain();
  outlined init with copy of Client?((_QWORD *)(v67 + 80), v111);
  if (v112)
  {
    v51 = v112;
    v50 = v113;
    __swift_project_boxed_opaque_existential_1(v111, v112);
    v52 = (*(uint64_t (**)(uint64_t))(v50 + 8))(v51);
    v53 = v13;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
    v54 = v52;
    v55 = v53;
  }
  else
  {
    outlined destroy of Client?((uint64_t)v111);
    v54 = 0;
    v55 = 0;
  }
  if (v55)
  {
    v117 = MEMORY[0x24BEE0D00];
    v114 = v54;
    v115 = v55;
  }
  else
  {
    v114 = 0;
    v115 = 0;
    v116 = 0;
    v117 = 0;
  }
  if (v117)
  {
    outlined init with take of Any((uint64_t)&v114, (uint64_t)&v118);
  }
  else
  {
    v48 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v49 = objc_msgSend(v48, sel_bundleIdentifier);
    if (v49)
    {
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v45 = v14;

      v46 = v44;
      v47 = v45;
    }
    else
    {
      v46 = 0;
      v47 = 0;
    }

    if (v47)
    {
      v121 = MEMORY[0x24BEE0D00];
      v118 = v46;
      v119 = v47;
    }
    else
    {
      v118 = 0;
      v119 = 0;
      v120 = 0;
      v121 = 0;
    }
    outlined destroy of Any?((uint64_t)&v114);
  }
  v109 = v64;
  v110 = v65;
  Dictionary.subscript.setter();
  v16 = v134;
  swift_bridgeObjectRetain();
  v27 = Metrics.category.getter();
  v28 = *(_WORD *)(v67 + 200);
  v17 = *(_QWORD *)(v67 + 120);
  v18 = *(_QWORD *)(v67 + 128);
  v19 = *(_BYTE *)(v67 + 136);
  v20 = *(_QWORD *)(v67 + 144);
  v21 = *(_QWORD *)(v67 + 152);
  v22 = *(_QWORD *)(v67 + 160);
  v23 = *(_QWORD *)(v67 + 168);
  v24 = *(_QWORD *)(v67 + 176);
  v25 = *(_QWORD *)(v67 + 184);
  v26 = *(_QWORD *)(v67 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v88[0] = v17;
  v88[1] = v18;
  v89 = v19 & 1;
  v90 = v20;
  v91 = v21;
  v92 = v22;
  v93 = v23;
  v94 = v24;
  v95 = v25;
  v96 = v26;
  MetricsLog.init(payload:category:rtcType:configuration:)(v16, v27, v28, v88, (uint64_t)&v97);
  v40 = v97;
  v29 = v98;
  v30 = HIWORD(v98);
  v31 = v99;
  v32 = v100;
  v33 = v101;
  v34 = v102;
  v35 = v103;
  v41 = v104;
  v36 = v105;
  v42 = v106;
  v37 = v107;
  v43 = v108;
  __b[0] = v97;
  LODWORD(__b[1]) = v98;
  __b[2] = v99;
  __b[3] = v100;
  LOBYTE(__b[4]) = v101 & 1;
  __b[5] = v102;
  __b[6] = v103;
  __b[7] = v104;
  __b[8] = v105;
  __b[9] = v106;
  __b[10] = v107;
  __b[11] = v108;
  outlined init with copy of MetricsReporting(v67, (uint64_t)v84);
  v38 = v85;
  v39 = v86;
  __swift_project_boxed_opaque_existential_1(v84, v85);
  v71 = v40;
  v72 = v29;
  v73 = v30;
  v74 = v31;
  v75 = v32;
  v76 = v33 & 1;
  v77 = v34;
  v78 = v35;
  v79 = v41;
  v80 = v36;
  v81 = v42;
  v82 = v37;
  v83 = v43;
  (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(&v71, v38);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [String : Any]();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
}

uint64_t outlined destroy of MetricsEventConvertible?(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

void *outlined init with take of MetricsEventConvertible(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t Metrics.callAsFunction<A>(_:worker:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 + 120) = v6;
  *(_QWORD *)(v7 + 112) = a6;
  *(_QWORD *)(v7 + 104) = a5;
  *(_QWORD *)(v7 + 96) = a4;
  *(_QWORD *)(v7 + 88) = a3;
  *(_BYTE *)(v7 + 193) = a2;
  *(_QWORD *)(v7 + 80) = a1;
  *(_QWORD *)(v7 + 32) = v7;
  *(_BYTE *)(v7 + 192) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_QWORD *)(v7 + 72) = 0;
  *(_QWORD *)(v7 + 128) = *(_QWORD *)(a5 - 8);
  *(_QWORD *)(v7 + 136) = swift_task_alloc();
  v8 = type metadata accessor for Date();
  *(_QWORD *)(v7 + 144) = v8;
  *(_QWORD *)(v7 + 152) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 160) = swift_task_alloc();
  *(_QWORD *)(v7 + 168) = swift_task_alloc();
  *(_BYTE *)(v7 + 192) = a2;
  *(_QWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 24) = a4;
  *(_QWORD *)(v7 + 40) = v6;
  return swift_task_switch();
}

uint64_t Metrics.callAsFunction<A>(_:worker:)()
{
  uint64_t v0;
  _QWORD *v1;
  int *v3;
  _QWORD *v4;
  uint64_t (*v5)(_QWORD);

  v3 = *(int **)(v0 + 88);
  *(_QWORD *)(v0 + 32) = v0;
  Date.init()();
  v5 = (uint64_t (*)(_QWORD))((char *)v3 + *v3);
  v1 = (_QWORD *)swift_task_alloc();
  v4[22] = v1;
  *v1 = v4[4];
  v1[1] = Metrics.callAsFunction<A>(_:worker:);
  return v5(v4[17]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 32) = *v1;
  *(_QWORD *)(v2 + 184) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  double v1;
  uint64_t v3;
  Swift::Double duration;
  GroupKitCore::Metrics::Event _;
  Swift::OpaquePointer v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *(_QWORD *)(v0 + 168);
  v14 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 104);
  _ = *(_BYTE *)(v0 + 193);
  v7 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 32) = v0;
  Date.init()();
  Date.timeIntervalSince(_:)();
  duration = v1;
  *(double *)(v0 + 72) = v1;
  v6._rawValue = (void *)(*(uint64_t (**)(uint64_t))(v3 + 8))(v10);
  Metrics.callAsFunction(_:duration:eventInfo:)(_, duration, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v15, v10);
  v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v12(v14, v11);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v10);
  v12(v13, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 8))();
}

{
  uint64_t v0;
  id v1;
  void *v2;
  double v3;
  void *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(void **)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 32) = v0;
  v1 = v5;
  *(_QWORD *)(v0 + 48) = v5;
  *(_QWORD *)(v0 + 56) = v6;
  v2 = *(void **)(v0 + 184);
  v11 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 144);
  v7 = *(_BYTE *)(v0 + 193);
  Date.init()();
  Date.timeIntervalSince(_:)();
  *(double *)(v0 + 64) = v3;
  Metrics.callAsFunction(error:for:duration:)(v2, v7, v3);
  swift_willThrow();
  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v12, v9);

  v10(v11, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v13 + 32) + 8))();
}

uint64_t Metrics.log(request:groupStore:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  int v13;
  __int128 *v14;
  int v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  Swift::String v23;
  char v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  int v64;
  Swift::String v65;
  void *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  Swift::String *v98;
  void *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t countAndFlagsBits;
  void (*v107)(uint64_t, uint64_t);
  void *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  Swift::String v119;
  Swift::String v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  Builtin::Word v141;
  uint64_t v142;
  void *object;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  __int16 v149;
  __int16 v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE v161[24];
  uint64_t v162;
  uint64_t v163;
  _QWORD v164[12];
  uint64_t v165[2];
  char v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  unsigned __int8 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD v207[3];
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD v214[2];
  int v215;
  uint64_t v216;
  uint64_t v217;
  Swift::String v218;
  Swift::String v219;
  _QWORD v220[3];
  uint64_t v221;
  uint64_t v222;
  Swift::String v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;

  v136 = a1;
  v135 = a2;
  v228 = 0;
  v227 = 0;
  v226 = 0;
  v217 = 0;
  v204 = 0;
  v203 = 0;
  v202 = 0;
  memset(v164, 0, sizeof(v164));
  v130 = 0;
  v122 = type metadata accessor for InternalErrorCode();
  v123 = *(_QWORD *)(v122 - 8);
  v124 = (*(_QWORD *)(v123 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v125 = (char *)&v26 - v124;
  v126 = type metadata accessor for GPKMetricsRequest.Event();
  v127 = *(_QWORD *)(v126 - 8);
  v128 = (*(_QWORD *)(v127 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v130);
  v129 = (uint64_t *)((char *)&v26 - v128);
  v131 = type metadata accessor for GPKGroupID();
  v132 = *(_QWORD *)(v131 - 8);
  v133 = (*(_QWORD *)(v132 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v130);
  v134 = (char *)&v26 - v133;
  v137 = type metadata accessor for LogSubsystem();
  v138 = *(_QWORD *)(v137 - 8);
  v139 = (*(_QWORD *)(v138 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v136);
  v140 = (uint64_t)&v26 - v139;
  v228 = v3;
  v227 = v4;
  v226 = v2;
  v141 = 28;
  v224 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v225 = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Logging metrics from client ", v141, 1);
  object = v6._object;
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  v7 = v142;
  swift_bridgeObjectRelease();
  outlined init with copy of Client?((_QWORD *)(v7 + 80), v220);
  if (v221)
  {
    v118 = v220;
    v117 = v221;
    v116 = v222;
    __swift_project_boxed_opaque_existential_1(v220, v221);
    v119._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(v116 + 8))(v117);
    v119._object = v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
    v120 = v119;
  }
  else
  {
    v27 = 0;
    outlined destroy of Client?((uint64_t)v220);
    v120._countAndFlagsBits = (uint64_t)v27;
    v120._object = v27;
  }
  v219 = v120;
  if (v120._object)
  {
    v223 = v219;
  }
  else
  {
    v223 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
    outlined destroy of String?();
  }
  v98 = &v218;
  v218 = v223;
  v100 = &v224;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v103 = 1;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v99 = v9._object;
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  v102 = v224;
  v101 = v225;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v104 = String.init(stringInterpolation:)();
  v109 = v10;
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Metrics.swift", 0x1AuLL, v103 & 1);
  countAndFlagsBits = v11._countAndFlagsBits;
  v108 = v11._object;
  v105 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v140);
  gpklog(_:type:fileID:line:subsystem:)();
  v107 = *(void (**)(uint64_t, uint64_t))(v138 + 8);
  v107(v140, v137);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v111 = v135[3];
  v112 = v135[4];
  v110 = __swift_project_boxed_opaque_existential_1(v135, v111);
  GPKMetricsRequest.groupID.getter();
  v12 = v121;
  v13 = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v134, v111);
  v113 = v12;
  v114 = v13;
  v115 = v12;
  if (v12)
  {
    v26 = v115;
    (*(void (**)(char *, uint64_t))(v132 + 8))(v134, v131);
    v24 = v26;
    v30 = v26;
  }
  else
  {
    v97 = v114;
    (*(void (**)(char *, uint64_t))(v132 + 8))(v134, v131);
    if ((v97 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
      _allocateUninitializedArray<A>(_:)();
      v217 = Dictionary.init(dictionaryLiteral:)();
      v14 = MetricsPayloadKey.eventType.unsafeMutableAddressor();
      v90 = *(_QWORD *)v14;
      v91 = *((_QWORD *)v14 + 1);
      swift_bridgeObjectRetain();
      Metrics.Event.rawValue.getter(6);
      v93 = &v215;
      v216 = MEMORY[0x24BEE3F88];
      v215 = v15;
      v92 = v214;
      v214[0] = v90;
      v214[1] = v91;
      v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      Dictionary.subscript.setter();
      v16 = MetricsPayloadKey.groupKitClientID.unsafeMutableAddressor();
      v95 = *(_QWORD *)v16;
      v96 = *((_QWORD *)v16 + 1);
      swift_bridgeObjectRetain();
      outlined init with copy of Client?((_QWORD *)(v142 + 80), v207);
      if (v208)
      {
        v87 = v208;
        v86 = v209;
        __swift_project_boxed_opaque_existential_1(v207, v208);
        v88 = (*(uint64_t (**)(uint64_t))(v86 + 8))(v87);
        v89 = v17;
        if (v17)
        {
          v84 = v88;
          v85 = v89;
          v213 = MEMORY[0x24BEE0D00];
          v210 = v88;
          v211 = v89;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v207);
          goto LABEL_13;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v207);
      }
      else
      {
        outlined destroy of Client?((uint64_t)v207);
      }
      v210 = 0;
      v211 = 0;
      v212 = 0;
      v213 = 0;
LABEL_13:
      v205 = v95;
      v206 = v96;
      Dictionary.subscript.setter();
      GPKMetricsRequest.event.getter();
      v83 = (*(uint64_t (**)(uint64_t *, uint64_t))(v127 + 88))(v129, v126);
      if (v83 == *MEMORY[0x24BE3DC40])
      {
        (*(void (**)(uint64_t *, uint64_t))(v127 + 96))(v129, v126);
        v70 = *v129;
        v73 = v129[1];
        v78 = v129[2];
        v204 = v70;
        v203 = v73;
        v202 = v78;
        v19 = MetricsPayloadKey.success.unsafeMutableAddressor();
        v68 = *(_QWORD *)v19;
        v69 = *((_QWORD *)v19 + 1);
        swift_bridgeObjectRetain();
        v201 = MEMORY[0x24BEE1328];
        v200 = 0;
        v198 = v68;
        v199 = v69;
        v76 = &v217;
        Dictionary.subscript.setter();
        v20 = MetricsPayloadKey.expectedMemberCount.unsafeMutableAddressor();
        v71 = *(_QWORD *)v20;
        v72 = *((_QWORD *)v20 + 1);
        swift_bridgeObjectRetain();
        v77 = MEMORY[0x24BEE1768];
        v197 = MEMORY[0x24BEE1768];
        v196 = v70;
        v194 = v71;
        v195 = v72;
        Dictionary.subscript.setter();
        v21 = MetricsPayloadKey.missingMemberCount.unsafeMutableAddressor();
        v74 = *(_QWORD *)v21;
        v75 = *((_QWORD *)v21 + 1);
        swift_bridgeObjectRetain();
        v193 = v77;
        v192 = v73;
        v190 = v74;
        v191 = v75;
        Dictionary.subscript.setter();
        v22 = MetricsPayloadKey.extraMemberCount.unsafeMutableAddressor();
        v79 = *(_QWORD *)v22;
        v80 = *((_QWORD *)v22 + 1);
        swift_bridgeObjectRetain();
        v189 = v77;
        v188 = v78;
        v186 = v79;
        v187 = v80;
        Dictionary.subscript.setter();
      }
      else
      {
        if (v83 != *MEMORY[0x24BE3DC48])
        {
          v62 = 1;
          v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknow metrics log request received", 0x23uLL, 1);
          v63 = v23._countAndFlagsBits;
          v66 = v23._object;
          v65 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Metrics.swift", 0x1AuLL, v62 & 1);
          v64 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v140);
          gpklog(_:type:fileID:line:subsystem:)();
          v107(v140, v137);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t *, uint64_t))(v127 + 8))(v129, v126);
          outlined destroy of [String : Any]();
          v67 = 0;
          return v67 & 1;
        }
        v18 = MetricsPayloadKey.success.unsafeMutableAddressor();
        v81 = *(_QWORD *)v18;
        v82 = *((_QWORD *)v18 + 1);
        swift_bridgeObjectRetain();
        v147 = MEMORY[0x24BEE1328];
        v146 = 1;
        v144 = v81;
        v145 = v82;
        Dictionary.subscript.setter();
      }
      v61 = &v217;
      v31 = v217;
      swift_bridgeObjectRetain();
      v42 = Metrics.category.getter();
      v43 = *(unsigned __int16 *)(v142 + 200);
      v32 = *(_QWORD *)(v142 + 120);
      v33 = *(_QWORD *)(v142 + 128);
      v34 = *(unsigned __int8 *)(v142 + 136);
      v35 = *(_QWORD *)(v142 + 144);
      v36 = *(_QWORD *)(v142 + 152);
      v37 = *(_QWORD *)(v142 + 160);
      v38 = *(_QWORD *)(v142 + 168);
      v39 = *(_QWORD *)(v142 + 176);
      v40 = *(_QWORD *)(v142 + 184);
      v41 = *(_QWORD *)(v142 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v165[0] = v32;
      v165[1] = v33;
      v44 = 1;
      v166 = v34 & 1;
      v167 = v35;
      v168 = v36;
      v169 = v37;
      v170 = v38;
      v171 = v39;
      v172 = v40;
      v173 = v41;
      MetricsLog.init(payload:category:rtcType:configuration:)(v31, v42, v43, v165, (uint64_t)&v174);
      v57 = v174;
      v45 = (unsigned __int16)v175;
      v46 = HIWORD(v175);
      v47 = v176;
      v48 = v177;
      v49 = v178;
      v50 = v179;
      v51 = v180;
      v58 = v181;
      v52 = v182;
      v59 = v183;
      v53 = v184;
      v60 = v185;
      v164[0] = v174;
      LODWORD(v164[1]) = v175;
      v164[2] = v176;
      v164[3] = v177;
      LOBYTE(v164[4]) = v178 & v44;
      v164[5] = v179;
      v164[6] = v180;
      v164[7] = v181;
      v164[8] = v182;
      v164[9] = v183;
      v164[10] = v184;
      v164[11] = v185;
      v56 = v161;
      outlined init with copy of MetricsReporting(v142, (uint64_t)v161);
      v54 = v162;
      v55 = v163;
      __swift_project_boxed_opaque_existential_1(v56, v162);
      v148 = v57;
      v149 = v45;
      v150 = v46;
      v151 = v47;
      v152 = v48;
      v153 = v49 & 1;
      v154 = v50;
      v155 = v51;
      v156 = v58;
      v157 = v52;
      v158 = v59;
      v159 = v53;
      v160 = v60;
      (*(void (**)(uint64_t *, uint64_t))(v55 + 8))(&v148, v54);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [String : Any]();
      v67 = 1;
      return v67 & 1;
    }
    v28 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v123 + 104))(v125, *MEMORY[0x24BE3DCF8], v122);
    v29 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    v30 = v29;
  }
  return v24 & 1;
}

uint64_t Metrics.init(reporter:keyValueStore:client:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, _WORD *a4@<X8>)
{
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t result;

  outlined init with take of MetricsReporting(a1, a4);
  outlined init with take of KeyValueStore(a2, a4 + 20);
  outlined init with take of Client?(a3, a4 + 40);
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd", 0x13uLL, 1);
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit", 0x12uLL, 1);
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("default", 7uLL, 1);
  result = MetricsConfiguration.init(sessionID:componentType:batchEvent:clientVersion:clientBundleID:clientName:serviceName:)(0, 38, 1, 0, v4._countAndFlagsBits, (uint64_t)v4._object, v5._countAndFlagsBits, (uint64_t)v5._object, (uint64_t)(a4 + 60), v6._countAndFlagsBits, (uint64_t)v6._object);
  a4[100] = 0;
  return result;
}

void *outlined init with take of MetricsReporting(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of KeyValueStore(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of Client?(const void *a1, void *a2)
{
  memcpy(a2, a1, 0x28uLL);
  return a2;
}

uint64_t GPKGroup.eventInfo.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v3 = Dictionary.init(dictionaryLiteral:)();
  MetricsPayloadKey.groupSize.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  v2 = dispatch thunk of GPKGroup.members.getter();
  v0 = type metadata accessor for GPKMember();
  MEMORY[0x242634AC0](v2, v0);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  Dictionary.subscript.setter();
  swift_bridgeObjectRetain();
  outlined destroy of [String : Any]();
  return v3;
}

uint64_t protocol witness for MetricsEventConvertible.eventInfo.getter in conformance GPKGroup()
{
  return GPKGroup.eventInfo.getter();
}

uint64_t InternalError.eventInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  id v23;
  Swift::String v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v44[2];
  uint64_t v45;
  Builtin::Word v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  Builtin::Word v53;
  int v54;
  void *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  void *v65;
  Builtin::Word v66;
  void *v67;
  int v68;
  void *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  Builtin::Word v86;
  void *v87;
  id v88;
  int v89;
  void *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  Builtin::Word v95;
  void *v96;
  int v97;
  void *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  Builtin::Word v109;
  void *object;
  int v111;
  void *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  unint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  void (*v124)(char *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD v160[2];
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[2];
  _QWORD v168[4];
  _QWORD v169[2];
  _QWORD v170[4];
  _BYTE v171[32];
  _QWORD v172[2];
  _QWORD v173[4];
  _BYTE v174[32];
  uint64_t v175;
  _QWORD v176[2];
  _QWORD v177[4];
  uint64_t v178;
  uint64_t v179;

  v179 = 0;
  v120 = &v178;
  v178 = 0;
  v175 = 0;
  v157 = 0;
  v130 = 0;
  v122 = type metadata accessor for InternalErrorCode();
  v121 = *(_QWORD *)(v122 - 8);
  v117 = (*(_QWORD *)(v121 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v122);
  v118 = (char *)v44 - v117;
  v119 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v44 - v117);
  v123 = (char *)v44 - v119;
  v179 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v133 = MEMORY[0x24BEE0D00];
  v134 = MEMORY[0x24BEE4AD8] + 8;
  v135 = MEMORY[0x24BEE0D10];
  v178 = Dictionary.init(dictionaryLiteral:)();
  v2 = MetricsPayloadKey.errorCode.unsafeMutableAddressor();
  v125 = *(_QWORD *)v2;
  v126 = *((_QWORD *)v2 + 1);
  swift_bridgeObjectRetain();
  InternalError.internalCode.getter();
  v3 = InternalErrorCode.rawValue.getter();
  v128 = v177;
  v177[3] = MEMORY[0x24BEE1768];
  v177[0] = v3;
  v124 = *(void (**)(char *, uint64_t))(v121 + 8);
  v124(v123, v122);
  v127 = v176;
  v176[0] = v125;
  v176[1] = v126;
  v129 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  Dictionary.subscript.setter();
  v175 = _allocateUninitializedArray<A>(_:)();
  v4 = v132;
  v131 = objc_msgSend(v132, sel_userInfo);
  v136 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = static InternalErrorKey.serverErrorCode.getter();
  v137 = v172;
  v172[0] = v5;
  v172[1] = v6;
  MEMORY[0x24263485C](v173);
  outlined destroy of String();
  if (v173[3])
  {
    v116 = v174;
    outlined init with take of Any((uint64_t)v173, (uint64_t)v174);
    swift_bridgeObjectRelease();

    v109 = 17;
    v7 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v113 = &v140;
    v140 = v7;
    v141 = v8;
    v111 = 1;
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ServerErrorCode: ", v109, 1);
    object = v9._object;
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v111 & 1);
    v112 = v10._object;
    DefaultStringInterpolation.appendLiteral(_:)(v10);
    swift_bridgeObjectRelease();
    v115 = v140;
    v114 = v141;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v138 = String.init(stringInterpolation:)();
    v139 = v11;
    specialized Array.append(_:)();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v116);
  }
  else
  {
    outlined destroy of Any?((uint64_t)v173);
    swift_bridgeObjectRelease();

    v12 = v132;
    v103 = objc_msgSend(v132, sel_userInfo);
    v104 = MEMORY[0x24BEE0D00];
    v105 = MEMORY[0x24BEE4AD8] + 8;
    v106 = MEMORY[0x24BEE0D10];
    v107 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v13 = static InternalErrorKey.httpStatusCode.getter();
    v108 = v169;
    v169[0] = v13;
    v169[1] = v14;
    MEMORY[0x24263485C](v170);
    outlined destroy of String();
    if (v170[3])
    {
      v102 = v171;
      outlined init with take of Any((uint64_t)v170, (uint64_t)v171);
      swift_bridgeObjectRelease();

      v95 = 10;
      v15 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v99 = &v144;
      v144 = v15;
      v145 = v16;
      v97 = 1;
      v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HTTPCode: ", v95, 1);
      v96 = v17._object;
      DefaultStringInterpolation.appendLiteral(_:)(v17);
      swift_bridgeObjectRelease();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v97 & 1);
      v98 = v18._object;
      DefaultStringInterpolation.appendLiteral(_:)(v18);
      swift_bridgeObjectRelease();
      v101 = v144;
      v100 = v145;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      v142 = String.init(stringInterpolation:)();
      v143 = v19;
      specialized Array.append(_:)();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v102);
    }
    else
    {
      outlined destroy of Any?((uint64_t)v170);
      swift_bridgeObjectRelease();

      InternalError.internalCode.getter();
      (*(void (**)(char *, _QWORD, uint64_t))(v121 + 104))(v118, *MEMORY[0x24BE3DE90], v122);
      lazy protocol witness table accessor for type InternalErrorCode and conformance InternalErrorCode();
      v94 = == infix<A>(_:_:)();
      v124(v118, v122);
      v124(v123, v122);
      if ((v94 & 1) != 0)
      {
        v86 = 20;
        v20 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v91 = &v149;
        v149 = v20;
        v150 = v21;
        v89 = 1;
        v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UnknownErrorReason: ", v86, 1);
        v87 = v22._object;
        DefaultStringInterpolation.appendLiteral(_:)(v22);
        swift_bridgeObjectRelease();
        v23 = v132;
        v88 = objc_msgSend(v132, sel_code);

        v148 = v88;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v89 & 1);
        v90 = v24._object;
        DefaultStringInterpolation.appendLiteral(_:)(v24);
        swift_bridgeObjectRelease();
        v93 = v149;
        v92 = v150;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        v146 = String.init(stringInterpolation:)();
        v147 = v25;
        specialized Array.append(_:)();
      }
    }
  }
  v26 = v132;
  v79 = objc_msgSend(v132, sel_userInfo);
  v81 = MEMORY[0x24BEE0D00];
  v82 = MEMORY[0x24BEE4AD8] + 8;
  v83 = MEMORY[0x24BEE0D10];
  v85 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v80 = (id)*MEMORY[0x24BDD1398];
  v27 = v80;
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v84 = v167;
  v167[0] = v28;
  v167[1] = v29;
  MEMORY[0x24263485C](v168);
  outlined destroy of String();
  swift_bridgeObjectRelease();
  if (v168[3])
  {
    type metadata accessor for NSError();
    if ((swift_dynamicCast() & 1) != 0)
      v78 = v151;
    else
      v78 = 0;
    v76 = v78;

    v77 = v76;
  }
  else
  {
    v65 = 0;

    outlined destroy of Any?((uint64_t)v168);
    v77 = v65;
  }
  v75 = v77;
  if (v77)
  {
    v74 = v75;
    v73 = v75;
    v157 = v75;
    v66 = 17;
    v30 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v70 = &v155;
    v155 = v30;
    v156 = v31;
    v68 = 1;
    v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UnderlyingError: ", v66, 1);
    v67 = v32._object;
    DefaultStringInterpolation.appendLiteral(_:)(v32);
    swift_bridgeObjectRelease();
    v154 = objc_msgSend(v73, sel_code);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v68 & 1);
    v69 = v33._object;
    DefaultStringInterpolation.appendLiteral(_:)(v33);
    swift_bridgeObjectRelease();
    v72 = v155;
    v71 = v156;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v152 = String.init(stringInterpolation:)();
    v153 = v34;
    specialized Array.append(_:)();

  }
  v35 = MetricsPayloadKey.errorSubCodeString.unsafeMutableAddressor();
  v60 = *(_QWORD *)v35;
  v61 = *((_QWORD *)v35 + 1);
  swift_bridgeObjectRetain();
  v46 = 2;
  v53 = 1;
  v36 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v56 = &v162;
  v162 = v36;
  v163 = v37;
  v54 = 1;
  v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("[", v53, 1);
  v44[1] = v38._object;
  DefaultStringInterpolation.appendLiteral(_:)(v38);
  swift_bridgeObjectRelease();
  v62 = &v175;
  v45 = v175;
  swift_bridgeObjectRetain();
  v49 = &v161;
  v161 = v45;
  v48 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", v46, v54 & 1);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v50 = BidirectionalCollection<>.joined(separator:)();
  v51 = v39;
  swift_bridgeObjectRelease();
  outlined destroy of [String]();
  v52 = v160;
  v160[0] = v50;
  v160[1] = v51;
  v59 = MEMORY[0x24BEE0D00];
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("]", v53, v54 & 1);
  v55 = v40._object;
  DefaultStringInterpolation.appendLiteral(_:)(v40);
  swift_bridgeObjectRelease();
  v58 = v162;
  v57 = v163;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v41 = String.init(stringInterpolation:)();
  v166 = v59;
  v164 = v41;
  v165 = v42;
  v158 = v60;
  v159 = v61;
  v63 = &v178;
  Dictionary.subscript.setter();
  v64 = v178;
  swift_bridgeObjectRetain();
  outlined destroy of [String]();
  outlined destroy of [String : Any]();
  return v64;
}

unint64_t lazy protocol witness table accessor for type InternalErrorCode and conformance InternalErrorCode()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InternalErrorCode and conformance InternalErrorCode;
  if (!lazy protocol witness table cache variable for type InternalErrorCode and conformance InternalErrorCode)
  {
    v0 = type metadata accessor for InternalErrorCode();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DEB8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InternalErrorCode and conformance InternalErrorCode);
    return v1;
  }
  return v3;
}

unint64_t type metadata accessor for NSError()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSError);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t protocol witness for MetricsEventConvertible.eventInfo.getter in conformance InternalError()
{
  return InternalError.eventInfo.getter();
}

uint64_t KeyDistributionService.RegistrationResult.eventInfo.getter(char a1)
{
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v3 = Dictionary.init(dictionaryLiteral:)();
  MetricsPayloadKey.keyRegistrationAction.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  KeyDistributionService.RegistrationResult.rawValue.getter(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  Dictionary.subscript.setter();
  swift_bridgeObjectRetain();
  outlined destroy of [String : Any]();
  return v3;
}

unint64_t base witness table accessor for Equatable in Metrics.Event()
{
  return lazy protocol witness table accessor for type Metrics.Event and conformance Metrics.Event();
}

unint64_t lazy protocol witness table accessor for type Metrics.Event and conformance Metrics.Event()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Metrics.Event and conformance Metrics.Event;
  if (!lazy protocol witness table cache variable for type Metrics.Event and conformance Metrics.Event)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for Metrics.Event, &type metadata for Metrics.Event);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Metrics.Event and conformance Metrics.Event);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Metrics.Event and conformance Metrics.Event;
  if (!lazy protocol witness table cache variable for type Metrics.Event and conformance Metrics.Event)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for Metrics.Event, &type metadata for Metrics.Event);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Metrics.Event and conformance Metrics.Event);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for MetricsEventConvertible.eventInfo.getter in conformance KeyDistributionService.RegistrationResult()
{
  char *v0;

  return KeyDistributionService.RegistrationResult.eventInfo.getter(*v0);
}

uint64_t initializeBufferWithCopyOfBuffer for Metrics(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for Metrics(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  if (*(_QWORD *)(a1 + 104))
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Metrics(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  (**(void (***)(void))(v2 - 8))();
  v3 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 40, a2 + 40);
  if (*(_QWORD *)(a2 + 104))
  {
    v4 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v4;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 80, a2 + 80);
  }
  else
  {
    memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x28uLL);
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v6 = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v7 = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 176) = v7;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v8 = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 192) = v8;
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  return result;
}

uint64_t assignWithCopy for Metrics(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_assign_boxed_opaque_existential_1(a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, (uint64_t *)(a2 + 40));
  if (*(_QWORD *)(a1 + 104))
  {
    if (*(_QWORD *)(a2 + 104))
    {
      __swift_assign_boxed_opaque_existential_1(a1 + 80, (uint64_t *)(a2 + 80));
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 80);
      memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x28uLL);
    }
  }
  else if (*(_QWORD *)(a2 + 104))
  {
    v2 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 104) = v2;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a1 + 80, a2 + 80);
  }
  else
  {
    memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x28uLL);
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136) & 1;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v4 = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 160) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v5 = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 176) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v6 = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 192) = v6;
  swift_bridgeObjectRelease();
  result = a1;
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy202_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0xCAuLL);
}

uint64_t assignWithTake for Metrics(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  __swift_destroy_boxed_opaque_existential_1(a1);
  memcpy((void *)a1, (const void *)a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x28uLL);
  if (*(_QWORD *)(a1 + 104))
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x38uLL);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136) & 1;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRelease();
  result = a1;
  *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
  return result;
}

uint64_t getEnumTagSinglePayload for Metrics(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 202))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Metrics(uint64_t result, int a2, int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 202);
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_QWORD *)(result + 176) = 0;
    *(_QWORD *)(result + 168) = 0;
    *(_QWORD *)(result + 160) = 0;
    *(_QWORD *)(result + 152) = 0;
    *(_QWORD *)(result + 144) = 0;
    *(_QWORD *)(result + 136) = 0;
    *(_QWORD *)(result + 128) = 0;
    *(_QWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 192) = 0;
    *(_WORD *)(result + 200) = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      *(_QWORD *)(result + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Metrics()
{
  return &type metadata for Metrics;
}

uint64_t getEnumTagSinglePayload for Metrics.Event(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF7)
      goto LABEL_15;
    v7 = ((a2 + 8) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 247;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 9;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for Metrics.Event(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF7)
  {
    v5 = ((a3 + 8) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF7)
  {
    v4 = ((a2 - 248) >> 8) + 1;
    *result = a2 + 8;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 8;
  }
  return result;
}

uint64_t getEnumTag for Metrics.Event(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for Metrics.Event(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Metrics.Event()
{
  return &type metadata for Metrics.Event;
}

GroupKitCore::RenewCredentialResult_optional __swiftcall RenewCredentialResult.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v3;

  switch(rawValue)
  {
    case 0:
      v3 = 0;
LABEL_8:
      *v1 = v3;
      return (GroupKitCore::RenewCredentialResult_optional)rawValue;
    case 1:
      v3 = 1;
      goto LABEL_8;
    case 2:
      v3 = 2;
      goto LABEL_8;
  }
  *v1 = 3;
  return (GroupKitCore::RenewCredentialResult_optional)rawValue;
}

uint64_t RenewCredentialResult.rawValue.getter()
{
  _BYTE *v0;

  if (!*v0)
    return 0;
  if (*v0 == 1)
    return 1;
  return 2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RenewCredentialResult()
{
  lazy protocol witness table accessor for type RenewCredentialResult and conformance RenewCredentialResult();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type RenewCredentialResult and conformance RenewCredentialResult()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RenewCredentialResult and conformance RenewCredentialResult;
  if (!lazy protocol witness table cache variable for type RenewCredentialResult and conformance RenewCredentialResult)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RenewCredentialResult, &type metadata for RenewCredentialResult);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RenewCredentialResult and conformance RenewCredentialResult);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RenewCredentialResult and conformance RenewCredentialResult;
  if (!lazy protocol witness table cache variable for type RenewCredentialResult and conformance RenewCredentialResult)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RenewCredentialResult, &type metadata for RenewCredentialResult);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RenewCredentialResult and conformance RenewCredentialResult);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RenewCredentialResult()
{
  lazy protocol witness table accessor for type RenewCredentialResult and conformance RenewCredentialResult();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RenewCredentialResult()
{
  lazy protocol witness table accessor for type RenewCredentialResult and conformance RenewCredentialResult();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance RenewCredentialResult()
{
  lazy protocol witness table accessor for type RenewCredentialResult and conformance RenewCredentialResult();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKitCore::RenewCredentialResult_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RenewCredentialResult(Swift::Int *a1)
{
  return RenewCredentialResult.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RenewCredentialResult@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RenewCredentialResult.rawValue.getter();
  *a1 = result;
  return result;
}

unint64_t base witness table accessor for Equatable in RenewCredentialResult()
{
  return lazy protocol witness table accessor for type RenewCredentialResult and conformance RenewCredentialResult();
}

uint64_t dispatch thunk of Account.altDSID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Account.primaryEmail.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Account.appleIDAliases.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Account.dsid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Account.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Account.property(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t getEnumTagSinglePayload for RenewCredentialResult(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for RenewCredentialResult(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for RenewCredentialResult(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for RenewCredentialResult(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RenewCredentialResult()
{
  return &type metadata for RenewCredentialResult;
}

uint64_t dispatch thunk of AccountStore.primaryAppleAccount()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AccountStore.authKitAccount(forAltDSID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AccountStore.primaryUserDSIDString()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AccountStore.aidaAccountForiCloudAccount(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AccountStore.gpk_renewCredentials(for:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 40) + **(int **)(a5 + 40));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = dispatch thunk of AccountStore.gpk_renewCredentials(for:options:);
  return v12(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of AccountStore.gpk_renewCredentials(for:options:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t DaemonConfiguration.allAppleiCloudDeviceSyncedDatabasePath.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DaemonConfiguration.allAppleiCloudDeviceLocalDatabasePath.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DaemonConfiguration.strictDeviceSyncedDatabasePath.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DaemonConfiguration.strictDeviceLocalDatabasePath.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t DaemonConfiguration.enableCloudSync.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 64) & 1;
}

uint64_t DaemonConfiguration.maxNetworkBackoffRetries.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t DaemonConfiguration.maxKDSBackoffRetries.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t DaemonConfiguration.maxGKSBackoffRetries.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t default argument 0 of DaemonConfiguration.init(strictDeviceSyncedDatabasePath:strictDeviceLocalDatabasePath:allAppleiCloudDeviceSyncedDatabasePath:allAppleiCloudDeviceLocalDatabasePath:enableCloudSync:maxNetworkBackoffRetries:maxKDSBackoffRetries:maxGKSBackoffRetries:)()
{
  Swift::String v0;
  NSString v2;
  id v3;
  uint64_t v4;

  type metadata accessor for NSString();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("~/Library/com.apple.groupkitd/syncedGroupStore.sqlite", 0x35uLL, 1);
  v2 = NSString.__allocating_init(string:)(v0);
  v3 = objc_msgSend(v2, sel_stringByExpandingTildeInPath);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

unint64_t type metadata accessor for NSString()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSString);
    return ObjCClassMetadata;
  }
  return v2;
}

NSString __swiftcall NSString.__allocating_init(string:)(Swift::String string)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc NSString.init(string:)();
}

uint64_t default argument 1 of DaemonConfiguration.init(strictDeviceSyncedDatabasePath:strictDeviceLocalDatabasePath:allAppleiCloudDeviceSyncedDatabasePath:allAppleiCloudDeviceLocalDatabasePath:enableCloudSync:maxNetworkBackoffRetries:maxKDSBackoffRetries:maxGKSBackoffRetries:)()
{
  Swift::String v0;
  NSString v2;
  id v3;
  uint64_t v4;

  type metadata accessor for NSString();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("~/Library/com.apple.groupkitd/userStore.sqlite", 0x2EuLL, 1);
  v2 = NSString.__allocating_init(string:)(v0);
  v3 = objc_msgSend(v2, sel_stringByExpandingTildeInPath);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t default argument 2 of DaemonConfiguration.init(strictDeviceSyncedDatabasePath:strictDeviceLocalDatabasePath:allAppleiCloudDeviceSyncedDatabasePath:allAppleiCloudDeviceLocalDatabasePath:enableCloudSync:maxNetworkBackoffRetries:maxKDSBackoffRetries:maxGKSBackoffRetries:)()
{
  Swift::String v0;
  NSString v2;
  id v3;
  uint64_t v4;

  type metadata accessor for NSString();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("~/Library/com.apple.groupkitd/allAppleiCloudDeviceSynchGroupStore.sqlite", 0x48uLL, 1);
  v2 = NSString.__allocating_init(string:)(v0);
  v3 = objc_msgSend(v2, sel_stringByExpandingTildeInPath);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t default argument 3 of DaemonConfiguration.init(strictDeviceSyncedDatabasePath:strictDeviceLocalDatabasePath:allAppleiCloudDeviceSyncedDatabasePath:allAppleiCloudDeviceLocalDatabasePath:enableCloudSync:maxNetworkBackoffRetries:maxKDSBackoffRetries:maxGKSBackoffRetries:)()
{
  Swift::String v0;
  NSString v2;
  id v3;
  uint64_t v4;

  type metadata accessor for NSString();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("~/Library/com.apple.groupkitd/allAppleiCloudDeviceUserStore.sqlite", 0x42uLL, 1);
  v2 = NSString.__allocating_init(string:)(v0);
  v3 = objc_msgSend(v2, sel_stringByExpandingTildeInPath);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t default argument 4 of DaemonConfiguration.init(strictDeviceSyncedDatabasePath:strictDeviceLocalDatabasePath:allAppleiCloudDeviceSyncedDatabasePath:allAppleiCloudDeviceLocalDatabasePath:enableCloudSync:maxNetworkBackoffRetries:maxKDSBackoffRetries:maxGKSBackoffRetries:)()
{
  return 1;
}

uint64_t default argument 5 of DaemonConfiguration.init(strictDeviceSyncedDatabasePath:strictDeviceLocalDatabasePath:allAppleiCloudDeviceSyncedDatabasePath:allAppleiCloudDeviceLocalDatabasePath:enableCloudSync:maxNetworkBackoffRetries:maxKDSBackoffRetries:maxGKSBackoffRetries:)()
{
  return 10;
}

uint64_t default argument 6 of DaemonConfiguration.init(strictDeviceSyncedDatabasePath:strictDeviceLocalDatabasePath:allAppleiCloudDeviceSyncedDatabasePath:allAppleiCloudDeviceLocalDatabasePath:enableCloudSync:maxNetworkBackoffRetries:maxKDSBackoffRetries:maxGKSBackoffRetries:)()
{
  return 5;
}

uint64_t default argument 7 of DaemonConfiguration.init(strictDeviceSyncedDatabasePath:strictDeviceLocalDatabasePath:allAppleiCloudDeviceSyncedDatabasePath:allAppleiCloudDeviceLocalDatabasePath:enableCloudSync:maxNetworkBackoffRetries:maxKDSBackoffRetries:maxGKSBackoffRetries:)()
{
  return 5;
}

void __swiftcall DaemonConfiguration.init(strictDeviceSyncedDatabasePath:strictDeviceLocalDatabasePath:allAppleiCloudDeviceSyncedDatabasePath:allAppleiCloudDeviceLocalDatabasePath:enableCloudSync:maxNetworkBackoffRetries:maxKDSBackoffRetries:maxGKSBackoffRetries:)(GroupKitCore::DaemonConfiguration *__return_ptr retstr, Swift::String strictDeviceSyncedDatabasePath, Swift::String strictDeviceLocalDatabasePath, Swift::String allAppleiCloudDeviceSyncedDatabasePath, Swift::String allAppleiCloudDeviceLocalDatabasePath, Swift::Bool enableCloudSync, Swift::Int maxNetworkBackoffRetries, Swift::Int maxKDSBackoffRetries, Swift::Int maxGKSBackoffRetries)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t countAndFlagsBits;
  uint64_t v12;
  void *v14;
  void *v15;
  void *v16;
  void *object;
  _QWORD __b[12];

  countAndFlagsBits = strictDeviceSyncedDatabasePath._countAndFlagsBits;
  object = strictDeviceSyncedDatabasePath._object;
  v12 = strictDeviceLocalDatabasePath._countAndFlagsBits;
  v16 = strictDeviceLocalDatabasePath._object;
  v9 = allAppleiCloudDeviceSyncedDatabasePath._countAndFlagsBits;
  v15 = allAppleiCloudDeviceSyncedDatabasePath._object;
  v10 = allAppleiCloudDeviceLocalDatabasePath._countAndFlagsBits;
  v14 = allAppleiCloudDeviceLocalDatabasePath._object;
  memset(__b, 0, sizeof(__b));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[4] = countAndFlagsBits;
  __b[5] = object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[6] = v12;
  __b[7] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[0] = v9;
  __b[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[2] = v10;
  __b[3] = v14;
  LOBYTE(__b[8]) = enableCloudSync;
  __b[9] = maxNetworkBackoffRetries;
  __b[10] = maxKDSBackoffRetries;
  __b[11] = maxGKSBackoffRetries;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  retstr->allAppleiCloudDeviceSyncedDatabasePath._countAndFlagsBits = v9;
  retstr->allAppleiCloudDeviceSyncedDatabasePath._object = v15;
  retstr->allAppleiCloudDeviceLocalDatabasePath._countAndFlagsBits = v10;
  retstr->allAppleiCloudDeviceLocalDatabasePath._object = v14;
  retstr->strictDeviceSyncedDatabasePath._countAndFlagsBits = countAndFlagsBits;
  retstr->strictDeviceSyncedDatabasePath._object = object;
  retstr->strictDeviceLocalDatabasePath._countAndFlagsBits = v12;
  retstr->strictDeviceLocalDatabasePath._object = v16;
  retstr->enableCloudSync = enableCloudSync;
  retstr->maxNetworkBackoffRetries = maxNetworkBackoffRetries;
  retstr->maxKDSBackoffRetries = maxKDSBackoffRetries;
  retstr->maxGKSBackoffRetries = maxGKSBackoffRetries;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of DaemonConfiguration();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DaemonConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for DaemonConfiguration(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for DaemonConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DaemonConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return result;
}

uint64_t assignWithCopy for DaemonConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64) & 1;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy96_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for DaemonConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64) & 1;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return result;
}

uint64_t getEnumTagSinglePayload for DaemonConfiguration(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 8)))
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DaemonConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 96) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 96) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 8) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonConfiguration()
{
  return &type metadata for DaemonConfiguration;
}

id @nonobjc NSString.init(string:)()
{
  id v1;
  id v2;
  id v3;

  v2 = (id)MEMORY[0x2426348B0]();
  v3 = objc_msgSend(v1, sel_initWithString_);

  swift_bridgeObjectRelease();
  return v3;
}

uint64_t IDSMessageCoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;

  v22 = a1;
  v24 = a2;
  v25 = a3;
  v26 = a4;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  v44 = a2;
  v29 = 0;
  v31 = type metadata accessor for DictionaryEncoder.DataEncodingStrategy();
  v30 = *(_QWORD *)(v31 - 8);
  v19 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v32 = (char *)v17 - v19;
  v21 = *(_QWORD *)(v4 - 8);
  v20 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v27 = (uint64_t)v17 - v20;
  v35 = type metadata accessor for IDSMessageEnvelope(v6, v7, v8, v9);
  v23 = (*(_QWORD *)(*(_QWORD *)(v35 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v27);
  v37 = (uint64_t)v17 - v23;
  v43 = (char *)v17 - v23;
  v42 = v11;
  (*(void (**)(double))(v12 + 16))(v10);
  v28 = default argument 1 of IDSMessageEnvelope.init(value:domain:)();
  IDSMessageEnvelope.init(value:domain:)(v27, v28, v13, v24, v37);
  type metadata accessor for DictionaryEncoder();
  v33 = DictionaryEncoder.__allocating_init()();
  v41 = v33;
  (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v32, *MEMORY[0x24BDFC528], v31);
  dispatch thunk of DictionaryEncoder.dataEncodingStrategy.setter();
  MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>, v35, v34);
  v14 = v36;
  v15 = dispatch thunk of DictionaryEncoder.encode<A>(_:)();
  v38 = v14;
  v39 = v15;
  v40 = v14;
  if (v14)
  {
    v17[1] = v40;
    swift_release();
    outlined destroy of IDSMessageEnvelope<A>(v37, v24);
    return v34;
  }
  else
  {
    v17[2] = v39;
    v18 = _dictionaryUpCast<A, B, C, D>(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of IDSMessageEnvelope<A>(v37, v24);
    return v18;
  }
}

uint64_t IDSMessageCoder.decode<A>(_:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;

  v19 = a6;
  v29 = a1;
  v34 = a2;
  v20 = a3;
  v40 = 0;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v36 = 0;
  v21 = 0;
  v41 = a3;
  v22 = type metadata accessor for IDSMessageEnvelope(255, a3, a4, a5);
  v23 = 0;
  v24 = type metadata accessor for Optional();
  v25 = (*(_QWORD *)(*(_QWORD *)(v24 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v26 = (char *)&v12 - v25;
  v27 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v28 = (char *)&v12 - v27;
  v40 = (char *)&v12 - v27;
  v30 = type metadata accessor for DictionaryDecoder.DataDecodingStrategy();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v33 = (char *)&v12 - v32;
  v39 = v8;
  v38 = v9;
  swift_bridgeObjectRetain();
  v35 = _dictionaryDownCastConditional<A, B, C, D>(_:)();
  if (v35)
  {
    v18 = v35;
    v10 = v21;
    v16 = v35;
    v37 = v35;
    swift_bridgeObjectRelease();
    type metadata accessor for DictionaryDecoder();
    v14 = DictionaryDecoder.__allocating_init()();
    v36 = v14;
    (*(void (**)(char *, _QWORD, uint64_t))(v31 + 104))(v33, *MEMORY[0x24BDFC4E8], v30);
    dispatch thunk of DictionaryDecoder.dataDecodingStrategy.setter();
    MEMORY[0x242635504](&protocol conformance descriptor for IDSMessageEnvelope<A>, v22, v15);
    dispatch thunk of DictionaryDecoder.decode<A>(_:from:)();
    v17 = v10;
    if (v10)
    {

      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v28, 1);
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v28, 0, 1);
    }
    outlined init with copy of IDSMessageEnvelope<A>?(v28, v26, v20, v22, v24);
    if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v26, 1) == 1)
    {
      outlined destroy of IDSMessageEnvelope<A>?((uint64_t)v26, v20, v22);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1);
    }
    else
    {
      v13 = *(_QWORD *)(v20 - 8);
      (*(void (**)(uint64_t, char *))(v13 + 16))(v19, v26);
      outlined destroy of IDSMessageEnvelope<A>((uint64_t)v26, v20);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v19, 0, 1, v20);
    }
    outlined destroy of IDSMessageEnvelope<A>?((uint64_t)v28, v20, v22);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1);
  }
}

char *outlined init with copy of IDSMessageEnvelope<A>?(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char *v7;
  uint64_t v8;
  uint64_t v14;

  v14 = *(_QWORD *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a5 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *))(*(_QWORD *)(a3 - 8) + 16))(a2, a1);
    v5 = *(int *)(a4 + 44);
    v7 = &a2[v5];
    *(_QWORD *)&a2[v5] = *(_QWORD *)&a1[v5];
    v8 = *(_QWORD *)&a1[v5 + 8];
    swift_bridgeObjectRetain();
    *((_QWORD *)v7 + 1) = v8;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, a4);
  }
  return a2;
}

uint64_t outlined destroy of IDSMessageEnvelope<A>?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 48))(a1, 1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1);
    swift_bridgeObjectRelease();
  }
  return a1;
}

ValueMetadata *type metadata accessor for IDSMessageCoder()
{
  return &type metadata for IDSMessageCoder;
}

uint64_t InitFetchMetaDataRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t *InitFetchMetaDataRequest.Response.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t MetaData;

  MetaData = type metadata accessor for InitFetchMetaDataRequest.Response();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(MetaData + 20)), a1);
}

uint64_t type metadata accessor for InitFetchMetaDataRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for InitFetchMetaDataRequest.Response;
  if (!type metadata singleton initialization cache for InitFetchMetaDataRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

BOOL static InitFetchMetaDataRequest.Response.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t InitFetchMetaDataRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t InitFetchMetaDataRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t InitFetchMetaDataRequest.Response.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t InitFetchMetaDataRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchMetaDataRequest.Response.CodingKeys, &type metadata for InitFetchMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchMetaDataRequest.Response.CodingKeys, &type metadata for InitFetchMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchMetaDataRequest.Response.CodingKeys, &type metadata for InitFetchMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchMetaDataRequest.Response.CodingKeys, &type metadata for InitFetchMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchMetaDataRequest.Response.CodingKeys, &type metadata for InitFetchMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t InitFetchMetaDataRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t InitFetchMetaDataRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InitFetchMetaDataRequest.Response.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static InitFetchMetaDataRequest.Response.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance InitFetchMetaDataRequest.Response.CodingKeys()
{
  return InitFetchMetaDataRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InitFetchMetaDataRequest.Response.CodingKeys()
{
  return InitFetchMetaDataRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InitFetchMetaDataRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InitFetchMetaDataRequest.Response.CodingKeys()
{
  _BYTE *v0;

  return InitFetchMetaDataRequest.Response.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InitFetchMetaDataRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitFetchMetaDataRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InitFetchMetaDataRequest.Response.CodingKeys()
{
  return InitFetchMetaDataRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance InitFetchMetaDataRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitFetchMetaDataRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InitFetchMetaDataRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InitFetchMetaDataRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InitFetchMetaDataRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD v31[2];
  char v32;
  uint64_t v33;
  _QWORD *v34;

  v15 = a1;
  v34 = 0;
  v33 = 0;
  v25 = type metadata accessor for GPKGroupID();
  v21 = *(_QWORD *)(v25 - 8);
  v14 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v7 - v14;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InitFetchMetaDataRequest.Response.CodingKeys>);
  v16 = *(_QWORD *)(v24 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v7 - v17;
  v34 = v2;
  v33 = v1;
  v18 = v2[3];
  v19 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v18);
  lazy protocol witness table accessor for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v27, v22, v25);
  v23 = &v32;
  v32 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v28 = v3;
  v29 = v3;
  if (v3)
  {
    v7[2] = v29;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    v4 = (uint64_t *)(v22 + *(int *)(type metadata accessor for InitFetchMetaDataRequest.Response() + 20));
    v8 = *v4;
    v9 = v4[1];
    outlined copy of Data._Representation(v8, v9);
    v11 = v31;
    v31[0] = v8;
    v31[1] = v9;
    v10 = &v30;
    v30 = 1;
    lazy protocol witness table accessor for type Nonce and conformance Nonce();
    v5 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = v5;
    v13 = v5;
    if (v5)
      v7[1] = v13;
    outlined destroy of Nonce((uint64_t)v31);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
}

uint64_t InitFetchMetaDataRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t MetaData;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  char v47;

  v23 = a2;
  v32 = a1;
  v46 = 0;
  v28 = 0;
  v24 = type metadata accessor for GPKGroupID();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v12 - v26;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InitFetchMetaDataRequest.Response.CodingKeys>);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v36 = (char *)&v12 - v31;
  MetaData = type metadata accessor for InitFetchMetaDataRequest.Response();
  v34 = (*(_QWORD *)(*(_QWORD *)(MetaData - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v32);
  v35 = (uint64_t)&v12 - v34;
  v47 = 0;
  v46 = v2;
  v38 = v2[3];
  v39 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v38);
  lazy protocol witness table accessor for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys();
  v3 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v40 = v3;
  v41 = v3;
  if (v3)
  {
    v15 = v41;
  }
  else
  {
    v20 = &v45;
    v45 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v4;
    v22 = v4;
    if (v4)
    {
      v14 = v22;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v14;
    }
    else
    {
      v16 = 1;
      v47 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v35, v27, v24);
      v17 = &v42;
      v42 = v16;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v5 = v21;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v18 = v5;
      v19 = v5;
      if (!v5)
      {
        v6 = v29;
        v7 = v36;
        v8 = v30;
        v9 = v44;
        v10 = (_QWORD *)(v35 + *(int *)(MetaData + 20));
        v47 = 3;
        *v10 = v43;
        v10[1] = v9;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v6);
        outlined init with copy of InitFetchMetaDataRequest.Response(v35, v23);
        __swift_destroy_boxed_opaque_existential_1(v32);
        return outlined destroy of InitFetchMetaDataRequest.Response(v35);
      }
      v13 = v19;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v13;
    }
  }
  v12 = v15;
  result = __swift_destroy_boxed_opaque_existential_1(v32);
  if ((v47 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v35, v24);
  return result;
}

uint64_t outlined init with copy of InitFetchMetaDataRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(type metadata accessor for InitFetchMetaDataRequest.Response() + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  outlined copy of Data._Representation(v7, v8);
  result = a2;
  v4 = (uint64_t *)(a2 + v6);
  *v4 = v7;
  v4[1] = v8;
  return result;
}

uint64_t outlined destroy of InitFetchMetaDataRequest.Response(uint64_t a1)
{
  uint64_t v1;
  uint64_t MetaData;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  MetaData = type metadata accessor for InitFetchMetaDataRequest.Response();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(MetaData + 20)), *(_QWORD *)(a1 + *(int *)(MetaData + 20) + 8));
  return a1;
}

uint64_t InitFetchMetaDataRequest.Response.init(groupId:nonce:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  v8 = *a2;
  v9 = a2[1];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a3, a1);
  result = type metadata accessor for InitFetchMetaDataRequest.Response();
  v5 = (_QWORD *)(a3 + *(int *)(result + 20));
  *v5 = v8;
  v5[1] = v9;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InitFetchMetaDataRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InitFetchMetaDataRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InitFetchMetaDataRequest.Response(uint64_t a1)
{
  return InitFetchMetaDataRequest.Response.encode(to:)(a1);
}

uint64_t InitFetchMetaDataRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t variable initialization expression of InitFetchMetaDataRequest.urlBagKey()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initFetchMetadata.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InitFetchMetaDataRequest.urlBagKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t InitFetchMetaDataRequest.init(groupID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v3;
  _QWORD *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD __b[3];

  memset(__b, 0, sizeof(__b));
  v15 = a1;
  v3 = URLBagKey.initFetchMetadata.unsafeMutableAddressor();
  outlined init with copy of String(v3, &__b[2]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  _allocateUninitializedArray<A>(_:)();
  v9 = v4;
  v5 = HTTPBodyKey.groupID.unsafeMutableAddressor();
  outlined init with copy of String(v5, v9);
  v9[2] = GPKGroupID.hexString.getter();
  v9[3] = v6;
  _finalizeUninitializedArray<A>(_:)();
  v10 = Dictionary.init(dictionaryLiteral:)();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  *(_QWORD *)&v13 = v10;
  outlined init with take of Any?(&v13, __b);
  outlined init with copy of InitFetchMetaDataRequest((uint64_t)__b, a2);
  v7 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1);
  return outlined destroy of InitFetchMetaDataRequest((uint64_t)__b);
}

uint64_t outlined init with copy of InitFetchMetaDataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(a2 + 40) = v4;
  return result;
}

uint64_t outlined destroy of InitFetchMetaDataRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance InitFetchMetaDataRequest()
{
  return InitFetchMetaDataRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance InitFetchMetaDataRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance InitFetchMetaDataRequest@<X0>(uint64_t a1@<X8>)
{
  return InitFetchMetaDataRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance InitFetchMetaDataRequest()
{
  return NetworkRequest.contentType.getter();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CompleteFetchMetaDataRequest.Response.MetaDataBlob.gpkGroupMetadatas.getter()
{
  swift_bridgeObjectRetain();
}

uint64_t static CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkGroupMetadatas", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkGroupMetadatas", 0x11uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  return static CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  return CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  return CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  return CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  return CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteFetchMetaDataRequest.Response.MetaDataBlob.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v6 = a1;
  v12 = a2;
  v21 = 0;
  v20 = 0;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys>);
  v7 = *(_QWORD *)(v13 - 8);
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = (char *)&v5 - v8;
  v21 = (_QWORD *)MEMORY[0x24BDAC7A8](v6);
  v20 = v2;
  v9 = v21[3];
  v10 = v21[4];
  __swift_project_boxed_opaque_existential_1(v21, v9);
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_bridgeObjectRetain();
  v16 = &v19;
  v19 = v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
  lazy protocol witness table accessor for type [GPKMetadata] and conformance <A> [A]();
  v3 = v15;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v17 = v3;
  v18 = v3;
  if (v3)
    v5 = v18;
  outlined destroy of [GPKMetadata]();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v13);
}

unint64_t lazy protocol witness table accessor for type [GPKMetadata] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKMetadata] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKMetadata] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMetadata]);
    v4 = lazy protocol witness table accessor for type GPKMetadata and conformance GPKMetadata();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMetadata] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GPKMetadata] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GPKMetadata] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMetadata]);
    v4 = lazy protocol witness table accessor for type GPKMetadata and conformance GPKMetadata();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMetadata] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GPKMetadata and conformance GPKMetadata()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMetadata and conformance GPKMetadata;
  if (!lazy protocol witness table cache variable for type GPKMetadata and conformance GPKMetadata)
  {
    v0 = type metadata accessor for GPKMetadata();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DA60], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetadata and conformance GPKMetadata);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMetadata and conformance GPKMetadata;
  if (!lazy protocol witness table cache variable for type GPKMetadata and conformance GPKMetadata)
  {
    v0 = type metadata accessor for GPKMetadata();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3DA68], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMetadata and conformance GPKMetadata);
    return v1;
  }
  return v3;
}

uint64_t CompleteFetchMetaDataRequest.Response.MetaDataBlob.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v13 = a1;
  v24 = 0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys>);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v17 = (char *)&v4 - v16;
  v24 = (_QWORD *)MEMORY[0x24BDAC7A8](v13);
  v19 = v24[3];
  v20 = v24[4];
  __swift_project_boxed_opaque_existential_1(v24, v19);
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys();
  v1 = v18;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v21 = v1;
  v22 = v1;
  if (v1)
  {
    v6 = v22;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
    lazy protocol witness table accessor for type [GPKMetadata] and conformance <A> [A]();
    v2 = v21;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v2;
    v12 = v2;
    if (!v2)
    {
      v8 = v23;
      swift_bridgeObjectRetain();
      v7 = &v25;
      v25 = v8;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      __swift_destroy_boxed_opaque_existential_1(v13);
      outlined destroy of CompleteFetchMetaDataRequest.Response.MetaDataBlob();
      return v8;
    }
    v5 = v12;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v6 = v5;
  }
  v4 = v6;
  __swift_destroy_boxed_opaque_existential_1(v13);
  return v9;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CompleteFetchMetaDataRequest.Response.MetaDataBlob()
{
  swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = CompleteFetchMetaDataRequest.Response.MetaDataBlob.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob(uint64_t a1)
{
  uint64_t *v1;

  return CompleteFetchMetaDataRequest.Response.MetaDataBlob.encode(to:)(a1, *v1);
}

uint64_t CompleteFetchMetaDataRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t CompleteFetchMetaDataRequest.Response.groupMetadataBlob.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompleteFetchMetaDataRequest.Response() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for CompleteFetchMetaDataRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteFetchMetaDataRequest.Response;
  if (!type metadata singleton initialization cache for CompleteFetchMetaDataRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

BOOL static CompleteFetchMetaDataRequest.Response.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t CompleteFetchMetaDataRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteFetchMetaDataRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupMetadataBlob", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t CompleteFetchMetaDataRequest.Response.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t CompleteFetchMetaDataRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteFetchMetaDataRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CompleteFetchMetaDataRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupMetadataBlob", 0x11uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CompleteFetchMetaDataRequest.Response.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static CompleteFetchMetaDataRequest.Response.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteFetchMetaDataRequest.Response.CodingKeys()
{
  return CompleteFetchMetaDataRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CompleteFetchMetaDataRequest.Response.CodingKeys()
{
  return CompleteFetchMetaDataRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteFetchMetaDataRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CompleteFetchMetaDataRequest.Response.CodingKeys()
{
  _BYTE *v0;

  return CompleteFetchMetaDataRequest.Response.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteFetchMetaDataRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchMetaDataRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteFetchMetaDataRequest.Response.CodingKeys()
{
  return CompleteFetchMetaDataRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteFetchMetaDataRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchMetaDataRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteFetchMetaDataRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteFetchMetaDataRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteFetchMetaDataRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;

  v13 = a1;
  v32 = 0;
  v31 = 0;
  v23 = type metadata accessor for GPKGroupID();
  v19 = *(_QWORD *)(v23 - 8);
  v12 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)v6 - v12;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteFetchMetaDataRequest.Response.CodingKeys>);
  v14 = *(_QWORD *)(v22 - 8);
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v6 - v15;
  v32 = v2;
  v31 = v1;
  v16 = v2[3];
  v17 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v16);
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v25, v20, v23);
  v21 = &v30;
  v30 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v24;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v26 = v3;
  v27 = v3;
  if (v3)
  {
    v6[2] = v27;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v22);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v23);
    v7 = *(_QWORD *)(v20 + *(int *)(type metadata accessor for CompleteFetchMetaDataRequest.Response() + 20));
    swift_bridgeObjectRetain();
    v9 = &v29;
    v29 = v7;
    v8 = &v28;
    v28 = 1;
    lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.MetaDataBlob and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob();
    v4 = v26;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10 = v4;
    v11 = v4;
    if (v4)
      v6[1] = v11;
    outlined destroy of CompleteFetchMetaDataRequest.Response.MetaDataBlob();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v22);
  }
}

unint64_t lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.MetaDataBlob and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response.MetaDataBlob, &type metadata for CompleteFetchMetaDataRequest.Response.MetaDataBlob);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response.MetaDataBlob, &type metadata for CompleteFetchMetaDataRequest.Response.MetaDataBlob);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response.MetaDataBlob and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob);
    return v0;
  }
  return v2;
}

uint64_t CompleteFetchMetaDataRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t MetaData;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  char v45;

  v22 = a2;
  v31 = a1;
  v44 = 0;
  v27 = 0;
  v23 = type metadata accessor for GPKGroupID();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v11 - v25;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteFetchMetaDataRequest.Response.CodingKeys>);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v27);
  v35 = (char *)v11 - v30;
  MetaData = type metadata accessor for CompleteFetchMetaDataRequest.Response();
  v33 = (*(_QWORD *)(*(_QWORD *)(MetaData - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v31);
  v34 = (uint64_t)v11 - v33;
  v45 = 0;
  v44 = v2;
  v37 = v2[3];
  v38 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v37);
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys();
  v3 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v39 = v3;
  v40 = v3;
  if (v3)
  {
    v14 = v40;
  }
  else
  {
    v19 = &v43;
    v43 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v20 = v4;
    v21 = v4;
    if (v4)
    {
      v13 = v21;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v28);
      v14 = v13;
    }
    else
    {
      v15 = 1;
      v45 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v34, v26, v23);
      v16 = &v41;
      v41 = v15;
      lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.MetaDataBlob and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob();
      v5 = v20;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v17 = v5;
      v18 = v5;
      if (!v5)
      {
        v6 = v28;
        v7 = v35;
        v8 = v29;
        v9 = *(int *)(MetaData + 20);
        v45 = 3;
        *(_QWORD *)(v34 + v9) = v42;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v6);
        outlined init with copy of CompleteFetchMetaDataRequest.Response(v34, v22);
        __swift_destroy_boxed_opaque_existential_1(v31);
        return outlined destroy of CompleteFetchMetaDataRequest.Response(v34);
      }
      v12 = v18;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v28);
      v14 = v12;
    }
  }
  v11[1] = v14;
  result = __swift_destroy_boxed_opaque_existential_1(v31);
  if ((v45 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v34, v23);
  return result;
}

uint64_t outlined init with copy of CompleteFetchMetaDataRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(type metadata accessor for CompleteFetchMetaDataRequest.Response() + 20);
  v7 = *(_QWORD *)(a1 + v6);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(a2 + v6) = v7;
  return result;
}

uint64_t outlined destroy of CompleteFetchMetaDataRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  type metadata accessor for CompleteFetchMetaDataRequest.Response();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t CompleteFetchMetaDataRequest.Response.init(groupId:groupMetadataBlob:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a3, a1);
  result = type metadata accessor for CompleteFetchMetaDataRequest.Response();
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompleteFetchMetaDataRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CompleteFetchMetaDataRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteFetchMetaDataRequest.Response(uint64_t a1)
{
  return CompleteFetchMetaDataRequest.Response.encode(to:)(a1);
}

uint64_t CompleteFetchMetaDataRequest.Body.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t *CompleteFetchMetaDataRequest.Body.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t MetaData;

  MetaData = type metadata accessor for CompleteFetchMetaDataRequest.Body();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(MetaData + 20)), a1);
}

uint64_t type metadata accessor for CompleteFetchMetaDataRequest.Body()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteFetchMetaDataRequest.Body;
  if (!type metadata singleton initialization cache for CompleteFetchMetaDataRequest.Body)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t CompleteFetchMetaDataRequest.Body.groupVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CompleteFetchMetaDataRequest.Body() + 24));
}

uint64_t variable initialization expression of CompleteFetchMetaDataRequest.Body.signature()
{
  return 0;
}

uint64_t CompleteFetchMetaDataRequest.Body.signature.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for CompleteFetchMetaDataRequest.Body() + 28);
  v3 = *(_QWORD *)v1;
  outlined copy of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t CompleteFetchMetaDataRequest.Body.signature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  outlined copy of Data?(a1, a2);
  v3 = (uint64_t *)(v2 + *(int *)(type metadata accessor for CompleteFetchMetaDataRequest.Body() + 28));
  v4 = *v3;
  v5 = v3[1];
  *v3 = a1;
  v3[1] = a2;
  outlined consume of Data?(v4, v5);
  return outlined consume of Data?(a1, a2);
}

uint64_t (*CompleteFetchMetaDataRequest.Body.signature.modify())()
{
  type metadata accessor for CompleteFetchMetaDataRequest.Body();
  return CompleteFetchMetaDataRequest.Body.signature.modify;
}

uint64_t CompleteFetchMetaDataRequest.Body.init(groupId:nonce:groupVersion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v17[2];
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t MetaData;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;

  v23 = a4;
  v27 = a1;
  v19 = a2;
  v22 = a3;
  v34 = 0;
  v33 = 0;
  v31 = 0;
  v32 = 0;
  v30 = 0;
  v17[1] = 0;
  v28 = type metadata accessor for GPKGroupID();
  v26 = *(_QWORD *)(v28 - 8);
  v18 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v20 = (char *)v17 - v18;
  MetaData = type metadata accessor for CompleteFetchMetaDataRequest.Body();
  v4 = MEMORY[0x24BDAC7A8](v20);
  v29 = (uint64_t)v17 - v5;
  v34 = (char *)v17 - v5;
  v33 = v6;
  v25 = *v7;
  v24 = v7[1];
  v31 = v25;
  v32 = v24;
  v30 = v22;
  v8 = (_QWORD *)((char *)v17 + *(int *)(MetaData + 28) - v5);
  *v8 = 0;
  v8[1] = 0xF000000000000000;
  (*(void (**)(double))(v9 + 16))(v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v29, v20, v28);
  outlined copy of Data._Representation(v25, v24);
  v10 = MetaData;
  v11 = v22;
  v12 = v23;
  v13 = v24;
  v14 = v29;
  v15 = (_QWORD *)(v29 + *(int *)(MetaData + 20));
  *v15 = v25;
  v15[1] = v13;
  *(_DWORD *)(v14 + *(int *)(v10 + 24)) = v11;
  outlined init with copy of CompleteFetchMetaDataRequest.Body(v14, v12);
  outlined consume of Data._Representation(v25, v24);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
  return outlined destroy of CompleteFetchMetaDataRequest.Body(v29);
}

uint64_t outlined init with copy of CompleteFetchMetaDataRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *MetaData;
  uint64_t v14;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  MetaData = (int *)type metadata accessor for CompleteFetchMetaDataRequest.Body();
  v8 = MetaData[5];
  v9 = *(_QWORD *)(a1 + v8);
  v10 = *(_QWORD *)(a1 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  v3 = (uint64_t *)(a2 + v8);
  *v3 = v9;
  v3[1] = v10;
  *(_DWORD *)(a2 + MetaData[6]) = *(_DWORD *)(a1 + MetaData[6]);
  v14 = MetaData[7];
  if ((*(_QWORD *)(a1 + v14 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a2 + v14) = *(_OWORD *)(a1 + v14);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + v14);
    v7 = *(_QWORD *)(a1 + v14 + 8);
    outlined copy of Data._Representation(v6, v7);
    v4 = (uint64_t *)(a2 + v14);
    *v4 = v6;
    v4[1] = v7;
  }
  return a2;
}

uint64_t outlined destroy of CompleteFetchMetaDataRequest.Body(uint64_t a1)
{
  uint64_t v1;
  uint64_t MetaData;
  uint64_t v5;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  MetaData = type metadata accessor for CompleteFetchMetaDataRequest.Body();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(MetaData + 20)), *(_QWORD *)(a1 + *(int *)(MetaData + 20) + 8));
  v5 = *(int *)(MetaData + 28);
  if ((*(_QWORD *)(a1 + v5 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v5), *(_QWORD *)(a1 + v5 + 8));
  return a1;
}

uint64_t CompleteFetchMetaDataRequest.Body.serializedRepresentationForSigning()()
{
  char *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t MetaData;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = 0;
  v21[1] = 0;
  v25 = type metadata accessor for GPKGroupID();
  v23 = *(_QWORD *)(v25 - 8);
  v21[0] = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v25);
  v0 = (char *)v21 - v21[0];
  v24 = (char *)v21 - v21[0];
  v33 = v1;
  v29 = MEMORY[0x24BDCDDE8];
  v28 = _allocateUninitializedArray<A>(_:)();
  v27 = v2;
  static GPKConstant.metadataProtocolVersion.getter();
  v3 = Data.init(bigEndianBytesOf:)();
  v4 = v27;
  *v27 = v3;
  v4[1] = v5;
  MetaData = type metadata accessor for CompleteFetchMetaDataRequest.Body();
  outlined init with copy of Data((uint64_t *)(v22 + *(int *)(MetaData + 20)), v27 + 2);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v0, v22, v25);
  v6 = GPKGroupID.data.getter();
  v7 = v23;
  v8 = v27;
  v9 = v6;
  v10 = v24;
  v12 = v11;
  v13 = v25;
  v27[4] = v9;
  v8[5] = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v13);
  v14 = Data.init(bigEndianBytesOf:)();
  v15 = v27;
  v16 = v14;
  v17 = v28;
  v27[6] = v16;
  v15[7] = v18;
  _finalizeUninitializedArray<A>(_:)();
  v30 = v17;
  v31 = lengthEncodedDataArray(_:)();
  v32 = v19;
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t *outlined init with copy of Data(uint64_t *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  outlined copy of Data._Representation(*a1, v4);
  result = a2;
  *a2 = v3;
  a2[1] = v4;
  return result;
}

void static CompleteFetchMetaDataRequest.Body.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D354DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D354E00
                                                                                       + *((int *)qword_23D354E68 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D354E10()
{
  uint64_t v1;

  return v1 == 0;
}

void CompleteFetchMetaDataRequest.Body.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D354EC8()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteFetchMetaDataRequest.Body.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupVersion", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signature", 9uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t CompleteFetchMetaDataRequest.Body.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t CompleteFetchMetaDataRequest.Body.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Body.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Body.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Body.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Body.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Body.CodingKeys, &type metadata for CompleteFetchMetaDataRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteFetchMetaDataRequest.Body.CodingKeys.intValue.getter()
{
  return 0;
}

void CompleteFetchMetaDataRequest.Body.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D355328()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteFetchMetaDataRequest.Body.CodingKeys(char *a1)
{
  char v1;

  static CompleteFetchMetaDataRequest.Body.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteFetchMetaDataRequest.Body.CodingKeys()
{
  return CompleteFetchMetaDataRequest.Body.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CompleteFetchMetaDataRequest.Body.CodingKeys(uint64_t a1)
{
  char *v1;

  CompleteFetchMetaDataRequest.Body.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteFetchMetaDataRequest.Body.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance CompleteFetchMetaDataRequest.Body.CodingKeys()
{
  char *v0;

  CompleteFetchMetaDataRequest.Body.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteFetchMetaDataRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchMetaDataRequest.Body.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteFetchMetaDataRequest.Body.CodingKeys()
{
  return CompleteFetchMetaDataRequest.Body.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteFetchMetaDataRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchMetaDataRequest.Body.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteFetchMetaDataRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteFetchMetaDataRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteFetchMetaDataRequest.Body.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t MetaData;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD v46[2];
  char v47;
  char v48;
  _QWORD v49[2];
  char v50;
  uint64_t v51;
  _QWORD *v52;

  v30 = a1;
  v52 = 0;
  v51 = 0;
  v40 = type metadata accessor for GPKGroupID();
  v36 = *(_QWORD *)(v40 - 8);
  v29 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)v10 - v29;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteFetchMetaDataRequest.Body.CodingKeys>);
  v31 = *(_QWORD *)(v39 - 8);
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v30);
  v35 = (char *)v10 - v32;
  v52 = v2;
  v51 = v1;
  v33 = v2[3];
  v34 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v33);
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v42, v37, v40);
  v38 = &v50;
  v50 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v41;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v43 = v3;
  v44 = v3;
  if (v3)
  {
    v12 = v44;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v42, v40);
    result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v35, v39);
    v13 = v12;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v42, v40);
    MetaData = type metadata accessor for CompleteFetchMetaDataRequest.Body();
    v4 = (uint64_t *)(v37 + *(int *)(MetaData + 20));
    v23 = *v4;
    v24 = v4[1];
    outlined copy of Data._Representation(v23, v24);
    v26 = v49;
    v49[0] = v23;
    v49[1] = v24;
    v25 = &v48;
    v48 = 1;
    lazy protocol witness table accessor for type Nonce and conformance Nonce();
    v5 = v43;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v27 = v5;
    v28 = v5;
    if (v5)
    {
      v11 = v28;
      outlined destroy of Nonce((uint64_t)v49);
      result = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v35, v39);
      v13 = v11;
    }
    else
    {
      outlined destroy of Nonce((uint64_t)v49);
      v6 = v27;
      v47 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v20 = v6;
      v21 = v6;
      if (v6)
      {
        v10[2] = v21;
        return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v35, v39);
      }
      else
      {
        v7 = (uint64_t *)(v37 + *(int *)(MetaData + 28));
        v14 = *v7;
        v15 = v7[1];
        outlined copy of Data?(v14, v15);
        v17 = v46;
        v46[0] = v14;
        v46[1] = v15;
        v16 = &v45;
        v45 = 3;
        lazy protocol witness table accessor for type Data and conformance Data();
        v8 = v20;
        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
        v18 = v8;
        v19 = v8;
        if (v8)
          v10[1] = v19;
        outlined destroy of Data?((uint64_t)v46);
        return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v35, v39);
      }
    }
  }
  return result;
}

uint64_t CompleteFetchMetaDataRequest.Body.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int *MetaData;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  char v62;

  v34 = a2;
  v43 = a1;
  v61 = 0;
  v39 = 0;
  v35 = type metadata accessor for GPKGroupID();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&v17 - v37;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteFetchMetaDataRequest.Body.CodingKeys>);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v39);
  v47 = (char *)&v17 - v42;
  MetaData = (int *)type metadata accessor for CompleteFetchMetaDataRequest.Body();
  v44 = (*(_QWORD *)(*((_QWORD *)MetaData - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (_QWORD *)MEMORY[0x24BDAC7A8](v43);
  v46 = (uint64_t)&v17 - v44;
  v62 = 0;
  v61 = v2;
  v3 = MetaData[7];
  v62 = 8;
  v4 = (uint64_t *)((char *)&v17 + v3 - v44);
  *v4 = 0;
  v4[1] = 0xF000000000000000;
  v49 = v2[3];
  v50 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v49);
  lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys();
  v5 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v51 = v5;
  v52 = v5;
  if (v5)
  {
    v21 = v52;
  }
  else
  {
    v31 = &v60;
    v60 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v6 = v51;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v32 = v6;
    v33 = v6;
    if (v6)
    {
      v20 = v33;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v47, v40);
      v21 = v20;
    }
    else
    {
      v62 = 9;
      (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v46, v38, v35);
      v28 = &v57;
      v57 = 1;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v7 = v32;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v29 = v7;
      v30 = v7;
      if (v7)
      {
        v19 = v30;
        (*(void (**)(char *, uint64_t))(v41 + 8))(v47, v40);
        v21 = v19;
      }
      else
      {
        v8 = v59;
        v9 = (_QWORD *)(v46 + MetaData[5]);
        v62 = 11;
        *v9 = v58;
        v9[1] = v8;
        v56 = 2;
        v10 = KeyedDecodingContainer.decode(_:forKey:)();
        v25 = 0;
        v26 = v10;
        v27 = 0;
        *(_DWORD *)(v46 + MetaData[6]) = v10;
        v22 = &v53;
        v53 = 3;
        lazy protocol witness table accessor for type Data and conformance Data();
        v11 = v25;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
        v23 = v11;
        v24 = v11;
        if (!v11)
        {
          v12 = v55;
          v13 = (uint64_t *)(v46 + MetaData[7]);
          v14 = *v13;
          v15 = v13[1];
          *v13 = v54;
          v13[1] = v12;
          outlined consume of Data?(v14, v15);
          (*(void (**)(char *, uint64_t))(v41 + 8))(v47, v40);
          outlined init with copy of CompleteFetchMetaDataRequest.Body(v46, v34);
          __swift_destroy_boxed_opaque_existential_1(v43);
          return outlined destroy of CompleteFetchMetaDataRequest.Body(v46);
        }
        v18 = v24;
        (*(void (**)(char *, uint64_t))(v41 + 8))(v47, v40);
        v21 = v18;
      }
    }
  }
  v17 = v21;
  __swift_destroy_boxed_opaque_existential_1(v43);
  if ((v62 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v46, v35);
  if ((v62 & 2) != 0)
    outlined destroy of Nonce(v46 + MetaData[5]);
  return outlined destroy of Data?(v46 + MetaData[7]);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompleteFetchMetaDataRequest.Body@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CompleteFetchMetaDataRequest.Body.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteFetchMetaDataRequest.Body(uint64_t a1)
{
  return CompleteFetchMetaDataRequest.Body.encode(to:)(a1);
}

uint64_t CompleteFetchMetaDataRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t variable initialization expression of CompleteFetchMetaDataRequest.urlBagKey()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeFetchMetadata.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CompleteFetchMetaDataRequest.urlBagKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

_OWORD *CompleteFetchMetaDataRequest.init(groupID:nonce:groupVersion:signer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t MetaData;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD v76[2];
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _OWORD __b[3];
  char *v83;

  v44 = a5;
  v61 = a1;
  v52 = a2;
  v67 = a3;
  v51 = a4;
  v83 = 0;
  v59 = __b;
  memset(__b, 0, sizeof(__b));
  v81 = 0;
  v79 = 0;
  v80 = 0;
  v78 = 0;
  v77 = 0;
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v49 = 0;
  v45 = type metadata accessor for DictionaryEncoder.DataEncodingStrategy();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v48 = (char *)&v26 - v47;
  v62 = type metadata accessor for GPKGroupID();
  v60 = *(_QWORD *)(v62 - 8);
  v50 = (*(_QWORD *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v49);
  v66 = (uint64_t)&v26 - v50;
  MetaData = type metadata accessor for CompleteFetchMetaDataRequest.Body();
  v54 = (*(_QWORD *)(*(_QWORD *)(MetaData - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v61);
  v55 = (uint64_t)&v26 - v54;
  v56 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v57 = (uint64_t)&v26 - v56;
  v58 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v65 = (uint64_t)&v26 - v58;
  v83 = (char *)&v26 - v58;
  v81 = v9;
  v63 = *v10;
  v64 = v10[1];
  v79 = v63;
  v80 = v64;
  v78 = v11;
  v77 = v12;
  v13 = URLBagKey.completeFetchMetadata.unsafeMutableAddressor();
  outlined init with copy of String(v13, (_QWORD *)v59 + 4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v66, v61, v62);
  outlined copy of Data._Representation(v63, v64);
  v14 = v68;
  v76[0] = v63;
  v76[1] = v64;
  CompleteFetchMetaDataRequest.Body.init(groupId:nonce:groupVersion:)(v66, (uint64_t)v76, v67, v65);
  v69 = v14;
  v70 = v14;
  if (v14)
  {
    v29 = v70;
  }
  else
  {
    outlined init with copy of CompleteFetchMetaDataRequest.Body(v65, v57);
    v39 = CompleteFetchMetaDataRequest.Body.serializedRepresentationForSigning()();
    v36 = v15;
    outlined destroy of CompleteFetchMetaDataRequest.Body(v57);
    v74 = v39;
    v75 = v36;
    v37 = v51[3];
    v38 = v51[4];
    __swift_project_boxed_opaque_existential_1(v51, v37);
    v16 = v69;
    v17 = GroupSigning.sign(_:)(v39, v36, v37, v38);
    v40 = v16;
    v41 = v17;
    v42 = v18;
    v43 = v16;
    if (v16)
    {
      v28 = v43;
      outlined consume of Data._Representation(v39, v36);
      outlined destroy of CompleteFetchMetaDataRequest.Body(v65);
      v29 = v28;
    }
    else
    {
      v19 = v42;
      v20 = (uint64_t *)(v65 + *(int *)(MetaData + 28));
      v21 = *v20;
      v22 = v20[1];
      *v20 = v41;
      v20[1] = v19;
      outlined consume of Data?(v21, v22);
      type metadata accessor for DictionaryEncoder();
      v32 = DictionaryEncoder.__allocating_init()();
      v73 = v32;
      (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v48, *MEMORY[0x24BDFC528], v45);
      dispatch thunk of DictionaryEncoder.dataEncodingStrategy.setter();
      outlined init with copy of CompleteFetchMetaDataRequest.Body(v65, v55);
      lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Body and conformance CompleteFetchMetaDataRequest.Body();
      v23 = v40;
      v24 = dispatch thunk of DictionaryEncoder.encode<A>(_:)();
      v33 = v23;
      v34 = v24;
      v35 = v23;
      if (!v23)
      {
        v30 = v34;
        outlined destroy of CompleteFetchMetaDataRequest.Body(v55);
        v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
        *(_QWORD *)&v71 = v30;
        v31 = __b;
        outlined init with take of Any?(&v71, __b);
        swift_release();
        outlined consume of Data._Representation(v39, v36);
        outlined destroy of CompleteFetchMetaDataRequest.Body(v65);
        outlined init with copy of CompleteFetchMetaDataRequest((uint64_t)v31, v44);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
        outlined consume of Data._Representation(v63, v64);
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v62);
        return (_OWORD *)outlined destroy of CompleteFetchMetaDataRequest((uint64_t)v31);
      }
      v27 = v35;
      outlined destroy of CompleteFetchMetaDataRequest.Body(v55);
      swift_release();
      outlined consume of Data._Representation(v39, v36);
      outlined destroy of CompleteFetchMetaDataRequest.Body(v65);
      v29 = v27;
    }
  }
  v26 = v29;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  outlined consume of Data._Representation(v63, v64);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v62);
  result = &__b[2];
  outlined destroy of String();
  return result;
}

unint64_t lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Body and conformance CompleteFetchMetaDataRequest.Body()
{
  uint64_t MetaData;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body and conformance CompleteFetchMetaDataRequest.Body;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body and conformance CompleteFetchMetaDataRequest.Body)
  {
    MetaData = type metadata accessor for CompleteFetchMetaDataRequest.Body();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Body, MetaData);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Body and conformance CompleteFetchMetaDataRequest.Body);
    return v1;
  }
  return v3;
}

uint64_t outlined init with copy of CompleteFetchMetaDataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(a2 + 40) = v4;
  return result;
}

uint64_t outlined destroy of CompleteFetchMetaDataRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in InitFetchMetaDataRequest()
{
  return lazy protocol witness table accessor for type InitFetchMetaDataRequest.Response and conformance InitFetchMetaDataRequest.Response();
}

unint64_t lazy protocol witness table accessor for type InitFetchMetaDataRequest.Response and conformance InitFetchMetaDataRequest.Response()
{
  uint64_t MetaData;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response and conformance InitFetchMetaDataRequest.Response;
  if (!lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response and conformance InitFetchMetaDataRequest.Response)
  {
    MetaData = type metadata accessor for InitFetchMetaDataRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchMetaDataRequest.Response, MetaData);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchMetaDataRequest.Response and conformance InitFetchMetaDataRequest.Response);
    return v1;
  }
  return v3;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in CompleteFetchMetaDataRequest()
{
  return lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response and conformance CompleteFetchMetaDataRequest.Response();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response and conformance CompleteFetchMetaDataRequest.Response()
{
  uint64_t MetaData;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response and conformance CompleteFetchMetaDataRequest.Response;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response and conformance CompleteFetchMetaDataRequest.Response)
  {
    MetaData = type metadata accessor for CompleteFetchMetaDataRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest.Response, MetaData);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest.Response and conformance CompleteFetchMetaDataRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance CompleteFetchMetaDataRequest()
{
  return CompleteFetchMetaDataRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance CompleteFetchMetaDataRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance CompleteFetchMetaDataRequest@<X0>(uint64_t a1@<X8>)
{
  return CompleteFetchMetaDataRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance CompleteFetchMetaDataRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for InitFetchMetaDataRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for InitFetchMetaDataRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InitFetchMetaDataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 40) = v4;
  return result;
}

uint64_t assignWithCopy for InitFetchMetaDataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for InitFetchMetaDataRequest(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InitFetchMetaDataRequest(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 40)))
        v3 = *(_QWORD *)(a1 + 40);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InitFetchMetaDataRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 40) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitFetchMetaDataRequest()
{
  return &type metadata for InitFetchMetaDataRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for InitFetchMetaDataRequest.Response(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v14;

  v14 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v14 & 0x20000) != 0)
  {
    v9 = *a2;
    swift_retain();
    *a1 = v9;
    return *a1 + ((v14 + 16) & ~(unint64_t)v14);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v7 = (_QWORD *)((char *)a1 + *(int *)(a3 + 20));
    v4 = (uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v6 = *v4;
    v8 = v4[1];
    outlined copy of Data._Representation(*v4, v8);
    *v7 = v6;
    v7[1] = v8;
    return (unint64_t)a1;
  }
}

uint64_t destroy for InitFetchMetaDataRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for InitFetchMetaDataRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a2 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  result = a1;
  v5 = (uint64_t *)(a1 + v8);
  *v5 = v9;
  v5[1] = v10;
  return result;
}

uint64_t assignWithCopy for InitFetchMetaDataRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v10 = *(int *)(a3 + 20);
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a2 + v10 + 8);
  outlined copy of Data._Representation(v11, v12);
  v4 = (uint64_t *)(a1 + v10);
  v5 = *(_QWORD *)(a1 + v10);
  v6 = *(_QWORD *)(a1 + v10 + 8);
  *v4 = v11;
  v4[1] = v12;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

__n128 initializeWithTake for InitFetchMetaDataRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = *(__n128 *)(a2 + *(int *)(a3 + 20));
  *(__n128 *)(a1 + *(int *)(a3 + 20)) = result;
  return result;
}

uint64_t assignWithTake for InitFetchMetaDataRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + *(int *)(a3 + 20));
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitFetchMetaDataRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3573B4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for InitFetchMetaDataRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3574B0(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 12)
  {
    v5 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v5 = 0;
    v5[1] = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for InitFetchMetaDataRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for InitFetchMetaDataRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for InitFetchMetaDataRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for InitFetchMetaDataRequest.Response.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for InitFetchMetaDataRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InitFetchMetaDataRequest.Response.CodingKeys()
{
  return &type metadata for InitFetchMetaDataRequest.Response.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for CompleteFetchMetaDataRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CompleteFetchMetaDataRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CompleteFetchMetaDataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 40) = v4;
  return result;
}

uint64_t assignWithCopy for CompleteFetchMetaDataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CompleteFetchMetaDataRequest(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteFetchMetaDataRequest(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 40)))
        v3 = *(_QWORD *)(a1 + 40);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CompleteFetchMetaDataRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 40) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchMetaDataRequest()
{
  return &type metadata for CompleteFetchMetaDataRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteFetchMetaDataRequest.Response(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v12;

  v12 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v12 & 0x20000) != 0)
  {
    v7 = *a2;
    swift_retain();
    *a1 = v7;
    return *a1 + ((v12 + 16) & ~(unint64_t)v12);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v5 = *(int *)(a3 + 20);
    v6 = *(uint64_t *)((char *)a2 + v5);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v5) = v6;
    return (unint64_t)a1;
  }
}

uint64_t destroy for CompleteFetchMetaDataRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CompleteFetchMetaDataRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + v8) = v9;
  return result;
}

uint64_t assignWithCopy for CompleteFetchMetaDataRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CompleteFetchMetaDataRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = a1;
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return result;
}

uint64_t assignWithTake for CompleteFetchMetaDataRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteFetchMetaDataRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3583D8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20)) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for CompleteFetchMetaDataRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3584D0(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for CompleteFetchMetaDataRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

ValueMetadata *type metadata accessor for CompleteFetchMetaDataRequest.Response.MetaDataBlob()
{
  return &type metadata for CompleteFetchMetaDataRequest.Response.MetaDataBlob;
}

uint64_t getEnumTagSinglePayload for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  return &type metadata for CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CompleteFetchMetaDataRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteFetchMetaDataRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for CompleteFetchMetaDataRequest.Response.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for CompleteFetchMetaDataRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchMetaDataRequest.Response.CodingKeys()
{
  return &type metadata for CompleteFetchMetaDataRequest.Response.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteFetchMetaDataRequest.Body(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  int v18;

  v18 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v18 & 0x20000) != 0)
  {
    v13 = *a2;
    swift_retain();
    *a1 = v13;
    return *a1 + ((v18 + 16) & ~(unint64_t)v18);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v9 = (_QWORD *)((char *)a1 + a3[5]);
    v4 = (uint64_t *)((char *)a2 + a3[5]);
    v8 = *v4;
    v10 = v4[1];
    outlined copy of Data._Representation(*v4, v10);
    *v9 = v8;
    v9[1] = v10;
    *(_DWORD *)((char *)a1 + a3[6]) = *(_DWORD *)((char *)a2 + a3[6]);
    v11 = (char *)a1 + a3[7];
    v12 = (uint64_t *)((char *)a2 + a3[7]);
    if ((v12[1] & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)v11 = *(_OWORD *)v12;
    }
    else
    {
      v6 = *v12;
      v7 = v12[1];
      outlined copy of Data._Representation(*v12, v7);
      *(_QWORD *)v11 = v6;
      *((_QWORD *)v11 + 1) = v7;
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for CompleteFetchMetaDataRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  result = a1;
  v6 = *(int *)(a2 + 28);
  if ((*(_QWORD *)(a1 + v6 + 8) & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + v6), *(_QWORD *)(a1 + v6 + 8));
  return result;
}

uint64_t initializeWithCopy for CompleteFetchMetaDataRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v15;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v9 = a3[5];
  v10 = *(_QWORD *)(a2 + v9);
  v11 = *(_QWORD *)(a2 + v9 + 8);
  outlined copy of Data._Representation(v10, v11);
  v4 = (uint64_t *)(a1 + v9);
  *v4 = v10;
  v4[1] = v11;
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v15 = a3[7];
  if ((*(_QWORD *)(a2 + v15 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + v15);
    v8 = *(_QWORD *)(a2 + v15 + 8);
    outlined copy of Data._Representation(v7, v8);
    v5 = (uint64_t *)(a1 + v15);
    *v5 = v7;
    v5[1] = v8;
  }
  return a1;
}

uint64_t assignWithCopy for CompleteFetchMetaDataRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v22;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v16 = a3[5];
  v17 = *(_QWORD *)(a2 + v16);
  v18 = *(_QWORD *)(a2 + v16 + 8);
  outlined copy of Data._Representation(v17, v18);
  v4 = (uint64_t *)(a1 + v16);
  v5 = *(_QWORD *)(a1 + v16);
  v6 = *(_QWORD *)(a1 + v16 + 8);
  *v4 = v17;
  v4[1] = v18;
  outlined consume of Data._Representation(v5, v6);
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v22 = a3[7];
  if ((*(_QWORD *)(a1 + v22 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(a2 + v22 + 8) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
    }
    else
    {
      v12 = *(_QWORD *)(a2 + v22);
      v13 = *(_QWORD *)(a2 + v22 + 8);
      outlined copy of Data._Representation(v12, v13);
      v10 = (uint64_t *)(a1 + v22);
      *v10 = v12;
      v10[1] = v13;
    }
  }
  else if ((*(_QWORD *)(a2 + v22 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + v22);
    *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  }
  else
  {
    v14 = *(_QWORD *)(a2 + v22);
    v15 = *(_QWORD *)(a2 + v22 + 8);
    outlined copy of Data._Representation(v14, v15);
    v7 = (uint64_t *)(a1 + v22);
    v8 = *(_QWORD *)(a1 + v22);
    v9 = *(_QWORD *)(a1 + v22 + 8);
    *v7 = v14;
    v7[1] = v15;
    outlined consume of Data._Representation(v8, v9);
  }
  return a1;
}

uint64_t initializeWithTake for CompleteFetchMetaDataRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for CompleteFetchMetaDataRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v18;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + a3[5]);
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + a3[5]);
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v18 = a3[7];
  if ((*(_QWORD *)(a1 + v18 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  }
  else if ((*(_QWORD *)(a2 + v18 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + v18);
    *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  }
  else
  {
    v10 = *(_QWORD *)(a2 + v18 + 8);
    v11 = (_QWORD *)(a1 + v18);
    v12 = *(_QWORD *)(a1 + v18);
    v13 = *(_QWORD *)(a1 + v18 + 8);
    *v11 = *(_QWORD *)(a2 + v18);
    v11[1] = v10;
    outlined consume of Data._Representation(v12, v13);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteFetchMetaDataRequest.Body()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D359660(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for CompleteFetchMetaDataRequest.Body()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D35975C(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 12)
  {
    v5 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v5 = 0;
    v5[1] = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for CompleteFetchMetaDataRequest.Body()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for CompleteFetchMetaDataRequest.Body.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteFetchMetaDataRequest.Body.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for CompleteFetchMetaDataRequest.Body.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteFetchMetaDataRequest.Body.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchMetaDataRequest.Body.CodingKeys()
{
  return &type metadata for CompleteFetchMetaDataRequest.Body.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteFetchMetaDataRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteFetchMetaDataRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteFetchMetaDataRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Body.CodingKeys and conformance CompleteFetchMetaDataRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteFetchMetaDataRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteFetchMetaDataRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteFetchMetaDataRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys and conformance CompleteFetchMetaDataRequest.Response.MetaDataBlob.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in InitFetchMetaDataRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in InitFetchMetaDataRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in InitFetchMetaDataRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitFetchMetaDataRequest.Response.CodingKeys and conformance InitFetchMetaDataRequest.Response.CodingKeys();
}

int *GroupUpdater.MembershipUpdateResponse.init(group:invitations:groupBlob:finalizedAddedList:finalizedRemovedList:finalizedUpdatedList:managedMembers:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  int *result;
  int *updated;

  *a8 = a1;
  a8[1] = a2;
  updated = (int *)type metadata accessor for GroupUpdater.MembershipUpdateResponse();
  outlined init with take of GKCrypto_GroupBlob(a3, (uint64_t)a8 + updated[6]);
  result = updated;
  *(_QWORD *)((char *)a8 + updated[7]) = a4;
  *(_QWORD *)((char *)a8 + updated[8]) = a5;
  *(_QWORD *)((char *)a8 + updated[9]) = a6;
  *(_QWORD *)((char *)a8 + updated[10]) = a7;
  return result;
}

uint64_t GroupUpdater.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Client(v1, a1);
}

uint64_t GroupUpdater.userStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserStore(v1 + 40, a1);
}

uint64_t GroupUpdater.groupStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupStore(v1 + 80, a1);
}

uint64_t outlined init with copy of GroupStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t GroupUpdater.metadataStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MetadataStore(v1 + 120, a1);
}

uint64_t outlined init with copy of MetadataStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

_QWORD *GroupUpdater.groupService.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupService((_QWORD *)(v1 + 160), a1);
}

_QWORD *outlined init with copy of GroupService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  v2 = a1[3];
  a2[3] = v2;
  a2[4] = a1[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a1[8];
  a2[8] = v3;
  a2[9] = a1[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 5), (uint64_t)(a1 + 5));
  v4 = a1[13];
  a2[13] = v4;
  a2[14] = a1[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a2 + 10), (uint64_t)(a1 + 10));
  v5 = a1[18];
  a2[18] = v5;
  a2[19] = a1[19];
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a2 + 15), (uint64_t)(a1 + 15));
  v8 = a1[20];
  swift_unknownObjectRetain();
  v6 = a1[21];
  a2[20] = v8;
  a2[21] = v6;
  v10 = a1[22];
  v11 = a1[23];
  outlined copy of Data._Representation(v10, v11);
  result = a2;
  a2[22] = v10;
  a2[23] = v11;
  return result;
}

_QWORD *GroupUpdater.metadataService.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MetadataService((_QWORD *)(v1 + 352), a1);
}

_QWORD *outlined init with copy of MetadataService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = a1[3];
  a2[3] = v2;
  a2[4] = a1[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a1[8];
  a2[8] = v3;
  a2[9] = a1[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 5), (uint64_t)(a1 + 5));
  v7 = a1[10];
  swift_unknownObjectRetain();
  v4 = a1[11];
  a2[10] = v7;
  a2[11] = v4;
  v5 = a1[15];
  a2[15] = v5;
  a2[16] = a1[16];
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a2 + 12), (uint64_t)(a1 + 12));
  return a2;
}

uint64_t GroupUpdater.userLookup.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserLookupManager(v1 + 488, a1);
}

uint64_t outlined init with copy of UserLookupManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t GroupUpdater.accountManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DaemonAccountManagerProtocol(v1 + 528, a1);
}

uint64_t outlined init with copy of DaemonAccountManagerProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t GroupUpdater.peerMessagingService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PeerMessagingServiceProviding(v1 + 568, a1);
}

uint64_t outlined init with copy of PeerMessagingServiceProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t GroupUpdater.broadcaster.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 608);
  swift_retain();
  return v2;
}

uint64_t GroupUpdater.metrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Metrics(v1 + 616, a1);
}

uint64_t outlined init with copy of Metrics(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(void))(v2 - 8))();
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 64) = v3;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2 + 40, a1 + 40);
  if (*(_QWORD *)(a1 + 104))
  {
    v4 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 104) = v4;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a1 + 112);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2 + 80, a1 + 80);
  }
  else
  {
    memcpy((void *)(a2 + 80), (const void *)(a1 + 80), 0x28uLL);
  }
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(a2 + 136) = *(_BYTE *)(a1 + 136);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 152);
  v6 = *(_QWORD *)(a1 + 160);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 160) = v6;
  *(_QWORD *)(a2 + 168) = *(_QWORD *)(a1 + 168);
  v7 = *(_QWORD *)(a1 + 176);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 176) = v7;
  *(_QWORD *)(a2 + 184) = *(_QWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 192);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(a2 + 192) = v8;
  *(_WORD *)(a2 + 200) = *(_WORD *)(a1 + 200);
  return result;
}

uint64_t GroupUpdater.cryptoService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptographyServiceProviding(v1 + 824, a1);
}

uint64_t outlined init with copy of CryptographyServiceProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t GroupUpdater.updateGroup(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[141] = v1;
  v2[140] = a1;
  v2[136] = v2;
  v2[137] = 0;
  v2[138] = 0;
  v2[137] = a1;
  v2[138] = v1;
  return swift_task_switch();
}

uint64_t GroupUpdater.updateGroup(with:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = v0[141];
  v5 = v0[140];
  v0[136] = v0;
  outlined init with copy of Metrics(v4 + 616, (uint64_t)(v0 + 110));
  outlined init with copy of GroupUpdater(v4, (uint64_t)(v0 + 2));
  swift_retain();
  v7 = swift_task_alloc();
  v0[142] = v7;
  *(_QWORD *)(v7 + 16) = v0 + 2;
  *(_QWORD *)(v7 + 24) = v5;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 1144) = v1;
  v2 = type metadata accessor for GPKGroup();
  *v1 = *(_QWORD *)(v6 + 1088);
  v1[1] = GroupUpdater.updateGroup(with:);
  return Metrics.callAsFunction<A>(_:worker:)(v6 + 1112, 1, (uint64_t)&async function pointer to partial apply for closure #1 in GroupUpdater.updateGroup(with:), v7, v2, (uint64_t)&protocol witness table for GPKGroup);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v2 = *v1;
  v4 = *v1 + 880;
  v5 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 1088) = *v1;
  *(_QWORD *)(v2 + 1152) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    outlined destroy of GroupUpdater(v5);
    swift_release();
    outlined destroy of Metrics(v4);
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 1088) = v0;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 1088) + 8))(*(_QWORD *)(v0 + 1112));
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 1088) = v0;
  swift_task_dealloc();
  outlined destroy of GroupUpdater((_QWORD *)(v0 + 16));
  swift_release();
  outlined destroy of Metrics(v0 + 880);
  return (*(uint64_t (**)())(*(_QWORD *)(v2 + 1088) + 8))();
}

uint64_t closure #1 in GroupUpdater.updateGroup(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[7] = a3;
  v3[6] = a2;
  v3[5] = a1;
  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v4 = type metadata accessor for LogSubsystem();
  v3[8] = v4;
  v3[9] = *(_QWORD *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[3] = a2;
  v3[4] = a3;
  return swift_task_switch();
}

uint64_t closure #1 in GroupUpdater.updateGroup(with:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = v0[10];
  v3 = v0[9];
  v5 = v0[8];
  v0[2] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Begin processing group update request", 0x33uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v4);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = (_QWORD *)swift_task_alloc();
  v6[11] = v1;
  *v1 = v6[2];
  v1[1] = closure #1 in GroupUpdater.updateGroup(with:);
  return GroupUpdater._updateGroup(with:)(v6[7]);
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[12];
  v2 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v2 = v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

_QWORD *closure #1 in GroupUpdater.updateGroup(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 96) = a1;
  swift_task_dealloc();
  if (!v1)
    return (_QWORD *)swift_task_switch();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
}

uint64_t outlined init with copy of GroupUpdater(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(void))(v2 - 8))();
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 64) = v3;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2 + 40, a1 + 40);
  v4 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 104) = v4;
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a1 + 112);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2 + 80, a1 + 80);
  v5 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a2 + 144) = v5;
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 152);
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a2 + 120, a1 + 120);
  v6 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 184) = v6;
  *(_QWORD *)(a2 + 192) = *(_QWORD *)(a1 + 192);
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a2 + 160, a1 + 160);
  v7 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a2 + 224) = v7;
  *(_QWORD *)(a2 + 232) = *(_QWORD *)(a1 + 232);
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a2 + 200, a1 + 200);
  v8 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a2 + 264) = v8;
  *(_QWORD *)(a2 + 272) = *(_QWORD *)(a1 + 272);
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a2 + 240, a1 + 240);
  v9 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a2 + 304) = v9;
  *(_QWORD *)(a2 + 312) = *(_QWORD *)(a1 + 312);
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a2 + 280, a1 + 280);
  v26 = *(_QWORD *)(a1 + 320);
  swift_unknownObjectRetain();
  v10 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a2 + 320) = v26;
  *(_QWORD *)(a2 + 328) = v10;
  v27 = *(_QWORD *)(a1 + 336);
  v28 = *(_QWORD *)(a1 + 344);
  outlined copy of Data._Representation(v27, v28);
  *(_QWORD *)(a2 + 336) = v27;
  *(_QWORD *)(a2 + 344) = v28;
  v11 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a2 + 376) = v11;
  *(_QWORD *)(a2 + 384) = *(_QWORD *)(a1 + 384);
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a2 + 352, a1 + 352);
  v12 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(a2 + 416) = v12;
  *(_QWORD *)(a2 + 424) = *(_QWORD *)(a1 + 424);
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a2 + 392, a1 + 392);
  v29 = *(_QWORD *)(a1 + 432);
  swift_unknownObjectRetain();
  v13 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a2 + 432) = v29;
  *(_QWORD *)(a2 + 440) = v13;
  v14 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a2 + 472) = v14;
  *(_QWORD *)(a2 + 480) = *(_QWORD *)(a1 + 480);
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a2 + 448, a1 + 448);
  v15 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a2 + 512) = v15;
  *(_QWORD *)(a2 + 520) = *(_QWORD *)(a1 + 520);
  (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a2 + 488, a1 + 488);
  v16 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a2 + 552) = v16;
  *(_QWORD *)(a2 + 560) = *(_QWORD *)(a1 + 560);
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a2 + 528, a1 + 528);
  v17 = *(_QWORD *)(a1 + 592);
  *(_QWORD *)(a2 + 592) = v17;
  *(_QWORD *)(a2 + 600) = *(_QWORD *)(a1 + 600);
  (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a2 + 568, a1 + 568);
  v30 = *(_QWORD *)(a1 + 608);
  swift_retain();
  *(_QWORD *)(a2 + 608) = v30;
  v18 = *(_QWORD *)(a1 + 640);
  *(_QWORD *)(a2 + 640) = v18;
  *(_QWORD *)(a2 + 648) = *(_QWORD *)(a1 + 648);
  (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a2 + 616, a1 + 616);
  v19 = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(a2 + 680) = v19;
  *(_QWORD *)(a2 + 688) = *(_QWORD *)(a1 + 688);
  (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a2 + 656, a1 + 656);
  if (*(_QWORD *)(a1 + 720))
  {
    v20 = *(_QWORD *)(a1 + 720);
    *(_QWORD *)(a2 + 720) = v20;
    *(_QWORD *)(a2 + 728) = *(_QWORD *)(a1 + 728);
    (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a2 + 696, a1 + 696);
  }
  else
  {
    memcpy((void *)(a2 + 696), (const void *)(a1 + 696), 0x28uLL);
  }
  *(_QWORD *)(a2 + 736) = *(_QWORD *)(a1 + 736);
  *(_QWORD *)(a2 + 744) = *(_QWORD *)(a1 + 744);
  *(_BYTE *)(a2 + 752) = *(_BYTE *)(a1 + 752);
  *(_QWORD *)(a2 + 760) = *(_QWORD *)(a1 + 760);
  *(_QWORD *)(a2 + 768) = *(_QWORD *)(a1 + 768);
  v23 = *(_QWORD *)(a1 + 776);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 776) = v23;
  *(_QWORD *)(a2 + 784) = *(_QWORD *)(a1 + 784);
  v24 = *(_QWORD *)(a1 + 792);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 792) = v24;
  *(_QWORD *)(a2 + 800) = *(_QWORD *)(a1 + 800);
  v25 = *(_QWORD *)(a1 + 808);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 808) = v25;
  *(_WORD *)(a2 + 816) = *(_WORD *)(a1 + 816);
  v21 = *(_QWORD *)(a1 + 848);
  *(_QWORD *)(a2 + 848) = v21;
  *(_QWORD *)(a2 + 856) = *(_QWORD *)(a1 + 856);
  (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a2 + 824, a1 + 824);
  return a2;
}

uint64_t partial apply for closure #1 in GroupUpdater.updateGroup(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in GroupUpdater.updateGroup(with:);
  return closure #1 in GroupUpdater.updateGroup(with:)(a1, v5, v6);
}

uint64_t partial apply for closure #1 in GroupUpdater.updateGroup(with:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

_QWORD *outlined destroy of GroupUpdater(_QWORD *a1)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 10));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 15));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 20));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 25));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 30));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 35));
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(a1[42], a1[43]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 44));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 49));
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 56));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 61));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 66));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 71));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 77));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 82));
  if (a1[90])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 87));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 103));
  return a1;
}

uint64_t outlined destroy of Metrics(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  if (*(_QWORD *)(a1 + 104))
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t GroupUpdater._updateGroup(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 800) = v1;
  *(_QWORD *)(v2 + 792) = a1;
  *(_QWORD *)(v2 + 712) = v2;
  *(_QWORD *)(v2 + 720) = 0;
  *(_QWORD *)(v2 + 728) = 0;
  *(_QWORD *)(v2 + 736) = 0;
  *(_QWORD *)(v2 + 504) = 0;
  *(_QWORD *)(v2 + 512) = 0;
  *(_BYTE *)(v2 + 1224) = 0;
  *(_BYTE *)(v2 + 1232) = 0;
  *(_BYTE *)(v2 + 1240) = 0;
  *(_BYTE *)(v2 + 1248) = 0;
  *(_QWORD *)(v2 + 744) = 0;
  *(_QWORD *)(v2 + 664) = 0;
  *(_QWORD *)(v2 + 672) = 0;
  *(_QWORD *)(v2 + 760) = 0;
  *(_QWORD *)(v2 + 768) = 0;
  memset((void *)(v2 + 16), 0, 0x60uLL);
  *(_QWORD *)(v2 + 784) = 0;
  *(_QWORD *)(v2 + 808) = type metadata accessor for GroupUpdater.MembershipUpdateResponse();
  *(_QWORD *)(v2 + 816) = swift_task_alloc();
  v3 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v2 + 824) = v3;
  *(_QWORD *)(v2 + 832) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 840) = swift_task_alloc();
  v4 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v2 + 848) = v4;
  *(_QWORD *)(v2 + 856) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 864) = swift_task_alloc();
  v5 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v2 + 872) = v5;
  *(_QWORD *)(v2 + 880) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 888) = swift_task_alloc();
  *(_QWORD *)(v2 + 896) = swift_task_alloc();
  *(_QWORD *)(v2 + 904) = swift_task_alloc();
  *(_QWORD *)(v2 + 912) = swift_task_alloc();
  *(_QWORD *)(v2 + 720) = a1;
  *(_QWORD *)(v2 + 728) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v8;

  v3 = (_QWORD *)*v2;
  v8 = (_QWORD *)(*v2 + 16);
  v3[89] = *v2;
  v3[116] = a1;
  v3[117] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = v8[112];
    v5 = v8[107];
    v6 = *(void (**)(uint64_t, uint64_t))(v8[108] + 8);
    v8[116] = v6;
    v6(v4, v5);
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[89] = *v2;
  v3[128] = a1;
  v3[129] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v5 = *v2 + 16;
  v3[89] = *v2;
  v3[135] = a1;
  v3[136] = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5 + 928))(*(_QWORD *)(v5 + 888), *(_QWORD *)(v5 + 856));
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v5 = *v2 + 16;
  v3[89] = *v2;
  v3[145] = a1;
  v3[146] = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5 + 928))(*(_QWORD *)(v5 + 872), *(_QWORD *)(v5 + 856));
  return swift_task_switch();
}

uint64_t GroupUpdater._updateGroup(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  v1 = v0[100];
  v0[89] = v0;
  outlined init with copy of GroupStore(v1 + 80, (uint64_t)(v0 + 14));
  v5 = v0[17];
  v6 = v0[18];
  __swift_project_boxed_opaque_existential_1(v0 + 14, v5);
  GPKUpdateGroupRequest.groupID.getter();
  v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 16) + **(int **)(v6 + 16));
  v2 = (_QWORD *)swift_task_alloc();
  v4[115] = v2;
  *v2 = v4[89];
  v2[1] = GroupUpdater._updateGroup(with:);
  return v7(v4[114], v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v7;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v1 = *(_QWORD *)(v0 + 928);
  *(_QWORD *)(v0 + 712) = v0;
  if (!v1)
  {
    v42 = *(void (**)(uint64_t, uint64_t))(v99 + 944);
    v43 = *(_QWORD *)(v99 + 896);
    v44 = *(_QWORD *)(v99 + 872);
    v37 = *(_QWORD *)(v99 + 864);
    v36 = *(_QWORD *)(v99 + 856);
    v38 = *(_QWORD *)(v99 + 848);
    v46 = *(_QWORD *)(v99 + 840);
    v39 = *(_QWORD *)(v99 + 832);
    v40 = *(_QWORD *)(v99 + 824);
    __swift_destroy_boxed_opaque_existential_1(v99 + 112);
    *(_QWORD *)(v99 + 472) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v99 + 480) = v26;
    v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Couldn't find a group with id: ", 0x1FuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v27);
    swift_bridgeObjectRelease();
    GPKUpdateGroupRequest.groupID.getter();
    v34 = GPKGroupID.hexString.getter();
    v35 = v28;
    v42(v43, v44);
    *(_QWORD *)(v99 + 488) = v34;
    *(_QWORD *)(v99 + 496) = v35;
    v45 = MEMORY[0x24BEE0D00];
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" in local storage", 0x11uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v37);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v39 + 104))(v46, *MEMORY[0x24BE3DCF8], v40);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
    _allocateUninitializedArray<A>(_:)();
    v41 = v30;
    *v30 = static InternalErrorKey.groupID.getter();
    v41[1] = v31;
    GPKUpdateGroupRequest.groupID.getter();
    v32 = GPKGroupID.hexString.getter();
    v41[5] = v45;
    v41[2] = v32;
    v41[3] = v33;
    v42(v43, v44);
    _finalizeUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    goto LABEL_18;
  }
  v96 = *(_QWORD *)(v99 + 928);
  v2 = *(_QWORD *)(v99 + 936);
  v95 = *(_QWORD *)(v99 + 792);
  *(_QWORD *)(v99 + 736) = v96;
  __swift_destroy_boxed_opaque_existential_1(v99 + 112);
  v97 = GroupUpdater.clientBundleID(for:existingGroup:)(v95, v96);
  v98 = v3;
  *(_QWORD *)(v99 + 952) = v3;
  if (v2)
  {
    swift_release();
    goto LABEL_18;
  }
  *(_QWORD *)(v99 + 504) = v97;
  *(_QWORD *)(v99 + 512) = v3;
  dispatch thunk of GPKGroup.groupDomain.getter();
  v94 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  if ((v94 & 1) == 0)
  {
    v59 = *(_QWORD *)(v99 + 864);
    v47 = *(_QWORD *)(v99 + 856);
    v60 = *(_QWORD *)(v99 + 848);
    v64 = *(_QWORD *)(v99 + 840);
    v62 = *(_QWORD *)(v99 + 832);
    v63 = *(_QWORD *)(v99 + 824);
    v52 = *(_QWORD *)(v99 + 800);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting update the group with invalid group domain", 0x35uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v59);
    gpklog(_:type:fileID:line:subsystem:)();
    v61 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v61(v59, v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v99 + 520) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v99 + 528) = v11;
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group is created with with domain ", 0x22uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v99 + 536) = dispatch thunk of GPKGroup.groupDomain.getter();
    *(_QWORD *)(v99 + 544) = v13;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", but attempting update with the domain ", 0x28uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v99 + 552) = v97;
    *(_QWORD *)(v99 + 560) = v98;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.debug.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v59);
    gpklog(_:type:fileID:line:subsystem:)();
    v61(v59, v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v99 + 568) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v99 + 576) = v16;
    v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Domain from request: ", 0x15uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v17);
    swift_bridgeObjectRelease();
    v48 = dispatch thunk of GPKUpdateGroupRequest.groupDomain.getter();
    v49 = v18;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v99 + 584) = v48;
    *(_QWORD *)(v99 + 592) = v49;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v50 = Optional.logInfo.getter();
    v51 = v19;
    outlined destroy of String?();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v99 + 600) = v50;
    *(_QWORD *)(v99 + 608) = v51;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.debug.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v59);
    gpklog(_:type:fileID:line:subsystem:)();
    v61(v59, v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v99 + 616) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v99 + 624) = v21;
    v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Domain from client process: ", 0x1CuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v22);
    swift_bridgeObjectRelease();
    outlined init with copy of Client(v52, v99 + 152);
    v54 = *(_QWORD *)(v99 + 176);
    v53 = *(_QWORD *)(v99 + 184);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v99 + 152), v54);
    v55 = (*(uint64_t (**)(uint64_t))(v53 + 8))(v54);
    v56 = v23;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v99 + 632) = v55;
    *(_QWORD *)(v99 + 640) = v56;
    v57 = Optional.logInfo.getter();
    v58 = v24;
    outlined destroy of String?();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v99 + 648) = v57;
    *(_QWORD *)(v99 + 656) = v58;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    __swift_destroy_boxed_opaque_existential_1(v99 + 152);
    v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.debug.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v59);
    gpklog(_:type:fileID:line:subsystem:)();
    v61(v59, v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v62 + 104))(v64, *MEMORY[0x24BE3DCA0], v63);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_18;
  }
  v93 = GroupUpdater.hasMembershipUpdate(in:existingGroup:)();
  *(_BYTE *)(v99 + 1224) = v93 & 1;
  dispatch thunk of GPKUpdateGroupRequest.groupMetadata.getter();
  v91 = Dictionary<>.hashValue.getter();
  swift_bridgeObjectRelease();
  dispatch thunk of GPKGroup.metaData.getter();
  v90 = Dictionary<>.hashValue.getter();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v99 + 1232) = v91 != v90;
  v92 = GroupUpdater.hasMemberMetadataUpdate(in:existingGroup:)();
  *(_BYTE *)(v99 + 1240) = v92 & 1;
  v4 = GroupUpdater.hasManagedMemberUpdate(in:)();
  *(_BYTE *)(v99 + 1248) = v4 & 1;
  if ((v93 & 1) == 0 && v91 == v90 && (v92 & 1) == 0 && (v4 & 1) == 0)
  {
    v66 = *(_QWORD *)(v99 + 864);
    v65 = *(_QWORD *)(v99 + 856);
    v67 = *(_QWORD *)(v99 + 848);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Update Group: No changes found to update, returning the existing group", 0x4AuLL, 0);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v66);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v99 + 712) + 8))(v96);
  }
  outlined init with copy of UserStore(*(_QWORD *)(v99 + 800) + 40, v99 + 192);
  v88 = *(_QWORD *)(v99 + 216);
  v87 = *(_QWORD *)(v99 + 224);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v99 + 192), v88);
  v89 = (*(uint64_t (**)(uint64_t))(v87 + 40))(v88);
  *(_QWORD *)(v99 + 960) = v89;
  v82 = *(_QWORD *)(v99 + 800);
  *(_QWORD *)(v99 + 744) = v89;
  __swift_destroy_boxed_opaque_existential_1(v99 + 192);
  outlined init with copy of DaemonAccountManagerProtocol(v82 + 528, v99 + 232);
  v84 = *(_QWORD *)(v99 + 256);
  v83 = *(_QWORD *)(v99 + 264);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v99 + 232), v84);
  v85 = (*(uint64_t (**)(uint64_t))(v83 + 24))(v84);
  v86 = v5;
  *(_QWORD *)(v99 + 968) = v85;
  *(_QWORD *)(v99 + 976) = v5;
  *(_QWORD *)(v99 + 664) = v85;
  *(_QWORD *)(v99 + 672) = v5;
  __swift_destroy_boxed_opaque_existential_1(v99 + 232);
  *(_QWORD *)(v99 + 752) = GPKUser.handles.getter();
  *(_QWORD *)(v99 + 680) = v85;
  *(_QWORD *)(v99 + 688) = v86;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v81 = Sequence<>.contains(_:)();
  outlined destroy of [String]();
  if ((v81 & 1) == 0)
  {
    v76 = *(_QWORD *)(v99 + 864);
    v75 = *(_QWORD *)(v99 + 856);
    v77 = *(_QWORD *)(v99 + 848);
    v80 = *(_QWORD *)(v99 + 840);
    v78 = *(_QWORD *)(v99 + 832);
    v79 = *(_QWORD *)(v99 + 824);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Couldn't find me-user handle", 0x2AuLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v76);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v76, v77);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v78 + 104))(v80, *MEMORY[0x24BE3DDA0], v79);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(*(_QWORD *)(v99 + 712) + 8))();
  }
  if ((v93 & 1) != 0)
  {
    v72 = *(_QWORD *)(v99 + 864);
    v71 = *(_QWORD *)(v99 + 856);
    v73 = *(_QWORD *)(v99 + 848);
    v74 = *(_QWORD *)(v99 + 792);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Request has membership changes", 0x2CuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v72);
    gpklog(_:type:fileID:line:subsystem:)();
    v6 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
    *(_QWORD *)(v99 + 984) = v6;
    v6(v72, v73);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    GroupUpdater.validateMembershipUpdatePrevilege(_:existingGroup:meUser:)(v74, v96, v89);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v99 + 992) = v7;
    *v7 = *(_QWORD *)(v99 + 712);
    v7[1] = GroupUpdater._updateGroup(with:);
    return GroupUpdater.updateGroupMembership(with:group:bundleIdentifier:)(*(_QWORD *)(v99 + 816), *(_QWORD *)(v99 + 792), v96, v97, v98);
  }
  else
  {
    v69 = *(_QWORD *)(v99 + 864);
    v68 = *(_QWORD *)(v99 + 856);
    v70 = *(_QWORD *)(v99 + 848);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Request has group metadata changes", 0x30uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v69);
    gpklog(_:type:fileID:line:subsystem:)();
    v9 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
    *(_QWORD *)(v99 + 1128) = v9;
    v9(v69, v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v99 + 1136) = v10;
    *v10 = *(_QWORD *)(v99 + 712);
    v10[1] = GroupUpdater._updateGroup(with:);
    return GroupUpdater.updateMetadata(from:group:unresolvedManagedMembers:)(*(_QWORD *)(v99 + 792), v96, 0);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 712) = *v1;
  *(_QWORD *)(v2 + 1000) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 816);
  *(_QWORD *)(v0 + 712) = v0;
  v16 = *(_QWORD *)(v1 + 8);
  swift_bridgeObjectRetain();
  v15 = type metadata accessor for GPKUserID();
  v2 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v19 = MEMORY[0x2426347F0](v16, v15, MEMORY[0x24BDCDDE8], v2);
  swift_bridgeObjectRelease();
  v17 = dispatch thunk of GPKUpdateGroupRequest.addedMembers.getter();
  v3 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v18 = MEMORY[0x2426347F0](v17, MEMORY[0x24BEE0D00], v3, MEMORY[0x24BEE0D10]);
  swift_bridgeObjectRelease();
  if (v19 < v18)
  {
    v13 = (void (*)(uint64_t, uint64_t))v14[123];
    v11 = v14[108];
    v12 = v14[106];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation blob is not generated for all new members", 0x34uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
    gpklog(_:type:fileID:line:subsystem:)();
    v13(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v6 = (uint64_t *)v14[102];
  outlined init with copy of GroupStore(v14[100] + 80, (uint64_t)(v14 + 49));
  v7 = v14[52];
  v8 = v14[53];
  __swift_project_boxed_opaque_existential_1(v14 + 49, v7);
  v10 = *v6;
  v14[126] = *v6;
  swift_retain();
  v9 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 + 48) + **(int **)(v8 + 48));
  v4 = (_QWORD *)swift_task_alloc();
  v14[127] = v4;
  *v4 = v14[89];
  v4[1] = GroupUpdater._updateGroup(with:);
  return v9(v10, 0, 0, v7, v8);
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v9 = (void (*)(uint64_t, uint64_t))v0[123];
  v7 = v0[108];
  v8 = v0[106];
  v0[89] = v0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 49));
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Finally save the result to local database", 0x37uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[97] = 0;
  if ((GroupUpdater.hasManagedMemberUpdate(in:existingGroup:)() & 1) != 0)
  {
    v5 = *(_QWORD *)(v6[102] + *(int *)(v6[101] + 40));
    swift_bridgeObjectRetain();
    v6[97] = v5;
    swift_bridgeObjectRelease();
  }
  v3 = *(_QWORD *)v6[102];
  v6[130] = v3;
  swift_retain();
  v4 = v6[97];
  v6[131] = v4;
  swift_bridgeObjectRetain();
  v1 = (_QWORD *)swift_task_alloc();
  v6[132] = v1;
  *v1 = v6[89];
  v1[1] = GroupUpdater._updateGroup(with:);
  return GroupUpdater.updateMetadata(from:group:unresolvedManagedMembers:)(v6[99], v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 712) = *v1;
  *(_QWORD *)(v2 + 1064) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  v1 = v0[100];
  v0[89] = v0;
  outlined init with copy of GroupStore(v1 + 80, (uint64_t)(v0 + 54));
  v5 = v0[57];
  v6 = v0[58];
  __swift_project_boxed_opaque_existential_1(v0 + 54, v5);
  swift_retain();
  dispatch thunk of GPKGroup.groupID.getter();
  swift_release();
  v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 16) + **(int **)(v6 + 16));
  v2 = (_QWORD *)swift_task_alloc();
  v4[134] = v2;
  *v2 = v4[89];
  v2[1] = GroupUpdater._updateGroup(with:);
  return v7(v4[113], v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 1080);
  *(_QWORD *)(v0 + 712) = v0;
  if (v1)
  {
    v11 = v12[135];
    v12[98] = v11;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 54));
    swift_retain();
    swift_retain();
    v12[95] = v11;
    swift_release();
    v2 = (_QWORD *)swift_task_alloc();
    v12[137] = v2;
    *v2 = v12[89];
    v2[1] = GroupUpdater._updateGroup(with:);
    return GroupUpdater.sendInvitation(response:from:)(v12[102], v12[121], v12[122]);
  }
  else
  {
    v6 = (void (*)(uint64_t, uint64_t))v12[123];
    v4 = v12[108];
    v5 = v12[106];
    v9 = v12[105];
    v7 = v12[104];
    v8 = v12[103];
    v10 = v12[102];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 54));
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Couldn't find the group in store after the update", 0x3FuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v4);
    gpklog(_:type:fileID:line:subsystem:)();
    v6(v4, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BE3DCF8], v8);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    outlined destroy of [GPKMember]?();
    outlined destroy of GroupUpdater.MembershipUpdateResponse(v10);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(v12[89] + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 712) = *v1;
  *(_QWORD *)(v2 + 1104) = v0;
  swift_task_dealloc();
  if (v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v5 = (void (*)(uint64_t, uint64_t))v0[123];
  v3 = v0[108];
  v4 = v0[106];
  v0[89] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Send invitation to the new group members", 0x36uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
  gpklog(_:type:fileID:line:subsystem:)();
  v5(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = (_QWORD *)swift_task_alloc();
  v6[139] = v1;
  *v1 = v6[89];
  v1[1] = GroupUpdater._updateGroup(with:);
  return GroupUpdater.sendGroupMembershipUpdate(response:from:)(v6[102], v6[121], v6[122]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 712) = *v1;
  *(_QWORD *)(v2 + 1120) = v0;
  swift_task_dealloc();
  if (v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  Class isa;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;

  v29 = (void (*)(uint64_t, uint64_t))v0[123];
  v27 = v0[108];
  v28 = v0[106];
  v30 = v0[100];
  v0[89] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Send group membership update send to other group members", 0x46uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v27);
  gpklog(_:type:fileID:line:subsystem:)();
  v29(v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v30 + 608);
  swift_retain();
  if (v31)
  {
    ClientMessageBroadcaster.groupUpdated(_:)(*(_QWORD *)(v26 + 1080));
    swift_release();
  }
  swift_release();
  v17 = *(void (**)(uint64_t, uint64_t))(v26 + 984);
  v9 = *(void (**)(uint64_t, uint64_t))(v26 + 944);
  v10 = *(_QWORD *)(v26 + 896);
  v11 = *(_QWORD *)(v26 + 872);
  v15 = *(_QWORD *)(v26 + 864);
  v16 = *(_QWORD *)(v26 + 848);
  v18 = *(_QWORD *)(v26 + 816);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Group membership update sent to all subscribers", 0x3DuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v15);
  gpklog(_:type:fileID:line:subsystem:)();
  v17(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v13 = (id)static NSNotificationName.groupMembershipDidUpdate.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
  _allocateUninitializedArray<A>(_:)();
  v8 = v1;
  *(Swift::String *)(v26 + 696) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
  v7 = MEMORY[0x24BEE0D00];
  _convertToAnyHashable<A>(_:)();
  dispatch thunk of GPKGroup.groupID.getter();
  v2 = GPKGroupID.hexString.getter();
  v8[8] = v7;
  v8[5] = v2;
  v8[6] = v3;
  v9(v10, v11);
  _finalizeUninitializedArray<A>(_:)();
  outlined destroy of String();
  Dictionary.init(dictionaryLiteral:)();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_postNotificationName_object_userInfo_, v13, 0, isa);

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Group membership notification posted", 0x32uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v15);
  gpklog(_:type:fileID:line:subsystem:)();
  v17(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [GPKMember]?();
  outlined destroy of GroupUpdater.MembershipUpdateResponse(v18);
  v20 = *(_QWORD *)(v26 + 864);
  v19 = *(_QWORD *)(v26 + 856);
  v21 = *(_QWORD *)(v26 + 848);
  v22 = *(_QWORD *)(v26 + 800);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Update Group: Group updated successfully", 0x2CuLL, 0);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of Client(v22, v26 + 312);
  outlined init with copy of CryptographyServiceProviding(v22 + 824, v26 + 352);
  MemberIdentifierFetcher.init(client:cryptoService:)((const void *)(v26 + 312), (const void *)(v26 + 352), (_QWORD *)(v26 + 16));
  v25 = *(_QWORD *)(v26 + 760);
  *(_QWORD *)(v26 + 1192) = v25;
  swift_retain();
  v23 = dispatch thunk of GPKUpdateGroupRequest.serviceName.getter();
  v24 = v4;
  *(_QWORD *)(v26 + 1200) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v26 + 1208) = v5;
  *v5 = *(_QWORD *)(v26 + 712);
  v5[1] = GroupUpdater._updateGroup(with:);
  return MemberIdentifierFetcher.addStableMemberIdentifier(to:serviceName:)(v25, v23, v24);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 712) = *v1;
  *(_QWORD *)(v2 + 1144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  v1 = v0[100];
  v0[89] = v0;
  outlined init with copy of GroupStore(v1 + 80, (uint64_t)(v0 + 34));
  v5 = v0[37];
  v6 = v0[38];
  __swift_project_boxed_opaque_existential_1(v0 + 34, v5);
  dispatch thunk of GPKGroup.groupID.getter();
  v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 16) + **(int **)(v6 + 16));
  v2 = (_QWORD *)swift_task_alloc();
  v4[144] = v2;
  *v2 = v4[89];
  v2[1] = GroupUpdater._updateGroup(with:);
  return v7(v4[111], v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 1160);
  *(_QWORD *)(v0 + 712) = v0;
  if (v1)
  {
    v10 = v11[145];
    v11[96] = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v11 + 34));
    swift_retain();
    swift_retain();
    v11[95] = v10;
    swift_release();
    v2 = (_QWORD *)swift_task_alloc();
    v11[147] = v2;
    *v2 = v11[89];
    v2[1] = GroupUpdater._updateGroup(with:);
    return GroupUpdater.sendMetadataUpdate(group:from:)(v10, v11[121], v11[122]);
  }
  else
  {
    v6 = (void (*)(uint64_t, uint64_t))v11[141];
    v4 = v11[108];
    v5 = v11[106];
    v9 = v11[105];
    v7 = v11[104];
    v8 = v11[103];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v11 + 34));
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Coudn't find the group in store after the update", 0x3EuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v4);
    gpklog(_:type:fileID:line:subsystem:)();
    v6(v4, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BE3DCF8], v8);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(v11[89] + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 712) = *v1;
  *(_QWORD *)(v2 + 1184) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (void (*)(uint64_t, uint64_t))v0[141];
  v4 = v0[108];
  v5 = v0[106];
  v0[89] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Metadata update send to group members", 0x25uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v4);
  gpklog(_:type:fileID:line:subsystem:)();
  v6(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v0[108];
  v7 = v0[107];
  v9 = v0[106];
  v10 = v0[100];
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Update Group: Group updated successfully", 0x2CuLL, 0);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v8);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of Client(v10, (uint64_t)(v0 + 39));
  outlined init with copy of CryptographyServiceProviding(v10 + 824, (uint64_t)(v0 + 44));
  MemberIdentifierFetcher.init(client:cryptoService:)(v0 + 39, v0 + 44, v0 + 2);
  v14 = v0[95];
  v0[149] = v14;
  swift_retain();
  v12 = dispatch thunk of GPKUpdateGroupRequest.serviceName.getter();
  v13 = v1;
  v0[150] = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v11 + 1208) = v2;
  *v2 = *(_QWORD *)(v11 + 712);
  v2[1] = GroupUpdater._updateGroup(with:);
  return MemberIdentifierFetcher.addStableMemberIdentifier(to:serviceName:)(v14, v12, v13);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 712) = *v1;
  *(_QWORD *)(v2 + 1216) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 712) = v0;
  v2 = *(_QWORD *)(v0 + 760);
  swift_retain();
  outlined destroy of MemberIdentifierFetcher(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 712) + 8))(v2);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[114];
  v2 = v0[110];
  v3 = v0[109];
  v0[89] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 14));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[89] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 712) = v0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 712) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 816);
  *(_QWORD *)(v0 + 712) = v0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 392);
  outlined destroy of GroupUpdater.MembershipUpdateResponse(v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 712) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 816);
  *(_QWORD *)(v0 + 712) = v0;
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of [GPKMember]?();
  outlined destroy of GroupUpdater.MembershipUpdateResponse(v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 712) + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = (void (*)(uint64_t, uint64_t))v0[118];
  v2 = v0[113];
  v3 = v0[109];
  v5 = v0[102];
  v0[89] = v0;
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 54));
  outlined destroy of [GPKMember]?();
  outlined destroy of GroupUpdater.MembershipUpdateResponse(v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[89] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 816);
  *(_QWORD *)(v0 + 712) = v0;
  outlined destroy of [GPKMember]?();
  outlined destroy of GroupUpdater.MembershipUpdateResponse(v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 712) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 816);
  *(_QWORD *)(v0 + 712) = v0;
  outlined destroy of [GPKMember]?();
  outlined destroy of GroupUpdater.MembershipUpdateResponse(v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 712) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 712) = v0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 712) + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = (void (*)(uint64_t, uint64_t))v0[118];
  v2 = v0[111];
  v3 = v0[109];
  v0[89] = v0;
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 34));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[89] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 712) = v0;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 712) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 712) = v0;
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of MemberIdentifierFetcher(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 712) + 8))();
}

uint64_t type metadata accessor for GroupUpdater.MembershipUpdateResponse()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GroupUpdater.MembershipUpdateResponse;
  if (!type metadata singleton initialization cache for GroupUpdater.MembershipUpdateResponse)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GroupUpdater.clientBundleID(for:existingGroup:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  _BYTE v23[12];
  int v24;
  uint64_t countAndFlagsBits;
  int v26;
  Swift::String v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Builtin::Word v32;
  void *v33;
  void *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Builtin::Word v52;
  void *object;
  void *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  Swift::String v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104[8];
  uint64_t v105;
  uint64_t v106;
  char v107[8];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v81 = a1;
  v82 = a2;
  v112 = 0;
  v111 = 0;
  v110 = 0;
  v102 = 0;
  v103 = 0;
  v96 = 0;
  v97 = 0;
  v76 = 0;
  v77 = type metadata accessor for InternalErrorCode();
  v78 = *(_QWORD *)(v77 - 8);
  v79 = (*(_QWORD *)(v78 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v80 = &v23[-v79];
  v84 = type metadata accessor for LogSubsystem();
  v85 = *(_QWORD *)(v84 - 8);
  v86 = (*(_QWORD *)(v85 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v83);
  v87 = &v23[-v86];
  v112 = v2;
  v111 = v3;
  v110 = v4;
  v90 = v107;
  outlined init with copy of Client(v4, (uint64_t)v107);
  v89 = v108;
  v88 = v109;
  __swift_project_boxed_opaque_existential_1(v90, v108);
  v91 = (*(uint64_t (**)(uint64_t))(v88 + 24))(v89);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
  if ((v91 & 1) == 0)
  {
    v67 = dispatch thunk of GPKUpdateGroupRequest.groupDomain.getter();
    v68 = v7;
    if (v7)
    {
      v65 = v67;
      v66 = v68;
      v63 = v68;
      v64 = v67;
      v96 = v67;
      v97 = v68;
      v8 = String.isEmpty.getter();
      if ((v8 & 1) == 0)
      {
        v52 = 49;
        v9 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v55 = &v94;
        v94 = v9;
        v95 = v10;
        v58 = 1;
        v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Request contains group domain in update request: ", v52, 1);
        object = v11._object;
        DefaultStringInterpolation.appendLiteral(_:)(v11);
        swift_bridgeObjectRelease();
        v92 = v64;
        v93 = v63;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v58 & 1);
        v54 = v12._object;
        DefaultStringInterpolation.appendLiteral(_:)(v12);
        swift_bridgeObjectRelease();
        v57 = v94;
        v56 = v95;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        v59 = String.init(stringInterpolation:)();
        v62 = v13;
        v61 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v58 & 1);
        v60 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v87);
        gpklog(_:type:fileID:line:subsystem:)();
        (*(void (**)(_BYTE *, uint64_t))(v85 + 8))(v87, v84);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v74 = v64;
        v75 = v63;
        return v74;
      }
      swift_bridgeObjectRelease();
    }
    v47 = v104;
    outlined init with copy of Client(v83, (uint64_t)v104);
    v49 = v105;
    v48 = v106;
    __swift_project_boxed_opaque_existential_1(v47, v105);
    v50 = (*(uint64_t (**)(uint64_t))(v48 + 8))(v49);
    v51 = v14;
    if (v14)
    {
      v45 = v50;
      v46 = v51;
      v44 = v51;
      v43 = v50;
      v102 = v50;
      v103 = v51;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
      v15 = String.isEmpty.getter();
      if ((v15 & 1) == 0)
      {
        v32 = 37;
        v16 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v35 = &v100;
        v100 = v16;
        v101 = v17;
        v38 = 1;
        v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update request received from client: ", v32, 1);
        v33 = v18._object;
        DefaultStringInterpolation.appendLiteral(_:)(v18);
        swift_bridgeObjectRelease();
        v98 = v43;
        v99 = v44;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v38 & 1);
        v34 = v19._object;
        DefaultStringInterpolation.appendLiteral(_:)(v19);
        swift_bridgeObjectRelease();
        v37 = v100;
        v36 = v101;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        v39 = String.init(stringInterpolation:)();
        v42 = v20;
        v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v38 & 1);
        v40 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v87);
        gpklog(_:type:fileID:line:subsystem:)();
        (*(void (**)(_BYTE *, uint64_t))(v85 + 8))(v87, v84);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v74 = v43;
        v75 = v44;
        return v74;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
    }
    v24 = 1;
    v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Couldn't obtain bundle identifier from client", 0x2DuLL, 1);
    countAndFlagsBits = v21._countAndFlagsBits;
    v28 = v21._object;
    v26 = static os_log_type_t.error.getter();
    v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v24 & 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v87);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(_BYTE *, uint64_t))(v85 + 8))(v87, v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v78 + 104))(v80, *MEMORY[0x24BE3DE60], v77);
    v31 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    return v30;
  }
  v69 = 1;
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Internal client is updating the group", 0x25uLL, 1);
  v70 = v5._countAndFlagsBits;
  v73 = v5._object;
  v72 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v69 & 1);
  v71 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v87);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(_BYTE *, uint64_t))(v85 + 8))(v87, v84);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v74 = dispatch thunk of GPKGroup.groupDomain.getter();
  v75 = v6;
  return v74;
}

uint64_t GroupUpdater.hasMembershipUpdate(in:existingGroup:)()
{
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  dispatch thunk of GPKGroup.members.getter();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v8 = Sequence.contains(where:)();
  swift_release();
  outlined destroy of [GPKMember]();
  v6 = dispatch thunk of GPKUpdateGroupRequest.addedMembers.getter();
  v5 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v7 = MEMORY[0x24263482C](v6, MEMORY[0x24BEE0D00]);
  swift_bridgeObjectRelease();
  swift_retain();
  if ((v7 & 1) != 0)
  {
    v2 = dispatch thunk of GPKUpdateGroupRequest.removedMembers.getter();
    v3 = MEMORY[0x24263482C](v2, MEMORY[0x24BEE0D00], v5, MEMORY[0x24BEE0D10]);
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  else
  {
    v4 = 1;
  }
  swift_release();
  if ((v4 & 1) != 0)
    v1 = 1;
  else
    v1 = v8;
  return v1 & 1;
}

uint64_t GroupUpdater.hasMemberMetadataUpdate(in:existingGroup:)()
{
  char v1;

  dispatch thunk of GPKGroup.members.getter();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v1 = Sequence.contains(where:)();
  swift_release();
  outlined destroy of [GPKMember]();
  return v1 & 1;
}

uint64_t GroupUpdater.hasManagedMemberUpdate(in:)()
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v5 = dispatch thunk of GPKUpdateGroupRequest.updatedManagedMembers.getter();
  v4 = type metadata accessor for GPKMember();
  v6 = MEMORY[0x24263482C](v5, MEMORY[0x24BEE0D00]);
  swift_bridgeObjectRelease();
  swift_retain();
  if ((v6 & 1) != 0)
  {
    v1 = dispatch thunk of GPKUpdateGroupRequest.removedManagedMembers.getter();
    v2 = MEMORY[0x24263482C](v1, MEMORY[0x24BEE0D00], v4, MEMORY[0x24BEE0D10]);
    swift_bridgeObjectRelease();
    v3 = v2 ^ 1;
  }
  else
  {
    v3 = 1;
  }
  swift_release();
  return v3 & 1;
}

uint64_t *GroupUpdater.validateMembershipUpdatePrevilege(_:existingGroup:meUser:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t *result;
  Swift::String v13;
  Swift::String v14;
  _BYTE v15[4];
  int v16;
  uint64_t countAndFlagsBits;
  int v18;
  Swift::String v19;
  void *object;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  Swift::String v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  Swift::String v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  void (*v68)(_BYTE *, uint64_t);
  int v69;
  char v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v60 = a1;
  v48 = a2;
  v59 = a3;
  v4 = v3;
  v63 = v4;
  v77 = 0;
  v76 = 0;
  v75 = 0;
  v74 = 0;
  v54 = 0;
  v50 = type metadata accessor for InternalErrorCode();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v53 = &v15[-v52];
  v55 = type metadata accessor for LogSubsystem();
  v56 = *(_QWORD *)(v55 - 8);
  v57 = (*(_QWORD *)(v56 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v54);
  v58 = &v15[-v57];
  v67 = type metadata accessor for GPKGroup.JoinState();
  v64 = *(_QWORD *)(v67 - 8);
  v61 = (*(_QWORD *)(v64 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v60);
  v65 = &v15[-v61];
  v62 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v66 = &v15[-v62];
  v77 = v8;
  v76 = a2;
  v75 = v9;
  v74 = v63;
  dispatch thunk of GPKGroup.joinState.getter();
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v64 + 104))(v65, *MEMORY[0x24BE3E4A8], v67);
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v69 = == infix<A>(_:_:)();
  v68 = *(void (**)(_BYTE *, uint64_t))(v64 + 8);
  v68(v65, v67);
  v68(v66, v67);
  if ((v69 & 1) == 0)
  {
    v16 = 1;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting update a group before join the group.", 0x30uLL, 1);
    countAndFlagsBits = v14._countAndFlagsBits;
    object = v14._object;
    v18 = static os_log_type_t.error.getter();
    v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v16 & 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v58);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(_BYTE *, uint64_t))(v56 + 8))(v58, v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v51 + 104))(v53, *MEMORY[0x24BE3DC70], v50);
    v22 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    result = (uint64_t *)v22;
    v41 = v22;
    return result;
  }
  v47 = dispatch thunk of GPKGroup.meMember.getter();
  if (v47)
  {
    v46 = v47;
    v43 = v47;
    v44 = GPKMember.canModifyMembers.getter();
    swift_release();
    v45 = v44 & 1;
  }
  else
  {
    v45 = 2;
  }
  v72 = v45;
  v73 = 0;
  if (v45 != 2)
  {
    outlined init with copy of Bool?(&v72, &v70);
    if (v73 != 2)
    {
      v42 = (v70 & 1) == (v73 & 1);
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (v73 != 2)
  {
LABEL_12:
    v42 = 0;
    goto LABEL_10;
  }
  v42 = 1;
LABEL_10:
  if (v42)
  {
    v34 = 1;
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting update a group without admin privilege.", 0x32uLL, 1);
    v35 = v10._countAndFlagsBits;
    v38 = v10._object;
    v36 = static os_log_type_t.error.getter();
    v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v34 & 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v58);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(_BYTE *, uint64_t))(v56 + 8))(v58, v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v51 + 104))(v53, *MEMORY[0x24BE3DDB0], v50);
    v40 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    result = (uint64_t *)v40;
    v41 = v40;
  }
  else
  {
    v71 = dispatch thunk of GPKUpdateGroupRequest.removedMembers.getter();
    swift_retain();
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKUpdateGroupRequest.Member]);
    lazy protocol witness table accessor for type [String : GPKUpdateGroupRequest.Member] and conformance [A : B]();
    v11 = v49;
    result = (uint64_t *)Sequence.contains(where:)();
    v32 = v11;
    v33 = (int)result;
    if (v11)
    {
      __break(1u);
    }
    else
    {
      v30 = v33;
      swift_release();
      result = &v71;
      outlined destroy of [String : GPKUpdateGroupRequest.Member]();
      if ((v30 & 1) != 0)
      {
        v23 = 1;
        v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting remove me user from group.", 0x25uLL, 1);
        v24 = v13._countAndFlagsBits;
        v27 = v13._object;
        v25 = static os_log_type_t.error.getter();
        v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v23 & 1);
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v58);
        gpklog(_:type:fileID:line:subsystem:)();
        (*(void (**)(_BYTE *, uint64_t))(v56 + 8))(v58, v55);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v28 = 0;
        type metadata accessor for InternalError();
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v51 + 104))(v53, *MEMORY[0x24BE3DD50], v50);
        v29 = InternalError.__allocating_init(_:internalInfo:)();
        swift_willThrow();
        result = (uint64_t *)v29;
        v41 = v29;
      }
    }
  }
  return result;
}

uint64_t GroupUpdater.updateGroupMembership(with:group:bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 + 360) = v5;
  *(_QWORD *)(v6 + 352) = a5;
  *(_QWORD *)(v6 + 344) = a4;
  *(_QWORD *)(v6 + 336) = a3;
  *(_QWORD *)(v6 + 328) = a2;
  *(_QWORD *)(v6 + 320) = a1;
  *(_QWORD *)(v6 + 272) = v6;
  *(_QWORD *)(v6 + 280) = 0;
  *(_QWORD *)(v6 + 288) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  *(_QWORD *)(v6 + 296) = 0;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_QWORD *)(v6 + 312) = 0;
  *(_QWORD *)(v6 + 368) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (group: GPKGroup, invitations: [GPKUserID : Data], groupBlob: GKCrypto_GroupBlob));
  *(_QWORD *)(v6 + 376) = swift_task_alloc();
  *(_QWORD *)(v6 + 384) = swift_task_alloc();
  *(_QWORD *)(v6 + 392) = swift_task_alloc();
  *(_QWORD *)(v6 + 400) = swift_task_alloc();
  v7 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v6 + 408) = v7;
  *(_QWORD *)(v6 + 416) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 424) = swift_task_alloc();
  *(_QWORD *)(v6 + 280) = a2;
  *(_QWORD *)(v6 + 288) = a3;
  *(_QWORD *)(v6 + 240) = a4;
  *(_QWORD *)(v6 + 248) = a5;
  *(_QWORD *)(v6 + 296) = v5;
  return swift_task_switch();
}

uint64_t GroupUpdater.updateGroupMembership(with:group:bundleIdentifier:)()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = v0[53];
  v4 = v0[52];
  v6 = v0[51];
  v0[34] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Begin updating group membership", 0x2DuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  v1 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[54] = v1;
  v1(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (_QWORD *)swift_task_alloc();
  v7[55] = v2;
  *v2 = v7[34];
  v2[1] = GroupUpdater.updateGroupMembership(with:group:bundleIdentifier:);
  return GroupUpdater.resolvedMembers(request:group:)(v7[41], v7[42]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 456);
  v4 = *(_QWORD *)(v0 + 448);
  v11 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 360);
  *(_QWORD *)(v0 + 272) = v0;
  *(_QWORD *)(v0 + 208) = v4;
  *(_QWORD *)(v0 + 216) = v3;
  *(_QWORD *)(v0 + 224) = v2;
  *(_QWORD *)(v0 + 232) = v1;
  *(_DWORD *)(v0 + 512) = *(_DWORD *)(v5 + 64);
  v10 = *(int *)(v5 + 64);
  outlined init with copy of GroupService((_QWORD *)(v6 + 160), (_QWORD *)(v0 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  v9[60] = v7;
  *v7 = v9[34];
  v7[1] = GroupUpdater.updateGroupMembership(with:group:bundleIdentifier:);
  return GroupService.updateGroup(_:addMembers:removeMembers:updateRole:metaData:clientBundleIdentifier:)(v11 + v10, v9[42], v9[56], v9[57], v9[58], 0, v9[43], v9[44]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;

  v1 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 496);
  v24 = *(int *)(v0 + 512);
  v36 = *(_QWORD *)(v0 + 472);
  v35 = *(_QWORD *)(v0 + 464);
  v34 = *(_QWORD *)(v0 + 456);
  v33 = *(_QWORD *)(v0 + 448);
  v19 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
  v37 = *(_QWORD *)(v0 + 424);
  v18 = *(_QWORD *)(v0 + 408);
  v38 = *(uint64_t **)(v0 + 400);
  v39 = *(uint64_t **)(v0 + 392);
  v40 = *(uint64_t **)(v0 + 384);
  v41 = *(uint64_t **)(v0 + 376);
  v25 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD *)(v0 + 336);
  v27 = *(_QWORD **)(v0 + 320);
  *(_QWORD *)(v0 + 272) = v0;
  *v38 = v2;
  v38[1] = v1;
  *(_QWORD *)(v0 + 256) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 264) = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Changes updated in group service - new invitations count: ", 0x48uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  v9 = *(int *)(v25 + 64);
  v8 = *v38;
  swift_retain();
  *v39 = v8;
  outlined init with copy of [GPKUserID : Data](v38 + 1, v39 + 1);
  outlined init with copy of GKCrypto_GroupBlob((uint64_t)v38 + v24, (uint64_t)v39 + v9);
  v11 = v39[1];
  v13 = *(int *)(v25 + 64);
  v10 = type metadata accessor for GPKUserID();
  v5 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v12 = MEMORY[0x2426347F0](v11, v10, MEMORY[0x24BDCDDE8], v5);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 304) = v12;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of GKCrypto_GroupBlob((uint64_t)v39 + v13);
  swift_release();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v37);
  gpklog(_:type:fileID:line:subsystem:)();
  v19(v37, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = GroupUpdater.flattenedMemberList(group:added:removed:updated:)(v14, v33, v34, v35);
  *(_QWORD *)(v0 + 312) = v32;
  GPKGroup.setMembers(_:)((Swift::OpaquePointer)v32);
  v16 = *(int *)(v25 + 64);
  v15 = *v38;
  swift_retain();
  *v39 = v15;
  outlined init with copy of [GPKUserID : Data](v38 + 1, v39 + 1);
  outlined init with copy of GKCrypto_GroupBlob((uint64_t)v38 + v24, (uint64_t)v39 + v16);
  v17 = *(int *)(v25 + 64);
  dispatch thunk of GPKGroup.hasUnsavedGroupPropertyChanges.setter();
  swift_release();
  outlined destroy of GKCrypto_GroupBlob((uint64_t)v39 + v17);
  swift_bridgeObjectRelease();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Group membership updated successfully", 0x33uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v37);
  gpklog(_:type:fileID:line:subsystem:)();
  v19(v37, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = *(int *)(v25 + 64);
  v20 = *v38;
  swift_retain();
  *v39 = v20;
  outlined init with copy of [GPKUserID : Data](v38 + 1, v39 + 1);
  outlined init with copy of GKCrypto_GroupBlob((uint64_t)v38 + v24, (uint64_t)v39 + v21);
  v26 = *v39;
  v31 = *(int *)(v25 + 64);
  v22 = *v38;
  swift_retain();
  *v40 = v22;
  outlined init with copy of [GPKUserID : Data](v38 + 1, v40 + 1);
  outlined init with copy of GKCrypto_GroupBlob((uint64_t)v38 + v24, (uint64_t)v40 + v31);
  v28 = v40[1];
  v30 = *(int *)(v25 + 64);
  v23 = *v38;
  swift_retain();
  *v41 = v23;
  outlined init with copy of [GPKUserID : Data](v38 + 1, v41 + 1);
  outlined init with copy of GKCrypto_GroupBlob((uint64_t)v38 + v24, (uint64_t)v41 + v30);
  v29 = *(int *)(v25 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  GroupUpdater.MembershipUpdateResponse.init(group:invitations:groupBlob:finalizedAddedList:finalizedRemovedList:finalizedUpdatedList:managedMembers:)(v26, v28, (uint64_t)v41 + v29, v33, v34, v35, v36, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of GKCrypto_GroupBlob((uint64_t)v40 + v30);
  swift_release();
  outlined destroy of GKCrypto_GroupBlob((uint64_t)v39 + v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of (group: GPKGroup, invitations: [GPKUserID : Data], groupBlob: GKCrypto_GroupBlob)((uint64_t)v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 272) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 272) = v0;
  outlined destroy of GroupService(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 272) + 8))();
}

_QWORD *GroupUpdater.updateGroupMembership(with:group:bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v7 = (_QWORD *)*v5;
  v8 = (_QWORD *)(*v5 + 272);
  v7[34] = *v5;
  v7[56] = a1;
  v7[57] = a2;
  v7[58] = a3;
  v7[59] = a4;
  swift_task_dealloc();
  if (!v4)
    return (_QWORD *)swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v8 + 8))(v8);
}

uint64_t GroupUpdater.updateGroupMembership(with:group:bundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v6 = (_QWORD *)*v3;
  v5 = *v3 + 16;
  v6[34] = *v3;
  v6[61] = v2;
  v6[62] = a1;
  v6[63] = a2;
  swift_task_dealloc();
  if (!v2)
    outlined destroy of GroupService(v5);
  return swift_task_switch();
}

uint64_t GroupUpdater.hasManagedMemberUpdate(in:existingGroup:)()
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  type metadata accessor for GroupUpdater.MembershipUpdateResponse();
  swift_bridgeObjectRetain();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v4 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GroupUpdater.hasManagedMemberUpdate(in:existingGroup:), 0, v2, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v3);
  outlined destroy of [GPKMember]();
  dispatch thunk of GPKGroup.managedMembers.getter();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #2 in GroupUpdater.hasManagedMemberUpdate(in:existingGroup:), 0, v2, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v3);
  outlined destroy of [GPKMember]();
  v1 = static Array<A>.== infix(_:_:)() ^ 1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t GroupUpdater.updateMetadata(from:group:unresolvedManagedMembers:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[76] = v3;
  v4[75] = a3;
  v4[74] = a2;
  v4[73] = a1;
  v4[59] = v4;
  v4[60] = 0;
  v4[61] = 0;
  v4[62] = 0;
  v4[63] = 0;
  v4[64] = 0;
  v4[69] = 0;
  memset(v4 + 34, 0, 0x28uLL);
  memset(v4 + 39, 0, 0x28uLL);
  v4[57] = 0;
  v4[58] = 0;
  v4[72] = 0;
  v5 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v4[77] = v5;
  v4[78] = *(_QWORD *)(v5 - 8);
  v4[79] = swift_task_alloc();
  v4[80] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: GPKUpdateGroupRequest.Member)?);
  v4[81] = swift_task_alloc();
  v4[82] = swift_task_alloc();
  v4[83] = swift_task_alloc();
  v6 = type metadata accessor for GPKGroupID();
  v4[84] = v6;
  v4[85] = *(_QWORD *)(v6 - 8);
  v4[86] = swift_task_alloc();
  v4[87] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMetadata?);
  v4[88] = swift_task_alloc();
  v7 = type metadata accessor for GPKMetadata();
  v4[89] = v7;
  v4[90] = *(_QWORD *)(v7 - 8);
  v4[91] = swift_task_alloc();
  v4[92] = swift_task_alloc();
  v8 = type metadata accessor for LogSubsystem();
  v4[93] = v8;
  v4[94] = *(_QWORD *)(v8 - 8);
  v4[95] = swift_task_alloc();
  v4[60] = a1;
  v4[61] = a2;
  v4[62] = a3;
  v4[63] = v3;
  return swift_task_switch();
}

uint64_t GroupUpdater.updateMetadata(from:group:unresolvedManagedMembers:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v27 = v0[95];
  v26 = v0[94];
  v28 = v0[93];
  v30 = v0[74];
  v31 = v0[73];
  v0[59] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Begin updating metadata", 0x25uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v27);
  gpklog(_:type:fileID:line:subsystem:)();
  v29 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v0[96] = v29;
  v29(v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[64] = _allocateUninitializedArray<A>(_:)();
  v32 = GroupUpdater.groupMetadata(for:group:)(v31, v30);
  if (v32)
  {
    v25[72] = v32;
    swift_bridgeObjectRetain();
    v25[64] = v32;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v1 = v25[88];
  v2 = v25[75];
  v3 = v25[74];
  v4 = v25[73];
  v25[49] = 0;
  v25[50] = 0;
  GroupUpdater.managedMemberMetadata(for:group:unresolvedManagedMembers:)(v4, v3, v2, v1);
  if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(v25[90] + 48))(v25[88], 1, v25[89]) == 1)
  {
    outlined destroy of GPKMetadata?(v25[88]);
  }
  else
  {
    v23 = v25[92];
    v21 = v25[91];
    v22 = v25[90];
    v24 = v25[89];
    (*(void (**)(uint64_t, _QWORD))(v22 + 32))(v23, v25[88]);
    v25[49] = GPKMetadata.key.getter();
    v25[50] = v5;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v23, v24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
    Array.append(_:)();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
  }
  v17 = v25[95];
  v18 = v25[93];
  v14 = v25[89];
  v25[51] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v25[52] = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Metadata serialized - final count: ", 0x31uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  v15 = v25[64];
  swift_bridgeObjectRetain();
  v16 = MEMORY[0x242634AC0](v15, v14);
  swift_bridgeObjectRelease();
  v25[65] = v16;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v17);
  gpklog(_:type:fileID:line:subsystem:)();
  v29(v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v25[64];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25[66] = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
  lazy protocol witness table accessor for type [GPKMetadata] and conformance [A]();
  v20 = Collection.isEmpty.getter();
  outlined destroy of [GPKMetadata]();
  swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
  {
    v11 = v25[95];
    v12 = v25[93];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: No metadata changes to update to server", 0x35uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
    gpklog(_:type:fileID:line:subsystem:)();
    v29(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of String?();
    outlined destroy of [GPKMetadata]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v25[59] + 8))();
  }
  else
  {
    outlined init with copy of MetadataService((_QWORD *)(v25[76] + 352), v25 + 2);
    v13 = v25[64];
    v25[97] = v13;
    swift_bridgeObjectRetain();
    v9 = (_QWORD *)swift_task_alloc();
    v25[98] = v9;
    *v9 = v25[59];
    v9[1] = GroupUpdater.updateMetadata(from:group:unresolvedManagedMembers:);
    return MetadataService.updateMetaData(_:group:)(v13, v25[74]);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 472) = *v1;
  *(_QWORD *)(v2 + 792) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    outlined destroy of MetadataService(v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  unsigned int (*v21)(_OWORD *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;

  v43 = (void (*)(uint64_t, uint64_t))v0[96];
  v41 = v0[95];
  v42 = v0[93];
  v0[59] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Metadata successfully updated to server", 0x35uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v41);
  gpklog(_:type:fileID:line:subsystem:)();
  v43(v41, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v44 = v0[49];
  v45 = v0[50];
  swift_bridgeObjectRetain();
  if (v45)
  {
    v1 = v40[99];
    v37 = v40[87];
    v2 = v40[76];
    v40[57] = v44;
    v40[58] = v45;
    outlined init with copy of MetadataStore(v2 + 120, (uint64_t)(v40 + 44));
    v38 = v40[47];
    v39 = v40[48];
    __swift_project_boxed_opaque_existential_1(v40 + 44, v38);
    dispatch thunk of GPKGroup.groupID.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 40))(v44, v45, v37, v38);
    if (v1)
    {
      (*(void (**)(_QWORD, _QWORD))(v40[85] + 8))(v40[87], v40[84]);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v40 + 44));
      swift_bridgeObjectRelease();
      outlined destroy of String?();
      outlined destroy of [GPKMetadata]();
LABEL_21:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v40[59] + 8))();
    }
    v35 = (void (*)(uint64_t, uint64_t))v40[96];
    v33 = v40[95];
    v34 = v40[93];
    (*(void (**)(_QWORD, _QWORD))(v40[85] + 8))(v40[87], v40[84]);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v40 + 44));
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Old managed members cleared", 0x29uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v33);
    gpklog(_:type:fileID:line:subsystem:)();
    v35(v33, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 = 0;
  }
  else
  {
    v36 = v40[99];
  }
  v30 = v40[86];
  outlined init with copy of MetadataStore(v40[76] + 120, (uint64_t)(v40 + 29));
  v31 = v40[32];
  v32 = v40[33];
  __swift_project_boxed_opaque_existential_1(v40 + 29, v31);
  v29 = v40[64];
  swift_bridgeObjectRetain();
  dispatch thunk of GPKGroup.groupID.getter();
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v32 + 16))(v29, v30, 0, v31);
  if (v36)
  {
    (*(void (**)(_QWORD, _QWORD))(v40[85] + 8))(v40[86], v40[84]);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v40 + 29));
    outlined destroy of String?();
    outlined destroy of [GPKMetadata]();
    goto LABEL_21;
  }
  v24 = (void (*)(uint64_t, uint64_t))v40[96];
  v22 = v40[95];
  v23 = v40[93];
  (*(void (**)(_QWORD, _QWORD))(v40[85] + 8))(v40[86], v40[84]);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v40 + 29));
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Final metadata list stored", 0x28uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v22);
  gpklog(_:type:fileID:line:subsystem:)();
  v24(v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40[67] = dispatch thunk of GPKGroup.members.getter();
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, GPKMember));
  v3 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GroupUpdater.updateMetadata(from:group:unresolvedManagedMembers:), 0, v25, v26, MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v27);
  outlined destroy of [GPKMember]();
  v40[68] = v28;
  type metadata accessor for GPKMember();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(String, GPKMember)]);
  lazy protocol witness table accessor for type [(String, GPKMember)] and conformance [A]();
  v40[69] = Dictionary.init<A>(uniqueKeysWithValues:)();
  dispatch thunk of GPKUpdateGroupRequest.addedMembers.getter();
  Dictionary.makeIterator()();
  memcpy(v40 + 34, v40 + 24, 0x28uLL);
  while (1)
  {
    v19 = (_OWORD *)v40[83];
    v18 = (_OWORD *)v40[82];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKUpdateGroupRequest.Member].Iterator);
    Dictionary.Iterator.next()();
    outlined init with take of (key: String, value: GPKUpdateGroupRequest.Member)?(v18, v19);
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: GPKUpdateGroupRequest.Member));
    v21 = *(unsigned int (**)(_OWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 48);
    if (v21(v19, 1) == 1)
      break;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v40[78] + 32))(v40[80], v40[83] + *(int *)(v20 + 48), v40[77]);
    v40[55] = GPKUpdateGroupRequest.Member.handle.getter();
    v40[56] = v4;
    MEMORY[0x24263485C]();
    outlined destroy of String();
    if (v40[71])
    {
      GPKUpdateGroupRequest.Member.metadata.getter();
      dispatch thunk of GPKMember.setMetadata(_:)();
      swift_bridgeObjectRelease();
      swift_release();
    }
    v16 = v40[80];
    v15 = v40[78];
    v17 = v40[77];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  }
  outlined destroy of [String : GPKUpdateGroupRequest.Member].Iterator();
  dispatch thunk of GPKUpdateGroupRequest.updatedMembers.getter();
  Dictionary.makeIterator()();
  memcpy(v40 + 39, v40 + 19, 0x28uLL);
  while (1)
  {
    v13 = (_OWORD *)v40[82];
    v14 = (_OWORD *)v40[81];
    Dictionary.Iterator.next()();
    outlined init with take of (key: String, value: GPKUpdateGroupRequest.Member)?(v13, v14);
    if (((unsigned int (*)(_OWORD *, uint64_t, uint64_t))v21)(v14, 1, v20) == 1)
      break;
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v40[78] + 32))(v40[79], v40[81] + *(int *)(v20 + 48), v40[77]);
    v40[53] = GPKUpdateGroupRequest.Member.handle.getter();
    v40[54] = v5;
    MEMORY[0x24263485C]();
    outlined destroy of String();
    if (v40[70])
    {
      GPKUpdateGroupRequest.Member.metadata.getter();
      dispatch thunk of GPKMember.setMetadata(_:)();
      swift_bridgeObjectRelease();
      swift_release();
    }
    v11 = v40[79];
    v10 = v40[78];
    v12 = v40[77];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  }
  v9 = (void (*)(uint64_t, uint64_t))v40[96];
  v7 = v40[95];
  v8 = v40[93];
  outlined destroy of [String : GPKUpdateGroupRequest.Member].Iterator();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Metadata set for member", 0x25uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String?();
  outlined destroy of [GPKMetadata]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v40[59] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 472) = v0;
  swift_bridgeObjectRelease();
  outlined destroy of MetadataService(v0 + 16);
  outlined destroy of String?();
  outlined destroy of [GPKMetadata]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 472) + 8))();
}

uint64_t GroupUpdater.sendInvitation(response:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 200) = v3;
  *(_QWORD *)(v4 + 192) = a3;
  *(_QWORD *)(v4 + 184) = a2;
  *(_QWORD *)(v4 + 176) = a1;
  *(_QWORD *)(v4 + 128) = v4;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_DWORD *)(v4 + 280) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v5 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v4 + 208) = v5;
  *(_QWORD *)(v4 + 216) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 224) = swift_task_alloc();
  type metadata accessor for GKCrypto_GroupBlob();
  *(_QWORD *)(v4 + 232) = swift_task_alloc();
  type metadata accessor for GroupBlobEnvelope();
  *(_QWORD *)(v4 + 240) = swift_task_alloc();
  *(_QWORD *)(v4 + 136) = a1;
  *(_QWORD *)(v4 + 96) = a2;
  *(_QWORD *)(v4 + 104) = a3;
  *(_QWORD *)(v4 + 144) = v3;
  return swift_task_switch();
}

uint64_t GroupUpdater.sendInvitation(response:from:)()
{
  uint64_t v0;
  uint64_t updated;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  v5 = *(_QWORD *)(v0 + 240);
  v7 = *(_QWORD *)(v0 + 232);
  v9 = *(_QWORD *)(v0 + 200);
  v8 = *(uint64_t **)(v0 + 176);
  *(_QWORD *)(v0 + 128) = v0;
  swift_retain();
  v4 = dispatch thunk of GPKGroup.version.getter();
  swift_release();
  *(_QWORD *)(v0 + 152) = v4;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int64 and conformance Int64();
  UnsignedInteger<>.init<A>(_:)();
  v6 = *(_DWORD *)(v0 + 284);
  *(_DWORD *)(v0 + 280) = v6;
  updated = type metadata accessor for GroupUpdater.MembershipUpdateResponse();
  outlined init with copy of GKCrypto_GroupBlob((uint64_t)v8 + *(int *)(updated + 24), v7);
  GroupBlobEnvelope.init(groupBlob:groupVersion:)(v7, v6, v5);
  outlined init with copy of PeerMessagingServiceProviding(v9 + 568, v0 + 16);
  v14 = *(_QWORD *)(v0 + 40);
  v15 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v14);
  v17 = *v8;
  *(_QWORD *)(v0 + 248) = *v8;
  swift_retain();
  v13 = v8[1];
  *(_QWORD *)(v0 + 256) = v13;
  swift_bridgeObjectRetain();
  outlined init with copy of Client(v9, v0 + 56);
  v11 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v11);
  (*(void (**)(uint64_t))(v10 + 16))(v11);
  *(_BYTE *)(v0 + 289) = *(_BYTE *)(v0 + 288) & 1;
  v16 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 + 32) + **(int **)(v15 + 32));
  v2 = (_QWORD *)swift_task_alloc();
  v12[33] = v2;
  *v2 = v12[16];
  v2[1] = GroupUpdater.sendInvitation(response:from:);
  return v16(v17, v13, v12[23], v12[24], v12[30], v0 + 289, v14, v15);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 128) = *v1;
  v2 += 128;
  v4 = v2 - 72;
  *(_QWORD *)(v2 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    __swift_destroy_boxed_opaque_existential_1(v4);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 128) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of GroupBlobEnvelope(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 128) + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void *v11;

  v11 = (void *)v0[34];
  v6 = v0[30];
  v8 = v0[28];
  v7 = v0[27];
  v9 = v0[26];
  v0[16] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  outlined destroy of GroupBlobEnvelope(v6);
  v1 = v11;
  v0[20] = v11;
  v0[14] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[15] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Sending invitation failed to members: ", 0x34uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v0[21] = v11;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v8);
  gpklog(_:type:fileID:line:subsystem:)();
  v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: By-passing the invitation error - temporarily", 0x3BuLL, 1);
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v8);
  gpklog(_:type:fileID:line:subsystem:)();
  v10(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[16] + 8))();
}

uint64_t GroupUpdater.sendGroupMembershipUpdate(response:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[46] = v3;
  v4[45] = a3;
  v4[44] = a2;
  v4[43] = a1;
  v4[28] = v4;
  v4[29] = 0;
  v4[22] = 0;
  v4[23] = 0;
  v4[30] = 0;
  v4[31] = 0;
  v4[24] = 0;
  v4[25] = 0;
  v4[37] = 0;
  v4[39] = 0;
  v4[40] = 0;
  v4[41] = 0;
  v5 = type metadata accessor for LogSubsystem();
  v4[47] = v5;
  v4[48] = *(_QWORD *)(v5 - 8);
  v4[49] = swift_task_alloc();
  v4[29] = a1;
  v4[22] = a2;
  v4[23] = a3;
  v4[30] = v3;
  return swift_task_switch();
}

uint64_t GroupUpdater.sendGroupMembershipUpdate(response:from:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v0[28] = v0;
  v0[31] = _allocateUninitializedArray<A>(_:)();
  swift_retain();
  v39 = dispatch thunk of GPKGroup.members.getter();
  swift_release();
  v0[32] = v39;
  v0[50] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v0[51] = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v37 = *(_QWORD *)(v38 + 264);
    if (!v37)
      break;
    *(_QWORD *)(v38 + 328) = v37;
    if ((dispatch thunk of GPKMember.isMe.getter() & 1) == 0)
    {
      v34 = *(_QWORD *)(v38 + 344);
      v35 = *(_QWORD *)(v34 + *(int *)(type metadata accessor for GroupUpdater.MembershipUpdateResponse() + 28));
      swift_bridgeObjectRetain();
      *(_QWORD *)(v38 + 336) = v35;
      swift_retain();
      lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
      v36 = Sequence.contains(where:)();
      swift_release();
      outlined destroy of [GPKMember]();
      if ((v36 & 1) == 0)
      {
        dispatch thunk of GPKMember.handle.getter();
        specialized Array.append(_:)();
      }
    }
    swift_release();
  }
  outlined destroy of IndexingIterator<[GPKMember]>();
  v32 = *(_QWORD *)(v38 + 248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v38 + 272) = v32;
  *(_QWORD *)(v38 + 416) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(_QWORD *)(v38 + 424) = lazy protocol witness table accessor for type [String] and conformance [A]();
  v33 = Collection.isEmpty.getter();
  outlined destroy of [String]();
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0)
  {
    v18 = *(_QWORD *)(v38 + 408);
    v17 = *(_QWORD *)(v38 + 400);
    v15 = *(_QWORD *)(v38 + 344);
    v16 = *(_QWORD *)(v15 + *(int *)(type metadata accessor for GroupUpdater.MembershipUpdateResponse() + 32));
    swift_bridgeObjectRetain();
    *(_QWORD *)(v38 + 280) = v16;
    v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #2 in GroupUpdater.sendGroupMembershipUpdate(response:from:), 0, v17, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v19);
    *(_QWORD *)(v38 + 464) = v20;
    outlined destroy of [GPKMember]();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v38 + 248) = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v38 + 288) = v20;
    v14 = Collection.isEmpty.getter();
    outlined destroy of [String]();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      outlined destroy of [String]();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(*(_QWORD *)(v38 + 224) + 8))();
    }
    else
    {
      v13 = GroupUpdater.constructRemovalMessage(response:)(*(_QWORD *)(v38 + 344));
      *(_QWORD *)(v38 + 472) = v13;
      v5 = *(_QWORD *)(v38 + 392);
      v4 = *(_QWORD *)(v38 + 384);
      v6 = *(_QWORD *)(v38 + 376);
      v7 = *(_QWORD *)(v38 + 368);
      *(_QWORD *)(v38 + 312) = v13;
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Sending membership removal to removed members", 0x3BuLL, 1);
      static os_log_type_t.debug.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with copy of PeerMessagingServiceProviding(v7 + 568, v38 + 16);
      v10 = *(_QWORD *)(v38 + 40);
      v11 = *(_QWORD *)(v38 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v38 + 16), v10);
      outlined init with copy of Client(v7, v38 + 56);
      v9 = *(_QWORD *)(v38 + 80);
      v8 = *(_QWORD *)(v38 + 88);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v38 + 56), v9);
      (*(void (**)(uint64_t))(v8 + 16))(v9);
      *(_BYTE *)(v38 + 497) = *(_BYTE *)(v38 + 496) & 1;
      v12 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 48)
                                                                                                + **(int **)(v11 + 48));
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v38 + 480) = v3;
      *v3 = *(_QWORD *)(v38 + 224);
      v3[1] = GroupUpdater.sendGroupMembershipUpdate(response:from:);
      return v12(v13, v20, *(_QWORD *)(v38 + 352), *(_QWORD *)(v38 + 360), v38 + 497, v10, v11);
    }
  }
  else
  {
    v31 = GroupUpdater.constructMembershipUpdateMessage(response:from:)(*(uint64_t **)(v38 + 344), *(_QWORD *)(v38 + 352), *(_QWORD *)(v38 + 360));
    *(_QWORD *)(v38 + 432) = v31;
    v22 = *(_QWORD *)(v38 + 392);
    v21 = *(_QWORD *)(v38 + 384);
    v23 = *(_QWORD *)(v38 + 376);
    v24 = *(_QWORD *)(v38 + 368);
    *(_QWORD *)(v38 + 320) = v31;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Upadte Group: Sending group membership update to other members", 0x3EuLL, 1);
    static os_log_type_t.debug.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v22);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with copy of PeerMessagingServiceProviding(v24 + 568, v38 + 96);
    v28 = *(_QWORD *)(v38 + 120);
    v29 = *(_QWORD *)(v38 + 128);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v38 + 96), v28);
    v27 = *(_QWORD *)(v38 + 248);
    *(_QWORD *)(v38 + 440) = v27;
    swift_bridgeObjectRetain();
    outlined init with copy of Client(v24, v38 + 136);
    v26 = *(_QWORD *)(v38 + 160);
    v25 = *(_QWORD *)(v38 + 168);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v38 + 136), v26);
    (*(void (**)(uint64_t))(v25 + 16))(v26);
    *(_BYTE *)(v38 + 499) = *(_BYTE *)(v38 + 498) & 1;
    v30 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 + 48)
                                                                                              + **(int **)(v29 + 48));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v38 + 448) = v1;
    *v1 = *(_QWORD *)(v38 + 224);
    v1[1] = GroupUpdater.sendGroupMembershipUpdate(response:from:);
    return v30(v31, v27, *(_QWORD *)(v38 + 352), *(_QWORD *)(v38 + 360), v38 + 499, v28, v29);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 224) = *v1;
  v2 += 224;
  v4 = v2 - 88;
  *(_QWORD *)(v2 + 232) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    __swift_destroy_boxed_opaque_existential_1(v4);
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v0[28] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  swift_bridgeObjectRelease();
  v1 = v0[57];
  v19 = v0[51];
  v18 = v0[50];
  v16 = v0[43];
  v17 = *(_QWORD *)(v16 + *(int *)(type metadata accessor for GroupUpdater.MembershipUpdateResponse() + 32));
  swift_bridgeObjectRetain();
  v0[35] = v17;
  result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #2 in GroupUpdater.sendGroupMembershipUpdate(response:from:), 0, v18, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v19, MEMORY[0x24BEE40A8], v20);
  v21 = result;
  v0[58] = result;
  if (!v1)
  {
    outlined destroy of [GPKMember]();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v15 + 248) = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v15 + 288) = v21;
    v14 = Collection.isEmpty.getter();
    outlined destroy of [String]();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      outlined destroy of [String]();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(*(_QWORD *)(v15 + 224) + 8))();
    }
    else
    {
      v13 = GroupUpdater.constructRemovalMessage(response:)(*(_QWORD *)(v15 + 344));
      *(_QWORD *)(v15 + 472) = v13;
      v5 = *(_QWORD *)(v15 + 392);
      v4 = *(_QWORD *)(v15 + 384);
      v6 = *(_QWORD *)(v15 + 376);
      v7 = *(_QWORD *)(v15 + 368);
      *(_QWORD *)(v15 + 312) = v13;
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Sending membership removal to removed members", 0x3BuLL, 1);
      static os_log_type_t.debug.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with copy of PeerMessagingServiceProviding(v7 + 568, v15 + 16);
      v10 = *(_QWORD *)(v15 + 40);
      v11 = *(_QWORD *)(v15 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v15 + 16), v10);
      outlined init with copy of Client(v7, v15 + 56);
      v9 = *(_QWORD *)(v15 + 80);
      v8 = *(_QWORD *)(v15 + 88);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v15 + 56), v9);
      (*(void (**)(uint64_t))(v8 + 16))(v9);
      *(_BYTE *)(v15 + 497) = *(_BYTE *)(v15 + 496) & 1;
      v12 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 48)
                                                                                                + **(int **)(v11 + 48));
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v15 + 480) = v3;
      *v3 = *(_QWORD *)(v15 + 224);
      v3[1] = GroupUpdater.sendGroupMembershipUpdate(response:from:);
      return v12(v13, v21, *(_QWORD *)(v15 + 352), *(_QWORD *)(v15 + 360), v15 + 497, v10, v11);
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 224) = *v1;
  v2 += 224;
  v4 = v2 - 168;
  *(_QWORD *)(v2 + 264) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    __swift_destroy_boxed_opaque_existential_1(v4);
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 224) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  outlined destroy of [String]();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 224) + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;

  v0[28] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 17));
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  swift_bridgeObjectRelease();
  outlined destroy of [String]();
  v10 = (void *)v0[57];
  v7 = v0[49];
  v6 = v0[48];
  v8 = v0[47];
  v1 = v10;
  v0[37] = v10;
  v0[26] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[27] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Upadte Group: Sending group membership update failed: ", 0x36uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v0[38] = v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Upadte Group: By-passing the invitation error - temporarily", 0x3BuLL, 1);
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[28] + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;

  v0[28] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_bridgeObjectRelease();
  outlined destroy of [String]();
  v10 = (void *)v0[61];
  v7 = v0[49];
  v6 = v0[48];
  v8 = v0[47];
  v1 = v10;
  v0[37] = v10;
  v0[26] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[27] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Upadte Group: Sending group membership update failed: ", 0x36uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v0[38] = v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Upadte Group: By-passing the invitation error - temporarily", 0x3BuLL, 1);
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[28] + 8))();
}

uint64_t GroupUpdater.sendMetadataUpdate(group:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[23] = v3;
  v4[22] = a3;
  v4[21] = a2;
  v4[20] = a1;
  v4[14] = v4;
  v4[15] = 0;
  v4[12] = 0;
  v4[13] = 0;
  v4[16] = 0;
  v4[17] = 0;
  v4[19] = 0;
  type metadata accessor for GPKGroupID();
  v4[24] = swift_task_alloc();
  v4[25] = type metadata accessor for GroupEventIDSMessage();
  v4[26] = swift_task_alloc();
  v4[15] = a1;
  v4[12] = a2;
  v4[13] = a3;
  v4[16] = v3;
  return swift_task_switch();
}

uint64_t GroupUpdater.sendMetadataUpdate(group:from:)()
{
  _QWORD *v0;
  double v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;

  v19 = (_BYTE *)v0[26];
  v17 = v0[25];
  v16 = v0[24];
  v0[14] = v0;
  dispatch thunk of GPKGroup.groupID.getter();
  v1 = default argument 2 of GroupEventIDSMessage.init(event:groupID:version:eventInfo:)();
  GroupEventIDSMessage.init(event:groupID:version:eventInfo:)(0, v16, 0, v19, v1);
  IDSMessageCoder.init()();
  v18 = lazy protocol witness table accessor for type GroupEventIDSMessage and conformance GroupEventIDSMessage();
  v2 = lazy protocol witness table accessor for type GroupEventIDSMessage and conformance GroupEventIDSMessage();
  v20 = IDSMessageCoder.encode<A>(_:)((uint64_t)v19, v17, v18, v2);
  v0[27] = v20;
  *(_QWORD *)(v14 + 136) = v20;
  *(_QWORD *)(v14 + 144) = dispatch thunk of GPKGroup.members.getter();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v3 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GroupUpdater.sendMetadataUpdate(group:from:), 0, v12, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v3, MEMORY[0x24BEE40A8], v15);
  *(_QWORD *)(v14 + 224) = v13;
  v6 = *(_QWORD *)(v14 + 184);
  outlined destroy of [GPKMember]();
  *(_QWORD *)(v14 + 152) = v13;
  outlined init with copy of PeerMessagingServiceProviding(v6 + 568, v14 + 16);
  v9 = *(_QWORD *)(v14 + 40);
  v10 = *(_QWORD *)(v14 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v14 + 16), v9);
  outlined init with copy of Client(v6, v14 + 56);
  v8 = *(_QWORD *)(v14 + 80);
  v7 = *(_QWORD *)(v14 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v14 + 56), v8);
  (*(void (**)(uint64_t))(v7 + 16))(v8);
  *(_BYTE *)(v14 + 249) = *(_BYTE *)(v14 + 248) & 1;
  v11 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 48)
                                                                                            + **(int **)(v10 + 48));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v14 + 232) = v4;
  *v4 = *(_QWORD *)(v14 + 112);
  v4[1] = GroupUpdater.sendMetadataUpdate(group:from:);
  return v11(v20, v13, *(_QWORD *)(v14 + 168), *(_QWORD *)(v14 + 176), v14 + 249, v9, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = *v1;
  v4 = v2 + 56;
  *(_QWORD *)(v2 + 240) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1(v4);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 112) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of GroupEventIDSMessage(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 112) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 112) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of GroupEventIDSMessage(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 112) + 8))();
}

uint64_t outlined destroy of MemberIdentifierFetcher(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of GroupUpdater.MembershipUpdateResponse(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  int *v11;
  uint64_t v12;
  uint64_t v13;

  swift_release();
  swift_bridgeObjectRelease();
  v7 = *(int *)(type metadata accessor for GroupUpdater.MembershipUpdateResponse() + 24);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v7 + 8), *(_QWORD *)(a1 + v7 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v7 + 24), *(_QWORD *)(a1 + v7 + 32));
  v11 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v8 = v11[7];
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(a1 + v7 + v8);
  v12 = v11[8];
  v13 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(a1 + v7 + v12, 1))
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v10)(a1 + v7 + v12 + *(int *)(v13 + 20), v9);
  }
  v4 = a1 + v7 + v11[9];
  v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56));
    ((void (*)(uint64_t, uint64_t))v10)(v4 + *(int *)(v5 + 32), v9);
  }
  v2 = a1 + v7 + v11[10];
  v3 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
    ((void (*)(uint64_t, uint64_t))v10)(v2 + *(int *)(v3 + 28), v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GPKMember]?()
{
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in GroupUpdater.hasMembershipUpdate(in:existingGroup:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v20 = a1;
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v18 = 0;
  v12 = type metadata accessor for GPKMemberRole();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v8 - v14;
  v16 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v8 - v14);
  v17 = (char *)&v8 - v16;
  v19 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUpdateGroupRequest.Member?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v28 = (uint64_t)&v8 - v19;
  v27 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v26 = *(_QWORD *)(v27 - 8);
  v21 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v8 - v21;
  v32 = (char *)&v8 - v21;
  v23 = *v4;
  v31 = v23;
  v30 = a2;
  v24 = dispatch thunk of GPKUpdateGroupRequest.updatedMembers.getter();
  v5 = dispatch thunk of GPKMember.handle.getter();
  v25 = v29;
  v29[0] = v5;
  v29[1] = v6;
  MEMORY[0x24263485C]();
  outlined destroy of String();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v28, 1, v27) == 1)
  {
    outlined destroy of GPKUpdateGroupRequest.Member?(v28);
    swift_bridgeObjectRelease();
    v11 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v22, v28, v27);
    swift_bridgeObjectRelease();
    dispatch thunk of GPKMember.role.getter();
    GPKUpdateGroupRequest.Member.role.getter();
    lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
    v10 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    v9 = *(void (**)(char *, uint64_t))(v13 + 8);
    v9(v15, v12);
    v9(v17, v12);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v27);
    v11 = v10;
  }
  return v11 & 1;
}

uint64_t partial apply for closure #1 in GroupUpdater.hasMembershipUpdate(in:existingGroup:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in GroupUpdater.hasMembershipUpdate(in:existingGroup:)(a1, v1) & 1;
}

unint64_t lazy protocol witness table accessor for type [GPKMember] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMember] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMember] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMember]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMember] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMember] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMember] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMember]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMember] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKMember] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKMember] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKMember]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKMember] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GPKMember]()
{
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in GroupUpdater.hasManagedMemberUpdate(in:existingGroup:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = dispatch thunk of GPKMember.handle.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t closure #2 in GroupUpdater.hasManagedMemberUpdate(in:existingGroup:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = dispatch thunk of GPKMember.handle.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

BOOL closure #1 in GroupUpdater.hasMemberMetadataUpdate(in:existingGroup:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  char *v26;

  v14 = a1;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUpdateGroupRequest.Member?);
  v13 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v22 = (uint64_t)v8 - v13;
  v21 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v20 = *(_QWORD *)(v21 - 8);
  v15 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v8 - v15;
  v26 = (char *)v8 - v15;
  v17 = *v4;
  v25 = v17;
  v24 = a2;
  v18 = dispatch thunk of GPKUpdateGroupRequest.updatedMembers.getter();
  v5 = dispatch thunk of GPKMember.handle.getter();
  v19 = v23;
  v23[0] = v5;
  v23[1] = v6;
  MEMORY[0x24263485C]();
  outlined destroy of String();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v21) == 1)
  {
    outlined destroy of GPKUpdateGroupRequest.Member?(v22);
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v16, v22, v21);
    swift_bridgeObjectRelease();
    v8[1] = dispatch thunk of GPKMember.metadata.getter();
    v8[2] = MEMORY[0x24BEE0D00];
    v8[3] = MEMORY[0x24BEE0D10];
    v10 = Dictionary<>.hashValue.getter();
    swift_bridgeObjectRelease();
    v8[4] = GPKUpdateGroupRequest.Member.metadata.getter();
    v9 = Dictionary<>.hashValue.getter();
    swift_bridgeObjectRelease();
    v11 = v10 != v9;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v21);
    return v11;
  }
}

BOOL partial apply for closure #1 in GroupUpdater.hasMemberMetadataUpdate(in:existingGroup:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in GroupUpdater.hasMemberMetadataUpdate(in:existingGroup:)(a1, v1);
}

uint64_t closure #1 in GroupUpdater.validateMembershipUpdatePrevilege(_:existingGroup:meUser:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void (*v8)(_BYTE *, _QWORD);
  _BYTE v10[12];
  int v11;
  void (*v12)(_BYTE *, char *, uint64_t);
  void (*v13)(_BYTE *, uint64_t);
  int v14;
  int v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  _QWORD *v47;

  v29 = a1;
  v33 = a2;
  v47 = 0;
  v46 = 0;
  v26 = 0;
  v43 = type metadata accessor for GPKUserID();
  v41 = *(_QWORD *)(v43 - 8);
  v16 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v43);
  v17 = &v10[-v16];
  v18 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v10[-v16]);
  v19 = &v10[-v18];
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID?, GPKUserID?));
  v20 = (*(_QWORD *)(*(_QWORD *)(v37 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v37);
  v44 = &v10[-v20];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v21 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v22 = &v10[-v21];
  v23 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v10[-v21]);
  v40 = &v10[-v23];
  v24 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v10[-v23]);
  v38 = &v10[-v24];
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: GPKUpdateGroupRequest.Member));
  v25 = (*(_QWORD *)(*(_QWORD *)(v31 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v29);
  v30 = &v10[-v25];
  v47 = v6;
  v46 = v33;
  v27 = *(int *)(v7 + 48);
  v28 = *(int *)(v7 + 48);
  outlined init with copy of String(v6, &v10[-v25]);
  v36 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v34 = *(_QWORD *)(v36 - 8);
  (*(void (**)(_BYTE *, uint64_t))(v34 + 16))(&v30[v27], v29 + v28);
  v32 = *((_QWORD *)v30 + 1);
  v35 = &v30[*(int *)(v31 + 48)];
  GPKUpdateGroupRequest.Member.userID.getter();
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v35, v36);
  GPKUser.userID.getter();
  v8 = *(void (**)(_BYTE *, _QWORD))(v41 + 56);
  v42 = 1;
  v8(v40, 0);
  v39 = *(int *)(v37 + 48);
  outlined init with copy of GPKUserID?(v38, v44);
  outlined init with copy of GPKUserID?(v40, &v44[v39]);
  v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  if (v45(v44, v42, v43) == 1)
  {
    if (v45(&v44[v39], 1, v43) != 1)
      goto LABEL_8;
    outlined destroy of GPKUserID?((uint64_t)v44);
    v15 = 1;
  }
  else
  {
    outlined init with copy of GPKUserID?(v44, v22);
    if (v45(&v44[v39], 1, v43) == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v22, v43);
LABEL_8:
      outlined destroy of (GPKUserID?, GPKUserID?)((uint64_t)v44);
      v15 = 0;
      goto LABEL_7;
    }
    v12 = *(void (**)(_BYTE *, char *, uint64_t))(v41 + 32);
    v12(v19, v22, v43);
    v12(v17, &v44[v39], v43);
    lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    v13 = *(void (**)(_BYTE *, uint64_t))(v41 + 8);
    v13(v17, v43);
    v13(v19, v43);
    outlined destroy of GPKUserID?((uint64_t)v44);
    v15 = v14;
  }
LABEL_7:
  v11 = v15;
  outlined destroy of GPKUserID?((uint64_t)v40);
  outlined destroy of GPKUserID?((uint64_t)v38);
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t partial apply for closure #1 in GroupUpdater.validateMembershipUpdatePrevilege(_:existingGroup:meUser:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in GroupUpdater.validateMembershipUpdatePrevilege(_:existingGroup:meUser:)(a1, v1) & 1;
}

_BYTE *outlined init with copy of Bool?(_BYTE *a1, _BYTE *a2)
{
  _BYTE *result;

  result = a2;
  *a2 = *a1;
  return result;
}

uint64_t GroupUpdater.resolvedMembers(request:group:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[34] = v2;
  v3[33] = a2;
  v3[32] = a1;
  v3[11] = v3;
  v3[12] = 0;
  v3[13] = 0;
  v3[14] = 0;
  v3[15] = 0;
  v3[7] = 0;
  v3[8] = 0;
  v3[19] = 0;
  v3[9] = 0;
  v3[10] = 0;
  v3[21] = 0;
  v3[22] = 0;
  v3[24] = 0;
  v3[27] = 0;
  v3[29] = 0;
  v3[30] = 0;
  v4 = type metadata accessor for LogSubsystem();
  v3[35] = v4;
  v3[36] = *(_QWORD *)(v4 - 8);
  v3[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v3[38] = swift_task_alloc();
  v5 = type metadata accessor for GPKUserID();
  v3[39] = v5;
  v3[40] = *(_QWORD *)(v5 - 8);
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  v3[12] = a1;
  v3[13] = a2;
  v3[14] = v2;
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[11] = *v3;
  v4 += 11;
  v4[39] = v2;
  v4[40] = a1;
  v4[41] = a2;
  swift_task_dealloc();
  if (!v2)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t GroupUpdater.resolvedMembers(request:group:)()
{
  _QWORD *v0;
  unint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v0[11] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, GPKMember));
  _allocateUninitializedArray<A>(_:)();
  v0[43] = type metadata accessor for GPKMember();
  v0[44] = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v0[15] = Dictionary.init(dictionaryLiteral:)();
  v0[16] = dispatch thunk of GPKGroup.members.getter();
  v0[45] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v19 = v20[17];
    if (!v19)
      break;
    v16 = v20[40];
    v18 = v20[39];
    v17 = v20[38];
    v20[30] = v19;
    dispatch thunk of GPKMember.userID.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v18) == 1)
    {
      outlined destroy of GPKUserID?(v20[38]);
    }
    else
    {
      v14 = v20[42];
      v12 = v20[41];
      v13 = v20[40];
      v15 = v20[39];
      (*(void (**)(void))(v13 + 32))();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v14, v15);
      swift_retain();
      v20[31] = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : GPKMember]);
      Dictionary.subscript.setter();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
    }
    swift_release();
  }
  outlined destroy of IndexingIterator<[GPKMember]>();
  v20[18] = dispatch thunk of GPKUpdateGroupRequest.addedMembers.getter();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKUpdateGroupRequest.Member]);
  v20[46] = v9;
  v1 = lazy protocol witness table accessor for type [String : GPKUpdateGroupRequest.Member] and conformance [A : B]();
  v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GroupUpdater.resolvedMembers(request:group:), 0, v9, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v1, MEMORY[0x24BEE40A8], v10);
  v20[47] = v11;
  v4 = v20[34];
  outlined destroy of [String : GPKUpdateGroupRequest.Member]();
  v20[19] = v11;
  outlined init with copy of UserLookupManager(v4 + 488, (uint64_t)(v20 + 2));
  v5 = v20[5];
  v6 = v20[6];
  __swift_project_boxed_opaque_existential_1(v20 + 2, v5);
  swift_bridgeObjectRetain();
  v20[20] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v8 = Set.init<A>(_:)();
  v20[48] = v8;
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 16) + **(int **)(v6 + 16));
  v2 = (_QWORD *)swift_task_alloc();
  v20[49] = v2;
  *v2 = v20[11];
  v2[1] = GroupUpdater.resolvedMembers(request:group:);
  return v7(v8, v5, v6);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v19 = v0[52];
  v18 = v0[51];
  v1 = v0[50];
  v0[11] = v0;
  v0[9] = v18;
  v0[10] = v19;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[21] = _allocateUninitializedArray<A>(_:)();
  v0[22] = _allocateUninitializedArray<A>(_:)();
  v0[23] = dispatch thunk of GPKUpdateGroupRequest.addedMembers.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20 = (_QWORD *)swift_task_alloc();
  v20[2] = v18;
  v20[3] = v19;
  v20[4] = v0 + 21;
  v20[5] = v0 + 22;
  lazy protocol witness table accessor for type [String : GPKUpdateGroupRequest.Member] and conformance [A : B]();
  Sequence.forEach(_:)();
  if (v1)
  {
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [String : GPKUpdateGroupRequest.Member]();
    outlined destroy of [GPKMember]();
    outlined destroy of [GPKMember]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [GPKUserID : GPKMember]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(v17[11] + 8))();
  }
  else
  {
    v11 = v17[37];
    v10 = v17[36];
    v12 = v17[35];
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [String : GPKUpdateGroupRequest.Member]();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: New members resolved", 0x22uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
    gpklog(_:type:fileID:line:subsystem:)();
    v13 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v13(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _allocateUninitializedArray<A>(_:)();
    v17[24] = Set.init(arrayLiteral:)();
    v14 = v17[21];
    swift_bridgeObjectRetain();
    v17[25] = v14;
    v15 = swift_task_alloc();
    *(_QWORD *)(v15 + 16) = v17 + 15;
    *(_QWORD *)(v15 + 24) = v17 + 24;
    lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
    v16 = Sequence.compactMap<A>(_:)();
    v6 = v17[37];
    v7 = v17[35];
    swift_task_dealloc();
    outlined destroy of [GPKMember]();
    v17[21] = v16;
    swift_bridgeObjectRelease();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Resolved members deduped", 0x26uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
    gpklog(_:type:fileID:line:subsystem:)();
    v13(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17[26] = dispatch thunk of GPKUpdateGroupRequest.removedMembers.getter();
    v8 = swift_task_alloc();
    *(_QWORD *)(v8 + 16) = v17 + 24;
    *(_QWORD *)(v8 + 24) = v17 + 15;
    v9 = Sequence.compactMap<A>(_:)();
    swift_task_dealloc();
    outlined destroy of [String : GPKUpdateGroupRequest.Member]();
    v17[27] = v9;
    v17[28] = dispatch thunk of GPKUpdateGroupRequest.updatedMembers.getter();
    *(_QWORD *)(swift_task_alloc() + 16) = v17 + 15;
    v5 = Sequence.compactMap<A>(_:)();
    swift_task_dealloc();
    outlined destroy of [String : GPKUpdateGroupRequest.Member]();
    v17[29] = v5;
    v3 = v17[21];
    swift_bridgeObjectRetain();
    v4 = v17[22];
    swift_bridgeObjectRetain();
    outlined destroy of Set<GPKUserID>();
    outlined destroy of [GPKMember]();
    outlined destroy of [GPKMember]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of [GPKUserID : GPKMember]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17[11] + 8))(v3, v9, v5, v4);
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 88) = v0;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  outlined destroy of [GPKUserID : GPKMember]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 88) + 8))();
}

uint64_t outlined destroy of GroupService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184));
  return a1;
}

uint64_t outlined init with copy of GKCrypto_GroupBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  int *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(_QWORD *)(a1 + 16);
  outlined copy of Data._Representation(v29, v30);
  *(_QWORD *)(a2 + 8) = v29;
  *(_QWORD *)(a2 + 16) = v30;
  v31 = *(_QWORD *)(a1 + 24);
  v32 = *(_QWORD *)(a1 + 32);
  outlined copy of Data._Representation(v31, v32);
  *(_QWORD *)(a2 + 24) = v31;
  *(_QWORD *)(a2 + 32) = v32;
  v37 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v33 = v37[7];
  v35 = type metadata accessor for UnknownStorage();
  v36 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
  v36(a2 + v33, a1 + v33);
  v38 = v37[8];
  v40 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v41 + 48))(a1 + v38, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a2 + v38), (const void *)(a1 + v38), *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    v28 = *(_QWORD *)(a1 + v38);
    swift_bridgeObjectRetain();
    *(_QWORD *)(a2 + v38) = v28;
    ((void (*)(uint64_t, uint64_t, uint64_t))v36)(a2 + v38 + *(int *)(v40 + 20), a1 + v38 + *(int *)(v40 + 20), v35);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(a2 + v38, 0, 1, v40);
  }
  __dst = (_QWORD *)(a2 + v37[9]);
  __src = (uint64_t *)(a1 + v37[9]);
  v26 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v27 + 48))(__src, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v16 = *__src;
    v17 = __src[1];
    outlined copy of Data._Representation(*__src, v17);
    *__dst = v16;
    __dst[1] = v17;
    v18 = __src[2];
    v19 = __src[3];
    outlined copy of Data._Representation(v18, v19);
    __dst[2] = v18;
    __dst[3] = v19;
    v20 = __src[4];
    v21 = __src[5];
    outlined copy of Data._Representation(v20, v21);
    __dst[4] = v20;
    __dst[5] = v21;
    v22 = __src[6];
    v23 = __src[7];
    outlined copy of Data._Representation(v22, v23);
    __dst[6] = v22;
    __dst[7] = v23;
    ((void (*)(char *, char *, uint64_t))v36)((char *)__dst + *(int *)(v26 + 32), (char *)__src + *(int *)(v26 + 32), v35);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
  }
  v12 = (_QWORD *)(a2 + v37[10]);
  v13 = (uint64_t *)(a1 + v37[10]);
  v14 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v15 + 48))(v13, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v6 = *v13;
    v7 = v13[1];
    outlined copy of Data._Representation(*v13, v7);
    *v12 = v6;
    v12[1] = v7;
    v8 = v13[2];
    v9 = v13[3];
    outlined copy of Data._Representation(v8, v9);
    v12[2] = v8;
    v12[3] = v9;
    v10 = v13[4];
    v11 = v13[5];
    outlined copy of Data._Representation(v10, v11);
    v12[4] = v10;
    v12[5] = v11;
    ((void (*)(char *, char *, uint64_t))v36)((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v35);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a2;
}

uint64_t outlined destroy of GKCrypto_GroupBlob(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v12;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v9 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v6 = v9[7];
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(a1 + v6);
  v10 = v9[8];
  v12 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(a1 + v10, 1))
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v8)(a1 + v10 + *(int *)(v12 + 20), v7);
  }
  v4 = a1 + v9[9];
  v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56));
    ((void (*)(uint64_t, uint64_t))v8)(v4 + *(int *)(v5 + 32), v7);
  }
  v2 = a1 + v9[10];
  v3 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
    ((void (*)(uint64_t, uint64_t))v8)(v2 + *(int *)(v3 + 28), v7);
  }
  return a1;
}

uint64_t GroupUpdater.flattenedMemberList(group:added:removed:updated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t k;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t i;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  uint64_t v68;
  uint64_t v69;
  _QWORD v70[3];
  uint64_t v71;
  _QWORD v72[2];
  uint64_t v73;
  _QWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  v53 = a1;
  v57 = a2;
  v54 = a3;
  v55 = a4;
  v56 = v4;
  v96 = 0;
  v95 = 0;
  v94 = 0;
  v93 = 0;
  v92 = 0;
  v91 = 0;
  v60 = 0;
  v88 = 0;
  v89 = 0;
  v84 = 0;
  v85 = 0;
  v80 = 0;
  v81 = 0;
  v76 = 0;
  v71 = 0;
  v69 = 0;
  v5 = type metadata accessor for GPKMemberRole();
  v58 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v59 = (char *)v20 - v58;
  v96 = v53;
  v95 = v6;
  v94 = v7;
  v93 = v8;
  v92 = v9;
  v90[1] = dispatch thunk of GPKGroup.members.getter();
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, GPKMember));
  v64 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GroupUpdater.flattenedMemberList(group:added:removed:updated:), v60, v61, v62, MEMORY[0x24BEE4078], v64, MEMORY[0x24BEE40A8], v63);
  v65 = 0;
  v66 = v10;
  v48 = v10;
  outlined destroy of [GPKMember]();
  v51 = v90;
  v90[0] = v48;
  v49 = type metadata accessor for GPKMember();
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(String, GPKMember)]);
  lazy protocol witness table accessor for type [(String, GPKMember)] and conformance [A]();
  v91 = Dictionary.init<A>(uniqueKeysWithValues:)();
  swift_bridgeObjectRetain();
  v87 = v57;
  Collection<>.makeIterator()();
  for (i = v65; ; i = v45)
  {
    v45 = i;
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v47 = v86;
    if (!v86)
      break;
    v44 = v47;
    v43 = v47;
    v69 = v47;
    v39 = dispatch thunk of GPKMember.handle.getter();
    v40 = v11;
    swift_retain();
    v42 = &v68;
    v68 = v43;
    v41 = v67;
    v67[0] = v39;
    v67[1] = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember]);
    Dictionary.subscript.setter();
    swift_retain();
    dispatch thunk of GPKMember.group.setter();
    swift_release();
  }
  outlined destroy of IndexingIterator<[GPKMember]>();
  swift_bridgeObjectRetain();
  v83 = v54;
  Collection<>.makeIterator()();
  for (j = v45; ; j = v36)
  {
    v36 = j;
    IndexingIterator.next()();
    v37 = v82;
    if (!v82)
      break;
    v35 = v37;
    v34 = v37;
    v71 = v37;
    v12 = dispatch thunk of GPKMember.handle.getter();
    v33 = v70;
    v70[0] = v12;
    v70[1] = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember]);
    Dictionary.removeValue(forKey:)();
    outlined destroy of String();
    swift_release();
    swift_release();
  }
  outlined destroy of IndexingIterator<[GPKMember]>();
  swift_bridgeObjectRetain();
  v79 = v55;
  Collection<>.makeIterator()();
  for (k = v36; ; k = v30)
  {
    v30 = k;
    IndexingIterator.next()();
    v31 = v78;
    if (!v78)
      break;
    v29 = v31;
    v27 = v31;
    v76 = v31;
    v14 = dispatch thunk of GPKMember.handle.getter();
    v28 = v74;
    v74[0] = v14;
    v74[1] = v15;
    MEMORY[0x24263485C](&v75);
    outlined destroy of String();
    if (v75)
    {
      v25 = &v75;
      v26 = v75;
      swift_retain();
      outlined destroy of GPKMember?();
      dispatch thunk of GPKMember.role.getter();
      dispatch thunk of GPKMember.role.setter();
      swift_release();
    }
    else
    {
      outlined destroy of GPKMember?();
    }
    v16 = dispatch thunk of GPKMember.handle.getter();
    v24 = v72;
    v72[0] = v16;
    v72[1] = v17;
    MEMORY[0x24263485C](&v73);
    outlined destroy of String();
    if (v73)
    {
      v22 = &v73;
      v23 = v73;
      swift_retain();
      outlined destroy of GPKMember?();
      swift_retain();
      dispatch thunk of GPKMember.group.setter();
      swift_release();
    }
    else
    {
      outlined destroy of GPKMember?();
    }
    swift_release();
  }
  outlined destroy of IndexingIterator<[GPKMember]>();
  v20[3] = &v91;
  v18 = Dictionary.values.getter();
  v20[2] = &v77;
  v77 = v18;
  v20[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember].Values);
  lazy protocol witness table accessor for type [String : GPKMember].Values and conformance [A : B].Values();
  v21 = Array.init<A>(_:)();
  outlined destroy of [String : GPKMember]();
  return v21;
}

uint64_t closure #1 in GroupUpdater.resolvedMembers(request:group:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v20 = a2;
  v17 = a1;
  v25 = 0;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: GPKUpdateGroupRequest.Member));
  v14 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v17);
  v18 = (char *)&v13 - v14;
  v25 = v2;
  v15 = *(int *)(v3 + 48);
  v16 = *(int *)(v3 + 48);
  outlined init with copy of String(v2, (uint64_t *)((char *)&v13 - v14));
  v23 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v21 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, uint64_t))(v21 + 16))(&v18[v15], v17 + v16);
  v24 = *((_QWORD *)v18 + 1);
  v22 = &v18[*(int *)(v19 + 48)];
  v4 = GPKUpdateGroupRequest.Member.handle.getter();
  v5 = v20;
  v6 = v21;
  v7 = v4;
  v8 = v22;
  v10 = v9;
  v11 = v23;
  *v20 = v7;
  v5[1] = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v11);
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in GroupUpdater.resolvedMembers(request:group:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, _QWORD);
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  Builtin::Word v53;
  void *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  Swift::String v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  Builtin::Word v77;
  void *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  Swift::String v93;
  uint64_t v94;
  Builtin::Word v95;
  void *object;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  void *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  Swift::String v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  void *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  void *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  Builtin::Word v137;
  uint64_t v138;
  int v139;
  Swift::String v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  unint64_t v159;
  char *v160;
  unint64_t v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  void (*v196)(char *, char *);
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(char *, uint64_t);
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD v210[2];
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD v215[2];
  uint64_t v216;
  uint64_t v217;
  _QWORD v218[2];
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD v222[2];
  uint64_t v223;
  uint64_t v224;
  _QWORD v225[2];
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;

  v195 = a1;
  v205 = a2;
  v192 = a3;
  v167 = a4;
  v168 = a5;
  v232 = 0;
  v231 = 0;
  v229 = 0;
  v230 = 0;
  v228 = 0;
  v227 = 0;
  v226 = 0;
  v175 = 0;
  v147 = type metadata accessor for InternalErrorCode();
  v148 = *(_QWORD *)(v147 - 8);
  v149 = (*(_QWORD *)(v148 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v150 = (char *)&v52 - v149;
  v151 = type metadata accessor for LogSubsystem();
  v152 = *(_QWORD *)(v151 - 8);
  v153 = (*(_QWORD *)(v152 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v175);
  v154 = (uint64_t)&v52 - v153;
  v155 = type metadata accessor for GPKMemberPolicy();
  v156 = *(_QWORD *)(v155 - 8);
  v157 = (*(_QWORD *)(v156 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v155);
  v158 = (char *)&v52 - v157;
  v159 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v52 - v157);
  v160 = (char *)&v52 - v159;
  v161 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v175);
  v162 = (char *)&v52 - v161;
  v163 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v209 = (uint64_t)&v52 - v163;
  v208 = type metadata accessor for GPKUserID();
  v207 = *(_QWORD *)(v208 - 8);
  v164 = (*(_QWORD *)(v207 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v175);
  v165 = (char *)&v52 - v164;
  v232 = (char *)&v52 - v164;
  v8 = type metadata accessor for GPKMemberRole();
  v166 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v188 = (char *)&v52 - v166;
  v198 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: GPKUpdateGroupRequest.Member));
  v173 = *(_QWORD *)(*(_QWORD *)(v198 - 8) + 64);
  v169 = (v173 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v175);
  v170 = (uint64_t *)((char *)&v52 - v169);
  v171 = (v173 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v197 = (uint64_t *)((char *)&v52 - v171);
  v172 = (v173 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v183 = (uint64_t *)((char *)&v52 - v172);
  v174 = (v173 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v178 = (char *)&v52 - v174;
  v231 = v12;
  v229 = v13;
  v230 = v14;
  v228 = v15;
  v227 = v16;
  v184 = type metadata accessor for GPKMember();
  v176 = *(int *)(v198 + 48);
  v177 = *(int *)(v198 + 48);
  outlined init with copy of String(v195, v178);
  v202 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v179 = *(_QWORD *)(v202 - 8);
  v196 = *(void (**)(char *, char *))(v179 + 16);
  v196(&v178[v176], &v195[v177]);
  v190 = *((_QWORD *)v178 + 1);
  v180 = &v178[*(int *)(v198 + 48)];
  v186 = GPKUpdateGroupRequest.Member.handle.getter();
  v187 = v17;
  v200 = *(void (**)(char *, uint64_t))(v179 + 8);
  v200(v180, v202);
  v181 = *(int *)(v198 + 48);
  v182 = *(int *)(v198 + 48);
  outlined init with copy of String(v195, v183);
  ((void (*)(char *, char *, uint64_t))v196)((char *)v183 + v181, &v195[v182], v202);
  v189 = v183[1];
  v185 = (char *)v183 + *(int *)(v198 + 48);
  GPKUpdateGroupRequest.Member.role.getter();
  v200(v185, v202);
  v191 = GPKMember.__allocating_init(handle:role:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v226 = v191;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v193 = *(int *)(v198 + 48);
  v194 = *(int *)(v198 + 48);
  outlined init with copy of String(v195, v197);
  ((void (*)(char *, char *, uint64_t))v196)((char *)v197 + v193, &v195[v194], v202);
  v199 = v197[1];
  v201 = (char *)v197 + *(int *)(v198 + 48);
  v203 = GPKUpdateGroupRequest.Member.handle.getter();
  v204 = v18;
  v200(v201, v202);
  v206 = v225;
  v225[0] = v203;
  v225[1] = v204;
  MEMORY[0x24263485C]();
  outlined destroy of String();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v207 + 48))(v209, 1, v208) == 1)
  {
    outlined destroy of GPKUserID?(v209);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v143 = (char *)v170 + *(int *)(v198 + 48);
    v142 = &v195[*(int *)(v198 + 48)];
    outlined init with copy of String(v195, v170);
    ((void (*)(char *, char *, uint64_t))v196)(v143, v142, v202);
    v144 = v170[1];
    v145 = (char *)v170 + *(int *)(v198 + 48);
    GPKUpdateGroupRequest.Member.policy.getter();
    v200(v145, v202);
    v146 = (*(uint64_t (**)(char *, uint64_t))(v156 + 88))(v160, v155);
    if (v146 == *MEMORY[0x24BE3DBD0])
    {
      v95 = 35;
      v114 = 1;
      v26 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v105 = &v216;
      v216 = v26;
      v217 = v27;
      v108 = 1;
      v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Member not resolved: ", v95, 1);
      object = v28._object;
      DefaultStringInterpolation.appendLiteral(_:)(v28);
      swift_bridgeObjectRelease();
      v98 = &v178[*(int *)(v198 + 48)];
      v97 = &v195[*(int *)(v198 + 48)];
      outlined init with copy of String(v195, v178);
      ((void (*)(char *, char *, uint64_t))v196)(v98, v97, v202);
      v103 = *((_QWORD *)v178 + 1);
      v99 = &v178[*(int *)(v198 + 48)];
      v100 = GPKUpdateGroupRequest.Member.handle.getter();
      v101 = v29;
      v200(v99, v202);
      v102 = v215;
      v215[0] = v100;
      v215[1] = v101;
      v121 = MEMORY[0x24BEE0D00];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      swift_bridgeObjectRelease();
      v113 = 0;
      v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v108 & 1);
      v104 = v30._object;
      DefaultStringInterpolation.appendLiteral(_:)(v30);
      swift_bridgeObjectRelease();
      v107 = v216;
      v106 = v217;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      v109 = String.init(stringInterpolation:)();
      v112 = v31;
      v111 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v108 & 1);
      v110 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v154);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v154, v151);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      (*(void (**)(char *, _QWORD, uint64_t))(v148 + 104))(v150, *MEMORY[0x24BE3DE38], v147);
      v119 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
      v120 = _allocateUninitializedArray<A>(_:)();
      v118 = v32;
      v33 = static InternalErrorKey.memberHandles.getter();
      v34 = v118;
      *v118 = v33;
      v34[1] = v35;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v116 = &v214;
      v214 = v192;
      v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
      lazy protocol witness table accessor for type Set<String> and conformance Set<A>();
      v117 = Array.init<A>(_:)();
      swift_bridgeObjectRelease();
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      v37 = v117;
      v38 = v118;
      v118[5] = v36;
      v38[2] = v37;
      _finalizeUninitializedArray<A>(_:)();
      Dictionary.init(dictionaryLiteral:)();
      v122 = InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    if (v146 == *MEMORY[0x24BE3DBC8])
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v156 + 104))(v158, *MEMORY[0x24BE3DBC8], v155);
      dispatch thunk of GPKMember.policy.setter();
      v72 = &v178[*(int *)(v198 + 48)];
      v71 = &v195[*(int *)(v198 + 48)];
      outlined init with copy of String(v195, v178);
      ((void (*)(char *, char *, uint64_t))v196)(v72, v71, v202);
      v75 = *((_QWORD *)v178 + 1);
      v73 = &v178[*(int *)(v198 + 48)];
      v74 = GPKUpdateGroupRequest.Member.metadata.getter();
      v200(v73, v202);
      dispatch thunk of GPKMember.setMetadata(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_retain();
      v76 = &v221;
      v221 = v191;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
      Array.append(_:)();
      v77 = 30;
      v40 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v87 = &v219;
      v219 = v40;
      v220 = v41;
      v90 = 1;
      v42 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Managed member: ", v77, 1);
      v78 = v42._object;
      DefaultStringInterpolation.appendLiteral(_:)(v42);
      swift_bridgeObjectRelease();
      v80 = &v178[*(int *)(v198 + 48)];
      v79 = &v195[*(int *)(v198 + 48)];
      outlined init with copy of String(v195, v178);
      ((void (*)(char *, char *, uint64_t))v196)(v80, v79, v202);
      v85 = *((_QWORD *)v178 + 1);
      v81 = &v178[*(int *)(v198 + 48)];
      v82 = GPKUpdateGroupRequest.Member.handle.getter();
      v83 = v43;
      v200(v81, v202);
      v84 = v218;
      v218[0] = v82;
      v218[1] = v83;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      swift_bridgeObjectRelease();
      v44 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v90 & 1);
      v86 = v44._object;
      DefaultStringInterpolation.appendLiteral(_:)(v44);
      swift_bridgeObjectRelease();
      v89 = v219;
      v88 = v220;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      v91 = String.init(stringInterpolation:)();
      v94 = v45;
      v93 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v90 & 1);
      v92 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v154);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v154, v151);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v53 = 41;
      v46 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v63 = &v223;
      v223 = v46;
      v224 = v47;
      v66 = 1;
      v48 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Unknown policy for member: ", v53, 1);
      v54 = v48._object;
      DefaultStringInterpolation.appendLiteral(_:)(v48);
      swift_bridgeObjectRelease();
      v56 = &v178[*(int *)(v198 + 48)];
      v55 = &v195[*(int *)(v198 + 48)];
      outlined init with copy of String(v195, v178);
      ((void (*)(char *, char *, uint64_t))v196)(v56, v55, v202);
      v61 = *((_QWORD *)v178 + 1);
      v57 = &v178[*(int *)(v198 + 48)];
      v58 = GPKUpdateGroupRequest.Member.handle.getter();
      v59 = v49;
      v200(v57, v202);
      v60 = v222;
      v222[0] = v58;
      v222[1] = v59;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      swift_bridgeObjectRelease();
      v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v66 & 1);
      v62 = v50._object;
      DefaultStringInterpolation.appendLiteral(_:)(v50);
      swift_bridgeObjectRelease();
      v65 = v223;
      v64 = v224;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      v67 = String.init(stringInterpolation:)();
      v70 = v51;
      v69 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v66 & 1);
      v68 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v154);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v154, v151);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v156 + 8))(v160, v155);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v207 + 32))(v165, v209, v208);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v162, v165, v208);
    v19 = *(void (**)(char *, _QWORD))(v207 + 56);
    v136 = 1;
    v19(v162, 0);
    dispatch thunk of GPKMember.userID.setter();
    swift_retain();
    v123 = &v213;
    v213 = v191;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
    Array.append(_:)();
    v137 = 31;
    v20 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v133 = &v211;
    v211 = v20;
    v212 = v21;
    v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Member resolved: ", v137, v136 & 1);
    v124 = v22._object;
    DefaultStringInterpolation.appendLiteral(_:)(v22);
    swift_bridgeObjectRelease();
    v126 = &v178[*(int *)(v198 + 48)];
    v125 = &v195[*(int *)(v198 + 48)];
    outlined init with copy of String(v195, v178);
    ((void (*)(char *, char *, uint64_t))v196)(v126, v125, v202);
    v131 = *((_QWORD *)v178 + 1);
    v127 = &v178[*(int *)(v198 + 48)];
    v128 = GPKUpdateGroupRequest.Member.handle.getter();
    v129 = v23;
    v200(v127, v202);
    v130 = v210;
    v210[0] = v128;
    v210[1] = v129;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    swift_bridgeObjectRelease();
    v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v136 & 1);
    v132 = v24._object;
    DefaultStringInterpolation.appendLiteral(_:)(v24);
    swift_bridgeObjectRelease();
    v135 = v211;
    v134 = v212;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v138 = String.init(stringInterpolation:)();
    v141 = v25;
    v140 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", v137, v136 & 1);
    v139 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v154);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v154, v151);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v207 + 8))(v165, v208);
  }
  return swift_release();
}

uint64_t closure #3 in GroupUpdater.resolvedMembers(request:group:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t result;
  _QWORD v24[13];
  int v25;
  uint64_t v26;
  int v27;
  Swift::String v28;
  uint64_t v29;
  void *object;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  _QWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;

  v39 = a4;
  v48 = a1;
  v47 = a2;
  v46 = a3;
  v71 = 0;
  v70 = 0;
  v69 = 0;
  v68 = 0;
  v66 = 0;
  v44 = 0;
  v40 = type metadata accessor for LogSubsystem();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v43 = (uint64_t)v24 - v42;
  v45 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v44);
  v60 = (uint64_t)v24 - v45;
  v61 = type metadata accessor for GPKUserID();
  v59 = *(_QWORD *)(v61 - 8);
  v54 = *(_QWORD *)(v59 + 64);
  v49 = (v54 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v48);
  v50 = (char *)v24 - v49;
  v51 = (v54 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v52 = (char *)v24 - v51;
  v53 = (v54 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v55 = (char *)v24 - v53;
  v56 = (v54 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v57 = (char *)v24 - v56;
  v71 = (char *)v24 - v56;
  v58 = *v7;
  v70 = v58;
  v69 = v8;
  v68 = v9;
  dispatch thunk of GPKMember.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v60, 1, v61) == 1)
  {
    outlined destroy of GPKUserID?(v60);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v57, v60, v61);
    v35 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
    v35(v55, v57, v61);
    v36 = *v47;
    v37 = type metadata accessor for GPKMember();
    v10 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    MEMORY[0x24263485C](&v67, v55, v36, v61, v37, v10);
    v38 = v67;
    if (v67)
    {
      v34 = v38;
      v31 = v38;
      v66 = v38;
      v32 = *(void (**)(char *, uint64_t))(v59 + 8);
      v32(v55, v61);
      v11 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v24[10] = &v64;
      v64 = v11;
      v65 = v12;
      v25 = 1;
      v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Locally updating the handle for user ", 0x33uLL, 1);
      v24[1] = v13._object;
      DefaultStringInterpolation.appendLiteral(_:)(v13);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(". ", 2uLL, v25 & 1);
      v24[2] = v14._object;
      DefaultStringInterpolation.appendLiteral(_:)(v14);
      swift_bridgeObjectRelease();
      v15 = dispatch thunk of GPKMember.handle.getter();
      v24[3] = v63;
      v63[0] = v15;
      v63[1] = v16;
      v24[7] = MEMORY[0x24BEE0D00];
      v24[5] = MEMORY[0x24BEE0D70];
      v24[6] = MEMORY[0x24BEE0D68];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" -> ", 4uLL, v25 & 1);
      v24[4] = v17._object;
      DefaultStringInterpolation.appendLiteral(_:)(v17);
      swift_bridgeObjectRelease();
      v18 = dispatch thunk of GPKMember.handle.getter();
      v24[8] = v62;
      v62[0] = v18;
      v62[1] = v19;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v25 & 1);
      v24[9] = v20._object;
      DefaultStringInterpolation.appendLiteral(_:)(v20);
      swift_bridgeObjectRelease();
      v24[12] = v64;
      v24[11] = v65;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      v26 = String.init(stringInterpolation:)();
      v29 = v21;
      v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v25 & 1);
      v27 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v43);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = dispatch thunk of GPKMember.handle.getter();
      object = v22._object;
      GPKMember.setHandle(_:)(v22);
      swift_bridgeObjectRelease();
      v35(v50, v57, v61);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<GPKUserID>);
      Set.insert(_:)();
      v32(v52, v61);
      *v39 = 0;
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v32)(v57, v61);
    }
    v33 = *(void (**)(char *, uint64_t))(v59 + 8);
    v33(v55, v61);
    v33(v57, v61);
  }
  result = swift_retain();
  *v39 = v58;
  return result;
}

uint64_t closure #4 in GroupUpdater.resolvedMembers(request:group:)@<X0>(char *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  Builtin::Word v55;
  void *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  Swift::String v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  unint64_t v70;
  uint64_t v71;
  int v72;
  void *object;
  char *v74;
  char *v75;
  void (*v76)(char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  Builtin::Word v82;
  void *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  Swift::String v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  unint64_t v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *);
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[2];
  _QWORD v127[2];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[2];
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  char *v137;

  v92 = a4;
  v114 = a1;
  v109 = a2;
  v104 = a3;
  v137 = 0;
  v136 = 0;
  v135 = 0;
  v134 = 0;
  v125 = 0;
  v111 = 0;
  v93 = type metadata accessor for LogSubsystem();
  v94 = *(_QWORD *)(v93 - 8);
  v95 = (*(_QWORD *)(v94 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v93);
  v96 = (uint64_t)&v34 - v95;
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v98 = (*(_QWORD *)(*(_QWORD *)(v97 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v97);
  v99 = (uint64_t)&v34 - v98;
  v100 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v34 - v98);
  v123 = (uint64_t)&v34 - v100;
  v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: GPKUpdateGroupRequest.Member));
  v101 = (*(_QWORD *)(*(_QWORD *)(v119 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v111);
  v102 = (uint64_t *)((char *)&v34 - v101);
  v103 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v118 = (char *)&v34 - v103;
  v124 = type metadata accessor for GPKUserID();
  v122 = *(_QWORD *)(v124 - 8);
  v106 = *(_QWORD *)(v122 + 64);
  v105 = (v106 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v114);
  v107 = (char *)&v34 - v105;
  v108 = (v106 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v110 = (char *)&v34 - v108;
  v137 = (char *)&v34 - v108;
  v136 = v8;
  v135 = v109;
  v134 = v9;
  v112 = *(int *)(v10 + 48);
  v113 = *(int *)(v10 + 48);
  outlined init with copy of String(v8, v11);
  v115 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v116 = *(_QWORD *)(v115 - 8);
  v117 = *(void (**)(char *, char *))(v116 + 16);
  v117(&v118[v112], &v114[v113]);
  v120 = *((_QWORD *)v118 + 1);
  v121 = *(int *)(v119 + 48);
  GPKUpdateGroupRequest.Member.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v123, 1, v124) == 1)
  {
    outlined destroy of GPKUserID?(v123);
    v76 = *(void (**)(char *, uint64_t))(v116 + 8);
    v76(&v118[v121], v115);
    swift_bridgeObjectRelease();
    v82 = 1;
    v12 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v84 = &v132;
    v132 = v12;
    v133 = v13;
    v87 = 1;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: User id not found for the member in the removed list - (", 0x46uLL, 1);
    object = v14._object;
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    v75 = (char *)v102 + *(int *)(v119 + 48);
    v74 = &v114[*(int *)(v119 + 48)];
    outlined init with copy of String(v114, v102);
    ((void (*)(char *, char *, uint64_t))v117)(v75, v74, v115);
    v81 = v102[1];
    v77 = (char *)v102 + *(int *)(v119 + 48);
    v78 = GPKUpdateGroupRequest.Member.handle.getter();
    v79 = v15;
    v76(v77, v115);
    v80 = v131;
    v131[0] = v78;
    v131[1] = v79;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    swift_bridgeObjectRelease();
    v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", v82, v87 & 1);
    v83 = v16._object;
    DefaultStringInterpolation.appendLiteral(_:)(v16);
    swift_bridgeObjectRelease();
    v86 = v132;
    v85 = v133;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v88 = String.init(stringInterpolation:)();
    v91 = v17;
    v90 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v87 & 1);
    v89 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v96);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v96, v93);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v92 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v122 + 32))(v110, v123, v124);
    v69 = *(void (**)(char *, uint64_t))(v116 + 8);
    v69(&v118[v121], v115);
    swift_bridgeObjectRelease();
    v71 = *v109;
    swift_bridgeObjectRetain();
    v70 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v72 = Set.contains(_:)();
    swift_bridgeObjectRelease();
    if ((v72 & 1) != 0)
    {
      v19 = v124;
      v20 = v110;
      v21 = v122;
      *v92 = 0;
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v20, v19);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v107, v110, v124);
      v67 = *v104;
      v22 = type metadata accessor for GPKMember();
      MEMORY[0x24263485C](&v130, v107, v67, v124, v22, v70);
      v68 = v130;
      if (v130)
      {
        v66 = v68;
        v34 = v68;
        v125 = v68;
        v35 = *(void (**)(char *, uint64_t))(v122 + 8);
        v35(v107, v124);
        swift_retain();
        *v92 = v34;
        swift_release();
        return ((uint64_t (*)(char *, uint64_t))v35)(v110, v124);
      }
      else
      {
        v65 = *(void (**)(char *, uint64_t))(v122 + 8);
        v65(v107, v124);
        v23 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v57 = &v128;
        v128 = v23;
        v129 = v24;
        v60 = 1;
        v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Couldn't find a member with userID(", 0x31uLL, 1);
        v36 = v25._object;
        DefaultStringInterpolation.appendLiteral(_:)(v25);
        swift_bridgeObjectRelease();
        v38 = (char *)v102 + *(int *)(v119 + 48);
        v37 = &v114[*(int *)(v119 + 48)];
        outlined init with copy of String(v114, v102);
        ((void (*)(char *, char *, uint64_t))v117)(v38, v37, v115);
        v43 = v102[1];
        v39 = (char *)v102 + *(int *)(v119 + 48);
        GPKUpdateGroupRequest.Member.userID.getter();
        v69(v39, v115);
        v40 = Optional.logInfo.getter();
        v41 = v26;
        outlined destroy of GPKUserID?(v99);
        v42 = v127;
        v127[0] = v40;
        v127[1] = v41;
        v50 = MEMORY[0x24BEE0D00];
        v51 = MEMORY[0x24BEE0D70];
        v52 = MEMORY[0x24BEE0D68];
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String();
        swift_bridgeObjectRelease();
        v55 = 11;
        v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(") - handle(", 0xBuLL, v60 & 1);
        v44 = v27._object;
        DefaultStringInterpolation.appendLiteral(_:)(v27);
        swift_bridgeObjectRelease();
        v46 = (char *)v102 + *(int *)(v119 + 48);
        v45 = &v114[*(int *)(v119 + 48)];
        outlined init with copy of String(v114, v102);
        ((void (*)(char *, char *, uint64_t))v117)(v46, v45, v115);
        v54 = v102[1];
        v47 = (char *)v102 + *(int *)(v119 + 48);
        v48 = GPKUpdateGroupRequest.Member.handle.getter();
        v49 = v28;
        v69(v47, v115);
        v53 = v126;
        v126[0] = v48;
        v126[1] = v49;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String();
        swift_bridgeObjectRelease();
        v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(") to remove", v55, v60 & 1);
        v56 = v29._object;
        DefaultStringInterpolation.appendLiteral(_:)(v29);
        swift_bridgeObjectRelease();
        v59 = v128;
        v58 = v129;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        v61 = String.init(stringInterpolation:)();
        v64 = v30;
        v63 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v60 & 1);
        v62 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v96);
        gpklog(_:type:fileID:line:subsystem:)();
        (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v96, v93);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v31 = v110;
        v32 = v124;
        v33 = (uint64_t (*)(char *, uint64_t))v65;
        *v92 = 0;
        return v33(v31, v32);
      }
    }
  }
  return result;
}

uint64_t closure #5 in GroupUpdater.resolvedMembers(request:group:)@<X0>(char *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  _QWORD v25[2];
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *object;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  Swift::String v40;
  uint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  Swift::String v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  int v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  _QWORD *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, char *);
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[2];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[2];
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  char *v122;

  v77 = a3;
  v101 = a1;
  v96 = a2;
  v122 = 0;
  v121 = 0;
  v120 = 0;
  v115 = 0;
  v98 = 0;
  v78 = type metadata accessor for LogSubsystem();
  v79 = *(_QWORD *)(v78 - 8);
  v80 = (*(_QWORD *)(v79 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v81 = (uint64_t)v25 - v80;
  v82 = type metadata accessor for GPKMemberRole();
  v83 = *(_QWORD *)(v82 - 8);
  v84 = (*(_QWORD *)(v83 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v82);
  v85 = (char *)v25 - v84;
  v86 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v25 - v84);
  v87 = (char *)v25 - v86;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v88 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v110 = (uint64_t)v25 - v88;
  v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: GPKUpdateGroupRequest.Member));
  v89 = (*(_QWORD *)(*(_QWORD *)(v106 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v98);
  v90 = (_QWORD *)((char *)v25 - v89);
  v91 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v105 = (char *)v25 - v91;
  v111 = type metadata accessor for GPKUserID();
  v109 = *(_QWORD *)(v111 - 8);
  v93 = *(_QWORD *)(v109 + 64);
  v92 = (v93 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v101);
  v94 = (char *)v25 - v92;
  v95 = (v93 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v97 = (char *)v25 - v95;
  v122 = (char *)v25 - v95;
  v121 = v8;
  v120 = v96;
  v99 = *(int *)(v9 + 48);
  v100 = *(int *)(v9 + 48);
  outlined init with copy of String(v8, v10);
  v102 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v103 = *(_QWORD *)(v102 - 8);
  v104 = *(void (**)(char *, char *))(v103 + 16);
  v104(&v105[v99], &v101[v100]);
  v107 = *((_QWORD *)v105 + 1);
  v108 = *(int *)(v106 + 48);
  GPKUpdateGroupRequest.Member.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v110, 1, v111) == 1)
  {
    outlined destroy of GPKUserID?(v110);
    (*(void (**)(char *, uint64_t))(v103 + 8))(&v105[v108], v102);
    swift_bridgeObjectRelease();
LABEL_10:
    v19 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v34 = &v118;
    v118 = v19;
    v119 = v20;
    v37 = 1;
    v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Attempting update member(", 0x27uLL, 1);
    v25[1] = v21._object;
    DefaultStringInterpolation.appendLiteral(_:)(v21);
    swift_bridgeObjectRelease();
    v27 = (char *)v90 + *(int *)(v106 + 48);
    v26 = &v101[*(int *)(v106 + 48)];
    outlined init with copy of String(v101, v90);
    ((void (*)(char *, char *, uint64_t))v104)(v27, v26, v102);
    v32 = v90[1];
    v28 = (char *)v90 + *(int *)(v106 + 48);
    v29 = GPKUpdateGroupRequest.Member.handle.getter();
    v30 = v22;
    (*(void (**)(char *, uint64_t))(v103 + 8))(v28, v102);
    v31 = v117;
    v117[0] = v29;
    v117[1] = v30;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    swift_bridgeObjectRelease();
    v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" who is not in the group, ignore this member.", 0x2DuLL, v37 & 1);
    object = v23._object;
    DefaultStringInterpolation.appendLiteral(_:)(v23);
    swift_bridgeObjectRelease();
    v36 = v118;
    v35 = v119;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v38 = String.init(stringInterpolation:)();
    v41 = v24;
    v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v37 & 1);
    v39 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v81);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v81, v78);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *v77 = 0;
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v109 + 32))(v97, v110, v111);
  v73 = *(void (**)(char *, uint64_t))(v103 + 8);
  v73(&v105[v108], v102);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v94, v97, v111);
  v74 = *v96;
  v75 = type metadata accessor for GPKMember();
  v11 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  MEMORY[0x24263485C](&v116, v94, v74, v111, v75, v11);
  v76 = v116;
  if (!v116)
  {
    v71 = *(void (**)(char *, uint64_t))(v109 + 8);
    v71(v94, v111);
    v71(v97, v111);
    goto LABEL_10;
  }
  v72 = v76;
  v63 = v76;
  v115 = v76;
  v64 = *(void (**)(char *, uint64_t))(v109 + 8);
  v64(v94, v111);
  dispatch thunk of GPKMember.role.getter();
  v66 = (char *)v90 + *(int *)(v106 + 48);
  v65 = &v101[*(int *)(v106 + 48)];
  outlined init with copy of String(v101, v90);
  ((void (*)(char *, char *, uint64_t))v104)(v66, v65, v102);
  v68 = v90[1];
  v67 = (char *)v90 + *(int *)(v106 + 48);
  GPKUpdateGroupRequest.Member.role.getter();
  v73(v67, v102);
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  v70 = dispatch thunk of static Equatable.== infix(_:_:)();
  v69 = *(void (**)(char *, uint64_t))(v83 + 8);
  v69(v85, v82);
  swift_bridgeObjectRelease();
  v69(v87, v82);
  if ((v70 & 1) != 0)
  {
    v13 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v51 = &v113;
    v113 = v13;
    v114 = v14;
    v54 = 1;
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Role not changed for the member(", 0x2EuLL, 1);
    v42 = v15._object;
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    v44 = (char *)v90 + *(int *)(v106 + 48);
    v43 = &v101[*(int *)(v106 + 48)];
    outlined init with copy of String(v101, v90);
    ((void (*)(char *, char *, uint64_t))v104)(v44, v43, v102);
    v49 = v90[1];
    v45 = (char *)v90 + *(int *)(v106 + 48);
    v46 = GPKUpdateGroupRequest.Member.handle.getter();
    v47 = v16;
    v73(v45, v102);
    v48 = v112;
    v112[0] = v46;
    v112[1] = v47;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    swift_bridgeObjectRelease();
    v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", not inlcuded in crypto update list.", 0x25uLL, v54 & 1);
    v50 = v17._object;
    DefaultStringInterpolation.appendLiteral(_:)(v17);
    swift_bridgeObjectRelease();
    v53 = v113;
    v52 = v114;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v55 = String.init(stringInterpolation:)();
    v58 = v18;
    v57 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v54 & 1);
    v56 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v81);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v81, v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v77 = 0;
  }
  else
  {
    v60 = (char *)v90 + *(int *)(v106 + 48);
    v59 = &v101[*(int *)(v106 + 48)];
    outlined init with copy of String(v101, v90);
    ((void (*)(char *, char *, uint64_t))v104)(v60, v59, v102);
    v62 = v90[1];
    v61 = (char *)v90 + *(int *)(v106 + 48);
    GPKUpdateGroupRequest.Member.role.getter();
    v73(v61, v102);
    dispatch thunk of GPKMember.role.setter();
    swift_bridgeObjectRelease();
    swift_retain();
    *v77 = v63;
  }
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v64)(v97, v111);
}

uint64_t closure #1 in GroupUpdater.flattenedMemberList(group:added:removed:updated:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v5 = *a1;
  *a2 = dispatch thunk of GPKMember.handle.getter();
  a2[1] = v2;
  result = swift_retain();
  a2[2] = v5;
  return result;
}

uint64_t GroupUpdater.finalizedManagedMembers(for:resolvedMembers:unresolvedManagedMembers:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t m;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t k;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t j;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int __c;
  size_t __len;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[2];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[2];
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[3];
  uint64_t v105;
  _QWORD v106[3];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE v114[40];
  uint64_t v115;
  _BYTE v116[40];
  _QWORD v117[2];
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[17];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  char v126;

  v78 = a1;
  v83 = a2;
  v81 = a3;
  v4 = v3;
  v82 = v4;
  v124 = 0;
  v123 = 0;
  v122 = 0;
  v121 = 0;
  v119 = 0;
  v118 = 0;
  __len = 40;
  __c = 0;
  memset(v116, 0, sizeof(v116));
  memset(v114, 0, sizeof(v114));
  v111 = 0;
  v112 = 0;
  v107 = 0;
  v105 = 0;
  v103 = 0;
  v100 = 0;
  v98 = 0;
  v99 = 0;
  v95 = 0;
  v84 = type metadata accessor for GPKGroupID();
  v85 = *(_QWORD *)(v84 - 8);
  v86 = (*(_QWORD *)(v85 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v84);
  v88 = (uint64_t)v21 - v86;
  v124 = a1;
  v123 = v6;
  v122 = v7;
  v121 = v8;
  v87 = v120;
  outlined init with copy of MetadataService((_QWORD *)(v8 + 352), v120);
  GPKUpdateGroupRequest.groupID.getter();
  v9 = v89;
  v10 = MetadataService.managedMembers(for:)(v88);
  v90 = v9;
  v91 = v10;
  v92 = v9;
  if (v9)
  {
    v21[0] = v92;
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v88, v84);
    outlined destroy of MetadataService((uint64_t)v120);
    return v74;
  }
  else
  {
    v71 = v91;
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v88, v84);
    outlined destroy of MetadataService((uint64_t)v120);
    v119 = v71;
    v117[1] = v71;
    v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
    v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, GPKMember));
    v11 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
    v12 = v90;
    v75 = v11;
    result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GroupUpdater.finalizedManagedMembers(for:resolvedMembers:unresolvedManagedMembers:), 0, v72, v73, MEMORY[0x24BEE4078], v11, MEMORY[0x24BEE40A8], v74);
    v76 = v12;
    v77 = result;
    if (v12)
    {
      __break(1u);
    }
    else
    {
      v70 = v117;
      v117[0] = v77;
      v68 = type metadata accessor for GPKMember();
      v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(String, GPKMember)]);
      lazy protocol witness table accessor for type [(String, GPKMember)] and conformance [A]();
      v118 = Dictionary.init<A>(uniqueKeysWithValues:)();
      swift_bridgeObjectRetain();
      if (v81)
      {
        v67 = v81;
        v64 = v81;
        v100 = v81;
        swift_bridgeObjectRetain();
        v97 = v64;
        Collection<>.makeIterator()();
        for (i = v76; ; i = v62)
        {
          v62 = i;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
          IndexingIterator.next()();
          v63 = v96;
          if (!v96)
            break;
          v61 = v63;
          v60 = v63;
          v95 = v63;
          v56 = dispatch thunk of GPKMember.handle.getter();
          v57 = v14;
          swift_retain();
          v59 = &v94;
          v94 = v60;
          v58 = v93;
          v93[0] = v56;
          v93[1] = v57;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember]);
          Dictionary.subscript.setter();
          swift_release();
        }
        outlined destroy of IndexingIterator<[GPKMember]>();
        swift_bridgeObjectRelease();
        v66 = v62;
      }
      else
      {
        v66 = v76;
      }
      v54 = v66;
      v49 = dispatch thunk of GPKUpdateGroupRequest.updatedManagedMembers.getter();
      v51 = MEMORY[0x24BEE0D00];
      v52 = MEMORY[0x24BEE0D10];
      v50 = Dictionary.values.getter();
      swift_bridgeObjectRelease();
      v53 = &v125;
      Dictionary.Values.makeIterator()();
      memcpy(v116, v53, sizeof(v116));
      for (j = v54; ; j = v46)
      {
        v46 = j;
        v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember].Values.Iterator);
        Dictionary.Values.Iterator.next()();
        v48 = v115;
        if (!v115)
          break;
        v45 = v48;
        v44 = v48;
        v103 = v48;
        v40 = dispatch thunk of GPKMember.handle.getter();
        v41 = v15;
        swift_retain();
        v43 = &v102;
        v102 = v44;
        v42 = v101;
        v101[0] = v40;
        v101[1] = v41;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember]);
        Dictionary.subscript.setter();
        swift_release();
      }
      outlined destroy of [String : GPKMember].Values.Iterator();
      v34 = dispatch thunk of GPKUpdateGroupRequest.removedManagedMembers.getter();
      v36 = MEMORY[0x24BEE0D00];
      v37 = MEMORY[0x24BEE0D10];
      v35 = Dictionary.values.getter();
      swift_bridgeObjectRelease();
      v38 = &v126;
      Dictionary.Values.makeIterator()();
      memcpy(v114, v38, sizeof(v114));
      for (k = v46; ; k = v32)
      {
        v32 = k;
        Dictionary.Values.Iterator.next()();
        v33 = v113;
        if (!v113)
          break;
        v31 = v33;
        v30 = v33;
        v105 = v33;
        v16 = dispatch thunk of GPKMember.handle.getter();
        v29 = v104;
        v104[0] = v16;
        v104[1] = v17;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember]);
        Dictionary.removeValue(forKey:)();
        outlined destroy of String();
        swift_release();
        swift_release();
      }
      outlined destroy of [String : GPKMember].Values.Iterator();
      swift_bridgeObjectRetain();
      v110 = v83;
      Collection<>.makeIterator()();
      for (m = v32; ; m = v26)
      {
        v26 = m;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
        IndexingIterator.next()();
        v27 = v109;
        if (!v109)
          break;
        v25 = v27;
        v24 = v27;
        v107 = v27;
        v18 = dispatch thunk of GPKMember.handle.getter();
        v23 = v106;
        v106[0] = v18;
        v106[1] = v19;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember]);
        Dictionary.removeValue(forKey:)();
        outlined destroy of String();
        swift_release();
        swift_release();
      }
      outlined destroy of IndexingIterator<[GPKMember]>();
      v21[3] = &v118;
      v20 = Dictionary.values.getter();
      v21[2] = &v108;
      v108 = v20;
      v21[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember].Values);
      lazy protocol witness table accessor for type [String : GPKMember].Values and conformance [A : B].Values();
      v22 = Array.init<A>(_:)();
      outlined destroy of [String : GPKMember]();
      swift_bridgeObjectRelease();
      return v22;
    }
  }
  return result;
}

uint64_t closure #1 in GroupUpdater.finalizedManagedMembers(for:resolvedMembers:unresolvedManagedMembers:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v5 = *a1;
  *a2 = dispatch thunk of GPKMember.handle.getter();
  a2[1] = v2;
  result = swift_retain();
  a2[2] = v5;
  return result;
}

uint64_t GroupUpdater.groupMetadata(for:group:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  _QWORD v12[2];
  int v13;
  uint64_t countAndFlagsBits;
  int v15;
  Swift::String v16;
  void *object;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  _BOOL4 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v39 = a1;
  v38 = a2;
  v3 = v2;
  v34 = v3;
  v56 = 0;
  v55 = 0;
  v54 = 0;
  v53 = 0;
  v52 = 0;
  v51 = 0;
  v49 = 0;
  v41 = 0;
  v29 = type metadata accessor for LogSubsystem();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v29);
  v32 = (uint64_t)v12 - v31;
  v56 = a1;
  v55 = v5;
  v54 = v6;
  v33 = dispatch thunk of GPKUpdateGroupRequest.groupMetadata.getter();
  v43 = MEMORY[0x24BEE0D00];
  v42 = MEMORY[0x24BEE0D10];
  v37 = Dictionary<>.hashValue.getter();
  swift_bridgeObjectRelease();
  v35 = dispatch thunk of GPKGroup.metaData.getter();
  v36 = Dictionary<>.hashValue.getter();
  swift_bridgeObjectRelease();
  v47 = v37 != v36;
  v46 = 1;
  v53 = v37 != v36;
  v40 = GroupUpdater.hasMemberMetadataUpdate(in:existingGroup:)();
  v52 = v40 & 1 & v46;
  v44 = dispatch thunk of GPKUpdateGroupRequest.removedMembers.getter();
  v7 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v45 = MEMORY[0x24263482C](v44, v43, v7, v42);
  swift_bridgeObjectRelease();
  v48 = v45 ^ v46;
  v51 = (v45 ^ v46) & 1 & v46;
  if (v47)
    v27 = 1;
  else
    v27 = v40;
  if ((v27 & 1) != 0)
    v26 = 1;
  else
    v26 = v48;
  if ((v26 & 1) == 0)
  {
    v19 = v41;
    v20 = v28;
    return v19;
  }
  outlined init with copy of MetadataService((_QWORD *)(v34 + 352), &v50);
  v8 = v28;
  v9 = MetadataService.serializedGroupMetadata(from:group:)(v39, v38);
  v23 = v8;
  v24 = v9;
  v25 = v8;
  if (!v8)
  {
    v22 = v24;
    outlined destroy of MetadataService((uint64_t)&v50);
    if (v22)
    {
      v21 = v22;
      v18 = v22;
      v49 = v22;
      v13 = 1;
      v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Group metadata and member metadata serialized", 0x3BuLL, 1);
      countAndFlagsBits = v10._countAndFlagsBits;
      object = v10._object;
      v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v13 & 1);
      v15 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v32);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = v18;
    }
    else
    {
      v19 = v41;
    }
    v20 = v23;
    return v19;
  }
  v12[0] = v25;
  outlined destroy of MetadataService((uint64_t)&v50);
  return v12[1];
}

uint64_t GroupUpdater.managedMemberMetadata(for:group:unresolvedManagedMembers:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t countAndFlagsBits;
  int v18;
  Swift::String v19;
  void *object;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;

  v34 = a4;
  v49 = a1;
  v48 = a2;
  v54 = a3;
  v63 = 0;
  v62 = 0;
  v61 = 0;
  v60 = 0;
  v59 = 0;
  v57 = 0;
  v45 = 0;
  v37 = type metadata accessor for LogSubsystem();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v40 = (uint64_t)&v14 - v39;
  v41 = type metadata accessor for GPKGroupID();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v41);
  v44 = (uint64_t)&v14 - v43;
  v46 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMetadata?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v45);
  v47 = (uint64_t)&v14 - v46;
  v50 = type metadata accessor for GPKMetadata();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v49);
  v53 = (char *)&v14 - v52;
  v63 = (char *)&v14 - v52;
  v62 = v5;
  v61 = v6;
  v60 = v7;
  v59 = v4;
  v55 = GroupUpdater.hasManagedMemberUpdate(in:)();
  swift_bridgeObjectRetain();
  if ((v55 & 1) != 0)
  {
    v33 = 1;
  }
  else
  {
    v58 = v54;
    v32 = v54 != 0;
    v33 = v32;
  }
  v31 = v33;
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0)
  {
    v8 = dispatch thunk of GPKGroup.members.getter();
    v9 = v36;
    v27 = v8;
    v10 = GroupUpdater.finalizedManagedMembers(for:resolvedMembers:unresolvedManagedMembers:)(v49, v8, v54);
    v28 = v9;
    v29 = v10;
    v30 = v9;
    if (v9)
    {
      v15 = v30;
      result = swift_bridgeObjectRelease();
      v16 = v15;
    }
    else
    {
      v24 = v29;
      swift_bridgeObjectRelease();
      v57 = v24;
      v23 = &v56;
      outlined init with copy of MetadataService((_QWORD *)(v35 + 352), &v56);
      dispatch thunk of GPKGroup.groupID.getter();
      v11 = v28;
      MetadataService.serializedManagedMembers(_:groupID:)(v24, v44, v47);
      v25 = v11;
      v26 = v11;
      if (v11)
      {
        v14 = v26;
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v44, v41);
        outlined destroy of MetadataService((uint64_t)&v56);
        return swift_bridgeObjectRelease();
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v44, v41);
        outlined destroy of MetadataService((uint64_t)&v56);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v47, 1, v50) == 1)
        {
          outlined destroy of GPKMetadata?(v47);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v34, 1, 1, v50);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v53, v47, v50);
          v21 = 1;
          v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Managed members list serialized", 0x2DuLL, 1);
          countAndFlagsBits = v12._countAndFlagsBits;
          object = v12._object;
          v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupUpdater.swift", 0x1FuLL, v21 & 1);
          v18 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v40);
          gpklog(_:type:fileID:line:subsystem:)();
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v40, v37);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, char *, uint64_t))(v51 + 16))(v34, v53, v50);
          (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v51 + 56))(v34, 0, v21, v50);
          (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v50);
        }
        swift_bridgeObjectRelease();
        result = v25;
        v22 = v25;
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v34, 1, 1, v50);
    result = v36;
    v22 = v36;
  }
  return result;
}

uint64_t closure #1 in GroupUpdater.updateMetadata(from:group:unresolvedManagedMembers:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v5 = *a1;
  *a2 = dispatch thunk of GPKMember.handle.getter();
  a2[1] = v2;
  result = swift_retain();
  a2[2] = v5;
  return result;
}

uint64_t closure #1 in GroupUpdater.sendGroupMembershipUpdate(response:from:)()
{
  char v1;

  dispatch thunk of GPKMember.handle.getter();
  dispatch thunk of GPKMember.handle.getter();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t GroupUpdater.constructMembershipUpdateMessage(response:from:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t updated;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;

  v68 = a1;
  v62 = a2;
  v61 = a3;
  v97 = 0;
  v96 = 0;
  v95 = 0;
  v93 = 0;
  v94 = 0;
  v92 = 0;
  v90 = 0;
  v88 = 0;
  v86 = 0;
  v84 = 0;
  v82 = 0;
  v80 = 0;
  v77 = 0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
  v52 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v53 = (_DWORD *)((char *)v21 - v52);
  v63 = 0;
  v54 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v63);
  v55 = (uint64_t)v21 - v54;
  updated = type metadata accessor for MembershipUpdateIDSMessage();
  v57 = (*(_QWORD *)(*(_QWORD *)(updated - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v63);
  v58 = (uint64_t)v21 - v57;
  v97 = (char *)v21 - v57;
  v59 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v63);
  v60 = (uint64_t)v21 - v59;
  v64 = type metadata accessor for GroupBlobEnvelope();
  v65 = *(_QWORD *)(v64 - 8);
  v66 = (*(_QWORD *)(v65 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v63);
  v67 = (uint64_t)v21 - v66;
  v96 = (char *)v21 - v66;
  v95 = v5;
  v93 = v6;
  v94 = v7;
  v92 = v3;
  v69 = (int *)type metadata accessor for GroupUpdater.MembershipUpdateResponse();
  v70 = *(uint64_t *)((char *)v68 + v69[7]);
  swift_bridgeObjectRetain();
  v91 = v70;
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
  v8 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v9 = v73;
  v74 = v8;
  v10 = Sequence.compactMap<A>(_:)();
  v75 = v9;
  v76 = v10;
  if (v9)
  {
    __break(1u);
    goto LABEL_7;
  }
  v42 = v76;
  outlined destroy of [GPKMember]();
  v90 = v42;
  swift_bridgeObjectRetain();
  v46 = &v89;
  v89 = v42;
  v43 = type metadata accessor for GPKUserID();
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(GPKUserID, String)]);
  v45 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v47 = lazy protocol witness table accessor for type [(GPKUserID, String)] and conformance [A]();
  v11 = Dictionary.init<A>(uniqueKeysWithValues:)();
  v12 = v75;
  v48 = v11;
  v88 = v11;
  v49 = *(uint64_t *)((char *)v68 + v69[8]);
  swift_bridgeObjectRetain();
  v87 = v49;
  v13 = Sequence.compactMap<A>(_:)();
  v50 = v12;
  v51 = v13;
  if (v12)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v37 = v51;
  outlined destroy of [GPKMember]();
  v86 = v37;
  swift_bridgeObjectRetain();
  v85 = v37;
  v14 = Dictionary.init<A>(uniqueKeysWithValues:)();
  v15 = v50;
  v38 = v14;
  v84 = v14;
  v39 = *(uint64_t *)((char *)v68 + v69[9]);
  swift_bridgeObjectRetain();
  v83 = v39;
  v16 = Sequence.compactMap<A>(_:)();
  v40 = v15;
  v41 = v16;
  if (v15)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v23 = v41;
  outlined destroy of [GPKMember]();
  v82 = v23;
  swift_bridgeObjectRetain();
  v81 = v23;
  v32 = Dictionary.init<A>(uniqueKeysWithValues:)();
  v80 = v32;
  v24 = *v68;
  swift_retain();
  v25 = dispatch thunk of GPKGroup.version.getter();
  swift_release();
  v28 = &v78;
  v78 = v25;
  v26 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v27 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int64 and conformance Int64();
  UnsignedInteger<>.init<A>(_:)();
  v29 = v79;
  v77 = v79;
  outlined init with copy of GKCrypto_GroupBlob((uint64_t)v68 + v69[6], v60);
  GroupBlobEnvelope.init(groupBlob:groupVersion:)(v60, v29, v67);
  v31 = *v68;
  swift_retain();
  dispatch thunk of GPKGroup.groupID.getter();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined init with copy of GroupBlobEnvelope(v67, (uint64_t)v53);
  (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v53, 0, 1, v64);
  MembershipUpdateIDSMessage.init(groupID:from:addedHandles:removedHandles:toggledHandles:groupBlobEnvelope:)(v55, v62, v61, v48, v38, v32, v53, v58);
  IDSMessageCoder.init()();
  v33 = lazy protocol witness table accessor for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage();
  v17 = lazy protocol witness table accessor for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage();
  v18 = v40;
  v19 = IDSMessageCoder.encode<A>(_:)(v58, updated, v33, v17);
  v34 = v18;
  v35 = v19;
  v36 = v18;
  if (!v18)
  {
    v22 = v35;
    outlined destroy of MembershipUpdateIDSMessage(v58);
    outlined destroy of GroupBlobEnvelope(v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22;
  }
LABEL_9:
  v21[1] = v36;
  outlined destroy of MembershipUpdateIDSMessage(v58);
  outlined destroy of GroupBlobEnvelope(v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v30;
}

uint64_t closure #2 in GroupUpdater.sendGroupMembershipUpdate(response:from:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = dispatch thunk of GPKMember.handle.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t GroupUpdater.constructRemovalMessage(response:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  double v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;

  v11 = a1;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v16 = 0;
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GPKGroupID() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v15 = (uint64_t)v8 - v10;
  v17 = type metadata accessor for GroupEventIDSMessage();
  v12 = (*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v20 = (char *)v8 - v12;
  v26 = (char *)v8 - v12;
  v25 = v2;
  v24 = v1;
  v14 = *v2;
  swift_retain();
  dispatch thunk of GPKGroup.groupID.getter();
  swift_release();
  v3 = default argument 2 of GroupEventIDSMessage.init(event:groupID:version:eventInfo:)();
  GroupEventIDSMessage.init(event:groupID:version:eventInfo:)(2, v15, v16, v20, v3);
  IDSMessageCoder.init()();
  v18 = lazy protocol witness table accessor for type GroupEventIDSMessage and conformance GroupEventIDSMessage();
  v4 = lazy protocol witness table accessor for type GroupEventIDSMessage and conformance GroupEventIDSMessage();
  v5 = v19;
  v6 = IDSMessageCoder.encode<A>(_:)((uint64_t)v20, v17, v18, v4);
  v21 = v5;
  v22 = v6;
  v23 = v5;
  if (v5)
  {
    v8[1] = v23;
    outlined destroy of GroupEventIDSMessage((uint64_t)v20);
    return v13;
  }
  else
  {
    v9 = v22;
    outlined destroy of GroupEventIDSMessage((uint64_t)v20);
    return v9;
  }
}

uint64_t closure #1 in GroupUpdater.sendMetadataUpdate(group:from:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = dispatch thunk of GPKMember.handle.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t closure #1 in GroupUpdater.constructMembershipUpdateMessage(response:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v14 = a2;
  v16 = a1;
  v24 = 0;
  v23 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v15 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v21 = (uint64_t)&v12 - v15;
  v22 = type metadata accessor for GPKUserID();
  v20 = *(_QWORD *)(v22 - 8);
  v17 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v12 - v17;
  v24 = (char *)&v12 - v17;
  v19 = *v3;
  v23 = v19;
  dispatch thunk of GPKMember.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v22) == 1)
  {
    outlined destroy of GPKUserID?(v21);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v14, 1);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v18, v21, v22);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    v12 = (uint64_t *)(v14 + *(int *)(v13 + 48));
    (*(void (**)(void))(v20 + 16))();
    v6 = dispatch thunk of GPKMember.handle.getter();
    v7 = v12;
    v8 = v13;
    v9 = v6;
    v10 = v14;
    *v12 = v9;
    v7[1] = v11;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v10, 0, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v18, v22);
  }
}

uint64_t closure #2 in GroupUpdater.constructMembershipUpdateMessage(response:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v14 = a2;
  v16 = a1;
  v24 = 0;
  v23 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v15 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v21 = (uint64_t)&v12 - v15;
  v22 = type metadata accessor for GPKUserID();
  v20 = *(_QWORD *)(v22 - 8);
  v17 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v12 - v17;
  v24 = (char *)&v12 - v17;
  v19 = *v3;
  v23 = v19;
  dispatch thunk of GPKMember.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v22) == 1)
  {
    outlined destroy of GPKUserID?(v21);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v14, 1);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v18, v21, v22);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    v12 = (uint64_t *)(v14 + *(int *)(v13 + 48));
    (*(void (**)(void))(v20 + 16))();
    v6 = dispatch thunk of GPKMember.handle.getter();
    v7 = v12;
    v8 = v13;
    v9 = v6;
    v10 = v14;
    *v12 = v9;
    v7[1] = v11;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v10, 0, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v18, v22);
  }
}

uint64_t closure #3 in GroupUpdater.constructMembershipUpdateMessage(response:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v14 = a2;
  v16 = a1;
  v24 = 0;
  v23 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v15 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v21 = (uint64_t)&v12 - v15;
  v22 = type metadata accessor for GPKUserID();
  v20 = *(_QWORD *)(v22 - 8);
  v17 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v12 - v17;
  v24 = (char *)&v12 - v17;
  v19 = *v3;
  v23 = v19;
  dispatch thunk of GPKMember.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v21, 1, v22) == 1)
  {
    outlined destroy of GPKUserID?(v21);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v14, 1);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v18, v21, v22);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    v12 = (uint64_t *)(v14 + *(int *)(v13 + 48));
    (*(void (**)(void))(v20 + 16))();
    v6 = dispatch thunk of GPKMember.handle.getter();
    v7 = v12;
    v8 = v13;
    v9 = v6;
    v10 = v14;
    *v12 = v9;
    v7[1] = v11;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v10, 0, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v18, v22);
  }
}

void *GroupUpdater.init(client:userStore:groupStore:metadataStore:groupService:metadataService:userLookup:accountManager:peerMessagingService:broadcaster:metrics:cryptoService:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, const void *a4@<X3>, const void *a5@<X4>, const void *a6@<X5>, const void *a7@<X6>, const void *a8@<X7>, _QWORD *a9@<X8>, const void *a10, uint64_t a11, const void *a12, const void *a13)
{
  outlined init with take of Client(a1, a9);
  outlined init with take of UserStore(a2, a9 + 5);
  outlined init with take of GroupStore(a3, a9 + 10);
  outlined init with take of MetadataStore(a4, a9 + 15);
  memcpy(a9 + 20, a5, 0xC0uLL);
  memcpy(a9 + 44, a6, 0x88uLL);
  outlined init with take of UserLookupManager(a7, a9 + 61);
  outlined init with take of DaemonAccountManagerProtocol(a8, a9 + 66);
  outlined init with take of PeerMessagingServiceProviding(a10, a9 + 71);
  a9[76] = a11;
  memcpy(a9 + 77, a12, 0xCAuLL);
  return outlined init with take of CryptographyServiceProviding(a13, a9 + 103);
}

uint64_t outlined destroy of GPKMetadata?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for GPKMetadata();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of MetadataService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 96);
  return a1;
}

_OWORD *outlined init with take of (key: String, value: GPKUpdateGroupRequest.Member)?(_OWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  char *v6;
  uint64_t v9;
  uint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: GPKUpdateGroupRequest.Member));
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v10 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: GPKUpdateGroupRequest.Member)?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    v6 = (char *)a2 + *(int *)(v9 + 48);
    v5 = (char *)a1 + *(int *)(v9 + 48);
    v2 = type metadata accessor for GPKUpdateGroupRequest.Member();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(v6, v5);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type Int64 and conformance Int64()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE4040], MEMORY[0x24BEE4008]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE4048], MEMORY[0x24BEE4008]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE4030], MEMORY[0x24BEE4008]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[GPKMember]>()
{
  swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in GroupUpdater.sendGroupMembershipUpdate(response:from:)()
{
  return closure #1 in GroupUpdater.sendGroupMembershipUpdate(response:from:)() & 1;
}

unint64_t lazy protocol witness table accessor for type GroupEventIDSMessage and conformance GroupEventIDSMessage()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupEventIDSMessage and conformance GroupEventIDSMessage;
  if (!lazy protocol witness table cache variable for type GroupEventIDSMessage and conformance GroupEventIDSMessage)
  {
    v0 = type metadata accessor for GroupEventIDSMessage();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GroupEventIDSMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupEventIDSMessage and conformance GroupEventIDSMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupEventIDSMessage and conformance GroupEventIDSMessage;
  if (!lazy protocol witness table cache variable for type GroupEventIDSMessage and conformance GroupEventIDSMessage)
  {
    v0 = type metadata accessor for GroupEventIDSMessage();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GroupEventIDSMessage, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupEventIDSMessage and conformance GroupEventIDSMessage);
    return v1;
  }
  return v3;
}

uint64_t partial apply for closure #2 in GroupUpdater.resolvedMembers(request:group:)(char *a1)
{
  uint64_t *v1;

  return closure #2 in GroupUpdater.resolvedMembers(request:group:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #3 in GroupUpdater.resolvedMembers(request:group:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #3 in GroupUpdater.resolvedMembers(request:group:)(a1, *(uint64_t **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t partial apply for closure #4 in GroupUpdater.resolvedMembers(request:group:)@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #4 in GroupUpdater.resolvedMembers(request:group:)(a1, *(_QWORD **)(v2 + 16), *(uint64_t **)(v2 + 24), a2);
}

uint64_t partial apply for closure #5 in GroupUpdater.resolvedMembers(request:group:)@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #5 in GroupUpdater.resolvedMembers(request:group:)(a1, *(_QWORD **)(v2 + 16), a2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Set<GPKUserID>()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of GPKMember?()
{
  swift_release();
}

unint64_t lazy protocol witness table accessor for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage()
{
  uint64_t updated;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage;
  if (!lazy protocol witness table cache variable for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage)
  {
    updated = type metadata accessor for MembershipUpdateIDSMessage();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for MembershipUpdateIDSMessage, updated);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage);
    return v1;
  }
  return v3;
}

{
  uint64_t updated;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage;
  if (!lazy protocol witness table cache variable for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage)
  {
    updated = type metadata accessor for MembershipUpdateIDSMessage();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for MembershipUpdateIDSMessage, updated);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type MembershipUpdateIDSMessage and conformance MembershipUpdateIDSMessage);
    return v1;
  }
  return v3;
}

void *outlined init with take of GroupStore(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of MetadataStore(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of UserLookupManager(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of DaemonAccountManagerProtocol(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of PeerMessagingServiceProviding(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

void *outlined init with take of CryptographyServiceProviding(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t initializeBufferWithCopyOfBuffer for GroupUpdater(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for GroupUpdater(_QWORD *a1)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 10));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 15));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 20));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 25));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 30));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 35));
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(a1[42], a1[43]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 44));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 49));
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 56));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 61));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 66));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 71));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 77));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 82));
  if (a1[90])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 87));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 103));
}

uint64_t initializeWithCopy for GroupUpdater(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  (**(void (***)(void))(v2 - 8))();
  v3 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 40, a2 + 40);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 80, a2 + 80);
  v5 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v5;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 120, a2 + 120);
  v6 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v6;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 160, a2 + 160);
  v7 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 224) = v7;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 200, a2 + 200);
  v8 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 264) = v8;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 240, a2 + 240);
  v9 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 304) = v9;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 280, a2 + 280);
  v26 = *(_QWORD *)(a2 + 320);
  swift_unknownObjectRetain();
  v10 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v26;
  *(_QWORD *)(a1 + 328) = v10;
  v27 = *(_QWORD *)(a2 + 336);
  v28 = *(_QWORD *)(a2 + 344);
  outlined copy of Data._Representation(v27, v28);
  *(_QWORD *)(a1 + 336) = v27;
  *(_QWORD *)(a1 + 344) = v28;
  v11 = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 376) = v11;
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 352, a2 + 352);
  v12 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 416) = v12;
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 392, a2 + 392);
  v29 = *(_QWORD *)(a2 + 432);
  swift_unknownObjectRetain();
  v13 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = v29;
  *(_QWORD *)(a1 + 440) = v13;
  v14 = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 472) = v14;
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 448, a2 + 448);
  v15 = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 512) = v15;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 488, a2 + 488);
  v16 = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 552) = v16;
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1 + 528, a2 + 528);
  v17 = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 592) = v17;
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 568, a2 + 568);
  v30 = *(_QWORD *)(a2 + 608);
  swift_retain();
  *(_QWORD *)(a1 + 608) = v30;
  v18 = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 640) = v18;
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 616, a2 + 616);
  v19 = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a1 + 680) = v19;
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1 + 656, a2 + 656);
  if (*(_QWORD *)(a2 + 720))
  {
    v20 = *(_QWORD *)(a2 + 720);
    *(_QWORD *)(a1 + 720) = v20;
    *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
    (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 696, a2 + 696);
  }
  else
  {
    memcpy((void *)(a1 + 696), (const void *)(a2 + 696), 0x28uLL);
  }
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_BYTE *)(a1 + 752) = *(_BYTE *)(a2 + 752);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  v23 = *(_QWORD *)(a2 + 776);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 776) = v23;
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
  v24 = *(_QWORD *)(a2 + 792);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 792) = v24;
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  v25 = *(_QWORD *)(a2 + 808);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 808) = v25;
  *(_WORD *)(a1 + 816) = *(_WORD *)(a2 + 816);
  v21 = *(_QWORD *)(a2 + 848);
  *(_QWORD *)(a1 + 848) = v21;
  *(_QWORD *)(a1 + 856) = *(_QWORD *)(a2 + 856);
  (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 824, a2 + 824);
  return a1;
}

uint64_t assignWithCopy for GroupUpdater(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  __swift_assign_boxed_opaque_existential_1(a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, (uint64_t *)(a2 + 40));
  __swift_assign_boxed_opaque_existential_1(a1 + 80, (uint64_t *)(a2 + 80));
  __swift_assign_boxed_opaque_existential_1(a1 + 120, (uint64_t *)(a2 + 120));
  __swift_assign_boxed_opaque_existential_1(a1 + 160, (uint64_t *)(a2 + 160));
  __swift_assign_boxed_opaque_existential_1(a1 + 200, (uint64_t *)(a2 + 200));
  __swift_assign_boxed_opaque_existential_1(a1 + 240, (uint64_t *)(a2 + 240));
  __swift_assign_boxed_opaque_existential_1(a1 + 280, (uint64_t *)(a2 + 280));
  v9 = *(_QWORD *)(a2 + 320);
  swift_unknownObjectRetain();
  v10 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = v9;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 328) = v10;
  v11 = *(_QWORD *)(a2 + 336);
  v12 = *(_QWORD *)(a2 + 344);
  outlined copy of Data._Representation(v11, v12);
  v2 = *(_QWORD *)(a1 + 336);
  v3 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 336) = v11;
  *(_QWORD *)(a1 + 344) = v12;
  outlined consume of Data._Representation(v2, v3);
  __swift_assign_boxed_opaque_existential_1(a1 + 352, (uint64_t *)(a2 + 352));
  __swift_assign_boxed_opaque_existential_1(a1 + 392, (uint64_t *)(a2 + 392));
  v13 = *(_QWORD *)(a2 + 432);
  swift_unknownObjectRetain();
  v14 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = v13;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 440) = v14;
  __swift_assign_boxed_opaque_existential_1(a1 + 448, (uint64_t *)(a2 + 448));
  __swift_assign_boxed_opaque_existential_1(a1 + 488, (uint64_t *)(a2 + 488));
  __swift_assign_boxed_opaque_existential_1(a1 + 528, (uint64_t *)(a2 + 528));
  __swift_assign_boxed_opaque_existential_1(a1 + 568, (uint64_t *)(a2 + 568));
  v15 = *(_QWORD *)(a2 + 608);
  swift_retain();
  *(_QWORD *)(a1 + 608) = v15;
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 616, (uint64_t *)(a2 + 616));
  __swift_assign_boxed_opaque_existential_1(a1 + 656, (uint64_t *)(a2 + 656));
  if (*(_QWORD *)(a1 + 720))
  {
    if (*(_QWORD *)(a2 + 720))
    {
      __swift_assign_boxed_opaque_existential_1(a1 + 696, (uint64_t *)(a2 + 696));
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 696);
      memcpy((void *)(a1 + 696), (const void *)(a2 + 696), 0x28uLL);
    }
  }
  else if (*(_QWORD *)(a2 + 720))
  {
    v4 = *(_QWORD *)(a2 + 720);
    *(_QWORD *)(a1 + 720) = v4;
    *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 696, a2 + 696);
  }
  else
  {
    memcpy((void *)(a1 + 696), (const void *)(a2 + 696), 0x28uLL);
  }
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  *(_BYTE *)(a1 + 752) = *(_BYTE *)(a2 + 752) & 1;
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  v6 = *(_QWORD *)(a2 + 776);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 776) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
  v7 = *(_QWORD *)(a2 + 792);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 792) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  v8 = *(_QWORD *)(a2 + 808);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 808) = v8;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 816) = *(_WORD *)(a2 + 816);
  __swift_assign_boxed_opaque_existential_1(a1 + 824, (uint64_t *)(a2 + 824));
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy864_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x360uLL);
}

uint64_t assignWithTake for GroupUpdater(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;

  __swift_destroy_boxed_opaque_existential_1(a1);
  memcpy((void *)a1, (const void *)a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  memcpy((void *)(a1 + 120), (const void *)(a2 + 120), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 200);
  memcpy((void *)(a1 + 200), (const void *)(a2 + 200), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 240);
  memcpy((void *)(a1 + 240), (const void *)(a2 + 240), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 280);
  memcpy((void *)(a1 + 280), (const void *)(a2 + 280), 0x28uLL);
  v6 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 328) = v6;
  v2 = *(_QWORD *)(a2 + 344);
  v3 = *(_QWORD *)(a1 + 336);
  v4 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = v2;
  outlined consume of Data._Representation(v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1 + 352);
  memcpy((void *)(a1 + 352), (const void *)(a2 + 352), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 392);
  memcpy((void *)(a1 + 392), (const void *)(a2 + 392), 0x28uLL);
  v7 = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 440) = v7;
  __swift_destroy_boxed_opaque_existential_1(a1 + 448);
  memcpy((void *)(a1 + 448), (const void *)(a2 + 448), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 488);
  memcpy((void *)(a1 + 488), (const void *)(a2 + 488), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 528);
  memcpy((void *)(a1 + 528), (const void *)(a2 + 528), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 568);
  memcpy((void *)(a1 + 568), (const void *)(a2 + 568), 0x30uLL);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 616);
  memcpy((void *)(a1 + 616), (const void *)(a2 + 616), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 656);
  memcpy((void *)(a1 + 656), (const void *)(a2 + 656), 0x28uLL);
  if (*(_QWORD *)(a1 + 720))
    __swift_destroy_boxed_opaque_existential_1(a1 + 696);
  memcpy((void *)(a1 + 696), (const void *)(a2 + 696), 0x38uLL);
  *(_BYTE *)(a1 + 752) = *(_BYTE *)(a2 + 752) & 1;
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 760);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 768);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 776);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
  *(_QWORD *)(a1 + 792) = *(_QWORD *)(a2 + 792);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 800) = *(_QWORD *)(a2 + 800);
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 816) = *(_WORD *)(a2 + 816);
  __swift_destroy_boxed_opaque_existential_1(a1 + 824);
  memcpy((void *)(a1 + 824), (const void *)(a2 + 824), 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupUpdater(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 864))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for GroupUpdater(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 108;
  if (a2 < 0)
  {
    result[95] = 0;
    result[94] = 0;
    result[93] = 0;
    result[92] = 0;
    result[91] = 0;
    result[90] = 0;
    result[89] = 0;
    result[88] = 0;
    result[87] = 0;
    result[86] = 0;
    result[85] = 0;
    result[84] = 0;
    result[83] = 0;
    result[82] = 0;
    result[81] = 0;
    result[80] = 0;
    result[79] = 0;
    result[78] = 0;
    result[77] = 0;
    result[76] = 0;
    result[75] = 0;
    result[74] = 0;
    result[73] = 0;
    result[72] = 0;
    result[71] = 0;
    result[70] = 0;
    result[69] = 0;
    result[68] = 0;
    result[67] = 0;
    result[66] = 0;
    result[65] = 0;
    result[64] = 0;
    result[63] = 0;
    result[62] = 0;
    result[61] = 0;
    result[60] = 0;
    result[59] = 0;
    result[58] = 0;
    result[57] = 0;
    result[56] = 0;
    result[55] = 0;
    result[54] = 0;
    result[53] = 0;
    result[52] = 0;
    result[51] = 0;
    result[50] = 0;
    result[49] = 0;
    result[48] = 0;
    result[47] = 0;
    result[46] = 0;
    result[45] = 0;
    result[44] = 0;
    result[43] = 0;
    result[42] = 0;
    result[41] = 0;
    result[40] = 0;
    result[39] = 0;
    result[38] = 0;
    result[37] = 0;
    result[36] = 0;
    result[35] = 0;
    result[34] = 0;
    result[33] = 0;
    result[32] = 0;
    result[31] = 0;
    result[30] = 0;
    result[29] = 0;
    result[28] = 0;
    result[27] = 0;
    result[26] = 0;
    result[25] = 0;
    result[24] = 0;
    result[23] = 0;
    result[22] = 0;
    result[21] = 0;
    result[20] = 0;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[103] = 0;
    result[102] = 0;
    result[101] = 0;
    result[100] = 0;
    result[99] = 0;
    result[98] = 0;
    result[97] = 0;
    result[96] = 0;
    result[107] = 0;
    result[106] = 0;
    result[105] = 0;
    result[104] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      result[3] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupUpdater()
{
  return &type metadata for GroupUpdater;
}

unint64_t initializeBufferWithCopyOfBuffer for GroupUpdater.MembershipUpdateResponse(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *__dst;
  char *__src;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *);
  _QWORD *v49;
  int *v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v61;

  v61 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v61 & 0x20000) != 0)
  {
    v56 = *a2;
    swift_retain();
    *a1 = v56;
    return *a1 + ((v61 + 16) & ~(unint64_t)v61);
  }
  else
  {
    v39 = *a2;
    swift_retain();
    *a1 = v39;
    v40 = a2[1];
    swift_bridgeObjectRetain();
    a1[1] = v40;
    v3 = a3[6];
    v49 = (_QWORD *)((char *)a1 + v3);
    v51 = (char *)a2 + v3;
    *(_DWORD *)((char *)a1 + v3) = *(_DWORD *)((char *)a2 + v3);
    v41 = *(uint64_t *)((char *)a2 + v3 + 8);
    v42 = *(uint64_t *)((char *)a2 + v3 + 16);
    outlined copy of Data._Representation(v41, v42);
    v49[1] = v41;
    v49[2] = v42;
    v43 = *((_QWORD *)v51 + 3);
    v44 = *((_QWORD *)v51 + 4);
    outlined copy of Data._Representation(v43, v44);
    v49[3] = v43;
    v49[4] = v44;
    v50 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v46 = (char *)v49 + v50[7];
    v45 = &v51[v50[7]];
    v47 = type metadata accessor for UnknownStorage();
    v48 = *(void (**)(char *, char *))(*(_QWORD *)(v47 - 8) + 16);
    v48(v46, v45);
    v52 = (_QWORD *)((char *)v49 + v50[8]);
    v53 = &v51[v50[8]];
    v54 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v55 = *(_QWORD *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v55 + 48))(v53, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v38 = *(_QWORD *)v53;
      swift_bridgeObjectRetain();
      *v52 = v38;
      ((void (*)(char *, char *, uint64_t))v48)((char *)v52 + *(int *)(v54 + 20), &v53[*(int *)(v54 + 20)], v47);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
    }
    __dst = (_QWORD *)((char *)v49 + v50[9]);
    __src = &v51[v50[9]];
    v36 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v37 + 48))(__src, 1))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      v26 = *(_QWORD *)__src;
      v27 = *((_QWORD *)__src + 1);
      outlined copy of Data._Representation(*(_QWORD *)__src, v27);
      *__dst = v26;
      __dst[1] = v27;
      v28 = *((_QWORD *)__src + 2);
      v29 = *((_QWORD *)__src + 3);
      outlined copy of Data._Representation(v28, v29);
      __dst[2] = v28;
      __dst[3] = v29;
      v30 = *((_QWORD *)__src + 4);
      v31 = *((_QWORD *)__src + 5);
      outlined copy of Data._Representation(v30, v31);
      __dst[4] = v30;
      __dst[5] = v31;
      v32 = *((_QWORD *)__src + 6);
      v33 = *((_QWORD *)__src + 7);
      outlined copy of Data._Representation(v32, v33);
      __dst[6] = v32;
      __dst[7] = v33;
      ((void (*)(char *, char *, uint64_t))v48)((char *)__dst + *(int *)(v36 + 32), &__src[*(int *)(v36 + 32)], v47);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v36);
    }
    v22 = (_QWORD *)((char *)v49 + v50[10]);
    v23 = &v51[v50[10]];
    v24 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v25 + 48))(v23, 1))
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v16 = *(_QWORD *)v23;
      v17 = *((_QWORD *)v23 + 1);
      outlined copy of Data._Representation(*(_QWORD *)v23, v17);
      *v22 = v16;
      v22[1] = v17;
      v18 = *((_QWORD *)v23 + 2);
      v19 = *((_QWORD *)v23 + 3);
      outlined copy of Data._Representation(v18, v19);
      v22[2] = v18;
      v22[3] = v19;
      v20 = *((_QWORD *)v23 + 4);
      v21 = *((_QWORD *)v23 + 5);
      outlined copy of Data._Representation(v20, v21);
      v22[4] = v20;
      v22[5] = v21;
      ((void (*)(char *, char *, uint64_t))v48)((char *)v22 + *(int *)(v24 + 28), &v23[*(int *)(v24 + 28)], v47);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v8 = a3[7];
    v9 = *(uint64_t *)((char *)a2 + v8);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v8) = v9;
    v10 = a3[8];
    v11 = *(uint64_t *)((char *)a2 + v10);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v10) = v11;
    v12 = a3[9];
    v13 = *(uint64_t *)((char *)a2 + v12);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v12) = v13;
    v14 = a3[10];
    v15 = *(uint64_t *)((char *)a2 + v14);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v14) = v15;
    return (unint64_t)a1;
  }
}

uint64_t destroy for GroupUpdater.MembershipUpdateResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  int *v13;
  uint64_t v14;
  uint64_t v15;

  swift_release();
  swift_bridgeObjectRelease();
  v9 = *(int *)(a2 + 24);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v9 + 8), *(_QWORD *)(a1 + v9 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v9 + 24), *(_QWORD *)(a1 + v9 + 32));
  v13 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v10 = v13[7];
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(a1 + v9 + v10);
  v14 = v13[8];
  v15 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(a1 + v9 + v14, 1))
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v12)(a1 + v9 + v14 + *(int *)(v15 + 20), v11);
  }
  v5 = a1 + v9 + v13[9];
  v6 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56));
    ((void (*)(uint64_t, uint64_t))v12)(v5 + *(int *)(v6 + 32), v11);
  }
  v3 = a1 + v9 + v13[10];
  v4 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
    ((void (*)(uint64_t, uint64_t))v12)(v3 + *(int *)(v4 + 28), v11);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for GroupUpdater.MembershipUpdateResponse(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *__dst;
  char *__src;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *);
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = *(_QWORD *)a2;
  swift_retain();
  *(_QWORD *)a1 = v40;
  v42 = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  *((_QWORD *)a1 + 1) = v42;
  v45 = a3[6];
  v50 = &a1[v45];
  *(_DWORD *)&a1[v45] = *(_DWORD *)&a2[v45];
  v46 = *(_QWORD *)&a2[v45 + 8];
  v47 = *(_QWORD *)&a2[v45 + 16];
  outlined copy of Data._Representation(v46, v47);
  *((_QWORD *)v50 + 1) = v46;
  *((_QWORD *)v50 + 2) = v47;
  v48 = *(_QWORD *)&a2[v45 + 24];
  v49 = *(_QWORD *)&a2[v45 + 32];
  outlined copy of Data._Representation(v48, v49);
  *((_QWORD *)v50 + 3) = v48;
  *((_QWORD *)v50 + 4) = v49;
  v54 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v51 = v54[7];
  v52 = type metadata accessor for UnknownStorage();
  v53 = *(void (**)(char *, char *))(*(_QWORD *)(v52 - 8) + 16);
  v53(&a1[v45 + v51], &a2[v45 + v51]);
  v55 = v54[8];
  v56 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v57 + 48))(&a2[v45 + v55], 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(&a1[v45 + v55], &a2[v45 + v55], *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v38 = &a2[v45 + v55];
    v37 = *(_QWORD *)v38;
    swift_bridgeObjectRetain();
    v39 = &a1[v45 + v55];
    *(_QWORD *)v39 = v37;
    ((void (*)(char *, char *, uint64_t))v53)(&v39[*(int *)(v56 + 20)], &v38[*(int *)(v56 + 20)], v52);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v39, 0, 1, v56);
  }
  __dst = &a1[v45 + v54[9]];
  __src = &a2[v45 + v54[9]];
  v35 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v36 + 48))(__src, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v25 = *(_QWORD *)__src;
    v26 = *((_QWORD *)__src + 1);
    outlined copy of Data._Representation(*(_QWORD *)__src, v26);
    *(_QWORD *)__dst = v25;
    *((_QWORD *)__dst + 1) = v26;
    v27 = *((_QWORD *)__src + 2);
    v28 = *((_QWORD *)__src + 3);
    outlined copy of Data._Representation(v27, v28);
    *((_QWORD *)__dst + 2) = v27;
    *((_QWORD *)__dst + 3) = v28;
    v29 = *((_QWORD *)__src + 4);
    v30 = *((_QWORD *)__src + 5);
    outlined copy of Data._Representation(v29, v30);
    *((_QWORD *)__dst + 4) = v29;
    *((_QWORD *)__dst + 5) = v30;
    v31 = *((_QWORD *)__src + 6);
    v32 = *((_QWORD *)__src + 7);
    outlined copy of Data._Representation(v31, v32);
    *((_QWORD *)__dst + 6) = v31;
    *((_QWORD *)__dst + 7) = v32;
    ((void (*)(char *, char *, uint64_t))v53)(&__dst[*(int *)(v35 + 32)], &__src[*(int *)(v35 + 32)], v52);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(__dst, 0, 1, v35);
  }
  v21 = &a1[v45 + v54[10]];
  v22 = &a2[v45 + v54[10]];
  v23 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v24 + 48))(v22, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v15 = *(_QWORD *)v22;
    v16 = *((_QWORD *)v22 + 1);
    outlined copy of Data._Representation(*(_QWORD *)v22, v16);
    *(_QWORD *)v21 = v15;
    *((_QWORD *)v21 + 1) = v16;
    v17 = *((_QWORD *)v22 + 2);
    v18 = *((_QWORD *)v22 + 3);
    outlined copy of Data._Representation(v17, v18);
    *((_QWORD *)v21 + 2) = v17;
    *((_QWORD *)v21 + 3) = v18;
    v19 = *((_QWORD *)v22 + 4);
    v20 = *((_QWORD *)v22 + 5);
    outlined copy of Data._Representation(v19, v20);
    *((_QWORD *)v21 + 4) = v19;
    *((_QWORD *)v21 + 5) = v20;
    ((void (*)(char *, char *, uint64_t))v53)(&v21[*(int *)(v23 + 28)], &v22[*(int *)(v23 + 28)], v52);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v7 = a3[7];
  v8 = *(_QWORD *)&a2[v7];
  swift_bridgeObjectRetain();
  *(_QWORD *)&a1[v7] = v8;
  v9 = a3[8];
  v10 = *(_QWORD *)&a2[v9];
  swift_bridgeObjectRetain();
  *(_QWORD *)&a1[v9] = v10;
  v11 = a3[9];
  v12 = *(_QWORD *)&a2[v11];
  swift_bridgeObjectRetain();
  *(_QWORD *)&a1[v11] = v12;
  v13 = a3[10];
  v14 = *(_QWORD *)&a2[v13];
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)&a1[v13] = v14;
  return result;
}

char *assignWithCopy for GroupUpdater.MembershipUpdateResponse(char *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(uint64_t *, uint64_t, uint64_t);
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *__src;
  char *__dst;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t *, uint64_t, uint64_t);
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, char *);
  int *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v100)(char *, uint64_t, uint64_t);

  v81 = *a2;
  swift_retain();
  *(_QWORD *)a1 = v81;
  swift_release();
  v82 = a2[1];
  swift_bridgeObjectRetain();
  *((_QWORD *)a1 + 1) = v82;
  swift_bridgeObjectRelease();
  v86 = a3[6];
  v96 = &a1[v86];
  *(_DWORD *)&a1[v86] = *(_DWORD *)((char *)a2 + v86);
  v87 = *(uint64_t *)((char *)a2 + v86 + 8);
  v88 = *(uint64_t *)((char *)a2 + v86 + 16);
  outlined copy of Data._Representation(v87, v88);
  v3 = *(_QWORD *)&a1[v86 + 8];
  v4 = *(_QWORD *)&a1[v86 + 16];
  *((_QWORD *)v96 + 1) = v87;
  *((_QWORD *)v96 + 2) = v88;
  outlined consume of Data._Representation(v3, v4);
  v89 = *(uint64_t *)((char *)a2 + v86 + 24);
  v90 = *(uint64_t *)((char *)a2 + v86 + 32);
  outlined copy of Data._Representation(v89, v90);
  v5 = *(_QWORD *)&a1[v86 + 24];
  v6 = *(_QWORD *)&a1[v86 + 32];
  *((_QWORD *)v96 + 3) = v89;
  *((_QWORD *)v96 + 4) = v90;
  outlined consume of Data._Representation(v5, v6);
  v95 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v91 = v95[7];
  v92 = type metadata accessor for UnknownStorage();
  v93 = *(_QWORD *)(v92 - 8);
  v94 = *(void (**)(char *, char *))(v93 + 24);
  v94(&a1[v86 + v91], (char *)a2 + v86 + v91);
  v97 = v95[8];
  v98 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v99 = *(_QWORD *)(v98 - 8);
  v100 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48);
  if (((unsigned int (*)(char *, uint64_t))v100)(&a1[v86 + v97], 1))
  {
    if (v100((char *)a2 + v86 + v97, 1, v98))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(&a1[v86 + v97], (char *)a2 + v86 + v97, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v75 = (char *)a2 + v86 + v97;
      v74 = *(_QWORD *)v75;
      swift_bridgeObjectRetain();
      v76 = &a1[v86 + v97];
      *(_QWORD *)v76 = v74;
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))(&v76[*(int *)(v98 + 20)], &v75[*(int *)(v98 + 20)], v92);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v76, 0, 1, v98);
    }
  }
  else if (v100((char *)a2 + v86 + v97, 1, v98))
  {
    v77 = &a1[v86 + v97];
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v77);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(v77, (char *)a2 + v86 + v97, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v80 = (uint64_t *)((char *)a2 + v86 + v97);
    v78 = *v80;
    swift_bridgeObjectRetain();
    v79 = &a1[v86 + v97];
    *(_QWORD *)v79 = v78;
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v94)(&v79[*(int *)(v98 + 20)], (char *)v80 + *(int *)(v98 + 20), v92);
  }
  __dst = &a1[v86 + v95[9]];
  __src = (uint64_t *)((char *)a2 + v86 + v95[9]);
  v71 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v72 = *(_QWORD *)(v71 - 8);
  v73 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v72 + 48);
  if (((unsigned int (*)(char *, uint64_t))v73)(__dst, 1))
  {
    if (v73(__src, 1, v71))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v53 = *__src;
      v54 = __src[1];
      outlined copy of Data._Representation(*__src, v54);
      *(_QWORD *)__dst = v53;
      *((_QWORD *)__dst + 1) = v54;
      v55 = __src[2];
      v56 = __src[3];
      outlined copy of Data._Representation(v55, v56);
      *((_QWORD *)__dst + 2) = v55;
      *((_QWORD *)__dst + 3) = v56;
      v57 = __src[4];
      v58 = __src[5];
      outlined copy of Data._Representation(v57, v58);
      *((_QWORD *)__dst + 4) = v57;
      *((_QWORD *)__dst + 5) = v58;
      v59 = __src[6];
      v60 = __src[7];
      outlined copy of Data._Representation(v59, v60);
      *((_QWORD *)__dst + 6) = v59;
      *((_QWORD *)__dst + 7) = v60;
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))(&__dst[*(int *)(v71 + 32)], (char *)__src + *(int *)(v71 + 32), v92);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(__dst, 0, 1, v71);
    }
  }
  else if (v73(__src, 1, v71))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)__dst);
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v61 = *__src;
    v62 = __src[1];
    outlined copy of Data._Representation(*__src, v62);
    v9 = *(_QWORD *)__dst;
    v10 = *((_QWORD *)__dst + 1);
    *(_QWORD *)__dst = v61;
    *((_QWORD *)__dst + 1) = v62;
    outlined consume of Data._Representation(v9, v10);
    v63 = __src[2];
    v64 = __src[3];
    outlined copy of Data._Representation(v63, v64);
    v11 = *((_QWORD *)__dst + 2);
    v12 = *((_QWORD *)__dst + 3);
    *((_QWORD *)__dst + 2) = v63;
    *((_QWORD *)__dst + 3) = v64;
    outlined consume of Data._Representation(v11, v12);
    v65 = __src[4];
    v66 = __src[5];
    outlined copy of Data._Representation(v65, v66);
    v13 = *((_QWORD *)__dst + 4);
    v14 = *((_QWORD *)__dst + 5);
    *((_QWORD *)__dst + 4) = v65;
    *((_QWORD *)__dst + 5) = v66;
    outlined consume of Data._Representation(v13, v14);
    v67 = __src[6];
    v68 = __src[7];
    outlined copy of Data._Representation(v67, v68);
    v15 = *((_QWORD *)__dst + 6);
    v16 = *((_QWORD *)__dst + 7);
    *((_QWORD *)__dst + 6) = v67;
    *((_QWORD *)__dst + 7) = v68;
    outlined consume of Data._Representation(v15, v16);
    ((void (*)(char *, char *, uint64_t))v94)(&__dst[*(int *)(v71 + 32)], (char *)__src + *(int *)(v71 + 32), v92);
  }
  v49 = &a1[v86 + v95[10]];
  v48 = (uint64_t *)((char *)a2 + v86 + v95[10]);
  v50 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v51 + 48);
  if (((unsigned int (*)(char *, uint64_t))v52)(v49, 1))
  {
    if (v52(v48, 1, v50))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v49, v48, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v36 = *v48;
      v37 = v48[1];
      outlined copy of Data._Representation(*v48, v37);
      *(_QWORD *)v49 = v36;
      *((_QWORD *)v49 + 1) = v37;
      v38 = v48[2];
      v39 = v48[3];
      outlined copy of Data._Representation(v38, v39);
      *((_QWORD *)v49 + 2) = v38;
      *((_QWORD *)v49 + 3) = v39;
      v40 = v48[4];
      v41 = v48[5];
      outlined copy of Data._Representation(v40, v41);
      *((_QWORD *)v49 + 4) = v40;
      *((_QWORD *)v49 + 5) = v41;
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))(&v49[*(int *)(v50 + 28)], (char *)v48 + *(int *)(v50 + 28), v92);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v49, 0, 1, v50);
    }
  }
  else if (v52(v48, 1, v50))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v49);
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v49, v48, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v42 = *v48;
    v43 = v48[1];
    outlined copy of Data._Representation(*v48, v43);
    v19 = *(_QWORD *)v49;
    v20 = *((_QWORD *)v49 + 1);
    *(_QWORD *)v49 = v42;
    *((_QWORD *)v49 + 1) = v43;
    outlined consume of Data._Representation(v19, v20);
    v44 = v48[2];
    v45 = v48[3];
    outlined copy of Data._Representation(v44, v45);
    v21 = *((_QWORD *)v49 + 2);
    v22 = *((_QWORD *)v49 + 3);
    *((_QWORD *)v49 + 2) = v44;
    *((_QWORD *)v49 + 3) = v45;
    outlined consume of Data._Representation(v21, v22);
    v46 = v48[4];
    v47 = v48[5];
    outlined copy of Data._Representation(v46, v47);
    v23 = *((_QWORD *)v49 + 4);
    v24 = *((_QWORD *)v49 + 5);
    *((_QWORD *)v49 + 4) = v46;
    *((_QWORD *)v49 + 5) = v47;
    outlined consume of Data._Representation(v23, v24);
    ((void (*)(char *, char *, uint64_t))v94)(&v49[*(int *)(v50 + 28)], (char *)v48 + *(int *)(v50 + 28), v92);
  }
  v28 = &a1[a3[7]];
  v29 = *(uint64_t *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  *(_QWORD *)v28 = v29;
  swift_bridgeObjectRelease();
  v30 = &a1[a3[8]];
  v31 = *(uint64_t *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  *(_QWORD *)v30 = v31;
  swift_bridgeObjectRelease();
  v32 = &a1[a3[9]];
  v33 = *(uint64_t *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  *(_QWORD *)v32 = v33;
  swift_bridgeObjectRelease();
  v34 = &a1[a3[10]];
  v35 = *(uint64_t *)((char *)a2 + a3[10]);
  swift_bridgeObjectRetain();
  *(_QWORD *)v34 = v35;
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for GroupUpdater.MembershipUpdateResponse(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *__dst;
  _OWORD *__src;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *);
  int *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = *a2;
  a1[1] = a2[1];
  v20 = a3[6];
  v27 = (char *)a2 + v20;
  v21 = (char *)a1 + v20;
  *(_DWORD *)v21 = *(_DWORD *)((char *)a2 + v20);
  *(_OWORD *)(v21 + 8) = *(_OWORD *)((char *)a2 + v20 + 8);
  *(_OWORD *)(v21 + 24) = *(_OWORD *)((char *)a2 + v20 + 24);
  v25 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v22 = v25[7];
  v23 = type metadata accessor for UnknownStorage();
  v24 = *(void (**)(char *, char *))(*(_QWORD *)(v23 - 8) + 32);
  v24(&v21[v22], &v27[v22]);
  v26 = v25[8];
  v28 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v29 + 48))(&v27[v26], 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((char *)a1 + v20 + v26, (char *)a2 + v20 + v26, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v3 = (_QWORD *)((char *)a2 + v20 + v26);
    v16 = (_QWORD *)((char *)a1 + v20 + v26);
    *v16 = *v3;
    ((void (*)(char *, char *, uint64_t))v24)((char *)v16 + *(int *)(v28 + 20), (char *)v3 + *(int *)(v28 + 20), v23);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v16, 0, 1, v28);
  }
  __dst = (_OWORD *)((char *)a1 + v20 + v25[9]);
  __src = (_OWORD *)((char *)a2 + v20 + v25[9]);
  v14 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v15 + 48))(__src, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    *__dst = *__src;
    __dst[1] = __src[1];
    __dst[2] = __src[2];
    __dst[3] = __src[3];
    ((void (*)(char *, char *, uint64_t))v24)((char *)__dst + *(int *)(v14 + 32), (char *)__src + *(int *)(v14 + 32), v23);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
  }
  v8 = (_OWORD *)((char *)a1 + v20 + v25[10]);
  v9 = (_OWORD *)((char *)a2 + v20 + v25[10]);
  v10 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v11 + 48))(v9, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *v8 = *v9;
    v8[1] = v9[1];
    v8[2] = v9[2];
    ((void (*)(char *, char *, uint64_t))v24)((char *)v8 + *(int *)(v10 + 28), (char *)v9 + *(int *)(v10 + 28), v23);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  result = a1;
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  return result;
}

char *assignWithTake for GroupUpdater.MembershipUpdateResponse(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  char *__src;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  char *__dst;
  char *v50;
  char *v51;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *);
  int *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRelease();
  v55 = a3[6];
  v61 = &a1[v55];
  *(_DWORD *)v61 = *(_DWORD *)&a2[v55];
  v3 = *(_QWORD *)&a2[v55 + 16];
  v4 = *(_QWORD *)&a1[v55 + 8];
  v5 = *(_QWORD *)&a1[v55 + 16];
  *((_QWORD *)v61 + 1) = *(_QWORD *)&a2[v55 + 8];
  *((_QWORD *)v61 + 2) = v3;
  outlined consume of Data._Representation(v4, v5);
  v6 = *(_QWORD *)&a2[v55 + 32];
  v7 = *(_QWORD *)&a1[v55 + 24];
  v8 = *(_QWORD *)&a1[v55 + 32];
  *((_QWORD *)v61 + 3) = *(_QWORD *)&a2[v55 + 24];
  *((_QWORD *)v61 + 4) = v6;
  outlined consume of Data._Representation(v7, v8);
  v60 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v56 = v60[7];
  v57 = type metadata accessor for UnknownStorage();
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(void (**)(char *, char *))(v58 + 40);
  v59(&a1[v55 + v56], &a2[v55 + v56]);
  v62 = v60[8];
  v63 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v64 = *(_QWORD *)(v63 - 8);
  v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48);
  if (((unsigned int (*)(char *, uint64_t))v65)(&a1[v55 + v62], 1))
  {
    if (v65(&a2[v55 + v62], 1, v63))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(&a1[v55 + v62], &a2[v55 + v62], *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      v10 = &a2[v55 + v62];
      v48 = &a1[v55 + v62];
      *(_QWORD *)v48 = *(_QWORD *)v10;
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(&v48[*(int *)(v63 + 20)], &v10[*(int *)(v63 + 20)], v57);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v48, 0, 1, v63);
    }
  }
  else if (v65(&a2[v55 + v62], 1, v63))
  {
    __dst = &a1[v55 + v62];
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)__dst);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(__dst, &a2[v55 + v62], *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v51 = &a2[v55 + v62];
    v50 = &a1[v55 + v62];
    *(_QWORD *)v50 = *(_QWORD *)v51;
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v59)(&v50[*(int *)(v63 + 20)], &v51[*(int *)(v63 + 20)], v57);
  }
  v44 = &a1[v55 + v60[9]];
  __src = &a2[v55 + v60[9]];
  v45 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
  if (((unsigned int (*)(char *, uint64_t))v47)(v44, 1))
  {
    if (v47(__src, 1, v45))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(v44, __src, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v44 = *(_OWORD *)__src;
      *((_OWORD *)v44 + 1) = *((_OWORD *)__src + 1);
      *((_OWORD *)v44 + 2) = *((_OWORD *)__src + 2);
      *((_OWORD *)v44 + 3) = *((_OWORD *)__src + 3);
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(&v44[*(int *)(v45 + 32)], &__src[*(int *)(v45 + 32)], v57);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v44, 0, 1, v45);
    }
  }
  else if (v47(__src, 1, v45))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v44);
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(v44, __src, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v12 = *((_QWORD *)__src + 1);
    v13 = *(_QWORD *)v44;
    v14 = *((_QWORD *)v44 + 1);
    *(_QWORD *)v44 = *(_QWORD *)__src;
    *((_QWORD *)v44 + 1) = v12;
    outlined consume of Data._Representation(v13, v14);
    v15 = *((_QWORD *)__src + 3);
    v16 = *((_QWORD *)v44 + 2);
    v17 = *((_QWORD *)v44 + 3);
    *((_QWORD *)v44 + 2) = *((_QWORD *)__src + 2);
    *((_QWORD *)v44 + 3) = v15;
    outlined consume of Data._Representation(v16, v17);
    v18 = *((_QWORD *)__src + 5);
    v19 = *((_QWORD *)v44 + 4);
    v20 = *((_QWORD *)v44 + 5);
    *((_QWORD *)v44 + 4) = *((_QWORD *)__src + 4);
    *((_QWORD *)v44 + 5) = v18;
    outlined consume of Data._Representation(v19, v20);
    v21 = *((_QWORD *)__src + 7);
    v22 = *((_QWORD *)v44 + 6);
    v23 = *((_QWORD *)v44 + 7);
    *((_QWORD *)v44 + 6) = *((_QWORD *)__src + 6);
    *((_QWORD *)v44 + 7) = v21;
    outlined consume of Data._Representation(v22, v23);
    ((void (*)(char *, char *, uint64_t))v59)(&v44[*(int *)(v45 + 32)], &__src[*(int *)(v45 + 32)], v57);
  }
  v39 = &a1[v55 + v60[10]];
  v38 = &a2[v55 + v60[10]];
  v40 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  if (((unsigned int (*)(char *, uint64_t))v42)(v39, 1))
  {
    if (v42(v38, 1, v40))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v39, v38, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v39 = *(_OWORD *)v38;
      *((_OWORD *)v39 + 1) = *((_OWORD *)v38 + 1);
      *((_OWORD *)v39 + 2) = *((_OWORD *)v38 + 2);
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(&v39[*(int *)(v40 + 28)], &v38[*(int *)(v40 + 28)], v57);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v39, 0, 1, v40);
    }
  }
  else if (v42(v38, 1, v40))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v39);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v39, v38, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v26 = *((_QWORD *)v38 + 1);
    v27 = *(_QWORD *)v39;
    v28 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v39 = *(_QWORD *)v38;
    *((_QWORD *)v39 + 1) = v26;
    outlined consume of Data._Representation(v27, v28);
    v29 = *((_QWORD *)v38 + 3);
    v30 = *((_QWORD *)v39 + 2);
    v31 = *((_QWORD *)v39 + 3);
    *((_QWORD *)v39 + 2) = *((_QWORD *)v38 + 2);
    *((_QWORD *)v39 + 3) = v29;
    outlined consume of Data._Representation(v30, v31);
    v32 = *((_QWORD *)v38 + 5);
    v33 = *((_QWORD *)v39 + 4);
    v34 = *((_QWORD *)v39 + 5);
    *((_QWORD *)v39 + 4) = *((_QWORD *)v38 + 4);
    *((_QWORD *)v39 + 5) = v32;
    outlined consume of Data._Representation(v33, v34);
    ((void (*)(char *, char *, uint64_t))v59)(&v39[*(int *)(v40 + 28)], &v38[*(int *)(v40 + 28)], v57);
  }
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupUpdater.MembershipUpdateResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D37476C(char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  if (a2 == 0x7FFFFFFF)
  {
    v7 = -1;
    if (*(_QWORD *)a1 < 0x100000000uLL)
      v7 = *(_QWORD *)a1;
    return (v7 + 1);
  }
  else
  {
    v4 = type metadata accessor for GKCrypto_GroupBlob();
    v5 = *(_QWORD *)(v4 - 8);
    if (a2 == *(_DWORD *)(v5 + 84))
      return (*(unsigned int (**)(char *, _QWORD, uint64_t))(v5 + 48))(&a1[*(int *)(a3 + 24)], a2, v4);
    else
      __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for GroupUpdater.MembershipUpdateResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D374864(char *result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 - 1;
  }
  else
  {
    result = (char *)type metadata accessor for GKCrypto_GroupBlob();
    v4 = *((_QWORD *)result - 1);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (char *)(*(uint64_t (**)(char *, _QWORD, _QWORD, char *))(v4 + 56))(&v5[*(int *)(a4 + 24)], a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GroupUpdater.MembershipUpdateResponse()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GKCrypto_GroupBlob();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Set<String> and conformance Set<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Set<String> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<String> and conformance Set<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE1718], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Set<String> and conformance Set<A>);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Set<String> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<String> and conformance Set<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE1728], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Set<String> and conformance Set<A>);
    return v1;
  }
  return v3;
}

uint64_t outlined init with take of GKCrypto_GroupBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *__dst;
  _OWORD *__src;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  int *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  v18 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v14 = v18[7];
  v16 = type metadata accessor for UnknownStorage();
  v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(a2 + v14, a1 + v14);
  v19 = v18[8];
  v21 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v22 + 48))(a1 + v19, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a2 + v19), (const void *)(a1 + v19), *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    *(_QWORD *)(a2 + v19) = *(_QWORD *)(a1 + v19);
    ((void (*)(uint64_t, uint64_t, uint64_t))v17)(a2 + v19 + *(int *)(v21 + 20), a1 + v19 + *(int *)(v21 + 20), v16);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(a2 + v19, 0, 1, v21);
  }
  __dst = (_OWORD *)(a2 + v18[9]);
  __src = (_OWORD *)(a1 + v18[9]);
  v12 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v13 + 48))(__src, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *__dst = *__src;
    __dst[1] = __src[1];
    __dst[2] = __src[2];
    __dst[3] = __src[3];
    ((void (*)(char *, char *, uint64_t))v17)((char *)__dst + *(int *)(v12 + 32), (char *)__src + *(int *)(v12 + 32), v16);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  v6 = (_OWORD *)(a2 + v18[10]);
  v7 = (_OWORD *)(a1 + v18[10]);
  v8 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v9 + 48))(v7, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    *v6 = *v7;
    v6[1] = v7[1];
    v6[2] = v7[2];
    ((void (*)(char *, char *, uint64_t))v17)((char *)v6 + *(int *)(v8 + 28), (char *)v7 + *(int *)(v8 + 28), v16);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a2;
}

uint64_t outlined destroy of (GPKUserID?, GPKUserID?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(void);

  v4 = type metadata accessor for GPKUserID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(void))(v5 + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v6)(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v2 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID?, GPKUserID?))
              + 48);
  if (!v6())
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  return a1;
}

uint64_t outlined destroy of GPKUpdateGroupRequest.Member?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

id CoreDataGroupStore.context.getter()
{
  id *v0;
  id v1;
  id v3;

  v3 = *v0;
  v1 = *v0;
  return v3;
}

float CoreDataGroupStore.clientModelVersion.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 168);
}

id *CoreDataGroupStore.init(context:userStore:metadataStore:transformer:cachedGroupStore:clientModelVersion:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, float a7@<S0>)
{
  id v7;
  _BYTE v16[40];
  _BYTE v17[40];
  _BYTE v18[40];
  _BYTE v19[40];
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id __b[22];

  memset(__b, 0, 0xACuLL);
  v25 = a1;
  v24 = a2;
  v23 = a3;
  v22 = a4;
  v21 = a5;
  v20 = a7;
  v7 = a1;
  __b[0] = a1;
  outlined init with copy of UserStore(a2, (uint64_t)v19);
  outlined init with take of UserStore(v19, &__b[1]);
  outlined init with copy of MetadataStore(a3, (uint64_t)v18);
  outlined init with take of MetadataStore(v18, &__b[6]);
  outlined init with copy of GroupTransforming(a4, (uint64_t)v17);
  outlined init with take of GroupTransforming(v17, &__b[11]);
  outlined init with copy of CachedGroupStore(a5, (uint64_t)v16);
  outlined init with take of CachedGroupStore(v16, &__b[16]);
  *(float *)&__b[21] = a7;
  outlined init with copy of CoreDataGroupStore((uint64_t)__b, a6);
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);

  return outlined destroy of CoreDataGroupStore(__b);
}

uint64_t outlined init with copy of GroupTransforming(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

void *outlined init with take of GroupTransforming(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t outlined init with copy of CoreDataGroupStore(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  id v8;

  v8 = *(id *)a1;
  v2 = *(id *)a1;
  *(_QWORD *)a2 = v8;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2 + 8, a1 + 8);
  v4 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 72) = v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2 + 48, a1 + 48);
  v5 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 112) = v5;
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a2 + 88, a1 + 88);
  v6 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a2 + 152) = v6;
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(a1 + 160);
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a2 + 128, a1 + 128);
  result = a2;
  *(_DWORD *)(a2 + 168) = *(_DWORD *)(a1 + 168);
  return result;
}

id *outlined destroy of CoreDataGroupStore(id *a1)
{

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 6));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 11));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 16));
  return a1;
}

void *CoreDataGroupStore.group(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  _QWORD *v4;
  id v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  void *v19;
  id *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t countAndFlagsBits;
  id *v51;
  void *object;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;

  v37 = a1;
  v65 = 0;
  v64 = 0;
  v63 = 0;
  v62 = 0;
  v61 = 0;
  v38 = 0;
  v46 = type metadata accessor for UUID();
  v45 = *(_QWORD *)(v46 - 8);
  v36 = (*(_QWORD *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v47 = (char *)&v27 - v36;
  v65 = v2;
  v64 = v1;
  v55 = type metadata accessor for Group();
  v57 = (id)static Group.fetchRequest()();
  v63 = v57;
  v39 = type metadata accessor for NSExpression();
  swift_getKeyPath();
  v40 = (id)NSExpression.init<A, B>(forKeyPath:)();
  v62 = v40;
  v41 = type metadata accessor for NSPredicate();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%@ == %@", 8uLL, 1);
  countAndFlagsBits = v3._countAndFlagsBits;
  object = v3._object;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v48 = _allocateUninitializedArray<A>(_:)();
  v44 = v4;
  v5 = v40;
  v44[3] = v39;
  v6 = lazy protocol witness table accessor for type NSExpression and conformance NSObject();
  v7 = v44;
  v8 = v6;
  v9 = v40;
  v44[4] = v8;
  *v7 = v9;
  GPKGroupID.uuid.getter();
  v42 = UUID.uuidString.getter();
  v43 = v10;
  v44[8] = MEMORY[0x24BEE0D00];
  v11 = lazy protocol witness table accessor for type String and conformance String();
  v12 = v42;
  v13 = v43;
  v14 = v44;
  v15 = v45;
  v16 = v46;
  v17 = v11;
  v18 = v47;
  v44[9] = v17;
  v14[5] = v12;
  v14[6] = v13;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v16);
  _finalizeUninitializedArray<A>(_:)();
  v19 = (void *)NSPredicate.init(format:_:)();
  v20 = v51;
  v53 = v19;
  swift_bridgeObjectRelease();
  objc_msgSend(v57, sel_setPredicate_, v53);

  v54 = *v20;
  v21 = v54;
  v22 = v56;
  v23 = NSManagedObjectContext.fetch<A>(_:)();
  v58 = v22;
  v59 = v23;
  v60 = v22;
  if (v22)
  {
    v29 = v60;

    v30 = v29;
  }
  else
  {
    v32 = v59;

    v24 = v58;
    v61 = v32;
    v25 = CoreDataGroupStore.resolveConflict(_:)(v32);
    v33 = v24;
    v34 = v25;
    v35 = v24;
    if (!v24)
    {
      v31 = v34;
      swift_bridgeObjectRelease();

      return v31;
    }
    v28 = v35;
    swift_bridgeObjectRelease();

    v30 = v28;
  }
  return (void *)v27;
}

unint64_t type metadata accessor for NSExpression()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSExpression;
  if (!lazy cache variable for type metadata for NSExpression)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSExpression);
    return ObjCClassMetadata;
  }
  return v2;
}

char *keypath_get_selector_groupID()
{
  return sel_groupID;
}

void key path getter for Group.groupID : Group(uint64_t a1@<X0>, void *a2@<X8>)
{
  id *v2;
  id v3;
  id v4[2];
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v5 = a2;
  v10 = a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v4 - v8;
  v11 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v4 - v11;
  v13 = *v2;
  v3 = v13;
  v16 = v13;
  v14 = v13;
  v15 = objc_msgSend(v13, sel_groupID);
  if (v15)
  {
    v4[1] = v15;
    v4[0] = v15;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  outlined init with take of UUID?(v12, v5);

}

void key path setter for Group.groupID : Group(uint64_t a1, id *a2)
{
  const void *v2;
  id v3;
  id v4;
  Class isa;
  Class v6;
  uint64_t v7;
  unint64_t v8;
  id *v9;
  id v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v7 = a1;
  v9 = a2;
  v8 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v4 - v8;
  outlined init with copy of UUID?(v2, (char *)&v4 - v8);
  v10 = *v9;
  v3 = v10;
  v15 = v10;
  v11 = v10;
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    v6 = 0;
  }
  else
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    v6 = isa;
  }
  objc_msgSend(v11, sel_setGroupID_, v6);

}

unint64_t lazy protocol witness table accessor for type NSExpression and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSExpression and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSExpression and conformance NSObject)
  {
    v0 = type metadata accessor for NSExpression();
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE5BE8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSExpression and conformance NSObject);
    return v1;
  }
  return v3;
}

void *CoreDataGroupStore.resolveConflict(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  unsigned __int8 v12;
  id v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id *v19;
  uint64_t v20;
  id v22[4];
  uint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x24BDAC8D0];
  v27 = 0;
  v26 = 0;
  v24 = 0;
  v23 = 0;
  v22[2] = 0;
  v22[3] = 0;
  v28 = a1;
  v1 = type metadata accessor for Group();
  if (MEMORY[0x242634AC0](a1, v1) <= 1)
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Group]);
    lazy protocol witness table accessor for type [Group] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [Group]();
    return (void *)v29;
  }
  v25 = a1;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Group]);
  lazy protocol witness table accessor for type [Group] and conformance [A]();
  v17 = Sequence.sorted(by:)();
  if (!v20)
  {
    v26 = (void *)v17;
    v24 = 0;
    v14 = lazy protocol witness table accessor for type [Group] and conformance [A]();
    v2 = lazy protocol witness table accessor for type [Group] and conformance [A]();
    MEMORY[0x242634C70](v32, v16, v14, v2);
    v15 = (void *)v32[0];
    if (!v32[0])
    {
      outlined destroy of [Group]();
      return 0;
    }
    v23 = v32[0];
    swift_bridgeObjectRetain();
    v22[1] = v26;
    lazy protocol witness table accessor for type [Group] and conformance [A]();
    Collection<>.makeIterator()();
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Group]>);
      IndexingIterator.next()();
      if (!v31)
        break;
      v13 = *v19;
      v3 = *v19;
      objc_msgSend(v13, sel_deleteObject_, v31);

      v24 = 1;
    }
    outlined destroy of IndexingIterator<[Group]>();
    if ((v24 & 1) == 0)
      goto LABEL_10;
    v30 = 0;
    v11 = *v19;
    v4 = *v19;
    v22[0] = 0;
    v12 = objc_msgSend(v11, sel_save_, v22);
    v10 = v22[0];
    v5 = v22[0];
    v6 = v30;
    v30 = v10;

    if ((v12 & 1) != 0)
    {
LABEL_10:
      outlined destroy of [Group]();
      return v15;
    }
    v9 = v30;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined destroy of [Group]();
  }
  return (void *)v8;
}

uint64_t closure #1 in CoreDataGroupStore.resolveConflict(_:)()
{
  uint64_t v0;
  char v1;

  v1 = Group.shouldOverwrite(other:)();
  if (v0)
    return 1;
  else
    return v1 & 1;
}

unint64_t lazy protocol witness table accessor for type [Group] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Group] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Group] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Group]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Group] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Group] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Group] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Group]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12B0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Group] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Group] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Group] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Group]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Group] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Group] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Group] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Group]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Group] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [Group]()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[Group]>()
{
  swift_bridgeObjectRelease();
}

uint64_t CoreDataGroupStore.hasGroup(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  _QWORD *v4;
  id v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  void *v19;
  id *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[3];
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t countAndFlagsBits;
  id *v44;
  void *object;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t vars0;

  v30 = a1;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v56 = 0;
  v55 = 0;
  v31 = 0;
  v39 = type metadata accessor for UUID();
  v38 = *(_QWORD *)(v39 - 8);
  v29 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v40 = (char *)v25 - v29;
  v59 = v2;
  v58 = v1;
  v48 = type metadata accessor for Group();
  v50 = (id)static Group.fetchRequest()();
  v57 = v50;
  v32 = type metadata accessor for NSExpression();
  swift_getKeyPath();
  v33 = (id)NSExpression.init<A, B>(forKeyPath:)();
  v56 = v33;
  v34 = type metadata accessor for NSPredicate();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%@ == %@", 8uLL, 1);
  countAndFlagsBits = v3._countAndFlagsBits;
  object = v3._object;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v41 = _allocateUninitializedArray<A>(_:)();
  v37 = v4;
  v5 = v33;
  v37[3] = v32;
  v6 = lazy protocol witness table accessor for type NSExpression and conformance NSObject();
  v7 = v37;
  v8 = v6;
  v9 = v33;
  v37[4] = v8;
  *v7 = v9;
  GPKGroupID.uuid.getter();
  v35 = UUID.uuidString.getter();
  v36 = v10;
  v37[8] = MEMORY[0x24BEE0D00];
  v11 = lazy protocol witness table accessor for type String and conformance String();
  v12 = v35;
  v13 = v36;
  v14 = v37;
  v15 = v38;
  v16 = v39;
  v17 = v11;
  v18 = v40;
  v37[9] = v17;
  v14[5] = v12;
  v14[6] = v13;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v16);
  _finalizeUninitializedArray<A>(_:)();
  v19 = (void *)NSPredicate.init(format:_:)();
  v20 = v44;
  v46 = v19;
  swift_bridgeObjectRelease();
  objc_msgSend(v50, sel_setPredicate_, v46);

  v47 = *v20;
  v21 = v47;
  v22 = v49;
  v23 = NSManagedObjectContext.fetch<A>(_:)();
  v51 = v22;
  v52 = v23;
  v53 = v22;
  if (v22)
  {
    v25[0] = v53;

    return (&vars0 - 64) & 1;
  }
  else
  {
    v27 = v52;

    v55 = v27;
    swift_bridgeObjectRetain();
    v25[2] = &v54;
    v54 = v27;
    v25[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Group]);
    lazy protocol witness table accessor for type [Group] and conformance [A]();
    v26 = Collection.isEmpty.getter();
    outlined destroy of [Group]();
    v28 = v26 ^ 1;
    swift_bridgeObjectRelease();

    return v28 & 1;
  }
}

uint64_t CoreDataGroupStore.getGroup(by:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[29] = v1;
  v2[28] = a1;
  v2[24] = v2;
  v2[25] = 0;
  v2[26] = 0;
  v3 = type metadata accessor for GPKGroupID();
  v2[30] = v3;
  v2[31] = *(_QWORD *)(v3 - 8);
  v2[32] = swift_task_alloc();
  v2[25] = a1;
  v2[26] = v1;
  return swift_task_switch();
}

uint64_t CoreDataGroupStore.getGroup(by:)()
{
  _QWORD *v0;
  id v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = v0[32];
  v10 = v0[31];
  v12 = v0[30];
  v9 = (id *)v0[29];
  v11 = v0[28];
  v0[24] = v0;
  v8 = *v9;
  v1 = *v9;
  outlined init with copy of CoreDataGroupStore((uint64_t)v9, (uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v13, v11, v12);
  v14 = swift_task_alloc();
  *(_QWORD *)(v14 + 16) = v0 + 2;
  *(_QWORD *)(v14 + 24) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroup?);
  NSManagedObjectContext.sync<A>(work:)();
  v5 = *(_QWORD *)(v7 + 256);
  v3 = *(_QWORD *)(v7 + 248);
  v4 = *(_QWORD *)(v7 + 240);
  swift_task_dealloc();
  outlined destroy of CoreDataGroupStore((id *)(v7 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);

  v6 = *(_QWORD *)(v7 + 216);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 192) + 8))(v6);
}

uint64_t closure #1 in CoreDataGroupStore.getGroup(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[8];
  _QWORD v11[7];
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39[22];
  id v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v28 = a3;
  v29 = a1;
  v34 = a2;
  v50 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v55 = a1;
  v54 = a2;
  v30 = v51;
  outlined init with copy of MetadataStore(a1 + 48, (uint64_t)v51);
  v32 = v52;
  v33 = v53;
  __swift_project_boxed_opaque_existential_1(v51, v52);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 24))(v34, v32);
  v35 = v31;
  v36 = v3;
  v37 = v31;
  if (v31)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  v22 = v36;
  v50 = v36;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  v23 = v47;
  outlined init with copy of CachedGroupStore(v29 + 128, (uint64_t)v47);
  v24 = v48;
  v25 = v49;
  __swift_project_boxed_opaque_existential_1(v47, v48);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v25 + 16))(&v44, v34, v24);
  v26 = 0;
  v27 = 0;
  v16 = v44;
  v17 = v45;
  v18 = v46;
  v41 = v44;
  v42 = v45;
  v43 = v46;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  v19 = 0;
  v20 = CoreDataGroupStore.group(for:)(v34);
  v21 = 0;
  v40 = v20;
  v11[5] = v39;
  outlined init with copy of CoreDataGroupStore(v29, (uint64_t)v39);
  swift_bridgeObjectRetain();
  outlined copy of CachedGroupProperties?(v16, v17);
  v11[6] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v14 = v10;
  v10[2] = v4;
  v10[3] = v5;
  v10[4] = v16;
  v10[5] = v17;
  v10[6] = v6;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Group?);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v7 = type metadata accessor for GPKGroup();
  v8 = v19;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in CoreDataGroupStore.getGroup(by:), (uint64_t)v14, v12, v13, v7, (uint64_t)&v38, v28);
  v15 = v8;
  if (v8)
    v11[0] = v38;
  outlined destroy of CoreDataGroupStore(v39);
  swift_bridgeObjectRelease();
  outlined consume of CachedGroupProperties?(v16, v17);
  outlined destroy of Group?(&v40);
  outlined consume of CachedGroupProperties?(v16, v17);
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in CoreDataGroupStore.getGroup(by:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in CoreDataGroupStore.getGroup(by:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t closure #1 in closure #1 in CoreDataGroupStore.getGroup(by:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = 0;
  v28 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v29 = *a1;
  v18 = v29;
  v28 = a2;
  v27 = a3;
  v24 = a4;
  v25 = a5;
  v26 = a6;
  outlined init with copy of GroupTransforming(a2 + 88, (uint64_t)v21);
  v16 = v22;
  v17 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  v20[0] = a4;
  v20[1] = a5;
  v20[2] = a6;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(v17 + 8))(v18, a3, v20, v16);
  if (v15)
  {
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a7 = v15;
  }
  else
  {
    *a8 = v19;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  void (*v19)(char *, char *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v18 = a7;
  v19 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v25 = a6;
  v37 = a4;
  v36 = a5;
  v26 = *(_QWORD *)(a4 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v28 = (char *)v17 - v27;
  v33 = *(_QWORD *)(v8 + 16);
  v35 = v33;
  v32 = *(_QWORD *)(v33 - 8);
  v29 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v30 = (char *)v17 - v29;
  v31 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v34 = (char *)v17 - v31;
  _sxSgs5ErrorRd__Ri_d_0_r_0_lWOc(v12, (char *)v17 - v31, v13, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) == 1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 1);
    v17[1] = v24;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v30, v34, v33);
    v16 = v24;
    v19(v30, v28);
    v17[0] = v16;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v33);
    if (v16)
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v25, v28, v22);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 0, 1);
      return v17[0];
    }
  }
  return result;
}

uint64_t CoreDataGroupStore.getGroups(matching:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[29] = v1;
  v2[28] = a1;
  v2[24] = v2;
  v2[25] = 0;
  v2[26] = 0;
  v2[25] = a1;
  v2[26] = v1;
  return swift_task_switch();
}

uint64_t CoreDataGroupStore.getGroups(matching:)()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v4;
  uint64_t v5;
  id v6;
  id *v7;
  id v8;
  uint64_t v9;

  v7 = (id *)v0[29];
  v8 = (id)v0[28];
  v0[24] = v0;
  v6 = *v7;
  v1 = *v7;
  v2 = v8;
  outlined init with copy of CoreDataGroupStore((uint64_t)v7, (uint64_t)(v0 + 2));
  v9 = swift_task_alloc();
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v0 + 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKGroup]);
  NSManagedObjectContext.sync<A>(work:)();
  v4 = *(id *)(v5 + 224);
  swift_task_dealloc();

  outlined destroy of CoreDataGroupStore((id *)(v5 + 16));
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v5 + 192) + 8))(*(_QWORD *)(v5 + 216));
}

void closure #1 in CoreDataGroupStore.getGroups(matching:)(uint64_t a1@<X0>, id *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[3];
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  id v41;
  unsigned int v42;
  id v43;
  id v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  void *j;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  void (*v68)(char *, uint64_t);
  void (*v69)(char *, char *, uint64_t);
  id v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  char *v75;
  void *i;
  id v77;
  void *v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  id *v106;
  id v107;
  uint64_t v108;
  void *v109;
  id v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  _QWORD v115[2];
  id v116;
  id v117;
  id v118;
  uint64_t v119;
  void *v120;
  id v121;
  _QWORD v122[2];
  _QWORD v123[4];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  id v139[22];
  void *v140;
  _BYTE __b[40];
  void *v142;
  char v143;
  uint64_t v144;

  v88 = a3;
  v105 = a1;
  v106 = a2;
  v144 = *MEMORY[0x24BDAC8D0];
  v134 = 0;
  v133 = 0;
  v132 = 0;
  v131 = 0;
  v130 = 0;
  v129 = 0;
  v128 = 0;
  v126 = 0;
  v127 = 0;
  v124 = 0;
  memset(__b, 0, sizeof(__b));
  v123[2] = 0;
  v123[3] = 0;
  v120 = 0;
  v119 = 0;
  v118 = 0;
  v116 = 0;
  v115[0] = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v89 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v90 = (uint64_t)v25 - v89;
  v99 = 0;
  v91 = type metadata accessor for UUID();
  v92 = *(_QWORD *)(v91 - 8);
  v93 = (*(_QWORD *)(v92 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v91);
  v94 = (char *)v25 - v93;
  v95 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v25 - v93);
  v96 = (char *)v25 - v95;
  v97 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v25 - v95);
  v98 = (char *)v25 - v97;
  v134 = (char *)v25 - v97;
  v101 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: [Group])?)
                               - 8)
                   + 64);
  v100 = (v101 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v99);
  v102 = (char *)v25 - v100;
  v103 = (v101 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v104 = (char *)v25 - v103;
  v133 = v7;
  v132 = v8;
  v108 = type metadata accessor for Group();
  v110 = (id)static Group.fetchRequest()();
  v131 = v110;
  objc_msgSend(v110, sel_setPredicate_, v105);
  v107 = *v106;
  v9 = v107;
  v10 = v109;
  v11 = NSManagedObjectContext.fetch<A>(_:)();
  v111 = v10;
  v112 = v11;
  v113 = (uint64_t)v10;
  if (v10)
  {
    v30 = v113;

    v31 = v30;
  }
  else
  {
    v84 = v112;

    v130 = v84;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [Group]));
    v83 = 0;
    v81 = _allocateUninitializedArray<A>(_:)();
    v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Group]);
    v82 = lazy protocol witness table accessor for type UUID and conformance UUID();
    v129 = Dictionary.init(dictionaryLiteral:)();
    v128 = _allocateUninitializedArray<A>(_:)();
    swift_bridgeObjectRetain();
    v125 = v84;
    v86 = lazy protocol witness table accessor for type [Group] and conformance [A]();
    Collection<>.makeIterator()();
    v87 = v111;
    while (1)
    {
      v78 = v87;
      v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Group]>);
      IndexingIterator.next()();
      v80 = v142;
      if (!v142)
        break;
      v77 = v80;
      v72 = v80;
      v116 = v80;
      v73 = objc_msgSend(v80, sel_groupID);
      if (v73)
      {
        v71 = v73;
        v70 = v73;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(uint64_t, char *, uint64_t))(v92 + 32))(v90, v96, v91);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v92 + 56))(v90, 0, 1, v91);

      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v92 + 56))(v90, 1, 1, v91);
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91) == 1)
      {
        outlined destroy of UUID?(v90);
        v12 = v72;
        v115[1] = v72;
        Array.append(_:)();

        v87 = v78;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v98, v90, v91);
        v69 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
        v69(v94, v98, v91);
        MEMORY[0x24263485C](&v137, v94, v129, v91, v85, v82);
        v136 = v137;
        if (v137)
        {
          v115[0] = v136;
        }
        else
        {
          v115[0] = _allocateUninitializedArray<A>(_:)();
          outlined destroy of [Group]?();
        }
        v68 = *(void (**)(char *, uint64_t))(v92 + 8);
        v68(v94, v91);
        v13 = v72;
        v114 = v72;
        v67 = v115;
        Array.append(_:)();
        v69(v96, v98, v91);
        v65 = v115[0];
        swift_bridgeObjectRetain();
        v66 = &v135;
        v135 = v65;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : [Group]]);
        Dictionary.subscript.setter();
        outlined destroy of [Group]();
        v68(v98, v91);

        v87 = v78;
      }
    }
    outlined destroy of IndexingIterator<[Group]>();
    v124 = _allocateUninitializedArray<A>(_:)();
    v74 = v129;
    swift_bridgeObjectRetain();
    v75 = &v143;
    Dictionary.makeIterator()();
    memcpy(__b, v75, sizeof(__b));
    for (i = v78; ; i = v53)
    {
      v63 = i;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID : [Group]].Iterator);
      Dictionary.Iterator.next()();
      outlined init with take of (key: UUID, value: [Group])?(v102, v104);
      v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: [Group]));
      if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v64 - 8) + 48))(v104, 1) == 1)
        break;
      v14 = v63;
      v57 = *(_QWORD *)&v104[*(int *)(v64 + 48)];
      v119 = v57;
      v15 = CoreDataGroupStore.resolveConflict(_:)(v57);
      v58 = v14;
      v59 = v15;
      v60 = v14;
      if (v14)
      {
        v28 = 0;
        v29 = 0;

        v55 = v28;
        v56 = v29;
      }
      else
      {
        v55 = v59;
        v56 = 0;
      }
      v53 = v56;
      v54 = v55;
      if (v55)
      {
        v52 = v54;
        v51 = v54;
        v118 = v54;
        v16 = v54;
        v117 = v51;
        Array.append(_:)();

      }
      (*(void (**)(char *, uint64_t))(v92 + 8))(v104, v91);
      swift_bridgeObjectRelease();
    }
    outlined destroy of [UUID : [Group]].Iterator();
    v61 = v128;
    swift_bridgeObjectRetain();
    v123[1] = v61;
    Collection<>.makeIterator()();
    for (j = v63; ; j = v49)
    {
      v49 = j;
      IndexingIterator.next()();
      v50 = v140;
      if (!v140)
        break;
      v48 = v50;
      v44 = v50;
      v120 = v50;
      v43 = *v106;
      v17 = v43;
      objc_msgSend(v43, sel_deleteObject_, v44);

    }
    outlined destroy of IndexingIterator<[Group]>();
    v46 = v128;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45 = v123;
    v123[0] = v46;
    v47 = Collection.isEmpty.getter();
    outlined destroy of [Group]();
    swift_bridgeObjectRelease();
    if ((v47 & 1) != 0)
      goto LABEL_26;
    v138 = 0;
    v41 = *v106;
    v18 = v41;
    v121 = v138;
    v42 = objc_msgSend(v41, sel_save_, &v121);
    v40 = v121;
    v19 = v121;
    v20 = v138;
    v138 = v40;

    if ((v42 & 1) != 0)
    {
LABEL_26:
      v33 = v124;
      swift_bridgeObjectRetain();
      v122[1] = v33;
      v34 = v139;
      outlined init with copy of CoreDataGroupStore((uint64_t)v106, (uint64_t)v139);
      v35 = v25;
      MEMORY[0x24BDAC7A8](v25);
      v36 = &v25[-4];
      v25[-2] = v21;
      v37 = type metadata accessor for GPKGroup();
      v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v23 = v49;
      v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in CoreDataGroupStore.getGroups(matching:), (uint64_t)v36, v85, v37, v22, v86, MEMORY[0x24BEE3F20], (uint64_t)v122);
      v38 = v23;
      v39 = v24;
      if (v23)
      {
        v25[1] = v122[0];
        outlined destroy of CoreDataGroupStore(v139);
        outlined destroy of [Group]();
      }
      else
      {
        v32 = v39;
        outlined destroy of CoreDataGroupStore(v139);
        outlined destroy of [Group]();
        *v88 = v32;
      }
      outlined destroy of [Group]();
      outlined destroy of [Group]();
      outlined destroy of [UUID : [Group]]();
      swift_bridgeObjectRelease();

    }
    else
    {
      v26 = v138;
      v27 = _convertNSErrorToError(_:)();

      swift_willThrow();
      outlined destroy of [Group]();
      outlined destroy of [Group]();
      outlined destroy of [UUID : [Group]]();
      swift_bridgeObjectRelease();

      v31 = v27;
    }
  }
}

void partial apply for closure #1 in CoreDataGroupStore.getGroups(matching:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in CoreDataGroupStore.getGroups(matching:)(*(_QWORD *)(v1 + 16), *(id **)(v1 + 24), a1);
}

uint64_t *closure #1 in closure #1 in CoreDataGroupStore.getGroups(matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  id v65;
  id v66;
  _QWORD v67[3];
  char v68[8];
  uint64_t v69;
  uint64_t v70;
  char v71[8];
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[3];
  char v75[8];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  char *v84;

  v47 = a4;
  v58 = a1;
  v57 = a2;
  v49 = a3;
  v84 = 0;
  v83 = 0;
  v82 = 0;
  v54 = 0;
  v50 = type metadata accessor for GPKGroupID();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v50);
  v53 = (char *)&v17 - v52;
  v55 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v54);
  v56 = (uint64_t)&v17 - v55;
  v59 = type metadata accessor for UUID();
  v60 = *(_QWORD *)(v59 - 8);
  v61 = (*(_QWORD *)(v60 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v58);
  v62 = (char *)&v17 - v61;
  v63 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v64 = (char *)&v17 - v63;
  v84 = (char *)&v17 - v63;
  v65 = *v7;
  v83 = v65;
  v82 = v8;
  v81 = 0;
  v78 = 0;
  v79 = 0xF000000000000000;
  v80 = 0;
  v66 = objc_msgSend(v65, sel_groupID, v6);
  if (v66)
  {
    v46 = v66;
    v45 = v66;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v56, v62, v59);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v60 + 56))(v56, 0, 1, v59);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v56, 1, 1, v59);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v56, 1, v59) == 1)
  {
    outlined destroy of UUID?(v56);
    v44 = v48;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v64, v56, v59);
    v38 = v71;
    outlined init with copy of MetadataStore(v57 + 48, (uint64_t)v71);
    v39 = v72;
    v40 = v73;
    __swift_project_boxed_opaque_existential_1(v38, v72);
    v9 = v48;
    v10 = (*(uint64_t (**)(char *, uint64_t))(v40 + 32))(v64, v39);
    v41 = v9;
    v42 = v10;
    v43 = v9;
    if (v9)
    {
      v20 = v43;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v59);
      outlined destroy of CachedGroupProperties?((uint64_t)&v78);
      result = &v81;
      outlined destroy of [GPKMetadata]?();
      *v49 = v20;
      return result;
    }
    v81 = v42;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
    v33 = v68;
    outlined init with copy of CachedGroupStore(v57 + 128, (uint64_t)v68);
    v34 = v69;
    v35 = v70;
    __swift_project_boxed_opaque_existential_1(v33, v69);
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v62, v64, v59);
    GPKGroupID.init(uuid:)();
    v11 = v41;
    (*(void (**)(_QWORD *__return_ptr, char *, uint64_t))(v35 + 16))(v67, v53, v34);
    v36 = v11;
    v37 = v11;
    if (v11)
    {
      v19 = v37;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v50);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v59);
      outlined destroy of CachedGroupProperties?((uint64_t)&v78);
      result = &v81;
      outlined destroy of [GPKMetadata]?();
      *v49 = v19;
      return result;
    }
    (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v50);
    v12 = v78;
    v13 = v79;
    v78 = v67[0];
    v79 = v67[1];
    v80 = v67[2];
    outlined consume of CachedGroupProperties?(v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v64, v59);
    v44 = v36;
  }
  v27 = v44;
  v22 = v75;
  outlined init with copy of GroupTransforming(v57 + 88, (uint64_t)v75);
  v28 = v76;
  v29 = v77;
  __swift_project_boxed_opaque_existential_1(v22, v76);
  v26 = v81;
  swift_bridgeObjectRetain();
  v23 = v78;
  v24 = v79;
  v25 = v80;
  outlined copy of CachedGroupProperties?(v78, v79);
  v14 = v27;
  v74[0] = v23;
  v74[1] = v24;
  v74[2] = v25;
  v15 = (*(uint64_t (**)(id, uint64_t, _QWORD *, uint64_t))(v29 + 8))(v65, v26, v74, v28);
  v30 = v14;
  v31 = v15;
  v32 = v14;
  if (v14)
  {
    v18 = v32;
    outlined destroy of CachedGroupProperties?((uint64_t)v74);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
    outlined destroy of CachedGroupProperties?((uint64_t)&v78);
    result = &v81;
    outlined destroy of [GPKMetadata]?();
    *v49 = v18;
  }
  else
  {
    v21 = v31;
    outlined destroy of CachedGroupProperties?((uint64_t)v74);
    swift_bridgeObjectRelease();
    *v47 = v21;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
    outlined destroy of CachedGroupProperties?((uint64_t)&v78);
    result = &v81;
    outlined destroy of [GPKMetadata]?();
  }
  return result;
}

uint64_t CoreDataGroupStore.createGroup(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[31] = v2;
  v3[30] = a2;
  v3[29] = a1;
  v3[24] = v3;
  v3[25] = 0;
  v3[26] = 0;
  v3[27] = 0;
  v3[25] = a1;
  v3[26] = a2;
  v3[27] = v2;
  return swift_task_switch();
}

uint64_t CoreDataGroupStore.createGroup(_:with:)()
{
  _QWORD *v0;
  id v1;
  uint64_t v3;
  id v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = (id *)v0[31];
  v7 = v0[30];
  v6 = v0[29];
  v0[24] = v0;
  v4 = *v5;
  v1 = *v5;
  outlined init with copy of CoreDataGroupStore((uint64_t)v5, (uint64_t)(v0 + 2));
  swift_retain();
  swift_bridgeObjectRetain();
  v8 = (_QWORD *)swift_task_alloc();
  v8[2] = v0 + 2;
  v8[3] = v6;
  v8[4] = v7;
  type metadata accessor for GPKGroup();
  NSManagedObjectContext.sync<A>(work:)();
  swift_task_dealloc();
  outlined destroy of CoreDataGroupStore((id *)(v3 + 16));
  swift_release();
  swift_bridgeObjectRelease();

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 192) + 8))(*(_QWORD *)(v3 + 224));
}

void closure #1 in CoreDataGroupStore.createGroup(_:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  id v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  _BOOL4 v94;
  _BOOL4 v95;
  void (*v96)(uint64_t, uint64_t);
  void *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[3];
  _BYTE v127[24];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD v135[3];
  _BYTE v136[24];
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  _BYTE v143[24];
  uint64_t v144;
  uint64_t v145;
  _BYTE v146[24];
  uint64_t v147;
  uint64_t v148;
  id v149[2];

  v98 = a4;
  v113 = a1;
  v99 = a2;
  v105 = a3;
  v149[1] = *(id *)MEMORY[0x24BDAC8D0];
  v125 = 0;
  v124 = 0;
  v123 = 0;
  v122 = 0;
  v120 = 0;
  v133 = 0;
  v134 = 0;
  v100 = 0;
  v101 = type metadata accessor for InternalErrorCode();
  v102 = *(_QWORD *)(v101 - 8);
  v103 = (*(_QWORD *)(v102 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v104 = (char *)v30 - v103;
  v106 = type metadata accessor for GPKGroupID();
  v107 = *(_QWORD *)(v106 - 8);
  v108 = (*(_QWORD *)(v107 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v113);
  v109 = (char *)v30 - v108;
  v110 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v111 = (char *)v30 - v110;
  v112 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v114 = (uint64_t)v30 - v112;
  v125 = v9;
  v124 = a2;
  v123 = v10;
  dispatch thunk of GPKGroup.groupID.getter();
  v11 = v115;
  v12 = CoreDataGroupStore.group(for:)(v114);
  v116 = v11;
  v117 = v12;
  v118 = v11;
  if (v11)
  {
    v36 = v118;
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v114, v106);
    v39 = v36;
    return;
  }
  v97 = v117;
  v96 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
  v96(v114, v106);
  v149[0] = v97;
  v95 = v97 == 0;
  v94 = v95;
  outlined destroy of Group?(v149);
  if (!v94)
  {
    v37 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v104, *MEMORY[0x24BE3DD88], v101);
    v38 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    v39 = v38;
    return;
  }
  type metadata accessor for Group();
  swift_retain();
  v89 = *(_DWORD *)(v113 + 168);
  v90 = *(id *)v113;
  v13 = v90;
  v14 = v116;
  v15 = Group.__allocating_init(from:clientModelVersion:context:)();
  v91 = v14;
  v92 = (void *)v15;
  v93 = v14;
  if (v14)
  {
    v39 = v93;
    return;
  }
  v84 = v92;
  v122 = v92;
  v121 = dispatch thunk of GPKGroup.members.getter();
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v86 = type metadata accessor for GPKUser();
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v16 = v91;
  v17 = Sequence.compactMap<A>(_:)();
  v87 = v16;
  v88 = v17;
  if (v16)
  {
    __break(1u);
    goto LABEL_20;
  }
  v81 = v88;
  outlined destroy of [GPKMember]();
  v120 = v81;
  v78 = v146;
  outlined init with copy of UserStore(v113 + 8, (uint64_t)v146);
  v79 = v147;
  v80 = v148;
  __swift_project_boxed_opaque_existential_1(v78, v147);
  v18 = v87;
  (*(void (**)(uint64_t, uint64_t))(v80 + 24))(v81, v79);
  v82 = v18;
  v83 = v18;
  if (v18)
  {
LABEL_20:
    v35 = v83;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v146);
    swift_bridgeObjectRelease();

    v39 = v35;
    return;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v146);
  v72 = v143;
  outlined init with copy of MetadataStore(v113 + 48, (uint64_t)v143);
  v74 = v144;
  v75 = v145;
  v73 = __swift_project_boxed_opaque_existential_1(v72, v144);
  dispatch thunk of GPKGroup.groupID.getter();
  v19 = v82;
  (*(void (**)(uint64_t, char *, uint64_t))(v75 + 8))(v105, v111, v74);
  v76 = v19;
  v77 = v19;
  if (v19)
  {
    v34 = v77;
    v96((uint64_t)v111, v106);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v143);
    swift_bridgeObjectRelease();

    v39 = v34;
    return;
  }
  v96((uint64_t)v111, v106);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v143);
  v140 = 0;
  v69 = 0xF000000000000000;
  v141 = 0xF000000000000000;
  v142 = 0;
  v70 = dispatch thunk of GPKGroup.groupBlob.getter();
  v71 = v20;
  if ((v20 & 0xF000000000000000) == v69)
  {
    v66 = v76;
  }
  else
  {
    v67 = v70;
    v68 = v71;
    v54 = v71;
    v55 = v70;
    v133 = v70;
    v134 = v71;
    outlined copy of Data._Representation(v70, v71);
    v21 = dispatch thunk of GPKGroup.invitationGroupVersion.getter();
    CachedGroupProperties.init(groupBlob:invitationGroupVersion:)(v55, v54, v21, &v130);
    v57 = v130;
    v58 = v131;
    v59 = v132;
    outlined copy of CachedGroupProperties?(v130, v131);
    v22 = v140;
    v23 = v141;
    v140 = v57;
    v141 = v58;
    v142 = v59;
    outlined consume of CachedGroupProperties?(v22, v23);
    v56 = v127;
    outlined init with copy of CachedGroupStore(v113 + 128, (uint64_t)v127);
    v62 = v128;
    v63 = v129;
    v60 = __swift_project_boxed_opaque_existential_1(v56, v128);
    v61 = v126;
    v126[0] = v57;
    v126[1] = v58;
    v126[2] = v59;
    dispatch thunk of GPKGroup.groupID.getter();
    v24 = v76;
    (*(void (**)(_QWORD *, char *, uint64_t))(v63 + 8))(v61, v109, v62);
    v64 = v24;
    v65 = v24;
    if (v24)
    {
      v33 = v65;
      v96((uint64_t)v109, v106);
      outlined destroy of CachedGroupProperties?((uint64_t)v126);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v127);
      outlined consume of Data._Representation(v55, v54);
      outlined destroy of CachedGroupProperties?((uint64_t)&v140);
      swift_bridgeObjectRelease();

      v39 = v33;
      return;
    }
    v96((uint64_t)v109, v106);
    outlined destroy of CachedGroupProperties?((uint64_t)v126);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v127);
    outlined consume of Data._Representation(v55, v54);
    v66 = v64;
  }
  v50 = v66;
  v139 = 0;
  v52 = *(id *)v113;
  v25 = v52;
  v119 = v139;
  v53 = objc_msgSend(v52, sel_save_, &v119);
  v51 = v119;
  v26 = v119;
  v27 = v139;
  v139 = v51;

  if ((v53 & 1) != 0)
  {
    v41 = v136;
    outlined init with copy of GroupTransforming(v113 + 88, (uint64_t)v136);
    v45 = v137;
    v46 = v138;
    __swift_project_boxed_opaque_existential_1(v41, v137);
    v42 = v140;
    v43 = v141;
    v44 = v142;
    outlined copy of CachedGroupProperties?(v140, v141);
    v28 = v50;
    v135[0] = v42;
    v135[1] = v43;
    v135[2] = v44;
    v29 = (*(uint64_t (**)(id, uint64_t, _QWORD *, uint64_t))(v46 + 8))(v84, v105, v135, v45);
    v47 = v28;
    v48 = v29;
    v49 = v28;
    if (v28)
    {
      v30[1] = v49;
      outlined destroy of CachedGroupProperties?((uint64_t)v135);
    }
    else
    {
      v40 = v48;
      outlined destroy of CachedGroupProperties?((uint64_t)v135);
      *v98 = v40;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v136);
    outlined destroy of CachedGroupProperties?((uint64_t)&v140);
    swift_bridgeObjectRelease();

  }
  else
  {
    v31 = v139;
    v32 = _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined destroy of CachedGroupProperties?((uint64_t)&v140);
    swift_bridgeObjectRelease();

    v39 = v32;
  }
}

void partial apply for closure #1 in CoreDataGroupStore.createGroup(_:with:)(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  closure #1 in CoreDataGroupStore.createGroup(_:with:)(v1[2], v1[3], v1[4], a1);
}

uint64_t closure #1 in closure #1 in CoreDataGroupStore.createGroup(_:with:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v22 = a2;
  v24 = a1;
  v35 = 0;
  v34 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v23 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v32 = (uint64_t)&v17 - v23;
  v33 = type metadata accessor for GPKUserID();
  v31 = *(_QWORD *)(v33 - 8);
  v26 = *(_QWORD *)(v31 + 64);
  v25 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v17 - v25;
  v28 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v29 = (char *)&v17 - v28;
  v35 = (char *)&v17 - v28;
  v30 = *v4;
  v34 = v30;
  dispatch thunk of GPKMember.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1, v33) == 1)
  {
    result = outlined destroy of GPKUserID?(v32);
    *v22 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v29, v32, v33);
    v20 = type metadata accessor for GPKUser();
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v27, v29, v33);
    v19 = MEMORY[0x24BEE0D00];
    v18 = _allocateUninitializedArray<A>(_:)();
    v17 = v6;
    v7 = dispatch thunk of GPKMember.handle.getter();
    v8 = v17;
    v9 = v7;
    v10 = v18;
    *v17 = v9;
    v8[1] = v11;
    _finalizeUninitializedArray<A>(_:)();
    v21 = v10;
    dispatch thunk of GPKMember.isMe.getter();
    v12 = GPKUser.__allocating_init(userID:handles:isMe:)();
    v13 = v31;
    v14 = v33;
    v15 = v12;
    v16 = v29;
    *v22 = v15;
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v14);
  }
  return result;
}

uint64_t CoreDataGroupStore.updateGroup(_:metaData:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3[2] = v3;
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  v3[3] = a1;
  v3[4] = a2;
  v3[5] = v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 48) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = CoreDataGroupStore.updateGroup(_:metaData:);
  return CoreDataGroupStore.updateGroup(_:metaData:clearOldMetadata:)(a1, a2, 1);
}

_QWORD *CoreDataGroupStore.updateGroup(_:metaData:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t CoreDataGroupStore.updateGroup(_:metaData:clearOldMetadata:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 248) = v3;
  *(_BYTE *)(v4 + 188) = a3 & 1;
  *(_QWORD *)(v4 + 240) = a2;
  *(_QWORD *)(v4 + 232) = a1;
  *(_QWORD *)(v4 + 192) = v4;
  *(_QWORD *)(v4 + 200) = 0;
  *(_QWORD *)(v4 + 208) = 0;
  *(_BYTE *)(v4 + 256) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_QWORD *)(v4 + 200) = a1;
  *(_QWORD *)(v4 + 208) = a2;
  *(_BYTE *)(v4 + 256) = a3 & 1;
  *(_QWORD *)(v4 + 216) = v3;
  return swift_task_switch();
}

uint64_t CoreDataGroupStore.updateGroup(_:metaData:clearOldMetadata:)()
{
  uint64_t v0;
  id v1;
  uint64_t v3;
  id v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v5 = *(id **)(v0 + 248);
  v8 = *(_BYTE *)(v0 + 188);
  v7 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 232);
  *(_QWORD *)(v0 + 192) = v0;
  v4 = *v5;
  v1 = *v5;
  outlined init with copy of CoreDataGroupStore((uint64_t)v5, v0 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = swift_task_alloc();
  *(_QWORD *)(v9 + 16) = v0 + 16;
  *(_QWORD *)(v9 + 24) = v6;
  *(_QWORD *)(v9 + 32) = v7;
  *(_BYTE *)(v9 + 40) = v8 & 1;
  type metadata accessor for GPKGroup();
  NSManagedObjectContext.sync<A>(work:)();
  swift_task_dealloc();
  outlined destroy of CoreDataGroupStore((id *)(v3 + 16));
  swift_release();
  swift_bridgeObjectRelease();

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 192) + 8))(*(_QWORD *)(v3 + 224));
}

void closure #1 in CoreDataGroupStore.updateGroup(_:metaData:clearOldMetadata:)(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  int v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void (*v105)(uint64_t, uint64_t);
  void *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  id *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  void *v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[3];
  _BYTE v139[24];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _QWORD v147[3];
  _BYTE v148[24];
  uint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  _BYTE v155[24];
  uint64_t v156;
  uint64_t v157;
  _BYTE v158[24];
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;

  v107 = a5;
  v123 = a1;
  v108 = a2;
  v114 = a3;
  v115 = a4;
  v161 = *MEMORY[0x24BDAC8D0];
  v137 = 0;
  v136 = 0;
  v135 = 0;
  v134 = 0;
  v133 = 0;
  v132 = 0;
  v130 = 0;
  v145 = 0;
  v146 = 0;
  v109 = 0;
  v110 = type metadata accessor for InternalErrorCode();
  v111 = *(_QWORD *)(v110 - 8);
  v112 = (*(_QWORD *)(v111 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v113 = (char *)v35 - v112;
  v116 = type metadata accessor for GPKGroupID();
  v117 = *(_QWORD *)(v116 - 8);
  v118 = (*(_QWORD *)(v117 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v123);
  v119 = (char *)v35 - v118;
  v120 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v121 = (char *)v35 - v120;
  v122 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v124 = (uint64_t)v35 - v122;
  v137 = v10;
  v136 = a2;
  v135 = v11;
  v134 = v12 & 1;
  dispatch thunk of GPKGroup.groupID.getter();
  v13 = v125;
  v14 = CoreDataGroupStore.group(for:)(v124);
  v126 = v13;
  v127 = v14;
  v128 = v13;
  if (v13)
  {
    v43 = v128;
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v124, v116);
    v103 = v43;
    return;
  }
  v106 = v127;
  v105 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
  v105(v124, v116);
  if (!v106)
  {
    v101 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v113, *MEMORY[0x24BE3DCF8], v110);
    v102 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    v103 = v102;
    return;
  }
  v104 = v106;
  v15 = v126;
  v97 = v106;
  v133 = v106;
  v16 = Group.shouldOverwrite(other:)();
  v98 = v15;
  v99 = v16;
  v100 = v15;
  if (v15)
  {
    v42 = v100;

    v103 = v42;
    return;
  }
  if ((v99 & 1) != 0)
  {
    v17 = v97;
    v132 = v97;
    v96 = v98;
  }
  else
  {
    v18 = v98;
    dispatch thunk of Group.update(using:)();
    v94 = v18;
    v95 = v18;
    if (v18)
    {
      v41 = v95;

      v103 = v41;
      return;
    }
    v19 = v97;
    v132 = v97;
    v96 = v94;
  }
  v91 = v96;
  v131 = dispatch thunk of GPKGroup.members.getter();
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v90 = type metadata accessor for GPKUser();
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v20 = v91;
  v21 = Sequence.compactMap<A>(_:)();
  v92 = v20;
  v93 = v21;
  if (v20)
  {
    __break(1u);
    goto LABEL_26;
  }
  v86 = v93;
  outlined destroy of [GPKMember]();
  v130 = v86;
  v83 = v158;
  outlined init with copy of UserStore((uint64_t)(v123 + 1), (uint64_t)v158);
  v84 = v159;
  v85 = v160;
  __swift_project_boxed_opaque_existential_1(v83, v159);
  v22 = v92;
  (*(void (**)(uint64_t, uint64_t))(v85 + 24))(v86, v84);
  v87 = v22;
  v88 = v22;
  if (v22)
  {
LABEL_26:
    v40 = v88;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v158);
    swift_bridgeObjectRelease();

    v103 = v40;
    return;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v158);
  v77 = v155;
  outlined init with copy of MetadataStore((uint64_t)(v123 + 6), (uint64_t)v155);
  v79 = v156;
  v80 = v157;
  v78 = __swift_project_boxed_opaque_existential_1(v77, v156);
  dispatch thunk of GPKGroup.groupID.getter();
  v23 = v87;
  (*(void (**)(uint64_t, char *, _QWORD, uint64_t))(v80 + 16))(v114, v121, v115 & 1, v79);
  v81 = v23;
  v82 = v23;
  if (v23)
  {
    v39 = v82;
    v105((uint64_t)v121, v116);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
    swift_bridgeObjectRelease();

    v103 = v39;
    return;
  }
  v105((uint64_t)v121, v116);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
  v152 = 0;
  v74 = 0xF000000000000000;
  v153 = 0xF000000000000000;
  v154 = 0;
  v75 = dispatch thunk of GPKGroup.groupBlob.getter();
  v76 = v24;
  if ((v24 & 0xF000000000000000) == v74)
  {
    v71 = v81;
  }
  else
  {
    v72 = v75;
    v73 = v76;
    v59 = v76;
    v60 = v75;
    v145 = v75;
    v146 = v76;
    outlined copy of Data._Representation(v75, v76);
    v25 = dispatch thunk of GPKGroup.invitationGroupVersion.getter();
    CachedGroupProperties.init(groupBlob:invitationGroupVersion:)(v60, v59, v25, &v142);
    v62 = v142;
    v63 = v143;
    v64 = v144;
    outlined copy of CachedGroupProperties?(v142, v143);
    v26 = v152;
    v27 = v153;
    v152 = v62;
    v153 = v63;
    v154 = v64;
    outlined consume of CachedGroupProperties?(v26, v27);
    v61 = v139;
    outlined init with copy of CachedGroupStore((uint64_t)(v123 + 16), (uint64_t)v139);
    v67 = v140;
    v68 = v141;
    v65 = __swift_project_boxed_opaque_existential_1(v61, v140);
    v66 = v138;
    v138[0] = v62;
    v138[1] = v63;
    v138[2] = v64;
    dispatch thunk of GPKGroup.groupID.getter();
    v28 = v81;
    (*(void (**)(_QWORD *, char *, uint64_t))(v68 + 8))(v66, v119, v67);
    v69 = v28;
    v70 = v28;
    if (v28)
    {
      v38 = v70;
      v105((uint64_t)v119, v116);
      outlined destroy of CachedGroupProperties?((uint64_t)v138);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
      outlined consume of Data._Representation(v60, v59);
      outlined destroy of CachedGroupProperties?((uint64_t)&v152);
      swift_bridgeObjectRelease();

      v103 = v38;
      return;
    }
    v105((uint64_t)v119, v116);
    outlined destroy of CachedGroupProperties?((uint64_t)v138);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v139);
    outlined consume of Data._Representation(v60, v59);
    v71 = v69;
  }
  v55 = v71;
  v151 = 0;
  v57 = *v123;
  v29 = v57;
  v129 = v151;
  v58 = objc_msgSend(v57, sel_save_, &v129);
  v56 = v129;
  v30 = v129;
  v31 = v151;
  v151 = v56;

  if ((v58 & 1) != 0)
  {
    v45 = v148;
    outlined init with copy of GroupTransforming((uint64_t)(v123 + 11), (uint64_t)v148);
    v50 = v149;
    v51 = v150;
    __swift_project_boxed_opaque_existential_1(v45, v149);
    v49 = v132;
    v32 = v132;
    v46 = v152;
    v47 = v153;
    v48 = v154;
    outlined copy of CachedGroupProperties?(v152, v153);
    v33 = v55;
    v147[0] = v46;
    v147[1] = v47;
    v147[2] = v48;
    v34 = (*(uint64_t (**)(id, uint64_t, _QWORD *, uint64_t))(v51 + 8))(v49, v114, v147, v50);
    v52 = v33;
    v53 = v34;
    v54 = v33;
    if (v33)
    {
      v35[2] = v54;
      outlined destroy of CachedGroupProperties?((uint64_t)v147);

    }
    else
    {
      v44 = v53;
      outlined destroy of CachedGroupProperties?((uint64_t)v147);

      *v107 = v44;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v148);
    outlined destroy of CachedGroupProperties?((uint64_t)&v152);
    swift_bridgeObjectRelease();

  }
  else
  {
    v36 = v151;
    v37 = _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined destroy of CachedGroupProperties?((uint64_t)&v152);
    swift_bridgeObjectRelease();

    v103 = v37;
  }
}

void partial apply for closure #1 in CoreDataGroupStore.updateGroup(_:metaData:clearOldMetadata:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in CoreDataGroupStore.updateGroup(_:metaData:clearOldMetadata:)(*(id **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40) & 1, a1);
}

uint64_t closure #1 in closure #1 in CoreDataGroupStore.updateGroup(_:metaData:clearOldMetadata:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;

  v22 = a2;
  v24 = a1;
  v35 = 0;
  v34 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v23 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v32 = (uint64_t)&v17 - v23;
  v33 = type metadata accessor for GPKUserID();
  v31 = *(_QWORD *)(v33 - 8);
  v26 = *(_QWORD *)(v31 + 64);
  v25 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v17 - v25;
  v28 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v29 = (char *)&v17 - v28;
  v35 = (char *)&v17 - v28;
  v30 = *v4;
  v34 = v30;
  dispatch thunk of GPKMember.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1, v33) == 1)
  {
    result = outlined destroy of GPKUserID?(v32);
    *v22 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v29, v32, v33);
    v20 = type metadata accessor for GPKUser();
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v27, v29, v33);
    v19 = MEMORY[0x24BEE0D00];
    v18 = _allocateUninitializedArray<A>(_:)();
    v17 = v6;
    v7 = dispatch thunk of GPKMember.handle.getter();
    v8 = v17;
    v9 = v7;
    v10 = v18;
    *v17 = v9;
    v8[1] = v11;
    _finalizeUninitializedArray<A>(_:)();
    v21 = v10;
    dispatch thunk of GPKMember.isMe.getter();
    v12 = GPKUser.__allocating_init(userID:handles:isMe:)();
    v13 = v31;
    v14 = v33;
    v15 = v12;
    v16 = v29;
    *v22 = v15;
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v14);
  }
  return result;
}

uint64_t CoreDataGroupStore.deleteGroup(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[28] = v1;
  v2[27] = a1;
  v2[24] = v2;
  v2[25] = 0;
  v2[26] = 0;
  v3 = type metadata accessor for GPKGroupID();
  v2[29] = v3;
  v2[30] = *(_QWORD *)(v3 - 8);
  v2[31] = swift_task_alloc();
  v2[25] = a1;
  v2[26] = v1;
  return swift_task_switch();
}

uint64_t CoreDataGroupStore.deleteGroup(with:)()
{
  _QWORD *v0;
  id v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = v0[31];
  v9 = v0[30];
  v11 = v0[29];
  v8 = (id *)v0[28];
  v10 = v0[27];
  v0[24] = v0;
  v7 = *v8;
  v1 = *v8;
  outlined init with copy of CoreDataGroupStore((uint64_t)v8, (uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v10, v11);
  v13 = swift_task_alloc();
  *(_QWORD *)(v13 + 16) = v0 + 2;
  *(_QWORD *)(v13 + 24) = v12;
  NSManagedObjectContext.sync<A>(work:)();
  v5 = *(_QWORD *)(v6 + 248);
  v3 = *(_QWORD *)(v6 + 240);
  v4 = *(_QWORD *)(v6 + 232);
  swift_task_dealloc();
  outlined destroy of CoreDataGroupStore((id *)(v6 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v6 + 192) + 8))();
}

void *closure #1 in CoreDataGroupStore.deleteGroup(with:)(id *a1, uint64_t a2)
{
  uint64_t v2;
  void *result;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v21;
  void *v22;
  uint64_t v23;
  id *v24;
  id v25;
  _QWORD v26[3];
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v22 = 0;
  v24 = a1;
  v23 = a2;
  result = CoreDataGroupStore.group(for:)(a2);
  if (!v2)
  {
    v18 = result;
    if (!result)
      return 0;
    v22 = result;
    outlined init with copy of MetadataStore((uint64_t)(a1 + 6), (uint64_t)v30);
    v16 = v31;
    v17 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v17 + 8))(0, a2, v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    outlined init with copy of CachedGroupStore((uint64_t)(a1 + 16), (uint64_t)v27);
    v14 = v28;
    v15 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    v26[0] = 0;
    v26[1] = 0xF000000000000000;
    v26[2] = 0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v15 + 8))(v26, a2, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    v10 = *a1;
    v4 = *a1;
    objc_msgSend(v10, sel_deleteObject_, v18);

    v25 = 0;
    v12 = *a1;
    v5 = *a1;
    v21 = 0;
    v13 = objc_msgSend(v12, sel_save_, &v21);
    v11 = v21;
    v6 = v21;
    v7 = v25;
    v25 = v11;

    if ((v13 & 1) != 0)
    {

      return 0;
    }
    v8 = v25;
    v9 = _convertNSErrorToError(_:)();

    swift_willThrow();
    return (void *)v9;
  }
  return result;
}

void *partial apply for closure #1 in CoreDataGroupStore.deleteGroup(with:)()
{
  uint64_t v0;

  return closure #1 in CoreDataGroupStore.deleteGroup(with:)(*(id **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t CoreDataGroupStore.deleteAllGroups()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  *(_QWORD *)(v1 + 16) = v1;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 24) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v2;
  *v2 = *(_QWORD *)(v4 + 16);
  v2[1] = CoreDataGroupStore.deleteAllGroups();
  return CoreDataGroupStore.deleteGroups(where:)((uint64_t)&async function pointer to closure #1 in CoreDataGroupStore.deleteAllGroups(), 0);
}

_QWORD *CoreDataGroupStore.deleteAllGroups()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t closure #1 in CoreDataGroupStore.deleteAllGroups()()
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(v1 + 8))(1);
}

uint64_t CoreDataGroupStore.deleteGroups(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[60] = v2;
  v3[59] = a2;
  v3[58] = a1;
  v3[50] = v3;
  v3[46] = 0;
  v3[47] = 0;
  v3[51] = 0;
  v3[52] = 0;
  v3[53] = 0;
  v3[48] = 0;
  v3[49] = 0;
  v3[56] = 0;
  v3[46] = a1;
  v3[47] = a2;
  v3[51] = v2;
  return swift_task_switch();
}

uint64_t CoreDataGroupStore.deleteGroups(where:)()
{
  _QWORD *v0;
  id v1;
  int *v2;
  _QWORD *v3;
  id v5;
  id v6;
  id *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id *v14;
  uint64_t v15;

  v14 = (id *)v0[60];
  v0[50] = v0;
  type metadata accessor for Group();
  v0[52] = _allocateUninitializedArray<A>(_:)();
  v13 = *v14;
  v1 = *v14;
  outlined init with copy of CoreDataGroupStore((uint64_t)v14, (uint64_t)(v0 + 2));
  v15 = swift_task_alloc();
  *(_QWORD *)(v15 + 16) = v0 + 52;
  *(_QWORD *)(v15 + 24) = v0 + 2;
  NSManagedObjectContext.sync<A>(work:)();
  swift_task_dealloc();
  outlined destroy of CoreDataGroupStore((id *)(v12 + 16));

  *(_QWORD *)(v12 + 424) = _allocateUninitializedArray<A>(_:)();
  v10 = *(_QWORD *)(v12 + 416);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v12 + 432) = v10;
  *(_QWORD *)(v12 + 488) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Group]);
  lazy protocol witness table accessor for type [Group] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Group]>);
  IndexingIterator.next()();
  v11 = *(_QWORD *)(v12 + 440);
  *(_QWORD *)(v12 + 496) = v11;
  if (v11)
  {
    v2 = *(int **)(v12 + 464);
    *(_QWORD *)(v12 + 448) = v11;
    v9 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v12 + 504) = v3;
    *v3 = *(_QWORD *)(v12 + 400);
    v3[1] = CoreDataGroupStore.deleteGroups(where:);
    return v9(v11);
  }
  else
  {
    v7 = *(id **)(v12 + 480);
    outlined destroy of IndexingIterator<[Group]>();
    v6 = *v7;
    v5 = *v7;
    outlined init with copy of CoreDataGroupStore((uint64_t)v7, v12 + 192);
    v8 = swift_task_alloc();
    *(_QWORD *)(v8 + 16) = v12 + 424;
    *(_QWORD *)(v8 + 24) = v12 + 192;
    NSManagedObjectContext.sync<A>(work:)();
    swift_task_dealloc();
    outlined destroy of CoreDataGroupStore((id *)(v12 + 192));

    outlined destroy of [Group]();
    outlined destroy of [Group]();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v12 + 400) + 8))();
  }
}

{
  uint64_t v0;
  char v1;
  int *v2;
  _QWORD *v3;
  id v5;
  id v6;
  id v7;
  id *v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;

  v1 = *(_BYTE *)(v0 + 188);
  *(_QWORD *)(v0 + 400) = v0;
  if ((v1 & 1) != 0)
  {
    v10 = *(void **)(v13 + 496);
    v5 = v10;
    *(_QWORD *)(v13 + 456) = v10;
    Array.append(_:)();

  }
  else
  {

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Group]>);
  IndexingIterator.next()();
  v12 = *(_QWORD *)(v13 + 440);
  *(_QWORD *)(v13 + 496) = v12;
  if (v12)
  {
    v2 = *(int **)(v13 + 464);
    *(_QWORD *)(v13 + 448) = v12;
    v11 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v13 + 504) = v3;
    *v3 = *(_QWORD *)(v13 + 400);
    v3[1] = CoreDataGroupStore.deleteGroups(where:);
    return v11(v12);
  }
  else
  {
    v8 = *(id **)(v13 + 480);
    outlined destroy of IndexingIterator<[Group]>();
    v7 = *v8;
    v6 = *v8;
    outlined init with copy of CoreDataGroupStore((uint64_t)v8, v13 + 192);
    v9 = swift_task_alloc();
    *(_QWORD *)(v9 + 16) = v13 + 424;
    *(_QWORD *)(v9 + 24) = v13 + 192;
    NSManagedObjectContext.sync<A>(work:)();
    swift_task_dealloc();
    outlined destroy of CoreDataGroupStore((id *)(v13 + 192));

    outlined destroy of [Group]();
    outlined destroy of [Group]();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v13 + 400) + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 496);
  *(_QWORD *)(v0 + 400) = v0;

  outlined destroy of IndexingIterator<[Group]>();
  outlined destroy of [Group]();
  outlined destroy of [Group]();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 400) + 8))();
}

uint64_t CoreDataGroupStore.deleteGroups(where:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 400) = *v2;
  *(_BYTE *)(v3 + 188) = a1;
  *(_QWORD *)(v3 + 512) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

void closure #1 in CoreDataGroupStore.deleteGroups(where:)(uint64_t *a1, id *a2)
{
  id v2;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  type metadata accessor for Group();
  v7 = (id)static Group.fetchRequest()();
  v5 = *a2;
  v2 = *a2;
  v8 = NSManagedObjectContext.fetch<A>(_:)();

  if (!v6)
  {
    *a1 = v8;
    swift_bridgeObjectRelease();
  }

}

void partial apply for closure #1 in CoreDataGroupStore.deleteGroups(where:)()
{
  uint64_t v0;

  closure #1 in CoreDataGroupStore.deleteGroups(where:)(*(uint64_t **)(v0 + 16), *(id **)(v0 + 24));
}

uint64_t closure #2 in CoreDataGroupStore.deleteGroups(where:)(uint64_t a1, id *a2)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _BYTE v16[16];
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  unsigned int v66;
  id v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  id *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  unint64_t v83;
  _BYTE *v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  id v93[2];
  _QWORD v94[2];
  uint64_t v95;
  void **v96;
  _BYTE *v97;
  _BYTE *v98;
  _BYTE v99[24];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[3];
  _BYTE v104[24];
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[24];
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *v111;
  uint64_t v112;

  v78 = a1;
  v77 = a2;
  v112 = *MEMORY[0x24BDAC8D0];
  v98 = 0;
  v97 = 0;
  v96 = 0;
  v95 = 0;
  v86 = v94;
  v94[0] = 0;
  v94[1] = 0;
  v92 = 0;
  v91 = 0;
  v74 = 0;
  v70 = type metadata accessor for GPKGroupID();
  v71 = *(_QWORD *)(v70 - 8);
  v72 = (*(_QWORD *)(v71 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v70);
  v73 = &v16[-v72];
  v98 = &v16[-v72];
  v75 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v74);
  v76 = &v16[-v75];
  v79 = type metadata accessor for UUID();
  v80 = *(_QWORD *)(v79 - 8);
  v81 = (*(_QWORD *)(v80 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v78);
  v82 = &v16[-v81];
  v83 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v84 = &v16[-v83];
  v97 = &v16[-v83];
  v96 = v4;
  v95 = v5;
  v85 = *v4;
  swift_bridgeObjectRetain();
  v93[1] = v85;
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Group]);
  lazy protocol witness table accessor for type [Group] and conformance [A]();
  Collection<>.makeIterator()();
  v89 = v88;
  while (1)
  {
    v68 = v89;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Group]>);
    IndexingIterator.next()();
    v69 = v111;
    if (!v111)
      break;
    v67 = v69;
    v62 = v69;
    v92 = v69;
    v63 = objc_msgSend(v69, sel_groupID);
    if (v63)
    {
      v61 = v63;
      v60 = v63;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 32))(v76, v82, v79);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v76, 0, 1, v79);

    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v76, 1, 1, v79);
    }
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v80 + 48))(v76, 1, v79) == 1)
    {
      outlined destroy of UUID?((uint64_t)v76);

      v89 = v68;
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 32))(v84, v76, v79);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 16))(v82, v84, v79);
      GPKGroupID.init(uuid:)();
      v55 = v107;
      outlined init with copy of MetadataStore((uint64_t)(v77 + 6), (uint64_t)v107);
      v56 = v108;
      v57 = v109;
      __swift_project_boxed_opaque_existential_1(v55, v108);
      v10 = v68;
      (*(void (**)(_QWORD, _BYTE *, uint64_t))(v57 + 8))(0, v73, v56);
      v58 = v10;
      v59 = v10;
      if (v10)
      {
        v21 = v59;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
        (*(void (**)(_BYTE *, uint64_t))(v71 + 8))(v73, v70);
        (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v84, v79);

        outlined destroy of IndexingIterator<[Group]>();
        result = v21;
        v22 = v21;
        return result;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
      v50 = v104;
      outlined init with copy of CachedGroupStore((uint64_t)(v77 + 16), (uint64_t)v104);
      v51 = v105;
      v52 = v106;
      __swift_project_boxed_opaque_existential_1(v50, v105);
      v11 = v58;
      v103[0] = 0;
      v103[1] = 0xF000000000000000;
      v103[2] = 0;
      (*(void (**)(_QWORD *, _BYTE *, uint64_t))(v52 + 8))(v103, v73, v51);
      v53 = v11;
      v54 = v11;
      if (v11)
      {
        v20 = v54;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
        (*(void (**)(_BYTE *, uint64_t))(v71 + 8))(v73, v70);
        (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v84, v79);

        outlined destroy of IndexingIterator<[Group]>();
        result = v20;
        v22 = v20;
        return result;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v104);
      v49 = objc_msgSend(v62, sel_participants);
      if (v49)
      {
        v48 = v49;
        v45 = v49;
        type metadata accessor for DatabaseParticipant();
        v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v47 = v46;
      }
      else
      {
        v47 = 0;
      }
      v102 = v47;
      if (v47)
      {
        v36 = &v102;
        v37 = v102;
        swift_bridgeObjectRetain();
        outlined destroy of [DatabaseParticipant]?();
        v90 = v37;
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DatabaseParticipant]);
        v39 = type metadata accessor for GPKUserID();
        lazy protocol witness table accessor for type [DatabaseParticipant] and conformance [A]();
        v12 = v53;
        v13 = Sequence.compactMap<A>(_:)();
        v40 = v12;
        v41 = v13;
        if (v12)
        {
          __break(1u);
LABEL_30:
          v19 = v30;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
          swift_bridgeObjectRelease();
          (*(void (**)(_BYTE *, uint64_t))(v71 + 8))(v73, v70);
          (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v84, v79);

          outlined destroy of IndexingIterator<[Group]>();
          return v19;
        }
        v35 = v41;
        outlined destroy of [DatabaseParticipant]();
        v43 = v35;
        v44 = v40;
      }
      else
      {
        v42 = 0;
        outlined destroy of [DatabaseParticipant]?();
        v43 = v42;
        v44 = v53;
      }
      v33 = v44;
      v34 = v43;
      if (v43)
      {
        v32 = v34;
        v28 = v34;
        v91 = v34;
        v25 = v99;
        outlined init with copy of UserStore((uint64_t)(v77 + 1), (uint64_t)v99);
        v26 = v100;
        v27 = v101;
        __swift_project_boxed_opaque_existential_1(v25, v100);
        v14 = v33;
        (*(void (**)(uint64_t, uint64_t))(v27 + 48))(v28, v26);
        v29 = v14;
        v30 = v14;
        if (v14)
          goto LABEL_30;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);
        swift_bridgeObjectRelease();
        v31 = v29;
      }
      else
      {
        v31 = v33;
      }
      v24 = v31;
      v23 = *v77;
      v15 = v23;
      objc_msgSend(v23, sel_deleteObject_, v62);

      (*(void (**)(_BYTE *, uint64_t))(v71 + 8))(v73, v70);
      (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v84, v79);

      v89 = v24;
    }
  }
  outlined destroy of IndexingIterator<[Group]>();
  v110 = 0;
  v65 = *v77;
  v6 = v65;
  v93[0] = v110;
  v66 = objc_msgSend(v65, sel_save_, v93);
  v64 = v93[0];
  v7 = v93[0];
  v8 = v110;
  v110 = v64;

  result = v66;
  if ((v66 & 1) == 0)
  {
    v17 = v110;
    v18 = _convertNSErrorToError(_:)();

    swift_willThrow();
    result = v18;
    v22 = v18;
  }
  return result;
}

uint64_t partial apply for closure #2 in CoreDataGroupStore.deleteGroups(where:)()
{
  uint64_t v0;

  return closure #2 in CoreDataGroupStore.deleteGroups(where:)(*(_QWORD *)(v0 + 16), *(id **)(v0 + 24));
}

uint64_t closure #1 in closure #2 in CoreDataGroupStore.deleteGroups(where:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  DatabaseParticipant.userID.getter();
  v1 = type metadata accessor for GPKUserID();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 0, 1);
}

uint64_t protocol witness for GroupStore.hasGroup(with:) in conformance CoreDataGroupStore(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v2 = CoreDataGroupStore.hasGroup(with:)(a1);
  if (v1)
    return 1;
  else
    return v2 & 1;
}

uint64_t protocol witness for GroupStore.getGroup(by:) in conformance CoreDataGroupStore(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for GroupStore.getGroup(by:) in conformance CoreDataGroupStore;
  return CoreDataGroupStore.getGroup(by:)(a1);
}

_QWORD *protocol witness for GroupStore.getGroup(by:) in conformance CoreDataGroupStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t protocol witness for GroupStore.getGroups(matching:) in conformance CoreDataGroupStore(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for GroupStore.getGroups(matching:) in conformance CoreDataGroupStore;
  return CoreDataGroupStore.getGroups(matching:)(a1);
}

_QWORD *protocol witness for GroupStore.getGroups(matching:) in conformance CoreDataGroupStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t protocol witness for GroupStore.createGroup(_:with:) in conformance CoreDataGroupStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for GroupStore.createGroup(_:with:) in conformance CoreDataGroupStore;
  return CoreDataGroupStore.createGroup(_:with:)(a1, a2);
}

_QWORD *protocol witness for GroupStore.createGroup(_:with:) in conformance CoreDataGroupStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t protocol witness for GroupStore.updateGroup(_:metaData:) in conformance CoreDataGroupStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for GroupStore.updateGroup(_:metaData:) in conformance CoreDataGroupStore;
  return CoreDataGroupStore.updateGroup(_:metaData:)(a1, a2);
}

_QWORD *protocol witness for GroupStore.updateGroup(_:metaData:) in conformance CoreDataGroupStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t protocol witness for GroupStore.updateGroup(_:metaData:clearOldMetadata:) in conformance CoreDataGroupStore(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for GroupStore.updateGroup(_:metaData:clearOldMetadata:) in conformance CoreDataGroupStore;
  return CoreDataGroupStore.updateGroup(_:metaData:clearOldMetadata:)(a1, a2, a3 & 1);
}

_QWORD *protocol witness for GroupStore.updateGroup(_:metaData:clearOldMetadata:) in conformance CoreDataGroupStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t protocol witness for GroupStore.deleteGroup(with:) in conformance CoreDataGroupStore(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for GroupStore.deleteGroup(with:) in conformance CoreDataGroupStore;
  return CoreDataGroupStore.deleteGroup(with:)(a1);
}

_QWORD *protocol witness for GroupStore.deleteGroup(with:) in conformance CoreDataGroupStore()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for GroupStore.deleteAllGroups() in conformance CoreDataGroupStore()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for GroupStore.deleteAllGroups() in conformance CoreDataGroupStore;
  return CoreDataGroupStore.deleteAllGroups()();
}

_QWORD *protocol witness for GroupStore.deleteAllGroups() in conformance CoreDataGroupStore()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for GroupStore.deleteGroups(where:) in conformance CoreDataGroupStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for GroupStore.deleteGroups(where:) in conformance CoreDataGroupStore;
  return CoreDataGroupStore.deleteGroups(where:)(a1, a2);
}

_QWORD *protocol witness for GroupStore.deleteGroups(where:) in conformance CoreDataGroupStore()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t dispatch thunk of GroupStore.hasGroup(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))() & 1;
}

uint64_t dispatch thunk of GroupStore.getGroup(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 16) + **(int **)(a3 + 16));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of GroupStore.getGroup(by:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of GroupStore.getGroup(by:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of GroupStore.getGroups(matching:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 24) + **(int **)(a3 + 24));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of GroupStore.getGroups(matching:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of GroupStore.getGroups(matching:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of GroupStore.createGroup(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 32) + **(int **)(a4 + 32));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of GroupStore.createGroup(_:with:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of GroupStore.createGroup(_:with:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of GroupStore.updateGroup(_:metaData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 40) + **(int **)(a4 + 40));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of GroupStore.updateGroup(_:metaData:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of GroupStore.updateGroup(_:metaData:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of GroupStore.updateGroup(_:metaData:clearOldMetadata:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v12)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v12 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 + 48) + **(int **)(a5 + 48));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = dispatch thunk of GroupStore.updateGroup(_:metaData:clearOldMetadata:);
  return v12(a1, a2, a3 & 1, a4, a5);
}

uint64_t dispatch thunk of GroupStore.updateGroup(_:metaData:clearOldMetadata:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of GroupStore.deleteGroup(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 56) + **(int **)(a3 + 56));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of GroupStore.deleteGroup(with:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of GroupStore.deleteGroup(with:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of GroupStore.deleteAllGroups()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v6)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 64) + **(int **)(a2 + 64));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of GroupStore.deleteAllGroups();
  return v6(a1, a2);
}

uint64_t dispatch thunk of GroupStore.deleteAllGroups()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of GroupStore.deleteGroups(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 72) + **(int **)(a4 + 72));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of GroupStore.deleteGroups(where:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of GroupStore.deleteGroups(where:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for CoreDataGroupStore(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CoreDataGroupStore(id *a1)
{

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 6));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 11));
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 16));
}

uint64_t initializeWithCopy for CoreDataGroupStore(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  id v8;

  v8 = *(id *)a2;
  v2 = *(id *)a2;
  *(_QWORD *)a1 = v8;
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 48, a2 + 48);
  v5 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v5;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 88, a2 + 88);
  v6 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 128, a2 + 128);
  result = a1;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  return result;
}

float assignWithCopy for CoreDataGroupStore(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  float result;
  id v5;

  v5 = *(id *)a2;
  v2 = *(id *)a2;
  v3 = *(void **)a1;
  *(_QWORD *)a1 = v5;

  __swift_assign_boxed_opaque_existential_1(a1 + 8, (uint64_t *)(a2 + 8));
  __swift_assign_boxed_opaque_existential_1(a1 + 48, (uint64_t *)(a2 + 48));
  __swift_assign_boxed_opaque_existential_1(a1 + 88, (uint64_t *)(a2 + 88));
  __swift_assign_boxed_opaque_existential_1(a1 + 128, (uint64_t *)(a2 + 128));
  result = *(float *)(a2 + 168);
  *(float *)(a1 + 168) = result;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy172_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0xACuLL);
}

float assignWithTake for CoreDataGroupStore(uint64_t a1, uint64_t a2)
{
  void *v3;
  float result;

  v3 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  memcpy((void *)(a1 + 88), (const void *)(a2 + 88), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  memcpy((void *)(a1 + 128), (const void *)(a2 + 128), 0x28uLL);
  result = *(float *)(a2 + 168);
  *(float *)(a1 + 168) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CoreDataGroupStore(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 172))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreDataGroupStore(uint64_t result, int a2, int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 172);
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 152) = 0;
    *(_QWORD *)(result + 144) = 0;
    *(_QWORD *)(result + 136) = 0;
    *(_QWORD *)(result + 128) = 0;
    *(_QWORD *)(result + 160) = 0;
    *(_DWORD *)(result + 168) = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      *(_QWORD *)result = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreDataGroupStore()
{
  return &type metadata for CoreDataGroupStore;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [DatabaseParticipant]?()
{
  swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type [DatabaseParticipant] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [DatabaseParticipant] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DatabaseParticipant] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DatabaseParticipant]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [DatabaseParticipant] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [DatabaseParticipant] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DatabaseParticipant] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DatabaseParticipant]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [DatabaseParticipant] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [DatabaseParticipant]()
{
  swift_bridgeObjectRelease();
}

uint64_t outlined destroy of CachedGroupProperties?(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t outlined copy of CachedGroupProperties?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined copy of Data._Representation(result, a2);
  return result;
}

uint64_t outlined consume of CachedGroupProperties?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(result, a2);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Group?(id *a1)
{

}

char *outlined init with take of (key: UUID, value: [Group])?(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: [Group]));
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: [Group])?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v2 = type metadata accessor for UUID();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    *(_QWORD *)&a2[*(int *)(v7 + 48)] = *(_QWORD *)&a1[*(int *)(v7 + 48)];
    (*(void (**)(void))(v8 + 56))();
  }
  return a2;
}

uint64_t *partial apply for closure #1 in closure #1 in CoreDataGroupStore.getGroups(matching:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in CoreDataGroupStore.getGroups(matching:)(a1, *(_QWORD *)(v3 + 16), a2, a3);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [Group]?()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GPKMetadata]?()
{
  swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in closure #1 in CoreDataGroupStore.getGroup(by:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;

  return closure #1 in closure #1 in CoreDataGroupStore.getGroup(by:)(a1, v3[2], v3[3], v3[4], v3[5], v3[6], a2, a3);
}

void *_sxSgs5ErrorRd__Ri_d_0_r_0_lWOc(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a2, a1, a3);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
  }
  return a2;
}

uint64_t GroupSigning.sign(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v10 = Data.init()();
  v12 = v4;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a1, a2);
  outlined consume of Data._Representation(v10, v12);
  if (v7)
    return v6;
  else
    return v13;
}

uint64_t GroupSigner.cryptoService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptographyServiceProviding(v1, a1);
}

uint64_t GroupSigner.group.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptoGroup(v1 + 40, a1);
}

uint64_t outlined init with copy of CryptoGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t GroupSigner.diversifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 88));
  return v2;
}

uint64_t GroupSigner.role.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GroupSigner() + 28);
  v2 = type metadata accessor for GPKMemberRole();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GroupSigner()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GroupSigner;
  if (!type metadata singleton initialization cache for GroupSigner)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GroupSigner.sign(_:authenticatedData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[40];
  _BYTE v39[16];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v29 = a1;
  v30 = a2;
  v27 = a3;
  v28 = a4;
  v45 = 0;
  v46 = 0;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v19 = 0;
  v22 = type metadata accessor for GPKMemberRole();
  v20 = *(_QWORD *)(v22 - 8);
  v17 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v21);
  v31 = (char *)v14 - v17;
  v45 = v4;
  v46 = v5;
  v43 = v6;
  v44 = v7;
  v42 = v8;
  v18 = v39;
  outlined init with copy of CryptographyServiceProviding(v8, (uint64_t)v39);
  v23 = v40;
  v24 = v41;
  __swift_project_boxed_opaque_existential_1(v18, v40);
  v33 = v38;
  outlined init with copy of CryptoGroup(v21 + 40, (uint64_t)v38);
  v25 = *(_QWORD *)(v21 + 80);
  v26 = *(_QWORD *)(v21 + 88);
  outlined copy of Data._Representation(v25, v26);
  v9 = type metadata accessor for GroupSigner();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v31, v21 + *(int *)(v9 + 28), v22);
  v10 = v32;
  v11 = (*(uint64_t (**)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v24 + 248))(v33, v25, v26, v27, v28, v29, v30, v31, v23, v24);
  v34 = v10;
  v35 = v11;
  v36 = v12;
  v37 = v10;
  if (v10)
  {
    v14[0] = v37;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, v22);
    outlined consume of Data._Representation(v25, v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    return v14[1];
  }
  else
  {
    v16 = v36;
    v15 = v35;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v31, v22);
    outlined consume of Data._Representation(v25, v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    return v15;
  }
}

uint64_t GroupSigner.init(cryptoService:group:diversifier:role:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;

  outlined init with take of CryptographyServiceProviding(a1, a6);
  outlined init with take of CryptoGroup(a2, a6 + 5);
  a6[10] = a3;
  a6[11] = a4;
  v12 = *(int *)(type metadata accessor for GroupSigner() + 28);
  v6 = type metadata accessor for GPKMemberRole();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))((char *)a6 + v12, a5);
}

void *outlined init with take of CryptoGroup(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t protocol witness for GroupSigning.sign(_:authenticatedData:) in conformance GroupSigner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v7 = GroupSigner.sign(_:authenticatedData:)(a1, a2, a3, a4);
  if (v4)
    return v6;
  else
    return v7;
}

uint64_t GroupEncryptor.cryptoService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptographyServiceProviding(v1, a1);
}

uint64_t GroupEncryptor.group.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptoGroup(v1 + 40, a1);
}

uint64_t GroupEncryptor.diversifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 88));
  return v2;
}

uint64_t GroupEncryptor.role.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for GroupEncryptor() + 28);
  v2 = type metadata accessor for GPKMemberRole();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for GroupEncryptor()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for GroupEncryptor;
  if (!type metadata singleton initialization cache for GroupEncryptor)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t GroupEncryptor.entitlementID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for GroupEncryptor() + 32);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t GroupEncryptor.init(cryptoService:group:diversifier:role:entitlementID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, char *a8@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _BYTE v44[40];
  _BYTE v45[40];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;

  v33 = a8;
  v42 = a1;
  v41 = a2;
  v39 = a3;
  v40 = a4;
  v37 = a5;
  v35 = a6;
  v34 = a7;
  v53 = 0;
  v52 = 0;
  v51 = 0;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v26 = 0;
  v38 = type metadata accessor for GPKMemberRole();
  v36 = *(_QWORD *)(v38 - 8);
  v27 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v31 = (char *)&v26 - v27;
  v32 = type metadata accessor for GroupEncryptor();
  v28 = (*(_QWORD *)(*(_QWORD *)(v32 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v43 = (char *)&v26 - v28;
  v53 = (char *)&v26 - v28;
  v52 = v8;
  v51 = v9;
  v49 = v10;
  v50 = v11;
  v48 = v12;
  v46 = v13;
  v47 = v14;
  v29 = v45;
  outlined init with copy of CryptographyServiceProviding(v8, (uint64_t)v45);
  outlined init with take of CryptographyServiceProviding(v29, v43);
  v30 = v44;
  outlined init with copy of CryptoGroup(v41, (uint64_t)v44);
  outlined init with take of CryptoGroup(v30, v43 + 40);
  outlined copy of Data._Representation(v39, v40);
  v15 = v31;
  v16 = v36;
  v17 = v37;
  v18 = v38;
  v19 = v40;
  v20 = v43;
  *((_QWORD *)v43 + 10) = v39;
  *((_QWORD *)v20 + 11) = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v15, v17, v18);
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v43[*(int *)(v32 + 28)], v31, v38);
  outlined copy of Data._Representation(v35, v34);
  v21 = v33;
  v22 = v34;
  v23 = v43;
  v24 = &v43[*(int *)(v32 + 32)];
  *(_QWORD *)v24 = v35;
  *((_QWORD *)v24 + 1) = v22;
  outlined init with copy of GroupEncryptor(v23, v21);
  outlined consume of Data._Representation(v35, v34);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
  outlined consume of Data._Representation(v39, v40);
  __swift_destroy_boxed_opaque_existential_1(v41);
  __swift_destroy_boxed_opaque_existential_1(v42);
  return outlined destroy of GroupEncryptor((uint64_t)v43);
}

char *outlined init with copy of GroupEncryptor(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *result;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a2 + 3) = v2;
  *((_QWORD *)a2 + 4) = *((_QWORD *)a1 + 4);
  (**(void (***)(void))(v2 - 8))();
  v3 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a2 + 8) = v3;
  *((_QWORD *)a2 + 9) = *((_QWORD *)a1 + 9);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 40), (uint64_t)(a1 + 40));
  v7 = *((_QWORD *)a1 + 10);
  v8 = *((_QWORD *)a1 + 11);
  outlined copy of Data._Representation(v7, v8);
  *((_QWORD *)a2 + 10) = v7;
  *((_QWORD *)a2 + 11) = v8;
  v10 = type metadata accessor for GroupEncryptor();
  v9 = *(int *)(v10 + 28);
  v4 = type metadata accessor for GPKMemberRole();
  (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(&a2[v9], &a1[v9]);
  v12 = *(int *)(v10 + 32);
  v13 = *(_QWORD *)&a1[v12];
  v14 = *(_QWORD *)&a1[v12 + 8];
  outlined copy of Data._Representation(v13, v14);
  result = a2;
  v6 = (uint64_t *)&a2[v12];
  *v6 = v13;
  v6[1] = v14;
  return result;
}

uint64_t outlined destroy of GroupEncryptor(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  v4 = type metadata accessor for GroupEncryptor();
  v3 = *(int *)(v4 + 28);
  v1 = type metadata accessor for GPKMemberRole();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(v4 + 32)), *(_QWORD *)(a1 + *(int *)(v4 + 32) + 8));
  return a1;
}

uint64_t GroupEncryptor.encrypt(_:authenticatedData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[32];
  char v42[8];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v29 = a1;
  v30 = a2;
  v31 = a3;
  v32 = a4;
  v48 = 0;
  v49 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  v19 = 0;
  v21 = type metadata accessor for GPKMemberRole();
  v20 = *(_QWORD *)(v21 - 8);
  v17 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v33 = (char *)v14 - v17;
  v48 = v4;
  v49 = v5;
  v46 = v6;
  v47 = v7;
  v45 = v8;
  v18 = v42;
  outlined init with copy of CryptographyServiceProviding(v8, (uint64_t)v42);
  v26 = v43;
  v27 = v44;
  __swift_project_boxed_opaque_existential_1(v18, v43);
  v28 = v41;
  outlined init with copy of CryptoGroup(v23 + 40, (uint64_t)v41);
  v22 = type metadata accessor for GroupEncryptor();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v33, v23 + *(int *)(v22 + 28), v21);
  v9 = (uint64_t *)(v23 + *(int *)(v22 + 32));
  v34 = *v9;
  v35 = v9[1];
  outlined copy of Data._Representation(v34, v35);
  v24 = *(_QWORD *)(v23 + 80);
  v25 = *(_QWORD *)(v23 + 88);
  outlined copy of Data._Representation(v24, v25);
  v10 = v36;
  v11 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v27 + 224))(v28, v29, v30, v31, v32, v33, v34, v35, v24, v25, v26, v27);
  v37 = v10;
  v38 = v11;
  v39 = v12;
  v40 = v10;
  if (v10)
  {
    v14[1] = v40;
    outlined consume of Data._Representation(v24, v25);
    outlined consume of Data._Representation(v34, v35);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    return v14[2];
  }
  else
  {
    v16 = v39;
    v15 = v38;
    outlined consume of Data._Representation(v24, v25);
    outlined consume of Data._Representation(v34, v35);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v33, v21);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    return v15;
  }
}

uint64_t protocol witness for GroupEncrypting.encrypt(_:authenticatedData:) in conformance GroupEncryptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v7 = GroupEncryptor.encrypt(_:authenticatedData:)(a1, a2, a3, a4);
  if (v4)
    return v6;
  else
    return v7;
}

uint64_t GroupDecryptor.cryptoService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptographyServiceProviding(v1, a1);
}

uint64_t GroupDecryptor.group.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptoGroup(v1 + 40, a1);
}

uint64_t GroupDecryptor.diversifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 88));
  return v2;
}

uint64_t GroupDecryptor.entitlementID.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 96);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 104));
  return v2;
}

uint64_t GroupDecryptor.init(cryptoService:group:diversifier:entitlementID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  _BYTE v15[40];
  _BYTE v16[40];
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD __b[14];

  memset(__b, 0, sizeof(__b));
  v22 = a1;
  v21 = a2;
  v19 = a3;
  v20 = a4;
  v17 = a5;
  v18 = a6;
  outlined init with copy of CryptographyServiceProviding(a1, (uint64_t)v16);
  outlined init with take of CryptographyServiceProviding(v16, __b);
  outlined init with copy of CryptoGroup(a2, (uint64_t)v15);
  outlined init with take of CryptoGroup(v15, &__b[5]);
  outlined copy of Data._Representation(a3, a4);
  __b[10] = a3;
  __b[11] = a4;
  outlined copy of Data._Representation(a5, a6);
  __b[12] = a5;
  __b[13] = a6;
  outlined init with copy of GroupDecryptor(__b, a7);
  outlined consume of Data._Representation(a5, a6);
  outlined consume of Data._Representation(a3, a4);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return outlined destroy of GroupDecryptor((uint64_t)__b);
}

_QWORD *outlined init with copy of GroupDecryptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;

  v2 = a1[3];
  a2[3] = v2;
  a2[4] = a1[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a1[8];
  a2[8] = v3;
  a2[9] = a1[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 5), (uint64_t)(a1 + 5));
  v5 = a1[10];
  v6 = a1[11];
  outlined copy of Data._Representation(v5, v6);
  a2[10] = v5;
  a2[11] = v6;
  v8 = a1[12];
  v9 = a1[13];
  outlined copy of Data._Representation(v8, v9);
  result = a2;
  a2[12] = v8;
  a2[13] = v9;
  return result;
}

uint64_t outlined destroy of GroupDecryptor(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  return a1;
}

uint64_t GroupDecryptor.decrypt(_:authenticatedData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[40];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v7 = v4;
  v27 = a1;
  v28 = a2;
  v25 = a3;
  v26 = a4;
  v24 = v4;
  outlined init with copy of CryptographyServiceProviding((uint64_t)v4, (uint64_t)v21);
  v9 = v22;
  v10 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  outlined init with copy of CryptoGroup((uint64_t)(v4 + 5), (uint64_t)v20);
  v15 = v4[12];
  v16 = v4[13];
  outlined copy of Data._Representation(v7[12], v7[13]);
  v17 = v4[10];
  v8 = v4[11];
  outlined copy of Data._Representation(v7[10], v7[11]);
  v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v10 + 232))(v20, a1, a2, a3, a4, v15, v16, v17, v8, v9, v10);
  outlined consume of Data._Representation(v17, v8);
  outlined consume of Data._Representation(v15, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  if (v18)
    return v6;
  else
    return v19;
}

uint64_t protocol witness for GroupDecrypting.decrypt(_:authenticatedData:) in conformance GroupDecryptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v7 = GroupDecryptor.decrypt(_:authenticatedData:)(a1, a2, a3, a4);
  if (v4)
    return v6;
  else
    return v7;
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoKeyingAlgorithm.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoUserID(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoGroupID(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoGroup(from:originatorUserID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 32) + **(int **)(a5 + 32));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = dispatch thunk of CryptographyServiceProviding.cryptoGroup(from:originatorUserID:);
  return v12(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoGroup(from:originatorUserID:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoMembership(members:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.hasGroup(groupID:memberID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 48) + **(int **)(a4 + 48));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of CryptographyServiceProviding.hasGroup(groupID:memberID:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CryptographyServiceProviding.hasGroup(groupID:memberID:)(unsigned int a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of CryptographyServiceProviding.loadPreviousGroup(groupID:memberID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 56) + **(int **)(a5 + 56));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = dispatch thunk of CryptographyServiceProviding.loadPreviousGroup(groupID:memberID:);
  return v12(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of CryptographyServiceProviding.loadPreviousGroup(groupID:memberID:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoUserKeyingInfo(userID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 64) + **(int **)(a4 + 64));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of CryptographyServiceProviding.cryptoUserKeyingInfo(userID:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoUserKeyingInfo(userID:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoUserAndPublicKeyInfo(for:role:keyBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 72))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.initiateMembershipUpdate(for:add:delete:toggleRole:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 80))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.finalizeMembershipUpdate(for:response:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a5 + 88))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoInvitation(recipientID:invitationBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 96) + **(int **)(a5 + 96));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = dispatch thunk of CryptographyServiceProviding.cryptoInvitation(recipientID:invitationBlob:);
  return v12(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoInvitation(recipientID:invitationBlob:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of CryptographyServiceProviding.validateInviteSignature(invitersKeyBlob:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 104))() & 1;
}

uint64_t dispatch thunk of CryptographyServiceProviding.produceRSVP(for:nonce:accept:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a5 + 112))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of CryptographyServiceProviding.validateRSVPResponse(rsvpResponseBlob:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 120))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.produceRSVP(for:nonce:response:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 128))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoNonce(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoGroup(groupID:version:memberID:groupBlob:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v18)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v8 + 16) = v8;
  v18 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 + 144) + **(int **)(a8 + 144));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v9;
  *v9 = *(_QWORD *)(v8 + 16);
  v9[1] = dispatch thunk of CryptographyServiceProviding.cryptoGroup(groupID:version:memberID:groupBlob:);
  return v18(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of CryptographyServiceProviding.cryptoGroup(groupID:version:memberID:groupBlob:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.retrieveGroupMembership(group:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.initiateVersionUpdate(for:newVersion:updatedGroupBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 160))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.createRSVPQueueRequest(group:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 168))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.processRSVPQueueRequest(group:blob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 176))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.validateMemberKeyingMaterial(group:userKeys:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 184))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.groupRequiresSeedValidation(group:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 192))() & 1;
}

uint64_t dispatch thunk of CryptographyServiceProviding.memberRoles(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 200))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.createSeedBlobRequest(group:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 208))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.validateSeedBlobsAndFinalizeGroup(group:seedBlobs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 216))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.encryptMessage(group:message:associatedData:role:entitlementID:keyDiversifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a12 + 224))(a1, a2, a3, a4);
}

uint64_t dispatch thunk of CryptographyServiceProviding.decryptMessage(group:ciphertext:associatedData:entitlementID:keyDiversifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a11 + 232))(a1, a2, a3);
}

uint64_t dispatch thunk of CryptographyServiceProviding.signNonceForGroupBlobRequest(userID:groupID:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 240)
                                                                            + **(int **)(a5 + 240));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = dispatch thunk of CryptographyServiceProviding.signNonceForGroupBlobRequest(userID:groupID:nonce:);
  return v12(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of CryptographyServiceProviding.signNonceForGroupBlobRequest(userID:groupID:nonce:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 16) = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 8))(a1, a2);
}

uint64_t dispatch thunk of CryptographyServiceProviding.sign(group:diversifier:authenticatedData:dataToSign:role:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 248))(a1, a2);
}

uint64_t dispatch thunk of CryptographyServiceProviding.shouldRetry(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 256))() & 1;
}

uint64_t dispatch thunk of CryptographyServiceProviding.deleteGroupStateFromDeviceToDeviceEncryptedContainer(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 264))();
}

uint64_t dispatch thunk of CryptographyServiceProviding.stableIdentifier(group:userID:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 272))();
}

uint64_t dispatch thunk of GroupSigning.sign(_:authenticatedData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

unint64_t initializeBufferWithCopyOfBuffer for GroupSigner(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    v3 = a2[3];
    a1[3] = v3;
    a1[4] = a2[4];
    (**(void (***)(void))(v3 - 8))();
    v4 = a2[8];
    a1[8] = v4;
    a1[9] = a2[9];
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
    v7 = a2[10];
    v8 = a2[11];
    outlined copy of Data._Representation(v7, v8);
    a1[10] = v7;
    a1[11] = v8;
    v10 = (char *)a1 + *(int *)(a3 + 28);
    v9 = (char *)a2 + *(int *)(a3 + 28);
    v5 = type metadata accessor for GPKMemberRole();
    (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(v10, v9);
    return (unint64_t)a1;
  }
}

uint64_t destroy for GroupSigner(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  v5 = *(int *)(a2 + 28);
  v2 = type metadata accessor for GPKMemberRole();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v5);
}

char *initializeWithCopy for GroupSigner(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 3) = v3;
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  (**(void (***)(void))(v3 - 8))();
  v4 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a1 + 8) = v4;
  *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 40), (uint64_t)(a2 + 40));
  v7 = *((_QWORD *)a2 + 10);
  v8 = *((_QWORD *)a2 + 11);
  outlined copy of Data._Representation(v7, v8);
  *((_QWORD *)a1 + 10) = v7;
  *((_QWORD *)a1 + 11) = v8;
  v10 = *(int *)(a3 + 28);
  v5 = type metadata accessor for GPKMemberRole();
  (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(&a1[v10], &a2[v10]);
  return a1;
}

uint64_t assignWithCopy for GroupSigner(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, a2 + 5);
  v7 = a2[10];
  v8 = a2[11];
  outlined copy of Data._Representation(v7, v8);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v8;
  outlined consume of Data._Representation(v3, v4);
  v10 = *(int *)(a3 + 28);
  v5 = type metadata accessor for GPKMemberRole();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(v5 - 8) + 24))(a1 + v10, (char *)a2 + v10);
  return a1;
}

uint64_t initializeWithTake for GroupSigner(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;

  memcpy((void *)a1, (const void *)a2, 0x28uLL);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x38uLL);
  v6 = *(int *)(a3 + 28);
  v3 = type metadata accessor for GPKMemberRole();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v6, a2 + v6);
  return a1;
}

_QWORD *assignWithTake for GroupSigner(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v9;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  memcpy(a1 + 5, a2 + 5, 0x28uLL);
  v3 = a2[11];
  v4 = a1[10];
  v5 = a1[11];
  a1[10] = a2[10];
  a1[11] = v3;
  outlined consume of Data._Representation(v4, v5);
  v9 = *(int *)(a3 + 28);
  v6 = type metadata accessor for GPKMemberRole();
  (*(void (**)(char *, char *))(*(_QWORD *)(v6 - 8) + 40))((char *)a1 + v9, (char *)a2 + v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSigner()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D37FDE0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  if (a2 == 0x7FFFFFFF)
  {
    v7 = -1;
    if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
      v7 = *(_QWORD *)(a1 + 24);
    return (v7 + 1);
  }
  else
  {
    v4 = type metadata accessor for GPKMemberRole();
    v5 = *(_QWORD *)(v4 - 8);
    if (a2 == *(_DWORD *)(v5 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + *(int *)(a3 + 28), a2, v4);
    else
      __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for GroupSigner()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D37FED8(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = a2 - 1;
  }
  else
  {
    result = type metadata accessor for GPKMemberRole();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 28), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GroupSigner()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKMemberRole();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t dispatch thunk of GroupEncrypting.encrypt(_:authenticatedData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

unint64_t initializeBufferWithCopyOfBuffer for GroupEncryptor(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v20;

  v20 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v20 & 0x20000) != 0)
  {
    v15 = *a2;
    swift_retain();
    *a1 = v15;
    return *a1 + ((v20 + 16) & ~(unint64_t)v20);
  }
  else
  {
    v3 = a2[3];
    a1[3] = v3;
    a1[4] = a2[4];
    (**(void (***)(void))(v3 - 8))();
    v4 = a2[8];
    a1[8] = v4;
    a1[9] = a2[9];
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
    v8 = a2[10];
    v9 = a2[11];
    outlined copy of Data._Representation(v8, v9);
    a1[10] = v8;
    a1[11] = v9;
    v11 = (char *)a1 + *(int *)(a3 + 28);
    v10 = (char *)a2 + *(int *)(a3 + 28);
    v5 = type metadata accessor for GPKMemberRole();
    (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(v11, v10);
    v13 = (_QWORD *)((char *)a1 + *(int *)(a3 + 32));
    v6 = (uint64_t *)((char *)a2 + *(int *)(a3 + 32));
    v12 = *v6;
    v14 = v6[1];
    outlined copy of Data._Representation(*v6, v14);
    *v13 = v12;
    v13[1] = v14;
    return (unint64_t)a1;
  }
}

uint64_t destroy for GroupEncryptor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  v4 = *(int *)(a2 + 28);
  v2 = type metadata accessor for GPKMemberRole();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v4);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 32)), *(_QWORD *)(a1 + *(int *)(a2 + 32) + 8));
}

char *initializeWithCopy for GroupEncryptor(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a1 + 3) = v3;
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  (**(void (***)(void))(v3 - 8))();
  v4 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a1 + 8) = v4;
  *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 40), (uint64_t)(a2 + 40));
  v8 = *((_QWORD *)a2 + 10);
  v9 = *((_QWORD *)a2 + 11);
  outlined copy of Data._Representation(v8, v9);
  *((_QWORD *)a1 + 10) = v8;
  *((_QWORD *)a1 + 11) = v9;
  v10 = *(int *)(a3 + 28);
  v5 = type metadata accessor for GPKMemberRole();
  (*(void (**)(char *, char *))(*(_QWORD *)(v5 - 8) + 16))(&a1[v10], &a2[v10]);
  v13 = *(int *)(a3 + 32);
  v14 = *(_QWORD *)&a2[v13];
  v15 = *(_QWORD *)&a2[v13 + 8];
  outlined copy of Data._Representation(v14, v15);
  result = a1;
  v7 = (uint64_t *)&a1[v13];
  *v7 = v14;
  v7[1] = v15;
  return result;
}

uint64_t assignWithCopy for GroupEncryptor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, a2 + 5);
  v10 = a2[10];
  v11 = a2[11];
  outlined copy of Data._Representation(v10, v11);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v11;
  outlined consume of Data._Representation(v3, v4);
  v12 = *(int *)(a3 + 28);
  v5 = type metadata accessor for GPKMemberRole();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(v5 - 8) + 24))(a1 + v12, (char *)a2 + v12);
  v15 = *(int *)(a3 + 32);
  v16 = *(uint64_t *)((char *)a2 + v15);
  v17 = *(uint64_t *)((char *)a2 + v15 + 8);
  outlined copy of Data._Representation(v16, v17);
  v6 = (uint64_t *)(a1 + v15);
  v7 = *(_QWORD *)(a1 + v15);
  v8 = *(_QWORD *)(a1 + v15 + 8);
  *v6 = v16;
  v6[1] = v17;
  outlined consume of Data._Representation(v7, v8);
  return a1;
}

__n128 initializeWithTake for GroupEncryptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;
  uint64_t v5;

  memcpy((void *)a1, (const void *)a2, 0x28uLL);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x38uLL);
  v5 = *(int *)(a3 + 28);
  v3 = type metadata accessor for GPKMemberRole();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1 + v5, a2 + v5);
  result = *(__n128 *)(a2 + *(int *)(a3 + 32));
  *(__n128 *)(a1 + *(int *)(a3 + 32)) = result;
  return result;
}

_QWORD *assignWithTake for GroupEncryptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  memcpy(a1 + 5, a2 + 5, 0x28uLL);
  v3 = a2[11];
  v4 = a1[10];
  v5 = a1[11];
  a1[10] = a2[10];
  a1[11] = v3;
  outlined consume of Data._Representation(v4, v5);
  v14 = *(int *)(a3 + 28);
  v6 = type metadata accessor for GPKMemberRole();
  (*(void (**)(char *, char *))(*(_QWORD *)(v6 - 8) + 40))((char *)a1 + v14, (char *)a2 + v14);
  v7 = (_QWORD *)((char *)a2 + *(int *)(a3 + 32));
  v8 = *v7;
  v9 = v7[1];
  v10 = (_QWORD *)((char *)a1 + *(int *)(a3 + 32));
  v11 = *v10;
  v12 = v10[1];
  *v10 = v8;
  v10[1] = v9;
  outlined consume of Data._Representation(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupEncryptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3806B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;

  if (a2 == 0x7FFFFFFF)
  {
    v7 = -1;
    if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
      v7 = *(_QWORD *)(a1 + 24);
    return (v7 + 1);
  }
  else
  {
    v4 = type metadata accessor for GPKMemberRole();
    v5 = *(_QWORD *)(v4 - 8);
    if (a2 == *(_DWORD *)(v5 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + *(int *)(a3 + 28), a2, v4);
    else
      __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for GroupEncryptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3807A8(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = a2 - 1;
  }
  else
  {
    result = type metadata accessor for GPKMemberRole();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 28), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for GroupEncryptor()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKMemberRole();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t dispatch thunk of GroupDecrypting.decrypt(_:authenticatedData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for GroupDecryptor(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for GroupDecryptor(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
}

_QWORD *initializeWithCopy for GroupDecryptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v5 = a2[10];
  v6 = a2[11];
  outlined copy of Data._Representation(v5, v6);
  a1[10] = v5;
  a1[11] = v6;
  v8 = a2[12];
  v9 = a2[13];
  outlined copy of Data._Representation(v8, v9);
  result = a1;
  a1[12] = v8;
  a1[13] = v9;
  return result;
}

_QWORD *assignWithCopy for GroupDecryptor(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;

  __swift_assign_boxed_opaque_existential_1((uint64_t)a1, a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 5), a2 + 5);
  v7 = a2[10];
  v8 = a2[11];
  outlined copy of Data._Representation(v7, v8);
  v2 = a1[10];
  v3 = a1[11];
  a1[10] = v7;
  a1[11] = v8;
  outlined consume of Data._Representation(v2, v3);
  v10 = a2[12];
  v11 = a2[13];
  outlined copy of Data._Representation(v10, v11);
  v4 = a1[12];
  v5 = a1[13];
  a1[12] = v10;
  a1[13] = v11;
  outlined consume of Data._Representation(v4, v5);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy112_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x70uLL);
}

_QWORD *assignWithTake for GroupDecryptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  memcpy(a1 + 5, a2 + 5, 0x28uLL);
  v2 = a2[11];
  v3 = a1[10];
  v4 = a1[11];
  a1[10] = a2[10];
  a1[11] = v2;
  outlined consume of Data._Representation(v3, v4);
  v5 = a2[13];
  v6 = a1[12];
  v7 = a1[13];
  a1[12] = a2[12];
  a1[13] = v5;
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupDecryptor(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 112))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupDecryptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 104) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 112) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 112) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupDecryptor()
{
  return &type metadata for GroupDecryptor;
}

uint64_t MemberIdentifierFetcher.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Client(v1, a1);
}

uint64_t MemberIdentifierFetcher.cryptoService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptographyServiceProviding(v1 + 40, a1);
}

uint64_t variable initialization expression of MemberIdentifierFetcher.acceptedExternalClients()
{
  Swift::String *v0;

  _allocateUninitializedArray<A>(_:)();
  *v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.cloudd", 0x10uLL, 1);
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  return Set.init<A>(_:)();
}

uint64_t variable initialization expression of MemberIdentifierFetcher.acceptedInternalClients()
{
  Swift::String *v0;
  Swift::String *v2;

  _allocateUninitializedArray<A>(_:)();
  v2 = v0;
  *v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.GroupKitTester", 0x18uLL, 1);
  v2[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.gpktool", 0x11uLL, 1);
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  return Set.init<A>(_:)();
}

uint64_t MemberIdentifierFetcher.addStableMemberIdentifier(to:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[63] = v3;
  v4[62] = a3;
  v4[61] = a2;
  v4[60] = a1;
  v4[54] = v4;
  v4[55] = 0;
  v4[34] = 0;
  v4[35] = 0;
  v4[56] = 0;
  memset(v4 + 2, 0, 0x38uLL);
  v4[42] = 0;
  v4[43] = 0;
  v4[59] = 0;
  v4[48] = 0;
  v4[49] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  v5 = type metadata accessor for GPKUserID();
  v4[66] = v5;
  v4[67] = *(_QWORD *)(v5 - 8);
  v4[68] = swift_task_alloc();
  v4[69] = swift_task_alloc();
  v6 = type metadata accessor for LogSubsystem();
  v4[70] = v6;
  v4[71] = *(_QWORD *)(v6 - 8);
  v4[72] = swift_task_alloc();
  v7 = type metadata accessor for GPKGroupID();
  v4[73] = v7;
  v4[74] = *(_QWORD *)(v7 - 8);
  v4[75] = swift_task_alloc();
  v4[76] = swift_task_alloc();
  v4[77] = swift_task_alloc();
  v4[55] = a1;
  v4[34] = a2;
  v4[35] = a3;
  v4[56] = v3;
  return swift_task_switch();
}

uint64_t MemberIdentifierFetcher.addStableMemberIdentifier(to:serviceName:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;

  v28 = v0[77];
  v27 = v0[74];
  v29 = v0[73];
  v32 = v0[72];
  v31 = v0[71];
  v33 = v0[70];
  v35 = v0[63];
  v0[54] = v0;
  v0[36] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[37] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting to add stable member identifier for group ", 0x35uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  dispatch thunk of GPKGroup.groupID.getter();
  v0[78] = lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v30 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v0[79] = v30;
  v30(v28, v29);
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MemberIdentifierFetcher.swift", 0x2AuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v32);
  gpklog(_:type:fileID:line:subsystem:)();
  v34 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v0[80] = v34;
  v34(v32, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of Client(v35, (uint64_t)(v0 + 9));
  KeyPrivilegeChecker.init(client:)(v0 + 9, v0 + 2);
  if (KeyPrivilegeChecker.hasPrivilege()())
  {
    if (dispatch thunk of GPKGroup.meMember.getter())
    {
      dispatch thunk of GPKMember.userID.getter();
      swift_release();
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v26[67] + 56))(v26[65], 1, 1, v26[66]);
    }
    v4 = v26[66];
    v5 = v26[65];
    v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26[67] + 48);
    v26[81] = v6;
    if (v6(v5, 1, v4) != 1)
    {
      v7 = v26[69];
      v8 = v26[66];
      v9 = v26[65];
      v22 = v26[63];
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26[67] + 32);
      v26[82] = v10;
      v10(v7, v9, v8);
      outlined init with copy of CryptographyServiceProviding(v22 + 40, (uint64_t)(v26 + 14));
      v23 = v26[17];
      v24 = v26[18];
      __swift_project_boxed_opaque_existential_1(v26 + 14, v23);
      dispatch thunk of GPKGroup.groupID.getter();
      v25 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 + 48) + **(int **)(v24 + 48));
      v11 = (_QWORD *)swift_task_alloc();
      v26[83] = v11;
      *v11 = v26[54];
      v11[1] = MemberIdentifierFetcher.addStableMemberIdentifier(to:serviceName:);
      return v25(v26[76], v26[69], v23, v24);
    }
    v18 = v26[77];
    v19 = v26[73];
    v20 = v26[72];
    v21 = v26[70];
    outlined destroy of GPKUserID?(v26[65]);
    v26[38] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v26[39] = v13;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Me-User ID not found for group: ", 0x20uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    dispatch thunk of GPKGroup.groupID.getter();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v30(v18, v19);
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", so not adding stable member identifier", 0x28uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MemberIdentifierFetcher.swift", 0x2AuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
    gpklog(_:type:fileID:line:subsystem:)();
    v34(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of KeyPrivilegeChecker((uint64_t)(v26 + 2));
  }
  else
  {
    v16 = v26[72];
    v17 = v26[70];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Client doesn't have privilage for generating stable member identifer", 0x44uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MemberIdentifierFetcher.swift", 0x2AuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v16);
    gpklog(_:type:fileID:line:subsystem:)();
    v34(v16, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of KeyPrivilegeChecker((uint64_t)(v26 + 2));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v26[54] + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v18;
  char v19;

  v19 = *(_BYTE *)(v0 + 696);
  *(_QWORD *)(v0 + 432) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  if ((v19 & 1) != 0)
  {
    outlined init with copy of CryptographyServiceProviding(v18[63] + 40, (uint64_t)(v18 + 24));
    v15 = v18[27];
    v16 = v18[28];
    __swift_project_boxed_opaque_existential_1(v18 + 24, v15);
    dispatch thunk of GPKGroup.groupID.getter();
    v17 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 + 56)
                                                                             + **(int **)(v16 + 56));
    v1 = (_QWORD *)swift_task_alloc();
    v18[85] = v1;
    *v1 = v18[54];
    v1[1] = MemberIdentifierFetcher.addStableMemberIdentifier(to:serviceName:);
    return v17(v18 + 19, v18[75], v18[69], v15, v16);
  }
  else
  {
    v11 = (void (*)(uint64_t, uint64_t))v18[80];
    v8 = (void (*)(uint64_t, uint64_t))v18[79];
    v6 = v18[77];
    v7 = v18[73];
    v9 = v18[72];
    v10 = v18[70];
    v13 = v18[69];
    v12 = v18[67];
    v14 = v18[66];
    v18[40] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v18[41] = v3;
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group with ID: ", 0xFuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    dispatch thunk of GPKGroup.groupID.getter();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v8(v6, v7);
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" not found in crypto layer, so not adding stable member identifier", 0x42uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MemberIdentifierFetcher.swift", 0x2AuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
    gpklog(_:type:fileID:line:subsystem:)();
    v11(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Apply for TTR in this scenario", 0x1EuLL, 1);
    static os_log_type_t.debug.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MemberIdentifierFetcher.swift", 0x2AuLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
    gpklog(_:type:fileID:line:subsystem:)();
    v11(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    outlined destroy of KeyPrivilegeChecker((uint64_t)(v18 + 2));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v18[54] + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 432) = *v1;
  *(_QWORD *)(v2 + 688) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4 + 616))(*(_QWORD *)(v4 + 584), *(_QWORD *)(v4 + 568));
  return swift_task_switch();
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t i;

  v0[54] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 24));
  v0[57] = dispatch thunk of GPKGroup.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  for (i = v0[86]; ; i = 0)
  {
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
      IndexingIterator.next()();
      v39 = *(_QWORD *)(v40 + 464);
      if (!v39)
      {
        v17 = *(_QWORD *)(v40 + 552);
        v16 = *(_QWORD *)(v40 + 536);
        v18 = *(_QWORD *)(v40 + 528);
        outlined destroy of IndexingIterator<[GPKMember]>();
        __swift_destroy_boxed_opaque_existential_1(v40 + 152);
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
        outlined destroy of KeyPrivilegeChecker(v40 + 16);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(void))(*(_QWORD *)(v40 + 432) + 8))();
      }
      v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 648);
      v37 = *(_QWORD *)(v40 + 528);
      v36 = *(_QWORD *)(v40 + 512);
      *(_QWORD *)(v40 + 472) = v39;
      dispatch thunk of GPKMember.userID.getter();
      if (v38(v36, 1, v37) != 1)
        break;
      v21 = *(void (**)(uint64_t, uint64_t))(v40 + 640);
      v19 = *(_QWORD *)(v40 + 576);
      v20 = *(_QWORD *)(v40 + 560);
      outlined destroy of GPKUserID?(*(_QWORD *)(v40 + 512));
      *(_QWORD *)(v40 + 352) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v40 + 360) = v6;
      v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("User ID not found for member: ", 0x1EuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v7);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v40 + 368) = dispatch thunk of GPKMember.handle.getter();
      *(_QWORD *)(v40 + 376) = v8;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", so not adding stable member identifier", 0x28uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MemberIdentifierFetcher.swift", 0x2AuLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v19);
      gpklog(_:type:fileID:line:subsystem:)();
      v21(v19, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    v29 = *(_QWORD *)(v40 + 544);
    v28 = *(_QWORD *)(v40 + 504);
    v31 = *(_QWORD *)(v40 + 496);
    v30 = *(_QWORD *)(v40 + 488);
    (*(void (**)(void))(v40 + 656))();
    outlined init with copy of CryptographyServiceProviding(v28 + 40, v40 + 232);
    v32 = *(_QWORD *)(v40 + 256);
    v33 = *(_QWORD *)(v40 + 264);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v40 + 232), v32);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 272))(v40 + 152, v29, v30, v31, v32);
    v35 = v1;
    if (i)
      break;
    v24 = *(void (**)(uint64_t, uint64_t))(v40 + 640);
    v22 = *(_QWORD *)(v40 + 576);
    v23 = *(_QWORD *)(v40 + 560);
    v26 = *(_QWORD *)(v40 + 544);
    v25 = *(_QWORD *)(v40 + 536);
    v27 = *(_QWORD *)(v40 + 528);
    *(_QWORD *)(v40 + 384) = v34;
    *(_QWORD *)(v40 + 392) = v1;
    __swift_destroy_boxed_opaque_existential_1(v40 + 232);
    Data.hexString.getter();
    dispatch thunk of GPKMember.stableIdentifier.setter();
    *(_QWORD *)(v40 + 400) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v40 + 408) = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Stable member identifier added to member: ", 0x2AuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v40 + 416) = dispatch thunk of GPKMember.handle.getter();
    *(_QWORD *)(v40 + 424) = v4;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MemberIdentifierFetcher.swift", 0x2AuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v22);
    gpklog(_:type:fileID:line:subsystem:)();
    v24(v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
    swift_release();
  }
  v13 = *(_QWORD *)(v40 + 552);
  v12 = *(_QWORD *)(v40 + 544);
  v11 = *(_QWORD *)(v40 + 536);
  v14 = *(_QWORD *)(v40 + 528);
  __swift_destroy_boxed_opaque_existential_1(v40 + 232);
  v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v15(v12, v14);
  swift_release();
  outlined destroy of IndexingIterator<[GPKMember]>();
  __swift_destroy_boxed_opaque_existential_1(v40 + 152);
  v15(v13, v14);
  outlined destroy of KeyPrivilegeChecker(v40 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v40 + 432) + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void (*)(uint64_t, uint64_t))v0[79];
  v2 = v0[76];
  v3 = v0[73];
  v6 = v0[69];
  v5 = v0[67];
  v7 = v0[66];
  v0[54] = v0;
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 14));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  outlined destroy of KeyPrivilegeChecker((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[54] + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void (*)(uint64_t, uint64_t))v0[79];
  v2 = v0[75];
  v3 = v0[73];
  v6 = v0[69];
  v5 = v0[67];
  v7 = v0[66];
  v0[54] = v0;
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  outlined destroy of KeyPrivilegeChecker((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[54] + 8))();
}

uint64_t MemberIdentifierFetcher.addStableMemberIdentifier(to:serviceName:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *v2;
  v5 = *v2 + 16;
  *(_QWORD *)(v3 + 432) = *v2;
  *(_BYTE *)(v3 + 696) = a1;
  *(_QWORD *)(v3 + 672) = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5 + 616))(*(_QWORD *)(v5 + 592), *(_QWORD *)(v5 + 568));
  return swift_task_switch();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of KeyPrivilegeChecker(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t MemberIdentifierFetcher.init(client:cryptoService:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, _QWORD *a3@<X8>)
{
  Swift::String *v3;
  Swift::String *v4;
  uint64_t result;
  Swift::String *v7;

  outlined init with take of Client(a1, a3);
  outlined init with take of CryptographyServiceProviding(a2, a3 + 5);
  _allocateUninitializedArray<A>(_:)();
  *v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.cloudd", 0x10uLL, 1);
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  a3[10] = Set.init<A>(_:)();
  _allocateUninitializedArray<A>(_:)();
  v7 = v4;
  *v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.GroupKitTester", 0x18uLL, 1);
  v7[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.gpktool", 0x11uLL, 1);
  _finalizeUninitializedArray<A>(_:)();
  result = Set.init<A>(_:)();
  a3[11] = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MemberIdentifierFetcher(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for MemberIdentifierFetcher(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MemberIdentifierFetcher(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v8;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v5 = a2[10];
  swift_bridgeObjectRetain();
  a1[10] = v5;
  v8 = a2[11];
  swift_bridgeObjectRetain();
  result = a1;
  a1[11] = v8;
  return result;
}

uint64_t assignWithCopy for MemberIdentifierFetcher(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, a2 + 5);
  v3 = a2[10];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 80) = v3;
  swift_bridgeObjectRelease();
  v5 = a2[11];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for MemberIdentifierFetcher(_QWORD *a1, _QWORD *a2)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  memcpy(a1 + 5, a2 + 5, 0x30uLL);
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MemberIdentifierFetcher(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MemberIdentifierFetcher(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 96) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 96) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MemberIdentifierFetcher()
{
  return &type metadata for MemberIdentifierFetcher;
}

_QWORD *GroupRefresher.groupService.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of GroupService(v1, a1);
}

_QWORD *GroupRefresher.metadataService.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MetadataService((_QWORD *)(v1 + 192), a1);
}

uint64_t GroupRefresher.groupStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupStore(v1 + 328, a1);
}

uint64_t GroupRefresher.userStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserStore(v1 + 368, a1);
}

uint64_t GroupRefresher.refresh(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[12] = v1;
  v2[11] = a1;
  v2[7] = v2;
  v2[8] = 0;
  v2[9] = 0;
  v2[10] = 0;
  v3 = type metadata accessor for InternalErrorCode();
  v2[13] = v3;
  v2[14] = *(_QWORD *)(v3 - 8);
  v2[15] = swift_task_alloc();
  v2[8] = a1;
  v2[9] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[7] = *v2;
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GroupRefresher.refresh(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  v1 = v0[12];
  v0[7] = v0;
  outlined init with copy of GroupStore(v1 + 328, (uint64_t)(v0 + 2));
  v5 = v0[5];
  v6 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
  v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 16) + **(int **)(v6 + 16));
  v2 = (_QWORD *)swift_task_alloc();
  v4[16] = v2;
  *v2 = v4[7];
  v2[1] = GroupRefresher.refresh(with:);
  return v7(v4[11], v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 56) = v0;
  if (v1)
  {
    v12 = v13[17];
    v13[10] = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v13 + 2));
    v2 = (_QWORD *)swift_task_alloc();
    v13[19] = v2;
    *v2 = v13[7];
    v2[1] = GroupRefresher.refresh(with:);
    return GroupRefresher.refresh(_:)(v12);
  }
  else
  {
    v11 = v13[15];
    v8 = v13[14];
    v9 = v13[13];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v13 + 2));
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x24BE3DCF8], v9);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
    _allocateUninitializedArray<A>(_:)();
    v10 = v4;
    *v4 = static InternalErrorKey.groupID.getter();
    v10[1] = v5;
    v6 = GPKGroupID.hexString.getter();
    v10[5] = MEMORY[0x24BEE0D00];
    v10[2] = v6;
    v10[3] = v7;
    _finalizeUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    return (*(uint64_t (**)())(v13[7] + 8))();
  }
}

{
  _QWORD *v0;

  v0[7] = v0;
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[7] + 8))(v0[21], v0[22]);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 56) + 8))();
}

uint64_t GroupRefresher.refresh(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[7] = *v3;
  v4[20] = v2;
  v4[21] = a1;
  v4[22] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GroupRefresher.refresh(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2[27] = v1;
  v2[26] = a1;
  v2[21] = v2;
  v2[22] = 0;
  v2[23] = 0;
  v3 = type metadata accessor for LogSubsystem();
  v2[28] = v3;
  v2[29] = *(_QWORD *)(v3 - 8);
  v2[30] = swift_task_alloc();
  v4 = type metadata accessor for GPKGroup.JoinState();
  v2[31] = v4;
  v2[32] = *(_QWORD *)(v4 - 8);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[22] = a1;
  v2[23] = v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 280) = v5;
  *v5 = *(_QWORD *)(v7 + 168);
  v5[1] = GroupRefresher.refresh(_:);
  return GroupRefresher.fetchAndProcessGroupBlob(for:)(a1);
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v3[21] = *v2;
  v5 = (uint64_t)(v3 + 2);
  v3[38] = a1;
  v3[39] = v1;
  swift_task_dealloc();
  if (!v1)
    outlined destroy of MetadataService(v5);
  return swift_task_switch();
}

_QWORD *GroupRefresher.refresh(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = (_QWORD *)*v1;
  v2[21] = *v1;
  v2 += 21;
  v6 = v2 - 19;
  v7 = v2;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    v5 = swift_task_dealloc();
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v5);
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc();
    v6[34] = v3;
    *v3 = *v7;
    v3[1] = GroupRefresher.refresh(_:);
    return (_QWORD *)GroupRefresher.fetchAndProcessRSVPQueue(for:)(v6[24]);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 168) = *v1;
  v5 = (_QWORD *)(v2 + 168);
  swift_task_dealloc();
  if (!v0)
    return (_QWORD *)swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  v4 = swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v5 + 8))(v5, v4);
}

uint64_t GroupRefresher.refresh(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  char v14;

  v11 = v0[34];
  v10 = v0[33];
  v9 = v0[32];
  v12 = v0[31];
  v1 = v0[26];
  v0[21] = v0;
  GroupRefresher.refreshJoinStatus(for:)(v1);
  v0[24] = 0;
  dispatch thunk of GPKGroup.joinState.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v10, *MEMORY[0x24BE3E4A8], v12);
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v14 = == infix<A>(_:_:)();
  v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v13(v10, v12);
  v13(v11, v12);
  if ((v14 & 1) != 0)
  {
    outlined init with copy of MetadataService((_QWORD *)(v8[27] + 192), v8 + 2);
    v2 = (_QWORD *)swift_task_alloc();
    v8[37] = v2;
    *v2 = v8[21];
    v2[1] = GroupRefresher.refresh(_:);
    return MetadataService.fetchMetaData(for:)(v8[26]);
  }
  else
  {
    v6 = v8[30];
    v4 = v8[29];
    v5 = v8[28];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Group refreshed sucessfully", 0x1FuLL, 0);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    v7 = v8[24];
    swift_bridgeObjectRetain();
    outlined destroy of [GPKMetadata]?();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD, uint64_t))(v8[21] + 8))(v8[26], v7);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;

  v0[21] = v0;
  v0[24] = v0[38];
  swift_bridgeObjectRelease();
  v0[19] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[20] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Meta data fetched successfully for group: ", 0x2AuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  if (v0[24])
  {
    v13 = v17[24];
    swift_bridgeObjectRetain();
    v3 = type metadata accessor for GPKMetadata();
    v14 = MEMORY[0x242634AC0](v13, v3);
    swift_bridgeObjectRelease();
    v15 = v14;
    v16 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  if ((v16 & 1) != 0)
    v18 = 0;
  else
    v18 = v15;
  v7 = v17[30];
  v6 = v17[29];
  v8 = v17[28];
  v17[25] = v18;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v17[30];
  v9 = v17[29];
  v10 = v17[28];
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Group refreshed sucessfully", 0x1FuLL, 0);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  v12 = v17[24];
  swift_bridgeObjectRetain();
  outlined destroy of [GPKMetadata]?();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, uint64_t))(v17[21] + 8))(v17[26], v12);
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;

  v18 = (void *)v0[39];
  v0[21] = v0;
  outlined destroy of MetadataService((uint64_t)(v0 + 2));

  v0[24] = 0;
  swift_bridgeObjectRelease();
  v0[19] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[20] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Meta data fetched successfully for group: ", 0x2AuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  if (v0[24])
  {
    v13 = v17[24];
    swift_bridgeObjectRetain();
    v3 = type metadata accessor for GPKMetadata();
    v14 = MEMORY[0x242634AC0](v13, v3);
    swift_bridgeObjectRelease();
    v15 = v14;
    v16 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  if ((v16 & 1) != 0)
    v19 = 0;
  else
    v19 = v15;
  v7 = v17[30];
  v6 = v17[29];
  v8 = v17[28];
  v17[25] = v19;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v17[30];
  v9 = v17[29];
  v10 = v17[28];
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Group refreshed sucessfully", 0x1FuLL, 0);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  v12 = v17[24];
  swift_bridgeObjectRetain();
  outlined destroy of [GPKMetadata]?();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, uint64_t))(v17[21] + 8))(v17[26], v12);
}

uint64_t GroupRefresher.fetchAndProcessGroupBlob(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[89] = v1;
  v2[88] = a1;
  v2[67] = v2;
  v2[68] = 0;
  v2[69] = 0;
  v2[45] = 0;
  v2[46] = 0;
  v2[70] = 0;
  memset(v2 + 31, 0, 0x28uLL);
  v2[71] = 0;
  v2[51] = 0;
  v2[52] = 0;
  v2[75] = 0;
  v2[80] = 0;
  v2[61] = 0;
  v2[62] = 0;
  v2[82] = 0;
  v2[85] = 0;
  v2[86] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
  v2[90] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v2[91] = swift_task_alloc();
  type metadata accessor for GPKMember.InviteStatus();
  v2[92] = swift_task_alloc();
  v3 = type metadata accessor for GPKMemberRole();
  v2[93] = v3;
  v2[94] = *(_QWORD *)(v3 - 8);
  v2[95] = swift_task_alloc();
  v2[96] = swift_task_alloc();
  v4 = type metadata accessor for GPKUserID();
  v2[97] = v4;
  v2[98] = *(_QWORD *)(v4 - 8);
  v2[99] = swift_task_alloc();
  v2[100] = swift_task_alloc();
  v2[101] = swift_task_alloc();
  v2[102] = swift_task_alloc();
  v2[103] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: GPKUserID, value: GPKMemberRole)?);
  v2[104] = swift_task_alloc();
  v2[105] = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  v2[106] = v5;
  v2[107] = *(_QWORD *)(v5 - 8);
  v2[108] = swift_task_alloc();
  v6 = type metadata accessor for GPKGroupID();
  v2[109] = v6;
  v2[110] = *(_QWORD *)(v6 - 8);
  v2[111] = swift_task_alloc();
  v2[68] = a1;
  v2[69] = v1;
  return swift_task_switch();
}

uint64_t GroupRefresher.fetchAndProcessGroupBlob(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  void (*v3)(uint64_t, uint64_t);
  Swift::String v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v9 = v0[111];
  v8 = v0[110];
  v10 = v0[109];
  v12 = v0[108];
  v11 = v0[107];
  v13 = v0[106];
  v14 = (_QWORD *)v0[89];
  v0[67] = v0;
  v0[41] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[42] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DaemonGroupManager - fetching group blob for group ", 0x33uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  dispatch thunk of GPKGroup.groupID.getter();
  v0[112] = lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v0[113] = v3;
  v3(v9, v10);
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
  gpklog(_:type:fileID:line:subsystem:)();
  v5 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[114] = v5;
  v5(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of GroupService(v14, v0 + 2);
  v6 = (_QWORD *)swift_task_alloc();
  v15[115] = v6;
  *v6 = v15[67];
  v6[1] = GroupRefresher.fetchAndProcessGroupBlob(for:);
  return GroupService.fetchGroupCryptoBlob(for:)((uint64_t)(v15 + 43), v15[88]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 536) = *v1;
  *(_QWORD *)(v2 + 928) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of GroupService(v4);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t result;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  int v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  unint64_t v98;
  uint64_t i;
  Swift::String v100;

  v96 = *(void (**)(uint64_t, uint64_t))(v0 + 912);
  v92 = *(void (**)(uint64_t, uint64_t))(v0 + 904);
  v90 = *(_QWORD *)(v0 + 888);
  v91 = *(_QWORD *)(v0 + 872);
  v94 = *(_QWORD *)(v0 + 864);
  v95 = *(_QWORD *)(v0 + 848);
  *(_QWORD *)(v0 + 536) = v0;
  v93 = *(_DWORD *)(v0 + 344);
  v97 = *(_QWORD *)(v0 + 352);
  *(_DWORD *)(v0 + 360) = v93;
  *(_QWORD *)(v0 + 368) = v97;
  *(_QWORD *)(v0 + 376) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 384) = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DaemonGroupManager - updating group ", 0x24uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  dispatch thunk of GPKGroup.groupID.getter();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v92(v90, v91);
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" with roles and version ", 0x18uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v0 + 392) = v93;
  *(_QWORD *)(v0 + 400) = v97;
  lazy protocol witness table accessor for type GroupCryptoBlob and conformance GroupCryptoBlob();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v94);
  gpklog(_:type:fileID:line:subsystem:)();
  v96(v94, v95);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for GPKMember();
  *(_QWORD *)(v0 + 560) = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  v98 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  Dictionary.makeIterator()();
  memcpy((void *)(v0 + 248), (const void *)(v0 + 208), 0x28uLL);
  for (i = *(_QWORD *)(v0 + 928); ; i = 0)
  {
    v87 = *(char **)(v89 + 840);
    v86 = *(char **)(v89 + 832);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : GPKMemberRole].Iterator);
    Dictionary.Iterator.next()();
    outlined init with take of (key: GPKUserID, value: GPKMemberRole)?(v86, v87);
    v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: GPKUserID, value: GPKMemberRole));
    if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v88 - 8) + 48))(v87, 1) == 1)
      break;
    v82 = *(_QWORD *)(v89 + 824);
    v85 = *(_QWORD *)(v89 + 816);
    v81 = *(_QWORD *)(v89 + 784);
    v83 = *(_QWORD *)(v89 + 776);
    v80 = *(_QWORD *)(v89 + 768);
    v77 = *(_QWORD *)(v89 + 752);
    v79 = *(_QWORD *)(v89 + 744);
    v78 = *(_QWORD *)(v89 + 840) + *(int *)(v88 + 48);
    (*(void (**)(void))(v81 + 32))();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v80, v78, v79);
    *(_QWORD *)(v89 + 632) = dispatch thunk of GPKGroup.members.getter();
    v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16);
    v84(v85, v82, v83);
    *(_QWORD *)(swift_task_alloc() + 16) = v85;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
    lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
    result = Sequence.first(where:)();
    if (i)
      return result;
    v73 = *(_QWORD *)(v89 + 816);
    v72 = *(_QWORD *)(v89 + 784);
    v74 = *(_QWORD *)(v89 + 776);
    swift_task_dealloc();
    v75 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
    v75(v73, v74);
    outlined destroy of [GPKMember]();
    v76 = *(_QWORD *)(v89 + 624);
    if (v76)
    {
      v67 = *(void (**)(uint64_t, uint64_t))(v89 + 912);
      v65 = *(_QWORD *)(v89 + 864);
      v66 = *(_QWORD *)(v89 + 848);
      v69 = *(_QWORD *)(v89 + 768);
      v71 = *(_QWORD *)(v89 + 760);
      v68 = *(_QWORD *)(v89 + 752);
      v70 = *(_QWORD *)(v89 + 744);
      *(_QWORD *)(v89 + 688) = v76;
      *(_QWORD *)(v89 + 520) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v89 + 528) = v6;
      v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("updating ", 9uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v7);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v89 + 696) = v76;
      lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v8);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.debug.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v65);
      gpklog(_:type:fileID:line:subsystem:)();
      v67(v65, v66);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v71, v69, v70);
      dispatch thunk of GPKMember.role.setter();
      swift_release();
    }
    else
    {
      v63 = *(_QWORD *)(v89 + 824);
      outlined init with copy of UserStore(*(_QWORD *)(v89 + 712) + 368, v89 + 288);
      v61 = *(_QWORD *)(v89 + 312);
      v62 = *(_QWORD *)(v89 + 320);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v89 + 288), v61);
      v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v63, v61);
      __swift_destroy_boxed_opaque_existential_1(v89 + 288);
      if (v64)
      {
        *(_QWORD *)(v89 + 680) = v64;
        swift_retain();
        *(_QWORD *)(v89 + 640) = v64;
        swift_release();
      }
      else
      {
        v57 = *(void (**)(uint64_t, uint64_t))(v89 + 912);
        v55 = *(_QWORD *)(v89 + 864);
        v56 = *(_QWORD *)(v89 + 848);
        v59 = *(_QWORD *)(v89 + 824);
        v60 = *(_QWORD *)(v89 + 808);
        v58 = *(_QWORD *)(v89 + 776);
        *(_QWORD *)(v89 + 440) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v89 + 448) = v10;
        v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Existing user not found for userID ", 0x23uLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v11);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(". creating one with no handles", 0x1EuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        static os_log_type_t.error.getter();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v55);
        gpklog(_:type:fileID:line:subsystem:)();
        v57(v55, v56);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for GPKUser();
        v84(v60, v59, v58);
        _allocateUninitializedArray<A>(_:)();
        *(_QWORD *)(v89 + 640) = GPKUser.__allocating_init(userID:handles:isMe:)();
      }
      swift_retain();
      v52 = GPKUser.handles.getter();
      swift_release();
      swift_bridgeObjectRetain();
      *(_QWORD *)(v89 + 648) = v52;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [String]();
      v53 = *(_QWORD *)(v89 + 456);
      v54 = *(_QWORD *)(v89 + 464);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v89 + 472) = v53;
      *(_QWORD *)(v89 + 480) = v54;
      if (*(_QWORD *)(v89 + 480))
      {
        v100 = *(Swift::String *)(v89 + 472);
      }
      else
      {
        v100 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        outlined destroy of String?();
      }
      v50 = *(void (**)(uint64_t, uint64_t))(v89 + 912);
      v48 = *(_QWORD *)(v89 + 864);
      v49 = *(_QWORD *)(v89 + 848);
      v44 = *(_QWORD *)(v89 + 768);
      v46 = *(_QWORD *)(v89 + 760);
      v43 = *(_QWORD *)(v89 + 752);
      v45 = *(_QWORD *)(v89 + 744);
      v47 = *(_QWORD *)(v89 + 736);
      *(Swift::String *)(v89 + 488) = v100;
      swift_bridgeObjectRetain();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v46, v44, v45);
      swift_retain();
      default argument 2 of GPKMember.init(handle:role:inviteStatus:user:)(v47);
      v51 = GPKMember.__allocating_init(handle:role:inviteStatus:user:)();
      *(_QWORD *)(v89 + 656) = v51;
      *(_QWORD *)(v89 + 504) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v89 + 512) = v13;
      v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("adding ", 7uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v14);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v89 + 664) = v51;
      lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.debug.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v48);
      gpklog(_:type:fileID:line:subsystem:)();
      v50(v48, v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_retain();
      *(_QWORD *)(v89 + 672) = v51;
      Array.append(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    v41 = *(_QWORD *)(v89 + 824);
    v42 = *(_QWORD *)(v89 + 776);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v89 + 752) + 8))(*(_QWORD *)(v89 + 768), *(_QWORD *)(v89 + 744));
    v75(v41, v42);
  }
  outlined destroy of [GPKUserID : GPKMemberRole].Iterator();
  *(_QWORD *)(v89 + 568) = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)(v89 + 576) = dispatch thunk of GPKGroup.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v40 = *(_QWORD *)(v89 + 584);
    if (!v40)
      break;
    v37 = *(_QWORD *)(v89 + 784);
    v39 = *(_QWORD *)(v89 + 776);
    v38 = *(_QWORD *)(v89 + 728);
    *(_QWORD *)(v89 + 600) = v40;
    dispatch thunk of GPKMember.userID.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v38, 1, v39) == 1)
    {
      outlined destroy of GPKUserID?(*(_QWORD *)(v89 + 728));
      goto LABEL_21;
    }
    v31 = *(_QWORD *)(v89 + 800);
    v33 = *(_QWORD *)(v89 + 792);
    v30 = *(_QWORD *)(v89 + 784);
    v32 = *(_QWORD *)(v89 + 776);
    v34 = *(_QWORD *)(v89 + 752);
    v36 = *(_QWORD *)(v89 + 744);
    v35 = *(_QWORD *)(v89 + 720);
    (*(void (**)(void))(v30 + 32))();
    swift_bridgeObjectRetain();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v33, v31, v32);
    MEMORY[0x24263485C](v33, v97, v32, v36, v98);
    swift_bridgeObjectRelease();
    v29 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v35, 1, v36) != 1;
    v27 = *(_QWORD *)(v89 + 792);
    v25 = *(_QWORD *)(v89 + 784);
    v26 = *(_QWORD *)(v89 + 776);
    outlined destroy of GPKMemberRole?(*(_QWORD *)(v89 + 720));
    v28 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v28(v27, v26);
    if (v29)
    {
      v28(*(_QWORD *)(v89 + 800), *(_QWORD *)(v89 + 776));
      swift_release();
    }
    else
    {
      v28(*(_QWORD *)(v89 + 800), *(_QWORD *)(v89 + 776));
LABEL_21:
      v24 = *(void (**)(uint64_t, uint64_t))(v89 + 912);
      v22 = *(_QWORD *)(v89 + 864);
      v23 = *(_QWORD *)(v89 + 848);
      *(_QWORD *)(v89 + 424) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v89 + 432) = v16;
      v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("removing ", 9uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v17);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v89 + 608) = v40;
      lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.debug.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v22);
      gpklog(_:type:fileID:line:subsystem:)();
      v24(v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_retain();
      *(_QWORD *)(v89 + 616) = v40;
      Array.append(_:)();
      swift_release();
    }
  }
  v20 = *(void (**)(uint64_t, uint64_t))(v89 + 912);
  v21 = *(_QWORD *)(v89 + 864);
  v19 = *(_QWORD *)(v89 + 848);
  outlined destroy of IndexingIterator<[GPKMember]>();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  dispatch thunk of GPKGroup.addMembers(_:remove:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v89 + 936) = v93;
  lazy protocol witness table accessor for type Int64 and conformance Int64();
  lazy protocol witness table accessor for type Int64 and conformance Int64();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  GPKGroup.setVersion(_:)(*(_QWORD *)(v89 + 592));
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group blob fetched sucessfully", 0x1EuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
  gpklog(_:type:fileID:line:subsystem:)();
  v20(v21, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [GPKMember]();
  outlined destroy of [GPKMember]();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v89 + 536) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 536) = v0;
  outlined destroy of GroupService(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 536) + 8))();
}

uint64_t GroupRefresher.fetchAndProcessRSVPQueue(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v2 + 552) = v1;
  *(_QWORD *)(v2 + 544) = a1;
  *(_QWORD *)(v2 + 432) = v2;
  *(_QWORD *)(v2 + 440) = 0;
  *(_QWORD *)(v2 + 448) = 0;
  *(_DWORD *)(v2 + 808) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 512) = 0;
  v3 = type metadata accessor for GPKGroup.JoinState();
  *(_QWORD *)(v2 + 560) = v3;
  *(_QWORD *)(v2 + 568) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 576) = swift_task_alloc();
  v4 = type metadata accessor for GPKMember.InviteStatus();
  *(_QWORD *)(v2 + 584) = v4;
  *(_QWORD *)(v2 + 592) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 600) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
  *(_QWORD *)(v2 + 608) = swift_task_alloc();
  v5 = type metadata accessor for GPKMemberRole();
  *(_QWORD *)(v2 + 616) = v5;
  *(_QWORD *)(v2 + 624) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 632) = swift_task_alloc();
  *(_QWORD *)(v2 + 640) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  *(_QWORD *)(v2 + 648) = swift_task_alloc();
  v6 = type metadata accessor for GPKUserID();
  *(_QWORD *)(v2 + 656) = v6;
  *(_QWORD *)(v2 + 664) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v2 + 672) = swift_task_alloc();
  *(_QWORD *)(v2 + 680) = swift_task_alloc();
  v7 = type metadata accessor for RSVPMessage();
  *(_QWORD *)(v2 + 688) = v7;
  *(_QWORD *)(v2 + 696) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 704) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RSVPMessage?);
  *(_QWORD *)(v2 + 712) = swift_task_alloc();
  v8 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v2 + 720) = v8;
  *(_QWORD *)(v2 + 728) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v2 + 736) = swift_task_alloc();
  v9 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v2 + 744) = v9;
  *(_QWORD *)(v2 + 752) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v2 + 760) = swift_task_alloc();
  *(_QWORD *)(v2 + 440) = a1;
  *(_QWORD *)(v2 + 448) = v1;
  return swift_task_switch();
}

uint64_t GroupRefresher.fetchAndProcessRSVPQueue(for:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;

  v9 = *(_QWORD *)(v0 + 760);
  v8 = *(_QWORD *)(v0 + 752);
  v10 = *(_QWORD *)(v0 + 744);
  v11 = *(_QWORD **)(v0 + 552);
  v7 = *(_QWORD *)(v0 + 544);
  *(_QWORD *)(v0 + 432) = v0;
  *(_QWORD *)(v0 + 456) = dispatch thunk of GPKGroup.lastKnownRSVPQueueSeqNumber.getter();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int64 and conformance Int64();
  UnsignedInteger<>.init<A>(_:)();
  v13 = *(_DWORD *)(v0 + 812);
  *(_DWORD *)(v0 + 808) = v13;
  *(_QWORD *)(v0 + 208) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 216) = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DaemonGroupManager - fetching RSVPQueue for group ", 0x32uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 464) = v7;
  *(_QWORD *)(v0 + 768) = type metadata accessor for GPKGroup();
  *(_QWORD *)(v0 + 776) = lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
  gpklog(_:type:fileID:line:subsystem:)();
  v4 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v0 + 784) = v4;
  v4(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of GroupService(v11, (_QWORD *)(v0 + 16));
  dispatch thunk of GPKGroup.groupID.getter();
  v5 = (_QWORD *)swift_task_alloc();
  v12[99] = v5;
  *v5 = v12[54];
  v5[1] = GroupRefresher.fetchAndProcessRSVPQueue(for:);
  return GroupService.fetchRSVPQueue(for:lastKnownSeqNumber:)((uint64_t)(v12 + 28), v12[92], v13);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  v4 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 432) = *v1;
  *(_QWORD *)(v2 + 800) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v4[89] + 8))(v4[90], v4[88]);
    outlined destroy of GroupService((uint64_t)v4);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t result;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;

  v73 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
  v71 = *(_QWORD *)(v0 + 760);
  v72 = *(_QWORD *)(v0 + 744);
  *(_QWORD *)(v0 + 432) = v0;
  v70 = *(_DWORD *)(v0 + 224);
  v74 = *(_QWORD *)(v0 + 232);
  *(_DWORD *)(v0 + 240) = v70;
  *(_QWORD *)(v0 + 248) = v74;
  *(_QWORD *)(v0 + 256) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 264) = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fetched RSVPQueue: ", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v0 + 272) = v70;
  *(_QWORD *)(v0 + 280) = v74;
  lazy protocol witness table accessor for type RSVPQueue and conformance RSVPQueue();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v71);
  gpklog(_:type:fileID:line:subsystem:)();
  v73(v71, v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 472) = v74;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RSVPMessage]);
  lazy protocol witness table accessor for type [RSVPMessage] and conformance [A]();
  Collection<>.makeIterator()();
  v75 = *(_QWORD *)(v0 + 800);
  while (1)
  {
    v67 = *(_QWORD *)(v69 + 712);
    v66 = *(_QWORD *)(v69 + 696);
    v68 = *(_QWORD *)(v69 + 688);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[RSVPMessage]>);
    IndexingIterator.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v67, 1, v68) == 1)
      break;
    v62 = *(_BYTE **)(v69 + 704);
    v61 = *(_QWORD *)(v69 + 688);
    v63 = *(_QWORD *)(v69 + 664);
    v64 = *(_QWORD *)(v69 + 656);
    v65 = *(void **)(v69 + 648);
    outlined init with take of RSVPMessage(*(_BYTE **)(v69 + 712), v62);
    outlined init with copy of GPKUserID?(&v62[*(int *)(v61 + 24)], v65);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v63 + 48))(v65, 1, v64) == 1)
    {
      outlined destroy of GPKUserID?(*(_QWORD *)(v69 + 648));
      goto LABEL_13;
    }
    v57 = *(_QWORD *)(v69 + 704);
    v56 = *(_QWORD *)(v69 + 688);
    v58 = *(_QWORD *)(v69 + 624);
    v59 = *(_QWORD *)(v69 + 616);
    v60 = *(void **)(v69 + 608);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v69 + 664) + 32))(*(_QWORD *)(v69 + 680), *(_QWORD *)(v69 + 648), *(_QWORD *)(v69 + 656));
    outlined init with copy of GPKMemberRole?((const void *)(v57 + *(int *)(v56 + 28)), v60);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v58 + 48))(v60, 1, v59) == 1)
    {
      v55 = *(_QWORD *)(v69 + 680);
      v53 = *(_QWORD *)(v69 + 664);
      v54 = *(_QWORD *)(v69 + 656);
      outlined destroy of GPKMemberRole?(*(_QWORD *)(v69 + 608));
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v55, v54);
LABEL_13:
      v21 = *(void (**)(uint64_t, uint64_t))(v69 + 784);
      v19 = *(_QWORD *)(v69 + 760);
      v20 = *(_QWORD *)(v69 + 744);
      v22 = *(_QWORD *)(v69 + 704);
      *(_QWORD *)(v69 + 304) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v69 + 312) = v13;
      v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvp message missing userID or role -- skipping. ", 0x31uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v14);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type RSVPMessage and conformance RSVPMessage();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v19);
      gpklog(_:type:fileID:line:subsystem:)();
      v21(v19, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of RSVPMessage(v22);
    }
    else
    {
      v50 = *(_QWORD *)(v69 + 680);
      v52 = *(_QWORD *)(v69 + 672);
      v49 = *(_QWORD *)(v69 + 664);
      v51 = *(_QWORD *)(v69 + 656);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v69 + 624) + 32))(*(_QWORD *)(v69 + 640), *(_QWORD *)(v69 + 608), *(_QWORD *)(v69 + 616));
      *(_QWORD *)(v69 + 496) = dispatch thunk of GPKGroup.members.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v52, v50, v51);
      *(_QWORD *)(swift_task_alloc() + 16) = v52;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
      lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
      result = Sequence.first(where:)();
      if (v75)
        return result;
      v45 = *(_QWORD *)(v69 + 672);
      v44 = *(_QWORD *)(v69 + 664);
      v46 = *(_QWORD *)(v69 + 656);
      swift_task_dealloc();
      v47 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v47(v45, v46);
      outlined destroy of [GPKMember]();
      v48 = *(_QWORD *)(v69 + 488);
      if (v48)
      {
        v42 = *(_QWORD *)(v69 + 632);
        v40 = *(_QWORD *)(v69 + 624);
        v41 = *(_QWORD *)(v69 + 616);
        *(_QWORD *)(v69 + 512) = v48;
        dispatch thunk of GPKMember.role.getter();
        lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
        v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v42, v41);
        if ((v43 & 1) == 0)
        {
          v35 = *(void (**)(uint64_t, uint64_t))(v69 + 784);
          v33 = *(_QWORD *)(v69 + 760);
          v34 = *(_QWORD *)(v69 + 744);
          v37 = *(_QWORD *)(v69 + 640);
          v39 = *(_QWORD *)(v69 + 632);
          v36 = *(_QWORD *)(v69 + 624);
          v38 = *(_QWORD *)(v69 + 616);
          *(_QWORD *)(v69 + 416) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
          *(_QWORD *)(v69 + 424) = v5;
          v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("member permission level is different than server RSVP ", 0x36uLL, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v6);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v69 + 536) = v48;
          type metadata accessor for GPKMember();
          lazy protocol witness table accessor for type GPKMember and conformance GPKMember();
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" - ", 3uLL, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v7);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          outlined destroy of DefaultStringInterpolation();
          String.init(stringInterpolation:)();
          static os_log_type_t.error.getter();
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v33);
          gpklog(_:type:fileID:line:subsystem:)();
          v35(v33, v34);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v39, v37, v38);
          dispatch thunk of GPKMember.role.setter();
        }
        __asm { BR              X8 }
      }
      v26 = *(void (**)(uint64_t, uint64_t))(v69 + 784);
      v24 = *(_QWORD *)(v69 + 760);
      v25 = *(_QWORD *)(v69 + 744);
      v32 = *(_QWORD *)(v69 + 704);
      v30 = *(_QWORD *)(v69 + 680);
      v31 = *(_QWORD *)(v69 + 656);
      v28 = *(_QWORD *)(v69 + 640);
      v27 = *(_QWORD *)(v69 + 624);
      v29 = *(_QWORD *)(v69 + 616);
      v23 = *(_QWORD *)(v69 + 544);
      *(_QWORD *)(v69 + 320) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v69 + 328) = v9;
      v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cannot find member for userID ", 0x1EuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v10);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" in group ", 0xAuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v11);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v69 + 504) = v23;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v24);
      gpklog(_:type:fileID:line:subsystem:)();
      v26(v24, v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
      v47(v30, v31);
      outlined destroy of RSVPMessage(v32);
      v75 = 0;
    }
  }
  v18 = *(void (**)(uint64_t, uint64_t))(v69 + 784);
  v16 = *(_QWORD *)(v69 + 760);
  v17 = *(_QWORD *)(v69 + 744);
  outlined destroy of IndexingIterator<[RSVPMessage]>();
  *(_DWORD *)(v69 + 816) = v70;
  lazy protocol witness table accessor for type Int64 and conformance Int64();
  lazy protocol witness table accessor for type Int64 and conformance Int64();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  SignedInteger<>.init<A>(_:)();
  dispatch thunk of GPKGroup.lastKnownRSVPQueueSeqNumber.setter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group RSVP queue fetched sucessfully", 0x24uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v16);
  gpklog(_:type:fileID:line:subsystem:)();
  v18(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v69 + 432) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 728);
  *(_QWORD *)(v0 + 432) = v0;
  (*(void (**)(void))(v1 + 8))();
  outlined destroy of GroupService(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 432) + 8))();
}

uint64_t GroupRefresher.refreshJoinStatus(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  _BYTE v12[4];
  int v13;
  uint64_t countAndFlagsBits;
  int v15;
  Swift::String v16;
  void *object;
  int v18;
  void (*v19)(_BYTE *, char *, uint64_t);
  void (*v20)(_BYTE *, uint64_t);
  int v21;
  int v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void (*v29)(_BYTE *, char *, uint64_t);
  void (*v30)(_BYTE *, uint64_t);
  int v31;
  int v32;
  void (*v33)(_BYTE *, uint64_t, uint64_t);
  void (*v34)(_BYTE *, _QWORD);
  char *v35;
  unsigned int v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  unint64_t v64;
  _BYTE *v65;
  unint64_t v66;
  _BYTE *v67;
  unint64_t v68;
  _BYTE *v69;
  unint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v40 = a1;
  v2 = v1;
  v3 = v40;
  v61 = v2;
  v77 = 0;
  v76 = 0;
  v45 = 0;
  v41 = type metadata accessor for LogSubsystem();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v44 = &v12[-v43];
  v46 = type metadata accessor for GPKGroup.JoinState();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v45);
  v49 = &v12[-v48];
  v50 = type metadata accessor for GPKMember.InviteStatus();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v50);
  v53 = &v12[-v52];
  v54 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v12[-v52]);
  v55 = &v12[-v54];
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKMember.InviteStatus?, GPKMember.InviteStatus?));
  v57 = (*(_QWORD *)(*(_QWORD *)(v56 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v56);
  v58 = &v12[-v57];
  v59 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v60 = &v12[-v59];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMember.InviteStatus?);
  v71 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64);
  v62 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v63 = &v12[-v62];
  v64 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v12[-v62]);
  v65 = &v12[-v64];
  v66 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v12[-v64]);
  v67 = &v12[-v66];
  v68 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v12[-v66]);
  v69 = &v12[-v68];
  v70 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v12[-v68]);
  v72 = &v12[-v70];
  v73 = (v71 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v12[-v70]);
  v74 = &v12[-v73];
  v77 = v3;
  v76 = v8;
  v75 = dispatch thunk of GPKGroup.meMember.getter();
  if (v75)
  {
    v39 = v75;
    v38 = v75;
    dispatch thunk of GPKMember.inviteStatus.getter();
    swift_release();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v74, 0, 1, v50);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v74, 1, 1, v50);
  }
  v9 = *MEMORY[0x24BE3E588];
  v33 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v51 + 104);
  v33(v72, v9, v50);
  v34 = *(void (**)(_BYTE *, _QWORD))(v51 + 56);
  v36 = 1;
  v34(v72, 0);
  v35 = &v60[*(int *)(v56 + 48)];
  outlined init with copy of GPKMember.InviteStatus?(v74, v60);
  outlined init with copy of GPKMember.InviteStatus?(v72, v35);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
  if (v37(v60, v36, v50) == 1)
  {
    if (v37(v35, 1, v50) == 1)
    {
      outlined destroy of GPKMember.InviteStatus?((uint64_t)v60);
      v32 = 1;
      goto LABEL_9;
    }
  }
  else
  {
    outlined init with copy of GPKMember.InviteStatus?(v60, v69);
    if (v37(v35, 1, v50) != 1)
    {
      v29 = *(void (**)(_BYTE *, char *, uint64_t))(v51 + 32);
      v29(v55, v69, v50);
      v29(v53, v35, v50);
      lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus();
      v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      v30 = *(void (**)(_BYTE *, uint64_t))(v51 + 8);
      v30(v53, v50);
      v30(v55, v50);
      outlined destroy of GPKMember.InviteStatus?((uint64_t)v60);
      v32 = v31;
      goto LABEL_9;
    }
    (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v69, v50);
  }
  outlined destroy of (GPKMember.InviteStatus?, GPKMember.InviteStatus?)((uint64_t)v60);
  v32 = 0;
LABEL_9:
  v28 = v32;
  outlined destroy of GPKMember.InviteStatus?((uint64_t)v72);
  outlined destroy of GPKMember.InviteStatus?((uint64_t)v74);
  if ((v28 & 1) != 0)
  {
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v47 + 104))(v49, *MEMORY[0x24BE3E4A8], v46);
    GPKGroup.setJoinState(_:)();
    (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v49, v46);
    goto LABEL_29;
  }
  v27 = dispatch thunk of GPKGroup.meMember.getter();
  if (v27)
  {
    v26 = v27;
    v25 = v27;
    dispatch thunk of GPKMember.inviteStatus.getter();
    swift_release();
    ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v34)(v67, 0, 1, v50);
  }
  else
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v34)(v67, 1, 1, v50);
  }
  v33(v65, *MEMORY[0x24BE3E580], v50);
  v24 = 1;
  v34(v65, 0);
  v23 = &v58[*(int *)(v56 + 48)];
  outlined init with copy of GPKMember.InviteStatus?(v67, v58);
  outlined init with copy of GPKMember.InviteStatus?(v65, v23);
  if (v37(v58, v24, v50) == 1)
  {
    if (v37(v23, 1, v50) == 1)
    {
      outlined destroy of GPKMember.InviteStatus?((uint64_t)v58);
      v22 = 1;
      goto LABEL_23;
    }
  }
  else
  {
    outlined init with copy of GPKMember.InviteStatus?(v58, v63);
    if (v37(v23, 1, v50) != 1)
    {
      v19 = *(void (**)(_BYTE *, char *, uint64_t))(v51 + 32);
      v19(v55, v63, v50);
      v19(v53, v23, v50);
      lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus();
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v20 = *(void (**)(_BYTE *, uint64_t))(v51 + 8);
      v20(v53, v50);
      v20(v55, v50);
      outlined destroy of GPKMember.InviteStatus?((uint64_t)v58);
      v22 = v21;
      goto LABEL_23;
    }
    (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v63, v50);
  }
  outlined destroy of (GPKMember.InviteStatus?, GPKMember.InviteStatus?)((uint64_t)v58);
  v22 = 0;
LABEL_23:
  v18 = v22;
  outlined destroy of GPKMember.InviteStatus?((uint64_t)v65);
  outlined destroy of GPKMember.InviteStatus?((uint64_t)v67);
  if ((v18 & 1) != 0)
  {
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v47 + 104))(v49, *MEMORY[0x24BE3E4B0], v46);
    GPKGroup.setJoinState(_:)();
    (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v49, v46);
  }
LABEL_29:
  v13 = 1;
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Me user join state updated sucessfully", 0x26uLL, 1);
  countAndFlagsBits = v10._countAndFlagsBits;
  object = v10._object;
  v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRefresher.swift", 0x21uLL, v13 & 1);
  v15 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v44);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v44, v41);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type GroupCryptoBlob and conformance GroupCryptoBlob()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupCryptoBlob and conformance GroupCryptoBlob;
  if (!lazy protocol witness table cache variable for type GroupCryptoBlob and conformance GroupCryptoBlob)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GroupCryptoBlob, &type metadata for GroupCryptoBlob);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupCryptoBlob and conformance GroupCryptoBlob);
    return v0;
  }
  return v2;
}

char *outlined init with take of (key: GPKUserID, value: GPKMemberRole)?(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t v10;
  uint64_t v11;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: GPKUserID, value: GPKMemberRole));
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v11 + 48))(a1, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: GPKUserID, value: GPKMemberRole)?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v2 = type metadata accessor for GPKUserID();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    v7 = &a2[*(int *)(v10 + 48)];
    v6 = &a1[*(int *)(v10 + 48)];
    v3 = type metadata accessor for GPKMemberRole();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(v7, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type GPKMember and conformance GPKMember()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMember and conformance GPKMember;
  if (!lazy protocol witness table cache variable for type GPKMember and conformance GPKMember)
  {
    v0 = type metadata accessor for GPKMember();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E680], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember and conformance GPKMember);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMember and conformance GPKMember;
  if (!lazy protocol witness table cache variable for type GPKMember and conformance GPKMember)
  {
    v0 = type metadata accessor for GPKMember();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E678], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember and conformance GPKMember);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMember and conformance GPKMember;
  if (!lazy protocol witness table cache variable for type GPKMember and conformance GPKMember)
  {
    v0 = type metadata accessor for GPKMember();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E670], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember and conformance GPKMember);
    return v1;
  }
  return v3;
}

uint64_t closure #1 in GroupRefresher.fetchAndProcessGroupBlob(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE v7[12];
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37[2];
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v26 = a1;
  v41 = 0;
  v40 = 0;
  v33 = type metadata accessor for GPKUserID();
  v31 = *(_QWORD *)(v33 - 8);
  v24 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v33);
  v25 = &v7[-v24];
  v27 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v26);
  v32 = &v7[-v27];
  v28 = *v3;
  v41 = v28;
  v40 = a2;
  v29 = GPKUserID.rawValue.getter();
  v30 = v4;
  outlined copy of Data?(v29, v4);
  dispatch thunk of GPKMember.userID.getter();
  if ((*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v31 + 48))(v32, 1, v33) == 0)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v31 + 16))(v25, v32, v33);
    outlined destroy of GPKUserID?((uint64_t)v32);
    v18 = GPKUserID.rawValue.getter();
    v19 = v5;
    (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v25, v33);
    v22 = v18;
    v23 = v19;
  }
  else
  {
    v20 = 0;
    v21 = 0xF000000000000000;
    outlined destroy of GPKUserID?((uint64_t)v32);
    v22 = v20;
    v23 = v21;
  }
  v17 = v23;
  v16 = v22;
  outlined copy of Data?(v22, v23);
  v37[0] = v29;
  v37[1] = v30;
  v38 = v16;
  v39 = v17;
  if ((v30 & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((v39 & 0xF000000000000000) == 0xF000000000000000)
    {
      outlined destroy of Data?((uint64_t)v37);
      v15 = 1;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  outlined init with copy of Data?(v37, (uint64_t)&v35);
  if ((v39 & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data((uint64_t)&v35);
LABEL_11:
    outlined destroy of (Data?, Data?)((uint64_t)v37);
    v15 = 0;
    goto LABEL_10;
  }
  v11 = v35;
  v12 = v36;
  outlined copy of Data._Representation(v35, v36);
  v9 = v38;
  v13 = v37;
  v10 = v39;
  outlined copy of Data._Representation(v38, v39);
  v14 = MEMORY[0x242633488](v11, v12, v9, v10);
  outlined consume of Data._Representation(v9, v10);
  outlined consume of Data._Representation(v11, v12);
  outlined consume of Data._Representation(v9, v10);
  outlined consume of Data._Representation(v11, v12);
  outlined destroy of Data?((uint64_t)v13);
  v15 = v14;
LABEL_10:
  v8 = v15;
  outlined consume of Data?(v16, v17);
  outlined consume of Data?(v29, v30);
  return v8 & 1;
}

uint64_t partial apply for closure #1 in GroupRefresher.fetchAndProcessGroupBlob(for:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in GroupRefresher.fetchAndProcessGroupBlob(for:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t default argument 2 of GPKMember.init(handle:role:inviteStatus:user:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v3;

  v3 = *MEMORY[0x24BE3E580];
  v1 = type metadata accessor for GPKMember.InviteStatus();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 8) + 104))(a1, v3);
}

unint64_t lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup;
  if (!lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup)
  {
    v0 = type metadata accessor for GPKGroup();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E540], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKGroup and conformance GPKGroup);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type RSVPQueue and conformance RSVPQueue()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPQueue and conformance RSVPQueue;
  if (!lazy protocol witness table cache variable for type RSVPQueue and conformance RSVPQueue)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPQueue, &type metadata for RSVPQueue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPQueue and conformance RSVPQueue);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[RSVPMessage]>()
{
  swift_bridgeObjectRelease();
}

_BYTE *outlined init with take of RSVPMessage(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *__dst;
  _BYTE *__src;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  *a2 = *a1;
  v12 = (int *)type metadata accessor for RSVPMessage();
  v10 = v12[5];
  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v10], &a1[v10]);
  v13 = v12[6];
  v15 = type metadata accessor for GPKUserID();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t))(v16 + 48))(&a1[v13], 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
    memcpy(&a2[v13], &a1[v13], *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v16 + 32))();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v16 + 56))(&a2[v13], 0, 1, v15);
  }
  __dst = &a2[v12[7]];
  __src = &a1[v12[7]];
  v8 = type metadata accessor for GPKMemberRole();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t))(v9 + 48))(__src, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(__dst, __src, v8);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
  }
  return a2;
}

uint64_t closure #1 in GroupRefresher.fetchAndProcessRSVPQueue(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE v7[12];
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37[2];
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v29 = a1;
  v28 = a2;
  v41 = 0;
  v40 = 0;
  v33 = type metadata accessor for GPKUserID();
  v31 = *(_QWORD *)(v33 - 8);
  v26 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v33);
  v27 = &v7[-v26];
  v30 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v29);
  v32 = &v7[-v30];
  v41 = *v2;
  v40 = v3;
  dispatch thunk of GPKMember.userID.getter();
  if ((*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v31 + 48))(v32, 1, v33) == 0)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v31 + 16))(v27, v32, v33);
    outlined destroy of GPKUserID?((uint64_t)v32);
    v20 = GPKUserID.rawValue.getter();
    v21 = v4;
    (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v27, v33);
    v24 = v20;
    v25 = v21;
  }
  else
  {
    v22 = 0;
    v23 = 0xF000000000000000;
    outlined destroy of GPKUserID?((uint64_t)v32);
    v24 = v22;
    v25 = v23;
  }
  v17 = v25;
  v16 = v24;
  outlined copy of Data?(v24, v25);
  v18 = GPKUserID.rawValue.getter();
  v19 = v5;
  outlined copy of Data?(v18, v5);
  v37[0] = v16;
  v37[1] = v17;
  v38 = v18;
  v39 = v19;
  if ((v17 & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((v39 & 0xF000000000000000) == 0xF000000000000000)
    {
      outlined destroy of Data?((uint64_t)v37);
      v15 = 1;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  outlined init with copy of Data?(v37, (uint64_t)&v35);
  if ((v39 & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data((uint64_t)&v35);
LABEL_11:
    outlined destroy of (Data?, Data?)((uint64_t)v37);
    v15 = 0;
    goto LABEL_10;
  }
  v11 = v35;
  v12 = v36;
  outlined copy of Data._Representation(v35, v36);
  v9 = v38;
  v13 = v37;
  v10 = v39;
  outlined copy of Data._Representation(v38, v39);
  v14 = MEMORY[0x242633488](v11, v12, v9, v10);
  outlined consume of Data._Representation(v9, v10);
  outlined consume of Data._Representation(v11, v12);
  outlined consume of Data._Representation(v9, v10);
  outlined consume of Data._Representation(v11, v12);
  outlined destroy of Data?((uint64_t)v13);
  v15 = v14;
LABEL_10:
  v8 = v15;
  outlined consume of Data?(v18, v19);
  outlined consume of Data?(v16, v17);
  return v8 & 1;
}

uint64_t partial apply for closure #1 in GroupRefresher.fetchAndProcessRSVPQueue(for:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in GroupRefresher.fetchAndProcessRSVPQueue(for:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

void *outlined init with copy of GPKMember.InviteStatus?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for GPKMember.InviteStatus();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMember.InviteStatus?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of (GPKMember.InviteStatus?, GPKMember.InviteStatus?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(void);

  v4 = type metadata accessor for GPKMember.InviteStatus();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(void))(v5 + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v6)(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v2 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKMember.InviteStatus?, GPKMember.InviteStatus?))
              + 48);
  if (!v6())
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  return a1;
}

uint64_t outlined destroy of GPKMember.InviteStatus?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for GPKMember.InviteStatus();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus;
  if (!lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus)
  {
    v0 = type metadata accessor for GPKMember.InviteStatus();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E5A8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKMember.InviteStatus and conformance GPKMember.InviteStatus);
    return v1;
  }
  return v3;
}

void *GroupRefresher.init(groupService:metadataService:groupStore:userStore:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, const void *a4@<X3>, uint64_t a5@<X8>)
{
  memcpy((void *)a5, a1, 0xC0uLL);
  memcpy((void *)(a5 + 192), a2, 0x88uLL);
  outlined init with take of GroupStore(a3, (void *)(a5 + 328));
  return outlined init with take of UserStore(a4, (void *)(a5 + 368));
}

uint64_t initializeBufferWithCopyOfBuffer for GroupRefresher(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for GroupRefresher(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184));
  __swift_destroy_boxed_opaque_existential_1(a1 + 192);
  __swift_destroy_boxed_opaque_existential_1(a1 + 232);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 288);
  __swift_destroy_boxed_opaque_existential_1(a1 + 328);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 368);
}

_QWORD *initializeWithCopy for GroupRefresher(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v4 = a2[13];
  a1[13] = v4;
  a1[14] = a2[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  v5 = a2[18];
  a1[18] = v5;
  a1[19] = a2[19];
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a1 + 15), (uint64_t)(a2 + 15));
  v14 = a2[20];
  swift_unknownObjectRetain();
  v6 = a2[21];
  a1[20] = v14;
  a1[21] = v6;
  v15 = a2[22];
  v16 = a2[23];
  outlined copy of Data._Representation(v15, v16);
  a1[22] = v15;
  a1[23] = v16;
  v7 = a2[27];
  a1[27] = v7;
  a1[28] = a2[28];
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)(a1 + 24), (uint64_t)(a2 + 24));
  v8 = a2[32];
  a1[32] = v8;
  a1[33] = a2[33];
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(a1 + 29), (uint64_t)(a2 + 29));
  v17 = a2[34];
  swift_unknownObjectRetain();
  v9 = a2[35];
  a1[34] = v17;
  a1[35] = v9;
  v10 = a2[39];
  a1[39] = v10;
  a1[40] = a2[40];
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))((uint64_t)(a1 + 36), (uint64_t)(a2 + 36));
  v11 = a2[44];
  a1[44] = v11;
  a1[45] = a2[45];
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))((uint64_t)(a1 + 41), (uint64_t)(a2 + 41));
  v12 = a2[49];
  a1[49] = v12;
  a1[50] = a2[50];
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))((uint64_t)(a1 + 46), (uint64_t)(a2 + 46));
  return a1;
}

_QWORD *assignWithCopy for GroupRefresher(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_assign_boxed_opaque_existential_1((uint64_t)a1, a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 5), a2 + 5);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 10), a2 + 10);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 15), a2 + 15);
  v5 = a2[20];
  swift_unknownObjectRetain();
  v6 = a2[21];
  a1[20] = v5;
  swift_unknownObjectRelease();
  a1[21] = v6;
  v7 = a2[22];
  v8 = a2[23];
  outlined copy of Data._Representation(v7, v8);
  v2 = a1[22];
  v3 = a1[23];
  a1[22] = v7;
  a1[23] = v8;
  outlined consume of Data._Representation(v2, v3);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 24), a2 + 24);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 29), a2 + 29);
  v9 = a2[34];
  swift_unknownObjectRetain();
  v10 = a2[35];
  a1[34] = v9;
  swift_unknownObjectRelease();
  a1[35] = v10;
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 36), a2 + 36);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 41), a2 + 41);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 46), a2 + 46);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy408_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x198uLL);
}

_QWORD *assignWithTake for GroupRefresher(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  memcpy(a1 + 5, a2 + 5, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 10));
  memcpy(a1 + 10, a2 + 10, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 15));
  memcpy(a1 + 15, a2 + 15, 0x28uLL);
  v6 = a2[21];
  a1[20] = a2[20];
  swift_unknownObjectRelease();
  a1[21] = v6;
  v2 = a2[23];
  v3 = a1[22];
  v4 = a1[23];
  a1[22] = a2[22];
  a1[23] = v2;
  outlined consume of Data._Representation(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 24));
  memcpy(a1 + 24, a2 + 24, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 29));
  memcpy(a1 + 29, a2 + 29, 0x28uLL);
  v7 = a2[35];
  a1[34] = a2[34];
  swift_unknownObjectRelease();
  a1[35] = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 36));
  memcpy(a1 + 36, a2 + 36, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 41));
  memcpy(a1 + 41, a2 + 41, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 46));
  memcpy(a1 + 46, a2 + 46, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupRefresher(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 408))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for GroupRefresher(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 51;
  if (a2 < 0)
  {
    result[47] = 0;
    result[46] = 0;
    result[45] = 0;
    result[44] = 0;
    result[43] = 0;
    result[42] = 0;
    result[41] = 0;
    result[40] = 0;
    result[39] = 0;
    result[38] = 0;
    result[37] = 0;
    result[36] = 0;
    result[35] = 0;
    result[34] = 0;
    result[33] = 0;
    result[32] = 0;
    result[31] = 0;
    result[30] = 0;
    result[29] = 0;
    result[28] = 0;
    result[27] = 0;
    result[26] = 0;
    result[25] = 0;
    result[24] = 0;
    result[23] = 0;
    result[22] = 0;
    result[21] = 0;
    result[20] = 0;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[49] = 0;
    result[48] = 0;
    result[50] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      result[3] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupRefresher()
{
  return &type metadata for GroupRefresher;
}

uint64_t outlined destroy of (Data?, Data?)(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((*(_QWORD *)(a1 + 24) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t outlined init with copy of Data?(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  if ((a1[1] & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
  }
  else
  {
    v3 = *a1;
    v4 = a1[1];
    outlined copy of Data._Representation(*a1, v4);
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
  }
  return a2;
}

void *CoreDataInvitationStore.context.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + 16);
  v1 = v3;
  return v3;
}

uint64_t CoreDataInvitationStore.__allocating_init(context:clientModelVersion:)(void *a1, float a2)
{
  swift_allocObject();
  return CoreDataInvitationStore.init(context:clientModelVersion:)(a1, a2);
}

uint64_t CoreDataInvitationStore.init(context:clientModelVersion:)(void *a1, float a2)
{
  uint64_t v2;
  id v3;
  uint64_t v7;

  v3 = a1;
  *(_QWORD *)(v2 + 16) = a1;
  *(float *)(v2 + 24) = a2;

  return v7;
}

uint64_t CoreDataInvitationStore.createInvitation(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[7] = v1;
  v2[6] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = v1;
  return swift_task_switch();
}

uint64_t CoreDataInvitationStore.createInvitation(_:)()
{
  _QWORD *v0;
  id v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v0[7];
  v5 = v0[6];
  v0[2] = v0;
  v4 = *(id *)(v6 + 16);
  v1 = v4;
  swift_retain();
  swift_retain();
  v7 = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v5;
  *(_QWORD *)(v7 + 24) = v6;
  type metadata accessor for GPKGroup();
  NSManagedObjectContext.sync<A>(work:)();
  swift_task_dealloc();
  swift_release();
  swift_release();

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 16) + 8))(*(_QWORD *)(v3 + 40));
}

void closure #1 in CoreDataInvitationStore.createInvitation(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  unsigned __int8 v11;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v19 = a1;
  v18 = a2;
  type metadata accessor for Invitation();
  swift_retain();
  v3 = *(id *)(a2 + 16);
  v15 = (void *)Invitation.__allocating_init(from:clientModelVersion:context:)();
  if (!v14)
  {
    v17 = v15;
    v20 = 0;
    v10 = *(id *)(a2 + 16);
    v4 = v10;
    v16 = 0;
    v11 = objc_msgSend(v10, sel_save_, &v16);
    v9 = v16;
    v5 = v16;
    v6 = v20;
    v20 = v9;

    if ((v11 & 1) != 0)
    {
      type metadata accessor for GPKGroup();
      v7 = v15;
      *a3 = GPKGroup.init(invitation:)(v15);
    }
    else
    {
      v8 = v20;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }

  }
}

void partial apply for closure #1 in CoreDataInvitationStore.createInvitation(_:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in CoreDataInvitationStore.createInvitation(_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t CoreDataInvitationStore.invitation(by:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[7] = v1;
  v2[6] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v3 = type metadata accessor for GPKGroupID();
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = swift_task_alloc();
  v2[3] = a1;
  v2[4] = v1;
  return swift_task_switch();
}

uint64_t CoreDataInvitationStore.invitation(by:)()
{
  _QWORD *v0;
  id v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = v0[10];
  v9 = v0[9];
  v11 = v0[8];
  v13 = v0[7];
  v10 = v0[6];
  v0[2] = v0;
  v8 = *(void **)(v13 + 16);
  v1 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v10, v11);
  swift_retain();
  v14 = swift_task_alloc();
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroup?);
  NSManagedObjectContext.sync<A>(work:)();
  v5 = v7[10];
  v3 = v7[9];
  v4 = v7[8];
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  swift_release();

  v6 = v7[5];
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v7[2] + 8))(v6);
}

void closure #1 in CoreDataInvitationStore.invitation(by:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  type metadata accessor for Invitation();
  v12 = (void *)static Invitation.fetchRequest()();
  type metadata accessor for NSPredicate();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID == %@", 0xDuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  _allocateUninitializedArray<A>(_:)();
  v7 = v2;
  v5 = GPKGroupID.hexString.getter();
  v6 = v3;
  v7[3] = MEMORY[0x24BEE0D00];
  v7[4] = lazy protocol witness table accessor for type String and conformance String();
  *v7 = v5;
  v7[1] = v6;
  _finalizeUninitializedArray<A>(_:)();
  v8 = (void *)NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setPredicate_, v8);

  v10 = *(void **)(a2 + 16);
  v4 = v10;
  v13 = NSManagedObjectContext.fetch<A>(_:)();

  if (!v11)
  {
    CoreDataInvitationStore.removeDuplicates(from:)(v13);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKGroup]);
    lazy protocol witness table accessor for type [GPKGroup] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [GPKGroup]();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

}

void partial apply for closure #1 in CoreDataInvitationStore.invitation(by:)()
{
  uint64_t v0;

  closure #1 in CoreDataInvitationStore.invitation(by:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t CoreDataInvitationStore.fetchInvitations()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[5] = v0;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  id v5;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = v0;
  v5 = *(id *)(v1 + 16);
  v2 = v5;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKGroup]);
  NSManagedObjectContext.sync<A>(work:)();
  swift_release();

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v4 + 16) + 8))(*(_QWORD *)(v4 + 32));
}

void closure #1 in CoreDataInvitationStore.fetchInvitations()(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  type metadata accessor for Invitation();
  v7 = (void *)static Invitation.fetchRequest()();
  v5 = *(id *)(a1 + 16);
  v2 = v5;
  v8 = NSManagedObjectContext.fetch<A>(_:)();

  if (!v6)
  {
    *a2 = CoreDataInvitationStore.removeDuplicates(from:)(v8);
    swift_bridgeObjectRelease();
  }

}

void partial apply for closure #1 in CoreDataInvitationStore.fetchInvitations()(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in CoreDataInvitationStore.fetchInvitations()(v1, a1);
}

uint64_t CoreDataInvitationStore.fetchInvitations(matching:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[7] = v1;
  v2[6] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = v1;
  return swift_task_switch();
}

uint64_t CoreDataInvitationStore.fetchInvitations(matching:)()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v4;
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v8 = v0[7];
  v7 = (void *)v0[6];
  v0[2] = v0;
  v6 = *(id *)(v8 + 16);
  v1 = v6;
  v2 = v7;
  swift_retain();
  v9 = swift_task_alloc();
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKGroup]);
  NSManagedObjectContext.sync<A>(work:)();
  v4 = (id)v5[6];
  swift_task_dealloc();

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v5[2] + 8))(v5[5]);
}

void closure #1 in CoreDataInvitationStore.fetchInvitations(matching:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v3;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  type metadata accessor for Invitation();
  v9 = (void *)static Invitation.fetchRequest()();
  objc_msgSend(v9, sel_setPredicate_, a1);
  v7 = *(id *)(a2 + 16);
  v3 = v7;
  v10 = NSManagedObjectContext.fetch<A>(_:)();

  if (!v8)
  {
    *a3 = CoreDataInvitationStore.removeDuplicates(from:)(v10);
    swift_bridgeObjectRelease();
  }

}

void partial apply for closure #1 in CoreDataInvitationStore.fetchInvitations(matching:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in CoreDataInvitationStore.fetchInvitations(matching:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t CoreDataInvitationStore.deleteInvitation(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[6] = v1;
  v2[5] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v3 = type metadata accessor for GPKGroupID();
  v2[7] = v3;
  v2[8] = *(_QWORD *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[3] = a1;
  v2[4] = v1;
  return swift_task_switch();
}

uint64_t CoreDataInvitationStore.deleteInvitation(with:)()
{
  _QWORD *v0;
  id v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = v0[9];
  v8 = v0[8];
  v10 = v0[7];
  v12 = v0[6];
  v9 = v0[5];
  v0[2] = v0;
  v7 = *(id *)(v12 + 16);
  v1 = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v9, v10);
  swift_retain();
  v13 = swift_task_alloc();
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v12;
  NSManagedObjectContext.sync<A>(work:)();
  v5 = v6[9];
  v3 = v6[8];
  v4 = v6[7];
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  swift_release();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v6[2] + 8))();
}

void closure #1 in CoreDataInvitationStore.deleteInvitation(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23[4];
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v24 = 0;
  v23[2] = 0;
  v23[3] = 0;
  v27 = a1;
  v26 = a2;
  type metadata accessor for Invitation();
  v21 = (void *)static Invitation.fetchRequest()();
  v25 = v21;
  type metadata accessor for NSPredicate();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID == %@", 0xDuLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  _allocateUninitializedArray<A>(_:)();
  v16 = v2;
  v14 = GPKGroupID.hexString.getter();
  v15 = v3;
  v16[3] = MEMORY[0x24BEE0D00];
  v16[4] = lazy protocol witness table accessor for type String and conformance String();
  *v16 = v14;
  v16[1] = v15;
  _finalizeUninitializedArray<A>(_:)();
  v17 = (void *)NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_setPredicate_, v17);

  v19 = *(void **)(a2 + 16);
  v4 = v19;
  v22 = (void *)NSManagedObjectContext.fetch<A>(_:)();
  if (v20)
  {

  }
  else
  {

    v24 = v22;
    swift_bridgeObjectRetain();
    v23[1] = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Invitation]);
    lazy protocol witness table accessor for type [Invitation] and conformance [A]();
    Collection<>.makeIterator()();
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Invitation]>);
      IndexingIterator.next()();
      if (!v29)
        break;
      v10 = *(id *)(a2 + 16);
      v8 = v10;
      objc_msgSend(v10, sel_deleteObject_, v29);

    }
    outlined destroy of IndexingIterator<[Invitation]>();
    v28 = 0;
    v12 = *(id *)(a2 + 16);
    v5 = v12;
    v23[0] = 0;
    v13 = objc_msgSend(v12, sel_save_, v23);
    v11 = v23[0];
    v6 = v23[0];
    v7 = v28;
    v28 = v11;

    if ((v13 & 1) == 0)
    {
      v9 = v28;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    swift_bridgeObjectRelease();

  }
}

void partial apply for closure #1 in CoreDataInvitationStore.deleteInvitation(with:)()
{
  uint64_t v0;

  closure #1 in CoreDataInvitationStore.deleteInvitation(with:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t CoreDataInvitationStore.removeDuplicates(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *object;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  Swift::String v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  uint64_t v80;
  _QWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v62 = a1;
  v85 = 0;
  v84 = 0;
  v83 = 0;
  v82 = 0;
  v63 = v81;
  v81[0] = 0;
  v81[1] = 0;
  v78 = 0;
  v76 = 0;
  v77 = 0;
  v73 = 0;
  v60 = 0;
  v55 = type metadata accessor for LogSubsystem();
  v56 = *(_QWORD *)(v55 - 8);
  v57 = (*(_QWORD *)(v56 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v58 = (uint64_t)v14 - v57;
  v85 = v2;
  v84 = v1;
  v59 = type metadata accessor for GPKGroup();
  v83 = _allocateUninitializedArray<A>(_:)();
  v61 = MEMORY[0x24BEE0D00];
  _allocateUninitializedArray<A>(_:)();
  v82 = Set.init(arrayLiteral:)();
  swift_bridgeObjectRetain();
  v80 = v62;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Invitation]);
  lazy protocol witness table accessor for type [Invitation] and conformance [A]();
  Collection<>.makeIterator()();
  for (i = v65; ; i = v16)
  {
    while (1)
    {
      v52 = i;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Invitation]>);
      IndexingIterator.next()();
      v53 = v79;
      if (!v79)
      {
        outlined destroy of IndexingIterator<[Invitation]>();
        v14[3] = &v83;
        v15 = v83;
        swift_bridgeObjectRetain();
        outlined destroy of Set<String>();
        outlined destroy of [GPKGroup]();
        return v15;
      }
      v51 = v53;
      v49 = v53;
      v78 = v53;
      v50 = objc_msgSend(v53, sel_groupID);
      if (v50)
      {
        v48 = v50;
        v43 = v50;
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v45 = v3;

        v46 = v44;
        v47 = v45;
      }
      else
      {
        v46 = 0;
        v47 = 0;
      }
      v41 = v47;
      v42 = v46;
      if (v47)
        break;

      i = v52;
    }
    v39 = v42;
    v40 = v41;
    v36 = v41;
    v35 = v42;
    v76 = v42;
    v77 = v41;
    v37 = v82;
    swift_bridgeObjectRetain();
    v74 = v35;
    v75 = v36;
    v38 = Set.contains(_:)();
    swift_bridgeObjectRelease();
    if ((v38 & 1) != 0)
    {
      v4 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v25 = &v69;
      v69 = v4;
      v70 = v5;
      v28 = 1;
      v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Duplicate invitations found for groupID: ", 0x29uLL, 1);
      object = v6._object;
      DefaultStringInterpolation.appendLiteral(_:)(v6);
      swift_bridgeObjectRelease();
      v67 = v35;
      v68 = v36;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(". Deleting the duplicate", 0x18uLL, v28 & 1);
      v24 = v7._object;
      DefaultStringInterpolation.appendLiteral(_:)(v7);
      swift_bridgeObjectRelease();
      v27 = v69;
      v26 = v70;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      v29 = String.init(stringInterpolation:)();
      v32 = v8;
      v30 = static os_log_type_t.error.getter();
      v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/InvitationStore.swift", 0x22uLL, v28 & 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v58);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v58, v55);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v33 = *(id *)(v54 + 16);
      v9 = v33;
      objc_msgSend(v33, sel_deleteObject_, v49);

      v34 = v52;
      goto LABEL_11;
    }
    v10 = v49;
    v11 = v52;
    v12 = GPKGroup.init(invitation:)(v49);
    v20 = v11;
    v21 = v12;
    v22 = v11;
    if (v11)
      break;
    v19 = v21;
    v73 = v21;
    swift_retain();
    v17 = &v72;
    v72 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKGroup]);
    Array.append(_:)();
    swift_bridgeObjectRetain();
    v18 = v71;
    v71[0] = v35;
    v71[1] = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    Set.insert(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    v34 = v20;
LABEL_11:
    v16 = v34;
    swift_bridgeObjectRelease();

  }
  v14[1] = v22;
  swift_bridgeObjectRelease();

  outlined destroy of IndexingIterator<[Invitation]>();
  outlined destroy of Set<String>();
  outlined destroy of [GPKGroup]();
  return v14[2];
}

unint64_t lazy protocol witness table accessor for type [Invitation] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Invitation] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Invitation] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Invitation]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Invitation] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Invitation] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Invitation] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Invitation]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Invitation] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[Invitation]>()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Set<String>()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GPKGroup]()
{
  swift_bridgeObjectRelease();
}

uint64_t CoreDataInvitationStore.deleteAllInvitation()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[4] = v0;
  v1[2] = v1;
  v1[3] = 0;
  v2 = type metadata accessor for LogSubsystem();
  v1[5] = v2;
  v1[6] = *(_QWORD *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[3] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t (*)(), _QWORD);

  v5 = v0[7];
  v4 = v0[6];
  v6 = v0[5];
  v7 = v0[4];
  v0[2] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Deleting all invitation", 0x17uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/InvitationStore.swift", 0x22uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  v1 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[8] = v1;
  v1(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (uint64_t (*)(uint64_t (*)(), _QWORD))(*(_QWORD *)(*(_QWORD *)v7 + 160)
                                                     + **(int **)(*(_QWORD *)v7 + 160));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 72) = v2;
  *v2 = *(_QWORD *)(v8 + 16);
  v2[1] = CoreDataInvitationStore.deleteAllInvitation();
  return v9(closure #1 in CoreDataInvitationStore.deleteAllInvitation(), 0);
}

{
  _QWORD *v0;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v3 = (void (*)(uint64_t, uint64_t))v0[8];
  v4 = v0[7];
  v2 = v0[5];
  v0[2] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("All invitation deleted", 0x16uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/InvitationStore.swift", 0x22uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v4);
  gpklog(_:type:fileID:line:subsystem:)();
  v3(v4, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

_QWORD *CoreDataInvitationStore.deleteAllInvitation()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v4 = (_QWORD *)(v2 + 16);
  swift_task_dealloc();
  if (!v0)
    return (_QWORD *)swift_task_switch();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t closure #1 in CoreDataInvitationStore.deleteAllInvitation()()
{
  return 1;
}

uint64_t CoreDataInvitationStore.deleteInvitations(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[8] = v2;
  v3[7] = a2;
  v3[6] = a1;
  v3[4] = v3;
  v3[2] = 0;
  v3[3] = 0;
  v3[5] = 0;
  v3[2] = a1;
  v3[3] = a2;
  v3[5] = v2;
  return swift_task_switch();
}

uint64_t CoreDataInvitationStore.deleteInvitations(where:)()
{
  _QWORD *v0;
  id v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = v0[8];
  v7 = v0[7];
  v6 = v0[6];
  v0[4] = v0;
  v4 = *(id *)(v5 + 16);
  v1 = v4;
  swift_retain();
  v8 = (_QWORD *)swift_task_alloc();
  v8[2] = v5;
  v8[3] = v6;
  v8[4] = v7;
  NSManagedObjectContext.sync<A>(work:)();
  swift_task_dealloc();
  swift_release();

  return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 32) + 8))();
}

void closure #1 in CoreDataInvitationStore.deleteInvitations(where:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  char v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  unsigned __int8 v13;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20[4];
  void *v21;
  void *v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  v20[2] = 0;
  v20[3] = 0;
  v25 = a1;
  v23 = a2;
  v24 = a3;
  type metadata accessor for Invitation();
  v18 = (void *)static Invitation.fetchRequest()();
  v22 = v18;
  v16 = *(void **)(a1 + 16);
  v3 = v16;
  v19 = (void *)NSManagedObjectContext.fetch<A>(_:)();
  if (v17)
  {

  }
  else
  {

    v21 = v19;
    swift_bridgeObjectRetain();
    v20[1] = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Invitation]);
    lazy protocol witness table accessor for type [Invitation] and conformance [A]();
    Collection<>.makeIterator()();
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Invitation]>);
      IndexingIterator.next()();
      if (!v27)
        break;
      v7 = a2();
      if ((v7 & 1) != 0)
      {
        v10 = *(id *)(a1 + 16);
        v8 = v10;
        objc_msgSend(v10, sel_deleteObject_, v27);

      }
    }
    outlined destroy of IndexingIterator<[Invitation]>();
    v26 = 0;
    v12 = *(id *)(a1 + 16);
    v4 = v12;
    v20[0] = 0;
    v13 = objc_msgSend(v12, sel_save_, v20);
    v11 = v20[0];
    v5 = v20[0];
    v6 = v26;
    v26 = v11;

    if ((v13 & 1) == 0)
    {
      v9 = v26;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    swift_bridgeObjectRelease();

  }
}

void partial apply for closure #1 in CoreDataInvitationStore.deleteInvitations(where:)()
{
  uint64_t v0;

  closure #1 in CoreDataInvitationStore.deleteInvitations(where:)(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t CoreDataInvitationStore.invitationIDs()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[5] = v0;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  id v5;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = v0;
  v5 = *(id *)(v1 + 16);
  v2 = v5;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
  NSManagedObjectContext.sync<A>(work:)();
  swift_release();

  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v4 + 16) + 8))(*(_QWORD *)(v4 + 32));
}

void closure #1 in CoreDataInvitationStore.invitationIDs()(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  id v5;
  uint64_t v6;
  void *v7;

  type metadata accessor for Invitation();
  v7 = (void *)static Invitation.fetchRequest()();
  v5 = *(id *)(a1 + 16);
  v2 = v5;
  NSManagedObjectContext.fetch<A>(_:)();

  if (!v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Invitation]);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type [Invitation] and conformance [A]();
    *a2 = Sequence.compactMap<A>(_:)();
    swift_bridgeObjectRelease();
  }

}

void partial apply for closure #1 in CoreDataInvitationStore.invitationIDs()(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in CoreDataInvitationStore.invitationIDs()(v1, a1);
}

uint64_t closure #1 in closure #1 in CoreDataInvitationStore.invitationIDs()@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v8;

  v8 = objc_msgSend(*a1, sel_invitationID);
  if (v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v2;

    v6 = v5;
  }
  else
  {
    v6 = 0;
  }
  if (v6)
  {
    UUID.init(uuidString:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v3 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1);
  }
}

uint64_t CoreDataInvitationStore.deinit()
{
  uint64_t v0;
  uint64_t v2;

  return v2;
}

uint64_t CoreDataInvitationStore.__deallocating_deinit()
{
  CoreDataInvitationStore.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for InvitationStore.createInvitation(_:) in conformance CoreDataInvitationStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))(*(_QWORD *)(**(_QWORD **)v1 + 104) + **(int **)(**(_QWORD **)v1 + 104));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for InvitationStore.createInvitation(_:) in conformance CoreDataInvitationStore;
  return v5(a1);
}

_QWORD *protocol witness for InvitationStore.createInvitation(_:) in conformance CoreDataInvitationStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t protocol witness for InvitationStore.invitation(by:) in conformance CoreDataInvitationStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))(*(_QWORD *)(**(_QWORD **)v1 + 112) + **(int **)(**(_QWORD **)v1 + 112));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for InvitationStore.invitation(by:) in conformance CoreDataInvitationStore;
  return v5(a1);
}

_QWORD *protocol witness for InvitationStore.invitation(by:) in conformance CoreDataInvitationStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t protocol witness for InvitationStore.fetchInvitations() in conformance CoreDataInvitationStore()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  *(_QWORD *)(v1 + 16) = v1;
  v4 = (uint64_t (*)(void))(*(_QWORD *)(**(_QWORD **)v0 + 120) + **(int **)(**(_QWORD **)v0 + 120));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for InvitationStore.fetchInvitations() in conformance CoreDataInvitationStore;
  return v4();
}

_QWORD *protocol witness for InvitationStore.fetchInvitations() in conformance CoreDataInvitationStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t protocol witness for InvitationStore.fetchInvitations(matching:) in conformance CoreDataInvitationStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))(*(_QWORD *)(**(_QWORD **)v1 + 128) + **(int **)(**(_QWORD **)v1 + 128));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for InvitationStore.fetchInvitations(matching:) in conformance CoreDataInvitationStore;
  return v5(a1);
}

_QWORD *protocol witness for InvitationStore.fetchInvitations(matching:) in conformance CoreDataInvitationStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t protocol witness for InvitationStore.deleteInvitation(with:) in conformance CoreDataInvitationStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))(*(_QWORD *)(**(_QWORD **)v1 + 136) + **(int **)(**(_QWORD **)v1 + 136));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for InvitationStore.deleteInvitation(with:) in conformance CoreDataInvitationStore;
  return v5(a1);
}

_QWORD *protocol witness for InvitationStore.deleteInvitation(with:) in conformance CoreDataInvitationStore()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for InvitationStore.deleteAllInvitation() in conformance CoreDataInvitationStore()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  *(_QWORD *)(v1 + 16) = v1;
  v4 = (uint64_t (*)(void))(*(_QWORD *)(**(_QWORD **)v0 + 152) + **(int **)(**(_QWORD **)v0 + 152));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for InvitationStore.deleteAllInvitation() in conformance CoreDataInvitationStore;
  return v4();
}

_QWORD *protocol witness for InvitationStore.deleteAllInvitation() in conformance CoreDataInvitationStore()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for InvitationStore.deleteInvitations(where:) in conformance CoreDataInvitationStore(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v7 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(**(_QWORD **)v2 + 160)
                                                + **(int **)(**(_QWORD **)v2 + 160));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for InvitationStore.deleteInvitations(where:) in conformance CoreDataInvitationStore;
  return v7(a1, a2);
}

_QWORD *protocol witness for InvitationStore.deleteInvitations(where:) in conformance CoreDataInvitationStore()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for InvitationStore.invitationIDs() in conformance CoreDataInvitationStore()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  *(_QWORD *)(v1 + 16) = v1;
  v4 = (uint64_t (*)(void))(*(_QWORD *)(**(_QWORD **)v0 + 168) + **(int **)(**(_QWORD **)v0 + 168));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for InvitationStore.invitationIDs() in conformance CoreDataInvitationStore;
  return v4();
}

_QWORD *protocol witness for InvitationStore.invitationIDs() in conformance CoreDataInvitationStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t dispatch thunk of InvitationStore.createInvitation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + **(int **)(a3 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of InvitationStore.createInvitation(_:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of InvitationStore.createInvitation(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of InvitationStore.invitation(by:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 16) + **(int **)(a3 + 16));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of InvitationStore.invitation(by:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of InvitationStore.invitation(by:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of InvitationStore.fetchInvitations()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v6)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + **(int **)(a2 + 24));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of InvitationStore.fetchInvitations();
  return v6(a1, a2);
}

uint64_t dispatch thunk of InvitationStore.fetchInvitations()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of InvitationStore.fetchInvitations(matching:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 32) + **(int **)(a3 + 32));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of InvitationStore.fetchInvitations(matching:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of InvitationStore.fetchInvitations(matching:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of InvitationStore.deleteInvitation(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 40) + **(int **)(a3 + 40));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of InvitationStore.deleteInvitation(with:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of InvitationStore.deleteInvitation(with:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of InvitationStore.deleteAllInvitation()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v6)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 48) + **(int **)(a2 + 48));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of InvitationStore.deleteAllInvitation();
  return v6(a1, a2);
}

uint64_t dispatch thunk of InvitationStore.deleteAllInvitation()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of InvitationStore.deleteInvitations(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 56) + **(int **)(a4 + 56));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of InvitationStore.deleteInvitations(where:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of InvitationStore.deleteInvitations(where:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of InvitationStore.invitationIDs()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v6)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 64) + **(int **)(a2 + 64));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of InvitationStore.invitationIDs();
  return v6(a1, a2);
}

uint64_t dispatch thunk of InvitationStore.invitationIDs()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t type metadata accessor for CoreDataInvitationStore()
{
  return objc_opt_self();
}

uint64_t method lookup function for CoreDataInvitationStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreDataInvitationStore.__allocating_init(context:clientModelVersion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of CoreDataInvitationStore.createInvitation(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))(*(_QWORD *)(*(_QWORD *)v1 + 104) + **(int **)(*(_QWORD *)v1 + 104));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of CoreDataInvitationStore.createInvitation(_:);
  return v5(a1);
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of CoreDataInvitationStore.invitation(by:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))(*(_QWORD *)(*(_QWORD *)v1 + 112) + **(int **)(*(_QWORD *)v1 + 112));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of CoreDataInvitationStore.invitation(by:);
  return v5(a1);
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of CoreDataInvitationStore.fetchInvitations()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  *(_QWORD *)(v1 + 16) = v1;
  v4 = (uint64_t (*)(void))(*(_QWORD *)(*(_QWORD *)v0 + 120) + **(int **)(*(_QWORD *)v0 + 120));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = dispatch thunk of CoreDataInvitationStore.fetchInvitations();
  return v4();
}

uint64_t dispatch thunk of CoreDataInvitationStore.fetchInvitations()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of CoreDataInvitationStore.fetchInvitations(matching:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))(*(_QWORD *)(*(_QWORD *)v1 + 128) + **(int **)(*(_QWORD *)v1 + 128));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of CoreDataInvitationStore.fetchInvitations(matching:);
  return v5(a1);
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of CoreDataInvitationStore.deleteInvitation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))(*(_QWORD *)(*(_QWORD *)v1 + 136) + **(int **)(*(_QWORD *)v1 + 136));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of CoreDataInvitationStore.deleteInvitation(with:);
  return v5(a1);
}

uint64_t dispatch thunk of CoreDataInvitationStore.deleteInvitation(with:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of CoreDataInvitationStore.deleteAllInvitation()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  *(_QWORD *)(v1 + 16) = v1;
  v4 = (uint64_t (*)(void))(*(_QWORD *)(*(_QWORD *)v0 + 152) + **(int **)(*(_QWORD *)v0 + 152));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = dispatch thunk of CoreDataInvitationStore.deleteAllInvitation();
  return v4();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of CoreDataInvitationStore.deleteInvitations(where:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v7 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)v2 + 160) + **(int **)(*(_QWORD *)v2 + 160));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of CoreDataInvitationStore.deleteInvitations(where:);
  return v7(a1, a2);
}

uint64_t dispatch thunk of CoreDataInvitationStore.deleteInvitations(where:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of CoreDataInvitationStore.invitationIDs()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  *(_QWORD *)(v1 + 16) = v1;
  v4 = (uint64_t (*)(void))(*(_QWORD *)(*(_QWORD *)v0 + 168) + **(int **)(*(_QWORD *)v0 + 168));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = dispatch thunk of CoreDataInvitationStore.invitationIDs();
  return v4();
}

uint64_t dispatch thunk of CoreDataInvitationStore.invitationIDs()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

unint64_t lazy protocol witness table accessor for type [GPKGroup] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKGroup] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKGroup] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKGroup]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKGroup] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKGroup] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKGroup] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKGroup]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12F0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKGroup] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKGroup] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKGroup] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKGroup]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12B8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKGroup] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKGroup] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKGroup] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKGroup]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12D8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKGroup] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t MetaDataServerBlob.gpkGroupMetadatas.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t variable initialization expression of MetaDataServerBlob.signature()
{
  return 0;
}

uint64_t MetaDataServerBlob.signature.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  outlined copy of Data?(a3, a4);
  return a3;
}

uint64_t MetaDataServerBlob.signature.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data?(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data?(v3, v4);
  return outlined consume of Data?(a1, a2);
}

uint64_t (*MetaDataServerBlob.signature.modify())()
{
  return MetaDataServerBlob.signature.modify;
}

BOOL static MetaDataServerBlob.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t MetaDataServerBlob.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t MetaDataServerBlob.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("protobufVersion", 0xFuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkGroupMetadatas", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signature", 9uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t MetaDataServerBlob.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t MetaDataServerBlob.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for MetaDataServerBlob.CodingKeys, &type metadata for MetaDataServerBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for MetaDataServerBlob.CodingKeys, &type metadata for MetaDataServerBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for MetaDataServerBlob.CodingKeys, &type metadata for MetaDataServerBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for MetaDataServerBlob.CodingKeys, &type metadata for MetaDataServerBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for MetaDataServerBlob.CodingKeys, &type metadata for MetaDataServerBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t MetaDataServerBlob.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t MetaDataServerBlob.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("protobufVersion", 0xFuLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkGroupMetadatas", 0x11uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signature", 9uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MetaDataServerBlob.CodingKeys(char *a1, char *a2)
{
  return static MetaDataServerBlob.CodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MetaDataServerBlob.CodingKeys()
{
  return MetaDataServerBlob.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MetaDataServerBlob.CodingKeys()
{
  return MetaDataServerBlob.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MetaDataServerBlob.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MetaDataServerBlob.CodingKeys()
{
  char *v0;

  return MetaDataServerBlob.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MetaDataServerBlob.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = MetaDataServerBlob.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance MetaDataServerBlob.CodingKeys()
{
  return MetaDataServerBlob.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MetaDataServerBlob.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = MetaDataServerBlob.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MetaDataServerBlob.CodingKeys()
{
  lazy protocol witness table accessor for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MetaDataServerBlob.CodingKeys()
{
  lazy protocol witness table accessor for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t MetaDataServerBlob.encode(to:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  __int128 v46;
  _QWORD *v47;

  v29 = a1;
  v35 = a2;
  v26 = a3;
  v27 = a4;
  v28 = a5;
  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MetaDataServerBlob.CodingKeys>);
  v30 = *(_QWORD *)(v36 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v29);
  v34 = (char *)v14 - v31;
  v47 = v5;
  LODWORD(v45) = v6;
  *((_QWORD *)&v45 + 1) = v7;
  *(_QWORD *)&v46 = v8;
  *((_QWORD *)&v46 + 1) = v9;
  v32 = v5[3];
  v33 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v32);
  lazy protocol witness table accessor for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = v37;
  v44 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v38 = v10;
  v39 = v10;
  if (v10)
  {
    v15 = v39;
    result = (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v34, v36);
    v16 = v15;
  }
  else
  {
    swift_bridgeObjectRetain();
    v23 = &v43;
    v43 = v26;
    v21 = &v42;
    v42 = 1;
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
    lazy protocol witness table accessor for type [GPKMetadata] and conformance <A> [A]();
    v11 = v38;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v24 = v11;
    v25 = v11;
    if (v11)
    {
      v14[2] = v25;
      outlined destroy of [GPKMetadata]();
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v34, v36);
    }
    else
    {
      outlined destroy of [GPKMetadata]();
      outlined copy of Data?(v27, v28);
      v18 = v41;
      v41[0] = v27;
      v41[1] = v28;
      v17 = &v40;
      v40 = 2;
      lazy protocol witness table accessor for type Data and conformance Data();
      v12 = v24;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      v19 = v12;
      v20 = v12;
      if (v12)
        v14[1] = v20;
      outlined destroy of Data?((uint64_t)v41);
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v34, v36);
    }
  }
  return result;
}

uint64_t MetaDataServerBlob.init(from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;

  v29 = a1;
  v45 = 0;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<MetaDataServerBlob.CodingKeys>);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)v9 - v32;
  v45 = v1;
  v50 = 4;
  v48 = 0;
  v49 = 0xF000000000000000;
  v35 = v1[3];
  v36 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v35);
  lazy protocol witness table accessor for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys();
  v2 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v37 = v2;
  v38 = v2;
  if (v2)
  {
    v13 = v38;
  }
  else
  {
    v44 = 0;
    v3 = KeyedDecodingContainer.decode(_:forKey:)();
    v26 = 0;
    v27 = v3;
    v28 = 0;
    v21 = v3;
    v46 = v3;
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
    v22 = &v42;
    v42 = 1;
    lazy protocol witness table accessor for type [GPKMetadata] and conformance <A> [A]();
    v4 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v24 = v4;
    v25 = v4;
    if (v4)
    {
      v12 = v25;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
      v13 = v12;
    }
    else
    {
      v17 = v43;
      v50 = 6;
      swift_bridgeObjectRetain();
      v47 = v17;
      v18 = &v39;
      v39 = 2;
      lazy protocol witness table accessor for type Data and conformance Data();
      v5 = v24;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v19 = v5;
      v20 = v5;
      if (!v5)
      {
        v15 = v40;
        v16 = v41;
        v14 = (int *)&v46;
        outlined copy of Data?(v40, v41);
        v6 = v48;
        v7 = v49;
        v48 = v15;
        v49 = v16;
        outlined consume of Data?(v6, v7);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
        swift_bridgeObjectRetain();
        outlined copy of Data?(v15, v16);
        outlined consume of Data?(v15, v16);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(v29);
        outlined destroy of MetaDataServerBlob((uint64_t)v14);
        return v21;
      }
      v11 = v20;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
      v13 = v11;
    }
  }
  v10 = v13;
  __swift_destroy_boxed_opaque_existential_1(v29);
  if ((v50 & 2) != 0)
    outlined destroy of [GPKMetadata]();
  outlined destroy of Data?((uint64_t)&v48);
  return v9[7];
}

uint64_t outlined destroy of MetaDataServerBlob(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 24) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance MetaDataServerBlob@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = MetaDataServerBlob.init(from:)(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v4;
    *(_QWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MetaDataServerBlob(uint64_t a1)
{
  uint64_t v1;

  return MetaDataServerBlob.encode(to:)(a1, *(_DWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t InitUpdateMetaDataRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t *InitUpdateMetaDataRequest.Response.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t inited;

  inited = type metadata accessor for InitUpdateMetaDataRequest.Response();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(inited + 20)), a1);
}

uint64_t type metadata accessor for InitUpdateMetaDataRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for InitUpdateMetaDataRequest.Response;
  if (!type metadata singleton initialization cache for InitUpdateMetaDataRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

BOOL static InitUpdateMetaDataRequest.Response.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t InitUpdateMetaDataRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t InitUpdateMetaDataRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t InitUpdateMetaDataRequest.Response.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t InitUpdateMetaDataRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitUpdateMetaDataRequest.Response.CodingKeys, &type metadata for InitUpdateMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitUpdateMetaDataRequest.Response.CodingKeys, &type metadata for InitUpdateMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitUpdateMetaDataRequest.Response.CodingKeys, &type metadata for InitUpdateMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitUpdateMetaDataRequest.Response.CodingKeys, &type metadata for InitUpdateMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitUpdateMetaDataRequest.Response.CodingKeys, &type metadata for InitUpdateMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t InitUpdateMetaDataRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t InitUpdateMetaDataRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InitUpdateMetaDataRequest.Response.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static InitUpdateMetaDataRequest.Response.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance InitUpdateMetaDataRequest.Response.CodingKeys()
{
  return InitUpdateMetaDataRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InitUpdateMetaDataRequest.Response.CodingKeys()
{
  return InitUpdateMetaDataRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InitUpdateMetaDataRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InitUpdateMetaDataRequest.Response.CodingKeys()
{
  _BYTE *v0;

  return InitUpdateMetaDataRequest.Response.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InitUpdateMetaDataRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitUpdateMetaDataRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InitUpdateMetaDataRequest.Response.CodingKeys()
{
  return InitUpdateMetaDataRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance InitUpdateMetaDataRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitUpdateMetaDataRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InitUpdateMetaDataRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InitUpdateMetaDataRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InitUpdateMetaDataRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD v31[2];
  char v32;
  uint64_t v33;
  _QWORD *v34;

  v15 = a1;
  v34 = 0;
  v33 = 0;
  v25 = type metadata accessor for GPKGroupID();
  v21 = *(_QWORD *)(v25 - 8);
  v14 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v7 - v14;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InitUpdateMetaDataRequest.Response.CodingKeys>);
  v16 = *(_QWORD *)(v24 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v7 - v17;
  v34 = v2;
  v33 = v1;
  v18 = v2[3];
  v19 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v18);
  lazy protocol witness table accessor for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v27, v22, v25);
  v23 = &v32;
  v32 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v28 = v3;
  v29 = v3;
  if (v3)
  {
    v7[2] = v29;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    v4 = (uint64_t *)(v22 + *(int *)(type metadata accessor for InitUpdateMetaDataRequest.Response() + 20));
    v8 = *v4;
    v9 = v4[1];
    outlined copy of Data._Representation(v8, v9);
    v11 = v31;
    v31[0] = v8;
    v31[1] = v9;
    v10 = &v30;
    v30 = 1;
    lazy protocol witness table accessor for type Nonce and conformance Nonce();
    v5 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = v5;
    v13 = v5;
    if (v5)
      v7[1] = v13;
    outlined destroy of Nonce((uint64_t)v31);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
}

uint64_t InitUpdateMetaDataRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t inited;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  char v47;

  v23 = a2;
  v32 = a1;
  v46 = 0;
  v28 = 0;
  v24 = type metadata accessor for GPKGroupID();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v12 - v26;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InitUpdateMetaDataRequest.Response.CodingKeys>);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v36 = (char *)&v12 - v31;
  inited = type metadata accessor for InitUpdateMetaDataRequest.Response();
  v34 = (*(_QWORD *)(*(_QWORD *)(inited - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v35 = (uint64_t)&v12 - v34;
  v47 = 0;
  v46 = v2;
  v38 = v2[3];
  v39 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v38);
  lazy protocol witness table accessor for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys();
  v3 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v40 = v3;
  v41 = v3;
  if (v3)
  {
    v15 = v41;
  }
  else
  {
    v20 = &v45;
    v45 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v4;
    v22 = v4;
    if (v4)
    {
      v14 = v22;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v14;
    }
    else
    {
      v16 = 1;
      v47 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v35, v27, v24);
      v17 = &v42;
      v42 = v16;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v5 = v21;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v18 = v5;
      v19 = v5;
      if (!v5)
      {
        v6 = v29;
        v7 = v36;
        v8 = v30;
        v9 = v44;
        v10 = (_QWORD *)(v35 + *(int *)(inited + 20));
        v47 = 3;
        *v10 = v43;
        v10[1] = v9;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v6);
        outlined init with copy of InitUpdateMetaDataRequest.Response(v35, v23);
        __swift_destroy_boxed_opaque_existential_1(v32);
        return outlined destroy of InitUpdateMetaDataRequest.Response(v35);
      }
      v13 = v19;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v13;
    }
  }
  v12 = v15;
  result = __swift_destroy_boxed_opaque_existential_1(v32);
  if ((v47 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v35, v24);
  return result;
}

uint64_t outlined init with copy of InitUpdateMetaDataRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(type metadata accessor for InitUpdateMetaDataRequest.Response() + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  outlined copy of Data._Representation(v7, v8);
  result = a2;
  v4 = (uint64_t *)(a2 + v6);
  *v4 = v7;
  v4[1] = v8;
  return result;
}

uint64_t outlined destroy of InitUpdateMetaDataRequest.Response(uint64_t a1)
{
  uint64_t v1;
  uint64_t inited;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  inited = type metadata accessor for InitUpdateMetaDataRequest.Response();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(inited + 20)), *(_QWORD *)(a1 + *(int *)(inited + 20) + 8));
  return a1;
}

uint64_t InitUpdateMetaDataRequest.Response.init(groupId:nonce:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  v8 = *a2;
  v9 = a2[1];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a3, a1);
  result = type metadata accessor for InitUpdateMetaDataRequest.Response();
  v5 = (_QWORD *)(a3 + *(int *)(result + 20));
  *v5 = v8;
  v5[1] = v9;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InitUpdateMetaDataRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InitUpdateMetaDataRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InitUpdateMetaDataRequest.Response(uint64_t a1)
{
  return InitUpdateMetaDataRequest.Response.encode(to:)(a1);
}

uint64_t InitUpdateMetaDataRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t variable initialization expression of InitUpdateMetaDataRequest.urlBagKey()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initUpdateMetadata.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InitUpdateMetaDataRequest.urlBagKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t InitUpdateMetaDataRequest.init(groupID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *updated;
  _QWORD *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD __b[3];

  memset(__b, 0, sizeof(__b));
  v15 = a1;
  updated = URLBagKey.initUpdateMetadata.unsafeMutableAddressor();
  outlined init with copy of String(updated, &__b[2]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  _allocateUninitializedArray<A>(_:)();
  v9 = v4;
  v5 = HTTPBodyKey.groupID.unsafeMutableAddressor();
  outlined init with copy of String(v5, v9);
  v9[2] = GPKGroupID.hexString.getter();
  v9[3] = v6;
  _finalizeUninitializedArray<A>(_:)();
  v10 = Dictionary.init(dictionaryLiteral:)();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  *(_QWORD *)&v13 = v10;
  outlined init with take of Any?(&v13, __b);
  outlined init with copy of InitUpdateMetaDataRequest((uint64_t)__b, a2);
  v7 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1);
  return outlined destroy of InitUpdateMetaDataRequest((uint64_t)__b);
}

uint64_t outlined init with copy of InitUpdateMetaDataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(a2 + 40) = v4;
  return result;
}

uint64_t outlined destroy of InitUpdateMetaDataRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance InitUpdateMetaDataRequest()
{
  return InitUpdateMetaDataRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance InitUpdateMetaDataRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance InitUpdateMetaDataRequest@<X0>(uint64_t a1@<X8>)
{
  return InitUpdateMetaDataRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance InitUpdateMetaDataRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t CompleteUpdateMetaDataRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t static CompleteUpdateMetaDataRequest.Response.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t CompleteUpdateMetaDataRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL CompleteUpdateMetaDataRequest.Response.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t CompleteUpdateMetaDataRequest.Response.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t CompleteUpdateMetaDataRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest.Response.CodingKeys, &type metadata for CompleteUpdateMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest.Response.CodingKeys, &type metadata for CompleteUpdateMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest.Response.CodingKeys, &type metadata for CompleteUpdateMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest.Response.CodingKeys, &type metadata for CompleteUpdateMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest.Response.CodingKeys, &type metadata for CompleteUpdateMetaDataRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteUpdateMetaDataRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CompleteUpdateMetaDataRequest.Response.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  return static CompleteUpdateMetaDataRequest.Response.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  return CompleteUpdateMetaDataRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  return CompleteUpdateMetaDataRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteUpdateMetaDataRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  return CompleteUpdateMetaDataRequest.Response.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance CompleteUpdateMetaDataRequest.Response.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = CompleteUpdateMetaDataRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  return CompleteUpdateMetaDataRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteUpdateMetaDataRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteUpdateMetaDataRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteUpdateMetaDataRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[2];
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = a1;
  v22 = 0;
  v21 = 0;
  v16 = type metadata accessor for GPKGroupID();
  v13 = *(_QWORD *)(v16 - 8);
  v6 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v5 - v6;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteUpdateMetaDataRequest.Response.CodingKeys>);
  v8 = *(_QWORD *)(v15 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v5 - v9;
  v22 = v2;
  v21 = v1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v14, v16);
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v19 = v3;
  v20 = v3;
  if (v3)
    v5[1] = v20;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v15);
}

uint64_t CompleteUpdateMetaDataRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v11 = a2;
  v20 = a1;
  v29 = 0;
  v16 = 0;
  v12 = type metadata accessor for GPKGroupID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v6 - v14;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteUpdateMetaDataRequest.Response.CodingKeys>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v23 = (char *)v6 - v19;
  v21 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CompleteUpdateMetaDataRequest.Response() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (uint64_t)v6 - v21;
  v29 = v2;
  v25 = v2[3];
  v26 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v25);
  lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys();
  v3 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v27 = v3;
  v28 = v3;
  if (v3)
  {
    v8 = v28;
  }
  else
  {
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v4;
    v10 = v4;
    if (!v4)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22, v15, v12);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
      outlined init with copy of CompleteUpdateMetaDataRequest.Response(v22, v11);
      __swift_destroy_boxed_opaque_existential_1(v20);
      return outlined destroy of CompleteUpdateMetaDataRequest.Response(v22);
    }
    v7 = v10;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v20);
}

uint64_t type metadata accessor for CompleteUpdateMetaDataRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteUpdateMetaDataRequest.Response;
  if (!type metadata singleton initialization cache for CompleteUpdateMetaDataRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t outlined init with copy of CompleteUpdateMetaDataRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of CompleteUpdateMetaDataRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t CompleteUpdateMetaDataRequest.Response.init(groupId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompleteUpdateMetaDataRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CompleteUpdateMetaDataRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteUpdateMetaDataRequest.Response(uint64_t a1)
{
  return CompleteUpdateMetaDataRequest.Response.encode(to:)(a1);
}

uint64_t CompleteUpdateMetaDataRequest.Body.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t *CompleteUpdateMetaDataRequest.Body.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t updated;

  updated = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(updated + 20)), a1);
}

uint64_t type metadata accessor for CompleteUpdateMetaDataRequest.Body()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteUpdateMetaDataRequest.Body;
  if (!type metadata singleton initialization cache for CompleteUpdateMetaDataRequest.Body)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t CompleteUpdateMetaDataRequest.Body.groupVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CompleteUpdateMetaDataRequest.Body() + 24));
}

uint64_t CompleteUpdateMetaDataRequest.Body.groupMetadataBlob.getter()
{
  uint64_t v0;
  int *v1;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;

  v1 = (int *)(v0 + *(int *)(type metadata accessor for CompleteUpdateMetaDataRequest.Body() + 28));
  v3 = *v1;
  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  swift_bridgeObjectRetain();
  outlined copy of Data?(v4, v5);
  return v3;
}

uint64_t CompleteUpdateMetaDataRequest.Body.groupMetadataBlob.setter(int a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;

  swift_bridgeObjectRetain();
  outlined copy of Data?(a3, a4);
  v5 = v4 + *(int *)(type metadata accessor for CompleteUpdateMetaDataRequest.Body() + 28);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  *(_DWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  *(_QWORD *)(v5 + 16) = a3;
  *(_QWORD *)(v5 + 24) = a4;
  swift_bridgeObjectRelease();
  outlined consume of Data?(v8, v9);
  swift_bridgeObjectRelease();
  return outlined consume of Data?(a3, a4);
}

uint64_t (*CompleteUpdateMetaDataRequest.Body.groupMetadataBlob.modify())()
{
  type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  return CompleteUpdateMetaDataRequest.Body.groupMetadataBlob.modify;
}

uint64_t CompleteUpdateMetaDataRequest.Body.init(groupId:nonce:groupVersion:metadataArray:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  char *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t updated;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;

  v32 = a5;
  v37 = a1;
  v26 = a2;
  v28 = a3;
  v33 = a4;
  v45 = 0;
  v44 = 0;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v40 = 0;
  v30 = 0;
  v38 = type metadata accessor for GPKGroupID();
  v36 = *(_QWORD *)(v38 - 8);
  v25 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v27 = (char *)&v24 - v25;
  updated = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v5 = MEMORY[0x24BDAC7A8](v27);
  v39 = (uint64_t)&v24 - v6;
  v45 = (char *)&v24 - v6;
  v44 = v7;
  v34 = *v26;
  v35 = v26[1];
  v42 = v34;
  v43 = v35;
  v41 = v28;
  v40 = v8;
  (*(void (**)(double))(v9 + 16))(v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v39, v27, v38);
  outlined copy of Data._Representation(v34, v35);
  v10 = v28;
  v11 = updated;
  v12 = v35;
  v13 = v39;
  v14 = (_QWORD *)(v39 + *(int *)(updated + 20));
  *v14 = v34;
  v14[1] = v12;
  *(_DWORD *)(v13 + *(int *)(v11 + 24)) = v10;
  v29 = static GPKConstant.metadataProtocolVersion.getter();
  swift_bridgeObjectRetain();
  v15 = MetaDataServerBlob.init(protobufVersion:gpkGroupMetadatas:signature:)(v29, v33, v30, 0xF000000000000000);
  v16 = v39;
  v18 = v17;
  v19 = v32;
  v20 = v39 + *(int *)(updated + 28);
  *(_DWORD *)v20 = v15;
  *(_QWORD *)(v20 + 8) = v18;
  *(_QWORD *)(v20 + 16) = v21;
  *(_QWORD *)(v20 + 24) = v22;
  outlined init with copy of CompleteUpdateMetaDataRequest.Body(v16, v19);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v34, v35);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
  return outlined destroy of CompleteUpdateMetaDataRequest.Body(v39);
}

uint64_t outlined init with copy of CompleteUpdateMetaDataRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int *updated;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  updated = (int *)type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v8 = updated[5];
  v9 = *(_QWORD *)(a1 + v8);
  v10 = *(_QWORD *)(a1 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  v3 = (uint64_t *)(a2 + v8);
  *v3 = v9;
  v3[1] = v10;
  *(_DWORD *)(a2 + updated[6]) = *(_DWORD *)(a1 + updated[6]);
  v14 = updated[7];
  *(_DWORD *)(a2 + v14) = *(_DWORD *)(a1 + v14);
  v15 = *(_QWORD *)(a1 + v14 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + v14 + 8) = v15;
  if ((*(_QWORD *)(a1 + v14 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a2 + v14 + 16) = *(_OWORD *)(a1 + v14 + 16);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + v14 + 16);
    v7 = *(_QWORD *)(a1 + v14 + 24);
    outlined copy of Data._Representation(v6, v7);
    v4 = a2 + v14;
    *(_QWORD *)(v4 + 16) = v6;
    *(_QWORD *)(v4 + 24) = v7;
  }
  return a2;
}

uint64_t outlined destroy of CompleteUpdateMetaDataRequest.Body(uint64_t a1)
{
  uint64_t v1;
  uint64_t updated;
  uint64_t v5;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  updated = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(updated + 20)), *(_QWORD *)(a1 + *(int *)(updated + 20) + 8));
  v5 = *(int *)(updated + 28);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + v5 + 24) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v5 + 16), *(_QWORD *)(a1 + v5 + 24));
  return a1;
}

uint64_t CompleteUpdateMetaDataRequest.Body.serializedRepresentationForSigning()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t updated;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;

  v52 = 0;
  v50 = 0;
  v49 = 0;
  v37 = 0;
  v38 = type metadata accessor for GPKGroupID();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v41 = (char *)v27 - v40;
  v52 = v0;
  updated = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v43 = *(_QWORD *)(v0 + *(int *)(updated + 28) + 8);
  swift_bridgeObjectRetain();
  v51[1] = v43;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v1 = lazy protocol witness table accessor for type [GPKMetadata] and conformance [A]();
  v2 = v46;
  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in CompleteUpdateMetaDataRequest.Body.serializedRepresentationForSigning(), 0, v44, MEMORY[0x24BDCDDE8], v45, v1, MEMORY[0x24BEE3F20], (uint64_t)v51);
  v47 = v2;
  v48 = v3;
  if (v2)
  {
    v27[0] = v51[0];
    outlined destroy of [GPKMetadata]();
    return v27[1];
  }
  else
  {
    v4 = v41;
    v33 = v48;
    outlined destroy of [GPKMetadata]();
    v50 = v33;
    v30 = MEMORY[0x24BDCDDE8];
    v29 = _allocateUninitializedArray<A>(_:)();
    v28 = v5;
    static GPKConstant.metadataProtocolVersion.getter();
    v6 = Data.init(bigEndianBytesOf:)();
    v7 = updated;
    v8 = v36;
    v10 = v9;
    v11 = v28;
    *v28 = v6;
    v11[1] = v10;
    outlined init with copy of Data((uint64_t *)(v8 + *(int *)(v7 + 20)), v11 + 2);
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v4, v36, v38);
    v12 = GPKGroupID.data.getter();
    v13 = v39;
    v14 = v28;
    v15 = v12;
    v16 = v41;
    v18 = v17;
    v19 = v38;
    v28[4] = v15;
    v14[5] = v18;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v19);
    v20 = Data.init(bigEndianBytesOf:)();
    v21 = v28;
    v22 = v20;
    v23 = v29;
    v28[6] = v22;
    v21[7] = v24;
    _finalizeUninitializedArray<A>(_:)();
    v32 = v23;
    v49 = v23;
    v31 = static Array.+ infix(_:_:)();
    v34 = lengthEncodedDataArray(_:)();
    v35 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v34;
  }
}

uint64_t closure #1 in CompleteUpdateMetaDataRequest.Body.serializedRepresentationForSigning()@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  result = GPKMetadata.serializedRepresentationForSigning()();
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    *a2 = result;
    a2[1] = v4;
  }
  return result;
}

void static CompleteUpdateMetaDataRequest.Body.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D392C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D392CE0
                                                                                       + *((int *)qword_23D392D48 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D392CF0()
{
  uint64_t v1;

  return v1 == 0;
}

void CompleteUpdateMetaDataRequest.Body.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D392DA8()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteUpdateMetaDataRequest.Body.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupVersion", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupMetadataBlob", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t CompleteUpdateMetaDataRequest.Body.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t CompleteUpdateMetaDataRequest.Body.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest.Body.CodingKeys, &type metadata for CompleteUpdateMetaDataRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest.Body.CodingKeys, &type metadata for CompleteUpdateMetaDataRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest.Body.CodingKeys, &type metadata for CompleteUpdateMetaDataRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest.Body.CodingKeys, &type metadata for CompleteUpdateMetaDataRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest.Body.CodingKeys, &type metadata for CompleteUpdateMetaDataRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteUpdateMetaDataRequest.Body.CodingKeys.intValue.getter()
{
  return 0;
}

void CompleteUpdateMetaDataRequest.Body.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D393208()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteUpdateMetaDataRequest.Body.CodingKeys(char *a1)
{
  char v1;

  static CompleteUpdateMetaDataRequest.Body.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteUpdateMetaDataRequest.Body.CodingKeys()
{
  return CompleteUpdateMetaDataRequest.Body.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CompleteUpdateMetaDataRequest.Body.CodingKeys(uint64_t a1)
{
  char *v1;

  CompleteUpdateMetaDataRequest.Body.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteUpdateMetaDataRequest.Body.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance CompleteUpdateMetaDataRequest.Body.CodingKeys()
{
  char *v0;

  CompleteUpdateMetaDataRequest.Body.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteUpdateMetaDataRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteUpdateMetaDataRequest.Body.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteUpdateMetaDataRequest.Body.CodingKeys()
{
  return CompleteUpdateMetaDataRequest.Body.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteUpdateMetaDataRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteUpdateMetaDataRequest.Body.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteUpdateMetaDataRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteUpdateMetaDataRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteUpdateMetaDataRequest.Body.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t updated;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  _QWORD v54[2];
  char v55;
  uint64_t v56;
  _QWORD *v57;

  v32 = a1;
  v57 = 0;
  v56 = 0;
  v42 = type metadata accessor for GPKGroupID();
  v38 = *(_QWORD *)(v42 - 8);
  v31 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v44 = (char *)v10 - v31;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteUpdateMetaDataRequest.Body.CodingKeys>);
  v33 = *(_QWORD *)(v41 - 8);
  v34 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v37 = (char *)v10 - v34;
  v57 = v2;
  v56 = v1;
  v35 = v2[3];
  v36 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v35);
  lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v44, v39, v42);
  v40 = &v55;
  v55 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v43;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v45 = v3;
  v46 = v3;
  if (v3)
  {
    v12 = v46;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v44, v42);
    result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v37, v41);
    v13 = v12;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v44, v42);
    updated = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
    v4 = (uint64_t *)(v39 + *(int *)(updated + 20));
    v25 = *v4;
    v26 = v4[1];
    outlined copy of Data._Representation(v25, v26);
    v28 = v54;
    v54[0] = v25;
    v54[1] = v26;
    v27 = &v53;
    v53 = 1;
    lazy protocol witness table accessor for type Nonce and conformance Nonce();
    v5 = v45;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v29 = v5;
    v30 = v5;
    if (v5)
    {
      v11 = v30;
      outlined destroy of Nonce((uint64_t)v54);
      result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v37, v41);
      v13 = v11;
    }
    else
    {
      outlined destroy of Nonce((uint64_t)v54);
      v6 = v29;
      v52 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v22 = v6;
      v23 = v6;
      if (v6)
      {
        v10[2] = v23;
        return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v37, v41);
      }
      else
      {
        v7 = (int *)(v39 + *(int *)(updated + 28));
        v14 = *v7;
        v15 = *((_QWORD *)v7 + 1);
        v16 = *((_QWORD *)v7 + 2);
        v17 = *((_QWORD *)v7 + 3);
        swift_bridgeObjectRetain();
        outlined copy of Data?(v16, v17);
        v19 = &v48;
        v48 = v14;
        v49 = v15;
        v50 = v16;
        v51 = v17;
        v18 = &v47;
        v47 = 3;
        lazy protocol witness table accessor for type MetaDataServerBlob and conformance MetaDataServerBlob();
        v8 = v22;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v20 = v8;
        v21 = v8;
        if (v8)
          v10[1] = v21;
        outlined destroy of MetaDataServerBlob((uint64_t)&v48);
        return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v37, v41);
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MetaDataServerBlob and conformance MetaDataServerBlob()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MetaDataServerBlob and conformance MetaDataServerBlob;
  if (!lazy protocol witness table cache variable for type MetaDataServerBlob and conformance MetaDataServerBlob)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for MetaDataServerBlob, &type metadata for MetaDataServerBlob);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MetaDataServerBlob and conformance MetaDataServerBlob);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type MetaDataServerBlob and conformance MetaDataServerBlob;
  if (!lazy protocol witness table cache variable for type MetaDataServerBlob and conformance MetaDataServerBlob)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for MetaDataServerBlob, &type metadata for MetaDataServerBlob);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type MetaDataServerBlob and conformance MetaDataServerBlob);
    return v0;
  }
  return v2;
}

void CompleteUpdateMetaDataRequest.Body.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int *updated;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  char v65;

  v35 = a2;
  v44 = a1;
  v64 = 0;
  v40 = 0;
  v36 = type metadata accessor for GPKGroupID();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)v17 - v38;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteUpdateMetaDataRequest.Body.CodingKeys>);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v48 = (char *)v17 - v43;
  updated = (int *)type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v46 = (*(_QWORD *)(*((_QWORD *)updated - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v44);
  v47 = (uint64_t)v17 - v46;
  v65 = 0;
  v64 = v2;
  v50 = v2[3];
  v51 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v50);
  lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys();
  v3 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v52 = v3;
  v53 = v3;
  if (v3)
  {
    v21 = v53;
  }
  else
  {
    v32 = &v63;
    v63 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v33 = v4;
    v34 = v4;
    if (v4)
    {
      v20 = v34;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
      v21 = v20;
    }
    else
    {
      v28 = 1;
      v65 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v47, v39, v36);
      v29 = &v60;
      v60 = v28;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v5 = v33;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v30 = v5;
      v31 = v5;
      if (v5)
      {
        v19 = v31;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
        v21 = v19;
      }
      else
      {
        v6 = v62;
        v7 = (_QWORD *)(v47 + updated[5]);
        v65 = 3;
        *v7 = v61;
        v7[1] = v6;
        v59 = 2;
        v8 = KeyedDecodingContainer.decode(_:forKey:)();
        v25 = 0;
        v26 = v8;
        v27 = 0;
        *(_DWORD *)(v47 + updated[6]) = v8;
        v22 = &v54;
        v54 = 3;
        lazy protocol witness table accessor for type MetaDataServerBlob and conformance MetaDataServerBlob();
        v9 = v25;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v23 = v9;
        v24 = v9;
        if (!v9)
        {
          v10 = v41;
          v11 = v48;
          v12 = v42;
          v13 = v56;
          v14 = v57;
          v15 = v58;
          v16 = v47 + updated[7];
          v65 = 11;
          *(_DWORD *)v16 = v55;
          *(_QWORD *)(v16 + 8) = v13;
          *(_QWORD *)(v16 + 16) = v14;
          *(_QWORD *)(v16 + 24) = v15;
          (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v10);
          outlined init with copy of CompleteUpdateMetaDataRequest.Body(v47, v35);
          __swift_destroy_boxed_opaque_existential_1(v44);
          outlined destroy of CompleteUpdateMetaDataRequest.Body(v47);
          return;
        }
        v18 = v24;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
        v21 = v18;
      }
    }
  }
  v17[1] = v21;
  __swift_destroy_boxed_opaque_existential_1(v44);
  if ((v65 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v47, v36);
  if ((v65 & 2) != 0)
    outlined destroy of Nonce(v47 + updated[5]);
}

void protocol witness for Decodable.init(from:) in conformance CompleteUpdateMetaDataRequest.Body(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CompleteUpdateMetaDataRequest.Body.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteUpdateMetaDataRequest.Body(uint64_t a1)
{
  return CompleteUpdateMetaDataRequest.Body.encode(to:)(a1);
}

uint64_t CompleteUpdateMetaDataRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t CompleteUpdateMetaDataRequest.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t updated;

  updated = type metadata accessor for CompleteUpdateMetaDataRequest();
  return outlined init with copy of CompleteUpdateMetaDataRequest.Body(v1 + *(int *)(updated + 20), a1);
}

uint64_t type metadata accessor for CompleteUpdateMetaDataRequest()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteUpdateMetaDataRequest;
  if (!type metadata singleton initialization cache for CompleteUpdateMetaDataRequest)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t CompleteUpdateMetaDataRequest.body.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t updated;
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v5[1] = 0;
  v5[0] = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CompleteUpdateMetaDataRequest.Body() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v6 = (uint64_t)v5 - v5[0];
  outlined init with copy of CompleteUpdateMetaDataRequest.Body(v2, (uint64_t)v5 - v5[0]);
  updated = type metadata accessor for CompleteUpdateMetaDataRequest();
  outlined assign with take of CompleteUpdateMetaDataRequest.Body(v6, v1 + *(int *)(updated + 20));
  return outlined destroy of CompleteUpdateMetaDataRequest.Body(v7);
}

uint64_t outlined assign with take of CompleteUpdateMetaDataRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *updated;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a2, a1);
  updated = (int *)type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v3 = (uint64_t *)(a1 + updated[5]);
  v4 = *v3;
  v5 = v3[1];
  v6 = (uint64_t *)(a2 + updated[5]);
  v7 = *v6;
  v8 = v6[1];
  *v6 = v4;
  v6[1] = v5;
  outlined consume of Data._Representation(v7, v8);
  *(_DWORD *)(a2 + updated[6]) = *(_DWORD *)(a1 + updated[6]);
  v17 = updated[7];
  v18 = a2 + v17;
  *(_DWORD *)v18 = *(_DWORD *)(a1 + v17);
  *(_QWORD *)(v18 + 8) = *(_QWORD *)(a1 + v17 + 8);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a2 + v17 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a2 + v17 + 16) = *(_OWORD *)(a1 + v17 + 16);
  }
  else if ((*(_QWORD *)(a1 + v17 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a2 + v17 + 16);
    *(_OWORD *)(a2 + v17 + 16) = *(_OWORD *)(a1 + v17 + 16);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + v17 + 24);
    v10 = a2 + v17;
    v11 = *(_QWORD *)(a2 + v17 + 16);
    v12 = *(_QWORD *)(a2 + v17 + 24);
    *(_QWORD *)(v10 + 16) = *(_QWORD *)(a1 + v17 + 16);
    *(_QWORD *)(v10 + 24) = v9;
    outlined consume of Data._Representation(v11, v12);
  }
  return a2;
}

uint64_t (*CompleteUpdateMetaDataRequest.body.modify())()
{
  type metadata accessor for CompleteUpdateMetaDataRequest();
  return CompleteUpdateMetaDataRequest.body.modify;
}

uint64_t variable initialization expression of CompleteUpdateMetaDataRequest.urlBagKey()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeUpdateMetadata.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CompleteUpdateMetaDataRequest.urlBagKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompleteUpdateMetaDataRequest() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

char *CompleteUpdateMetaDataRequest.init(groupID:nonce:groupVersion:unencryptedMetadata:encryptor:signer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *result;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(_BYTE *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t updated;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t i;
  _BYTE v114[32];
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD v121[2];
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[3];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char v138;
  char *v139;

  v76 = a7;
  v93 = a1;
  v97 = a2;
  v94 = a3;
  v106 = a4;
  v95 = a5;
  v96 = a6;
  v139 = 0;
  v137 = 0;
  v135 = 0;
  v136 = 0;
  v134 = 0;
  v133 = 0;
  v132 = 0;
  v131 = 0;
  v130 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v119 = 0;
  v120 = 0;
  v118 = 0;
  v115 = 0;
  v85 = 0;
  v77 = type metadata accessor for DictionaryEncoder.DataEncodingStrategy();
  v78 = *(_QWORD *)(v77 - 8);
  v79 = (*(_QWORD *)(v78 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v80 = (char *)v42 - v79;
  v81 = type metadata accessor for GPKGroupID();
  v82 = *(_QWORD *)(v81 - 8);
  v83 = (*(_QWORD *)(v82 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v85);
  v84 = (uint64_t)v42 - v83;
  updated = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v87 = (*(_QWORD *)(*(_QWORD *)(updated - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v85);
  v88 = (uint64_t)v42 - v87;
  v89 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v90 = (uint64_t)v42 - v89;
  v91 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v92 = (uint64_t)v42 - v91;
  v98 = type metadata accessor for CompleteUpdateMetaDataRequest();
  v99 = (*(_QWORD *)(*(_QWORD *)(v98 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v98);
  v103 = (_OWORD *)((char *)v42 - v99);
  v139 = (char *)v42 - v99;
  v138 = 0;
  v137 = v11;
  v100 = *v12;
  v101 = v12[1];
  v135 = v100;
  v136 = v101;
  v134 = v13;
  v133 = v14;
  v132 = v15;
  v131 = v16;
  v102 = *(int *)(v17 + 24);
  v18 = URLBagKey.completeUpdateMetadata.unsafeMutableAddressor();
  v104 = *(_QWORD *)v18;
  v105 = *((_QWORD *)v18 + 1);
  swift_bridgeObjectRetain();
  v19 = v105;
  v138 = 4;
  v20 = (_QWORD *)((char *)v103 + v102);
  *v20 = v104;
  v20[1] = v19;
  swift_bridgeObjectRetain();
  v130 = v106;
  v109 = v106;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v108 = v126;
  v126[0] = v109;
  v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
  lazy protocol witness table accessor for type [GPKMetadata] and conformance [A]();
  RandomAccessCollection<>.indices.getter();
  outlined destroy of [GPKMetadata]();
  v110 = v126[1];
  v111 = v126[2];
  swift_bridgeObjectRelease();
  v124 = v110;
  v125 = v111;
  v127 = specialized Collection<>.makeIterator()();
  v128 = v21;
  v129 = v22;
  for (i = v112; ; i = v67)
  {
    v74 = i;
    v122 = specialized IndexingIterator.next()();
    v123 = v23 & 1;
    v75 = v122;
    if ((v23 & 1) != 0)
      break;
    v73 = v75;
    v115 = v75;
    v25 = Array.subscript.modify();
    v26 = v74;
    v66 = (void (*)(_BYTE *, uint64_t))v25;
    GPKMetadata.encrypt(with:)(v95);
    v67 = v26;
    v68 = v26;
    if (v26)
    {
      v47 = v68;
      v66(v114, 1);
      outlined destroy of [GPKMetadata]();
      v48 = v47;
      goto LABEL_17;
    }
    v66(v114, 0);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v84, v93, v81);
  outlined copy of Data._Representation(v100, v101);
  v24 = v74;
  v69 = v121;
  v121[0] = v100;
  v121[1] = v101;
  v70 = v130;
  swift_bridgeObjectRetain();
  CompleteUpdateMetaDataRequest.Body.init(groupId:nonce:groupVersion:metadataArray:)(v84, v69, v94, v70, v92);
  v71 = v24;
  v72 = v24;
  if (v24)
  {
    v46 = v72;
    outlined destroy of [GPKMetadata]();
    v48 = v46;
  }
  else
  {
    v27 = v90;
    v28 = (char *)v103 + *(int *)(v98 + 20);
    v138 = 6;
    outlined init with take of CompleteUpdateMetaDataRequest.Body(v92, (uint64_t)v28);
    outlined init with copy of CompleteUpdateMetaDataRequest.Body((uint64_t)v103 + *(int *)(v98 + 20), v27);
    v29 = v71;
    v30 = CompleteUpdateMetaDataRequest.Body.serializedRepresentationForSigning()();
    v62 = v29;
    v63 = v30;
    v64 = v31;
    v65 = v29;
    if (v29)
    {
      v45 = v65;
      outlined destroy of CompleteUpdateMetaDataRequest.Body(v90);
      outlined destroy of [GPKMetadata]();
      v48 = v45;
    }
    else
    {
      v54 = v64;
      v57 = v63;
      outlined destroy of CompleteUpdateMetaDataRequest.Body(v90);
      v119 = v57;
      v120 = v54;
      v55 = v96[3];
      v56 = v96[4];
      __swift_project_boxed_opaque_existential_1(v96, v55);
      v32 = v62;
      v33 = GroupSigning.sign(_:)(v57, v54, v55, v56);
      v58 = v32;
      v59 = v33;
      v60 = v34;
      v61 = v32;
      if (v32)
      {
        v44 = v61;
        outlined consume of Data._Representation(v57, v54);
        outlined destroy of [GPKMetadata]();
        v48 = v44;
      }
      else
      {
        v35 = v60;
        v36 = (char *)v103 + *(int *)(v98 + 20) + *(int *)(updated + 28);
        v37 = *((_QWORD *)v36 + 2);
        v38 = *((_QWORD *)v36 + 3);
        *((_QWORD *)v36 + 2) = v59;
        *((_QWORD *)v36 + 3) = v35;
        outlined consume of Data?(v37, v38);
        type metadata accessor for DictionaryEncoder();
        v50 = DictionaryEncoder.__allocating_init()();
        v118 = v50;
        (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v80, *MEMORY[0x24BDFC528], v77);
        dispatch thunk of DictionaryEncoder.dataEncodingStrategy.setter();
        outlined init with copy of CompleteUpdateMetaDataRequest.Body((uint64_t)v103 + *(int *)(v98 + 20), v88);
        lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Body and conformance CompleteUpdateMetaDataRequest.Body();
        v39 = v58;
        v40 = dispatch thunk of DictionaryEncoder.encode<A>(_:)();
        v51 = v39;
        v52 = v40;
        v53 = v39;
        if (!v39)
        {
          v49 = v52;
          outlined destroy of CompleteUpdateMetaDataRequest.Body(v88);
          v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
          *(_QWORD *)&v116 = v49;
          v138 = 7;
          outlined init with take of Any?(&v116, v103);
          swift_release();
          outlined consume of Data._Representation(v57, v54);
          outlined destroy of [GPKMetadata]();
          outlined init with copy of CompleteUpdateMetaDataRequest((uint64_t)v103, v76);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v100, v101);
          (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v93, v81);
          return (char *)outlined destroy of CompleteUpdateMetaDataRequest((uint64_t)v103);
        }
        v43 = v53;
        outlined destroy of CompleteUpdateMetaDataRequest.Body(v88);
        swift_release();
        outlined consume of Data._Representation(v57, v54);
        outlined destroy of [GPKMetadata]();
        v48 = v43;
      }
    }
  }
LABEL_17:
  v42[1] = v48;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v100, v101);
  (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v93, v81);
  if ((v138 & 2) != 0)
    outlined destroy of CompleteUpdateMetaDataRequest.Body((uint64_t)v103 + *(int *)(v98 + 20));
  result = (char *)v103 + *(int *)(v98 + 24);
  outlined destroy of String();
  return result;
}

__n128 outlined init with take of CompleteUpdateMetaDataRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *updated;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  updated = (int *)type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  *(_OWORD *)(a2 + updated[5]) = *(_OWORD *)(a1 + updated[5]);
  *(_DWORD *)(a2 + updated[6]) = *(_DWORD *)(a1 + updated[6]);
  v4 = a1 + updated[7];
  v5 = a2 + updated[7];
  *(_OWORD *)v5 = *(_OWORD *)v4;
  result = *(__n128 *)(v4 + 16);
  *(__n128 *)(v5 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Body and conformance CompleteUpdateMetaDataRequest.Body()
{
  uint64_t updated;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body and conformance CompleteUpdateMetaDataRequest.Body;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body and conformance CompleteUpdateMetaDataRequest.Body)
  {
    updated = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest.Body, updated);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Body and conformance CompleteUpdateMetaDataRequest.Body);
    return v1;
  }
  return v3;
}

uint64_t outlined init with copy of CompleteUpdateMetaDataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t updated;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  updated = type metadata accessor for CompleteUpdateMetaDataRequest();
  v15 = a2 + *(int *)(updated + 20);
  v17 = a1 + *(int *)(updated + 20);
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v15, v17);
  v16 = (int *)type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v13 = (uint64_t *)(v15 + v16[5]);
  v4 = (uint64_t *)(v17 + v16[5]);
  v12 = *v4;
  v14 = v4[1];
  outlined copy of Data._Representation(*v4, v14);
  *v13 = v12;
  v13[1] = v14;
  *(_DWORD *)(v15 + v16[6]) = *(_DWORD *)(v17 + v16[6]);
  v18 = v15 + v16[7];
  v20 = v17 + v16[7];
  *(_DWORD *)v18 = *(_DWORD *)v20;
  v19 = *(_QWORD *)(v20 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v18 + 8) = v19;
  if ((*(_QWORD *)(v20 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(v18 + 16) = *(_OWORD *)(v20 + 16);
  }
  else
  {
    v9 = *(_QWORD *)(v20 + 16);
    v10 = *(_QWORD *)(v20 + 24);
    outlined copy of Data._Representation(v9, v10);
    *(_QWORD *)(v18 + 16) = v9;
    *(_QWORD *)(v18 + 24) = v10;
  }
  v7 = (_QWORD *)(a2 + *(int *)(updated + 24));
  v5 = (_QWORD *)(a1 + *(int *)(updated + 24));
  *v7 = *v5;
  v8 = v5[1];
  swift_bridgeObjectRetain();
  result = a2;
  v7[1] = v8;
  return result;
}

uint64_t outlined destroy of CompleteUpdateMetaDataRequest(uint64_t a1)
{
  uint64_t v1;
  uint64_t updated;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = a1 + *(int *)(type metadata accessor for CompleteUpdateMetaDataRequest() + 20);
  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4);
  updated = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  outlined consume of Data._Representation(*(_QWORD *)(v4 + *(int *)(updated + 20)), *(_QWORD *)(v4 + *(int *)(updated + 20) + 8));
  v5 = v4 + *(int *)(updated + 28);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(v5 + 24) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in InitUpdateMetaDataRequest()
{
  return lazy protocol witness table accessor for type InitUpdateMetaDataRequest.Response and conformance InitUpdateMetaDataRequest.Response();
}

unint64_t lazy protocol witness table accessor for type InitUpdateMetaDataRequest.Response and conformance InitUpdateMetaDataRequest.Response()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response and conformance InitUpdateMetaDataRequest.Response;
  if (!lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response and conformance InitUpdateMetaDataRequest.Response)
  {
    inited = type metadata accessor for InitUpdateMetaDataRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for InitUpdateMetaDataRequest.Response, inited);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InitUpdateMetaDataRequest.Response and conformance InitUpdateMetaDataRequest.Response);
    return v1;
  }
  return v3;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in CompleteUpdateMetaDataRequest()
{
  return lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Response and conformance CompleteUpdateMetaDataRequest.Response();
}

unint64_t lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Response and conformance CompleteUpdateMetaDataRequest.Response()
{
  uint64_t updated;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response and conformance CompleteUpdateMetaDataRequest.Response;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response and conformance CompleteUpdateMetaDataRequest.Response)
  {
    updated = type metadata accessor for CompleteUpdateMetaDataRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest.Response, updated);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest.Response and conformance CompleteUpdateMetaDataRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance CompleteUpdateMetaDataRequest()
{
  return CompleteUpdateMetaDataRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance CompleteUpdateMetaDataRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance CompleteUpdateMetaDataRequest@<X0>(uint64_t a1@<X8>)
{
  return CompleteUpdateMetaDataRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance CompleteUpdateMetaDataRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for MetaDataServerBlob(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for MetaDataServerBlob(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  result = a1;
  if ((*(_QWORD *)(a1 + 24) & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return result;
}

uint64_t initializeWithCopy for MetaDataServerBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v6;
  if ((*(_QWORD *)(a2 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    v4 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v3, v4);
    *(_QWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 24) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for MetaDataServerBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v10 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v10;
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(a2 + 24) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
    else
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = *(_QWORD *)(a2 + 24);
      outlined copy of Data._Representation(v5, v6);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v6;
    }
  }
  else if ((*(_QWORD *)(a2 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + 16);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v7, v8);
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    outlined consume of Data._Representation(v2, v3);
  }
  return a1;
}

uint64_t assignWithTake for MetaDataServerBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else if ((*(_QWORD *)(a2 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + 16);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 24);
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v2;
    outlined consume of Data._Representation(v3, v4);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MetaDataServerBlob(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    {
      v4 = *(_QWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (*(_QWORD *)(a1 + 8) < 0x100000000uLL)
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetaDataServerBlob(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 8) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetaDataServerBlob()
{
  return &type metadata for MetaDataServerBlob;
}

uint64_t getEnumTagSinglePayload for MetaDataServerBlob.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for MetaDataServerBlob.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for MetaDataServerBlob.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for MetaDataServerBlob.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MetaDataServerBlob.CodingKeys()
{
  return &type metadata for MetaDataServerBlob.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for InitUpdateMetaDataRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for InitUpdateMetaDataRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for InitUpdateMetaDataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 40) = v4;
  return result;
}

uint64_t assignWithCopy for InitUpdateMetaDataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for InitUpdateMetaDataRequest(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InitUpdateMetaDataRequest(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 40)))
        v3 = *(_QWORD *)(a1 + 40);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InitUpdateMetaDataRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 40) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitUpdateMetaDataRequest()
{
  return &type metadata for InitUpdateMetaDataRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for InitUpdateMetaDataRequest.Response(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v14;

  v14 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v14 & 0x20000) != 0)
  {
    v9 = *a2;
    swift_retain();
    *a1 = v9;
    return *a1 + ((v14 + 16) & ~(unint64_t)v14);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v7 = (_QWORD *)((char *)a1 + *(int *)(a3 + 20));
    v4 = (uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v6 = *v4;
    v8 = v4[1];
    outlined copy of Data._Representation(*v4, v8);
    *v7 = v6;
    v7[1] = v8;
    return (unint64_t)a1;
  }
}

uint64_t destroy for InitUpdateMetaDataRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for InitUpdateMetaDataRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a2 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  result = a1;
  v5 = (uint64_t *)(a1 + v8);
  *v5 = v9;
  v5[1] = v10;
  return result;
}

uint64_t assignWithCopy for InitUpdateMetaDataRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v10 = *(int *)(a3 + 20);
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a2 + v10 + 8);
  outlined copy of Data._Representation(v11, v12);
  v4 = (uint64_t *)(a1 + v10);
  v5 = *(_QWORD *)(a1 + v10);
  v6 = *(_QWORD *)(a1 + v10 + 8);
  *v4 = v11;
  v4[1] = v12;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

__n128 initializeWithTake for InitUpdateMetaDataRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = *(__n128 *)(a2 + *(int *)(a3 + 20));
  *(__n128 *)(a1 + *(int *)(a3 + 20)) = result;
  return result;
}

uint64_t assignWithTake for InitUpdateMetaDataRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + *(int *)(a3 + 20));
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitUpdateMetaDataRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D396744(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for InitUpdateMetaDataRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D396840(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 12)
  {
    v5 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v5 = 0;
    v5[1] = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for InitUpdateMetaDataRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for InitUpdateMetaDataRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for InitUpdateMetaDataRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for InitUpdateMetaDataRequest.Response.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for InitUpdateMetaDataRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InitUpdateMetaDataRequest.Response.CodingKeys()
{
  return &type metadata for InitUpdateMetaDataRequest.Response.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteUpdateMetaDataRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int *updated;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v26;

  v26 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v26 & 0x20000) != 0)
  {
    v21 = *a2;
    swift_retain();
    *(_QWORD *)a1 = v21;
    return *(_QWORD *)a1 + ((v26 + 16) & ~(unint64_t)v26);
  }
  else
  {
    if (a2[3])
    {
      v3 = a2[3];
      *(_QWORD *)(a1 + 24) = v3;
      (**(void (***)(void))(v3 - 8))();
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    }
    v15 = a1 + *(int *)(a3 + 20);
    v17 = (uint64_t)a2 + *(int *)(a3 + 20);
    v4 = type metadata accessor for GPKGroupID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v15, v17);
    updated = (int *)type metadata accessor for CompleteUpdateMetaDataRequest.Body();
    v13 = (uint64_t *)(v15 + updated[5]);
    v5 = updated[5];
    v12 = *(_QWORD *)(v17 + v5);
    v14 = *(_QWORD *)(v17 + v5 + 8);
    outlined copy of Data._Representation(v12, v14);
    *v13 = v12;
    v13[1] = v14;
    *(_DWORD *)(v15 + updated[6]) = *(_DWORD *)(v17 + updated[6]);
    v18 = v15 + updated[7];
    v20 = v17 + updated[7];
    *(_DWORD *)v18 = *(_DWORD *)v20;
    v19 = *(_QWORD *)(v20 + 8);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v18 + 8) = v19;
    if ((*(_QWORD *)(v20 + 24) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(v18 + 16) = *(_OWORD *)(v20 + 16);
    }
    else
    {
      v10 = *(_QWORD *)(v20 + 16);
      v11 = *(_QWORD *)(v20 + 24);
      outlined copy of Data._Representation(v10, v11);
      *(_QWORD *)(v18 + 16) = v10;
      *(_QWORD *)(v18 + 24) = v11;
    }
    v6 = *(int *)(a3 + 24);
    v8 = a1 + v6;
    *(_QWORD *)(a1 + v6) = *(uint64_t *)((char *)a2 + v6);
    v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v8 + 8) = v9;
    return a1;
  }
}

uint64_t destroy for CompleteUpdateMetaDataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t updated;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  v5 = a1 + *(int *)(a2 + 20);
  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v5);
  updated = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  outlined consume of Data._Representation(*(_QWORD *)(v5 + *(int *)(updated + 20)), *(_QWORD *)(v5 + *(int *)(updated + 20) + 8));
  v6 = v5 + *(int *)(updated + 28);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(v6 + 24) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CompleteUpdateMetaDataRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int *updated;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_QWORD *)(a2 + 24))
  {
    v3 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    (**(void (***)(void))(v3 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v15 = a1 + *(int *)(a3 + 20);
  v17 = a2 + *(int *)(a3 + 20);
  v4 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v15, v17);
  updated = (int *)type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v13 = (uint64_t *)(v15 + updated[5]);
  v5 = (uint64_t *)(v17 + updated[5]);
  v12 = *v5;
  v14 = v5[1];
  outlined copy of Data._Representation(*v5, v14);
  *v13 = v12;
  v13[1] = v14;
  *(_DWORD *)(v15 + updated[6]) = *(_DWORD *)(v17 + updated[6]);
  v18 = v15 + updated[7];
  v20 = v17 + updated[7];
  *(_DWORD *)v18 = *(_DWORD *)v20;
  v19 = *(_QWORD *)(v20 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v18 + 8) = v19;
  if ((*(_QWORD *)(v20 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(v18 + 16) = *(_OWORD *)(v20 + 16);
  }
  else
  {
    v10 = *(_QWORD *)(v20 + 16);
    v11 = *(_QWORD *)(v20 + 24);
    outlined copy of Data._Representation(v10, v11);
    *(_QWORD *)(v18 + 16) = v10;
    *(_QWORD *)(v18 + 24) = v11;
  }
  v6 = *(int *)(a3 + 24);
  v8 = a1 + v6;
  *(_QWORD *)(a1 + v6) = *(_QWORD *)(a2 + v6);
  v9 = *(_QWORD *)(a2 + v6 + 8);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(v8 + 8) = v9;
  return result;
}

uint64_t assignWithCopy for CompleteUpdateMetaDataRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int *updated;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v3 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    (**(void (***)(void))(v3 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v21 = a1 + *(int *)(a3 + 20);
  v23 = a2 + *(int *)(a3 + 20);
  v4 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v21, v23);
  updated = (int *)type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v19 = (uint64_t *)(v21 + updated[5]);
  v5 = (uint64_t *)(v23 + updated[5]);
  v18 = *v5;
  v20 = v5[1];
  outlined copy of Data._Representation(*v5, v20);
  v6 = *v19;
  v7 = v19[1];
  *v19 = v18;
  v19[1] = v20;
  outlined consume of Data._Representation(v6, v7);
  *(_DWORD *)(v21 + updated[6]) = *(_DWORD *)(v23 + updated[6]);
  v26 = v21 + updated[7];
  v24 = v23 + updated[7];
  *(_DWORD *)v26 = *(_DWORD *)v24;
  v25 = *(_QWORD *)(v24 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v26 + 8) = v25;
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(v26 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(v24 + 24) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(v26 + 16) = *(_OWORD *)(v24 + 16);
    }
    else
    {
      v14 = *(_QWORD *)(v24 + 16);
      v15 = *(_QWORD *)(v24 + 24);
      outlined copy of Data._Representation(v14, v15);
      *(_QWORD *)(v26 + 16) = v14;
      *(_QWORD *)(v26 + 24) = v15;
    }
  }
  else if ((*(_QWORD *)(v24 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(v26 + 16);
    *(_OWORD *)(v26 + 16) = *(_OWORD *)(v24 + 16);
  }
  else
  {
    v16 = *(_QWORD *)(v24 + 16);
    v17 = *(_QWORD *)(v24 + 24);
    outlined copy of Data._Representation(v16, v17);
    v8 = *(_QWORD *)(v26 + 16);
    v9 = *(_QWORD *)(v26 + 24);
    *(_QWORD *)(v26 + 16) = v16;
    *(_QWORD *)(v26 + 24) = v17;
    outlined consume of Data._Representation(v8, v9);
  }
  v10 = *(int *)(a3 + 24);
  v12 = a1 + v10;
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  v13 = *(_QWORD *)(a2 + v10 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v12 + 8) = v13;
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for CompleteUpdateMetaDataRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int *updated;
  char *v5;
  char *v6;
  __n128 result;
  char *v8;
  char *v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v8 = (char *)a1 + *(int *)(a3 + 20);
  v9 = (char *)a2 + *(int *)(a3 + 20);
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(v8, v9);
  updated = (int *)type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  *(_OWORD *)&v8[updated[5]] = *(_OWORD *)&v9[updated[5]];
  *(_DWORD *)&v8[updated[6]] = *(_DWORD *)&v9[updated[6]];
  v5 = &v8[updated[7]];
  v6 = &v9[updated[7]];
  *(_OWORD *)v5 = *(_OWORD *)v6;
  *((_OWORD *)v5 + 1) = *((_OWORD *)v6 + 1);
  result = *(__n128 *)((char *)a2 + *(int *)(a3 + 24));
  *(__n128 *)((char *)a1 + *(int *)(a3 + 24)) = result;
  return result;
}

uint64_t assignWithTake for CompleteUpdateMetaDataRequest(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  int *updated;
  char *v18;
  char *v19;
  uint64_t v20;

  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  v16 = a1 + *(int *)(a3 + 20);
  v18 = (char *)a2 + *(int *)(a3 + 20);
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)(v3 - 8) + 40))(v16, v18);
  updated = (int *)type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v4 = (uint64_t *)(v16 + updated[5]);
  v5 = (uint64_t *)&v18[updated[5]];
  v6 = *v5;
  v7 = v5[1];
  v8 = *v4;
  v9 = v4[1];
  *v4 = v6;
  v4[1] = v7;
  outlined consume of Data._Representation(v8, v9);
  *(_DWORD *)(v16 + updated[6]) = *(_DWORD *)&v18[updated[6]];
  v20 = v16 + updated[7];
  v19 = &v18[updated[7]];
  *(_DWORD *)v20 = *(_DWORD *)v19;
  *(_QWORD *)(v20 + 8) = *((_QWORD *)v19 + 1);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(v20 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(v20 + 16) = *((_OWORD *)v19 + 1);
  }
  else if ((*((_QWORD *)v19 + 3) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(v20 + 16);
    *(_OWORD *)(v20 + 16) = *((_OWORD *)v19 + 1);
  }
  else
  {
    v10 = *((_QWORD *)v19 + 3);
    v11 = *(_QWORD *)(v20 + 16);
    v12 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 16) = *((_QWORD *)v19 + 2);
    *(_QWORD *)(v20 + 24) = v10;
    outlined consume of Data._Representation(v11, v12);
  }
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)(a1 + v13);
  *v14 = *(_QWORD *)((char *)a2 + v13);
  v14[1] = *(_QWORD *)((char *)a2 + v13 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteUpdateMetaDataRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D397AA4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t updated;
  uint64_t v10;

  updated = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v10 = *(_QWORD *)(updated - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1 + *(int *)(a3 + 20), a2, updated);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for CompleteUpdateMetaDataRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D397BAC(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for CompleteUpdateMetaDataRequest()
{
  unint64_t v0;
  uint64_t updated;

  updated = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return updated;
}

uint64_t initializeBufferWithCopyOfBuffer for CompleteUpdateMetaDataRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (**(uint64_t (***)(uint64_t, uint64_t))(v2 - 8))(a1, a2);
}

uint64_t destroy for CompleteUpdateMetaDataRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

uint64_t initializeWithCopy for CompleteUpdateMetaDataRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  return a1;
}

uint64_t assignWithCopy for CompleteUpdateMetaDataRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  return a1;
}

uint64_t initializeWithTake for CompleteUpdateMetaDataRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  return a1;
}

uint64_t assignWithTake for CompleteUpdateMetaDataRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteUpdateMetaDataRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D397ED4(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for CompleteUpdateMetaDataRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D397F30(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for CompleteUpdateMetaDataRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for CompleteUpdateMetaDataRequest.Response.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteUpdateMetaDataRequest.Response.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  return &type metadata for CompleteUpdateMetaDataRequest.Response.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteUpdateMetaDataRequest.Body(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v20;

  v20 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v20 & 0x20000) != 0)
  {
    v15 = *a2;
    swift_retain();
    *a1 = v15;
    return *a1 + ((v20 + 16) & ~(unint64_t)v20);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v10 = (_QWORD *)((char *)a1 + a3[5]);
    v4 = (uint64_t *)((char *)a2 + a3[5]);
    v9 = *v4;
    v11 = v4[1];
    outlined copy of Data._Representation(*v4, v11);
    *v10 = v9;
    v10[1] = v11;
    *(_DWORD *)((char *)a1 + a3[6]) = *(_DWORD *)((char *)a2 + a3[6]);
    v5 = a3[7];
    v12 = (char *)a1 + v5;
    v14 = (char *)a2 + v5;
    *(_DWORD *)((char *)a1 + v5) = *(_DWORD *)((char *)a2 + v5);
    v13 = *(uint64_t *)((char *)a2 + v5 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v12 + 1) = v13;
    if ((*((_QWORD *)v14 + 3) & 0xF000000000000000) == 0xF000000000000000)
    {
      *((_OWORD *)v12 + 1) = *((_OWORD *)v14 + 1);
    }
    else
    {
      v7 = *((_QWORD *)v14 + 2);
      v8 = *((_QWORD *)v14 + 3);
      outlined copy of Data._Representation(v7, v8);
      *((_QWORD *)v12 + 2) = v7;
      *((_QWORD *)v12 + 3) = v8;
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for CompleteUpdateMetaDataRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  v6 = *(int *)(a2 + 28);
  result = swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + v6 + 24) & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + v6 + 16), *(_QWORD *)(a1 + v6 + 24));
  return result;
}

uint64_t initializeWithCopy for CompleteUpdateMetaDataRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v9 = a3[5];
  v10 = *(_QWORD *)(a2 + v9);
  v11 = *(_QWORD *)(a2 + v9 + 8);
  outlined copy of Data._Representation(v10, v11);
  v4 = (uint64_t *)(a1 + v9);
  *v4 = v10;
  v4[1] = v11;
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v15 = a3[7];
  *(_DWORD *)(a1 + v15) = *(_DWORD *)(a2 + v15);
  v16 = *(_QWORD *)(a2 + v15 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v15 + 8) = v16;
  if ((*(_QWORD *)(a2 + v15 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v15 + 16) = *(_OWORD *)(a2 + v15 + 16);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + v15 + 16);
    v8 = *(_QWORD *)(a2 + v15 + 24);
    outlined copy of Data._Representation(v7, v8);
    v5 = a1 + v15;
    *(_QWORD *)(v5 + 16) = v7;
    *(_QWORD *)(v5 + 24) = v8;
  }
  return a1;
}

uint64_t assignWithCopy for CompleteUpdateMetaDataRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v22;
  uint64_t v23;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v16 = a3[5];
  v17 = *(_QWORD *)(a2 + v16);
  v18 = *(_QWORD *)(a2 + v16 + 8);
  outlined copy of Data._Representation(v17, v18);
  v4 = (uint64_t *)(a1 + v16);
  v5 = *(_QWORD *)(a1 + v16);
  v6 = *(_QWORD *)(a1 + v16 + 8);
  *v4 = v17;
  v4[1] = v18;
  outlined consume of Data._Representation(v5, v6);
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v22 = a3[7];
  *(_DWORD *)(a1 + v22) = *(_DWORD *)(a2 + v22);
  v23 = *(_QWORD *)(a2 + v22 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v22 + 8) = v23;
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + v22 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(a2 + v22 + 24) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + v22 + 16) = *(_OWORD *)(a2 + v22 + 16);
    }
    else
    {
      v12 = *(_QWORD *)(a2 + v22 + 16);
      v13 = *(_QWORD *)(a2 + v22 + 24);
      outlined copy of Data._Representation(v12, v13);
      v10 = a1 + v22;
      *(_QWORD *)(v10 + 16) = v12;
      *(_QWORD *)(v10 + 24) = v13;
    }
  }
  else if ((*(_QWORD *)(a2 + v22 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + v22 + 16);
    *(_OWORD *)(a1 + v22 + 16) = *(_OWORD *)(a2 + v22 + 16);
  }
  else
  {
    v14 = *(_QWORD *)(a2 + v22 + 16);
    v15 = *(_QWORD *)(a2 + v22 + 24);
    outlined copy of Data._Representation(v14, v15);
    v7 = a1 + v22;
    v8 = *(_QWORD *)(a1 + v22 + 16);
    v9 = *(_QWORD *)(a1 + v22 + 24);
    *(_QWORD *)(v7 + 16) = v14;
    *(_QWORD *)(v7 + 24) = v15;
    outlined consume of Data._Representation(v8, v9);
  }
  return a1;
}

__n128 initializeWithTake for CompleteUpdateMetaDataRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v4 = a3[7];
  v5 = a1 + v4;
  *(_OWORD *)v5 = *(_OWORD *)(a2 + v4);
  result = *(__n128 *)(a2 + v4 + 16);
  *(__n128 *)(v5 + 16) = result;
  return result;
}

uint64_t assignWithTake for CompleteUpdateMetaDataRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v18;
  uint64_t v19;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + a3[5]);
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + a3[5]);
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v18 = a3[7];
  v19 = a1 + v18;
  *(_DWORD *)v19 = *(_DWORD *)(a2 + v18);
  *(_QWORD *)(v19 + 8) = *(_QWORD *)(a2 + v18 + 8);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + v18 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v18 + 16) = *(_OWORD *)(a2 + v18 + 16);
  }
  else if ((*(_QWORD *)(a2 + v18 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + v18 + 16);
    *(_OWORD *)(a1 + v18 + 16) = *(_OWORD *)(a2 + v18 + 16);
  }
  else
  {
    v10 = *(_QWORD *)(a2 + v18 + 24);
    v11 = a1 + v18;
    v12 = *(_QWORD *)(a1 + v18 + 16);
    v13 = *(_QWORD *)(a1 + v18 + 24);
    *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + v18 + 16);
    *(_QWORD *)(v11 + 24) = v10;
    outlined consume of Data._Representation(v12, v13);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteUpdateMetaDataRequest.Body()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D398CAC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 28) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for CompleteUpdateMetaDataRequest.Body()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D398DA8(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for CompleteUpdateMetaDataRequest.Body()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for CompleteUpdateMetaDataRequest.Body.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteUpdateMetaDataRequest.Body.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for CompleteUpdateMetaDataRequest.Body.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteUpdateMetaDataRequest.Body.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteUpdateMetaDataRequest.Body.CodingKeys()
{
  return &type metadata for CompleteUpdateMetaDataRequest.Body.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteUpdateMetaDataRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteUpdateMetaDataRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteUpdateMetaDataRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Body.CodingKeys and conformance CompleteUpdateMetaDataRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteUpdateMetaDataRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest.Response.CodingKeys and conformance CompleteUpdateMetaDataRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in InitUpdateMetaDataRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in InitUpdateMetaDataRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in InitUpdateMetaDataRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitUpdateMetaDataRequest.Response.CodingKeys and conformance InitUpdateMetaDataRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in MetaDataServerBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in MetaDataServerBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys();
}

unint64_t base witness table accessor for Equatable in MetaDataServerBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type MetaDataServerBlob.CodingKeys and conformance MetaDataServerBlob.CodingKeys();
}

uint64_t AcceptRSVPResponse.rsvpResponseVersion.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t AcceptRSVPResponse.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(int *)(type metadata accessor for AcceptRSVPResponse() + 20);
  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v1 + v4);
}

uint64_t type metadata accessor for AcceptRSVPResponse()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for AcceptRSVPResponse;
  if (!type metadata singleton initialization cache for AcceptRSVPResponse)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t AcceptRSVPResponse.randomizedVerificationKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for AcceptRSVPResponse() + 24);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t AcceptRSVPResponse.ciphertextOfKeyShare.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for AcceptRSVPResponse() + 28);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

void static AcceptRSVPResponse.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D399ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D399B28
                                                                                       + *((int *)qword_23D399B90 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D399B38()
{
  uint64_t v1;

  return v1 == 0;
}

void AcceptRSVPResponse.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D399BF0()
{
  return Hasher.combine<A>(_:)();
}

uint64_t AcceptRSVPResponse.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpResponseVersion", 0x13uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("randomizedVerificationKey", 0x19uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ciphertextOfKeyShare", 0x14uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t AcceptRSVPResponse.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t AcceptRSVPResponse.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for AcceptRSVPResponse.CodingKeys, &type metadata for AcceptRSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for AcceptRSVPResponse.CodingKeys, &type metadata for AcceptRSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for AcceptRSVPResponse.CodingKeys, &type metadata for AcceptRSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for AcceptRSVPResponse.CodingKeys, &type metadata for AcceptRSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for AcceptRSVPResponse.CodingKeys, &type metadata for AcceptRSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t AcceptRSVPResponse.CodingKeys.intValue.getter()
{
  return 0;
}

void AcceptRSVPResponse.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D39A050()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpResponseVersion", 0x13uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AcceptRSVPResponse.CodingKeys(char *a1)
{
  char v1;

  static AcceptRSVPResponse.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AcceptRSVPResponse.CodingKeys()
{
  return AcceptRSVPResponse.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance AcceptRSVPResponse.CodingKeys(uint64_t a1)
{
  char *v1;

  AcceptRSVPResponse.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AcceptRSVPResponse.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance AcceptRSVPResponse.CodingKeys()
{
  char *v0;

  AcceptRSVPResponse.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AcceptRSVPResponse.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AcceptRSVPResponse.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance AcceptRSVPResponse.CodingKeys()
{
  return AcceptRSVPResponse.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance AcceptRSVPResponse.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = AcceptRSVPResponse.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AcceptRSVPResponse.CodingKeys()
{
  lazy protocol witness table accessor for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AcceptRSVPResponse.CodingKeys()
{
  lazy protocol witness table accessor for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t AcceptRSVPResponse.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD v46[2];
  char v47;
  _QWORD v48[2];
  _BYTE v49[2];
  uint64_t v50;
  _QWORD *v51;

  v34 = a1;
  v51 = 0;
  v50 = 0;
  v30 = type metadata accessor for GPKGroupID();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)v11 - v32;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AcceptRSVPResponse.CodingKeys>);
  v35 = *(_QWORD *)(v41 - 8);
  v36 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v39 = (char *)v11 - v36;
  v51 = v2;
  v50 = v1;
  v37 = v2[3];
  v38 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v37);
  lazy protocol witness table accessor for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v3 = v42;
  v49[1] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v43 = v3;
  v44 = v3;
  if (v3)
  {
    v13 = v44;
    result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v39, v41);
    v14 = v13;
  }
  else
  {
    v26 = (int *)type metadata accessor for AcceptRSVPResponse();
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v33, v40 + v26[5], v30);
    v27 = v49;
    v49[0] = 1;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v43;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v28 = v4;
    v29 = v4;
    if (v4)
    {
      v12 = v29;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
      result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v39, v41);
      v14 = v12;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
      v5 = (uint64_t *)(v40 + v26[6]);
      v19 = *v5;
      v20 = v5[1];
      outlined copy of Data._Representation(v19, v20);
      v22 = v48;
      v48[0] = v19;
      v48[1] = v20;
      v21 = &v47;
      v47 = 2;
      v6 = lazy protocol witness table accessor for type Data and conformance Data();
      v7 = v28;
      v23 = v6;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v24 = v7;
      v25 = v7;
      if (v7)
      {
        v11[1] = v25;
        outlined destroy of Data((uint64_t)v48);
        return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v39, v41);
      }
      else
      {
        outlined destroy of Data((uint64_t)v48);
        v8 = (uint64_t *)(v40 + v26[7]);
        v15 = *v8;
        v16 = v8[1];
        outlined copy of Data._Representation(v15, v16);
        v9 = v24;
        v46[0] = v15;
        v46[1] = v16;
        v45 = 3;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v17 = v9;
        v18 = v9;
        if (v9)
          v11[0] = v18;
        outlined destroy of Data((uint64_t)v46);
        return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v39, v41);
      }
    }
  }
  return result;
}

void AcceptRSVPResponse.init(from:)(uint64_t a1@<X0>, char *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[2];
  _QWORD *v59;
  char v60;

  v33 = a2;
  v42 = a1;
  v59 = 0;
  v38 = 0;
  v34 = type metadata accessor for GPKGroupID();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)v16 - v36;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AcceptRSVPResponse.CodingKeys>);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v38);
  v46 = (char *)v16 - v41;
  v43 = (int *)type metadata accessor for AcceptRSVPResponse();
  v44 = (*(_QWORD *)(*((_QWORD *)v43 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v45 = (char *)v16 - v44;
  v60 = 0;
  v59 = v2;
  v48 = v2[3];
  v49 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v48);
  lazy protocol witness table accessor for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys();
  v3 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v50 = v3;
  v51 = v3;
  if (v3)
  {
    v19 = v51;
  }
  else
  {
    v58[1] = 0;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v30 = 0;
    v31 = v4;
    v32 = 0;
    *(_DWORD *)v45 = v4;
    v27 = v58;
    v58[0] = 1;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v5 = v30;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v28 = v5;
    v29 = v5;
    if (v5)
    {
      v18 = v29;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v46, v39);
      v19 = v18;
    }
    else
    {
      v6 = &v45[v43[5]];
      v22 = 2;
      v60 = 2;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v6, v37, v34);
      v23 = &v55;
      v55 = v22;
      v7 = lazy protocol witness table accessor for type Data and conformance Data();
      v8 = v28;
      v24 = v7;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v25 = v8;
      v26 = v8;
      if (!v8)
      {
        v9 = v57;
        v10 = &v45[v43[6]];
        v60 = 6;
        *(_QWORD *)v10 = v56;
        *((_QWORD *)v10 + 1) = v9;
        v52 = 3;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v20 = 0;
        v21 = 0;
        v11 = v39;
        v12 = v46;
        v13 = v40;
        v14 = v54;
        v15 = &v45[v43[7]];
        v60 = 14;
        *(_QWORD *)v15 = v53;
        *((_QWORD *)v15 + 1) = v14;
        (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v11);
        outlined init with copy of AcceptRSVPResponse(v45, v33);
        __swift_destroy_boxed_opaque_existential_1(v42);
        outlined destroy of AcceptRSVPResponse((uint64_t)v45);
        return;
      }
      v17 = v26;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v46, v39);
      v19 = v17;
    }
  }
  v16[1] = v19;
  __swift_destroy_boxed_opaque_existential_1(v42);
  if ((v60 & 2) != 0)
    (*(void (**)(char *, uint64_t))(v35 + 8))(&v45[v43[5]], v34);
  if ((v60 & 4) != 0)
    outlined destroy of Data((uint64_t)&v45[v43[6]]);
}

char *outlined init with copy of AcceptRSVPResponse(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t *v3;
  char *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v10 = (int *)type metadata accessor for AcceptRSVPResponse();
  v6 = v10[5];
  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(&a2[v6], &a1[v6]);
  v7 = v10[6];
  v8 = *(_QWORD *)&a1[v7];
  v9 = *(_QWORD *)&a1[v7 + 8];
  outlined copy of Data._Representation(v8, v9);
  v3 = (uint64_t *)&a2[v7];
  *v3 = v8;
  v3[1] = v9;
  v12 = v10[7];
  v13 = *(_QWORD *)&a1[v12];
  v14 = *(_QWORD *)&a1[v12 + 8];
  outlined copy of Data._Representation(v13, v14);
  result = a2;
  v5 = (uint64_t *)&a2[v12];
  *v5 = v13;
  v5[1] = v14;
  return result;
}

uint64_t outlined destroy of AcceptRSVPResponse(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int *v4;

  v4 = (int *)type metadata accessor for AcceptRSVPResponse();
  v3 = v4[5];
  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v4[6]), *(_QWORD *)(a1 + v4[6] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v4[7]), *(_QWORD *)(a1 + v4[7] + 8));
  return a1;
}

int *AcceptRSVPResponse.init(rsvpResponseVersion:groupId:randomizedVerificationKey:ciphertextOfKeyShare:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  uint64_t v7;
  int *result;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v18;

  *(_DWORD *)a7 = a1;
  v18 = (int *)type metadata accessor for AcceptRSVPResponse();
  v11 = v18[5];
  v7 = type metadata accessor for GPKGroupID();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(&a7[v11], a2);
  result = v18;
  v9 = &a7[v18[6]];
  *(_QWORD *)v9 = a3;
  *((_QWORD *)v9 + 1) = a4;
  v10 = &a7[v18[7]];
  *(_QWORD *)v10 = a5;
  *((_QWORD *)v10 + 1) = a6;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance AcceptRSVPResponse(uint64_t a1@<X0>, char *a2@<X8>)
{
  AcceptRSVPResponse.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AcceptRSVPResponse(uint64_t a1)
{
  return AcceptRSVPResponse.encode(to:)(a1);
}

void *RSVPResponse.groupId.getter@<X0>(void *a1@<X8>)
{
  const void *v1;

  return outlined init with copy of GPKGroupID?(v1, a1);
}

void *outlined init with copy of GPKGroupID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for GPKGroupID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t static RSVPResponse.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t RSVPResponse.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL RSVPResponse.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t RSVPResponse.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t RSVPResponse.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponse.CodingKeys, &type metadata for RSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponse.CodingKeys, &type metadata for RSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponse.CodingKeys, &type metadata for RSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponse.CodingKeys, &type metadata for RSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponse.CodingKeys, &type metadata for RSVPResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t RSVPResponse.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t RSVPResponse.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RSVPResponse.CodingKeys()
{
  return static RSVPResponse.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RSVPResponse.CodingKeys()
{
  return RSVPResponse.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RSVPResponse.CodingKeys()
{
  return RSVPResponse.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RSVPResponse.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RSVPResponse.CodingKeys()
{
  return RSVPResponse.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance RSVPResponse.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = RSVPResponse.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance RSVPResponse.CodingKeys()
{
  return RSVPResponse.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RSVPResponse.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = RSVPResponse.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RSVPResponse.CodingKeys()
{
  lazy protocol witness table accessor for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RSVPResponse.CodingKeys()
{
  lazy protocol witness table accessor for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t RSVPResponse.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v8 = a1;
  v22 = 0;
  v21 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v18 = (char *)&v6 - v7;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RSVPResponse.CodingKeys>);
  v9 = *(_QWORD *)(v15 - 8);
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v6 - v10;
  v22 = v3;
  v21 = v1;
  v11 = v3[3];
  v12 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v11);
  lazy protocol witness table accessor for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of GPKGroupID?(v14, v18);
  v16 = type metadata accessor for GPKGroupID();
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v4 = v17;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  v19 = v4;
  v20 = v4;
  if (v4)
    v6 = v20;
  outlined destroy of GPKGroupID?((uint64_t)v18);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v15);
}

uint64_t outlined destroy of GPKGroupID?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for GPKGroupID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t RSVPResponse.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v13 = a2;
  v19 = a1;
  v28 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
  v14 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v15 = (char *)v7 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RSVPResponse.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v22 = (char *)v7 - v18;
  v20 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for RSVPResponse() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)v7 - v20;
  v28 = v3;
  v24 = v3[3];
  v25 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v24);
  lazy protocol witness table accessor for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys();
  v4 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v26 = v4;
  v27 = v4;
  if (v4)
  {
    v9 = v27;
  }
  else
  {
    v10 = type metadata accessor for GPKGroupID();
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v5 = v26;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v11 = v5;
    v12 = v5;
    if (!v5)
    {
      outlined init with take of GPKGroupID?(v15, v21);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
      outlined init with copy of RSVPResponse(v21, v13);
      __swift_destroy_boxed_opaque_existential_1(v19);
      return outlined destroy of RSVPResponse((uint64_t)v21);
    }
    v8 = v12;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    v9 = v8;
  }
  v7[1] = v9;
  return __swift_destroy_boxed_opaque_existential_1(v19);
}

uint64_t type metadata accessor for RSVPResponse()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for RSVPResponse;
  if (!type metadata singleton initialization cache for RSVPResponse)
    return swift_getSingletonMetadata();
  return v1;
}

void *outlined init with take of GPKGroupID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for GPKGroupID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

void *outlined init with copy of RSVPResponse(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for GPKGroupID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of RSVPResponse(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for GPKGroupID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

void *RSVPResponse.init(groupId:)@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  return outlined init with take of GPKGroupID?(a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance RSVPResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return RSVPResponse.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RSVPResponse(uint64_t a1)
{
  return RSVPResponse.encode(to:)(a1);
}

void variable initialization expression of CompleteRSVPRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t CompleteRSVPRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t CompleteRSVPRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*CompleteRSVPRequest.bodyContent.modify())()
{
  return CompleteRSVPRequest.bodyContent.modify;
}

uint64_t CompleteRSVPRequest.init(groupID:nonce:signedUserRSVPBlob:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  unint64_t v25;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v35 = 0u;
  v36 = 0u;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v29 = 0;
  v37 = a4;
  v34 = a1;
  v25 = a2[1];
  v32 = *a2;
  v24 = v32;
  v33 = v25;
  v31 = a3;
  v35 = 0uLL;
  v36 = 0uLL;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v19 = v5;
  v6 = HTTPBodyKey.groupID.unsafeMutableAddressor();
  outlined init with copy of String(v6, v19);
  v15 = GPKGroupID.data.getter();
  v16 = v7;
  v8 = Data.hexString.getter();
  v20 = MEMORY[0x24BEE0D00];
  v19[5] = MEMORY[0x24BEE0D00];
  v19[2] = v8;
  v19[3] = v9;
  outlined consume of Data._Representation(v15, v16);
  v10 = HTTPBodyKey.nonce.unsafeMutableAddressor();
  outlined init with copy of String(v10, v19 + 6);
  outlined copy of Data._Representation(v24, v25);
  v30[0] = v24;
  v30[1] = v25;
  v18 = Nonce.hexString.getter();
  v17 = v11;
  outlined destroy of Nonce((uint64_t)v30);
  v19[11] = v20;
  v19[8] = v18;
  v19[9] = v17;
  v12 = HTTPBodyKey.signedUserRSVPBlob.unsafeMutableAddressor();
  outlined init with copy of String(v12, v19 + 12);
  swift_bridgeObjectRetain();
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  v19[17] = v21;
  v19[14] = a3;
  _finalizeUninitializedArray<A>(_:)();
  v29 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  v28 = v21;
  *(_QWORD *)&v27 = v29;
  outlined assign with take of Any?(&v27, (uint64_t)&v35);
  swift_bridgeObjectRelease();
  outlined init with copy of CompleteRSVPRequest<A>((uint64_t)&v35, a5);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v24, v25);
  v13 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1);
  return outlined destroy of CompleteRSVPRequest<A>((uint64_t)&v35);
}

uint64_t outlined init with copy of CompleteRSVPRequest<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t outlined destroy of CompleteRSVPRequest<A>(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t CompleteRSVPRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeRSVP.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in CompleteRSVPRequest<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance CompleteRSVPRequest<A>()
{
  return CompleteRSVPRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance CompleteRSVPRequest<A>()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance CompleteRSVPRequest<A>@<X0>(uint64_t a1@<X8>)
{
  return CompleteRSVPRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance CompleteRSVPRequest<A>()
{
  return NetworkRequest.contentType.getter();
}

unint64_t initializeBufferWithCopyOfBuffer for AcceptRSVPResponse(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v20;

  v20 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v20 & 0x20000) != 0)
  {
    v15 = *a2;
    swift_retain();
    *a1 = v15;
    return *a1 + ((v20 + 16) & ~(unint64_t)v20);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v8 = (char *)a1 + a3[5];
    v7 = (char *)a2 + a3[5];
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(v8, v7);
    v10 = (_QWORD *)((char *)a1 + a3[6]);
    v4 = (uint64_t *)((char *)a2 + a3[6]);
    v9 = *v4;
    v11 = v4[1];
    outlined copy of Data._Representation(*v4, v11);
    *v10 = v9;
    v10[1] = v11;
    v13 = (_QWORD *)((char *)a1 + a3[7]);
    v5 = (uint64_t *)((char *)a2 + a3[7]);
    v12 = *v5;
    v14 = v5[1];
    outlined copy of Data._Representation(*v5, v14);
    *v13 = v12;
    v13[1] = v14;
    return (unint64_t)a1;
  }
}

uint64_t destroy for AcceptRSVPResponse(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = a2[5];
  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1 + v4);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
}

char *initializeWithCopy for AcceptRSVPResponse(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  char *result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v7 = a3[5];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(&a1[v7], &a2[v7]);
  v8 = a3[6];
  v9 = *(_QWORD *)&a2[v8];
  v10 = *(_QWORD *)&a2[v8 + 8];
  outlined copy of Data._Representation(v9, v10);
  v4 = (uint64_t *)&a1[v8];
  *v4 = v9;
  v4[1] = v10;
  v13 = a3[7];
  v14 = *(_QWORD *)&a2[v13];
  v15 = *(_QWORD *)&a2[v13 + 8];
  outlined copy of Data._Representation(v14, v15);
  result = a1;
  v6 = (uint64_t *)&a1[v13];
  *v6 = v14;
  v6[1] = v15;
  return result;
}

char *assignWithCopy for AcceptRSVPResponse(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v11 = a3[5];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 24))(&a1[v11], &a2[v11]);
  v12 = a3[6];
  v13 = *(_QWORD *)&a2[v12];
  v14 = *(_QWORD *)&a2[v12 + 8];
  outlined copy of Data._Representation(v13, v14);
  v4 = (uint64_t *)&a1[v12];
  v5 = *(_QWORD *)&a1[v12];
  v6 = *(_QWORD *)&a1[v12 + 8];
  *v4 = v13;
  v4[1] = v14;
  outlined consume of Data._Representation(v5, v6);
  v17 = a3[7];
  v18 = *(_QWORD *)&a2[v17];
  v19 = *(_QWORD *)&a2[v17 + 8];
  outlined copy of Data._Representation(v18, v19);
  v7 = (uint64_t *)&a1[v17];
  v8 = *(_QWORD *)&a1[v17];
  v9 = *(_QWORD *)&a1[v17 + 8];
  *v7 = v18;
  v7[1] = v19;
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

__n128 initializeWithTake for AcceptRSVPResponse(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  __n128 result;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = a3[5];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(&a1[v5], &a2[v5]);
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  result = *(__n128 *)&a2[a3[7]];
  *(__n128 *)&a1[a3[7]] = result;
  return result;
}

char *assignWithTake for AcceptRSVPResponse(char *a1, char *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v17 = a3[5];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 40))(&a1[v17], &a2[v17]);
  v4 = (uint64_t *)&a2[a3[6]];
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)&a1[a3[6]];
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  v10 = (uint64_t *)&a2[a3[7]];
  v11 = *v10;
  v12 = v10[1];
  v13 = (uint64_t *)&a1[a3[7]];
  v14 = *v13;
  v15 = v13[1];
  *v13 = v11;
  v13[1] = v12;
  outlined consume of Data._Representation(v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AcceptRSVPResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D39C580(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1 + *(int *)(a3 + 20), a2, v10);
  }
  else if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for AcceptRSVPResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D39C688(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  if (a3 == 12)
  {
    v5 = (_QWORD *)(a1 + *(int *)(a4 + 24));
    *v5 = 0;
    v5[1] = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for AcceptRSVPResponse()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for AcceptRSVPResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for AcceptRSVPResponse.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for AcceptRSVPResponse.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for AcceptRSVPResponse.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AcceptRSVPResponse.CodingKeys()
{
  return &type metadata for AcceptRSVPResponse.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for RSVPResponse(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int v10;

  v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?)
                 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  if ((v10 & 0x20000) != 0)
  {
    v5 = *a2;
    swift_retain();
    *a1 = v5;
    return *a1 + ((v10 + 16) & ~(unint64_t)v10);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    v4 = *(_QWORD *)(v3 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v4 + 48))(a2, 1))
    {
      memcpy(a1, a2, *(_QWORD *)(v9 + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v3);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for RSVPResponse(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for GPKGroupID();
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for RSVPResponse(void *a1, const void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for GPKGroupID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a2, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for RSVPResponse(void *a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);

  v7 = type metadata accessor for GPKGroupID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a1, 1))
  {
    if (v9(a2, 1, v7))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  else if (v9(a2, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v7);
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(a1, a2, v7);
  }
  return a1;
}

void *initializeWithTake for RSVPResponse(void *a1, const void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for GPKGroupID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a2, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for RSVPResponse(void *a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);

  v7 = type metadata accessor for GPKGroupID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a1, 1))
  {
    if (v9(a2, 1, v7))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  else if (v9(a2, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v7);
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a1, a2, v7);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for RSVPResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D39D22C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for RSVPResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D39D28C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for RSVPResponse()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID?();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t type metadata accessor for GPKGroupID?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GPKGroupID?;
  if (!lazy cache variable for type metadata for GPKGroupID?)
  {
    type metadata accessor for GPKGroupID();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GPKGroupID?);
      return v1;
    }
  }
  return v4;
}

uint64_t getEnumTagSinglePayload for RSVPResponse.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for RSVPResponse.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for RSVPResponse.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for RSVPResponse.CodingKeys()
{
  return &type metadata for RSVPResponse.CodingKeys;
}

uint64_t type metadata instantiation function for CompleteRSVPRequest()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for CompleteRSVPRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CompleteRSVPRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for CompleteRSVPRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for CompleteRSVPRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for CompleteRSVPRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteRSVPRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CompleteRSVPRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t type metadata accessor for CompleteRSVPRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CompleteRSVPRequest);
}

unint64_t base witness table accessor for CustomDebugStringConvertible in RSVPResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in RSVPResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys();
}

unint64_t base witness table accessor for Equatable in RSVPResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type RSVPResponse.CodingKeys and conformance RSVPResponse.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in AcceptRSVPResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in AcceptRSVPResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys();
}

unint64_t base witness table accessor for Equatable in AcceptRSVPResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type AcceptRSVPResponse.CodingKeys and conformance AcceptRSVPResponse.CodingKeys();
}

uint64_t KeyFetchType.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t Type;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v11 = a1;
  v21 = 0;
  v20 = 0;
  v6 = 0;
  v7 = type metadata accessor for GPKUserID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v10 = (char *)&v4 - v9;
  Type = type metadata accessor for KeyFetchType();
  v13 = (*(_QWORD *)(*(_QWORD *)(Type - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v4 - v13);
  v21 = v1;
  v20 = v2;
  outlined init with copy of KeyFetchType(v2, (uint64_t *)((char *)&v4 - v13));
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = *v15;
    v5 = v15[1];
    v19 = 1;
    Hasher.combine<A>(_:)();
    v17 = v4;
    v18 = v5;
    Hasher.combine<A>(_:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v10, v15, v7);
    v16 = 0;
    Hasher.combine<A>(_:)();
    lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    Hasher.combine<A>(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t type metadata accessor for KeyFetchType()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for KeyFetchType;
  if (!type metadata singleton initialization cache for KeyFetchType)
    return swift_getSingletonMetadata();
  return v1;
}

_QWORD *outlined init with copy of KeyFetchType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for KeyFetchType();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a2 = *a1;
    v4 = a1[1];
    swift_bridgeObjectRetain();
    a2[1] = v4;
  }
  else
  {
    v2 = type metadata accessor for GPKUserID();
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  }
  swift_storeEnumTagMultiPayload();
  return a2;
}

uint64_t static KeyFetchType.== infix(_:_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[4];
  void (*v10)(char *, uint64_t);
  void (*v11)(char *, uint64_t);
  int v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t Type;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v22 = a1;
  v30 = a2;
  v39 = 0;
  v38 = 0;
  v20 = 0;
  v14 = type metadata accessor for GPKUserID();
  v15 = *(_QWORD **)(v14 - 8);
  v16 = (v15[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v9 - v16;
  v18 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v9 - v16);
  v19 = (char *)v9 - v18;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (KeyFetchType, KeyFetchType));
  v21 = (*(_QWORD *)(*(_QWORD *)(v34 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v20);
  v36 = (char *)v9 - v21;
  Type = type metadata accessor for KeyFetchType();
  v28 = *(_QWORD *)(*(_QWORD *)(Type - 8) + 64);
  v23 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (_QWORD *)((char *)v9 - v23);
  v25 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)v9 - v25;
  v27 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v33 = (_QWORD *)((char *)v9 - v27);
  v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v31 = (char *)v9 - v29;
  v39 = v6;
  v38 = v7;
  outlined init with copy of KeyFetchType(v6, (_QWORD *)((char *)v9 - v29));
  outlined init with copy of KeyFetchType(v30, v33);
  v32 = *(int *)(v34 + 48);
  outlined init with take of KeyFetchType(v31, v36);
  outlined init with take of KeyFetchType(v33, &v36[v32]);
  v37 = *(int *)(v34 + 48);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of KeyFetchType(v36, v26);
    if (!swift_getEnumCaseMultiPayload())
    {
      v13 = (void (*)(char *, char *, uint64_t))v15[4];
      v13(v19, v26, v14);
      v13(v17, &v36[v37], v14);
      if ((static GPKUserID.== infix(_:_:)() & 1) != 0)
      {
        v11 = (void (*)(char *, uint64_t))v15[1];
        v11(v17, v14);
        v11(v19, v14);
        outlined destroy of KeyFetchType((uint64_t)v36);
        v12 = 1;
      }
      else
      {
        v10 = (void (*)(char *, uint64_t))v15[1];
        v10(v17, v14);
        v10(v19, v14);
        outlined destroy of KeyFetchType((uint64_t)v36);
        v12 = 0;
      }
      return v12 & 1;
    }
    ((void (*)(char *, uint64_t))v15[1])(v26, v14);
LABEL_12:
    outlined destroy of (KeyFetchType, KeyFetchType)((uint64_t)v36);
    v12 = 0;
    return v12 & 1;
  }
  outlined init with copy of KeyFetchType(v36, v24);
  v9[2] = *v24;
  v9[3] = v24[1];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v9[1] = *(_QWORD *)&v36[v37 + 8];
  if ((static String.== infix(_:_:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of KeyFetchType((uint64_t)v36);
    v12 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of KeyFetchType((uint64_t)v36);
    v12 = 0;
  }
  return v12 & 1;
}

void *outlined init with take of KeyFetchType(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t Type;

  Type = type metadata accessor for KeyFetchType();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(Type - 8) + 64));
  }
  else
  {
    v2 = type metadata accessor for GPKUserID();
    (*(void (**)(void *, const void *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    swift_storeEnumTagMultiPayload();
  }
  return a2;
}

uint64_t outlined destroy of (KeyFetchType, KeyFetchType)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for KeyFetchType();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  }
  v4 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (KeyFetchType, KeyFetchType))
              + 48);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v4);
  }
  return a1;
}

uint64_t outlined destroy of KeyFetchType(uint64_t a1)
{
  uint64_t v1;

  type metadata accessor for KeyFetchType();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  }
  return a1;
}

uint64_t KeyFetchType.hashValue.getter()
{
  type metadata accessor for KeyFetchType();
  lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType()
{
  uint64_t Type;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type KeyFetchType and conformance KeyFetchType;
  if (!lazy protocol witness table cache variable for type KeyFetchType and conformance KeyFetchType)
  {
    Type = type metadata accessor for KeyFetchType();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for KeyFetchType, Type);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type KeyFetchType and conformance KeyFetchType);
    return v1;
  }
  return v3;
}

{
  uint64_t Type;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type KeyFetchType and conformance KeyFetchType;
  if (!lazy protocol witness table cache variable for type KeyFetchType and conformance KeyFetchType)
  {
    Type = type metadata accessor for KeyFetchType();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for KeyFetchType, Type);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type KeyFetchType and conformance KeyFetchType);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance KeyFetchType()
{
  return KeyFetchType.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance KeyFetchType(uint64_t a1)
{
  return KeyFetchType.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KeyFetchType(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance KeyFetchType(uint64_t a1, _QWORD *a2)
{
  return static KeyFetchType.== infix(_:_:)(a1, a2) & 1;
}

uint64_t KeyFetchResult.userID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t KeyFetchResult.keyInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for KeyFetchResult();
  return outlined init with copy of UserKeyInfo(v1 + *(int *)(v2 + 20), a1);
}

uint64_t type metadata accessor for KeyFetchResult()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for KeyFetchResult;
  if (!type metadata singleton initialization cache for KeyFetchResult)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t outlined init with copy of UserKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v17;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 8) = v6;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v8;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a2 + 32) = v9;
  *(_QWORD *)(a2 + 40) = v10;
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  outlined copy of Data._Representation(v11, v12);
  *(_QWORD *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 56) = v12;
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  outlined copy of Data._Representation(v13, v14);
  *(_QWORD *)(a2 + 64) = v13;
  *(_QWORD *)(a2 + 72) = v14;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  v17 = *(_QWORD *)(a1 + 96);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 96) = v17;
  if ((*(_QWORD *)(a1 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 104);
    v5 = *(_QWORD *)(a1 + 112);
    outlined copy of Data._Representation(v4, v5);
    *(_QWORD *)(a2 + 104) = v4;
    *(_QWORD *)(a2 + 112) = v5;
  }
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  v3 = *(_QWORD *)(a1 + 128);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(a2 + 128) = v3;
  return result;
}

void *KeyFetchResult.init(userID:keyInfo:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE __dst[136];

  memcpy(__dst, a2, sizeof(__dst));
  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a3, a1);
  v4 = type metadata accessor for KeyFetchResult();
  return memcpy((void *)(a3 + *(int *)(v4 + 20)), __dst, 0x88uLL);
}

uint64_t KeyDistributionServiceProviding.register()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t (*v9)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 24) = v2;
  v9 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + **(int **)(a2 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 32) = v4;
  *v4 = *(_QWORD *)(v6 + 16);
  v4[1] = KeyDistributionServiceProviding.register();
  return v9(0, 0, 0, a1, a2);
}

_QWORD *KeyDistributionServiceProviding.register()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

unint64_t base witness table accessor for Equatable in KeyFetchType()
{
  return lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
}

unint64_t initializeBufferWithCopyOfBuffer for KeyFetchType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v10;

  v10 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v10 & 0x20000) != 0)
  {
    v6 = *a2;
    swift_retain();
    *a1 = v6;
    return *a1 + ((v10 + 16) & ~(unint64_t)v10);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v5 = a2[1];
      swift_bridgeObjectRetain();
      a1[1] = v5;
    }
    else
    {
      v3 = type metadata accessor for GPKUserID();
      (*(void (**)(uint64_t *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    }
    swift_storeEnumTagMultiPayload();
    return (unint64_t)a1;
  }
}

uint64_t destroy for KeyFetchType(uint64_t a1)
{
  uint64_t v1;

  if (swift_getEnumCaseMultiPayload() == 1)
    return swift_bridgeObjectRelease();
  v1 = type metadata accessor for GPKUserID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

_QWORD *initializeWithCopy for KeyFetchType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    v4 = a2[1];
    swift_bridgeObjectRetain();
    a1[1] = v4;
  }
  else
  {
    v2 = type metadata accessor for GPKUserID();
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for KeyFetchType(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of KeyFetchType((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v4 = a2[1];
      swift_bridgeObjectRetain();
      a1[1] = v4;
    }
    else
    {
      v2 = type metadata accessor for GPKUserID();
      (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for KeyFetchType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v3 = type metadata accessor for GPKUserID();
    (*(void (**)(void *, const void *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for KeyFetchType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;

  if (a1 != a2)
  {
    outlined destroy of KeyFetchType((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v3 = type metadata accessor for GPKUserID();
      (*(void (**)(void *, const void *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyFetchType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for KeyFetchType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t getEnumTag for KeyFetchType()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t destructiveInjectEnumTag for KeyFetchType()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for KeyFetchType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  if (v0 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for KeyFetchResult(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v26;

  v26 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v26 & 0x20000) != 0)
  {
    v21 = *a2;
    swift_retain();
    *a1 = v21;
    return *a1 + ((v26 + 16) & ~(unint64_t)v26);
  }
  else
  {
    v3 = type metadata accessor for GPKUserID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v4 = *(int *)(a3 + 20);
    v18 = (char *)a1 + v4;
    v20 = (char *)a2 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v9 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v18 + 1) = v9;
    v10 = *((_QWORD *)v20 + 2);
    v11 = *((_QWORD *)v20 + 3);
    outlined copy of Data._Representation(v10, v11);
    *((_QWORD *)v18 + 2) = v10;
    *((_QWORD *)v18 + 3) = v11;
    v12 = *((_QWORD *)v20 + 4);
    v13 = *((_QWORD *)v20 + 5);
    outlined copy of Data._Representation(v12, v13);
    *((_QWORD *)v18 + 4) = v12;
    *((_QWORD *)v18 + 5) = v13;
    v14 = *((_QWORD *)v20 + 6);
    v15 = *((_QWORD *)v20 + 7);
    outlined copy of Data._Representation(v14, v15);
    *((_QWORD *)v18 + 6) = v14;
    *((_QWORD *)v18 + 7) = v15;
    v16 = *((_QWORD *)v20 + 8);
    v17 = *((_QWORD *)v20 + 9);
    outlined copy of Data._Representation(v16, v17);
    *((_QWORD *)v18 + 8) = v16;
    *((_QWORD *)v18 + 9) = v17;
    *((_DWORD *)v18 + 20) = *((_DWORD *)v20 + 20);
    *((_QWORD *)v18 + 11) = *((_QWORD *)v20 + 11);
    v19 = *((_QWORD *)v20 + 12);
    swift_bridgeObjectRetain();
    *((_QWORD *)v18 + 12) = v19;
    if ((*((_QWORD *)v20 + 14) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(v18 + 104) = *(_OWORD *)(v20 + 104);
    }
    else
    {
      v7 = *((_QWORD *)v20 + 13);
      v8 = *((_QWORD *)v20 + 14);
      outlined copy of Data._Representation(v7, v8);
      *((_QWORD *)v18 + 13) = v7;
      *((_QWORD *)v18 + 14) = v8;
    }
    *((_QWORD *)v18 + 15) = *((_QWORD *)v20 + 15);
    v6 = *((_QWORD *)v20 + 16);
    swift_bridgeObjectRetain();
    *((_QWORD *)v18 + 16) = v6;
    return (unint64_t)a1;
  }
}

uint64_t destroy for KeyFetchResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  v6 = *(int *)(a2 + 20);
  v7 = a1 + v6;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56));
  outlined consume of Data._Representation(*(_QWORD *)(v7 + 64), *(_QWORD *)(v7 + 72));
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + v6 + 112) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v6 + 104), *(_QWORD *)(a1 + v6 + 112));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KeyFetchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v12 = *(int *)(a3 + 20);
  v22 = a1 + v12;
  *(_QWORD *)v22 = *(_QWORD *)(a2 + v12);
  v13 = *(_QWORD *)(a2 + v12 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v22 + 8) = v13;
  v14 = *(_QWORD *)(a2 + v12 + 16);
  v15 = *(_QWORD *)(a2 + v12 + 24);
  outlined copy of Data._Representation(v14, v15);
  *(_QWORD *)(v22 + 16) = v14;
  *(_QWORD *)(v22 + 24) = v15;
  v16 = *(_QWORD *)(a2 + v12 + 32);
  v17 = *(_QWORD *)(a2 + v12 + 40);
  outlined copy of Data._Representation(v16, v17);
  *(_QWORD *)(v22 + 32) = v16;
  *(_QWORD *)(v22 + 40) = v17;
  v18 = *(_QWORD *)(a2 + v12 + 48);
  v19 = *(_QWORD *)(a2 + v12 + 56);
  outlined copy of Data._Representation(v18, v19);
  *(_QWORD *)(v22 + 48) = v18;
  *(_QWORD *)(v22 + 56) = v19;
  v20 = *(_QWORD *)(a2 + v12 + 64);
  v21 = *(_QWORD *)(a2 + v12 + 72);
  outlined copy of Data._Representation(v20, v21);
  *(_QWORD *)(v22 + 64) = v20;
  *(_QWORD *)(v22 + 72) = v21;
  *(_DWORD *)(v22 + 80) = *(_DWORD *)(a2 + v12 + 80);
  *(_QWORD *)(v22 + 88) = *(_QWORD *)(a2 + v12 + 88);
  v23 = *(_QWORD *)(a2 + v12 + 96);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v22 + 96) = v23;
  if ((*(_QWORD *)(a2 + v12 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v12 + 104) = *(_OWORD *)(a2 + v12 + 104);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + v12 + 104);
    v8 = *(_QWORD *)(a2 + v12 + 112);
    outlined copy of Data._Representation(v7, v8);
    v4 = a1 + v12;
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(v4 + 112) = v8;
  }
  *(_QWORD *)(a1 + v12 + 120) = *(_QWORD *)(a2 + v12 + 120);
  v6 = *(_QWORD *)(a2 + v12 + 128);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + v12 + 128) = v6;
  return result;
}

uint64_t assignWithCopy for KeyFetchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v25 = *(int *)(a3 + 20);
  v36 = a1 + v25;
  *(_QWORD *)v36 = *(_QWORD *)(a2 + v25);
  v26 = *(_QWORD *)(a2 + v25 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v36 + 8) = v26;
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(a2 + v25 + 16);
  v28 = *(_QWORD *)(a2 + v25 + 24);
  outlined copy of Data._Representation(v27, v28);
  v4 = *(_QWORD *)(a1 + v25 + 16);
  v5 = *(_QWORD *)(a1 + v25 + 24);
  *(_QWORD *)(v36 + 16) = v27;
  *(_QWORD *)(v36 + 24) = v28;
  outlined consume of Data._Representation(v4, v5);
  v29 = *(_QWORD *)(a2 + v25 + 32);
  v30 = *(_QWORD *)(a2 + v25 + 40);
  outlined copy of Data._Representation(v29, v30);
  v6 = *(_QWORD *)(a1 + v25 + 32);
  v7 = *(_QWORD *)(a1 + v25 + 40);
  *(_QWORD *)(v36 + 32) = v29;
  *(_QWORD *)(v36 + 40) = v30;
  outlined consume of Data._Representation(v6, v7);
  v31 = *(_QWORD *)(a2 + v25 + 48);
  v32 = *(_QWORD *)(a2 + v25 + 56);
  outlined copy of Data._Representation(v31, v32);
  v8 = *(_QWORD *)(a1 + v25 + 48);
  v9 = *(_QWORD *)(a1 + v25 + 56);
  *(_QWORD *)(v36 + 48) = v31;
  *(_QWORD *)(v36 + 56) = v32;
  outlined consume of Data._Representation(v8, v9);
  v33 = *(_QWORD *)(a2 + v25 + 64);
  v34 = *(_QWORD *)(a2 + v25 + 72);
  outlined copy of Data._Representation(v33, v34);
  v10 = *(_QWORD *)(a1 + v25 + 64);
  v11 = *(_QWORD *)(a1 + v25 + 72);
  *(_QWORD *)(v36 + 64) = v33;
  *(_QWORD *)(v36 + 72) = v34;
  outlined consume of Data._Representation(v10, v11);
  *(_DWORD *)(v36 + 80) = *(_DWORD *)(a2 + v25 + 80);
  *(_QWORD *)(v36 + 88) = *(_QWORD *)(a2 + v25 + 88);
  v35 = *(_QWORD *)(a2 + v25 + 96);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v36 + 96) = v35;
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + v25 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(a2 + v25 + 112) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + v25 + 104) = *(_OWORD *)(a2 + v25 + 104);
    }
    else
    {
      v18 = *(_QWORD *)(a2 + v25 + 104);
      v19 = *(_QWORD *)(a2 + v25 + 112);
      outlined copy of Data._Representation(v18, v19);
      v15 = a1 + v25;
      *(_QWORD *)(v15 + 104) = v18;
      *(_QWORD *)(v15 + 112) = v19;
    }
  }
  else if ((*(_QWORD *)(a2 + v25 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + v25 + 104);
    *(_OWORD *)(a1 + v25 + 104) = *(_OWORD *)(a2 + v25 + 104);
  }
  else
  {
    v20 = *(_QWORD *)(a2 + v25 + 104);
    v21 = *(_QWORD *)(a2 + v25 + 112);
    outlined copy of Data._Representation(v20, v21);
    v12 = a1 + v25;
    v13 = *(_QWORD *)(a1 + v25 + 104);
    v14 = *(_QWORD *)(a1 + v25 + 112);
    *(_QWORD *)(v12 + 104) = v20;
    *(_QWORD *)(v12 + 112) = v21;
    outlined consume of Data._Representation(v13, v14);
  }
  *(_QWORD *)(a1 + v25 + 120) = *(_QWORD *)(a2 + v25 + 120);
  v17 = *(_QWORD *)(a2 + v25 + 128);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v25 + 128) = v17;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for KeyFetchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  memcpy((void *)(a1 + *(int *)(a3 + 20)), (const void *)(a2 + *(int *)(a3 + 20)), 0x88uLL);
  return a1;
}

uint64_t assignWithTake for KeyFetchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v25;
  uint64_t v26;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v25 = *(int *)(a3 + 20);
  v26 = a1 + v25;
  *(_QWORD *)v26 = *(_QWORD *)(a2 + v25);
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(a2 + v25 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + v25 + 24);
  v5 = *(_QWORD *)(a1 + v25 + 16);
  v6 = *(_QWORD *)(a1 + v25 + 24);
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(a2 + v25 + 16);
  *(_QWORD *)(v26 + 24) = v4;
  outlined consume of Data._Representation(v5, v6);
  v7 = *(_QWORD *)(a2 + v25 + 40);
  v8 = *(_QWORD *)(a1 + v25 + 32);
  v9 = *(_QWORD *)(a1 + v25 + 40);
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(a2 + v25 + 32);
  *(_QWORD *)(v26 + 40) = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(_QWORD *)(a2 + v25 + 56);
  v11 = *(_QWORD *)(a1 + v25 + 48);
  v12 = *(_QWORD *)(a1 + v25 + 56);
  *(_QWORD *)(v26 + 48) = *(_QWORD *)(a2 + v25 + 48);
  *(_QWORD *)(v26 + 56) = v10;
  outlined consume of Data._Representation(v11, v12);
  v13 = *(_QWORD *)(a2 + v25 + 72);
  v14 = *(_QWORD *)(a1 + v25 + 64);
  v15 = *(_QWORD *)(a1 + v25 + 72);
  *(_QWORD *)(v26 + 64) = *(_QWORD *)(a2 + v25 + 64);
  *(_QWORD *)(v26 + 72) = v13;
  outlined consume of Data._Representation(v14, v15);
  *(_DWORD *)(v26 + 80) = *(_DWORD *)(a2 + v25 + 80);
  *(_QWORD *)(v26 + 88) = *(_QWORD *)(a2 + v25 + 88);
  *(_QWORD *)(v26 + 96) = *(_QWORD *)(a2 + v25 + 96);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + v25 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v25 + 104) = *(_OWORD *)(a2 + v25 + 104);
  }
  else if ((*(_QWORD *)(a2 + v25 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + v25 + 104);
    *(_OWORD *)(a1 + v25 + 104) = *(_OWORD *)(a2 + v25 + 104);
  }
  else
  {
    v16 = *(_QWORD *)(a2 + v25 + 112);
    v17 = a1 + v25;
    v18 = *(_QWORD *)(a1 + v25 + 104);
    v19 = *(_QWORD *)(a1 + v25 + 112);
    *(_QWORD *)(v17 + 104) = *(_QWORD *)(a2 + v25 + 104);
    *(_QWORD *)(v17 + 112) = v16;
    outlined consume of Data._Representation(v18, v19);
  }
  v20 = a1 + v25;
  *(_QWORD *)(v20 + 120) = *(_QWORD *)(a2 + v25 + 120);
  *(_QWORD *)(v20 + 128) = *(_QWORD *)(a2 + v25 + 128);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyFetchResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3A01D8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKUserID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for KeyFetchResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3A02D4(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKUserID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for KeyFetchResult()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t dispatch thunk of KeyDistributionServiceProviding.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(char a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v12)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v12 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + **(int **)(a5 + 8));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = dispatch thunk of KeyDistributionServiceProviding.register(forceKeyRoll:skipServerCheck:skipLocalCheck:);
  return v12(a1 & 1, a2 & 1, a3 & 1, a4, a5);
}

uint64_t dispatch thunk of KeyDistributionServiceProviding.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of KeyDistributionServiceProviding.lookupKeyInfo(for:handle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v7 + 16) = v7;
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a7 + 16)
                                                                                              + **(int **)(a7 + 16));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v8;
  *v8 = *(_QWORD *)(v7 + 16);
  v8[1] = dispatch thunk of KeyDistributionServiceProviding.lookupKeyInfo(for:handle:);
  return v16(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of KeyDistributionServiceProviding.lookupKeyInfo(for:handle:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of KeyDistributionServiceProviding.lookupKeyInfos(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 24) + **(int **)(a3 + 24));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of KeyDistributionServiceProviding.lookupKeyInfos(for:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of KeyDistributionServiceProviding.lookupKeyInfos(for:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of KeyDistributionServiceProviding.fetchCurrentUserPublicKey()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v6)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 32) + **(int **)(a2 + 32));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of KeyDistributionServiceProviding.fetchCurrentUserPublicKey();
  return v6(a1, a2);
}

uint64_t dispatch thunk of KeyDistributionServiceProviding.fetchCurrentUserPublicKey()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  *(_QWORD *)(*v3 + 16) = *v3;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 16) + 8))(a1, a2, a3);
}

uint64_t dispatch thunk of KeyDistributionServiceProviding.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v13 + 16) = v13;
  v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a13 + 40) + **(int **)(a13 + 40));
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v13 + 24) = v14;
  *v14 = *(_QWORD *)(v13 + 16);
  v14[1] = dispatch thunk of KeyDistributionServiceProviding.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:);
  return v23(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t dispatch thunk of KeyDistributionServiceProviding.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;

  v5 = *v3;
  *(_QWORD *)(*v3 + 16) = *v3;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 16) + 8))(a1, a2, a3);
}

uint64_t CompleteFetchSeedHistoryRequest.Body.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t *CompleteFetchSeedHistoryRequest.Body.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t SeedHistory;

  SeedHistory = type metadata accessor for CompleteFetchSeedHistoryRequest.Body();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(SeedHistory + 20)), a1);
}

uint64_t type metadata accessor for CompleteFetchSeedHistoryRequest.Body()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteFetchSeedHistoryRequest.Body;
  if (!type metadata singleton initialization cache for CompleteFetchSeedHistoryRequest.Body)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t CompleteFetchSeedHistoryRequest.Body.seedType.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompleteFetchSeedHistoryRequest.Body() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompleteFetchSeedHistoryRequest.Body.verificationKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for CompleteFetchSeedHistoryRequest.Body() + 28);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t CompleteFetchSeedHistoryRequest.Body.protobufVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CompleteFetchSeedHistoryRequest.Body() + 32));
}

uint64_t CompleteFetchSeedHistoryRequest.Body.signature.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for CompleteFetchSeedHistoryRequest.Body() + 36);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t CompleteFetchSeedHistoryRequest.Body.lastKnownSeedVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CompleteFetchSeedHistoryRequest.Body() + 40));
}

uint64_t CompleteFetchSeedHistoryRequest.Body.nonceTypeInd.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CompleteFetchSeedHistoryRequest.Body() + 44));
}

void static CompleteFetchSeedHistoryRequest.Body.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3A0C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D3A0CAC
                                                                                       + dword_23D3A0D54[a12]))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D3A0CBC()
{
  uint64_t v1;

  return v1 == 0;
}

void CompleteFetchSeedHistoryRequest.Body.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3A0DC4()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteFetchSeedHistoryRequest.Body.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  unsigned __int8 v10;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v9 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 0;
LABEL_18:
    swift_bridgeObjectRelease();
    return v10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v8 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 1;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("seedType", 8uLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 2;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("verificationKey", 0xFuLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 3;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("protobufVersion", 0xFuLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 4;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signature", 9uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 5;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("lastKnownSeedVersion", 0x14uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 6;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonceTypeInd", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 7;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 8;
}

uint64_t CompleteFetchSeedHistoryRequest.Body.CodingKeys.init(intValue:)()
{
  return 8;
}

uint64_t CompleteFetchSeedHistoryRequest.Body.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Body.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Body.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Body.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Body.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Body.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteFetchSeedHistoryRequest.Body.CodingKeys.intValue.getter()
{
  return 0;
}

void CompleteFetchSeedHistoryRequest.Body.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3A14CC()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys(char *a1)
{
  char v1;

  static CompleteFetchSeedHistoryRequest.Body.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys()
{
  return CompleteFetchSeedHistoryRequest.Body.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys(uint64_t a1)
{
  char *v1;

  CompleteFetchSeedHistoryRequest.Body.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys()
{
  char *v0;

  CompleteFetchSeedHistoryRequest.Body.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchSeedHistoryRequest.Body.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys()
{
  return CompleteFetchSeedHistoryRequest.Body.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchSeedHistoryRequest.Body.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteFetchSeedHistoryRequest.Body.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *SeedHistory;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  _QWORD v71[2];
  char v72;
  char v73;
  _QWORD v74[2];
  char v75;
  char v76;
  _QWORD v77[2];
  char v78;
  uint64_t v79;
  _QWORD *v80;

  v53 = a1;
  v80 = 0;
  v79 = 0;
  v63 = type metadata accessor for GPKGroupID();
  v59 = *(_QWORD *)(v63 - 8);
  v52 = (*(_QWORD *)(v59 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v63);
  v65 = (char *)v16 - v52;
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteFetchSeedHistoryRequest.Body.CodingKeys>);
  v54 = *(_QWORD *)(v62 - 8);
  v55 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v53);
  v58 = (char *)v16 - v55;
  v80 = v2;
  v79 = v1;
  v56 = v2[3];
  v57 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v56);
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v65, v60, v63);
  v61 = &v78;
  v78 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v64;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v66 = v3;
  v67 = v3;
  if (v3)
  {
    v22 = v67;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v65, v63);
    result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v62);
    v23 = v22;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v65, v63);
    SeedHistory = (int *)type metadata accessor for CompleteFetchSeedHistoryRequest.Body();
    v4 = (uint64_t *)(v60 + SeedHistory[5]);
    v46 = *v4;
    v47 = v4[1];
    outlined copy of Data._Representation(v46, v47);
    v49 = v77;
    v77[0] = v46;
    v77[1] = v47;
    v48 = &v76;
    v76 = 1;
    lazy protocol witness table accessor for type Nonce and conformance Nonce();
    v5 = v66;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v50 = v5;
    v51 = v5;
    if (v5)
    {
      v21 = v51;
      outlined destroy of Nonce((uint64_t)v77);
      result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v62);
      v23 = v21;
    }
    else
    {
      outlined destroy of Nonce((uint64_t)v77);
      v6 = v50;
      v7 = (uint64_t *)(v60 + SeedHistory[6]);
      v41 = *v7;
      v42 = v7[1];
      swift_bridgeObjectRetain();
      v75 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v43 = v6;
      v44 = v6;
      if (v6)
      {
        v20 = v44;
        swift_bridgeObjectRelease();
        result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v62);
        v23 = v20;
      }
      else
      {
        swift_bridgeObjectRelease();
        v8 = (uint64_t *)(v60 + SeedHistory[7]);
        v34 = *v8;
        v35 = v8[1];
        outlined copy of Data._Representation(v34, v35);
        v37 = v74;
        v74[0] = v34;
        v74[1] = v35;
        v36 = &v73;
        v73 = 3;
        v9 = lazy protocol witness table accessor for type Data and conformance Data();
        v10 = v43;
        v38 = v9;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v39 = v10;
        v40 = v10;
        if (v10)
        {
          v19 = v40;
          outlined destroy of Data((uint64_t)v74);
          result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v62);
          v23 = v19;
        }
        else
        {
          outlined destroy of Data((uint64_t)v74);
          v11 = v39;
          v72 = 4;
          KeyedEncodingContainer.encode(_:forKey:)();
          v32 = v11;
          v33 = v11;
          if (v11)
          {
            v18 = v33;
            result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v62);
            v23 = v18;
          }
          else
          {
            v12 = (uint64_t *)(v60 + SeedHistory[9]);
            v28 = *v12;
            v29 = v12[1];
            outlined copy of Data._Representation(v28, v29);
            v13 = v32;
            v71[0] = v28;
            v71[1] = v29;
            v70 = 5;
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            v30 = v13;
            v31 = v13;
            if (v13)
            {
              v17 = v31;
              outlined destroy of Data((uint64_t)v71);
              result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v62);
              v23 = v17;
            }
            else
            {
              outlined destroy of Data((uint64_t)v71);
              v14 = v30;
              v69 = 6;
              KeyedEncodingContainer.encode(_:forKey:)();
              v26 = v14;
              v27 = v14;
              if (v14)
              {
                v16[2] = v27;
              }
              else
              {
                v68 = 7;
                KeyedEncodingContainer.encode(_:forKey:)();
                v24 = 0;
                v25 = 0;
              }
              return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v62);
            }
          }
        }
      }
    }
  }
  return result;
}

void CompleteFetchSeedHistoryRequest.Body.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD v23[6];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int *SeedHistory;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  _QWORD *v87;
  char v88;

  v54 = a2;
  v63 = a1;
  v87 = 0;
  v59 = 0;
  v55 = type metadata accessor for GPKGroupID();
  v56 = *(_QWORD *)(v55 - 8);
  v57 = (*(_QWORD *)(v56 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v55);
  v58 = (char *)v23 - v57;
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteFetchSeedHistoryRequest.Body.CodingKeys>);
  v61 = *(_QWORD *)(v60 - 8);
  v62 = (*(_QWORD *)(v61 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v59);
  v67 = (char *)v23 - v62;
  SeedHistory = (int *)type metadata accessor for CompleteFetchSeedHistoryRequest.Body();
  v65 = (*(_QWORD *)(*((_QWORD *)SeedHistory - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v63);
  v66 = (uint64_t)v23 - v65;
  v88 = 0;
  v87 = v2;
  v69 = v2[3];
  v70 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v69);
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys();
  v3 = v68;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v71 = v3;
  v72 = v3;
  if (v3)
  {
    v27 = v72;
  }
  else
  {
    v51 = &v86;
    v86 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v71;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v52 = v4;
    v53 = v4;
    if (v4)
    {
      v26 = v53;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v67, v60);
      v27 = v26;
    }
    else
    {
      v47 = 1;
      v88 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v66, v58, v55);
      v48 = &v83;
      v83 = v47;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v5 = v52;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v49 = v5;
      v50 = v5;
      if (v5)
      {
        v25 = v50;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v67, v60);
        v27 = v25;
      }
      else
      {
        v6 = v85;
        v7 = (_QWORD *)(v66 + SeedHistory[5]);
        v88 = 3;
        *v7 = v84;
        v7[1] = v6;
        v82 = 2;
        v8 = KeyedDecodingContainer.decode(_:forKey:)();
        v43 = 0;
        v44 = v8;
        v45 = v9;
        v46 = 0;
        v10 = (uint64_t *)(v66 + SeedHistory[6]);
        v88 = 7;
        *v10 = v8;
        v10[1] = v9;
        v39 = &v79;
        v79 = 3;
        v11 = lazy protocol witness table accessor for type Data and conformance Data();
        v12 = v43;
        v40 = v11;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v41 = v12;
        v42 = v12;
        if (!v12)
        {
          v13 = v81;
          v14 = (_QWORD *)(v66 + SeedHistory[7]);
          v88 = 15;
          *v14 = v80;
          v14[1] = v13;
          v78 = 4;
          v15 = KeyedDecodingContainer.decode(_:forKey:)();
          v36 = 0;
          v37 = v15;
          v38 = 0;
          *(_DWORD *)(v66 + SeedHistory[8]) = v15;
          v75 = 5;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v34 = 0;
          v35 = 0;
          v16 = v77;
          v17 = (_QWORD *)(v66 + SeedHistory[9]);
          v88 = 47;
          *v17 = v76;
          v17[1] = v16;
          v74 = 6;
          v18 = KeyedDecodingContainer.decode(_:forKey:)();
          v31 = 0;
          v32 = v18;
          v33 = 0;
          *(_DWORD *)(v66 + SeedHistory[10]) = v18;
          v73 = 7;
          v19 = KeyedDecodingContainer.decode(_:forKey:)();
          v28 = 0;
          v29 = v19;
          v30 = 0;
          v20 = v60;
          v21 = v67;
          v22 = v61;
          *(_DWORD *)(v66 + SeedHistory[11]) = v29;
          (*(void (**)(char *, uint64_t))(v22 + 8))(v21, v20);
          outlined init with copy of CompleteFetchSeedHistoryRequest.Body(v66, v54);
          __swift_destroy_boxed_opaque_existential_1(v63);
          outlined destroy of CompleteFetchSeedHistoryRequest.Body(v66);
          return;
        }
        v24 = v42;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v67, v60);
        v27 = v24;
      }
    }
  }
  v23[1] = v27;
  __swift_destroy_boxed_opaque_existential_1(v63);
  if ((v88 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v66, v55);
  if ((v88 & 2) != 0)
    outlined destroy of Nonce(v66 + SeedHistory[5]);
  if ((v88 & 4) != 0)
    outlined destroy of String();
  if ((v88 & 8) != 0)
    outlined destroy of Data(v66 + SeedHistory[7]);
  if ((v88 & 0x20) != 0)
    outlined destroy of Data(v66 + SeedHistory[9]);
}

uint64_t outlined init with copy of CompleteFetchSeedHistoryRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *SeedHistory;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  SeedHistory = (int *)type metadata accessor for CompleteFetchSeedHistoryRequest.Body();
  v8 = SeedHistory[5];
  v9 = *(_QWORD *)(a1 + v8);
  v10 = *(_QWORD *)(a1 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  v3 = (uint64_t *)(a2 + v8);
  *v3 = v9;
  v3[1] = v10;
  v4 = SeedHistory[6];
  v11 = a2 + v4;
  *(_QWORD *)(a2 + v4) = *(_QWORD *)(a1 + v4);
  v12 = *(_QWORD *)(a1 + v4 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v11 + 8) = v12;
  v13 = SeedHistory[7];
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  outlined copy of Data._Representation(v14, v15);
  v5 = (uint64_t *)(a2 + v13);
  *v5 = v14;
  v5[1] = v15;
  *(_DWORD *)(a2 + SeedHistory[8]) = *(_DWORD *)(a1 + SeedHistory[8]);
  v16 = SeedHistory[9];
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a1 + v16 + 8);
  outlined copy of Data._Representation(v17, v18);
  result = a2;
  v7 = (uint64_t *)(a2 + v16);
  *v7 = v17;
  v7[1] = v18;
  *(_DWORD *)(a2 + SeedHistory[10]) = *(_DWORD *)(a1 + SeedHistory[10]);
  *(_DWORD *)(a2 + SeedHistory[11]) = *(_DWORD *)(a1 + SeedHistory[11]);
  return result;
}

uint64_t outlined destroy of CompleteFetchSeedHistoryRequest.Body(uint64_t a1)
{
  uint64_t v1;
  int *SeedHistory;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  SeedHistory = (int *)type metadata accessor for CompleteFetchSeedHistoryRequest.Body();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + SeedHistory[5]), *(_QWORD *)(a1 + SeedHistory[5] + 8));
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + SeedHistory[7]), *(_QWORD *)(a1 + SeedHistory[7] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + SeedHistory[9]), *(_QWORD *)(a1 + SeedHistory[9] + 8));
  return a1;
}

int *CompleteFetchSeedHistoryRequest.Body.init(groupId:nonce:seedType:verificationKey:protobufVersion:signature:lastKnownSeedVersion:nonceTypeInd:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, int a11, int a12)
{
  uint64_t v12;
  int *result;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;

  v19 = *a2;
  v20 = a2[1];
  v12 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a9, a1);
  result = (int *)type metadata accessor for CompleteFetchSeedHistoryRequest.Body();
  v14 = (_QWORD *)(a9 + result[5]);
  *v14 = v19;
  v14[1] = v20;
  v15 = (_QWORD *)(a9 + result[6]);
  *v15 = a3;
  v15[1] = a4;
  v16 = (_QWORD *)(a9 + result[7]);
  *v16 = a5;
  v16[1] = a6;
  *(_DWORD *)(a9 + result[8]) = a7;
  v17 = (_QWORD *)(a9 + result[9]);
  *v17 = a8;
  v17[1] = a10;
  *(_DWORD *)(a9 + result[10]) = a11;
  *(_DWORD *)(a9 + result[11]) = a12;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance CompleteFetchSeedHistoryRequest.Body(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CompleteFetchSeedHistoryRequest.Body.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteFetchSeedHistoryRequest.Body(uint64_t a1)
{
  return CompleteFetchSeedHistoryRequest.Body.encode(to:)(a1);
}

GroupKitCore::CompleteFetchSeedHistoryRequest::NonceType_optional __swiftcall CompleteFetchSeedHistoryRequest.NonceType.init(rawValue:)(Swift::UInt32 rawValue)
{
  char v3;

  if (rawValue == 1)
  {
    v3 = 0;
    return (GroupKitCore::CompleteFetchSeedHistoryRequest::NonceType_optional)(v3 & 1);
  }
  if (rawValue == 2)
  {
    v3 = 1;
    return (GroupKitCore::CompleteFetchSeedHistoryRequest::NonceType_optional)(v3 & 1);
  }
  return (GroupKitCore::CompleteFetchSeedHistoryRequest::NonceType_optional)2;
}

uint64_t CompleteFetchSeedHistoryRequest.NonceType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 2;
  else
    return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteFetchSeedHistoryRequest.NonceType()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.NonceType and conformance CompleteFetchSeedHistoryRequest.NonceType();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteFetchSeedHistoryRequest.NonceType()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.NonceType and conformance CompleteFetchSeedHistoryRequest.NonceType();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CompleteFetchSeedHistoryRequest.NonceType()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.NonceType and conformance CompleteFetchSeedHistoryRequest.NonceType();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteFetchSeedHistoryRequest.NonceType()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.NonceType and conformance CompleteFetchSeedHistoryRequest.NonceType();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKitCore::CompleteFetchSeedHistoryRequest::NonceType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance CompleteFetchSeedHistoryRequest.NonceType@<W0>(Swift::UInt32 *a1@<X0>, GroupKitCore::CompleteFetchSeedHistoryRequest::NonceType_optional *a2@<X8>)
{
  GroupKitCore::CompleteFetchSeedHistoryRequest::NonceType_optional result;

  result.value = CompleteFetchSeedHistoryRequest.NonceType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CompleteFetchSeedHistoryRequest.NonceType@<X0>(_DWORD *a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;

  result = CompleteFetchSeedHistoryRequest.NonceType.rawValue.getter(*v1 & 1);
  *a1 = result;
  return result;
}

void variable initialization expression of CompleteFetchSeedHistoryRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t CompleteFetchSeedHistoryRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t CompleteFetchSeedHistoryRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*CompleteFetchSeedHistoryRequest.bodyContent.modify())()
{
  return CompleteFetchSeedHistoryRequest.bodyContent.modify;
}

uint64_t CompleteFetchSeedHistoryRequest.init(groupID:nonce:seedType:verificationKey:protobufVersion:signature:lastKnownSeedVersion:nonceType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10, int a11, unsigned __int8 a12)
{
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t SeedHistory;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  char v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  char *v80;

  v30 = &v78;
  v31 = a9;
  v37 = a1;
  v34 = a2;
  v44 = a3;
  v45 = a4;
  v46 = a5;
  v47 = a6;
  v48 = a7;
  v49 = a8;
  v41 = a10;
  v42 = a11;
  v40 = a12;
  v80 = 0;
  v78 = 0u;
  v79 = 0u;
  v77 = 0;
  v75 = 0;
  v76 = 0;
  v73 = 0;
  v74 = 0;
  v71 = 0;
  v72 = 0;
  v70 = 0;
  v68 = 0;
  v69 = 0;
  v67 = 0;
  v66 = 0;
  v64 = 0;
  v51 = 0;
  v53 = type metadata accessor for DictionaryEncoder.DataEncodingStrategy();
  v52 = *(_QWORD *)(v53 - 8);
  v32 = (*(_QWORD *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v54 = (char *)&v27 - v32;
  v36 = type metadata accessor for GPKGroupID();
  v35 = *(_QWORD *)(v36 - 8);
  v33 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v51);
  v50 = (uint64_t)&v27 - v33;
  SeedHistory = type metadata accessor for CompleteFetchSeedHistoryRequest.Body();
  v12 = MEMORY[0x24BDAC7A8](v50);
  v58 = (uint64_t)&v27 - v13;
  v80 = (char *)&v27 - v13;
  v77 = v14;
  v38 = *v15;
  v39 = v15[1];
  v75 = v38;
  v76 = v39;
  v73 = v16;
  v74 = v17;
  v71 = v18;
  v72 = v19;
  v70 = v20;
  v68 = v21;
  v69 = v41;
  v67 = v42;
  v66 = v40 & 1;
  v78 = 0uLL;
  v79 = 0uLL;
  (*(void (**)(double))(v22 + 16))(v12);
  outlined copy of Data._Representation(v38, v39);
  v43 = v65;
  v65[0] = v38;
  v65[1] = v39;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v46, v47);
  outlined copy of Data._Representation(v49, v41);
  v23 = CompleteFetchSeedHistoryRequest.NonceType.rawValue.getter(v40 & 1);
  CompleteFetchSeedHistoryRequest.Body.init(groupId:nonce:seedType:verificationKey:protobufVersion:signature:lastKnownSeedVersion:nonceTypeInd:)(v50, v43, v44, v45, v46, v47, v48, v49, v58, v41, v42, v23);
  type metadata accessor for DictionaryEncoder();
  v55 = DictionaryEncoder.__allocating_init()();
  v64 = v55;
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v54, *MEMORY[0x24BDFC528], v53);
  dispatch thunk of DictionaryEncoder.dataEncodingStrategy.setter();
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Body and conformance CompleteFetchSeedHistoryRequest.Body();
  v24 = v57;
  v25 = dispatch thunk of DictionaryEncoder.encode<A>(_:)();
  v59 = v24;
  v60 = v25;
  v61 = v24;
  if (v24)
  {
    v27 = v61;
    swift_release();
    outlined destroy of CompleteFetchSeedHistoryRequest.Body(v58);
    outlined consume of Data._Representation(v49, v41);
    outlined consume of Data._Representation(v46, v47);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v38, v39);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
    return outlined destroy of CompleteFetchSeedHistoryRequest((uint64_t)&v78);
  }
  else
  {
    v28 = v60;
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(_QWORD *)&v62 = v28;
    v29 = &v78;
    outlined assign with take of Any?(&v62, (uint64_t)&v78);
    swift_release();
    outlined destroy of CompleteFetchSeedHistoryRequest.Body(v58);
    outlined init with copy of CompleteFetchSeedHistoryRequest((uint64_t)v29, v31);
    outlined consume of Data._Representation(v49, v41);
    outlined consume of Data._Representation(v46, v47);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v38, v39);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
    return outlined destroy of CompleteFetchSeedHistoryRequest((uint64_t)v29);
  }
}

unint64_t lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Body and conformance CompleteFetchSeedHistoryRequest.Body()
{
  uint64_t SeedHistory;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body and conformance CompleteFetchSeedHistoryRequest.Body;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body and conformance CompleteFetchSeedHistoryRequest.Body)
  {
    SeedHistory = type metadata accessor for CompleteFetchSeedHistoryRequest.Body();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Body, SeedHistory);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Body and conformance CompleteFetchSeedHistoryRequest.Body);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of CompleteFetchSeedHistoryRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t outlined init with copy of CompleteFetchSeedHistoryRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t CompleteFetchSeedHistoryRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeFetchSeedHistory.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance CompleteFetchSeedHistoryRequest()
{
  return CompleteFetchSeedHistoryRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance CompleteFetchSeedHistoryRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance CompleteFetchSeedHistoryRequest@<X0>(uint64_t a1@<X8>)
{
  return CompleteFetchSeedHistoryRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance CompleteFetchSeedHistoryRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t CompleteFetchSeedHistoryRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t CompleteFetchSeedHistoryRequest.Response.seedType.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompleteFetchSeedHistoryRequest.Response() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for CompleteFetchSeedHistoryRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteFetchSeedHistoryRequest.Response;
  if (!type metadata singleton initialization cache for CompleteFetchSeedHistoryRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.groupKitSeedBlob.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompleteFetchSeedHistoryRequest.Response() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.maxSeedVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CompleteFetchSeedHistoryRequest.Response() + 28));
}

uint64_t CompleteFetchSeedHistoryRequest.Response.nonce.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t SeedHistory;

  SeedHistory = type metadata accessor for CompleteFetchSeedHistoryRequest.Response();
  return outlined init with copy of Nonce?((uint64_t *)(v1 + *(int *)(SeedHistory + 32)), a1);
}

uint64_t outlined init with copy of Nonce?(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  if ((a1[1] & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
  }
  else
  {
    v3 = *a1;
    v4 = a1[1];
    outlined copy of Data._Representation(*a1, v4);
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
  }
  return a2;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.seedVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.ciphertext.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.keyHint.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 32));
  return v2;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.role.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.signature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 56);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 64));
  return v2;
}

void static CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3A3964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D3A39C8
                                                                                       + *((int *)qword_23D3A3A50 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D3A39D8()
{
  uint64_t v1;

  return v1 == 0;
}

void CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3A3AB8()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  unsigned __int8 v8;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 0;
LABEL_14:
    swift_bridgeObjectRelease();
    return v8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("seedVersion", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 1;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ciphertext", 0xAuLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 2;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyHint", 7uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 3;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("role", 4uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 4;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signature", 9uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 5;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 6;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.init(intValue:)()
{
  return 6;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.intValue.getter()
{
  return 0;
}

void CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3A4070()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys(char *a1)
{
  char v1;

  static CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys()
{
  return CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys(uint64_t a1)
{
  char *v1;

  CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys()
{
  char *v0;

  CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys()
{
  return CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  char v45;
  char v46;
  __int128 v47;
  char v48;
  __int128 v49;
  char v50;
  char v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  _BYTE v55[8];
  _BYTE v56[8];

  v31 = (__int128 *)v55;
  v32 = a1;
  v53 = 0;
  v52 = 0;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys>);
  v33 = *(_QWORD *)(v39 - 8);
  v34 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v37 = (char *)v11 - v34;
  v53 = v2;
  v52 = v1;
  v35 = v2[3];
  v36 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v35);
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v3 = v40;
  v51 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v41 = v3;
  v42 = v3;
  if (v3)
  {
    v14 = v42;
    result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v37, v39);
    v15 = v14;
  }
  else
  {
    v50 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v29 = 0;
    v30 = 0;
    v31[1] = *(_OWORD *)(v38 + 8);
    outlined retain of Data((uint64_t)v56);
    v4 = v31[1];
    v25 = &v49;
    v49 = v4;
    v24 = &v48;
    v48 = 2;
    v5 = lazy protocol witness table accessor for type Data and conformance Data();
    v6 = v29;
    v26 = v5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v27 = v6;
    v28 = v6;
    if (v6)
    {
      v13 = v28;
      outlined destroy of Data((uint64_t)&v49);
      result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v37, v39);
      v15 = v13;
    }
    else
    {
      outlined destroy of Data((uint64_t)&v49);
      *v31 = *(_OWORD *)(v38 + 24);
      outlined retain of Data((uint64_t)v55);
      v7 = v27;
      v47 = *v31;
      v46 = 3;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v22 = v7;
      v23 = v7;
      if (v7)
      {
        v12 = v23;
        outlined destroy of Data((uint64_t)&v47);
        result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v37, v39);
        v15 = v12;
      }
      else
      {
        outlined destroy of Data((uint64_t)&v47);
        v8 = v22;
        v18 = *(_QWORD *)(v38 + 40);
        v19 = *(_QWORD *)(v38 + 48);
        swift_bridgeObjectRetain();
        v45 = 4;
        KeyedEncodingContainer.encode(_:forKey:)();
        v20 = v8;
        v21 = v8;
        if (v8)
        {
          v11[2] = v21;
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v37, v39);
        }
        else
        {
          swift_bridgeObjectRelease();
          v54 = *(_OWORD *)(v38 + 56);
          outlined retain of Data((uint64_t)&v54);
          v9 = v20;
          v44 = v54;
          v43 = 5;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v16 = v9;
          v17 = v9;
          if (v9)
            v11[1] = v17;
          outlined destroy of Data((uint64_t)&v44);
          return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v37, v39);
        }
      }
    }
  }
  return result;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.init(from:)@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  _DWORD *v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  _QWORD *v86;
  _DWORD v87[2];
  _QWORD v88[2];
  _QWORD v89[2];
  uint64_t v90;
  char v91;

  v62 = v87;
  v63 = a2;
  v64 = a1;
  v86 = 0;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys>);
  v66 = *(_QWORD *)(v65 - 8);
  v67 = (*(_QWORD *)(v66 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v64);
  v68 = (char *)&v28 - v67;
  v91 = 0;
  v86 = v2;
  v70 = v2[3];
  v71 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v70);
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys();
  v3 = v69;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v72 = v3;
  v73 = v3;
  if (v3)
  {
    v32 = v73;
  }
  else
  {
    v85 = 0;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v59 = 0;
    v60 = v4;
    v61 = 0;
    v55 = v4;
    v87[0] = v4;
    v84 = 1;
    v5 = KeyedDecodingContainer.decode(_:forKey:)();
    v56 = 0;
    v57 = v5;
    v58 = 0;
    v50 = v5;
    v87[1] = v5;
    v51 = &v81;
    v81 = 2;
    v6 = lazy protocol witness table accessor for type Data and conformance Data();
    v7 = v56;
    v52 = v6;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v53 = v7;
    v54 = v7;
    if (v7)
    {
      v31 = v54;
      (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v65);
      v32 = v31;
    }
    else
    {
      v46 = v82;
      v47 = v83;
      v91 = 4;
      outlined copy of Data._Representation(v82, v83);
      v8 = v53;
      v88[0] = v46;
      v88[1] = v47;
      v78 = 3;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v48 = v8;
      v49 = v8;
      if (v8)
      {
        v30 = v49;
        outlined consume of Data._Representation(v46, v47);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v65);
        v32 = v30;
      }
      else
      {
        v40 = v79;
        v41 = v80;
        v91 = 12;
        outlined copy of Data._Representation(v79, v80);
        v9 = v48;
        v89[0] = v40;
        v89[1] = v41;
        v77 = 4;
        v10 = KeyedDecodingContainer.decode(_:forKey:)();
        v42 = v9;
        v43 = v10;
        v44 = v11;
        v45 = v9;
        if (!v9)
        {
          v37 = v44;
          v36 = v43;
          v91 = 28;
          swift_bridgeObjectRetain();
          v90 = v36;
          *((_QWORD *)v62 + 6) = v37;
          v74 = 5;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v38 = 0;
          v39 = 0;
          v34 = v75;
          v35 = v76;
          v33 = v87;
          v91 = 60;
          outlined copy of Data._Representation(v75, v76);
          v12 = v62;
          v13 = v66;
          v14 = v68;
          v15 = v65;
          v16 = v35;
          *((_QWORD *)v62 + 7) = v34;
          *((_QWORD *)v12 + 8) = v16;
          (*(void (**)(char *, uint64_t))(v13 + 8))(v14, v15);
          outlined copy of Data._Representation(v46, v47);
          outlined copy of Data._Representation(v40, v41);
          swift_bridgeObjectRetain();
          outlined copy of Data._Representation(v34, v35);
          outlined consume of Data._Representation(v34, v35);
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v40, v41);
          outlined consume of Data._Representation(v46, v47);
          __swift_destroy_boxed_opaque_existential_1(v64);
          outlined destroy of CompleteFetchSeedHistoryRequest.Response.SeedBlob((uint64_t)v33);
          v17 = v50;
          v18 = v46;
          v19 = v47;
          v20 = v40;
          v21 = v41;
          v22 = v36;
          v23 = v37;
          v24 = v34;
          v25 = v63;
          v26 = v35;
          result = v55;
          *v63 = v55;
          v25[1] = v17;
          *((_QWORD *)v25 + 1) = v18;
          *((_QWORD *)v25 + 2) = v19;
          *((_QWORD *)v25 + 3) = v20;
          *((_QWORD *)v25 + 4) = v21;
          *((_QWORD *)v25 + 5) = v22;
          *((_QWORD *)v25 + 6) = v23;
          *((_QWORD *)v25 + 7) = v24;
          *((_QWORD *)v25 + 8) = v26;
          return result;
        }
        v29 = v45;
        outlined consume of Data._Representation(v40, v41);
        outlined consume of Data._Representation(v46, v47);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v65);
        v32 = v29;
      }
    }
  }
  v28 = v32;
  result = __swift_destroy_boxed_opaque_existential_1(v64);
  if ((v91 & 4) != 0)
  {
    result = (uint64_t)v88;
    outlined destroy of Data((uint64_t)v88);
  }
  if ((v91 & 8) != 0)
  {
    result = (uint64_t)v89;
    outlined destroy of Data((uint64_t)v89);
  }
  if ((v91 & 0x10) != 0)
  {
    result = (uint64_t)&v90;
    outlined destroy of String();
  }
  return result;
}

uint64_t outlined destroy of CompleteFetchSeedHistoryRequest.Response.SeedBlob(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  return a1;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.SeedBlob.init(version:seedVersion:ciphertext:keyHint:role:signature:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  *(_DWORD *)a9 = result;
  *(_DWORD *)(a9 + 4) = a2;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = a4;
  *(_QWORD *)(a9 + 24) = a5;
  *(_QWORD *)(a9 + 32) = a6;
  *(_QWORD *)(a9 + 40) = a7;
  *(_QWORD *)(a9 + 48) = a8;
  *(_QWORD *)(a9 + 56) = a10;
  *(_QWORD *)(a9 + 64) = a11;
  return result;
}

void static CompleteFetchSeedHistoryRequest.Response.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3A516C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D3A51C4
                                                                                       + dword_23D3A523C[a12]))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D3A51D4()
{
  uint64_t v1;

  return v1 == 0;
}

void CompleteFetchSeedHistoryRequest.Response.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3A52A0()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteFetchSeedHistoryRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  unsigned __int8 v7;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 0;
LABEL_12:
    swift_bridgeObjectRelease();
    return v7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("seedType", 8uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 1;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupKitSeedBlob", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 2;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("maxSeedVersion", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 3;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 4;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 5;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response.CodingKeys, &type metadata for CompleteFetchSeedHistoryRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

void CompleteFetchSeedHistoryRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3A57B0()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

void *protocol witness for Decodable.init(from:) in conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  unsigned int __src[18];

  result = (void *)CompleteFetchSeedHistoryRequest.Response.SeedBlob.init(from:)(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x48uLL);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob(uint64_t a1)
{
  const void *v1;
  _BYTE __dst[72];

  memcpy(__dst, v1, sizeof(__dst));
  return CompleteFetchSeedHistoryRequest.Response.SeedBlob.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys(char *a1)
{
  char v1;

  static CompleteFetchSeedHistoryRequest.Response.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys()
{
  return CompleteFetchSeedHistoryRequest.Response.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys(uint64_t a1)
{
  char *v1;

  CompleteFetchSeedHistoryRequest.Response.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys()
{
  char *v0;

  CompleteFetchSeedHistoryRequest.Response.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchSeedHistoryRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys()
{
  return CompleteFetchSeedHistoryRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchSeedHistoryRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteFetchSeedHistoryRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t SeedHistory;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD v53[2];
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  _QWORD *v60;

  v37 = a1;
  v60 = 0;
  v59 = 0;
  v47 = type metadata accessor for GPKGroupID();
  v43 = *(_QWORD *)(v47 - 8);
  v36 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v47);
  v49 = (char *)v12 - v36;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteFetchSeedHistoryRequest.Response.CodingKeys>);
  v38 = *(_QWORD *)(v46 - 8);
  v39 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v37);
  v42 = (char *)v12 - v39;
  v60 = v2;
  v59 = v1;
  v40 = v2[3];
  v41 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v40);
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v49, v44, v47);
  v45 = &v58;
  v58 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v48;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v50 = v3;
  v51 = v3;
  if (v3)
  {
    v15 = v51;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v47);
    result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v42, v46);
    v16 = v15;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v47);
    SeedHistory = type metadata accessor for CompleteFetchSeedHistoryRequest.Response();
    v5 = v50;
    v31 = SeedHistory;
    v6 = (uint64_t *)(v44 + *(int *)(SeedHistory + 20));
    v32 = *v6;
    v33 = v6[1];
    swift_bridgeObjectRetain();
    v57 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v34 = v5;
    v35 = v5;
    if (v5)
    {
      v14 = v35;
      swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v42, v46);
      v16 = v14;
    }
    else
    {
      swift_bridgeObjectRelease();
      v25 = *(_QWORD *)(v44 + *(int *)(v31 + 24));
      swift_bridgeObjectRetain();
      v28 = &v56;
      v56 = v25;
      v26 = &v55;
      v55 = 2;
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CompleteFetchSeedHistoryRequest.Response.SeedBlob]);
      lazy protocol witness table accessor for type [CompleteFetchSeedHistoryRequest.Response.SeedBlob] and conformance <A> [A]();
      v7 = v34;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v29 = v7;
      v30 = v7;
      if (v7)
      {
        v13 = v30;
        outlined destroy of [CompleteFetchSeedHistoryRequest.Response.SeedBlob]();
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v42, v46);
        v16 = v13;
      }
      else
      {
        outlined destroy of [CompleteFetchSeedHistoryRequest.Response.SeedBlob]();
        v8 = v29;
        v54 = 3;
        KeyedEncodingContainer.encode(_:forKey:)();
        v23 = v8;
        v24 = v8;
        if (v8)
        {
          v12[2] = v24;
          return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v42, v46);
        }
        else
        {
          v9 = (uint64_t *)(v44 + *(int *)(v31 + 32));
          v17 = *v9;
          v18 = v9[1];
          outlined copy of Nonce?(v17, v18);
          v20 = v53;
          v53[0] = v17;
          v53[1] = v18;
          v19 = &v52;
          v52 = 4;
          lazy protocol witness table accessor for type Nonce and conformance Nonce();
          v10 = v23;
          KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
          v21 = v10;
          v22 = v10;
          if (v10)
            v12[1] = v22;
          outlined destroy of Nonce?((uint64_t)v53);
          return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v42, v46);
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [CompleteFetchSeedHistoryRequest.Response.SeedBlob] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t SeedHistory;

  v3 = lazy protocol witness table cache variable for type [CompleteFetchSeedHistoryRequest.Response.SeedBlob] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CompleteFetchSeedHistoryRequest.Response.SeedBlob] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CompleteFetchSeedHistoryRequest.Response.SeedBlob]);
    SeedHistory = lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.SeedBlob and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12A0], v2, &SeedHistory);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [CompleteFetchSeedHistoryRequest.Response.SeedBlob] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t SeedHistory;

  v3 = lazy protocol witness table cache variable for type [CompleteFetchSeedHistoryRequest.Response.SeedBlob] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CompleteFetchSeedHistoryRequest.Response.SeedBlob] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CompleteFetchSeedHistoryRequest.Response.SeedBlob]);
    SeedHistory = lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.SeedBlob and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v2, &SeedHistory);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [CompleteFetchSeedHistoryRequest.Response.SeedBlob] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.SeedBlob and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response.SeedBlob, &type metadata for CompleteFetchSeedHistoryRequest.Response.SeedBlob);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response.SeedBlob, &type metadata for CompleteFetchSeedHistoryRequest.Response.SeedBlob);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response.SeedBlob and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [CompleteFetchSeedHistoryRequest.Response.SeedBlob]()
{
  swift_bridgeObjectRelease();
}

uint64_t outlined copy of Nonce?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined copy of Data._Representation(result, a2);
  return result;
}

uint64_t outlined destroy of Nonce?(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t CompleteFetchSeedHistoryRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int *SeedHistory;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  char v69;
  char v70;
  _QWORD *v71;
  char v72;

  v44 = a2;
  v53 = a1;
  v71 = 0;
  v49 = 0;
  v45 = type metadata accessor for GPKGroupID();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v45);
  v48 = (char *)&v20 - v47;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteFetchSeedHistoryRequest.Response.CodingKeys>);
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v49);
  v57 = (char *)&v20 - v52;
  SeedHistory = (int *)type metadata accessor for CompleteFetchSeedHistoryRequest.Response();
  v55 = (*(_QWORD *)(*((_QWORD *)SeedHistory - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v53);
  v56 = (uint64_t)&v20 - v55;
  v72 = 0;
  v71 = v2;
  v59 = v2[3];
  v60 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v59);
  lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys();
  v3 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v61 = v3;
  v62 = v3;
  if (v3)
  {
    v25 = v62;
  }
  else
  {
    v41 = &v70;
    v70 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v61;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v42 = v4;
    v43 = v4;
    if (v4)
    {
      v24 = v43;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v50);
      v25 = v24;
    }
    else
    {
      v36 = 1;
      v72 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v56, v48, v45);
      v5 = v42;
      v69 = v36;
      v6 = KeyedDecodingContainer.decode(_:forKey:)();
      v37 = v5;
      v38 = v6;
      v39 = v7;
      v40 = v5;
      if (v5)
      {
        v23 = v40;
        (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v50);
        v25 = v23;
      }
      else
      {
        v8 = v39;
        v9 = (uint64_t *)(v56 + SeedHistory[5]);
        v72 = 3;
        *v9 = v38;
        v9[1] = v8;
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CompleteFetchSeedHistoryRequest.Response.SeedBlob]);
        v32 = &v67;
        v67 = 2;
        lazy protocol witness table accessor for type [CompleteFetchSeedHistoryRequest.Response.SeedBlob] and conformance <A> [A]();
        v10 = v37;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v34 = v10;
        v35 = v10;
        if (v10)
        {
          v22 = v35;
          (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v50);
          v25 = v22;
        }
        else
        {
          v11 = SeedHistory[6];
          v72 = 7;
          *(_QWORD *)(v56 + v11) = v68;
          v66 = 3;
          v12 = KeyedDecodingContainer.decode(_:forKey:)();
          v29 = 0;
          v30 = v12;
          v31 = 0;
          *(_DWORD *)(v56 + SeedHistory[7]) = v12;
          v26 = &v63;
          v63 = 4;
          lazy protocol witness table accessor for type Nonce and conformance Nonce();
          v13 = v29;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          v27 = v13;
          v28 = v13;
          if (!v13)
          {
            v14 = v50;
            v15 = v57;
            v16 = v51;
            v17 = v65;
            v18 = (_QWORD *)(v56 + SeedHistory[8]);
            v72 = 23;
            *v18 = v64;
            v18[1] = v17;
            (*(void (**)(char *, uint64_t))(v16 + 8))(v15, v14);
            outlined init with copy of CompleteFetchSeedHistoryRequest.Response(v56, v44);
            __swift_destroy_boxed_opaque_existential_1(v53);
            return outlined destroy of CompleteFetchSeedHistoryRequest.Response(v56);
          }
          v21 = v28;
          (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v50);
          v25 = v21;
        }
      }
    }
  }
  v20 = v25;
  result = __swift_destroy_boxed_opaque_existential_1(v53);
  if ((v72 & 1) != 0)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(v56, v45);
  if ((v72 & 2) != 0)
  {
    result = v56 + SeedHistory[5];
    outlined destroy of String();
  }
  if ((v72 & 4) != 0)
  {
    result = v56 + SeedHistory[6];
    outlined destroy of [CompleteFetchSeedHistoryRequest.Response.SeedBlob]();
  }
  return result;
}

uint64_t outlined init with copy of CompleteFetchSeedHistoryRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int *SeedHistory;
  uint64_t v15;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  SeedHistory = (int *)type metadata accessor for CompleteFetchSeedHistoryRequest.Response();
  v3 = (_QWORD *)(a1 + SeedHistory[5]);
  v8 = (_QWORD *)(a2 + SeedHistory[5]);
  *v8 = *v3;
  v9 = v3[1];
  swift_bridgeObjectRetain();
  v8[1] = v9;
  v11 = SeedHistory[6];
  v12 = *(_QWORD *)(a1 + v11);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + v11) = v12;
  *(_DWORD *)(a2 + SeedHistory[7]) = *(_DWORD *)(a1 + SeedHistory[7]);
  v15 = SeedHistory[8];
  if ((*(_QWORD *)(a1 + v15 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + v15);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + v15);
    v7 = *(_QWORD *)(a1 + v15 + 8);
    outlined copy of Data._Representation(v6, v7);
    v4 = (uint64_t *)(a2 + v15);
    *v4 = v6;
    v4[1] = v7;
  }
  return a2;
}

uint64_t outlined destroy of CompleteFetchSeedHistoryRequest.Response(uint64_t a1)
{
  uint64_t v1;
  uint64_t SeedHistory;
  uint64_t v5;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  SeedHistory = type metadata accessor for CompleteFetchSeedHistoryRequest.Response();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = *(int *)(SeedHistory + 32);
  if ((*(_QWORD *)(a1 + v5 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v5), *(_QWORD *)(a1 + v5 + 8));
  return a1;
}

int *CompleteFetchSeedHistoryRequest.Response.init(groupId:seedType:groupKitSeedBlob:maxSeedVersion:nonce:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  int *result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v16;
  uint64_t v17;

  v16 = *a6;
  v17 = a6[1];
  v7 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a7, a1);
  result = (int *)type metadata accessor for CompleteFetchSeedHistoryRequest.Response();
  v9 = (_QWORD *)(a7 + result[5]);
  *v9 = a2;
  v9[1] = a3;
  *(_QWORD *)(a7 + result[6]) = a4;
  *(_DWORD *)(a7 + result[7]) = a5;
  v10 = (_QWORD *)(a7 + result[8]);
  *v10 = v16;
  v10[1] = v17;
  return result;
}

unint64_t base witness table accessor for Equatable in CompleteFetchSeedHistoryRequest.NonceType()
{
  return lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.NonceType and conformance CompleteFetchSeedHistoryRequest.NonceType();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.NonceType and conformance CompleteFetchSeedHistoryRequest.NonceType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.NonceType and conformance CompleteFetchSeedHistoryRequest.NonceType;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.NonceType and conformance CompleteFetchSeedHistoryRequest.NonceType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.NonceType, &type metadata for CompleteFetchSeedHistoryRequest.NonceType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.NonceType and conformance CompleteFetchSeedHistoryRequest.NonceType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.NonceType and conformance CompleteFetchSeedHistoryRequest.NonceType;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.NonceType and conformance CompleteFetchSeedHistoryRequest.NonceType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.NonceType, &type metadata for CompleteFetchSeedHistoryRequest.NonceType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.NonceType and conformance CompleteFetchSeedHistoryRequest.NonceType);
    return v0;
  }
  return v2;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in CompleteFetchSeedHistoryRequest()
{
  return lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response and conformance CompleteFetchSeedHistoryRequest.Response();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response and conformance CompleteFetchSeedHistoryRequest.Response()
{
  uint64_t SeedHistory;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response and conformance CompleteFetchSeedHistoryRequest.Response;
  if (!lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response and conformance CompleteFetchSeedHistoryRequest.Response)
  {
    SeedHistory = type metadata accessor for CompleteFetchSeedHistoryRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchSeedHistoryRequest.Response, SeedHistory);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchSeedHistoryRequest.Response and conformance CompleteFetchSeedHistoryRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompleteFetchSeedHistoryRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CompleteFetchSeedHistoryRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteFetchSeedHistoryRequest.Response(uint64_t a1)
{
  return CompleteFetchSeedHistoryRequest.Response.encode(to:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for CompleteFetchSeedHistoryRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CompleteFetchSeedHistoryRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for CompleteFetchSeedHistoryRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for CompleteFetchSeedHistoryRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for CompleteFetchSeedHistoryRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteFetchSeedHistoryRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CompleteFetchSeedHistoryRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchSeedHistoryRequest()
{
  return &type metadata for CompleteFetchSeedHistoryRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteFetchSeedHistoryRequest.Body(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v25;

  v25 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v25 & 0x20000) != 0)
  {
    v20 = *a2;
    swift_retain();
    *a1 = v20;
    return *a1 + ((v25 + 16) & ~(unint64_t)v25);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v10 = (_QWORD *)((char *)a1 + a3[5]);
    v4 = (uint64_t *)((char *)a2 + a3[5]);
    v9 = *v4;
    v11 = v4[1];
    outlined copy of Data._Representation(*v4, v11);
    *v10 = v9;
    v10[1] = v11;
    v5 = a3[6];
    v12 = (char *)a1 + v5;
    *(_QWORD *)((char *)a1 + v5) = *(uint64_t *)((char *)a2 + v5);
    v13 = *(uint64_t *)((char *)a2 + v5 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v12 + 1) = v13;
    v15 = (_QWORD *)((char *)a1 + a3[7]);
    v6 = (uint64_t *)((char *)a2 + a3[7]);
    v14 = *v6;
    v16 = v6[1];
    outlined copy of Data._Representation(*v6, v16);
    *v15 = v14;
    v15[1] = v16;
    *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    v18 = (_QWORD *)((char *)a1 + a3[9]);
    v7 = (uint64_t *)((char *)a2 + a3[9]);
    v17 = *v7;
    v19 = v7[1];
    outlined copy of Data._Representation(*v7, v19);
    *v18 = v17;
    v18[1] = v19;
    *(_DWORD *)((char *)a1 + a3[10]) = *(_DWORD *)((char *)a2 + a3[10]);
    *(_DWORD *)((char *)a1 + a3[11]) = *(_DWORD *)((char *)a2 + a3[11]);
    return (unint64_t)a1;
  }
}

uint64_t destroy for CompleteFetchSeedHistoryRequest.Body(uint64_t a1, int *a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
}

uint64_t initializeWithCopy for CompleteFetchSeedHistoryRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v9 = a3[5];
  v10 = *(_QWORD *)(a2 + v9);
  v11 = *(_QWORD *)(a2 + v9 + 8);
  outlined copy of Data._Representation(v10, v11);
  v4 = (uint64_t *)(a1 + v9);
  *v4 = v10;
  v4[1] = v11;
  v5 = (_QWORD *)(a2 + a3[6]);
  v12 = (_QWORD *)(a1 + a3[6]);
  *v12 = *v5;
  v13 = v5[1];
  swift_bridgeObjectRetain();
  v12[1] = v13;
  v14 = a3[7];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a2 + v14 + 8);
  outlined copy of Data._Representation(v15, v16);
  v6 = (uint64_t *)(a1 + v14);
  *v6 = v15;
  v6[1] = v16;
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  v17 = a3[9];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a2 + v17 + 8);
  outlined copy of Data._Representation(v18, v19);
  result = a1;
  v8 = (uint64_t *)(a1 + v17);
  *v8 = v18;
  v8[1] = v19;
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_DWORD *)(a1 + a3[11]) = *(_DWORD *)(a2 + a3[11]);
  return result;
}

uint64_t assignWithCopy for CompleteFetchSeedHistoryRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v15 = a3[5];
  v16 = *(_QWORD *)(a2 + v15);
  v17 = *(_QWORD *)(a2 + v15 + 8);
  outlined copy of Data._Representation(v16, v17);
  v4 = (uint64_t *)(a1 + v15);
  v5 = *(_QWORD *)(a1 + v15);
  v6 = *(_QWORD *)(a1 + v15 + 8);
  *v4 = v16;
  v4[1] = v17;
  outlined consume of Data._Representation(v5, v6);
  v7 = (_QWORD *)(a2 + a3[6]);
  v18 = (_QWORD *)(a1 + a3[6]);
  *v18 = *v7;
  v19 = v7[1];
  swift_bridgeObjectRetain();
  v18[1] = v19;
  swift_bridgeObjectRelease();
  v20 = a3[7];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a2 + v20 + 8);
  outlined copy of Data._Representation(v21, v22);
  v8 = (uint64_t *)(a1 + v20);
  v9 = *(_QWORD *)(a1 + v20);
  v10 = *(_QWORD *)(a1 + v20 + 8);
  *v8 = v21;
  v8[1] = v22;
  outlined consume of Data._Representation(v9, v10);
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  v23 = a3[9];
  v24 = *(_QWORD *)(a2 + v23);
  v25 = *(_QWORD *)(a2 + v23 + 8);
  outlined copy of Data._Representation(v24, v25);
  v11 = (uint64_t *)(a1 + v23);
  v12 = *(_QWORD *)(a1 + v23);
  v13 = *(_QWORD *)(a1 + v23 + 8);
  *v11 = v24;
  v11[1] = v25;
  outlined consume of Data._Representation(v12, v13);
  result = a1;
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_DWORD *)(a1 + a3[11]) = *(_DWORD *)(a2 + a3[11]);
  return result;
}

__n128 initializeWithTake for CompleteFetchSeedHistoryRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  result = *(__n128 *)(a2 + a3[9]);
  *(__n128 *)(a1 + a3[9]) = result;
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_DWORD *)(a1 + a3[11]) = *(_DWORD *)(a2 + a3[11]);
  return result;
}

uint64_t assignWithTake for CompleteFetchSeedHistoryRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + a3[5]);
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + a3[5]);
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  v10 = (_QWORD *)(a2 + a3[6]);
  v11 = (_QWORD *)(a1 + a3[6]);
  *v11 = *v10;
  v11[1] = v10[1];
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)(a2 + a3[7]);
  v13 = *v12;
  v14 = v12[1];
  v15 = (uint64_t *)(a1 + a3[7]);
  v16 = *v15;
  v17 = v15[1];
  *v15 = v13;
  v15[1] = v14;
  outlined consume of Data._Representation(v16, v17);
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  v18 = (uint64_t *)(a2 + a3[9]);
  v19 = *v18;
  v20 = v18[1];
  v21 = (uint64_t *)(a1 + a3[9]);
  v22 = *v21;
  v23 = v21[1];
  *v21 = v19;
  v21[1] = v20;
  outlined consume of Data._Representation(v22, v23);
  result = a1;
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_DWORD *)(a1 + a3[11]) = *(_DWORD *)(a2 + a3[11]);
  return result;
}

uint64_t getEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.Body()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3A7C10(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.Body()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3A7D0C(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for CompleteFetchSeedHistoryRequest.Body()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.Body.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF8)
      goto LABEL_15;
    v7 = ((a2 + 7) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 248;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 8;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.Body.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF8)
  {
    v5 = ((a3 + 7) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF8)
  {
    v4 = ((a2 - 249) >> 8) + 1;
    *result = a2 + 7;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 7;
  }
  return result;
}

uint64_t getEnumTag for CompleteFetchSeedHistoryRequest.Body.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteFetchSeedHistoryRequest.Body.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchSeedHistoryRequest.Body.CodingKeys()
{
  return &type metadata for CompleteFetchSeedHistoryRequest.Body.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.NonceType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.NonceType(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for CompleteFetchSeedHistoryRequest.NonceType(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for CompleteFetchSeedHistoryRequest.NonceType(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchSeedHistoryRequest.NonceType()
{
  return &type metadata for CompleteFetchSeedHistoryRequest.NonceType;
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteFetchSeedHistoryRequest.Response(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  int v19;

  v19 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v19 & 0x20000) != 0)
  {
    v14 = *a2;
    swift_retain();
    *a1 = v14;
    return *a1 + ((v19 + 16) & ~(unint64_t)v19);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v4 = a3[5];
    v8 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v9 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v8 + 1) = v9;
    v10 = a3[6];
    v11 = *(uint64_t *)((char *)a2 + v10);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v10) = v11;
    *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    v12 = (char *)a1 + a3[8];
    v13 = (uint64_t *)((char *)a2 + a3[8]);
    if ((v13[1] & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
    }
    else
    {
      v6 = *v13;
      v7 = v13[1];
      outlined copy of Data._Representation(*v13, v7);
      *(_QWORD *)v12 = v6;
      *((_QWORD *)v12 + 1) = v7;
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for CompleteFetchSeedHistoryRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = a1;
  v6 = *(int *)(a2 + 32);
  if ((*(_QWORD *)(a1 + v6 + 8) & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + v6), *(_QWORD *)(a1 + v6 + 8));
  return result;
}

uint64_t initializeWithCopy for CompleteFetchSeedHistoryRequest.Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v4 = (_QWORD *)(a2 + a3[5]);
  v9 = (_QWORD *)(a1 + a3[5]);
  *v9 = *v4;
  v10 = v4[1];
  swift_bridgeObjectRetain();
  v9[1] = v10;
  v12 = a3[6];
  v13 = *(_QWORD *)(a2 + v12);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v12) = v13;
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v16 = a3[8];
  if ((*(_QWORD *)(a2 + v16 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + v16);
    v8 = *(_QWORD *)(a2 + v16 + 8);
    outlined copy of Data._Representation(v7, v8);
    v5 = (uint64_t *)(a1 + v16);
    *v5 = v7;
    v5[1] = v8;
  }
  return a1;
}

uint64_t assignWithCopy for CompleteFetchSeedHistoryRequest.Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v21;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v4 = (_QWORD *)(a2 + a3[5]);
  v14 = (_QWORD *)(a1 + a3[5]);
  *v14 = *v4;
  v15 = v4[1];
  swift_bridgeObjectRetain();
  v14[1] = v15;
  swift_bridgeObjectRelease();
  v16 = a3[6];
  v17 = *(_QWORD *)(a2 + v16);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v16) = v17;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v21 = a3[8];
  if ((*(_QWORD *)(a1 + v21 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(a2 + v21 + 8) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
    }
    else
    {
      v10 = *(_QWORD *)(a2 + v21);
      v11 = *(_QWORD *)(a2 + v21 + 8);
      outlined copy of Data._Representation(v10, v11);
      v8 = (uint64_t *)(a1 + v21);
      *v8 = v10;
      v8[1] = v11;
    }
  }
  else if ((*(_QWORD *)(a2 + v21 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Nonce(a1 + v21);
    *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  }
  else
  {
    v12 = *(_QWORD *)(a2 + v21);
    v13 = *(_QWORD *)(a2 + v21 + 8);
    outlined copy of Data._Representation(v12, v13);
    v5 = (uint64_t *)(a1 + v21);
    v6 = *(_QWORD *)(a1 + v21);
    v7 = *(_QWORD *)(a1 + v21 + 8);
    *v5 = v12;
    v5[1] = v13;
    outlined consume of Data._Representation(v6, v7);
  }
  return a1;
}

uint64_t initializeWithTake for CompleteFetchSeedHistoryRequest.Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for CompleteFetchSeedHistoryRequest.Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v14;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (_QWORD *)(a2 + a3[5]);
  v5 = (_QWORD *)(a1 + a3[5]);
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v14 = a3[8];
  if ((*(_QWORD *)(a1 + v14 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  }
  else if ((*(_QWORD *)(a2 + v14 + 8) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Nonce(a1 + v14);
    *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + v14 + 8);
    v7 = (_QWORD *)(a1 + v14);
    v8 = *(_QWORD *)(a1 + v14);
    v9 = *(_QWORD *)(a1 + v14 + 8);
    *v7 = *(_QWORD *)(a2 + v14);
    v7[1] = v6;
    outlined consume of Data._Representation(v8, v9);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3A8FD4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D3A90D0(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for CompleteFetchSeedHistoryRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for CompleteFetchSeedHistoryRequest.Response.SeedBlob(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CompleteFetchSeedHistoryRequest.Response.SeedBlob(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease();
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for CompleteFetchSeedHistoryRequest.Response.SeedBlob(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 48) = v7;
  v9 = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v9, v10);
  result = a1;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  return result;
}

uint64_t assignWithCopy for CompleteFetchSeedHistoryRequest.Response.SeedBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v9, v10);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v10;
  outlined consume of Data._Representation(v2, v3);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  outlined copy of Data._Representation(v11, v12);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  outlined consume of Data._Representation(v4, v5);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 48) = v13;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  outlined copy of Data._Representation(v15, v16);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v16;
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy72_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x48uLL);
}

uint64_t assignWithTake for CompleteFetchSeedHistoryRequest.Response.SeedBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  outlined consume of Data._Representation(v8, v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  outlined consume of Data._Representation(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.Response.SeedBlob(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 72))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 48)))
        v3 = *(_QWORD *)(a1 + 48);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.Response.SeedBlob(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 72) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 72) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 48) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchSeedHistoryRequest.Response.SeedBlob()
{
  return &type metadata for CompleteFetchSeedHistoryRequest.Response.SeedBlob;
}

uint64_t getEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFA)
      goto LABEL_15;
    v7 = ((a2 + 5) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 250;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 6;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFA)
  {
    v5 = ((a3 + 5) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFA)
  {
    v4 = ((a2 - 251) >> 8) + 1;
    *result = a2 + 5;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys()
{
  return &type metadata for CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v7 = ((a2 + 4) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 5;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteFetchSeedHistoryRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for CompleteFetchSeedHistoryRequest.Response.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteFetchSeedHistoryRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchSeedHistoryRequest.Response.CodingKeys()
{
  return &type metadata for CompleteFetchSeedHistoryRequest.Response.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteFetchSeedHistoryRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteFetchSeedHistoryRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteFetchSeedHistoryRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Response.SeedBlob.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteFetchSeedHistoryRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteFetchSeedHistoryRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteFetchSeedHistoryRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchSeedHistoryRequest.Body.CodingKeys and conformance CompleteFetchSeedHistoryRequest.Body.CodingKeys();
}

uint64_t one-time initialization function for eventType()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("eventType", 9uLL, 1);
  result = v1._countAndFlagsBits;
  static MetricsPayloadKey.eventType = (__int128)v1;
  return result;
}

__int128 *MetricsPayloadKey.eventType.unsafeMutableAddressor()
{
  if (one-time initialization token for eventType != -1)
    swift_once();
  return &static MetricsPayloadKey.eventType;
}

uint64_t static MetricsPayloadKey.eventType.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)MetricsPayloadKey.eventType.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for success()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("success", 7uLL, 1);
  result = v1._countAndFlagsBits;
  static MetricsPayloadKey.success = (__int128)v1;
  return result;
}

__int128 *MetricsPayloadKey.success.unsafeMutableAddressor()
{
  if (one-time initialization token for success != -1)
    swift_once();
  return &static MetricsPayloadKey.success;
}

uint64_t static MetricsPayloadKey.success.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)MetricsPayloadKey.success.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for duration()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("duration", 8uLL, 1);
  result = v1._countAndFlagsBits;
  static MetricsPayloadKey.duration = (__int128)v1;
  return result;
}

__int128 *MetricsPayloadKey.duration.unsafeMutableAddressor()
{
  if (one-time initialization token for duration != -1)
    swift_once();
  return &static MetricsPayloadKey.duration;
}

uint64_t static MetricsPayloadKey.duration.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)MetricsPayloadKey.duration.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for groupSize()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupSize", 9uLL, 1);
  result = v1._countAndFlagsBits;
  static MetricsPayloadKey.groupSize = (__int128)v1;
  return result;
}

__int128 *MetricsPayloadKey.groupSize.unsafeMutableAddressor()
{
  if (one-time initialization token for groupSize != -1)
    swift_once();
  return &static MetricsPayloadKey.groupSize;
}

uint64_t static MetricsPayloadKey.groupSize.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)MetricsPayloadKey.groupSize.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for keyRegistrationAction()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyRegistrationAction", 0x15uLL, 1);
  result = v1._countAndFlagsBits;
  static MetricsPayloadKey.keyRegistrationAction = (__int128)v1;
  return result;
}

__int128 *MetricsPayloadKey.keyRegistrationAction.unsafeMutableAddressor()
{
  if (one-time initialization token for keyRegistrationAction != -1)
    swift_once();
  return &static MetricsPayloadKey.keyRegistrationAction;
}

uint64_t static MetricsPayloadKey.keyRegistrationAction.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)MetricsPayloadKey.keyRegistrationAction.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for errorCode()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorCode", 9uLL, 1);
  result = v1._countAndFlagsBits;
  static MetricsPayloadKey.errorCode = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ec", 2uLL, 1);
  result = v1._countAndFlagsBits;
  static HTTPResponseKey.errorCode = (__int128)v1;
  return result;
}

__int128 *MetricsPayloadKey.errorCode.unsafeMutableAddressor()
{
  if (one-time initialization token for errorCode != -1)
    swift_once();
  return &static MetricsPayloadKey.errorCode;
}

uint64_t static MetricsPayloadKey.errorCode.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)MetricsPayloadKey.errorCode.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for cryptoErrorCode()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cryptoErrorCode", 0xFuLL, 1);
  result = v1._countAndFlagsBits;
  static MetricsPayloadKey.cryptoErrorCode = (__int128)v1;
  return result;
}

__int128 *MetricsPayloadKey.cryptoErrorCode.unsafeMutableAddressor()
{
  if (one-time initialization token for cryptoErrorCode != -1)
    swift_once();
  return &static MetricsPayloadKey.cryptoErrorCode;
}

uint64_t static MetricsPayloadKey.cryptoErrorCode.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)MetricsPayloadKey.cryptoErrorCode.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for errorSubCodeString()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("errorSubCodeString", 0x12uLL, 1);
  result = v1._countAndFlagsBits;
  static MetricsPayloadKey.errorSubCodeString = (__int128)v1;
  return result;
}

__int128 *MetricsPayloadKey.errorSubCodeString.unsafeMutableAddressor()
{
  if (one-time initialization token for errorSubCodeString != -1)
    swift_once();
  return &static MetricsPayloadKey.errorSubCodeString;
}

uint64_t static MetricsPayloadKey.errorSubCodeString.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)MetricsPayloadKey.errorSubCodeString.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for groupKitClientID()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupKitClientID", 0x10uLL, 1);
  result = v1._countAndFlagsBits;
  static MetricsPayloadKey.groupKitClientID = (__int128)v1;
  return result;
}

__int128 *MetricsPayloadKey.groupKitClientID.unsafeMutableAddressor()
{
  if (one-time initialization token for groupKitClientID != -1)
    swift_once();
  return &static MetricsPayloadKey.groupKitClientID;
}

uint64_t static MetricsPayloadKey.groupKitClientID.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)MetricsPayloadKey.groupKitClientID.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for expectedMemberCount()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("expectedMemberCount", 0x13uLL, 1);
  result = v1._countAndFlagsBits;
  static MetricsPayloadKey.expectedMemberCount = (__int128)v1;
  return result;
}

__int128 *MetricsPayloadKey.expectedMemberCount.unsafeMutableAddressor()
{
  if (one-time initialization token for expectedMemberCount != -1)
    swift_once();
  return &static MetricsPayloadKey.expectedMemberCount;
}

uint64_t static MetricsPayloadKey.expectedMemberCount.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)MetricsPayloadKey.expectedMemberCount.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for extraMemberCount()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("extraMemberCount", 0x10uLL, 1);
  result = v1._countAndFlagsBits;
  static MetricsPayloadKey.extraMemberCount = (__int128)v1;
  return result;
}

__int128 *MetricsPayloadKey.extraMemberCount.unsafeMutableAddressor()
{
  if (one-time initialization token for extraMemberCount != -1)
    swift_once();
  return &static MetricsPayloadKey.extraMemberCount;
}

uint64_t static MetricsPayloadKey.extraMemberCount.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)MetricsPayloadKey.extraMemberCount.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t one-time initialization function for missingMemberCount()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("missingMemberCount", 0x12uLL, 1);
  result = v1._countAndFlagsBits;
  static MetricsPayloadKey.missingMemberCount = (__int128)v1;
  return result;
}

__int128 *MetricsPayloadKey.missingMemberCount.unsafeMutableAddressor()
{
  if (one-time initialization token for missingMemberCount != -1)
    swift_once();
  return &static MetricsPayloadKey.missingMemberCount;
}

uint64_t static MetricsPayloadKey.missingMemberCount.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)MetricsPayloadKey.missingMemberCount.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

ValueMetadata *type metadata accessor for MetricsPayloadKey()
{
  return &type metadata for MetricsPayloadKey;
}

uint64_t GKCrypto_GroupBlob.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v6;
  Swift::Int v7;
  unsigned __int8 v8;

  v6._countAndFlagsBits = a1;
  v6._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "version";
  *(_QWORD *)(v3 + 8) = 7;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "groupHandle";
  *(_QWORD *)(v3 + 32) = 11;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "randomizedVerificationKeys";
  *(_QWORD *)(v3 + 56) = 26;
  *(_BYTE *)(v3 + 64) = 2;
  *(_QWORD *)(v3 + 72) = "groupBlobPublicKeys";
  *(_QWORD *)(v3 + 80) = 19;
  *(_BYTE *)(v3 + 88) = 2;
  *(_QWORD *)(v3 + 96) = "groupBlobSignatures";
  *(_QWORD *)(v3 + 104) = 19;
  *(_BYTE *)(v3 + 112) = 2;
  *(_QWORD *)(v3 + 120) = "AEGroupBlobCiphertext";
  *(_QWORD *)(v3 + 128) = 21;
  *(_BYTE *)(v3 + 136) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, v6);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_14:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_14;
    case 2:
      v8 = 2;
      goto LABEL_14;
    case 3:
      v8 = 3;
      goto LABEL_14;
    case 4:
      v8 = 4;
      goto LABEL_14;
    case 5:
      v8 = 5;
      goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  return 6;
}

uint64_t GKCrypto_GroupBlob.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  unsigned int v6;

  swift_bridgeObjectRetain();
  v6 = GKCrypto_GroupBlob.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 6)
    return 6;
  else
    return v6;
}

uint64_t GKCrypto_GroupBlob.CodingKeys.init(intValue:)()
{
  return 6;
}

uint64_t GKCrypto_GroupBlob.CodingKeys.intValue.getter()
{
  return 0;
}

void GKCrypto_GroupBlob.CodingKeys.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3AB31C()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1)._countAndFlagsBits;
}

void GKCrypto_GroupBlob.CodingKeys.stringValue.getter(char a1)
{
  GKCrypto_GroupBlob.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupBlob.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupBlob.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupBlob.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupBlob.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_GroupBlob.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupBlob.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_GroupBlob.CodingKeys(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  GKCrypto_GroupBlob.CodingKeys.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for CodingKey.stringValue.getter in conformance GKCrypto_GroupBlob.CodingKeys()
{
  char *v0;

  GKCrypto_GroupBlob.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GKCrypto_GroupBlob.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupBlob.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GKCrypto_GroupBlob.CodingKeys()
{
  return GKCrypto_GroupBlob.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GKCrypto_GroupBlob.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupBlob.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GKCrypto_GroupBlob.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupBlob.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GKCrypto_GroupBlob.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  _BYTE v60[2];
  _QWORD v61[2];
  char v62;
  _QWORD v63[2];
  char v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;

  v47 = a1;
  v67 = 0;
  v66 = 0;
  v65 = 0;
  v40 = 0;
  v37 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v38 = (*(_QWORD *)(*(_QWORD *)(v37 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v39 = (char *)v11 - v38;
  v41 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v42 = (*(_QWORD *)(*(_QWORD *)(v41 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v43 = (char *)v11 - v42;
  v44 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v45 = (*(_QWORD *)(*(_QWORD *)(v44 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)v11 - v45;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GKCrypto_GroupBlob.CodingKeys>);
  v48 = *(_QWORD *)(v54 - 8);
  v49 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v47);
  v52 = (char *)v11 - v49;
  v67 = (char *)v11 - v49;
  v66 = v2;
  v65 = v1;
  v50 = v2[3];
  v51 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v50);
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v3 = v55;
  v64 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v56 = v3;
  v57 = v3;
  if (v3)
  {
    v15 = v57;
    result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v54);
    v16 = v15;
  }
  else
  {
    v30 = v53[1];
    v31 = v53[2];
    outlined copy of Data._Representation(v30, v31);
    v33 = v63;
    v63[0] = v30;
    v63[1] = v31;
    v32 = &v62;
    v62 = 1;
    v4 = lazy protocol witness table accessor for type Data and conformance Data();
    v5 = v56;
    v34 = v4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v35 = v5;
    v36 = v5;
    if (v5)
    {
      v14 = v36;
      outlined destroy of Data((uint64_t)v63);
      result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v54);
      v16 = v14;
    }
    else
    {
      outlined destroy of Data((uint64_t)v63);
      v26 = v53[3];
      v27 = v53[4];
      outlined copy of Data._Representation(v26, v27);
      v6 = v35;
      v61[0] = v26;
      v61[1] = v27;
      v60[1] = 5;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v28 = v6;
      v29 = v6;
      if (v6)
      {
        v13 = v29;
        outlined destroy of Data((uint64_t)v61);
        result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v54);
        v16 = v13;
      }
      else
      {
        outlined destroy of Data((uint64_t)v61);
        GKCrypto_GroupBlob.randomizedVerificationKeys.getter(v46);
        v23 = v60;
        v60[0] = 2;
        lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys();
        v7 = v28;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v24 = v7;
        v25 = v7;
        if (v7)
        {
          v12 = v25;
          outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v46);
          result = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v54);
          v16 = v12;
        }
        else
        {
          outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v46);
          GKCrypto_GroupBlob.groupBlobPublicKeys.getter(v43);
          v20 = &v59;
          v59 = 3;
          lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys();
          v8 = v24;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v21 = v8;
          v22 = v8;
          if (v8)
          {
            v11[1] = v22;
            outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v43);
            return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v54);
          }
          else
          {
            outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v43);
            GKCrypto_GroupBlob.groupBlobSignatures.getter(v39);
            v17 = &v58;
            v58 = 4;
            lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures();
            v9 = v21;
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            v18 = v9;
            v19 = v9;
            if (v9)
              v11[0] = v19;
            outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v39);
            return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v52, v54);
          }
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.CodingKeys, &type metadata for GKCrypto_GroupBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.CodingKeys, &type metadata for GKCrypto_GroupBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.CodingKeys, &type metadata for GKCrypto_GroupBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.CodingKeys, &type metadata for GKCrypto_GroupBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.CodingKeys, &type metadata for GKCrypto_GroupBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.RandomizedVerificationKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.RandomizedVerificationKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.RandomizedVerificationKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.RandomizedVerificationKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.RandomizedVerificationKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.RandomizedVerificationKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.RandomizedVerificationKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobPublicKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobPublicKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobPublicKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobPublicKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobPublicKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobPublicKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobPublicKeys, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobSignatures, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobSignatures, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobSignatures, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobSignatures, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobSignatures, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobSignatures, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures)
  {
    v0 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobSignatures, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures);
    return v1;
  }
  return v3;
}

uint64_t GKCrypto_GroupBlob.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  _BYTE v75[2];
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char *v83;
  char *v84;

  v47 = a2;
  v66 = a1;
  v84 = 0;
  v83 = 0;
  v82 = 0;
  v57 = 0;
  v48 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v49 = (*(_QWORD *)(*(_QWORD *)(v48 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v50 = (uint64_t)&v22 - v49;
  v51 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v52 = (*(_QWORD *)(*(_QWORD *)(v51 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v57);
  v53 = (uint64_t)&v22 - v52;
  v54 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v55 = (*(_QWORD *)(*(_QWORD *)(v54 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v54);
  v56 = (uint64_t)&v22 - v55;
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GKCrypto_GroupBlob.CodingKeys>);
  v59 = *(_QWORD *)(v58 - 8);
  v60 = (*(_QWORD *)(v59 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v57);
  v67 = (char *)&v22 - v60;
  v84 = (char *)&v22 - v60;
  v62 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob() - 8) + 64);
  v61 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v66);
  v64 = (uint64_t)&v22 - v61;
  v63 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v65 = (uint64_t)&v22 - v63;
  v83 = (char *)&v22 - v63;
  v82 = v3;
  GKCrypto_GroupBlob.init()(v4);
  outlined init with take of GKCrypto_GroupBlob(v64, v65);
  v69 = v66[3];
  v70 = v66[4];
  __swift_project_boxed_opaque_existential_1(v66, v69);
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.CodingKeys and conformance GKCrypto_GroupBlob.CodingKeys();
  v5 = v68;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v71 = v5;
  v72 = v5;
  if (v5)
  {
    v28 = v72;
  }
  else
  {
    v81 = 0;
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v44 = 0;
    v45 = v6;
    v46 = 0;
    *(_DWORD *)v65 = v6;
    v40 = &v78;
    v78 = 1;
    v7 = lazy protocol witness table accessor for type Data and conformance Data();
    v8 = v44;
    v41 = v7;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v42 = v8;
    v43 = v8;
    if (v8)
    {
      v27 = v43;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v67, v58);
      v28 = v27;
    }
    else
    {
      v9 = v65;
      v10 = v80;
      v11 = *(_QWORD *)(v65 + 8);
      v12 = *(_QWORD *)(v65 + 16);
      *(_QWORD *)(v65 + 8) = v79;
      *(_QWORD *)(v9 + 16) = v10;
      outlined consume of Data._Representation(v11, v12);
      v13 = v42;
      v75[1] = 5;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v38 = v13;
      v39 = v13;
      if (v13)
      {
        v26 = v39;
        (*(void (**)(char *, uint64_t))(v59 + 8))(v67, v58);
        v28 = v26;
      }
      else
      {
        v14 = v65;
        v15 = v77;
        v16 = *(_QWORD *)(v65 + 24);
        v17 = *(_QWORD *)(v65 + 32);
        *(_QWORD *)(v65 + 24) = v76;
        *(_QWORD *)(v14 + 32) = v15;
        outlined consume of Data._Representation(v16, v17);
        v35 = v75;
        v75[0] = 2;
        lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys();
        v18 = v38;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v36 = v18;
        v37 = v18;
        if (v18)
        {
          v25 = v37;
          (*(void (**)(char *, uint64_t))(v59 + 8))(v67, v58);
          v28 = v25;
        }
        else
        {
          GKCrypto_GroupBlob.randomizedVerificationKeys.setter(v56);
          v32 = &v74;
          v74 = 3;
          lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys();
          v19 = v36;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v33 = v19;
          v34 = v19;
          if (v19)
          {
            v24 = v34;
            (*(void (**)(char *, uint64_t))(v59 + 8))(v67, v58);
            v28 = v24;
          }
          else
          {
            GKCrypto_GroupBlob.groupBlobPublicKeys.setter(v53);
            v29 = &v73;
            v73 = 4;
            lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobSignatures and conformance GKCrypto_GroupBlob.GroupBlobSignatures();
            v20 = v33;
            KeyedDecodingContainer.decode<A>(_:forKey:)();
            v30 = v20;
            v31 = v20;
            if (!v20)
            {
              GKCrypto_GroupBlob.groupBlobSignatures.setter(v50);
              (*(void (**)(char *, uint64_t))(v59 + 8))(v67, v58);
              outlined init with copy of GKCrypto_GroupBlob(v65, v47);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
              return outlined destroy of GKCrypto_GroupBlob(v65);
            }
            v23 = v31;
            (*(void (**)(char *, uint64_t))(v59 + 8))(v67, v58);
            v28 = v23;
          }
        }
      }
    }
  }
  v22 = v28;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
  return outlined destroy of GKCrypto_GroupBlob(v65);
}

uint64_t GKCrypto_GroupBlob.serializeForGroupBlobHash(associatedData:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v52 = a1;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v31 = 0;
  v28 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v46 = (uint64_t)&v27 - v28;
  v29 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v43 = (uint64_t *)((char *)&v27 - v29);
  v30 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v40 = (uint64_t)&v27 - v30;
  v32 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v31);
  v37 = (char *)&v27 - v32;
  v33 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys() - 8) + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v34 = (char *)&v27 - v33;
  v59 = v6;
  v58 = v1;
  v51 = MEMORY[0x24BDCDDE8];
  v50 = _allocateUninitializedArray<A>(_:)();
  v48 = v7;
  outlined init with copy of Data((uint64_t *)(v1 + 8), v7);
  outlined init with copy of Data((uint64_t *)(v1 + 24), v48 + 2);
  GKCrypto_GroupBlob.randomizedVerificationKeys.getter(v34);
  v36 = GKCrypto_GroupBlob.RandomizedVerificationKeys.serializeForSignature()();
  v35 = v8;
  outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v34);
  v9 = v35;
  v10 = v37;
  v11 = v48;
  v48[4] = v36;
  v11[5] = v9;
  GKCrypto_GroupBlob.groupBlobPublicKeys.getter(v10);
  v39 = GKCrypto_GroupBlob.GroupBlobPublicKeys.serializeForSignature()();
  v38 = v12;
  outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v37);
  v13 = v38;
  v14 = (char *)v40;
  v15 = v48;
  v48[6] = v39;
  v15[7] = v13;
  GKCrypto_GroupBlob.groupBlobSignatures.getter(v14);
  v41 = *(_QWORD *)(v40 + 16);
  v42 = *(_QWORD *)(v40 + 24);
  outlined copy of Data._Representation(v41, v42);
  outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures(v40);
  v16 = v42;
  v17 = (char *)v43;
  v18 = v48;
  v48[8] = v41;
  v18[9] = v16;
  GKCrypto_GroupBlob.groupBlobSignatures.getter(v17);
  v44 = *v43;
  v45 = v43[1];
  outlined copy of Data._Representation(v44, v45);
  outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v43);
  v19 = v45;
  v20 = (char *)v46;
  v21 = v48;
  v48[10] = v44;
  v21[11] = v19;
  GKCrypto_GroupBlob.groupBlobSignatures.getter(v20);
  v47 = *(_QWORD *)(v46 + 32);
  v49 = *(_QWORD *)(v46 + 40);
  outlined copy of Data._Representation(v47, v49);
  outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures(v46);
  v22 = v48;
  v23 = v49;
  v24 = v50;
  v48[12] = v47;
  v22[13] = v23;
  _finalizeUninitializedArray<A>(_:)();
  v53 = v24;
  v54 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  v57 = v54;
  v55 = lengthEncodeDataArray(_:)(v54);
  v56 = v25;
  swift_bridgeObjectRelease();
  return v55;
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.serializeForSignature()()
{
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  lazy protocol witness table accessor for type [Data] and conformance [A]();
  v2 = Sequence.sorted(by:)();
  outlined destroy of [Data]();
  v1 = lengthEncodeDataArray(_:)(v2);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.serializeForSignature()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = _allocateUninitializedArray<A>(_:)();
  v3 = v1;
  outlined init with copy of Data(v0 + 6, v1);
  outlined init with copy of Data(v0 + 2, v3 + 2);
  outlined init with copy of Data(v0 + 4, v3 + 4);
  outlined init with copy of Data(v4, v3 + 6);
  _finalizeUninitializedArray<A>(_:)();
  v6 = lengthEncodeDataArray(_:)(v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t lengthEncodeDataArray(_:)(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v16 = a1;
  v14 = MEMORY[0x2426334A0](4);
  v15 = v1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  lazy protocol witness table accessor for type [Data] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[Data]>);
    IndexingIterator.next()();
    if ((v13 & 0xF000000000000000) == 0xF000000000000000)
      break;
    Data.count.getter();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v8 = Data.init(bigEndianBytesOf:)(v10);
    v9 = v2;
    Data.append(_:)();
    outlined consume of Data._Representation(v8, v9);
    Data.append(_:)();
    outlined consume of Data._Representation(v12, v13);
  }
  outlined destroy of IndexingIterator<[Data]>();
  Data.count.getter();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v5 = Data.init(bigEndianBytesOf:)(v11);
  v6 = v3;
  Data.replaceSubrange(_:with:)();
  outlined consume of Data._Representation(v5, v6);
  v7 = v14;
  outlined copy of Data._Representation(v14, v15);
  outlined destroy of Data((uint64_t)&v14);
  return v7;
}

uint64_t protocol witness for Decodable.init(from:) in conformance GKCrypto_GroupBlob@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GKCrypto_GroupBlob.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_GroupBlob(uint64_t a1)
{
  return GKCrypto_GroupBlob.encode(to:)(a1);
}

uint64_t GKCrypto_GroupHandle.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String string;
  Swift::Int v7;
  unsigned __int8 v8;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "ephemeralKey";
  *(_QWORD *)(v3 + 8) = 12;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "nonce";
  *(_QWORD *)(v3 + 32) = 5;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "ciphertexts";
  *(_QWORD *)(v3 + 56) = 11;
  *(_BYTE *)(v3 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, string);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_8:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_8;
    case 2:
      v8 = 2;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t GKCrypto_GroupHandle.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  unsigned int v6;

  swift_bridgeObjectRetain();
  v6 = GKCrypto_GroupHandle.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 3)
    return 3;
  else
    return v6;
}

uint64_t GKCrypto_GroupHandle.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t GKCrypto_GroupHandle.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GKCrypto_GroupHandle.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ephemeralKey", 0xCuLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ciphertexts", 0xBuLL, 1)._countAndFlagsBits;
}

uint64_t GKCrypto_GroupHandle.CodingKeys.stringValue.getter(char a1)
{
  return GKCrypto_GroupHandle.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupHandle.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupHandle.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupHandle.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupHandle.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_GroupHandle.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupHandle.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_GroupHandle.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = GKCrypto_GroupHandle.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GKCrypto_GroupHandle.CodingKeys()
{
  char *v0;

  return GKCrypto_GroupHandle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GKCrypto_GroupHandle.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupHandle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GKCrypto_GroupHandle.CodingKeys()
{
  return GKCrypto_GroupHandle.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GKCrypto_GroupHandle.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupHandle.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GKCrypto_GroupHandle.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupHandle.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GKCrypto_GroupHandle.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  _QWORD v40[2];
  char v41;
  _QWORD v42[2];
  uint64_t v43;
  _QWORD *v44;
  char *v45;

  v21 = a1;
  v45 = 0;
  v44 = 0;
  v43 = 0;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GKCrypto_GroupHandle.CodingKeys>);
  v22 = *(_QWORD *)(v31 - 8);
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)v8 - v23;
  v45 = (char *)v8 - v23;
  v44 = v2;
  v43 = v1;
  v24 = v2[3];
  v25 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v24);
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v28 = *v27;
  v29 = v27[1];
  outlined copy of Data._Representation(v28, v29);
  v33 = v42;
  v42[0] = v28;
  v42[1] = v29;
  v30 = &v41;
  v41 = 0;
  v3 = lazy protocol witness table accessor for type Data and conformance Data();
  v4 = v32;
  v34 = v3;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v35 = v4;
  v36 = v4;
  if (v4)
  {
    v9 = v36;
    outlined destroy of Data((uint64_t)v42);
    result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v26, v31);
    v10 = v9;
  }
  else
  {
    outlined destroy of Data((uint64_t)v42);
    v17 = v27[2];
    v18 = v27[3];
    outlined copy of Data._Representation(v17, v18);
    v5 = v35;
    v40[0] = v17;
    v40[1] = v18;
    v39 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v19 = v5;
    v20 = v5;
    if (v5)
    {
      v8[2] = v20;
      outlined destroy of Data((uint64_t)v40);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v26, v31);
    }
    else
    {
      outlined destroy of Data((uint64_t)v40);
      v11 = v27[4];
      swift_bridgeObjectRetain();
      v14 = &v38;
      v38 = v11;
      v12 = &v37;
      v37 = 2;
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GKCrypto_GroupHandle.CiphertextAndTag]);
      lazy protocol witness table accessor for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance <A> [A]();
      v6 = v19;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v15 = v6;
      v16 = v6;
      if (v6)
        v8[1] = v16;
      outlined destroy of [GKCrypto_GroupHandle.CiphertextAndTag]();
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v26, v31);
    }
  }
  return result;
}

uint64_t GKCrypto_GroupHandle.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;

  v34 = a2;
  v43 = a1;
  v60 = 0;
  v59 = 0;
  v58 = 0;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GKCrypto_GroupHandle.CodingKeys>);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v44 = (char *)&v19 - v37;
  v60 = (char *)&v19 - v37;
  v39 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupHandle() - 8) + 64);
  v38 = (v39 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v43);
  v41 = (uint64_t)&v19 - v38;
  v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v42 = (uint64_t *)((char *)&v19 - v40);
  v59 = (char *)&v19 - v40;
  v58 = v3;
  GKCrypto_GroupHandle.init()(v4);
  outlined init with take of GKCrypto_GroupHandle(v41, (uint64_t)v42);
  v46 = v43[3];
  v47 = v43[4];
  __swift_project_boxed_opaque_existential_1(v43, v46);
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys();
  v5 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v48 = v5;
  v49 = v5;
  if (v5)
  {
    v23 = v49;
  }
  else
  {
    v30 = &v55;
    v55 = 0;
    v6 = lazy protocol witness table accessor for type Data and conformance Data();
    v7 = v48;
    v31 = v6;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v32 = v7;
    v33 = v7;
    if (v7)
    {
      v22 = v33;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v44, v35);
      v23 = v22;
    }
    else
    {
      v8 = v42;
      v9 = v57;
      v10 = *v42;
      v11 = v42[1];
      *v42 = v56;
      v8[1] = v9;
      outlined consume of Data._Representation(v10, v11);
      v12 = v32;
      v52 = 1;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v28 = v12;
      v29 = v12;
      if (v12)
      {
        v21 = v29;
        (*(void (**)(char *, uint64_t))(v36 + 8))(v44, v35);
        v23 = v21;
      }
      else
      {
        v13 = v42;
        v14 = v54;
        v15 = v42[2];
        v16 = v42[3];
        v42[2] = v53;
        v13[3] = v14;
        outlined consume of Data._Representation(v15, v16);
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GKCrypto_GroupHandle.CiphertextAndTag]);
        v24 = &v50;
        v50 = 2;
        lazy protocol witness table accessor for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance <A> [A]();
        v17 = v28;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v26 = v17;
        v27 = v17;
        if (!v17)
        {
          v42[4] = v51;
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v36 + 8))(v44, v35);
          outlined init with copy of GKCrypto_GroupHandle(v42, v34);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
          return outlined destroy of GKCrypto_GroupHandle((uint64_t)v42);
        }
        v20 = v27;
        (*(void (**)(char *, uint64_t))(v36 + 8))(v44, v35);
        v23 = v20;
      }
    }
  }
  v19 = v23;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  return outlined destroy of GKCrypto_GroupHandle((uint64_t)v42);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GKCrypto_GroupHandle@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return GKCrypto_GroupHandle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_GroupHandle(uint64_t a1)
{
  return GKCrypto_GroupHandle.encode(to:)(a1);
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String string;
  Swift::Int v7;
  unsigned __int8 v8;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "publicKeyHash";
  *(_QWORD *)(v3 + 8) = 13;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "ciphertext";
  *(_QWORD *)(v3 + 32) = 10;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "tag";
  *(_QWORD *)(v3 + 56) = 3;
  *(_BYTE *)(v3 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, string);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_8:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_8;
    case 2:
      v8 = 2;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  unsigned int v6;

  swift_bridgeObjectRetain();
  v6 = GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 3)
    return 3;
  else
    return v6;
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("publicKeyHash", 0xDuLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ciphertext", 0xAuLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("tag", 3uLL, 1)._countAndFlagsBits;
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.stringValue.getter(char a1)
{
  return GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  char *v0;

  return GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  return GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _QWORD v36[2];
  char v37;
  _QWORD v38[2];
  char v39;
  _QWORD v40[2];
  uint64_t v41;
  _QWORD *v42;
  char *v43;

  v19 = a1;
  v43 = 0;
  v42 = 0;
  v41 = 0;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys>);
  v20 = *(_QWORD *)(v29 - 8);
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)v8 - v21;
  v43 = (char *)v8 - v21;
  v42 = v2;
  v41 = v1;
  v22 = v2[3];
  v23 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v22);
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v26 = *v25;
  v27 = v25[1];
  outlined copy of Data._Representation(v26, v27);
  v31 = v40;
  v40[0] = v26;
  v40[1] = v27;
  v28 = &v39;
  v39 = 0;
  v3 = lazy protocol witness table accessor for type Data and conformance Data();
  v4 = v30;
  v32 = v3;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v33 = v4;
  v34 = v4;
  if (v4)
  {
    v9 = v34;
    outlined destroy of Data((uint64_t)v40);
    result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v29);
    v10 = v9;
  }
  else
  {
    outlined destroy of Data((uint64_t)v40);
    v15 = v25[2];
    v16 = v25[3];
    outlined copy of Data._Representation(v15, v16);
    v5 = v33;
    v38[0] = v15;
    v38[1] = v16;
    v37 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = v5;
    v18 = v5;
    if (v5)
    {
      v8[1] = v18;
      outlined destroy of Data((uint64_t)v38);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v29);
    }
    else
    {
      outlined destroy of Data((uint64_t)v38);
      v11 = v25[4];
      v12 = v25[5];
      outlined copy of Data._Representation(v11, v12);
      v6 = v17;
      v36[0] = v11;
      v36[1] = v12;
      v35 = 2;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v13 = v6;
      v14 = v6;
      if (v6)
        v8[0] = v14;
      outlined destroy of Data((uint64_t)v36);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v24, v29);
    }
  }
  return result;
}

uint64_t GKCrypto_GroupHandle.CiphertextAndTag.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;

  v36 = a2;
  v45 = a1;
  v63 = 0;
  v62 = 0;
  v61 = 0;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys>);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v37);
  v46 = (char *)v23 - v39;
  v63 = (char *)v23 - v39;
  v41 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag() - 8) + 64);
  v40 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v45);
  v43 = (char *)v23 - v40;
  v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v44 = (char *)v23 - v42;
  v62 = (char *)v23 - v42;
  v61 = v3;
  GKCrypto_GroupHandle.CiphertextAndTag.init()(v4);
  outlined init with take of GKCrypto_GroupHandle.CiphertextAndTag(v43, v44);
  v48 = v45[3];
  v49 = v45[4];
  __swift_project_boxed_opaque_existential_1(v45, v48);
  lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys();
  v5 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v50 = v5;
  v51 = v5;
  if (v5)
  {
    v27 = v51;
  }
  else
  {
    v32 = &v58;
    v58 = 0;
    v6 = lazy protocol witness table accessor for type Data and conformance Data();
    v7 = v50;
    v33 = v6;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v34 = v7;
    v35 = v7;
    if (v7)
    {
      v26 = v35;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v46, v37);
      v27 = v26;
    }
    else
    {
      v8 = v44;
      v9 = v60;
      v10 = *(_QWORD *)v44;
      v11 = *((_QWORD *)v44 + 1);
      *(_QWORD *)v44 = v59;
      *((_QWORD *)v8 + 1) = v9;
      outlined consume of Data._Representation(v10, v11);
      v12 = v34;
      v55 = 1;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v30 = v12;
      v31 = v12;
      if (v12)
      {
        v25 = v31;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v46, v37);
        v27 = v25;
      }
      else
      {
        v13 = v44;
        v14 = v57;
        v15 = *((_QWORD *)v44 + 2);
        v16 = *((_QWORD *)v44 + 3);
        *((_QWORD *)v44 + 2) = v56;
        *((_QWORD *)v13 + 3) = v14;
        outlined consume of Data._Representation(v15, v16);
        v17 = v30;
        v52 = 2;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v28 = v17;
        v29 = v17;
        if (!v17)
        {
          v18 = v44;
          v19 = v54;
          v20 = *((_QWORD *)v44 + 4);
          v21 = *((_QWORD *)v44 + 5);
          *((_QWORD *)v44 + 4) = v53;
          *((_QWORD *)v18 + 5) = v19;
          outlined consume of Data._Representation(v20, v21);
          (*(void (**)(char *, uint64_t))(v38 + 8))(v46, v37);
          outlined init with copy of GKCrypto_GroupHandle.CiphertextAndTag((uint64_t *)v44, v36);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
          return outlined destroy of GKCrypto_GroupHandle.CiphertextAndTag((uint64_t)v44);
        }
        v24 = v29;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v46, v37);
        v27 = v24;
      }
    }
  }
  v23[1] = v27;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  return outlined destroy of GKCrypto_GroupHandle.CiphertextAndTag((uint64_t)v44);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GKCrypto_GroupHandle.CiphertextAndTag@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return GKCrypto_GroupHandle.CiphertextAndTag.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_GroupHandle.CiphertextAndTag(uint64_t a1)
{
  return GKCrypto_GroupHandle.CiphertextAndTag.encode(to:)(a1);
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String string;
  Swift::Int v7;
  char v8;

  string._countAndFlagsBits = a1;
  string._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "version";
  *(_QWORD *)(v3 + 8) = 7;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "randomizedVerificationKey";
  *(_QWORD *)(v3 + 32) = 25;
  *(_BYTE *)(v3 + 40) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, string);
  swift_bridgeObjectRelease();
  if (!v7)
  {
    v8 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v8 & 1;
  }
  if (v7 == 1)
  {
    v8 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  char v6;

  swift_bridgeObjectRetain();
  v6 = GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 2)
    return 2;
  else
    return v6 & 1;
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("randomizedVerificationKey", 0x19uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1)._countAndFlagsBits;
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.stringValue.getter(char a1)
{
  return GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.rawValue.getter(a1 & 1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;
  uint64_t v3;

  result = GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.rawValue.getter(*v1 & 1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  _BYTE *v0;

  return GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  return GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;

  v14 = a1;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys>);
  v15 = *(_QWORD *)(v20 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v6 - v16;
  v29 = (char *)v6 - v16;
  v28 = v2;
  v27 = v1;
  v17 = v2[3];
  v18 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v17);
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v3 = v21;
  v26 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v22 = v3;
  v23 = v3;
  if (v3)
  {
    v6[1] = v23;
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v20);
  }
  else
  {
    v7 = *v13;
    swift_bridgeObjectRetain();
    v10 = &v25;
    v25 = v7;
    v8 = &v24;
    v24 = 1;
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
    lazy protocol witness table accessor for type [Data] and conformance <A> [A]();
    v4 = v22;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11 = v4;
    v12 = v4;
    if (v4)
      v6[0] = v12;
    outlined destroy of [Data]();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v20);
  }
}

uint64_t GKCrypto_GroupBlob.RandomizedVerificationKeys.init(from:)@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v15 = a2;
  v24 = a1;
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys>);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v25 = (char *)&v8 - v18;
  v35 = (char *)&v8 - v18;
  v20 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys() - 8) + 64);
  v19 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v22 = (char *)&v8 - v19;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v23 = (char *)&v8 - v21;
  v34 = (char *)&v8 - v21;
  v33 = v3;
  GKCrypto_GroupBlob.RandomizedVerificationKeys.init()(v4);
  outlined init with take of GKCrypto_GroupBlob.RandomizedVerificationKeys(v22, v23);
  v27 = v24[3];
  v28 = v24[4];
  __swift_project_boxed_opaque_existential_1(v24, v27);
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys();
  v5 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v29 = v5;
  v30 = v5;
  if (v5)
  {
    v10 = v30;
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
    v11 = &v31;
    v31 = 1;
    lazy protocol witness table accessor for type [Data] and conformance <A> [A]();
    v6 = v29;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v13 = v6;
    v14 = v6;
    if (!v6)
    {
      *(_QWORD *)v23 = v32;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v25, v16);
      outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys(v23, v15);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      return outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v23);
    }
    v9 = v14;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v25, v16);
    v10 = v9;
  }
  v8 = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  return outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v23);
}

uint64_t closure #1 in GKCrypto_GroupBlob.RandomizedVerificationKeys.serializeForSignature()()
{
  lazy protocol witness table accessor for type Data and conformance Data();
  return Sequence<>.lexicographicallyPrecedes<A>(_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type [Data] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Data] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Data] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Data] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Data] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [Data]()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[Data]>()
{
  swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  return GKCrypto_GroupBlob.RandomizedVerificationKeys.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GKCrypto_GroupBlob.RandomizedVerificationKeys(uint64_t a1)
{
  return GKCrypto_GroupBlob.RandomizedVerificationKeys.encode(to:)(a1);
}

uint64_t Data.init(bigEndianBytesOf:)(int a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD v6[3];
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;

  v10 = 0;
  v11 = 0;
  v9 = a1;
  v6[1] = a1;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v4 = MEMORY[0x24BEE44F0];
  FixedWidthInteger.bigEndian.getter();
  v6[0] = v6[2];
  _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t (*)(__n128))closure #1 in Data.init(bigEndianBytesOf:), 0, v4, MEMORY[0x24BEE4078], MEMORY[0x24BDCDDE8], v5, (uint64_t)&v7);
  v3 = v7;
  v2 = v8;
  outlined copy of Data._Representation(v7, v8);
  v10 = v3;
  v11 = v2;
  outlined destroy of Data((uint64_t)&v10);
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CodingKeys, &type metadata for GKCrypto_GroupHandle.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CodingKeys, &type metadata for GKCrypto_GroupHandle.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CodingKeys, &type metadata for GKCrypto_GroupHandle.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CodingKeys, &type metadata for GKCrypto_GroupHandle.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CodingKeys, &type metadata for GKCrypto_GroupHandle.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CodingKeys and conformance GKCrypto_GroupHandle.CodingKeys);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GKCrypto_GroupHandle.CiphertextAndTag]);
    v4 = lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GKCrypto_GroupHandle.CiphertextAndTag]);
    v4 = lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [GKCrypto_GroupHandle.CiphertextAndTag] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag)
  {
    v0 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CiphertextAndTag, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag)
  {
    v0 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CiphertextAndTag, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag)
  {
    v0 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CiphertextAndTag, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag)
  {
    v0 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CiphertextAndTag, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag)
  {
    v0 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CiphertextAndTag, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag)
  {
    v0 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CiphertextAndTag, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag)
  {
    v0 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CiphertextAndTag, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag and conformance GKCrypto_GroupHandle.CiphertextAndTag);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [GKCrypto_GroupHandle.CiphertextAndTag]()
{
  swift_bridgeObjectRelease();
}

uint64_t outlined init with take of GKCrypto_GroupHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  v4 = *(int *)(type metadata accessor for GKCrypto_GroupHandle() + 28);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2 + v4, a1 + v4);
  return a2;
}

uint64_t outlined destroy of GKCrypto_GroupHandle(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease();
  v3 = *(int *)(type metadata accessor for GKCrypto_GroupHandle() + 28);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

uint64_t *outlined init with copy of GKCrypto_GroupHandle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  outlined copy of Data._Representation(*a1, v5);
  *a2 = v4;
  a2[1] = v5;
  v6 = a1[2];
  v7 = a1[3];
  outlined copy of Data._Representation(v6, v7);
  a2[2] = v6;
  a2[3] = v7;
  v8 = a1[4];
  swift_bridgeObjectRetain();
  a2[4] = v8;
  v9 = *(int *)(type metadata accessor for GKCrypto_GroupHandle() + 28);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))((char *)a2 + v9, (char *)a1 + v9);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys, &type metadata for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys, &type metadata for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys, &type metadata for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys, &type metadata for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys, &type metadata for GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys and conformance GKCrypto_GroupHandle.CiphertextAndTag.CodingKeys);
    return v0;
  }
  return v2;
}

char *outlined init with take of GKCrypto_GroupHandle.CiphertextAndTag(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *((_OWORD *)a2 + 1) = *((_OWORD *)a1 + 1);
  *((_OWORD *)a2 + 2) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a2 + 3) = *((_OWORD *)a1 + 3);
  v4 = *(int *)(type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag() + 32);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v4], &a1[v4]);
  return a2;
}

uint64_t outlined destroy of GKCrypto_GroupHandle.CiphertextAndTag(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v3 = *(int *)(type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag() + 32);
  v1 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

uint64_t *outlined init with copy of GKCrypto_GroupHandle.CiphertextAndTag(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = a1[1];
  outlined copy of Data._Representation(*a1, v5);
  *a2 = v4;
  a2[1] = v5;
  v6 = a1[2];
  v7 = a1[3];
  outlined copy of Data._Representation(v6, v7);
  a2[2] = v6;
  a2[3] = v7;
  v8 = a1[4];
  v9 = a1[5];
  outlined copy of Data._Representation(v8, v9);
  a2[4] = v8;
  a2[5] = v9;
  v10 = a1[6];
  v11 = a1[7];
  outlined copy of Data._Representation(v10, v11);
  a2[6] = v10;
  a2[7] = v11;
  v12 = *(int *)(type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag() + 32);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))((char *)a2 + v12, (char *)a1 + v12);
  return a2;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys, &type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys, &type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys, &type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys, &type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys, &type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys and conformance GKCrypto_GroupBlob.RandomizedVerificationKeys.CodingKeys);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [Data] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [Data] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Data] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    v4 = lazy protocol witness table accessor for type Data and conformance Data();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12A0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type [Data] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Data] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    v4 = lazy protocol witness table accessor for type Data and conformance Data();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

char *outlined init with take of GKCrypto_GroupBlob.RandomizedVerificationKeys(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  v4 = *(int *)(type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys() + 20);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v4], &a1[v4]);
  return a2;
}

char *outlined init with copy of GKCrypto_GroupBlob.RandomizedVerificationKeys(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)a1;
  swift_bridgeObjectRetain();
  *(_QWORD *)a2 = v4;
  v5 = *(int *)(type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys() + 20);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(&a2[v5], &a1[v5]);
  return a2;
}

uint64_t closure #1 in Data.init(bigEndianBytesOf:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = Data.init<A>(_:)();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(__n128)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t (*v14)(__n128);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v12[2] = a8;
  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a5;
  v18 = a7;
  v19 = "Fatal error";
  v20 = "UnsafeRawBufferPointer with negative count";
  v21 = "Swift/UnsafeRawBufferPointer.swift";
  v29 = a4;
  v28 = a5;
  v27 = a6;
  v22 = *(_QWORD *)(a5 - 8);
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8.n128_f64[0] = MEMORY[0x24BDAC7A8](a1);
  v24 = (char *)v12 - v23;
  v25 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  if (v25 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v10 = v17;
    v26 = v13 + v25;
    result = v14(v8);
    v12[1] = v10;
    if (v10)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v18, v24, v16);
  }
  return result;
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.init(rawValue:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::String v6;
  Swift::Int v7;
  unsigned __int8 v8;

  v6._countAndFlagsBits = a1;
  v6._object = a2;
  v2 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v3 = "version";
  *(_QWORD *)(v3 + 8) = 7;
  *(_BYTE *)(v3 + 16) = 2;
  *(_QWORD *)(v3 + 24) = "groupVerificationKey";
  *(_QWORD *)(v3 + 32) = 20;
  *(_BYTE *)(v3 + 40) = 2;
  *(_QWORD *)(v3 + 48) = "adminVerificationKey";
  *(_QWORD *)(v3 + 56) = 20;
  *(_BYTE *)(v3 + 64) = 2;
  *(_QWORD *)(v3 + 72) = "groupPublicEncryptionKey";
  *(_QWORD *)(v3 + 80) = 24;
  *(_BYTE *)(v3 + 88) = 2;
  *(_QWORD *)(v3 + 96) = "adminPublicEncryptionKey";
  *(_QWORD *)(v3 + 104) = 24;
  *(_BYTE *)(v3 + 112) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v2, v6);
  swift_bridgeObjectRelease();
  switch(v7)
  {
    case 0:
      v8 = 0;
LABEL_12:
      swift_bridgeObjectRelease();
      return v8;
    case 1:
      v8 = 1;
      goto LABEL_12;
    case 2:
      v8 = 2;
      goto LABEL_12;
    case 3:
      v8 = 3;
      goto LABEL_12;
    case 4:
      v8 = 4;
      goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  return 5;
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.init(stringValue:)(uint64_t a1, void *a2)
{
  unsigned int v6;

  swift_bridgeObjectRetain();
  v6 = GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.init(rawValue:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v6 == 5)
    return 5;
  else
    return v6;
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.intValue.getter()
{
  return 0;
}

void GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.rawValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D3B05E0()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1)._countAndFlagsBits;
}

void GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.stringValue.getter(char a1)
{
  GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.init(rawValue:)(*(_QWORD *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.rawValue.getter(*v1);
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for CodingKey.stringValue.getter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  char *v0;

  GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  return GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD v46[2];
  char v47;
  _QWORD v48[2];
  char v49;
  _QWORD v50[2];
  char v51;
  _QWORD v52[2];
  char v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;

  v35 = a1;
  v56 = 0;
  v55 = 0;
  v54 = 0;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys>);
  v36 = *(_QWORD *)(v41 - 8);
  v37 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v40 = (char *)v10 - v37;
  v56 = (char *)v10 - v37;
  v55 = v2;
  v54 = v1;
  v38 = v2[3];
  v39 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v38);
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v3 = v42;
  v53 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v43 = v3;
  v44 = v3;
  if (v3)
  {
    v13 = v44;
    result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v40, v41);
    v14 = v13;
  }
  else
  {
    v27 = *v34;
    v28 = v34[1];
    outlined copy of Data._Representation(v27, v28);
    v30 = v52;
    v52[0] = v27;
    v52[1] = v28;
    v29 = &v51;
    v51 = 1;
    v4 = lazy protocol witness table accessor for type Data and conformance Data();
    v5 = v43;
    v31 = v4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v32 = v5;
    v33 = v5;
    if (v5)
    {
      v12 = v33;
      outlined destroy of Data((uint64_t)v52);
      result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v40, v41);
      v14 = v12;
    }
    else
    {
      outlined destroy of Data((uint64_t)v52);
      v23 = v34[4];
      v24 = v34[5];
      outlined copy of Data._Representation(v23, v24);
      v6 = v32;
      v50[0] = v23;
      v50[1] = v24;
      v49 = 3;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v25 = v6;
      v26 = v6;
      if (v6)
      {
        v11 = v26;
        outlined destroy of Data((uint64_t)v50);
        result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v40, v41);
        v14 = v11;
      }
      else
      {
        outlined destroy of Data((uint64_t)v50);
        v19 = v34[2];
        v20 = v34[3];
        outlined copy of Data._Representation(v19, v20);
        v7 = v25;
        v48[0] = v19;
        v48[1] = v20;
        v47 = 2;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v21 = v7;
        v22 = v7;
        if (v7)
        {
          v10[1] = v22;
          outlined destroy of Data((uint64_t)v48);
          return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v40, v41);
        }
        else
        {
          outlined destroy of Data((uint64_t)v48);
          v15 = v34[6];
          v16 = v34[7];
          outlined copy of Data._Representation(v15, v16);
          v8 = v21;
          v46[0] = v15;
          v46[1] = v16;
          v45 = 4;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v17 = v8;
          v18 = v8;
          if (v8)
            v10[0] = v18;
          outlined destroy of Data((uint64_t)v46);
          return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v40, v41);
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys, &type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys, &type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys, &type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys, &type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys;
  if (!lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys, &type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t GKCrypto_GroupBlob.GroupBlobPublicKeys.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;

  v44 = a2;
  v53 = a1;
  v74 = 0;
  v73 = 0;
  v72 = 0;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys>);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v45);
  v54 = (char *)v28 - v47;
  v74 = (char *)v28 - v47;
  v49 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys() - 8) + 64);
  v48 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v53);
  v51 = (char *)v28 - v48;
  v50 = (v49 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v52 = (char *)v28 - v50;
  v73 = (char *)v28 - v50;
  v72 = v3;
  GKCrypto_GroupBlob.GroupBlobPublicKeys.init()(v4);
  outlined init with take of GKCrypto_GroupBlob.GroupBlobPublicKeys(v51, v52);
  v56 = v53[3];
  v57 = v53[4];
  __swift_project_boxed_opaque_existential_1(v53, v56);
  lazy protocol witness table accessor for type GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys and conformance GKCrypto_GroupBlob.GroupBlobPublicKeys.CodingKeys();
  v5 = v55;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v58 = v5;
  v59 = v5;
  if (v5)
  {
    v33 = v59;
  }
  else
  {
    v40 = &v69;
    v69 = 1;
    v6 = lazy protocol witness table accessor for type Data and conformance Data();
    v7 = v58;
    v41 = v6;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v42 = v7;
    v43 = v7;
    if (v7)
    {
      v32 = v43;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v54, v45);
      v33 = v32;
    }
    else
    {
      v8 = v52;
      v9 = v71;
      v10 = *(_QWORD *)v52;
      v11 = *((_QWORD *)v52 + 1);
      *(_QWORD *)v52 = v70;
      *((_QWORD *)v8 + 1) = v9;
      outlined consume of Data._Representation(v10, v11);
      v12 = v42;
      v66 = 3;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v38 = v12;
      v39 = v12;
      if (v12)
      {
        v31 = v39;
        (*(void (**)(char *, uint64_t))(v46 + 8))(v54, v45);
        v33 = v31;
      }
      else
      {
        v13 = v52;
        v14 = v68;
        v15 = *((_QWORD *)v52 + 4);
        v16 = *((_QWORD *)v52 + 5);
        *((_QWORD *)v52 + 4) = v67;
        *((_QWORD *)v13 + 5) = v14;
        outlined consume of Data._Representation(v15, v16);
        v17 = v38;
        v63 = 2;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v36 = v17;
        v37 = v17;
        if (v17)
        {
          v30 = v37;
          (*(void (**)(char *, uint64_t))(v46 + 8))(v54, v45);
          v33 = v30;
        }
        else
        {
          v18 = v52;
          v19 = v65;
          v20 = *((_QWORD *)v52 + 2);
          v21 = *((_QWORD *)v52 + 3);
          *((_QWORD *)v52 + 2) = v64;
          *((_QWORD *)v18 + 3) = v19;
          outlined consume of Data._Representation(v20, v21);
          v22 = v36;
          v60 = 4;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v34 = v22;
          v35 = v22;
          if (!v22)
          {
            v23 = v52;
            v24 = v62;
            v25 = *((_QWORD *)v52 + 6);
            v26 = *((_QWORD *)v52 + 7);
            *((_QWORD *)v52 + 6) = v61;
            *((_QWORD *)v23 + 7) = v24;
            outlined consume of Data._Representation(v25, v26);
            (*(void (**)(char *, uint64_t))(v46 + 8))(v54, v45);
            outlined init with copy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t *)v52, v44);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
            return outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v52);
          }
          v29 = v35;
          (*(void (**)(char *, uint64_t))(v46 + 8))(v54, v45);
          v33 = v29;
        }
      }
    }
  }
  v28[1] = v33;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
  return outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v52);
}

char *outlined init with take of GKCrypto_GroupBlob.GroupBlobPublicKeys(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  *((_OWORD *)a2 + 1) = *((_OWORD *)a1 + 1);
  *((_OWORD *)a2 + 2) = *((_OWORD *)a1 + 2);
  *((_OWORD *)a2 + 3) = *((_OWORD *)a1 + 3);
  v4 = *(int *)(type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys() + 32);
  v2 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(&a2[v4], &a1[v4]);
  return a2;
}

