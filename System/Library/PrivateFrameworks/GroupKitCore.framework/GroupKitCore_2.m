uint64_t partial apply for closure #1 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in closure #1 in KeyDistributionService.register(forceKeyRoll:skipServerCheck:skipLocalCheck:)(a1, v1);
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> (@unowned Bool))?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

Swift::Void __swiftcall GPKMetadata.didParseFromServer()()
{
  GPKMetadata.isEncrypted.setter();
}

uint64_t GPKMetadata.authenticatedData.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;

  _allocateUninitializedArray<A>(_:)();
  v5 = v0;
  v1 = GPKMetadata.key.getter();
  MEMORY[0x242634964](v1);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  *v5 = Data.init<A>(_:)();
  v5[1] = v2;
  GPKMetadata.version.getter();
  v5[2] = Data.init(bigEndianBytesOf:)();
  v5[3] = v3;
  _finalizeUninitializedArray<A>(_:)();
  v6 = lengthEncodedDataArray(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t GPKMetadata.encrypt(with:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v32 = a1;
  v38 = 0;
  v37 = 0;
  v27 = 0;
  v28 = type metadata accessor for InternalErrorCode();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v31 = (char *)v9 - v30;
  v33 = type metadata accessor for GPKMetadata();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v36 = (char *)v9 - v35;
  v38 = v2;
  v37 = v1;
  if ((GPKMetadata.isEncrypted.getter() & 1) != 0)
  {
    v9[1] = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v31, *MEMORY[0x24BE3DDE8], v28);
    v10 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    result = v10;
    v11 = v10;
  }
  else
  {
    v19 = v32[3];
    v20 = v32[4];
    v14 = __swift_project_boxed_opaque_existential_1(v32, v19);
    v15 = GPKMetadata.value.getter();
    v16 = v3;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, v25, v33);
    v17 = GPKMetadata.authenticatedData.getter();
    v18 = v4;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
    v5 = v26;
    v6 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(v20 + 8))(v15, v16, v17, v18, v19);
    v21 = v5;
    v22 = v6;
    v23 = v7;
    v24 = v5;
    if (v5)
    {
      v9[0] = v24;
      outlined consume of Data._Representation(v17, v18);
      return outlined consume of Data._Representation(v15, v16);
    }
    else
    {
      v13 = v23;
      v12 = v22;
      outlined consume of Data._Representation(v17, v18);
      outlined consume of Data._Representation(v15, v16);
      GPKMetadata.value.setter();
      return GPKMetadata.isEncrypted.setter();
    }
  }
  return result;
}

uint64_t GPKMetadata.decrypt(with:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v32 = a1;
  v38 = 0;
  v37 = 0;
  v27 = 0;
  v28 = type metadata accessor for InternalErrorCode();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v31 = (char *)v9 - v30;
  v33 = type metadata accessor for GPKMetadata();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v36 = (char *)v9 - v35;
  v38 = v2;
  v37 = v1;
  if ((GPKMetadata.isEncrypted.getter() & 1) != 0)
  {
    v19 = v32[3];
    v20 = v32[4];
    v14 = __swift_project_boxed_opaque_existential_1(v32, v19);
    v15 = GPKMetadata.value.getter();
    v16 = v3;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, v25, v33);
    v17 = GPKMetadata.authenticatedData.getter();
    v18 = v4;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
    v5 = v26;
    v6 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(v20 + 8))(v15, v16, v17, v18, v19);
    v21 = v5;
    v22 = v6;
    v23 = v7;
    v24 = v5;
    if (v5)
    {
      v9[0] = v24;
      outlined consume of Data._Representation(v17, v18);
      return outlined consume of Data._Representation(v15, v16);
    }
    else
    {
      v13 = v23;
      v12 = v22;
      outlined consume of Data._Representation(v17, v18);
      outlined consume of Data._Representation(v15, v16);
      GPKMetadata.value.setter();
      return GPKMetadata.isEncrypted.setter();
    }
  }
  else
  {
    v9[1] = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v31, *MEMORY[0x24BE3DDE0], v28);
    v10 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    result = v10;
    v11 = v10;
  }
  return result;
}

uint64_t GPKMetadata.serializedRepresentationForSigning()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD v32[2];
  uint64_t v33;

  v33 = 0;
  v28 = type metadata accessor for InternalErrorCode();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)v18 - v30;
  v33 = v0;
  if ((GPKMetadata.isEncrypted.getter() & 1) != 0)
  {
    v24 = MEMORY[0x24BDCDDE8];
    v23 = _allocateUninitializedArray<A>(_:)();
    v22 = v1;
    GPKMetadata.version.getter();
    v2 = Data.init(bigEndianBytesOf:)();
    v3 = v22;
    *v22 = v2;
    v3[1] = v4;
    v5 = GPKMetadata.key.getter();
    v18[5] = v6;
    v19 = MEMORY[0x242634964](v5);
    v20 = v7;
    swift_bridgeObjectRelease();
    v21 = v32;
    v32[0] = v19;
    v32[1] = v20;
    lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
    v8 = Data.init<A>(_:)();
    v9 = v22;
    v22[2] = v8;
    v9[3] = v10;
    v11 = GPKMetadata.value.getter();
    v12 = v22;
    v13 = v11;
    v14 = v23;
    v22[4] = v13;
    v12[5] = v15;
    _finalizeUninitializedArray<A>(_:)();
    v25 = v14;
    v26 = lengthEncodedDataArray(_:)();
    v27 = v16;
    swift_bridgeObjectRelease();
    return v26;
  }
  else
  {
    v18[1] = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v31, *MEMORY[0x24BE3DDE8], v28);
    v18[4] = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    return v18[3];
  }
}

BOOL static GroupRepairService.RepairAction.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t GroupRepairService.RepairAction.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t GroupRepairService.RepairAction.hashValue.getter()
{
  lazy protocol witness table accessor for type GroupRepairService.RepairAction and conformance GroupRepairService.RepairAction();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type GroupRepairService.RepairAction and conformance GroupRepairService.RepairAction()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupRepairService.RepairAction and conformance GroupRepairService.RepairAction;
  if (!lazy protocol witness table cache variable for type GroupRepairService.RepairAction and conformance GroupRepairService.RepairAction)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GroupRepairService.RepairAction, &type metadata for GroupRepairService.RepairAction);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupRepairService.RepairAction and conformance GroupRepairService.RepairAction);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type GroupRepairService.RepairAction and conformance GroupRepairService.RepairAction;
  if (!lazy protocol witness table cache variable for type GroupRepairService.RepairAction and conformance GroupRepairService.RepairAction)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for GroupRepairService.RepairAction, &type metadata for GroupRepairService.RepairAction);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type GroupRepairService.RepairAction and conformance GroupRepairService.RepairAction);
    return v0;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GroupRepairService.RepairAction(_BYTE *a1, _BYTE *a2)
{
  return static GroupRepairService.RepairAction.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GroupRepairService.RepairAction()
{
  return GroupRepairService.RepairAction.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupRepairService.RepairAction()
{
  return GroupRepairService.RepairAction.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupRepairService.RepairAction(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

_QWORD *GroupRepairService.groupService.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of GroupService(v1, a1);
}

_QWORD *GroupRepairService.metadataService.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MetadataService((_QWORD *)(v1 + 192), a1);
}

uint64_t GroupRepairService.groupStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupStore(v1 + 328, a1);
}

uint64_t GroupRepairService.invitationStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of InvitationStore(v1 + 368, a1);
}

uint64_t GroupRepairService.userStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserStore(v1 + 408, a1);
}

uint64_t GroupRepairService.convertGroupToInvitation(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[26] = v1;
  v2[25] = a1;
  v2[21] = v2;
  v2[22] = 0;
  v2[23] = 0;
  v3 = type metadata accessor for InternalErrorCode();
  v2[27] = v3;
  v2[28] = *(_QWORD *)(v3 - 8);
  v2[29] = swift_task_alloc();
  v4 = type metadata accessor for LogSubsystem();
  v2[30] = v4;
  v2[31] = *(_QWORD *)(v4 - 8);
  v2[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v2[33] = swift_task_alloc();
  v5 = type metadata accessor for GPKGroupID();
  v2[34] = v5;
  v2[35] = *(_QWORD *)(v5 - 8);
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[22] = a1;
  v2[23] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 168) = *v2;
  v3 += 168;
  v5 = v3 - 152;
  *(_QWORD *)(v3 + 168) = a1;
  *(_QWORD *)(v3 + 176) = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5 + 304))(*(_QWORD *)(v5 + 272), *(_QWORD *)(v5 + 256));
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[21] = *v2;
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GroupRepairService.convertGroupToInvitation(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  v1 = v0[26];
  v0[21] = v0;
  outlined init with copy of GroupStore(v1 + 328, (uint64_t)(v0 + 2));
  v5 = v0[5];
  v6 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
  dispatch thunk of GPKGroup.groupID.getter();
  v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 56) + **(int **)(v6 + 56));
  v2 = (_QWORD *)swift_task_alloc();
  v4[38] = v2;
  *v2 = v4[21];
  v2[1] = GroupRepairService.convertGroupToInvitation(_:);
  return v7(v4[37], v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v7;

  v2 = *v1;
  *(_QWORD *)(v2 + 168) = *v1;
  v2 += 168;
  v7 = (_QWORD *)(v2 - 152);
  *(_QWORD *)(v2 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = v7[35];
    v4 = v7[32];
    v5 = *(void (**)(uint64_t, uint64_t))(v7[33] + 8);
    v7[38] = v5;
    v5(v3, v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, uint64_t, uint64_t);
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;

  v0[21] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v0[17] = dispatch thunk of GPKGroup.invitationBlob.getter();
  v0[18] = v1;
  if ((v0[18] & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data?((uint64_t)(v17 + 17));
    swift_retain();
    swift_release();
    swift_retain();
LABEL_8:
    swift_release();
    goto LABEL_9;
  }
  outlined destroy of Data?((uint64_t)(v17 + 17));
  swift_retain();
  v16 = v17[33];
  dispatch thunk of GPKGroup.invitationID.getter();
  v2 = type metadata accessor for UUID();
  v15 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v16, 1) != 1;
  outlined destroy of UUID?(v17[33]);
  swift_release();
  swift_retain();
  if (!v15)
    goto LABEL_8;
  v17[19] = dispatch thunk of GPKGroup.invitationSenderHandle.getter();
  v17[20] = v3;
  if (v17[20])
  {
    outlined destroy of String?();
    swift_release();
    outlined init with copy of InvitationStore(v17[26] + 368, (uint64_t)(v17 + 7));
    v12 = v17[10];
    v13 = v17[11];
    __swift_project_boxed_opaque_existential_1(v17 + 7, v12);
    dispatch thunk of GPKGroup.groupID.getter();
    v14 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 + 16) + **(int **)(v13 + 16));
    v4 = (_QWORD *)swift_task_alloc();
    v17[41] = v4;
    *v4 = v17[21];
    v4[1] = GroupRepairService.convertGroupToInvitation(_:);
    return v14(v17[36], v12, v13);
  }
  outlined destroy of String?();
  swift_release();
LABEL_9:
  v7 = v17[32];
  v6 = v17[31];
  v8 = v17[30];
  v11 = v17[29];
  v9 = v17[28];
  v10 = v17[27];
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group doesn't sufficient information to be consider as Invitation.", 0x42uLL, 1);
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRepairService.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for InternalError();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BE3DD70], v10);
  InternalError.__allocating_init(_:internalInfo:)();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v17[21] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = v0[42];
  v0[21] = v0;
  v0[24] = v1;
  if (v0[24])
  {
    outlined destroy of GPKGroup?();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v14 + 7));
    v12 = v14[32];
    v11 = v14[31];
    v13 = v14[30];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation already exists in invitation store", 0x2DuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRepairService.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v14[21] + 8))();
  }
  else
  {
    outlined destroy of GPKGroup?();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v14 + 7));
    v5 = v14[32];
    v4 = v14[31];
    v6 = v14[30];
    v7 = v14[26];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group converted to invitation and stored in invitation table", 0x3CuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRepairService.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with copy of InvitationStore(v7 + 368, (uint64_t)(v14 + 12));
    v8 = v14[15];
    v9 = v14[16];
    __swift_project_boxed_opaque_existential_1(v14 + 12, v8);
    v10 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 + 8) + **(int **)(v9 + 8));
    v3 = (_QWORD *)swift_task_alloc();
    v14[44] = v3;
    *v3 = v14[21];
    v3[1] = GroupRepairService.convertGroupToInvitation(_:);
    return v10(v14[25], v8, v9);
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 168) = v0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 168) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[37];
  v2 = v0[35];
  v3 = v0[34];
  v0[21] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[21] + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = (void (*)(uint64_t, uint64_t))v0[40];
  v2 = v0[36];
  v3 = v0[34];
  v0[21] = v0;
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[21] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 168) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 168) + 8))();
}

uint64_t GroupRepairService.repairInvitation(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[157] = v1;
  v2[156] = a1;
  v2[143] = v2;
  v2[144] = 0;
  v2[145] = 0;
  v2[146] = 0;
  bzero(v2 + 2, 0x198uLL);
  v2[148] = 0;
  v2[141] = 0;
  v2[142] = 0;
  v2[150] = 0;
  v2[153] = 0;
  v2[154] = 0;
  v2[155] = 0;
  v3 = type metadata accessor for InternalErrorCode();
  v2[158] = v3;
  v2[159] = *(_QWORD *)(v3 - 8);
  v2[160] = swift_task_alloc();
  v2[161] = swift_task_alloc();
  v4 = type metadata accessor for LogSubsystem();
  v2[162] = v4;
  v2[163] = *(_QWORD *)(v4 - 8);
  v2[164] = swift_task_alloc();
  v5 = type metadata accessor for GPKGroupID();
  v2[165] = v5;
  v2[166] = *(_QWORD *)(v5 - 8);
  v2[167] = swift_task_alloc();
  v2[168] = swift_task_alloc();
  v2[169] = swift_task_alloc();
  v2[170] = swift_task_alloc();
  v2[171] = swift_task_alloc();
  v2[172] = swift_task_alloc();
  v6 = type metadata accessor for GPKGroup.JoinState();
  v2[173] = v6;
  v2[174] = *(_QWORD *)(v6 - 8);
  v2[175] = swift_task_alloc();
  v2[176] = swift_task_alloc();
  v2[144] = a1;
  v2[145] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[143] = *v2;
  v3[182] = a1;
  v3[183] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v5 = *v2 + 16;
  v3[143] = *v2;
  v3[192] = a1;
  v3[193] = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5 + 1488))(*(_QWORD *)(v5 + 1328), *(_QWORD *)(v5 + 1304));
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[143] = *v2;
  v3[197] = a1;
  v3[198] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

uint64_t GroupRepairService.repairInvitation(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)v0[157];
  v3 = v0[156];
  v0[143] = v0;
  swift_retain();
  v0[146] = v3;
  v0[147] = 0;
  outlined init with copy of GroupService(v4, v0 + 53);
  outlined init with copy of MetadataService(v4 + 24, v0 + 77);
  outlined init with copy of GroupStore((uint64_t)(v4 + 41), (uint64_t)(v0 + 94));
  outlined init with copy of UserStore((uint64_t)(v4 + 51), (uint64_t)(v0 + 99));
  GroupRefresher.init(groupService:metadataService:groupStore:userStore:)(v0 + 53, v0 + 77, v0 + 94, v0 + 99, (uint64_t)(v0 + 2));
  v1 = (_QWORD *)swift_task_alloc();
  v5[177] = v1;
  *v1 = v5[143];
  v1[1] = GroupRepairService.repairInvitation(_:);
  return GroupRefresher.refresh(_:)(v5[156]);
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  char v26;

  v19 = v0[180];
  v1 = v0[179];
  v23 = v0[176];
  v22 = v0[175];
  v21 = v0[174];
  v24 = v0[173];
  v0[143] = v0;
  v0[141] = v1;
  v0[142] = v19;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v0[146] = v1;
  swift_release();
  swift_bridgeObjectRelease();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[147] = v19;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of GroupRefresher((uint64_t)(v0 + 2));
  dispatch thunk of GPKGroup.joinState.getter();
  swift_release();
  v20 = *(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104);
  v20(v22, *MEMORY[0x24BE3E4A8], v24);
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v26 = == infix<A>(_:_:)();
  v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v25(v22, v24);
  v25(v23, v24);
  if ((v26 & 1) != 0)
  {
    v14 = v18[157];
    swift_release();
    swift_release();
    outlined init with copy of GroupStore(v14 + 328, (uint64_t)(v18 + 119));
    v15 = v18[122];
    v16 = v18[123];
    __swift_project_boxed_opaque_existential_1(v18 + 119, v15);
    v17 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 + 32) + **(int **)(v16 + 32));
    v2 = (_QWORD *)swift_task_alloc();
    v18[181] = v2;
    *v2 = v18[143];
    v2[1] = GroupRepairService.repairInvitation(_:);
    return v17(v18[179], v18[180], v15, v16);
  }
  else
  {
    v11 = v18[176];
    v10 = v18[175];
    v12 = v18[173];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    dispatch thunk of GPKGroup.joinState.getter();
    v20(v10, *MEMORY[0x24BE3E4B0], v12);
    v13 = == infix<A>(_:_:)();
    v25(v10, v12);
    v25(v11, v12);
    if ((v13 & 1) != 0)
    {
      v9 = v18[179];
      swift_release();
      outlined destroy of [GPKMetadata]?();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v18[143] + 8))(v9);
    }
    else
    {
      v5 = v18[157];
      swift_release();
      outlined init with copy of InvitationStore(v5 + 368, (uint64_t)(v18 + 114));
      v6 = v18[117];
      v7 = v18[118];
      __swift_project_boxed_opaque_existential_1(v18 + 114, v6);
      dispatch thunk of GPKGroup.groupID.getter();
      swift_release();
      v8 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 + 40) + **(int **)(v7 + 40));
      v4 = (_QWORD *)swift_task_alloc();
      v18[186] = v4;
      *v4 = v18[143];
      v4[1] = GroupRepairService.repairInvitation(_:);
      return v8(v18[171], v6, v7);
    }
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, uint64_t, uint64_t);

  v1 = v0[182];
  v4 = v0[157];
  v0[143] = v0;
  v0[155] = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 119));
  outlined init with copy of InvitationStore(v4 + 368, (uint64_t)(v0 + 134));
  v6 = v0[137];
  v7 = v0[138];
  __swift_project_boxed_opaque_existential_1(v0 + 134, v6);
  dispatch thunk of GPKGroup.groupID.getter();
  swift_release();
  v8 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 + 40) + **(int **)(v7 + 40));
  v2 = (_QWORD *)swift_task_alloc();
  v5[184] = v2;
  *v2 = v5[143];
  v2[1] = GroupRepairService.repairInvitation(_:);
  return v8(v5[172], v6, v7);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *v1;
  v7 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 1144) = *v1;
  *(_QWORD *)(v2 + 1480) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v5 = v7[170];
    v4 = v7[164];
    v6 = v7[163];
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 1456);
  *(_QWORD *)(v0 + 1144) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 1072);
  outlined destroy of [GPKMetadata]?();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 1144) + 8))(v2);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  v4 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 1144) = *v1;
  *(_QWORD *)(v2 + 1496) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4[164] + 8))(v4[169], v4[163]);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 1144) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 912);
  outlined destroy of [GPKMetadata]?();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 1144) + 8))(0);
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  void (*v4)(uint64_t, uint64_t);
  Swift::String v5;
  Swift::String v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD, uint64_t, uint64_t);

  v12 = (id)v0[178];
  v10 = v0[170];
  v9 = v0[166];
  v11 = v0[165];
  v14 = v0[164];
  v13 = v0[163];
  v15 = v0[162];
  v16 = v0[157];
  v0[143] = v0;
  outlined destroy of GroupRefresher((uint64_t)(v0 + 2));
  v1 = v12;
  v0[148] = v12;
  v0[139] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[140] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Failed to refresh during repair invitation: ", 0x2CuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  dispatch thunk of GPKGroup.groupID.getter();
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v0[188] = v4;
  v4(v10, v11);
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" error: ", 8uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v0[149] = v12;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRepairService.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of InvitationStore(v16 + 368, (uint64_t)(v0 + 104));
  v18 = v0[107];
  v19 = v0[108];
  __swift_project_boxed_opaque_existential_1(v0 + 104, v18);
  dispatch thunk of GPKGroup.groupID.getter();
  v20 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 + 40) + **(int **)(v19 + 40));
  v7 = (_QWORD *)swift_task_alloc();
  v17[189] = v7;
  *v7 = v17[143];
  v7[1] = GroupRepairService.repairInvitation(_:);
  return v20(v17[169], v18, v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 1144) = *v1;
  *(_QWORD *)(v2 + 1520) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4 + 1488))(*(_QWORD *)(v4 + 1336), *(_QWORD *)(v4 + 1304));
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  v3 = v0[157];
  v0[143] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 104));
  outlined init with copy of GroupStore(v3 + 328, (uint64_t)(v0 + 109));
  v5 = v0[112];
  v6 = v0[113];
  __swift_project_boxed_opaque_existential_1(v0 + 109, v5);
  dispatch thunk of GPKGroup.groupID.getter();
  v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 16) + **(int **)(v6 + 16));
  v1 = (_QWORD *)swift_task_alloc();
  v4[191] = v1;
  *v1 = v4[143];
  v1[1] = GroupRepairService.repairInvitation(_:);
  return v7(v4[168], v5, v6);
}

{
  _QWORD *v0;
  id v2;
  uint64_t v3;

  v2 = (id)v0[178];
  v0[143] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 109));

  outlined destroy of [GPKMetadata]?();
  swift_release();
  v3 = v0[192];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[143] + 8))(v3);
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  id v5;

  v1 = (void (*)(uint64_t, uint64_t))v0[188];
  v5 = (id)v0[178];
  v2 = v0[169];
  v3 = v0[165];
  v0[143] = v0;
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 104));

  outlined destroy of [GPKMetadata]?();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[143] + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  id v5;

  v1 = (void (*)(uint64_t, uint64_t))v0[188];
  v5 = (id)v0[178];
  v2 = v0[168];
  v3 = v0[165];
  v0[143] = v0;
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 109));

  outlined destroy of [GPKMetadata]?();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[143] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, uint64_t, uint64_t);

  v1 = v0[197];
  v4 = v0[157];
  v0[143] = v0;
  v0[154] = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 124));
  outlined init with copy of InvitationStore(v4 + 368, (uint64_t)(v0 + 129));
  v6 = v0[132];
  v7 = v0[133];
  __swift_project_boxed_opaque_existential_1(v0 + 129, v6);
  dispatch thunk of GPKGroup.groupID.getter();
  swift_release();
  v8 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 + 40) + **(int **)(v7 + 40));
  v2 = (_QWORD *)swift_task_alloc();
  v5[199] = v2;
  *v2 = v5[143];
  v2[1] = GroupRepairService.repairInvitation(_:);
  return v8(v5[167], v6, v7);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  v4 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 1144) = *v1;
  *(_QWORD *)(v2 + 1600) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4[164] + 8))(v4[165], v4[163]);
  return swift_task_switch();
}

{
  _QWORD *v0;
  id v2;
  id v3;
  uint64_t v4;

  v4 = v0[197];
  v2 = (id)v0[195];
  v3 = (id)v0[194];
  v0[143] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 129));

  outlined destroy of [GPKMetadata]?();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[143] + 8))(v4);
}

{
  _QWORD *v0;
  id v1;
  id v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  char v13;
  void *v14;
  _QWORD *v15;
  void *v16;

  v0[143] = v0;
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 119));
  v16 = (void *)v0[183];
  v0[194] = v16;
  v1 = v16;
  v0[150] = v16;
  v2 = v16;
  v0[151] = v16;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  type metadata accessor for InternalError();
  if ((swift_dynamicCast() & 1) != 0)
    v14 = (void *)v15[152];
  else
    v14 = 0;
  v15[195] = v14;
  if (v14)
  {
    v10 = v15[161];
    v9 = v15[160];
    v8 = v15[159];
    v11 = v15[158];
    v15[153] = v14;
    InternalError.internalCode.getter();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v9, *MEMORY[0x24BE3DD88], v11);
    lazy protocol witness table accessor for type InternalErrorCode and conformance InternalErrorCode();
    v13 = == infix<A>(_:_:)();
    v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v12(v9, v11);
    v12(v10, v11);
    if ((v13 & 1) != 0)
    {
      outlined init with copy of GroupStore(v15[157] + 328, (uint64_t)(v15 + 124));
      v5 = v15[127];
      v6 = v15[128];
      __swift_project_boxed_opaque_existential_1(v15 + 124, v5);
      v7 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 40) + **(int **)(v6 + 40));
      v3 = (_QWORD *)swift_task_alloc();
      v15[196] = v3;
      *v3 = v15[143];
      v3[1] = GroupRepairService.repairInvitation(_:);
      return v7(v15[179], v15[180], v5, v6);
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  swift_willThrow();

  outlined destroy of [GPKMetadata]?();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v15[143] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  char v16;
  void *v17;
  _QWORD *v18;
  void *v19;

  v1 = v0[172];
  v2 = v0[166];
  v3 = v0[165];
  v0[143] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 134));
  swift_release();
  v19 = (void *)v0[185];
  v0[194] = v19;
  v4 = v19;
  v0[150] = v19;
  v5 = v19;
  v0[151] = v19;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  type metadata accessor for InternalError();
  if ((swift_dynamicCast() & 1) != 0)
    v17 = (void *)v18[152];
  else
    v17 = 0;
  v18[195] = v17;
  if (v17)
  {
    v13 = v18[161];
    v12 = v18[160];
    v11 = v18[159];
    v14 = v18[158];
    v18[153] = v17;
    InternalError.internalCode.getter();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v12, *MEMORY[0x24BE3DD88], v14);
    lazy protocol witness table accessor for type InternalErrorCode and conformance InternalErrorCode();
    v16 = == infix<A>(_:_:)();
    v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v12, v14);
    v15(v13, v14);
    if ((v16 & 1) != 0)
    {
      outlined init with copy of GroupStore(v18[157] + 328, (uint64_t)(v18 + 124));
      v8 = v18[127];
      v9 = v18[128];
      __swift_project_boxed_opaque_existential_1(v18 + 124, v8);
      v10 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 + 40) + **(int **)(v9 + 40));
      v6 = (_QWORD *)swift_task_alloc();
      v18[196] = v6;
      *v6 = v18[143];
      v6[1] = GroupRepairService.repairInvitation(_:);
      return v10(v18[179], v18[180], v8, v9);
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  swift_willThrow();

  outlined destroy of [GPKMetadata]?();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v18[143] + 8))();
}

{
  _QWORD *v0;
  id v2;
  id v3;

  v2 = (id)v0[195];
  v3 = (id)v0[194];
  v0[143] = v0;
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 124));

  outlined destroy of [GPKMetadata]?();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[143] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v5;
  id v6;

  v5 = (id)v0[195];
  v6 = (id)v0[194];
  v1 = v0[167];
  v2 = v0[166];
  v3 = v0[165];
  v0[143] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 129));
  swift_release();

  outlined destroy of [GPKMetadata]?();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[143] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[171];
  v2 = v0[166];
  v3 = v0[165];
  v0[143] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 114));
  outlined destroy of [GPKMetadata]?();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[143] + 8))();
}

uint64_t GroupRepairService.repairInvitation(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[143] = *v3;
  v4[178] = v2;
  v4[179] = a1;
  v4[180] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t outlined destroy of GroupRefresher(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184));
  __swift_destroy_boxed_opaque_existential_1(a1 + 192);
  __swift_destroy_boxed_opaque_existential_1(a1 + 232);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 288);
  __swift_destroy_boxed_opaque_existential_1(a1 + 328);
  __swift_destroy_boxed_opaque_existential_1(a1 + 368);
  return a1;
}

uint64_t GroupRepairService.repairAction(groupID:error:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[25] = v2;
  v3[24] = a2;
  v3[23] = a1;
  v3[13] = v3;
  v3[14] = 0;
  v3[15] = 0;
  v3[16] = 0;
  v3[20] = 0;
  v3[21] = 0;
  v4 = type metadata accessor for GPKGroup.JoinState();
  v3[26] = v4;
  v3[27] = *(_QWORD *)(v4 - 8);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v5 = type metadata accessor for InternalErrorCode();
  v3[30] = v5;
  v3[31] = *(_QWORD *)(v5 - 8);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v6 = type metadata accessor for LogSubsystem();
  v3[34] = v6;
  v3[35] = *(_QWORD *)(v6 - 8);
  v3[36] = swift_task_alloc();
  v3[14] = a1;
  v3[15] = a2;
  v3[16] = v2;
  return swift_task_switch();
}

uint64_t GroupRepairService.repairAction(groupID:error:)()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  void *v17;

  v17 = (void *)v0[24];
  v0[13] = v0;
  v1 = v17;
  v0[17] = v17;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  type metadata accessor for InternalError();
  if ((swift_dynamicCast() & 1) != 0)
    v15 = v16[18];
  else
    v15 = 0;
  v16[37] = v15;
  if (v15)
  {
    v2 = v16[25];
    v16[20] = v15;
    outlined init with copy of GroupStore(v2 + 328, (uint64_t)(v16 + 2));
    v12 = v16[5];
    v13 = v16[6];
    __swift_project_boxed_opaque_existential_1(v16 + 2, v12);
    v14 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 + 16) + **(int **)(v13 + 16));
    v3 = (_QWORD *)swift_task_alloc();
    v16[38] = v3;
    *v3 = v16[13];
    v3[1] = GroupRepairService.repairAction(groupID:error:);
    return v14(v16[23], v12, v13);
  }
  else
  {
    v10 = v16[36];
    v9 = v16[35];
    v11 = v16[34];
    v8 = v16[24];
    v16[7] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v16[8] = v5;
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group is not in need of repair for error: ", 0x2AuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    v16[19] = v8;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRepairService.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v16[13] + 8))(0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  char v35;
  _QWORD *v36;

  v1 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 104) = v0;
  if (v1)
  {
    v25 = v36[39];
    v27 = v36[36];
    v26 = v36[35];
    v28 = v36[34];
    v32 = v36[33];
    v31 = v36[32];
    v30 = v36[31];
    v33 = v36[30];
    v36[21] = v25;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v36 + 2));
    v36[9] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v36[10] = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group with id found in local store: ", 0x24uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    v36[22] = v25;
    type metadata accessor for GPKGroup();
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRepairService.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v27);
    gpklog(_:type:fileID:line:subsystem:)();
    v29 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v29(v27, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    InternalError.internalCode.getter();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104))(v31, *MEMORY[0x24BE3DD30], v33);
    lazy protocol witness table accessor for type InternalErrorCode and conformance InternalErrorCode();
    v35 = == infix<A>(_:_:)();
    v34 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v34(v31, v33);
    v34(v32, v33);
    if ((v35 & 1) == 0)
      goto LABEL_5;
    v21 = v36[29];
    v20 = v36[28];
    v19 = v36[27];
    v22 = v36[26];
    dispatch thunk of GPKGroup.joinState.getter();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v20, *MEMORY[0x24BE3E4D8], v22);
    lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
    v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    v23 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v23(v20, v22);
    v23(v21, v22);
    if ((v24 & 1) != 0)
    {
LABEL_5:
      v10 = v36[36];
      v11 = v36[34];
      v12 = (id)v36[37];
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No repair require for the group", 0x1FuLL, 1);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRepairService.swift", 0x25uLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
      gpklog(_:type:fileID:line:subsystem:)();
      v29(v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

      v18 = 0;
    }
    else
    {
      v15 = v36[36];
      v16 = v36[34];
      v13 = v36[29];
      v14 = v36[26];
      v17 = (id)v36[37];
      v36[11] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v36[12] = v5;
      v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group is inactive in server, but local group doesn't reflect the server state. Group is out of sync with server. Local group state: ", 0x84uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v6);
      swift_bridgeObjectRelease();
      dispatch thunk of GPKGroup.joinState.getter();
      lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v23(v13, v14);
      v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.fault.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRepairService.swift", 0x25uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v15);
      gpklog(_:type:fileID:line:subsystem:)();
      v29(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

      v18 = 1;
    }
  }
  else
  {
    v9 = (id)v36[37];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v36 + 2));

    v18 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v36[13] + 8))(v18 & 1);
}

{
  uint64_t v0;
  uint64_t v1;
  id v3;
  uint64_t v4;

  v3 = *(id *)(v0 + 296);
  *(_QWORD *)(v0 + 104) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v1 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 104) + 8))(v1);
}

uint64_t GroupRepairService.repairAction(groupID:error:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[13] = *v2;
  v3[39] = a1;
  v3[40] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GroupRepairService.markGroupAsDestroyed(groupID:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[17] = v1;
  v2[16] = a1;
  v2[12] = v2;
  v2[13] = 0;
  v2[14] = 0;
  v2[15] = 0;
  v3 = type metadata accessor for LogSubsystem();
  v2[18] = v3;
  v2[19] = *(_QWORD *)(v3 - 8);
  v2[20] = swift_task_alloc();
  v4 = type metadata accessor for GPKGroup.JoinState();
  v2[21] = v4;
  v2[22] = *(_QWORD *)(v4 - 8);
  v2[23] = swift_task_alloc();
  v2[13] = a1;
  v2[14] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[12] = *v2;
  v3[25] = a1;
  v3[26] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[12] = *v2;
  v3 += 12;
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t GroupRepairService.markGroupAsDestroyed(groupID:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  v1 = v0[17];
  v0[12] = v0;
  outlined init with copy of GroupStore(v1 + 328, (uint64_t)(v0 + 2));
  v5 = v0[5];
  v6 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
  v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 16) + **(int **)(v6 + 16));
  v2 = (_QWORD *)swift_task_alloc();
  v4[24] = v2;
  *v2 = v4[12];
  v2[1] = GroupRepairService.markGroupAsDestroyed(groupID:);
  return v7(v4[16], v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 96) = v0;
  if (v1)
  {
    v12 = v13[25];
    v5 = v13[23];
    v4 = v13[22];
    v6 = v13[21];
    v7 = v13[17];
    v13[15] = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v13 + 2));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v5, *MEMORY[0x24BE3E4D8], v6);
    GPKGroup.setJoinState(_:)();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    outlined init with copy of GroupStore(v7 + 328, (uint64_t)(v13 + 7));
    v9 = v13[10];
    v10 = v13[11];
    __swift_project_boxed_opaque_existential_1(v13 + 7, v9);
    type metadata accessor for GPKMetadata();
    v8 = _allocateUninitializedArray<A>(_:)();
    v13[27] = v8;
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 + 40) + **(int **)(v10 + 40));
    v2 = (_QWORD *)swift_task_alloc();
    v13[28] = v2;
    *v2 = v13[12];
    v2[1] = GroupRepairService.markGroupAsDestroyed(groupID:);
    return v11(v12, v8, v9, v10);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v13 + 2));
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v13[12] + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v0[20];
  v2 = v0[19];
  v4 = v0[18];
  v0[12] = v0;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group is marked as destroyed", 0x1CuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupRepairService.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[12] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 96) + 8))();
}

void *GroupRepairService.init(groupService:metadataService:groupStore:invitationStore:userStore:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, const void *a4@<X3>, const void *a5@<X4>, uint64_t a6@<X8>)
{
  memcpy((void *)a6, a1, 0xC0uLL);
  memcpy((void *)(a6 + 192), a2, 0x88uLL);
  outlined init with take of GroupStore(a3, (void *)(a6 + 328));
  outlined init with take of InvitationStore(a4, (void *)(a6 + 368));
  return outlined init with take of UserStore(a5, (void *)(a6 + 408));
}

unint64_t base witness table accessor for Equatable in GroupRepairService.RepairAction()
{
  return lazy protocol witness table accessor for type GroupRepairService.RepairAction and conformance GroupRepairService.RepairAction();
}

uint64_t initializeBufferWithCopyOfBuffer for GroupRepairService(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for GroupRepairService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184));
  __swift_destroy_boxed_opaque_existential_1(a1 + 192);
  __swift_destroy_boxed_opaque_existential_1(a1 + 232);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 288);
  __swift_destroy_boxed_opaque_existential_1(a1 + 328);
  __swift_destroy_boxed_opaque_existential_1(a1 + 368);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 408);
}

_QWORD *initializeWithCopy for GroupRepairService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v4 = a2[13];
  a1[13] = v4;
  a1[14] = a2[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  v5 = a2[18];
  a1[18] = v5;
  a1[19] = a2[19];
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a1 + 15), (uint64_t)(a2 + 15));
  v15 = a2[20];
  swift_unknownObjectRetain();
  v6 = a2[21];
  a1[20] = v15;
  a1[21] = v6;
  v16 = a2[22];
  v17 = a2[23];
  outlined copy of Data._Representation(v16, v17);
  a1[22] = v16;
  a1[23] = v17;
  v7 = a2[27];
  a1[27] = v7;
  a1[28] = a2[28];
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)(a1 + 24), (uint64_t)(a2 + 24));
  v8 = a2[32];
  a1[32] = v8;
  a1[33] = a2[33];
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(a1 + 29), (uint64_t)(a2 + 29));
  v18 = a2[34];
  swift_unknownObjectRetain();
  v9 = a2[35];
  a1[34] = v18;
  a1[35] = v9;
  v10 = a2[39];
  a1[39] = v10;
  a1[40] = a2[40];
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))((uint64_t)(a1 + 36), (uint64_t)(a2 + 36));
  v11 = a2[44];
  a1[44] = v11;
  a1[45] = a2[45];
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))((uint64_t)(a1 + 41), (uint64_t)(a2 + 41));
  v12 = a2[49];
  a1[49] = v12;
  a1[50] = a2[50];
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))((uint64_t)(a1 + 46), (uint64_t)(a2 + 46));
  v13 = a2[54];
  a1[54] = v13;
  a1[55] = a2[55];
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))((uint64_t)(a1 + 51), (uint64_t)(a2 + 51));
  return a1;
}

_QWORD *assignWithCopy for GroupRepairService(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  __swift_assign_boxed_opaque_existential_1((uint64_t)a1, a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 5), a2 + 5);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 10), a2 + 10);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 15), a2 + 15);
  v5 = a2[20];
  swift_unknownObjectRetain();
  v6 = a2[21];
  a1[20] = v5;
  swift_unknownObjectRelease();
  a1[21] = v6;
  v7 = a2[22];
  v8 = a2[23];
  outlined copy of Data._Representation(v7, v8);
  v2 = a1[22];
  v3 = a1[23];
  a1[22] = v7;
  a1[23] = v8;
  outlined consume of Data._Representation(v2, v3);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 24), a2 + 24);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 29), a2 + 29);
  v9 = a2[34];
  swift_unknownObjectRetain();
  v10 = a2[35];
  a1[34] = v9;
  swift_unknownObjectRelease();
  a1[35] = v10;
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 36), a2 + 36);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 41), a2 + 41);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 46), a2 + 46);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 51), a2 + 51);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy448_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x1C0uLL);
}

_QWORD *assignWithTake for GroupRepairService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  memcpy(a1 + 5, a2 + 5, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 10));
  memcpy(a1 + 10, a2 + 10, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 15));
  memcpy(a1 + 15, a2 + 15, 0x28uLL);
  v6 = a2[21];
  a1[20] = a2[20];
  swift_unknownObjectRelease();
  a1[21] = v6;
  v2 = a2[23];
  v3 = a1[22];
  v4 = a1[23];
  a1[22] = a2[22];
  a1[23] = v2;
  outlined consume of Data._Representation(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 24));
  memcpy(a1 + 24, a2 + 24, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 29));
  memcpy(a1 + 29, a2 + 29, 0x28uLL);
  v7 = a2[35];
  a1[34] = a2[34];
  swift_unknownObjectRelease();
  a1[35] = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 36));
  memcpy(a1 + 36, a2 + 36, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 41));
  memcpy(a1 + 41, a2 + 41, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 46));
  memcpy(a1 + 46, a2 + 46, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 51));
  memcpy(a1 + 51, a2 + 51, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupRepairService(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 448))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for GroupRepairService(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 56;
  if (a2 < 0)
  {
    result[47] = 0;
    result[46] = 0;
    result[45] = 0;
    result[44] = 0;
    result[43] = 0;
    result[42] = 0;
    result[41] = 0;
    result[40] = 0;
    result[39] = 0;
    result[38] = 0;
    result[37] = 0;
    result[36] = 0;
    result[35] = 0;
    result[34] = 0;
    result[33] = 0;
    result[32] = 0;
    result[31] = 0;
    result[30] = 0;
    result[29] = 0;
    result[28] = 0;
    result[27] = 0;
    result[26] = 0;
    result[25] = 0;
    result[24] = 0;
    result[23] = 0;
    result[22] = 0;
    result[21] = 0;
    result[20] = 0;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[55] = 0;
    result[54] = 0;
    result[53] = 0;
    result[52] = 0;
    result[51] = 0;
    result[50] = 0;
    result[49] = 0;
    result[48] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      result[3] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupRepairService()
{
  return &type metadata for GroupRepairService;
}

uint64_t getEnumTagSinglePayload for GroupRepairService.RepairAction(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for GroupRepairService.RepairAction(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for GroupRepairService.RepairAction(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for GroupRepairService.RepairAction(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for GroupRepairService.RepairAction()
{
  return &type metadata for GroupRepairService.RepairAction;
}

uint64_t static FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("doesKeyExist", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys, &type metadata for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys, &type metadata for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys, &type metadata for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys, &type metadata for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys, &type metadata for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("doesKeyExist", 0xCuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  return static FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  return FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  return FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  return FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  return FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.encode(to:)(uint64_t a1, int a2)
{
  _QWORD *v2;
  char v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;

  v7 = a1;
  v13 = a2;
  v19 = 0;
  v18 = 0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys>);
  v8 = *(_QWORD *)(v14 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v6 - v9;
  v19 = v2;
  v18 = v3 & 1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v4 = v15;
  KeyedEncodingContainer.encode(_:forKey:)();
  v16 = v4;
  v17 = v4;
  if (v4)
    v6[1] = v17;
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v14);
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.init(from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  char v5;
  _QWORD v6[3];
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;

  v11 = a1;
  v21 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v6 - v14;
  v21 = v1;
  v17 = v1[3];
  v18 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v17);
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys();
  v2 = v16;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v19 = v2;
  v20 = v2;
  if (v2)
  {
    v6[2] = v20;
    v6[0] = v20;
    __swift_destroy_boxed_opaque_existential_1(v11);
    return v5 & 1;
  }
  else
  {
    v3 = KeyedDecodingContainer.decode(_:forKey:)();
    v8 = 0;
    v9 = v3;
    v10 = 0;
    v7 = v3;
    v22 = v3 & 1;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    __swift_destroy_boxed_opaque_existential_1(v11);
    return v7 & 1;
  }
}

uint64_t static FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyInfos", 8uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys, &type metadata for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys, &type metadata for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys, &type metadata for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys, &type metadata for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys, &type metadata for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyInfos", 8uLL, 1)._countAndFlagsBits;
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.encode(to:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = a1;
  v13 = a2;
  v22 = 0;
  v21 = 0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchUserKeyInfoRequest.KeyNotFound.CodingKeys>);
  v8 = *(_QWORD *)(v14 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v6 - v9;
  v22 = v2;
  v21 = v3;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_bridgeObjectRetain();
  v17 = &v20;
  v20 = v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist]);
  lazy protocol witness table accessor for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance <A> [A]();
  v4 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v18 = v4;
  v19 = v4;
  if (v4)
    v6 = v19;
  outlined destroy of [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist]();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v14);
}

uint64_t FetchUserKeyInfoRequest.KeyNotFound.init(from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v14 = a1;
  v25 = 0;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FetchUserKeyInfoRequest.KeyNotFound.CodingKeys>);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v5 - v17;
  v25 = v1;
  v20 = v1[3];
  v21 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v20);
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys();
  v2 = v19;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v22 = v2;
  v23 = v2;
  if (v2)
  {
    v7 = v23;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist]);
    lazy protocol witness table accessor for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance <A> [A]();
    v3 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v3;
    v13 = v3;
    if (!v3)
    {
      v9 = v24;
      swift_bridgeObjectRetain();
      v8 = &v26;
      v26 = v9;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      __swift_destroy_boxed_opaque_existential_1(v14);
      outlined destroy of FetchUserKeyInfoRequest.KeyNotFound();
      return v9;
    }
    v6 = v13;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v7 = v6;
  }
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1(v14);
  return v10;
}

uint64_t protocol witness for Decodable.init(from:) in conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.init(from:)(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist(uint64_t a1)
{
  _BYTE *v1;

  return FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.encode(to:)(a1, *v1 & 1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  return static FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  return FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  return FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  return FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  return FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchUserKeyInfoRequest.KeyNotFound.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance FetchUserKeyInfoRequest.KeyNotFound@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = FetchUserKeyInfoRequest.KeyNotFound.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FetchUserKeyInfoRequest.KeyNotFound(uint64_t a1)
{
  uint64_t *v1;

  return FetchUserKeyInfoRequest.KeyNotFound.encode(to:)(a1, *v1);
}

uint64_t FetchUserKeyInfoRequest.ExistingKey.gpkUserId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t FetchUserKeyInfoRequest.ExistingKey.keyInfos.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FetchUserKeyInfoRequest.ExistingKey() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for FetchUserKeyInfoRequest.ExistingKey()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for FetchUserKeyInfoRequest.ExistingKey;
  if (!type metadata singleton initialization cache for FetchUserKeyInfoRequest.ExistingKey)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t FetchUserKeyInfoRequest.ExistingKey.phoneNumber.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FetchUserKeyInfoRequest.ExistingKey() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t FetchUserKeyInfoRequest.ExistingKey.email.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for FetchUserKeyInfoRequest.ExistingKey() + 28));
  swift_bridgeObjectRetain();
  return v2;
}

void static FetchUserKeyInfoRequest.ExistingKey.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D46C6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D46C720
                                                                                       + *((int *)qword_23D46C788 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D46C730()
{
  uint64_t v1;

  return v1 == 0;
}

void FetchUserKeyInfoRequest.ExistingKey.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D46C7E8()
{
  return Hasher.combine<A>(_:)();
}

uint64_t FetchUserKeyInfoRequest.ExistingKey.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyInfos", 8uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("phoneNumber", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("email", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t FetchUserKeyInfoRequest.ExistingKey.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t FetchUserKeyInfoRequest.ExistingKey.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.ExistingKey.CodingKeys, &type metadata for FetchUserKeyInfoRequest.ExistingKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.ExistingKey.CodingKeys, &type metadata for FetchUserKeyInfoRequest.ExistingKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.ExistingKey.CodingKeys, &type metadata for FetchUserKeyInfoRequest.ExistingKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.ExistingKey.CodingKeys, &type metadata for FetchUserKeyInfoRequest.ExistingKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.ExistingKey.CodingKeys, &type metadata for FetchUserKeyInfoRequest.ExistingKey.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t FetchUserKeyInfoRequest.ExistingKey.CodingKeys.intValue.getter()
{
  return 0;
}

void FetchUserKeyInfoRequest.ExistingKey.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D46CC48()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys(char *a1)
{
  char v1;

  static FetchUserKeyInfoRequest.ExistingKey.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys()
{
  return FetchUserKeyInfoRequest.ExistingKey.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys(uint64_t a1)
{
  char *v1;

  FetchUserKeyInfoRequest.ExistingKey.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys()
{
  char *v0;

  FetchUserKeyInfoRequest.ExistingKey.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchUserKeyInfoRequest.ExistingKey.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys()
{
  return FetchUserKeyInfoRequest.ExistingKey.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchUserKeyInfoRequest.ExistingKey.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FetchUserKeyInfoRequest.ExistingKey.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *UserKeyInfo;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;

  v31 = a1;
  v54 = 0;
  v53 = 0;
  v41 = type metadata accessor for GPKUserID();
  v37 = *(_QWORD *)(v41 - 8);
  v30 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)v9 - v30;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchUserKeyInfoRequest.ExistingKey.CodingKeys>);
  v32 = *(_QWORD *)(v40 - 8);
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)v9 - v33;
  v54 = v2;
  v53 = v1;
  v34 = v2[3];
  v35 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v34);
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v38, v41);
  v39 = &v52;
  v52 = 0;
  lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v3 = v42;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v44 = v3;
  v45 = v3;
  if (v3)
  {
    v11 = v45;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v41);
    result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, v40);
    v12 = v11;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v41);
    UserKeyInfo = (int *)type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
    v24 = *(_QWORD *)(v38 + UserKeyInfo[5]);
    swift_bridgeObjectRetain();
    v27 = &v51;
    v51 = v24;
    v25 = &v50;
    v50 = 1;
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UserKeyInfo]);
    lazy protocol witness table accessor for type [UserKeyInfo] and conformance <A> [A]();
    v4 = v44;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v28 = v4;
    v29 = v4;
    if (v4)
    {
      v10 = v29;
      outlined destroy of [UserKeyInfo]();
      result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, v40);
      v12 = v10;
    }
    else
    {
      outlined destroy of [UserKeyInfo]();
      v16 = *(_QWORD *)(v38 + UserKeyInfo[6]);
      swift_bridgeObjectRetain();
      v19 = &v49;
      v49 = v16;
      v17 = &v48;
      v48 = 2;
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      v5 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
      v6 = v28;
      v20 = v5;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v21 = v6;
      v22 = v6;
      if (v6)
      {
        v9[2] = v22;
        outlined destroy of [String]();
        return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, v40);
      }
      else
      {
        outlined destroy of [String]();
        v7 = v21;
        v13 = *(_QWORD *)(v38 + UserKeyInfo[7]);
        swift_bridgeObjectRetain();
        v47 = v13;
        v46 = 3;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v14 = v7;
        v15 = v7;
        if (v7)
          v9[1] = v15;
        outlined destroy of [String]();
        return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, v40);
      }
    }
  }
  return result;
}

uint64_t FetchUserKeyInfoRequest.ExistingKey.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int *UserKeyInfo;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  char v62;

  v35 = a2;
  v44 = a1;
  v61 = 0;
  v40 = 0;
  v36 = type metadata accessor for GPKUserID();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)v15 - v38;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FetchUserKeyInfoRequest.ExistingKey.CodingKeys>);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v48 = (char *)v15 - v43;
  UserKeyInfo = (int *)type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  v46 = (*(_QWORD *)(*((_QWORD *)UserKeyInfo - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v44);
  v47 = (uint64_t)v15 - v46;
  v62 = 0;
  v61 = v2;
  v50 = v2[3];
  v51 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v50);
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys();
  v3 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v52 = v3;
  v53 = v3;
  if (v3)
  {
    v19 = v53;
  }
  else
  {
    v32 = &v60;
    v60 = 0;
    lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v4 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v33 = v4;
    v34 = v4;
    if (v4)
    {
      v18 = v34;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
      v19 = v18;
    }
    else
    {
      v27 = 1;
      v62 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v47, v39, v36);
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UserKeyInfo]);
      v28 = &v58;
      v58 = v27;
      lazy protocol witness table accessor for type [UserKeyInfo] and conformance <A> [A]();
      v5 = v33;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v30 = v5;
      v31 = v5;
      if (v5)
      {
        v17 = v31;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
        v19 = v17;
      }
      else
      {
        v6 = UserKeyInfo[5];
        v62 = 3;
        *(_QWORD *)(v47 + v6) = v59;
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        v22 = &v56;
        v56 = 2;
        v7 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
        v8 = v30;
        v24 = v7;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v25 = v8;
        v26 = v8;
        if (!v8)
        {
          v9 = UserKeyInfo[6];
          v62 = 7;
          *(_QWORD *)(v47 + v9) = v57;
          v54 = 3;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v20 = 0;
          v21 = 0;
          v10 = v41;
          v11 = v48;
          v12 = v42;
          v13 = UserKeyInfo[7];
          v62 = 15;
          *(_QWORD *)(v47 + v13) = v55;
          (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v10);
          outlined init with copy of FetchUserKeyInfoRequest.ExistingKey(v47, v35);
          __swift_destroy_boxed_opaque_existential_1(v44);
          return outlined destroy of FetchUserKeyInfoRequest.ExistingKey(v47);
        }
        v16 = v26;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
        v19 = v16;
      }
    }
  }
  v15[1] = v19;
  result = __swift_destroy_boxed_opaque_existential_1(v44);
  if ((v62 & 1) != 0)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v47, v36);
  if ((v62 & 2) != 0)
  {
    result = v47 + UserKeyInfo[5];
    outlined destroy of [UserKeyInfo]();
  }
  if ((v62 & 4) != 0)
  {
    result = v47 + UserKeyInfo[6];
    outlined destroy of [String]();
  }
  return result;
}

uint64_t outlined init with copy of FetchUserKeyInfoRequest.ExistingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int *UserKeyInfo;
  uint64_t v11;
  uint64_t v12;

  v2 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  UserKeyInfo = (int *)type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  v4 = UserKeyInfo[5];
  v5 = *(_QWORD *)(a1 + v4);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + v4) = v5;
  v7 = UserKeyInfo[6];
  v8 = *(_QWORD *)(a1 + v7);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + v7) = v8;
  v11 = UserKeyInfo[7];
  v12 = *(_QWORD *)(a1 + v11);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(a2 + v11) = v12;
  return result;
}

int *FetchUserKeyInfoRequest.ExistingKey.init(gpkUserId:keyInfos:phoneNumber:email:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int *result;

  v5 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a5, a1);
  result = (int *)type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  *(_QWORD *)(a5 + result[5]) = a2;
  *(_QWORD *)(a5 + result[6]) = a3;
  *(_QWORD *)(a5 + result[7]) = a4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance FetchUserKeyInfoRequest.ExistingKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FetchUserKeyInfoRequest.ExistingKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FetchUserKeyInfoRequest.ExistingKey(uint64_t a1)
{
  return FetchUserKeyInfoRequest.ExistingKey.encode(to:)(a1);
}

uint64_t FetchUserKeyInfoRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t UserKeyInfo;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;
  id v48;
  char v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  char v53[8];
  char v54[8];
  uint64_t v55;
  char *v56;
  char *v57;

  v28 = a2;
  v39 = a1;
  v57 = 0;
  v56 = 0;
  v55 = 0;
  v52 = 0;
  v49 = 0;
  v34 = 0;
  v29 = type metadata accessor for InternalErrorCode();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)v9 - v31;
  v33 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FetchUserKeyInfoRequest.ExistingKey?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v44 = (uint64_t)v9 - v33;
  UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  v36 = *(_QWORD *)(UserKeyInfo - 8);
  v37 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v38 = (uint64_t)v9 - v37;
  v57 = (char *)v9 - v37;
  v40 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for FetchUserKeyInfoRequest.Response() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v39);
  v41 = (char *)v9 - v40;
  v42 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v43 = (char *)v9 - v42;
  v56 = (char *)v9 - v42;
  v55 = v4;
  v46 = v54;
  outlined init with copy of Decoder(v4, (uint64_t)v54);
  v5 = v45;
  FetchUserKeyInfoRequest.ExistingKey.init(from:)((uint64_t)v46, v44);
  v47 = (uint64_t)v5;
  v48 = v5;
  if (v5)
  {
    v10 = 0;

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v44, 1, 1, UserKeyInfo);
    v27 = v10;
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v36 + 56))(v44, 0, 1, UserKeyInfo);
    v27 = v47;
  }
  v26 = v27;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v44, 1, UserKeyInfo) != 1)
  {
    outlined init with take of FetchUserKeyInfoRequest.ExistingKey(v44, v38);
    outlined init with copy of FetchUserKeyInfoRequest.ExistingKey(v38, (uint64_t)v41);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v41, 0, 1, UserKeyInfo);
    outlined init with take of FetchUserKeyInfoRequest.Response(v41, v43);
    outlined destroy of FetchUserKeyInfoRequest.ExistingKey(v38);
    v21 = v26;
LABEL_13:
    v11 = v21;
    outlined init with copy of FetchUserKeyInfoRequest.Response(v43, v28);
    __swift_destroy_boxed_opaque_existential_1(v39);
    return outlined destroy of FetchUserKeyInfoRequest.Response((uint64_t)v43);
  }
  outlined destroy of FetchUserKeyInfoRequest.ExistingKey?(v44);
  v22 = v53;
  outlined init with copy of Decoder(v39, (uint64_t)v53);
  v6 = v26;
  v7 = FetchUserKeyInfoRequest.KeyNotFound.init(from:)((uint64_t)v22);
  v23 = v6;
  v24 = v7;
  v25 = v6;
  if (v6)
  {
    v14 = v25;
  }
  else
  {
    v17 = v24;
    v52 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19 = &v50;
    v50 = v17;
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist]);
    lazy protocol witness table accessor for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist]();
    v20 = v51;
    if (v51 == 2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v16 = v20;
      v15 = v20;
      v49 = v20 & 1;
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v41, 1, 1, UserKeyInfo);
        outlined init with take of FetchUserKeyInfoRequest.Response(v41, v43);
        swift_bridgeObjectRelease();
        v21 = v23;
        goto LABEL_13;
      }
    }
    v12 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v32, *MEMORY[0x24BE3DDC8], v29);
    v13 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    v14 = v13;
  }
  v9[1] = v14;
  return __swift_destroy_boxed_opaque_existential_1(v39);
}

uint64_t type metadata accessor for FetchUserKeyInfoRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for FetchUserKeyInfoRequest.Response;
  if (!type metadata singleton initialization cache for FetchUserKeyInfoRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t outlined destroy of FetchUserKeyInfoRequest.ExistingKey?(uint64_t a1)
{
  uint64_t v1;
  uint64_t UserKeyInfo;

  UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(UserKeyInfo - 8) + 48))(a1, 1))
  {
    v1 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance [A];
  if (!lazy protocol witness table cache variable for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist]()
{
  swift_bridgeObjectRelease();
}

char *outlined init with take of FetchUserKeyInfoRequest.Response(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *UserKeyInfo;
  uint64_t v8;

  UserKeyInfo = (int *)type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  v8 = *((_QWORD *)UserKeyInfo - 1);
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 48))(a1, 1))
  {
    v3 = type metadata accessor for FetchUserKeyInfoRequest.Response();
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    v2 = type metadata accessor for GPKUserID();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    *(_QWORD *)&a2[UserKeyInfo[5]] = *(_QWORD *)&a1[UserKeyInfo[5]];
    *(_QWORD *)&a2[UserKeyInfo[6]] = *(_QWORD *)&a1[UserKeyInfo[6]];
    *(_QWORD *)&a2[UserKeyInfo[7]] = *(_QWORD *)&a1[UserKeyInfo[7]];
    (*(void (**)(void))(v8 + 56))();
  }
  return a2;
}

BOOL static FetchUserKeyInfoRequest.Response.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t FetchUserKeyInfoRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t FetchUserKeyInfoRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("doesNotExist", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyExist", 8uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t FetchUserKeyInfoRequest.Response.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t FetchUserKeyInfoRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.CodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.CodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.CodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.CodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.CodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t FetchUserKeyInfoRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchUserKeyInfoRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyExist", 8uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("doesNotExist", 0xCuLL, 1)._countAndFlagsBits;
}

uint64_t FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t static FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_0", 2uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("_0", 2uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FetchUserKeyInfoRequest.Response.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static FetchUserKeyInfoRequest.Response.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FetchUserKeyInfoRequest.Response.CodingKeys()
{
  return FetchUserKeyInfoRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FetchUserKeyInfoRequest.Response.CodingKeys()
{
  return FetchUserKeyInfoRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FetchUserKeyInfoRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchUserKeyInfoRequest.Response.CodingKeys()
{
  _BYTE *v0;

  return FetchUserKeyInfoRequest.Response.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FetchUserKeyInfoRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchUserKeyInfoRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchUserKeyInfoRequest.Response.CodingKeys()
{
  return FetchUserKeyInfoRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchUserKeyInfoRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchUserKeyInfoRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchUserKeyInfoRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchUserKeyInfoRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys()
{
  return FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys.stringValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys()
{
  return FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys();
  return CodingKey.description.getter();
}

unint64_t lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys, &type metadata for FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  return static FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  return FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  return FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  return FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  return FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FetchUserKeyInfoRequest.Response.KeyExistCodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FetchUserKeyInfoRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t UserKeyInfo;
  char *v34;
  char v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;

  v24 = a1;
  v38 = 0;
  v37 = 0;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchUserKeyInfoRequest.Response.KeyExistCodingKeys>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v6 - v14;
  v18 = 0;
  UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  v32 = *(_QWORD *)(UserKeyInfo - 8);
  v16 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](UserKeyInfo);
  v17 = (uint64_t)v6 - v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys>);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)v6 - v21;
  v2 = type metadata accessor for FetchUserKeyInfoRequest.Response();
  v23 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v34 = (char *)v6 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FetchUserKeyInfoRequest.Response.CodingKeys>);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)v6 - v27;
  v38 = v3;
  v37 = v1;
  v29 = v3[3];
  v30 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v29);
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of FetchUserKeyInfoRequest.Response(v31, v34);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v34, 1, UserKeyInfo) == 1)
  {
    v9 = &v35;
    v35 = 0;
    lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    v10 = v11;
LABEL_5:
    v6[2] = v10;
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  }
  outlined init with take of FetchUserKeyInfoRequest.ExistingKey((uint64_t)v34, v17);
  v6[3] = &v36;
  v36 = 1;
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  lazy protocol witness table accessor for type FetchUserKeyInfoRequest.ExistingKey and conformance FetchUserKeyInfoRequest.ExistingKey();
  v4 = v11;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v7 = v4;
  v8 = v4;
  if (!v4)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    outlined destroy of FetchUserKeyInfoRequest.ExistingKey(v17);
    v10 = v7;
    goto LABEL_5;
  }
  v6[1] = v8;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  outlined destroy of FetchUserKeyInfoRequest.ExistingKey(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
}

unint64_t lazy protocol witness table accessor for type FetchUserKeyInfoRequest.ExistingKey and conformance FetchUserKeyInfoRequest.ExistingKey()
{
  uint64_t UserKeyInfo;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey and conformance FetchUserKeyInfoRequest.ExistingKey;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey and conformance FetchUserKeyInfoRequest.ExistingKey)
  {
    UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.ExistingKey, UserKeyInfo);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.ExistingKey and conformance FetchUserKeyInfoRequest.ExistingKey);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance FetchUserKeyInfoRequest.Response@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return FetchUserKeyInfoRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FetchUserKeyInfoRequest.Response(uint64_t a1)
{
  return FetchUserKeyInfoRequest.Response.encode(to:)(a1);
}

void variable initialization expression of FetchUserKeyInfoRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t FetchUserKeyInfoRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t FetchUserKeyInfoRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*FetchUserKeyInfoRequest.bodyContent.modify())()
{
  return FetchUserKeyInfoRequest.bodyContent.modify;
}

double FetchUserKeyInfoRequest.init(keyProtocolVersion:)@<D0>(int a1@<W0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 *v4;
  __int128 *v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;

  v15 = a1;
  v16 = 0uLL;
  v17 = 0uLL;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v9 = v2;
  v3 = HTTPBodyKey.keyNameSpace.unsafeMutableAddressor();
  outlined init with copy of String(v3, (_QWORD *)v9);
  v4 = HTTPBodyValue.keyNameSpaceValue.unsafeMutableAddressor();
  v7 = *(_QWORD *)v4;
  v8 = *((_QWORD *)v4 + 1);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v9 + 40) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = v8;
  v5 = HTTPBodyKey.keyProtocolVersion.unsafeMutableAddressor();
  outlined init with copy of String(v5, (_QWORD *)(v9 + 48));
  *(_QWORD *)(v9 + 88) = MEMORY[0x24BEE44F0];
  *(_DWORD *)(v9 + 64) = a1;
  _finalizeUninitializedArray<A>(_:)();
  v11 = Dictionary.init(dictionaryLiteral:)();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(_QWORD *)&v13 = v11;
  outlined assign with take of Any?(&v13, (uint64_t)&v16);
  *a2 = v16;
  result = *(double *)&v17;
  a2[1] = v17;
  return result;
}

uint64_t FetchUserKeyInfoRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.fetchUserKeyInfo.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in FetchUserKeyInfoRequest()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response and conformance FetchUserKeyInfoRequest.Response();
}

unint64_t lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response and conformance FetchUserKeyInfoRequest.Response()
{
  uint64_t UserKeyInfo;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response and conformance FetchUserKeyInfoRequest.Response;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response and conformance FetchUserKeyInfoRequest.Response)
  {
    UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.Response, UserKeyInfo);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.Response and conformance FetchUserKeyInfoRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance FetchUserKeyInfoRequest()
{
  return FetchUserKeyInfoRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance FetchUserKeyInfoRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance FetchUserKeyInfoRequest@<X0>(uint64_t a1@<X8>)
{
  return FetchUserKeyInfoRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance FetchUserKeyInfoRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for FetchUserKeyInfoRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for FetchUserKeyInfoRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for FetchUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for FetchUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for FetchUserKeyInfoRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchUserKeyInfoRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchUserKeyInfoRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchUserKeyInfoRequest()
{
  return &type metadata for FetchUserKeyInfoRequest;
}

ValueMetadata *type metadata accessor for FetchUserKeyInfoRequest.KeyNotFound()
{
  return &type metadata for FetchUserKeyInfoRequest.KeyNotFound;
}

uint64_t getEnumTagSinglePayload for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v4 = -1;
      if ((*a1 & 0xFE) != 0)
        v4 = *a1 & 1 | ((*a1 & 0xFE) - 2) & 0x7FFFFFFF;
      v5 = v4;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = (a2 - 1) & 1 | (2 * (((a2 - 1) >> 1) + 1));
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist()
{
  return &type metadata for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist;
}

uint64_t getEnumTagSinglePayload for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  return &type metadata for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  return &type metadata for FetchUserKeyInfoRequest.KeyNotFound.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for FetchUserKeyInfoRequest.ExistingKey(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    v3 = type metadata accessor for GPKUserID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v5 = a3[5];
    v6 = *(uint64_t *)((char *)a2 + v5);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v5) = v6;
    v7 = a3[6];
    v8 = *(uint64_t *)((char *)a2 + v7);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v7) = v8;
    v9 = a3[7];
    v10 = *(uint64_t *)((char *)a2 + v9);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v9) = v10;
    return (unint64_t)a1;
  }
}

uint64_t destroy for FetchUserKeyInfoRequest.ExistingKey(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FetchUserKeyInfoRequest.ExistingKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v5 = a3[5];
  v6 = *(_QWORD *)(a2 + v5);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v5) = v6;
  v7 = a3[6];
  v8 = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v7) = v8;
  v12 = a3[7];
  v13 = *(_QWORD *)(a2 + v12);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + v12) = v13;
  return result;
}

uint64_t assignWithCopy for FetchUserKeyInfoRequest.ExistingKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v5 = a3[5];
  v6 = *(_QWORD *)(a2 + v5);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v5) = v6;
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRelease();
  v11 = a3[7];
  v12 = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for FetchUserKeyInfoRequest.ExistingKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = a1;
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return result;
}

uint64_t assignWithTake for FetchUserKeyInfoRequest.ExistingKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchUserKeyInfoRequest.ExistingKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D470DCC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKUserID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20)) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for FetchUserKeyInfoRequest.ExistingKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D470EC4(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKUserID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for FetchUserKeyInfoRequest.ExistingKey()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for FetchUserKeyInfoRequest.ExistingKey.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for FetchUserKeyInfoRequest.ExistingKey.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for FetchUserKeyInfoRequest.ExistingKey.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for FetchUserKeyInfoRequest.ExistingKey.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FetchUserKeyInfoRequest.ExistingKey.CodingKeys()
{
  return &type metadata for FetchUserKeyInfoRequest.ExistingKey.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for FetchUserKeyInfoRequest.Response(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *UserKeyInfo;
  uint64_t v12;
  uint64_t v13;
  uint64_t v17;
  int v18;

  v17 = *(_QWORD *)(a3 - 8);
  v18 = *(_DWORD *)(v17 + 80);
  if ((v18 & 0x20000) != 0)
  {
    v13 = *a2;
    swift_retain();
    *a1 = v13;
    return *a1 + ((v18 + 16) & ~(unint64_t)v18);
  }
  else
  {
    UserKeyInfo = (int *)type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
    v12 = *((_QWORD *)UserKeyInfo - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v12 + 48))(a2, 1))
    {
      memcpy(a1, a2, *(_QWORD *)(v17 + 64));
    }
    else
    {
      v3 = type metadata accessor for GPKUserID();
      (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
      v5 = UserKeyInfo[5];
      v6 = *(uint64_t *)((char *)a2 + v5);
      swift_bridgeObjectRetain();
      *(_QWORD *)((char *)a1 + v5) = v6;
      v7 = UserKeyInfo[6];
      v8 = *(uint64_t *)((char *)a2 + v7);
      swift_bridgeObjectRetain();
      *(_QWORD *)((char *)a1 + v7) = v8;
      v9 = UserKeyInfo[7];
      v10 = *(uint64_t *)((char *)a2 + v9);
      swift_bridgeObjectRetain();
      *(_QWORD *)((char *)a1 + v9) = v10;
      (*(void (**)(void))(v12 + 56))();
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for FetchUserKeyInfoRequest.Response(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t UserKeyInfo;

  UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(UserKeyInfo - 8) + 48))(a1, 1);
  if (!(_DWORD)result)
  {
    v2 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for FetchUserKeyInfoRequest.Response(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *UserKeyInfo;
  uint64_t v15;

  UserKeyInfo = (int *)type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  v15 = *((_QWORD *)UserKeyInfo - 1);
  if ((*(unsigned int (**)(char *, uint64_t))(v15 + 48))(a2, 1))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v3 = type metadata accessor for GPKUserID();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v5 = UserKeyInfo[5];
    v6 = *(_QWORD *)&a2[v5];
    swift_bridgeObjectRetain();
    *(_QWORD *)&a1[v5] = v6;
    v7 = UserKeyInfo[6];
    v8 = *(_QWORD *)&a2[v7];
    swift_bridgeObjectRetain();
    *(_QWORD *)&a1[v7] = v8;
    v9 = UserKeyInfo[7];
    v10 = *(_QWORD *)&a2[v9];
    swift_bridgeObjectRetain();
    *(_QWORD *)&a1[v9] = v10;
    (*(void (**)(void))(v15 + 56))();
  }
  return a1;
}

char *assignWithCopy for FetchUserKeyInfoRequest.Response(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int *UserKeyInfo;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, int *);

  UserKeyInfo = (int *)type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  v22 = *((_QWORD *)UserKeyInfo - 1);
  v23 = *(unsigned int (**)(char *, uint64_t, int *))(v22 + 48);
  if (((unsigned int (*)(char *, uint64_t))v23)(a1, 1))
  {
    if (v23(a2, 1, UserKeyInfo))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v4 = type metadata accessor for GPKUserID();
      (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(a1, a2);
      v6 = UserKeyInfo[5];
      v7 = *(_QWORD *)&a2[v6];
      swift_bridgeObjectRetain();
      *(_QWORD *)&a1[v6] = v7;
      v8 = UserKeyInfo[6];
      v9 = *(_QWORD *)&a2[v8];
      swift_bridgeObjectRetain();
      *(_QWORD *)&a1[v8] = v9;
      v10 = UserKeyInfo[7];
      v11 = *(_QWORD *)&a2[v10];
      swift_bridgeObjectRetain();
      *(_QWORD *)&a1[v10] = v11;
      (*(void (**)(void))(v22 + 56))();
    }
  }
  else if (v23(a2, 1, UserKeyInfo))
  {
    outlined destroy of FetchUserKeyInfoRequest.ExistingKey((uint64_t)a1);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v3 = type metadata accessor for GPKUserID();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
    v12 = &a1[UserKeyInfo[5]];
    v13 = *(_QWORD *)&a2[UserKeyInfo[5]];
    swift_bridgeObjectRetain();
    *(_QWORD *)v12 = v13;
    swift_bridgeObjectRelease();
    v14 = &a1[UserKeyInfo[6]];
    v15 = *(_QWORD *)&a2[UserKeyInfo[6]];
    swift_bridgeObjectRetain();
    *(_QWORD *)v14 = v15;
    swift_bridgeObjectRelease();
    v16 = &a1[UserKeyInfo[7]];
    v17 = *(_QWORD *)&a2[UserKeyInfo[7]];
    swift_bridgeObjectRetain();
    *(_QWORD *)v16 = v17;
    swift_bridgeObjectRelease();
  }
  return a1;
}

char *initializeWithTake for FetchUserKeyInfoRequest.Response(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  int *UserKeyInfo;
  uint64_t v9;

  UserKeyInfo = (int *)type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  v9 = *((_QWORD *)UserKeyInfo - 1);
  if ((*(unsigned int (**)(char *, uint64_t))(v9 + 48))(a2, 1))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v3 = type metadata accessor for GPKUserID();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
    *(_QWORD *)&a1[UserKeyInfo[5]] = *(_QWORD *)&a2[UserKeyInfo[5]];
    *(_QWORD *)&a1[UserKeyInfo[6]] = *(_QWORD *)&a2[UserKeyInfo[6]];
    *(_QWORD *)&a1[UserKeyInfo[7]] = *(_QWORD *)&a2[UserKeyInfo[7]];
    (*(void (**)(void))(v9 + 56))();
  }
  return a1;
}

char *assignWithTake for FetchUserKeyInfoRequest.Response(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *UserKeyInfo;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, int *);

  UserKeyInfo = (int *)type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  v10 = *((_QWORD *)UserKeyInfo - 1);
  v11 = *(unsigned int (**)(char *, uint64_t, int *))(v10 + 48);
  if (((unsigned int (*)(char *, uint64_t))v11)(a1, 1))
  {
    if (v11(a2, 1, UserKeyInfo))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v4 = type metadata accessor for GPKUserID();
      (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 32))(a1, a2);
      *(_QWORD *)&a1[UserKeyInfo[5]] = *(_QWORD *)&a2[UserKeyInfo[5]];
      *(_QWORD *)&a1[UserKeyInfo[6]] = *(_QWORD *)&a2[UserKeyInfo[6]];
      *(_QWORD *)&a1[UserKeyInfo[7]] = *(_QWORD *)&a2[UserKeyInfo[7]];
      (*(void (**)(void))(v10 + 56))();
    }
  }
  else if (v11(a2, 1, UserKeyInfo))
  {
    outlined destroy of FetchUserKeyInfoRequest.ExistingKey((uint64_t)a1);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v3 = type metadata accessor for GPKUserID();
    (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
    *(_QWORD *)&a1[UserKeyInfo[5]] = *(_QWORD *)&a2[UserKeyInfo[5]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&a1[UserKeyInfo[6]] = *(_QWORD *)&a2[UserKeyInfo[6]];
    swift_bridgeObjectRelease();
    *(_QWORD *)&a1[UserKeyInfo[7]] = *(_QWORD *)&a2[UserKeyInfo[7]];
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchUserKeyInfoRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D471D90(uint64_t a1, unsigned int a2)
{
  uint64_t UserKeyInfo;
  unsigned int v3;

  UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(UserKeyInfo - 8) + 48))(a1, a2);
  if (v3 > 1)
    return v3 - 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FetchUserKeyInfoRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D471E08(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t UserKeyInfo;
  unsigned int v7;

  if (a2)
    v3 = a2 + 1;
  else
    v3 = 0;
  v7 = v3;
  UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(UserKeyInfo - 8) + 56))(a1, v7, a3);
}

uint64_t getEnumTag for FetchUserKeyInfoRequest.Response(uint64_t a1)
{
  uint64_t UserKeyInfo;

  UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(UserKeyInfo - 8) + 48))(a1, 1);
}

uint64_t destructiveInjectEnumTag for FetchUserKeyInfoRequest.Response(uint64_t a1, unsigned int a2)
{
  uint64_t UserKeyInfo;

  UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(UserKeyInfo - 8) + 56))(a1, a2, 1);
}

uint64_t type metadata completion function for FetchUserKeyInfoRequest.Response()
{
  unint64_t v0;
  uint64_t UserKeyInfo;

  UserKeyInfo = type metadata accessor for FetchUserKeyInfoRequest.ExistingKey();
  if (v0 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return UserKeyInfo;
}

uint64_t getEnumTagSinglePayload for FetchUserKeyInfoRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for FetchUserKeyInfoRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for FetchUserKeyInfoRequest.Response.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for FetchUserKeyInfoRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FetchUserKeyInfoRequest.Response.CodingKeys()
{
  return &type metadata for FetchUserKeyInfoRequest.Response.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys()
{
  return &type metadata for FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys;
}

uint64_t getEnumTagSinglePayload for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  return &type metadata for FetchUserKeyInfoRequest.Response.KeyExistCodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.DoesNotExistCodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in FetchUserKeyInfoRequest.Response.KeyExistCodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.KeyExistCodingKeys and conformance FetchUserKeyInfoRequest.Response.KeyExistCodingKeys();
}

unint64_t base witness table accessor for Equatable in FetchUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.Response.CodingKeys and conformance FetchUserKeyInfoRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchUserKeyInfoRequest.ExistingKey.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchUserKeyInfoRequest.ExistingKey.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys();
}

unint64_t base witness table accessor for Equatable in FetchUserKeyInfoRequest.ExistingKey.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.ExistingKey.CodingKeys and conformance FetchUserKeyInfoRequest.ExistingKey.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys();
}

unint64_t base witness table accessor for Equatable in FetchUserKeyInfoRequest.KeyNotFound.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys();
}

unint64_t base witness table accessor for Equatable in FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys()
{
  return lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist.CodingKeys();
}

unint64_t lazy protocol witness table accessor for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t DoesNotExist;

  v3 = lazy protocol witness table cache variable for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist]);
    DoesNotExist = lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12A0], v2, &DoesNotExist);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t DoesNotExist;

  v3 = lazy protocol witness table cache variable for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist]);
    DoesNotExist = lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v2, &DoesNotExist);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist, &type metadata for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist;
  if (!lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist, &type metadata for FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist and conformance FetchUserKeyInfoRequest.KeyNotFound.DoesNotExist);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of FetchUserKeyInfoRequest.KeyNotFound()
{
  swift_bridgeObjectRelease();
}

void variable initialization expression of CompleteFetchRSVPQueueRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t CompleteFetchRSVPQueueRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t CompleteFetchRSVPQueueRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*CompleteFetchRSVPQueueRequest.bodyContent.modify())()
{
  return CompleteFetchRSVPQueueRequest.bodyContent.modify;
}

uint64_t CompleteFetchRSVPQueueRequest.Body.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t *CompleteFetchRSVPQueueRequest.Body.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t RSVPQueue;

  RSVPQueue = type metadata accessor for CompleteFetchRSVPQueueRequest.Body();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(RSVPQueue + 20)), a1);
}

uint64_t type metadata accessor for CompleteFetchRSVPQueueRequest.Body()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteFetchRSVPQueueRequest.Body;
  if (!type metadata singleton initialization cache for CompleteFetchRSVPQueueRequest.Body)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t CompleteFetchRSVPQueueRequest.Body.signature.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for CompleteFetchRSVPQueueRequest.Body() + 24);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t CompleteFetchRSVPQueueRequest.Body.protobufVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CompleteFetchRSVPQueueRequest.Body() + 28));
}

uint64_t CompleteFetchRSVPQueueRequest.Body.verificationKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for CompleteFetchRSVPQueueRequest.Body() + 32);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t CompleteFetchRSVPQueueRequest.Body.lastKnownRsvpQueueSeqNumber.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CompleteFetchRSVPQueueRequest.Body() + 36));
}

uint64_t CompleteFetchRSVPQueueRequest.Body.nonceTypeInd.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CompleteFetchRSVPQueueRequest.Body() + 40));
}

void static CompleteFetchRSVPQueueRequest.Body.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D473488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D4734F8
                                                                                       + *((int *)qword_23D473590 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D473508()
{
  uint64_t v1;

  return v1 == 0;
}

void CompleteFetchRSVPQueueRequest.Body.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D4735FC()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteFetchRSVPQueueRequest.Body.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  unsigned __int8 v9;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v8 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 0;
LABEL_16:
    swift_bridgeObjectRelease();
    return v9;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 1;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signature", 9uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 2;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("protobufVersion", 0xFuLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 3;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("verificationKey", 0xFuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 4;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("lastKnownRsvpQueueSeqNumber", 0x1BuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 5;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonceTypeInd", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v9 = 6;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 7;
}

uint64_t CompleteFetchRSVPQueueRequest.Body.CodingKeys.init(intValue:)()
{
  return 7;
}

uint64_t CompleteFetchRSVPQueueRequest.Body.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Body.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Body.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Body.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Body.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Body.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteFetchRSVPQueueRequest.Body.CodingKeys.intValue.getter()
{
  return 0;
}

void CompleteFetchRSVPQueueRequest.Body.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D473C5C()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys(char *a1)
{
  char v1;

  static CompleteFetchRSVPQueueRequest.Body.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys()
{
  return CompleteFetchRSVPQueueRequest.Body.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys(uint64_t a1)
{
  char *v1;

  CompleteFetchRSVPQueueRequest.Body.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys()
{
  char *v0;

  CompleteFetchRSVPQueueRequest.Body.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchRSVPQueueRequest.Body.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys()
{
  return CompleteFetchRSVPQueueRequest.Body.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchRSVPQueueRequest.Body.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteFetchRSVPQueueRequest.Body.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *RSVPQueue;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  _QWORD v64[2];
  char v65;
  char v66;
  _QWORD v67[2];
  char v68;
  _QWORD v69[2];
  char v70;
  uint64_t v71;
  _QWORD *v72;

  v46 = a1;
  v72 = 0;
  v71 = 0;
  v56 = type metadata accessor for GPKGroupID();
  v52 = *(_QWORD *)(v56 - 8);
  v45 = (*(_QWORD *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v56);
  v58 = (char *)v14 - v45;
  v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteFetchRSVPQueueRequest.Body.CodingKeys>);
  v47 = *(_QWORD *)(v55 - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v46);
  v51 = (char *)v14 - v48;
  v72 = v2;
  v71 = v1;
  v49 = v2[3];
  v50 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v49);
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v58, v53, v56);
  v54 = &v70;
  v70 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v57;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v59 = v3;
  v60 = v3;
  if (v3)
  {
    v19 = v60;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v58, v56);
    result = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v51, v55);
    v20 = v19;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v58, v56);
    RSVPQueue = (int *)type metadata accessor for CompleteFetchRSVPQueueRequest.Body();
    v4 = (uint64_t *)(v53 + RSVPQueue[5]);
    v39 = *v4;
    v40 = v4[1];
    outlined copy of Data._Representation(v39, v40);
    v42 = v69;
    v69[0] = v39;
    v69[1] = v40;
    v41 = &v68;
    v68 = 1;
    lazy protocol witness table accessor for type Nonce and conformance Nonce();
    v5 = v59;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v43 = v5;
    v44 = v5;
    if (v5)
    {
      v18 = v44;
      outlined destroy of Nonce((uint64_t)v69);
      result = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v51, v55);
      v20 = v18;
    }
    else
    {
      outlined destroy of Nonce((uint64_t)v69);
      v6 = (uint64_t *)(v53 + RSVPQueue[6]);
      v31 = *v6;
      v32 = v6[1];
      outlined copy of Data._Representation(v31, v32);
      v34 = v67;
      v67[0] = v31;
      v67[1] = v32;
      v33 = &v66;
      v66 = 2;
      v7 = lazy protocol witness table accessor for type Data and conformance Data();
      v8 = v43;
      v35 = v7;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v36 = v8;
      v37 = v8;
      if (v8)
      {
        v17 = v37;
        outlined destroy of Data((uint64_t)v67);
        result = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v51, v55);
        v20 = v17;
      }
      else
      {
        outlined destroy of Data((uint64_t)v67);
        v9 = v36;
        v65 = 3;
        KeyedEncodingContainer.encode(_:forKey:)();
        v29 = v9;
        v30 = v9;
        if (v9)
        {
          v16 = v30;
          result = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v51, v55);
          v20 = v16;
        }
        else
        {
          v10 = (uint64_t *)(v53 + RSVPQueue[8]);
          v25 = *v10;
          v26 = v10[1];
          outlined copy of Data._Representation(v25, v26);
          v11 = v29;
          v64[0] = v25;
          v64[1] = v26;
          v63 = 4;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v27 = v11;
          v28 = v11;
          if (v11)
          {
            v15 = v28;
            outlined destroy of Data((uint64_t)v64);
            result = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v51, v55);
            v20 = v15;
          }
          else
          {
            outlined destroy of Data((uint64_t)v64);
            v12 = v27;
            v62 = 5;
            KeyedEncodingContainer.encode(_:forKey:)();
            v23 = v12;
            v24 = v12;
            if (v12)
            {
              v14[1] = v24;
            }
            else
            {
              v61 = 6;
              KeyedEncodingContainer.encode(_:forKey:)();
              v21 = 0;
              v22 = 0;
            }
            return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v51, v55);
          }
        }
      }
    }
  }
  return result;
}

void CompleteFetchRSVPQueueRequest.Body.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v20[5];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int *RSVPQueue;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _QWORD *v79;
  char v80;

  v47 = a2;
  v56 = a1;
  v79 = 0;
  v52 = 0;
  v48 = type metadata accessor for GPKGroupID();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v48);
  v51 = (char *)v20 - v50;
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteFetchRSVPQueueRequest.Body.CodingKeys>);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v60 = (char *)v20 - v55;
  RSVPQueue = (int *)type metadata accessor for CompleteFetchRSVPQueueRequest.Body();
  v58 = (*(_QWORD *)(*((_QWORD *)RSVPQueue - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v56);
  v59 = (uint64_t)v20 - v58;
  v80 = 0;
  v79 = v2;
  v62 = v2[3];
  v63 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v62);
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys();
  v3 = v61;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v64 = v3;
  v65 = v3;
  if (v3)
  {
    v24 = v65;
  }
  else
  {
    v44 = &v78;
    v78 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v64;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v45 = v4;
    v46 = v4;
    if (v4)
    {
      v23 = v46;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v60, v53);
      v24 = v23;
    }
    else
    {
      v40 = 1;
      v80 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v59, v51, v48);
      v41 = &v75;
      v75 = v40;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v5 = v45;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v42 = v5;
      v43 = v5;
      if (v5)
      {
        v22 = v43;
        (*(void (**)(char *, uint64_t))(v54 + 8))(v60, v53);
        v24 = v22;
      }
      else
      {
        v6 = v77;
        v7 = (_QWORD *)(v59 + RSVPQueue[5]);
        v80 = 3;
        *v7 = v76;
        v7[1] = v6;
        v36 = &v72;
        v72 = 2;
        v8 = lazy protocol witness table accessor for type Data and conformance Data();
        v9 = v42;
        v37 = v8;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v38 = v9;
        v39 = v9;
        if (!v9)
        {
          v10 = v74;
          v11 = (_QWORD *)(v59 + RSVPQueue[6]);
          v80 = 7;
          *v11 = v73;
          v11[1] = v10;
          v71 = 3;
          v12 = KeyedDecodingContainer.decode(_:forKey:)();
          v33 = 0;
          v34 = v12;
          v35 = 0;
          *(_DWORD *)(v59 + RSVPQueue[7]) = v12;
          v68 = 4;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v31 = 0;
          v32 = 0;
          v13 = v70;
          v14 = (_QWORD *)(v59 + RSVPQueue[8]);
          v80 = 23;
          *v14 = v69;
          v14[1] = v13;
          v67 = 5;
          v15 = KeyedDecodingContainer.decode(_:forKey:)();
          v28 = 0;
          v29 = v15;
          v30 = 0;
          *(_DWORD *)(v59 + RSVPQueue[9]) = v15;
          v66 = 6;
          v16 = KeyedDecodingContainer.decode(_:forKey:)();
          v25 = 0;
          v26 = v16;
          v27 = 0;
          v17 = v53;
          v18 = v60;
          v19 = v54;
          *(_DWORD *)(v59 + RSVPQueue[10]) = v26;
          (*(void (**)(char *, uint64_t))(v19 + 8))(v18, v17);
          outlined init with copy of CompleteFetchRSVPQueueRequest.Body(v59, v47);
          __swift_destroy_boxed_opaque_existential_1(v56);
          outlined destroy of CompleteFetchRSVPQueueRequest.Body(v59);
          return;
        }
        v21 = v39;
        (*(void (**)(char *, uint64_t))(v54 + 8))(v60, v53);
        v24 = v21;
      }
    }
  }
  v20[0] = v24;
  __swift_destroy_boxed_opaque_existential_1(v56);
  if ((v80 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v59, v48);
  if ((v80 & 2) != 0)
    outlined destroy of Nonce(v59 + RSVPQueue[5]);
  if ((v80 & 4) != 0)
    outlined destroy of Data(v59 + RSVPQueue[6]);
  if ((v80 & 0x10) != 0)
    outlined destroy of Data(v59 + RSVPQueue[8]);
}

uint64_t outlined init with copy of CompleteFetchRSVPQueueRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *RSVPQueue;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  RSVPQueue = (int *)type metadata accessor for CompleteFetchRSVPQueueRequest.Body();
  v7 = RSVPQueue[5];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  outlined copy of Data._Representation(v8, v9);
  v3 = (uint64_t *)(a2 + v7);
  *v3 = v8;
  v3[1] = v9;
  v10 = RSVPQueue[6];
  v11 = *(_QWORD *)(a1 + v10);
  v12 = *(_QWORD *)(a1 + v10 + 8);
  outlined copy of Data._Representation(v11, v12);
  v4 = (uint64_t *)(a2 + v10);
  *v4 = v11;
  v4[1] = v12;
  *(_DWORD *)(a2 + RSVPQueue[7]) = *(_DWORD *)(a1 + RSVPQueue[7]);
  v13 = RSVPQueue[8];
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  outlined copy of Data._Representation(v14, v15);
  result = a2;
  v6 = (uint64_t *)(a2 + v13);
  *v6 = v14;
  v6[1] = v15;
  *(_DWORD *)(a2 + RSVPQueue[9]) = *(_DWORD *)(a1 + RSVPQueue[9]);
  *(_DWORD *)(a2 + RSVPQueue[10]) = *(_DWORD *)(a1 + RSVPQueue[10]);
  return result;
}

uint64_t outlined destroy of CompleteFetchRSVPQueueRequest.Body(uint64_t a1)
{
  uint64_t v1;
  int *RSVPQueue;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  RSVPQueue = (int *)type metadata accessor for CompleteFetchRSVPQueueRequest.Body();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + RSVPQueue[5]), *(_QWORD *)(a1 + RSVPQueue[5] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + RSVPQueue[6]), *(_QWORD *)(a1 + RSVPQueue[6] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + RSVPQueue[8]), *(_QWORD *)(a1 + RSVPQueue[8] + 8));
  return a1;
}

int *CompleteFetchRSVPQueueRequest.Body.init(groupId:nonce:signature:protobufVersion:verificationKey:lastKnownRsvpQueueSeqNumber:nonceTypeInd:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, int a10)
{
  uint64_t v10;
  int *result;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = *a2;
  v17 = a2[1];
  v10 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a9, a1);
  result = (int *)type metadata accessor for CompleteFetchRSVPQueueRequest.Body();
  v12 = (_QWORD *)(a9 + result[5]);
  *v12 = v16;
  v12[1] = v17;
  v13 = (_QWORD *)(a9 + result[6]);
  *v13 = a3;
  v13[1] = a4;
  *(_DWORD *)(a9 + result[7]) = a5;
  v14 = (_QWORD *)(a9 + result[8]);
  *v14 = a6;
  v14[1] = a7;
  *(_DWORD *)(a9 + result[9]) = a8;
  *(_DWORD *)(a9 + result[10]) = a10;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance CompleteFetchRSVPQueueRequest.Body(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CompleteFetchRSVPQueueRequest.Body.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteFetchRSVPQueueRequest.Body(uint64_t a1)
{
  return CompleteFetchRSVPQueueRequest.Body.encode(to:)(a1);
}

GroupKitCore::CompleteFetchRSVPQueueRequest::NonceType_optional __swiftcall CompleteFetchRSVPQueueRequest.NonceType.init(rawValue:)(Swift::UInt32 rawValue)
{
  char v3;

  if (rawValue == 1)
  {
    v3 = 0;
    return (GroupKitCore::CompleteFetchRSVPQueueRequest::NonceType_optional)(v3 & 1);
  }
  if (rawValue == 2)
  {
    v3 = 1;
    return (GroupKitCore::CompleteFetchRSVPQueueRequest::NonceType_optional)(v3 & 1);
  }
  return (GroupKitCore::CompleteFetchRSVPQueueRequest::NonceType_optional)2;
}

uint64_t CompleteFetchRSVPQueueRequest.NonceType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 2;
  else
    return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteFetchRSVPQueueRequest.NonceType()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.NonceType and conformance CompleteFetchRSVPQueueRequest.NonceType();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteFetchRSVPQueueRequest.NonceType()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.NonceType and conformance CompleteFetchRSVPQueueRequest.NonceType();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CompleteFetchRSVPQueueRequest.NonceType()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.NonceType and conformance CompleteFetchRSVPQueueRequest.NonceType();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteFetchRSVPQueueRequest.NonceType()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.NonceType and conformance CompleteFetchRSVPQueueRequest.NonceType();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKitCore::CompleteFetchRSVPQueueRequest::NonceType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance CompleteFetchRSVPQueueRequest.NonceType@<W0>(Swift::UInt32 *a1@<X0>, GroupKitCore::CompleteFetchRSVPQueueRequest::NonceType_optional *a2@<X8>)
{
  GroupKitCore::CompleteFetchRSVPQueueRequest::NonceType_optional result;

  result.value = CompleteFetchRSVPQueueRequest.NonceType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CompleteFetchRSVPQueueRequest.NonceType@<X0>(_DWORD *a1@<X8>)
{
  _BYTE *v1;
  uint64_t result;

  result = CompleteFetchRSVPQueueRequest.NonceType.rawValue.getter(*v1 & 1);
  *a1 = result;
  return result;
}

uint64_t CompleteFetchRSVPQueueRequest.init(groupID:nonce:signature:protobufVersion:verificationKey:lastKnownRsvpQueueSeqNumber:nonceType:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, unsigned __int8 a10)
{
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t RSVPQueue;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  char v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  char *v72;

  v26 = &v70;
  v27 = a9;
  v32 = a1;
  v33 = a2;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v41 = a6;
  v42 = a7;
  v43 = a8;
  v36 = a10;
  v72 = 0;
  v70 = 0u;
  v71 = 0u;
  v69 = 0;
  v67 = 0;
  v68 = 0;
  v65 = 0;
  v66 = 0;
  v64 = 0;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  v60 = 0;
  v58 = 0;
  v45 = 0;
  v47 = type metadata accessor for DictionaryEncoder.DataEncodingStrategy();
  v46 = *(_QWORD *)(v47 - 8);
  v28 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v48 = (char *)&v23 - v28;
  v31 = type metadata accessor for GPKGroupID();
  v30 = *(_QWORD *)(v31 - 8);
  v29 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v45);
  v44 = (uint64_t)&v23 - v29;
  RSVPQueue = type metadata accessor for CompleteFetchRSVPQueueRequest.Body();
  v10 = MEMORY[0x24BDAC7A8](v44);
  v52 = (uint64_t)&v23 - v11;
  v72 = (char *)&v23 - v11;
  v69 = v12;
  v34 = *v33;
  v35 = v33[1];
  v67 = v34;
  v68 = v35;
  v65 = v38;
  v66 = v13;
  v64 = v14;
  v62 = v15;
  v63 = v16;
  v61 = v17;
  v60 = v36 & 1;
  v70 = 0uLL;
  v71 = 0uLL;
  (*(void (**)(double))(v18 + 16))(v10);
  outlined copy of Data._Representation(v34, v35);
  v37 = v59;
  v59[0] = v34;
  v59[1] = v35;
  outlined copy of Data._Representation(v38, v39);
  outlined copy of Data._Representation(v41, v42);
  v19 = CompleteFetchRSVPQueueRequest.NonceType.rawValue.getter(v36 & 1);
  CompleteFetchRSVPQueueRequest.Body.init(groupId:nonce:signature:protobufVersion:verificationKey:lastKnownRsvpQueueSeqNumber:nonceTypeInd:)(v44, v37, v38, v39, v40, v41, v42, v43, v52, v19);
  type metadata accessor for DictionaryEncoder();
  v49 = DictionaryEncoder.__allocating_init()();
  v58 = v49;
  (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v48, *MEMORY[0x24BDFC528], v47);
  dispatch thunk of DictionaryEncoder.dataEncodingStrategy.setter();
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Body and conformance CompleteFetchRSVPQueueRequest.Body();
  v20 = v51;
  v21 = dispatch thunk of DictionaryEncoder.encode<A>(_:)();
  v53 = v20;
  v54 = v21;
  v55 = v20;
  if (v20)
  {
    v23 = v55;
    swift_release();
    outlined destroy of CompleteFetchRSVPQueueRequest.Body(v52);
    outlined consume of Data._Representation(v41, v42);
    outlined consume of Data._Representation(v38, v39);
    outlined consume of Data._Representation(v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
    return outlined destroy of CompleteFetchRSVPQueueRequest((uint64_t)&v70);
  }
  else
  {
    v24 = v54;
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(_QWORD *)&v56 = v24;
    v25 = &v70;
    outlined assign with take of Any?(&v56, (uint64_t)&v70);
    swift_release();
    outlined destroy of CompleteFetchRSVPQueueRequest.Body(v52);
    outlined init with copy of CompleteFetchRSVPQueueRequest((uint64_t)v25, v27);
    outlined consume of Data._Representation(v41, v42);
    outlined consume of Data._Representation(v38, v39);
    outlined consume of Data._Representation(v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
    return outlined destroy of CompleteFetchRSVPQueueRequest((uint64_t)v25);
  }
}

unint64_t lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Body and conformance CompleteFetchRSVPQueueRequest.Body()
{
  uint64_t RSVPQueue;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body and conformance CompleteFetchRSVPQueueRequest.Body;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body and conformance CompleteFetchRSVPQueueRequest.Body)
  {
    RSVPQueue = type metadata accessor for CompleteFetchRSVPQueueRequest.Body();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Body, RSVPQueue);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Body and conformance CompleteFetchRSVPQueueRequest.Body);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of CompleteFetchRSVPQueueRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t outlined init with copy of CompleteFetchRSVPQueueRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t CompleteFetchRSVPQueueRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeFetchRSVPQueue.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance CompleteFetchRSVPQueueRequest()
{
  return CompleteFetchRSVPQueueRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance CompleteFetchRSVPQueueRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance CompleteFetchRSVPQueueRequest@<X0>(uint64_t a1@<X8>)
{
  return CompleteFetchRSVPQueueRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance CompleteFetchRSVPQueueRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t CompleteFetchRSVPQueueRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t CompleteFetchRSVPQueueRequest.Response.rsvpQueueBlob.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompleteFetchRSVPQueueRequest.Response() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for CompleteFetchRSVPQueueRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteFetchRSVPQueueRequest.Response;
  if (!type metadata singleton initialization cache for CompleteFetchRSVPQueueRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.maxRsvpQueueSeqNumber.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for CompleteFetchRSVPQueueRequest.Response() + 24));
}

uint64_t *CompleteFetchRSVPQueueRequest.Response.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t RSVPQueue;

  RSVPQueue = type metadata accessor for CompleteFetchRSVPQueueRequest.Response();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(RSVPQueue + 28)), a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.rsvpQueueData.getter()
{
  swift_bridgeObjectRetain();
}

uint64_t static CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpQueueData", 0xDuLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpQueueData", 0xDuLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  return static CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  return CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  return CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  return CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  return CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.encode(to:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = a1;
  v13 = a2;
  v22 = 0;
  v21 = 0;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys>);
  v8 = *(_QWORD *)(v14 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v6 - v9;
  v22 = v2;
  v21 = v3;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_bridgeObjectRetain();
  v17 = &v20;
  v20 = v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CompleteFetchRSVPQueueRequest.Response.RSVPMessage]);
  lazy protocol witness table accessor for type [CompleteFetchRSVPQueueRequest.Response.RSVPMessage] and conformance <A> [A]();
  v4 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v18 = v4;
  v19 = v4;
  if (v4)
    v6 = v19;
  outlined destroy of [CompleteFetchRSVPQueueRequest.Response.RSVPMessage]();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v14);
}

unint64_t lazy protocol witness table accessor for type [CompleteFetchRSVPQueueRequest.Response.RSVPMessage] and conformance <A> [A]()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t RSVPQueue;

  v3 = lazy protocol witness table cache variable for type [CompleteFetchRSVPQueueRequest.Response.RSVPMessage] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CompleteFetchRSVPQueueRequest.Response.RSVPMessage] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CompleteFetchRSVPQueueRequest.Response.RSVPMessage]);
    RSVPQueue = lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12A0], v2, &RSVPQueue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [CompleteFetchRSVPQueueRequest.Response.RSVPMessage] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t RSVPQueue;

  v3 = lazy protocol witness table cache variable for type [CompleteFetchRSVPQueueRequest.Response.RSVPMessage] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CompleteFetchRSVPQueueRequest.Response.RSVPMessage] and conformance <A> [A])
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CompleteFetchRSVPQueueRequest.Response.RSVPMessage]);
    RSVPQueue = lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage();
    v0 = MEMORY[0x242635504](MEMORY[0x24BEE12D0], v2, &RSVPQueue);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type [CompleteFetchRSVPQueueRequest.Response.RSVPMessage] and conformance <A> [A]);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPMessage, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPMessage, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPMessage);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [CompleteFetchRSVPQueueRequest.Response.RSVPMessage]()
{
  swift_bridgeObjectRelease();
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.init(from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v14 = a1;
  v25 = 0;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys>);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v5 - v17;
  v25 = v1;
  v20 = v1[3];
  v21 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v20);
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys();
  v2 = v19;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v22 = v2;
  v23 = v2;
  if (v2)
  {
    v7 = v23;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CompleteFetchRSVPQueueRequest.Response.RSVPMessage]);
    lazy protocol witness table accessor for type [CompleteFetchRSVPQueueRequest.Response.RSVPMessage] and conformance <A> [A]();
    v3 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v3;
    v13 = v3;
    if (!v3)
    {
      v9 = v24;
      swift_bridgeObjectRetain();
      v8 = &v26;
      v26 = v9;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      __swift_destroy_boxed_opaque_existential_1(v14);
      outlined destroy of CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob();
      return v9;
    }
    v6 = v13;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    v7 = v6;
  }
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1(v14);
  return v10;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob()
{
  swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob(uint64_t a1)
{
  uint64_t *v1;

  return CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.encode(to:)(a1, *v1);
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.randomizedVerificationKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 16));
  return v2;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.rsvpResponse.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.rsvpTimeStamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.rsvpQueueSequenceNumber.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 40);
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.signature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 48);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 56));
  return v2;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.nonce.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.groupIdHint.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  outlined copy of Data?(v2, *(_QWORD *)(v0 + 88));
  return v2;
}

void static CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D476748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D4767C4
                                                                                       + dword_23D47686C[a12]))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D4767D4()
{
  uint64_t v1;

  return v1 == 0;
}

void CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D4768DC()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  unsigned __int8 v10;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1);
  swift_bridgeObjectRetain();
  v9 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 0;
LABEL_18:
    swift_bridgeObjectRelease();
    return v10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("randomizedVerificationKey", 0x19uLL, 1);
  swift_bridgeObjectRetain();
  v8 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 1;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpResponse", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 2;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpTimeStamp", 0xDuLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 3;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpQueueSequenceNumber", 0x17uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 4;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signature", 9uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 5;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 6;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupIdHint", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v10 = 7;
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 8;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.init(intValue:)()
{
  return 8;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.intValue.getter()
{
  return 0;
}

void CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D476FE4()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("version", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys(char *a1)
{
  char v1;

  static CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys()
{
  return CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys(uint64_t a1)
{
  char *v1;

  CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys()
{
  char *v0;

  CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys()
{
  return CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  char v53;
  char v54;
  __int128 v55;
  char v56;
  char v57;
  char v58;
  char v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  _QWORD *v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[8];

  v39 = (__int128 *)v66;
  v40 = a1;
  v63 = 0;
  v62 = 0;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys>);
  v41 = *(_QWORD *)(v47 - 8);
  v42 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v45 = (char *)v12 - v42;
  v63 = v2;
  v62 = v1;
  v43 = v2[3];
  v44 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v43);
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v3 = v48;
  v61 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v49 = v3;
  v50 = v3;
  if (v3)
  {
    v16 = v50;
    result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v47);
    v17 = v16;
  }
  else
  {
    *v39 = *(_OWORD *)(v46 + 8);
    outlined retain of Data((uint64_t)v66);
    v4 = *v39;
    v35 = &v60;
    v60 = v4;
    v34 = &v59;
    v59 = 1;
    v5 = lazy protocol witness table accessor for type Data and conformance Data();
    v6 = v49;
    v36 = v5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v37 = v6;
    v38 = v6;
    if (v6)
    {
      v15 = v38;
      outlined destroy of Data((uint64_t)&v60);
      result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v47);
      v17 = v15;
    }
    else
    {
      outlined destroy of Data((uint64_t)&v60);
      v7 = v37;
      v58 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v32 = v7;
      v33 = v7;
      if (v7)
      {
        v14 = v33;
        result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v47);
        v17 = v14;
      }
      else
      {
        v57 = 3;
        KeyedEncodingContainer.encode(_:forKey:)();
        v30 = 0;
        v31 = 0;
        v56 = 4;
        KeyedEncodingContainer.encode(_:forKey:)();
        v28 = 0;
        v29 = 0;
        v65 = *(_OWORD *)(v46 + 48);
        outlined retain of Data((uint64_t)&v65);
        v8 = v28;
        v55 = v65;
        v54 = 5;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v26 = v8;
        v27 = v8;
        if (v8)
        {
          v13 = v27;
          outlined destroy of Data((uint64_t)&v55);
          result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v47);
          v17 = v13;
        }
        else
        {
          outlined destroy of Data((uint64_t)&v55);
          v9 = v26;
          v22 = *(_QWORD *)(v46 + 64);
          v23 = *(_QWORD *)(v46 + 72);
          swift_bridgeObjectRetain();
          v53 = 6;
          KeyedEncodingContainer.encode(_:forKey:)();
          v24 = v9;
          v25 = v9;
          if (v9)
          {
            v12[1] = v25;
            swift_bridgeObjectRelease();
            return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v47);
          }
          else
          {
            swift_bridgeObjectRelease();
            v18 = &v64;
            outlined init with take of Data?((_OWORD *)(v46 + 80), &v64);
            outlined retain of Data?((uint64_t)v18);
            v19 = &v52;
            outlined init with take of Data?(v18, &v52);
            v10 = v24;
            v51 = 7;
            KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
            v20 = v10;
            v21 = v10;
            if (v10)
              v12[0] = v21;
            outlined destroy of Data?((uint64_t)&v52);
            return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v45, v47);
          }
        }
      }
    }
  }
  return result;
}

_OWORD *outlined init with take of Data?(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined retain of Data?(uint64_t a1)
{
  outlined copy of Data?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

char *CompleteFetchRSVPQueueRequest.Response.RSVPMessage.init(from:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  char *result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int *v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  char v99;
  char v100;
  uint64_t v101;
  char *v102;
  char v103;
  _QWORD *v104;
  int v105;
  _QWORD v106[2];
  int v107;
  uint64_t v108;
  int v109;
  _BYTE v110[12];
  char v111;
  char v112;

  v78 = &v105;
  v79 = a2;
  v80 = a1;
  v104 = 0;
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys>);
  v82 = *(_QWORD *)(v81 - 8);
  v83 = (*(_QWORD *)(v82 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v80);
  v84 = (char *)&v35 - v83;
  v112 = 0;
  v104 = v2;
  v86 = v2[3];
  v87 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v86);
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys();
  v3 = v85;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v88 = v3;
  v89 = v3;
  if (v3)
  {
    v39 = v89;
  }
  else
  {
    v103 = 0;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v75 = 0;
    v76 = v4;
    v77 = 0;
    v70 = v4;
    v105 = v4;
    v71 = &v100;
    v100 = 1;
    v5 = lazy protocol witness table accessor for type Data and conformance Data();
    v6 = v75;
    v72 = v5;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v73 = v6;
    v74 = v6;
    if (v6)
    {
      v38 = v74;
      (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
      v39 = v38;
    }
    else
    {
      v64 = v101;
      v65 = v102;
      v66 = 2;
      v112 = 2;
      outlined copy of Data._Representation(v101, (unint64_t)v102);
      v7 = v73;
      v106[0] = v64;
      v106[1] = v65;
      v99 = v66;
      v8 = KeyedDecodingContainer.decode(_:forKey:)();
      v67 = v7;
      v68 = v8;
      v69 = v7;
      if (v7)
      {
        v37 = v69;
        outlined consume of Data._Representation(v64, (unint64_t)v65);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
        v39 = v37;
      }
      else
      {
        v60 = v68;
        v107 = v68;
        v98 = 3;
        v9 = KeyedDecodingContainer.decode(_:forKey:)();
        v61 = 0;
        v62 = v9;
        v63 = 0;
        v56 = v9;
        v108 = v9;
        v97 = 4;
        v10 = KeyedDecodingContainer.decode(_:forKey:)();
        v57 = 0;
        v58 = v10;
        v59 = 0;
        v53 = v10;
        v109 = v10;
        v94 = 5;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v54 = 0;
        v55 = 0;
        v47 = v95;
        v48 = v96;
        v112 = 34;
        outlined copy of Data._Representation(v95, v96);
        v11 = v78;
        v12 = v48;
        v13 = v54;
        *((_QWORD *)v78 + 6) = v47;
        *((_QWORD *)v11 + 7) = v12;
        v93 = 6;
        v14 = KeyedDecodingContainer.decode(_:forKey:)();
        v49 = v13;
        v50 = v14;
        v51 = v15;
        v52 = v13;
        if (!v13)
        {
          v44 = v51;
          v43 = v50;
          v112 = 98;
          swift_bridgeObjectRetain();
          v16 = v78;
          v17 = v44;
          *((_QWORD *)v78 + 8) = v43;
          *((_QWORD *)v16 + 9) = v17;
          v90 = 7;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          v45 = 0;
          v46 = 0;
          v41 = v91;
          v42 = v92;
          v40 = &v105;
          v112 = -30;
          outlined copy of Data?(v91, v92);
          v18 = v78;
          v19 = v82;
          v20 = v84;
          v21 = v81;
          v22 = v42;
          *((_QWORD *)v78 + 10) = v41;
          *((_QWORD *)v18 + 11) = v22;
          (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v21);
          outlined copy of Data._Representation(v64, (unint64_t)v65);
          outlined copy of Data._Representation(v47, v48);
          swift_bridgeObjectRetain();
          outlined copy of Data?(v41, v42);
          outlined consume of Data?(v41, v42);
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v47, v48);
          outlined consume of Data._Representation(v64, (unint64_t)v65);
          __swift_destroy_boxed_opaque_existential_1(v80);
          outlined destroy of CompleteFetchRSVPQueueRequest.Response.RSVPMessage((uint64_t)v40);
          v23 = v64;
          v24 = v60;
          v25 = v56;
          v26 = v53;
          v27 = v47;
          v28 = v48;
          v29 = v43;
          v30 = v44;
          v31 = v41;
          v32 = v79;
          v33 = v42;
          result = v65;
          *v79 = v70;
          *((_QWORD *)v32 + 1) = v23;
          *((_QWORD *)v32 + 2) = result;
          v32[6] = v24;
          *((_QWORD *)v32 + 4) = v25;
          v32[10] = v26;
          *((_QWORD *)v32 + 6) = v27;
          *((_QWORD *)v32 + 7) = v28;
          *((_QWORD *)v32 + 8) = v29;
          *((_QWORD *)v32 + 9) = v30;
          *((_QWORD *)v32 + 10) = v31;
          *((_QWORD *)v32 + 11) = v33;
          return result;
        }
        v36 = v52;
        outlined consume of Data._Representation(v47, v48);
        outlined consume of Data._Representation(v64, (unint64_t)v65);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
        v39 = v36;
      }
    }
  }
  v35 = v39;
  result = (char *)__swift_destroy_boxed_opaque_existential_1(v80);
  if ((v112 & 2) != 0)
  {
    result = (char *)v106;
    outlined destroy of Data((uint64_t)v106);
  }
  if ((v112 & 0x20) != 0)
  {
    result = v110;
    outlined destroy of Data((uint64_t)v110);
  }
  if ((v112 & 0x40) != 0)
  {
    result = &v111;
    outlined destroy of String();
  }
  return result;
}

uint64_t outlined destroy of CompleteFetchRSVPQueueRequest.Response.RSVPMessage(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 88) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  return a1;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.RSVPMessage.init(version:randomizedVerificationKey:rsvpResponse:rsvpTimeStamp:rsvpQueueSequenceNumber:signature:nonce:groupIdHint:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(_DWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_DWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_DWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  *(_QWORD *)(a9 + 80) = a12;
  *(_QWORD *)(a9 + 88) = a13;
  return result;
}

void static CompleteFetchRSVPQueueRequest.Response.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D47851C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D478568
                                                                                       + *((int *)qword_23D4785D0 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D478578()
{
  uint64_t v1;

  return v1 == 0;
}

void CompleteFetchRSVPQueueRequest.Response.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D478630()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteFetchRSVPQueueRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpQueueBlob", 0xDuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("maxRsvpQueueSeqNumber", 0x15uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.CodingKeys, &type metadata for CompleteFetchRSVPQueueRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

void CompleteFetchRSVPQueueRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D478A90()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

char *protocol witness for Decodable.init(from:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  char *result;
  _DWORD __src[24];

  result = CompleteFetchRSVPQueueRequest.Response.RSVPMessage.init(from:)(a1, __src);
  if (!v2)
    return (char *)memcpy(a2, __src, 0x60uLL);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage(uint64_t a1)
{
  const void *v1;
  _BYTE __dst[96];

  memcpy(__dst, v1, sizeof(__dst));
  return CompleteFetchRSVPQueueRequest.Response.RSVPMessage.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys(char *a1)
{
  char v1;

  static CompleteFetchRSVPQueueRequest.Response.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys()
{
  return CompleteFetchRSVPQueueRequest.Response.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys(uint64_t a1)
{
  char *v1;

  CompleteFetchRSVPQueueRequest.Response.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys()
{
  char *v0;

  CompleteFetchRSVPQueueRequest.Response.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchRSVPQueueRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys()
{
  return CompleteFetchRSVPQueueRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteFetchRSVPQueueRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteFetchRSVPQueueRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t RSVPQueue;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[2];
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;

  v28 = a1;
  v50 = 0;
  v49 = 0;
  v38 = type metadata accessor for GPKGroupID();
  v34 = *(_QWORD *)(v38 - 8);
  v27 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)v9 - v27;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteFetchRSVPQueueRequest.Response.CodingKeys>);
  v29 = *(_QWORD *)(v37 - 8);
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v33 = (char *)v9 - v30;
  v50 = v2;
  v49 = v1;
  v31 = v2[3];
  v32 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v31);
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v40, v35, v38);
  v36 = &v48;
  v48 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v39;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v41 = v3;
  v42 = v3;
  if (v3)
  {
    v11 = v42;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v38);
    result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v33, v37);
    v12 = v11;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v38);
    RSVPQueue = type metadata accessor for CompleteFetchRSVPQueueRequest.Response();
    v22 = *(_QWORD *)(v35 + *(int *)(RSVPQueue + 20));
    swift_bridgeObjectRetain();
    v24 = &v47;
    v47 = v22;
    v23 = &v46;
    v46 = 1;
    lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob();
    v4 = v41;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v25 = v4;
    v26 = v4;
    if (v4)
    {
      v10 = v26;
      outlined destroy of CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob();
      result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v33, v37);
      v12 = v10;
    }
    else
    {
      outlined destroy of CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob();
      v5 = v25;
      v45 = 2;
      KeyedEncodingContainer.encode(_:forKey:)();
      v19 = v5;
      v20 = v5;
      if (v5)
      {
        v9[2] = v20;
        return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v33, v37);
      }
      else
      {
        v6 = (uint64_t *)(v35 + *(int *)(RSVPQueue + 28));
        v13 = *v6;
        v14 = v6[1];
        outlined copy of Data._Representation(v13, v14);
        v16 = v44;
        v44[0] = v13;
        v44[1] = v14;
        v15 = &v43;
        v43 = 3;
        lazy protocol witness table accessor for type Nonce and conformance Nonce();
        v7 = v19;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v17 = v7;
        v18 = v7;
        if (v7)
          v9[1] = v18;
        outlined destroy of Nonce((uint64_t)v44);
        return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v33, v37);
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob, &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob);
    return v0;
  }
  return v2;
}

uint64_t CompleteFetchRSVPQueueRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int *RSVPQueue;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  char v60;

  v33 = a2;
  v42 = a1;
  v59 = 0;
  v38 = 0;
  v34 = type metadata accessor for GPKGroupID();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v15 - v36;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteFetchRSVPQueueRequest.Response.CodingKeys>);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v38);
  v46 = (char *)&v15 - v41;
  RSVPQueue = (int *)type metadata accessor for CompleteFetchRSVPQueueRequest.Response();
  v44 = (*(_QWORD *)(*((_QWORD *)RSVPQueue - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v45 = (uint64_t)&v15 - v44;
  v60 = 0;
  v59 = v2;
  v48 = v2[3];
  v49 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v48);
  lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys();
  v3 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v50 = v3;
  v51 = v3;
  if (v3)
  {
    v19 = v51;
  }
  else
  {
    v30 = &v58;
    v58 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v50;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v31 = v4;
    v32 = v4;
    if (v4)
    {
      v18 = v32;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v46, v39);
      v19 = v18;
    }
    else
    {
      v26 = 1;
      v60 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v45, v37, v34);
      v27 = &v56;
      v56 = v26;
      lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob();
      v5 = v31;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v28 = v5;
      v29 = v5;
      if (v5)
      {
        v17 = v29;
        (*(void (**)(char *, uint64_t))(v40 + 8))(v46, v39);
        v19 = v17;
      }
      else
      {
        v6 = RSVPQueue[5];
        v60 = 3;
        *(_QWORD *)(v45 + v6) = v57;
        v55 = 2;
        v7 = KeyedDecodingContainer.decode(_:forKey:)();
        v23 = 0;
        v24 = v7;
        v25 = 0;
        *(_DWORD *)(v45 + RSVPQueue[6]) = v7;
        v20 = &v52;
        v52 = 3;
        lazy protocol witness table accessor for type Nonce and conformance Nonce();
        v8 = v23;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v21 = v8;
        v22 = v8;
        if (!v8)
        {
          v9 = v39;
          v10 = v46;
          v11 = v40;
          v12 = v54;
          v13 = (_QWORD *)(v45 + RSVPQueue[7]);
          v60 = 11;
          *v13 = v53;
          v13[1] = v12;
          (*(void (**)(char *, uint64_t))(v11 + 8))(v10, v9);
          outlined init with copy of CompleteFetchRSVPQueueRequest.Response(v45, v33);
          __swift_destroy_boxed_opaque_existential_1(v42);
          return outlined destroy of CompleteFetchRSVPQueueRequest.Response(v45);
        }
        v16 = v22;
        (*(void (**)(char *, uint64_t))(v40 + 8))(v46, v39);
        v19 = v16;
      }
    }
  }
  v15 = v19;
  result = __swift_destroy_boxed_opaque_existential_1(v42);
  if ((v60 & 1) != 0)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v45, v34);
  if ((v60 & 2) != 0)
  {
    result = v45 + RSVPQueue[5];
    outlined destroy of CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob();
  }
  return result;
}

uint64_t outlined init with copy of CompleteFetchRSVPQueueRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  int *RSVPQueue;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  RSVPQueue = (int *)type metadata accessor for CompleteFetchRSVPQueueRequest.Response();
  v6 = RSVPQueue[5];
  v7 = *(_QWORD *)(a1 + v6);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + v6) = v7;
  *(_DWORD *)(a2 + RSVPQueue[6]) = *(_DWORD *)(a1 + RSVPQueue[6]);
  v9 = RSVPQueue[7];
  v10 = *(_QWORD *)(a1 + v9);
  v11 = *(_QWORD *)(a1 + v9 + 8);
  outlined copy of Data._Representation(v10, v11);
  result = a2;
  v4 = (uint64_t *)(a2 + v9);
  *v4 = v10;
  v4[1] = v11;
  return result;
}

uint64_t outlined destroy of CompleteFetchRSVPQueueRequest.Response(uint64_t a1)
{
  uint64_t v1;
  uint64_t RSVPQueue;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  RSVPQueue = type metadata accessor for CompleteFetchRSVPQueueRequest.Response();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(RSVPQueue + 28)), *(_QWORD *)(a1 + *(int *)(RSVPQueue + 28) + 8));
  return a1;
}

int *CompleteFetchRSVPQueueRequest.Response.init(groupId:rsvpQueueBlob:maxRsvpQueueSeqNumber:nonce:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int *result;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;

  v11 = *a4;
  v12 = a4[1];
  v5 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a5, a1);
  result = (int *)type metadata accessor for CompleteFetchRSVPQueueRequest.Response();
  *(_QWORD *)(a5 + result[5]) = a2;
  *(_DWORD *)(a5 + result[6]) = a3;
  v7 = (_QWORD *)(a5 + result[7]);
  *v7 = v11;
  v7[1] = v12;
  return result;
}

unint64_t base witness table accessor for Equatable in CompleteFetchRSVPQueueRequest.NonceType()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.NonceType and conformance CompleteFetchRSVPQueueRequest.NonceType();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.NonceType and conformance CompleteFetchRSVPQueueRequest.NonceType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.NonceType and conformance CompleteFetchRSVPQueueRequest.NonceType;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.NonceType and conformance CompleteFetchRSVPQueueRequest.NonceType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.NonceType, &type metadata for CompleteFetchRSVPQueueRequest.NonceType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.NonceType and conformance CompleteFetchRSVPQueueRequest.NonceType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.NonceType and conformance CompleteFetchRSVPQueueRequest.NonceType;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.NonceType and conformance CompleteFetchRSVPQueueRequest.NonceType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.NonceType, &type metadata for CompleteFetchRSVPQueueRequest.NonceType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.NonceType and conformance CompleteFetchRSVPQueueRequest.NonceType);
    return v0;
  }
  return v2;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in CompleteFetchRSVPQueueRequest()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response and conformance CompleteFetchRSVPQueueRequest.Response();
}

unint64_t lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response and conformance CompleteFetchRSVPQueueRequest.Response()
{
  uint64_t RSVPQueue;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response and conformance CompleteFetchRSVPQueueRequest.Response;
  if (!lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response and conformance CompleteFetchRSVPQueueRequest.Response)
  {
    RSVPQueue = type metadata accessor for CompleteFetchRSVPQueueRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchRSVPQueueRequest.Response, RSVPQueue);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchRSVPQueueRequest.Response and conformance CompleteFetchRSVPQueueRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompleteFetchRSVPQueueRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CompleteFetchRSVPQueueRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteFetchRSVPQueueRequest.Response(uint64_t a1)
{
  return CompleteFetchRSVPQueueRequest.Response.encode(to:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for CompleteFetchRSVPQueueRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CompleteFetchRSVPQueueRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for CompleteFetchRSVPQueueRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for CompleteFetchRSVPQueueRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for CompleteFetchRSVPQueueRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteFetchRSVPQueueRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CompleteFetchRSVPQueueRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchRSVPQueueRequest()
{
  return &type metadata for CompleteFetchRSVPQueueRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteFetchRSVPQueueRequest.Body(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v22;

  v22 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v22 & 0x20000) != 0)
  {
    v17 = *a2;
    swift_retain();
    *a1 = v17;
    return *a1 + ((v22 + 16) & ~(unint64_t)v22);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v9 = (_QWORD *)((char *)a1 + a3[5]);
    v4 = (uint64_t *)((char *)a2 + a3[5]);
    v8 = *v4;
    v10 = v4[1];
    outlined copy of Data._Representation(*v4, v10);
    *v9 = v8;
    v9[1] = v10;
    v12 = (_QWORD *)((char *)a1 + a3[6]);
    v5 = (uint64_t *)((char *)a2 + a3[6]);
    v11 = *v5;
    v13 = v5[1];
    outlined copy of Data._Representation(*v5, v13);
    *v12 = v11;
    v12[1] = v13;
    *(_DWORD *)((char *)a1 + a3[7]) = *(_DWORD *)((char *)a2 + a3[7]);
    v15 = (_QWORD *)((char *)a1 + a3[8]);
    v6 = (uint64_t *)((char *)a2 + a3[8]);
    v14 = *v6;
    v16 = v6[1];
    outlined copy of Data._Representation(*v6, v16);
    *v15 = v14;
    v15[1] = v16;
    *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
    *(_DWORD *)((char *)a1 + a3[10]) = *(_DWORD *)((char *)a2 + a3[10]);
    return (unint64_t)a1;
  }
}

uint64_t destroy for CompleteFetchRSVPQueueRequest.Body(uint64_t a1, int *a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t initializeWithCopy for CompleteFetchRSVPQueueRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v8 = a3[5];
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a2 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  v4 = (uint64_t *)(a1 + v8);
  *v4 = v9;
  v4[1] = v10;
  v11 = a3[6];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a2 + v11 + 8);
  outlined copy of Data._Representation(v12, v13);
  v5 = (uint64_t *)(a1 + v11);
  *v5 = v12;
  v5[1] = v13;
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v14 = a3[8];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a2 + v14 + 8);
  outlined copy of Data._Representation(v15, v16);
  result = a1;
  v7 = (uint64_t *)(a1 + v14);
  *v7 = v15;
  v7[1] = v16;
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  return result;
}

uint64_t assignWithCopy for CompleteFetchRSVPQueueRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v14 = a3[5];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a2 + v14 + 8);
  outlined copy of Data._Representation(v15, v16);
  v4 = (uint64_t *)(a1 + v14);
  v5 = *(_QWORD *)(a1 + v14);
  v6 = *(_QWORD *)(a1 + v14 + 8);
  *v4 = v15;
  v4[1] = v16;
  outlined consume of Data._Representation(v5, v6);
  v17 = a3[6];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a2 + v17 + 8);
  outlined copy of Data._Representation(v18, v19);
  v7 = (uint64_t *)(a1 + v17);
  v8 = *(_QWORD *)(a1 + v17);
  v9 = *(_QWORD *)(a1 + v17 + 8);
  *v7 = v18;
  v7[1] = v19;
  outlined consume of Data._Representation(v8, v9);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v20 = a3[8];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a2 + v20 + 8);
  outlined copy of Data._Representation(v21, v22);
  v10 = (uint64_t *)(a1 + v20);
  v11 = *(_QWORD *)(a1 + v20);
  v12 = *(_QWORD *)(a1 + v20 + 8);
  *v10 = v21;
  v10[1] = v22;
  outlined consume of Data._Representation(v11, v12);
  result = a1;
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  return result;
}

__n128 initializeWithTake for CompleteFetchRSVPQueueRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  result = *(__n128 *)(a2 + a3[8]);
  *(__n128 *)(a1 + a3[8]) = result;
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  return result;
}

uint64_t assignWithTake for CompleteFetchRSVPQueueRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + a3[5]);
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + a3[5]);
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  v10 = (uint64_t *)(a2 + a3[6]);
  v11 = *v10;
  v12 = v10[1];
  v13 = (uint64_t *)(a1 + a3[6]);
  v14 = *v13;
  v15 = v13[1];
  *v13 = v11;
  v13[1] = v12;
  outlined consume of Data._Representation(v14, v15);
  *(_DWORD *)(a1 + a3[7]) = *(_DWORD *)(a2 + a3[7]);
  v16 = (uint64_t *)(a2 + a3[8]);
  v17 = *v16;
  v18 = v16[1];
  v19 = (uint64_t *)(a1 + a3[8]);
  v20 = *v19;
  v21 = v19[1];
  *v19 = v17;
  v19[1] = v18;
  outlined consume of Data._Representation(v20, v21);
  result = a1;
  *(_DWORD *)(a1 + a3[9]) = *(_DWORD *)(a2 + a3[9]);
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  return result;
}

uint64_t getEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Body()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D47A92C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Body()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D47AA28(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 12)
  {
    v5 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v5 = 0;
    v5[1] = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for CompleteFetchRSVPQueueRequest.Body()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Body.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF9)
      goto LABEL_15;
    v7 = ((a2 + 6) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 249;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 7;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Body.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF9)
  {
    v5 = ((a3 + 6) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF9)
  {
    v4 = ((a2 - 250) >> 8) + 1;
    *result = a2 + 6;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 6;
  }
  return result;
}

uint64_t getEnumTag for CompleteFetchRSVPQueueRequest.Body.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteFetchRSVPQueueRequest.Body.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchRSVPQueueRequest.Body.CodingKeys()
{
  return &type metadata for CompleteFetchRSVPQueueRequest.Body.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.NonceType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.NonceType(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for CompleteFetchRSVPQueueRequest.NonceType(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for CompleteFetchRSVPQueueRequest.NonceType(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchRSVPQueueRequest.NonceType()
{
  return &type metadata for CompleteFetchRSVPQueueRequest.NonceType;
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteFetchRSVPQueueRequest.Response(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v6 = a3[5];
    v7 = *(uint64_t *)((char *)a2 + v6);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v6) = v7;
    *(_DWORD *)((char *)a1 + a3[6]) = *(_DWORD *)((char *)a2 + a3[6]);
    v9 = (_QWORD *)((char *)a1 + a3[7]);
    v4 = (uint64_t *)((char *)a2 + a3[7]);
    v8 = *v4;
    v10 = v4[1];
    outlined copy of Data._Representation(*v4, v10);
    *v9 = v8;
    v9[1] = v10;
    return (unint64_t)a1;
  }
}

uint64_t destroy for CompleteFetchRSVPQueueRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 28)), *(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t initializeWithCopy for CompleteFetchRSVPQueueRequest.Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v6 = a3[5];
  v7 = *(_QWORD *)(a2 + v6);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v6) = v7;
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v10 = a3[7];
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a2 + v10 + 8);
  outlined copy of Data._Representation(v11, v12);
  result = a1;
  v5 = (uint64_t *)(a1 + v10);
  *v5 = v11;
  v5[1] = v12;
  return result;
}

uint64_t assignWithCopy for CompleteFetchRSVPQueueRequest.Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v8 = a3[5];
  v9 = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v12 = a3[7];
  v13 = *(_QWORD *)(a2 + v12);
  v14 = *(_QWORD *)(a2 + v12 + 8);
  outlined copy of Data._Representation(v13, v14);
  v4 = (uint64_t *)(a1 + v12);
  v5 = *(_QWORD *)(a1 + v12);
  v6 = *(_QWORD *)(a1 + v12 + 8);
  *v4 = v13;
  v4[1] = v14;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

__n128 initializeWithTake for CompleteFetchRSVPQueueRequest.Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  result = *(__n128 *)(a2 + a3[7]);
  *(__n128 *)(a1 + a3[7]) = result;
  return result;
}

uint64_t assignWithTake for CompleteFetchRSVPQueueRequest.Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  v4 = (uint64_t *)(a2 + a3[7]);
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + a3[7]);
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D47B8CC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20)) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D47B9C4(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for CompleteFetchRSVPQueueRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

ValueMetadata *type metadata accessor for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob()
{
  return &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob;
}

uint64_t getEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  return &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for CompleteFetchRSVPQueueRequest.Response.RSVPMessage(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CompleteFetchRSVPQueueRequest.Response.RSVPMessage(uint64_t a1)
{
  uint64_t result;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease();
  result = a1;
  if ((*(_QWORD *)(a1 + 88) & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  return result;
}

uint64_t initializeWithCopy for CompleteFetchRSVPQueueRequest.Response.RSVPMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 72) = v10;
  if ((*(_QWORD *)(a2 + 88) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 80);
    v4 = *(_QWORD *)(a2 + 88);
    outlined copy of Data._Representation(v3, v4);
    *(_QWORD *)(a1 + 80) = v3;
    *(_QWORD *)(a1 + 88) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for CompleteFetchRSVPQueueRequest.Response.RSVPMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v13, v14);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v14;
  outlined consume of Data._Representation(v2, v3);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  outlined copy of Data._Representation(v15, v16);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v16;
  outlined consume of Data._Representation(v4, v5);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 72) = v18;
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 88) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(a2 + 88) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    }
    else
    {
      v9 = *(_QWORD *)(a2 + 80);
      v10 = *(_QWORD *)(a2 + 88);
      outlined copy of Data._Representation(v9, v10);
      *(_QWORD *)(a1 + 80) = v9;
      *(_QWORD *)(a1 + 88) = v10;
    }
  }
  else if ((*(_QWORD *)(a2 + 88) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + 80);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 80);
    v12 = *(_QWORD *)(a2 + 88);
    outlined copy of Data._Representation(v11, v12);
    v6 = *(_QWORD *)(a1 + 80);
    v7 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v12;
    outlined consume of Data._Representation(v6, v7);
  }
  return a1;
}

uint64_t assignWithTake for CompleteFetchRSVPQueueRequest.Response.RSVPMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  outlined consume of Data._Representation(v8, v9);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + 88) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  else if ((*(_QWORD *)(a2 + 88) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + 80);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 88);
    v11 = *(_QWORD *)(a1 + 80);
    v12 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v10;
    outlined consume of Data._Representation(v11, v12);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Response.RSVPMessage(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 72)))
        v3 = *(_QWORD *)(a1 + 72);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Response.RSVPMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 96) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 96) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 72) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchRSVPQueueRequest.Response.RSVPMessage()
{
  return &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPMessage;
}

uint64_t getEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF8)
      goto LABEL_15;
    v7 = ((a2 + 7) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 248;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 8;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF8)
  {
    v5 = ((a3 + 7) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF8)
  {
    v4 = ((a2 - 249) >> 8) + 1;
    *result = a2 + 7;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 7;
  }
  return result;
}

uint64_t getEnumTag for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys()
{
  return &type metadata for CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteFetchRSVPQueueRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for CompleteFetchRSVPQueueRequest.Response.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteFetchRSVPQueueRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteFetchRSVPQueueRequest.Response.CodingKeys()
{
  return &type metadata for CompleteFetchRSVPQueueRequest.Response.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteFetchRSVPQueueRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteFetchRSVPQueueRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteFetchRSVPQueueRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPMessage.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Response.RSVPQueueBlob.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteFetchRSVPQueueRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteFetchRSVPQueueRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteFetchRSVPQueueRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteFetchRSVPQueueRequest.Body.CodingKeys and conformance CompleteFetchRSVPQueueRequest.Body.CodingKeys();
}

uint64_t MetadataService.init(metadataStore:cryptographyService:networkService:featureFlag:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _BYTE v13[40];
  _BYTE v14[40];
  _BYTE v15[40];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD __b[17];

  memset(__b, 0, sizeof(__b));
  v20 = a1;
  v19 = a2;
  v17 = a3;
  v18 = a4;
  v16 = a5;
  outlined init with copy of MetadataStore(a1, (uint64_t)v15);
  outlined init with take of MetadataStore(v15, __b);
  outlined init with copy of CryptographyServiceProviding(a2, (uint64_t)v14);
  outlined init with take of CryptographyServiceProviding(v14, &__b[5]);
  swift_unknownObjectRetain();
  __b[10] = a3;
  __b[11] = a4;
  outlined init with copy of FeatureChecking(a5, (uint64_t)v13);
  outlined init with take of FeatureChecking(v13, &__b[12]);
  outlined init with copy of MetadataService(__b, a6);
  __swift_destroy_boxed_opaque_existential_1(a5);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return outlined destroy of MetadataService((uint64_t)__b);
}

uint64_t MetadataService.serializedGroupMetadata(from:group:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  id v63;
  void *v64;
  unint64_t v65;
  Swift::String v66;
  _QWORD v67[4];
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  Swift::String v79;
  void *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  id v87;
  uint64_t v88;
  unint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  Class isa;
  id v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t j;
  void *v110;
  _QWORD *v111;
  void *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  Builtin::Word v117;
  uint64_t v118;
  int v119;
  Swift::String v120;
  uint64_t v121;
  void *v122;
  _QWORD *v123;
  void *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  Swift::String v131;
  uint64_t v132;
  void *v133;
  _QWORD *v134;
  void *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  Swift::String v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int (*v159)(uint64_t, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t i;
  int v166;
  uint64_t countAndFlagsBits;
  int v168;
  Swift::String v169;
  void *object;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(char *, uint64_t);
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  _OWORD *v203;
  unint64_t v204;
  _OWORD *v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  unint64_t v235;
  char *v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  char *v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  unint64_t v249;
  char *v250;
  unint64_t v251;
  char *v252;
  unint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  int v258;
  uint64_t v259;
  _QWORD v260[2];
  uint64_t v261;
  uint64_t v262;
  _QWORD v263[2];
  uint64_t v264;
  uint64_t v265;
  _QWORD v266[2];
  uint64_t v267;
  uint64_t v268;
  _QWORD v269[2];
  _QWORD v270[2];
  uint64_t v271;
  char *v272;
  id v273[2];
  _QWORD v274[2];
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  char *v292;
  uint64_t v293;
  unint64_t v294;
  void *v295;
  _BYTE __b[40];
  uint64_t v297;
  _BYTE v298[24];
  uint64_t v299;
  uint64_t v300;
  _BYTE v301[24];
  uint64_t v302;
  uint64_t v303;
  char v304;
  uint64_t v305;

  v244 = a1;
  v243 = a2;
  v305 = *MEMORY[0x24BDAC8D0];
  v292 = 0;
  v291 = 0;
  v290 = 0;
  v289 = 0;
  v288 = 0;
  v287 = 0;
  v286 = 0;
  v285 = 0;
  v284 = 0;
  v283 = 0;
  v282 = 0;
  v281 = 0;
  v279 = 0;
  v280 = 0;
  memset(__b, 0, sizeof(__b));
  v276 = 0;
  v277 = 0;
  v275 = 0;
  v293 = 0;
  v294 = 0;
  v272 = 0;
  v271 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMetadata?);
  v200 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v201 = (uint64_t)v67 - v200;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: GPKUpdateGroupRequest.Member)?);
  v202 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v203 = (_OWORD *)((char *)v67 - v202);
  v204 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v67 - v202);
  v205 = (_OWORD *)((char *)v67 - v204);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v206 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v207 = (uint64_t)v67 - v206;
  v208 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v67 - v206);
  v209 = (uint64_t)v67 - v208;
  v230 = 0;
  v210 = type metadata accessor for GPKUserID();
  v211 = *(_QWORD *)(v210 - 8);
  v212 = (*(_QWORD *)(v211 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v210);
  v213 = (char *)v67 - v212;
  v292 = (char *)v67 - v212;
  v214 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v215 = (uint64_t)v67 - v214;
  v291 = (char *)v67 - v214;
  v216 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUpdateGroupRequest.Member?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v230);
  v217 = (uint64_t)v67 - v216;
  v218 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v219 = (uint64_t)v67 - v218;
  v220 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v221 = *(_QWORD *)(v220 - 8);
  v222 = (*(_QWORD *)(v221 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v230);
  v223 = (char *)v67 - v222;
  v290 = (char *)v67 - v222;
  v224 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v225 = (char *)v67 - v224;
  v289 = (char *)v67 - v224;
  v226 = type metadata accessor for LogSubsystem();
  v227 = *(_QWORD *)(v226 - 8);
  v228 = (*(_QWORD *)(v227 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v230);
  v229 = (uint64_t)v67 - v228;
  v231 = type metadata accessor for GPKMetadata();
  v232 = *(_QWORD *)(v231 - 8);
  v233 = (*(_QWORD *)(v232 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v230);
  v234 = (char *)v67 - v233;
  v235 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v236 = (char *)v67 - v235;
  v288 = (char *)v67 - v235;
  v237 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v17);
  v238 = (uint64_t)v67 - v237;
  v287 = (char *)v67 - v237;
  v239 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v19);
  v240 = (char *)v67 - v239;
  v241 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v21);
  v242 = (uint64_t)v67 - v241;
  v286 = (char *)v67 - v241;
  v245 = type metadata accessor for GPKGroupID();
  v246 = *(_QWORD *)(v245 - 8);
  v247 = (*(_QWORD *)(v246 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v244);
  v248 = (char *)v67 - v247;
  v249 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v250 = (char *)v67 - v249;
  v251 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v25);
  v252 = (char *)v67 - v251;
  v253 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v27);
  v254 = (char *)v67 - v253;
  v285 = v28;
  v284 = v29;
  v283 = v2;
  v257 = v301;
  outlined init with copy of FeatureChecking(v2 + 96, (uint64_t)v301);
  v256 = v302;
  v255 = v303;
  __swift_project_boxed_opaque_existential_1(v257, v302);
  v258 = dispatch thunk of FeatureChecking.isMetaDataEnabled.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v257);
  if ((v258 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, GPKMetadata));
    _allocateUninitializedArray<A>(_:)();
    v282 = Dictionary.init(dictionaryLiteral:)();
    v191 = v298;
    outlined init with copy of MetadataStore(v198, (uint64_t)v298);
    v193 = v299;
    v194 = v300;
    v192 = __swift_project_boxed_opaque_existential_1(v191, v299);
    dispatch thunk of GPKGroup.groupID.getter();
    v30 = v199;
    v31 = (*(uint64_t (**)(char *, uint64_t))(v194 + 24))(v254, v193);
    v195 = v30;
    v196 = v31;
    v197 = v30;
    if (v30)
    {
      v72 = v197;
      (*(void (**)(char *, uint64_t))(v246 + 8))(v254, v245);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v298);
      outlined destroy of [String : GPKMetadata]();
      v73 = v72;
      goto LABEL_42;
    }
    v190 = v196;
    v189 = *(void (**)(char *, uint64_t))(v246 + 8);
    v189(v254, v245);
    if (v190)
    {
      v188 = v190;
      v259 = v190;
      v184 = v67;
      MEMORY[0x24BDAC7A8](v67);
      v185 = &v67[-4];
      v67[-2] = &v282;
      v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
      lazy protocol witness table accessor for type [GPKMetadata] and conformance [A]();
      v32 = v195;
      Sequence.forEach(_:)();
      v187 = v32;
      if (v32)
      {
        __break(1u);
        goto LABEL_39;
      }
      outlined destroy of [GPKMetadata]();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v298);
      v183 = v187;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v298);
      v183 = v195;
    }
    v176 = v183;
    v281 = _allocateUninitializedArray<A>(_:)();
    v177 = dispatch thunk of GPKUpdateGroupRequest.groupMetadata.getter();
    v178 = MEMORY[0x24BEE0D00];
    v179 = MEMORY[0x24BEE0D10];
    v182 = Dictionary<>.hashValue.getter();
    swift_bridgeObjectRelease();
    v180 = dispatch thunk of GPKGroup.metaData.getter();
    v181 = Dictionary<>.hashValue.getter();
    swift_bridgeObjectRelease();
    if (v182 == v181)
    {
      v166 = 1;
      v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No changes to group metadata, so group metadata not included", 0x3CuLL, 1);
      countAndFlagsBits = v34._countAndFlagsBits;
      object = v34._object;
      v169 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v166 & 1);
      v168 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v229);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v229, v226);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v171 = v176;
LABEL_10:
      v164 = v171;
      v278 = dispatch thunk of GPKGroup.members.getter();
      v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
      lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
      Collection<>.makeIterator()();
      for (i = v164; ; i = v146)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              v161 = i;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
              IndexingIterator.next()();
              v162 = v297;
              if (!v297)
              {
                outlined destroy of IndexingIterator<[GPKMember]>();
                dispatch thunk of GPKUpdateGroupRequest.removedMembers.getter();
                v108 = &v304;
                Dictionary.makeIterator()();
                memcpy(__b, v108, sizeof(__b));
                for (j = v161; ; j = v106)
                {
                  while (1)
                  {
                    v106 = j;
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKUpdateGroupRequest.Member].Iterator);
                    Dictionary.Iterator.next()();
                    outlined init with take of (key: String, value: GPKUpdateGroupRequest.Member)?(v203, v205);
                    v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: GPKUpdateGroupRequest.Member));
                    if ((*(unsigned int (**)(_OWORD *, uint64_t))(*(_QWORD *)(v107 - 8) + 48))(v205, 1) == 1)
                    {
                      outlined destroy of [String : GPKUpdateGroupRequest.Member].Iterator();
                      v82 = &v281;
                      v83 = v281;
                      swift_bridgeObjectRetain();
                      outlined destroy of [GPKMetadata]();
                      outlined destroy of [String : GPKMetadata]();
                      v84 = v83;
                      v85 = v106;
                      goto LABEL_36;
                    }
                    v105 = *((_QWORD *)v205 + 1);
                    (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v223, (char *)v205 + *(int *)(v107 + 48), v220);
                    GPKUpdateGroupRequest.Member.userID.getter();
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v211 + 48))(v207, 1, v210) != 1)
                      break;
                    outlined destroy of GPKUserID?(v207);
                    swift_bridgeObjectRelease();
                    (*(void (**)(char *, uint64_t))(v221 + 8))(v223, v220);
                    j = v106;
                  }
                  (*(void (**)(char *, uint64_t, uint64_t))(v211 + 32))(v213, v207, v210);
                  dispatch thunk of GPKGroup.groupID.getter();
                  v102 = static MetadataKeyGenerator.memberMetadataKey(userID:groupID:)();
                  v103 = v61;
                  v189(v248, v245);
                  v276 = v102;
                  v277 = v103;
                  swift_bridgeObjectRetain();
                  v104 = v274;
                  v274[0] = v102;
                  v274[1] = v103;
                  MEMORY[0x24263485C]();
                  outlined destroy of String();
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v232 + 48))(v201, 1, v231) == 1)
                  {
                    outlined destroy of GPKMetadata?(v201);
                  }
                  else
                  {
                    (*(void (**)(char *, uint64_t, uint64_t))(v232 + 32))(v236, v201, v231);
                    result = GPKMetadata.version.getter();
                    v101 = result + 1;
                    if ((_DWORD)result == -1)
                    {
                      __break(1u);
                      return result;
                    }
                    v275 = v101;
                    v95 = 0;
                    v295 = 0;
                    v97 = (id)objc_opt_self();
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
                    _allocateUninitializedArray<A>(_:)();
                    v91 = MEMORY[0x24BEE23D0];
                    v92 = MEMORY[0x24BEE4AD8] + 8;
                    v93 = MEMORY[0x24BEE23D8];
                    v94 = Dictionary.init(dictionaryLiteral:)();
                    isa = Dictionary._bridgeToObjectiveC()().super.isa;
                    swift_bridgeObjectRelease();
                    type metadata accessor for NSJSONWritingOptions();
                    v96 = _allocateUninitializedArray<A>(_:)();
                    lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
                    SetAlgebra<>.init(arrayLiteral:)();
                    v273[0] = v295;
                    v100 = objc_msgSend(v97, sel_dataWithJSONObject_options_error_, isa, v273[1], v273);
                    v98 = v273[0];
                    v63 = v273[0];
                    v64 = v295;
                    v295 = v98;

                    swift_unknownObjectRelease();
                    if (!v100)
                    {
                      v68 = v295;
                      v69 = _convertNSErrorToError(_:)();

                      swift_willThrow();
                      (*(void (**)(char *, uint64_t))(v232 + 8))(v236, v231);
                      swift_bridgeObjectRelease();
                      (*(void (**)(char *, uint64_t))(v211 + 8))(v213, v210);
                      swift_bridgeObjectRelease();
                      (*(void (**)(char *, uint64_t))(v221 + 8))(v223, v220);
                      outlined destroy of [String : GPKUpdateGroupRequest.Member].Iterator();
                      outlined destroy of [GPKMetadata]();
                      outlined destroy of [String : GPKMetadata]();
                      v73 = v69;
                      goto LABEL_42;
                    }
                    v90 = v100;
                    v87 = v100;
                    v88 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                    v89 = v65;
                    v293 = v88;
                    v294 = v65;

                    v272 = v240;
                    swift_bridgeObjectRetain();
                    outlined copy of Data._Representation(v88, v89);
                    GPKMetadata.init(key:value:version:)();
                    (*(void (**)(char *, char *, uint64_t))(v232 + 16))(v234, v240, v231);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
                    Array.append(_:)();
                    v86 = *(void (**)(char *, uint64_t))(v232 + 8);
                    v86(v240, v231);
                    outlined consume of Data._Representation(v88, v89);
                    v86(v236, v231);
                  }
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, uint64_t))(v211 + 8))(v213, v210);
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, uint64_t))(v221 + 8))(v223, v220);
                }
              }
              v160 = v162;
              v158 = v162;
              v271 = v162;
              v157 = dispatch thunk of GPKUpdateGroupRequest.addedMembers.getter();
              v35 = dispatch thunk of GPKMember.handle.getter();
              v156 = v270;
              v270[0] = v35;
              v270[1] = v36;
              MEMORY[0x24263485C]();
              outlined destroy of String();
              swift_bridgeObjectRelease();
              swift_retain();
              swift_retain();
              v159 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v221 + 48);
              if (v159(v217, 1, v220) == 1)
              {
                v155 = dispatch thunk of GPKUpdateGroupRequest.updatedMembers.getter();
                v37 = dispatch thunk of GPKMember.handle.getter();
                v154 = v269;
                v269[0] = v37;
                v269[1] = v38;
                MEMORY[0x24263485C]();
                outlined destroy of String();
                swift_bridgeObjectRelease();
                outlined destroy of GPKUpdateGroupRequest.Member?(v217);
              }
              else
              {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v221 + 32))(v219, v217, v220);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v221 + 56))(v219, 0, 1, v220);
              }
              swift_release();
              swift_release();
              if (v159(v219, 1, v220) != 1)
                break;
              outlined destroy of GPKUpdateGroupRequest.Member?(v219);
              v54 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
              v113 = &v267;
              v267 = v54;
              v268 = v55;
              v116 = 1;
              v56 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Member (", 8uLL, 1);
              v110 = v56._object;
              DefaultStringInterpolation.appendLiteral(_:)(v56);
              swift_bridgeObjectRelease();
              v57 = dispatch thunk of GPKMember.handle.getter();
              v111 = v266;
              v266[0] = v57;
              v266[1] = v58;
              DefaultStringInterpolation.appendInterpolation<A>(_:)();
              outlined destroy of String();
              v117 = 34;
              v59 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(") is unchanged from update request", 0x22uLL, v116 & 1);
              v112 = v59._object;
              DefaultStringInterpolation.appendLiteral(_:)(v59);
              swift_bridgeObjectRelease();
              v115 = v267;
              v114 = v268;
              swift_bridgeObjectRetain();
              outlined destroy of DefaultStringInterpolation();
              v118 = String.init(stringInterpolation:)();
              v121 = v60;
              v120 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", v117, v116 & 1);
              v119 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
              default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v229);
              gpklog(_:type:fileID:line:subsystem:)();
              (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v229, v226);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              i = v161;
            }
            (*(void (**)(char *, uint64_t, uint64_t))(v221 + 32))(v225, v219, v220);
            v148 = GPKUpdateGroupRequest.Member.metadata.getter();
            v149 = MEMORY[0x24BEE0D00];
            v150 = MEMORY[0x24BEE0D10];
            v153 = Dictionary<>.hashValue.getter();
            swift_bridgeObjectRelease();
            v151 = dispatch thunk of GPKMember.metadata.getter();
            v152 = Dictionary<>.hashValue.getter();
            swift_bridgeObjectRelease();
            if (v153 != v152)
              break;
            v47 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
            v125 = &v264;
            v264 = v47;
            v265 = v48;
            v128 = 1;
            v49 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No metadata changes found for member (", 0x26uLL, 1);
            v122 = v49._object;
            DefaultStringInterpolation.appendLiteral(_:)(v49);
            swift_bridgeObjectRelease();
            v50 = dispatch thunk of GPKMember.handle.getter();
            v123 = v263;
            v263[0] = v50;
            v263[1] = v51;
            DefaultStringInterpolation.appendInterpolation<A>(_:)();
            outlined destroy of String();
            v52 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("), so metadata not included", 0x1BuLL, v128 & 1);
            v124 = v52._object;
            DefaultStringInterpolation.appendLiteral(_:)(v52);
            swift_bridgeObjectRelease();
            v127 = v264;
            v126 = v265;
            swift_bridgeObjectRetain();
            outlined destroy of DefaultStringInterpolation();
            v129 = String.init(stringInterpolation:)();
            v132 = v53;
            v131 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v128 & 1);
            v130 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
            default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v229);
            gpklog(_:type:fileID:line:subsystem:)();
            (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v229, v226);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v221 + 8))(v225, v220);
            swift_release();
            i = v161;
          }
          dispatch thunk of GPKMember.userID.getter();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v211 + 48))(v209, 1, v210) != 1)
            break;
          outlined destroy of GPKUserID?(v209);
          v40 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
          v136 = &v261;
          v261 = v40;
          v262 = v41;
          v139 = 1;
          v42 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Member(", 7uLL, 1);
          v133 = v42._object;
          DefaultStringInterpolation.appendLiteral(_:)(v42);
          swift_bridgeObjectRelease();
          v43 = dispatch thunk of GPKMember.handle.getter();
          v134 = v260;
          v260[0] = v43;
          v260[1] = v44;
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          outlined destroy of String();
          v45 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(") is not resolved, not generating metadata key", 0x2EuLL, v139 & 1);
          v135 = v45._object;
          DefaultStringInterpolation.appendLiteral(_:)(v45);
          swift_bridgeObjectRelease();
          v138 = v261;
          v137 = v262;
          swift_bridgeObjectRetain();
          outlined destroy of DefaultStringInterpolation();
          v140 = String.init(stringInterpolation:)();
          v143 = v46;
          v141 = static os_log_type_t.error.getter();
          v142 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v139 & 1);
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v229);
          gpklog(_:type:fileID:line:subsystem:)();
          (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v229, v226);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v221 + 8))(v225, v220);
          swift_release();
          i = v161;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v211 + 32))(v215, v209, v210);
        v144 = GPKUpdateGroupRequest.Member.metadata.getter();
        dispatch thunk of GPKGroup.groupID.getter();
        v39 = v161;
        v145 = v282;
        swift_bridgeObjectRetain();
        MetadataService.serializedMemberMetadata(_:userID:groupID:existingMetadata:)(v144, v215, (uint64_t)v250, v145, v238);
        v146 = v39;
        v147 = v39;
        if (v39)
          break;
        swift_bridgeObjectRelease();
        v189(v250, v245);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, uint64_t))(v232 + 16))(v240, v238, v231);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
        Array.append(_:)();
        (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v238, v231);
        (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v215, v210);
        (*(void (**)(char *, uint64_t))(v221 + 8))(v225, v220);
        swift_release();
      }
      v70 = v147;
      swift_bridgeObjectRelease();
      v189(v250, v245);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v211 + 8))(v215, v210);
      (*(void (**)(char *, uint64_t))(v221 + 8))(v225, v220);
      swift_release();
      outlined destroy of IndexingIterator<[GPKMember]>();
      outlined destroy of [GPKMetadata]();
      outlined destroy of [String : GPKMetadata]();
      v73 = v70;
LABEL_42:
      v67[2] = v73;
      return v67[1];
    }
    v172 = dispatch thunk of GPKUpdateGroupRequest.groupMetadata.getter();
    dispatch thunk of GPKGroup.groupID.getter();
    v33 = v176;
    v173 = v282;
    swift_bridgeObjectRetain();
    MetadataService.serializedGroupMetadata(_:groupID:existingMetadata:)(v172, (uint64_t)v252, v173, v242);
    v174 = v33;
    v175 = v33;
    if (!v33)
    {
      swift_bridgeObjectRelease();
      v189(v252, v245);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v232 + 16))(v240, v242, v231);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
      Array.append(_:)();
      (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v242, v231);
      v171 = v174;
      goto LABEL_10;
    }
LABEL_39:
    v71 = v175;
    swift_bridgeObjectRelease();
    v189(v252, v245);
    swift_bridgeObjectRelease();
    outlined destroy of [GPKMetadata]();
    outlined destroy of [String : GPKMetadata]();
    v73 = v71;
    goto LABEL_42;
  }
  v81 = 0;
  v76 = 1;
  v66 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MetaData feature not enable, so not serializing.", 0x30uLL, 1);
  v77 = v66._countAndFlagsBits;
  v80 = v66._object;
  v79 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v76 & 1);
  v78 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v229);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v227 + 8))(v229, v226);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v84 = v81;
  v85 = v199;
LABEL_36:
  v74 = v85;
  v75 = v84;
  return v84;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  Swift::String v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  Swift::String v61;
  uint64_t v62;
  Builtin::Word v63;
  void *v64;
  _QWORD *v65;
  void *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t j;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unsigned int (*v95)(char *, uint64_t, uint64_t);
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t i;
  int v100;
  uint64_t countAndFlagsBits;
  int v102;
  Swift::String v103;
  void *object;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  int v152;
  _QWORD v153[2];
  _QWORD v154[2];
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD v158[2];
  uint64_t v159;
  uint64_t v160;
  _QWORD v161[2];
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE __b[40];
  uint64_t v170;
  uint64_t v171;
  _BYTE v172[24];
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  char v182;

  v140 = a1;
  v139 = a2;
  v181 = 0;
  v180 = 0;
  v179 = 0;
  v178 = 0;
  v177 = 0;
  v176 = 0;
  v175 = 0;
  v171 = 0;
  v170 = 0;
  memset(__b, 0, sizeof(__b));
  v167 = 0;
  v168 = 0;
  v164 = 0;
  v160 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v112 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v113 = (uint64_t)&v38 - v112;
  v132 = 0;
  v114 = type metadata accessor for GPKUserID();
  v115 = *(_QWORD *)(v114 - 8);
  v116 = (*(_QWORD *)(v115 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v132);
  v117 = (uint64_t)&v38 - v116;
  v181 = (char *)&v38 - v116;
  v118 = type metadata accessor for GPKCreateGroupRequest.Member();
  v119 = *(_QWORD *)(v118 - 8);
  v120 = (*(_QWORD *)(v119 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v118);
  v121 = (char *)&v38 - v120;
  v180 = (char *)&v38 - v120;
  v122 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKCreateGroupRequest.Member?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v132);
  v123 = (uint64_t)&v38 - v122;
  v124 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v125 = (char *)&v38 - v124;
  v126 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v127 = (char *)&v38 - v126;
  v128 = type metadata accessor for LogSubsystem();
  v129 = *(_QWORD *)(v128 - 8);
  v130 = (*(_QWORD *)(v129 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v132);
  v131 = (uint64_t)&v38 - v130;
  v133 = type metadata accessor for GPKGroupID();
  v134 = *(_QWORD *)(v133 - 8);
  v135 = (*(_QWORD *)(v134 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v132);
  v136 = (uint64_t)&v38 - v135;
  v137 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v138 = (uint64_t)&v38 - v137;
  v141 = type metadata accessor for GPKMetadata();
  v142 = *(_QWORD *)(v141 - 8);
  v143 = (*(_QWORD *)(v142 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v140);
  v144 = (uint64_t)&v38 - v143;
  v179 = (char *)&v38 - v143;
  v145 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v146 = (char *)&v38 - v145;
  v147 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v148 = (uint64_t)&v38 - v147;
  v178 = (char *)&v38 - v147;
  v177 = v14;
  v176 = v15;
  v175 = v2;
  v151 = v172;
  outlined init with copy of FeatureChecking(v2 + 96, (uint64_t)v172);
  v150 = v173;
  v149 = v174;
  __swift_project_boxed_opaque_existential_1(v151, v173);
  v152 = dispatch thunk of FeatureChecking.isMetaDataEnabled.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v151);
  if ((v152 & 1) != 0)
  {
    v171 = _allocateUninitializedArray<A>(_:)();
    v109 = dispatch thunk of GPKCreateGroupRequest.groupMetadata.getter();
    v110 = MEMORY[0x24263482C](v109, MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D10]);
    swift_bridgeObjectRelease();
    if ((v110 & 1) != 0)
    {
      v100 = 1;
      v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No group metadata found", 0x17uLL, 1);
      countAndFlagsBits = v17._countAndFlagsBits;
      object = v17._object;
      v103 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v100 & 1);
      v102 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v131);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v131, v128);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v105 = v111;
    }
    else
    {
      v106 = dispatch thunk of GPKCreateGroupRequest.groupMetadata.getter();
      dispatch thunk of GPKGroup.groupID.getter();
      v16 = v111;
      MetadataService.serializedGroupMetadata(_:groupID:existingMetadata:)(v106, v138, 0, v148);
      v107 = v16;
      v108 = v16;
      if (v16)
      {
        v40 = v108;
        (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v138, v133);
        swift_bridgeObjectRelease();
        outlined destroy of [GPKMetadata]();
        v41 = v40;
        return v38;
      }
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v138, v133);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v146, v148, v141);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
      Array.append(_:)();
      (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v148, v141);
      v105 = v107;
    }
    v98 = v105;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, GPKCreateGroupRequest.Member));
    _allocateUninitializedArray<A>(_:)();
    v170 = Dictionary.init(dictionaryLiteral:)();
    v96 = dispatch thunk of GPKCreateGroupRequest.members.getter();
    lazy protocol witness table accessor for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member();
    v97 = &v182;
    Set.makeIterator()();
    memcpy(__b, v97, sizeof(__b));
    for (i = v98; ; i = v94)
    {
      v94 = i;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<GPKCreateGroupRequest.Member>.Iterator);
      Set.Iterator.next()();
      v95 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48);
      if (v95(v127, 1, v118) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v119 + 32))(v121, v127, v118);
      v91 = GPKCreateGroupRequest.Member.handle.getter();
      v92 = v18;
      (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v125, v121, v118);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v125, 0, 1, v118);
      v93 = v153;
      v153[0] = v91;
      v153[1] = v92;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKCreateGroupRequest.Member]);
      Dictionary.subscript.setter();
      (*(void (**)(char *, uint64_t))(v119 + 8))(v121, v118);
    }
    outlined destroy of Set<GPKCreateGroupRequest.Member>.Iterator();
    v166 = dispatch thunk of GPKGroup.members.getter();
    v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
    lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
    Collection<>.makeIterator()();
    for (j = v94; ; j = v76)
    {
      while (1)
      {
        while (1)
        {
          v87 = j;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
          IndexingIterator.next()();
          v88 = v165;
          if (!v165)
          {
            outlined destroy of IndexingIterator<[GPKMember]>();
            v48 = &v171;
            v49 = v171;
            swift_bridgeObjectRetain();
            outlined destroy of [String : GPKCreateGroupRequest.Member]();
            outlined destroy of [GPKMetadata]();
            v50 = v49;
            v51 = v87;
            return v50;
          }
          v86 = v88;
          v85 = v88;
          v164 = v88;
          dispatch thunk of GPKMember.userID.getter();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114) != 1)
            break;
          outlined destroy of GPKUserID?(v113);
          v29 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
          v55 = &v162;
          v162 = v29;
          v163 = v30;
          v58 = 1;
          v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Member(", 7uLL, 1);
          v52 = v31._object;
          DefaultStringInterpolation.appendLiteral(_:)(v31);
          swift_bridgeObjectRelease();
          v32 = dispatch thunk of GPKMember.handle.getter();
          v53 = v161;
          v161[0] = v32;
          v161[1] = v33;
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          outlined destroy of String();
          v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(") is not resolved, not generating metadata key", 0x2EuLL, v58 & 1);
          v54 = v34._object;
          DefaultStringInterpolation.appendLiteral(_:)(v34);
          swift_bridgeObjectRelease();
          v57 = v162;
          v56 = v163;
          swift_bridgeObjectRetain();
          outlined destroy of DefaultStringInterpolation();
          v59 = String.init(stringInterpolation:)();
          v62 = v35;
          v60 = static os_log_type_t.error.getter();
          v61 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v58 & 1);
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v131);
          gpklog(_:type:fileID:line:subsystem:)();
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v131, v128);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          j = v87;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 32))(v117, v113, v114);
        if ((dispatch thunk of GPKMember.isMe.getter() & 1) != 0)
        {
          v160 = dispatch thunk of GPKCreateGroupRequest.meMemberMetadata.getter();
        }
        else
        {
          v19 = dispatch thunk of GPKMember.handle.getter();
          v83 = v158;
          v158[0] = v19;
          v158[1] = v20;
          MEMORY[0x24263485C]();
          outlined destroy of String();
          if (((uint64_t (*)(uint64_t, uint64_t, uint64_t))v95)(v123, 1, v118) == 0)
          {
            v81 = GPKCreateGroupRequest.Member.metadata.getter();
            outlined destroy of GPKCreateGroupRequest.Member?(v123);
            v82 = v81;
          }
          else
          {
            v80 = 0;
            outlined destroy of GPKCreateGroupRequest.Member?(v123);
            v82 = v80;
          }
          v157 = v82;
          if (v82)
          {
            v159 = v157;
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
            _allocateUninitializedArray<A>(_:)();
            v159 = Dictionary.init(dictionaryLiteral:)();
            outlined destroy of [String : String]?();
          }
          v160 = v159;
        }
        v78 = v160;
        swift_bridgeObjectRetain();
        v79 = MEMORY[0x24263482C](v78, MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D10]);
        swift_bridgeObjectRelease();
        if ((v79 & 1) == 0)
          break;
        v63 = 22;
        v22 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v67 = &v155;
        v155 = v22;
        v156 = v23;
        v70 = 1;
        v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No metadata found for ", v63, 1);
        v64 = v24._object;
        DefaultStringInterpolation.appendLiteral(_:)(v24);
        swift_bridgeObjectRelease();
        v25 = dispatch thunk of GPKMember.handle.getter();
        v65 = v154;
        v154[0] = v25;
        v154[1] = v26;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String();
        v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v70 & 1);
        v66 = v27._object;
        DefaultStringInterpolation.appendLiteral(_:)(v27);
        swift_bridgeObjectRelease();
        v69 = v155;
        v68 = v156;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        v71 = String.init(stringInterpolation:)();
        v74 = v28;
        v73 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v70 & 1);
        v72 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v131);
        gpklog(_:type:fileID:line:subsystem:)();
        (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v131, v128);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of [String : String]();
        (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v117, v114);
        swift_release();
        j = v87;
      }
      v75 = v160;
      swift_bridgeObjectRetain();
      dispatch thunk of GPKGroup.groupID.getter();
      v21 = v87;
      MetadataService.serializedMemberMetadata(_:userID:groupID:existingMetadata:)(v75, v117, v136, 0, v144);
      v76 = v21;
      v77 = v21;
      if (v21)
        break;
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v136, v133);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v142 + 16))(v146, v144, v141);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
      Array.append(_:)();
      (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v144, v141);
      outlined destroy of [String : String]();
      (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v117, v114);
      swift_release();
    }
    v39 = v77;
    (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v136, v133);
    swift_bridgeObjectRelease();
    outlined destroy of [String : String]();
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v117, v114);
    swift_release();
    outlined destroy of IndexingIterator<[GPKMember]>();
    outlined destroy of [String : GPKCreateGroupRequest.Member]();
    outlined destroy of [GPKMetadata]();
    v41 = v39;
    return v38;
  }
  v47 = 0;
  v42 = 1;
  v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MetaData feature not enable, so not serializing.", 0x30uLL, 1);
  v43 = v36._countAndFlagsBits;
  v46 = v36._object;
  v45 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v42 & 1);
  v44 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v131);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v131, v128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = v47;
  v51 = v111;
  return v50;
}

uint64_t closure #1 in MetadataService.serializedGroupMetadata(from:group:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;

  v8 = a1;
  v7[1] = a2;
  v17 = 0;
  v16 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMetadata?);
  v7[0] = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v14 = (char *)v7 - v7[0];
  v17 = a1;
  v16 = v4;
  v11 = GPKMetadata.key.getter();
  v12 = v5;
  v10 = type metadata accessor for GPKMetadata();
  v9 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v14, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v10);
  v13 = v15;
  v15[0] = v11;
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMetadata]);
  return Dictionary.subscript.setter();
}

uint64_t MetadataService.serializedGroupMetadata(_:groupID:existingMetadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  Class isa;
  id v31;
  int v32;
  uint64_t countAndFlagsBits;
  int v34;
  Swift::String v35;
  void *object;
  Builtin::Word v37;
  void *v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  Swift::String v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  int v70;
  uint64_t v71;
  uint64_t v72;
  id v73[2];
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;

  v52 = a4;
  v60 = a1;
  v61 = a2;
  v68 = a3;
  v85 = *MEMORY[0x24BDAC8D0];
  v81 = 0;
  v80 = 0;
  v79 = 0;
  v78 = 0;
  v77 = 0;
  v75 = 0;
  v76 = 0;
  v74 = 0;
  v82 = 0;
  v83 = 0;
  v57 = 0;
  v53 = type metadata accessor for LogSubsystem();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v53);
  v56 = (uint64_t)&v19 - v55;
  v58 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMetadata?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v57);
  v59 = (uint64_t)&v19 - v58;
  v62 = type metadata accessor for GPKMetadata();
  v63 = *(_QWORD *)(v62 - 8);
  v64 = (*(_QWORD *)(v63 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v61);
  v65 = (char *)&v19 - v64;
  v81 = (char *)&v19 - v64;
  v80 = v5;
  v79 = v6;
  v78 = v7;
  v77 = v4;
  v66 = static MetadataKeyGenerator.groupMetadataKey(for:)();
  v67 = v8;
  v75 = v66;
  v76 = v8;
  swift_bridgeObjectRetain();
  if (v68)
  {
    v51 = v68;
    v50 = v68;
    swift_bridgeObjectRetain();
    v49 = v69;
    v69[0] = v66;
    v69[1] = v67;
    MEMORY[0x24263485C]();
    outlined destroy of String();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v59, 1, 1, v62);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v59, 1, v62) == 1)
  {
    outlined destroy of GPKMetadata?(v59);
    v32 = 1;
    v74 = 1;
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group metadata not found in local storage, first version of metadata", 0x44uLL, 1);
    countAndFlagsBits = v15._countAndFlagsBits;
    object = v15._object;
    v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v32 & 1);
    v34 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v56);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v56, v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v65, v59, v62);
    result = GPKMetadata.version.getter();
    v48 = result + 1;
    if ((_DWORD)result == -1)
    {
      __break(1u);
      return result;
    }
    v74 = v48;
    v37 = 84;
    v10 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v40 = &v71;
    v71 = v10;
    v72 = v11;
    v43 = 1;
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Existing client meta data found group metadata, so increasing the metadata version: ", v37, 1);
    v38 = v12._object;
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    v70 = v48;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v43 & 1);
    v39 = v13._object;
    DefaultStringInterpolation.appendLiteral(_:)(v13);
    swift_bridgeObjectRelease();
    v42 = v71;
    v41 = v72;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v44 = String.init(stringInterpolation:)();
    v47 = v14;
    v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v43 & 1);
    v45 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v56);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v56, v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v62);
  }
  v26 = 0;
  v84 = 0;
  v28 = (id)objc_opt_self();
  swift_bridgeObjectRetain();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for NSJSONWritingOptions();
  v27 = _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  v73[0] = v84;
  v31 = objc_msgSend(v28, sel_dataWithJSONObject_options_error_, isa, v73[1], v73);
  v29 = v73[0];
  v16 = v73[0];
  v17 = v84;
  v84 = v29;

  swift_unknownObjectRelease();
  if (v31)
  {
    v25 = v31;
    v22 = v31;
    v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v18;
    v82 = v23;
    v83 = v18;

    return GPKMetadata.init(key:value:version:)();
  }
  else
  {
    v20 = v84;
    v21 = _convertNSErrorToError(_:)();

    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
}

uint64_t MetadataService.serializedMemberMetadata(_:userID:groupID:existingMetadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[16];
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  Class isa;
  id v38;
  void *object;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  Swift::String v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  Swift::String v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  void *v79;
  void *v80;
  uint64_t v81;
  _QWORD v82[2];
  int v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  id v88[4];
  uint64_t v89;
  uint64_t v90;
  int v91;
  void *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;

  v64 = a5;
  v72 = a1;
  v74 = a2;
  v73 = a3;
  v81 = a4;
  v103 = *MEMORY[0x24BDAC8D0];
  v99 = 0;
  v98 = 0;
  v97 = 0;
  v96 = 0;
  v95 = 0;
  v94 = 0;
  v92 = 0;
  v93 = 0;
  v91 = 0;
  v100 = 0;
  v101 = 0;
  v69 = 0;
  v65 = type metadata accessor for LogSubsystem();
  v66 = *(_QWORD *)(v65 - 8);
  v67 = (*(_QWORD *)(v66 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v65);
  v68 = &v26[-v67];
  v70 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMetadata?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v69);
  v71 = &v26[-v70];
  v75 = type metadata accessor for GPKMetadata();
  v76 = *(_QWORD *)(v75 - 8);
  v77 = (*(_QWORD *)(v76 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v74);
  v78 = &v26[-v77];
  v99 = &v26[-v77];
  v98 = v6;
  v97 = v7;
  v96 = v8;
  v95 = v9;
  v94 = v5;
  v79 = (void *)static MetadataKeyGenerator.memberMetadataKey(userID:groupID:)();
  v80 = v10;
  v92 = v79;
  v93 = v10;
  swift_bridgeObjectRetain();
  if (v81)
  {
    v63 = v81;
    v62 = v81;
    swift_bridgeObjectRetain();
    v61 = v82;
    v82[0] = v79;
    v82[1] = v80;
    MEMORY[0x24263485C]();
    outlined destroy of String();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v71, 1, 1, v75);
  }
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v76 + 48))(v71, 1, v75) == 1)
  {
    outlined destroy of GPKMetadata?((uint64_t)v71);
    v44 = 1;
    v91 = 1;
    v18 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v41 = &v89;
    v89 = v18;
    v90 = v19;
    v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Metadata not found for key ", 0x1BuLL, v44 & 1);
    object = v20._object;
    DefaultStringInterpolation.appendLiteral(_:)(v20);
    swift_bridgeObjectRelease();
    v88[2] = v79;
    v88[3] = v80;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" in local storage, first version of metadata", 0x2CuLL, v44 & 1);
    v40 = v21._object;
    DefaultStringInterpolation.appendLiteral(_:)(v21);
    swift_bridgeObjectRelease();
    v43 = v89;
    v42 = v90;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v45 = String.init(stringInterpolation:)();
    v48 = v22;
    v47 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v44 & 1);
    v46 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v68);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v68, v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v76 + 32))(v78, v71, v75);
    result = GPKMetadata.version.getter();
    v60 = result + 1;
    if ((_DWORD)result == -1)
    {
      __break(1u);
      return result;
    }
    v91 = v60;
    v12 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v52 = &v86;
    v86 = v12;
    v87 = v13;
    v55 = 1;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Existing client meta data found for key ", 0x28uLL, 1);
    v49 = v14._object;
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    v84 = v79;
    v85 = v80;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", so increasing the metadata version: ", 0x26uLL, v55 & 1);
    v50 = v15._object;
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    v83 = v60;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v55 & 1);
    v51 = v16._object;
    DefaultStringInterpolation.appendLiteral(_:)(v16);
    swift_bridgeObjectRelease();
    v54 = v86;
    v53 = v87;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v56 = String.init(stringInterpolation:)();
    v59 = v17;
    v58 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v55 & 1);
    v57 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v68);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v68, v65);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v76 + 8))(v78, v75);
  }
  v33 = 0;
  v102 = 0;
  v35 = (id)objc_opt_self();
  swift_bridgeObjectRetain();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for NSJSONWritingOptions();
  v34 = _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  v88[0] = v102;
  v38 = objc_msgSend(v35, sel_dataWithJSONObject_options_error_, isa, v88[1], v88);
  v36 = v88[0];
  v23 = v88[0];
  v24 = v102;
  v102 = v36;

  swift_unknownObjectRelease();
  if (v38)
  {
    v32 = v38;
    v29 = v38;
    v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v31 = v25;
    v100 = v30;
    v101 = v25;

    return GPKMetadata.init(key:value:version:)();
  }
  else
  {
    v27 = v102;
    v28 = _convertNSErrorToError(_:)();

    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
}

uint64_t partial apply for closure #1 in MetadataService.serializedGroupMetadata(from:group:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in MetadataService.serializedGroupMetadata(from:group:)(a1, *(_QWORD *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member;
  if (!lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member)
  {
    v0 = type metadata accessor for GPKCreateGroupRequest.Member();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D7D8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKCreateGroupRequest.Member and conformance GPKCreateGroupRequest.Member);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Set<GPKCreateGroupRequest.Member>.Iterator()
{
  outlined consume of Set<GPKCreateGroupRequest.Member>.Iterator._Variant();
}

uint64_t outlined consume of Set<GPKCreateGroupRequest.Member>.Iterator._Variant()
{
  return swift_release();
}

uint64_t outlined destroy of GPKCreateGroupRequest.Member?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for GPKCreateGroupRequest.Member();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t MetadataService.managedMembers(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56[8];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;

  v47 = a1;
  v61 = 0;
  v60 = 0;
  v59 = 0;
  v55 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMetadata?);
  v36 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v37 = (uint64_t)&v10 - v36;
  v39 = type metadata accessor for GPKMetadata();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v38);
  v42 = (char *)&v10 - v41;
  v61 = (char *)&v10 - v41;
  v60 = v2;
  v59 = v3;
  v43 = v56;
  outlined init with copy of MetadataStore(v3, (uint64_t)v56);
  v45 = v57;
  v46 = v58;
  __swift_project_boxed_opaque_existential_1(v43, v57);
  v4 = v44;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 24))(v47, v45);
  v48 = v4;
  v49 = v5;
  v50 = v4;
  if (!v4)
  {
    v35 = v49;
    v55 = v49;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
    swift_bridgeObjectRetain();
    if (v35)
    {
      v34 = v35;
      v51 = v35;
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
      lazy protocol witness table accessor for type [GPKMetadata] and conformance [A]();
      v6 = v48;
      Sequence.first(where:)();
      v33 = v6;
      if (v6)
      {
        __break(1u);
        goto LABEL_17;
      }
      outlined destroy of [GPKMetadata]();
      v31 = v33;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v37, 1, 1, v39);
      v31 = v48;
    }
    v30 = v31;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39) == 1)
    {
      outlined destroy of GPKMetadata?(v37);
      v15 = 0;
      type metadata accessor for GPKMember();
      v16 = _allocateUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      v18 = v16;
      v19 = v30;
      return v18;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v42, v37, v39);
    type metadata accessor for JSONDecoder();
    v24 = JSONDecoder.__allocating_init()();
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
    v25 = GPKMetadata.value.getter();
    v26 = v7;
    lazy protocol witness table accessor for type [GPKMember] and conformance <A> [A]();
    v8 = v30;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    v28 = v8;
    v29 = v8;
    if (!v8)
    {
      outlined consume of Data._Representation(v25, v26);
      swift_release();
      v22 = v53;
      v23 = v28;
LABEL_8:
      v21 = v23;
      v52 = v22;
      if (v22)
      {
        v54 = v52;
      }
      else
      {
        v20 = 0;
        type metadata accessor for GPKMember();
        v54 = _allocateUninitializedArray<A>(_:)();
        outlined destroy of [GPKMember]?();
      }
      v17 = v54;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
      swift_bridgeObjectRelease();
      v18 = v17;
      v19 = v21;
      return v18;
    }
LABEL_17:
    v10 = v29;
    v11 = 0;
    v12 = 0;
    outlined consume of Data._Representation(v25, v26);
    swift_release();

    v22 = v11;
    v23 = v12;
    goto LABEL_8;
  }
  v13 = v50;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  return v14;
}

uint64_t closure #1 in MetadataService.managedMembers(for:)()
{
  uint64_t v0;
  uint64_t v1;
  char v3;

  v0 = GPKMetadata.key.getter();
  v3 = static MetadataKeyGenerator.isManagedMembersKey(_:)(v0, v1);
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t MetadataService.serializedManagedMembers(_:groupID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  _BOOL4 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char v68[8];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;

  v42 = a3;
  v45 = a1;
  v55 = a2;
  v74 = 0;
  v73 = 0;
  v72 = 0;
  v71 = 0;
  v67 = 0;
  v66 = 0;
  v63 = 0;
  v64 = 0;
  v61 = 0;
  v62 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMetadata?);
  v43 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v44 = (uint64_t)&v15 - v43;
  v47 = type metadata accessor for GPKMetadata();
  v48 = *(_QWORD *)(v47 - 8);
  v49 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v46);
  v50 = (char *)&v15 - v49;
  v74 = (char *)&v15 - v49;
  v73 = v4;
  v72 = v5;
  v71 = v6;
  v51 = v68;
  outlined init with copy of MetadataStore(v6, (uint64_t)v68);
  v53 = v69;
  v54 = v70;
  __swift_project_boxed_opaque_existential_1(v51, v69);
  v7 = v52;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 24))(v55, v53);
  v56 = v7;
  v57 = v8;
  v58 = v7;
  if (v7)
  {
    v17 = v58;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
    v18 = v17;
    return result;
  }
  v41 = v57;
  v67 = v57;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
  v66 = 1;
  swift_bridgeObjectRetain();
  if (v41)
  {
    v40 = v41;
    v59 = v41;
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
    lazy protocol witness table accessor for type [GPKMetadata] and conformance [A]();
    v9 = v56;
    Sequence.first(where:)();
    v39 = v9;
    if (v9)
    {
      __break(1u);
      goto LABEL_20;
    }
    outlined destroy of [GPKMetadata]();
    v37 = v39;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v44, 1, 1, v47);
    v37 = v56;
  }
  v36 = v37;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v44, 1, v47) == 1)
  {
    outlined destroy of GPKMetadata?(v44);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v50, v44, v47);
    result = GPKMetadata.version.getter();
    v35 = result + 1;
    if ((_DWORD)result == -1)
    {
      __break(1u);
      return result;
    }
    v66 = v35;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v47);
  }
  v34 = v66 != 1;
  swift_bridgeObjectRetain();
  if (v34)
  {
    v33 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    v31 = &v60;
    v60 = v45;
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
    lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
    v32 = Collection.isEmpty.getter();
    outlined destroy of [GPKMember]();
    v33 = v32;
  }
  v29 = v33;
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v42, 1, 1, v47);
    result = swift_bridgeObjectRelease();
    v28 = v36;
    return result;
  }
  type metadata accessor for JSONEncoder();
  v21 = JSONEncoder.__allocating_init()();
  v23 = &v65;
  v65 = v45;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance <A> [A]();
  v11 = v36;
  v12 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v24 = v11;
  v25 = v12;
  v26 = v13;
  v27 = v11;
  if (!v11)
  {
    v20 = v26;
    v19 = v25;
    swift_release();
    v63 = v19;
    v64 = v20;
    v61 = static MetadataKeyGenerator.managedMembersKey(for:)();
    v62 = v14;
    GPKMetadata.init(key:value:version:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v42, 0, 1, v47);
    swift_bridgeObjectRelease();
    result = v24;
    v28 = v24;
    return result;
  }
LABEL_20:
  v16 = v27;
  swift_release();
  result = swift_bridgeObjectRelease();
  v18 = v16;
  return result;
}

uint64_t closure #1 in MetadataService.serializedManagedMembers(_:groupID:)()
{
  uint64_t v0;
  uint64_t v1;
  char v3;

  v0 = GPKMetadata.key.getter();
  v3 = static MetadataKeyGenerator.isManagedMembersKey(_:)(v0, v1);
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t MetadataService.serializedMetadata(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  Swift::String v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  Swift::String v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  Swift::String v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  void *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  Swift::String v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t i;
  int v82;
  uint64_t countAndFlagsBits;
  int v84;
  Swift::String v85;
  void *object;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  uint64_t v105;
  char *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  unint64_t v139;
  char *v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  int v146;
  uint64_t v147;
  _QWORD v148[2];
  uint64_t v149;
  uint64_t v150;
  _QWORD v151[2];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char v160[8];
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164[8];
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;

  v134 = a1;
  v171 = 0;
  v170 = 0;
  v169 = 0;
  v168 = 0;
  v167 = 0;
  v163 = 0;
  v159 = 0;
  v157 = 0;
  v158 = 0;
  v154 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v115 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v116 = (uint64_t)v34 - v115;
  v125 = 0;
  v117 = type metadata accessor for GPKUserID();
  v118 = *(_QWORD *)(v117 - 8);
  v119 = (*(_QWORD *)(v118 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v125);
  v120 = (uint64_t)v34 - v119;
  v171 = (char *)v34 - v119;
  v121 = type metadata accessor for LogSubsystem();
  v122 = *(_QWORD *)(v121 - 8);
  v123 = (*(_QWORD *)(v122 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v125);
  v124 = (uint64_t)v34 - v123;
  v126 = type metadata accessor for GPKMetadata();
  v127 = *(_QWORD *)(v126 - 8);
  v128 = (*(_QWORD *)(v127 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v125);
  v129 = (uint64_t)v34 - v128;
  v170 = (char *)v34 - v128;
  v130 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v131 = (char *)v34 - v130;
  v132 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v133 = (uint64_t)v34 - v132;
  v169 = (char *)v34 - v132;
  v135 = type metadata accessor for GPKGroupID();
  v136 = *(_QWORD *)(v135 - 8);
  v137 = (*(_QWORD *)(v136 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v134);
  v138 = (char *)v34 - v137;
  v139 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v140 = (char *)v34 - v139;
  v141 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v142 = (char *)v34 - v141;
  v168 = v11;
  v167 = v1;
  v145 = v164;
  outlined init with copy of FeatureChecking(v1 + 96, (uint64_t)v164);
  v144 = v165;
  v143 = v166;
  __swift_project_boxed_opaque_existential_1(v145, v165);
  v146 = dispatch thunk of FeatureChecking.isMetaDataEnabled.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
  if ((v146 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, GPKMetadata));
    _allocateUninitializedArray<A>(_:)();
    v163 = Dictionary.init(dictionaryLiteral:)();
    v106 = v160;
    outlined init with copy of MetadataStore(v113, (uint64_t)v160);
    v108 = v161;
    v109 = v162;
    v107 = __swift_project_boxed_opaque_existential_1(v106, v161);
    dispatch thunk of GPKGroup.groupID.getter();
    v12 = v114;
    v13 = (*(uint64_t (**)(char *, uint64_t))(v109 + 24))(v142, v108);
    v110 = v12;
    v111 = v13;
    v112 = v12;
    if (v12)
    {
      v37 = v112;
      (*(void (**)(char *, uint64_t))(v136 + 8))(v142, v135);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
      outlined destroy of [String : GPKMetadata]();
      v38 = v37;
      return v34[1];
    }
    v105 = v111;
    v104 = *(void (**)(char *, uint64_t))(v136 + 8);
    v104(v142, v135);
    if (v105)
    {
      v103 = v105;
      v147 = v105;
      v99 = v34;
      MEMORY[0x24BDAC7A8](v34);
      v100 = &v34[-4];
      v34[-2] = &v163;
      v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
      lazy protocol witness table accessor for type [GPKMetadata] and conformance [A]();
      v14 = v110;
      Sequence.forEach(_:)();
      v102 = v14;
      if (v14)
      {
        __break(1u);
LABEL_27:
        v36 = v91;
        swift_bridgeObjectRelease();
        v104(v140, v135);
        swift_bridgeObjectRelease();
        outlined destroy of [GPKMetadata]();
        outlined destroy of [String : GPKMetadata]();
        v38 = v36;
        return v34[1];
      }
      outlined destroy of [GPKMetadata]();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
      v98 = v102;
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
      v98 = v110;
    }
    v96 = v98;
    v159 = _allocateUninitializedArray<A>(_:)();
    v97 = dispatch thunk of GPKGroup.hasUnsavedMetaDataChanges.getter();
    swift_retain();
    if ((v97 & 1) != 0)
    {
      v93 = dispatch thunk of GPKGroup.metaData.getter();
      v94 = MEMORY[0x24263482C](v93, MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D00], MEMORY[0x24BEE0D10]);
      swift_bridgeObjectRelease();
      v95 = v94 ^ 1;
    }
    else
    {
      v95 = 0;
    }
    v92 = v95;
    swift_release();
    if ((v92 & 1) == 0)
    {
      v82 = 1;
      v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No changes to group metadata, so group metadata not included", 0x3CuLL, 1);
      countAndFlagsBits = v16._countAndFlagsBits;
      object = v16._object;
      v85 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v82 & 1);
      v84 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v124);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v124, v121);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v87 = v96;
LABEL_13:
      v80 = v87;
      v156 = dispatch thunk of GPKGroup.members.getter();
      v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
      lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
      Collection<>.makeIterator()();
      for (i = v80; ; i = v73)
      {
        while (1)
        {
          while (1)
          {
            v77 = i;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
            IndexingIterator.next()();
            v78 = v155;
            if (!v155)
            {
              outlined destroy of IndexingIterator<[GPKMember]>();
              v45 = &v159;
              v46 = v159;
              swift_bridgeObjectRetain();
              outlined destroy of [GPKMetadata]();
              outlined destroy of [String : GPKMetadata]();
              v47 = v46;
              v48 = v77;
              return v47;
            }
            v76 = v78;
            v75 = v78;
            v154 = v78;
            if ((dispatch thunk of GPKMember.hasUnsavedMetaDataChanges.getter() & 1) != 0)
              break;
            v25 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
            v52 = &v152;
            v152 = v25;
            v153 = v26;
            v55 = 1;
            v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No metadata changes found for member (", 0x26uLL, 1);
            v49 = v27._object;
            DefaultStringInterpolation.appendLiteral(_:)(v27);
            swift_bridgeObjectRelease();
            v28 = dispatch thunk of GPKMember.handle.getter();
            v50 = v151;
            v151[0] = v28;
            v151[1] = v29;
            DefaultStringInterpolation.appendInterpolation<A>(_:)();
            outlined destroy of String();
            v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("), so metadata not included", 0x1BuLL, v55 & 1);
            v51 = v30._object;
            DefaultStringInterpolation.appendLiteral(_:)(v30);
            swift_bridgeObjectRelease();
            v54 = v152;
            v53 = v153;
            swift_bridgeObjectRetain();
            outlined destroy of DefaultStringInterpolation();
            v56 = String.init(stringInterpolation:)();
            v59 = v31;
            v58 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v55 & 1);
            v57 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
            default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v124);
            gpklog(_:type:fileID:line:subsystem:)();
            (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v124, v121);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            i = v77;
          }
          dispatch thunk of GPKMember.userID.getter();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117) != 1)
            break;
          outlined destroy of GPKUserID?(v116);
          v18 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
          v63 = &v149;
          v149 = v18;
          v150 = v19;
          v66 = 1;
          v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Member(", 7uLL, 1);
          v60 = v20._object;
          DefaultStringInterpolation.appendLiteral(_:)(v20);
          swift_bridgeObjectRelease();
          v21 = dispatch thunk of GPKMember.handle.getter();
          v61 = v148;
          v148[0] = v21;
          v148[1] = v22;
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          outlined destroy of String();
          v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(") is not resolved, not generating metadata key", 0x2EuLL, v66 & 1);
          v62 = v23._object;
          DefaultStringInterpolation.appendLiteral(_:)(v23);
          swift_bridgeObjectRelease();
          v65 = v149;
          v64 = v150;
          swift_bridgeObjectRetain();
          outlined destroy of DefaultStringInterpolation();
          v67 = String.init(stringInterpolation:)();
          v70 = v24;
          v68 = static os_log_type_t.error.getter();
          v69 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v66 & 1);
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v124);
          gpklog(_:type:fileID:line:subsystem:)();
          (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v124, v121);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          i = v77;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v118 + 32))(v120, v116, v117);
        v71 = dispatch thunk of GPKMember.metadata.getter();
        dispatch thunk of GPKGroup.groupID.getter();
        v17 = v77;
        v72 = v163;
        swift_bridgeObjectRetain();
        MetadataService.serializedMemberMetadata(_:userID:groupID:existingMetadata:)(v71, v120, (uint64_t)v138, v72, v129);
        v73 = v17;
        v74 = v17;
        if (v17)
          break;
        swift_bridgeObjectRelease();
        v104(v138, v135);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v131, v129, v126);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
        Array.append(_:)();
        (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v129, v126);
        (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v120, v117);
        swift_release();
      }
      v35 = v74;
      swift_bridgeObjectRelease();
      v104(v138, v135);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v120, v117);
      swift_release();
      outlined destroy of IndexingIterator<[GPKMember]>();
      outlined destroy of [GPKMetadata]();
      outlined destroy of [String : GPKMetadata]();
      v38 = v35;
      return v34[1];
    }
    v88 = dispatch thunk of GPKGroup.metaData.getter();
    dispatch thunk of GPKGroup.groupID.getter();
    v15 = v96;
    v89 = v163;
    swift_bridgeObjectRetain();
    MetadataService.serializedGroupMetadata(_:groupID:existingMetadata:)(v88, (uint64_t)v140, v89, v133);
    v90 = v15;
    v91 = v15;
    if (!v15)
    {
      swift_bridgeObjectRelease();
      v104(v140, v135);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v131, v133, v126);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
      Array.append(_:)();
      (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v133, v126);
      v87 = v90;
      goto LABEL_13;
    }
    goto LABEL_27;
  }
  v44 = 0;
  v39 = 1;
  v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MetaData feature not enable, so not serializing.", 0x30uLL, 1);
  v40 = v32._countAndFlagsBits;
  v43 = v32._object;
  v42 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, v39 & 1);
  v41 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v124);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v124, v121);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = v44;
  v48 = v114;
  return v47;
}

uint64_t closure #1 in MetadataService.serializedMetadata(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;

  v8 = a1;
  v7[1] = a2;
  v17 = 0;
  v16 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMetadata?);
  v7[0] = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v14 = (char *)v7 - v7[0];
  v17 = a1;
  v16 = v4;
  v11 = GPKMetadata.key.getter();
  v12 = v5;
  v10 = type metadata accessor for GPKMetadata();
  v9 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v14, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v10);
  v13 = v15;
  v15[0] = v11;
  v15[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMetadata]);
  return Dictionary.subscript.setter();
}

uint64_t partial apply for closure #1 in MetadataService.serializedMetadata(from:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in MetadataService.serializedMetadata(from:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t MetadataService.fetchMetaData(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v2 + 752) = v1;
  *(_QWORD *)(v2 + 744) = a1;
  *(_QWORD *)(v2 + 688) = v2;
  *(_QWORD *)(v2 + 696) = 0;
  *(_QWORD *)(v2 + 704) = 0;
  memset((void *)(v2 + 128), 0, 0x30uLL);
  *(_DWORD *)(v2 + 1048) = 0;
  memset((void *)(v2 + 176), 0, 0x30uLL);
  memset((void *)(v2 + 16), 0, 0x70uLL);
  *(_QWORD *)(v2 + 720) = 0;
  *(_QWORD *)(v2 + 648) = 0;
  *(_QWORD *)(v2 + 656) = 0;
  *(_QWORD *)(v2 + 664) = 0;
  *(_QWORD *)(v2 + 736) = 0;
  v3 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v2 + 760) = v3;
  *(_QWORD *)(v2 + 768) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 776) = swift_task_alloc();
  v4 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v2 + 784) = v4;
  *(_QWORD *)(v2 + 792) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 800) = swift_task_alloc();
  *(_QWORD *)(v2 + 808) = type metadata accessor for CompleteFetchMetaDataRequest.Response();
  *(_QWORD *)(v2 + 816) = swift_task_alloc();
  *(_QWORD *)(v2 + 824) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<CompleteFetchMetaDataRequest.Response>);
  *(_QWORD *)(v2 + 832) = swift_task_alloc();
  *(_QWORD *)(v2 + 840) = type metadata accessor for InitFetchMetaDataRequest.Response();
  *(_QWORD *)(v2 + 848) = swift_task_alloc();
  v5 = type metadata accessor for GPKMemberRole();
  *(_QWORD *)(v2 + 856) = v5;
  *(_QWORD *)(v2 + 864) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 872) = swift_task_alloc();
  *(_QWORD *)(v2 + 880) = type metadata accessor for GroupSigner();
  *(_QWORD *)(v2 + 888) = swift_task_alloc();
  *(_QWORD *)(v2 + 896) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<InitFetchMetaDataRequest.Response>);
  *(_QWORD *)(v2 + 904) = swift_task_alloc();
  v6 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v2 + 912) = v6;
  *(_QWORD *)(v2 + 920) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v2 + 928) = swift_task_alloc();
  *(_QWORD *)(v2 + 936) = swift_task_alloc();
  *(_QWORD *)(v2 + 944) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  *(_QWORD *)(v2 + 952) = swift_task_alloc();
  v7 = type metadata accessor for GPKUserID();
  *(_QWORD *)(v2 + 960) = v7;
  *(_QWORD *)(v2 + 968) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 976) = swift_task_alloc();
  *(_QWORD *)(v2 + 696) = a1;
  *(_QWORD *)(v2 + 704) = v1;
  return swift_task_switch();
}

uint64_t MetadataService.fetchMetaData(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v14;
  char v15;

  v1 = v0[94];
  v0[86] = v0;
  outlined init with copy of FeatureChecking(v1 + 96, (uint64_t)(v0 + 28));
  __swift_project_boxed_opaque_existential_1(v0 + 28, v0[31]);
  v15 = dispatch thunk of FeatureChecking.isMetaDataEnabled.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 28));
  if ((v15 & 1) != 0)
  {
    if (dispatch thunk of GPKGroup.meMember.getter())
    {
      dispatch thunk of GPKMember.userID.getter();
      swift_release();
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v14[121] + 56))(v14[119], 1, 1, v14[120]);
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(v14[121] + 48))(v14[119], 1, v14[120]) == 1)
    {
      v9 = v14[100];
      v7 = v14[99];
      v8 = v14[98];
      outlined destroy of GPKUserID?(v14[119]);
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BE3DD08], v8);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)())(v14[86] + 8))();
    }
    else
    {
      v10 = v14[94];
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v14[121] + 32))(v14[122], v14[119], v14[120]);
      outlined init with copy of CryptographyServiceProviding(v10 + 40, (uint64_t)(v14 + 38));
      v11 = v14[41];
      v12 = v14[42];
      __swift_project_boxed_opaque_existential_1(v14 + 38, v11);
      dispatch thunk of GPKGroup.groupID.getter();
      v13 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 56)
                                                                               + **(int **)(v12 + 56));
      v2 = (_QWORD *)swift_task_alloc();
      v14[123] = v2;
      *v2 = v14[86];
      v2[1] = MetadataService.fetchMetaData(for:);
      return v13(v14 + 33, v14[118], v14[122], v11, v12);
    }
  }
  else
  {
    v5 = v14[97];
    v4 = v14[96];
    v6 = v14[95];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MetaData feature not enable, so not fetching.", 0x2DuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v14[86] + 8))(0);
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  v4 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 688) = *v1;
  *(_QWORD *)(v2 + 992) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4[113] + 8))(v4[116], v4[112]);
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t MetaDataRequest;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t (*v10)(_QWORD, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);

  v4 = v0[117];
  v5 = v0[94];
  v0[86] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 38));
  dispatch thunk of GPKGroup.groupID.getter();
  v7 = v0 + 16;
  InitFetchMetaDataRequest.init(groupID:)(v4, (uint64_t)(v0 + 16));
  v0[125] = *(_QWORD *)(v5 + 80);
  v9 = *(_QWORD *)(v5 + 88);
  swift_unknownObjectRetain();
  ObjectType = swift_getObjectType();
  v10 = (uint64_t (*)(_QWORD, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 + 32) + **(int **)(v9 + 32));
  v1 = (_QWORD *)swift_task_alloc();
  v6[126] = v1;
  MetaDataRequest = lazy protocol witness table accessor for type InitFetchMetaDataRequest and conformance InitFetchMetaDataRequest();
  *v1 = v6[86];
  v1[1] = MetadataService.fetchMetaData(for:);
  return v10(v6[113], v7, &type metadata for InitFetchMetaDataRequest, MetaDataRequest, ObjectType, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 688) = *v1;
  *(_QWORD *)(v2 + 1016) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v5;
  _QWORD *v6;
  unint64_t MetaDataRequest;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Request;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  _QWORD v33[6];

  v1 = *(_QWORD *)(v0 + 1016);
  v32 = *(_QWORD *)(v0 + 928);
  v24 = *(_QWORD *)(v0 + 904);
  v23 = *(_QWORD *)(v0 + 896);
  v30 = *(char **)(v0 + 888);
  v29 = *(_QWORD *)(v0 + 880);
  v22 = *(_QWORD *)(v0 + 872);
  v18 = *(_QWORD *)(v0 + 864);
  v19 = *(_QWORD *)(v0 + 856);
  v26 = *(_QWORD *)(v0 + 848);
  v25 = *(_QWORD *)(v0 + 840);
  v17 = *(_QWORD *)(v0 + 752);
  *(_QWORD *)(v0 + 688) = v0;
  swift_unknownObjectRelease();
  outlined init with copy of CryptographyServiceProviding(v17 + 40, v0 + 344);
  outlined init with copy of CryptoGroup(v0 + 264, v0 + 384);
  Request = static GPKConstant.metadataFetchRequestDiversifier.getter();
  v21 = v2;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v22, *MEMORY[0x24BE3DAC0], v19);
  GroupSigner.init(cryptoService:group:diversifier:role:)((const void *)(v0 + 344), (const void *)(v0 + 384), Request, v21, v22, v30);
  *(_QWORD *)(v0 + 712) = dispatch thunk of GPKGroup.version.getter();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int64 and conformance Int64();
  UnsignedInteger<>.init<A>(_:)();
  v31 = *(_DWORD *)(v0 + 1052);
  *(_DWORD *)(v0 + 1048) = v31;
  dispatch thunk of GPKGroup.groupID.getter();
  outlined init with copy of InitFetchMetaDataRequest.Response(v24 + *(int *)(v23 + 36), v26);
  v3 = (uint64_t *)(v26 + *(int *)(v25 + 20));
  v27 = *v3;
  v28 = v3[1];
  outlined copy of Data._Representation(*v3, v28);
  outlined destroy of InitFetchMetaDataRequest.Response(v26);
  v33[0] = v27;
  v33[1] = v28;
  *(_QWORD *)(v0 + 448) = v29;
  *(_QWORD *)(v0 + 456) = &protocol witness table for GroupSigner;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 424));
  outlined init with copy of GroupSigner(v30, (char *)boxed_opaque_existential_1);
  CompleteFetchMetaDataRequest.init(groupID:nonce:groupVersion:signer:)(v32, (uint64_t)v33, v31, (_QWORD *)(v0 + 424), v0 + 176);
  if (v1)
  {
    v11 = v16[122];
    v10 = v16[121];
    v12 = v16[120];
    v9 = v16[113];
    outlined destroy of GroupSigner(v16[111]);
    outlined destroy of NetworkResponse<InitFetchMetaDataRequest.Response>(v9);
    outlined destroy of InitFetchMetaDataRequest((uint64_t)(v16 + 16));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v16 + 33));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(v16[86] + 8))();
  }
  else
  {
    v5 = v16[94];
    v16[128] = *(_QWORD *)(v5 + 80);
    v14 = *(_QWORD *)(v5 + 88);
    swift_unknownObjectRetain();
    ObjectType = swift_getObjectType();
    v15 = (uint64_t (*)(_QWORD, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 + 32) + **(int **)(v14 + 32));
    v6 = (_QWORD *)swift_task_alloc();
    v16[129] = v6;
    MetaDataRequest = lazy protocol witness table accessor for type CompleteFetchMetaDataRequest and conformance CompleteFetchMetaDataRequest();
    *v6 = v16[86];
    v6[1] = MetadataService.fetchMetaData(for:);
    return v15(v16[104], v16 + 22, &type metadata for CompleteFetchMetaDataRequest, MetaDataRequest, ObjectType, v14);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 688) = *v1;
  *(_QWORD *)(v2 + 1040) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *, _QWORD);
  void (*v23)(_QWORD *, uint64_t);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;

  v29 = v0[104];
  v28 = v0[103];
  v31 = v0[102];
  v30 = v0[101];
  v25 = v0[94];
  v0[86] = v0;
  swift_unknownObjectRelease();
  outlined init with copy of CryptographyServiceProviding(v25 + 40, (uint64_t)(v0 + 58));
  outlined init with copy of CryptoGroup((uint64_t)(v0 + 33), (uint64_t)(v0 + 63));
  v26 = static GPKConstant.metadataEncryptionDiversifier.getter();
  v27 = v1;
  v2 = static GPKConstant.internalEntitlementID.getter();
  GroupDecryptor.init(cryptoService:group:diversifier:entitlementID:)((uint64_t)(v0 + 58), (uint64_t)(v0 + 63), v26, v27, v2, v3, v0 + 2);
  outlined init with copy of CompleteFetchMetaDataRequest.Response(v29 + *(int *)(v28 + 36), v31);
  v32 = *(_QWORD *)(v31 + *(int *)(v30 + 20));
  swift_bridgeObjectRetain();
  outlined destroy of CompleteFetchMetaDataRequest.Response(v31);
  v0[90] = v32;
  v33 = v0[90];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[91] = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
  lazy protocol witness table accessor for type [GPKMetadata] and conformance [A]();
  RandomAccessCollection<>.indices.getter();
  outlined destroy of [GPKMetadata]();
  swift_bridgeObjectRelease();
  v0[81] = specialized Collection<>.makeIterator()();
  v0[82] = v4;
  v0[83] = v5;
  for (i = v0[130]; ; i = 0)
  {
    v35 = specialized IndexingIterator.next()();
    if ((v6 & 1) != 0)
    {
      v19 = v24[122];
      v18 = v24[121];
      v20 = v24[120];
      v17 = v24[113];
      v16 = v24[111];
      v15 = v24[104];
      v21 = v24[90];
      swift_bridgeObjectRetain();
      outlined destroy of [GPKMetadata]();
      outlined destroy of GroupDecryptor((uint64_t)(v24 + 2));
      outlined destroy of NetworkResponse<CompleteFetchMetaDataRequest.Response>(v15);
      outlined destroy of CompleteFetchMetaDataRequest((uint64_t)(v24 + 22));
      outlined destroy of GroupSigner(v16);
      outlined destroy of NetworkResponse<InitFetchMetaDataRequest.Response>(v17);
      outlined destroy of InitFetchMetaDataRequest((uint64_t)(v24 + 16));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v24 + 33));
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v24[86] + 8))(v21);
    }
    v24[92] = v35;
    v22 = (void (*)(_QWORD *, _QWORD))Array.subscript.modify();
    GPKMetadata.didParseFromServer()();
    v22(v24 + 73, 0);
    v24[71] = &type metadata for GroupDecryptor;
    v24[72] = &protocol witness table for GroupDecryptor;
    v7 = swift_allocObject();
    v24[68] = v7;
    outlined init with copy of GroupDecryptor(v24 + 2, (_QWORD *)(v7 + 16));
    v23 = (void (*)(_QWORD *, uint64_t))Array.subscript.modify();
    GPKMetadata.decrypt(with:)(v24 + 68);
    if (i)
      break;
    v23(v24 + 77, 0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v24 + 68));
  }
  v13 = v24[122];
  v12 = v24[121];
  v14 = v24[120];
  v11 = v24[113];
  v10 = v24[111];
  v9 = v24[104];
  v23(v24 + 77, 1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v24 + 68));
  outlined destroy of [GPKMetadata]();
  outlined destroy of GroupDecryptor((uint64_t)(v24 + 2));
  outlined destroy of NetworkResponse<CompleteFetchMetaDataRequest.Response>(v9);
  outlined destroy of CompleteFetchMetaDataRequest((uint64_t)(v24 + 22));
  outlined destroy of GroupSigner(v10);
  outlined destroy of NetworkResponse<InitFetchMetaDataRequest.Response>(v11);
  outlined destroy of InitFetchMetaDataRequest((uint64_t)(v24 + 16));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v24 + 33));
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v24[86] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v0[122];
  v5 = v0[121];
  v7 = v0[120];
  v1 = v0[118];
  v2 = v0[115];
  v3 = v0[114];
  v0[86] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 38));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[86] + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v0[122];
  v2 = v0[121];
  v4 = v0[120];
  v0[86] = v0;
  swift_unknownObjectRelease();
  outlined destroy of InitFetchMetaDataRequest((uint64_t)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 33));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[86] + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v0[122];
  v4 = v0[121];
  v6 = v0[120];
  v3 = v0[113];
  v2 = v0[111];
  v0[86] = v0;
  swift_unknownObjectRelease();
  outlined destroy of CompleteFetchMetaDataRequest((uint64_t)(v0 + 22));
  outlined destroy of GroupSigner(v2);
  outlined destroy of NetworkResponse<InitFetchMetaDataRequest.Response>(v3);
  outlined destroy of InitFetchMetaDataRequest((uint64_t)(v0 + 16));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 33));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[86] + 8))();
}

unint64_t lazy protocol witness table accessor for type InitFetchMetaDataRequest and conformance InitFetchMetaDataRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchMetaDataRequest and conformance InitFetchMetaDataRequest;
  if (!lazy protocol witness table cache variable for type InitFetchMetaDataRequest and conformance InitFetchMetaDataRequest)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchMetaDataRequest, &type metadata for InitFetchMetaDataRequest);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchMetaDataRequest and conformance InitFetchMetaDataRequest);
    return v0;
  }
  return v2;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;

  v3 = result;
  if ((*(_DWORD *)(*(_QWORD *)(result[3] - 8) + 80) & 0x20000) != 0)
  {
    v1 = swift_allocBox();
    result = v2;
    *v3 = v1;
  }
  return result;
}

char *outlined init with copy of GroupSigner(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a2 + 3) = v2;
  *((_QWORD *)a2 + 4) = *((_QWORD *)a1 + 4);
  (**(void (***)(void))(v2 - 8))();
  v3 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a2 + 8) = v3;
  *((_QWORD *)a2 + 9) = *((_QWORD *)a1 + 9);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 40), (uint64_t)(a1 + 40));
  v6 = *((_QWORD *)a1 + 10);
  v7 = *((_QWORD *)a1 + 11);
  outlined copy of Data._Representation(v6, v7);
  *((_QWORD *)a2 + 10) = v6;
  *((_QWORD *)a2 + 11) = v7;
  v8 = *(int *)(type metadata accessor for GroupSigner() + 28);
  v4 = type metadata accessor for GPKMemberRole();
  (*(void (**)(char *, char *))(*(_QWORD *)(v4 - 8) + 16))(&a2[v8], &a1[v8]);
  return a2;
}

uint64_t outlined destroy of GroupSigner(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  v3 = *(int *)(type metadata accessor for GroupSigner() + 28);
  v1 = type metadata accessor for GPKMemberRole();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1 + v3);
  return a1;
}

uint64_t outlined destroy of NetworkResponse<InitFetchMetaDataRequest.Response>(uint64_t a1)
{
  uint64_t v1;
  uint64_t MetaData;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<InitFetchMetaDataRequest.Response>)
              + 36);
  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4);
  MetaData = type metadata accessor for InitFetchMetaDataRequest.Response();
  outlined consume of Data._Representation(*(_QWORD *)(v4 + *(int *)(MetaData + 20)), *(_QWORD *)(v4 + *(int *)(MetaData + 20) + 8));
  return a1;
}

unint64_t lazy protocol witness table accessor for type CompleteFetchMetaDataRequest and conformance CompleteFetchMetaDataRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest and conformance CompleteFetchMetaDataRequest;
  if (!lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest and conformance CompleteFetchMetaDataRequest)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteFetchMetaDataRequest, &type metadata for CompleteFetchMetaDataRequest);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteFetchMetaDataRequest and conformance CompleteFetchMetaDataRequest);
    return v0;
  }
  return v2;
}

uint64_t outlined destroy of NetworkResponse<CompleteFetchMetaDataRequest.Response>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v3 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<CompleteFetchMetaDataRequest.Response>)
              + 36);
  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  type metadata accessor for CompleteFetchMetaDataRequest.Response();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23D485724()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  return swift_deallocObject();
}

uint64_t MetadataService.updateMetaData(_:group:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 520) = v2;
  *(_QWORD *)(v3 + 512) = a2;
  *(_QWORD *)(v3 + 504) = a1;
  *(_QWORD *)(v3 + 440) = v3;
  *(_QWORD *)(v3 + 448) = 0;
  *(_QWORD *)(v3 + 456) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  memset((void *)(v3 + 16), 0, 0x30uLL);
  *(_DWORD *)(v3 + 848) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  v4 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v3 + 528) = v4;
  *(_QWORD *)(v3 + 536) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 544) = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v3 + 552) = v5;
  *(_QWORD *)(v3 + 560) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 568) = swift_task_alloc();
  *(_QWORD *)(v3 + 576) = type metadata accessor for CompleteUpdateMetaDataRequest.Response();
  *(_QWORD *)(v3 + 584) = swift_task_alloc();
  *(_QWORD *)(v3 + 592) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<CompleteUpdateMetaDataRequest.Response>);
  *(_QWORD *)(v3 + 600) = swift_task_alloc();
  *(_QWORD *)(v3 + 608) = type metadata accessor for InitUpdateMetaDataRequest.Response();
  *(_QWORD *)(v3 + 616) = swift_task_alloc();
  *(_QWORD *)(v3 + 624) = type metadata accessor for CompleteUpdateMetaDataRequest();
  *(_QWORD *)(v3 + 632) = swift_task_alloc();
  *(_QWORD *)(v3 + 640) = type metadata accessor for GroupSigner();
  *(_QWORD *)(v3 + 648) = swift_task_alloc();
  v6 = type metadata accessor for GPKMemberRole();
  *(_QWORD *)(v3 + 656) = v6;
  *(_QWORD *)(v3 + 664) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 672) = swift_task_alloc();
  *(_QWORD *)(v3 + 680) = type metadata accessor for GroupEncryptor();
  *(_QWORD *)(v3 + 688) = swift_task_alloc();
  *(_QWORD *)(v3 + 696) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<InitUpdateMetaDataRequest.Response>);
  *(_QWORD *)(v3 + 704) = swift_task_alloc();
  v7 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v3 + 712) = v7;
  *(_QWORD *)(v3 + 720) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 728) = swift_task_alloc();
  *(_QWORD *)(v3 + 736) = swift_task_alloc();
  *(_QWORD *)(v3 + 744) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  *(_QWORD *)(v3 + 752) = swift_task_alloc();
  v8 = type metadata accessor for GPKUserID();
  *(_QWORD *)(v3 + 760) = v8;
  *(_QWORD *)(v3 + 768) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 776) = swift_task_alloc();
  *(_QWORD *)(v3 + 448) = a1;
  *(_QWORD *)(v3 + 456) = a2;
  *(_QWORD *)(v3 + 464) = v2;
  return swift_task_switch();
}

uint64_t MetadataService.updateMetaData(_:group:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v14;
  char v15;

  v1 = v0[65];
  v0[55] = v0;
  outlined init with copy of FeatureChecking(v1 + 96, (uint64_t)(v0 + 8));
  __swift_project_boxed_opaque_existential_1(v0 + 8, v0[11]);
  v15 = dispatch thunk of FeatureChecking.isMetaDataEnabled.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 8));
  if ((v15 & 1) != 0)
  {
    if (dispatch thunk of GPKGroup.meMember.getter())
    {
      dispatch thunk of GPKMember.userID.getter();
      swift_release();
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v14[96] + 56))(v14[94], 1, 1, v14[95]);
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(v14[96] + 48))(v14[94], 1, v14[95]) == 1)
    {
      v9 = v14[68];
      v7 = v14[67];
      v8 = v14[66];
      outlined destroy of GPKUserID?(v14[94]);
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BE3DD08], v8);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v14[55] + 8))();
    }
    else
    {
      v10 = v14[65];
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v14[96] + 32))(v14[97], v14[94], v14[95]);
      outlined init with copy of CryptographyServiceProviding(v10 + 40, (uint64_t)(v14 + 18));
      v11 = v14[21];
      v12 = v14[22];
      __swift_project_boxed_opaque_existential_1(v14 + 18, v11);
      dispatch thunk of GPKGroup.groupID.getter();
      v13 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 56)
                                                                               + **(int **)(v12 + 56));
      v2 = (_QWORD *)swift_task_alloc();
      v14[98] = v2;
      *v2 = v14[55];
      v2[1] = MetadataService.updateMetaData(_:group:);
      return v13(v14 + 13, v14[93], v14[97], v11, v12);
    }
  }
  else
  {
    v5 = v14[71];
    v4 = v14[70];
    v6 = v14[69];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MetaData feature not enable, so not updating.", 0x2DuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v14[55] + 8))();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  v4 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 440) = *v1;
  *(_QWORD *)(v2 + 792) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4[88] + 8))(v4[91], v4[87]);
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t inited;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t ObjectType;
  uint64_t v9;
  uint64_t (*v10)(_QWORD, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);

  v4 = v0[92];
  v5 = v0[65];
  v0[55] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 18));
  dispatch thunk of GPKGroup.groupID.getter();
  v7 = v0 + 2;
  InitUpdateMetaDataRequest.init(groupID:)(v4, (uint64_t)(v0 + 2));
  v0[100] = *(_QWORD *)(v5 + 80);
  v9 = *(_QWORD *)(v5 + 88);
  swift_unknownObjectRetain();
  ObjectType = swift_getObjectType();
  v10 = (uint64_t (*)(_QWORD, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 + 32) + **(int **)(v9 + 32));
  v1 = (_QWORD *)swift_task_alloc();
  v6[101] = v1;
  inited = lazy protocol witness table accessor for type InitUpdateMetaDataRequest and conformance InitUpdateMetaDataRequest();
  *v1 = v6[55];
  v1[1] = MetadataService.updateMetaData(_:group:);
  return v10(v6[88], v7, &type metadata for InitUpdateMetaDataRequest, inited, ObjectType, v9);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 440) = *v1;
  *(_QWORD *)(v2 + 816) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t (*v20)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t);
  uint64_t updated;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];

  v1 = *(_QWORD *)(v0 + 816);
  v45 = *(_QWORD *)(v0 + 728);
  v33 = *(_QWORD *)(v0 + 704);
  v32 = *(_QWORD *)(v0 + 696);
  v39 = *(char **)(v0 + 688);
  v38 = *(_QWORD *)(v0 + 680);
  v31 = *(_QWORD *)(v0 + 672);
  v22 = *(_QWORD *)(v0 + 664);
  v27 = *(_QWORD *)(v0 + 656);
  v41 = *(char **)(v0 + 648);
  v40 = *(_QWORD *)(v0 + 640);
  v42 = *(_QWORD *)(v0 + 632);
  v35 = *(_QWORD *)(v0 + 616);
  v34 = *(_QWORD *)(v0 + 608);
  v25 = *(_QWORD *)(v0 + 520);
  v44 = *(_QWORD *)(v0 + 504);
  *(_QWORD *)(v0 + 440) = v0;
  swift_unknownObjectRelease();
  outlined init with copy of CryptographyServiceProviding(v25 + 40, v0 + 184);
  outlined init with copy of CryptoGroup(v0 + 104, v0 + 224);
  v23 = static GPKConstant.metadataEncryptionDiversifier.getter();
  v24 = v2;
  v26 = (unsigned int *)MEMORY[0x24BE3DAC0];
  v28 = *(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104);
  v28(v31, *MEMORY[0x24BE3DAC0], v27);
  v3 = static GPKConstant.internalEntitlementID.getter();
  GroupEncryptor.init(cryptoService:group:diversifier:role:entitlementID:)(v0 + 184, v0 + 224, v23, v24, v31, v3, v4, v39);
  outlined init with copy of CryptographyServiceProviding(v25 + 40, v0 + 264);
  outlined init with copy of CryptoGroup(v0 + 104, v0 + 304);
  updated = static GPKConstant.metadataUpdateRequestDiversifier.getter();
  v30 = v5;
  v28(v31, *v26, v27);
  GroupSigner.init(cryptoService:group:diversifier:role:)((const void *)(v0 + 264), (const void *)(v0 + 304), updated, v30, v31, v41);
  *(_QWORD *)(v0 + 472) = dispatch thunk of GPKGroup.version.getter();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int64 and conformance Int64();
  UnsignedInteger<>.init<A>(_:)();
  v43 = *(_DWORD *)(v0 + 852);
  *(_DWORD *)(v0 + 848) = v43;
  dispatch thunk of GPKGroup.groupID.getter();
  outlined init with copy of InitUpdateMetaDataRequest.Response(v33 + *(int *)(v32 + 36), v35);
  v6 = (uint64_t *)(v35 + *(int *)(v34 + 20));
  v36 = *v6;
  v37 = v6[1];
  outlined copy of Data._Representation(*v6, v37);
  outlined destroy of InitUpdateMetaDataRequest.Response(v35);
  v46[0] = v36;
  v46[1] = v37;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 368) = v38;
  *(_QWORD *)(v0 + 376) = &protocol witness table for GroupEncryptor;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 344));
  outlined init with copy of GroupEncryptor(v39, (char *)boxed_opaque_existential_1);
  *(_QWORD *)(v0 + 408) = v40;
  *(_QWORD *)(v0 + 416) = &protocol witness table for GroupSigner;
  v8 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 384));
  outlined init with copy of GroupSigner(v41, (char *)v8);
  CompleteUpdateMetaDataRequest.init(groupID:nonce:groupVersion:unencryptedMetadata:encryptor:signer:)(v45, (uint64_t)v46, v43, v44, (_QWORD *)(v0 + 344), (_QWORD *)(v0 + 384), v42);
  if (v1)
  {
    v16 = v21[97];
    v15 = v21[96];
    v17 = v21[95];
    v14 = v21[88];
    v13 = v21[86];
    outlined destroy of GroupSigner(v21[81]);
    outlined destroy of GroupEncryptor(v13);
    outlined destroy of NetworkResponse<InitUpdateMetaDataRequest.Response>(v14);
    outlined destroy of InitUpdateMetaDataRequest((uint64_t)(v21 + 2));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v21 + 13));
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v21[55] + 8))();
  }
  else
  {
    v9 = v21[65];
    v21[103] = *(_QWORD *)(v9 + 80);
    v19 = *(_QWORD *)(v9 + 88);
    swift_unknownObjectRetain();
    ObjectType = swift_getObjectType();
    v20 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 + 32)
                                                                                             + **(int **)(v19 + 32));
    v10 = (_QWORD *)swift_task_alloc();
    v21[104] = v10;
    v11 = lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest and conformance CompleteUpdateMetaDataRequest();
    *v10 = v21[55];
    v10[1] = MetadataService.updateMetaData(_:group:);
    return v20(v21[75], v21[79], v21[78], v11, ObjectType, v19);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 440) = *v1;
  *(_QWORD *)(v2 + 840) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = v0[97];
  v15 = v0[96];
  v17 = v0[95];
  v14 = v0[88];
  v13 = v0[86];
  v12 = v0[81];
  v11 = v0[79];
  v10 = v0[75];
  v5 = v0[74];
  v6 = v0[73];
  v8 = v0[71];
  v7 = v0[70];
  v9 = v0[69];
  v0[55] = v0;
  swift_unknownObjectRelease();
  v0[53] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[54] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Meta data update response: ", 0x1BuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  outlined init with copy of CompleteUpdateMetaDataRequest.Response(v10 + *(int *)(v5 + 36), v6);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of CompleteUpdateMetaDataRequest.Response(v6);
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v8);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of NetworkResponse<CompleteUpdateMetaDataRequest.Response>(v10);
  outlined destroy of CompleteUpdateMetaDataRequest(v11);
  outlined destroy of GroupSigner(v12);
  outlined destroy of GroupEncryptor(v13);
  outlined destroy of NetworkResponse<InitUpdateMetaDataRequest.Response>(v14);
  outlined destroy of InitUpdateMetaDataRequest((uint64_t)(v0 + 2));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 13));
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[55] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v0[97];
  v5 = v0[96];
  v7 = v0[95];
  v1 = v0[93];
  v2 = v0[90];
  v3 = v0[89];
  v0[55] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 18));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[55] + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v0[97];
  v2 = v0[96];
  v4 = v0[95];
  v0[55] = v0;
  swift_unknownObjectRelease();
  outlined destroy of InitUpdateMetaDataRequest((uint64_t)(v0 + 2));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 13));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[55] + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void (*v34)(uint64_t, _QWORD, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;

  v40 = (void *)v0[105];
  v0[55] = v0;
  swift_unknownObjectRelease();
  v1 = v40;
  v0[60] = v40;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  type metadata accessor for NSError();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v2 = *(_QWORD *)(v39 + 544);
    v35 = *(_QWORD *)(v39 + 536);
    v36 = *(_QWORD *)(v39 + 528);
    v33 = *(void **)(v39 + 488);
    *(_QWORD *)(v39 + 496) = v33;
    v38 = objc_msgSend(v33, sel_code);
    v34 = *(void (**)(uint64_t, _QWORD, uint64_t))(v35 + 104);
    v34(v2, *MEMORY[0x24BE3DDB8], v36);
    v37 = InternalErrorCode.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v2, v36);
    if (v38 == (id)v37)
    {
      v25 = *(void **)(v39 + 840);
      v31 = *(_QWORD *)(v39 + 776);
      v30 = *(_QWORD *)(v39 + 768);
      v32 = *(_QWORD *)(v39 + 760);
      v29 = *(_QWORD *)(v39 + 704);
      v28 = *(_QWORD *)(v39 + 688);
      v27 = *(_QWORD *)(v39 + 648);
      v26 = *(_QWORD *)(v39 + 632);
      v21 = *(_QWORD *)(v39 + 568);
      v20 = *(_QWORD *)(v39 + 560);
      v22 = *(_QWORD *)(v39 + 552);
      v24 = *(_QWORD *)(v39 + 544);
      v23 = *(_QWORD *)(v39 + 528);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Metadata version conflict", 0x19uLL, 1);
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/MetadataService.swift", 0x22uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      v34(v24, *MEMORY[0x24BE3DDB8], v23);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();

      outlined destroy of CompleteUpdateMetaDataRequest(v26);
      outlined destroy of GroupSigner(v27);
      outlined destroy of GroupEncryptor(v28);
      outlined destroy of NetworkResponse<InitUpdateMetaDataRequest.Response>(v29);
      outlined destroy of InitUpdateMetaDataRequest(v39 + 16);
      __swift_destroy_boxed_opaque_existential_1(v39 + 104);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
    }
    else
    {
      v12 = *(id *)(v39 + 840);
      v18 = *(_QWORD *)(v39 + 776);
      v17 = *(_QWORD *)(v39 + 768);
      v19 = *(_QWORD *)(v39 + 760);
      v16 = *(_QWORD *)(v39 + 704);
      v15 = *(_QWORD *)(v39 + 688);
      v14 = *(_QWORD *)(v39 + 648);
      v13 = *(_QWORD *)(v39 + 632);
      v3 = v33;
      swift_willThrow();

      outlined destroy of CompleteUpdateMetaDataRequest(v13);
      outlined destroy of GroupSigner(v14);
      outlined destroy of GroupEncryptor(v15);
      outlined destroy of NetworkResponse<InitUpdateMetaDataRequest.Response>(v16);
      outlined destroy of InitUpdateMetaDataRequest(v39 + 16);
      __swift_destroy_boxed_opaque_existential_1(v39 + 104);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
    }
  }
  else
  {
    v10 = *(_QWORD *)(v39 + 776);
    v9 = *(_QWORD *)(v39 + 768);
    v11 = *(_QWORD *)(v39 + 760);
    v8 = *(_QWORD *)(v39 + 704);
    v7 = *(_QWORD *)(v39 + 688);
    v6 = *(_QWORD *)(v39 + 648);
    v5 = *(_QWORD *)(v39 + 632);

    outlined destroy of CompleteUpdateMetaDataRequest(v5);
    outlined destroy of GroupSigner(v6);
    outlined destroy of GroupEncryptor(v7);
    outlined destroy of NetworkResponse<InitUpdateMetaDataRequest.Response>(v8);
    outlined destroy of InitUpdateMetaDataRequest(v39 + 16);
    __swift_destroy_boxed_opaque_existential_1(v39 + 104);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v39 + 440) + 8))();
}

unint64_t lazy protocol witness table accessor for type InitUpdateMetaDataRequest and conformance InitUpdateMetaDataRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitUpdateMetaDataRequest and conformance InitUpdateMetaDataRequest;
  if (!lazy protocol witness table cache variable for type InitUpdateMetaDataRequest and conformance InitUpdateMetaDataRequest)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitUpdateMetaDataRequest, &type metadata for InitUpdateMetaDataRequest);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitUpdateMetaDataRequest and conformance InitUpdateMetaDataRequest);
    return v0;
  }
  return v2;
}

uint64_t outlined destroy of NetworkResponse<InitUpdateMetaDataRequest.Response>(uint64_t a1)
{
  uint64_t v1;
  uint64_t inited;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<InitUpdateMetaDataRequest.Response>)
              + 36);
  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v4);
  inited = type metadata accessor for InitUpdateMetaDataRequest.Response();
  outlined consume of Data._Representation(*(_QWORD *)(v4 + *(int *)(inited + 20)), *(_QWORD *)(v4 + *(int *)(inited + 20) + 8));
  return a1;
}

unint64_t lazy protocol witness table accessor for type CompleteUpdateMetaDataRequest and conformance CompleteUpdateMetaDataRequest()
{
  uint64_t updated;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest and conformance CompleteUpdateMetaDataRequest;
  if (!lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest and conformance CompleteUpdateMetaDataRequest)
  {
    updated = type metadata accessor for CompleteUpdateMetaDataRequest();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteUpdateMetaDataRequest, updated);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteUpdateMetaDataRequest and conformance CompleteUpdateMetaDataRequest);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of NetworkResponse<CompleteUpdateMetaDataRequest.Response>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_1(a1);
  v3 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NetworkResponse<CompleteUpdateMetaDataRequest.Response>)
              + 36);
  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for MetadataService(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for MetadataService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(a1 + 96);
}

_QWORD *initializeWithCopy for MetadataService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v7 = a2[10];
  swift_unknownObjectRetain();
  v4 = a2[11];
  a1[10] = v7;
  a1[11] = v4;
  v5 = a2[15];
  a1[15] = v5;
  a1[16] = a2[16];
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a1 + 12), (uint64_t)(a2 + 12));
  return a1;
}

uint64_t assignWithCopy for MetadataService(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, a2 + 5);
  v3 = a2[10];
  swift_unknownObjectRetain();
  v4 = a2[11];
  *(_QWORD *)(a1 + 80) = v3;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 88) = v4;
  __swift_assign_boxed_opaque_existential_1(a1 + 96, a2 + 12);
  return a1;
}

_QWORD *assignWithTake for MetadataService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  memcpy(a1 + 5, a2 + 5, 0x28uLL);
  v3 = a2[11];
  a1[10] = a2[10];
  swift_unknownObjectRelease();
  a1[11] = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 12));
  memcpy(a1 + 12, a2 + 12, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetadataService(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 136))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for MetadataService(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 17;
  if (a2 < 0)
  {
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[16] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      result[3] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MetadataService()
{
  return &type metadata for MetadataService;
}

unint64_t _sSo20NSJSONWritingOptionsVs9OptionSetSCSYWb_1()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t _sSo20NSJSONWritingOptionsVs9OptionSetSCs0D7AlgebraPWb_1()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t _sSo20NSJSONWritingOptionsVs10SetAlgebraSCSQWb_1()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

unint64_t _sSo20NSJSONWritingOptionsVs10SetAlgebraSCs25ExpressibleByArrayLiteralPWb_1()
{
  return lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
}

uint64_t dispatch thunk of InvitationServiceEventDelegate.invitationReceived(message:fromID:invitationID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v6 + 16) = v6;
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 + 8)
                                                                                     + **(int **)(a6 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = *(_QWORD *)(v6 + 16);
  v7[1] = dispatch thunk of InvitationServiceEventDelegate.invitationReceived(message:fromID:invitationID:);
  return v14(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of InvitationServiceEventDelegate.invitationReceived(message:fromID:invitationID:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of InvitationServiceEventDelegate.invitationAccepted(message:invitationID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 16) + **(int **)(a4 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of InvitationServiceEventDelegate.invitationAccepted(message:invitationID:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of InvitationServiceEventDelegate.invitationAccepted(message:invitationID:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of InvitationServiceEventDelegate.invitationDeclined(message:invitationID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 + 24) + **(int **)(a4 + 24));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of InvitationServiceEventDelegate.invitationDeclined(message:invitationID:);
  return v10(a1, a2, a3, a4);
}

uint64_t dispatch thunk of InvitationServiceEventDelegate.invitationDeclined(message:invitationID:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of InvitationServiceProviding.eventDelegate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InvitationServiceProviding.eventDelegate.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of InvitationServiceProviding.eventDelegate.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of InvitationServiceProviding.setup(queue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of InvitationServiceProviding.sendInvitation(message:destination:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v6 + 16) = v6;
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a6 + 40)
                                                                                     + **(int **)(a6 + 40));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v7;
  *v7 = *(_QWORD *)(v6 + 16);
  v7[1] = dispatch thunk of InvitationServiceProviding.sendInvitation(message:destination:priority:);
  return v14(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of InvitationServiceProviding.sendInvitation(message:destination:priority:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 16) = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 8))(a1, a2);
}

uint64_t dispatch thunk of InvitationServiceProviding.acceptInvitation(with:message:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 48) + **(int **)(a5 + 48));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = dispatch thunk of InvitationServiceProviding.acceptInvitation(with:message:priority:);
  return v12(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of InvitationServiceProviding.acceptInvitation(with:message:priority:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of InvitationServiceProviding.declineInvitation(with:message:priority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 56) + **(int **)(a5 + 56));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = dispatch thunk of InvitationServiceProviding.declineInvitation(with:message:priority:);
  return v12(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of InvitationServiceProviding.declineInvitation(with:message:priority:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of InvitationServiceProviding.fetchPendingInvitationsSilently()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of InvitationServiceProviding.fetchPendingInvitationsAndWait()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v6)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 72) + **(int **)(a2 + 72));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of InvitationServiceProviding.fetchPendingInvitationsAndWait();
  return v6(a1, a2);
}

uint64_t dispatch thunk of InvitationServiceProviding.fetchPendingInvitationsAndWait()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of InvitationServiceProviding.deleteInvitation(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t KeyPrivilegeChecker.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Client(v1, a1);
}

uint64_t variable initialization expression of KeyPrivilegeChecker.acceptedExternalClients()
{
  Swift::String *v0;

  _allocateUninitializedArray<A>(_:)();
  *v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.cloudd", 0x10uLL, 1);
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  return Set.init<A>(_:)();
}

uint64_t variable initialization expression of KeyPrivilegeChecker.acceptedInternalClients()
{
  Swift::String *v0;
  Swift::String *v2;

  _allocateUninitializedArray<A>(_:)();
  v2 = v0;
  *v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.GroupKitTester", 0x18uLL, 1);
  v2[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.gpktool", 0x11uLL, 1);
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  return Set.init<A>(_:)();
}

Swift::Bool __swiftcall KeyPrivilegeChecker.hasPrivilege()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v15;
  uint64_t countAndFlagsBits;
  int v17;
  Swift::String v18;
  void *object;
  Builtin::Word v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  Swift::String v38;
  uint64_t v39;
  Builtin::Word v40;
  void *v41;
  void *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  Swift::String v49;
  uint64_t v50;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[9];
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[2];
  _QWORD v86[2];
  _BYTE v87[24];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[24];
  uint64_t v93;
  uint64_t v94;
  char v95;
  _BYTE v96[24];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v99 = 0;
  v83 = 0;
  v84 = 0;
  v68 = type metadata accessor for LogSubsystem();
  v69 = *(_QWORD *)(v68 - 8);
  v70 = (*(_QWORD *)(v69 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v71 = (uint64_t)&v15 - v70;
  v99 = MEMORY[0x24BDAC7A8](v67);
  v74 = v96;
  outlined init with copy of Client(v99, (uint64_t)v96);
  v72 = v97;
  v73 = v98;
  __swift_project_boxed_opaque_existential_1(v74, v97);
  v95 = 2;
  v75 = (*(uint64_t (**)(char *, uint64_t))(v73 + 32))(&v95, v72);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  if ((v75 & 1) == 0)
  {
    HIDWORD(v15) = 1;
    v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Client doesn't have entitlements for fetching keys", 0x32uLL, 1);
    countAndFlagsBits = v13._countAndFlagsBits;
    object = v13._object;
    v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyPrivilegeChecker.swift", 0x26uLL, v15 & 0x100000000);
    v17 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v71);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v71, v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v62 = v92;
  outlined init with copy of Client((uint64_t)v67, (uint64_t)v92);
  v64 = v93;
  v63 = v94;
  __swift_project_boxed_opaque_existential_1(v62, v93);
  v65 = (*(uint64_t (**)(uint64_t))(v63 + 8))(v64);
  v66 = v0;
  if (!v0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
LABEL_11:
    v20 = 31;
    v6 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v32 = &v90;
    v90 = v6;
    v91 = v7;
    v35 = 1;
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Client is not on allowed list: ", v20, 1);
    v21 = v8._object;
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    v30 = v87;
    outlined init with copy of Client((uint64_t)v67, (uint64_t)v87);
    v23 = v88;
    v22 = v89;
    __swift_project_boxed_opaque_existential_1(v30, v88);
    v24 = (*(uint64_t (**)(uint64_t))(v22 + 8))(v23);
    v26 = v9;
    swift_bridgeObjectRetain();
    v25 = v86;
    v86[0] = v24;
    v86[1] = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v27 = Optional.logInfo.getter();
    v28 = v10;
    outlined destroy of String?();
    swift_bridgeObjectRelease();
    v29 = v85;
    v85[0] = v27;
    v85[1] = v28;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v35 & 1);
    v31 = v11._object;
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    v34 = v90;
    v33 = v91;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v36 = String.init(stringInterpolation:)();
    v39 = v12;
    v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyPrivilegeChecker.swift", 0x26uLL, v35 & 1);
    v37 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v71);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v71, v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v60 = v65;
  v61 = v66;
  v58 = v66;
  v56 = v65;
  v83 = v65;
  v84 = v66;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
  v57 = v67[5];
  swift_bridgeObjectRetain();
  v82[7] = v56;
  v82[8] = v58;
  v59 = Set.contains(_:)();
  swift_bridgeObjectRelease();
  outlined init with copy of KeyPrivilegeChecker(v67, v82);
  swift_bridgeObjectRetain();
  if ((v59 & 1) != 0)
  {
    v55 = 1;
  }
  else
  {
    v53 = v82[6];
    swift_bridgeObjectRetain();
    v80 = v56;
    v81 = v58;
    v54 = Set.contains(_:)();
    swift_bridgeObjectRelease();
    v55 = v54;
  }
  v52 = v55;
  outlined destroy of KeyPrivilegeChecker((uint64_t)v82);
  swift_bridgeObjectRelease();
  if ((v52 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v40 = 36;
  v1 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v43 = &v78;
  v78 = v1;
  v79 = v2;
  v46 = 1;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Client has necessary key privilage: ", v40, 1);
  v41 = v3._object;
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v76 = v56;
  v77 = v58;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v46 & 1);
  v42 = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  v45 = v78;
  v44 = v79;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v47 = String.init(stringInterpolation:)();
  v50 = v5;
  v49 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/KeyPrivilegeChecker.swift", 0x26uLL, v46 & 1);
  v48 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v71);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v71, v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

_QWORD *outlined init with copy of KeyPrivilegeChecker(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v7;

  v2 = a1[3];
  a2[3] = v2;
  a2[4] = a1[4];
  (**(void (***)(void))(v2 - 8))();
  v5 = a1[5];
  swift_bridgeObjectRetain();
  a2[5] = v5;
  v7 = a1[6];
  swift_bridgeObjectRetain();
  result = a2;
  a2[6] = v7;
  return result;
}

uint64_t KeyPrivilegeChecker.init(client:)@<X0>(const void *a1@<X0>, _QWORD *a2@<X8>)
{
  Swift::String *v2;
  Swift::String *v3;
  uint64_t result;
  Swift::String *v5;

  outlined init with take of Client(a1, a2);
  _allocateUninitializedArray<A>(_:)();
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.cloudd", 0x10uLL, 1);
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  a2[5] = Set.init<A>(_:)();
  _allocateUninitializedArray<A>(_:)();
  v5 = v3;
  *v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.GroupKitTester", 0x18uLL, 1);
  v5[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.gpktool", 0x11uLL, 1);
  _finalizeUninitializedArray<A>(_:)();
  result = Set.init<A>(_:)();
  a2[6] = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for KeyPrivilegeChecker(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for KeyPrivilegeChecker(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for KeyPrivilegeChecker(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v7;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v4 = a2[5];
  swift_bridgeObjectRetain();
  a1[5] = v4;
  v7 = a2[6];
  swift_bridgeObjectRetain();
  result = a1;
  a1[6] = v7;
  return result;
}

uint64_t assignWithCopy for KeyPrivilegeChecker(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v3 = a2[5];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRelease();
  v5 = a2[6];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for KeyPrivilegeChecker(_QWORD *a1, _QWORD *a2)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x30uLL);
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyPrivilegeChecker(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyPrivilegeChecker(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 56) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 56) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyPrivilegeChecker()
{
  return &type metadata for KeyPrivilegeChecker;
}

uint64_t variable initialization expression of ClientMessageBroadcaster.connection()
{
  return 0;
}

uint64_t ClientMessageBroadcaster.__allocating_init(connection:queue:)(void *a1, void *a2)
{
  swift_allocObject();
  return ClientMessageBroadcaster.init(connection:queue:)(a1, a2);
}

uint64_t ClientMessageBroadcaster.init(connection:queue:)(void *a1, void *a2)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v8;

  swift_unknownObjectWeakInit();
  v3 = a1;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

  swift_endAccess();
  v4 = a2;
  *(_QWORD *)(v2 + 24) = a2;

  return v8;
}

uint64_t ClientMessageBroadcaster.groupUpdated(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;

  v6 = a1;
  v17 = 0;
  v16 = 0;
  v15 = 0;
  v10 = type metadata accessor for GroupUpdatedBroadcast();
  v8 = *(_QWORD *)(v10 - 8);
  v5 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = (char *)&v4 - v5;
  v17 = (char *)&v4 - v5;
  v16 = MEMORY[0x24BDAC7A8](v6);
  v15 = v1;
  swift_retain();
  GroupUpdatedBroadcast.init(group:)();
  v7 = (uint64_t *)&v11;
  v12 = v10;
  v13 = lazy protocol witness table accessor for type GroupUpdatedBroadcast and conformance GroupUpdatedBroadcast();
  v14 = lazy protocol witness table accessor for type GroupUpdatedBroadcast and conformance GroupUpdatedBroadcast();
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v7);
  (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 16))(boxed_opaque_existential_2, v9, v10);
  ClientMessageBroadcaster.broadcastMessage(_:)(v7);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v9, v10);
}

unint64_t lazy protocol witness table accessor for type GroupUpdatedBroadcast and conformance GroupUpdatedBroadcast()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupUpdatedBroadcast and conformance GroupUpdatedBroadcast;
  if (!lazy protocol witness table cache variable for type GroupUpdatedBroadcast and conformance GroupUpdatedBroadcast)
  {
    v0 = type metadata accessor for GroupUpdatedBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D938], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupUpdatedBroadcast and conformance GroupUpdatedBroadcast);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupUpdatedBroadcast and conformance GroupUpdatedBroadcast;
  if (!lazy protocol witness table cache variable for type GroupUpdatedBroadcast and conformance GroupUpdatedBroadcast)
  {
    v0 = type metadata accessor for GroupUpdatedBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D930], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupUpdatedBroadcast and conformance GroupUpdatedBroadcast);
    return v1;
  }
  return v3;
}

uint64_t *__swift_allocate_boxed_opaque_existential_2(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;

  v3 = result;
  if ((*(_DWORD *)(*(_QWORD *)(result[3] - 8) + 80) & 0x20000) != 0)
  {
    v1 = swift_allocBox();
    result = v2;
    *v3 = v1;
  }
  return result;
}

void ClientMessageBroadcaster.broadcastMessage(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t aBlock;
  int v25;
  int v26;
  uint64_t (*v27)(uint64_t);
  void *v28;
  void (*v29)();
  uint64_t v30;
  _QWORD v31[6];
  uint64_t v32;
  uint64_t v33;

  v10 = a1;
  v33 = 0;
  v32 = 0;
  v14 = 0;
  v17 = type metadata accessor for DispatchWorkItemFlags();
  v15 = *(_QWORD *)(v17 - 8);
  v6 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (char *)&v6 - v6;
  v20 = type metadata accessor for DispatchQoS();
  v18 = *(_QWORD *)(v20 - 8);
  v7 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v10);
  v19 = (char *)&v6 - v7;
  v33 = v2;
  v32 = v1;
  v23 = *(id *)(v1 + 24);
  v3 = v23;
  v11 = 7;
  v22 = swift_allocObject();
  swift_retain();
  v9 = v8;
  swift_weakInit();
  swift_release();
  swift_retain();
  v12 = v31;
  outlined init with copy of Decodable & Encodable(v10, v31);
  v4 = swift_allocObject();
  v5 = v12;
  v13 = v4;
  *(_QWORD *)(v4 + 16) = v22;
  outlined init with take of Decodable & Encodable(v5, (void *)(v4 + 24));
  v29 = partial apply for closure #1 in ClientMessageBroadcaster.broadcastMessage(_:);
  v30 = v13;
  aBlock = MEMORY[0x24BDAC760];
  v25 = 1107296256;
  v26 = 0;
  v27 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v28 = &block_descriptor_0;
  v21 = _Block_copy(&aBlock);
  default argument 1 of OS_dispatch_queue.async(group:qos:flags:execute:)();
  default argument 2 of OS_dispatch_queue.async(group:qos:flags:execute:)();
  MEMORY[0x242634CE8](v14, v19, v16, v21);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v16, v17);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v20);
  _Block_release(v21);
  swift_release();
  swift_release();

}

uint64_t __swift_destroy_boxed_opaque_existential_2(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if ((*(_DWORD *)(*(_QWORD *)(v2 - 8) + 80) & 0x20000) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
}

uint64_t sub_23D489AD8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t ClientMessageBroadcaster.leftGroup(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v7 = a1;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v11 = type metadata accessor for LeftGroupBroadcast();
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v5 - v6;
  v18 = (char *)&v5 - v6;
  v17 = v2;
  v16 = v1;
  swift_retain();
  LeftGroupBroadcast.init(group:)();
  v8 = (uint64_t *)&v12;
  v13 = v11;
  v14 = lazy protocol witness table accessor for type LeftGroupBroadcast and conformance LeftGroupBroadcast();
  v15 = lazy protocol witness table accessor for type LeftGroupBroadcast and conformance LeftGroupBroadcast();
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v8);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_2, v10, v11);
  ClientMessageBroadcaster.broadcastMessage(_:)(v8);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t ClientMessageBroadcaster.groupDeleted(groupID:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v11 = a1;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  v7 = 0;
  v10 = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(v10 - 8);
  v8 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v13 = (char *)&v7 - v8;
  v17 = type metadata accessor for GroupDeletedBroadcast();
  v15 = *(_QWORD *)(v17 - 8);
  v12 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v7 - v12;
  v24 = (char *)&v7 - v12;
  v23 = v3;
  v22 = v1;
  (*(void (**)(double))(v4 + 16))(v2);
  GroupDeletedBroadcast.init(groupID:)();
  v14 = (uint64_t *)&v18;
  v19 = v17;
  v20 = lazy protocol witness table accessor for type GroupDeletedBroadcast and conformance GroupDeletedBroadcast();
  v21 = lazy protocol witness table accessor for type GroupDeletedBroadcast and conformance GroupDeletedBroadcast();
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v14);
  (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 16))(boxed_opaque_existential_2, v16, v17);
  ClientMessageBroadcaster.broadcastMessage(_:)(v14);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v14);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v16, v17);
}

uint64_t ClientMessageBroadcaster.invitationDeleted(groupID:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v11 = a1;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  v7 = 0;
  v10 = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(v10 - 8);
  v8 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v13 = (char *)&v7 - v8;
  v17 = type metadata accessor for InvitationDeletedBroadcast();
  v15 = *(_QWORD *)(v17 - 8);
  v12 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v7 - v12;
  v24 = (char *)&v7 - v12;
  v23 = v3;
  v22 = v1;
  (*(void (**)(double))(v4 + 16))(v2);
  InvitationDeletedBroadcast.init(groupID:)();
  v14 = (uint64_t *)&v18;
  v19 = v17;
  v20 = lazy protocol witness table accessor for type InvitationDeletedBroadcast and conformance InvitationDeletedBroadcast();
  v21 = lazy protocol witness table accessor for type InvitationDeletedBroadcast and conformance InvitationDeletedBroadcast();
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v14);
  (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 16))(boxed_opaque_existential_2, v16, v17);
  ClientMessageBroadcaster.broadcastMessage(_:)(v14);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v14);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v16, v17);
}

uint64_t ClientMessageBroadcaster.receivedGroupInvite(group:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v7 = a1;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v11 = type metadata accessor for ReceivedGroupInviteBroadcast();
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v5 - v6;
  v18 = (char *)&v5 - v6;
  v17 = v2;
  v16 = v1;
  swift_retain();
  ReceivedGroupInviteBroadcast.init(group:)();
  v8 = (uint64_t *)&v12;
  v13 = v11;
  v14 = lazy protocol witness table accessor for type ReceivedGroupInviteBroadcast and conformance ReceivedGroupInviteBroadcast();
  v15 = lazy protocol witness table accessor for type ReceivedGroupInviteBroadcast and conformance ReceivedGroupInviteBroadcast();
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v8);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_2, v10, v11);
  ClientMessageBroadcaster.broadcastMessage(_:)(v8);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t ClientMessageBroadcaster.removedFromGroup(group:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;

  v7 = a1;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v11 = type metadata accessor for RemovedFromGroupBroadcast();
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v5 - v6;
  v18 = (char *)&v5 - v6;
  v17 = v2;
  v16 = v1;
  swift_retain();
  RemovedFromGroupBroadcast.init(group:deliveredSilently:)();
  v8 = (uint64_t *)&v12;
  v13 = v11;
  v14 = lazy protocol witness table accessor for type RemovedFromGroupBroadcast and conformance RemovedFromGroupBroadcast();
  v15 = lazy protocol witness table accessor for type RemovedFromGroupBroadcast and conformance RemovedFromGroupBroadcast();
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v8);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_2, v10, v11);
  ClientMessageBroadcaster.broadcastMessage(_:)(v8);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t ClientMessageBroadcaster.receivedGroupUpdate(group:addedMembers:removedMembers:deliveredSilently:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t updated;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;

  v13 = a1;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v30 = 0;
  v29 = 0;
  v28 = 0;
  v27 = 0;
  v26 = 0;
  v25 = 0;
  updated = type metadata accessor for ReceivedGroupUpdateBroadcast();
  v18 = *(_QWORD *)(updated - 8);
  v12 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v19 = (char *)&v11 - v12;
  v30 = (char *)&v11 - v12;
  v29 = v5;
  v28 = v6;
  v27 = v7;
  v26 = v8 & 1;
  v25 = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ReceivedGroupUpdateBroadcast.init(group:addedMembers:removedMembers:deliveredSilently:)();
  v17 = (uint64_t *)&v21;
  v22 = updated;
  v23 = lazy protocol witness table accessor for type ReceivedGroupUpdateBroadcast and conformance ReceivedGroupUpdateBroadcast();
  v24 = lazy protocol witness table accessor for type ReceivedGroupUpdateBroadcast and conformance ReceivedGroupUpdateBroadcast();
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v17);
  (*(void (**)(uint64_t *, char *, uint64_t))(v18 + 16))(boxed_opaque_existential_2, v19, updated);
  ClientMessageBroadcaster.broadcastMessage(_:)(v17);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v17);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v19, updated);
}

uint64_t ClientMessageBroadcaster.receivedGroupDeletion(group:deliveredSilently:actingMember:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  v17 = type metadata accessor for ReceivedGroupDeletionBroadcast();
  v15 = *(_QWORD *)(v17 - 8);
  v10 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v9 - v10;
  v26 = (char *)&v9 - v10;
  v25 = v4;
  v24 = v5 & 1;
  v23 = v6;
  v22 = v3;
  swift_retain();
  swift_retain();
  ReceivedGroupDeletionBroadcast.init(group:deliveredSilently:actingMember:)();
  v14 = (uint64_t *)&v18;
  v19 = v17;
  v20 = lazy protocol witness table accessor for type ReceivedGroupDeletionBroadcast and conformance ReceivedGroupDeletionBroadcast();
  v21 = lazy protocol witness table accessor for type ReceivedGroupDeletionBroadcast and conformance ReceivedGroupDeletionBroadcast();
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v14);
  (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 16))(boxed_opaque_existential_2, v16, v17);
  ClientMessageBroadcaster.broadcastMessage(_:)(v14);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v14);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v16, v17);
}

uint64_t ClientMessageBroadcaster.memberResponsedToInvite(for:isAccepted:from:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t *boxed_opaque_existential_2;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;

  v11 = a1;
  v13 = a2;
  v12 = a3;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
  v17 = type metadata accessor for MemberInvitationResponseBroadcast();
  v15 = *(_QWORD *)(v17 - 8);
  v10 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v9 - v10;
  v26 = (char *)&v9 - v10;
  v25 = v4;
  v24 = v5 & 1;
  v23 = v6;
  v22 = v3;
  swift_retain();
  swift_retain();
  MemberInvitationResponseBroadcast.init(group:member:isAccepted:)();
  v14 = (uint64_t *)&v18;
  v19 = v17;
  v20 = lazy protocol witness table accessor for type MemberInvitationResponseBroadcast and conformance MemberInvitationResponseBroadcast();
  v21 = lazy protocol witness table accessor for type MemberInvitationResponseBroadcast and conformance MemberInvitationResponseBroadcast();
  boxed_opaque_existential_2 = __swift_allocate_boxed_opaque_existential_2(v14);
  (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 16))(boxed_opaque_existential_2, v16, v17);
  ClientMessageBroadcaster.broadcastMessage(_:)(v14);
  __swift_destroy_boxed_opaque_existential_2((uint64_t)v14);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v16, v17);
}

void closure #1 in ClientMessageBroadcaster.broadcastMessage(_:)(uint64_t a1, _QWORD *a2)
{
  char v2;
  unint64_t v3;
  Class isa;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v11;
  uint64_t Strong;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    swift_retain();
    outlined destroy of ClientMessageBroadcaster?();
    swift_endAccess();
    swift_beginAccess();
    v8 = MEMORY[0x242635600](Strong + 16);
    swift_endAccess();
    swift_release();
    v9 = (void *)v8;
  }
  else
  {
    outlined destroy of ClientMessageBroadcaster?();
    swift_endAccess();
    v9 = 0;
  }
  if (v9)
  {
    objc_msgSend(v9, sel_remoteObjectProxy);
    _bridgeAnyObjectToAny(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DaemonEventListener);
    v2 = swift_dynamicCast();
    if ((v2 & 1) != 0)
      v7 = v11;
    else
      v7 = 0;
    if (v7)
    {
      swift_unknownObjectRelease();
      __swift_project_boxed_opaque_existential_2(a2, a2[3]);
      type metadata accessor for XPCEncoder();
      XPCEncoder.__allocating_init()();
      v5 = dispatch thunk of XPCEncoder.encode<A>(_:)();
      v6 = v3;
      swift_release();
      if ((v6 & 0xF000000000000000) != 0xF000000000000000)
      {
        swift_getObjectType();
        outlined copy of Data._Representation(v5, v6);
        isa = Data._bridgeToObjectiveC()().super.isa;
        outlined consume of Data._Representation(v5, v6);
        objc_msgSend(v7, sel_broadcast_, isa);

        outlined consume of Data._Representation(v5, v6);
      }
    }
    swift_unknownObjectRelease();

  }
}

_QWORD *outlined init with copy of Decodable & Encodable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[3];
  a2[3] = v2;
  v3 = a1[5];
  a2[4] = a1[4];
  a2[5] = v3;
  (**(void (***)(_QWORD *))(v2 - 8))(a2);
  return a2;
}

uint64_t sub_23D48A8C8()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_2(v0 + 24);
  return swift_deallocObject();
}

void *outlined init with take of Decodable & Encodable(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x30uLL);
  return __dst;
}

void partial apply for closure #1 in ClientMessageBroadcaster.broadcastMessage(_:)()
{
  uint64_t v0;

  closure #1 in ClientMessageBroadcaster.broadcastMessage(_:)(*(_QWORD *)(v0 + 16), (_QWORD *)(v0 + 24));
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v1 = swift_retain();
  v3(v1);
  return swift_release();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t default argument 1 of OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t default argument 2 of OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  specialized static Array._allocateUninitialized(_:)(0);
  type metadata accessor for DispatchWorkItemFlags();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type LeftGroupBroadcast and conformance LeftGroupBroadcast()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type LeftGroupBroadcast and conformance LeftGroupBroadcast;
  if (!lazy protocol witness table cache variable for type LeftGroupBroadcast and conformance LeftGroupBroadcast)
  {
    v0 = type metadata accessor for LeftGroupBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D6A0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type LeftGroupBroadcast and conformance LeftGroupBroadcast);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type LeftGroupBroadcast and conformance LeftGroupBroadcast;
  if (!lazy protocol witness table cache variable for type LeftGroupBroadcast and conformance LeftGroupBroadcast)
  {
    v0 = type metadata accessor for LeftGroupBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D698], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type LeftGroupBroadcast and conformance LeftGroupBroadcast);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type GroupDeletedBroadcast and conformance GroupDeletedBroadcast()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupDeletedBroadcast and conformance GroupDeletedBroadcast;
  if (!lazy protocol witness table cache variable for type GroupDeletedBroadcast and conformance GroupDeletedBroadcast)
  {
    v0 = type metadata accessor for GroupDeletedBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D918], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupDeletedBroadcast and conformance GroupDeletedBroadcast);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GroupDeletedBroadcast and conformance GroupDeletedBroadcast;
  if (!lazy protocol witness table cache variable for type GroupDeletedBroadcast and conformance GroupDeletedBroadcast)
  {
    v0 = type metadata accessor for GroupDeletedBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D910], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GroupDeletedBroadcast and conformance GroupDeletedBroadcast);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type InvitationDeletedBroadcast and conformance InvitationDeletedBroadcast()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InvitationDeletedBroadcast and conformance InvitationDeletedBroadcast;
  if (!lazy protocol witness table cache variable for type InvitationDeletedBroadcast and conformance InvitationDeletedBroadcast)
  {
    v0 = type metadata accessor for InvitationDeletedBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E170], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InvitationDeletedBroadcast and conformance InvitationDeletedBroadcast);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InvitationDeletedBroadcast and conformance InvitationDeletedBroadcast;
  if (!lazy protocol witness table cache variable for type InvitationDeletedBroadcast and conformance InvitationDeletedBroadcast)
  {
    v0 = type metadata accessor for InvitationDeletedBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E168], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InvitationDeletedBroadcast and conformance InvitationDeletedBroadcast);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type ReceivedGroupInviteBroadcast and conformance ReceivedGroupInviteBroadcast()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast and conformance ReceivedGroupInviteBroadcast;
  if (!lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast and conformance ReceivedGroupInviteBroadcast)
  {
    v0 = type metadata accessor for ReceivedGroupInviteBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D740], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast and conformance ReceivedGroupInviteBroadcast);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast and conformance ReceivedGroupInviteBroadcast;
  if (!lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast and conformance ReceivedGroupInviteBroadcast)
  {
    v0 = type metadata accessor for ReceivedGroupInviteBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D738], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupInviteBroadcast and conformance ReceivedGroupInviteBroadcast);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type RemovedFromGroupBroadcast and conformance RemovedFromGroupBroadcast()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RemovedFromGroupBroadcast and conformance RemovedFromGroupBroadcast;
  if (!lazy protocol witness table cache variable for type RemovedFromGroupBroadcast and conformance RemovedFromGroupBroadcast)
  {
    v0 = type metadata accessor for RemovedFromGroupBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D680], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RemovedFromGroupBroadcast and conformance RemovedFromGroupBroadcast);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type RemovedFromGroupBroadcast and conformance RemovedFromGroupBroadcast;
  if (!lazy protocol witness table cache variable for type RemovedFromGroupBroadcast and conformance RemovedFromGroupBroadcast)
  {
    v0 = type metadata accessor for RemovedFromGroupBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D678], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type RemovedFromGroupBroadcast and conformance RemovedFromGroupBroadcast);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type ReceivedGroupUpdateBroadcast and conformance ReceivedGroupUpdateBroadcast()
{
  uint64_t updated;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast and conformance ReceivedGroupUpdateBroadcast;
  if (!lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast and conformance ReceivedGroupUpdateBroadcast)
  {
    updated = type metadata accessor for ReceivedGroupUpdateBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D760], updated);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast and conformance ReceivedGroupUpdateBroadcast);
    return v1;
  }
  return v3;
}

{
  uint64_t updated;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast and conformance ReceivedGroupUpdateBroadcast;
  if (!lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast and conformance ReceivedGroupUpdateBroadcast)
  {
    updated = type metadata accessor for ReceivedGroupUpdateBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D758], updated);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupUpdateBroadcast and conformance ReceivedGroupUpdateBroadcast);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type ReceivedGroupDeletionBroadcast and conformance ReceivedGroupDeletionBroadcast()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast and conformance ReceivedGroupDeletionBroadcast;
  if (!lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast and conformance ReceivedGroupDeletionBroadcast)
  {
    v0 = type metadata accessor for ReceivedGroupDeletionBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D780], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast and conformance ReceivedGroupDeletionBroadcast);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast and conformance ReceivedGroupDeletionBroadcast;
  if (!lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast and conformance ReceivedGroupDeletionBroadcast)
  {
    v0 = type metadata accessor for ReceivedGroupDeletionBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3D778], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReceivedGroupDeletionBroadcast and conformance ReceivedGroupDeletionBroadcast);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type MemberInvitationResponseBroadcast and conformance MemberInvitationResponseBroadcast()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast and conformance MemberInvitationResponseBroadcast;
  if (!lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast and conformance MemberInvitationResponseBroadcast)
  {
    v0 = type metadata accessor for MemberInvitationResponseBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E2A0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast and conformance MemberInvitationResponseBroadcast);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast and conformance MemberInvitationResponseBroadcast;
  if (!lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast and conformance MemberInvitationResponseBroadcast)
  {
    v0 = type metadata accessor for MemberInvitationResponseBroadcast();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E298], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type MemberInvitationResponseBroadcast and conformance MemberInvitationResponseBroadcast);
    return v1;
  }
  return v3;
}

uint64_t ClientMessageBroadcaster.deinit()
{
  uint64_t v0;
  uint64_t v2;

  swift_unknownObjectWeakDestroy();

  return v2;
}

uint64_t ClientMessageBroadcaster.__deallocating_deinit()
{
  ClientMessageBroadcaster.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClientMessageBroadcaster()
{
  return objc_opt_self();
}

uint64_t method lookup function for ClientMessageBroadcaster()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ClientMessageBroadcaster.__allocating_init(connection:queue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v0 = type metadata accessor for DispatchWorkItemFlags();
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE5468], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ClientMessageBroadcaster?()
{
  swift_release();
}

_QWORD *__swift_project_boxed_opaque_existential_2(_QWORD *result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0)
    return (_QWORD *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  return result;
}

uint64_t CommandLineService.groupStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupStore(v1, a1);
}

uint64_t CommandLineService.userStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserStore(v1 + 40, a1);
}

uint64_t CommandLineService.invitationStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of InvitationStore(v1 + 80, a1);
}

_QWORD *CommandLineService.groupService.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupService((_QWORD *)(v1 + 120), a1);
}

uint64_t CommandLineService.peerMessaingService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PeerMessagingServiceProviding(v1 + 312, a1);
}

uint64_t CommandLineService.keyDistributionService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of KeyDistributionServiceProviding(v1 + 352, a1);
}

uint64_t CommandLineService.deleteAllInvitations()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[65] = v0;
  v1[61] = v1;
  v1[62] = 0;
  v1[63] = 0;
  v1[62] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v1 = v0[65];
  v0[61] = v0;
  outlined init with copy of InvitationStore(v1 + 80, (uint64_t)(v0 + 51));
  v7 = v0[54];
  v5 = v0[55];
  __swift_project_boxed_opaque_existential_1(v0 + 51, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 64) + **(int **)(v5 + 64));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 528) = v2;
  *v2 = *(_QWORD *)(v4 + 488);
  v2[1] = CommandLineService.deleteAllInvitations();
  return v6(v7, v5);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[68];
  v9 = v0[67];
  v10 = (_QWORD *)v0[65];
  v0[61] = v0;
  v0[63] = v9;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 51));
  v0[64] = v9;
  outlined init with copy of CommandLineService(v10, v0 + 2);
  *(_QWORD *)(swift_task_alloc() + 16) = v0 + 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
  lazy protocol witness table accessor for type [UUID] and conformance [A]();
  result = Sequence.forEach(_:)();
  if (!v1)
  {
    v4 = v8[65];
    swift_task_dealloc();
    outlined destroy of CommandLineService((uint64_t)(v8 + 2));
    outlined init with copy of InvitationStore(v4 + 80, (uint64_t)(v8 + 56));
    v7 = v8[59];
    v5 = v8[60];
    __swift_project_boxed_opaque_existential_1(v8 + 56, v7);
    v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 48) + **(int **)(v5 + 48));
    v3 = (_QWORD *)swift_task_alloc();
    v8[69] = v3;
    *v3 = v8[61];
    v3[1] = CommandLineService.deleteAllInvitations();
    return v6(v7, v5);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 488) = *v1;
  *(_QWORD *)(v2 + 560) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 488) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 448);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 488) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 488) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 408);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 488) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 488) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 448);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 488) + 8))();
}

uint64_t CommandLineService.deleteAllInvitations()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[61] = *v2;
  v3[67] = a1;
  v3[68] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in CommandLineService.deleteAllInvitations()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v9 = a2;
  outlined init with copy of PeerMessagingServiceProviding(a2 + 312, (uint64_t)v6);
  v3 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 88))(a1, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

_QWORD *outlined init with copy of CommandLineService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2 = a1[3];
  a2[3] = v2;
  a2[4] = a1[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a1[8];
  a2[8] = v3;
  a2[9] = a1[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 5), (uint64_t)(a1 + 5));
  v4 = a1[13];
  a2[13] = v4;
  a2[14] = a1[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a2 + 10), (uint64_t)(a1 + 10));
  v5 = a1[18];
  a2[18] = v5;
  a2[19] = a1[19];
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a2 + 15), (uint64_t)(a1 + 15));
  v6 = a1[23];
  a2[23] = v6;
  a2[24] = a1[24];
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a2 + 20), (uint64_t)(a1 + 20));
  v7 = a1[28];
  a2[28] = v7;
  a2[29] = a1[29];
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)(a2 + 25), (uint64_t)(a1 + 25));
  v8 = a1[33];
  a2[33] = v8;
  a2[34] = a1[34];
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(a2 + 30), (uint64_t)(a1 + 30));
  v13 = a1[35];
  swift_unknownObjectRetain();
  v9 = a1[36];
  a2[35] = v13;
  a2[36] = v9;
  v14 = a1[37];
  v15 = a1[38];
  outlined copy of Data._Representation(v14, v15);
  a2[37] = v14;
  a2[38] = v15;
  v10 = a1[42];
  a2[42] = v10;
  a2[43] = a1[43];
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))((uint64_t)(a2 + 39), (uint64_t)(a1 + 39));
  v11 = a1[47];
  a2[47] = v11;
  a2[48] = a1[48];
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))((uint64_t)(a2 + 44), (uint64_t)(a1 + 44));
  return a2;
}

uint64_t partial apply for closure #1 in CommandLineService.deleteAllInvitations()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CommandLineService.deleteAllInvitations()(a1, *(_QWORD *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type [UUID] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [UUID] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UUID] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UUID]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [UUID] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t CommandLineService.deleteAllGroups()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[9] = v0;
  v1[7] = v1;
  v1[8] = 0;
  v1[8] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v1 = v0[9];
  v0[7] = v0;
  outlined init with copy of GroupStore(v1, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 64) + **(int **)(v5 + 64));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 80) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = CommandLineService.deleteAllGroups();
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 56) + 8))();
}

uint64_t CommandLineService.deleteAllUsers()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[9] = v0;
  v1[7] = v1;
  v1[8] = 0;
  v1[8] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[9];
  v0[7] = v0;
  outlined init with copy of UserStore(v1 + 40, (uint64_t)(v0 + 2));
  v5 = v0[5];
  v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
  (*(void (**)(uint64_t))(v4 + 88))(v5);
  __swift_destroy_boxed_opaque_existential_1(v3 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 56) + 8))();
}

uint64_t CommandLineService.deleteInvitation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = a1;
  outlined init with copy of PeerMessagingServiceProviding(v1 + 312, (uint64_t)v6);
  v3 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 88))(a1, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t CommandLineService.fetchRSVPQueue(for:lastKnownSequenceNumber:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 248) = v3;
  *(_DWORD *)(v4 + 276) = a3;
  *(_QWORD *)(v4 + 240) = a2;
  *(_QWORD *)(v4 + 232) = a1;
  *(_QWORD *)(v4 + 208) = v4;
  *(_QWORD *)(v4 + 216) = 0;
  *(_DWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 224) = 0;
  *(_QWORD *)(v4 + 216) = a2;
  *(_DWORD *)(v4 + 272) = a3;
  *(_QWORD *)(v4 + 224) = v3;
  return swift_task_switch();
}

uint64_t CommandLineService.fetchRSVPQueue(for:lastKnownSequenceNumber:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = v0[31];
  v0[26] = v0;
  outlined init with copy of GroupService((_QWORD *)(v1 + 120), v0 + 2);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 256) = v2;
  *v2 = *(_QWORD *)(v4 + 208);
  v2[1] = CommandLineService.fetchRSVPQueue(for:lastKnownSequenceNumber:);
  return GroupService.fetchRSVPQueue(for:lastKnownSeqNumber:)(*(_QWORD *)(v4 + 232), *(_QWORD *)(v4 + 240), *(_DWORD *)(v4 + 276));
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 208) = v0;
  outlined destroy of GroupService(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 208) + 8))();
}

_QWORD *CommandLineService.fetchRSVPQueue(for:lastKnownSequenceNumber:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 208) = *v1;
  v4 = (_QWORD *)(v2 + 208);
  v5 = v2 + 16;
  *(_QWORD *)(v2 + 264) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  outlined destroy of GroupService(v5);
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t CommandLineService.fetchCurrentUserPublicKey()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[9] = v0;
  v1[7] = v1;
  v1[8] = 0;
  v1[8] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v1 = v0[9];
  v0[7] = v0;
  outlined init with copy of KeyDistributionServiceProviding(v1 + 352, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 32) + **(int **)(v5 + 32));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 80) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = CommandLineService.fetchCurrentUserPublicKey();
  return v6(v7, v5);
}

{
  uint64_t v0;
  _QWORD *v2;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2[7] + 8))(v2[12], v2[13], v2[14]);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v2 + 56) + 8))();
}

uint64_t CommandLineService.fetchCurrentUserPublicKey()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[7] = *v4;
  v5[11] = v3;
  v5[12] = a1;
  v5[13] = a2;
  v5[14] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t CommandLineService.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9[31] = v8;
  v9[30] = v13;
  v9[29] = v12;
  v9[28] = v11;
  v9[27] = a8;
  v9[26] = a7;
  v9[25] = a6;
  v9[24] = a5;
  v9[23] = a4;
  v9[22] = a3;
  v9[21] = a2;
  v9[20] = a1;
  v9[17] = v9;
  v9[7] = 0;
  v9[8] = 0;
  v9[18] = 0;
  v9[9] = 0;
  v9[10] = 0;
  v9[11] = 0;
  v9[12] = 0;
  v9[13] = 0;
  v9[14] = 0;
  v9[15] = 0;
  v9[16] = 0;
  v9[19] = 0;
  v9[7] = a1;
  v9[8] = a2;
  v9[18] = a3;
  v9[9] = a4;
  v9[10] = a5;
  v9[11] = a6;
  v9[12] = a7;
  v9[13] = a8;
  v9[14] = v11;
  v9[15] = v12;
  v9[16] = v13;
  v9[19] = v8;
  return swift_task_switch();
}

void CommandLineService.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[31];
  v0[17] = v0;
  outlined init with copy of KeyDistributionServiceProviding(v1 + 352, (uint64_t)(v0 + 2));
  v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  v5 = *(_QWORD *)(v4 + 40) + **(int **)(v4 + 40);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 256) = v2;
  *v2 = *(_QWORD *)(v3 + 136);
  v2[1] = CommandLineService.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:);
  __asm { BR              X8 }
}

uint64_t CommandLineService.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[17] = *v4;
  v5[33] = v3;
  v5[34] = a1;
  v5[35] = a2;
  v5[36] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t CommandLineService.publicKeyLookUp(altDSID:gpkUserID:email:emailHash:phoneNumber:phoneNumberHash:)()
{
  uint64_t v0;
  _QWORD *v2;

  *(_QWORD *)(v0 + 136) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2[17] + 8))(v2[34], v2[35], v2[36]);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 136) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v2 + 136) + 8))();
}

void *CommandLineService.init(groupStore:userStore:invitationStore:groupService:peerMessaingService:keyDistributionService:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, const void *a4@<X3>, const void *a5@<X4>, const void *a6@<X5>, uint64_t a7@<X8>)
{
  outlined init with take of GroupStore(a1, (void *)a7);
  outlined init with take of UserStore(a2, (void *)(a7 + 40));
  outlined init with take of InvitationStore(a3, (void *)(a7 + 80));
  memcpy((void *)(a7 + 120), a4, 0xC0uLL);
  outlined init with take of PeerMessagingServiceProviding(a5, (void *)(a7 + 312));
  return outlined init with take of KeyDistributionServiceProviding(a6, (void *)(a7 + 352));
}

uint64_t initializeBufferWithCopyOfBuffer for CommandLineService(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CommandLineService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  __swift_destroy_boxed_opaque_existential_1(a1 + 200);
  __swift_destroy_boxed_opaque_existential_1(a1 + 240);
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 304));
  __swift_destroy_boxed_opaque_existential_1(a1 + 312);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 352);
}

_QWORD *initializeWithCopy for CommandLineService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v4 = a2[13];
  a1[13] = v4;
  a1[14] = a2[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  v5 = a2[18];
  a1[18] = v5;
  a1[19] = a2[19];
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a1 + 15), (uint64_t)(a2 + 15));
  v6 = a2[23];
  a1[23] = v6;
  a1[24] = a2[24];
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 20), (uint64_t)(a2 + 20));
  v7 = a2[28];
  a1[28] = v7;
  a1[29] = a2[29];
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)(a1 + 25), (uint64_t)(a2 + 25));
  v8 = a2[33];
  a1[33] = v8;
  a1[34] = a2[34];
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(a1 + 30), (uint64_t)(a2 + 30));
  v13 = a2[35];
  swift_unknownObjectRetain();
  v9 = a2[36];
  a1[35] = v13;
  a1[36] = v9;
  v14 = a2[37];
  v15 = a2[38];
  outlined copy of Data._Representation(v14, v15);
  a1[37] = v14;
  a1[38] = v15;
  v10 = a2[42];
  a1[42] = v10;
  a1[43] = a2[43];
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))((uint64_t)(a1 + 39), (uint64_t)(a2 + 39));
  v11 = a2[47];
  a1[47] = v11;
  a1[48] = a2[48];
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))((uint64_t)(a1 + 44), (uint64_t)(a2 + 44));
  return a1;
}

_QWORD *assignWithCopy for CommandLineService(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  __swift_assign_boxed_opaque_existential_1((uint64_t)a1, a2);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 5), a2 + 5);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 10), a2 + 10);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 15), a2 + 15);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 20), a2 + 20);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 25), a2 + 25);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 30), a2 + 30);
  v5 = a2[35];
  swift_unknownObjectRetain();
  v6 = a2[36];
  a1[35] = v5;
  swift_unknownObjectRelease();
  a1[36] = v6;
  v7 = a2[37];
  v8 = a2[38];
  outlined copy of Data._Representation(v7, v8);
  v2 = a1[37];
  v3 = a1[38];
  a1[37] = v7;
  a1[38] = v8;
  outlined consume of Data._Representation(v2, v3);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 39), a2 + 39);
  __swift_assign_boxed_opaque_existential_1((uint64_t)(a1 + 44), a2 + 44);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy392_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x188uLL);
}

_QWORD *assignWithTake for CommandLineService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  memcpy(a1 + 5, a2 + 5, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 10));
  memcpy(a1 + 10, a2 + 10, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 15));
  memcpy(a1 + 15, a2 + 15, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 20));
  memcpy(a1 + 20, a2 + 20, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 25));
  memcpy(a1 + 25, a2 + 25, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 30));
  memcpy(a1 + 30, a2 + 30, 0x28uLL);
  v6 = a2[36];
  a1[35] = a2[35];
  swift_unknownObjectRelease();
  a1[36] = v6;
  v2 = a2[38];
  v3 = a1[37];
  v4 = a1[38];
  a1[37] = a2[37];
  a1[38] = v2;
  outlined consume of Data._Representation(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 39));
  memcpy(a1 + 39, a2 + 39, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 44));
  memcpy(a1 + 44, a2 + 44, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandLineService(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 392))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for CommandLineService(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 49;
  if (a2 < 0)
  {
    result[47] = 0;
    result[46] = 0;
    result[45] = 0;
    result[44] = 0;
    result[43] = 0;
    result[42] = 0;
    result[41] = 0;
    result[40] = 0;
    result[39] = 0;
    result[38] = 0;
    result[37] = 0;
    result[36] = 0;
    result[35] = 0;
    result[34] = 0;
    result[33] = 0;
    result[32] = 0;
    result[31] = 0;
    result[30] = 0;
    result[29] = 0;
    result[28] = 0;
    result[27] = 0;
    result[26] = 0;
    result[25] = 0;
    result[24] = 0;
    result[23] = 0;
    result[22] = 0;
    result[21] = 0;
    result[20] = 0;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[48] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      result[3] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandLineService()
{
  return &type metadata for CommandLineService;
}

void ClientModelVersion.init(rawValue:)(BOOL *a1@<X8>, float a2@<S0>)
{
  *a1 = 22.0 != a2;
}

float ClientModelVersion.rawValue.getter()
{
  return 22.0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ClientModelVersion()
{
  lazy protocol witness table accessor for type ClientModelVersion and conformance ClientModelVersion();
  return == infix<A>(_:_:)() & 1;
}

unint64_t lazy protocol witness table accessor for type ClientModelVersion and conformance ClientModelVersion()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ClientModelVersion and conformance ClientModelVersion;
  if (!lazy protocol witness table cache variable for type ClientModelVersion and conformance ClientModelVersion)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for ClientModelVersion, &type metadata for ClientModelVersion);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ClientModelVersion and conformance ClientModelVersion);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ClientModelVersion and conformance ClientModelVersion;
  if (!lazy protocol witness table cache variable for type ClientModelVersion and conformance ClientModelVersion)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for ClientModelVersion, &type metadata for ClientModelVersion);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ClientModelVersion and conformance ClientModelVersion);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ClientModelVersion()
{
  lazy protocol witness table accessor for type ClientModelVersion and conformance ClientModelVersion();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ClientModelVersion()
{
  lazy protocol witness table accessor for type ClientModelVersion and conformance ClientModelVersion();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance ClientModelVersion()
{
  lazy protocol witness table accessor for type ClientModelVersion and conformance ClientModelVersion();
  return RawRepresentable<>._rawHashValue(seed:)();
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance ClientModelVersion(float *a1@<X0>, BOOL *a2@<X8>)
{
  ClientModelVersion.init(rawValue:)(a2, *a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ClientModelVersion(float *a1@<X8>)
{
  *a1 = ClientModelVersion.rawValue.getter();
}

uint64_t StoreType.containerIdentifier.getter()
{
  _BYTE *v0;

  if ((*v0 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.limitedPeersMetadata", 0x27uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkit.metadata", 0x1BuLL, 1)._countAndFlagsBits;
}

uint64_t StoreType.apnsServiceName.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.aps.groupkitd", 0x17uLL, 1)._countAndFlagsBits;
}

BOOL static StoreType.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  return ((*a1 & 1) != 0) == (unint64_t)((*a2 & 1) != 0);
}

uint64_t StoreType.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t StoreType.hashValue.getter()
{
  lazy protocol witness table accessor for type StoreType and conformance StoreType();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type StoreType and conformance StoreType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type StoreType and conformance StoreType;
  if (!lazy protocol witness table cache variable for type StoreType and conformance StoreType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for StoreType, &type metadata for StoreType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type StoreType and conformance StoreType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type StoreType and conformance StoreType;
  if (!lazy protocol witness table cache variable for type StoreType and conformance StoreType)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for StoreType, &type metadata for StoreType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type StoreType and conformance StoreType);
    return v0;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance StoreType(_BYTE *a1, _BYTE *a2)
{
  return static StoreType.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance StoreType()
{
  return StoreType.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StoreType()
{
  return StoreType.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StoreType(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t CoreDataStore.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DaemonConfiguration(v1 + 16, a1);
}

void *CoreDataStore.options.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + 112);
  v1 = v3;
  return v3;
}

float CoreDataStore.clientModelVersion.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 120);
}

uint64_t variable initialization expression of CoreDataStore.localContainer()
{
  return 0;
}

uint64_t variable initialization expression of CoreDataStore.cloudContainer()
{
  return 0;
}

void CoreDataStore.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 144) & 1;
}

uint64_t CoreDataStore.__allocating_init(configuration:type:options:clientModelVersion:)(uint64_t a1, _BYTE *a2, void *a3, float a4)
{
  swift_allocObject();
  return CoreDataStore.init(configuration:type:options:clientModelVersion:)(a1, a2, a3, a4);
}

uint64_t CoreDataStore.init(configuration:type:options:clientModelVersion:)(uint64_t a1, _BYTE *a2, void *a3, float a4)
{
  uint64_t v4;
  id v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD __b[12];

  memset(__b, 0, sizeof(__b));
  v19 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v22 = *(_QWORD *)(a1 + 56);
  v13 = *(_BYTE *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 88);
  __b[0] = *(_QWORD *)a1;
  v9 = __b[0];
  __b[1] = v19;
  __b[2] = v10;
  __b[3] = v20;
  __b[4] = v11;
  __b[5] = v21;
  __b[6] = v12;
  __b[7] = v22;
  LOBYTE(__b[8]) = v13 & 1;
  __b[9] = v14;
  __b[10] = v15;
  __b[11] = v16;
  v24 = *a2 & 1;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v4 + 16) = v9;
  *(_QWORD *)(v4 + 24) = v19;
  *(_QWORD *)(v4 + 32) = v10;
  *(_QWORD *)(v4 + 40) = v20;
  *(_QWORD *)(v4 + 48) = v11;
  *(_QWORD *)(v4 + 56) = v21;
  *(_QWORD *)(v4 + 64) = v12;
  *(_QWORD *)(v4 + 72) = v22;
  *(_BYTE *)(v4 + 80) = v13 & 1;
  *(_QWORD *)(v4 + 88) = v14;
  *(_QWORD *)(v4 + 96) = v15;
  *(_QWORD *)(v4 + 104) = v16;
  *(_BYTE *)(v4 + 144) = v24;
  v5 = a3;
  *(_QWORD *)(v4 + 112) = a3;
  *(float *)(v4 + 120) = a4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t variable initialization expression of CoreDataStore._localContext()
{
  return 0;
}

uint64_t variable initialization expression of CoreDataStore._cloudContext()
{
  return 0;
}

NSManagedObjectContext __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CoreDataStore.localContext()()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  Swift::String v5;
  _BYTE v7[12];
  int v8;
  uint64_t countAndFlagsBits;
  int v10;
  Swift::String v11;
  void *object;
  uint64_t v13;
  NSManagedObjectContext v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  id v19;
  char *v20;
  id v21;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  char *v34;
  id v35;
  id v36;
  char v37;
  id v38;
  id v39;
  char v40;
  char v41;
  uint64_t v42;

  v42 = 0;
  v39 = 0;
  v38 = 0;
  v36 = 0;
  v25 = 0;
  v26 = type metadata accessor for InternalErrorCode();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v29 = &v7[-v28];
  v30 = type metadata accessor for LogSubsystem();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v30);
  v33 = &v7[-v32];
  v42 = v0;
  v34 = &v41;
  swift_beginAccess();
  v35 = *(id *)(v0 + 152);
  v1 = v35;
  swift_endAccess();
  if (v35)
  {
    v23 = v35;
    v36 = v35;
    return (NSManagedObjectContext)v35;
  }
  else
  {
    v20 = &v40;
    swift_beginAccess();
    v21 = *(id *)(v24 + 128);
    v2 = v21;
    swift_endAccess();
    if (!v21)
    {
      v8 = 1;
      v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Local container is not loaded", 0x1DuLL, 1);
      countAndFlagsBits = v5._countAndFlagsBits;
      object = v5._object;
      v10 = static os_log_type_t.error.getter();
      v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v8 & 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v33);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v33, v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = 0;
      type metadata accessor for InternalError();
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v27 + 104))(v29, *MEMORY[0x24BE3DE08], v26);
      v15 = InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      return v14;
    }
    v19 = v21;
    v17 = v21;
    v39 = v21;
    v18 = objc_msgSend(v21, sel_newBackgroundContext);
    v38 = v18;
    v3 = v18;
    v16 = &v37;
    swift_beginAccess();
    v4 = *(void **)(v24 + 152);
    *(_QWORD *)(v24 + 152) = v18;

    swift_endAccess();
    return (NSManagedObjectContext)v18;
  }
}

NSManagedObjectContext __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CoreDataStore.cloudContext()()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  Swift::String v5;
  _BYTE v7[4];
  int v8;
  uint64_t countAndFlagsBits;
  int v10;
  Swift::String v11;
  void *object;
  uint64_t v13;
  NSManagedObjectContext v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  char *v24;
  id v25;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  id v39;
  id v40;
  char v41;
  char v42;
  id v43;
  id v44;
  char v45;
  char v46;
  uint64_t v47;

  v47 = 0;
  v44 = 0;
  v43 = 0;
  v40 = 0;
  v29 = 0;
  v30 = type metadata accessor for InternalErrorCode();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v33 = &v7[-v32];
  v34 = type metadata accessor for LogSubsystem();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v37 = &v7[-v36];
  v47 = v0;
  v38 = &v46;
  swift_beginAccess();
  v39 = *(id *)(v0 + 160);
  v1 = v39;
  swift_endAccess();
  if (v39)
  {
    v27 = v39;
    v40 = v39;
    return (NSManagedObjectContext)v39;
  }
  else
  {
    v24 = &v45;
    swift_beginAccess();
    v25 = *(id *)(v28 + 136);
    v2 = v25;
    swift_endAccess();
    if (!v25)
    {
      v8 = 1;
      v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Local container is not loaded", 0x1DuLL, 1);
      countAndFlagsBits = v5._countAndFlagsBits;
      object = v5._object;
      v10 = static os_log_type_t.error.getter();
      v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v8 & 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v37);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v37, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = 0;
      type metadata accessor for InternalError();
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v31 + 104))(v33, *MEMORY[0x24BE3DE00], v30);
      v15 = InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      return v14;
    }
    v23 = v25;
    v21 = v25;
    v44 = v25;
    v22 = objc_msgSend(v25, sel_newBackgroundContext);
    v43 = v22;
    v16 = (uint64_t *)MEMORY[0x24BDBB478];
    v17 = &v42;
    v19 = 0;
    swift_beginAccess();
    v18 = *v16;
    swift_unknownObjectRetain();
    swift_endAccess();
    objc_msgSend(v22, sel_setMergePolicy_, v18);
    swift_unknownObjectRelease();
    v3 = v22;
    v20 = &v41;
    swift_beginAccess();
    v4 = *(void **)(v28 + 160);
    *(_QWORD *)(v28 + 160) = v22;

    swift_endAccess();
    return (NSManagedObjectContext)v22;
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CoreDataStore.loadLocalContainer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  Swift::String v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  Swift::String v25;
  id v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  _BYTE v30[4];
  int v31;
  uint64_t v32;
  int v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  Swift::String v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  Swift::String v48;
  void *v49;
  uint64_t *v50;
  Builtin::Word v51;
  void *v52;
  _QWORD *v53;
  void *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  id v69;
  id v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  Class isa;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  id v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  id v85;
  id v86;
  id v87;
  Builtin::Word v88;
  void *object;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t countAndFlagsBits;
  void (*v99)(_BYTE *, uint64_t);
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  int v104;
  void *v105;
  id v106;
  id v107;
  id v108;
  id v109;
  _BOOL4 v110;
  _BOOL4 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  unint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  unint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  char *v130;
  id v131;
  _QWORD v132[6];
  uint64_t v133;
  uint64_t v134;
  id v135;
  uint64_t v136;
  char v137;
  uint64_t aBlock;
  int v139;
  int v140;
  uint64_t (*v141)(uint64_t, void *, void *);
  void *v142;
  uint64_t (*v143)(int, void *);
  uint64_t v144;
  uint64_t v145;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  char v157;
  uint64_t v158;
  _BYTE *v159;

  v159 = 0;
  v158 = 0;
  v152 = 0;
  v153 = 0;
  v147 = 0;
  v146 = 0;
  v145 = 0;
  v135 = 0;
  v119 = 0;
  v113 = type metadata accessor for InternalErrorCode();
  v114 = *(_QWORD *)(v113 - 8);
  v115 = (*(_QWORD *)(v114 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v113);
  v116 = &v30[-v115];
  v117 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v119);
  v118 = &v30[-v117];
  v120 = type metadata accessor for URL();
  v121 = *(_QWORD *)(v120 - 8);
  v122 = (*(_QWORD *)(v121 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v119);
  v123 = &v30[-v122];
  v124 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v125 = &v30[-v124];
  v159 = &v30[-v124];
  v126 = type metadata accessor for LogSubsystem();
  v127 = *(_QWORD *)(v126 - 8);
  v128 = (*(_QWORD *)(v127 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v126);
  v129 = &v30[-v128];
  v158 = v0;
  v130 = &v157;
  swift_beginAccess();
  v131 = *(id *)(v0 + 128);
  v3 = v131;
  swift_endAccess();
  v156 = v131;
  v111 = v131 == 0;
  v110 = v111;
  outlined destroy of NSPersistentContainer?(&v156);
  if (v110)
  {
    if ((*(_BYTE *)(v112 + 144) & 1) != 0)
      outlined init with copy of String((_QWORD *)(v112 + 32), &v154);
    else
      outlined init with copy of String((_QWORD *)(v112 + 64), &v154);
    v90 = v154;
    v91 = v155;
    v152 = v154;
    v153 = v155;
    v88 = 21;
    v4 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v93 = &v150;
    v150 = v4;
    v151 = v5;
    v104 = 1;
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("User Key Cache path: ", v88, 1);
    object = v6._object;
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    v148 = v90;
    v149 = v91;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v102 = 0;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v104 & 1);
    v92 = v7._object;
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    v95 = v150;
    v94 = v151;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v96 = String.init(stringInterpolation:)();
    v101 = v8;
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v104 & 1);
    countAndFlagsBits = v9._countAndFlagsBits;
    v100 = v9._object;
    v97 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v129);
    gpklog(_:type:fileID:line:subsystem:)();
    v99 = *(void (**)(_BYTE *, uint64_t))(v127 + 8);
    v99(v129, v126);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for NSBundle();
    v108 = (id)static NSBundle.groupKit.getter();
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit", 8uLL, v104 & 1);
    v103 = v10._object;
    v107 = (id)MEMORY[0x2426348B0](v10._countAndFlagsBits);
    swift_bridgeObjectRelease();
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("momd", 4uLL, v104 & 1);
    v105 = v11._object;
    v106 = (id)MEMORY[0x2426348B0](v11._countAndFlagsBits);
    swift_bridgeObjectRelease();
    v109 = objc_msgSend(v108, sel_URLForResource_withExtension_, v107, v106);

    if (v109)
    {
      v87 = v109;
      v86 = v109;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v121 + 32))(v118, v123, v120);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);

    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v118, 1, 1, v120);
    }
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v121 + 48))(v118, 1, v120) == 1)
    {
      outlined destroy of URL?((uint64_t)v118);
      v31 = 1;
      v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ERROR: Unable to locate CoreData model", 0x26uLL, 1);
      v32 = v29._countAndFlagsBits;
      v35 = v29._object;
      v33 = static os_log_type_t.error.getter();
      v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v31 & 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v129);
      gpklog(_:type:fileID:line:subsystem:)();
      v99(v129, v126);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 = 0;
      type metadata accessor for InternalError();
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v114 + 104))(v116, *MEMORY[0x24BE3DD80], v113);
      v37 = InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v121 + 32))(v125, v118, v120);
      v83 = 0;
      v84 = type metadata accessor for NSPersistentContainer();
      swift_bridgeObjectRetain();
      type metadata accessor for NSManagedObjectModel();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v121 + 16))(v123, v125, v120);
      v12 = NSManagedObjectModel.__allocating_init(contentsOf:)((uint64_t)v123);
      v85 = @nonobjc NSPersistentContainer.init(path:managedObjectModel:)(v90, v91, v12);
      if (v85)
      {
        v82 = v85;
        v76 = v85;
        v147 = v85;
        v73 = type metadata accessor for NSPersistentStoreDescription();
        URL.init(fileURLWithPath:)();
        v70 = NSPersistentStoreDescription.__allocating_init(url:)((uint64_t)v123);
        v146 = v70;
        v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Local", 5uLL, 1);
        v68 = v13._object;
        v69 = (id)MEMORY[0x2426348B0](v13._countAndFlagsBits);
        swift_bridgeObjectRelease();
        objc_msgSend(v70, sel_setConfiguration_, v69);

        v72 = _allocateUninitializedArray<A>(_:)();
        v71 = v14;
        v15 = v70;
        v16 = v72;
        *v71 = v70;
        _finalizeUninitializedArray<A>(_:)();
        v74 = v16;
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v76, sel_setPersistentStoreDescriptions_, isa);

        v79 = swift_allocObject();
        v78 = v79 + 16;
        v145 = v79 + 16;
        *(_QWORD *)(v79 + 16) = 0;
        swift_retain();
        v143 = partial apply for closure #1 in CoreDataStore.loadLocalContainer();
        v144 = v79;
        aBlock = MEMORY[0x24BDAC760];
        v139 = 1107296256;
        v140 = 0;
        v141 = thunk for @escaping @callee_guaranteed (@guaranteed NSPersistentStoreDescription, @guaranteed Error?) -> ();
        v142 = &block_descriptor_1;
        v77 = _Block_copy(&aBlock);
        swift_release();
        objc_msgSend(v76, sel_loadPersistentStoresWithCompletionHandler_, v77);
        _Block_release(v77);
        v80 = &v137;
        swift_beginAccess();
        v81 = *(id *)(v79 + 16);
        v17 = v81;
        swift_endAccess();
        if (v81)
        {
          v67 = v81;
          v64 = v81;
          v135 = v81;
          v51 = 60;
          v18 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
          v55 = &v133;
          v133 = v18;
          v134 = v19;
          v58 = 1;
          v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ERROR: Unable to load persistent stores for local database: ", v51, 1);
          v52 = v20._object;
          DefaultStringInterpolation.appendLiteral(_:)(v20);
          swift_bridgeObjectRelease();
          swift_getErrorValue();
          v21 = Error.localizedDescription.getter();
          v53 = v132;
          v132[0] = v21;
          v132[1] = v22;
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          outlined destroy of String();
          v63 = 0;
          v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v58 & 1);
          v54 = v23._object;
          DefaultStringInterpolation.appendLiteral(_:)(v23);
          swift_bridgeObjectRelease();
          v57 = v133;
          v56 = v134;
          swift_bridgeObjectRetain();
          outlined destroy of DefaultStringInterpolation();
          v59 = String.init(stringInterpolation:)();
          v62 = v24;
          v60 = static os_log_type_t.error.getter();
          v61 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v58 & 1);
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v129);
          gpklog(_:type:fileID:line:subsystem:)();
          v99(v129, v126);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for InternalError();
          (*(void (**)(_BYTE *, _QWORD, uint64_t))(v114 + 104))(v116, *MEMORY[0x24BE3DE58], v113);
          v65 = InternalError.__allocating_init(_:internalInfo:)();
          swift_willThrow();

          swift_release();
          (*(void (**)(_BYTE *, uint64_t))(v121 + 8))(v125, v120);
          swift_bridgeObjectRelease();
          v66 = v65;
        }
        else
        {
          v45 = 1;
          v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Local persistant container created", 0x22uLL, 1);
          v46 = v25._countAndFlagsBits;
          v49 = v25._object;
          v48 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v45 & 1);
          v47 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v129);
          gpklog(_:type:fileID:line:subsystem:)();
          v99(v129, v126);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v26 = v76;
          v50 = &v136;
          swift_beginAccess();
          v27 = *(void **)(v112 + 128);
          *(_QWORD *)(v112 + 128) = v76;

          swift_endAccess();
          swift_release();

          (*(void (**)(_BYTE *, uint64_t))(v121 + 8))(v125, v120);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v38 = 1;
        v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ERROR: Unable to init NSPersistentContainer", 0x2BuLL, 1);
        v39 = v28._countAndFlagsBits;
        v42 = v28._object;
        v40 = static os_log_type_t.error.getter();
        v41 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v38 & 1);
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v129);
        gpklog(_:type:fileID:line:subsystem:)();
        v99(v129, v126);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v43 = 0;
        type metadata accessor for InternalError();
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v114 + 104))(v116, *MEMORY[0x24BE3DE10], v113);
        v44 = InternalError.__allocating_init(_:internalInfo:)();
        swift_willThrow();
        (*(void (**)(_BYTE *, uint64_t))(v121 + 8))(v125, v120);
        swift_bridgeObjectRelease();
        v66 = v44;
      }
    }
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of NSPersistentContainer?(id *a1)
{

}

unint64_t type metadata accessor for NSBundle()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSBundle;
  if (!lazy cache variable for type metadata for NSBundle)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

unint64_t type metadata accessor for NSPersistentContainer()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSPersistentContainer;
  if (!lazy cache variable for type metadata for NSPersistentContainer)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSPersistentContainer);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for NSManagedObjectModel()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSManagedObjectModel;
  if (!lazy cache variable for type metadata for NSManagedObjectModel)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSManagedObjectModel);
    return ObjCClassMetadata;
  }
  return v2;
}

id NSManagedObjectModel.__allocating_init(contentsOf:)(uint64_t a1)
{
  id v1;
  NSURL *v2;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc NSManagedObjectModel.init(contentsOf:)(a1, v2);
}

id @nonobjc NSPersistentContainer.init(path:managedObjectModel:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;

  if (a2)
  {
    v5 = MEMORY[0x2426348B0](a1);
    swift_bridgeObjectRelease();
    v6 = (void *)v5;
  }
  else
  {
    v6 = 0;
  }
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_persistentContainerWithPath_managedObjectModel_, v6, a3);

  return v4;
}

unint64_t type metadata accessor for NSPersistentStoreDescription()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSPersistentStoreDescription;
  if (!lazy cache variable for type metadata for NSPersistentStoreDescription)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSPersistentStoreDescription);
    return ObjCClassMetadata;
  }
  return v2;
}

id NSPersistentStoreDescription.__allocating_init(url:)(uint64_t a1)
{
  id v1;
  NSURL *v2;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc NSPersistentStoreDescription.init(url:)(a1, v2);
}

uint64_t sub_23D48F444()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t closure #1 in CoreDataStore.loadLocalContainer()(int a1, id a2, uint64_t a3)
{
  id v3;
  void *v4;

  v3 = a2;
  swift_beginAccess();
  v4 = *(void **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a2;

  return swift_endAccess();
}

uint64_t partial apply for closure #1 in CoreDataStore.loadLocalContainer()(int a1, void *a2)
{
  uint64_t v2;

  return closure #1 in CoreDataStore.loadLocalContainer()(a1, a2, v2);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSPersistentStoreDescription, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  id v3;
  id v4;
  void *v6;
  void (*v7)(void *);

  v7 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v3 = a2;
  v4 = a3;
  if (a3)
    v6 = a3;
  else
    v6 = 0;
  v7(a2);

  return swift_release();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CoreDataStore.loadCloudContainer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  id v13;
  Swift::String v14;
  id v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  Swift::String v27;
  id v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  _BYTE v32[4];
  int v33;
  uint64_t v34;
  int v35;
  Swift::String v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  Swift::String v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  Swift::String v50;
  void *v51;
  uint64_t *v52;
  Builtin::Word v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  int v70;
  void *v71;
  id v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  Class isa;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  id v81;
  id v82;
  id v83;
  unint64_t v84;
  id v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  id v89;
  id v90;
  id v91;
  Builtin::Word v92;
  void *object;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t countAndFlagsBits;
  void (*v103)(_BYTE *, uint64_t);
  void *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  int v108;
  void *v109;
  id v110;
  id v111;
  id v112;
  id v113;
  _BOOL4 v114;
  _BOOL4 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  unint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  _BYTE *v127;
  unint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  char *v134;
  id v135;
  _QWORD v136[6];
  uint64_t v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  char v141;
  uint64_t aBlock;
  int v143;
  int v144;
  uint64_t (*v145)(uint64_t, void *, void *);
  void *v146;
  uint64_t (*v147)(int, void *);
  uint64_t v148;
  uint64_t v149;
  id v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  char v161;
  uint64_t v162;
  _BYTE *v163;

  v163 = 0;
  v162 = 0;
  v156 = 0;
  v157 = 0;
  v151 = 0;
  v150 = 0;
  v149 = 0;
  v139 = 0;
  v123 = 0;
  v117 = type metadata accessor for InternalErrorCode();
  v118 = *(_QWORD *)(v117 - 8);
  v119 = (*(_QWORD *)(v118 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v117);
  v120 = &v32[-v119];
  v121 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v123);
  v122 = &v32[-v121];
  v124 = type metadata accessor for URL();
  v125 = *(_QWORD *)(v124 - 8);
  v126 = (*(_QWORD *)(v125 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v123);
  v127 = &v32[-v126];
  v128 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v129 = &v32[-v128];
  v163 = &v32[-v128];
  v130 = type metadata accessor for LogSubsystem();
  v131 = *(_QWORD *)(v130 - 8);
  v132 = (*(_QWORD *)(v131 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v130);
  v133 = &v32[-v132];
  v162 = v0;
  v134 = &v161;
  swift_beginAccess();
  v135 = *(id *)(v0 + 136);
  v3 = v135;
  swift_endAccess();
  v160 = v135;
  v115 = v135 == 0;
  v114 = v115;
  outlined destroy of NSPersistentCloudKitContainer?(&v160);
  if (v114)
  {
    if ((*(_BYTE *)(v116 + 144) & 1) != 0)
      outlined init with copy of String((_QWORD *)(v116 + 16), &v158);
    else
      outlined init with copy of String((_QWORD *)(v116 + 48), &v158);
    v94 = v158;
    v95 = v159;
    v156 = v158;
    v157 = v159;
    v92 = 15;
    v4 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v97 = &v154;
    v154 = v4;
    v155 = v5;
    v108 = 1;
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Database path: ", v92, 1);
    object = v6._object;
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    v152 = v94;
    v153 = v95;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v106 = 0;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v108 & 1);
    v96 = v7._object;
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    v99 = v154;
    v98 = v155;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v100 = String.init(stringInterpolation:)();
    v105 = v8;
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v108 & 1);
    countAndFlagsBits = v9._countAndFlagsBits;
    v104 = v9._object;
    v101 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v133);
    gpklog(_:type:fileID:line:subsystem:)();
    v103 = *(void (**)(_BYTE *, uint64_t))(v131 + 8);
    v103(v133, v130);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for ParticipantTransformer();
    static ParticipantTransformer.register()();
    type metadata accessor for NSBundle();
    v112 = (id)static NSBundle.groupKit.getter();
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKit", 8uLL, v108 & 1);
    v107 = v10._object;
    v111 = (id)MEMORY[0x2426348B0](v10._countAndFlagsBits);
    swift_bridgeObjectRelease();
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("momd", 4uLL, v108 & 1);
    v109 = v11._object;
    v110 = (id)MEMORY[0x2426348B0](v11._countAndFlagsBits);
    swift_bridgeObjectRelease();
    v113 = objc_msgSend(v112, sel_URLForResource_withExtension_, v111, v110);

    if (v113)
    {
      v91 = v113;
      v90 = v113;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v125 + 32))(v122, v127, v124);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);

    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v125 + 56))(v122, 1, 1, v124);
    }
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v125 + 48))(v122, 1, v124) == 1)
    {
      outlined destroy of URL?((uint64_t)v122);
      v33 = 1;
      v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ERROR: Unable to locate CoreData model", 0x26uLL, 1);
      v34 = v31._countAndFlagsBits;
      v37 = v31._object;
      v35 = static os_log_type_t.error.getter();
      v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v33 & 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v133);
      gpklog(_:type:fileID:line:subsystem:)();
      v103(v133, v130);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = 0;
      type metadata accessor for InternalError();
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v118 + 104))(v120, *MEMORY[0x24BE3DD80], v117);
      v39 = InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v125 + 32))(v129, v122, v124);
      v87 = 0;
      v88 = type metadata accessor for NSPersistentCloudKitContainer();
      swift_bridgeObjectRetain();
      type metadata accessor for NSManagedObjectModel();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v125 + 16))(v127, v129, v124);
      v12 = NSManagedObjectModel.__allocating_init(contentsOf:)((uint64_t)v127);
      v89 = @nonobjc NSPersistentCloudKitContainer.__allocating_init(path:managedObjectModel:)(v94, v95, v12);
      if (v89)
      {
        v86 = v89;
        v83 = v89;
        v151 = v89;
        v84 = type metadata accessor for NSPersistentStoreDescription();
        URL.init(fileURLWithPath:)();
        v85 = NSPersistentStoreDescription.__allocating_init(url:)((uint64_t)v127);
        v150 = v85;
        if ((*(_BYTE *)(v116 + 80) & 1) != 0)
        {
          v82 = *(id *)(v116 + 112);
          v13 = v82;
          objc_msgSend(v85, sel_setCloudKitContainerOptions_, v82);

        }
        v70 = 1;
        objc_msgSend(v85, sel_setShouldInferMappingModelAutomatically_, 1);
        objc_msgSend(v85, sel_setShouldMigrateStoreAutomatically_, v70 & 1);
        v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cloud", 5uLL, v70 & 1);
        v71 = v14._object;
        v72 = (id)MEMORY[0x2426348B0](v14._countAndFlagsBits);
        swift_bridgeObjectRelease();
        objc_msgSend(v85, sel_setConfiguration_, v72);

        v15 = v83;
        v74 = _allocateUninitializedArray<A>(_:)();
        v73 = v16;
        v17 = v85;
        v18 = v74;
        *v73 = v85;
        _finalizeUninitializedArray<A>(_:)();
        v75 = v18;
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v83, sel_setPersistentStoreDescriptions_, isa);

        v79 = swift_allocObject();
        v78 = v79 + 16;
        v149 = v79 + 16;
        *(_QWORD *)(v79 + 16) = 0;
        swift_retain();
        v147 = partial apply for closure #1 in CoreDataStore.loadCloudContainer();
        v148 = v79;
        aBlock = MEMORY[0x24BDAC760];
        v143 = 1107296256;
        v144 = 0;
        v145 = thunk for @escaping @callee_guaranteed (@guaranteed NSPersistentStoreDescription, @guaranteed Error?) -> ();
        v146 = &block_descriptor_4;
        v77 = _Block_copy(&aBlock);
        swift_release();
        objc_msgSend(v83, sel_loadPersistentStoresWithCompletionHandler_, v77);
        _Block_release(v77);
        v80 = &v141;
        swift_beginAccess();
        v81 = *(id *)(v79 + 16);
        v19 = v81;
        swift_endAccess();
        if (v81)
        {
          v69 = v81;
          v66 = v81;
          v139 = v81;
          v53 = 60;
          v20 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
          v57 = &v137;
          v137 = v20;
          v138 = v21;
          v60 = 1;
          v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ERROR: Unable to load persistent stores for cloud database: ", v53, 1);
          v54 = v22._object;
          DefaultStringInterpolation.appendLiteral(_:)(v22);
          swift_bridgeObjectRelease();
          swift_getErrorValue();
          v23 = Error.localizedDescription.getter();
          v55 = v136;
          v136[0] = v23;
          v136[1] = v24;
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          outlined destroy of String();
          v65 = 0;
          v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v60 & 1);
          v56 = v25._object;
          DefaultStringInterpolation.appendLiteral(_:)(v25);
          swift_bridgeObjectRelease();
          v59 = v137;
          v58 = v138;
          swift_bridgeObjectRetain();
          outlined destroy of DefaultStringInterpolation();
          v61 = String.init(stringInterpolation:)();
          v64 = v26;
          v62 = static os_log_type_t.error.getter();
          v63 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v60 & 1);
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v133);
          gpklog(_:type:fileID:line:subsystem:)();
          v103(v133, v130);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for InternalError();
          (*(void (**)(_BYTE *, _QWORD, uint64_t))(v118 + 104))(v120, *MEMORY[0x24BE3DE50], v117);
          v67 = InternalError.__allocating_init(_:internalInfo:)();
          swift_willThrow();

          swift_release();
          (*(void (**)(_BYTE *, uint64_t))(v125 + 8))(v129, v124);
          swift_bridgeObjectRelease();
          v68 = v67;
        }
        else
        {
          v47 = 1;
          v27 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cloud persistant container created", 0x22uLL, 1);
          v48 = v27._countAndFlagsBits;
          v51 = v27._object;
          v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v47 & 1);
          v49 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v133);
          gpklog(_:type:fileID:line:subsystem:)();
          v103(v133, v130);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v28 = v83;
          v52 = &v140;
          swift_beginAccess();
          v29 = *(void **)(v116 + 136);
          *(_QWORD *)(v116 + 136) = v83;

          swift_endAccess();
          swift_release();

          (*(void (**)(_BYTE *, uint64_t))(v125 + 8))(v129, v124);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v40 = 1;
        v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ERROR: Unable to init NSPersistentContainer", 0x2BuLL, 1);
        v41 = v30._countAndFlagsBits;
        v44 = v30._object;
        v42 = static os_log_type_t.error.getter();
        v43 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v40 & 1);
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v133);
        gpklog(_:type:fileID:line:subsystem:)();
        v103(v133, v130);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v45 = 0;
        type metadata accessor for InternalError();
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v118 + 104))(v120, *MEMORY[0x24BE3DE10], v117);
        v46 = InternalError.__allocating_init(_:internalInfo:)();
        swift_willThrow();
        (*(void (**)(_BYTE *, uint64_t))(v125 + 8))(v129, v124);
        swift_bridgeObjectRelease();
        v68 = v46;
      }
    }
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of NSPersistentCloudKitContainer?(id *a1)
{

}

unint64_t type metadata accessor for NSPersistentCloudKitContainer()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSPersistentCloudKitContainer;
  if (!lazy cache variable for type metadata for NSPersistentCloudKitContainer)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSPersistentCloudKitContainer);
    return ObjCClassMetadata;
  }
  return v2;
}

id @nonobjc NSPersistentCloudKitContainer.__allocating_init(path:managedObjectModel:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;

  if (a2)
  {
    v5 = MEMORY[0x2426348B0](a1);
    swift_bridgeObjectRelease();
    v6 = (void *)v5;
  }
  else
  {
    v6 = 0;
  }
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_persistentContainerWithPath_managedObjectModel_, v6, a3);

  return v4;
}

uint64_t closure #1 in CoreDataStore.loadCloudContainer()(int a1, id a2, uint64_t a3)
{
  id v3;
  void *v4;

  v3 = a2;
  swift_beginAccess();
  v4 = *(void **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a2;

  return swift_endAccess();
}

uint64_t partial apply for closure #1 in CoreDataStore.loadCloudContainer()(int a1, void *a2)
{
  uint64_t v2;

  return closure #1 in CoreDataStore.loadCloudContainer()(a1, a2, v2);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

NSManagedObjectContext CoreDataStore.metadataStore()@<X0>(uint64_t a1@<X8>)
{
  NSManagedObjectContext result;
  uint64_t v2;
  Swift::Float v3;
  uint64_t v5;

  result.super.isa = CoreDataStore.cloudContext()().super.isa;
  if (!v2)
  {
    v3 = *(float *)(v5 + 120);
    *(_QWORD *)(a1 + 24) = &type metadata for CoreDataMetadataStore;
    *(_QWORD *)(a1 + 32) = &protocol witness table for CoreDataMetadataStore;
    return (NSManagedObjectContext)CoreDataMetadataStore.init(context:clientModelVersion:)(result, v3);
  }
  return result;
}

NSManagedObjectContext CoreDataStore.groupBlobStore()@<X0>(uint64_t a1@<X8>)
{
  NSManagedObjectContext result;
  uint64_t v2;
  Swift::Float v3;
  uint64_t v5;

  result.super.isa = CoreDataStore.localContext()().super.isa;
  if (!v2)
  {
    v3 = *(float *)(v5 + 120);
    *(_QWORD *)(a1 + 24) = &type metadata for CoreDataCachedGroupStore;
    *(_QWORD *)(a1 + 32) = &protocol witness table for CoreDataCachedGroupStore;
    return (NSManagedObjectContext)CoreDataCachedGroupStore.init(context:clientModelVersion:)(result, v3);
  }
  return result;
}

NSManagedObjectContext CoreDataStore.userStore()@<X0>(uint64_t a1@<X8>)
{
  NSManagedObjectContext result;
  uint64_t v2;
  Swift::Float v3;
  uint64_t v5;

  result.super.isa = CoreDataStore.localContext()().super.isa;
  if (!v2)
  {
    v3 = *(float *)(v5 + 120);
    *(_QWORD *)(a1 + 24) = &type metadata for CoreDataUserStore;
    *(_QWORD *)(a1 + 32) = &protocol witness table for CoreDataUserStore;
    return (NSManagedObjectContext)CoreDataUserStore.init(context:clientModelVersion:)(result, v3);
  }
  return result;
}

void CoreDataStore.invitationStore()(uint64_t *a1@<X8>)
{
  uint64_t v1;
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  NSManagedObjectContext v7;

  v7.super.isa = CoreDataStore.cloudContext()().super.isa;
  if (!v1)
  {
    v4 = type metadata accessor for CoreDataInvitationStore();
    v2 = v7.super.isa;
    v3 = CoreDataInvitationStore.__allocating_init(context:clientModelVersion:)(v7.super.isa, *(float *)(v6 + 120));
    a1[3] = v4;
    a1[4] = (uint64_t)&protocol witness table for CoreDataInvitationStore;
    *a1 = v3;

  }
}

void CoreDataStore.groupStore()(uint64_t *a1@<X8>)
{
  uint64_t v1;
  NSManagedObjectContext v2;
  uint64_t v3;
  objc_class *v4;
  uint64_t v5;
  float v6;
  uint64_t v8;
  Class isa;
  _BYTE v10[40];
  _BYTE v11[24];
  ValueMetadata *v12;
  _UNKNOWN **v13;
  _BYTE v14[40];
  _BYTE v15[40];
  Class v16;
  uint64_t v17;

  v16 = 0;
  v17 = v1;
  v2.super.isa = CoreDataStore.cloudContext()().super.isa;
  isa = v2.super.isa;
  if (!v3)
  {
    v16 = v2.super.isa;
    v4 = v2.super.isa;
    CoreDataStore.userStore()((uint64_t)v15);
    CoreDataStore.metadataStore()((uint64_t)v14);
    v12 = &type metadata for GroupTransformer;
    v13 = &protocol witness table for GroupTransformer;
    GroupTransformer.init()();
    CoreDataStore.groupBlobStore()((uint64_t)v10);
    v6 = *(float *)(v8 + 120);
    a1[3] = (uint64_t)&type metadata for CoreDataGroupStore;
    a1[4] = (uint64_t)&protocol witness table for CoreDataGroupStore;
    v5 = swift_allocObject();
    *a1 = v5;
    CoreDataGroupStore.init(context:userStore:metadataStore:transformer:cachedGroupStore:clientModelVersion:)(isa, (uint64_t)v15, (uint64_t)v14, (uint64_t)v11, (uint64_t)v10, v5 + 16, v6);

  }
}

uint64_t sub_23D490B28()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  __swift_destroy_boxed_opaque_existential_1(v0 + 144);
  return swift_deallocObject();
}

Swift::Void __swiftcall CoreDataStore.initializeCKSchema()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  Builtin::Word v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  Swift::String v38;
  uint64_t v39;
  id v40;
  Builtin::Word v41;
  void *v42;
  void *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  unsigned int v56;
  unint64_t v57;
  void *object;
  uint64_t v59;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t countAndFlagsBits;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  void *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[2];
  char v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80[2];
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88[2];

  v88[1] = *(id *)MEMORY[0x24BDAC8D0];
  v87 = 0;
  v79 = 0;
  v70 = type metadata accessor for LogSubsystem();
  v68 = *(_QWORD *)(v70 - 8);
  v57 = (*(_QWORD *)(v68 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v70);
  v69 = (uint64_t)&v25 - v57;
  v87 = v0;
  v74 = 32;
  v1 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v61 = &v85;
  v85 = v1;
  v86 = v2;
  v64 = 1;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("🏁 Initializing CK Schema: ", 0x1DuLL, 0);
  object = v3._object;
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v84 = *(_BYTE *)(v59 + 144) & v64;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("...", 3uLL, v64 & 1);
  v60 = v4._object;
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  v5 = v59;
  swift_bridgeObjectRelease();
  v63 = v85;
  v62 = v86;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v65 = String.init(stringInterpolation:)();
  v73 = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v64 & 1);
  countAndFlagsBits = v7._countAndFlagsBits;
  v72 = v7._object;
  v66 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v69);
  gpklog(_:type:fileID:line:subsystem:)();
  v71 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
  v71(v69, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v88[0] = 0;
  swift_beginAccess();
  if (!*(_QWORD *)(v5 + 136))
  {
    swift_endAccess();
    outlined destroy of NSError?(v88);
    goto LABEL_3;
  }
  v55 = *(id *)(v59 + 136);
  v8 = v55;
  swift_endAccess();
  v52 = 0;
  type metadata accessor for NSPersistentCloudKitContainerSchemaInitializationOptions();
  v53 = _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  v80[0] = v88[0];
  v56 = objc_msgSend(v55, sel_initializeCloudKitSchemaWithOptions_error_, v80[1], v80);
  v54 = v80[0];
  v9 = v80[0];
  v10 = v88[0];
  v88[0] = v54;

  if ((v56 & 1) != 0)
  {
LABEL_3:
    v41 = 39;
    v11 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v44 = &v82;
    v82 = v11;
    v83 = v12;
    v47 = 1;
    v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Successfully intialized CK Schema: ", v41, 0);
    v42 = v13._object;
    DefaultStringInterpolation.appendLiteral(_:)(v13);
    swift_bridgeObjectRelease();
    v81 = *(_BYTE *)(v59 + 144) & v47;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v47 & 1);
    v43 = v14._object;
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    v46 = v82;
    v45 = v83;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v48 = String.init(stringInterpolation:)();
    v51 = v15;
    v50 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v47 & 1);
    v49 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v69);
    gpklog(_:type:fileID:line:subsystem:)();
    v71(v69, v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v26 = v88[0];
  v40 = (id)_convertNSErrorToError(_:)();

  swift_willThrow();
  v16 = v40;
  v79 = v40;
  v28 = 2;
  v17 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v32 = &v77;
  v77 = v17;
  v78 = v18;
  v35 = 1;
  v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("❌ Error intializing CK schema for ", 0x24uLL, 0);
  v27 = v19._object;
  DefaultStringInterpolation.appendLiteral(_:)(v19);
  swift_bridgeObjectRelease();
  v76 = *(_BYTE *)(v59 + 144) & v35;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(": ", v28, v35 & 1);
  v29 = v20._object;
  DefaultStringInterpolation.appendLiteral(_:)(v20);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v21 = Error.localizedDescription.getter();
  v30 = v75;
  v75[0] = v21;
  v75[1] = v22;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v35 & 1);
  v31 = v23._object;
  DefaultStringInterpolation.appendLiteral(_:)(v23);
  swift_bridgeObjectRelease();
  v34 = v77;
  v33 = v78;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v36 = String.init(stringInterpolation:)();
  v39 = v24;
  v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/Store.swift", 0x18uLL, v35 & 1);
  v37 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v69);
  gpklog(_:type:fileID:line:subsystem:)();
  v71(v69, v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of NSError?(id *a1)
{

}

uint64_t type metadata accessor for NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for NSPersistentCloudKitContainerSchemaInitializationOptions;
  if (!lazy cache variable for type metadata for NSPersistentCloudKitContainerSchemaInitializationOptions)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSPersistentCloudKitContainerSchemaInitializationOptions);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions;
  if (!lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions)
  {
    v0 = type metadata accessor for NSPersistentCloudKitContainerSchemaInitializationOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSPersistentCloudKitContainerSchemaInitializationOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions;
  if (!lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions)
  {
    v0 = type metadata accessor for NSPersistentCloudKitContainerSchemaInitializationOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSPersistentCloudKitContainerSchemaInitializationOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions;
  if (!lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions)
  {
    v0 = type metadata accessor for NSPersistentCloudKitContainerSchemaInitializationOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSPersistentCloudKitContainerSchemaInitializationOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions;
  if (!lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions)
  {
    v0 = type metadata accessor for NSPersistentCloudKitContainerSchemaInitializationOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSPersistentCloudKitContainerSchemaInitializationOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions;
  if (!lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions)
  {
    v0 = type metadata accessor for NSPersistentCloudKitContainerSchemaInitializationOptions();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for NSPersistentCloudKitContainerSchemaInitializationOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions);
    return v1;
  }
  return v3;
}

uint64_t CoreDataStore.deinit()
{
  id *v0;
  uint64_t v2;

  outlined destroy of DaemonConfiguration();

  outlined destroy of NSPersistentContainer?(v0 + 16);
  outlined destroy of NSPersistentCloudKitContainer?(v0 + 17);
  outlined destroy of NSManagedObjectContext?(v0 + 19);
  outlined destroy of NSManagedObjectContext?(v0 + 20);
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of NSManagedObjectContext?(id *a1)
{

}

uint64_t CoreDataStore.__deallocating_deinit()
{
  CoreDataStore.deinit();
  return swift_deallocClassInstance();
}

void protocol witness for Store.type.getter in conformance CoreDataStore(_BYTE *a1@<X8>)
{
  CoreDataStore.type.getter(a1);
}

uint64_t protocol witness for Store.loadLocalContainer() in conformance CoreDataStore()
{
  uint64_t v1;

  CoreDataStore.loadLocalContainer()();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t protocol witness for Store.loadCloudContainer() in conformance CoreDataStore()
{
  uint64_t v1;

  CoreDataStore.loadCloudContainer()();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

NSManagedObjectContext protocol witness for Store.metadataStore() in conformance CoreDataStore@<X0>(uint64_t a1@<X8>)
{
  return CoreDataStore.metadataStore()(a1);
}

NSManagedObjectContext protocol witness for Store.groupBlobStore() in conformance CoreDataStore@<X0>(uint64_t a1@<X8>)
{
  return CoreDataStore.groupBlobStore()(a1);
}

NSManagedObjectContext protocol witness for Store.userStore() in conformance CoreDataStore@<X0>(uint64_t a1@<X8>)
{
  return CoreDataStore.userStore()(a1);
}

void protocol witness for Store.invitationStore() in conformance CoreDataStore(uint64_t *a1@<X8>)
{
  CoreDataStore.invitationStore()(a1);
}

void protocol witness for Store.groupStore() in conformance CoreDataStore(uint64_t *a1@<X8>)
{
  CoreDataStore.groupStore()(a1);
}

void protocol witness for Store.initializeCKSchema() in conformance CoreDataStore()
{
  CoreDataStore.initializeCKSchema()();
}

unint64_t base witness table accessor for Equatable in ClientModelVersion()
{
  return lazy protocol witness table accessor for type ClientModelVersion and conformance ClientModelVersion();
}

unint64_t base witness table accessor for Equatable in StoreType()
{
  return lazy protocol witness table accessor for type StoreType and conformance StoreType();
}

uint64_t getEnumTagSinglePayload for ClientModelVersion(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for ClientModelVersion(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for ClientModelVersion()
{
  return 0;
}

ValueMetadata *type metadata accessor for ClientModelVersion()
{
  return &type metadata for ClientModelVersion;
}

uint64_t getEnumTagSinglePayload for StoreType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for StoreType(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for StoreType(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for StoreType(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for StoreType()
{
  return &type metadata for StoreType;
}

uint64_t dispatch thunk of Store.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Store.loadLocalContainer()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v6)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 16) + **(int **)(a2 + 16));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of Store.loadLocalContainer();
  return v6(a1, a2);
}

uint64_t dispatch thunk of Store.loadLocalContainer()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of Store.loadCloudContainer()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v6)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 24) + **(int **)(a2 + 24));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of Store.loadCloudContainer();
  return v6(a1, a2);
}

uint64_t dispatch thunk of Store.loadCloudContainer()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of Store.metadataStore()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Store.groupBlobStore()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Store.userStore()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Store.invitationStore()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of Store.groupStore()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of Store.initializeCKSchema()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t type metadata accessor for CoreDataStore()
{
  return objc_opt_self();
}

uint64_t method lookup function for CoreDataStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CoreDataStore.__allocating_init(configuration:type:options:clientModelVersion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

id @nonobjc NSManagedObjectModel.init(contentsOf:)@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v6;
  id v8;

  URL._bridgeToObjectiveC()(a2);
  v6 = v3;
  v8 = objc_msgSend(v2, sel_initWithContentsOfURL_);

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1);
  return v8;
}

id @nonobjc NSPersistentStoreDescription.init(url:)@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v6;
  id v8;

  URL._bridgeToObjectiveC()(a2);
  v6 = v3;
  v8 = objc_msgSend(v2, sel_initWithURL_);

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1);
  return v8;
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
  return SetAlgebra<>.init(arrayLiteral:)();
}

__C::NSPersistentCloudKitContainerSchemaInitializationOptions protocol witness for OptionSet.init(rawValue:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions@<X0>(Swift::UInt *a1@<X0>, __C::NSPersistentCloudKitContainerSchemaInitializationOptions *a2@<X8>)
{
  __C::NSPersistentCloudKitContainerSchemaInitializationOptions result;

  result.rawValue = NSPersistentCloudKitContainerSchemaInitializationOptions.init(rawValue:)(*a1).rawValue;
  a2->rawValue = result.rawValue;
  return result;
}

__C::NSPersistentCloudKitContainerSchemaInitializationOptions protocol witness for RawRepresentable.init(rawValue:) in conformance NSPersistentCloudKitContainerSchemaInitializationOptions@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  __C::NSPersistentCloudKitContainerSchemaInitializationOptions result;

  result.rawValue = NSPersistentCloudKitContainerSchemaInitializationOptions.init(rawValue:)(*a1).rawValue;
  *(__C::NSPersistentCloudKitContainerSchemaInitializationOptions *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSPersistentCloudKitContainerSchemaInitializationOptions@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = NSPersistentCloudKitContainerSchemaInitializationOptions.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t base witness table accessor for RawRepresentable in NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  return lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
}

unint64_t base witness table accessor for SetAlgebra in NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  return lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
}

unint64_t base witness table accessor for Equatable in NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  return lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSPersistentCloudKitContainerSchemaInitializationOptions()
{
  return lazy protocol witness table accessor for type NSPersistentCloudKitContainerSchemaInitializationOptions and conformance NSPersistentCloudKitContainerSchemaInitializationOptions();
}

uint64_t dispatch thunk of CloudDataProtectionInfo.supportsDeviceToDeviceEncryption.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() & 1;
}

uint64_t dispatch thunk of CloudDataProtectionChecking.accountInfo(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of UserHandleFormattingUtils.appearsToBePhoneNumber(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))() & 1;
}

uint64_t dispatch thunk of UserHandleFormattingUtils.standardizedHandleFormat(_:trimmingNonNumericalCharacters:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a5 + 16))(a1, a2, a3 & 1);
}

uint64_t CompleteRegisterUserKeyInfoRequest.Response.gpkUserId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t CompleteRegisterUserKeyInfoRequest.Response.keyInfos.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompleteRegisterUserKeyInfoRequest.Response() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for CompleteRegisterUserKeyInfoRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteRegisterUserKeyInfoRequest.Response;
  if (!type metadata singleton initialization cache for CompleteRegisterUserKeyInfoRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Response.phoneNumber.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompleteRegisterUserKeyInfoRequest.Response() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Response.email.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompleteRegisterUserKeyInfoRequest.Response() + 28));
  swift_bridgeObjectRetain();
  return v2;
}

void static CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D492E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D492EB4
                                                                                       + dword_23D492F1C[a12]))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D492EC4()
{
  uint64_t v1;

  return v1 == 0;
}

void CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D492F7C()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyInfos", 8uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("phoneNumber", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 2;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("email", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v6 = 3;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 4;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys, &type metadata for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys, &type metadata for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys, &type metadata for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys, &type metadata for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys, &type metadata for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

void CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D4933DC()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys(char *a1)
{
  char v1;

  static CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys(uint64_t a1)
{
  char *v1;

  CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  char *v0;

  CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteRegisterUserKeyInfoRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteRegisterUserKeyInfoRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD *v54;

  v31 = a1;
  v54 = 0;
  v53 = 0;
  v41 = type metadata accessor for GPKUserID();
  v37 = *(_QWORD *)(v41 - 8);
  v30 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)v9 - v30;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteRegisterUserKeyInfoRequest.Response.CodingKeys>);
  v32 = *(_QWORD *)(v40 - 8);
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)v9 - v33;
  v54 = v2;
  v53 = v1;
  v34 = v2[3];
  v35 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v34);
  lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v43, v38, v41);
  v39 = &v52;
  v52 = 0;
  lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v3 = v42;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v44 = v3;
  v45 = v3;
  if (v3)
  {
    v11 = v45;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v41);
    result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, v40);
    v12 = v11;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v43, v41);
    v23 = (int *)type metadata accessor for CompleteRegisterUserKeyInfoRequest.Response();
    v24 = *(_QWORD *)(v38 + v23[5]);
    swift_bridgeObjectRetain();
    v27 = &v51;
    v51 = v24;
    v25 = &v50;
    v50 = 1;
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UserKeyInfo]);
    lazy protocol witness table accessor for type [UserKeyInfo] and conformance <A> [A]();
    v4 = v44;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v28 = v4;
    v29 = v4;
    if (v4)
    {
      v10 = v29;
      outlined destroy of [UserKeyInfo]();
      result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, v40);
      v12 = v10;
    }
    else
    {
      outlined destroy of [UserKeyInfo]();
      v16 = *(_QWORD *)(v38 + v23[6]);
      swift_bridgeObjectRetain();
      v19 = &v49;
      v49 = v16;
      v17 = &v48;
      v48 = 2;
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      v5 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
      v6 = v28;
      v20 = v5;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v21 = v6;
      v22 = v6;
      if (v6)
      {
        v9[2] = v22;
        outlined destroy of [String]();
        return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, v40);
      }
      else
      {
        outlined destroy of [String]();
        v7 = v21;
        v13 = *(_QWORD *)(v38 + v23[7]);
        swift_bridgeObjectRetain();
        v47 = v13;
        v46 = 3;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v14 = v7;
        v15 = v7;
        if (v7)
          v9[1] = v15;
        outlined destroy of [String]();
        return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, v40);
      }
    }
  }
  return result;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  char v62;

  v35 = a2;
  v44 = a1;
  v61 = 0;
  v40 = 0;
  v36 = type metadata accessor for GPKUserID();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)v15 - v38;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteRegisterUserKeyInfoRequest.Response.CodingKeys>);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v48 = (char *)v15 - v43;
  v45 = (int *)type metadata accessor for CompleteRegisterUserKeyInfoRequest.Response();
  v46 = (*(_QWORD *)(*((_QWORD *)v45 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v44);
  v47 = (uint64_t)v15 - v46;
  v62 = 0;
  v61 = v2;
  v50 = v2[3];
  v51 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v50);
  lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys();
  v3 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v52 = v3;
  v53 = v3;
  if (v3)
  {
    v19 = v53;
  }
  else
  {
    v32 = &v60;
    v60 = 0;
    lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v4 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v33 = v4;
    v34 = v4;
    if (v4)
    {
      v18 = v34;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
      v19 = v18;
    }
    else
    {
      v27 = 1;
      v62 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v47, v39, v36);
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UserKeyInfo]);
      v28 = &v58;
      v58 = v27;
      lazy protocol witness table accessor for type [UserKeyInfo] and conformance <A> [A]();
      v5 = v33;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v30 = v5;
      v31 = v5;
      if (v5)
      {
        v17 = v31;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
        v19 = v17;
      }
      else
      {
        v6 = v45[5];
        v62 = 3;
        *(_QWORD *)(v47 + v6) = v59;
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        v22 = &v56;
        v56 = 2;
        v7 = lazy protocol witness table accessor for type [String] and conformance <A> [A]();
        v8 = v30;
        v24 = v7;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v25 = v8;
        v26 = v8;
        if (!v8)
        {
          v9 = v45[6];
          v62 = 7;
          *(_QWORD *)(v47 + v9) = v57;
          v54 = 3;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v20 = 0;
          v21 = 0;
          v10 = v41;
          v11 = v48;
          v12 = v42;
          v13 = v45[7];
          v62 = 15;
          *(_QWORD *)(v47 + v13) = v55;
          (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v10);
          outlined init with copy of CompleteRegisterUserKeyInfoRequest.Response(v47, v35);
          __swift_destroy_boxed_opaque_existential_1(v44);
          return outlined destroy of CompleteRegisterUserKeyInfoRequest.Response(v47);
        }
        v16 = v26;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v41);
        v19 = v16;
      }
    }
  }
  v15[1] = v19;
  result = __swift_destroy_boxed_opaque_existential_1(v44);
  if ((v62 & 1) != 0)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v47, v36);
  if ((v62 & 2) != 0)
  {
    result = v47 + v45[5];
    outlined destroy of [UserKeyInfo]();
  }
  if ((v62 & 4) != 0)
  {
    result = v47 + v45[6];
    outlined destroy of [String]();
  }
  return result;
}

uint64_t outlined init with copy of CompleteRegisterUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v11;
  uint64_t v12;

  v2 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v9 = (int *)type metadata accessor for CompleteRegisterUserKeyInfoRequest.Response();
  v4 = v9[5];
  v5 = *(_QWORD *)(a1 + v4);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + v4) = v5;
  v7 = v9[6];
  v8 = *(_QWORD *)(a1 + v7);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + v7) = v8;
  v11 = v9[7];
  v12 = *(_QWORD *)(a1 + v11);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(a2 + v11) = v12;
  return result;
}

uint64_t outlined destroy of CompleteRegisterUserKeyInfoRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  type metadata accessor for CompleteRegisterUserKeyInfoRequest.Response();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

int *CompleteRegisterUserKeyInfoRequest.Response.init(gpkUserId:keyInfos:phoneNumber:email:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int *result;

  v5 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a5, a1);
  result = (int *)type metadata accessor for CompleteRegisterUserKeyInfoRequest.Response();
  *(_QWORD *)(a5 + result[5]) = a2;
  *(_QWORD *)(a5 + result[6]) = a3;
  *(_QWORD *)(a5 + result[7]) = a4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompleteRegisterUserKeyInfoRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CompleteRegisterUserKeyInfoRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteRegisterUserKeyInfoRequest.Response(uint64_t a1)
{
  return CompleteRegisterUserKeyInfoRequest.Response.encode(to:)(a1);
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.gpkUserId.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.keyNameSpace.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.encryptionPublicKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 40));
  return v2;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.encryptionPublicKeySignature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 48);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 56));
  return v2;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.verificationPublicKey.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 72));
  return v2;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.verificationPublicKeySignature.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  outlined copy of Data._Representation(v2, *(_QWORD *)(v0 + 88));
  return v2;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.keyVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 96);
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.keyAlgorithm.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.metadata.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.keyProtocolVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 136);
}

void static CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D4944E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D49457C
                                                                                       + dword_23D494644[a12]))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D49458C()
{
  uint64_t v1;

  return v1 == 0;
}

void CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D4946BC()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned __int8 v12;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1);
  swift_bridgeObjectRetain();
  v11 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v12 = 0;
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyNameSpace", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v10 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v12 = 1;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("encryptionPublicKey", 0x13uLL, 1);
  swift_bridgeObjectRetain();
  v9 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v12 = 2;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("encryptionPublicKeySignature", 0x1CuLL, 1);
  swift_bridgeObjectRetain();
  v8 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v12 = 3;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("verificationPublicKey", 0x15uLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v12 = 4;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("verificationPublicKeySignature", 0x1EuLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v12 = 5;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyVersion", 0xAuLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v12 = 6;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyAlgorithm", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v12 = 7;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("metadata", 8uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v12 = 8;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("keyProtocolVersion", 0x12uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v12 = 9;
    goto LABEL_22;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 10;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.init(intValue:)()
{
  return 10;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys, &type metadata for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys, &type metadata for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys, &type metadata for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys, &type metadata for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys, &type metadata for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.intValue.getter()
{
  return 0;
}

void CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D494F14()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("gpkUserId", 9uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys(char *a1)
{
  char v1;

  static CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys()
{
  return CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys(uint64_t a1)
{
  char *v1;

  CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys()
{
  char *v0;

  CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys()
{
  return CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteRegisterUserKeyInfoRequest.Body.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteRegisterUserKeyInfoRequest.Body.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[4];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  __int128 v71;
  char v72;
  __int128 v73;
  char v74;
  __int128 v75;
  char v76;
  __int128 v77;
  char v78;
  char v79;
  _QWORD v80[2];
  _BYTE v81[8];
  _BYTE v82[8];
  _BYTE v83[8];
  _BYTE v84[8];

  v52 = v80;
  v53 = a1;
  v80[1] = 0;
  v80[0] = 0;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteRegisterUserKeyInfoRequest.Body.CodingKeys>);
  v54 = *(_QWORD *)(v63 - 8);
  v55 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v53);
  v58 = (char *)v16 - v55;
  v3[1] = v2;
  *v3 = v1;
  v56 = v2[3];
  v57 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v56);
  lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v4 = v60;
  v61 = *v59;
  v62 = v59[1];
  swift_bridgeObjectRetain();
  v79 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  v64 = v4;
  v65 = v4;
  if (v4)
  {
    v23 = v65;
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v63);
    v24 = v23;
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = v64;
    v48 = v59[2];
    v49 = v59[3];
    swift_bridgeObjectRetain();
    v78 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v50 = v5;
    v51 = v5;
    if (v5)
    {
      v22 = v51;
      swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v63);
      v24 = v22;
    }
    else
    {
      swift_bridgeObjectRelease();
      v52[4] = *((_OWORD *)v59 + 2);
      outlined retain of Data((uint64_t)v84);
      v6 = v52[4];
      v44 = &v77;
      v77 = v6;
      v43 = &v76;
      v76 = 2;
      v7 = lazy protocol witness table accessor for type Data and conformance Data();
      v8 = v50;
      v45 = v7;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v46 = v8;
      v47 = v8;
      if (v8)
      {
        v21 = v47;
        outlined destroy of Data((uint64_t)&v77);
        result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v63);
        v24 = v21;
      }
      else
      {
        outlined destroy of Data((uint64_t)&v77);
        v52[3] = *((_OWORD *)v59 + 3);
        outlined retain of Data((uint64_t)v83);
        v9 = v46;
        v75 = v52[3];
        v74 = 3;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v41 = v9;
        v42 = v9;
        if (v9)
        {
          v20 = v42;
          outlined destroy of Data((uint64_t)&v75);
          result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v63);
          v24 = v20;
        }
        else
        {
          outlined destroy of Data((uint64_t)&v75);
          v52[2] = *((_OWORD *)v59 + 4);
          outlined retain of Data((uint64_t)v82);
          v10 = v41;
          v73 = v52[2];
          v72 = 4;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v39 = v10;
          v40 = v10;
          if (v10)
          {
            v19 = v40;
            outlined destroy of Data((uint64_t)&v73);
            result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v63);
            v24 = v19;
          }
          else
          {
            outlined destroy of Data((uint64_t)&v73);
            v52[1] = *((_OWORD *)v59 + 5);
            outlined retain of Data((uint64_t)v81);
            v11 = v39;
            v71 = v52[1];
            v70 = 5;
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            v37 = v11;
            v38 = v11;
            if (v11)
            {
              v18 = v38;
              outlined destroy of Data((uint64_t)&v71);
              result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v63);
              v24 = v18;
            }
            else
            {
              outlined destroy of Data((uint64_t)&v71);
              v12 = v37;
              v69 = 6;
              KeyedEncodingContainer.encode(_:forKey:)();
              v35 = v12;
              v36 = v12;
              if (v12)
              {
                v17 = v36;
                result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v63);
                v24 = v17;
              }
              else
              {
                v31 = v59[13];
                v32 = v59[14];
                swift_bridgeObjectRetain();
                v68 = 7;
                KeyedEncodingContainer.encode(_:forKey:)();
                v33 = 0;
                v34 = 0;
                swift_bridgeObjectRelease();
                v13 = v33;
                v27 = v59[15];
                v28 = v59[16];
                swift_bridgeObjectRetain();
                v67 = 8;
                KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
                v29 = v13;
                v30 = v13;
                if (v13)
                {
                  v16[2] = v30;
                  swift_bridgeObjectRelease();
                  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v63);
                }
                else
                {
                  swift_bridgeObjectRelease();
                  v14 = v29;
                  v66 = 9;
                  KeyedEncodingContainer.encode(_:forKey:)();
                  v25 = v14;
                  v26 = v14;
                  if (v14)
                    v16[1] = v26;
                  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v58, v63);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *CompleteRegisterUserKeyInfoRequest.Body.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *result;
  _QWORD v21[5];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[12];
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  _QWORD *v116;
  _QWORD v117[2];
  _QWORD v118[2];
  _QWORD v119[2];
  _QWORD v120[2];
  _QWORD v121[2];
  _QWORD v122[2];
  int v123;
  _QWORD v124[2];
  _QWORD v125[2];
  int v126;
  __int16 v127;

  v80 = a2;
  v81 = a1;
  v116 = 0;
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteRegisterUserKeyInfoRequest.Body.CodingKeys>);
  v83 = *(_QWORD *)(v82 - 8);
  v84 = (*(_QWORD *)(v83 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v81);
  v85 = (char *)v21 - v84;
  v127 = 0;
  v116 = v2;
  v87 = v2[3];
  v88 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v87);
  lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys();
  v3 = v86;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v89 = v3;
  v90 = v3;
  if (v3)
  {
    v27 = v90;
  }
  else
  {
    v115 = 0;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v76 = 0;
    v77 = v4;
    v78 = v5;
    v79 = 0;
    v71 = v5;
    v70 = v4;
    v127 = 1;
    swift_bridgeObjectRetain();
    v117[0] = v70;
    v117[1] = v71;
    v114 = 1;
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v72 = 0;
    v73 = v6;
    v74 = v7;
    v75 = 0;
    v65 = v7;
    v64 = v6;
    v127 = 3;
    swift_bridgeObjectRetain();
    v118[0] = v64;
    v118[1] = v65;
    v66 = &v111;
    v111 = 2;
    v8 = lazy protocol witness table accessor for type Data and conformance Data();
    v9 = v72;
    v67 = v8;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v68 = v9;
    v69 = v9;
    if (v9)
    {
      v26 = v69;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);
      v27 = v26;
    }
    else
    {
      v60 = v112;
      v61 = v113;
      v127 = 7;
      outlined copy of Data._Representation(v112, v113);
      v10 = v68;
      v119[0] = v60;
      v119[1] = v61;
      v108 = 3;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v62 = v10;
      v63 = v10;
      if (v10)
      {
        v25 = v63;
        outlined consume of Data._Representation(v60, v61);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);
        v27 = v25;
      }
      else
      {
        v56 = v109;
        v57 = v110;
        v127 = 15;
        outlined copy of Data._Representation(v109, v110);
        v11 = v62;
        v120[0] = v56;
        v120[1] = v57;
        v105 = 4;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v58 = v11;
        v59 = v11;
        if (v11)
        {
          v24 = v59;
          outlined consume of Data._Representation(v56, v57);
          outlined consume of Data._Representation(v60, v61);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);
          v27 = v24;
        }
        else
        {
          v52 = v106;
          v53 = v107;
          v127 = 31;
          outlined copy of Data._Representation(v106, v107);
          v12 = v58;
          v121[0] = v52;
          v121[1] = v53;
          v102 = 5;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v54 = v12;
          v55 = v12;
          if (v12)
          {
            v23 = v55;
            outlined consume of Data._Representation(v52, v53);
            outlined consume of Data._Representation(v56, v57);
            outlined consume of Data._Representation(v60, v61);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);
            v27 = v23;
          }
          else
          {
            v47 = v103;
            v48 = v104;
            v127 = 63;
            outlined copy of Data._Representation(v103, v104);
            v13 = v54;
            v122[0] = v47;
            v122[1] = v48;
            v101 = 6;
            v14 = KeyedDecodingContainer.decode(_:forKey:)();
            v49 = v13;
            v50 = v14;
            v51 = v13;
            if (!v13)
            {
              v42 = v50;
              v123 = v50;
              v100 = 7;
              v15 = KeyedDecodingContainer.decode(_:forKey:)();
              v43 = 0;
              v44 = v15;
              v45 = v16;
              v46 = 0;
              v37 = v16;
              v36 = v15;
              v127 = 191;
              swift_bridgeObjectRetain();
              v124[0] = v36;
              v124[1] = v37;
              v99 = 8;
              v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
              v38 = 0;
              v39 = v17;
              v40 = v18;
              v41 = 0;
              v32 = v18;
              v31 = v17;
              v127 = 447;
              swift_bridgeObjectRetain();
              v125[0] = v31;
              v125[1] = v32;
              v98 = 9;
              v19 = KeyedDecodingContainer.decode(_:forKey:)();
              v33 = 0;
              v34 = v19;
              v35 = 0;
              v28 = v19;
              v29 = v117;
              v126 = v19;
              (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);
              v30 = v91;
              v91[0] = v70;
              v91[1] = v71;
              v91[2] = v64;
              v91[3] = v65;
              v91[4] = v60;
              v91[5] = v61;
              v91[6] = v56;
              v91[7] = v57;
              v91[8] = v52;
              v91[9] = v53;
              v91[10] = v47;
              v91[11] = v48;
              v92 = v42;
              v93 = v36;
              v94 = v37;
              v95 = v31;
              v96 = v32;
              v97 = v28;
              outlined retain of CompleteRegisterUserKeyInfoRequest.Body(v91);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of Data._Representation(v47, v48);
              outlined consume of Data._Representation(v52, v53);
              outlined consume of Data._Representation(v56, v57);
              outlined consume of Data._Representation(v60, v61);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1(v81);
              outlined destroy of CompleteRegisterUserKeyInfoRequest.Body((uint64_t)v29);
              return memcpy(v80, v30, 0x8CuLL);
            }
            v22 = v51;
            outlined consume of Data._Representation(v47, v48);
            outlined consume of Data._Representation(v52, v53);
            outlined consume of Data._Representation(v56, v57);
            outlined consume of Data._Representation(v60, v61);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);
            v27 = v22;
          }
        }
      }
    }
  }
  v21[1] = v27;
  result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1(v81);
  if ((v127 & 1) != 0)
  {
    result = v117;
    outlined destroy of String();
  }
  if ((v127 & 2) != 0)
  {
    result = v118;
    outlined destroy of String();
  }
  if ((v127 & 4) != 0)
  {
    result = v119;
    outlined destroy of Data((uint64_t)v119);
  }
  if ((v127 & 8) != 0)
  {
    result = v120;
    outlined destroy of Data((uint64_t)v120);
  }
  if ((v127 & 0x10) != 0)
  {
    result = v121;
    outlined destroy of Data((uint64_t)v121);
  }
  if ((v127 & 0x20) != 0)
  {
    result = v122;
    outlined destroy of Data((uint64_t)v122);
  }
  if ((v127 & 0x80) != 0)
  {
    result = v124;
    outlined destroy of String();
  }
  if ((v127 & 0x100) != 0)
  {
    result = v125;
    outlined destroy of String?();
  }
  return result;
}

_QWORD *outlined retain of CompleteRegisterUserKeyInfoRequest.Body(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v2, v3);
  outlined copy of Data._Representation(v4, v5);
  outlined copy of Data._Representation(v6, v7);
  outlined copy of Data._Representation(v8, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of CompleteRegisterUserKeyInfoRequest.Body(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void *CompleteRegisterUserKeyInfoRequest.Body.init(gpkUserId:keyNameSpace:encryptionPublicKey:encryptionPublicKeySignature:verificationPublicKey:verificationPublicKeySignature:keyVersion:keyAlgorithm:metadata:keyProtocolVersion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  _QWORD __src[18];

  __src[0] = a1;
  __src[1] = a2;
  __src[2] = a3;
  __src[3] = a4;
  __src[4] = a5;
  __src[5] = a6;
  __src[6] = a7;
  __src[7] = a8;
  __src[8] = a10;
  __src[9] = a11;
  __src[10] = a12;
  __src[11] = a13;
  LODWORD(__src[12]) = a14;
  __src[13] = a15;
  __src[14] = a16;
  __src[15] = a17;
  __src[16] = a18;
  LODWORD(__src[17]) = a19;
  return memcpy(a9, __src, 0x8CuLL);
}

_QWORD *protocol witness for Decodable.init(from:) in conformance CompleteRegisterUserKeyInfoRequest.Body@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  _BYTE __src[144];

  result = CompleteRegisterUserKeyInfoRequest.Body.init(from:)(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x8CuLL);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteRegisterUserKeyInfoRequest.Body(uint64_t a1)
{
  const void *v1;
  _BYTE __dst[140];

  memcpy(__dst, v1, sizeof(__dst));
  return CompleteRegisterUserKeyInfoRequest.Body.encode(to:)(a1);
}

void variable initialization expression of CompleteRegisterUserKeyInfoRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t CompleteRegisterUserKeyInfoRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t CompleteRegisterUserKeyInfoRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*CompleteRegisterUserKeyInfoRequest.bodyContent.modify())()
{
  return CompleteRegisterUserKeyInfoRequest.bodyContent.modify;
}

uint64_t CompleteRegisterUserKeyInfoRequest.init(userID:encryptionPublicKey:encryptionPublicKeySignature:verificationPublicKey:verificationPublicKeySignature:keyVersion:keyAlgorithm:metadata:keyProtocolVersion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[144];
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  _QWORD v94[18];

  v40 = a9;
  v41 = a1;
  v57 = a2;
  v58 = a3;
  v59 = a4;
  v60 = a5;
  v43 = a6;
  v45 = a7;
  v46 = a8;
  v47 = a10;
  v48 = a11;
  v49 = a12;
  v50 = a13;
  v51 = a14;
  v52 = a15;
  v53 = a16;
  v92 = 0u;
  v93 = 0u;
  v91 = 0;
  v89 = 0;
  v90 = 0;
  v87 = 0;
  v88 = 0;
  v85 = 0;
  v86 = 0;
  v83 = 0;
  v84 = 0;
  v82 = 0;
  v80 = 0;
  v81 = 0;
  v78 = 0;
  v79 = 0;
  v77 = 0;
  v76 = 0;
  v62 = 0;
  v64 = type metadata accessor for DictionaryEncoder.DataEncodingStrategy();
  v63 = *(_QWORD *)(v64 - 8);
  v42 = (*(_QWORD *)(v63 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v64);
  v65 = (char *)&v37 - v42;
  v91 = a1;
  v89 = v17;
  v90 = v18;
  v87 = v19;
  v88 = v20;
  v85 = v21;
  v86 = v22;
  v83 = v23;
  v84 = v24;
  v82 = v25;
  v80 = v26;
  v81 = a13;
  v78 = a14;
  v79 = a15;
  v77 = v27;
  v92 = 0uLL;
  v93 = 0uLL;
  v44 = GPKUserID.description.getter();
  v54 = v28;
  v29 = (uint64_t *)HTTPBodyValue.keyNameSpaceValue.unsafeMutableAddressor();
  v55 = *v29;
  v56 = v29[1];
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v57, v58);
  outlined copy of Data._Representation(v59, v60);
  outlined copy of Data._Representation(v43, v45);
  outlined copy of Data._Representation(v46, v47);
  v30 = v43;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v61 = &v36;
  v67 = v94;
  CompleteRegisterUserKeyInfoRequest.Body.init(gpkUserId:keyNameSpace:encryptionPublicKey:encryptionPublicKeySignature:verificationPublicKey:verificationPublicKeySignature:keyVersion:keyAlgorithm:metadata:keyProtocolVersion:)(v44, v54, v55, v56, v57, v58, v59, v60, v94, v30, v45, v46, v47, v48, v49, v50, v51, v52, v53);
  type metadata accessor for DictionaryEncoder();
  v66 = DictionaryEncoder.__allocating_init()();
  v76 = v66;
  (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v65, *MEMORY[0x24BDFC528], v64);
  dispatch thunk of DictionaryEncoder.dataEncodingStrategy.setter();
  v69 = v73;
  memcpy(v73, v67, 0x8CuLL);
  lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Body and conformance CompleteRegisterUserKeyInfoRequest.Body();
  v31 = v68;
  v32 = dispatch thunk of DictionaryEncoder.encode<A>(_:)();
  v70 = v31;
  v71 = v32;
  v72 = v31;
  if (v31)
  {
    v37 = v72;
    swift_release();
    outlined release of CompleteRegisterUserKeyInfoRequest.Body(v94);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v46, v47);
    outlined consume of Data._Representation(v43, v45);
    outlined consume of Data._Representation(v59, v60);
    outlined consume of Data._Representation(v57, v58);
    v35 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v41);
    return outlined destroy of CompleteRegisterUserKeyInfoRequest((uint64_t)&v92);
  }
  else
  {
    v38 = v71;
    v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(_QWORD *)&v74 = v38;
    v39 = &v92;
    outlined assign with take of Any?(&v74, (uint64_t)&v92);
    swift_release();
    outlined release of CompleteRegisterUserKeyInfoRequest.Body(v94);
    outlined init with copy of CompleteRegisterUserKeyInfoRequest((uint64_t)v39, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v46, v47);
    outlined consume of Data._Representation(v43, v45);
    outlined consume of Data._Representation(v59, v60);
    outlined consume of Data._Representation(v57, v58);
    v33 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v41);
    return outlined destroy of CompleteRegisterUserKeyInfoRequest((uint64_t)v39);
  }
}

unint64_t lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Body and conformance CompleteRegisterUserKeyInfoRequest.Body()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body and conformance CompleteRegisterUserKeyInfoRequest.Body;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body and conformance CompleteRegisterUserKeyInfoRequest.Body)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest.Body, &type metadata for CompleteRegisterUserKeyInfoRequest.Body);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Body and conformance CompleteRegisterUserKeyInfoRequest.Body);
    return v0;
  }
  return v2;
}

_QWORD *outlined release of CompleteRegisterUserKeyInfoRequest.Body(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v2, v3);
  outlined consume of Data._Representation(v4, v5);
  outlined consume of Data._Representation(v6, v7);
  outlined consume of Data._Representation(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined init with copy of CompleteRegisterUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t CompleteRegisterUserKeyInfoRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeRegisterUserKeyInfo.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in CompleteRegisterUserKeyInfoRequest()
{
  return lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Response and conformance CompleteRegisterUserKeyInfoRequest.Response();
}

unint64_t lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Response and conformance CompleteRegisterUserKeyInfoRequest.Response()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response and conformance CompleteRegisterUserKeyInfoRequest.Response;
  if (!lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response and conformance CompleteRegisterUserKeyInfoRequest.Response)
  {
    v0 = type metadata accessor for CompleteRegisterUserKeyInfoRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteRegisterUserKeyInfoRequest.Response, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteRegisterUserKeyInfoRequest.Response and conformance CompleteRegisterUserKeyInfoRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance CompleteRegisterUserKeyInfoRequest()
{
  return CompleteRegisterUserKeyInfoRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance CompleteRegisterUserKeyInfoRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance CompleteRegisterUserKeyInfoRequest@<X0>(uint64_t a1@<X8>)
{
  return CompleteRegisterUserKeyInfoRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance CompleteRegisterUserKeyInfoRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for CompleteRegisterUserKeyInfoRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CompleteRegisterUserKeyInfoRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for CompleteRegisterUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for CompleteRegisterUserKeyInfoRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for CompleteRegisterUserKeyInfoRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteRegisterUserKeyInfoRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CompleteRegisterUserKeyInfoRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompleteRegisterUserKeyInfoRequest()
{
  return &type metadata for CompleteRegisterUserKeyInfoRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteRegisterUserKeyInfoRequest.Response(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v16;

  v16 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v16 & 0x20000) != 0)
  {
    v11 = *a2;
    swift_retain();
    *a1 = v11;
    return *a1 + ((v16 + 16) & ~(unint64_t)v16);
  }
  else
  {
    v3 = type metadata accessor for GPKUserID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v5 = a3[5];
    v6 = *(uint64_t *)((char *)a2 + v5);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v5) = v6;
    v7 = a3[6];
    v8 = *(uint64_t *)((char *)a2 + v7);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v7) = v8;
    v9 = a3[7];
    v10 = *(uint64_t *)((char *)a2 + v9);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v9) = v10;
    return (unint64_t)a1;
  }
}

uint64_t destroy for CompleteRegisterUserKeyInfoRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CompleteRegisterUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v5 = a3[5];
  v6 = *(_QWORD *)(a2 + v5);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v5) = v6;
  v7 = a3[6];
  v8 = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v7) = v8;
  v12 = a3[7];
  v13 = *(_QWORD *)(a2 + v12);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + v12) = v13;
  return result;
}

uint64_t assignWithCopy for CompleteRegisterUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v5 = a3[5];
  v6 = *(_QWORD *)(a2 + v5);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v5) = v6;
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRelease();
  v11 = a3[7];
  v12 = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CompleteRegisterUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = a1;
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return result;
}

uint64_t assignWithTake for CompleteRegisterUserKeyInfoRequest.Response(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;

  v3 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteRegisterUserKeyInfoRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D497C4C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GPKUserID();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20)) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for CompleteRegisterUserKeyInfoRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D497D44(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKUserID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for CompleteRegisterUserKeyInfoRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return &type metadata for CompleteRegisterUserKeyInfoRequest.Response.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for CompleteRegisterUserKeyInfoRequest.Body(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CompleteRegisterUserKeyInfoRequest.Body(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CompleteRegisterUserKeyInfoRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v5, v6);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  outlined copy of Data._Representation(v7, v8);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  outlined copy of Data._Representation(v9, v10);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  outlined copy of Data._Representation(v11, v12);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v13 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 112) = v13;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 128) = v15;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return result;
}

uint64_t assignWithCopy for CompleteRegisterUserKeyInfoRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 24) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  outlined copy of Data._Representation(v13, v14);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v14;
  outlined consume of Data._Representation(v2, v3);
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  outlined copy of Data._Representation(v15, v16);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v16;
  outlined consume of Data._Representation(v4, v5);
  v17 = *(_QWORD *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  outlined copy of Data._Representation(v17, v18);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = v18;
  outlined consume of Data._Representation(v6, v7);
  v19 = *(_QWORD *)(a2 + 80);
  v20 = *(_QWORD *)(a2 + 88);
  outlined copy of Data._Representation(v19, v20);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v19;
  *(_QWORD *)(a1 + 88) = v20;
  outlined consume of Data._Representation(v8, v9);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v21 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 112) = v21;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v22 = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 128) = v22;
  swift_bridgeObjectRelease();
  result = a1;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy140_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x8CuLL);
}

uint64_t assignWithTake for CompleteRegisterUserKeyInfoRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a2 + 40);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  outlined consume of Data._Representation(v3, v4);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  outlined consume of Data._Representation(v9, v10);
  v11 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  outlined consume of Data._Representation(v12, v13);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  result = a1;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return result;
}

uint64_t getEnumTagSinglePayload for CompleteRegisterUserKeyInfoRequest.Body(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 140))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 8)))
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CompleteRegisterUserKeyInfoRequest.Body(uint64_t result, int a2, int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 140);
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 128) = 0;
    *(_DWORD *)(result + 136) = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      *(_QWORD *)(result + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for CompleteRegisterUserKeyInfoRequest.Body()
{
  return &type metadata for CompleteRegisterUserKeyInfoRequest.Body;
}

uint64_t getEnumTagSinglePayload for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF6)
      goto LABEL_15;
    v7 = ((a2 + 9) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 246;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 10;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF6)
  {
    v5 = ((a3 + 9) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF6)
  {
    v4 = ((a2 - 247) >> 8) + 1;
    *result = a2 + 9;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 9;
  }
  return result;
}

uint64_t getEnumTag for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys()
{
  return &type metadata for CompleteRegisterUserKeyInfoRequest.Body.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteRegisterUserKeyInfoRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteRegisterUserKeyInfoRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteRegisterUserKeyInfoRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Body.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteRegisterUserKeyInfoRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteRegisterUserKeyInfoRequest.Response.CodingKeys and conformance CompleteRegisterUserKeyInfoRequest.Response.CodingKeys();
}

uint64_t GroupCryptoBlob.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupCryptoBlob(version: ", 0x19uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v0);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" membership: ", 0xDuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : GPKMemberRole]);
  lazy protocol witness table accessor for type [GPKUserID : GPKMemberRole] and conformance [A : B]();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [GPKUserID : GPKMemberRole]();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

uint64_t GroupCryptoBlob.version.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t GroupCryptoBlob.membership.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t GroupCryptoBlob.init(version:membership:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupCryptoBlob()
{
  return GroupCryptoBlob.description.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for GroupCryptoBlob(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t destroy for GroupCryptoBlob()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GroupCryptoBlob(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t assignWithCopy for GroupCryptoBlob(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithTake for GroupCryptoBlob(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
}

uint64_t getEnumTagSinglePayload for GroupCryptoBlob(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    {
      v4 = *(_OWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (*(_QWORD *)(a1 + 8) < 0x100000000uLL)
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupCryptoBlob(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_OWORD *)result = a2 + 0x80000000;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 16) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 8) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupCryptoBlob()
{
  return &type metadata for GroupCryptoBlob;
}

uint64_t GroupDeletion.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Client(v1, a1);
}

uint64_t GroupDeletion.groupStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupStore(v1 + 40, a1);
}

_QWORD *GroupDeletion.groupService.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupService((_QWORD *)(v1 + 80), a1);
}

uint64_t GroupDeletion.peerMessagingService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PeerMessagingServiceProviding(v1 + 272, a1);
}

uint64_t GroupDeletion.broadcaster.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 312);
  swift_retain();
  return v2;
}

uint64_t GroupDeletion.metrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Metrics(v1 + 320, a1);
}

uint64_t GroupDeletion.delete(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[99] = v1;
  v2[98] = a1;
  v2[94] = v2;
  v2[95] = 0;
  v2[96] = 0;
  v2[95] = a1;
  v2[96] = v1;
  return swift_task_switch();
}

uint64_t GroupDeletion.delete(with:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = v0[99];
  v5 = v0[98];
  v0[94] = v0;
  outlined init with copy of Metrics(v4 + 320, (uint64_t)(v0 + 68));
  outlined init with copy of GroupDeletion(v4, (uint64_t)(v0 + 2));
  swift_retain();
  v7 = swift_task_alloc();
  v0[100] = v7;
  *(_QWORD *)(v7 + 16) = v0 + 2;
  *(_QWORD *)(v7 + 24) = v5;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 808) = v1;
  v2 = type metadata accessor for GPKGroup();
  *v1 = *(_QWORD *)(v6 + 752);
  v1[1] = GroupDeletion.delete(with:);
  return Metrics.callAsFunction<A>(_:worker:)(v6 + 776, 7, (uint64_t)&async function pointer to partial apply for closure #1 in GroupDeletion.delete(with:), v7, v2, (uint64_t)&protocol witness table for GPKGroup);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v2 = *v1;
  v4 = *v1 + 544;
  v5 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 752) = *v1;
  *(_QWORD *)(v2 + 816) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    outlined destroy of GroupDeletion(v5);
    swift_release();
    outlined destroy of Metrics(v4);
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 752) = v0;
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 752) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 752) = v0;
  swift_task_dealloc();
  outlined destroy of GroupDeletion((_QWORD *)(v0 + 16));
  swift_release();
  outlined destroy of Metrics(v0 + 544);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 752) + 8))();
}

uint64_t closure #1 in GroupDeletion.delete(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v3 + 240) = a3;
  *(_QWORD *)(v3 + 232) = a2;
  *(_QWORD *)(v3 + 224) = a1;
  *(_QWORD *)(v3 + 184) = v3;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 456) = 0;
  v4 = type metadata accessor for GPKGroup.JoinState();
  *(_QWORD *)(v3 + 248) = v4;
  *(_QWORD *)(v3 + 256) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 264) = swift_task_alloc();
  *(_QWORD *)(v3 + 272) = swift_task_alloc();
  v5 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v3 + 280) = v5;
  *(_QWORD *)(v3 + 288) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 296) = swift_task_alloc();
  v6 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v3 + 304) = v6;
  *(_QWORD *)(v3 + 312) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 320) = swift_task_alloc();
  v7 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v3 + 328) = v7;
  *(_QWORD *)(v3 + 336) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 344) = swift_task_alloc();
  *(_QWORD *)(v3 + 352) = swift_task_alloc();
  *(_QWORD *)(v3 + 360) = swift_task_alloc();
  *(_QWORD *)(v3 + 192) = a2;
  *(_QWORD *)(v3 + 200) = a3;
  return swift_task_switch();
}

uint64_t closure #1 in GroupDeletion.delete(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t);

  v1 = v0[29];
  v0[23] = v0;
  outlined init with copy of GroupStore(v1 + 40, (uint64_t)(v0 + 2));
  v5 = v0[5];
  v6 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v5);
  GPKDeleteGroupRequest.groupID.getter();
  v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 16) + **(int **)(v6 + 16));
  v2 = (_QWORD *)swift_task_alloc();
  v4[46] = v2;
  *v2 = v4[23];
  v2[1] = closure #1 in GroupDeletion.delete(with:);
  return v7(v4[45], v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  char v60;
  uint64_t v61;

  v1 = *(_QWORD *)(v0 + 376);
  *(_QWORD *)(v0 + 184) = v0;
  if (v1)
  {
    v54 = *(_QWORD *)(v61 + 376);
    v50 = *(void (**)(uint64_t, uint64_t))(v61 + 392);
    v48 = *(_QWORD *)(v61 + 352);
    v49 = *(_QWORD *)(v61 + 328);
    v52 = *(_QWORD *)(v61 + 320);
    v51 = *(_QWORD *)(v61 + 312);
    v53 = *(_QWORD *)(v61 + 304);
    v57 = *(_QWORD *)(v61 + 272);
    v56 = *(_QWORD *)(v61 + 264);
    v55 = *(_QWORD *)(v61 + 256);
    v58 = *(_QWORD *)(v61 + 248);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v61 + 208) = v54;
    __swift_destroy_boxed_opaque_existential_1(v61 + 16);
    *(_QWORD *)(v61 + 152) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v61 + 160) = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Found a group with identifier: ", 0x1FuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    dispatch thunk of GPKGroup.groupID.getter();
    swift_release();
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v50(v48, v49);
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", 2uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v61 + 216) = v54;
    type metadata accessor for GPKGroup();
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    swift_release();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v52);
    gpklog(_:type:fileID:line:subsystem:)();
    v6 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
    *(_QWORD *)(v61 + 400) = v6;
    v6(v52, v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    dispatch thunk of GPKGroup.joinState.getter();
    swift_release();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v55 + 104))(v56, *MEMORY[0x24BE3E4D8], v58);
    lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
    v60 = dispatch thunk of static Equatable.== infix(_:_:)();
    v59 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
    v59(v56, v58);
    v59(v57, v58);
    if ((v60 & 1) != 0)
    {
      swift_release();
      outlined init with copy of Client(*(_QWORD *)(v61 + 232), v61 + 56);
      v36 = *(_QWORD *)(v61 + 80);
      v35 = *(_QWORD *)(v61 + 88);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v61 + 56), v36);
      v37 = (*(uint64_t (**)(uint64_t))(v35 + 24))(v36);
      *(_BYTE *)(v61 + 456) = v37 & 1;
      __swift_destroy_boxed_opaque_existential_1(v61 + 56);
      v16 = dispatch thunk of GPKDeleteGroupRequest.deleteLocalCopy.getter();
      if ((v16 & 1) != 0 && (v37 & 1) != 0)
      {
        outlined init with copy of GroupStore(*(_QWORD *)(v61 + 232) + 40, v61 + 96);
        v32 = *(_QWORD *)(v61 + 120);
        v33 = *(_QWORD *)(v61 + 128);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v61 + 96), v32);
        swift_retain();
        dispatch thunk of GPKGroup.groupID.getter();
        swift_release();
        v34 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 + 56) + **(int **)(v33 + 56));
        v17 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v61 + 440) = v17;
        *v17 = *(_QWORD *)(v61 + 184);
        v17[1] = closure #1 in GroupDeletion.delete(with:);
        return v34(*(_QWORD *)(v61 + 344), v32, v33);
      }
      else
      {
        v24 = *(void (**)(uint64_t, uint64_t))(v61 + 400);
        v22 = *(_QWORD *)(v61 + 320);
        v23 = *(_QWORD *)(v61 + 304);
        *(_QWORD *)(v61 + 168) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v61 + 176) = v18;
        v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group is not deleted from local database. deleteLocalCopy: ", 0x3BuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v19);
        swift_bridgeObjectRelease();
        *(_BYTE *)(v61 + 457) = dispatch thunk of GPKDeleteGroupRequest.deleteLocalCopy.getter() & 1;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", isOwnerProcess: ", 0x12uLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v20);
        swift_bridgeObjectRelease();
        *(_BYTE *)(v61 + 458) = v37 & 1;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v21);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v22);
        gpklog(_:type:fileID:line:subsystem:)();
        v24(v22, v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v28 = *(void (**)(uint64_t, uint64_t))(v61 + 400);
        v26 = *(void (**)(uint64_t, uint64_t))(v61 + 392);
        v30 = *(_QWORD *)(v61 + 352);
        v25 = *(_QWORD *)(v61 + 328);
        v31 = *(_QWORD *)(v61 + 320);
        v27 = *(_QWORD *)(v61 + 304);
        v29 = *(_QWORD **)(v61 + 224);
        swift_retain();
        swift_retain();
        dispatch thunk of GPKGroup.groupID.getter();
        swift_release();
        ClientMessageBroadcaster.groupDeleted(groupID:)(v30);
        v26(v30, v25);
        swift_release();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Delete message broad casted to subscribers", 0x2AuLL, 1);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v31);
        gpklog(_:type:fileID:line:subsystem:)();
        v28(v31, v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *v29 = *(_QWORD *)(v61 + 208);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(void))(*(_QWORD *)(v61 + 184) + 8))();
      }
    }
    else
    {
      v15 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v61 + 408) = v15;
      *v15 = *(_QWORD *)(v61 + 184);
      v15[1] = closure #1 in GroupDeletion.delete(with:);
      return GroupDeletion.destroy(group:)(v54);
    }
  }
  else
  {
    v44 = *(void (**)(uint64_t, uint64_t))(v61 + 392);
    v45 = *(_QWORD *)(v61 + 352);
    v46 = *(_QWORD *)(v61 + 328);
    v39 = *(_QWORD *)(v61 + 320);
    v38 = *(_QWORD *)(v61 + 312);
    v40 = *(_QWORD *)(v61 + 304);
    v47 = *(_QWORD *)(v61 + 296);
    v41 = *(_QWORD *)(v61 + 288);
    v42 = *(_QWORD *)(v61 + 280);
    __swift_destroy_boxed_opaque_existential_1(v61 + 16);
    *(_QWORD *)(v61 + 136) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v61 + 144) = v7;
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Couldn't find a group with identifier: ", 0x27uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    GPKDeleteGroupRequest.groupID.getter();
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v44(v45, v46);
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v39);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v41 + 104))(v47, *MEMORY[0x24BE3DCF8], v42);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
    _allocateUninitializedArray<A>(_:)();
    v43 = v10;
    *v10 = static InternalErrorKey.groupID.getter();
    v43[1] = v11;
    GPKDeleteGroupRequest.groupID.getter();
    v12 = GPKGroupID.hexString.getter();
    v43[5] = MEMORY[0x24BEE0D00];
    v43[2] = v12;
    v43[3] = v13;
    v44(v45, v46);
    _finalizeUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v61 + 184) + 8))();
  }
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = v0[52];
  v0[23] = v0;
  swift_retain();
  v0[26] = v3;
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v4[54] = v1;
  *v1 = v4[23];
  v1[1] = closure #1 in GroupDeletion.delete(with:);
  return GroupDeletion.sendDeleteGroupNotification(group:)(v4[52]);
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 184) = *(_QWORD *)v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char v26;

  v23 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  v21 = *(_QWORD *)(v0 + 320);
  v22 = *(_QWORD *)(v0 + 304);
  *(_QWORD *)(v0 + 184) = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Notification sent to group members", 0x22uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
  gpklog(_:type:fileID:line:subsystem:)();
  v23(v21, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of Client(*(_QWORD *)(v0 + 232), v0 + 56);
  v25 = *(_QWORD *)(v0 + 80);
  v24 = *(_QWORD *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v25);
  v26 = (*(uint64_t (**)(uint64_t))(v24 + 24))(v25);
  *(_BYTE *)(v0 + 456) = v26 & 1;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  if ((dispatch thunk of GPKDeleteGroupRequest.deleteLocalCopy.getter() & 1) != 0 && (v26 & 1) != 0)
  {
    outlined init with copy of GroupStore(*(_QWORD *)(v20 + 232) + 40, v20 + 96);
    v17 = *(_QWORD *)(v20 + 120);
    v18 = *(_QWORD *)(v20 + 128);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v20 + 96), v17);
    swift_retain();
    dispatch thunk of GPKGroup.groupID.getter();
    swift_release();
    v19 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 + 56) + **(int **)(v18 + 56));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v20 + 440) = v1;
    *v1 = *(_QWORD *)(v20 + 184);
    v1[1] = closure #1 in GroupDeletion.delete(with:);
    return v19(*(_QWORD *)(v20 + 344), v17, v18);
  }
  else
  {
    v9 = *(void (**)(uint64_t, uint64_t))(v20 + 400);
    v7 = *(_QWORD *)(v20 + 320);
    v8 = *(_QWORD *)(v20 + 304);
    *(_QWORD *)(v20 + 168) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v20 + 176) = v3;
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group is not deleted from local database. deleteLocalCopy: ", 0x3BuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v20 + 457) = dispatch thunk of GPKDeleteGroupRequest.deleteLocalCopy.getter() & 1;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", isOwnerProcess: ", 0x12uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v20 + 458) = v26 & 1;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
    gpklog(_:type:fileID:line:subsystem:)();
    v9(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = *(void (**)(uint64_t, uint64_t))(v20 + 400);
    v11 = *(void (**)(uint64_t, uint64_t))(v20 + 392);
    v15 = *(_QWORD *)(v20 + 352);
    v10 = *(_QWORD *)(v20 + 328);
    v16 = *(_QWORD *)(v20 + 320);
    v12 = *(_QWORD *)(v20 + 304);
    v14 = *(_QWORD **)(v20 + 224);
    swift_retain();
    swift_retain();
    dispatch thunk of GPKGroup.groupID.getter();
    swift_release();
    ClientMessageBroadcaster.groupDeleted(groupID:)(v15);
    v11(v15, v10);
    swift_release();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Delete message broad casted to subscribers", 0x2AuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v16);
    gpklog(_:type:fileID:line:subsystem:)();
    v13(v16, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v14 = *(_QWORD *)(v20 + 208);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v20 + 184) + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 184) = *v1;
  v2 += 184;
  v4 = v2 - 168;
  *(_QWORD *)(v2 + 264) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4 + 376))(*(_QWORD *)(v4 + 328), *(_QWORD *)(v4 + 312));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (void (*)(uint64_t, uint64_t))v0[50];
  v2 = v0[40];
  v3 = v0[38];
  v0[23] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group Deleted from local database", 0x21uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v2);
  gpklog(_:type:fileID:line:subsystem:)();
  v4(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = (void (*)(uint64_t, uint64_t))v0[50];
  v6 = (void (*)(uint64_t, uint64_t))v0[49];
  v10 = v0[44];
  v5 = v0[41];
  v11 = v0[40];
  v7 = v0[38];
  v9 = (_QWORD *)v0[28];
  swift_retain();
  swift_retain();
  dispatch thunk of GPKGroup.groupID.getter();
  swift_release();
  ClientMessageBroadcaster.groupDeleted(groupID:)(v10);
  v6(v10, v5);
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Delete message broad casted to subscribers", 0x2AuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
  gpklog(_:type:fileID:line:subsystem:)();
  v8(v11, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v9 = v0[26];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[23] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[45];
  v2 = v0[42];
  v3 = v0[41];
  v0[23] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[23] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 184) = v0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 184) + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = (void (*)(uint64_t, uint64_t))v0[49];
  v2 = v0[43];
  v3 = v0[41];
  v0[23] = v0;
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[23] + 8))();
}

uint64_t closure #1 in GroupDeletion.delete(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v8;

  v3 = (_QWORD *)*v2;
  v3[23] = *v2;
  v3 += 23;
  v8 = v3 - 21;
  v3[24] = a1;
  v3[25] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = v8[43];
    v5 = v8[39];
    v6 = *(void (**)(uint64_t, uint64_t))(v8[40] + 8);
    v8[47] = v6;
    v6(v4, v5);
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[23] = *v2;
  v3 += 23;
  v3[29] = a1;
  v3[30] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

uint64_t outlined init with copy of GroupDeletion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(void))(v2 - 8))();
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 64) = v3;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2 + 40, a1 + 40);
  v4 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 104) = v4;
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a1 + 112);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2 + 80, a1 + 80);
  v5 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a2 + 144) = v5;
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 152);
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a2 + 120, a1 + 120);
  v6 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a2 + 184) = v6;
  *(_QWORD *)(a2 + 192) = *(_QWORD *)(a1 + 192);
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a2 + 160, a1 + 160);
  v7 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a2 + 224) = v7;
  *(_QWORD *)(a2 + 232) = *(_QWORD *)(a1 + 232);
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a2 + 200, a1 + 200);
  v17 = *(_QWORD *)(a1 + 240);
  swift_unknownObjectRetain();
  v8 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a2 + 240) = v17;
  *(_QWORD *)(a2 + 248) = v8;
  v18 = *(_QWORD *)(a1 + 256);
  v19 = *(_QWORD *)(a1 + 264);
  outlined copy of Data._Representation(v18, v19);
  *(_QWORD *)(a2 + 256) = v18;
  *(_QWORD *)(a2 + 264) = v19;
  v9 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a2 + 296) = v9;
  *(_QWORD *)(a2 + 304) = *(_QWORD *)(a1 + 304);
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a2 + 272, a1 + 272);
  v20 = *(_QWORD *)(a1 + 312);
  swift_retain();
  *(_QWORD *)(a2 + 312) = v20;
  v10 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a2 + 344) = v10;
  *(_QWORD *)(a2 + 352) = *(_QWORD *)(a1 + 352);
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a2 + 320, a1 + 320);
  v11 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a2 + 384) = v11;
  *(_QWORD *)(a2 + 392) = *(_QWORD *)(a1 + 392);
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a2 + 360, a1 + 360);
  if (*(_QWORD *)(a1 + 424))
  {
    v12 = *(_QWORD *)(a1 + 424);
    *(_QWORD *)(a2 + 424) = v12;
    *(_QWORD *)(a2 + 432) = *(_QWORD *)(a1 + 432);
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a2 + 400, a1 + 400);
  }
  else
  {
    memcpy((void *)(a2 + 400), (const void *)(a1 + 400), 0x28uLL);
  }
  *(_QWORD *)(a2 + 440) = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a2 + 448) = *(_QWORD *)(a1 + 448);
  *(_BYTE *)(a2 + 456) = *(_BYTE *)(a1 + 456);
  *(_QWORD *)(a2 + 464) = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a2 + 472) = *(_QWORD *)(a1 + 472);
  v14 = *(_QWORD *)(a1 + 480);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 480) = v14;
  *(_QWORD *)(a2 + 488) = *(_QWORD *)(a1 + 488);
  v15 = *(_QWORD *)(a1 + 496);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + 496) = v15;
  *(_QWORD *)(a2 + 504) = *(_QWORD *)(a1 + 504);
  v16 = *(_QWORD *)(a1 + 512);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(a2 + 512) = v16;
  *(_WORD *)(a2 + 520) = *(_WORD *)(a1 + 520);
  return result;
}

uint64_t partial apply for closure #1 in GroupDeletion.delete(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in GroupDeletion.delete(with:);
  return closure #1 in GroupDeletion.delete(with:)(a1, v5, v6);
}

uint64_t partial apply for closure #1 in GroupDeletion.delete(with:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

_QWORD *outlined destroy of GroupDeletion(_QWORD *a1)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 10));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 15));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 20));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 25));
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(a1[32], a1[33]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 34));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 40));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 45));
  if (a1[53])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 50));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t GroupDeletion.destroy(group:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[43] = v1;
  v2[42] = a1;
  v2[35] = v2;
  v2[36] = 0;
  v2[37] = 0;
  v2[38] = 0;
  v2[41] = 0;
  v3 = type metadata accessor for InternalErrorCode();
  v2[44] = v3;
  v2[45] = *(_QWORD *)(v3 - 8);
  v2[46] = swift_task_alloc();
  v4 = type metadata accessor for GPKGroupID();
  v2[47] = v4;
  v2[48] = *(_QWORD *)(v4 - 8);
  v2[49] = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  v2[50] = v5;
  v2[51] = *(_QWORD *)(v5 - 8);
  v2[52] = swift_task_alloc();
  v6 = type metadata accessor for GPKMemberRole();
  v2[53] = v6;
  v2[54] = *(_QWORD *)(v6 - 8);
  v2[55] = swift_task_alloc();
  v2[56] = swift_task_alloc();
  v7 = type metadata accessor for GPKGroup.JoinState();
  v2[57] = v7;
  v2[58] = *(_QWORD *)(v7 - 8);
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  v2[36] = a1;
  v2[37] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[35] = *v2;
  v3[70] = a1;
  v3[71] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GroupDeletion.destroy(group:)()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  char v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  char v45;

  v42 = v0[60];
  v41 = v0[59];
  v40 = v0[58];
  v43 = v0[57];
  v0[35] = v0;
  dispatch thunk of GPKGroup.joinState.getter();
  v1 = *MEMORY[0x24BE3E4A8];
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 104);
  v0[61] = v2;
  v2(v41, v1, v43);
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v45 = == infix<A>(_:_:)();
  v44 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v0[62] = v44;
  v44(v41, v43);
  v44(v42, v43);
  if ((v45 & 1) != 0)
  {
    v38 = dispatch thunk of GPKGroup.meMember.getter();
    v39[63] = v38;
    if (v38)
    {
      v34 = v39[56];
      v33 = v39[55];
      v32 = v39[54];
      v35 = v39[53];
      v39[38] = v38;
      dispatch thunk of GPKMember.role.getter();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v33, *MEMORY[0x24BE3DAB8], v35);
      lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
      v37 = == infix<A>(_:_:)();
      v36 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v36(v33, v35);
      v36(v34, v35);
      if ((v37 & 1) != 0)
      {
        v29 = v39[52];
        v28 = v39[51];
        v30 = v39[50];
        v31 = v39[43];
        v27 = v39[42];
        v39[31] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v39[32] = v3;
        v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Begin destroying group... ", 0x1AuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v4);
        swift_bridgeObjectRelease();
        v39[39] = v27;
        v39[64] = type metadata accessor for GPKGroup();
        v39[65] = lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v29);
        gpklog(_:type:fileID:line:subsystem:)();
        v6 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
        v39[66] = v6;
        v6(v29, v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with copy of GroupService((_QWORD *)(v31 + 80), v39 + 2);
        dispatch thunk of GPKGroup.groupID.getter();
        v7 = (_QWORD *)swift_task_alloc();
        v39[67] = v7;
        *v7 = v39[35];
        v7[1] = GroupDeletion.destroy(group:);
        return GroupService.destroyGroup(groupID:)(v39[49]);
      }
      v22 = v39[52];
      v21 = v39[51];
      v23 = v39[50];
      v26 = v39[46];
      v24 = v39[45];
      v25 = v39[44];
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cannot destroy a group unless you are admin. Leave instead", 0x3AuLL, 1);
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v22);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v26, *MEMORY[0x24BE3DC78], v25);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      swift_release();
    }
    else
    {
      v16 = v39[52];
      v15 = v39[51];
      v17 = v39[50];
      v20 = v39[46];
      v18 = v39[45];
      v19 = v39[44];
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cannot destroy a group with no meMember", 0x27uLL, 1);
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v16);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x24BE3DD40], v19);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
    }
  }
  else
  {
    v10 = v39[52];
    v9 = v39[51];
    v11 = v39[50];
    v14 = v39[46];
    v12 = v39[45];
    v13 = v39[44];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group destroy request for group I'm no longer in", 0x30uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BE3DC98], v13);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v39[35] + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  v4 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 280) = *v1;
  *(_QWORD *)(v2 + 544) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v4[46] + 8))(v4[47], v4[45]);
    outlined destroy of GroupService((uint64_t)v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void (*v10)(uint64_t, _QWORD, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD, _QWORD, uint64_t, uint64_t);

  v9 = (void (*)(uint64_t, uint64_t))v0[66];
  v13 = (void (*)(uint64_t, uint64_t))v0[62];
  v10 = (void (*)(uint64_t, _QWORD, uint64_t))v0[61];
  v11 = v0[60];
  v12 = v0[57];
  v7 = v0[52];
  v8 = v0[50];
  v14 = v0[43];
  v6 = v0[42];
  v0[35] = v0;
  v0[33] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[34] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group marked as destroyed at server ", 0x24uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[40] = v6;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10(v11, *MEMORY[0x24BE3E4D8], v12);
  GPKGroup.setJoinState(_:)();
  v13(v11, v12);
  outlined init with copy of GroupStore(v14 + 40, (uint64_t)(v0 + 26));
  v16 = v0[29];
  v17 = v0[30];
  __swift_project_boxed_opaque_existential_1(v0 + 26, v16);
  v18 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 + 40) + **(int **)(v17 + 40));
  v4 = (_QWORD *)swift_task_alloc();
  v15[69] = v4;
  *v4 = v15[35];
  v4[1] = GroupDeletion.destroy(group:);
  return v18(v15[42], 0, v16, v17);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  v1 = v0[70];
  v4 = (void (*)(uint64_t, uint64_t))v0[66];
  v5 = v0[52];
  v3 = v0[50];
  v0[35] = v0;
  v0[41] = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 26));
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Local database updated after the group is destroyed", 0x33uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  v4(v5, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v6 + 280) + 8))(*(_QWORD *)(v6 + 560));
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[49];
  v2 = v0[48];
  v3 = v0[47];
  v0[35] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of GroupService((uint64_t)(v0 + 2));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[35] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 280) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 208);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 280) + 8))();
}

uint64_t GroupDeletion.sendDeleteGroupNotification(group:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[34] = v1;
  v2[33] = a1;
  v2[22] = v2;
  v2[23] = 0;
  v2[24] = 0;
  v2[14] = 0;
  v2[15] = 0;
  v2[27] = 0;
  v2[29] = 0;
  v2[31] = 0;
  type metadata accessor for GPKGroupID();
  v2[35] = swift_task_alloc();
  v2[36] = type metadata accessor for GroupEventIDSMessage();
  v2[37] = swift_task_alloc();
  v3 = type metadata accessor for LogSubsystem();
  v2[38] = v3;
  v2[39] = *(_QWORD *)(v3 - 8);
  v2[40] = swift_task_alloc();
  v2[23] = a1;
  v2[24] = v1;
  return swift_task_switch();
}

uint64_t GroupDeletion.sendDeleteGroupNotification(group:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  _QWORD *v11;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)(v0 + 176) = v0;
  if (dispatch thunk of GPKGroup.meMember.getter())
  {
    v40 = dispatch thunk of GPKMember.handle.getter();
    v41 = v1;
    swift_release();
    v42 = v40;
    v43 = v41;
  }
  else
  {
    v42 = 0;
    v43 = 0;
  }
  *(_QWORD *)(v44 + 328) = v43;
  if (v43)
  {
    *(_QWORD *)(v44 + 112) = v42;
    *(_QWORD *)(v44 + 120) = v43;
    *(_QWORD *)(v44 + 208) = dispatch thunk of GPKGroup.members.getter();
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
    v2 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
    v39 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GroupDeletion.sendDeleteGroupNotification(group:), 0, v37, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v2, MEMORY[0x24BEE40A8], v38);
    *(_QWORD *)(v44 + 336) = v39;
    v29 = *(_QWORD *)(v44 + 320);
    v28 = *(_QWORD *)(v44 + 312);
    v30 = *(_QWORD *)(v44 + 304);
    v35 = *(_BYTE **)(v44 + 296);
    v33 = *(_QWORD *)(v44 + 288);
    v32 = *(_QWORD *)(v44 + 280);
    outlined destroy of [GPKMember]();
    *(_QWORD *)(v44 + 216) = v39;
    *(_QWORD *)(v44 + 128) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v44 + 136) = v3;
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group members to be notified: ", 0x1EuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v44 + 224) = v39;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v29);
    gpklog(_:type:fileID:line:subsystem:)();
    v31 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    *(_QWORD *)(v44 + 344) = v31;
    v31(v29, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    dispatch thunk of GPKGroup.groupID.getter();
    v6 = default argument 2 of GroupEventIDSMessage.init(event:groupID:version:eventInfo:)();
    GroupEventIDSMessage.init(event:groupID:version:eventInfo:)(1, v32, 0, v35, v6);
    IDSMessageCoder.init()();
    v34 = lazy protocol witness table accessor for type GroupEventIDSMessage and conformance GroupEventIDSMessage();
    v7 = lazy protocol witness table accessor for type GroupEventIDSMessage and conformance GroupEventIDSMessage();
    v36 = IDSMessageCoder.encode<A>(_:)((uint64_t)v35, v33, v34, v7);
    *(_QWORD *)(v44 + 352) = v36;
    v20 = *(_QWORD *)(v44 + 320);
    v21 = *(_QWORD *)(v44 + 304);
    v22 = *(_QWORD *)(v44 + 272);
    *(_QWORD *)(v44 + 248) = v36;
    *(_QWORD *)(v44 + 160) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v44 + 168) = v8;
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Deletion IDS message constructed: ", 0x22uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v44 + 256) = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    lazy protocol witness table accessor for type [AnyHashable : Any] and conformance [A : B]();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
    gpklog(_:type:fileID:line:subsystem:)();
    v31(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with copy of PeerMessagingServiceProviding(v22 + 272, v44 + 16);
    v25 = *(_QWORD *)(v44 + 40);
    v26 = *(_QWORD *)(v44 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v44 + 16), v25);
    outlined init with copy of Client(v22, v44 + 56);
    v24 = *(_QWORD *)(v44 + 80);
    v23 = *(_QWORD *)(v44 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v44 + 56), v24);
    (*(void (**)(uint64_t))(v23 + 16))(v24);
    *(_BYTE *)(v44 + 377) = *(_BYTE *)(v44 + 376) & 1;
    v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 + 48)
                                                                                                + **(int **)(v26 + 48));
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v44 + 360) = v11;
    *v11 = *(_QWORD *)(v44 + 176);
    v11[1] = GroupDeletion.sendDeleteGroupNotification(group:);
    return v27(v36, v39, v42, v43, v44 + 377, v25, v26);
  }
  else
  {
    v18 = *(_QWORD *)(v44 + 320);
    v17 = *(_QWORD *)(v44 + 312);
    v19 = *(_QWORD *)(v44 + 304);
    v16 = *(_QWORD *)(v44 + 264);
    *(_QWORD *)(v44 + 96) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v44 + 104) = v13;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Me member ids handle not found in group, so unable to notify group members about group deletion: ", 0x61uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v44 + 200) = v16;
    type metadata accessor for GPKGroup();
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v18);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v44 + 176) + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 176) = *v1;
  v4 = v2 + 56;
  *(_QWORD *)(v2 + 368) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1(v4);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  v4 = (void (*)(uint64_t, uint64_t))v0[43];
  v2 = v0[40];
  v3 = v0[38];
  v5 = v0[37];
  v0[22] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group deletion message sent successfully", 0x28uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v2);
  gpklog(_:type:fileID:line:subsystem:)();
  v4(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of GroupEventIDSMessage(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[22] + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  void *v10;

  v6 = v0[37];
  v0[22] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_bridgeObjectRelease();
  outlined destroy of GroupEventIDSMessage(v6);
  v10 = (void *)v0[46];
  v9 = (void (*)(uint64_t, uint64_t))v0[43];
  v7 = v0[40];
  v8 = v0[38];
  v1 = v10;
  v0[29] = v10;
  v0[18] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[19] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Sending group deletion message failed: ", 0x27uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v0[30] = v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupDeletion.swift", 0x20uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[22] + 8))();
}

uint64_t closure #1 in GroupDeletion.sendDeleteGroupNotification(group:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = dispatch thunk of GPKMember.handle.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

void *GroupDeletion.init(client:groupStore:groupService:peerMessagingService:broadcaster:metrics:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, const void *a4@<X3>, uint64_t a5@<X4>, const void *a6@<X5>, _QWORD *a7@<X8>)
{
  outlined init with take of Client(a1, a7);
  outlined init with take of GroupStore(a2, a7 + 5);
  memcpy(a7 + 10, a3, 0xC0uLL);
  outlined init with take of PeerMessagingServiceProviding(a4, a7 + 34);
  a7[39] = a5;
  return memcpy(a7 + 40, a6, 0xCAuLL);
}

uint64_t initializeBufferWithCopyOfBuffer for GroupDeletion(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for GroupDeletion(_QWORD *a1)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 10));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 15));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 20));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 25));
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(a1[32], a1[33]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 34));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 40));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 45));
  if (a1[53])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 50));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GroupDeletion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  (**(void (***)(void))(v2 - 8))();
  v3 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 40, a2 + 40);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v4;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 80, a2 + 80);
  v5 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v5;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 120, a2 + 120);
  v6 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v6;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 160, a2 + 160);
  v7 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 224) = v7;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 200, a2 + 200);
  v17 = *(_QWORD *)(a2 + 240);
  swift_unknownObjectRetain();
  v8 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v17;
  *(_QWORD *)(a1 + 248) = v8;
  v18 = *(_QWORD *)(a2 + 256);
  v19 = *(_QWORD *)(a2 + 264);
  outlined copy of Data._Representation(v18, v19);
  *(_QWORD *)(a1 + 256) = v18;
  *(_QWORD *)(a1 + 264) = v19;
  v9 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v9;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 272, a2 + 272);
  v20 = *(_QWORD *)(a2 + 312);
  swift_retain();
  *(_QWORD *)(a1 + 312) = v20;
  v10 = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 344) = v10;
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 320, a2 + 320);
  v11 = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 384) = v11;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 360, a2 + 360);
  if (*(_QWORD *)(a2 + 424))
  {
    v12 = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 424) = v12;
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 400, a2 + 400);
  }
  else
  {
    memcpy((void *)(a1 + 400), (const void *)(a2 + 400), 0x28uLL);
  }
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  v14 = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 480) = v14;
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  v15 = *(_QWORD *)(a2 + 496);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 496) = v15;
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  v16 = *(_QWORD *)(a2 + 512);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 512) = v16;
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  return result;
}

uint64_t assignWithCopy for GroupDeletion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  __swift_assign_boxed_opaque_existential_1(a1, (uint64_t *)a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, (uint64_t *)(a2 + 40));
  __swift_assign_boxed_opaque_existential_1(a1 + 80, (uint64_t *)(a2 + 80));
  __swift_assign_boxed_opaque_existential_1(a1 + 120, (uint64_t *)(a2 + 120));
  __swift_assign_boxed_opaque_existential_1(a1 + 160, (uint64_t *)(a2 + 160));
  __swift_assign_boxed_opaque_existential_1(a1 + 200, (uint64_t *)(a2 + 200));
  v9 = *(_QWORD *)(a2 + 240);
  swift_unknownObjectRetain();
  v10 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v9;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 248) = v10;
  v11 = *(_QWORD *)(a2 + 256);
  v12 = *(_QWORD *)(a2 + 264);
  outlined copy of Data._Representation(v11, v12);
  v2 = *(_QWORD *)(a1 + 256);
  v3 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v11;
  *(_QWORD *)(a1 + 264) = v12;
  outlined consume of Data._Representation(v2, v3);
  __swift_assign_boxed_opaque_existential_1(a1 + 272, (uint64_t *)(a2 + 272));
  v13 = *(_QWORD *)(a2 + 312);
  swift_retain();
  *(_QWORD *)(a1 + 312) = v13;
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 320, (uint64_t *)(a2 + 320));
  __swift_assign_boxed_opaque_existential_1(a1 + 360, (uint64_t *)(a2 + 360));
  if (*(_QWORD *)(a1 + 424))
  {
    if (*(_QWORD *)(a2 + 424))
    {
      __swift_assign_boxed_opaque_existential_1(a1 + 400, (uint64_t *)(a2 + 400));
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 400);
      memcpy((void *)(a1 + 400), (const void *)(a2 + 400), 0x28uLL);
    }
  }
  else if (*(_QWORD *)(a2 + 424))
  {
    v4 = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 424) = v4;
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 400, a2 + 400);
  }
  else
  {
    memcpy((void *)(a1 + 400), (const void *)(a2 + 400), 0x28uLL);
  }
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456) & 1;
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  v6 = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 480) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  v7 = *(_QWORD *)(a2 + 496);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 496) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  v8 = *(_QWORD *)(a2 + 512);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 512) = v8;
  swift_bridgeObjectRelease();
  result = a1;
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy522_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x20AuLL);
}

uint64_t assignWithTake for GroupDeletion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  __swift_destroy_boxed_opaque_existential_1(a1);
  memcpy((void *)a1, (const void *)a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  memcpy((void *)(a1 + 120), (const void *)(a2 + 120), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 200);
  memcpy((void *)(a1 + 200), (const void *)(a2 + 200), 0x28uLL);
  v6 = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 248) = v6;
  v2 = *(_QWORD *)(a2 + 264);
  v3 = *(_QWORD *)(a1 + 256);
  v4 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v2;
  outlined consume of Data._Representation(v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1 + 272);
  memcpy((void *)(a1 + 272), (const void *)(a2 + 272), 0x30uLL);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 320);
  memcpy((void *)(a1 + 320), (const void *)(a2 + 320), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 360);
  memcpy((void *)(a1 + 360), (const void *)(a2 + 360), 0x28uLL);
  if (*(_QWORD *)(a1 + 424))
    __swift_destroy_boxed_opaque_existential_1(a1 + 400);
  memcpy((void *)(a1 + 400), (const void *)(a2 + 400), 0x38uLL);
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456) & 1;
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  swift_bridgeObjectRelease();
  result = a1;
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  return result;
}

uint64_t getEnumTagSinglePayload for GroupDeletion(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 522))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupDeletion(uint64_t result, int a2, int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 522);
  if (a2 < 0)
  {
    *(_QWORD *)(result + 504) = 0;
    *(_QWORD *)(result + 496) = 0;
    *(_QWORD *)(result + 488) = 0;
    *(_QWORD *)(result + 480) = 0;
    *(_QWORD *)(result + 472) = 0;
    *(_QWORD *)(result + 464) = 0;
    *(_QWORD *)(result + 456) = 0;
    *(_QWORD *)(result + 448) = 0;
    *(_QWORD *)(result + 440) = 0;
    *(_QWORD *)(result + 432) = 0;
    *(_QWORD *)(result + 424) = 0;
    *(_QWORD *)(result + 416) = 0;
    *(_QWORD *)(result + 408) = 0;
    *(_QWORD *)(result + 400) = 0;
    *(_QWORD *)(result + 392) = 0;
    *(_QWORD *)(result + 384) = 0;
    *(_QWORD *)(result + 376) = 0;
    *(_QWORD *)(result + 368) = 0;
    *(_QWORD *)(result + 360) = 0;
    *(_QWORD *)(result + 352) = 0;
    *(_QWORD *)(result + 344) = 0;
    *(_QWORD *)(result + 336) = 0;
    *(_QWORD *)(result + 328) = 0;
    *(_QWORD *)(result + 320) = 0;
    *(_QWORD *)(result + 312) = 0;
    *(_QWORD *)(result + 304) = 0;
    *(_QWORD *)(result + 296) = 0;
    *(_QWORD *)(result + 288) = 0;
    *(_QWORD *)(result + 280) = 0;
    *(_QWORD *)(result + 272) = 0;
    *(_QWORD *)(result + 264) = 0;
    *(_QWORD *)(result + 256) = 0;
    *(_QWORD *)(result + 248) = 0;
    *(_QWORD *)(result + 240) = 0;
    *(_QWORD *)(result + 232) = 0;
    *(_QWORD *)(result + 224) = 0;
    *(_QWORD *)(result + 216) = 0;
    *(_QWORD *)(result + 208) = 0;
    *(_QWORD *)(result + 200) = 0;
    *(_QWORD *)(result + 192) = 0;
    *(_QWORD *)(result + 184) = 0;
    *(_QWORD *)(result + 176) = 0;
    *(_QWORD *)(result + 168) = 0;
    *(_QWORD *)(result + 160) = 0;
    *(_QWORD *)(result + 152) = 0;
    *(_QWORD *)(result + 144) = 0;
    *(_QWORD *)(result + 136) = 0;
    *(_QWORD *)(result + 128) = 0;
    *(_QWORD *)(result + 120) = 0;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 104) = 0;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 512) = 0;
    *(_WORD *)(result + 520) = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      *(_QWORD *)(result + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupDeletion()
{
  return &type metadata for GroupDeletion;
}

uint64_t dispatch thunk of DeviceInfoProviding.isDeviceUnlockedSinceBoot.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() & 1;
}

uint64_t InitGPKFetchGroupsRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t *InitGPKFetchGroupsRequest.Response.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t inited;

  inited = type metadata accessor for InitGPKFetchGroupsRequest.Response();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(inited + 20)), a1);
}

uint64_t type metadata accessor for InitGPKFetchGroupsRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for InitGPKFetchGroupsRequest.Response;
  if (!type metadata singleton initialization cache for InitGPKFetchGroupsRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

BOOL static InitGPKFetchGroupsRequest.Response.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t InitGPKFetchGroupsRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t InitGPKFetchGroupsRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t InitGPKFetchGroupsRequest.Response.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t InitGPKFetchGroupsRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKFetchGroupsRequest.Response.CodingKeys, &type metadata for InitGPKFetchGroupsRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKFetchGroupsRequest.Response.CodingKeys, &type metadata for InitGPKFetchGroupsRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKFetchGroupsRequest.Response.CodingKeys, &type metadata for InitGPKFetchGroupsRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKFetchGroupsRequest.Response.CodingKeys, &type metadata for InitGPKFetchGroupsRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKFetchGroupsRequest.Response.CodingKeys, &type metadata for InitGPKFetchGroupsRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t InitGPKFetchGroupsRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t InitGPKFetchGroupsRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InitGPKFetchGroupsRequest.Response.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static InitGPKFetchGroupsRequest.Response.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance InitGPKFetchGroupsRequest.Response.CodingKeys()
{
  return InitGPKFetchGroupsRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InitGPKFetchGroupsRequest.Response.CodingKeys()
{
  return InitGPKFetchGroupsRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InitGPKFetchGroupsRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InitGPKFetchGroupsRequest.Response.CodingKeys()
{
  _BYTE *v0;

  return InitGPKFetchGroupsRequest.Response.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InitGPKFetchGroupsRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitGPKFetchGroupsRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InitGPKFetchGroupsRequest.Response.CodingKeys()
{
  return InitGPKFetchGroupsRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance InitGPKFetchGroupsRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitGPKFetchGroupsRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InitGPKFetchGroupsRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InitGPKFetchGroupsRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InitGPKFetchGroupsRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD v31[2];
  char v32;
  uint64_t v33;
  _QWORD *v34;

  v15 = a1;
  v34 = 0;
  v33 = 0;
  v25 = type metadata accessor for GPKGroupID();
  v21 = *(_QWORD *)(v25 - 8);
  v14 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v7 - v14;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InitGPKFetchGroupsRequest.Response.CodingKeys>);
  v16 = *(_QWORD *)(v24 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v7 - v17;
  v34 = v2;
  v33 = v1;
  v18 = v2[3];
  v19 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v18);
  lazy protocol witness table accessor for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v27, v22, v25);
  v23 = &v32;
  v32 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v28 = v3;
  v29 = v3;
  if (v3)
  {
    v7[2] = v29;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    v4 = (uint64_t *)(v22 + *(int *)(type metadata accessor for InitGPKFetchGroupsRequest.Response() + 20));
    v8 = *v4;
    v9 = v4[1];
    outlined copy of Data._Representation(v8, v9);
    v11 = v31;
    v31[0] = v8;
    v31[1] = v9;
    v10 = &v30;
    v30 = 1;
    lazy protocol witness table accessor for type Nonce and conformance Nonce();
    v5 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = v5;
    v13 = v5;
    if (v5)
      v7[1] = v13;
    outlined destroy of Nonce((uint64_t)v31);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
}

uint64_t InitGPKFetchGroupsRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t inited;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  char v47;

  v23 = a2;
  v32 = a1;
  v46 = 0;
  v28 = 0;
  v24 = type metadata accessor for GPKGroupID();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v12 - v26;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InitGPKFetchGroupsRequest.Response.CodingKeys>);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v36 = (char *)&v12 - v31;
  inited = type metadata accessor for InitGPKFetchGroupsRequest.Response();
  v34 = (*(_QWORD *)(*(_QWORD *)(inited - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v35 = (uint64_t)&v12 - v34;
  v47 = 0;
  v46 = v2;
  v38 = v2[3];
  v39 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v38);
  lazy protocol witness table accessor for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys();
  v3 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v40 = v3;
  v41 = v3;
  if (v3)
  {
    v15 = v41;
  }
  else
  {
    v20 = &v45;
    v45 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v4;
    v22 = v4;
    if (v4)
    {
      v14 = v22;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v14;
    }
    else
    {
      v16 = 1;
      v47 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v35, v27, v24);
      v17 = &v42;
      v42 = v16;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v5 = v21;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v18 = v5;
      v19 = v5;
      if (!v5)
      {
        v6 = v29;
        v7 = v36;
        v8 = v30;
        v9 = v44;
        v10 = (_QWORD *)(v35 + *(int *)(inited + 20));
        v47 = 3;
        *v10 = v43;
        v10[1] = v9;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v6);
        outlined init with copy of InitGPKFetchGroupsRequest.Response(v35, v23);
        __swift_destroy_boxed_opaque_existential_1(v32);
        return outlined destroy of InitGPKFetchGroupsRequest.Response(v35);
      }
      v13 = v19;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v13;
    }
  }
  v12 = v15;
  result = __swift_destroy_boxed_opaque_existential_1(v32);
  if ((v47 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v35, v24);
  return result;
}

uint64_t outlined init with copy of InitGPKFetchGroupsRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(type metadata accessor for InitGPKFetchGroupsRequest.Response() + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  outlined copy of Data._Representation(v7, v8);
  result = a2;
  v4 = (uint64_t *)(a2 + v6);
  *v4 = v7;
  v4[1] = v8;
  return result;
}

uint64_t outlined destroy of InitGPKFetchGroupsRequest.Response(uint64_t a1)
{
  uint64_t v1;
  uint64_t inited;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  inited = type metadata accessor for InitGPKFetchGroupsRequest.Response();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(inited + 20)), *(_QWORD *)(a1 + *(int *)(inited + 20) + 8));
  return a1;
}

uint64_t InitGPKFetchGroupsRequest.Response.init(groupId:nonce:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  v8 = *a2;
  v9 = a2[1];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a3, a1);
  result = type metadata accessor for InitGPKFetchGroupsRequest.Response();
  v5 = (_QWORD *)(a3 + *(int *)(result + 20));
  *v5 = v8;
  v5[1] = v9;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InitGPKFetchGroupsRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InitGPKFetchGroupsRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InitGPKFetchGroupsRequest.Response(uint64_t a1)
{
  return InitGPKFetchGroupsRequest.Response.encode(to:)(a1);
}

void variable initialization expression of InitGPKFetchGroupsRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t InitGPKFetchGroupsRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t InitGPKFetchGroupsRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*InitGPKFetchGroupsRequest.bodyContent.modify())()
{
  return InitGPKFetchGroupsRequest.bodyContent.modify;
}

uint64_t InitGPKFetchGroupsRequest.init(groupID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Swift::String *v2;
  __int128 *v3;
  unint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  Swift::String *v10;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];

  v16 = a1;
  memset(v17, 0, sizeof(v17));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v10 = v2;
  v3 = HTTPBodyKey.groupID.unsafeMutableAddressor();
  outlined init with copy of String(v3, v10);
  v8 = GPKGroupID.data.getter();
  v9 = v4;
  Data.hexString.getter();
  outlined consume of Data._Representation(v8, v9);
  v5 = String.lowercased()();
  swift_bridgeObjectRelease();
  v10[2]._object = (void *)MEMORY[0x24BEE0D00];
  v10[1] = v5;
  _finalizeUninitializedArray<A>(_:)();
  v15 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(_QWORD *)&v13 = v15;
  outlined assign with take of Any?(&v13, (uint64_t)v17);
  swift_bridgeObjectRelease();
  outlined init with copy of InitGPKFetchGroupsRequest((uint64_t)v17, a2);
  v6 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1);
  return outlined destroy of InitGPKFetchGroupsRequest((uint64_t)v17);
}

uint64_t outlined init with copy of InitGPKFetchGroupsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t outlined destroy of InitGPKFetchGroupsRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t InitGPKFetchGroupsRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initFetchGroupBlob.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in InitGPKFetchGroupsRequest()
{
  return lazy protocol witness table accessor for type InitGPKFetchGroupsRequest.Response and conformance InitGPKFetchGroupsRequest.Response();
}

unint64_t lazy protocol witness table accessor for type InitGPKFetchGroupsRequest.Response and conformance InitGPKFetchGroupsRequest.Response()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response and conformance InitGPKFetchGroupsRequest.Response;
  if (!lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response and conformance InitGPKFetchGroupsRequest.Response)
  {
    inited = type metadata accessor for InitGPKFetchGroupsRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKFetchGroupsRequest.Response, inited);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKFetchGroupsRequest.Response and conformance InitGPKFetchGroupsRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance InitGPKFetchGroupsRequest()
{
  return InitGPKFetchGroupsRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance InitGPKFetchGroupsRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance InitGPKFetchGroupsRequest@<X0>(uint64_t a1@<X8>)
{
  return InitGPKFetchGroupsRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance InitGPKFetchGroupsRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for InitGPKFetchGroupsRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for InitGPKFetchGroupsRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for InitGPKFetchGroupsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for InitGPKFetchGroupsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for InitGPKFetchGroupsRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InitGPKFetchGroupsRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InitGPKFetchGroupsRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitGPKFetchGroupsRequest()
{
  return &type metadata for InitGPKFetchGroupsRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for InitGPKFetchGroupsRequest.Response(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v14;

  v14 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v14 & 0x20000) != 0)
  {
    v9 = *a2;
    swift_retain();
    *a1 = v9;
    return *a1 + ((v14 + 16) & ~(unint64_t)v14);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v7 = (_QWORD *)((char *)a1 + *(int *)(a3 + 20));
    v4 = (uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v6 = *v4;
    v8 = v4[1];
    outlined copy of Data._Representation(*v4, v8);
    *v7 = v6;
    v7[1] = v8;
    return (unint64_t)a1;
  }
}

uint64_t destroy for InitGPKFetchGroupsRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for InitGPKFetchGroupsRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a2 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  result = a1;
  v5 = (uint64_t *)(a1 + v8);
  *v5 = v9;
  v5[1] = v10;
  return result;
}

uint64_t assignWithCopy for InitGPKFetchGroupsRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v10 = *(int *)(a3 + 20);
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a2 + v10 + 8);
  outlined copy of Data._Representation(v11, v12);
  v4 = (uint64_t *)(a1 + v10);
  v5 = *(_QWORD *)(a1 + v10);
  v6 = *(_QWORD *)(a1 + v10 + 8);
  *v4 = v11;
  v4[1] = v12;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

__n128 initializeWithTake for InitGPKFetchGroupsRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = *(__n128 *)(a2 + *(int *)(a3 + 20));
  *(__n128 *)(a1 + *(int *)(a3 + 20)) = result;
  return result;
}

uint64_t assignWithTake for InitGPKFetchGroupsRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + *(int *)(a3 + 20));
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitGPKFetchGroupsRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4A1170(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for InitGPKFetchGroupsRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4A126C(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 12)
  {
    v5 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v5 = 0;
    v5[1] = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for InitGPKFetchGroupsRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for InitGPKFetchGroupsRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for InitGPKFetchGroupsRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for InitGPKFetchGroupsRequest.Response.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for InitGPKFetchGroupsRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InitGPKFetchGroupsRequest.Response.CodingKeys()
{
  return &type metadata for InitGPKFetchGroupsRequest.Response.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in InitGPKFetchGroupsRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in InitGPKFetchGroupsRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in InitGPKFetchGroupsRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitGPKFetchGroupsRequest.Response.CodingKeys and conformance InitGPKFetchGroupsRequest.Response.CodingKeys();
}

uint64_t DiagnosisComponent.name.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCrypto", 0xEuLL, 1)._countAndFlagsBits;
}

uint64_t DiagnosisComponent.version.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("all", 3uLL, 1)._countAndFlagsBits;
}

uint64_t DiagnosisComponent.identifier.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("1431254", 7uLL, 1)._countAndFlagsBits;
}

uint64_t static DiagnosisComponent.== infix(_:_:)()
{
  return 1;
}

uint64_t DiagnosisComponent.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t DiagnosisComponent.hashValue.getter()
{
  lazy protocol witness table accessor for type DiagnosisComponent and conformance DiagnosisComponent();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type DiagnosisComponent and conformance DiagnosisComponent()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DiagnosisComponent and conformance DiagnosisComponent;
  if (!lazy protocol witness table cache variable for type DiagnosisComponent and conformance DiagnosisComponent)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for DiagnosisComponent, &type metadata for DiagnosisComponent);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DiagnosisComponent and conformance DiagnosisComponent);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type DiagnosisComponent and conformance DiagnosisComponent;
  if (!lazy protocol witness table cache variable for type DiagnosisComponent and conformance DiagnosisComponent)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for DiagnosisComponent, &type metadata for DiagnosisComponent);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type DiagnosisComponent and conformance DiagnosisComponent);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DiagnosisComponent()
{
  return static DiagnosisComponent.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance DiagnosisComponent()
{
  return DiagnosisComponent.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DiagnosisComponent()
{
  return DiagnosisComponent.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DiagnosisComponent(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

unint64_t base witness table accessor for Equatable in DiagnosisComponent()
{
  return lazy protocol witness table accessor for type DiagnosisComponent and conformance DiagnosisComponent();
}

uint64_t getEnumTagSinglePayload for DiagnosisComponent(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for DiagnosisComponent(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for DiagnosisComponent()
{
  return 0;
}

ValueMetadata *type metadata accessor for DiagnosisComponent()
{
  return &type metadata for DiagnosisComponent;
}

uint64_t dispatch thunk of DiagnosisReporting.start(for:radarTitle:radarDescription:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of DiagnosisReporting.start(for:radarTitle:radarDescription:onSuppress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 16))(a1);
}

uint64_t ServiceBuilder.dependencies.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Dependencies(v1 + 16, a1);
}

uint64_t ServiceBuilder.__allocating_init(dependencies:)(id *a1)
{
  swift_allocObject();
  return ServiceBuilder.init(dependencies:)(a1);
}

uint64_t ServiceBuilder.init(dependencies:)(id *a1)
{
  _QWORD *v1;
  uint64_t v4;
  _BYTE v5[960];
  _QWORD *v6;
  id *v7;

  v7 = a1;
  v6 = v1;
  v1[122] = 0;
  v1[123] = 0;
  v1[124] = 0;
  outlined init with copy of Dependencies((uint64_t)a1, (uint64_t)v5);
  memcpy(v1 + 2, v5, 0x3C0uLL);
  outlined destroy of Dependencies(a1);
  return v4;
}

uint64_t variable initialization expression of ServiceBuilder.kdsService()
{
  return 0;
}

uint64_t variable initialization expression of ServiceBuilder.$__lazy_storage_$_listeners()
{
  return 0;
}

uint64_t variable initialization expression of ServiceBuilder.$__lazy_storage_$_peerMessagingService()
{
  return 0;
}

uint64_t ServiceBuilder.listeners.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v0 + 984);
  swift_bridgeObjectRetain();
  swift_endAccess();
  if (v5)
    return v5;
  v2 = closure #1 in ServiceBuilder.listeners.getter(v4);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v4 + 984) = v2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return v2;
}

uint64_t key path getter for ServiceBuilder.listeners : ServiceBuilder@<X0>(uint64_t *a1@<X8>)
{
  swift_retain();
  *a1 = ServiceBuilder.listeners.getter();
  return swift_release();
}

uint64_t key path setter for ServiceBuilder.listeners : ServiceBuilder(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  outlined init with copy of [NSXPCListener](a1, &v3);
  v2 = v3;
  swift_retain();
  ServiceBuilder.listeners.setter(v2);
  return swift_release();
}

uint64_t ServiceBuilder.listeners.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 984) = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in ServiceBuilder.listeners.getter(uint64_t a1)
{
  id v1;
  NSXPCListener *v2;
  objc_class *v3;
  id v4;
  NSXPCListener *v5;
  id v6;
  objc_class *v7;
  id v8;
  NSXPCListener *v10;
  uint64_t v11;
  NSXPCListener *v12;
  uint64_t v13;
  Class isa;
  id v17;
  id v18;
  id v19[122];
  Swift::String v20;
  uint64_t v21;

  v21 = a1;
  v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd.xpc.groupservice", 0x24uLL, 1);
  type metadata accessor for NSXPCListener();
  swift_bridgeObjectRetain();
  isa = NSXPCListener.__allocating_init(machServiceName:)(v20).super.isa;
  v19[121] = isa;
  v17 = objc_msgSend((id)objc_opt_self(), sel_anonymousListener);
  v19[120] = v17;
  outlined init with copy of Dependencies(a1 + 16, (uint64_t)v19);
  v18 = v19[0];
  v1 = v19[0];
  outlined destroy of Dependencies(v19);
  if (v18)
  {
    v11 = _allocateUninitializedArray<A>(_:)();
    v10 = v5;
    v6 = v18;
    v10->super.isa = (Class)v18;
    v7 = isa;
    v10[1].super.isa = isa;
    v8 = v17;
    v10[2].super.isa = (Class)v17;
    _finalizeUninitializedArray<A>(_:)();

    swift_bridgeObjectRelease();
    return v11;
  }
  else
  {
    v13 = _allocateUninitializedArray<A>(_:)();
    v12 = v2;
    v3 = isa;
    v12->super.isa = isa;
    v4 = v17;
    v12[1].super.isa = (Class)v17;
    _finalizeUninitializedArray<A>(_:)();

    swift_bridgeObjectRelease();
    return v13;
  }
}

NSXPCListener __swiftcall NSXPCListener.__allocating_init(machServiceName:)(Swift::String machServiceName)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSXPCListener)@nonobjc NSXPCListener.init(machServiceName:)();
}

_QWORD *ServiceBuilder.peerMessagingService.getter()
{
  uint64_t v0;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  swift_beginAccess();
  v5 = *(_QWORD *)(v0 + 992);
  swift_retain();
  swift_endAccess();
  if (v5)
    return (_QWORD *)v5;
  v2 = closure #1 in ServiceBuilder.peerMessagingService.getter(v4);
  swift_retain();
  swift_beginAccess();
  v4[124] = v2;
  swift_release();
  swift_endAccess();
  return v2;
}

uint64_t key path getter for ServiceBuilder.peerMessagingService : ServiceBuilder@<X0>(_QWORD *a1@<X8>)
{
  swift_retain();
  *a1 = ServiceBuilder.peerMessagingService.getter();
  return swift_release();
}

uint64_t key path setter for ServiceBuilder.peerMessagingService : ServiceBuilder(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  swift_retain();
  swift_retain();
  ServiceBuilder.peerMessagingService.setter(v2);
  return swift_release();
}

uint64_t ServiceBuilder.peerMessagingService.setter(uint64_t a1)
{
  uint64_t v1;

  swift_retain();
  swift_beginAccess();
  *(_QWORD *)(v1 + 992) = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

_QWORD *closure #1 in ServiceBuilder.peerMessagingService.getter(void *a1)
{
  id *v2;
  id v4;
  id v5;
  id v6;
  id v7;
  _BYTE v8[40];
  _BYTE v9[40];
  id v10[62];
  uint64_t v11;
  id v12[120];
  id v13[121];

  v13[120] = a1;
  type metadata accessor for PeerMessagingService();
  outlined init with copy of Dependencies((uint64_t)a1 + 16, (uint64_t)v13);
  v4 = v13[60];
  v5 = v13[61];
  swift_unknownObjectRetain();
  outlined destroy of Dependencies(v13);
  outlined init with copy of Dependencies((uint64_t)a1 + 16, (uint64_t)v12);
  v6 = v12[72];
  v7 = v12[73];
  swift_unknownObjectRetain();
  outlined destroy of Dependencies(v12);
  outlined init with copy of Dependencies((uint64_t)a1 + 16, (uint64_t)v10);
  outlined init with copy of IdentityServiceUtils((uint64_t)&v11, (uint64_t)v9);
  v2 = outlined destroy of Dependencies(v10);
  ServiceBuilder.readinessChecker()((uint64_t)v2);
  return PeerMessagingService.__allocating_init(identityService:invitationService:utils:readinessChecker:)(v4, (uint64_t)v5, v6, (uint64_t)v7, (uint64_t)v9, (uint64_t)v8);
}

_BYTE *ServiceBuilder.readinessChecker()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *result;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  _WORD v22[104];
  _BYTE v23[40];
  id v24[28];
  uint64_t v25;
  uint64_t v26;
  ValueMetadata *v27;
  _UNKNOWN **v28;
  _BYTE v29[40];
  id v30[28];
  uint64_t v31;
  uint64_t v32;
  ValueMetadata *v33;
  _UNKNOWN **v34;
  _BYTE v35[40];
  id v36[23];
  uint64_t v37;
  uint64_t v38;
  ValueMetadata *v39;
  _UNKNOWN **v40;
  _BYTE v41[40];
  id v42[23];
  uint64_t v43;
  uint64_t v44;
  ValueMetadata *v45;
  _UNKNOWN **v46;
  uint64_t v47;
  id v48[110];
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[40];
  id v52[95];
  uint64_t v53;
  _BYTE v54[40];
  uint64_t v55;
  id v56[120];
  uint64_t v57;
  _QWORD v58[5];
  _BYTE v59[40];
  id v60;
  uint64_t v61;
  _QWORD v62[5];
  _QWORD v63[10];
  _BYTE v64[40];
  id v65;
  uint64_t v66;
  _BYTE __b[40];
  uint64_t v68;

  MEMORY[0x24BDAC7A8](a1);
  v16 = v2;
  memset(__b, 0, sizeof(__b));
  memset(v63, 0, sizeof(v63));
  v57 = 0;
  v55 = 0;
  memset(v54, 0, sizeof(v54));
  v50 = 0;
  v68 = v1;
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)&v65);
  outlined init with copy of FeatureChecking((uint64_t)&v66, (uint64_t)v64);
  outlined destroy of Dependencies(&v65);
  FeatureReadinessCheck.init(featureFlags:)(v64, __b);
  v9 = ServiceBuilder.accountManager()();
  v62[3] = type metadata accessor for DaemonAccountManager();
  v62[4] = &protocol witness table for DaemonAccountManager;
  v62[0] = v9;
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)&v60);
  outlined init with copy of FeatureChecking((uint64_t)&v61, (uint64_t)v59);
  outlined destroy of Dependencies(&v60);
  AccountReadinessCheck.init(accountManager:featureFlags:)(v62, v59, (uint64_t)v63);
  v12 = type metadata accessor for ManateeReadinessCheck();
  v10 = ServiceBuilder.securityService()();
  v58[3] = type metadata accessor for SecurityService();
  v58[4] = &protocol witness table for SecurityService;
  v58[0] = v10;
  v20 = ManateeReadinessCheck.__allocating_init(securityService:)((uint64_t)v58);
  v57 = v20;
  v14 = type metadata accessor for URLBagReadinessCheck();
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v56);
  v11 = v56[48];
  swift_unknownObjectRetain();
  outlined destroy of Dependencies(v56);
  v19 = URLBagReadinessCheck.__allocating_init(bag:)((uint64_t)v11);
  v55 = v19;
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v52);
  outlined init with copy of DeviceInfoProviding((uint64_t)&v53, (uint64_t)v51);
  outlined destroy of Dependencies(v52);
  DeviceUnlockReadinessCheck.init(deviceInfo:)(v51, v54);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReadinessChecking);
  v13 = _allocateUninitializedArray<A>(_:)();
  v15 = v3;
  v3[3] = (uint64_t)&type metadata for DeviceUnlockReadinessCheck;
  v3[4] = (uint64_t)&protocol witness table for DeviceUnlockReadinessCheck;
  v4 = swift_allocObject();
  *v15 = v4;
  outlined init with copy of DeviceUnlockReadinessCheck((uint64_t)v54, v4 + 16);
  v15[8] = (uint64_t)&type metadata for FeatureReadinessCheck;
  v15[9] = (uint64_t)&protocol witness table for FeatureReadinessCheck;
  v5 = swift_allocObject();
  v15[5] = v5;
  outlined init with copy of FeatureReadinessCheck((uint64_t)__b, v5 + 16);
  v15[13] = (uint64_t)&type metadata for AccountReadinessCheck;
  v15[14] = (uint64_t)&protocol witness table for AccountReadinessCheck;
  v6 = swift_allocObject();
  v15[10] = v6;
  outlined init with copy of AccountReadinessCheck(v63, (_QWORD *)(v6 + 16));
  swift_retain();
  v15[18] = v12;
  v15[19] = (uint64_t)&protocol witness table for ManateeReadinessCheck;
  v15[15] = v20;
  swift_retain();
  v15[23] = v14;
  v15[24] = (uint64_t)&protocol witness table for URLBagReadinessCheck;
  v15[20] = v19;
  _finalizeUninitializedArray<A>(_:)();
  v50 = v13;
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v48);
  outlined init with copy of ReadinessChecking((uint64_t)&v49, (uint64_t)&v47);
  outlined destroy of Dependencies(v48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ReadinessChecking]);
  Array.append(_:)();
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v42);
  outlined init with copy of Store((uint64_t)&v43, (uint64_t)v41);
  outlined destroy of Dependencies(v42);
  v45 = &type metadata for LocalStoreLoader;
  v46 = &protocol witness table for LocalStoreLoader;
  v44 = swift_allocObject();
  LocalStoreLoader.init(store:)(v41, (void *)(v44 + 16));
  Array.append(_:)();
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v36);
  outlined init with copy of Store((uint64_t)&v37, (uint64_t)v35);
  outlined destroy of Dependencies(v36);
  v39 = &type metadata for CloudStoreLoader;
  v40 = &protocol witness table for CloudStoreLoader;
  v38 = swift_allocObject();
  CloudStoreLoader.init(store:)(v35, (void *)(v38 + 16));
  Array.append(_:)();
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v30);
  outlined init with copy of Store((uint64_t)&v31, (uint64_t)v29);
  outlined destroy of Dependencies(v30);
  v33 = &type metadata for LocalStoreLoader;
  v34 = &protocol witness table for LocalStoreLoader;
  v32 = swift_allocObject();
  LocalStoreLoader.init(store:)(v29, (void *)(v32 + 16));
  Array.append(_:)();
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v24);
  outlined init with copy of Store((uint64_t)&v25, (uint64_t)v23);
  outlined destroy of Dependencies(v24);
  v27 = &type metadata for CloudStoreLoader;
  v28 = &protocol witness table for CloudStoreLoader;
  v26 = swift_allocObject();
  CloudStoreLoader.init(store:)(v23, (void *)(v26 + 16));
  Array.append(_:)();
  v17 = v50;
  swift_bridgeObjectRetain();
  memset(v21, 0, sizeof(v21));
  ServiceBuilder.metrics(client:)(v21, v22);
  outlined destroy of Client?((uint64_t)v21);
  v18 = swift_allocObject();
  swift_retain();
  swift_weakInit();
  swift_release();
  swift_retain();
  v16[3] = (uint64_t)&type metadata for ServiceReadinessChecker;
  v16[4] = (uint64_t)&protocol witness table for ServiceReadinessChecker;
  v7 = swift_allocObject();
  *v16 = v7;
  ServiceReadinessChecker.init(checkList:metrics:onReady:)(v17, v22, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBuilder.readinessChecker(), v18, (_QWORD *)(v7 + 16));
  swift_release();
  outlined destroy of [ReadinessChecking]();
  outlined destroy of DeviceUnlockReadinessCheck((uint64_t)v54);
  swift_release();
  swift_release();
  outlined destroy of AccountReadinessCheck((uint64_t)v63);
  result = __b;
  outlined destroy of FeatureReadinessCheck((uint64_t)__b);
  return result;
}

uint64_t ServiceBuilder.networkService(for:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20[120];
  _BYTE v21[40];
  id v22[38];
  uint64_t v23;
  id v24[120];
  id v25[120];
  _BYTE v26[40];
  id v27[49];
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v14 = (_QWORD *)MEMORY[0x24BDAC7A8](a1);
  v30 = v14;
  v29 = v1;
  type metadata accessor for NetworkingService();
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v27);
  outlined init with copy of NetworkingSession((uint64_t)&v28, (uint64_t)v26);
  outlined destroy of Dependencies(v27);
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v25);
  v11 = v25[48];
  swift_unknownObjectRetain();
  outlined destroy of Dependencies(v25);
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v24);
  v12 = v24[54];
  swift_bridgeObjectRetain();
  outlined destroy of Dependencies(v24);
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v22);
  outlined init with copy of AccountStore((uint64_t)&v23, (uint64_t)v21);
  outlined destroy of Dependencies(v22);
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v20);
  v13 = v20[20];
  outlined destroy of Dependencies(v20);
  v2 = default argument 3 of NetworkingService.init(session:urlBag:transformers:timeoutInterval:accountStore:maxRetries:)();
  v15 = NetworkingService.__allocating_init(session:urlBag:transformers:timeoutInterval:accountStore:maxRetries:)((uint64_t)v26, (uint64_t)v11, (uint64_t)v12, (uint64_t)v21, (uint64_t)v13, v2);
  v19 = v15;
  outlined init with copy of Client?(v14, v16);
  if (v17)
  {
    v6 = v17;
    v5 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    v7 = (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
    v8 = v3;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    v9 = v7;
    v10 = v8;
  }
  else
  {
    outlined destroy of Client?((uint64_t)v16);
    v9 = 0;
    v10 = 0;
  }
  if (v10)
  {
    swift_bridgeObjectRetain();
    swift_beginAccess();
    *(_QWORD *)(v15 + 128) = v9;
    *(_QWORD *)(v15 + 136) = v10;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  return v15;
}

uint64_t ServiceBuilder.keyDistributionService(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  id v16[120];
  id v17[94];
  int v18;
  _WORD v19[104];
  _BYTE v20[40];
  id v21[67];
  uint64_t v22;
  _QWORD v23[5];
  _BYTE v24[40];
  id v25[55];
  uint64_t v26;
  _QWORD v27[5];
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  id v31[23];
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v14 = (_QWORD *)MEMORY[0x24BDAC7A8](a1);
  v34 = v14;
  v33 = v1;
  swift_beginAccess();
  v15 = *(_QWORD *)(v1 + 976);
  swift_retain();
  swift_endAccess();
  if (v15)
    return v15;
  type metadata accessor for KeyDistributionService();
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v31);
  outlined init with copy of Store((uint64_t)&v32, (uint64_t)v28);
  outlined destroy of Dependencies(v31);
  v12 = v29;
  v11 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v11 + 48))(v27, v12);
  if (!v2)
  {
    v8 = ServiceBuilder.accountManager()();
    outlined init with copy of Dependencies(v1 + 16, (uint64_t)v25);
    outlined init with copy of CryptographyServiceProviding((uint64_t)&v26, (uint64_t)v24);
    outlined destroy of Dependencies(v25);
    v5 = ServiceBuilder.securityService()();
    v23[3] = type metadata accessor for SecurityService();
    v23[4] = &protocol witness table for SecurityService;
    v23[0] = v5;
    v9 = ServiceBuilder.networkService(for:)((uint64_t)v14);
    outlined init with copy of Dependencies(v1 + 16, (uint64_t)v21);
    outlined init with copy of UserHandleFormattingUtils((uint64_t)&v22, (uint64_t)v20);
    outlined destroy of Dependencies(v21);
    ServiceBuilder.metrics(client:)(v14, v19);
    outlined init with copy of Dependencies(v1 + 16, (uint64_t)v17);
    v6 = v18;
    outlined destroy of Dependencies(v17);
    outlined init with copy of Dependencies(v1 + 16, (uint64_t)v16);
    v7 = v16[21];
    outlined destroy of Dependencies(v16);
    v10 = KeyDistributionService.__allocating_init(userStore:accountManager:cryptographyService:securityService:networkService:userHandleFormattingUtils:metrics:currentKeyProtocolVersion:maxRetries:)((uint64_t)v27, v8, (uint64_t)v24, (uint64_t)v23, v9, (uint64_t)&protocol witness table for NetworkingService, (uint64_t)v20, (uint64_t)v19, v6, (uint64_t)v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    swift_retain();
    swift_beginAccess();
    *(_QWORD *)(v1 + 976) = v10;
    swift_release();
    swift_endAccess();
    return v10;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return v4;
}

uint64_t ServiceBuilder.accountManager()()
{
  uint64_t v1;
  _BYTE v2[40];
  id v3[6];
  uint64_t v4;
  _BYTE v5[40];
  id v6[38];
  _QWORD v7[83];

  v7[82] = 0;
  type metadata accessor for DaemonAccountManager();
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v6);
  outlined init with copy of AccountStore((uint64_t)v7, (uint64_t)v5);
  outlined destroy of Dependencies(v6);
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v3);
  outlined init with copy of KeyValueStore((uint64_t)&v4, (uint64_t)v2);
  outlined destroy of Dependencies(v3);
  return DaemonAccountManager.__allocating_init(accountStore:userDefaults:)((uint64_t)v5, (uint64_t)v2);
}

uint64_t ServiceBuilder.securityService()()
{
  uint64_t v1;
  _BYTE v2[40];
  id v3[74];
  _QWORD v4[47];

  v4[46] = 0;
  type metadata accessor for SecurityService();
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v3);
  outlined init with copy of CloudDataProtectionChecking((uint64_t)v4, (uint64_t)v2);
  outlined destroy of Dependencies(v3);
  return SecurityService.__allocating_init(cloudDataProtectionChecker:)((uint64_t)v2);
}

uint64_t sub_23D4A3744()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t outlined init with copy of DeviceUnlockReadinessCheck(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t sub_23D4A37CC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t outlined init with copy of FeatureReadinessCheck(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t sub_23D4A3854()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

_QWORD *outlined init with copy of AccountReadinessCheck(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[3];
  a2[3] = v2;
  a2[4] = a1[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a1[8];
  a2[8] = v3;
  a2[9] = a1[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a2 + 5), (uint64_t)(a1 + 5));
  return a2;
}

uint64_t sub_23D4A3918()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t sub_23D4A3954()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t ServiceBuilder.metrics(client:)@<X0>(_QWORD *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD v6[5];
  _BYTE v7[40];
  id v8[6];
  uint64_t v9;
  _BYTE v10[40];
  id v11[79];
  _QWORD v12[43];

  v12[41] = 0;
  v12[42] = a1;
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v11);
  outlined init with copy of MetricsReporting((uint64_t)v12, (uint64_t)v10);
  outlined destroy of Dependencies(v11);
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v8);
  outlined init with copy of KeyValueStore((uint64_t)&v9, (uint64_t)v7);
  outlined destroy of Dependencies(v8);
  outlined init with copy of Client?(a1, v6);
  return Metrics.init(reporter:keyValueStore:client:)(v10, v7, v6, a2);
}

uint64_t sub_23D4A3A48()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t ServiceBuilder.userLookupService(for:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[40];
  id v14;
  uint64_t v15;
  _BYTE v16[40];
  id v17[33];
  uint64_t v18;
  _BYTE v19[40];
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  id v25[23];
  _QWORD v26[99];

  v26[97] = 0;
  v26[98] = a1;
  type metadata accessor for GroupKitUserLookupManager();
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v25);
  outlined init with copy of Store((uint64_t)v26, (uint64_t)v22);
  outlined destroy of Dependencies(v25);
  v12 = v23;
  v11 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v11 + 48))(v21, v12);
  if (v10)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    return v4;
  }
  else
  {
    outlined init with copy of Client(a1, (uint64_t)v19);
    v7 = ServiceBuilder.keyDistributionService(for:)((uint64_t)v19);
    outlined destroy of Client?((uint64_t)v19);
    v20[3] = type metadata accessor for KeyDistributionService();
    v20[4] = &protocol witness table for KeyDistributionService;
    v20[0] = v7;
    outlined init with copy of Dependencies(v9 + 16, (uint64_t)v17);
    outlined init with copy of DateFactory((uint64_t)&v18, (uint64_t)v16);
    outlined destroy of Dependencies(v17);
    outlined init with copy of Dependencies(v9 + 16, (uint64_t)&v14);
    outlined init with copy of FeatureChecking((uint64_t)&v15, (uint64_t)v13);
    outlined destroy of Dependencies(&v14);
    v5 = default argument 4 of GroupKitUserLookupManager.init(userStore:keyDistributionService:dateFactory:featureFlags:hardTTL:softTTL:)();
    v2 = default argument 5 of GroupKitUserLookupManager.init(userStore:keyDistributionService:dateFactory:featureFlags:hardTTL:softTTL:)();
    v6 = GroupKitUserLookupManager.__allocating_init(userStore:keyDistributionService:dateFactory:featureFlags:hardTTL:softTTL:)((uint64_t)v21, (uint64_t)v20, (uint64_t)v16, (uint64_t)v13, v5, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    return v6;
  }
}

uint64_t ServiceBuilder.metadataService(for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];
  id v12;
  uint64_t v13;
  _BYTE v14[40];
  _BYTE v15[40];
  id v16[55];
  uint64_t v17;
  _QWORD v18[5];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  id v22[23];
  _QWORD v23[99];

  v23[97] = 0;
  v23[98] = a1;
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v22);
  outlined init with copy of Store((uint64_t)v23, (uint64_t)v19);
  outlined destroy of Dependencies(v22);
  v10 = v20;
  v9 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v9 + 32))(v18, v10);
  if (v8)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  outlined init with copy of Dependencies(v7 + 16, (uint64_t)v16);
  outlined init with copy of CryptographyServiceProviding((uint64_t)&v17, (uint64_t)v15);
  outlined destroy of Dependencies(v16);
  outlined init with copy of Client(a1, (uint64_t)v14);
  v4 = ServiceBuilder.networkService(for:)((uint64_t)v14);
  outlined destroy of Client?((uint64_t)v14);
  outlined init with copy of Dependencies(v7 + 16, (uint64_t)&v12);
  outlined init with copy of FeatureChecking((uint64_t)&v13, (uint64_t)v11);
  outlined destroy of Dependencies(&v12);
  MetadataService.init(metadataStore:cryptographyService:networkService:featureFlag:)((uint64_t)v18, (uint64_t)v15, v4, (uint64_t)&protocol witness table for NetworkingService, (uint64_t)v11, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
}

uint64_t ServiceBuilder.groupService(for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[40];
  _BYTE v14[40];
  _QWORD v15[5];
  _BYTE v16[40];
  id v17[55];
  uint64_t v18;
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  id v24[23];
  _QWORD v25[99];

  v25[97] = 0;
  v25[98] = a1;
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v24);
  outlined init with copy of Store((uint64_t)v25, (uint64_t)v21);
  outlined destroy of Dependencies(v24);
  v12 = v22;
  v11 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v11 + 48))(v20, v12);
  if (v10)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  v6 = ServiceBuilder.userLookupService(for:)(a1);
  v19[3] = type metadata accessor for GroupKitUserLookupManager();
  v19[4] = &protocol witness table for GroupKitUserLookupManager;
  v19[0] = v6;
  outlined init with copy of Dependencies(v9 + 16, (uint64_t)v17);
  outlined init with copy of CryptographyServiceProviding((uint64_t)&v18, (uint64_t)v16);
  outlined destroy of Dependencies(v17);
  outlined init with copy of Client(a1, (uint64_t)v14);
  v5 = ServiceBuilder.keyDistributionService(for:)((uint64_t)v14);
  outlined destroy of Client?((uint64_t)v14);
  v15[3] = type metadata accessor for KeyDistributionService();
  v15[4] = &protocol witness table for KeyDistributionService;
  v15[0] = v5;
  outlined init with copy of Client(a1, (uint64_t)v13);
  v4 = ServiceBuilder.networkService(for:)((uint64_t)v13);
  outlined destroy of Client?((uint64_t)v13);
  GroupService.init(userStore:userLookupManager:cryptographyService:keyDistributionService:networkService:)((uint64_t)v20, (uint64_t)v19, (uint64_t)v16, (uint64_t)v15, v4, (uint64_t)&protocol witness table for NetworkingService, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
}

uint64_t ServiceBuilder.groupFetcher(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];
  id v12[55];
  uint64_t v13;
  _QWORD v14[5];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  id v18[23];
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  id v24[23];
  uint64_t v25;
  _BYTE v26[40];
  uint64_t v27;
  uint64_t v28;

  v27 = 0;
  v28 = a1;
  outlined init with copy of Client(a1, (uint64_t)v26);
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v24);
  outlined init with copy of Store((uint64_t)&v25, (uint64_t)v21);
  outlined destroy of Dependencies(v24);
  v10 = v22;
  v9 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v9 + 64))(v20, v10);
  if (v8)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {
    outlined init with copy of Dependencies(v7 + 16, (uint64_t)v18);
    outlined init with copy of Store((uint64_t)&v19, (uint64_t)v15);
    outlined destroy of Dependencies(v18);
    v5 = v16;
    v4 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v4 + 56))(v14, v5);
    outlined init with copy of Dependencies(v7 + 16, (uint64_t)v12);
    outlined init with copy of CryptographyServiceProviding((uint64_t)&v13, (uint64_t)v11);
    outlined destroy of Dependencies(v12);
    GroupFetcher.init(client:groupStore:invitationStore:cryptoService:)(v26, v20, v14, v11, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
}

uint64_t ServiceBuilder.groupCreator(for:clientMessageBroadcaster:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19[120];
  _QWORD v20[5];
  _WORD v21[104];
  _QWORD v22[5];
  _QWORD v23[17];
  _BYTE v24[40];
  id v25[55];
  uint64_t v26;
  _QWORD v27[24];
  _QWORD v28[5];
  _QWORD v29[5];
  _BYTE v30[40];
  _QWORD v31[5];
  _QWORD v32[5];
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  id v36[23];
  uint64_t v37;
  _QWORD v38[5];
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  id v42[23];
  uint64_t v43;
  _BYTE v44[40];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  MEMORY[0x24BDAC7A8](a1);
  v14 = v3;
  v15 = v4;
  v16 = v5;
  v47 = v4;
  v46 = v5;
  v45 = v1;
  outlined init with copy of Client(v4, (uint64_t)v44);
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v42);
  outlined init with copy of Store((uint64_t)&v43, (uint64_t)v39);
  outlined destroy of Dependencies(v42);
  v18 = v40;
  v17 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v17 + 48))(v38, v18);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  }
  else
  {
    outlined init with copy of Dependencies(v1 + 16, (uint64_t)v36);
    outlined init with copy of Store((uint64_t)&v37, (uint64_t)v33);
    outlined destroy of Dependencies(v36);
    v13 = v34;
    v12 = v35;
    __swift_project_boxed_opaque_existential_1(v33, v34);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v12 + 64))(v32, v13);
    outlined init with copy of Client(v15, (uint64_t)v30);
    v11 = ServiceBuilder.keyDistributionService(for:)((uint64_t)v30);
    outlined destroy of Client?((uint64_t)v30);
    v31[3] = type metadata accessor for KeyDistributionService();
    v31[4] = &protocol witness table for KeyDistributionService;
    v31[0] = v11;
    v9 = ServiceBuilder.accountManager()();
    v29[3] = type metadata accessor for DaemonAccountManager();
    v29[4] = &protocol witness table for DaemonAccountManager;
    v29[0] = v9;
    v10 = ServiceBuilder.userLookupService(for:)(v15);
    v28[3] = type metadata accessor for GroupKitUserLookupManager();
    v28[4] = &protocol witness table for GroupKitUserLookupManager;
    v28[0] = v10;
    ServiceBuilder.groupService(for:)(v15, v27);
    outlined init with copy of Dependencies(v1 + 16, (uint64_t)v25);
    outlined init with copy of CryptographyServiceProviding((uint64_t)&v26, (uint64_t)v24);
    outlined destroy of Dependencies(v25);
    ServiceBuilder.metadataService(for:)(v15, v23);
    v7 = ServiceBuilder.peerMessagingService.getter();
    v22[3] = type metadata accessor for PeerMessagingService();
    v22[4] = &protocol witness table for PeerMessagingService;
    v22[0] = v7;
    swift_retain();
    outlined init with copy of Client(v15, (uint64_t)v20);
    ServiceBuilder.metrics(client:)(v20, v21);
    outlined destroy of Client?((uint64_t)v20);
    outlined init with copy of Dependencies(v1 + 16, (uint64_t)v19);
    v8 = v19[22];
    outlined destroy of Dependencies(v19);
    GroupCreator.init(client:userStore:groupStore:keyDistributionService:accountManager:userLookupManager:groupService:cryptoService:metadataService:peerMessagingService:broadcaster:metrics:maxRetries:)(v44, v38, v32, v31, v29, v28, v27, v24, v14, v23, v22, v16, v21, (uint64_t)v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
}

uint64_t ServiceBuilder.groupUpdater(for:broadcaster:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[40];
  id v20[55];
  uint64_t v21;
  _QWORD v22[5];
  _WORD v23[104];
  _QWORD v24[5];
  _QWORD v25[5];
  _QWORD v26[5];
  _QWORD v27[17];
  _QWORD v28[24];
  _QWORD v29[5];
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  id v33[23];
  uint64_t v34;
  _QWORD v35[5];
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  id v39[23];
  uint64_t v40;
  _QWORD v41[5];
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  id v45[23];
  uint64_t v46;
  _BYTE v47[40];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v3 = MEMORY[0x24BDAC7A8](a1);
  v14 = v4;
  v15 = v3;
  v16 = v5;
  v50 = v3;
  v49 = v5;
  v48 = v1;
  outlined init with copy of Client(v3, (uint64_t)v47);
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v45);
  outlined init with copy of Store((uint64_t)&v46, (uint64_t)v42);
  outlined destroy of Dependencies(v45);
  v18 = v43;
  v17 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v17 + 48))(v41, v18);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  }
  else
  {
    outlined init with copy of Dependencies(v1 + 16, (uint64_t)v39);
    outlined init with copy of Store((uint64_t)&v40, (uint64_t)v36);
    outlined destroy of Dependencies(v39);
    v13 = v37;
    v12 = v38;
    __swift_project_boxed_opaque_existential_1(v36, v37);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v12 + 64))(v35, v13);
    outlined init with copy of Dependencies(v1 + 16, (uint64_t)v33);
    outlined init with copy of Store((uint64_t)&v34, (uint64_t)v30);
    outlined destroy of Dependencies(v33);
    v11 = v31;
    v10 = v32;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v10 + 32))(v29, v11);
    ServiceBuilder.groupService(for:)(v15, v28);
    ServiceBuilder.metadataService(for:)(v15, v27);
    v9 = ServiceBuilder.userLookupService(for:)(v15);
    v26[3] = type metadata accessor for GroupKitUserLookupManager();
    v26[4] = &protocol witness table for GroupKitUserLookupManager;
    v26[0] = v9;
    v7 = ServiceBuilder.accountManager()();
    v25[3] = type metadata accessor for DaemonAccountManager();
    v25[4] = &protocol witness table for DaemonAccountManager;
    v25[0] = v7;
    v8 = ServiceBuilder.peerMessagingService.getter();
    v24[3] = type metadata accessor for PeerMessagingService();
    v24[4] = &protocol witness table for PeerMessagingService;
    v24[0] = v8;
    swift_retain();
    outlined init with copy of Client(v15, (uint64_t)v22);
    ServiceBuilder.metrics(client:)(v22, v23);
    outlined destroy of Client?((uint64_t)v22);
    outlined init with copy of Dependencies(v1 + 16, (uint64_t)v20);
    outlined init with copy of CryptographyServiceProviding((uint64_t)&v21, (uint64_t)v19);
    outlined destroy of Dependencies(v20);
    GroupUpdater.init(client:userStore:groupStore:metadataStore:groupService:metadataService:userLookup:accountManager:peerMessagingService:broadcaster:metrics:cryptoService:)(v47, v41, v35, v29, v28, v27, v26, v25, v14, v24, v16, v23, v19);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  }
}

uint64_t ServiceBuilder.groupRefresher(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  _QWORD v11[5];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  id v15[23];
  uint64_t v16;
  _QWORD v17[5];
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  id v21[23];
  uint64_t v22;
  _QWORD v23[17];
  _QWORD v24[26];

  v24[24] = 0;
  v24[25] = a1;
  result = ServiceBuilder.groupService(for:)(a1, v24);
  if (!v2)
  {
    ServiceBuilder.metadataService(for:)(a1, v23);
    outlined init with copy of Dependencies(v10 + 16, (uint64_t)v21);
    outlined init with copy of Store((uint64_t)&v22, (uint64_t)v18);
    outlined destroy of Dependencies(v21);
    v7 = v19;
    v6 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v6 + 64))(v17, v7);
    outlined init with copy of Dependencies(v10 + 16, (uint64_t)v15);
    outlined init with copy of Store((uint64_t)&v16, (uint64_t)v12);
    outlined destroy of Dependencies(v15);
    v5 = v13;
    v4 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v4 + 48))(v11, v5);
    GroupRefresher.init(groupService:metadataService:groupStore:userStore:)(v24, v23, v17, v11, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  return result;
}

uint64_t ServiceBuilder.groupRepairService(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  _QWORD v13[5];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  id v17[23];
  uint64_t v18;
  _QWORD v19[5];
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  id v23[23];
  uint64_t v24;
  _QWORD v25[5];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  id v29[23];
  uint64_t v30;
  _QWORD v31[17];
  _QWORD v32[26];

  v32[24] = 0;
  v32[25] = a1;
  result = ServiceBuilder.groupService(for:)(a1, v32);
  if (!v2)
  {
    ServiceBuilder.metadataService(for:)(a1, v31);
    outlined init with copy of Dependencies(v12 + 16, (uint64_t)v29);
    outlined init with copy of Store((uint64_t)&v30, (uint64_t)v26);
    outlined destroy of Dependencies(v29);
    v9 = v27;
    v8 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v8 + 64))(v25, v9);
    outlined init with copy of Dependencies(v12 + 16, (uint64_t)v23);
    outlined init with copy of Store((uint64_t)&v24, (uint64_t)v20);
    outlined destroy of Dependencies(v23);
    v7 = v21;
    v6 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v6 + 56))(v19, v7);
    outlined init with copy of Dependencies(v12 + 16, (uint64_t)v17);
    outlined init with copy of Store((uint64_t)&v18, (uint64_t)v14);
    outlined destroy of Dependencies(v17);
    v5 = v15;
    v4 = v16;
    __swift_project_boxed_opaque_existential_1(v14, v15);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v4 + 48))(v13, v5);
    GroupRepairService.init(groupService:metadataService:groupStore:invitationStore:userStore:)(v32, v31, v25, v19, v13, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  return result;
}

uint64_t ServiceBuilder.groupDeletion(for:broadcaster:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  _WORD v13[104];
  _QWORD v14[5];
  _QWORD v15[24];
  _QWORD v16[5];
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  id v20[23];
  uint64_t v21;
  _BYTE v22[40];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v23 = 0;
  v25 = a1;
  v24 = a2;
  outlined init with copy of Client(a1, (uint64_t)v22);
  outlined init with copy of Dependencies(v3 + 16, (uint64_t)v20);
  outlined init with copy of Store((uint64_t)&v21, (uint64_t)v17);
  outlined destroy of Dependencies(v20);
  v11 = v18;
  v10 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v10 + 64))(v16, v11);
  if (v9)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    ServiceBuilder.groupService(for:)(a1, v15);
    v5 = ServiceBuilder.peerMessagingService.getter();
    v14[3] = type metadata accessor for PeerMessagingService();
    v14[4] = &protocol witness table for PeerMessagingService;
    v14[0] = v5;
    swift_retain();
    outlined init with copy of Client(a1, (uint64_t)v12);
    ServiceBuilder.metrics(client:)(v12, v13);
    outlined destroy of Client?((uint64_t)v12);
    GroupDeletion.init(client:groupStore:groupService:peerMessagingService:broadcaster:metrics:)(v22, v16, v15, v14, a2, v13, a3);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
}

uint64_t ServiceBuilder.memberKeyFetcher(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];
  id v12[105];
  uint64_t v13;
  _QWORD v14[5];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  id v18[23];
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  id v24[23];
  uint64_t v25;
  _BYTE v26[40];
  uint64_t v27;
  uint64_t v28;

  v27 = 0;
  v28 = a1;
  outlined init with copy of Client(a1, (uint64_t)v26);
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v24);
  outlined init with copy of Store((uint64_t)&v25, (uint64_t)v21);
  outlined destroy of Dependencies(v24);
  v10 = v22;
  v9 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v9 + 48))(v20, v10);
  if (v8)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {
    outlined init with copy of Dependencies(v7 + 16, (uint64_t)v18);
    outlined init with copy of Store((uint64_t)&v19, (uint64_t)v15);
    outlined destroy of Dependencies(v18);
    v5 = v16;
    v4 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v4 + 64))(v14, v5);
    outlined init with copy of Dependencies(v7 + 16, (uint64_t)v12);
    outlined init with copy of CryptoKeyProviding((uint64_t)&v13, (uint64_t)v11);
    outlined destroy of Dependencies(v12);
    MemberKeyFetcher.init(client:userStore:groupStore:cryptoKeyService:)(v26, v20, v14, v11, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
}

uint64_t ServiceBuilder.groupKeyFetcher(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[40];
  id v12[105];
  uint64_t v13;
  _QWORD v14[5];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  id v18[23];
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  id v24[23];
  uint64_t v25;
  _BYTE v26[40];
  uint64_t v27;
  uint64_t v28;

  v27 = 0;
  v28 = a1;
  outlined init with copy of Client(a1, (uint64_t)v26);
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v24);
  outlined init with copy of Store((uint64_t)&v25, (uint64_t)v21);
  outlined destroy of Dependencies(v24);
  v10 = v22;
  v9 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v9 + 48))(v20, v10);
  if (v8)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {
    outlined init with copy of Dependencies(v7 + 16, (uint64_t)v18);
    outlined init with copy of Store((uint64_t)&v19, (uint64_t)v15);
    outlined destroy of Dependencies(v18);
    v5 = v16;
    v4 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v4 + 64))(v14, v5);
    outlined init with copy of Dependencies(v7 + 16, (uint64_t)v12);
    outlined init with copy of CryptoKeyProviding((uint64_t)&v13, (uint64_t)v11);
    outlined destroy of Dependencies(v12);
    GroupKeyFetcher.init(client:userStore:groupStore:cryptoKeyService:)(v26, v20, v14, v11, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
}

uint64_t ServiceBuilder.commandLineService(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[40];
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[24];
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  id v24[23];
  uint64_t v25;
  _QWORD v26[5];
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  id v30[23];
  uint64_t v31;
  _QWORD v32[5];
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  id v36[23];
  _QWORD v37[99];

  v37[97] = 0;
  v37[98] = a1;
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v36);
  outlined init with copy of Store((uint64_t)v37, (uint64_t)v33);
  outlined destroy of Dependencies(v36);
  v15 = v34;
  v14 = v35;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v14 + 64))(v32, v15);
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  outlined init with copy of Dependencies(v12 + 16, (uint64_t)v30);
  outlined init with copy of Store((uint64_t)&v31, (uint64_t)v27);
  outlined destroy of Dependencies(v30);
  v9 = v28;
  v8 = v29;
  __swift_project_boxed_opaque_existential_1(v27, v28);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v8 + 48))(v26, v9);
  outlined init with copy of Dependencies(v12 + 16, (uint64_t)v24);
  outlined init with copy of Store((uint64_t)&v25, (uint64_t)v21);
  outlined destroy of Dependencies(v24);
  v7 = v22;
  v6 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v6 + 56))(v20, v7);
  ServiceBuilder.groupService(for:)(a1, v19);
  v4 = ServiceBuilder.peerMessagingService.getter();
  v18[3] = type metadata accessor for PeerMessagingService();
  v18[4] = &protocol witness table for PeerMessagingService;
  v18[0] = v4;
  outlined init with copy of Client(a1, (uint64_t)v16);
  v5 = ServiceBuilder.keyDistributionService(for:)((uint64_t)v16);
  outlined destroy of Client?((uint64_t)v16);
  v17[3] = type metadata accessor for KeyDistributionService();
  v17[4] = &protocol witness table for KeyDistributionService;
  v17[0] = v5;
  CommandLineService.init(groupStore:userStore:invitationStore:groupService:peerMessaingService:keyDistributionService:)(v32, v26, v20, v19, v18, v17, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
}

void *ServiceBuilder.profileService(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v6[40];
  _BYTE v7[40];
  id v8[100];
  uint64_t v9;
  _BYTE v10[40];
  id v11[38];
  _QWORD v12[84];

  v12[82] = 0;
  v12[83] = a1;
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v11);
  outlined init with copy of AccountStore((uint64_t)v12, (uint64_t)v10);
  outlined destroy of Dependencies(v11);
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v8);
  outlined init with copy of ProfilePictureFetching((uint64_t)&v9, (uint64_t)v7);
  outlined destroy of Dependencies(v8);
  outlined init with copy of Client(a1, (uint64_t)v6);
  return ProfileService.init(accountStore:profilePictureFetcher:client:)(v10, v7, v6, a2);
}

uint64_t ServiceBuilder.managedMemberService()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[40];
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  id v12[23];
  uint64_t v13;
  _QWORD v14[6];

  v14[5] = 0;
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v12);
  outlined init with copy of Store((uint64_t)&v13, (uint64_t)v9);
  outlined destroy of Dependencies(v12);
  v7 = v10;
  v6 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v6 + 64))(v14, v7);
  if (v5)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  outlined init with copy of GroupStore((uint64_t)v14, (uint64_t)v8);
  swift_retain();
  ManagedMemberService.init(groupStore:serviceBuilder:)(v8, v4, a1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t closure #1 in ServiceBuilder.readinessChecker()(uint64_t a1)
{
  _QWORD *v1;

  v1[657] = a1;
  v1[654] = v1;
  v1[655] = 0;
  v1[656] = 0;
  memset(v1 + 602, 0, 0xC0uLL);
  v1[655] = a1 + 16;
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBuilder.readinessChecker()()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];

  *(_QWORD *)(v0 + 5232) = v0;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 5264) = Strong;
  v11 = Strong;
  swift_endAccess();
  if (!v11)
    return (*(uint64_t (**)(void))(*(_QWORD *)(v10 + 5232) + 8))();
  *(_QWORD *)(v10 + 5248) = v11;
  outlined init with copy of Dependencies(v11 + 16, v10 + 16);
  outlined init with copy of Store(v10 + 240, v10 + 5008);
  outlined destroy of Dependencies((id *)(v10 + 16));
  v9 = *(_QWORD *)(v10 + 5032);
  v8 = *(_QWORD *)(v10 + 5040);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v10 + 5008), v9);
  (*(void (**)(uint64_t))(v8 + 64))(v9);
  outlined init with copy of Dependencies(v11 + 16, v10 + 976);
  outlined init with copy of Store(v10 + 1200, v10 + 5088);
  outlined destroy of Dependencies((id *)(v10 + 976));
  v7 = *(_QWORD *)(v10 + 5112);
  v6 = *(_QWORD *)(v10 + 5120);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v10 + 5088), v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v6 + 56))(v12, v7);
  outlined init with copy of Dependencies(v11 + 16, v10 + 1936);
  v4 = *(_QWORD *)(v10 + 2512);
  v5 = *(void **)(v10 + 2520);
  swift_unknownObjectRetain();
  outlined destroy of Dependencies((id *)(v10 + 1936));
  outlined init with copy of Dependencies(v11 + 16, v10 + 2896);
  outlined init with copy of CryptographyServiceProviding(v10 + 3336, v10 + 5128);
  outlined destroy of Dependencies((id *)(v10 + 2896));
  outlined init with copy of Dependencies(v11 + 16, v10 + 3856);
  outlined init with copy of KeyValueStore(v10 + 3904, v10 + 5168);
  outlined destroy of Dependencies((id *)(v10 + 3856));
  ShadowGroupCleaner.init(groupStore:invitationStore:invitationService:cryptographyService:keyValueStore:)((const void *)(v10 + 5048), v12, v4, v5, (const void *)(v10 + 5128), (const void *)(v10 + 5168), (Swift::String *)(v10 + 4816));
  __swift_destroy_boxed_opaque_existential_1(v10 + 5088);
  __swift_destroy_boxed_opaque_existential_1(v10 + 5008);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v10 + 5272) = v2;
  *v2 = *(_QWORD *)(v10 + 5232);
  v2[1] = closure #1 in ServiceBuilder.readinessChecker();
  return ShadowGroupCleaner.cleanShadowGroups()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 5232) = *v1;
  *(_QWORD *)(v2 + 5280) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 5232) = v0;
  outlined destroy of ShadowGroupCleaner(v0 + 4816);
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 5232) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 5232) = v0;
  outlined destroy of ShadowGroupCleaner(v0 + 4816);
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 5232) + 8))();
}

uint64_t partial apply for closure #1 in ServiceBuilder.readinessChecker()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = partial apply for closure #1 in ServiceBuilder.readinessChecker();
  return closure #1 in ServiceBuilder.readinessChecker()(v3);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D4A6750()
{
  uint64_t v0;
  uint64_t v2;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  if (*(_QWORD *)(v0 + 128))
    __swift_destroy_boxed_opaque_existential_1(v2 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + 232))
    swift_release();
  return swift_deallocObject();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [ReadinessChecking]()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DeviceUnlockReadinessCheck(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t outlined destroy of AccountReadinessCheck(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of FeatureReadinessCheck(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
}

_BYTE *ServiceBuilder.readinessCheckerForSignOut()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD v13[5];
  _WORD v14[104];
  uint64_t v15;
  _BYTE v16[40];
  id v17[28];
  uint64_t v18;
  _BYTE v19[40];
  _BYTE v20[40];
  id v21[23];
  uint64_t v22;
  _BYTE v23[40];
  _BYTE v24[40];
  id v25[95];
  uint64_t v26;
  _BYTE v27[40];
  _BYTE v28[40];
  id v29;
  uint64_t v30;
  _BYTE __b[40];
  uint64_t v32;

  MEMORY[0x24BDAC7A8](a1);
  v12 = v2;
  memset(__b, 0, sizeof(__b));
  memset(v27, 0, sizeof(v27));
  memset(v23, 0, sizeof(v23));
  memset(v19, 0, sizeof(v19));
  v32 = v1;
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)&v29);
  outlined init with copy of FeatureChecking((uint64_t)&v30, (uint64_t)v28);
  outlined destroy of Dependencies(&v29);
  FeatureReadinessCheck.init(featureFlags:)(v28, __b);
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v25);
  outlined init with copy of DeviceInfoProviding((uint64_t)&v26, (uint64_t)v24);
  outlined destroy of Dependencies(v25);
  DeviceUnlockReadinessCheck.init(deviceInfo:)(v24, v27);
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v21);
  outlined init with copy of Store((uint64_t)&v22, (uint64_t)v20);
  outlined destroy of Dependencies(v21);
  LocalStoreLoader.init(store:)(v20, v23);
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v17);
  outlined init with copy of Store((uint64_t)&v18, (uint64_t)v16);
  outlined destroy of Dependencies(v17);
  LocalStoreLoader.init(store:)(v16, v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReadinessChecking);
  v11 = _allocateUninitializedArray<A>(_:)();
  v10 = v3;
  v3[3] = (uint64_t)&type metadata for FeatureReadinessCheck;
  v3[4] = (uint64_t)&protocol witness table for FeatureReadinessCheck;
  v4 = swift_allocObject();
  *v10 = v4;
  outlined init with copy of FeatureReadinessCheck((uint64_t)__b, v4 + 16);
  v10[8] = (uint64_t)&type metadata for DeviceUnlockReadinessCheck;
  v10[9] = (uint64_t)&protocol witness table for DeviceUnlockReadinessCheck;
  v5 = swift_allocObject();
  v10[5] = v5;
  outlined init with copy of DeviceUnlockReadinessCheck((uint64_t)v27, v5 + 16);
  v10[13] = (uint64_t)&type metadata for LocalStoreLoader;
  v10[14] = (uint64_t)&protocol witness table for LocalStoreLoader;
  v6 = swift_allocObject();
  v10[10] = v6;
  outlined init with copy of LocalStoreLoader((uint64_t)v23, v6 + 16);
  v10[18] = (uint64_t)&type metadata for LocalStoreLoader;
  v10[19] = (uint64_t)&protocol witness table for LocalStoreLoader;
  v7 = swift_allocObject();
  v10[15] = v7;
  outlined init with copy of LocalStoreLoader((uint64_t)v19, v7 + 16);
  _finalizeUninitializedArray<A>(_:)();
  v15 = v11;
  memset(v13, 0, sizeof(v13));
  ServiceBuilder.metrics(client:)(v13, v14);
  outlined destroy of Client?((uint64_t)v13);
  v12[3] = (uint64_t)&type metadata for ServiceReadinessChecker;
  v12[4] = (uint64_t)&protocol witness table for ServiceReadinessChecker;
  v8 = swift_allocObject();
  *v12 = v8;
  ServiceReadinessChecker.init(checkList:metrics:onReady:)(v11, v14, 0, 0, (_QWORD *)(v8 + 16));
  outlined destroy of LocalStoreLoader((uint64_t)v19);
  outlined destroy of LocalStoreLoader((uint64_t)v23);
  outlined destroy of DeviceUnlockReadinessCheck((uint64_t)v27);
  result = __b;
  outlined destroy of FeatureReadinessCheck((uint64_t)__b);
  return result;
}

uint64_t outlined init with copy of LocalStoreLoader(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of LocalStoreLoader(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t ServiceBuilder.accountNotificationService()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  id v14[23];
  uint64_t v15;
  _QWORD v16[5];
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  id v20[23];
  uint64_t v21;
  _BYTE v22[40];
  id v23[38];
  _QWORD v24[83];

  v24[82] = 0;
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v23);
  outlined init with copy of AccountStore((uint64_t)v24, (uint64_t)v22);
  outlined destroy of Dependencies(v23);
  outlined init with copy of Dependencies(v1 + 16, (uint64_t)v20);
  outlined init with copy of Store((uint64_t)&v21, (uint64_t)v17);
  outlined destroy of Dependencies(v20);
  v9 = v18;
  v8 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v8 + 48))(v16, v9);
  if (v7)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    outlined init with copy of Dependencies(v6 + 16, (uint64_t)v14);
    outlined init with copy of Store((uint64_t)&v15, (uint64_t)v11);
    outlined destroy of Dependencies(v14);
    v4 = v12;
    v3 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(v3 + 40))(v10, v4);
    AccountNotificationService.init(accountStore:userStore:groupBlobStore:)(v22, v16, v10, a1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
}

uint64_t ServiceBuilder.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of Dependencies((id *)(v0 + 16));
  outlined destroy of KeyDistributionService?();
  outlined destroy of [NSXPCListener]?();
  outlined destroy of PeerMessagingService?();
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of KeyDistributionService?()
{
  swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [NSXPCListener]?()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of PeerMessagingService?()
{
  swift_release();
}

uint64_t ServiceBuilder.__deallocating_deinit()
{
  ServiceBuilder.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ServiceBuilder()
{
  return objc_opt_self();
}

uint64_t method lookup function for ServiceBuilder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ServiceBuilder.__allocating_init(dependencies:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

_QWORD *outlined init with copy of [NSXPCListener](uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  v4 = *a1;
  swift_bridgeObjectRetain();
  result = a2;
  *a2 = v4;
  return result;
}

id @nonobjc NSXPCListener.init(machServiceName:)()
{
  id v1;
  id v2;
  id v3;

  v2 = (id)MEMORY[0x2426348B0]();
  v3 = objc_msgSend(v1, sel_initWithMachServiceName_);

  swift_bridgeObjectRelease();
  return v3;
}

uint64_t ManagedMemberService.ClientInfo.bundleIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

void ManagedMemberService.ClientInfo.priority.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16) & 1;
}

uint64_t ManagedMemberService.ClientInfo.hasEntitlement(for:)()
{
  return 1;
}

uint64_t ManagedMemberService.ClientInfo.init(bundleIdentifier:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t protocol witness for Client.bundleIdentifier.getter in conformance ManagedMemberService.ClientInfo()
{
  return ManagedMemberService.ClientInfo.bundleIdentifier.getter();
}

void protocol witness for Client.priority.getter in conformance ManagedMemberService.ClientInfo(_BYTE *a1@<X8>)
{
  ManagedMemberService.ClientInfo.priority.getter(a1);
}

uint64_t protocol witness for Client.isOwner.getter in conformance ManagedMemberService.ClientInfo(uint64_t a1, uint64_t a2)
{
  return Client.isOwner.getter(a1, a2) & 1;
}

uint64_t protocol witness for Client.hasEntitlement(for:) in conformance ManagedMemberService.ClientInfo()
{
  return ManagedMemberService.ClientInfo.hasEntitlement(for:)() & 1;
}

uint64_t ManagedMemberService.groupStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupStore(v1, a1);
}

uint64_t ManagedMemberService.serviceBuilder.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 40);
  swift_retain();
  return v2;
}

uint64_t ManagedMemberService.performMembershipManagement()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 256) = v0;
  *(_QWORD *)(v1 + 168) = v1;
  *(_QWORD *)(v1 + 176) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_BYTE *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 240) = 0;
  v2 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v1 + 264) = v2;
  *(_QWORD *)(v1 + 272) = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v1 + 280) = swift_task_alloc();
  *(_QWORD *)(v1 + 176) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, uint64_t, uint64_t);

  v5 = v0[35];
  v4 = v0[34];
  v6 = v0[33];
  v7 = v0[32];
  v0[21] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Membership managed received", 0x1BuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ManagedMemberService.swift", 0x27uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  v1 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[36] = v1;
  v1(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of GroupStore(v7, (uint64_t)(v0 + 2));
  v9 = v0[5];
  v10 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v9);
  v11 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 + 24) + **(int **)(v10 + 24));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 296) = v2;
  *v2 = *(_QWORD *)(v8 + 168);
  v2[1] = ManagedMemberService.performMembershipManagement();
  return v11(0, v9, v10);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v1 = v0[39];
  v2 = v0[38];
  v0[21] = v0;
  v0[23] = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKGroup]);
  lazy protocol witness table accessor for type [GPKGroup] and conformance [A]();
  result = _ArrayProtocol.filter(_:)();
  v26 = result;
  v0[40] = result;
  if (!v1)
  {
    __swift_destroy_boxed_opaque_existential_1(v25 + 16);
    *(_QWORD *)(v25 + 192) = v26;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v25 + 200) = v26;
    lazy protocol witness table accessor for type [GPKGroup] and conformance [A]();
    v24 = Collection.isEmpty.getter();
    outlined destroy of [GPKGroup]();
    if ((v24 & 1) != 0)
    {
      v23 = *(void (**)(uint64_t, uint64_t))(v25 + 288);
      v21 = *(_QWORD *)(v25 + 280);
      v22 = *(_QWORD *)(v25 + 264);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No groups requires membership management, so nothing to do at this time", 0x47uLL, 1);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ManagedMemberService.swift", 0x27uLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
      gpklog(_:type:fileID:line:subsystem:)();
      v23(v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      *(_QWORD *)(v25 + 208) = v26;
      Collection<>.makeIterator()();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKGroup]>);
      IndexingIterator.next()();
      v20 = *(_QWORD *)(v25 + 216);
      *(_QWORD *)(v25 + 328) = v20;
      if (v20)
      {
        *(_QWORD *)(v25 + 232) = v20;
        v4 = dispatch thunk of GPKGroup.groupDomain.getter();
        ManagedMemberService.ClientInfo.init(bundleIdentifier:)(v4, v5, (uint64_t)&v27);
        v17 = v27;
        v6 = v27;
        v18 = v28;
        *(_QWORD *)(v25 + 336) = v28;
        v7 = v29;
        v19 = v29;
        *(_QWORD *)(v25 + 96) = v6;
        *(_QWORD *)(v25 + 104) = v18;
        *(_BYTE *)(v25 + 112) = v7 & 1;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v25 + 80) = &type metadata for ManagedMemberService.ClientInfo;
        *(_QWORD *)(v25 + 88) = &protocol witness table for ManagedMemberService.ClientInfo;
        *(_QWORD *)(v25 + 56) = v17;
        *(_QWORD *)(v25 + 64) = v18;
        *(_BYTE *)(v25 + 72) = v19 & 1;
        v8 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v25 + 344) = v8;
        *v8 = *(_QWORD *)(v25 + 168);
        v8[1] = ManagedMemberService.performMembershipManagement();
        return ManagedMemberService.performMembershipManagement(for:client:)(v20, v25 + 56);
      }
      v16 = *(_QWORD *)(v25 + 320);
      v15 = *(void (**)(uint64_t, uint64_t))(v25 + 288);
      v13 = *(_QWORD *)(v25 + 280);
      v14 = *(_QWORD *)(v25 + 264);
      outlined destroy of IndexingIterator<[GPKGroup]>();
      *(_QWORD *)(v25 + 136) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v25 + 144) = v9;
      v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Membership management performed for all groups(", 0x2FuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v10);
      swift_bridgeObjectRelease();
      v11 = type metadata accessor for GPKGroup();
      *(_QWORD *)(v25 + 224) = MEMORY[0x242634AC0](v16, v11);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", 1uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ManagedMemberService.swift", 0x27uLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
      gpklog(_:type:fileID:line:subsystem:)();
      v15(v13, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v25 + 168) + 8))();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 168) = *v1;
  v4 = v2 + 56;
  *(_QWORD *)(v2 + 352) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1(v4);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v0[21] = v0;
  swift_bridgeObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKGroup]>);
  IndexingIterator.next()();
  v18 = v0[27];
  v0[41] = v18;
  if (v18)
  {
    *(_QWORD *)(v17 + 232) = v18;
    v1 = dispatch thunk of GPKGroup.groupDomain.getter();
    ManagedMemberService.ClientInfo.init(bundleIdentifier:)(v1, v2, (uint64_t)&v19);
    v14 = v19;
    v3 = v19;
    v15 = v20;
    *(_QWORD *)(v17 + 336) = v20;
    v16 = v21;
    *(_QWORD *)(v17 + 96) = v3;
    *(_QWORD *)(v17 + 104) = v15;
    *(_BYTE *)(v17 + 112) = v16 & 1;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v17 + 80) = &type metadata for ManagedMemberService.ClientInfo;
    *(_QWORD *)(v17 + 88) = &protocol witness table for ManagedMemberService.ClientInfo;
    *(_QWORD *)(v17 + 56) = v14;
    *(_QWORD *)(v17 + 64) = v15;
    *(_BYTE *)(v17 + 72) = v16 & 1;
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v17 + 344) = v4;
    *v4 = *(_QWORD *)(v17 + 168);
    v4[1] = ManagedMemberService.performMembershipManagement();
    return ManagedMemberService.performMembershipManagement(for:client:)(v18, v17 + 56);
  }
  else
  {
    v13 = *(_QWORD *)(v17 + 320);
    v12 = *(void (**)(uint64_t, uint64_t))(v17 + 288);
    v10 = *(_QWORD *)(v17 + 280);
    v11 = *(_QWORD *)(v17 + 264);
    outlined destroy of IndexingIterator<[GPKGroup]>();
    *(_QWORD *)(v17 + 136) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v17 + 144) = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Membership management performed for all groups(", 0x2FuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    v8 = type metadata accessor for GPKGroup();
    *(_QWORD *)(v17 + 224) = MEMORY[0x242634AC0](v13, v8);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", 1uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ManagedMemberService.swift", 0x27uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
    gpklog(_:type:fileID:line:subsystem:)();
    v12(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v17 + 168) + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 168) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 168) + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v26 = (void *)v0[44];
  v25 = (void (*)(uint64_t, uint64_t))v0[36];
  v23 = v0[35];
  v24 = v0[33];
  v0[21] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v1 = v26;
  v0[30] = v26;
  v0[19] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[20] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error updating group: ", 0x16uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v0[31] = v26;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ManagedMemberService.swift", 0x27uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v23);
  gpklog(_:type:fileID:line:subsystem:)();
  v25(v23, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKGroup]>);
  IndexingIterator.next()();
  v27 = v0[27];
  v0[41] = v27;
  if (v27)
  {
    *(_QWORD *)(v22 + 232) = v27;
    v5 = dispatch thunk of GPKGroup.groupDomain.getter();
    ManagedMemberService.ClientInfo.init(bundleIdentifier:)(v5, v6, (uint64_t)&v28);
    v19 = v28;
    v7 = v28;
    v20 = v29;
    *(_QWORD *)(v22 + 336) = v29;
    v8 = v30;
    v21 = v30;
    *(_QWORD *)(v22 + 96) = v7;
    *(_QWORD *)(v22 + 104) = v20;
    *(_BYTE *)(v22 + 112) = v8 & 1;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v22 + 80) = &type metadata for ManagedMemberService.ClientInfo;
    *(_QWORD *)(v22 + 88) = &protocol witness table for ManagedMemberService.ClientInfo;
    *(_QWORD *)(v22 + 56) = v19;
    *(_QWORD *)(v22 + 64) = v20;
    *(_BYTE *)(v22 + 72) = v21 & 1;
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v22 + 344) = v9;
    *v9 = *(_QWORD *)(v22 + 168);
    v9[1] = ManagedMemberService.performMembershipManagement();
    return ManagedMemberService.performMembershipManagement(for:client:)(v27, v22 + 56);
  }
  else
  {
    v18 = *(_QWORD *)(v22 + 320);
    v17 = *(void (**)(uint64_t, uint64_t))(v22 + 288);
    v15 = *(_QWORD *)(v22 + 280);
    v16 = *(_QWORD *)(v22 + 264);
    outlined destroy of IndexingIterator<[GPKGroup]>();
    *(_QWORD *)(v22 + 136) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v22 + 144) = v11;
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Membership management performed for all groups(", 0x2FuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    v13 = type metadata accessor for GPKGroup();
    *(_QWORD *)(v22 + 224) = MEMORY[0x242634AC0](v18, v13);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(")", 1uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ManagedMemberService.swift", 0x27uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v15);
    gpklog(_:type:fileID:line:subsystem:)();
    v17(v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v22 + 168) + 8))();
  }
}

uint64_t ManagedMemberService.performMembershipManagement()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[21] = *v2;
  v3[38] = a1;
  v3[39] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in ManagedMemberService.performMembershipManagement()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  void (*v7)(_BYTE *, _QWORD);
  _BYTE v9[12];
  int v10;
  int v11;
  int v12;
  void (*v13)(_BYTE *, char *, uint64_t);
  void (*v14)(_BYTE *, uint64_t);
  int v15;
  int v16;
  char *v17;
  unsigned int v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v32 = a1;
  v45 = 0;
  v23 = type metadata accessor for GPKMemberRole();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v23);
  v26 = &v9[-v25];
  v27 = (v1 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v9[-v25]);
  v28 = &v9[-v27];
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKMemberRole?, GPKMemberRole?));
  v30 = (*(_QWORD *)(*(_QWORD *)(v29 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v29);
  v31 = &v9[-v30];
  v33 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKMemberRole?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v32);
  v34 = &v9[-v33];
  v35 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v2);
  v36 = &v9[-v35];
  v37 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (uint64_t *)MEMORY[0x24BDAC7A8](v4);
  v38 = &v9[-v37];
  v42 = *v6;
  v45 = v42;
  v41 = dispatch thunk of GPKGroup.managedMembers.getter();
  swift_bridgeObjectRetain();
  v40 = &v44;
  v44 = v41;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v43 = Collection.isEmpty.getter();
  outlined destroy of [GPKMember]();
  swift_bridgeObjectRelease();
  swift_retain();
  if ((v43 & 1) != 0)
  {
    v12 = 0;
    goto LABEL_15;
  }
  v22 = dispatch thunk of GPKGroup.meMember.getter();
  if (v22)
  {
    v21 = v22;
    v20 = v22;
    dispatch thunk of GPKMember.role.getter();
    swift_release();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v38, 0, 1, v23);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v38, 1, 1, v23);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v24 + 104))(v36, *MEMORY[0x24BE3DAB8], v23);
  v7 = *(void (**)(_BYTE *, _QWORD))(v24 + 56);
  v18 = 1;
  v7(v36, 0);
  v17 = &v31[*(int *)(v29 + 48)];
  outlined init with copy of GPKMemberRole?(v38, v31);
  outlined init with copy of GPKMemberRole?(v36, v17);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v19(v31, v18, v23) == 1)
  {
    if (v19(v17, 1, v23) != 1)
      goto LABEL_12;
    outlined destroy of GPKMemberRole?((uint64_t)v31);
    v16 = 1;
  }
  else
  {
    outlined init with copy of GPKMemberRole?(v31, v34);
    if (v19(v17, 1, v23) == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v24 + 8))(v34, v23);
LABEL_12:
      outlined destroy of (GPKMemberRole?, GPKMemberRole?)((uint64_t)v31);
      v16 = 0;
      goto LABEL_11;
    }
    v13 = *(void (**)(_BYTE *, char *, uint64_t))(v24 + 32);
    v13(v28, v34, v23);
    v13(v26, v17, v23);
    lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v14 = *(void (**)(_BYTE *, uint64_t))(v24 + 8);
    v14(v26, v23);
    v14(v28, v23);
    outlined destroy of GPKMemberRole?((uint64_t)v31);
    v16 = v15;
  }
LABEL_11:
  v11 = v16;
  outlined destroy of GPKMemberRole?((uint64_t)v36);
  outlined destroy of GPKMemberRole?((uint64_t)v38);
  v12 = v11;
LABEL_15:
  v10 = v12;
  swift_release();
  return v10 & 1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[GPKGroup]>()
{
  swift_bridgeObjectRelease();
}

uint64_t ManagedMemberService.performMembershipManagement(for:client:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[153] = v2;
  v3[152] = a2;
  v3[151] = a1;
  v3[134] = v3;
  v3[135] = 0;
  v3[136] = 0;
  v3[137] = 0;
  v3[140] = 0;
  v3[143] = 0;
  v3[144] = 0;
  v3[120] = 0;
  v3[121] = 0;
  v3[145] = 0;
  memset(v3 + 115, 0, 0x28uLL);
  bzero(v3 + 2, 0x360uLL);
  v3[146] = 0;
  v3[128] = 0;
  v3[129] = 0;
  v3[150] = 0;
  type metadata accessor for GPKMemberRole();
  v3[154] = swift_task_alloc();
  v4 = type metadata accessor for GPKUpdateGroupRequest.Member();
  v3[155] = v4;
  v3[156] = *(_QWORD *)(v4 - 8);
  v3[157] = swift_task_alloc();
  v3[158] = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  v3[159] = v5;
  v3[160] = *(_QWORD *)(v5 - 8);
  v3[161] = swift_task_alloc();
  v6 = type metadata accessor for GPKGroupID();
  v3[162] = v6;
  v3[163] = *(_QWORD *)(v6 - 8);
  v3[164] = swift_task_alloc();
  v3[135] = a1;
  v3[136] = a2;
  v3[137] = v2;
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[134] = *v3;
  v4[172] = v2;
  v4[173] = a1;
  v4[174] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ManagedMemberService.performMembershipManagement(for:client:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v0[134] = v0;
  v0[138] = dispatch thunk of GPKGroup.managedMembers.getter();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  v0[165] = v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, GPKMember));
  v13 = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  v0[166] = v13;
  v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in ManagedMemberService.performMembershipManagement(for:client:), 0, v10, v11, MEMORY[0x24BEE4078], v13, MEMORY[0x24BEE40A8], v12);
  outlined destroy of [GPKMember]();
  v9[139] = v14;
  v9[167] = type metadata accessor for GPKMember();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(String, GPKMember)]);
  lazy protocol witness table accessor for type [(String, GPKMember)] and conformance [A]();
  v7 = MEMORY[0x24BEE0D00];
  v6 = Dictionary.init<A>(uniqueKeysWithValues:)();
  v9[168] = v6;
  v9[140] = v6;
  v9[141] = dispatch thunk of GPKGroup.managedMembers.getter();
  v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #2 in ManagedMemberService.performMembershipManagement(for:client:), 0, v10, v7, MEMORY[0x24BEE4078], v13, MEMORY[0x24BEE40A8], v12);
  v4 = v9[152];
  outlined destroy of [GPKMember]();
  v9[142] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v3 = Set.init<A>(_:)();
  v9[169] = v3;
  v9[143] = v3;
  swift_retain();
  v5 = ServiceBuilder.userLookupService(for:)(v4);
  v9[170] = v5;
  swift_release();
  v9[144] = v5;
  v1 = (_QWORD *)swift_task_alloc();
  v9[171] = v1;
  *v1 = v9[134];
  v1[1] = ManagedMemberService.performMembershipManagement(for:client:);
  return GroupKitUserLookupManager.resolve(handles:ignoreCache:)(v3, 1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;

  v1 = v0[174];
  v26 = v0[173];
  v0[134] = v0;
  v0[120] = v26;
  v0[121] = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  type metadata accessor for GPKUserID();
  v27 = MEMORY[0x24263482C](v26, MEMORY[0x24BEE0D00]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
    v20 = v25[164];
    v19 = v25[163];
    v21 = v25[162];
    v23 = v25[161];
    v22 = v25[160];
    v24 = v25[159];
    v25[132] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v25[133] = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("None of the user's are resolved, so nothing to do for group at this time: ", 0x4AuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    dispatch thunk of GPKGroup.groupID.getter();
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ManagedMemberService.swift", 0x27uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v23);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v25[134] + 8))();
  }
  else
  {
    type metadata accessor for GPKUpdateGroupRequest();
    swift_retain();
    v18 = GPKUpdateGroupRequest.__allocating_init(group:)();
    v25[175] = v18;
    v25[145] = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    Dictionary.Keys.makeIterator()();
    swift_bridgeObjectRelease();
    memcpy(v25 + 115, v25 + 110, 0x28uLL);
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKUserID].Keys.Iterator);
      Dictionary.Keys.Iterator.next()();
      v16 = v25[122];
      v17 = v25[123];
      if (!v17)
        break;
      v25[128] = v16;
      v25[129] = v17;
      swift_bridgeObjectRetain();
      v25[130] = v16;
      v25[131] = v17;
      MEMORY[0x24263485C]();
      outlined destroy of String();
      v15 = v25[149];
      if (v15)
      {
        v12 = v25[158];
        v11 = v25[157];
        v10 = v25[156];
        v13 = v25[155];
        v25[150] = v15;
        dispatch thunk of GPKMember.handle.getter();
        dispatch thunk of GPKMember.role.getter();
        GPKUpdateGroupRequest.Member.init(handle:role:)();
        v9 = dispatch thunk of GPKMember.metadata.getter();
        GPKUpdateGroupRequest.Member.setMetadata(_:)((Swift::OpaquePointer)v9);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v11, v12, v13);
        dispatch thunk of GPKUpdateGroupRequest.addMember(_:)();
        v14 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
        v14(v11, v13);
        v14(v12, v13);
        swift_release();
      }
      swift_bridgeObjectRelease();
    }
    v6 = v25[172];
    v8 = v25[152];
    outlined destroy of [String : GPKUserID].Keys.Iterator();
    swift_retain();
    ServiceBuilder.groupUpdater(for:broadcaster:)(v8);
    swift_release();
    if (v6)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v25[134] + 8))();
    }
    else
    {
      v7 = (_QWORD *)swift_task_alloc();
      v25[176] = v7;
      *v7 = v25[134];
      v7[1] = ManagedMemberService.performMembershipManagement(for:client:);
      return GroupUpdater.updateGroup(with:)(v18);
    }
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t object;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t countAndFlagsBits;
  uint64_t v15;
  Class isa;
  id v17;
  id v18;
  Swift::String *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  char v30;

  v1 = v0[177];
  v21 = v0[164];
  v20 = v0[163];
  v22 = v0[162];
  v26 = v0[161];
  v25 = v0[160];
  v27 = v0[159];
  v0[134] = v0;
  v0[146] = v1;
  v0[124] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[125] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group updated with newly available members: ", 0x2CuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  dispatch thunk of GPKGroup.groupID.getter();
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v23 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v23(v21, v22);
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" - ", 3uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  dispatch thunk of GPKUpdateGroupRequest.addedMembers.getter();
  v24 = swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v0[147] = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKUpdateGroupRequest.Member].Keys);
  lazy protocol witness table accessor for type [String : GPKUpdateGroupRequest.Member].Keys and conformance [A : B].Keys();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [String : GPKUpdateGroupRequest.Member].Keys();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ManagedMemberService.swift", 0x27uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v26);
  gpklog(_:type:fileID:line:subsystem:)();
  v28 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v28(v26, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = dispatch thunk of GPKGroup.managedMembers.getter();
  swift_bridgeObjectRetain();
  v0[148] = v29;
  v30 = Collection.isEmpty.getter();
  outlined destroy of [GPKMember]();
  swift_bridgeObjectRelease();
  if ((v30 & 1) != 0)
  {
    countAndFlagsBits = v19[82]._countAndFlagsBits;
    v15 = v19[81]._countAndFlagsBits;
    object = (uint64_t)v19[80]._object;
    v11 = v19[79]._object;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("All managed members added group", 0x1FuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ManagedMemberService.swift", 0x27uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(object);
    gpklog(_:type:fileID:line:subsystem:)();
    v28(object, (uint64_t)v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    v17 = (id)static NSNotificationName.membershipManagementCompleted.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnyHashable, Any));
    _allocateUninitializedArray<A>(_:)();
    v13 = v6;
    v19[63] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupID", 7uLL, 1);
    v12 = MEMORY[0x24BEE0D00];
    _convertToAnyHashable<A>(_:)();
    dispatch thunk of GPKGroup.groupID.getter();
    v7 = GPKGroupID.hexString.getter();
    v13[8] = v12;
    v13[5] = v7;
    v13[6] = v8;
    v23(countAndFlagsBits, v15);
    _finalizeUninitializedArray<A>(_:)();
    outlined destroy of String();
    Dictionary.init(dictionaryLiteral:)();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v18, sel_postNotificationName_object_userInfo_, v17, 0, isa);

  }
  swift_release();
  outlined destroy of GroupUpdater(&v19[1]._countAndFlagsBits);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v19[67]._countAndFlagsBits + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 1072) = v0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 1072) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 1072) = v0;
  outlined destroy of GroupUpdater((_QWORD *)(v0 + 16));
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 1072) + 8))();
}

uint64_t ManagedMemberService.performMembershipManagement(for:client:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[134] = *v2;
  v3[177] = a1;
  v3[178] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in ManagedMemberService.performMembershipManagement(for:client:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v5 = *a1;
  *a2 = dispatch thunk of GPKMember.handle.getter();
  a2[1] = v2;
  result = swift_retain();
  a2[2] = v5;
  return result;
}

uint64_t closure #2 in ManagedMemberService.performMembershipManagement(for:client:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = dispatch thunk of GPKMember.handle.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

void *ManagedMemberService.init(groupStore:serviceBuilder:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *result;

  result = outlined init with take of GroupStore(a1, a3);
  a3[5] = a2;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ManagedMemberService(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for ManagedMemberService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return swift_release();
}

_QWORD *initializeWithCopy for ManagedMemberService(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v6;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v6 = a2[5];
  swift_retain();
  result = a1;
  a1[5] = v6;
  return result;
}

uint64_t assignWithCopy for ManagedMemberService(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  v4 = a2[5];
  swift_retain();
  *(_QWORD *)(a1 + 40) = v4;
  swift_release();
  return a1;
}

void *assignWithTake for ManagedMemberService(void *a1, const void *a2)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x30uLL);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedMemberService(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedMemberService(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedMemberService()
{
  return &type metadata for ManagedMemberService;
}

uint64_t initializeBufferWithCopyOfBuffer for ManagedMemberService.ClientInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
  return result;
}

uint64_t destroy for ManagedMemberService.ClientInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ManagedMemberService.ClientInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
  return result;
}

uint64_t assignWithCopy for ManagedMemberService.ClientInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
  return result;
}

uint64_t assignWithTake for ManagedMemberService.ClientInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16) & 1;
  return result;
}

uint64_t getEnumTagSinglePayload for ManagedMemberService.ClientInfo(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 17))
    {
      v5 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 8)))
        v4 = *(_QWORD *)(a1 + 8);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedMemberService.ClientInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 17);
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_BYTE *)(result + 16) = 0;
    if (a3 >= 0x7FFFFFFF)
      *v3 = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *v3 = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedMemberService.ClientInfo()
{
  return &type metadata for ManagedMemberService.ClientInfo;
}

uint64_t outlined destroy of (GPKMemberRole?, GPKMemberRole?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(void);

  v4 = type metadata accessor for GPKMemberRole();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(void))(v5 + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v6)(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v2 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKMemberRole?, GPKMemberRole?))
              + 48);
  if (!v6())
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  return a1;
}

uint64_t CachedKeyInfo.lastFetchedDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t CachedKeyInfo.keyInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for CachedKeyInfo();
  return outlined init with copy of UserKeyInfo(v1 + *(int *)(v2 + 20), a1);
}

uint64_t type metadata accessor for CachedKeyInfo()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CachedKeyInfo;
  if (!type metadata singleton initialization cache for CachedKeyInfo)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t CachedKeyInfo.init(lastFetchedDate:keyInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  const void *v4;
  _QWORD v6[2];
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _BYTE __dst[136];

  v13 = a3;
  v17 = a1;
  v9 = a2;
  v21 = 0;
  v20 = 0;
  v19 = 0;
  v6[1] = 0;
  v16 = type metadata accessor for Date();
  v15 = *(_QWORD *)(v16 - 8);
  v7 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v10 = (char *)v6 - v7;
  v12 = type metadata accessor for CachedKeyInfo();
  v8 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v17);
  v18 = (uint64_t)v6 - v8;
  v21 = (char *)v6 - v8;
  v20 = v3;
  v14 = __dst;
  v11 = 136;
  memcpy(__dst, v4, sizeof(__dst));
  v19 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v10, v17, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v18, v10, v16);
  outlined retain of UserKeyInfo(v14);
  memcpy((void *)(v18 + *(int *)(v12 + 20)), v14, v11);
  outlined init with copy of CachedKeyInfo(v18, v13);
  outlined release of UserKeyInfo(v14);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  return outlined destroy of CachedKeyInfo(v18);
}

uint64_t outlined init with copy of CachedKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v10 = *(int *)(type metadata accessor for CachedKeyInfo() + 20);
  v20 = a2 + v10;
  *(_QWORD *)v20 = *(_QWORD *)(a1 + v10);
  v11 = *(_QWORD *)(a1 + v10 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v20 + 8) = v11;
  v12 = *(_QWORD *)(a1 + v10 + 16);
  v13 = *(_QWORD *)(a1 + v10 + 24);
  outlined copy of Data._Representation(v12, v13);
  *(_QWORD *)(v20 + 16) = v12;
  *(_QWORD *)(v20 + 24) = v13;
  v14 = *(_QWORD *)(a1 + v10 + 32);
  v15 = *(_QWORD *)(a1 + v10 + 40);
  outlined copy of Data._Representation(v14, v15);
  *(_QWORD *)(v20 + 32) = v14;
  *(_QWORD *)(v20 + 40) = v15;
  v16 = *(_QWORD *)(a1 + v10 + 48);
  v17 = *(_QWORD *)(a1 + v10 + 56);
  outlined copy of Data._Representation(v16, v17);
  *(_QWORD *)(v20 + 48) = v16;
  *(_QWORD *)(v20 + 56) = v17;
  v18 = *(_QWORD *)(a1 + v10 + 64);
  v19 = *(_QWORD *)(a1 + v10 + 72);
  outlined copy of Data._Representation(v18, v19);
  *(_QWORD *)(v20 + 64) = v18;
  *(_QWORD *)(v20 + 72) = v19;
  *(_DWORD *)(v20 + 80) = *(_DWORD *)(a1 + v10 + 80);
  *(_QWORD *)(v20 + 88) = *(_QWORD *)(a1 + v10 + 88);
  v21 = *(_QWORD *)(a1 + v10 + 96);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v20 + 96) = v21;
  if ((*(_QWORD *)(a1 + v10 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a2 + v10 + 104) = *(_OWORD *)(a1 + v10 + 104);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + v10 + 104);
    v7 = *(_QWORD *)(a1 + v10 + 112);
    outlined copy of Data._Representation(v6, v7);
    v3 = a2 + v10;
    *(_QWORD *)(v3 + 104) = v6;
    *(_QWORD *)(v3 + 112) = v7;
  }
  *(_QWORD *)(a2 + v10 + 120) = *(_QWORD *)(a1 + v10 + 120);
  v5 = *(_QWORD *)(a1 + v10 + 128);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(a2 + v10 + 128) = v5;
  return result;
}

id CoreDataUserStore.context.getter()
{
  id *v0;
  id v1;
  id v3;

  v3 = *v0;
  v1 = *v0;
  return v3;
}

GroupKitCore::CoreDataUserStore __swiftcall CoreDataUserStore.init(context:clientModelVersion:)(NSManagedObjectContext context, Swift::Float clientModelVersion)
{
  uint64_t v2;
  objc_class *v3;
  objc_class *v4;
  objc_class *p_isa;
  float v6;
  uint64_t v7;
  Class isa;
  Swift::Float v11;
  GroupKitCore::CoreDataUserStore result;

  v7 = v2;
  isa = 0;
  v11 = 0.0;
  v3 = context.super.isa;
  v4 = context.super.isa;
  isa = context.super.isa;
  v11 = clientModelVersion;
  *(NSManagedObjectContext *)v7 = context;
  *(Swift::Float *)(v7 + 8) = clientModelVersion;

  p_isa = (objc_class *)&isa;
  outlined destroy of CoreDataUserStore((id *)&isa);
  result.context.super.isa = p_isa;
  result.clientModelVersion = v6;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CoreDataUserStore(id *a1)
{

}

uint64_t CoreDataUserStore.getAllUsers()()
{
  id *v0;
  id v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = *v0;
  v1 = *v0;
  v2 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUser]);
  NSManagedObjectContext.sync<A>(work:)();

  if (v5)
    return v4;
  else
    return v6;
}

void closure #1 in CoreDataUserStore.getAllUsers()(void *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;
  void *v15;
  void *v16;
  float v17;

  v14 = 0;
  v16 = a1;
  v17 = a3;
  type metadata accessor for User();
  v11 = (void *)static User.fetchRequest()();
  v15 = v11;
  v3 = a1;
  v12 = NSManagedObjectContext.fetch<A>(_:)();

  if (v10)
  {

  }
  else
  {
    v14 = v12;
    v13[1] = v12;
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [User]);
    v6 = type metadata accessor for GPKUser();
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v4 = lazy protocol witness table accessor for type [User] and conformance [A]();
    *a2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in closure #1 in CoreDataUserStore.getAllUsers(), 0, v5, v6, v7, v4, MEMORY[0x24BEE3F20], (uint64_t)v13);
    swift_bridgeObjectRelease();

  }
}

void partial apply for closure #1 in CoreDataUserStore.getAllUsers()(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in CoreDataUserStore.getAllUsers()(*(void **)(v1 + 16), a1, *(float *)(v1 + 24));
}

uint64_t closure #1 in closure #1 in CoreDataUserStore.getAllUsers()@<X0>(id *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  id v3;
  uint64_t result;
  uint64_t v7;
  id v8;

  v8 = *a1;
  type metadata accessor for GPKUser();
  v3 = v8;
  result = GPKUser.__allocating_init(user:)();
  if (v7)
    *a2 = v7;
  else
    *a3 = result;
  return result;
}

uint64_t CoreDataUserStore.dbUser(for:)(uint64_t a1)
{
  id *v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t countAndFlagsBits;
  id v38;
  void *object;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id *v52;
  uint64_t v53;

  v29 = a1;
  v53 = 0;
  v52 = 0;
  v51 = 0;
  v50 = 0;
  v47 = 0;
  v30 = 0;
  v25 = type metadata accessor for InternalErrorCode();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v28 = (char *)v16 - v27;
  v53 = v2;
  v38 = *v1;
  v52 = v1;
  v41 = type metadata accessor for User();
  v43 = (id)static User.fetchRequest()();
  v51 = v43;
  v31 = type metadata accessor for NSPredicate();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("userID == %@", 0xCuLL, 1);
  countAndFlagsBits = v3._countAndFlagsBits;
  object = v3._object;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v36 = _allocateUninitializedArray<A>(_:)();
  v34 = v4;
  v32 = GPKUserID.hexString.getter();
  v33 = v5;
  v34[3] = MEMORY[0x24BEE0D00];
  v6 = lazy protocol witness table accessor for type String and conformance String();
  v7 = v32;
  v8 = v33;
  v9 = v34;
  v34[4] = v6;
  *v9 = v7;
  v9[1] = v8;
  _finalizeUninitializedArray<A>(_:)();
  v10 = (void *)NSPredicate.init(format:_:)();
  v11 = v38;
  v40 = v10;
  swift_bridgeObjectRelease();
  objc_msgSend(v43, sel_setPredicate_, v40);

  v12 = v11;
  v13 = v42;
  v14 = NSManagedObjectContext.fetch<A>(_:)();
  v44 = v13;
  v45 = v14;
  v46 = v13;
  if (v13)
  {
    v16[0] = v46;

    v18 = v16[0];
  }
  else
  {
    v21 = v45;

    v50 = v21;
    swift_bridgeObjectRetain();
    v23 = &v48;
    v48 = v21;
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [User]);
    lazy protocol witness table accessor for type [User] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [User]();
    v24 = v49;
    if (v49)
    {
      v20 = v24;
      v19 = v24;
      v47 = v24;
      swift_bridgeObjectRelease();

      return v19;
    }
    v16[1] = 0;
    type metadata accessor for InternalError();
    (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v28, *MEMORY[0x24BE3DD28], v25);
    v17 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_bridgeObjectRelease();

    v18 = v17;
  }
  return v16[2];
}

unint64_t lazy protocol witness table accessor for type [User] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [User] and conformance [A];
  if (!lazy protocol witness table cache variable for type [User] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [User]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [User] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [User] and conformance [A];
  if (!lazy protocol witness table cache variable for type [User] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [User]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [User] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [User] and conformance [A];
  if (!lazy protocol witness table cache variable for type [User] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [User]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [User] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [User]()
{
  swift_bridgeObjectRelease();
}

uint64_t CoreDataUserStore.user(for:)(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  _QWORD v8[3];
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  int v23;
  char *v24;
  uint64_t v25;
  id v26;
  int v27;
  uint64_t v28;

  v12 = a1;
  v28 = 0;
  v26 = 0;
  v27 = 0;
  v16 = 0;
  v13 = type metadata accessor for GPKUserID();
  v11 = *(_QWORD *)(v13 - 8);
  v9 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v8 - v9;
  v28 = v1;
  v10 = *(id *)v3;
  v2 = v10;
  v14 = *(_DWORD *)(v3 + 8);
  v26 = v10;
  v27 = v14;
  v4 = v10;
  v5 = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v12, v13);
  v18 = &v21;
  v22 = v2;
  v23 = v14;
  v24 = v15;
  type metadata accessor for GPKUser();
  v6 = v17;
  NSManagedObjectContext.sync<A>(work:)();
  v19 = v6;
  v20 = v6;
  if (v6)
  {
    v8[1] = v20;

    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v13);
    return v8[2];
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v13);
    return v25;
  }
}

uint64_t closure #1 in CoreDataUserStore.user(for:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  type metadata accessor for GPKUser();
  result = CoreDataUserStore.dbUser(for:)(a1);
  if (!v4)
  {
    result = GPKUser.__allocating_init(user:)();
    *a2 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in CoreDataUserStore.user(for:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in CoreDataUserStore.user(for:)(*(_QWORD *)(v1 + 32), a1);
}

uint64_t CoreDataUserStore.user(for:)()
{
  id *v0;
  id v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = *v0;
  v1 = *v0;
  swift_bridgeObjectRetain();
  v2 = v7;
  type metadata accessor for GPKUser();
  NSManagedObjectContext.sync<A>(work:)();
  swift_bridgeObjectRelease();

  if (v5)
    return v4;
  else
    return v6;
}

void closure #1 in CoreDataUserStore.user(for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  _QWORD v30[2];
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t countAndFlagsBits;
  id v74;
  void *object;
  id v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;

  v57 = a4;
  v68 = a1;
  v69 = a2;
  v74 = a3;
  v62 = a5;
  v95 = 0;
  v96 = 0;
  v93 = 0;
  v94 = 0;
  v92 = 0;
  v91 = 0;
  v88 = 0;
  v67 = 0;
  v58 = type metadata accessor for InternalErrorCode();
  v59 = *(_QWORD *)(v58 - 8);
  v60 = (*(_QWORD *)(v59 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v61 = (char *)v30 - v60;
  v63 = type metadata accessor for LogSubsystem();
  v64 = *(_QWORD *)(v63 - 8);
  v65 = (*(_QWORD *)(v64 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v67);
  v66 = (uint64_t)v30 - v65;
  v95 = v6;
  v96 = v7;
  v93 = v8;
  v94 = LODWORD(v5);
  v77 = type metadata accessor for User();
  v79 = (id)static User.fetchRequest()();
  v92 = v79;
  type metadata accessor for NSPredicate();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ANY handles.handleString contains %@", 0x24uLL, 1);
  countAndFlagsBits = v9._countAndFlagsBits;
  object = v9._object;
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v72 = _allocateUninitializedArray<A>(_:)();
  v70 = v10;
  swift_bridgeObjectRetain();
  v70[3] = MEMORY[0x24BEE0D00];
  v11 = lazy protocol witness table accessor for type String and conformance String();
  v12 = v68;
  v13 = v69;
  v14 = v70;
  v70[4] = v11;
  *v14 = v12;
  v14[1] = v13;
  _finalizeUninitializedArray<A>(_:)();
  v15 = (void *)NSPredicate.init(format:_:)();
  v16 = v74;
  v76 = v15;
  swift_bridgeObjectRelease();
  objc_msgSend(v79, sel_setPredicate_, v76);

  v17 = v16;
  v18 = v78;
  v19 = NSManagedObjectContext.fetch<A>(_:)();
  v80 = v18;
  v81 = v19;
  v82 = v18;
  if (v18)
  {
    v31 = v82;

    v55 = v31;
  }
  else
  {
    v56 = v81;

    v91 = v56;
    if (MEMORY[0x242634AC0]() <= 1)
    {
      swift_bridgeObjectRetain();
      v40 = &v89;
      v89 = v56;
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [User]);
      lazy protocol witness table accessor for type [User] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [User]();
      v41 = v90;
      if (v90)
      {
        v38 = v41;
        v32 = v41;
        v88 = v41;
        type metadata accessor for GPKUser();
        v26 = v32;
        v27 = v80;
        v28 = GPKUser.__allocating_init(user:)();
        v33 = v27;
        v34 = v28;
        v35 = v27;
        if (v27)
        {
          v30[1] = v35;

        }
        else
        {
          v29 = v32;
          *v57 = v34;

        }
        swift_bridgeObjectRelease();

      }
      else
      {
        v36 = 0;
        type metadata accessor for InternalError();
        (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v61, *MEMORY[0x24BE3DD10], v58);
        v37 = InternalError.__allocating_init(_:internalInfo:)();
        swift_willThrow();
        swift_bridgeObjectRelease();

        v55 = v37;
      }
    }
    else
    {
      v20 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v45 = &v86;
      v86 = v20;
      v87 = v21;
      v48 = 1;
      v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("More than one users(", 0x14uLL, 1);
      v42 = v22._object;
      DefaultStringInterpolation.appendLiteral(_:)(v22);
      swift_bridgeObjectRelease();
      v85 = MEMORY[0x242634AC0](v56, v77);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(") found for ", 0xCuLL, v48 & 1);
      v43 = v23._object;
      DefaultStringInterpolation.appendLiteral(_:)(v23);
      swift_bridgeObjectRelease();
      v83 = v68;
      v84 = v69;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v53 = 0;
      v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v48 & 1);
      v44 = v24._object;
      DefaultStringInterpolation.appendLiteral(_:)(v24);
      swift_bridgeObjectRelease();
      v47 = v86;
      v46 = v87;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      v49 = String.init(stringInterpolation:)();
      v52 = v25;
      v50 = static os_log_type_t.error.getter();
      v51 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserStore.swift", 0x1CuLL, v48 & 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v66);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v66, v63);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v61, *MEMORY[0x24BE3DDC0], v58);
      v54 = InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      swift_bridgeObjectRelease();

      v55 = v54;
    }
  }
}

void partial apply for closure #1 in CoreDataUserStore.user(for:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in CoreDataUserStore.user(for:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1, *(float *)(v1 + 40));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CoreDataUserStore.storeUsers(users:)(Swift::OpaquePointer users)
{
  id *v1;
  id v2;
  id v3;
  id v4;

  v4 = *v1;
  v2 = *v1;
  swift_bridgeObjectRetain();
  v3 = v4;
  NSManagedObjectContext.sync<A>(work:)();
  swift_bridgeObjectRelease();

}

uint64_t closure #1 in CoreDataUserStore.storeUsers(users:)(void *a1, id a2, float a3)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t result;
  id v8;
  uint64_t v9;
  id v10;
  unsigned int v11;
  uint64_t v14;
  id v15[3];
  float v16;
  void *v17;
  id v18;
  float v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v17 = a1;
  v15[2] = a2;
  v16 = a3;
  v15[1] = a1;
  v3 = a2;
  v18 = a2;
  v19 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUser]);
  lazy protocol witness table accessor for type [GPKUser] and conformance [A]();
  Sequence.forEach(_:)();
  if (v14)
  {

    return v14;
  }
  else
  {

    v20 = 0;
    v4 = a2;
    v15[0] = v20;
    v11 = objc_msgSend(a2, sel_save_, v15);
    v10 = v15[0];
    v5 = v15[0];
    v6 = v20;
    v20 = v10;

    result = v11;
    if ((v11 & 1) == 0)
    {
      v8 = v20;
      v9 = _convertNSErrorToError(_:)();

      swift_willThrow();
      return v9;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in CoreDataUserStore.storeUsers(users:)()
{
  uint64_t v0;

  return closure #1 in CoreDataUserStore.storeUsers(users:)(*(void **)(v0 + 16), *(id *)(v0 + 24), *(float *)(v0 + 32));
}

void closure #1 in closure #1 in CoreDataUserStore.storeUsers(users:)(uint64_t a1, void *a2, float a3)
{
  double v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD v13[3];
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  float v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  v32 = a1;
  v31 = a2;
  v30 = a3;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v43 = 0;
  v33 = type metadata accessor for GPKUserID();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v32);
  v38 = (uint64_t)v13 - v35;
  v36 = *v4;
  v48 = v36;
  v46 = v5;
  v47 = LODWORD(v3);
  v37 = &v44;
  v44 = v5;
  v45 = LODWORD(v3);
  GPKUser.userID.getter();
  v6 = v39;
  v7 = CoreDataUserStore.dbUser(for:)(v38);
  v40 = (uint64_t)v6;
  v41 = v7;
  v42 = v6;
  if (v6)
  {
    v14 = v42;
    v15 = 0;
    v16 = 0;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v38, v33);

    v28 = v15;
    v29 = v16;
  }
  else
  {
    v27 = (void *)v41;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v38, v33);
    v28 = v27;
    v29 = v40;
  }
  v25 = v29;
  v26 = v28;
  if (v28)
  {
    v24 = v26;
    v18 = v26;
    v43 = v26;
    v11 = v31;
    v12 = v25;
    dispatch thunk of User.updateWithBasicProperties(of:clientModelVersion:context:)();
    v19 = v12;
    v20 = v12;
    if (v12)
    {
      v13[1] = v20;

    }
    else
    {

      v17 = v19;
    }
  }
  else
  {
    type metadata accessor for User();
    swift_retain();
    v8 = v31;
    v9 = v25;
    v10 = (void *)User.__allocating_init(from:clientModelVersion:context:)();
    v21 = v9;
    v22 = v10;
    v23 = v9;
    if (!v9)
    {

      v17 = v21;
    }
  }
}

uint64_t CoreDataUserStore.meUser()()
{
  id *v0;
  id v1;
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v7 = *v0;
  v1 = *v0;
  v2 = v7;
  type metadata accessor for GPKUser();
  NSManagedObjectContext.sync<A>(work:)();

  if (v5)
    return v4;
  else
    return v6;
}

void closure #1 in CoreDataUserStore.meUser()(void *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  double v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Builtin::Word v29;
  void *object;
  uint64_t *v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  int v71;

  v44 = a2;
  v55 = a1;
  v49 = a3;
  v70 = 0;
  v71 = 0;
  v69 = 0;
  v68 = 0;
  v62 = 0;
  v50 = 0;
  v45 = type metadata accessor for InternalErrorCode();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v48 = (char *)&v18 - v47;
  v51 = type metadata accessor for LogSubsystem();
  v52 = *(_QWORD *)(v51 - 8);
  v53 = (*(_QWORD *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v50);
  v54 = (uint64_t)&v18 - v53;
  v70 = v4;
  v71 = LODWORD(v3);
  v56 = type metadata accessor for User();
  v58 = (id)static User.fetchRequest()();
  v69 = v58;
  v5 = v55;
  v6 = v57;
  v7 = NSManagedObjectContext.fetch<A>(_:)();
  v59 = v6;
  v60 = v7;
  v61 = v6;
  if (v6)
  {
    v19 = v61;

    v26 = v19;
  }
  else
  {
    v41 = v60;

    v68 = v41;
    v29 = 10;
    v8 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v33 = &v66;
    v66 = v8;
    v67 = v9;
    v36 = 1;
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Me Users: ", v29, 1);
    object = v10._object;
    DefaultStringInterpolation.appendLiteral(_:)(v10);
    swift_bridgeObjectRelease();
    v31 = &v65;
    v65 = v41;
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [User]);
    lazy protocol witness table accessor for type [User] and conformance [A]();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v36 & 1);
    v32 = v11._object;
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    v35 = v66;
    v34 = v67;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v37 = String.init(stringInterpolation:)();
    v40 = v12;
    v39 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserStore.swift", 0x1CuLL, v36 & 1);
    v38 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v54);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v54, v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v63 = v41;
    lazy protocol witness table accessor for type [User] and conformance [A]();
    v13 = v59;
    Sequence.first(where:)();
    v43 = v13;
    if (v13)
    {
      __break(1u);
    }
    else
    {
      v28 = v64;
      if (!v64)
      {
        v24 = 0;
        type metadata accessor for InternalError();
        (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v48, *MEMORY[0x24BE3DD08], v45);
        v25 = InternalError.__allocating_init(_:internalInfo:)();
        swift_willThrow();
        swift_bridgeObjectRelease();

        v26 = v25;
        return;
      }
      v27 = v28;
      v20 = v28;
      v62 = v28;
      type metadata accessor for GPKUser();
      v14 = v20;
      v15 = v43;
      v16 = GPKUser.__allocating_init(user:)();
      v21 = v15;
      v22 = v16;
      v23 = v15;
      if (!v15)
      {
        v17 = v20;
        *v44 = v22;

        swift_bridgeObjectRelease();
        return;
      }
    }
    v18 = v23;

    swift_bridgeObjectRelease();
  }
}

void partial apply for closure #1 in CoreDataUserStore.meUser()(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in CoreDataUserStore.meUser()(*(void **)(v1 + 16), a1, *(float *)(v1 + 24));
}

unint64_t closure #1 in closure #1 in CoreDataUserStore.meUser()(id *a1)
{
  return (unint64_t)objc_msgSend(*a1, sel_isMe) & 1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CoreDataUserStore.deleteAllUsers()()
{
  id v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  id v4;
  id v5;
  uint64_t v6;
  Swift::String v7;
  _QWORD v8[2];
  int v9;
  uint64_t v10;
  int v11;
  Swift::String v12;
  void *v13;
  unint64_t v14;
  id v15;
  int v16;
  uint64_t countAndFlagsBits;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  void *v24;
  void *object;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  int v31;
  id v32;
  int v33;

  v32 = 0;
  v33 = 0;
  v22 = type metadata accessor for LogSubsystem();
  v20 = *(_QWORD *)(v22 - 8);
  v14 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v22);
  v21 = (uint64_t)v8 - v14;
  v15 = *(id *)v1;
  v0 = v15;
  v26 = *(_DWORD *)(v1 + 8);
  v32 = v15;
  v33 = v26;
  v16 = 1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Deleting all users and handles(including me-user) ", 0x32uLL, 1);
  countAndFlagsBits = v2._countAndFlagsBits;
  object = v2._object;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserStore.swift", 0x1CuLL, v16 & 1);
  v19 = v3._countAndFlagsBits;
  v24 = v3._object;
  v18 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
  gpklog(_:type:fileID:line:subsystem:)();
  v23 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v23(v21, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v0;
  v5 = v0;
  v6 = v27;
  v30 = v0;
  v31 = v26;
  NSManagedObjectContext.sync<A>(work:)();
  v28 = v6;
  v29 = v6;
  if (v6)
  {
    v8[1] = v29;

  }
  else
  {

    v9 = 1;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("All users and handles deleted", 0x1DuLL, 1);
    v10 = v7._countAndFlagsBits;
    v13 = v7._object;
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserStore.swift", 0x1CuLL, v9 & 1);
    v11 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
    gpklog(_:type:fileID:line:subsystem:)();
    v23(v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void closure #1 in CoreDataUserStore.deleteAllUsers()(void *a1, float a2)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  unsigned __int8 v8;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13[4];
  void *v14;
  void *v15;
  void *v16;
  float v17;
  id v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v13[2] = 0;
  v13[3] = 0;
  v16 = a1;
  v17 = a2;
  type metadata accessor for User();
  v11 = (void *)static User.fetchRequest()();
  v15 = v11;
  v2 = a1;
  v12 = (void *)NSManagedObjectContext.fetch<A>(_:)();
  if (v10)
  {

  }
  else
  {

    v14 = v12;
    swift_bridgeObjectRetain();
    v13[1] = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [User]);
    lazy protocol witness table accessor for type [User] and conformance [A]();
    Collection<>.makeIterator()();
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[User]>);
      IndexingIterator.next()();
      if (!v19)
        break;
      CoreDataUserStore.deleteUser(_:)(v19);

    }
    outlined destroy of IndexingIterator<[User]>();
    v18 = 0;
    v3 = a1;
    v13[0] = 0;
    v8 = objc_msgSend(a1, sel_save_, v13);
    v7 = v13[0];
    v4 = v13[0];
    v5 = v18;
    v18 = v7;

    if ((v8 & 1) == 0)
    {
      v6 = v18;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    swift_bridgeObjectRelease();

  }
}

void partial apply for closure #1 in CoreDataUserStore.deleteAllUsers()()
{
  uint64_t v0;

  closure #1 in CoreDataUserStore.deleteAllUsers()(*(void **)(v0 + 16), *(float *)(v0 + 24));
}

void CoreDataUserStore.deleteUser(_:)(void *a1)
{
  id *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  _BYTE __b[40];
  uint64_t v13;
  id *v14;
  void *v15;
  _BYTE v16[40];

  v14 = 0;
  v13 = 0;
  memset(__b, 0, sizeof(__b));
  v15 = a1;
  v8 = *v1;
  v14 = v1;
  v9 = objc_msgSend(a1, sel_handles);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Handle>);
    v2 = v9;
    lazy protocol witness table accessor for type Set<Handle> and conformance Set<A>();
    _conditionallyBridgeFromObjectiveC_bridgeable<A>(_:_:)();

    if (v10)
      v6 = v10;
    else
      v6 = 0;
    v5 = v6;
  }
  else
  {
    v5 = 0;
  }
  if (v5)
  {
    v13 = v5;
    swift_bridgeObjectRetain();
    type metadata accessor for Handle();
    lazy protocol witness table accessor for type Handle and conformance NSObject();
    Set.makeIterator()();
    memcpy(__b, v16, sizeof(__b));
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Handle>.Iterator);
      Set.Iterator.next()();
      if (!v11)
        break;
      v3 = v8;
      objc_msgSend(v8, sel_deleteObject_, v11);

    }
    outlined destroy of Set<Handle>.Iterator();
    swift_bridgeObjectRelease();
  }
  v4 = v8;
  objc_msgSend(v8, sel_deleteObject_, a1);

}

unint64_t lazy protocol witness table accessor for type Handle and conformance NSObject()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Handle and conformance NSObject;
  if (!lazy protocol witness table cache variable for type Handle and conformance NSObject)
  {
    v0 = type metadata accessor for Handle();
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE5BD8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Handle and conformance NSObject);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Set<Handle>.Iterator()
{
  outlined consume of Set<Handle>.Iterator._Variant();
}

uint64_t outlined consume of Set<Handle>.Iterator._Variant()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Set<Handle> and conformance Set<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Set<Handle> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<Handle> and conformance Set<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<Handle>);
    v1 = MEMORY[0x242635504](MEMORY[0x24BDCFCF0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Set<Handle> and conformance Set<A>);
    return v1;
  }
  return v3;
}

void CoreDataUserStore.keyInfo(for:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _BYTE *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  void *v44;
  void *v45;
  _BYTE v46[136];
  _BYTE v47[136];
  _BYTE v48[136];
  _BYTE *v49;
  _BYTE v50[136];
  _QWORD v51[17];
  _BYTE v52[136];
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE v56[136];
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;

  v32 = a2;
  v36 = a1;
  v62 = 0;
  v61 = 0;
  v59 = 0;
  v60 = 0;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v49 = 0;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date, Data)?);
  v33 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v34 = (uint64_t)&v15 - v33;
  v4 = type metadata accessor for Date();
  v5 = v35;
  v37 = v4;
  v38 = *(_QWORD *)(v4 - 8);
  v40 = *(_QWORD *)(v38 + 64);
  v39 = (v40 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v36);
  v41 = (uint64_t)&v15 - v39;
  v42 = (v40 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v43 = (char *)&v15 - v42;
  v62 = (char *)&v15 - v42;
  v61 = v7;
  v8 = *((_DWORD *)v2 + 2);
  v59 = *v2;
  v60 = v8;
  v57 = v59;
  v58 = v8;
  CoreDataUserStore.keyBlob(for:)(v7, v9);
  v44 = v5;
  v45 = v5;
  if (!v5)
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date, Data));
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v34, 1) == 1)
    {
      outlined destroy of (Date, Data)?(v34);
      v14 = type metadata accessor for CachedKeyInfo();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v32, 1);
      v19 = v44;
    }
    else
    {
      v10 = (uint64_t *)(v34 + *(int *)(v31 + 48));
      v27 = *v10;
      v28 = v10[1];
      (*(void (**)(char *))(v38 + 32))(v43);
      v54 = v27;
      v55 = v28;
      type metadata accessor for XPCDecoder();
      v26 = XPCDecoder.__allocating_init()();
      v53 = v26;
      lazy protocol witness table accessor for type UserKeyInfo and conformance UserKeyInfo();
      v11 = v44;
      dispatch thunk of XPCDecoder.decode<A>(_:from:)();
      v29 = v11;
      v30 = v11;
      if (v11)
      {
        v16 = 0;

        v15 = v51;
        _s12GroupKitCore11UserKeyInfoVSgWOi0_(v51);
        outlined init with take of UserKeyInfo?(v15, v56);
        v25 = v16;
      }
      else
      {
        v22 = v46;
        v23 = 136;
        memcpy(v46, v52, sizeof(v46));
        v24 = v47;
        memcpy(v47, v46, sizeof(v47));
        _s12GroupKitCore11UserKeyInfoVSgWOi_(v47);
        outlined init with take of UserKeyInfo?(v24, v56);
        v25 = v29;
      }
      v20 = v25;
      v21 = v50;
      outlined init with take of UserKeyInfo?(v56, v50);
      if (_s12GroupKitCore11UserKeyInfoVSgWOg((uint64_t)v21) == 1)
      {
        v13 = type metadata accessor for CachedKeyInfo();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v32, 1);
      }
      else
      {
        v18 = v50;
        v49 = v50;
        (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v41, v43, v37);
        outlined retain of UserKeyInfo(v18);
        v17 = v48;
        memcpy(v48, v18, sizeof(v48));
        CachedKeyInfo.init(lastFetchedDate:keyInfo:)(v41, (uint64_t)v48, v32);
        v12 = type metadata accessor for CachedKeyInfo();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v32, 0, 1);
        outlined release of UserKeyInfo(v18);
      }
      swift_release();
      outlined consume of Data._Representation(v27, v28);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v43, v37);
      v19 = v20;
    }
  }
}

void CoreDataUserStore.keyBlob(for:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  int v23;
  char *v24;
  id v25;
  int v26;
  uint64_t v27;

  v16 = a2;
  v12 = a1;
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v13 = type metadata accessor for GPKUserID();
  v11 = *(_QWORD *)(v13 - 8);
  v9 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v8 - v9;
  v27 = v2;
  v10 = *(id *)v4;
  v3 = v10;
  v14 = *(_DWORD *)(v4 + 8);
  v25 = v10;
  v26 = v14;
  v5 = v10;
  v6 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v12, v13);
  v17 = &v21;
  v22 = v3;
  v23 = v14;
  v24 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date, Data)?);
  v7 = v18;
  NSManagedObjectContext.sync<A>(work:)();
  v19 = v7;
  v20 = v7;
  if (v7)
    v8 = v20;

  (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v13);
}

uint64_t outlined destroy of (Date, Data)?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date, Data));
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1))
  {
    v1 = type metadata accessor for Date();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
    outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(v4 + 48)), *(_QWORD *)(a1 + *(int *)(v4 + 48) + 8));
  }
  return a1;
}

uint64_t CoreDataUserStore.setKeyInfo(for:lastFetchedDate:keyInfo:)(uint64_t a1, uint64_t a2, void *__src)
{
  uint64_t *v3;
  int v4;
  unint64_t v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE v13[136];
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE __dst[136];

  v15 = 0;
  v16 = 0;
  v14 = 0;
  v19 = a1;
  v18 = a2;
  memcpy(__dst, __src, sizeof(__dst));
  v17 = __src;
  v4 = *((_DWORD *)v3 + 2);
  v15 = *v3;
  v16 = v4;
  type metadata accessor for XPCEncoder();
  v14 = XPCEncoder.__allocating_init()();
  memcpy(v13, __dst, sizeof(v13));
  lazy protocol witness table accessor for type UserKeyInfo and conformance UserKeyInfo();
  v11 = dispatch thunk of XPCEncoder.encode<A>(_:)();
  v12 = v5;
  if (!v10)
  {
    CoreDataUserStore.setKeyBlob(for:lastFetchedDate:keyBlob:)(a1, a2, v11, v5);
    outlined consume of Data._Representation(v11, v12);
  }
  return swift_release();
}

void CoreDataUserStore.setKeyBlob(for:lastFetchedDate:keyBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  _QWORD v13[3];
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v18 = a1;
  v21 = a2;
  v26 = a3;
  v27 = a4;
  v42 = 0;
  v41 = 0;
  v39 = 0;
  v40 = 0;
  v37 = 0;
  v38 = 0;
  v13[2] = 0;
  v22 = type metadata accessor for Date();
  v20 = *(_QWORD *)(v22 - 8);
  v14 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v25 = (char *)v13 - v14;
  v19 = type metadata accessor for GPKUserID();
  v17 = *(_QWORD *)(v19 - 8);
  v15 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v24 = (char *)v13 - v15;
  v42 = v4;
  v41 = v5;
  v39 = v6;
  v40 = v7;
  v16 = *(id *)v9;
  v8 = v16;
  v23 = *(_DWORD *)(v9 + 8);
  v37 = v16;
  v38 = v23;
  v10 = v16;
  v11 = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v24, v18, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v25, v21, v22);
  outlined copy of Data._Representation(v26, v27);
  v12 = v28;
  v31 = v8;
  v32 = v23;
  v33 = v24;
  v34 = v25;
  v35 = v26;
  v36 = v27;
  NSManagedObjectContext.sync<A>(work:)();
  v29 = v12;
  v30 = v12;
  if (v12)
    v13[1] = v30;

  (*(void (**)(char *, uint64_t))(v17 + 8))(v24, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v22);
  outlined consume of Data._Representation(v26, v27);

}

void closure #1 in CoreDataUserStore.keyBlob(for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  id v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  char *v71;

  v46 = a3;
  v49 = a1;
  v50 = a4;
  v52 = a2;
  v71 = 0;
  v69 = 0;
  v70 = 0;
  v68 = 0;
  v65 = 0;
  v63 = 0;
  v64 = 0;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v47 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v48 = (uint64_t)&v20 - v47;
  v5 = type metadata accessor for Date();
  v6 = v51;
  v53 = v5;
  v54 = *(_QWORD *)(v5 - 8);
  v56 = *(_QWORD *)(v54 + 64);
  v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v52);
  v57 = (char *)&v20 - v55;
  v58 = (v56 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v59 = (char *)&v20 - v58;
  v71 = (char *)&v20 - v58;
  v69 = v9;
  v70 = LODWORD(v8);
  v68 = v10;
  v66 = v9;
  v67 = LODWORD(v8);
  v11 = CoreDataUserStore.dbUser(for:)(v10);
  v60 = v6;
  v61 = (void *)v11;
  v62 = v6;
  if (v6)
  {
    v20 = 0;
    v21 = 0;

    v44 = v20;
    v45 = v21;
  }
  else
  {
    v44 = v61;
    v45 = 0;
  }
  v42 = v45;
  v43 = v44;
  if (v44)
  {
    v41 = v43;
    v39 = v43;
    v65 = v43;
    v40 = objc_msgSend(v43, sel_lastFetchDate);
    if (v40)
    {
      v38 = v40;
      v37 = v40;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v48, v57, v53);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v48, 0, 1, v53);

    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v48, 1, 1, v53);
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v48, 1, v53) == 1)
    {
      outlined destroy of Date?(v48);
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date, Data));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v46, 1);

    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v59, v48, v53);
      v36 = objc_msgSend(v39, sel_keyBlob);
      if (v36)
      {
        v35 = v36;
        v30 = v36;
        v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v32 = v14;

        v33 = v31;
        v34 = v32;
      }
      else
      {
        v33 = 0;
        v34 = 0xF000000000000000;
      }
      v28 = v34;
      v29 = v33;
      if ((v34 & 0xF000000000000000) == 0xF000000000000000)
      {
        v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date, Data));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v46, 1);
      }
      else
      {
        v26 = v29;
        v27 = v28;
        v25 = v28;
        v24 = v29;
        v63 = v29;
        v64 = v28;
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date, Data));
        v22 = (_QWORD *)(v46 + *(int *)(v23 + 48));
        (*(void (**)(void))(v54 + 16))();
        outlined copy of Data._Representation(v24, v25);
        v16 = v22;
        v17 = v46;
        v18 = v23;
        v19 = v25;
        *v22 = v24;
        v16[1] = v19;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 0, 1);
        outlined consume of Data._Representation(v24, v25);
      }
      (*(void (**)(char *, uint64_t))(v54 + 8))(v59, v53);

    }
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date, Data));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v46, 1);
  }
}

void partial apply for closure #1 in CoreDataUserStore.keyBlob(for:)(uint64_t a1@<X8>)
{
  uint64_t v1;

  closure #1 in CoreDataUserStore.keyBlob(for:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 32), a1, *(float *)(v1 + 24));
}

void closure #1 in CoreDataUserStore.setKeyBlob(for:lastFetchedDate:keyBlob:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, float a6)
{
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _BYTE *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  _BYTE v25[16];
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  id v33;
  Class v34;
  id v35;
  id v36;
  unsigned int v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  id v58;
  float v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  void *v66;
  void *v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v58 = a1;
  v59 = a6;
  v61 = a2;
  v55 = a3;
  v56 = a4;
  v57 = a5;
  v82 = *MEMORY[0x24BDAC8D0];
  v77 = 0;
  v78 = 0;
  v76 = 0;
  v75 = 0;
  v80 = 0;
  v81 = 0;
  v74 = 0;
  v71 = 0;
  v69 = 0;
  v50 = 0;
  v51 = type metadata accessor for Date();
  v52 = *(_QWORD *)(v51 - 8);
  v53 = (*(_QWORD *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v54 = &v25[-v53];
  v6 = type metadata accessor for GPKUserID();
  v7 = v60;
  v62 = v6;
  v63 = *(_QWORD *)(v6 - 8);
  v64 = (*(_QWORD *)(v63 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v61);
  v65 = &v25[-v64];
  v77 = v9;
  v78 = LODWORD(v8);
  v76 = v10;
  v75 = v11;
  v80 = v12;
  v81 = v13;
  v72 = v9;
  v73 = LODWORD(v8);
  v14 = CoreDataUserStore.dbUser(for:)(v10);
  v66 = v7;
  v67 = (void *)v14;
  v68 = v7;
  if (v7)
  {
    v29 = 0;
    v30 = 0;

    v48 = v29;
    v49 = v30;
  }
  else
  {
    v48 = v67;
    v49 = 0;
  }
  v46 = v49;
  v47 = v48;
  if (v48)
  {
    v45 = v47;
    v38 = v47;
    v69 = v47;
    v18 = v47;
    v74 = v38;

    v39 = v46;
  }
  else
  {
    v40 = 0;
    type metadata accessor for GPKUser();
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v63 + 16))(v65, v61, v62);
    _allocateUninitializedArray<A>(_:)();
    v41 = GPKUser.__allocating_init(userID:handles:isMe:)();
    v71 = v41;
    type metadata accessor for User();
    swift_retain();
    v15 = v58;
    v16 = v46;
    v17 = User.__allocating_init(from:clientModelVersion:context:)();
    v42 = v16;
    v43 = (void *)v17;
    v44 = v16;
    if (v16)
    {
      v28 = v44;
      swift_release();
      return;
    }
    v74 = v43;
    swift_release();
    v39 = v42;
  }
  v19 = v54;
  v31 = v39;
  v33 = v74;
  v20 = v74;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v52 + 16))(v19, v55, v51);
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(_BYTE *, uint64_t))(v52 + 8))(v54, v51);
  objc_msgSend(v33, sel_setLastFetchDate_, isa);

  v35 = v74;
  v21 = v74;
  outlined copy of Data._Representation(v56, v57);
  v34 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v56, v57);
  objc_msgSend(v35, sel_setKeyBlob_, v34);

  v79 = 0;
  v22 = v58;
  v70 = v79;
  v37 = objc_msgSend(v58, sel_save_, &v70);
  v36 = v70;
  v23 = v70;
  v24 = v79;
  v79 = v36;

  if ((v37 & 1) == 0)
  {
    v26 = v79;
    v27 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }

}

void partial apply for closure #1 in CoreDataUserStore.setKeyBlob(for:lastFetchedDate:keyBlob:)()
{
  uint64_t v0;

  closure #1 in CoreDataUserStore.setKeyBlob(for:lastFetchedDate:keyBlob:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(float *)(v0 + 24));
}

void CoreDataUserStore.lastFetchedDate(for:)()
{
  id *v0;
  id v1;
  id v2;
  id v3;

  v3 = *v0;
  v1 = *v0;
  swift_bridgeObjectRetain();
  v2 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  NSManagedObjectContext.sync<A>(work:)();
  swift_bridgeObjectRelease();

}

void closure #1 in CoreDataUserStore.lastFetchedDate(for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  _QWORD *v10;
  id v11;
  unint64_t v12;
  id v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  float v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t countAndFlagsBits;
  id v51;
  void *object;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  id v61;
  id v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;

  v34 = a4;
  v45 = a1;
  v46 = a2;
  v51 = a3;
  v39 = a5;
  v65 = 0;
  v66 = 0;
  v63 = 0;
  v64 = 0;
  v62 = 0;
  v61 = 0;
  v42 = 0;
  v35 = type metadata accessor for Date();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)v24 - v37;
  v40 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v42);
  v41 = (char *)v24 - v40;
  v65 = v6;
  v66 = v7;
  v63 = v8;
  v64 = LODWORD(v5);
  v54 = type metadata accessor for Handle();
  v56 = (id)static Handle.fetchRequest()();
  v62 = v56;
  v43 = type metadata accessor for NSExpression();
  swift_getKeyPath();
  v44 = (id)NSExpression.init<A, B>(forKeyPath:)();
  v61 = v44;
  type metadata accessor for NSPredicate();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%@ == %@", 8uLL, 1);
  countAndFlagsBits = v9._countAndFlagsBits;
  object = v9._object;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v49 = _allocateUninitializedArray<A>(_:)();
  v47 = v10;
  v11 = v44;
  v47[3] = v43;
  v12 = lazy protocol witness table accessor for type NSExpression and conformance NSObject();
  v13 = v44;
  v14 = v47;
  v47[4] = v12;
  *v14 = v13;
  swift_bridgeObjectRetain();
  v47[8] = MEMORY[0x24BEE0D00];
  v15 = lazy protocol witness table accessor for type String and conformance String();
  v16 = v45;
  v17 = v46;
  v18 = v47;
  v47[9] = v15;
  v18[5] = v16;
  v18[6] = v17;
  _finalizeUninitializedArray<A>(_:)();
  v19 = (void *)NSPredicate.init(format:_:)();
  v20 = v51;
  v53 = v19;
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setPredicate_, v53);

  v21 = v20;
  v22 = v55;
  v23 = NSManagedObjectContext.fetch<A>(_:)();
  v57 = v22;
  v58 = v23;
  v59 = v22;
  if (v22)
  {
    v24[1] = v59;

  }
  else
  {
    v32 = v58;

    swift_bridgeObjectRetain();
    v31 = v60;
    v60[0] = v32;
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Handle]);
    lazy protocol witness table accessor for type [Handle] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [Handle]();
    v33 = (id)v60[1];
    swift_bridgeObjectRelease();
    if (v33)
    {
      v29 = v33;
      v27 = v33;
      v28 = objc_msgSend(v33, sel_lastFetchDate);
      if (v28)
      {
        v26 = v28;
        v25 = v28;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v41, v38, v35);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v41, 0, 1, v35);

      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v41, 1, 1, v35);
      }
      outlined init with take of Date?(v41, v34);

    }
    else
    {
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v34, 1, 1, v35);
    }

  }
}

void partial apply for closure #1 in CoreDataUserStore.lastFetchedDate(for:)(void *a1@<X8>)
{
  uint64_t v1;

  closure #1 in CoreDataUserStore.lastFetchedDate(for:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1, *(float *)(v1 + 40));
}

void key path getter for Handle.handleString : Handle(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v9;
  id v10;

  v9 = *a1;
  v2 = *a1;
  v10 = objc_msgSend(v9, sel_handleString);
  if (v10)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v3;

    v6 = v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *a2 = v6;
  a2[1] = v7;

}

void key path setter for Handle.handleString : Handle(_QWORD *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v9[2];

  outlined init with copy of String?(a1, v9);
  v6 = v9[0];
  v8 = v9[1];
  v7 = *a2;
  v2 = *a2;
  if (v8)
  {
    v4 = MEMORY[0x2426348B0](v6);
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setHandleString_, v4);
  }
  else
  {
    objc_msgSend(v7, sel_setHandleString_, 0);
  }

}

void CoreDataUserStore.setLastFetchedDate(for:date:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD v11[2];
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  int v27;
  char *v28;
  id v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v21 = a1;
  v17 = a2;
  v15 = a3;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v29 = 0;
  v30 = 0;
  v16 = type metadata accessor for Date();
  v14 = *(_QWORD *)(v16 - 8);
  v12 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v21);
  v19 = (char *)v11 - v12;
  v32 = v3;
  v33 = v4;
  v31 = v5;
  v13 = *(id *)v7;
  v6 = v13;
  v18 = *(_DWORD *)(v7 + 8);
  v29 = v13;
  v30 = v18;
  v8 = v13;
  swift_bridgeObjectRetain();
  v9 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v15, v16);
  v10 = v20;
  v24 = v21;
  v25 = v17;
  v26 = v6;
  v27 = v18;
  v28 = v19;
  NSManagedObjectContext.sync<A>(work:)();
  v22 = v10;
  v23 = v10;
  if (v10)
    v11[1] = v23;
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v16);
}

void closure #1 in CoreDataUserStore.setLastFetchedDate(for:date:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, float a5)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Class isa;
  id v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  float v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;

  v35 = a1;
  v31 = a2;
  v33 = a3;
  v32 = a5;
  v25 = a4;
  v47 = *MEMORY[0x24BDAC8D0];
  v44 = 0;
  v45 = 0;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v40 = 0;
  v26 = 0;
  v27 = type metadata accessor for Date();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = (*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](0);
  v30 = (char *)&v17 - v29;
  v44 = v6;
  v45 = v7;
  v42 = v8;
  v43 = LODWORD(v5);
  v41 = v9;
  type metadata accessor for Handle();
  v10 = v33;
  v11 = v34;
  v12 = dispatch thunk of static Handle.handle(from:clientModelVersion:context:)();
  v36 = v11;
  v37 = (void *)v12;
  v38 = v11;
  if (v11)
  {
    v20 = v38;

  }
  else
  {
    v13 = v30;
    v21 = v37;

    v40 = v21;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v13, v25, v27);
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    objc_msgSend(v21, sel_setLastFetchDate_, isa);

    v46 = 0;
    v14 = v33;
    v39 = v46;
    v24 = objc_msgSend(v33, sel_save_, &v39);
    v23 = v39;
    v15 = v39;
    v16 = v46;
    v46 = v23;

    if ((v24 & 1) == 0)
    {
      v18 = v46;
      v19 = _convertNSErrorToError(_:)();

      swift_willThrow();
    }

  }
}

void partial apply for closure #1 in CoreDataUserStore.setLastFetchedDate(for:date:)()
{
  uint64_t v0;

  closure #1 in CoreDataUserStore.setLastFetchedDate(for:date:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 48), *(float *)(v0 + 40));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CoreDataUserStore.deleteUserWithIDs(_:)(Swift::OpaquePointer a1)
{
  id *v1;
  id v2;
  id v3;
  id v4;

  v4 = *v1;
  v2 = *v1;
  swift_bridgeObjectRetain();
  v3 = v4;
  NSManagedObjectContext.sync<A>(work:)();
  swift_bridgeObjectRelease();

}

uint64_t closure #1 in CoreDataUserStore.deleteUserWithIDs(_:)(void *a1, void *a2, float a3)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  id v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  id v58;
  float v59;
  unint64_t v60;
  _BYTE *v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  float v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  id v75[2];
  _QWORD v76[2];
  uint64_t v77;
  int v78;
  uint64_t v79;
  _BYTE *v80;
  void *v81;
  void *v82;
  uint64_t v83;

  v62 = a1;
  v58 = a2;
  v59 = a3;
  v83 = *MEMORY[0x24BDAC8D0];
  v80 = 0;
  v79 = 0;
  v77 = 0;
  v78 = 0;
  v63 = v76;
  v76[0] = 0;
  v76[1] = 0;
  v74 = 0;
  v73 = 0;
  v71 = 0;
  v72 = 0;
  v69 = 0;
  v54 = type metadata accessor for GPKUserID();
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v54);
  v57 = &v22[-v56];
  v80 = &v22[-v56];
  v60 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v62);
  v61 = &v22[-v60];
  v79 = v4;
  v77 = v5;
  v78 = LODWORD(v3);
  swift_bridgeObjectRetain();
  v75[1] = v62;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID]);
  lazy protocol witness table accessor for type [GPKUserID] and conformance [A]();
  Collection<>.makeIterator()();
  v66 = v65;
LABEL_2:
  v53 = v66;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKUserID]>);
  IndexingIterator.next()();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v55 + 48))(v61, 1, v54) == 1)
  {
    outlined destroy of IndexingIterator<[GPKUserID]>();
    v82 = 0;
    v6 = v58;
    v75[0] = v82;
    v52 = objc_msgSend(v58, sel_save_, v75);
    v51 = v75[0];
    v7 = v75[0];
    v8 = v82;
    v82 = v51;

    result = v52;
    if ((v52 & 1) == 0)
    {
      v23 = v82;
      v24 = _convertNSErrorToError(_:)();

      swift_willThrow();
      result = v24;
      v27 = v24;
    }
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v55 + 32))(v57, v61, v54);
    v37 = 0;
    v46 = type metadata accessor for User();
    v47 = (id)static User.fetchRequest()();
    v74 = v47;
    v38 = type metadata accessor for NSPredicate();
    v44 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("userID == %@", 0xCuLL, 1);
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
    v43 = _allocateUninitializedArray<A>(_:)();
    v41 = v10;
    v39 = GPKUserID.hexString.getter();
    v40 = v11;
    v41[3] = MEMORY[0x24BEE0D00];
    v12 = lazy protocol witness table accessor for type String and conformance String();
    v13 = v39;
    v14 = v40;
    v15 = v41;
    v41[4] = v12;
    *v15 = v13;
    v15[1] = v14;
    _finalizeUninitializedArray<A>(_:)();
    v16 = (void *)NSPredicate.init(format:_:)();
    v17 = v58;
    v45 = v16;
    swift_bridgeObjectRelease();
    objc_msgSend(v47, sel_setPredicate_, v45);

    v18 = v17;
    v19 = v53;
    v20 = NSManagedObjectContext.fetch<A>(_:)();
    v48 = v19;
    v49 = v20;
    v50 = v19;
    if (v19)
    {
      v26 = v50;

      (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v57, v54);
      outlined destroy of IndexingIterator<[GPKUserID]>();
      result = v26;
      v27 = v26;
    }
    else
    {
      v34 = v49;

      v73 = v34;
      swift_bridgeObjectRetain();
      v70 = v34;
      v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [User]);
      lazy protocol witness table accessor for type [User] and conformance [A]();
      Collection<>.makeIterator()();
      for (i = v48; ; i = v29)
      {
        v32 = i;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[User]>);
        IndexingIterator.next()();
        v33 = v81;
        if (!v81)
        {
          outlined destroy of IndexingIterator<[User]>();
          swift_bridgeObjectRelease();

          (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v57, v54);
          v66 = v32;
          goto LABEL_2;
        }
        v31 = v33;
        v21 = v32;
        v28 = v33;
        v69 = v33;
        v67 = v58;
        v68 = v59;
        CoreDataUserStore.deleteUser(_:)(v33);
        v29 = v21;
        v30 = v21;
        if (v21)
          break;

      }
      v25 = v30;

      outlined destroy of IndexingIterator<[User]>();
      swift_bridgeObjectRelease();

      (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v57, v54);
      outlined destroy of IndexingIterator<[GPKUserID]>();
      return v25;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in CoreDataUserStore.deleteUserWithIDs(_:)()
{
  uint64_t v0;

  return closure #1 in CoreDataUserStore.deleteUserWithIDs(_:)(*(void **)(v0 + 16), *(void **)(v0 + 24), *(float *)(v0 + 32));
}

uint64_t protocol witness for UserStore.user(for:) in conformance CoreDataUserStore(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v4 = CoreDataUserStore.user(for:)(a1);
  if (v1)
    return v3;
  else
    return v4;
}

uint64_t protocol witness for UserStore.user(for:) in conformance CoreDataUserStore()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = CoreDataUserStore.user(for:)();
  if (v0)
    return v2;
  else
    return v3;
}

void protocol witness for UserStore.storeUsers(users:) in conformance CoreDataUserStore(Swift::OpaquePointer a1)
{
  CoreDataUserStore.storeUsers(users:)(a1);
}

uint64_t protocol witness for UserStore.getAllUsers() in conformance CoreDataUserStore()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = CoreDataUserStore.getAllUsers()();
  if (v0)
    return v2;
  else
    return v3;
}

uint64_t protocol witness for UserStore.meUser() in conformance CoreDataUserStore()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = CoreDataUserStore.meUser()();
  if (v0)
    return v2;
  else
    return v3;
}

void protocol witness for UserStore.deleteUserWithIDs(_:) in conformance CoreDataUserStore(Swift::OpaquePointer a1)
{
  CoreDataUserStore.deleteUserWithIDs(_:)(a1);
}

void protocol witness for UserStore.keyInfo(for:) in conformance CoreDataUserStore(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CoreDataUserStore.keyInfo(for:)(a1, a2);
}

uint64_t protocol witness for UserStore.setKeyInfo(for:lastFetchedDate:keyInfo:) in conformance CoreDataUserStore(uint64_t a1, uint64_t a2, void *a3)
{
  return CoreDataUserStore.setKeyInfo(for:lastFetchedDate:keyInfo:)(a1, a2, a3);
}

void protocol witness for UserStore.lastFetchedDate(for:) in conformance CoreDataUserStore()
{
  CoreDataUserStore.lastFetchedDate(for:)();
}

void protocol witness for UserStore.setLastFetchedDate(for:date:) in conformance CoreDataUserStore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CoreDataUserStore.setLastFetchedDate(for:date:)(a1, a2, a3);
}

void protocol witness for UserStore.deleteAllUsers() in conformance CoreDataUserStore()
{
  CoreDataUserStore.deleteAllUsers()();
}

unint64_t initializeBufferWithCopyOfBuffer for CachedKeyInfo(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v26;

  v26 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v26 & 0x20000) != 0)
  {
    v21 = *a2;
    swift_retain();
    *a1 = v21;
    return *a1 + ((v26 + 16) & ~(unint64_t)v26);
  }
  else
  {
    v3 = type metadata accessor for Date();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v4 = *(int *)(a3 + 20);
    v18 = (char *)a1 + v4;
    v20 = (char *)a2 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v9 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v18 + 1) = v9;
    v10 = *((_QWORD *)v20 + 2);
    v11 = *((_QWORD *)v20 + 3);
    outlined copy of Data._Representation(v10, v11);
    *((_QWORD *)v18 + 2) = v10;
    *((_QWORD *)v18 + 3) = v11;
    v12 = *((_QWORD *)v20 + 4);
    v13 = *((_QWORD *)v20 + 5);
    outlined copy of Data._Representation(v12, v13);
    *((_QWORD *)v18 + 4) = v12;
    *((_QWORD *)v18 + 5) = v13;
    v14 = *((_QWORD *)v20 + 6);
    v15 = *((_QWORD *)v20 + 7);
    outlined copy of Data._Representation(v14, v15);
    *((_QWORD *)v18 + 6) = v14;
    *((_QWORD *)v18 + 7) = v15;
    v16 = *((_QWORD *)v20 + 8);
    v17 = *((_QWORD *)v20 + 9);
    outlined copy of Data._Representation(v16, v17);
    *((_QWORD *)v18 + 8) = v16;
    *((_QWORD *)v18 + 9) = v17;
    *((_DWORD *)v18 + 20) = *((_DWORD *)v20 + 20);
    *((_QWORD *)v18 + 11) = *((_QWORD *)v20 + 11);
    v19 = *((_QWORD *)v20 + 12);
    swift_bridgeObjectRetain();
    *((_QWORD *)v18 + 12) = v19;
    if ((*((_QWORD *)v20 + 14) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(v18 + 104) = *(_OWORD *)(v20 + 104);
    }
    else
    {
      v7 = *((_QWORD *)v20 + 13);
      v8 = *((_QWORD *)v20 + 14);
      outlined copy of Data._Representation(v7, v8);
      *((_QWORD *)v18 + 13) = v7;
      *((_QWORD *)v18 + 14) = v8;
    }
    *((_QWORD *)v18 + 15) = *((_QWORD *)v20 + 15);
    v6 = *((_QWORD *)v20 + 16);
    swift_bridgeObjectRetain();
    *((_QWORD *)v18 + 16) = v6;
    return (unint64_t)a1;
  }
}

uint64_t destroy for CachedKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  v6 = *(int *)(a2 + 20);
  v7 = a1 + v6;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56));
  outlined consume of Data._Representation(*(_QWORD *)(v7 + 64), *(_QWORD *)(v7 + 72));
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + v6 + 112) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v6 + 104), *(_QWORD *)(a1 + v6 + 112));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CachedKeyInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v12 = *(int *)(a3 + 20);
  v22 = a1 + v12;
  *(_QWORD *)v22 = *(_QWORD *)(a2 + v12);
  v13 = *(_QWORD *)(a2 + v12 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v22 + 8) = v13;
  v14 = *(_QWORD *)(a2 + v12 + 16);
  v15 = *(_QWORD *)(a2 + v12 + 24);
  outlined copy of Data._Representation(v14, v15);
  *(_QWORD *)(v22 + 16) = v14;
  *(_QWORD *)(v22 + 24) = v15;
  v16 = *(_QWORD *)(a2 + v12 + 32);
  v17 = *(_QWORD *)(a2 + v12 + 40);
  outlined copy of Data._Representation(v16, v17);
  *(_QWORD *)(v22 + 32) = v16;
  *(_QWORD *)(v22 + 40) = v17;
  v18 = *(_QWORD *)(a2 + v12 + 48);
  v19 = *(_QWORD *)(a2 + v12 + 56);
  outlined copy of Data._Representation(v18, v19);
  *(_QWORD *)(v22 + 48) = v18;
  *(_QWORD *)(v22 + 56) = v19;
  v20 = *(_QWORD *)(a2 + v12 + 64);
  v21 = *(_QWORD *)(a2 + v12 + 72);
  outlined copy of Data._Representation(v20, v21);
  *(_QWORD *)(v22 + 64) = v20;
  *(_QWORD *)(v22 + 72) = v21;
  *(_DWORD *)(v22 + 80) = *(_DWORD *)(a2 + v12 + 80);
  *(_QWORD *)(v22 + 88) = *(_QWORD *)(a2 + v12 + 88);
  v23 = *(_QWORD *)(a2 + v12 + 96);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v22 + 96) = v23;
  if ((*(_QWORD *)(a2 + v12 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v12 + 104) = *(_OWORD *)(a2 + v12 + 104);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + v12 + 104);
    v8 = *(_QWORD *)(a2 + v12 + 112);
    outlined copy of Data._Representation(v7, v8);
    v4 = a1 + v12;
    *(_QWORD *)(v4 + 104) = v7;
    *(_QWORD *)(v4 + 112) = v8;
  }
  *(_QWORD *)(a1 + v12 + 120) = *(_QWORD *)(a2 + v12 + 120);
  v6 = *(_QWORD *)(a2 + v12 + 128);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + v12 + 128) = v6;
  return result;
}

uint64_t assignWithCopy for CachedKeyInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v25 = *(int *)(a3 + 20);
  v36 = a1 + v25;
  *(_QWORD *)v36 = *(_QWORD *)(a2 + v25);
  v26 = *(_QWORD *)(a2 + v25 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v36 + 8) = v26;
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(a2 + v25 + 16);
  v28 = *(_QWORD *)(a2 + v25 + 24);
  outlined copy of Data._Representation(v27, v28);
  v4 = *(_QWORD *)(a1 + v25 + 16);
  v5 = *(_QWORD *)(a1 + v25 + 24);
  *(_QWORD *)(v36 + 16) = v27;
  *(_QWORD *)(v36 + 24) = v28;
  outlined consume of Data._Representation(v4, v5);
  v29 = *(_QWORD *)(a2 + v25 + 32);
  v30 = *(_QWORD *)(a2 + v25 + 40);
  outlined copy of Data._Representation(v29, v30);
  v6 = *(_QWORD *)(a1 + v25 + 32);
  v7 = *(_QWORD *)(a1 + v25 + 40);
  *(_QWORD *)(v36 + 32) = v29;
  *(_QWORD *)(v36 + 40) = v30;
  outlined consume of Data._Representation(v6, v7);
  v31 = *(_QWORD *)(a2 + v25 + 48);
  v32 = *(_QWORD *)(a2 + v25 + 56);
  outlined copy of Data._Representation(v31, v32);
  v8 = *(_QWORD *)(a1 + v25 + 48);
  v9 = *(_QWORD *)(a1 + v25 + 56);
  *(_QWORD *)(v36 + 48) = v31;
  *(_QWORD *)(v36 + 56) = v32;
  outlined consume of Data._Representation(v8, v9);
  v33 = *(_QWORD *)(a2 + v25 + 64);
  v34 = *(_QWORD *)(a2 + v25 + 72);
  outlined copy of Data._Representation(v33, v34);
  v10 = *(_QWORD *)(a1 + v25 + 64);
  v11 = *(_QWORD *)(a1 + v25 + 72);
  *(_QWORD *)(v36 + 64) = v33;
  *(_QWORD *)(v36 + 72) = v34;
  outlined consume of Data._Representation(v10, v11);
  *(_DWORD *)(v36 + 80) = *(_DWORD *)(a2 + v25 + 80);
  *(_QWORD *)(v36 + 88) = *(_QWORD *)(a2 + v25 + 88);
  v35 = *(_QWORD *)(a2 + v25 + 96);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v36 + 96) = v35;
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + v25 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(a2 + v25 + 112) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + v25 + 104) = *(_OWORD *)(a2 + v25 + 104);
    }
    else
    {
      v18 = *(_QWORD *)(a2 + v25 + 104);
      v19 = *(_QWORD *)(a2 + v25 + 112);
      outlined copy of Data._Representation(v18, v19);
      v15 = a1 + v25;
      *(_QWORD *)(v15 + 104) = v18;
      *(_QWORD *)(v15 + 112) = v19;
    }
  }
  else if ((*(_QWORD *)(a2 + v25 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + v25 + 104);
    *(_OWORD *)(a1 + v25 + 104) = *(_OWORD *)(a2 + v25 + 104);
  }
  else
  {
    v20 = *(_QWORD *)(a2 + v25 + 104);
    v21 = *(_QWORD *)(a2 + v25 + 112);
    outlined copy of Data._Representation(v20, v21);
    v12 = a1 + v25;
    v13 = *(_QWORD *)(a1 + v25 + 104);
    v14 = *(_QWORD *)(a1 + v25 + 112);
    *(_QWORD *)(v12 + 104) = v20;
    *(_QWORD *)(v12 + 112) = v21;
    outlined consume of Data._Representation(v13, v14);
  }
  *(_QWORD *)(a1 + v25 + 120) = *(_QWORD *)(a2 + v25 + 120);
  v17 = *(_QWORD *)(a2 + v25 + 128);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v25 + 128) = v17;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CachedKeyInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  memcpy((void *)(a1 + *(int *)(a3 + 20)), (const void *)(a2 + *(int *)(a3 + 20)), 0x88uLL);
  return a1;
}

uint64_t assignWithTake for CachedKeyInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v25;
  uint64_t v26;

  v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v25 = *(int *)(a3 + 20);
  v26 = a1 + v25;
  *(_QWORD *)v26 = *(_QWORD *)(a2 + v25);
  *(_QWORD *)(v26 + 8) = *(_QWORD *)(a2 + v25 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + v25 + 24);
  v5 = *(_QWORD *)(a1 + v25 + 16);
  v6 = *(_QWORD *)(a1 + v25 + 24);
  *(_QWORD *)(v26 + 16) = *(_QWORD *)(a2 + v25 + 16);
  *(_QWORD *)(v26 + 24) = v4;
  outlined consume of Data._Representation(v5, v6);
  v7 = *(_QWORD *)(a2 + v25 + 40);
  v8 = *(_QWORD *)(a1 + v25 + 32);
  v9 = *(_QWORD *)(a1 + v25 + 40);
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(a2 + v25 + 32);
  *(_QWORD *)(v26 + 40) = v7;
  outlined consume of Data._Representation(v8, v9);
  v10 = *(_QWORD *)(a2 + v25 + 56);
  v11 = *(_QWORD *)(a1 + v25 + 48);
  v12 = *(_QWORD *)(a1 + v25 + 56);
  *(_QWORD *)(v26 + 48) = *(_QWORD *)(a2 + v25 + 48);
  *(_QWORD *)(v26 + 56) = v10;
  outlined consume of Data._Representation(v11, v12);
  v13 = *(_QWORD *)(a2 + v25 + 72);
  v14 = *(_QWORD *)(a1 + v25 + 64);
  v15 = *(_QWORD *)(a1 + v25 + 72);
  *(_QWORD *)(v26 + 64) = *(_QWORD *)(a2 + v25 + 64);
  *(_QWORD *)(v26 + 72) = v13;
  outlined consume of Data._Representation(v14, v15);
  *(_DWORD *)(v26 + 80) = *(_DWORD *)(a2 + v25 + 80);
  *(_QWORD *)(v26 + 88) = *(_QWORD *)(a2 + v25 + 88);
  *(_QWORD *)(v26 + 96) = *(_QWORD *)(a2 + v25 + 96);
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + v25 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + v25 + 104) = *(_OWORD *)(a2 + v25 + 104);
  }
  else if ((*(_QWORD *)(a2 + v25 + 112) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + v25 + 104);
    *(_OWORD *)(a1 + v25 + 104) = *(_OWORD *)(a2 + v25 + 104);
  }
  else
  {
    v16 = *(_QWORD *)(a2 + v25 + 112);
    v17 = a1 + v25;
    v18 = *(_QWORD *)(a1 + v25 + 104);
    v19 = *(_QWORD *)(a1 + v25 + 112);
    *(_QWORD *)(v17 + 104) = *(_QWORD *)(a2 + v25 + 104);
    *(_QWORD *)(v17 + 112) = v16;
    outlined consume of Data._Representation(v18, v19);
  }
  v20 = a1 + v25;
  *(_QWORD *)(v20 + 120) = *(_QWORD *)(a2 + v25 + 120);
  *(_QWORD *)(v20 + 128) = *(_QWORD *)(a2 + v25 + 128);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CachedKeyInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4B1A18(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  if (a2 == *(_DWORD *)(v10 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))(a1, a2, v9);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for CachedKeyInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4B1B14(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for CachedKeyInfo()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t dispatch thunk of UserStore.user(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of UserStore.user(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of UserStore.storeUsers(users:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of UserStore.getAllUsers()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of UserStore.meUser()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of UserStore.deleteUserWithIDs(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of UserStore.keyInfo(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of UserStore.setKeyInfo(for:lastFetchedDate:keyInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of UserStore.lastFetchedDate(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of UserStore.setLastFetchedDate(for:date:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 80))();
}

uint64_t dispatch thunk of UserStore.deleteAllUsers()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t initializeBufferWithCopyOfBuffer for CoreDataUserStore(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t result;
  id v4;

  v4 = *(id *)a2;
  v2 = *(id *)a2;
  result = a1;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

void destroy for CoreDataUserStore(id *a1)
{

}

uint64_t initializeWithCopy for CoreDataUserStore(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t result;
  id v4;

  v4 = *(id *)a2;
  v2 = *(id *)a2;
  result = a1;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

float assignWithCopy for CoreDataUserStore(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  float result;
  id v5;

  v5 = *(id *)a2;
  v2 = *(id *)a2;
  v3 = *(void **)a1;
  *(_QWORD *)a1 = v5;

  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

float assignWithTake for CoreDataUserStore(uint64_t a1, uint64_t a2)
{
  void *v2;
  float result;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CoreDataUserStore(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(_BYTE *)(a1 + 12))
    {
      v4 = *(_QWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (*(_QWORD *)a1 < 0x100000000uLL)
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreDataUserStore(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_DWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 12) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 12) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreDataUserStore()
{
  return &type metadata for CoreDataUserStore;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[GPKUserID]>()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[User]>()
{
  swift_bridgeObjectRelease();
}

char *keypath_get_selector_handleString()
{
  return sel_handleString;
}

unint64_t lazy protocol witness table accessor for type [Handle] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Handle] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Handle] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Handle]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Handle] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [Handle]()
{
  swift_bridgeObjectRelease();
}

void *outlined init with take of Date?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

void partial apply for closure #1 in closure #1 in CoreDataUserStore.storeUsers(users:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in CoreDataUserStore.storeUsers(users:)(a1, *(void **)(v1 + 16), *(float *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type [GPKUser] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [GPKUser] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GPKUser] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [GPKUser]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [GPKUser] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t GroupFetcher.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Client(v1, a1);
}

uint64_t GroupFetcher.groupStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupStore(v1 + 40, a1);
}

uint64_t GroupFetcher.invitationStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of InvitationStore(v1 + 80, a1);
}

uint64_t GroupFetcher.cryptoService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptographyServiceProviding(v1 + 120, a1);
}

uint64_t GroupFetcher.fetchGroups(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[17] = v1;
  v2[16] = a1;
  v2[8] = v2;
  v2[9] = 0;
  v2[10] = 0;
  v2[11] = 0;
  v2[13] = 0;
  v3 = type metadata accessor for LogSubsystem();
  v2[18] = v3;
  v2[19] = *(_QWORD *)(v3 - 8);
  v2[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroup.JoinState?);
  v2[21] = swift_task_alloc();
  v4 = type metadata accessor for GPKGroup.JoinState();
  v2[22] = v4;
  v2[23] = *(_QWORD *)(v4 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[9] = a1;
  v2[10] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[8] = *v2;
  v3[29] = a1;
  v3[30] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[8] = *v2;
  v3[33] = a1;
  v3[34] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[8] = *v2;
  v3[36] = a1;
  v3[37] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GroupFetcher.fetchGroups(with:)()
{
  _QWORD *v0;
  _QWORD *v1;
  void (*v3)(uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = v0[23];
  v19 = v0[22];
  v18 = v0[21];
  v0[8] = v0;
  v0[26] = type metadata accessor for GPKGroup();
  v0[11] = _allocateUninitializedArray<A>(_:)();
  dispatch thunk of GPKFetchGroupsRequest.joinState.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v19) == 1)
  {
    outlined destroy of GPKGroup.JoinState?(v16[21]);
  }
  else
  {
    v13 = v16[24];
    v11 = v16[23];
    v12 = v16[22];
    (*(void (**)(void))(v11 + 32))();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BE3E4B0], v12);
    lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
    v15 = == infix<A>(_:_:)();
    v14 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16[27] = v14;
    v14(v13, v12);
    if ((v15 & 1) != 0)
    {
      v9 = v16[20];
      v8 = v16[19];
      v10 = v16[18];
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Fetching pending invitations", 0x1CuLL, 1);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupFetcher.swift", 0x1FuLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v1 = (_QWORD *)swift_task_alloc();
      v16[28] = v1;
      *v1 = v16[8];
      v1[1] = GroupFetcher.fetchGroups(with:);
      return GroupFetcher.fetchInvitation(with:)(v16[16]);
    }
    v14(v16[25], v16[22]);
  }
  v6 = v16[20];
  v5 = v16[19];
  v7 = v16[18];
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Fetching pending invitations and accepted groups", 0x30uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupFetcher.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
  gpklog(_:type:fileID:line:subsystem:)();
  v3 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v16[31] = v3;
  v3(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)swift_task_alloc();
  v16[32] = v4;
  *v4 = v16[8];
  v4[1] = GroupFetcher.fetchGroups(with:);
  return GroupFetcher.fetchAcceptedGroups(with:)(v16[16]);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  v1 = v0[29];
  v17 = (void (*)(uint64_t, uint64_t))v0[27];
  v15 = v0[25];
  v16 = v0[22];
  v0[8] = v0;
  v0[11] = v1;
  swift_bridgeObjectRelease();
  v17(v15, v16);
  v2 = v0[30];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKGroup]);
  lazy protocol witness table accessor for type [GPKGroup] and conformance [A]();
  lazy protocol witness table accessor for type [GPKGroup] and conformance [A]();
  result = MutableCollection<>.sort(by:)();
  if (!v2)
  {
    v7 = v14[26];
    v12 = v14[20];
    v10 = v14[19];
    v11 = v14[18];
    v14[6] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v14[7] = v4;
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Return all groups count: ", 0x19uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    v8 = v14[11];
    swift_bridgeObjectRetain();
    v9 = MEMORY[0x242634AC0](v8, v7);
    swift_bridgeObjectRelease();
    v14[15] = v9;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupFetcher.swift", 0x1FuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v14[11];
    swift_bridgeObjectRetain();
    outlined destroy of [GPKGroup]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v14[8] + 8))(v13);
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  _QWORD *v13;

  v1 = v0[33];
  v12 = (void (*)(uint64_t, uint64_t))v0[31];
  v7 = v0[26];
  v10 = v0[20];
  v11 = v0[18];
  v0[8] = v0;
  v0[11] = v1;
  swift_bridgeObjectRelease();
  v0[2] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[3] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Accepted groups: ", 0x11uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v8 = v0[11];
  swift_bridgeObjectRetain();
  v9 = MEMORY[0x242634AC0](v8, v7);
  swift_bridgeObjectRelease();
  v0[12] = v9;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupFetcher.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
  gpklog(_:type:fileID:line:subsystem:)();
  v12(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = (_QWORD *)swift_task_alloc();
  v13[35] = v5;
  *v5 = v13[8];
  v5[1] = GroupFetcher.fetchGroups(with:);
  return GroupFetcher.fetchInvitation(with:)(v13[16]);
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v21 = v0[36];
  v19 = (void (*)(uint64_t, uint64_t))v0[31];
  v20 = v0[26];
  v17 = v0[20];
  v18 = v0[18];
  v0[8] = v0;
  v0[13] = v21;
  v0[4] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[5] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Pending Invitations: ", 0x15uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[14] = MEMORY[0x242634AC0](v21, v20);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupFetcher.swift", 0x1FuLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v17);
  gpklog(_:type:fileID:line:subsystem:)();
  v19(v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static Array.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v4 = v0[37];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKGroup]);
  lazy protocol witness table accessor for type [GPKGroup] and conformance [A]();
  lazy protocol witness table accessor for type [GPKGroup] and conformance [A]();
  result = MutableCollection<>.sort(by:)();
  if (!v4)
  {
    v9 = v16[26];
    v14 = v16[20];
    v12 = v16[19];
    v13 = v16[18];
    v16[6] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v16[7] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Return all groups count: ", 0x19uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    v10 = v16[11];
    swift_bridgeObjectRetain();
    v11 = MEMORY[0x242634AC0](v10, v9);
    swift_bridgeObjectRelease();
    v16[15] = v11;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupFetcher.swift", 0x1FuLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = v16[11];
    swift_bridgeObjectRetain();
    outlined destroy of [GPKGroup]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v16[8] + 8))(v15);
  }
  return result;
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = (void (*)(uint64_t, uint64_t))v0[27];
  v2 = v0[25];
  v3 = v0[22];
  v0[8] = v0;
  v1(v2, v3);
  outlined destroy of [GPKGroup]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[8] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 64) = v0;
  outlined destroy of [GPKGroup]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 64) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 64) = v0;
  outlined destroy of [GPKGroup]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 64) + 8))();
}

uint64_t GroupFetcher.fetchInvitation(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[19] = v1;
  v2[18] = a1;
  v2[12] = v2;
  v2[13] = 0;
  v2[14] = 0;
  v2[15] = 0;
  v2[17] = 0;
  v2[13] = a1;
  v2[14] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[12] = *v2;
  v3[22] = a1;
  v3[23] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[12] = *v2;
  v3 += 12;
  v5 = v3 - 10;
  v3[14] = a1;
  v3[15] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

uint64_t GroupFetcher.fetchInvitation(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(id, uint64_t, uint64_t);
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t);
  char v14;
  _QWORD *v15;
  uint64_t v16;

  v1 = v0[18];
  v0[12] = v0;
  v16 = GroupFetcher.predicates(for:invitation:)(v1, 1);
  v0[20] = v16;
  v15[15] = v16;
  swift_bridgeObjectRetain();
  v15[16] = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSPredicate]);
  lazy protocol witness table accessor for type [NSPredicate] and conformance [A]();
  v14 = Collection.isEmpty.getter();
  outlined destroy of [NSPredicate]();
  if ((v14 & 1) != 0)
  {
    outlined init with copy of InvitationStore(v15[19] + 80, (uint64_t)(v15 + 7));
    v11 = v15[10];
    v12 = v15[11];
    __swift_project_boxed_opaque_existential_1(v15 + 7, v11);
    v13 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 32) + **(int **)(v12 + 32));
    v2 = (_QWORD *)swift_task_alloc();
    v15[21] = v2;
    *v2 = v15[12];
    v2[1] = GroupFetcher.fetchInvitation(with:);
    return v13(0, v11, v12);
  }
  else
  {
    v6 = v15[19];
    type metadata accessor for NSCompoundPredicate();
    swift_bridgeObjectRetain();
    v10 = @nonobjc NSCompoundPredicate.__allocating_init(andPredicateWithSubpredicates:)();
    v15[24] = v10;
    v15[17] = v10;
    outlined init with copy of InvitationStore(v6 + 80, (uint64_t)(v15 + 2));
    v7 = v15[5];
    v8 = v15[6];
    __swift_project_boxed_opaque_existential_1(v15 + 2, v7);
    v4 = v10;
    v9 = (uint64_t (*)(id, uint64_t, uint64_t))(*(_QWORD *)(v8 + 32) + **(int **)(v8 + 32));
    v5 = (_QWORD *)swift_task_alloc();
    v15[25] = v5;
    *v5 = v15[12];
    v5[1] = GroupFetcher.fetchInvitation(with:);
    return v9(v10, v7, v8);
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 176));
}

{
  _QWORD *v0;
  id v2;

  v2 = (id)v0[24];
  v0[12] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD))(v0[12] + 8))(v0[26]);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 96) + 8))();
}

{
  uint64_t v0;
  id v2;

  v2 = *(id *)(v0 + 192);
  *(_QWORD *)(v0 + 96) = v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 96) + 8))();
}

uint64_t GroupFetcher.fetchAcceptedGroups(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[47] = v1;
  v2[46] = a1;
  v2[36] = v2;
  v2[37] = 0;
  v2[38] = 0;
  v2[39] = 0;
  v2[40] = 0;
  v2[42] = 0;
  memset(v2 + 2, 0, 0x60uLL);
  v2[34] = 0;
  v2[35] = 0;
  v2[45] = 0;
  v2[37] = a1;
  v2[38] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[36] = *v2;
  v3[50] = a1;
  v3[51] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v5 = *v2 + 16;
  v3[36] = *v2;
  v3[54] = a1;
  v3[55] = v1;
  swift_task_dealloc();
  if (!v1)

  return swift_task_switch();
}

uint64_t GroupFetcher.fetchAcceptedGroups(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(id, uint64_t, uint64_t);
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t);
  char v14;
  _QWORD *v15;
  uint64_t v16;

  v1 = v0[46];
  v0[36] = v0;
  v16 = GroupFetcher.predicates(for:invitation:)(v1, 0);
  v0[48] = v16;
  v15[39] = v16;
  type metadata accessor for GPKGroup();
  v15[40] = Array.init()();
  swift_bridgeObjectRetain();
  v15[41] = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSPredicate]);
  lazy protocol witness table accessor for type [NSPredicate] and conformance [A]();
  v14 = Collection.isEmpty.getter();
  outlined destroy of [NSPredicate]();
  if ((v14 & 1) != 0)
  {
    outlined init with copy of GroupStore(v15[47] + 40, (uint64_t)(v15 + 29));
    v11 = v15[32];
    v12 = v15[33];
    __swift_project_boxed_opaque_existential_1(v15 + 29, v11);
    v13 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 24) + **(int **)(v12 + 24));
    v2 = (_QWORD *)swift_task_alloc();
    v15[49] = v2;
    *v2 = v15[36];
    v2[1] = GroupFetcher.fetchAcceptedGroups(with:);
    return v13(0, v11, v12);
  }
  else
  {
    v6 = v15[47];
    type metadata accessor for NSCompoundPredicate();
    swift_bridgeObjectRetain();
    v10 = @nonobjc NSCompoundPredicate.__allocating_init(andPredicateWithSubpredicates:)();
    v15[52] = v10;
    v15[42] = v10;
    outlined init with copy of GroupStore(v6 + 40, (uint64_t)(v15 + 14));
    v7 = v15[17];
    v8 = v15[18];
    __swift_project_boxed_opaque_existential_1(v15 + 14, v7);
    v4 = v10;
    v9 = (uint64_t (*)(id, uint64_t, uint64_t))(*(_QWORD *)(v8 + 24) + **(int **)(v8 + 24));
    v5 = (_QWORD *)swift_task_alloc();
    v15[53] = v5;
    *v5 = v15[36];
    v5[1] = GroupFetcher.fetchAcceptedGroups(with:);
    return v9(v10, v7, v8);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0[50];
  v0[36] = v0;
  v0[40] = v1;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 29));
  v9 = v0[47];
  outlined init with copy of Client(v9, (uint64_t)(v0 + 19));
  outlined init with copy of CryptographyServiceProviding(v9 + 120, (uint64_t)(v0 + 24));
  MemberIdentifierFetcher.init(client:cryptoService:)(v0 + 19, v0 + 24, v0 + 2);
  v10 = v0[40];
  swift_bridgeObjectRetain();
  v0[43] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKGroup]);
  lazy protocol witness table accessor for type [GPKGroup] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKGroup]>);
  IndexingIterator.next()();
  v11 = v0[44];
  v0[56] = v11;
  if (v11)
  {
    v8[45] = v11;
    v6 = dispatch thunk of GPKFetchGroupsRequest.serviceName.getter();
    v7 = v2;
    v8[57] = v2;
    v3 = (_QWORD *)swift_task_alloc();
    v8[58] = v3;
    *v3 = v8[36];
    v3[1] = GroupFetcher.fetchAcceptedGroups(with:);
    return MemberIdentifierFetcher.addStableMemberIdentifier(to:serviceName:)(v11, v6, v7);
  }
  else
  {
    outlined destroy of IndexingIterator<[GPKGroup]>();
    v5 = v8[40];
    swift_bridgeObjectRetain();
    outlined destroy of MemberIdentifierFetcher((uint64_t)(v8 + 2));
    outlined destroy of [GPKGroup]();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(v8[36] + 8))(v5);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0[54];
  v9 = (id)v0[52];
  v0[36] = v0;
  v0[40] = v1;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 14));

  v10 = v0[47];
  outlined init with copy of Client(v10, (uint64_t)(v0 + 19));
  outlined init with copy of CryptographyServiceProviding(v10 + 120, (uint64_t)(v0 + 24));
  MemberIdentifierFetcher.init(client:cryptoService:)(v0 + 19, v0 + 24, v0 + 2);
  v11 = v0[40];
  swift_bridgeObjectRetain();
  v0[43] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKGroup]);
  lazy protocol witness table accessor for type [GPKGroup] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKGroup]>);
  IndexingIterator.next()();
  v12 = v0[44];
  v0[56] = v12;
  if (v12)
  {
    v8[45] = v12;
    v6 = dispatch thunk of GPKFetchGroupsRequest.serviceName.getter();
    v7 = v2;
    v8[57] = v2;
    v3 = (_QWORD *)swift_task_alloc();
    v8[58] = v3;
    *v3 = v8[36];
    v3[1] = GroupFetcher.fetchAcceptedGroups(with:);
    return MemberIdentifierFetcher.addStableMemberIdentifier(to:serviceName:)(v12, v6, v7);
  }
  else
  {
    outlined destroy of IndexingIterator<[GPKGroup]>();
    v5 = v8[40];
    swift_bridgeObjectRetain();
    outlined destroy of MemberIdentifierFetcher((uint64_t)(v8 + 2));
    outlined destroy of [GPKGroup]();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(v8[36] + 8))(v5);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 288) = *v1;
  *(_QWORD *)(v2 + 472) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v0[36] = v0;
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKGroup]>);
  IndexingIterator.next()();
  v8 = v0[44];
  v0[56] = v8;
  if (v8)
  {
    v7[45] = v8;
    v5 = dispatch thunk of GPKFetchGroupsRequest.serviceName.getter();
    v6 = v1;
    v7[57] = v1;
    v2 = (_QWORD *)swift_task_alloc();
    v7[58] = v2;
    *v2 = v7[36];
    v2[1] = GroupFetcher.fetchAcceptedGroups(with:);
    return MemberIdentifierFetcher.addStableMemberIdentifier(to:serviceName:)(v8, v5, v6);
  }
  else
  {
    outlined destroy of IndexingIterator<[GPKGroup]>();
    v4 = v7[40];
    swift_bridgeObjectRetain();
    outlined destroy of MemberIdentifierFetcher((uint64_t)(v7 + 2));
    outlined destroy of [GPKGroup]();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(v7[36] + 8))(v4);
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 288) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 232);
  outlined destroy of [GPKGroup]();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 288) + 8))();
}

{
  uint64_t v0;
  id v2;

  v2 = *(id *)(v0 + 416);
  *(_QWORD *)(v0 + 288) = v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  outlined destroy of [GPKGroup]();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 288) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 288) = v0;
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of IndexingIterator<[GPKGroup]>();
  outlined destroy of MemberIdentifierFetcher(v0 + 16);
  outlined destroy of [GPKGroup]();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 288) + 8))();
}

uint64_t closure #1 in GroupFetcher.fetchGroups(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;

  v8 = a1;
  v7 = a2;
  v19 = 0;
  v18 = 0;
  v15 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v15 - 8);
  v9 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v7 - v9;
  v10 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v14 = (char *)&v7 - v10;
  v19 = *v4;
  v11 = *v5;
  v18 = v11;
  dispatch thunk of GPKGroup.creationDate.getter();
  dispatch thunk of GPKGroup.creationDate.getter();
  v17 = static Date.> infix(_:_:)();
  v16 = *(void (**)(char *, uint64_t))(v12 + 8);
  v16(v13, v15);
  v16(v14, v15);
  return v17 & 1;
}

uint64_t GroupFetcher.predicates(for:invitation:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD v17[4];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char *v64;
  char *v65;

  v34 = a1;
  v44 = a2;
  v3 = v2;
  v4 = v34;
  v43 = v3;
  v65 = 0;
  v64 = 0;
  v63 = 0;
  v62 = 0;
  v61 = 0;
  v60 = 0;
  v59 = 0;
  v56 = 0;
  v57 = 0;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroup.JoinState?);
  v36 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v37 = (uint64_t)v17 - v36;
  v47 = 0;
  v38 = type metadata accessor for GPKGroup.JoinState();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)v17 - v40;
  v65 = (char *)v17 - v40;
  v42 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKGroupID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v47);
  v50 = (uint64_t)v17 - v42;
  v52 = type metadata accessor for GPKGroupID();
  v49 = *(_QWORD *)(v52 - 8);
  v45 = (*(_QWORD *)(v49 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v47);
  v46 = (uint64_t)v17 - v45;
  v64 = (char *)v17 - v45;
  v63 = v4;
  v51 = 1;
  v62 = v6 & 1;
  v61 = v7;
  v48 = type metadata accessor for NSPredicate();
  v60 = _allocateUninitializedArray<A>(_:)();
  dispatch thunk of GPKFetchGroupsRequest.groupID.getter();
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v49 + 48))(v50, v51, v52) == 1)
  {
    outlined destroy of GPKGroupID?(v50);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v46, v50, v52);
    v8 = static NSPredicate.predicateForGroupID(_:invitation:)(v46, v44 & 1);
    v33 = &v53;
    v53 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSPredicate]);
    Array.append(_:)();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v46, v52);
  }
  if ((v44 & 1) == 0)
  {
    dispatch thunk of GPKFetchGroupsRequest.joinState.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38) == 1)
    {
      outlined destroy of GPKGroup.JoinState?(v37);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v41, v37, v38);
      v9 = static NSPredicate.predicateForJoinState(_:)();
      v32 = &v54;
      v54 = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSPredicate]);
      Array.append(_:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
    }
  }
  v10 = v35;
  v11 = GroupFetcher.domain(for:)(v34);
  v28 = v10;
  v29 = v11;
  v30 = v12;
  v31 = v10;
  if (v10)
  {
    v17[1] = v31;
    outlined destroy of [NSPredicate]();
    return v17[2];
  }
  else
  {
    v26 = v30;
    v27 = v29;
    if (v30)
    {
      v24 = v27;
      v25 = v26;
      v23 = v26;
      v56 = v27;
      v57 = v26;
      v13 = static NSPredicate.predicateForGroupDomain(_:invitation:)(v27, v26);
      v22 = &v55;
      v55 = v13;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSPredicate]);
      Array.append(_:)();
      swift_bridgeObjectRelease();
    }
    v21 = dispatch thunk of GPKFetchGroupsRequest.groupMode.getter();
    if ((v14 & 1) == 0)
    {
      v20 = v21;
      v59 = v21;
      v15 = static NSPredicate.predicateForGroupMode(_:invitation:)();
      v19 = &v58;
      v58 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSPredicate]);
      Array.append(_:)();
    }
    v17[3] = &v60;
    v18 = v60;
    swift_bridgeObjectRetain();
    outlined destroy of [NSPredicate]();
    return v18;
  }
}

unint64_t lazy protocol witness table accessor for type [NSPredicate] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [NSPredicate] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NSPredicate] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NSPredicate]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [NSPredicate] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [NSPredicate]()
{
  swift_bridgeObjectRelease();
}

uint64_t GroupFetcher.domain(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  Swift::String v20;
  _BYTE v22[4];
  int v23;
  uint64_t countAndFlagsBits;
  int v25;
  Swift::String v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Builtin::Word v31;
  void *v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  Swift::String v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  Builtin::Word v61;
  void *object;
  void *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  Swift::String v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103[8];
  uint64_t v104;
  uint64_t v105;
  char v106[8];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v78 = a1;
  v2 = v1;
  v3 = v78;
  v84 = v2;
  v110 = 0;
  v109 = 0;
  v101 = 0;
  v102 = 0;
  v95 = 0;
  v96 = 0;
  v79 = 0;
  v80 = type metadata accessor for InternalErrorCode();
  v81 = *(_QWORD *)(v80 - 8);
  v82 = (*(_QWORD *)(v81 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v83 = &v22[-v82];
  v85 = type metadata accessor for LogSubsystem();
  v86 = *(_QWORD *)(v85 - 8);
  v87 = (*(_QWORD *)(v86 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v85);
  v88 = &v22[-v87];
  v110 = v3;
  v109 = v4;
  v89 = dispatch thunk of GPKFetchGroupsRequest.groupDomain.getter();
  v90 = v5;
  if (v5)
  {
    v76 = v89;
    v77 = v90;
    v74 = v90;
    v75 = v89;
    v95 = v89;
    v96 = v90;
    v6 = String.isEmpty.getter();
    if ((v6 & 1) == 0)
    {
      v61 = 41;
      v7 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v64 = &v93;
      v93 = v7;
      v94 = v8;
      v67 = 1;
      v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Request contains group domain to filter: ", v61, 1);
      object = v9._object;
      DefaultStringInterpolation.appendLiteral(_:)(v9);
      swift_bridgeObjectRelease();
      v91 = v75;
      v92 = v74;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v67 & 1);
      v63 = v10._object;
      DefaultStringInterpolation.appendLiteral(_:)(v10);
      swift_bridgeObjectRelease();
      v66 = v93;
      v65 = v94;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      v68 = String.init(stringInterpolation:)();
      v71 = v11;
      v70 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupFetcher.swift", 0x1FuLL, v67 & 1);
      v69 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v88);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v88, v85);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v72 = v75;
      v73 = v74;
      return v72;
    }
    swift_bridgeObjectRelease();
  }
  v59 = v106;
  outlined init with copy of Client(v84, (uint64_t)v106);
  v58 = v107;
  v57 = v108;
  __swift_project_boxed_opaque_existential_1(v59, v107);
  v60 = (*(uint64_t (**)(uint64_t))(v57 + 24))(v58);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  if ((v60 & 1) == 0)
  {
    v46 = v103;
    outlined init with copy of Client(v84, (uint64_t)v103);
    v48 = v104;
    v47 = v105;
    __swift_project_boxed_opaque_existential_1(v46, v104);
    v49 = (*(uint64_t (**)(uint64_t))(v47 + 8))(v48);
    v50 = v13;
    if (v13)
    {
      v44 = v49;
      v45 = v50;
      v43 = v50;
      v42 = v49;
      v101 = v49;
      v102 = v50;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
      v14 = String.isEmpty.getter();
      if ((v14 & 1) == 0)
      {
        v31 = 51;
        v15 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v34 = &v99;
        v99 = v15;
        v100 = v16;
        v37 = 1;
        v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Using the domain from connection to filter groups: ", v31, 1);
        v32 = v17._object;
        DefaultStringInterpolation.appendLiteral(_:)(v17);
        swift_bridgeObjectRelease();
        v97 = v42;
        v98 = v43;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v37 & 1);
        v33 = v18._object;
        DefaultStringInterpolation.appendLiteral(_:)(v18);
        swift_bridgeObjectRelease();
        v36 = v99;
        v35 = v100;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        v38 = String.init(stringInterpolation:)();
        v41 = v19;
        v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupFetcher.swift", 0x1FuLL, v37 & 1);
        v39 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v88);
        gpklog(_:type:fileID:line:subsystem:)();
        (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v88, v85);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v72 = v42;
        v73 = v43;
        return v72;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
    }
    v23 = 1;
    v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Couldn't obtain bundle identifier from client", 0x2DuLL, 1);
    countAndFlagsBits = v20._countAndFlagsBits;
    v27 = v20._object;
    v25 = static os_log_type_t.error.getter();
    v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupFetcher.swift", 0x1FuLL, v23 & 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v88);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v88, v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = 0;
    type metadata accessor for InternalError();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v81 + 104))(v83, *MEMORY[0x24BE3DE60], v80);
    v30 = InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    return v29;
  }
  v56 = 0;
  v51 = 1;
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Owner request, so not filtering groups", 0x26uLL, 1);
  v52 = v12._countAndFlagsBits;
  v55 = v12._object;
  v54 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupFetcher.swift", 0x1FuLL, v51 & 1);
  v53 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v88);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v88, v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v72 = v56;
  v73 = v56;
  return v72;
}

void *GroupFetcher.init(client:groupStore:invitationStore:cryptoService:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, const void *a4@<X3>, uint64_t a5@<X8>)
{
  outlined init with take of Client(a1, (void *)a5);
  outlined init with take of GroupStore(a2, (void *)(a5 + 40));
  outlined init with take of InvitationStore(a3, (void *)(a5 + 80));
  return outlined init with take of CryptographyServiceProviding(a4, (void *)(a5 + 120));
}

uint64_t initializeBufferWithCopyOfBuffer for GroupFetcher(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for GroupFetcher(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 120);
}

_QWORD *initializeWithCopy for GroupFetcher(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v4 = a2[13];
  a1[13] = v4;
  a1[14] = a2[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  v5 = a2[18];
  a1[18] = v5;
  a1[19] = a2[19];
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a1 + 15), (uint64_t)(a2 + 15));
  return a1;
}

uint64_t assignWithCopy for GroupFetcher(uint64_t a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, a2 + 5);
  __swift_assign_boxed_opaque_existential_1(a1 + 80, a2 + 10);
  __swift_assign_boxed_opaque_existential_1(a1 + 120, a2 + 15);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy160_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0xA0uLL);
}

uint64_t assignWithTake for GroupFetcher(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  memcpy((void *)a1, (const void *)a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  memcpy((void *)(a1 + 120), (const void *)(a2 + 120), 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupFetcher(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 160))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for GroupFetcher(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 20;
  if (a2 < 0)
  {
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      result[3] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupFetcher()
{
  return &type metadata for GroupFetcher;
}

uint64_t CachedGroupProperties.groupBlob.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v2;
}

uint64_t CachedGroupProperties.invitationGroupVersion.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t *CachedGroupProperties.init(groupBlob:invitationGroupVersion:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  outlined copy of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a1, a2);
  v9 = a1;
  v10 = a2;
  v11 = a3;
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  outlined consume of Data._Representation(a1, a2);
  result = &v9;
  outlined destroy of CachedGroupProperties((uint64_t)&v9);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CachedGroupProperties(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

void CachedGroupProperties.init(cachedGroup:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v10;
  uint64_t v11;
  unint64_t v12;
  id v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v10 = objc_msgSend(a1, sel_groupBlob);
  if (v10)
  {
    v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v2;

    v6 = v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0xF000000000000000;
  }
  if ((v7 & 0xF000000000000000) == 0xF000000000000000)
  {

    *a2 = 0;
    a2[1] = 0xF000000000000000;
    a2[2] = 0;
  }
  else
  {
    outlined copy of Data._Representation(v6, v7);
    outlined copy of Data._Representation(v6, v7);
    v11 = v6;
    v12 = v7;
    v3 = objc_msgSend(a1, sel_invitationGroupVersion);
    v13 = v3;
    outlined consume of Data._Representation(v6, v7);
    *a2 = v6;
    a2[1] = v7;
    a2[2] = (uint64_t)v3;

    outlined destroy of CachedGroupProperties((uint64_t)&v11);
  }
}

id CoreDataCachedGroupStore.context.getter()
{
  id *v0;
  id v1;
  id v3;

  v3 = *v0;
  v1 = *v0;
  return v3;
}

GroupKitCore::CoreDataCachedGroupStore __swiftcall CoreDataCachedGroupStore.init(context:clientModelVersion:)(NSManagedObjectContext context, Swift::Float clientModelVersion)
{
  uint64_t v2;
  objc_class *v3;
  objc_class *v4;
  objc_class *p_isa;
  float v6;
  uint64_t v7;
  Class isa;
  Swift::Float v11;
  GroupKitCore::CoreDataCachedGroupStore result;

  v7 = v2;
  isa = 0;
  v11 = 0.0;
  v3 = context.super.isa;
  v4 = context.super.isa;
  isa = context.super.isa;
  v11 = clientModelVersion;
  *(NSManagedObjectContext *)v7 = context;
  *(Swift::Float *)(v7 + 8) = clientModelVersion;

  p_isa = (objc_class *)&isa;
  outlined destroy of CoreDataCachedGroupStore((id *)&isa);
  result.context.super.isa = p_isa;
  result.clientModelVersion = v6;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CoreDataCachedGroupStore(id *a1)
{

}

void CoreDataCachedGroupStore.store(cachedGroup:groupID:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  int v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v10 = a1;
  v14 = a2;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v30 = 0;
  v31 = 0;
  v15 = type metadata accessor for GPKGroupID();
  v13 = *(_QWORD *)(v15 - 8);
  v11 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v17 = (char *)v9 - v11;
  v18 = *v2;
  v19 = v2[1];
  v20 = v2[2];
  v33 = v18;
  v34 = v19;
  v35 = v20;
  v32 = v3;
  v12 = *(id *)v5;
  v4 = v12;
  v16 = *(_DWORD *)(v5 + 8);
  v30 = v12;
  v31 = v16;
  v6 = v12;
  v7 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, v14, v15);
  outlined copy of CachedGroupProperties?(v18, v19);
  v8 = v21;
  v24 = v4;
  v25 = v16;
  v26 = v17;
  v27 = v18;
  v28 = v19;
  v29 = v20;
  NSManagedObjectContext.sync<A>(work:)();
  v22 = v8;
  v23 = v8;
  if (v8)
    v9[1] = v23;

  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v15);
  outlined consume of CachedGroupProperties?(v18, v19);

}

uint64_t closure #1 in CoreDataCachedGroupStore.store(cachedGroup:groupID:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, float a6)
{
  uint64_t v6;
  double v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t result;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  id v51[2];
  int v52;
  uint64_t v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v41 = a1;
  v42 = a6;
  v44 = a2;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v63 = *MEMORY[0x24BDAC8D0];
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v6 = v43;
  v45 = type metadata accessor for GPKGroupID();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v44);
  v48 = (char *)&v20 - v47;
  v54 = v8;
  v55 = LODWORD(v7);
  v53 = v9;
  v60 = v10;
  v61 = v11;
  v62 = v12;
  v51[1] = v8;
  v52 = LODWORD(v7);
  CoreDataCachedGroupStore._deleteCachedGroup(groupID:)(v9);
  v49 = v6;
  v50 = v6;
  if (v6)
  {
    result = v50;
    v24 = v50;
    return result;
  }
  outlined copy of CachedGroupProperties?(v38, v39);
  if ((v39 & 0xF000000000000000) == 0xF000000000000000)
  {
    v34 = v49;
  }
  else
  {
    v35 = v38;
    v36 = v39;
    v37 = v40;
    v30 = v40;
    v29 = v39;
    v28 = v38;
    v56 = v38;
    v57 = v39;
    v58 = v40;
    type metadata accessor for CachedGroup();
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v48, v44, v45);
    outlined copy of Data._Representation(v28, v29);
    v13 = v41;
    v14 = v49;
    v15 = (void *)CachedGroup.__allocating_init(groupID:groupBlob:invitationGroupVersion:clientModelVersion:context:)();
    v31 = v14;
    v32 = v15;
    v33 = v14;
    if (v14)
    {
      v23 = v33;
      outlined consume of Data._Representation(v28, v29);
      result = v23;
      v24 = v23;
      return result;
    }

    outlined consume of Data._Representation(v28, v29);
    v34 = v31;
  }
  v25 = v34;
  v59 = 0;
  v16 = v41;
  v51[0] = v59;
  v27 = objc_msgSend(v41, sel_save_, v51);
  v26 = v51[0];
  v17 = v51[0];
  v18 = v59;
  v59 = v26;

  result = v27;
  if ((v27 & 1) == 0)
  {
    v21 = v59;
    v22 = _convertNSErrorToError(_:)();

    swift_willThrow();
    return v22;
  }
  return result;
}

uint64_t partial apply for closure #1 in CoreDataCachedGroupStore.store(cachedGroup:groupID:)()
{
  uint64_t v0;

  return closure #1 in CoreDataCachedGroupStore.store(cachedGroup:groupID:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(float *)(v0 + 24));
}

uint64_t CoreDataCachedGroupStore._deleteCachedGroup(groupID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  id v4;
  double v5;
  uint64_t v6;
  _QWORD v7[3];
  int v8;
  _QWORD v9[7];
  uint64_t v10;
  id v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  int v19;
  id v20;
  int v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v17 = 0;
  v22 = a1;
  v11 = *(id *)v1;
  v12 = *(_DWORD *)(v1 + 8);
  v20 = v11;
  v21 = v12;
  v18 = v11;
  v19 = v12;
  result = CoreDataCachedGroupStore._fetchCachedGroups(groupID:)(a1);
  v13 = v2;
  v14 = result;
  v15 = v2;
  if (!v2)
  {
    v9[2] = v14;
    v17 = v14;
    v16 = v14;
    v4 = v11;
    v9[3] = v9;
    v5 = MEMORY[0x24BDAC7A8](v9);
    v9[4] = v7;
    v7[2] = v11;
    v8 = LODWORD(v5);
    v9[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CachedGroup]);
    lazy protocol witness table accessor for type [CachedGroup] and conformance [A]();
    v6 = v13;
    Sequence.forEach(_:)();
    v9[6] = v6;
    v10 = v6;
    if (v6)
      v9[0] = v10;

    return swift_bridgeObjectRelease();
  }
  return result;
}

void CoreDataCachedGroupStore.cachedGroup(groupID:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  int v23;
  char *v24;
  id v25;
  int v26;
  uint64_t v27;

  v16 = a2;
  v12 = a1;
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v13 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v13 - 8);
  v9 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v8 - v9;
  v27 = v2;
  v10 = *(id *)v4;
  v3 = v10;
  v14 = *(_DWORD *)(v4 + 8);
  v25 = v10;
  v26 = v14;
  v5 = v10;
  v6 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v12, v13);
  v17 = &v21;
  v22 = v3;
  v23 = v14;
  v24 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CachedGroupProperties?);
  v7 = v18;
  NSManagedObjectContext.sync<A>(work:)();
  v19 = v7;
  v20 = v7;
  if (v7)
    v8 = v20;

  (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v13);
}

uint64_t closure #1 in CoreDataCachedGroupStore.cachedGroup(groupID:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  void *v5;

  result = CoreDataCachedGroupStore._fetchCachedGroups(groupID:)(a1);
  if (!v2)
  {
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CachedGroup]);
    lazy protocol witness table accessor for type [CachedGroup] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [CachedGroup]();
    if (v5)
    {
      CachedGroupProperties.init(cachedGroup:)(v5, a2);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0xF000000000000000;
      a2[2] = 0;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t CoreDataCachedGroupStore._fetchCachedGroups(groupID:)(uint64_t a1)
{
  id *v1;
  uint64_t v2;
  Swift::String v3;
  _QWORD *v4;
  id v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t countAndFlagsBits;
  id v43;
  void *object;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  id *v54;
  uint64_t v55;

  v29 = a1;
  v55 = 0;
  v54 = 0;
  v53 = 0;
  v52 = 0;
  v30 = 0;
  v38 = type metadata accessor for UUID();
  v37 = *(_QWORD *)(v38 - 8);
  v27 = (*(_QWORD *)(v37 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v39 = (char *)v25 - v27;
  v55 = v2;
  v43 = *v1;
  v54 = v1;
  v46 = type metadata accessor for CachedGroup();
  v48 = (id)static CachedGroup.fetchRequest()();
  v53 = v48;
  v31 = type metadata accessor for NSExpression();
  swift_getKeyPath();
  v32 = (id)NSExpression.init<A, B>(forKeyPath:)();
  v52 = v32;
  v33 = type metadata accessor for NSPredicate();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%@ == %@", 8uLL, 1);
  countAndFlagsBits = v3._countAndFlagsBits;
  object = v3._object;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v40 = _allocateUninitializedArray<A>(_:)();
  v36 = v4;
  v5 = v32;
  v36[3] = v31;
  v6 = lazy protocol witness table accessor for type NSExpression and conformance NSObject();
  v7 = v36;
  v8 = v6;
  v9 = v32;
  v36[4] = v8;
  *v7 = v9;
  GPKGroupID.uuid.getter();
  v34 = UUID.uuidString.getter();
  v35 = v10;
  v36[8] = MEMORY[0x24BEE0D00];
  v11 = lazy protocol witness table accessor for type String and conformance String();
  v12 = v34;
  v13 = v35;
  v14 = v36;
  v15 = v37;
  v16 = v38;
  v17 = v11;
  v18 = v39;
  v36[9] = v17;
  v14[5] = v12;
  v14[6] = v13;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v16);
  _finalizeUninitializedArray<A>(_:)();
  v19 = (void *)NSPredicate.init(format:_:)();
  v20 = v43;
  v45 = v19;
  swift_bridgeObjectRelease();
  objc_msgSend(v48, sel_setPredicate_, v45);

  v21 = v20;
  v22 = v47;
  v23 = NSManagedObjectContext.fetch<A>(_:)();
  v49 = v22;
  v50 = v23;
  v51 = v22;
  if (v22)
  {
    v25[1] = v51;

    return v28;
  }
  else
  {
    v26 = v50;

    return v26;
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CoreDataCachedGroupStore.deleteAllGroups()()
{
  id v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  id v4;
  id v5;
  uint64_t v6;
  Swift::String v7;
  _QWORD v8[2];
  int v9;
  uint64_t v10;
  int v11;
  Swift::String v12;
  void *v13;
  unint64_t v14;
  id v15;
  int v16;
  uint64_t countAndFlagsBits;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  void *v24;
  void *object;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  int v31;
  id v32;
  int v33;

  v32 = 0;
  v33 = 0;
  v22 = type metadata accessor for LogSubsystem();
  v20 = *(_QWORD *)(v22 - 8);
  v14 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v22);
  v21 = (uint64_t)v8 - v14;
  v15 = *(id *)v1;
  v0 = v15;
  v26 = *(_DWORD *)(v1 + 8);
  v32 = v15;
  v33 = v26;
  v16 = 1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Deleting all cached groups", 0x1AuLL, 1);
  countAndFlagsBits = v2._countAndFlagsBits;
  object = v2._object;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/CachedGroupStore.swift", 0x23uLL, v16 & 1);
  v19 = v3._countAndFlagsBits;
  v24 = v3._object;
  v18 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
  gpklog(_:type:fileID:line:subsystem:)();
  v23 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v23(v21, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = v0;
  v5 = v0;
  v6 = v27;
  v30 = v0;
  v31 = v26;
  NSManagedObjectContext.sync<A>(work:)();
  v28 = v6;
  v29 = v6;
  if (v6)
  {
    v8[1] = v29;

  }
  else
  {

    v9 = 1;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("All cached groups deleted", 0x19uLL, 1);
    v10 = v7._countAndFlagsBits;
    v13 = v7._object;
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/CachedGroupStore.swift", 0x23uLL, v9 & 1);
    v11 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
    gpklog(_:type:fileID:line:subsystem:)();
    v23(v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void closure #1 in CoreDataCachedGroupStore.deleteAllGroups()(void *a1, float a2)
{
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  unsigned __int8 v9;
  uint64_t v11;
  id v12;
  void *v13;
  id v14[4];
  void *v15;
  id v16;
  void *v17;
  float v18;
  id v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v14[2] = 0;
  v14[3] = 0;
  v17 = a1;
  v18 = a2;
  type metadata accessor for CachedGroup();
  v12 = (id)static CachedGroup.fetchRequest()();
  v16 = v12;
  v2 = a1;
  v13 = (void *)NSManagedObjectContext.fetch<A>(_:)();
  if (v11)
  {

  }
  else
  {

    v15 = v13;
    swift_bridgeObjectRetain();
    v14[1] = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CachedGroup]);
    lazy protocol witness table accessor for type [CachedGroup] and conformance [A]();
    Collection<>.makeIterator()();
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[CachedGroup]>);
      IndexingIterator.next()();
      if (!v20)
        break;
      v6 = a1;
      objc_msgSend(a1, sel_deleteObject_, v20);

    }
    outlined destroy of IndexingIterator<[CachedGroup]>();
    v19 = 0;
    v3 = a1;
    v14[0] = 0;
    v9 = objc_msgSend(a1, sel_save_, v14);
    v8 = v14[0];
    v4 = v14[0];
    v5 = v19;
    v19 = v8;

    if ((v9 & 1) == 0)
    {
      v7 = v19;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    swift_bridgeObjectRelease();

  }
}

void closure #1 in CoreDataCachedGroupStore._deleteCachedGroup(groupID:)(uint64_t *a1, id a2)
{
  id v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a2;
  objc_msgSend(a2, sel_deleteObject_, v3);

}

void partial apply for closure #1 in CoreDataCachedGroupStore._deleteCachedGroup(groupID:)(uint64_t *a1)
{
  uint64_t v1;

  closure #1 in CoreDataCachedGroupStore._deleteCachedGroup(groupID:)(a1, *(id *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type [CachedGroup] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [CachedGroup] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CachedGroup] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CachedGroup]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [CachedGroup] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [CachedGroup] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CachedGroup] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CachedGroup]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [CachedGroup] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t partial apply for closure #1 in CoreDataCachedGroupStore.cachedGroup(groupID:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in CoreDataCachedGroupStore.cachedGroup(groupID:)(*(_QWORD *)(v1 + 32), a1);
}

void key path getter for CachedGroup.groupID : CachedGroup(uint64_t a1@<X0>, void *a2@<X8>)
{
  id *v2;
  id v3;
  id v4[2];
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v5 = a2;
  v10 = a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v4 - v8;
  v11 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v4 - v11;
  v13 = *v2;
  v3 = v13;
  v16 = v13;
  v14 = v13;
  v15 = objc_msgSend(v13, sel_groupID);
  if (v15)
  {
    v4[1] = v15;
    v4[0] = v15;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v9, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  outlined init with take of UUID?(v12, v5);

}

void key path setter for CachedGroup.groupID : CachedGroup(uint64_t a1, id *a2)
{
  const void *v2;
  id v3;
  id v4;
  Class isa;
  Class v6;
  uint64_t v7;
  unint64_t v8;
  id *v9;
  id v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v7 = a1;
  v9 = a2;
  v8 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v4 - v8;
  outlined init with copy of UUID?(v2, (char *)&v4 - v8);
  v10 = *v9;
  v3 = v10;
  v15 = v10;
  v11 = v10;
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 48))(v12, 1) == 1)
  {
    v6 = 0;
  }
  else
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    v6 = isa;
  }
  objc_msgSend(v11, sel_setGroupID_, v6);

}

void partial apply for closure #1 in CoreDataCachedGroupStore.deleteAllGroups()()
{
  uint64_t v0;

  closure #1 in CoreDataCachedGroupStore.deleteAllGroups()(*(void **)(v0 + 16), *(float *)(v0 + 24));
}

void protocol witness for CachedGroupStore.store(cachedGroup:groupID:) in conformance CoreDataCachedGroupStore(uint64_t a1, uint64_t a2)
{
  CoreDataCachedGroupStore.store(cachedGroup:groupID:)(a1, a2);
}

void protocol witness for CachedGroupStore.cachedGroup(groupID:) in conformance CoreDataCachedGroupStore(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CoreDataCachedGroupStore.cachedGroup(groupID:)(a1, a2);
}

void protocol witness for CachedGroupStore.deleteAllGroups() in conformance CoreDataCachedGroupStore()
{
  CoreDataCachedGroupStore.deleteAllGroups()();
}

uint64_t *initializeBufferWithCopyOfBuffer for CachedGroupProperties(uint64_t *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  result = a1;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = a2[2];
  return result;
}

uint64_t destroy for CachedGroupProperties(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *initializeWithCopy for CachedGroupProperties(uint64_t *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  result = a1;
  *a1 = v3;
  a1[1] = v4;
  a1[2] = a2[2];
  return result;
}

uint64_t *assignWithCopy for CachedGroupProperties(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *result;
  uint64_t v5;
  unint64_t v6;

  v5 = *a2;
  v6 = a2[1];
  outlined copy of Data._Representation(*a2, v6);
  v2 = *a1;
  v3 = a1[1];
  *a1 = v5;
  a1[1] = v6;
  outlined consume of Data._Representation(v2, v3);
  result = a1;
  a1[2] = a2[2];
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  return result;
}

uint64_t *assignWithTake for CachedGroupProperties(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *result;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  result = a1;
  a1[2] = a2[2];
  return result;
}

uint64_t getEnumTagSinglePayload for CachedGroupProperties(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  int v4;

  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    {
      v4 = *(_DWORD *)a1 + 12;
    }
    else
    {
      v2 = ~(((*(_QWORD *)(a1 + 8) >> 60) >> 2) | (4 * (*(_QWORD *)(a1 + 8) >> 60))) & 0xF;
      if (v2 >= 0xC)
        v2 = -1;
      v4 = v2;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CachedGroupProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0xC;
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    if (a3 > 0xC)
    {
      if (v3)
        *(_BYTE *)(result + 24) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0xC)
    {
      if (v3)
        *(_BYTE *)(result + 24) = 0;
      else
        __break(1u);
    }
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedGroupProperties()
{
  return &type metadata for CachedGroupProperties;
}

uint64_t dispatch thunk of CachedGroupStore.store(cachedGroup:groupID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of CachedGroupStore.cachedGroup(groupID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CachedGroupStore.deleteAllGroups()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t initializeBufferWithCopyOfBuffer for CoreDataCachedGroupStore(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t result;
  id v4;

  v4 = *(id *)a2;
  v2 = *(id *)a2;
  result = a1;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

void destroy for CoreDataCachedGroupStore(id *a1)
{

}

uint64_t initializeWithCopy for CoreDataCachedGroupStore(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t result;
  id v4;

  v4 = *(id *)a2;
  v2 = *(id *)a2;
  result = a1;
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return result;
}

float assignWithCopy for CoreDataCachedGroupStore(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  float result;
  id v5;

  v5 = *(id *)a2;
  v2 = *(id *)a2;
  v3 = *(void **)a1;
  *(_QWORD *)a1 = v5;

  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

float assignWithTake for CoreDataCachedGroupStore(uint64_t a1, uint64_t a2)
{
  void *v2;
  float result;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CoreDataCachedGroupStore(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(_BYTE *)(a1 + 12))
    {
      v4 = *(_QWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (*(_QWORD *)a1 < 0x100000000uLL)
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreDataCachedGroupStore(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_DWORD *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 12) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 12) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)result = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreDataCachedGroupStore()
{
  return &type metadata for CoreDataCachedGroupStore;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[CachedGroup]>()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [CachedGroup]()
{
  swift_bridgeObjectRelease();
}

uint64_t DaemonGroupManager.metrics.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[5];
  uint64_t v6;

  v6 = v1;
  swift_retain();
  outlined init with copy of Client(v3 + 16, (uint64_t)v5);
  ServiceBuilder.metrics(client:)(v5, a1);
  outlined destroy of Client?((uint64_t)v5);
  return swift_release();
}

_QWORD *DaemonGroupManager.__allocating_init(client:builder:clientMessageBroadcaster:maxRetries:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocObject();
  return DaemonGroupManager.init(client:builder:clientMessageBroadcaster:maxRetries:)(a1, a2, a3, a4);
}

_QWORD *DaemonGroupManager.init(client:builder:clientMessageBroadcaster:maxRetries:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v11;
  _BYTE v12[40];
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = v4;
  v11 = v5;
  v17 = a1;
  v16 = a2;
  v15 = a3;
  v14 = a4;
  v13 = v5;
  outlined init with copy of Client(a1, (uint64_t)v12);
  outlined init with take of Client(v12, v11 + 2);
  swift_retain();
  v11[7] = a2;
  swift_retain();
  v11[8] = a3;
  v11[9] = a4;
  ServiceBuilder.peerMessagingService.getter();
  swift_retain();
  PeerMessagingService.delegate.setter((uint64_t)v11, (uint64_t)&protocol witness table for DaemonGroupManager);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v11;
}

uint64_t DaemonGroupManager.groupStore()()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  id v8[23];
  uint64_t v9;
  uint64_t v10;

  v10 = v0;
  v2 = *(_QWORD *)(v0 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v8);
  swift_release();
  outlined init with copy of Store((uint64_t)&v9, (uint64_t)v5);
  outlined destroy of Dependencies(v8);
  v4 = v6;
  v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t))(v3 + 64))(v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t DaemonGroupManager.invitationStore()()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  id v8[23];
  uint64_t v9;
  uint64_t v10;

  v10 = v0;
  v2 = *(_QWORD *)(v0 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v8);
  swift_release();
  outlined init with copy of Store((uint64_t)&v9, (uint64_t)v5);
  outlined destroy of Dependencies(v8);
  v4 = v6;
  v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t))(v3 + 56))(v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t DaemonGroupManager.userStore()()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  id v8[23];
  uint64_t v9;
  uint64_t v10;

  v10 = v0;
  v2 = *(_QWORD *)(v0 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v2 + 16, (uint64_t)v8);
  swift_release();
  outlined init with copy of Store((uint64_t)&v9, (uint64_t)v5);
  outlined destroy of Dependencies(v8);
  v4 = v6;
  v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t))(v3 + 48))(v4);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t DaemonGroupManager.fetchGroups(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[31] = v1;
  v2[30] = a1;
  v2[27] = v2;
  v2[28] = 0;
  v2[29] = 0;
  memset(v2 + 2, 0, 0xA0uLL);
  v2[28] = a1;
  v2[29] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[27] = *v2;
  v3[35] = a1;
  v3[36] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.fetchGroups(with:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  *(_QWORD *)(v0 + 216) = v0;
  swift_retain();
  *(_QWORD *)(v0 + 256) = ServiceBuilder.peerMessagingService.getter();
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 264) = v1;
  *v1 = *(_QWORD *)(v3 + 216);
  v1[1] = DaemonGroupManager.fetchGroups(with:);
  return PeerMessagingService.fetchPendingInvitationsAndWait()();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 216) = *(_QWORD *)v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 216) = v0;
  swift_retain();
  outlined init with copy of Client(v4 + 16, v0 + 176);
  ServiceBuilder.groupFetcher(for:)(v0 + 176, v0 + 16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v3 + 22));
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v3[34] = v1;
  *v1 = v3[27];
  v1[1] = DaemonGroupManager.fetchGroups(with:);
  return GroupFetcher.fetchGroups(with:)(v3[30]);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 216) = v0;
  outlined destroy of GroupFetcher(v0 + 16);
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v2 + 216) + 8))(*(_QWORD *)(v2 + 280));
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = v0;
  outlined destroy of GroupFetcher(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 216) + 8))();
}

uint64_t outlined destroy of GroupFetcher(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  return a1;
}

uint64_t DaemonGroupManager.createNewGroup(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[120] = v1;
  v2[119] = a1;
  v2[116] = v2;
  v2[117] = 0;
  v2[118] = 0;
  bzero(v2 + 2, 0x368uLL);
  v2[117] = a1;
  v2[118] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[116] = *v2;
  v3[122] = a1;
  v3[123] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.createNewGroup(with:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v0 + 960);
  *(_QWORD *)(v0 + 928) = v0;
  swift_retain();
  outlined init with copy of Client(v4 + 16, v0 + 888);
  swift_retain();
  ServiceBuilder.groupCreator(for:clientMessageBroadcaster:)(v0 + 888);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v3 + 111));
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v3[121] = v1;
  *v1 = v3[116];
  v1[1] = DaemonGroupManager.createNewGroup(with:);
  return GroupCreator.createGroup(with:)(v3[119]);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 928) = v0;
  outlined destroy of GroupCreator((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v2 + 928) + 8))(*(_QWORD *)(v2 + 976));
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 928) = v0;
  outlined destroy of GroupCreator((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 928) + 8))();
}

_QWORD *outlined destroy of GroupCreator(_QWORD *a1)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 5));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 10));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 15));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 20));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 25));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 30));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 35));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 40));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 45));
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(a1[52], a1[53]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 54));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 59));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 64));
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 71));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 76));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 82));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 87));
  if (a1[95])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 92));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t DaemonGroupManager.updateGroup(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 1480) = v1;
  *(_QWORD *)(v2 + 1472) = a1;
  *(_QWORD *)(v2 + 1424) = v2;
  *(_QWORD *)(v2 + 1432) = 0;
  *(_QWORD *)(v2 + 1440) = 0;
  bzero((void *)(v2 + 16), 0x360uLL);
  *(_QWORD *)(v2 + 1448) = 0;
  bzero((void *)(v2 + 880), 0x1C0uLL);
  *(_BYTE *)(v2 + 1648) = 0;
  *(_QWORD *)(v2 + 1456) = 0;
  v3 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v2 + 1488) = v3;
  *(_QWORD *)(v2 + 1496) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 1504) = swift_task_alloc();
  v4 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v2 + 1512) = v4;
  *(_QWORD *)(v2 + 1520) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 1528) = swift_task_alloc();
  v5 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v2 + 1536) = v5;
  *(_QWORD *)(v2 + 1544) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 1552) = swift_task_alloc();
  *(_QWORD *)(v2 + 1560) = swift_task_alloc();
  *(_QWORD *)(v2 + 1568) = swift_task_alloc();
  *(_QWORD *)(v2 + 1432) = a1;
  *(_QWORD *)(v2 + 1440) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[178] = *v2;
  v3[198] = a1;
  v3[199] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.updateGroup(with:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v0 + 1480);
  *(_QWORD *)(v0 + 1424) = v0;
  swift_retain();
  outlined init with copy of Client(v4 + 16, v0 + 1328);
  swift_retain();
  ServiceBuilder.groupUpdater(for:broadcaster:)(v0 + 1328);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v3 + 166));
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v3[197] = v1;
  *v1 = v3[178];
  v1[1] = DaemonGroupManager.updateGroup(with:);
  return GroupUpdater.updateGroup(with:)(v3[184]);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 1424) = v0;
  outlined destroy of GroupUpdater((_QWORD *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v2 + 1424) + 8))(*(_QWORD *)(v2 + 1584));
}

{
  uint64_t v0;
  char v1;
  _QWORD *v3;
  id v4;
  _QWORD *v5;

  v1 = *(_BYTE *)(v0 + 1649);
  *(_QWORD *)(v0 + 1424) = v0;
  *(_BYTE *)(v0 + 1648) = v1 & 1;
  if ((v1 & 1) != 0)
  {
    GPKUpdateGroupRequest.groupID.getter();
    v3 = (_QWORD *)swift_task_alloc();
    v5[204] = v3;
    *v3 = v5[178];
    v3[1] = DaemonGroupManager.updateGroup(with:);
    return GroupRepairService.markGroupAsDestroyed(groupID:)(v5[195]);
  }
  else
  {
    v4 = (id)v5[200];
    swift_willThrow();
    outlined destroy of GroupRepairService((uint64_t)(v5 + 110));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(v5[178] + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 1424) = *v1;
  *(_QWORD *)(v2 + 1640) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4 + 1608))(*(_QWORD *)(v4 + 1544), *(_QWORD *)(v4 + 1520));
  return swift_task_switch();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v9 = v0[191];
  v7 = v0[190];
  v8 = v0[189];
  v0[178] = v0;
  type metadata accessor for InternalError();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BE3DD30], v8);
  v16 = (void *)InternalError.__allocating_init(_:internalInfo:)();
  swift_willThrow();
  v12 = (void (*)(uint64_t, uint64_t))v0[203];
  v17 = (void *)v0[200];
  v10 = v0[194];
  v11 = v0[192];
  v14 = v0[188];
  v13 = v0[187];
  v15 = v0[186];
  v1 = v16;
  v0[182] = v16;
  v0[176] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[177] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occured while repairing(marking as deleted) a stall group: ", 0x41uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  GPKUpdateGroupRequest.groupID.getter();
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v12(v10, v11);
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", 2uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  v0[183] = v16;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();

  outlined destroy of GroupRepairService((uint64_t)(v0 + 110));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[178] + 8))();
}

{
  _QWORD *v0;
  id v1;
  _QWORD *v2;
  _QWORD *v4;
  id v5;
  uint64_t v6;

  v0[178] = v0;
  outlined destroy of GroupUpdater(v0 + 2);
  v5 = (id)v0[199];
  v0[200] = v5;
  v6 = v0[185];
  v1 = v5;
  v0[181] = v5;
  swift_retain();
  outlined init with copy of Client(v6 + 16, (uint64_t)(v0 + 171));
  ServiceBuilder.groupRepairService(for:)((uint64_t)(v0 + 171), (uint64_t)(v0 + 110));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v4 + 171));
  swift_release();
  GPKUpdateGroupRequest.groupID.getter();
  v2 = (_QWORD *)swift_task_alloc();
  v4[201] = v2;
  *v2 = v4[178];
  v2[1] = DaemonGroupManager.updateGroup(with:);
  return GroupRepairService.repairAction(groupID:error:)(v4[196], (uint64_t)v5);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v5;

  v5 = (id)v0[200];
  v1 = v0[196];
  v2 = v0[193];
  v3 = v0[192];
  v0[178] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of GroupRepairService((uint64_t)(v0 + 110));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[178] + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  v1 = (void (*)(uint64_t, uint64_t))v0[203];
  v2 = v0[195];
  v3 = v0[192];
  v0[178] = v0;
  v1(v2, v3);
  v16 = (void *)v0[205];
  v12 = (void (*)(uint64_t, uint64_t))v0[203];
  v17 = (void *)v0[200];
  v10 = v0[194];
  v11 = v0[192];
  v14 = v0[188];
  v13 = v0[187];
  v15 = v0[186];
  v4 = v16;
  v0[182] = v16;
  v0[176] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[177] = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occured while repairing(marking as deleted) a stall group: ", 0x41uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  GPKUpdateGroupRequest.groupID.getter();
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v12(v10, v11);
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", 2uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  v0[183] = v16;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();

  outlined destroy of GroupRepairService((uint64_t)(v0 + 110));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[178] + 8))();
}

uint64_t DaemonGroupManager.updateGroup(with:)(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v8;

  v3 = *v2;
  v8 = (_QWORD *)(*v2 + 16);
  *(_QWORD *)(v3 + 1424) = *v2;
  *(_BYTE *)(v3 + 1649) = a1;
  *(_QWORD *)(v3 + 1616) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = v8[194];
    v5 = v8[190];
    v6 = *(void (**)(uint64_t, uint64_t))(v8[191] + 8);
    v8[201] = v6;
    v6(v4, v5);
  }
  return swift_task_switch();
}

uint64_t outlined destroy of GroupRepairService(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184));
  __swift_destroy_boxed_opaque_existential_1(a1 + 192);
  __swift_destroy_boxed_opaque_existential_1(a1 + 232);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 288);
  __swift_destroy_boxed_opaque_existential_1(a1 + 328);
  __swift_destroy_boxed_opaque_existential_1(a1 + 368);
  __swift_destroy_boxed_opaque_existential_1(a1 + 408);
  return a1;
}

uint64_t default argument 1 of DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:)()
{
  return 0;
}

uint64_t DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 264) = v2;
  *(_BYTE *)(v3 + 218) = a2 & 1;
  *(_QWORD *)(v3 + 256) = a1;
  *(_QWORD *)(v3 + 224) = v3;
  *(_QWORD *)(v3 + 232) = 0;
  *(_BYTE *)(v3 + 296) = 0;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 232) = a1;
  *(_BYTE *)(v3 + 296) = a2 & 1;
  *(_QWORD *)(v3 + 240) = v2;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(v0 + 264);
  v6 = *(_BYTE *)(v0 + 218);
  v5 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 224) = v0;
  DaemonGroupManager.metrics.getter((_WORD *)(v0 + 16));
  swift_retain();
  swift_retain();
  v8 = swift_task_alloc();
  *(_QWORD *)(v0 + 272) = v8;
  *(_QWORD *)(v8 + 16) = v4;
  *(_QWORD *)(v8 + 24) = v5;
  *(_BYTE *)(v8 + 32) = v6 & 1;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 280) = v1;
  v2 = type metadata accessor for GPKGroup();
  *v1 = *(_QWORD *)(v7 + 224);
  v1[1] = DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:);
  return Metrics.callAsFunction<A>(_:worker:)(v7 + 248, 1, (uint64_t)&async function pointer to partial apply for closure #1 in DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:), v8, v2, (uint64_t)&protocol witness table for GPKGroup);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 224) = *v1;
  v2 += 224;
  v4 = v2 - 208;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_release();
    swift_release();
    outlined destroy of Metrics(v4);
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 224) = v0;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 248));
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 224) = v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  outlined destroy of Metrics(v0 + 16);
  return (*(uint64_t (**)())(*(_QWORD *)(v2 + 224) + 8))();
}

uint64_t closure #1 in DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 16) = v4;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  *(_BYTE *)(v4 + 64) = a4 & 1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 48) = v5;
  *v5 = *(_QWORD *)(v7 + 16);
  v5[1] = closure #1 in DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:);
  return DaemonGroupManager._updateGroup(_:deliverRemovalsSilently:)(a3, a4 & 1);
}

_QWORD *closure #1 in DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v5 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 56) = a1;
  swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  else
    return (_QWORD *)swift_task_switch();
}

uint64_t closure #1 in DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[7];
  v2 = (_QWORD *)v0[5];
  v0[2] = v0;
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

uint64_t partial apply for closure #1 in DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_BYTE *)(v1 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:);
  return closure #1 in DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:)(a1, v5, v6, v7 & 1);
}

uint64_t partial apply for closure #1 in DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t DaemonGroupManager._updateGroup(_:deliverRemovalsSilently:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v3 + 400) = v2;
  *(_QWORD *)(v3 + 392) = a1;
  *(_QWORD *)(v3 + 344) = v3;
  *(_QWORD *)(v3 + 352) = 0;
  *(_BYTE *)(v3 + 624) = 0;
  *(_QWORD *)(v3 + 360) = 0;
  *(_QWORD *)(v3 + 368) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_BYTE *)(v3 + 632) = 0;
  *(_BYTE *)(v3 + 640) = 0;
  *(_BYTE *)(v3 + 648) = 0;
  memset((void *)(v3 + 16), 0, 0x88uLL);
  v4 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v3 + 408) = v4;
  *(_QWORD *)(v3 + 416) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 424) = swift_task_alloc();
  v5 = type metadata accessor for GPKGroup.JoinState();
  *(_QWORD *)(v3 + 432) = v5;
  *(_QWORD *)(v3 + 440) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 448) = swift_task_alloc();
  *(_QWORD *)(v3 + 456) = swift_task_alloc();
  v6 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v3 + 464) = v6;
  *(_QWORD *)(v3 + 472) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 480) = swift_task_alloc();
  v7 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v3 + 488) = v7;
  *(_QWORD *)(v3 + 496) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 504) = swift_task_alloc();
  *(_QWORD *)(v3 + 512) = swift_task_alloc();
  *(_QWORD *)(v3 + 352) = a1;
  *(_BYTE *)(v3 + 624) = a2 & 1;
  *(_QWORD *)(v3 + 360) = v2;
  return swift_task_switch();
}

uint64_t DaemonGroupManager._updateGroup(_:deliverRemovalsSilently:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  Swift::String v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v14 = v0[64];
  v13 = v0[62];
  v15 = v0[61];
  v19 = v0[60];
  v18 = v0[59];
  v20 = v0[58];
  v0[43] = v0;
  v0[29] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[30] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Received request to update group with id: ", 0x2AuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  dispatch thunk of GPKGroup.groupID.getter();
  v16 = GPKGroupID.hexString.getter();
  v17 = v3;
  v4 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v0[65] = v4;
  v4(v14, v15);
  v0[31] = v16;
  v0[32] = v17;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v19);
  gpklog(_:type:fileID:line:subsystem:)();
  v6 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v0[66] = v6;
  v6(v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  DaemonGroupManager.groupStore()();
  v9 = v12[22];
  v10 = v12[23];
  __swift_project_boxed_opaque_existential_1(v12 + 19, v9);
  dispatch thunk of GPKGroup.groupID.getter();
  v11 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 + 16) + **(int **)(v10 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  v12[67] = v7;
  *v7 = v12[43];
  v7[1] = DaemonGroupManager._updateGroup(_:deliverRemovalsSilently:);
  return v11(v12[63], v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  _QWORD *v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  int v61;
  char v62;
  char v63;
  char v64;
  int v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  char v82;
  uint64_t v83;

  v1 = *(_QWORD *)(v0 + 544);
  *(_QWORD *)(v0 + 344) = v0;
  if (!v1)
  {
    v23 = *(void (**)(uint64_t, uint64_t))(v83 + 528);
    v27 = *(void (**)(uint64_t, uint64_t))(v83 + 520);
    v28 = *(_QWORD *)(v83 + 512);
    v29 = *(_QWORD *)(v83 + 488);
    v21 = *(_QWORD *)(v83 + 480);
    v22 = *(_QWORD *)(v83 + 464);
    v31 = *(_QWORD *)(v83 + 424);
    v24 = *(_QWORD *)(v83 + 416);
    v25 = *(_QWORD *)(v83 + 408);
    __swift_destroy_boxed_opaque_existential_1(v83 + 152);
    *(_QWORD *)(v83 + 264) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v83 + 272) = v11;
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Couldn't find a group with id: ", 0x1FuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    dispatch thunk of GPKGroup.groupID.getter();
    v19 = GPKGroupID.hexString.getter();
    v20 = v13;
    v27(v28, v29);
    *(_QWORD *)(v83 + 280) = v19;
    *(_QWORD *)(v83 + 288) = v20;
    v30 = MEMORY[0x24BEE0D00];
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" in local storage", 0x11uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
    gpklog(_:type:fileID:line:subsystem:)();
    v23(v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v31, *MEMORY[0x24BE3DCF8], v25);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
    _allocateUninitializedArray<A>(_:)();
    v26 = v15;
    *v15 = static InternalErrorKey.groupID.getter();
    v26[1] = v16;
    dispatch thunk of GPKGroup.groupID.getter();
    v17 = GPKGroupID.hexString.getter();
    v26[5] = v30;
    v26[2] = v17;
    v26[3] = v18;
    v27(v28, v29);
    _finalizeUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    goto LABEL_40;
  }
  v76 = *(_QWORD *)(v83 + 544);
  v79 = *(_QWORD *)(v83 + 456);
  v78 = *(_QWORD *)(v83 + 448);
  v77 = *(_QWORD *)(v83 + 440);
  v80 = *(_QWORD *)(v83 + 432);
  *(_QWORD *)(v83 + 368) = v76;
  __swift_destroy_boxed_opaque_existential_1(v83 + 152);
  dispatch thunk of GPKGroup.joinState.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v77 + 104))(v78, *MEMORY[0x24BE3E4A8], v80);
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v82 = == infix<A>(_:_:)();
  v81 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
  v81(v78, v80);
  v81(v79, v80);
  if ((v82 & 1) == 0)
  {
    v34 = *(void (**)(uint64_t, uint64_t))(v83 + 528);
    v32 = *(_QWORD *)(v83 + 480);
    v33 = *(_QWORD *)(v83 + 464);
    v37 = *(_QWORD *)(v83 + 424);
    v35 = *(_QWORD *)(v83 + 416);
    v36 = *(_QWORD *)(v83 + 408);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting update a group before join the group.", 0x30uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v32);
    gpklog(_:type:fileID:line:subsystem:)();
    v34(v32, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v35 + 104))(v37, *MEMORY[0x24BE3DC70], v36);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_release();
    goto LABEL_40;
  }
  v75 = dispatch thunk of GPKGroup.meMember.getter();
  *(_QWORD *)(v83 + 560) = v75;
  *(_QWORD *)(v83 + 376) = v75;
  if ((dispatch thunk of GPKGroup.hasUnsavedGroupPropertyChanges.getter() & 1) == 0)
    goto LABEL_16;
  swift_retain();
  if (v75)
  {
    v73 = GPKMember.canModifyMembers.getter();
    swift_release();
    v74 = v73 & 1;
  }
  else
  {
    v74 = 2;
  }
  *(_BYTE *)(v83 + 337) = v74;
  *(_BYTE *)(v83 + 338) = 0;
  if (*(_BYTE *)(v83 + 337) == 2)
  {
    if (*(_BYTE *)(v83 + 338) != 2)
      goto LABEL_16;
LABEL_14:
    v69 = *(void (**)(uint64_t, uint64_t))(v83 + 528);
    v67 = *(_QWORD *)(v83 + 480);
    v68 = *(_QWORD *)(v83 + 464);
    v72 = *(_QWORD *)(v83 + 424);
    v70 = *(_QWORD *)(v83 + 416);
    v71 = *(_QWORD *)(v83 + 408);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting update a group without admin privilege.", 0x32uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v67);
    gpklog(_:type:fileID:line:subsystem:)();
    v69(v67, v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v70 + 104))(v72, *MEMORY[0x24BE3DDB0], v71);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_release();
    swift_release();
    goto LABEL_40;
  }
  outlined init with copy of Bool?((_BYTE *)(v83 + 337), (_BYTE *)(v83 + 339));
  if (*(_BYTE *)(v83 + 338) != 2 && (*(_BYTE *)(v83 + 339) & 1) == (*(_BYTE *)(v83 + 338) & 1))
    goto LABEL_14;
LABEL_16:
  v66 = dispatch thunk of GPKGroup.hasUnsavedMetaDataChanges.getter();
  swift_retain();
  if ((v66 & 1) != 0)
    v65 = dispatch thunk of GPKGroup.hasUnsavedGroupPropertyChanges.getter() ^ 1;
  else
    LOBYTE(v65) = 0;
  swift_release();
  *(_BYTE *)(v83 + 632) = v65 & 1;
  v64 = dispatch thunk of GPKGroup.hasUnsavedGroupPropertyChanges.getter();
  swift_retain();
  if ((v64 & 1) != 0)
    v63 = dispatch thunk of GPKGroup.hasUnsavedMetaDataChanges.getter();
  else
    v63 = 0;
  swift_release();
  *(_BYTE *)(v83 + 640) = v63 & 1;
  v62 = dispatch thunk of GPKGroup.hasUnsavedGroupPropertyChanges.getter();
  swift_retain();
  if ((v62 & 1) != 0)
    LOBYTE(v61) = 0;
  else
    v61 = dispatch thunk of GPKGroup.hasUnsavedMetaDataChanges.getter() ^ 1;
  swift_release();
  *(_BYTE *)(v83 + 648) = v61 & 1;
  if ((v61 & 1) != 0)
  {
    v59 = *(void (**)(uint64_t, uint64_t))(v83 + 528);
    v57 = *(_QWORD *)(v83 + 480);
    v58 = *(_QWORD *)(v83 + 464);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No changes to group, so ignoring the update request", 0x33uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v57);
    gpklog(_:type:fileID:line:subsystem:)();
    v59(v57, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    swift_release();
    swift_release();
    v60 = *(_QWORD *)(v83 + 392);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v83 + 344) + 8))(v60);
  }
  if ((v65 & 1) != 0)
  {
    v56 = *(void (**)(uint64_t, uint64_t))(v83 + 528);
    v54 = *(_QWORD *)(v83 + 480);
    v55 = *(_QWORD *)(v83 + 464);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Only metadata updated in the group", 0x22uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v54);
    gpklog(_:type:fileID:line:subsystem:)();
    v56(v54, v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v83 + 568) = v3;
    *v3 = *(_QWORD *)(v83 + 344);
    v3[1] = DaemonGroupManager._updateGroup(_:deliverRemovalsSilently:);
    return DaemonGroupManager.updateMetaData(in:)(*(_QWORD *)(v83 + 392));
  }
  if ((v63 & 1) == 0)
  {
    v41 = *(void (**)(uint64_t, uint64_t))(v83 + 528);
    v39 = *(_QWORD *)(v83 + 480);
    v40 = *(_QWORD *)(v83 + 464);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Only group properties updated", 0x1DuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v39);
    gpklog(_:type:fileID:line:subsystem:)();
    v41(v39, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v83 + 384) = 0;
LABEL_36:
    v38 = *(_QWORD *)(v83 + 384);
    *(_QWORD *)(v83 + 592) = v38;
    swift_bridgeObjectRetain();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v83 + 600) = v10;
    *v10 = *(_QWORD *)(v83 + 344);
    v10[1] = DaemonGroupManager._updateGroup(_:deliverRemovalsSilently:);
    return DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)(*(_QWORD *)(v83 + 392), v38, v76);
  }
  v4 = *(_QWORD *)(v83 + 552);
  v52 = *(void (**)(uint64_t, uint64_t))(v83 + 528);
  v50 = *(_QWORD *)(v83 + 480);
  v51 = *(_QWORD *)(v83 + 464);
  v53 = *(_QWORD *)(v83 + 400);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Both metadata and group properties updated", 0x2AuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v50);
  gpklog(_:type:fileID:line:subsystem:)();
  v52(v50, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  outlined init with copy of Client(v53 + 16, v83 + 192);
  ServiceBuilder.metadataService(for:)(v83 + 192, (_QWORD *)(v83 + 16));
  if (!v4)
  {
    v49 = *(_QWORD *)(v83 + 392);
    __swift_destroy_boxed_opaque_existential_1(v83 + 192);
    swift_release();
    *(_QWORD *)(v83 + 384) = MetadataService.serializedMetadata(from:)(v49);
    *(_QWORD *)(v83 + 296) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v83 + 304) = v5;
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encrypted meta data ", 0x14uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v83 + 384))
    {
      v45 = *(_QWORD *)(v83 + 384);
      swift_bridgeObjectRetain();
      v7 = type metadata accessor for GPKMetadata();
      v46 = MEMORY[0x242634AC0](v45, v7);
      swift_bridgeObjectRelease();
      v47 = v46;
      v48 = 0;
    }
    else
    {
      v47 = 0;
      v48 = 1;
    }
    v44 = *(void (**)(uint64_t, uint64_t))(v83 + 528);
    v42 = *(_QWORD *)(v83 + 480);
    v43 = *(_QWORD *)(v83 + 464);
    *(_QWORD *)(v83 + 328) = v47;
    *(_BYTE *)(v83 + 336) = v48 & 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    *(_QWORD *)(v83 + 312) = String.init<A>(describing:)();
    *(_QWORD *)(v83 + 320) = v8;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" bytes", 6uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v42);
    gpklog(_:type:fileID:line:subsystem:)();
    v44(v42, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of MetadataService(v83 + 16);
    goto LABEL_36;
  }
  __swift_destroy_boxed_opaque_existential_1(v83 + 192);
  swift_release();
  swift_release();
  swift_release();
LABEL_40:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v83 + 344) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 344) = v0;
  swift_release();
  swift_release();
  v2 = *(_QWORD *)(v0 + 576);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 344) + 8))(v2);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 344) = v0;
  outlined destroy of [GPKMetadata]?();
  swift_release();
  swift_release();
  v2 = *(_QWORD *)(v0 + 608);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 344) + 8))(v2);
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = (void (*)(uint64_t, uint64_t))v0[65];
  v2 = v0[63];
  v3 = v0[61];
  v0[43] = v0;
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 19));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[43] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 344) = v0;
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 344) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 344) = v0;
  swift_bridgeObjectRelease();
  outlined destroy of [GPKMetadata]?();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 344) + 8))();
}

uint64_t DaemonGroupManager._updateGroup(_:deliverRemovalsSilently:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v3 = (_QWORD *)*v2;
  v5 = *v2 + 16;
  v3[43] = *v2;
  v3[68] = a1;
  v3[69] = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5 + 504))(*(_QWORD *)(v5 + 488), *(_QWORD *)(v5 + 472));
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[43] = *v2;
  v3[72] = a1;
  v3[73] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[43] = *v2;
  v3[76] = a1;
  v3[77] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.updateMetaData(in:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[45] = v1;
  v2[44] = a1;
  v2[38] = v2;
  v2[39] = 0;
  v2[40] = 0;
  memset(v2 + 2, 0, 0x88uLL);
  v2[41] = 0;
  v2[43] = 0;
  v3 = type metadata accessor for LogSubsystem();
  v2[46] = v3;
  v2[47] = *(_QWORD *)(v3 - 8);
  v2[48] = swift_task_alloc();
  v2[39] = a1;
  v2[40] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[38] = *v2;
  v3[54] = a1;
  v3[55] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.updateMetaData(in:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v19 = v0[45];
  v0[38] = v0;
  swift_retain();
  outlined init with copy of Client(v19 + 16, (uint64_t)(v0 + 19));
  ServiceBuilder.metadataService(for:)((uint64_t)(v0 + 19), v0 + 2);
  v16 = v18[44];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v18 + 19));
  swift_release();
  v17 = MetadataService.serializedMetadata(from:)(v16);
  v18[49] = v17;
  if (v17)
  {
    v14 = v18[48];
    v13 = v18[47];
    v15 = v18[46];
    v18[41] = v17;
    v18[34] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v18[35] = v1;
    v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Encrypted meta data ", 0x14uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v2);
    swift_bridgeObjectRelease();
    v3 = type metadata accessor for GPKMetadata();
    v18[42] = MEMORY[0x242634AC0](v17, v3);
    v18[36] = String.init<A>(describing:)();
    v18[37] = v4;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" bytes", 6uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
    gpklog(_:type:fileID:line:subsystem:)();
    v6 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v18[50] = v6;
    v6(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = (_QWORD *)swift_task_alloc();
    v18[51] = v7;
    *v7 = v18[38];
    v7[1] = DaemonGroupManager.updateMetaData(in:);
    return MetadataService.updateMetaData(_:group:)(v17, v18[44]);
  }
  else
  {
    v10 = v18[48];
    v9 = v18[47];
    v11 = v18[46];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("no metadata to update", 0x15uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    outlined destroy of MetadataService((uint64_t)(v18 + 2));
    v12 = v18[44];
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v18[38] + 8))(v12);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 304) = *v1;
  *(_QWORD *)(v2 + 416) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = v0[52];
  v11 = (void (*)(uint64_t, uint64_t))v0[50];
  v9 = v0[48];
  v10 = v0[46];
  v0[38] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Meta data uploaded to server successfully", 0x29uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
  gpklog(_:type:fileID:line:subsystem:)();
  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  DaemonGroupManager.groupStore()();
  if (v1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of MetadataService((uint64_t)(v8 + 2));
    swift_task_dealloc();
    return (*(uint64_t (**)())(v8[38] + 8))();
  }
  else
  {
    v4 = v8[49];
    v5 = v8[27];
    v6 = v8[28];
    __swift_project_boxed_opaque_existential_1(v8 + 24, v5);
    swift_bridgeObjectRetain();
    v7 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 + 40) + **(int **)(v6 + 40));
    v2 = (_QWORD *)swift_task_alloc();
    v8[53] = v2;
    *v2 = v8[38];
    v2[1] = DaemonGroupManager.updateMetaData(in:);
    return v7(v8[44], v4, v5, v6);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 432);
  v6 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  v4 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 368);
  v7 = *(_QWORD *)(v0 + 360);
  *(_QWORD *)(v0 + 304) = v0;
  *(_QWORD *)(v0 + 344) = v1;
  __swift_destroy_boxed_opaque_existential_1(v0 + 192);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update metadata saved in local db", 0x21uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v4);
  gpklog(_:type:fileID:line:subsystem:)();
  v6(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  *(_QWORD *)(v0 + 448) = ServiceBuilder.peerMessagingService.getter();
  swift_release();
  outlined init with copy of Client(v7 + 16, v0 + 232);
  v9 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 264);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 232), v9);
  (*(void (**)(uint64_t))(v8 + 16))(v9);
  *(_BYTE *)(v0 + 473) = *(_BYTE *)(v0 + 472) & 1;
  v2 = (_QWORD *)swift_task_alloc();
  v10[57] = v2;
  *v2 = v10[38];
  v2[1] = DaemonGroupManager.updateMetaData(in:);
  return PeerMessagingService.sendMetaDataUpdate(to:priority:)(v10[54], (_BYTE *)(v0 + 473));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *v1 + 232;
  *(_QWORD *)(v4 + 304) = *v1;
  *(_QWORD *)(v4 + 464) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    __swift_destroy_boxed_opaque_existential_1(v3);
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  v4 = (void (*)(uint64_t, uint64_t))v0[50];
  v2 = v0[48];
  v3 = v0[46];
  v0[38] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Metadata update send to group members", 0x25uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v2);
  gpklog(_:type:fileID:line:subsystem:)();
  v4(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MetadataService((uint64_t)(v0 + 2));
  v5 = v0[54];
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[38] + 8))(v5);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 304) = v0;
  swift_bridgeObjectRelease();
  outlined destroy of MetadataService(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 304) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 304) = v0;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 192);
  swift_bridgeObjectRelease();
  outlined destroy of MetadataService(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 304) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 304) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 232);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of MetadataService(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 304) + 8))();
}

uint64_t DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 920) = v3;
  *(_QWORD *)(v4 + 912) = a3;
  *(_QWORD *)(v4 + 904) = a2;
  *(_QWORD *)(v4 + 896) = a1;
  *(_QWORD *)(v4 + 616) = v4;
  *(_QWORD *)(v4 + 688) = 0;
  *(_QWORD *)(v4 + 696) = 0;
  *(_QWORD *)(v4 + 704) = 0;
  *(_QWORD *)(v4 + 712) = 0;
  *(_QWORD *)(v4 + 720) = 0;
  *(_QWORD *)(v4 + 488) = 0;
  *(_QWORD *)(v4 + 496) = 0;
  *(_QWORD *)(v4 + 728) = 0;
  *(_QWORD *)(v4 + 504) = 0;
  *(_QWORD *)(v4 + 512) = 0;
  memset((void *)(v4 + 368), 0, 0x28uLL);
  *(_QWORD *)(v4 + 776) = 0;
  *(_BYTE *)(v4 + 1345) = 0;
  *(_QWORD *)(v4 + 800) = 0;
  *(_QWORD *)(v4 + 816) = 0;
  *(_BYTE *)(v4 + 1344) = 0;
  memset((void *)(v4 + 16), 0, 0xC0uLL);
  *(_QWORD *)(v4 + 832) = 0;
  *(_QWORD *)(v4 + 848) = 0;
  *(_QWORD *)(v4 + 864) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
  *(_QWORD *)(v4 + 928) = swift_task_alloc();
  v5 = type metadata accessor for GroupBlobEnvelope();
  *(_QWORD *)(v4 + 936) = v5;
  *(_QWORD *)(v4 + 944) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 952) = swift_task_alloc();
  *(_QWORD *)(v4 + 960) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (group: GPKGroup, invitations: [GPKUserID : Data], groupBlob: GKCrypto_GroupBlob));
  *(_QWORD *)(v4 + 968) = swift_task_alloc();
  *(_QWORD *)(v4 + 976) = swift_task_alloc();
  v6 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v4 + 984) = v6;
  *(_QWORD *)(v4 + 992) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 1000) = swift_task_alloc();
  v7 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v4 + 1008) = v7;
  *(_QWORD *)(v4 + 1016) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 1024) = swift_task_alloc();
  *(_QWORD *)(v4 + 688) = a1;
  *(_QWORD *)(v4 + 696) = a2;
  *(_QWORD *)(v4 + 704) = a3;
  *(_QWORD *)(v4 + 712) = v3;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  char v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *KeyPath;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  *(_QWORD *)(v0 + 616) = v0;
  DaemonGroupManager.groupStore()();
  v61 = dispatch thunk of GPKGroup.meMember.getter();
  *(_QWORD *)(v62 + 1032) = v61;
  if (!v61)
    goto LABEL_13;
  *(_QWORD *)(v62 + 720) = v61;
  if ((GPKMember.canModifyMembers.getter() & 1) == 0)
  {
    swift_release();
LABEL_13:
    v17 = *(_QWORD *)(v62 + 1024);
    v16 = *(_QWORD *)(v62 + 1016);
    v18 = *(_QWORD *)(v62 + 1008);
    v21 = *(_QWORD *)(v62 + 1000);
    v19 = *(_QWORD *)(v62 + 992);
    v20 = *(_QWORD *)(v62 + 984);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting update a group without admin privilege.", 0x32uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v17);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x24BE3DDB0], v20);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(v62 + 248);
    goto LABEL_15;
  }
  outlined init with copy of Client(*(_QWORD *)(v62 + 920) + 16, v62 + 288);
  v59 = *(_QWORD *)(v62 + 312);
  v58 = *(_QWORD *)(v62 + 320);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v62 + 288), v59);
  v60 = (*(uint64_t (**)(uint64_t))(v58 + 8))(v59);
  *(_QWORD *)(v62 + 1040) = v60;
  *(_QWORD *)(v62 + 1048) = v1;
  if (v1)
  {
    *(_QWORD *)(v62 + 488) = v60;
    *(_QWORD *)(v62 + 496) = v1;
    __swift_destroy_boxed_opaque_existential_1(v62 + 288);
    DaemonGroupManager.userStore()();
    v56 = *(_QWORD *)(v62 + 352);
    v55 = *(_QWORD *)(v62 + 360);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v62 + 328), v56);
    v57 = (*(uint64_t (**)(uint64_t))(v55 + 40))(v56);
    *(_QWORD *)(v62 + 1056) = v57;
    *(_QWORD *)(v62 + 728) = v57;
    __swift_destroy_boxed_opaque_existential_1(v62 + 328);
    swift_retain();
    ServiceBuilder.accountManager()();
    swift_release();
    v2 = DaemonAccountManager.preferredHandle()();
    *(Swift::String *)(v62 + 1064) = v2;
    if (v3)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v62 + 248);
    }
    else
    {
      swift_release();
      *(Swift::String *)(v62 + 504) = v2;
      *(_QWORD *)(v62 + 736) = GPKUser.handles.getter();
      *(Swift::String *)(v62 + 520) = v2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v54 = Sequence<>.contains(_:)();
      outlined destroy of [String]();
      if ((v54 & 1) != 0)
      {
        v45 = *(_QWORD *)(v62 + 1024);
        v44 = *(_QWORD *)(v62 + 1016);
        v46 = *(_QWORD *)(v62 + 1008);
        v38 = dispatch thunk of GPKGroup.members.getter();
        v37 = dispatch thunk of GPKGroup.members.getter();
        KeyPath = (_QWORD *)swift_getKeyPath();
        Array.difference<A>(from:identifier:hasChanges:)(v37, KeyPath, (uint64_t)closure #1 in DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:), 0, v38, MEMORY[0x24BEE0D10], (void *)(v62 + 208));
        v39 = *(_QWORD *)(v62 + 208);
        v40 = *(_QWORD *)(v62 + 216);
        v41 = *(_QWORD *)(v62 + 224);
        v42 = *(_QWORD *)(v62 + 232);
        v43 = *(_QWORD *)(v62 + 240);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v62 + 368) = v39;
        *(_QWORD *)(v62 + 376) = v40;
        *(_QWORD *)(v62 + 384) = v41;
        *(_QWORD *)(v62 + 392) = v42;
        *(_QWORD *)(v62 + 400) = v43;
        *(_QWORD *)(v62 + 536) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v62 + 544) = v4;
        v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("New members: ", 0xDuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v5);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v62 + 624) = *(_QWORD *)(v62 + 216);
        outlined retain of [GPKMember]();
        *(_QWORD *)(v62 + 744) = *(_QWORD *)(v62 + 624);
        *(_QWORD *)(v62 + 1080) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
        *(_QWORD *)(v62 + 1088) = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of [GPKMember]();
        v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v45);
        gpklog(_:type:fileID:line:subsystem:)();
        v47 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
        *(_QWORD *)(v62 + 1096) = v47;
        v47(v45, v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v62 + 552) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v62 + 560) = v7;
        v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Removed members: ", 0x11uLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v8);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v62 + 632) = *(_QWORD *)(v62 + 224);
        outlined retain of [GPKMember]();
        *(_QWORD *)(v62 + 752) = *(_QWORD *)(v62 + 632);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of [GPKMember]();
        v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v45);
        gpklog(_:type:fileID:line:subsystem:)();
        v47(v45, v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v62 + 568) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v62 + 576) = v10;
        v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Changes members: ", 0x11uLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v11);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v62 + 640) = *(_QWORD *)(v62 + 232);
        outlined retain of [GPKMember]();
        *(_QWORD *)(v62 + 760) = *(_QWORD *)(v62 + 640);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of [GPKMember]();
        v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v45);
        gpklog(_:type:fileID:line:subsystem:)();
        v47(v45, v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Categorizing members based on new, removed, and changed - Done", 0x4CuLL, 1);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v45);
        gpklog(_:type:fileID:line:subsystem:)();
        v47(v45, v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v62 + 648) = *(_QWORD *)(v62 + 224);
        outlined retain of [GPKMember]();
        *(_QWORD *)(v62 + 768) = *(_QWORD *)(v62 + 648);
        *(_QWORD *)(v62 + 1104) = lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
        v13 = Sequence.contains(where:)();
        outlined destroy of [GPKMember]();
        if ((v13 & 1) == 0)
        {
          v29 = *(_QWORD *)(v62 + 920);
          swift_retain();
          outlined init with copy of Client(v29 + 16, v62 + 408);
          v30 = ServiceBuilder.userLookupService(for:)(v62 + 408);
          *(_QWORD *)(v62 + 1112) = v30;
          __swift_destroy_boxed_opaque_existential_1(v62 + 408);
          swift_release();
          *(_QWORD *)(v62 + 776) = v30;
          v28 = *(_QWORD *)(v62 + 216);
          *(_QWORD *)(v62 + 1120) = v28;
          swift_bridgeObjectRetain();
          v14 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v62 + 1128) = v14;
          *v14 = *(_QWORD *)(v62 + 616);
          v14[1] = DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:);
          return GroupKitUserLookupManager.resolveUsers(for:)(v28);
        }
        v31 = *(_QWORD *)(v62 + 1024);
        v32 = *(_QWORD *)(v62 + 1008);
        v35 = *(_QWORD *)(v62 + 1000);
        v33 = *(_QWORD *)(v62 + 992);
        v34 = *(_QWORD *)(v62 + 984);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting remove me user from group.", 0x25uLL, 1);
        static os_log_type_t.error.getter();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v31);
        gpklog(_:type:fileID:line:subsystem:)();
        v47(v31, v32);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for InternalError();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 104))(v35, *MEMORY[0x24BE3DD50], v34);
        InternalError.__allocating_init(_:internalInfo:)();
        swift_willThrow();
        outlined release of Difference<GPKMember>(v62 + 208);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1(v62 + 248);
      }
      else
      {
        v49 = *(_QWORD *)(v62 + 1024);
        v48 = *(_QWORD *)(v62 + 1016);
        v50 = *(_QWORD *)(v62 + 1008);
        v53 = *(_QWORD *)(v62 + 1000);
        v51 = *(_QWORD *)(v62 + 992);
        v52 = *(_QWORD *)(v62 + 984);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Couldn't find me-user handle", 0x2AuLL, 1);
        static os_log_type_t.error.getter();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v49);
        gpklog(_:type:fileID:line:subsystem:)();
        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v50);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for InternalError();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v51 + 104))(v53, *MEMORY[0x24BE3DD08], v52);
        InternalError.__allocating_init(_:internalInfo:)();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1(v62 + 248);
      }
    }
  }
  else
  {
    v23 = *(_QWORD *)(v62 + 1024);
    v22 = *(_QWORD *)(v62 + 1016);
    v24 = *(_QWORD *)(v62 + 1008);
    v27 = *(_QWORD *)(v62 + 1000);
    v25 = *(_QWORD *)(v62 + 992);
    v26 = *(_QWORD *)(v62 + 984);
    __swift_destroy_boxed_opaque_existential_1(v62 + 288);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Couldn't obtain bundle identifier from client", 0x2DuLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v23);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 104))(v27, *MEMORY[0x24BE3DE60], v26);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v62 + 248);
  }
LABEL_15:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v62 + 616) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 616) = *v1;
  *(_QWORD *)(v2 + 1136) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 1136);
  v42 = *(void (**)(uint64_t, uint64_t))(v0 + 1096);
  v40 = *(_QWORD *)(v0 + 1024);
  v41 = *(_QWORD *)(v0 + 1008);
  v43 = *(_QWORD *)(v0 + 912);
  v44 = *(_QWORD *)(v0 + 896);
  *(_QWORD *)(v0 + 616) = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Resolve user from key-distribution service or IDS lookup service - Done", 0x55uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v40);
  gpklog(_:type:fileID:line:subsystem:)();
  v42(v40, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 584) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 592) = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("differences after user resolution. new: ", 0x28uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 656) = *(_QWORD *)(v0 + 216);
  outlined retain of [GPKMember]();
  *(_QWORD *)(v0 + 784) = *(_QWORD *)(v0 + 656);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [GPKMember]();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v40);
  gpklog(_:type:fileID:line:subsystem:)();
  v42(v40, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 1345) = 0;
  *(_QWORD *)(v0 + 664) = *(_QWORD *)(v0 + 216);
  outlined retain of [GPKMember]();
  *(_QWORD *)(v0 + 792) = *(_QWORD *)(v0 + 664);
  swift_retain();
  swift_retain();
  v45 = (_QWORD *)swift_task_alloc();
  v45[2] = v43;
  v45[3] = v44;
  v45[4] = v0 + 1345;
  *(_QWORD *)(v0 + 1144) = type metadata accessor for GPKMember();
  result = Sequence.compactMap<A>(_:)();
  v46 = result;
  *(_QWORD *)(v0 + 1152) = result;
  if (!v1)
  {
    swift_task_dealloc();
    swift_release();
    swift_release();
    outlined destroy of [GPKMember]();
    *(_QWORD *)(v39 + 800) = v46;
    *(_QWORD *)(v39 + 672) = *(_QWORD *)(v39 + 224);
    outlined retain of [GPKMember]();
    *(_QWORD *)(v39 + 808) = *(_QWORD *)(v39 + 672);
    outlined retain of Difference<GPKMember>(v39 + 208);
    *(_QWORD *)(swift_task_alloc() + 16) = v39 + 208;
    v38 = Sequence.compactMap<A>(_:)();
    *(_QWORD *)(v39 + 1160) = v38;
    swift_task_dealloc();
    outlined release of Difference<GPKMember>(v39 + 208);
    outlined destroy of [GPKMember]();
    *(_QWORD *)(v39 + 816) = v38;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v39 + 824) = v46;
    lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
    v37 = Collection.isEmpty.getter();
    outlined destroy of [GPKMember]();
    swift_bridgeObjectRetain();
    if ((v37 & 1) != 0)
    {
      swift_bridgeObjectRetain();
      *(_QWORD *)(v39 + 888) = v38;
      v35 = Collection.isEmpty.getter();
      outlined destroy of [GPKMember]();
      v36 = v35;
    }
    else
    {
      v36 = 0;
    }
    swift_bridgeObjectRelease();
    outlined retain of Difference<GPKMember>(v39 + 208);
    if ((v36 & 1) != 0)
    {
      *(_QWORD *)(v39 + 680) = *(_QWORD *)(v39 + 232);
      outlined retain of [GPKMember]();
      outlined retain of [GPKMember]();
      *(_QWORD *)(v39 + 880) = *(_QWORD *)(v39 + 680);
      v33 = Collection.isEmpty.getter();
      outlined destroy of [GPKMember]();
      outlined release of [GPKMember]();
      v34 = v33;
    }
    else
    {
      v34 = 0;
    }
    outlined release of Difference<GPKMember>(v39 + 208);
    *(_BYTE *)(v39 + 1344) = (v34 ^ 1) & 1;
    if (((v34 ^ 1) & 1) != 0)
    {
      v32 = *(_QWORD *)(v39 + 920);
      swift_retain();
      outlined init with copy of Client(v32 + 16, v39 + 448);
      ServiceBuilder.groupService(for:)(v39 + 448, (_QWORD *)(v39 + 16));
      v29 = *(_QWORD *)(v39 + 1048);
      v28 = *(_QWORD *)(v39 + 976);
      v27 = *(_QWORD *)(v39 + 960);
      __swift_destroy_boxed_opaque_existential_1(v39 + 448);
      swift_release();
      *(_DWORD *)(v39 + 1356) = *(_DWORD *)(v27 + 64);
      v31 = v28 + *(int *)(v27 + 64);
      v30 = *(_QWORD *)(v39 + 232);
      *(_QWORD *)(v39 + 1168) = v30;
      swift_bridgeObjectRetain();
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v39 + 1176) = v6;
      *v6 = *(_QWORD *)(v39 + 616);
      v6[1] = DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:);
      return GroupService.updateGroup(_:addMembers:removeMembers:updateRole:metaData:clientBundleIdentifier:)(v31, *(_QWORD *)(v39 + 896), v46, v38, v30, *(_QWORD *)(v39 + 904), *(_QWORD *)(v39 + 1040), v29);
    }
    else
    {
      v26 = *(void (**)(uint64_t, uint64_t))(v39 + 1096);
      v24 = *(_QWORD *)(v39 + 1024);
      v25 = *(_QWORD *)(v39 + 1008);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("no group membership updates to make after resolving members", 0x3BuLL, 1);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v24);
      gpklog(_:type:fileID:line:subsystem:)();
      v26(v24, v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((dispatch thunk of GPKGroup.hasUnsavedMetaDataChanges.getter() & 1) != 0)
      {
        v23 = *(void (**)(uint64_t, uint64_t))(v39 + 1096);
        v21 = *(_QWORD *)(v39 + 1024);
        v22 = *(_QWORD *)(v39 + 1008);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("still updating metadata", 0x17uLL, 1);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
        gpklog(_:type:fileID:line:subsystem:)();
        v23(v21, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v7 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v39 + 1296) = v7;
        *v7 = *(_QWORD *)(v39 + 616);
        v7[1] = DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:);
        return DaemonGroupManager.updateMetaData(in:)(*(_QWORD *)(v39 + 896));
      }
      else if ((*(_BYTE *)(v39 + 1345) & 1) != 0)
      {
        v17 = *(void (**)(uint64_t, uint64_t))(v39 + 1096);
        v15 = *(_QWORD *)(v39 + 1024);
        v16 = *(_QWORD *)(v39 + 1008);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("no metadata changes either. simply storing new group locally", 0x3CuLL, 1);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v15);
        gpklog(_:type:fileID:line:subsystem:)();
        v17(v15, v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v18 = *(_QWORD *)(v39 + 272);
        v19 = *(_QWORD *)(v39 + 280);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v39 + 248), v18);
        v20 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 + 40) + **(int **)(v19 + 40));
        v8 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v39 + 1320) = v8;
        *v8 = *(_QWORD *)(v39 + 616);
        v8[1] = DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:);
        return v20(*(_QWORD *)(v39 + 896), *(_QWORD *)(v39 + 904), v18, v19);
      }
      else
      {
        v11 = *(void (**)(uint64_t, uint64_t))(v39 + 1096);
        v9 = *(_QWORD *)(v39 + 1024);
        v10 = *(_QWORD *)(v39 + 1008);
        v14 = *(_QWORD *)(v39 + 1000);
        v12 = *(_QWORD *)(v39 + 992);
        v13 = *(_QWORD *)(v39 + 984);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unexpected state when updating group", 0x24uLL, 1);
        static os_log_type_t.error.getter();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
        gpklog(_:type:fileID:line:subsystem:)();
        v11(v9, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for InternalError();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BE3DE90], v13);
        InternalError.__allocating_init(_:internalInfo:)();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        outlined release of Difference<GPKMember>(v39 + 208);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1(v39 + 248);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)())(*(_QWORD *)(v39 + 616) + 8))();
      }
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 1200);
  v2 = *(_QWORD *)(v0 + 1192);
  v41 = *(int *)(v0 + 1356);
  v37 = *(_QWORD *)(v0 + 1152);
  v38 = *(_QWORD *)(v0 + 1144);
  v36 = *(void (**)(uint64_t, uint64_t))(v0 + 1096);
  v34 = *(_QWORD *)(v0 + 1024);
  v35 = *(_QWORD *)(v0 + 1008);
  v39 = *(uint64_t **)(v0 + 976);
  v48 = *(_QWORD **)(v0 + 968);
  v43 = *(_QWORD *)(v0 + 960);
  *(_QWORD *)(v0 + 616) = v0;
  *v39 = v2;
  v39[1] = v1;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Changes updated in group service - Done", 0x35uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v34);
  gpklog(_:type:fileID:line:subsystem:)();
  v36(v34, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v46 = MEMORY[0x242634AC0](v37, v38);
  *(_QWORD *)(v0 + 832) = v46;
  v42 = *(int *)(v43 + 64);
  v40 = *v39;
  swift_retain();
  *v48 = v40;
  outlined init with copy of [GPKUserID : Data](v39 + 1, v48 + 1);
  outlined init with copy of GKCrypto_GroupBlob((uint64_t)v39 + v41, (uint64_t)v48 + v42);
  v45 = v48[1];
  v49 = *(int *)(v43 + 64);
  v44 = type metadata accessor for GPKUserID();
  v3 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v47 = MEMORY[0x2426347F0](v45, v44, MEMORY[0x24BDCDDE8], v3);
  swift_bridgeObjectRelease();
  outlined destroy of GKCrypto_GroupBlob((uint64_t)v48 + v49);
  swift_release();
  if (v47 >= v46)
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v33 + 1096);
    v11 = *(_QWORD *)(v33 + 1024);
    v12 = *(_QWORD *)(v33 + 1008);
    v17 = *(uint64_t **)(v33 + 976);
    v21 = *(uint64_t **)(v33 + 968);
    v20 = *(_QWORD *)(v33 + 960);
    v22 = *(_QWORD *)(v33 + 952);
    v16 = (uint64_t)v17 + *(int *)(v33 + 1356);
    *(_QWORD *)(v33 + 600) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v33 + 608) = v5;
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Invitation blob generated for all(", 0x30uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v33 + 840) = v46;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(") members - Done", 0x10uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
    gpklog(_:type:fileID:line:subsystem:)();
    v13(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = (uint64_t)v21 + *(int *)(v20 + 64);
    v14 = *v17;
    swift_retain();
    *v21 = v14;
    outlined init with copy of [GPKUserID : Data](v17 + 1, v21 + 1);
    outlined init with copy of GKCrypto_GroupBlob(v16, v15);
    v8 = *v21;
    *(_QWORD *)(v33 + 1208) = *v21;
    v9 = (uint64_t)v21 + *(int *)(v20 + 64);
    *(_QWORD *)(v33 + 848) = v8;
    outlined destroy of GKCrypto_GroupBlob(v9);
    swift_bridgeObjectRelease();
    v25 = *v17;
    v24 = v17[1];
    v19 = (uint64_t)v21 + *(int *)(v20 + 64);
    v18 = *v17;
    swift_retain();
    *v21 = v18;
    outlined init with copy of [GPKUserID : Data](v17 + 1, v21 + 1);
    outlined init with copy of GKCrypto_GroupBlob(v16, v19);
    v23 = (uint64_t)v21 + *(int *)(v20 + 64);
    *(_QWORD *)(v33 + 856) = dispatch thunk of GPKGroup.version.getter();
    *(_QWORD *)(v33 + 1216) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(_QWORD *)(v33 + 1224) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(_QWORD *)(v33 + 1232) = lazy protocol witness table accessor for type Int64 and conformance Int64();
    UnsignedInteger<>.init<A>(_:)();
    GroupBlobEnvelope.init(groupBlob:groupVersion:)(v23, *(_DWORD *)(v33 + 1348), v22);
    swift_bridgeObjectRelease();
    swift_release();
    v10 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v33 + 1240) = v10;
    *v10 = *(_QWORD *)(v33 + 616);
    v10[1] = DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:);
    return DaemonGroupManager.sendInvitation(to:invitations:from:groupBlobEnvelope:)(v25, v24, *(_QWORD *)(v33 + 1064), *(_QWORD *)(v33 + 1072), *(_QWORD *)(v33 + 952));
  }
  else
  {
    v28 = *(void (**)(uint64_t, uint64_t))(v33 + 1096);
    v26 = *(_QWORD *)(v33 + 1024);
    v27 = *(_QWORD *)(v33 + 1008);
    v31 = *(_QWORD *)(v33 + 1000);
    v29 = *(_QWORD *)(v33 + 992);
    v30 = *(_QWORD *)(v33 + 984);
    v32 = *(_QWORD *)(v33 + 976);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation blob is not generated for all new members", 0x34uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v26);
    gpklog(_:type:fileID:line:subsystem:)();
    v28(v26, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v31, *MEMORY[0x24BE3DE78], v30);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    outlined destroy of (group: GPKGroup, invitations: [GPKUserID : Data], groupBlob: GKCrypto_GroupBlob)(v32);
    outlined destroy of GroupService(v33 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined release of Difference<GPKMember>(v33 + 208);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v33 + 248);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(*(_QWORD *)(v33 + 616) + 8))();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 616) = *v1;
  *(_QWORD *)(v2 + 1248) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of GroupBlobEnvelope(*(_QWORD *)(v4 + 936));
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, _QWORD, uint64_t, uint64_t);

  v5 = (void (*)(uint64_t, uint64_t))v0[137];
  v3 = v0[128];
  v4 = v0[126];
  v0[77] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Send invitation to the new group members - Done", 0x3DuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
  gpklog(_:type:fileID:line:subsystem:)();
  v5(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v0[34];
  v8 = v0[35];
  __swift_project_boxed_opaque_existential_1(v0 + 31, v7);
  v9 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 + 40) + **(int **)(v8 + 40));
  v1 = (_QWORD *)swift_task_alloc();
  v6[157] = v1;
  *v1 = v6[77];
  v1[1] = DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:);
  return v9(v6[151], v6[113], v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = *(_QWORD *)(v0 + 1264);
  v9 = *(int *)(v0 + 1356);
  v6 = *(void (**)(uint64_t, uint64_t))(v0 + 1096);
  v4 = *(_QWORD *)(v0 + 1024);
  v5 = *(_QWORD *)(v0 + 1008);
  v7 = *(uint64_t **)(v0 + 976);
  v12 = *(_QWORD **)(v0 + 968);
  v11 = *(_QWORD *)(v0 + 960);
  v14 = *(_QWORD *)(v0 + 944);
  v16 = *(_QWORD *)(v0 + 936);
  v15 = *(_QWORD *)(v0 + 928);
  *(_QWORD *)(v0 + 616) = v0;
  *(_QWORD *)(v0 + 864) = v1;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Finally save the result to local database - Done", 0x3EuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v4);
  gpklog(_:type:fileID:line:subsystem:)();
  v6(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = *(int *)(v11 + 64);
  v8 = *v7;
  swift_retain();
  *v12 = v8;
  outlined init with copy of [GPKUserID : Data](v7 + 1, v12 + 1);
  outlined init with copy of GKCrypto_GroupBlob((uint64_t)v7 + v9, (uint64_t)v12 + v10);
  v13 = *(int *)(v11 + 64);
  *(_QWORD *)(v0 + 872) = dispatch thunk of GPKGroup.version.getter();
  UnsignedInteger<>.init<A>(_:)();
  GroupBlobEnvelope.init(groupBlob:groupVersion:)((uint64_t)v12 + v13, *(_DWORD *)(v0 + 1352), v15);
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v15, 0, 1, v16);
  v2 = (_QWORD *)swift_task_alloc();
  v17[160] = v2;
  *v2 = v17[77];
  v2[1] = DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:);
  return DaemonGroupManager.sendGroupMembershipUpdate(group:differences:from:groupBlobEnvelope:)(v17[114], (uint64_t)(v17 + 26), v17[133], v17[134], v17[116]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 616) = *v1;
  *(_QWORD *)(v2 + 1288) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of GroupBlobEnvelope?(*(_QWORD *)(v4 + 912));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v2 = v0[158];
  v5 = (void (*)(uint64_t, uint64_t))v0[137];
  v3 = v0[128];
  v4 = v0[126];
  v6 = v0[122];
  v0[77] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Send group membership update send to other group members - Done", 0x4DuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
  gpklog(_:type:fileID:line:subsystem:)();
  v5(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  ClientMessageBroadcaster.groupUpdated(_:)(v2);
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Update Group: Send group membership update send to all subscribers - Done", 0x49uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
  gpklog(_:type:fileID:line:subsystem:)();
  v5(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of (group: GPKGroup, invitations: [GPKUserID : Data], groupBlob: GKCrypto_GroupBlob)(v6);
  outlined destroy of GroupService((uint64_t)(v0 + 2));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of Difference<GPKMember>((uint64_t)(v0 + 26));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 31));
  v7 = v0[158];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[77] + 8))(v7);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 616) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of Difference<GPKMember>(v0 + 208);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 248);
  v2 = *(_QWORD *)(v0 + 1304);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 616) + 8))(v2);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 616) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of Difference<GPKMember>(v0 + 208);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 248);
  v2 = *(_QWORD *)(v0 + 1328);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 616) + 8))(v2);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 616) = v0;
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of Difference<GPKMember>(v0 + 208);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 248);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 616) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 616) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of Difference<GPKMember>(v0 + 208);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 248);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 616) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 616) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of Difference<GPKMember>(v0 + 208);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 248);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 616) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 616) = v0;
  swift_bridgeObjectRelease();
  outlined destroy of GroupService(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of Difference<GPKMember>(v0 + 208);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 248);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 616) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = v0[122];
  v1 = v0[119];
  v0[77] = v0;
  outlined destroy of GroupBlobEnvelope(v1);
  swift_release();
  outlined destroy of (group: GPKGroup, invitations: [GPKUserID : Data], groupBlob: GKCrypto_GroupBlob)(v3);
  outlined destroy of GroupService((uint64_t)(v0 + 2));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of Difference<GPKMember>((uint64_t)(v0 + 26));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 31));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[77] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 976);
  *(_QWORD *)(v0 + 616) = v0;
  swift_release();
  outlined destroy of (group: GPKGroup, invitations: [GPKUserID : Data], groupBlob: GKCrypto_GroupBlob)(v2);
  outlined destroy of GroupService(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of Difference<GPKMember>(v0 + 208);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 248);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 616) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;

  v3 = v0[122];
  v1 = v0[116];
  v0[77] = v0;
  outlined destroy of GroupBlobEnvelope?(v1);
  swift_release();
  swift_release();
  outlined destroy of (group: GPKGroup, invitations: [GPKUserID : Data], groupBlob: GKCrypto_GroupBlob)(v3);
  outlined destroy of GroupService((uint64_t)(v0 + 2));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined release of Difference<GPKMember>((uint64_t)(v0 + 26));
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 31));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[77] + 8))();
}

uint64_t DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v5 = (_QWORD *)*v3;
  v5[77] = *v3;
  v5[148] = v2;
  v5[149] = a1;
  v5[150] = a2;
  swift_task_dealloc();
  if (!v2)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[77] = *v2;
  v3[158] = a1;
  v3[159] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[77] = *v2;
  v3[163] = a1;
  v3[164] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[77] = *v2;
  v3[166] = a1;
  v3[167] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.refreshGroupWithServer(groupID:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[70] = v1;
  v2[69] = a1;
  v2[65] = v2;
  v2[66] = 0;
  v2[67] = 0;
  bzero(v2 + 2, 0x198uLL);
  v2[63] = 0;
  v2[64] = 0;
  v2[68] = 0;
  v3 = type metadata accessor for LogSubsystem();
  v2[71] = v3;
  v2[72] = *(_QWORD *)(v3 - 8);
  v2[73] = swift_task_alloc();
  v2[66] = a1;
  v2[67] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[65] = *v2;
  v3[79] = a1;
  v3[80] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.refreshGroupWithServer(groupID:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v0 + 560);
  *(_QWORD *)(v0 + 520) = v0;
  swift_retain();
  outlined init with copy of Client(v4 + 16, v0 + 424);
  ServiceBuilder.groupRefresher(for:)(v0 + 424, v0 + 16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v3 + 53));
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v3[74] = v1;
  *v1 = v3[65];
  v1[1] = DaemonGroupManager.refreshGroupWithServer(groupID:);
  return GroupRefresher.refresh(with:)(v3[69]);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v9;

  v1 = v0[77];
  v2 = v0[76];
  v3 = v0[75];
  v0[65] = v0;
  v0[63] = v2;
  v0[64] = v1;
  DaemonGroupManager.groupStore()();
  if (v3)
  {
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of GroupRefresher((uint64_t)(v9 + 2));
    swift_task_dealloc();
    return (*(uint64_t (**)())(v9[65] + 8))();
  }
  else
  {
    v6 = v9[61];
    v7 = v9[62];
    __swift_project_boxed_opaque_existential_1(v9 + 58, v6);
    v8 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 + 40) + **(int **)(v7 + 40));
    v4 = (_QWORD *)swift_task_alloc();
    v9[78] = v4;
    *v4 = v9[65];
    v4[1] = DaemonGroupManager.refreshGroupWithServer(groupID:);
    return v8(v9[76], v9[77], v6, v7);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[79];
  v5 = v0[73];
  v3 = v0[72];
  v4 = v0[71];
  v0[65] = v0;
  v0[68] = v1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 58));
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Refreshed group saved to local database", 0x27uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of GroupRefresher((uint64_t)(v0 + 2));
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v6 + 520) + 8))(*(_QWORD *)(v6 + 632));
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 520) = v0;
  outlined destroy of GroupRefresher(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 520) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 520) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 464);
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of GroupRefresher(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 520) + 8))();
}

uint64_t DaemonGroupManager.refreshGroupWithServer(groupID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[65] = *v3;
  v4[75] = v2;
  v4[76] = a1;
  v4[77] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.updateMembership(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[6] = v1;
  v2[5] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v3 = type metadata accessor for InternalErrorCode();
  v2[7] = v3;
  v2[8] = *(_QWORD *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v4 = type metadata accessor for LogSubsystem();
  v2[10] = v4;
  v2[11] = *(_QWORD *)(v4 - 8);
  v2[12] = swift_task_alloc();
  v5 = type metadata accessor for GPKGroupID();
  v2[13] = v5;
  v2[14] = *(_QWORD *)(v5 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  v6 = type metadata accessor for GPKMembershipRequest.Action();
  v2[17] = v6;
  v2[18] = *(_QWORD *)(v6 - 8);
  v2[19] = swift_task_alloc();
  v2[3] = a1;
  v2[4] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (_QWORD *)*v2;
  v3[2] = *v2;
  v8 = v3 + 2;
  v3[22] = a1;
  v3[23] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v6 = v8[14];
    v5 = v8[12];
    v7 = v8[11];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[2] = *v2;
  v5 = v3 + 2;
  v3[25] = a1;
  v3[26] = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5[12] + 8))(v5[13], v5[11]);
  return swift_task_switch();
}

uint64_t DaemonGroupManager.updateMembership(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  v18 = v0[19];
  v17 = v0[18];
  v19 = v0[17];
  v0[2] = v0;
  GPKMembershipRequest.action.getter();
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 88))(v18, v19);
  if (v20 == *MEMORY[0x24BE3DFE8])
  {
    GPKMembershipRequest.groupID.getter();
    v14 = GPKMembershipRequest.serviceName.getter();
    v15 = v1;
    v16[20] = v1;
    v2 = (_QWORD *)swift_task_alloc();
    v16[21] = v2;
    *v2 = v16[2];
    v2[1] = DaemonGroupManager.updateMembership(with:);
    return DaemonGroupManager.demoteSelfInGroup(_:serviceName:)(v16[16], v14, v15);
  }
  else if (v20 == *MEMORY[0x24BE3DFE0])
  {
    GPKMembershipRequest.groupID.getter();
    v3 = (_QWORD *)swift_task_alloc();
    v16[24] = v3;
    *v3 = v16[2];
    v3[1] = DaemonGroupManager.updateMembership(with:);
    return DaemonGroupManager.leaveGroup(_:)(v16[15]);
  }
  else
  {
    v12 = v16[19];
    v11 = v16[18];
    v13 = v16[17];
    v6 = v16[12];
    v5 = v16[11];
    v7 = v16[10];
    v10 = v16[9];
    v8 = v16[8];
    v9 = v16[7];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown membership update request received", 0x2AuLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BE3DD18], v9);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(v16[2] + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = v0;
  v2 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 16) + 8))(v2);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = v0;
  v2 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 16) + 8))(v2);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v0[16];
  v2 = v0[14];
  v4 = v0[13];
  v0[2] = v0;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[2] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[15];
  v2 = v0[14];
  v3 = v0[13];
  v0[2] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[2] + 8))();
}

uint64_t DaemonGroupManager.demoteSelfInGroup(_:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[197] = v3;
  v4[196] = a3;
  v4[195] = a2;
  v4[194] = a1;
  v4[189] = v4;
  v4[190] = 0;
  v4[183] = 0;
  v4[184] = 0;
  v4[191] = 0;
  v4[192] = 0;
  v4[193] = 0;
  memset(v4 + 122, 0, 0xC0uLL);
  memset(v4 + 146, 0, 0x60uLL);
  v5 = type metadata accessor for InternalErrorCode();
  v4[198] = v5;
  v4[199] = *(_QWORD *)(v5 - 8);
  v4[200] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
  v4[201] = swift_task_alloc();
  v6 = type metadata accessor for GPKMemberRole();
  v4[202] = v6;
  v4[203] = *(_QWORD *)(v6 - 8);
  v4[204] = swift_task_alloc();
  v4[205] = swift_task_alloc();
  v7 = type metadata accessor for LogSubsystem();
  v4[206] = v7;
  v4[207] = *(_QWORD *)(v7 - 8);
  v4[208] = swift_task_alloc();
  v4[190] = a1;
  v4[183] = a2;
  v4[184] = a3;
  v4[191] = v3;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.demoteSelfInGroup(_:serviceName:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD, uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = v0[208];
  v12 = v0[207];
  v14 = v0[206];
  v0[189] = v0;
  v0[185] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[186] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("received group demotion request ", 0x20uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[187] = GPKGroupID.hexString.getter();
  v0[188] = v3;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
  gpklog(_:type:fileID:line:subsystem:)();
  v5 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v0[209] = v5;
  v5(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  DaemonGroupManager.groupStore()();
  v8 = v11[166];
  v9 = v11[167];
  __swift_project_boxed_opaque_existential_1(v11 + 163, v8);
  v10 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 + 16) + **(int **)(v9 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  v11[210] = v6;
  *v6 = v11[189];
  v6[1] = DaemonGroupManager.demoteSelfInGroup(_:serviceName:);
  return v10(v11[194], v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  char v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = *(_QWORD *)(v0 + 1688);
  *(_QWORD *)(v0 + 1512) = v0;
  if (!v1)
  {
    v12 = v27[200];
    v9 = v27[199];
    v10 = v27[198];
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x24BE3DCF8], v10);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
    _allocateUninitializedArray<A>(_:)();
    v11 = v5;
    *v5 = static InternalErrorKey.groupID.getter();
    v11[1] = v6;
    v7 = GPKGroupID.hexString.getter();
    v11[5] = MEMORY[0x24BEE0D00];
    v11[2] = v7;
    v11[3] = v8;
    _finalizeUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v27 + 163));
    goto LABEL_11;
  }
  v27[192] = v27[211];
  v26 = dispatch thunk of GPKGroup.meMember.getter();
  v27[213] = v26;
  if (!v26)
    goto LABEL_8;
  v22 = v27[205];
  v21 = v27[204];
  v20 = v27[203];
  v23 = v27[202];
  v27[193] = v26;
  dispatch thunk of GPKMember.role.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104))(v21, *MEMORY[0x24BE3DAB8], v23);
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  v25 = == infix<A>(_:_:)();
  v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v24(v21, v23);
  v24(v22, v23);
  if ((v25 & 1) == 0)
  {
    swift_release();
LABEL_8:
    v15 = (void (*)(uint64_t, uint64_t))v27[209];
    v13 = v27[208];
    v14 = v27[206];
    v18 = v27[200];
    v16 = v27[199];
    v17 = v27[198];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cannot request demotion if I'm not an admin", 0x2BuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
    gpklog(_:type:fileID:line:subsystem:)();
    v15(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x24BE3DDB0], v17);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v27 + 163));
    goto LABEL_11;
  }
  v2 = v27[212];
  v19 = v27[197];
  swift_retain();
  outlined init with copy of Client(v19 + 16, (uint64_t)(v27 + 168));
  ServiceBuilder.groupService(for:)((uint64_t)(v27 + 168), v27 + 122);
  if (!v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v27 + 168));
    swift_release();
    v3 = (_QWORD *)swift_task_alloc();
    v27[214] = v3;
    *v3 = v27[189];
    v3[1] = DaemonGroupManager.demoteSelfInGroup(_:serviceName:);
    return GroupService.demoteGroup(groupID:)(v27[194]);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v27 + 168));
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v27 + 163));
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v27[189] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 1512) = *v1;
  *(_QWORD *)(v2 + 1720) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = v0[211];
  v8 = v0[201];
  v0[189] = v0;
  v1 = type metadata accessor for GPKMember();
  static Difference.empty()(v1, v2, v3, v0 + 158);
  v10 = dispatch thunk of GPKMember.handle.getter();
  v11 = v4;
  v0[216] = v4;
  v5 = type metadata accessor for GroupBlobEnvelope();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v8, 1);
  v6 = (_QWORD *)swift_task_alloc();
  v9[217] = v6;
  *v6 = v9[189];
  v6[1] = DaemonGroupManager.demoteSelfInGroup(_:serviceName:);
  return DaemonGroupManager.sendGroupMembershipUpdate(group:differences:from:groupBlobEnvelope:)(v12, (uint64_t)(v0 + 158), v10, v11, v9[201]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v4 = *v1 + 16;
  v5 = *v1 + 1264;
  *(_QWORD *)(v2 + 1512) = *v1;
  *(_QWORD *)(v2 + 1744) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of GroupBlobEnvelope?(*(_QWORD *)(v4 + 1592));
    swift_bridgeObjectRelease();
    outlined release of Difference<GPKMember>(v5);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *(_QWORD *)(v0 + 1688);
  v3 = *(_QWORD *)(v0 + 1576);
  *(_QWORD *)(v0 + 1512) = v0;
  outlined init with copy of Client(v3 + 16, v0 + 1384);
  v4 = *(_QWORD *)(v3 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v4 + 16, v0 + 16);
  swift_release();
  outlined init with copy of CryptographyServiceProviding(v0 + 456, v0 + 1424);
  outlined destroy of Dependencies((id *)(v0 + 16));
  MemberIdentifierFetcher.init(client:cryptoService:)((const void *)(v0 + 1384), (const void *)(v0 + 1424), (_QWORD *)(v0 + 1168));
  v1 = (_QWORD *)swift_task_alloc();
  v5[219] = v1;
  *v1 = v5[189];
  v1[1] = DaemonGroupManager.demoteSelfInGroup(_:serviceName:);
  return MemberIdentifierFetcher.addStableMemberIdentifier(to:serviceName:)(v6, v5[195], v5[196]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 1512) = *v1;
  *(_QWORD *)(v2 + 1760) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 1512) = v0;
  outlined destroy of MemberIdentifierFetcher(v0 + 1168);
  outlined destroy of GroupService(v0 + 976);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 1304);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v2 + 1512) + 8))(*(_QWORD *)(v2 + 1688));
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 1512) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 1304);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 1512) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 1512) = v0;
  outlined destroy of GroupService(v0 + 976);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 1304);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 1512) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 1608);
  *(_QWORD *)(v0 + 1512) = v0;
  outlined destroy of GroupBlobEnvelope?(v1);
  swift_bridgeObjectRelease();
  outlined release of Difference<GPKMember>(v0 + 1264);
  outlined destroy of GroupService(v0 + 976);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 1304);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 1512) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 1512) = v0;
  outlined destroy of MemberIdentifierFetcher(v0 + 1168);
  outlined destroy of GroupService(v0 + 976);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 1304);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 1512) + 8))();
}

uint64_t DaemonGroupManager.demoteSelfInGroup(_:serviceName:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[189] = *v2;
  v3[211] = a1;
  v3[212] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.leaveGroup(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[51] = v1;
  v2[50] = a1;
  v2[45] = v2;
  v2[46] = 0;
  v2[47] = 0;
  v2[48] = 0;
  v2[49] = 0;
  memset(v2 + 2, 0, 0xC0uLL);
  v3 = type metadata accessor for InternalErrorCode();
  v2[52] = v3;
  v2[53] = *(_QWORD *)(v3 - 8);
  v2[54] = swift_task_alloc();
  v4 = type metadata accessor for GPKGroup.JoinState();
  v2[55] = v4;
  v2[56] = *(_QWORD *)(v4 - 8);
  v2[57] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
  v2[58] = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  v2[59] = v5;
  v2[60] = *(_QWORD *)(v5 - 8);
  v2[61] = swift_task_alloc();
  v2[46] = a1;
  v2[47] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[45] = *v2;
  v3[66] = a1;
  v3[67] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[45] = *v2;
  v3[75] = a1;
  v3[76] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.leaveGroup(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = v0[61];
  v11 = v0[60];
  v13 = v0[59];
  v0[45] = v0;
  v0[41] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[42] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Leaving group with identifier: ", 0x1FuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[62] = type metadata accessor for GPKGroupID();
  v0[63] = lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
  gpklog(_:type:fileID:line:subsystem:)();
  v4 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[64] = v4;
  v4(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  DaemonGroupManager.groupStore()();
  v7 = v10[34];
  v8 = v10[35];
  __swift_project_boxed_opaque_existential_1(v10 + 31, v7);
  v9 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 + 16) + **(int **)(v8 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  v10[65] = v5;
  *v5 = v10[45];
  v5[1] = DaemonGroupManager.leaveGroup(_:);
  return v9(v10[50], v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v1 = *(_QWORD *)(v0 + 528);
  *(_QWORD *)(v0 + 360) = v0;
  if (v1)
  {
    v2 = v28[66];
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v28[48] = v2;
    v27 = dispatch thunk of GPKGroup.meMember.getter();
    v28[68] = v27;
    if (v27)
    {
      v3 = v28[67];
      v26 = v28[51];
      v28[49] = v27;
      swift_release();
      swift_retain();
      outlined init with copy of Client(v26 + 16, (uint64_t)(v28 + 36));
      ServiceBuilder.groupService(for:)((uint64_t)(v28 + 36), v28 + 2);
      if (!v3)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)(v28 + 36));
        swift_release();
        v4 = (_QWORD *)swift_task_alloc();
        v28[69] = v4;
        *v4 = v28[45];
        v4[1] = DaemonGroupManager.leaveGroup(_:);
        return GroupService.leaveGroup(groupID:)(v28[50]);
      }
      swift_release();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v28 + 36));
      swift_release();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v28 + 31));
    }
    else
    {
      v22 = (void (*)(uint64_t, uint64_t))v28[64];
      v20 = v28[61];
      v21 = v28[59];
      v25 = v28[54];
      v23 = v28[53];
      v24 = v28[52];
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cannot leave a group with no meMember", 0x25uLL, 1);
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
      gpklog(_:type:fileID:line:subsystem:)();
      v22(v20, v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104))(v25, *MEMORY[0x24BE3DD40], v24);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v28 + 31));
    }
  }
  else
  {
    v15 = (void (*)(uint64_t, uint64_t))v28[64];
    v13 = v28[61];
    v14 = v28[59];
    v19 = v28[54];
    v16 = v28[53];
    v17 = v28[52];
    v28[43] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v28[44] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Couldn't find group with identifier: ", 0x25uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
    gpklog(_:type:fileID:line:subsystem:)();
    v15(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v19, *MEMORY[0x24BE3DCF8], v17);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
    _allocateUninitializedArray<A>(_:)();
    v18 = v9;
    *v9 = static InternalErrorKey.groupID.getter();
    v18[1] = v10;
    v11 = GPKGroupID.hexString.getter();
    v18[5] = MEMORY[0x24BEE0D00];
    v18[2] = v11;
    v18[3] = v12;
    _finalizeUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v28 + 31));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v28[45] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 360) = *v1;
  *(_QWORD *)(v2 + 560) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v0[66];
  v10 = (void (*)(uint64_t, uint64_t))v0[64];
  v8 = v0[61];
  v9 = v0[59];
  v11 = v0[58];
  v0[45] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Crypto services update with leave event", 0x27uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v8);
  gpklog(_:type:fileID:line:subsystem:)();
  v10(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for GPKMember();
  static Difference.empty()(v1, v2, v3, v0 + 26);
  v13 = dispatch thunk of GPKMember.handle.getter();
  v14 = v4;
  v0[71] = v4;
  v5 = type metadata accessor for GroupBlobEnvelope();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v11, 1);
  v6 = (_QWORD *)swift_task_alloc();
  v12[72] = v6;
  *v6 = v12[45];
  v6[1] = DaemonGroupManager.leaveGroup(_:);
  return DaemonGroupManager.sendGroupMembershipUpdate(group:differences:from:groupBlobEnvelope:)(v15, (uint64_t)(v0 + 26), v13, v14, v12[58]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v4 = *v1 + 16;
  v5 = *v1 + 208;
  *(_QWORD *)(v2 + 360) = *v1;
  *(_QWORD *)(v2 + 584) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
  }
  else
  {
    outlined destroy of GroupBlobEnvelope?(*(_QWORD *)(v4 + 448));
    swift_bridgeObjectRelease();
    outlined release of Difference<GPKMember>(v5);
  }
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v13;

  v13 = v0[66];
  v5 = (void (*)(uint64_t, uint64_t))v0[64];
  v3 = v0[61];
  v4 = v0[59];
  v7 = v0[57];
  v6 = v0[56];
  v8 = v0[55];
  v0[45] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group leave message send to other members", 0x29uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
  gpklog(_:type:fileID:line:subsystem:)();
  v5(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v7, *MEMORY[0x24BE3E4A0], v8);
  GPKGroup.setJoinState(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_release();
  v10 = v0[34];
  v11 = v0[35];
  __swift_project_boxed_opaque_existential_1(v0 + 31, v10);
  v12 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + 40) + **(int **)(v11 + 40));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 592) = v1;
  *v1 = *(_QWORD *)(v9 + 360);
  v1[1] = DaemonGroupManager.leaveGroup(_:);
  return v12(v13, 0, v10, v11);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  v2 = v0[75];
  v4 = (void (*)(uint64_t, uint64_t))v0[64];
  v5 = v0[61];
  v3 = v0[59];
  v0[45] = v0;
  swift_retain();
  swift_retain();
  v0[48] = v2;
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Updated group stored in local db", 0x20uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  v4(v5, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  ClientMessageBroadcaster.leftGroup(_:)(v2);
  swift_release();
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group leave message sent to all subscribers", 0x2BuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  v4(v5, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of GroupService((uint64_t)(v0 + 2));
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 31));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v6 + 360) + 8))(*(_QWORD *)(v6 + 600));
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 360) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 248);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 360) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 360) = v0;
  outlined destroy of GroupService(v0 + 16);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 248);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 360) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 464);
  *(_QWORD *)(v0 + 360) = v0;
  outlined destroy of GroupBlobEnvelope?(v1);
  swift_bridgeObjectRelease();
  outlined release of Difference<GPKMember>(v0 + 208);
  swift_release();
  outlined destroy of GroupService(v0 + 16);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 248);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 360) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 360) = v0;
  swift_release();
  outlined destroy of GroupService(v0 + 16);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 248);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 360) + 8))();
}

uint64_t DaemonGroupManager.delete(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[77] = v1;
  v2[76] = a1;
  v2[73] = v2;
  v2[74] = 0;
  v2[75] = 0;
  bzero(v2 + 2, 0x20AuLL);
  v2[74] = a1;
  v2[75] = v1;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.delete(with:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v0[77];
  v0[73] = v0;
  swift_retain();
  outlined init with copy of Client(v4 + 16, (uint64_t)(v0 + 68));
  v5 = *(_QWORD *)(v4 + 64);
  swift_retain();
  ServiceBuilder.groupDeletion(for:broadcaster:)((uint64_t)(v0 + 68), v5, v0 + 2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v3 + 68));
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v3[78] = v1;
  *v1 = v3[73];
  v1[1] = DaemonGroupManager.delete(with:);
  return GroupDeletion.delete(with:)(v3[76]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 584) = *v1;
  *(_QWORD *)(v2 + 632) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 584) = v0;
  outlined destroy of GroupDeletion((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 584) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 584) = v0;
  outlined destroy of GroupDeletion((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 584) + 8))();
}

uint64_t DaemonGroupManager.sendGroupMembershipUpdate(group:differences:from:groupBlobEnvelope:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v6[23] = v5;
  v6[22] = a5;
  v6[21] = a4;
  v6[20] = a3;
  v6[19] = a2;
  v6[18] = a1;
  v6[11] = v6;
  v6[12] = 0;
  v6[13] = 0;
  v6[7] = 0;
  v6[8] = 0;
  v6[14] = 0;
  v6[15] = 0;
  v6[16] = 0;
  v7 = type metadata accessor for LogSubsystem();
  v6[24] = v7;
  v6[25] = *(_QWORD *)(v7 - 8);
  v6[26] = swift_task_alloc();
  v6[12] = a1;
  v6[13] = a2;
  v6[7] = a3;
  v6[8] = a4;
  v6[14] = a5;
  v6[15] = v5;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.sendGroupMembershipUpdate(group:differences:from:groupBlobEnvelope:)()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 88) = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Sending group membership update to other members", 0x30uLL, 1);
  static os_log_type_t.debug.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  v1 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v0 + 216) = v1;
  v1(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  *(_QWORD *)(v0 + 224) = ServiceBuilder.peerMessagingService.getter();
  swift_release();
  outlined init with copy of Client(v7 + 16, v0 + 16);
  v9 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v9);
  (*(void (**)(uint64_t))(v8 + 16))(v9);
  *(_BYTE *)(v0 + 249) = *(_BYTE *)(v0 + 248) & 1;
  v2 = (_QWORD *)swift_task_alloc();
  v10[29] = v2;
  *v2 = v10[11];
  v2[1] = DaemonGroupManager.sendGroupMembershipUpdate(group:differences:from:groupBlobEnvelope:);
  return PeerMessagingService.sendGroupMembershipUpdate(to:differences:from:groupBlobEnvelope:priority:)(v10[18], v10[19], v10[20], v10[21], v10[22], (_BYTE *)(v0 + 249));
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void *v9;

  v9 = (void *)v0[30];
  v8 = (void (*)(uint64_t, uint64_t))v0[27];
  v6 = v0[26];
  v7 = v0[24];
  v0[11] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_release();
  v1 = v9;
  v0[16] = v9;
  v0[9] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[10] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Sending group membership update failed: ", 0x28uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v0[17] = v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
  gpklog(_:type:fileID:line:subsystem:)();
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("By-passing the invitation error - temporarily", 0x2DuLL, 1);
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
  gpklog(_:type:fileID:line:subsystem:)();
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[11] + 8))();
}

_QWORD *DaemonGroupManager.sendGroupMembershipUpdate(group:differences:from:groupBlobEnvelope:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 88) = *v1;
  v4 = (_QWORD *)(v2 + 88);
  v5 = v2 + 16;
  *(_QWORD *)(v2 + 240) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  __swift_destroy_boxed_opaque_existential_1(v5);
  swift_release();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t DaemonGroupManager.rsvp(request:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[9] = v1;
  v2[8] = a1;
  v2[4] = v2;
  v2[5] = 0;
  v2[6] = 0;
  v2[7] = 0;
  v3 = type metadata accessor for InternalErrorCode();
  v2[10] = v3;
  v2[11] = *(_QWORD *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v4 = type metadata accessor for LogSubsystem();
  v2[13] = v4;
  v2[14] = *(_QWORD *)(v4 - 8);
  v2[15] = swift_task_alloc();
  v5 = type metadata accessor for GPKGroupID();
  v2[16] = v5;
  v2[17] = *(_QWORD *)(v5 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v6 = type metadata accessor for GPKRSVPRequest.RSVP();
  v2[22] = v6;
  v2[23] = *(_QWORD *)(v6 - 8);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[5] = a1;
  v2[6] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[4] = *v2;
  v3 += 4;
  v5 = v3 - 2;
  v3[26] = a1;
  v3[27] = v1;
  swift_task_dealloc();
  if (!v1)
    ((void (*)(_QWORD, _QWORD))v5[25])(v5[18], v5[14]);
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v3 = (_QWORD *)*v2;
  v3[4] = *v2;
  v3 += 4;
  v8 = v3 - 2;
  v3[30] = a1;
  v3[31] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v7 = (void (*)(uint64_t, uint64_t))v8[25];
    v5 = v8[17];
    v6 = v8[14];
    swift_bridgeObjectRelease();
    v7(v5, v6);
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[4] = *v2;
  v3 += 4;
  v5 = v3 - 2;
  v3[33] = a1;
  v3[34] = v1;
  swift_task_dealloc();
  if (!v1)
    ((void (*)(_QWORD, _QWORD))v5[25])(v5[16], v5[14]);
  return swift_task_switch();
}

uint64_t DaemonGroupManager.rsvp(request:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  void (*v3)(uint64_t, uint64_t);
  Swift::String v4;
  void (*v5)(uint64_t, uint64_t);
  Swift::String v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v11 = v0[25];
  v10 = v0[23];
  v12 = v0[22];
  v14 = v0[21];
  v13 = v0[17];
  v15 = v0[16];
  v17 = v0[15];
  v16 = v0[14];
  v18 = v0[13];
  v0[4] = v0;
  v0[2] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[3] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Received rsvp request ", 0x16uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  GPKRSVPRequest.rsvp.getter();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v0[26] = v3;
  v3(v11, v12);
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" invitation for group with ID: ", 0x1FuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  GPKRSVPRequest.groupID.getter();
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v0[27] = v5;
  v5(v14, v15);
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v17);
  gpklog(_:type:fileID:line:subsystem:)();
  v7 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v0[28] = v7;
  v7(v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  GPKRSVPRequest.groupID.getter();
  v8 = (_QWORD *)swift_task_alloc();
  v19[29] = v8;
  *v8 = v19[4];
  v8[1] = DaemonGroupManager.rsvp(request:);
  return DaemonGroupManager.repairInvitationIfNeeded(groupID:)(v19[20]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  _QWORD *v25;

  v1 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 32) = v0;
  if (v1)
  {
    v24 = v25[30];
    v23 = (void (*)(uint64_t, uint64_t))v25[28];
    v21 = v25[15];
    v22 = v25[13];
    v25[7] = v24;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Existing rsvp-ed group found", 0x1CuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
    gpklog(_:type:fileID:line:subsystem:)();
    v23(v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v25[4] + 8))(v24);
  }
  else
  {
    v18 = v25[24];
    v17 = v25[23];
    v19 = v25[22];
    GPKRSVPRequest.rsvp.getter();
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 88))(v18, v19);
    if (v20 == *MEMORY[0x24BE3DB60])
    {
      GPKRSVPRequest.groupID.getter();
      v15 = dispatch thunk of GPKRSVPRequest.serviceName.getter();
      v16 = v3;
      v25[32] = v3;
      v4 = (_QWORD *)swift_task_alloc();
      v25[33] = v4;
      *v4 = v25[4];
      v4[1] = DaemonGroupManager.rsvp(request:);
      return DaemonGroupManager.accept(groupID:serviceName:)(v25[19], v15, v16);
    }
    else if (v20 == *MEMORY[0x24BE3DB68])
    {
      GPKRSVPRequest.groupID.getter();
      v5 = (_QWORD *)swift_task_alloc();
      v25[36] = v5;
      *v5 = v25[4];
      v5[1] = DaemonGroupManager.rsvp(request:);
      return DaemonGroupManager.reject(groupID:)(v25[18]);
    }
    else
    {
      v8 = (void (*)(uint64_t, uint64_t))v25[28];
      v14 = (void (*)(uint64_t, uint64_t))v25[26];
      v12 = v25[24];
      v13 = v25[22];
      v6 = v25[15];
      v7 = v25[13];
      v11 = v25[12];
      v9 = v25[11];
      v10 = v25[10];
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown rsvp message", 0x14uLL, 1);
      static os_log_type_t.fault.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
      gpklog(_:type:fileID:line:subsystem:)();
      v8(v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BE3DE90], v10);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      v14(v12, v13);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)())(v25[4] + 8))();
    }
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 32) = v0;
  v2 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 32) + 8))(v2);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 32) = v0;
  v2 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 32) + 8))(v2);
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = (void (*)(uint64_t, uint64_t))v0[27];
  v2 = v0[20];
  v3 = v0[16];
  v0[4] = v0;
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[4] + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  v4 = (void (*)(uint64_t, uint64_t))v0[27];
  v2 = v0[19];
  v3 = v0[16];
  v0[4] = v0;
  swift_bridgeObjectRelease();
  v4(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[4] + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = (void (*)(uint64_t, uint64_t))v0[27];
  v2 = v0[18];
  v3 = v0[16];
  v0[4] = v0;
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[4] + 8))();
}

uint64_t DaemonGroupManager.repairInvitationIfNeeded(groupID:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[84] = v1;
  v2[83] = a1;
  v2[79] = v2;
  v2[80] = 0;
  v2[81] = 0;
  v2[82] = 0;
  bzero(v2 + 2, 0x1C0uLL);
  v3 = type metadata accessor for GPKGroupID();
  v2[85] = v3;
  v2[86] = *(_QWORD *)(v3 - 8);
  v2[87] = swift_task_alloc();
  v4 = type metadata accessor for GPKGroup.JoinState();
  v2[88] = v4;
  v2[89] = *(_QWORD *)(v4 - 8);
  v2[90] = swift_task_alloc();
  v2[91] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v2[92] = v5;
  v2[93] = *(_QWORD *)(v5 - 8);
  v2[94] = swift_task_alloc();
  v6 = type metadata accessor for LogSubsystem();
  v2[95] = v6;
  v2[96] = *(_QWORD *)(v6 - 8);
  v2[97] = swift_task_alloc();
  v2[80] = a1;
  v2[81] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[79] = *v2;
  v3[100] = a1;
  v3[101] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.repairInvitationIfNeeded(groupID:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, uint64_t, uint64_t);
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = v0[97];
  v11 = v0[96];
  v13 = v0[95];
  v0[79] = v0;
  v0[73] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[74] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Repairing invitaiton if needed: ", 0x20uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
  gpklog(_:type:fileID:line:subsystem:)();
  v4 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[98] = v4;
  v4(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  DaemonGroupManager.groupStore()();
  v7 = v10[61];
  v8 = v10[62];
  __swift_project_boxed_opaque_existential_1(v10 + 58, v7);
  v9 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 + 16) + **(int **)(v8 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  v10[99] = v5;
  *v5 = v10[79];
  v5[1] = DaemonGroupManager.repairInvitationIfNeeded(groupID:);
  return v9(v10[83], v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  char v35;
  _QWORD *v36;

  v1 = *(_QWORD *)(v0 + 800);
  *(_QWORD *)(v0 + 632) = v0;
  if (!v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v36 + 58));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v36[79] + 8))(0);
  }
  v26 = v36[100];
  v29 = (void (*)(uint64_t, uint64_t))v36[98];
  v27 = v36[97];
  v28 = v36[95];
  v22 = v36[94];
  v21 = v36[93];
  v23 = v36[92];
  v32 = v36[91];
  v31 = v36[90];
  v30 = v36[89];
  v33 = v36[88];
  v36[82] = v26;
  v36[75] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v36[76] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("A group the same identifier(", 0x1CuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  GPKGroupID.uuid.getter();
  v24 = UUID.uuidString.getter();
  v25 = v4;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
  v36[77] = v24;
  v36[78] = v25;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(") already exist in the group store", 0x22uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v27);
  gpklog(_:type:fileID:line:subsystem:)();
  v29(v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  dispatch thunk of GPKGroup.joinState.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104))(v31, *MEMORY[0x24BE3E4B0], v33);
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v35 = == infix<A>(_:_:)();
  v34 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v34(v31, v33);
  v34(v32, v33);
  if ((v35 & 1) != 0)
  {
    v7 = v36[101];
    v19 = (void (*)(uint64_t, uint64_t))v36[98];
    v17 = v36[97];
    v18 = v36[95];
    v20 = v36[84];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting to move the invitation to the invitation store", 0x39uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v17);
    gpklog(_:type:fileID:line:subsystem:)();
    v19(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    outlined init with copy of Client(v20 + 16, (uint64_t)(v36 + 68));
    ServiceBuilder.groupRepairService(for:)((uint64_t)(v36 + 68), (uint64_t)(v36 + 2));
    if (!v7)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v36 + 68));
      swift_release();
      v8 = (_QWORD *)swift_task_alloc();
      v36[102] = v8;
      *v8 = v36[79];
      v8[1] = DaemonGroupManager.repairInvitationIfNeeded(groupID:);
      return GroupRepairService.convertGroupToInvitation(_:)(v26);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v36 + 68));
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v36 + 58));
  }
  else
  {
    v9 = v36[101];
    v16 = (void (*)(uint64_t, uint64_t))v36[98];
    v14 = v36[97];
    v15 = v36[95];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group is already rsvp-ed so returning the existing group", 0x38uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
    gpklog(_:type:fileID:line:subsystem:)();
    v16(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    DaemonGroupManager.invitationStore()();
    if (!v9)
    {
      v11 = v36[66];
      v12 = v36[67];
      __swift_project_boxed_opaque_existential_1(v36 + 63, v11);
      dispatch thunk of GPKGroup.groupID.getter();
      v13 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 40) + **(int **)(v12 + 40));
      v10 = (_QWORD *)swift_task_alloc();
      v36[104] = v10;
      *v10 = v36[79];
      v10[1] = DaemonGroupManager.repairInvitationIfNeeded(groupID:);
      return v13(v36[87], v11, v12);
    }
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v36 + 58));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v36[79] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 632) = *v1;
  *(_QWORD *)(v2 + 824) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  v4 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 632) = *v1;
  *(_QWORD *)(v2 + 840) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4[84] + 8))(v4[85], v4[83]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 800);
  *(_QWORD *)(v0 + 632) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 504);
  __swift_destroy_boxed_opaque_existential_1(v0 + 464);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 632) + 8))(v2);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 632) = v0;
  outlined destroy of GroupRepairService(v0 + 16);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 464);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v0 + 632) + 8))(0);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 632) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 464);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 632) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 632) = v0;
  outlined destroy of GroupRepairService(v0 + 16);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 464);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 632) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[87];
  v2 = v0[86];
  v3 = v0[85];
  v0[79] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 63));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 58));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[79] + 8))();
}

uint64_t DaemonGroupManager.accept(groupID:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[37] = v3;
  v4[36] = a3;
  v4[35] = a2;
  v4[34] = a1;
  v4[30] = v4;
  v4[31] = 0;
  v4[28] = 0;
  v4[29] = 0;
  v4[32] = 0;
  v5 = type metadata accessor for GPKGroupID();
  v4[38] = v5;
  v4[39] = *(_QWORD *)(v5 - 8);
  v4[40] = swift_task_alloc();
  v4[31] = a1;
  v4[28] = a2;
  v4[29] = a3;
  v4[32] = v3;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.accept(groupID:serviceName:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v8 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 296);
  v10 = *(_QWORD *)(v0 + 288);
  v9 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v0 + 240) = v0;
  DaemonGroupManager.metrics.getter((_WORD *)(v0 + 16));
  swift_retain();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v5, v6);
  swift_bridgeObjectRetain();
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v12;
  v12[2] = v7;
  v12[3] = v8;
  v12[4] = v9;
  v12[5] = v10;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v11 + 336) = v1;
  v2 = type metadata accessor for GPKGroup();
  *v1 = *(_QWORD *)(v11 + 240);
  v1[1] = DaemonGroupManager.accept(groupID:serviceName:);
  return Metrics.callAsFunction<A>(_:worker:)(v11 + 264, 2, (uint64_t)&async function pointer to partial apply for closure #1 in DaemonGroupManager.accept(groupID:serviceName:), (uint64_t)v12, v2, (uint64_t)&protocol witness table for GPKGroup);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *v1;
  *(_QWORD *)(v2 + 240) = *v1;
  v2 += 240;
  v7 = (_QWORD *)(v2 - 224);
  v8 = v2 - 224;
  *(_QWORD *)(v2 + 104) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v5 = v7[38];
    v4 = v7[37];
    v6 = v7[36];
    swift_task_dealloc();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    swift_bridgeObjectRelease();
    outlined destroy of Metrics(v8);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 240) = v0;
  v2 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 240) + 8))(v2);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v0[40];
  v2 = v0[39];
  v3 = v0[38];
  v0[30] = v0;
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  swift_bridgeObjectRelease();
  outlined destroy of Metrics((uint64_t)(v0 + 2));
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v5 + 240) + 8))();
}

uint64_t DaemonGroupManager.reject(groupID:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[33] = v1;
  v2[32] = a1;
  v2[28] = v2;
  v2[29] = 0;
  v2[30] = 0;
  v3 = type metadata accessor for GPKGroupID();
  v2[34] = v3;
  v2[35] = *(_QWORD *)(v3 - 8);
  v2[36] = swift_task_alloc();
  v2[29] = a1;
  v2[30] = v1;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.reject(groupID:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 224) = v0;
  DaemonGroupManager.metrics.getter((_WORD *)(v0 + 16));
  swift_retain();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v5, v6);
  v10 = swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v10;
  *(_QWORD *)(v10 + 16) = v7;
  *(_QWORD *)(v10 + 24) = v8;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 304) = v1;
  v2 = type metadata accessor for GPKGroup();
  *v1 = *(_QWORD *)(v9 + 224);
  v1[1] = DaemonGroupManager.reject(groupID:);
  return Metrics.callAsFunction<A>(_:worker:)(v9 + 248, 3, (uint64_t)&async function pointer to partial apply for closure #1 in DaemonGroupManager.reject(groupID:), v10, v2, (uint64_t)&protocol witness table for GPKGroup);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *v1;
  *(_QWORD *)(v2 + 224) = *v1;
  v2 += 224;
  v7 = (_QWORD *)(v2 - 208);
  v8 = v2 - 208;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v5 = v7[34];
    v4 = v7[33];
    v6 = v7[32];
    swift_task_dealloc();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    outlined destroy of Metrics(v8);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 224) = v0;
  v2 = *(_QWORD *)(v0 + 248);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 224) + 8))(v2);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v0[36];
  v2 = v0[35];
  v3 = v0[34];
  v0[28] = v0;
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  outlined destroy of Metrics((uint64_t)(v0 + 2));
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v5 + 224) + 8))();
}

uint64_t closure #1 in DaemonGroupManager.accept(groupID:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[147] = a5;
  v5[146] = a4;
  v5[145] = a3;
  v5[144] = a2;
  v5[143] = a1;
  v5[139] = v5;
  v5[140] = 0;
  v5[141] = 0;
  v5[137] = 0;
  v5[138] = 0;
  v5[142] = 0;
  v6 = type metadata accessor for GPKGroupID();
  v5[148] = v6;
  v5[149] = *(_QWORD *)(v6 - 8);
  v5[150] = swift_task_alloc();
  type metadata accessor for Transaction();
  v5[151] = swift_task_alloc();
  v5[140] = a2;
  v5[141] = a3;
  v5[137] = a4;
  v5[138] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in DaemonGroupManager.accept(groupID:serviceName:)()
{
  uint64_t v0;
  double v1;
  Swift::String v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[5];

  v9 = *(_QWORD *)(v0 + 1208);
  v15 = *(_QWORD *)(v0 + 1200);
  v11 = *(_QWORD *)(v0 + 1192);
  v13 = *(_QWORD *)(v0 + 1184);
  v17 = *(_QWORD *)(v0 + 1176);
  v16 = *(_QWORD *)(v0 + 1168);
  v12 = *(_QWORD *)(v0 + 1160);
  v14 = *(_QWORD *)(v0 + 1152);
  *(_QWORD *)(v0 + 1112) = v0;
  v7 = type metadata accessor for ExponentialRetryScheduler();
  v6 = *(_QWORD *)(v14 + 72);
  v1 = default argument 1 of ExponentialRetryScheduler.init(maxRetries:power:)();
  v8 = ExponentialRetryScheduler.__allocating_init(maxRetries:power:)(v6, v1);
  *(_QWORD *)(v0 + 1216) = v8;
  *(_QWORD *)(v0 + 1136) = v8;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RSVP Response: accept", 0x15uLL, 1);
  swift_retain();
  v21[3] = v7;
  v21[4] = &protocol witness table for ExponentialRetryScheduler;
  v21[0] = v8;
  Transaction.init(name:retryScheduler:)(v2._countAndFlagsBits, (uint64_t)v2._object, (uint64_t)v21, v9);
  v10 = *(_QWORD *)(v14 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v10 + 16, v0 + 16);
  swift_release();
  outlined init with copy of CryptographyServiceProviding(v0 + 456, v0 + 976);
  outlined destroy of Dependencies((id *)(v0 + 16));
  swift_retain();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v15, v12, v13);
  outlined init with copy of CryptographyServiceProviding(v0 + 976, v0 + 1016);
  swift_bridgeObjectRetain();
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1224) = v19;
  v19[2] = v14;
  v19[3] = v15;
  v19[4] = v0 + 1016;
  v19[5] = v16;
  v19[6] = v17;
  outlined init with copy of CryptographyServiceProviding(v0 + 976, v0 + 1056);
  v20 = swift_allocObject();
  *(_QWORD *)(v0 + 1232) = v20;
  outlined init with take of CryptographyServiceProviding((const void *)(v0 + 1056), (void *)(v20 + 16));
  v3 = (_QWORD *)swift_task_alloc();
  v18[155] = v3;
  v4 = type metadata accessor for GPKGroup();
  *v3 = v18[139];
  v3[1] = closure #1 in DaemonGroupManager.accept(groupID:serviceName:);
  return Transaction.perform<A>(_:shouldRetry:)(v18[143], (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:), (uint64_t)v19, (uint64_t)partial apply for closure #2 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:), v20, v4);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v6 = *v1;
  v7 = (_QWORD *)(*v1 + 16);
  v8 = *v1 + 1016;
  *(_QWORD *)(v6 + 1112) = *v1;
  *(_QWORD *)(v6 + 1248) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = v7[148];
    v3 = v7[147];
    v5 = v7[146];
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> (@unowned Bool))?((uint64_t)partial apply for closure #2 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:));
    swift_task_dealloc();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
    __swift_destroy_boxed_opaque_existential_1(v8);
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 1208);
  *(_QWORD *)(v0 + 1112) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 976);
  outlined destroy of Transaction(v2);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 1112) + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v0[151];
  v5 = v0[150];
  v2 = v0[149];
  v3 = v0[148];
  v0[139] = v0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> (@unowned Bool))?((uint64_t)partial apply for closure #2 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:));
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 127));
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 122));
  outlined destroy of Transaction(v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v6 + 1112) + 8))();
}

uint64_t closure #1 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v14;

  *(_QWORD *)(v6 + 288) = a6;
  *(_QWORD *)(v6 + 280) = a5;
  *(_QWORD *)(v6 + 272) = a4;
  *(_QWORD *)(v6 + 264) = a2;
  *(_QWORD *)(v6 + 256) = a1;
  *(_QWORD *)(v6 + 208) = v6;
  *(_QWORD *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 240) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  memset((void *)(v6 + 16), 0, 0x60uLL);
  v8 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v6 + 296) = v8;
  *(_QWORD *)(v6 + 304) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v6 + 312) = swift_task_alloc();
  *(_QWORD *)(v6 + 216) = a2;
  *(_QWORD *)(v6 + 224) = a3;
  *(_QWORD *)(v6 + 232) = a4;
  *(_QWORD *)(v6 + 192) = a5;
  *(_QWORD *)(v6 + 200) = a6;
  *(_BYTE *)(v6 + 384) = 0;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v14 + 320) = v9;
  *v9 = *(_QWORD *)(v14 + 208);
  v9[1] = closure #1 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:);
  return DaemonGroupManager.rsvpInvitation(responseType:groupID:)((char *)(v6 + 384), a3);
}

uint64_t closure #1 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;

  v3 = (_QWORD *)*v2;
  v3[26] = *v2;
  v7 = v3 + 2;
  v8 = v3 + 26;
  v9 = v3 + 30;
  v3[41] = a1;
  v3[42] = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  *v9 = a1;
  v4 = (_QWORD *)swift_task_alloc();
  v7[41] = v4;
  *v4 = *v8;
  v4[1] = closure #1 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:);
  return DaemonGroupManager.finalizeInvitationAcceptance(forRSVPedGroup:)(a1);
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[26] = *v2;
  v3[44] = a1;
  v3[45] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[44];
  v5 = v0[34];
  v2 = v0[33];
  v0[26] = v0;
  v0[31] = v1;
  outlined init with copy of Client(v2 + 16, (uint64_t)(v0 + 14));
  outlined init with copy of CryptographyServiceProviding(v5, (uint64_t)(v0 + 19));
  MemberIdentifierFetcher.init(client:cryptoService:)(v0 + 14, v0 + 19, v0 + 2);
  v3 = (_QWORD *)swift_task_alloc();
  v6[46] = v3;
  *v3 = v6[26];
  v3[1] = closure #1 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:);
  return MemberIdentifierFetcher.addStableMemberIdentifier(to:serviceName:)(v6[44], v6[35], v6[36]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 208) = *v1;
  *(_QWORD *)(v2 + 376) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v0[44];
  v6 = v0[39];
  v2 = v0[38];
  v3 = v0[37];
  v4 = (_QWORD *)v0[32];
  v0[26] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Invitation successfully accepted", 0x24uLL, 0);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  *v4 = v5;
  outlined destroy of MemberIdentifierFetcher((uint64_t)(v0 + 2));
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[26] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 208) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = v0;
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 208) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = v0;
  outlined destroy of MemberIdentifierFetcher(v0 + 16);
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 208) + 8))();
}

uint64_t DaemonGroupManager.rsvpInvitation(responseType:groupID:)(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  *(_QWORD *)(v3 + 1032) = v2;
  *(_QWORD *)(v3 + 1024) = a2;
  *(_QWORD *)(v3 + 952) = v3;
  *(_BYTE *)(v3 + 1304) = 0;
  *(_QWORD *)(v3 + 960) = 0;
  *(_QWORD *)(v3 + 968) = 0;
  *(_QWORD *)(v3 + 976) = 0;
  *(_QWORD *)(v3 + 856) = 0;
  *(_QWORD *)(v3 + 864) = 0;
  *(_QWORD *)(v3 + 872) = 0;
  *(_QWORD *)(v3 + 880) = 0;
  memset((void *)(v3 + 464), 0, 0xC0uLL);
  *(_QWORD *)(v3 + 1000) = 0;
  bzero((void *)(v3 + 16), 0x1C0uLL);
  *(_QWORD *)(v3 + 1008) = 0;
  v4 = type metadata accessor for GPKGroup.JoinState();
  *(_QWORD *)(v3 + 1040) = v4;
  *(_QWORD *)(v3 + 1048) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 1056) = swift_task_alloc();
  *(_QWORD *)(v3 + 1064) = swift_task_alloc();
  v5 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v3 + 1072) = v5;
  *(_QWORD *)(v3 + 1080) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 1088) = swift_task_alloc();
  *(_QWORD *)(v3 + 1096) = swift_task_alloc();
  v6 = type metadata accessor for UUID();
  *(_QWORD *)(v3 + 1104) = v6;
  *(_QWORD *)(v3 + 1112) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 1120) = swift_task_alloc();
  v7 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v3 + 1128) = v7;
  *(_QWORD *)(v3 + 1136) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 1144) = swift_task_alloc();
  v8 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v3 + 1152) = v8;
  *(_QWORD *)(v3 + 1160) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 1168) = swift_task_alloc();
  v9 = *a1;
  *(_BYTE *)(v3 + 1312) = *a1;
  *(_BYTE *)(v3 + 1304) = v9;
  *(_QWORD *)(v3 + 960) = a2;
  *(_QWORD *)(v3 + 968) = v2;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.rsvpInvitation(responseType:groupID:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD, uint64_t, uint64_t);
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = *(_BYTE *)(v0 + 1312);
  v13 = *(_QWORD *)(v0 + 1168);
  v12 = *(_QWORD *)(v0 + 1160);
  v14 = *(_QWORD *)(v0 + 1152);
  *(_QWORD *)(v0 + 952) = v0;
  *(_QWORD *)(v0 + 776) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 784) = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RSVP to invitation: ", 0x14uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 1305) = v11;
  *(_QWORD *)(v0 + 1176) = lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
  gpklog(_:type:fileID:line:subsystem:)();
  v4 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(_QWORD *)(v0 + 1184) = v4;
  v4(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  DaemonGroupManager.invitationStore()();
  v7 = v10[85];
  v8 = v10[86];
  __swift_project_boxed_opaque_existential_1(v10 + 82, v7);
  v9 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 + 16) + **(int **)(v8 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  v10[149] = v5;
  *v5 = v10[119];
  v5[1] = DaemonGroupManager.rsvpInvitation(responseType:groupID:);
  return v9(v10[128], v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  _QWORD *v8;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 1200);
  *(_QWORD *)(v0 + 952) = v0;
  if (!v1)
  {
    v25 = *(void (**)(uint64_t, uint64_t))(v50 + 1184);
    v23 = *(_QWORD *)(v50 + 1168);
    v24 = *(_QWORD *)(v50 + 1152);
    v19 = *(_QWORD *)(v50 + 1120);
    v18 = *(_QWORD *)(v50 + 1112);
    v20 = *(_QWORD *)(v50 + 1104);
    v28 = *(_QWORD *)(v50 + 1096);
    v26 = *(_QWORD *)(v50 + 1080);
    v27 = *(_QWORD *)(v50 + 1072);
    *(_QWORD *)(v50 + 792) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v50 + 800) = v14;
    v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Could't find group with ID: ", 0x1CuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v15);
    swift_bridgeObjectRelease();
    GPKGroupID.uuid.getter();
    v21 = UUID.uuidString.getter();
    v22 = v16;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    *(_QWORD *)(v50 + 808) = v21;
    *(_QWORD *)(v50 + 816) = v22;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v23);
    gpklog(_:type:fileID:line:subsystem:)();
    v25(v23, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v28, *MEMORY[0x24BE3DE68], v27);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(v50 + 656);
    goto LABEL_10;
  }
  *(_QWORD *)(v50 + 976) = *(_QWORD *)(v50 + 1200);
  v48 = dispatch thunk of GPKGroup.invitationBlob.getter();
  v49 = v2;
  *(_QWORD *)(v50 + 1216) = v48;
  *(_QWORD *)(v50 + 1224) = v2;
  if ((v2 & 0xF000000000000000) == 0xF000000000000000)
    goto LABEL_7;
  *(_QWORD *)(v50 + 856) = v48;
  *(_QWORD *)(v50 + 864) = v2;
  v46 = dispatch thunk of GPKGroup.invitationSenderHandle.getter();
  v47 = v3;
  *(_QWORD *)(v50 + 1232) = v3;
  if (!v3)
  {
    outlined consume of Data._Representation(v48, v49);
LABEL_7:
    v36 = *(void (**)(uint64_t, uint64_t))(v50 + 1184);
    v34 = *(_QWORD *)(v50 + 1168);
    v35 = *(_QWORD *)(v50 + 1152);
    v30 = *(_QWORD *)(v50 + 1120);
    v29 = *(_QWORD *)(v50 + 1112);
    v31 = *(_QWORD *)(v50 + 1104);
    v39 = *(_QWORD *)(v50 + 1096);
    v37 = *(_QWORD *)(v50 + 1080);
    v38 = *(_QWORD *)(v50 + 1072);
    *(_QWORD *)(v50 + 824) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v50 + 832) = v10;
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Could't find a pending invitation for group with ID: ", 0x35uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    GPKGroupID.uuid.getter();
    v32 = UUID.uuidString.getter();
    v33 = v12;
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
    *(_QWORD *)(v50 + 840) = v32;
    *(_QWORD *)(v50 + 848) = v33;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v34);
    gpklog(_:type:fileID:line:subsystem:)();
    v36(v34, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v39, *MEMORY[0x24BE3DD00], v38);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v50 + 656);
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(v50 + 1208);
  v44 = *(void (**)(uint64_t, uint64_t))(v50 + 1184);
  v41 = *(_BYTE *)(v50 + 1312);
  v42 = *(_QWORD *)(v50 + 1168);
  v43 = *(_QWORD *)(v50 + 1152);
  v45 = *(_QWORD *)(v50 + 1032);
  *(_QWORD *)(v50 + 872) = v46;
  *(_QWORD *)(v50 + 880) = v3;
  *(_QWORD *)(v50 + 888) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v50 + 896) = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v50 + 1306) = v41;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" Invitation: Group fetched from local store - Done", 0x32uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v42);
  gpklog(_:type:fileID:line:subsystem:)();
  v44(v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  outlined init with copy of Client(v45 + 16, v50 + 696);
  ServiceBuilder.groupService(for:)(v50 + 696, (_QWORD *)(v50 + 464));
  if (!v4)
  {
    v40 = *(_BYTE *)(v50 + 1312);
    __swift_destroy_boxed_opaque_existential_1(v50 + 696);
    swift_release();
    dispatch thunk of GPKGroup.groupID.getter();
    *(_BYTE *)(v50 + 1307) = v40;
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v50 + 1240) = v8;
    *v8 = *(_QWORD *)(v50 + 952);
    v8[1] = DaemonGroupManager.rsvpInvitation(responseType:groupID:);
    return GroupService.rsvp(groupID:encryptedInviteBlob:senderHandle:responseType:)(*(_QWORD *)(v50 + 1144), v48, v49, v46, v47, (char *)(v50 + 1307));
  }
  __swift_destroy_boxed_opaque_existential_1(v50 + 696);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v48, v49);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v50 + 656);
LABEL_10:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v50 + 952) + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  v4 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 952) = *v1;
  *(_QWORD *)(v2 + 1248) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4[140] + 8))(v4[141], v4[139]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)(v0 + 1224);
  v9 = *(_QWORD *)(v0 + 1216);
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 1184);
  v5 = *(_BYTE *)(v0 + 1312);
  v6 = *(_QWORD *)(v0 + 1168);
  v7 = *(_QWORD *)(v0 + 1152);
  *(_QWORD *)(v0 + 952) = v0;
  *(_QWORD *)(v0 + 936) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 944) = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 1311) = v5;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" Invitation: RSVP submitted to server - Done", 0x2CuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
  gpklog(_:type:fileID:line:subsystem:)();
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of GroupService(v0 + 464);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v9, v10);
  __swift_destroy_boxed_opaque_existential_1(v0 + 656);
  v11 = *(_QWORD *)(v0 + 1200);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 952) + 8))(v11);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 952) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 656);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 952) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  char v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  _QWORD *v11;
  id v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  char v30;
  void *v31;
  uint64_t v32;
  void *v33;

  v33 = (void *)v0[156];
  v1 = v0[143];
  v2 = v0[142];
  v3 = v0[141];
  v0[119] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = v33;
  v0[123] = v33;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v0[157] = type metadata accessor for InternalError();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v5 = *(_BYTE *)(v32 + 1312);
    v31 = *(void **)(v32 + 992);
    *(_QWORD *)(v32 + 1264) = v31;
    *(_QWORD *)(v32 + 1000) = v31;
    *(_BYTE *)(v32 + 1308) = v5;
    *(_BYTE *)(v32 + 1309) = 0;
    lazy protocol witness table accessor for type RSVPMessage.MessageType and conformance RSVPMessage.MessageType();
    if ((== infix<A>(_:_:)() & 1) != 0)
    {
      v27 = *(_QWORD *)(v32 + 1096);
      v26 = *(_QWORD *)(v32 + 1088);
      v25 = *(_QWORD *)(v32 + 1080);
      v28 = *(_QWORD *)(v32 + 1072);
      InternalError.internalCode.getter();
      v6 = *MEMORY[0x24BE3DDF8];
      v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 104);
      *(_QWORD *)(v32 + 1272) = v7;
      v7(v26, v6, v28);
      lazy protocol witness table accessor for type InternalErrorCode and conformance InternalErrorCode();
      v30 = == infix<A>(_:_:)();
      v29 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v29(v26, v28);
      v29(v27, v28);
      if ((v30 & 1) != 0)
      {
        v23 = *(void (**)(uint64_t, uint64_t))(v32 + 1184);
        v20 = *(_BYTE *)(v32 + 1312);
        v21 = *(_QWORD *)(v32 + 1168);
        v22 = *(_QWORD *)(v32 + 1152);
        v24 = *(_QWORD *)(v32 + 1032);
        *(_QWORD *)(v32 + 904) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v32 + 912) = v8;
        v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v9);
        swift_bridgeObjectRelease();
        *(_BYTE *)(v32 + 1310) = v20;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" Error code rsvpResponseCallNotAllowed received, so refreshing the group.", 0x49uLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
        gpklog(_:type:fileID:line:subsystem:)();
        v23(v21, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_retain();
        outlined init with copy of Client(v24 + 16, v32 + 736);
        ServiceBuilder.groupRepairService(for:)(v32 + 736, v32 + 16);
        v19 = *(_QWORD *)(v32 + 1200);
        __swift_destroy_boxed_opaque_existential_1(v32 + 736);
        swift_release();
        v11 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v32 + 1280) = v11;
        *v11 = *(_QWORD *)(v32 + 952);
        v11[1] = DaemonGroupManager.rsvpInvitation(responseType:groupID:);
        return GroupRepairService.repairInvitation(_:)(v19);
      }
    }
    v16 = *(id *)(v32 + 1248);
    v18 = *(_QWORD *)(v32 + 1224);
    v17 = *(_QWORD *)(v32 + 1216);
    v13 = v31;
    swift_willThrow();

    outlined destroy of GroupService(v32 + 464);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v17, v18);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v32 + 656);
  }
  else
  {
    v15 = *(_QWORD *)(v32 + 1224);
    v14 = *(_QWORD *)(v32 + 1216);

    outlined destroy of GroupService(v32 + 464);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v14, v15);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v32 + 656);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v32 + 952) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  id v6;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  char v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 1288);
  *(_QWORD *)(v0 + 952) = v0;
  if (v1)
  {
    v22 = *(_QWORD *)(v29 + 1288);
    v25 = *(_QWORD *)(v29 + 1064);
    v24 = *(_QWORD *)(v29 + 1056);
    v23 = *(_QWORD *)(v29 + 1048);
    v26 = *(_QWORD *)(v29 + 1040);
    *(_QWORD *)(v29 + 1008) = v22;
    dispatch thunk of GPKGroup.joinState.getter();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104))(v24, *MEMORY[0x24BE3E4B0], v26);
    lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
    v28 = == infix<A>(_:_:)();
    v27 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v27(v24, v26);
    v27(v25, v26);
    if ((v28 & 1) == 0)
    {
      v12 = *(id *)(v29 + 1264);
      v13 = *(id *)(v29 + 1248);
      v15 = *(_QWORD *)(v29 + 1224);
      v14 = *(_QWORD *)(v29 + 1216);
      outlined destroy of GroupRepairService(v29 + 16);

      outlined destroy of GroupService(v29 + 464);
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v14, v15);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v29 + 656);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v29 + 952) + 8))(v22);
    }
    v2 = *(void **)(v29 + 1264);
    v19 = *(void **)(v29 + 1248);
    v21 = *(_QWORD *)(v29 + 1224);
    v20 = *(_QWORD *)(v29 + 1216);
    v18 = *(void (**)(uint64_t, uint64_t))(v29 + 1184);
    v16 = *(_QWORD *)(v29 + 1168);
    v17 = *(_QWORD *)(v29 + 1152);
    *(_QWORD *)(v29 + 920) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v29 + 928) = v3;
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group join state is still pending after repair: ", 0x30uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v29 + 1016) = v22;
    type metadata accessor for GPKGroup();
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v16);
    gpklog(_:type:fileID:line:subsystem:)();
    v18(v16, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v2;
    swift_willThrow();
    swift_release();
    outlined destroy of GroupRepairService(v29 + 16);

    outlined destroy of GroupService(v29 + 464);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v20, v21);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v29 + 656);
  }
  else
  {
    v8 = *(id *)(v29 + 1264);
    v9 = *(id *)(v29 + 1248);
    v11 = *(_QWORD *)(v29 + 1224);
    v10 = *(_QWORD *)(v29 + 1216);
    (*(void (**)(void))(v29 + 1272))();
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    outlined destroy of GroupRepairService(v29 + 16);

    outlined destroy of GroupService(v29 + 464);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v10, v11);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v29 + 656);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v29 + 952) + 8))();
}

{
  uint64_t v0;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(id *)(v0 + 1264);
  v3 = *(id *)(v0 + 1248);
  v5 = *(_QWORD *)(v0 + 1224);
  v4 = *(_QWORD *)(v0 + 1216);
  *(_QWORD *)(v0 + 952) = v0;
  outlined destroy of GroupRepairService(v0 + 16);

  outlined destroy of GroupService(v0 + 464);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v4, v5);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 656);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 952) + 8))();
}

uint64_t DaemonGroupManager.rsvpInvitation(responseType:groupID:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[119] = *v2;
  v3[150] = a1;
  v3[151] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[119] = *v2;
  v3[161] = a1;
  v3[162] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.finalizeInvitationAcceptance(forRSVPedGroup:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[98] = v1;
  v2[97] = a1;
  v2[88] = v2;
  v2[89] = 0;
  v2[90] = 0;
  v2[91] = 0;
  v2[92] = 0;
  v2[78] = 0;
  v2[79] = 0;
  v2[84] = 0;
  v2[85] = 0;
  bzero(v2 + 2, 0x198uLL);
  v2[86] = 0;
  v2[87] = 0;
  v2[94] = 0;
  v2[95] = 0;
  v2[96] = 0;
  v3 = type metadata accessor for GPKGroupID();
  v2[99] = v3;
  v2[100] = *(_QWORD *)(v3 - 8);
  v2[101] = swift_task_alloc();
  v2[102] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v2[103] = swift_task_alloc();
  v4 = type metadata accessor for InternalErrorCode();
  v2[104] = v4;
  v2[105] = *(_QWORD *)(v4 - 8);
  v2[106] = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  v2[107] = v5;
  v2[108] = *(_QWORD *)(v5 - 8);
  v2[109] = swift_task_alloc();
  v6 = type metadata accessor for GPKGroup.JoinState();
  v2[110] = v6;
  v2[111] = *(_QWORD *)(v6 - 8);
  v2[112] = swift_task_alloc();
  v2[113] = swift_task_alloc();
  v2[89] = a1;
  v2[90] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[88] = *v2;
  v3[125] = a1;
  v3[126] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.finalizeInvitationAcceptance(forRSVPedGroup:)()
{
  _QWORD *v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  char v42;

  v39 = v0[113];
  v38 = v0[112];
  v37 = v0[111];
  v40 = v0[110];
  v0[88] = v0;
  dispatch thunk of GPKGroup.joinState.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v38, *MEMORY[0x24BE3E4B0], v40);
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v42 = == infix<A>(_:_:)();
  v41 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  v41(v38, v40);
  v41(v39, v40);
  if ((v42 & 1) != 0)
  {
    DaemonGroupManager.groupStore()();
    DaemonGroupManager.userStore()();
    v34 = *(_QWORD *)(v36 + 488);
    v33 = *(_QWORD *)(v36 + 496);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v36 + 464), v34);
    v35 = (*(uint64_t (**)(uint64_t))(v33 + 40))(v34);
    *(_QWORD *)(v36 + 912) = v35;
    *(_QWORD *)(v36 + 728) = v35;
    __swift_destroy_boxed_opaque_existential_1(v36 + 464);
    swift_retain();
    v32 = ServiceBuilder.accountManager()();
    *(_QWORD *)(v36 + 920) = v32;
    swift_release();
    *(_QWORD *)(v36 + 736) = v32;
    v1 = DaemonAccountManager.preferredHandle()();
    *(Swift::String *)(v36 + 928) = v1;
    if (v2)
    {
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v36 + 424);
    }
    else
    {
      *(Swift::String *)(v36 + 624) = v1;
      *(_QWORD *)(v36 + 744) = GPKUser.handles.getter();
      *(Swift::String *)(v36 + 640) = v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v31 = Sequence<>.contains(_:)();
      outlined destroy of [String]();
      if ((v31 & 1) != 0)
      {
        v24 = dispatch thunk of GPKGroup.invitationSenderHandle.getter();
        *(_QWORD *)(v36 + 944) = v24;
        *(_QWORD *)(v36 + 952) = v3;
        if (v3)
        {
          *(_QWORD *)(v36 + 672) = v24;
          *(_QWORD *)(v36 + 680) = v3;
          dispatch thunk of GPKGroup.invitationID.getter();
          GPKGroup.acceptInvite()();
          if (!v4)
          {
            v23 = *(_QWORD *)(v36 + 784);
            swift_retain();
            outlined init with copy of Client(v23 + 16, v36 + 504);
            ServiceBuilder.groupRefresher(for:)(v36 + 504, v36 + 16);
            __swift_destroy_boxed_opaque_existential_1(v36 + 504);
            swift_release();
            v5 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v36 + 960) = v5;
            *v5 = *(_QWORD *)(v36 + 704);
            v5[1] = DaemonGroupManager.finalizeInvitationAcceptance(forRSVPedGroup:);
            return GroupRefresher.refresh(_:)(*(_QWORD *)(v36 + 776));
          }
          outlined destroy of UUID?(*(_QWORD *)(v36 + 824));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1(v36 + 424);
        }
        else
        {
          v18 = *(_QWORD *)(v36 + 872);
          v17 = *(_QWORD *)(v36 + 864);
          v19 = *(_QWORD *)(v36 + 856);
          v22 = *(_QWORD *)(v36 + 848);
          v20 = *(_QWORD *)(v36 + 840);
          v21 = *(_QWORD *)(v36 + 832);
          v15 = *(_QWORD *)(v36 + 808);
          v14 = *(_QWORD *)(v36 + 800);
          v16 = *(_QWORD *)(v36 + 792);
          *(_QWORD *)(v36 + 656) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
          *(_QWORD *)(v36 + 664) = v7;
          v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Accept Invitation: Could't find a invitation sender for group with ID: ", 0x47uLL, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v8);
          swift_bridgeObjectRelease();
          dispatch thunk of GPKGroup.groupID.getter();
          lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
          v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v9);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          outlined destroy of DefaultStringInterpolation();
          String.init(stringInterpolation:)();
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
          default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v18);
          gpklog(_:type:fileID:line:subsystem:)();
          (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for InternalError();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104))(v22, *MEMORY[0x24BE3DD00], v21);
          InternalError.__allocating_init(_:internalInfo:)();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          __swift_destroy_boxed_opaque_existential_1(v36 + 424);
        }
      }
      else
      {
        v26 = *(_QWORD *)(v36 + 872);
        v25 = *(_QWORD *)(v36 + 864);
        v27 = *(_QWORD *)(v36 + 856);
        v30 = *(_QWORD *)(v36 + 848);
        v28 = *(_QWORD *)(v36 + 840);
        v29 = *(_QWORD *)(v36 + 832);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Accept Invitation: Couldn't find me-user handle", 0x2FuLL, 1);
        static os_log_type_t.error.getter();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v26);
        gpklog(_:type:fileID:line:subsystem:)();
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for InternalError();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v30, *MEMORY[0x24BE3DD08], v29);
        InternalError.__allocating_init(_:internalInfo:)();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1(v36 + 424);
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(*(_QWORD *)(v36 + 704) + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v36 + 872);
    v10 = *(_QWORD *)(v36 + 864);
    v12 = *(_QWORD *)(v36 + 856);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Accept Invitation: RSVPed group is not in pending state to finalized, returning the rsvped group itself", 0x67uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    v13 = *(_QWORD *)(v36 + 776);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 + 704) + 8))(v13);
  }
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, _QWORD, uint64_t, uint64_t);

  v4 = v0[123];
  v3 = v0[122];
  v0[88] = v0;
  v0[86] = v3;
  v0[87] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v0[94] = v3;
  swift_bridgeObjectRelease();
  swift_retain();
  swift_bridgeObjectRetain();
  v0[95] = v4;
  swift_release();
  v6 = v0[56];
  v7 = v0[57];
  __swift_project_boxed_opaque_existential_1(v0 + 53, v6);
  v8 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 + 32) + **(int **)(v7 + 32));
  v1 = (_QWORD *)swift_task_alloc();
  v5[124] = v1;
  *v1 = v5[88];
  v1[1] = DaemonGroupManager.finalizeInvitationAcceptance(forRSVPedGroup:);
  return v8(v5[122], v5[123], v6, v7);
}

{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0[126];
  v10 = v0[125];
  v12 = v0[109];
  v11 = v0[108];
  v13 = v0[107];
  v0[88] = v0;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v0[94] = v10;
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Accept Invitation: Group object updated for invitation acceptance and stored in local database - Done", 0x65uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
  gpklog(_:type:fileID:line:subsystem:)();
  v2 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[127] = v2;
  v2(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  DaemonGroupManager.invitationStore()();
  if (v1)
  {
    v5 = v9[103];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of GroupRefresher((uint64_t)(v9 + 2));
    outlined destroy of UUID?(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v9 + 53));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(v9[88] + 8))();
  }
  else
  {
    v6 = v9[71];
    v7 = v9[72];
    __swift_project_boxed_opaque_existential_1(v9 + 68, v6);
    dispatch thunk of GPKGroup.groupID.getter();
    v8 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 + 40) + **(int **)(v7 + 40));
    v3 = (_QWORD *)swift_task_alloc();
    v9[128] = v3;
    *v3 = v9[88];
    v3[1] = DaemonGroupManager.finalizeInvitationAcceptance(forRSVPedGroup:);
    return v8(v9[102], v6, v7);
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  v4 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 704) = *v1;
  *(_QWORD *)(v2 + 1032) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v4[98] + 8))(v4[100], v4[97]);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = *(void (**)(uint64_t, uint64_t))(v0 + 1016);
  v10 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 872);
  v4 = *(_QWORD *)(v0 + 856);
  v6 = *(_QWORD *)(v0 + 784);
  *(_QWORD *)(v0 + 704) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 544);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Accept Invitation: Delete the accepted invitation from local database - Done", 0x4CuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
  gpklog(_:type:fileID:line:subsystem:)();
  v5(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  *(_QWORD *)(v0 + 1040) = ServiceBuilder.peerMessagingService.getter();
  swift_release();
  outlined init with copy of Client(v6 + 16, v0 + 584);
  v8 = *(_QWORD *)(v0 + 608);
  v7 = *(_QWORD *)(v0 + 616);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 584), v8);
  (*(void (**)(uint64_t))(v7 + 16))(v8);
  *(_BYTE *)(v0 + 1065) = *(_BYTE *)(v0 + 1064) & 1;
  v1 = (_QWORD *)swift_task_alloc();
  v9[131] = v1;
  *v1 = v9[88];
  v1[1] = DaemonGroupManager.finalizeInvitationAcceptance(forRSVPedGroup:);
  return PeerMessagingService.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:)(1, v9[103], v9[125], v9[116], v9[117], v9[118], v10, (char *)(v0 + 1065));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = *v1 + 584;
  *(_QWORD *)(v4 + 704) = *v1;
  *(_QWORD *)(v4 + 1056) = v0;
  swift_task_dealloc();
  if (v0)
    swift_release();
  else
    __swift_destroy_boxed_opaque_existential_1(v3);
  swift_release();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v11 = (void (*)(uint64_t, uint64_t))v0[127];
  v9 = v0[109];
  v10 = v0[107];
  v0[88] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Accept Invitation: RSVP response(accept) sent to all members - Done", 0x43uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
  gpklog(_:type:fileID:line:subsystem:)();
  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = dispatch thunk of GPKGroup.meMember.getter();
  if (v12)
  {
    v7 = v8[125];
    v8[96] = v12;
    swift_release();
    swift_retain();
    ClientMessageBroadcaster.memberResponsedToInvite(for:isAccepted:from:)(v7, 1, v12);
    swift_release();
  }
  swift_release();
  swift_release();
  v4 = (void (*)(uint64_t, uint64_t))v8[127];
  v2 = v8[109];
  v3 = v8[107];
  v5 = v8[103];
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Accept Invitation: Invitation acceptance message broadcasted to clients - Done", 0x4EuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v2);
  gpklog(_:type:fileID:line:subsystem:)();
  v4(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of GroupRefresher((uint64_t)(v8 + 2));
  outlined destroy of UUID?(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v8 + 53));
  v6 = v8[125];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v8[88] + 8))(v6);
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 824);
  *(_QWORD *)(v0 + 704) = v0;
  outlined destroy of GroupRefresher(v0 + 16);
  outlined destroy of UUID?(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 424);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 704) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 824);
  *(_QWORD *)(v0 + 704) = v0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of GroupRefresher(v0 + 16);
  outlined destroy of UUID?(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 424);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 704) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = v0[103];
  v1 = v0[102];
  v2 = v0[100];
  v3 = v0[99];
  v0[88] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 68));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of GroupRefresher((uint64_t)(v0 + 2));
  outlined destroy of UUID?(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 53));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[88] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 824);
  *(_QWORD *)(v0 + 704) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 584);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of GroupRefresher(v0 + 16);
  outlined destroy of UUID?(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 424);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 704) + 8))();
}

uint64_t DaemonGroupManager.finalizeInvitationAcceptance(forRSVPedGroup:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[88] = *v3;
  v4[121] = v2;
  v4[122] = a1;
  v4[123] = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[3];
  v4 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 256))(a1, v3) & 1;
}

uint64_t closure #1 in DaemonGroupManager.reject(groupID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[138] = a3;
  v3[137] = a2;
  v3[136] = a1;
  v3[132] = v3;
  v3[133] = 0;
  v3[134] = 0;
  v3[135] = 0;
  v4 = type metadata accessor for GPKGroupID();
  v3[139] = v4;
  v3[140] = *(_QWORD *)(v4 - 8);
  v3[141] = swift_task_alloc();
  type metadata accessor for Transaction();
  v3[142] = swift_task_alloc();
  v3[133] = a2;
  v3[134] = a3;
  return swift_task_switch();
}

uint64_t closure #1 in DaemonGroupManager.reject(groupID:)()
{
  uint64_t v0;
  double v1;
  Swift::String v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[5];

  v9 = *(_QWORD *)(v0 + 1136);
  v15 = *(_QWORD *)(v0 + 1128);
  v11 = *(_QWORD *)(v0 + 1120);
  v13 = *(_QWORD *)(v0 + 1112);
  v12 = *(_QWORD *)(v0 + 1104);
  v14 = *(_QWORD *)(v0 + 1096);
  *(_QWORD *)(v0 + 1056) = v0;
  v7 = type metadata accessor for ExponentialRetryScheduler();
  v6 = *(_QWORD *)(v14 + 72);
  v1 = default argument 1 of ExponentialRetryScheduler.init(maxRetries:power:)();
  v8 = ExponentialRetryScheduler.__allocating_init(maxRetries:power:)(v6, v1);
  *(_QWORD *)(v0 + 1144) = v8;
  *(_QWORD *)(v0 + 1080) = v8;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("RSVP Response: reject", 0x15uLL, 1);
  swift_retain();
  v19[3] = v7;
  v19[4] = &protocol witness table for ExponentialRetryScheduler;
  v19[0] = v8;
  Transaction.init(name:retryScheduler:)(v2._countAndFlagsBits, (uint64_t)v2._object, (uint64_t)v19, v9);
  v10 = *(_QWORD *)(v14 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v10 + 16, v0 + 16);
  swift_release();
  outlined init with copy of CryptographyServiceProviding(v0 + 456, v0 + 976);
  outlined destroy of Dependencies((id *)(v0 + 16));
  swift_retain();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v15, v12, v13);
  v17 = swift_task_alloc();
  *(_QWORD *)(v0 + 1152) = v17;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = v15;
  outlined init with copy of CryptographyServiceProviding(v0 + 976, v0 + 1016);
  v18 = swift_allocObject();
  *(_QWORD *)(v0 + 1160) = v18;
  outlined init with take of CryptographyServiceProviding((const void *)(v0 + 1016), (void *)(v18 + 16));
  v3 = (_QWORD *)swift_task_alloc();
  v16[146] = v3;
  v4 = type metadata accessor for GPKGroup();
  *v3 = v16[132];
  v3[1] = closure #1 in DaemonGroupManager.reject(groupID:);
  return Transaction.perform<A>(_:shouldRetry:)(v16[136], (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in DaemonGroupManager.reject(groupID:), v17, (uint64_t)partial apply for closure #2 in closure #1 in DaemonGroupManager.reject(groupID:), v18, v4);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *v1;
  v7 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 1056) = *v1;
  *(_QWORD *)(v2 + 1176) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v5 = v7[139];
    v4 = v7[138];
    v6 = v7[137];
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> (@unowned Bool))?((uint64_t)partial apply for closure #2 in closure #1 in DaemonGroupManager.reject(groupID:));
    swift_task_dealloc();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 1136);
  *(_QWORD *)(v0 + 1056) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 976);
  outlined destroy of Transaction(v2);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 1056) + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v0[142];
  v5 = v0[141];
  v2 = v0[140];
  v3 = v0[139];
  v0[132] = v0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Error) -> (@unowned Bool))?((uint64_t)partial apply for closure #2 in closure #1 in DaemonGroupManager.reject(groupID:));
  swift_task_dealloc();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 122));
  outlined destroy of Transaction(v4);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v6 + 1056) + 8))();
}

uint64_t closure #1 in closure #1 in DaemonGroupManager.reject(groupID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  *(_QWORD *)(v3 + 64) = a2;
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 16) = v3;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  v5 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v3 + 72) = v5;
  *(_QWORD *)(v3 + 80) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 88) = swift_task_alloc();
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  *(_BYTE *)(v3 + 144) = 1;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 96) = v6;
  *v6 = *(_QWORD *)(v8 + 16);
  v6[1] = closure #1 in closure #1 in DaemonGroupManager.reject(groupID:);
  return DaemonGroupManager.rsvpInvitation(responseType:groupID:)((char *)(v3 + 144), a3);
}

uint64_t closure #1 in closure #1 in DaemonGroupManager.reject(groupID:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;

  v3 = (_QWORD *)*v2;
  v3[2] = *v2;
  v7 = v3 + 2;
  v8 = v3 + 2;
  v9 = v3 + 5;
  v3[13] = a1;
  v3[14] = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  *v9 = a1;
  v4 = (_QWORD *)swift_task_alloc();
  v7[13] = v4;
  *v4 = *v8;
  v4[1] = closure #1 in closure #1 in DaemonGroupManager.reject(groupID:);
  return DaemonGroupManager.finalizeInvitationDecline(forRSVPedGroup:)(a1);
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[2] = *v2;
  v3[16] = a1;
  v3[17] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in DaemonGroupManager.reject(groupID:)()
{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = v0[16];
  v6 = v0[11];
  v2 = v0[10];
  v3 = v0[9];
  v5 = (_QWORD *)v0[7];
  v0[2] = v0;
  v0[6] = v4;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Invitation successfully declined", 0x24uLL, 0);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  *v5 = v4;
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

uint64_t DaemonGroupManager.finalizeInvitationDecline(forRSVPedGroup:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[33] = v1;
  v2[32] = a1;
  v2[25] = v2;
  v2[26] = 0;
  v2[27] = 0;
  v2[28] = 0;
  v2[29] = 0;
  v2[17] = 0;
  v2[18] = 0;
  v2[23] = 0;
  v2[24] = 0;
  v2[31] = 0;
  v3 = type metadata accessor for GPKGroupID();
  v2[34] = v3;
  v2[35] = *(_QWORD *)(v3 - 8);
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v2[38] = swift_task_alloc();
  v4 = type metadata accessor for InternalErrorCode();
  v2[39] = v4;
  v2[40] = *(_QWORD *)(v4 - 8);
  v2[41] = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  v2[42] = v5;
  v2[43] = *(_QWORD *)(v5 - 8);
  v2[44] = swift_task_alloc();
  v6 = type metadata accessor for GPKGroup.JoinState();
  v2[45] = v6;
  v2[46] = *(_QWORD *)(v6 - 8);
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  v2[26] = a1;
  v2[27] = v1;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.finalizeInvitationDecline(forRSVPedGroup:)()
{
  _QWORD *v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  char v44;

  v41 = v0[48];
  v40 = v0[47];
  v39 = v0[46];
  v42 = v0[45];
  v0[25] = v0;
  dispatch thunk of GPKGroup.joinState.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v39 + 104))(v40, *MEMORY[0x24BE3E4B0], v42);
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v44 = == infix<A>(_:_:)();
  v43 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  v43(v40, v42);
  v43(v41, v42);
  if ((v44 & 1) != 0)
  {
    DaemonGroupManager.userStore()();
    v36 = *(_QWORD *)(v38 + 40);
    v35 = *(_QWORD *)(v38 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v38 + 16), v36);
    v37 = (*(uint64_t (**)(uint64_t))(v35 + 40))(v36);
    *(_QWORD *)(v38 + 392) = v37;
    *(_QWORD *)(v38 + 224) = v37;
    __swift_destroy_boxed_opaque_existential_1(v38 + 16);
    swift_retain();
    v34 = ServiceBuilder.accountManager()();
    *(_QWORD *)(v38 + 400) = v34;
    swift_release();
    *(_QWORD *)(v38 + 232) = v34;
    v1 = DaemonAccountManager.preferredHandle()();
    *(Swift::String *)(v38 + 408) = v1;
    if (v2)
    {
      swift_release();
      swift_release();
    }
    else
    {
      *(Swift::String *)(v38 + 136) = v1;
      *(_QWORD *)(v38 + 240) = GPKUser.handles.getter();
      *(Swift::String *)(v38 + 152) = v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v33 = Sequence<>.contains(_:)();
      outlined destroy of [String]();
      if ((v33 & 1) != 0)
      {
        v26 = dispatch thunk of GPKGroup.invitationSenderHandle.getter();
        *(_QWORD *)(v38 + 424) = v26;
        *(_QWORD *)(v38 + 432) = v3;
        if (v3)
        {
          *(_QWORD *)(v38 + 184) = v26;
          *(_QWORD *)(v38 + 192) = v3;
          dispatch thunk of GPKGroup.invitationID.getter();
          GPKGroup.declineInvite()();
          if (!v4)
          {
            DaemonGroupManager.invitationStore()();
            v23 = *(_QWORD *)(v38 + 80);
            v24 = *(_QWORD *)(v38 + 88);
            __swift_project_boxed_opaque_existential_1((_QWORD *)(v38 + 56), v23);
            dispatch thunk of GPKGroup.groupID.getter();
            v25 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 + 40) + **(int **)(v24 + 40));
            v5 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v38 + 440) = v5;
            *v5 = *(_QWORD *)(v38 + 200);
            v5[1] = DaemonGroupManager.finalizeInvitationDecline(forRSVPedGroup:);
            return v25(*(_QWORD *)(v38 + 296), v23, v24);
          }
          outlined destroy of UUID?(*(_QWORD *)(v38 + 304));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        else
        {
          v18 = *(_QWORD *)(v38 + 352);
          v17 = *(_QWORD *)(v38 + 344);
          v19 = *(_QWORD *)(v38 + 336);
          v22 = *(_QWORD *)(v38 + 328);
          v20 = *(_QWORD *)(v38 + 320);
          v21 = *(_QWORD *)(v38 + 312);
          v15 = *(_QWORD *)(v38 + 288);
          v14 = *(_QWORD *)(v38 + 280);
          v16 = *(_QWORD *)(v38 + 272);
          *(_QWORD *)(v38 + 168) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
          *(_QWORD *)(v38 + 176) = v7;
          v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Decline Invitation: Could't find a invitation sender for group with ID: ", 0x48uLL, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v8);
          swift_bridgeObjectRelease();
          dispatch thunk of GPKGroup.groupID.getter();
          lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
          v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v9);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          outlined destroy of DefaultStringInterpolation();
          String.init(stringInterpolation:)();
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
          default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
          default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v18);
          gpklog(_:type:fileID:line:subsystem:)();
          (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for InternalError();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104))(v22, *MEMORY[0x24BE3DD00], v21);
          InternalError.__allocating_init(_:internalInfo:)();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
      }
      else
      {
        v28 = *(_QWORD *)(v38 + 352);
        v27 = *(_QWORD *)(v38 + 344);
        v29 = *(_QWORD *)(v38 + 336);
        v32 = *(_QWORD *)(v38 + 328);
        v30 = *(_QWORD *)(v38 + 320);
        v31 = *(_QWORD *)(v38 + 312);
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Decline Invitation: Couldn't find me-user handle", 0x30uLL, 1);
        static os_log_type_t.error.getter();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v28);
        gpklog(_:type:fileID:line:subsystem:)();
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for InternalError();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104))(v32, *MEMORY[0x24BE3DD08], v31);
        InternalError.__allocating_init(_:internalInfo:)();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(*(_QWORD *)(v38 + 200) + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v38 + 352);
    v10 = *(_QWORD *)(v38 + 344);
    v12 = *(_QWORD *)(v38 + 336);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Decline Invitation: RSVPed group is not in pending state to finalized, returning the rsvped group itself", 0x68uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    v13 = *(_QWORD *)(v38 + 256);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v38 + 200) + 8))(v13);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 200) = *v1;
  v2 += 200;
  v4 = (_QWORD *)(v2 - 184);
  *(_QWORD *)(v2 + 248) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4[33] + 8))(v4[35], v4[32]);
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v0 + 200) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Decline Invitation: Group object updated for invitation decline and stored in local database - Done", 0x63uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  v1 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v0 + 456) = v1;
  v1(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  *(_QWORD *)(v0 + 464) = ServiceBuilder.peerMessagingService.getter();
  swift_release();
  outlined init with copy of Client(v7 + 16, v0 + 96);
  v9 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 128);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), v9);
  (*(void (**)(uint64_t))(v8 + 16))(v9);
  *(_BYTE *)(v0 + 489) = *(_BYTE *)(v0 + 488) & 1;
  v2 = (_QWORD *)swift_task_alloc();
  v10[59] = v2;
  *v2 = v10[25];
  v2[1] = DaemonGroupManager.finalizeInvitationDecline(forRSVPedGroup:);
  return PeerMessagingService.sendInvitationResponse(accept:invitationID:group:from:invitationSenderHandle:priority:)(0, v10[38], v10[32], v10[51], v10[52], v10[53], v11, (char *)(v0 + 489));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 200) = *v1;
  v2 += 200;
  v4 = v2 - 104;
  *(_QWORD *)(v2 + 280) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    __swift_destroy_boxed_opaque_existential_1(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v11 = (void (*)(uint64_t, uint64_t))v0[57];
  v9 = v0[44];
  v10 = v0[42];
  v0[25] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Decline Invitation: RSVP response(reject) sent to all members - Done", 0x44uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
  gpklog(_:type:fileID:line:subsystem:)();
  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = dispatch thunk of GPKGroup.meMember.getter();
  if (v12)
  {
    v7 = v8[32];
    v8[31] = v12;
    swift_retain();
    ClientMessageBroadcaster.memberResponsedToInvite(for:isAccepted:from:)(v7, 0, v12);
    swift_release();
    swift_release();
  }
  v4 = (void (*)(uint64_t, uint64_t))v8[57];
  v2 = v8[44];
  v3 = v8[42];
  v5 = v8[38];
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Decline Invitation: Invitation decline message broadcasted to clients - Done", 0x4CuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v2);
  gpklog(_:type:fileID:line:subsystem:)();
  v4(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  outlined destroy of UUID?(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v6 = v8[32];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v8[25] + 8))(v6);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = v0[38];
  v1 = v0[37];
  v2 = v0[35];
  v3 = v0[34];
  v0[25] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  outlined destroy of UUID?(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[25] + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 304);
  *(_QWORD *)(v0 + 200) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_release();
  outlined destroy of UUID?(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 200) + 8))();
}

uint64_t closure #2 in closure #1 in DaemonGroupManager.reject(groupID:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[3];
  v4 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 256))(a1, v3) & 1;
}

Swift::Void __swiftcall DaemonGroupManager.startClientBroadcast()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = v0;
  DaemonGroupManager.userStore()();
  v2 = v5;
  v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v3 = (*(uint64_t (**)(uint64_t))(v1 + 40))(v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  outlined destroy of GPKUser?();
  if (v3)
  {
    swift_retain();
    ServiceBuilder.peerMessagingService.getter();
    swift_release();
    PeerMessagingService.fetchPendingInvitationsSilently()();
    swift_release();
  }
}

uint64_t key path getter for GPKMember.handle : GPKMember@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  swift_retain();
  *a1 = dispatch thunk of GPKMember.handle.getter();
  a1[1] = v1;
  return swift_release();
}

uint64_t closure #1 in DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD v7[2];
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;

  v8 = a1;
  v7[1] = a2;
  v19 = 0;
  v18 = 0;
  v15 = type metadata accessor for GPKMemberRole();
  v12 = *(_QWORD *)(v15 - 8);
  v9 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v7 - v9;
  v10 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v14 = (char *)v7 - v10;
  v19 = *v4;
  v11 = *v5;
  v18 = v11;
  dispatch thunk of GPKMember.role.getter();
  dispatch thunk of GPKMember.role.getter();
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  v17 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
  v16 = *(void (**)(char *, uint64_t))(v12 + 8);
  v16(v13, v15);
  v16(v14, v15);
  return v17 & 1;
}

uint64_t closure #2 in DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)()
{
  return dispatch thunk of GPKMember.isMe.getter() & 1;
}

uint64_t outlined release of Difference<GPKMember>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t closure #3 in DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t result;
  _QWORD v27[12];
  int v28;
  Builtin::Word v29;
  uint64_t v30;
  int v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *object;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[2];
  _QWORD v67[2];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;

  v49 = a5;
  v59 = a1;
  v58 = a2;
  v56 = a3;
  v57 = a4;
  v75 = 0;
  v74 = 0;
  v73 = 0;
  v72 = 0;
  v71 = 0;
  v70 = 0;
  v54 = 0;
  v50 = type metadata accessor for LogSubsystem();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v50);
  v53 = (uint64_t)v27 - v52;
  v55 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v54);
  v64 = (uint64_t)v27 - v55;
  v65 = type metadata accessor for GPKUserID();
  v63 = *(_QWORD *)(v65 - 8);
  v60 = (*(_QWORD *)(v63 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v59);
  v61 = (char *)v27 - v60;
  v75 = (char *)v27 - v60;
  v62 = *v5;
  v74 = v62;
  v73 = v6;
  v72 = v7;
  v71 = v8;
  dispatch thunk of GPKMember.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v64, 1, v65) == 1)
  {
    outlined destroy of GPKUserID?(v64);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v61, v64, v65);
    v48 = GPKGroup.memberWithUserID(_:)();
    if (v48)
    {
      v47 = v48;
      v46 = v48;
      v70 = v48;
      v9 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v27[9] = &v68;
      v68 = v9;
      v69 = v10;
      v29 = 37;
      v28 = 1;
      v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("locally updating the handle for user ", 0x25uLL, 1);
      v27[0] = v11._object;
      DefaultStringInterpolation.appendLiteral(_:)(v11);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v34 = 2;
      v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(". ", 2uLL, v28 & 1);
      v27[1] = v12._object;
      DefaultStringInterpolation.appendLiteral(_:)(v12);
      swift_bridgeObjectRelease();
      v13 = dispatch thunk of GPKMember.handle.getter();
      v27[2] = v67;
      v67[0] = v13;
      v67[1] = v14;
      v27[6] = MEMORY[0x24BEE0D00];
      v27[4] = MEMORY[0x24BEE0D70];
      v27[5] = MEMORY[0x24BEE0D68];
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" -> ", 4uLL, v28 & 1);
      v27[3] = v15._object;
      DefaultStringInterpolation.appendLiteral(_:)(v15);
      swift_bridgeObjectRelease();
      v16 = dispatch thunk of GPKMember.handle.getter();
      v27[7] = v66;
      v66[0] = v16;
      v66[1] = v17;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      v43 = 0;
      v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v28 & 1);
      v27[8] = v18._object;
      DefaultStringInterpolation.appendLiteral(_:)(v18);
      swift_bridgeObjectRelease();
      v27[11] = v68;
      v27[10] = v69;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      v30 = String.init(stringInterpolation:)();
      v33 = v19;
      v32 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", v29, v28 & 1);
      v31 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v53);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v53, v50);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v42 = type metadata accessor for GPKMember();
      v38 = _allocateUninitializedArray<A>(_:)();
      v35 = _allocateUninitializedArray<A>(_:)();
      v36 = v20;
      swift_retain();
      *v36 = v62;
      swift_retain();
      v21 = v35;
      v36[1] = v46;
      _finalizeUninitializedArray<A>(_:)();
      v37 = v21;
      dispatch thunk of GPKGroup.addMembers(_:remove:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = dispatch thunk of GPKMember.handle.getter();
      object = v22._object;
      GPKMember.setHandle(_:)(v22);
      swift_bridgeObjectRelease();
      v40 = _allocateUninitializedArray<A>(_:)();
      v41 = v23;
      swift_retain();
      v24 = v40;
      *v41 = v46;
      _finalizeUninitializedArray<A>(_:)();
      v45 = v24;
      v44 = _allocateUninitializedArray<A>(_:)();
      dispatch thunk of GPKGroup.addMembers(_:remove:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = v49;
      *v57 = 1;
      *v25 = 0;
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v61, v65);
    }
    (*(void (**)(char *, uint64_t))(v63 + 8))(v61, v65);
  }
  result = swift_retain();
  *v49 = v62;
  return result;
}

uint64_t partial apply for closure #3 in DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #3 in DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE **)(v2 + 32), a2);
}

uint64_t closure #4 in DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  _QWORD v20[8];
  int v21;
  uint64_t v22;
  int v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;

  v36 = a3;
  v45 = a1;
  v44 = a2;
  v61 = 0;
  v60 = 0;
  v59 = 0;
  v42 = 0;
  v38 = type metadata accessor for LogSubsystem();
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v38);
  v41 = (uint64_t)v20 - v40;
  v43 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v42);
  v53 = (uint64_t)v20 - v43;
  v54 = type metadata accessor for GPKUserID();
  v52 = *(_QWORD *)(v54 - 8);
  v47 = *(_QWORD *)(v52 + 64);
  v46 = (v47 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v45);
  v48 = (char *)v20 - v46;
  v49 = (v47 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v50 = (char *)v20 - v49;
  v61 = (char *)v20 - v49;
  v51 = *v4;
  v60 = v51;
  v59 = v5;
  dispatch thunk of GPKMember.userID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v53, 1, v54) == 1)
  {
    outlined destroy of GPKUserID?(v53);
    v35 = v37;
  }
  else
  {
    v29 = 32;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v50, v53, v54);
    v62 = *(_QWORD *)(v44 + 8);
    outlined retain of [GPKMember]();
    v58 = v62;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v48, v50, v54);
    v30 = v20;
    MEMORY[0x24BDAC7A8](v20);
    v31 = &v20[-4];
    v20[-2] = v6;
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
    lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
    v7 = v37;
    result = Sequence.contains(where:)();
    v33 = v7;
    v34 = result;
    if (v7)
    {
      __break(1u);
      return result;
    }
    v28 = v34;
    v27 = *(void (**)(char *, uint64_t))(v52 + 8);
    v27(v48, v54);
    outlined destroy of [GPKMember]();
    if ((v28 & 1) != 0)
    {
      v9 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v20[5] = &v56;
      v56 = v9;
      v57 = v10;
      v21 = 1;
      v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("not removing member whose handle we just updated ", 0x31uLL, 1);
      v20[1] = v11._object;
      DefaultStringInterpolation.appendLiteral(_:)(v11);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, v21 & 1);
      v20[2] = v12._object;
      DefaultStringInterpolation.appendLiteral(_:)(v12);
      swift_bridgeObjectRelease();
      v13 = dispatch thunk of GPKMember.handle.getter();
      v20[3] = v55;
      v55[0] = v13;
      v55[1] = v14;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String();
      v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v21 & 1);
      v20[4] = v15._object;
      DefaultStringInterpolation.appendLiteral(_:)(v15);
      swift_bridgeObjectRelease();
      v20[7] = v56;
      v20[6] = v57;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      v22 = String.init(stringInterpolation:)();
      v25 = v16;
      v24 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, v21 & 1);
      v23 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v41);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = v50;
      v18 = v54;
      v19 = v27;
      *v36 = 0;
      v19(v17, v18);
      result = v33;
      v26 = v33;
      return result;
    }
    v27(v50, v54);
    v35 = v33;
  }
  v20[0] = v35;
  swift_retain();
  result = v20[0];
  *v36 = v51;
  v26 = result;
  return result;
}

uint64_t outlined retain of Difference<GPKMember>(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for closure #4 in DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #4 in DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t closure #1 in closure #4 in DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void (*v9)(_BYTE *, _QWORD);
  _BYTE v11[12];
  int v12;
  void (*v13)(_BYTE *, char *, uint64_t);
  void (*v14)(_BYTE *, uint64_t);
  int v15;
  int v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char *v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;

  v22 = a1;
  v27 = a2;
  v38 = 0;
  v37 = 0;
  v34 = type metadata accessor for GPKUserID();
  v32 = *(_QWORD *)(v34 - 8);
  v17 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34);
  v18 = &v11[-v17];
  v19 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v11[-v17]);
  v20 = &v11[-v19];
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID?, GPKUserID?));
  v21 = (*(_QWORD *)(*(_QWORD *)(v28 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v35 = &v11[-v21];
  v23 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v22);
  v24 = &v11[-v23];
  v25 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v31 = &v11[-v25];
  v26 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v29 = &v11[-v26];
  v38 = *v7;
  v37 = v8;
  dispatch thunk of GPKMember.userID.getter();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v32 + 16))(v31, v27, v34);
  v9 = *(void (**)(_BYTE *, _QWORD))(v32 + 56);
  v33 = 1;
  v9(v31, 0);
  v30 = *(int *)(v28 + 48);
  outlined init with copy of GPKUserID?(v29, v35);
  outlined init with copy of GPKUserID?(v31, &v35[v30]);
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v36(v35, v33, v34) == 1)
  {
    if (v36(&v35[v30], 1, v34) != 1)
      goto LABEL_8;
    outlined destroy of GPKUserID?((uint64_t)v35);
    v16 = 1;
  }
  else
  {
    outlined init with copy of GPKUserID?(v35, v24);
    if (v36(&v35[v30], 1, v34) == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v24, v34);
LABEL_8:
      outlined destroy of (GPKUserID?, GPKUserID?)((uint64_t)v35);
      v16 = 0;
      goto LABEL_7;
    }
    v13 = *(void (**)(_BYTE *, char *, uint64_t))(v32 + 32);
    v13(v20, v24, v34);
    v13(v18, &v35[v30], v34);
    lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v14 = *(void (**)(_BYTE *, uint64_t))(v32 + 8);
    v14(v18, v34);
    v14(v20, v34);
    outlined destroy of GPKUserID?((uint64_t)v35);
    v16 = v15;
  }
LABEL_7:
  v12 = v16;
  outlined destroy of GPKUserID?((uint64_t)v31);
  outlined destroy of GPKUserID?((uint64_t)v29);
  return v12 & 1;
}

uint64_t DaemonGroupManager.sendInvitation(to:invitations:from:groupBlobEnvelope:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v6[26] = v5;
  v6[25] = a5;
  v6[24] = a4;
  v6[23] = a3;
  v6[22] = a2;
  v6[21] = a1;
  v6[13] = v6;
  v6[14] = 0;
  v6[15] = 0;
  v6[7] = 0;
  v6[8] = 0;
  v6[16] = 0;
  v6[17] = 0;
  v6[19] = 0;
  v7 = type metadata accessor for LogSubsystem();
  v6[27] = v7;
  v6[28] = *(_QWORD *)(v7 - 8);
  v6[29] = swift_task_alloc();
  v6[14] = a1;
  v6[15] = a2;
  v6[7] = a3;
  v6[8] = a4;
  v6[16] = a5;
  v6[17] = v5;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.sendInvitation(to:invitations:from:groupBlobEnvelope:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  void (*v4)(uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v9 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 104) = v0;
  *(_QWORD *)(v0 + 72) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 80) = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitations: ", 0xDuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 144) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : Data]);
  lazy protocol witness table accessor for type [GPKUserID : Data] and conformance [A : B]();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.debug.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
  gpklog(_:type:fileID:line:subsystem:)();
  v4 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v0 + 240) = v4;
  v4(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  *(_QWORD *)(v0 + 248) = ServiceBuilder.peerMessagingService.getter();
  swift_release();
  outlined init with copy of Client(v11 + 16, v0 + 16);
  v13 = *(_QWORD *)(v0 + 40);
  v12 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v13);
  (*(void (**)(uint64_t))(v12 + 16))(v13);
  *(_BYTE *)(v0 + 273) = *(_BYTE *)(v0 + 272) & 1;
  v5 = (_QWORD *)swift_task_alloc();
  v14[32] = v5;
  *v5 = v14[13];
  v5[1] = DaemonGroupManager.sendInvitation(to:invitations:from:groupBlobEnvelope:);
  return PeerMessagingService.sendInvitation(to:invitationDataForMembers:from:groupBlobEnvelope:priority:)(v14[21], v14[22], v14[23], v14[24], v14[25], (_BYTE *)(v0 + 273));
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void *v9;

  v9 = (void *)v0[33];
  v8 = (void (*)(uint64_t, uint64_t))v0[30];
  v6 = v0[29];
  v7 = v0[27];
  v0[13] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_release();
  v1 = v9;
  v0[19] = v9;
  v0[11] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[12] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Sending invitation failed to members: ", 0x26uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v0[20] = v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
  gpklog(_:type:fileID:line:subsystem:)();
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("By-passing the invitation error - temporarily", 0x2DuLL, 1);
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
  gpklog(_:type:fileID:line:subsystem:)();
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[13] + 8))();
}

_QWORD *DaemonGroupManager.sendInvitation(to:invitations:from:groupBlobEnvelope:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 104) = *v1;
  v4 = (_QWORD *)(v2 + 104);
  v5 = v2 + 16;
  *(_QWORD *)(v2 + 264) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  __swift_destroy_boxed_opaque_existential_1(v5);
  swift_release();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined release of [GPKMember]()
{
  swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in DaemonGroupManager.accept(groupID:serviceName:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in DaemonGroupManager.accept(groupID:serviceName:);
  return closure #1 in DaemonGroupManager.accept(groupID:serviceName:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in DaemonGroupManager.accept(groupID:serviceName:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t partial apply for closure #1 in DaemonGroupManager.reject(groupID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in DaemonGroupManager.reject(groupID:);
  return closure #1 in DaemonGroupManager.reject(groupID:)(a1, v5, v6);
}

uint64_t partial apply for closure #1 in DaemonGroupManager.reject(groupID:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of GPKUser?()
{
  swift_release();
}

uint64_t DaemonGroupManager.performMemberRequests(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[42] = v1;
  v2[41] = a1;
  v2[19] = v2;
  v2[20] = 0;
  v2[21] = 0;
  v2[22] = 0;
  v2[23] = 0;
  v2[24] = 0;
  v2[5] = 0;
  v2[6] = 0;
  v2[11] = 0;
  v2[12] = 0;
  v2[34] = 0;
  v2[36] = 0;
  v2[38] = 0;
  v3 = type metadata accessor for GPKGroupID();
  v2[43] = v3;
  v2[44] = *(_QWORD *)(v3 - 8);
  v2[45] = swift_task_alloc();
  v4 = type metadata accessor for GPKMember.InviteStatus();
  v2[46] = v4;
  v2[47] = *(_QWORD *)(v4 - 8);
  v2[48] = swift_task_alloc();
  v5 = type metadata accessor for GPKMemberRole();
  v2[49] = v5;
  v2[50] = *(_QWORD *)(v5 - 8);
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v6 = type metadata accessor for LogSubsystem();
  v2[53] = v6;
  v2[54] = *(_QWORD *)(v6 - 8);
  v2[55] = swift_task_alloc();
  v2[20] = a1;
  v2[21] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[19] = *v2;
  v3[59] = a1;
  v3[60] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[19] = *v2;
  v3 += 19;
  v5 = v3 - 17;
  v3[43] = a1;
  v3[44] = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5[42] + 8))(v5[43], v5[41]);
  return swift_task_switch();
}

uint64_t DaemonGroupManager.performMemberRequests(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  void (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;

  v52 = v0[55];
  v51 = v0[54];
  v53 = v0[53];
  v0[19] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Performing membership adjustment", 0x20uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v52);
  gpklog(_:type:fileID:line:subsystem:)();
  v54 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  v0[56] = v54;
  v54(v52, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v55 = dispatch thunk of GPKGroup.meMember.getter();
  v0[57] = v55;
  if (!v55)
    goto LABEL_26;
  v46 = v50[52];
  v45 = v50[51];
  v44 = v50[50];
  v47 = v50[49];
  v50[22] = v55;
  dispatch thunk of GPKMember.role.getter();
  v43 = *(void (**)(void))(v44 + 104);
  ((void (*)(uint64_t, _QWORD, uint64_t))v43)(v45, *MEMORY[0x24BE3DAB8], v47);
  lazy protocol witness table accessor for type GPKMemberRole and conformance GPKMemberRole();
  v49 = == infix<A>(_:_:)();
  v48 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
  v48(v45, v47);
  v48(v46, v47);
  if ((v49 & 1) == 0)
  {
    swift_release();
LABEL_26:
    v13 = v50[55];
    v14 = v50[53];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("cannot perform member requests, I'm not an admin", 0x30uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
    gpklog(_:type:fileID:line:subsystem:)();
    v54(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    v17 = v50[41];
    goto LABEL_27;
  }
  type metadata accessor for GPKMember();
  v50[23] = Array.init()();
  v50[24] = Array.init()();
  v50[25] = dispatch thunk of GPKGroup.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v42 = v50[26];
    if (!v42)
      break;
    v50[38] = v42;
    if ((dispatch thunk of GPKMember.isMe.getter() & 1) == 0)
    {
      v39 = v50[48];
      v38 = v50[47];
      v40 = v50[46];
      dispatch thunk of GPKMember.inviteStatus.getter();
      v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 88))(v39, v40);
      if (v41 == *MEMORY[0x24BE3E590] || v41 == *MEMORY[0x24BE3E570])
      {
        swift_retain();
        v50[40] = v42;
        Array.append(_:)();
      }
      else if (v41 == *MEMORY[0x24BE3E578])
      {
        v35 = v50[52];
        v34 = v50[51];
        v36 = v50[49];
        dispatch thunk of GPKMember.role.getter();
        ((void (*)(uint64_t, _QWORD, uint64_t))v43)(v34, *MEMORY[0x24BE3DAB8], v36);
        v37 = == infix<A>(_:_:)();
        v48(v34, v36);
        v48(v35, v36);
        if ((v37 & 1) != 0)
        {
          swift_retain();
          v50[39] = v42;
          Array.append(_:)();
        }
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v50[47] + 8))(v50[48], v50[46]);
      }
    }
    swift_release();
  }
  outlined destroy of IndexingIterator<[GPKMember]>();
  v32 = v50[23];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50[27] = v32;
  v33 = Collection.isEmpty.getter();
  outlined destroy of [GPKMember]();
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0)
  {
    v29 = v50[24];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50[37] = v29;
    v30 = Collection.isEmpty.getter();
    outlined destroy of [GPKMember]();
    swift_bridgeObjectRelease();
    v31 = v30;
  }
  else
  {
    v31 = 0;
  }
  if ((v31 & 1) != 0)
  {
    v15 = v50[55];
    v16 = v50[53];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No membership updates to make", 0x1DuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v15);
    gpklog(_:type:fileID:line:subsystem:)();
    v54(v15, v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    outlined destroy of [GPKMember]();
    outlined destroy of [GPKMember]();
    swift_release();
    v17 = v50[41];
LABEL_27:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v50[19] + 8))(v17);
  }
  v26 = v50[55];
  v27 = v50[53];
  v50[7] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v50[8] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Members to remove: ", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v24 = v50[23];
  swift_bridgeObjectRetain();
  v50[28] = v24;
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [GPKMember]();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v26);
  gpklog(_:type:fileID:line:subsystem:)();
  v54(v26, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50[9] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v50[10] = v4;
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Members to demote: ", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v25 = v50[24];
  swift_bridgeObjectRetain();
  v50[29] = v25;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [GPKMember]();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v26);
  gpklog(_:type:fileID:line:subsystem:)();
  v54(v26, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  dispatch thunk of GPKGroup.addMembers(_:remove:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = v50[24];
  swift_bridgeObjectRetain();
  v50[30] = v28;
  Collection<>.makeIterator()();
  while (1)
  {
    IndexingIterator.next()();
    v23 = v50[31];
    if (!v23)
      break;
    v50[36] = v23;
    v43();
    dispatch thunk of GPKMember.role.setter();
    swift_release();
  }
  v20 = v50[55];
  v21 = v50[53];
  outlined destroy of IndexingIterator<[GPKMember]>();
  v50[13] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v50[14] = v7;
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Attempting to update group as per member requests. removing: ", 0x3DuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  v18 = v50[23];
  swift_bridgeObjectRetain();
  v50[32] = v18;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [GPKMember]();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" demoting: ", 0xBuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  v19 = v50[24];
  swift_bridgeObjectRetain();
  v50[33] = v19;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [GPKMember]();
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
  gpklog(_:type:fileID:line:subsystem:)();
  v54(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = default argument 1 of DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:)();
  v11 = (_QWORD *)swift_task_alloc();
  v50[58] = v11;
  *v11 = v50[19];
  v11[1] = DaemonGroupManager.performMemberRequests(for:);
  return DaemonGroupManager.updateGroup(_:deliverRemovalsSilently:)(v50[41], v22 & 1);
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 152) = v0;
  outlined destroy of [GPKMember]();
  outlined destroy of [GPKMember]();
  swift_release();
  v2 = *(_QWORD *)(v0 + 472);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 152) + 8))(v2);
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  _QWORD *v6;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  _QWORD *v12;

  v8 = (void *)v0[60];
  v11 = (void (*)(uint64_t, uint64_t))v0[56];
  v9 = v0[55];
  v10 = v0[53];
  v0[19] = v0;
  v1 = v8;
  v0[34] = v8;
  v0[15] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[16] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("got error while attempting to update group ", 0x2BuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v0[17] = Error.localizedDescription.getter();
  v0[18] = v4;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(". refreshing the group without performing updates", 0x31uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
  gpklog(_:type:fileID:line:subsystem:)();
  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  dispatch thunk of GPKGroup.groupID.getter();
  v6 = (_QWORD *)swift_task_alloc();
  v12[61] = v6;
  *v6 = v12[19];
  v6[1] = DaemonGroupManager.performMemberRequests(for:);
  return DaemonGroupManager.refreshGroupWithServer(groupID:)(v12[45]);
}

{
  _QWORD *v0;
  id v2;
  uint64_t v3;

  v2 = (id)v0[60];
  v0[19] = v0;

  outlined destroy of [GPKMember]();
  outlined destroy of [GPKMember]();
  swift_release();
  v3 = v0[62];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[19] + 8))(v3);
}

{
  _QWORD *v0;
  uint64_t v1;
  id v3;
  uint64_t v4;

  v3 = (id)v0[60];
  v1 = v0[44];
  v0[19] = v0;
  (*(void (**)(void))(v1 + 8))();

  outlined destroy of [GPKMember]();
  outlined destroy of [GPKMember]();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v4 + 152) + 8))();
}

uint64_t DaemonGroupManager.processInvitation(_:from:invitationID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v5 + 728) = v4;
  *(_QWORD *)(v5 + 720) = a4;
  *(_QWORD *)(v5 + 712) = a3;
  *(_QWORD *)(v5 + 704) = a2;
  *(_QWORD *)(v5 + 696) = a1;
  *(_QWORD *)(v5 + 624) = v5;
  *(_QWORD *)(v5 + 632) = 0;
  *(_QWORD *)(v5 + 448) = 0;
  *(_QWORD *)(v5 + 456) = 0;
  *(_QWORD *)(v5 + 640) = 0;
  *(_QWORD *)(v5 + 648) = 0;
  *(_QWORD *)(v5 + 672) = 0;
  memset((void *)(v5 + 16), 0, 0xC0uLL);
  *(_BYTE *)(v5 + 1096) = 0;
  *(_QWORD *)(v5 + 680) = 0;
  *(_QWORD *)(v5 + 688) = 0;
  v6 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v5 + 736) = v6;
  *(_QWORD *)(v5 + 744) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 752) = swift_task_alloc();
  v7 = type metadata accessor for GPKGroup.JoinState();
  *(_QWORD *)(v5 + 760) = v7;
  *(_QWORD *)(v5 + 768) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 776) = swift_task_alloc();
  *(_QWORD *)(v5 + 784) = swift_task_alloc();
  v8 = type metadata accessor for UUID();
  *(_QWORD *)(v5 + 792) = v8;
  *(_QWORD *)(v5 + 800) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 808) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  *(_QWORD *)(v5 + 816) = swift_task_alloc();
  v9 = type metadata accessor for GPKUserID();
  *(_QWORD *)(v5 + 824) = v9;
  *(_QWORD *)(v5 + 832) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 840) = swift_task_alloc();
  v10 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v5 + 848) = v10;
  *(_QWORD *)(v5 + 856) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 864) = swift_task_alloc();
  *(_QWORD *)(v5 + 872) = swift_task_alloc();
  *(_QWORD *)(v5 + 880) = swift_task_alloc();
  *(_QWORD *)(v5 + 888) = swift_task_alloc();
  v11 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v5 + 896) = v11;
  *(_QWORD *)(v5 + 904) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 912) = swift_task_alloc();
  *(_QWORD *)(v5 + 632) = a1;
  *(_QWORD *)(v5 + 448) = a2;
  *(_QWORD *)(v5 + 456) = a3;
  *(_QWORD *)(v5 + 640) = a4;
  *(_QWORD *)(v5 + 648) = v4;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.processInvitation(_:from:invitationID:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  *(_QWORD *)(v0 + 624) = v0;
  DaemonGroupManager.userStore()();
  v31 = v33[29];
  v30 = v33[30];
  __swift_project_boxed_opaque_existential_1(v33 + 26, v31);
  v32 = (*(uint64_t (**)(uint64_t))(v30 + 40))(v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v33 + 26));
  v33[82] = v32;
  if (v33[82])
  {
    outlined destroy of GPKUser?();
    v28 = v33[114];
    v27 = v33[113];
    v29 = v33[112];
    v26 = v33[89];
    v25 = v33[88];
    v33[62] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v33[63] = v1;
    v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Processing new invitation from ", 0x1FuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v2);
    swift_bridgeObjectRelease();
    v33[64] = v25;
    v33[65] = v26;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" with invitationID ", 0x13uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v28);
    gpklog(_:type:fileID:line:subsystem:)();
    v5 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v33[115] = v5;
    v5(v28, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    DaemonGroupManager.invitationStore()();
    v16 = v33[111];
    v13 = v33[107];
    v15 = v33[106];
    v14 = v33[87];
    v17 = v33[34];
    v18 = v33[35];
    __swift_project_boxed_opaque_existential_1(v33 + 31, v17);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    v33[116] = v10;
    v10(v16, v14, v15);
    v19 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 + 16) + **(int **)(v18 + 16));
    v11 = (_QWORD *)swift_task_alloc();
    v33[117] = v11;
    *v11 = v33[78];
    v11[1] = DaemonGroupManager.processInvitation(_:from:invitationID:);
    return v19(v33[111], v17, v18);
  }
  else
  {
    outlined destroy of GPKUser?();
    v23 = v33[114];
    v22 = v33[113];
    v24 = v33[112];
    v21 = v33[89];
    v20 = v33[88];
    v33[58] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v33[59] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Me user not found so not processing the invitation: ", 0x34uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" from: ", 7uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    v33[60] = v20;
    v33[61] = v21;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v23);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v33[78] + 8))(1);
  }
}

{
  _QWORD *v0;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;

  v0[78] = v0;
  v10 = v0[119];
  v0[83] = v0[118];
  if (v0[83])
  {
    outlined destroy of GPKGroup?();
    v8 = (void (*)(uint64_t, uint64_t))v9[115];
    v6 = v9[114];
    v7 = v9[112];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation already processed and stored in local database, so skipping this one.", 0x50uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
    gpklog(_:type:fileID:line:subsystem:)();
    v8(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v9 + 31));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v9[78] + 8))(1);
  }
  else
  {
    outlined destroy of GPKGroup?();
    v4 = v9[91];
    swift_retain();
    outlined init with copy of Client(v4 + 16, (uint64_t)(v9 + 36));
    v5 = ServiceBuilder.userLookupService(for:)((uint64_t)(v9 + 36));
    v9[120] = v5;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v9 + 36));
    swift_release();
    if (v10)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v9 + 31));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v3 = swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v9[78] + 8))(v3);
    }
    else
    {
      v9[84] = v5;
      v2 = (_QWORD *)swift_task_alloc();
      v9[121] = v2;
      *v2 = v9[78];
      v2[1] = DaemonGroupManager.processInvitation(_:from:invitationID:);
      return GroupKitUserLookupManager.userID(for:)(v9[102], v9[88], v9[89]);
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 624) = *v1;
  *(_QWORD *)(v2 + 976) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  _QWORD *v22;
  uint64_t v23;

  v0[78] = v0;
  v23 = v0[122];
  if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(v0[104] + 48))(v0[102], 1, v0[103]) == 1)
  {
    v11 = (void (*)(uint64_t, uint64_t))v22[115];
    v9 = v22[114];
    v10 = v22[112];
    v8 = v22[89];
    v7 = v22[88];
    outlined destroy of GPKUserID?(v22[102]);
    v22[66] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v22[67] = v3;
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation received from a non-groupkit user: ", 0x2EuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    v22[68] = v7;
    v22[69] = v8;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
    gpklog(_:type:fileID:line:subsystem:)();
    v11(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v22 + 31));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v22[78] + 8))(1);
  }
  else
  {
    v21 = (void (*)(uint64_t, uint64_t))v22[115];
    v19 = v22[114];
    v20 = v22[112];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v22[104] + 32))(v22[105], v22[102], v22[103]);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("New Invitation: Sender verification - Done", 0x2AuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v19);
    gpklog(_:type:fileID:line:subsystem:)();
    v21(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    DaemonGroupManager.groupStore()();
    if (v23)
    {
      (*(void (**)(_QWORD, _QWORD))(v22[104] + 8))(v22[105], v22[103]);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v22 + 31));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v6 = swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v22[78] + 8))(v6);
    }
    else
    {
      v14 = (void (*)(uint64_t, uint64_t, uint64_t))v22[116];
      v15 = v22[110];
      v13 = v22[106];
      v12 = v22[87];
      v16 = v22[44];
      v17 = v22[45];
      __swift_project_boxed_opaque_existential_1(v22 + 41, v16);
      v14(v15, v12, v13);
      v18 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 + 16) + **(int **)(v17 + 16));
      v1 = (_QWORD *)swift_task_alloc();
      v22[123] = v1;
      *v1 = v22[78];
      v1[1] = DaemonGroupManager.processInvitation(_:from:invitationID:);
      return v18(v22[110], v16, v17);
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  char v51;
  _QWORD *v52;

  v1 = *(_QWORD *)(v0 + 992);
  *(_QWORD *)(v0 + 624) = v0;
  if (v1)
  {
    v37 = (void (*)(uint64_t, uint64_t))v52[126];
    v45 = (void (*)(uint64_t, uint64_t))v52[115];
    v43 = v52[114];
    v44 = v52[112];
    v35 = v52[109];
    v36 = v52[106];
    v39 = v52[101];
    v38 = v52[100];
    v40 = v52[99];
    v48 = v52[98];
    v47 = v52[97];
    v46 = v52[96];
    v49 = v52[95];
    v52[86] = v52[124];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v52 + 41));
    v52[74] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v52[75] = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("An invitation with the same identifier(", 0x27uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    dispatch thunk of GPKGroup.groupID.getter();
    GPKGroupID.uuid.getter();
    v37(v35, v36);
    v41 = UUID.uuidString.getter();
    v42 = v4;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
    v52[76] = v41;
    v52[77] = v42;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(") already exist in the group store", 0x22uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v43);
    gpklog(_:type:fileID:line:subsystem:)();
    v45(v43, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    dispatch thunk of GPKGroup.joinState.getter();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104))(v47, *MEMORY[0x24BE3E4B8], v49);
    lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
    v51 = == infix<A>(_:_:)();
    v50 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v50(v47, v49);
    v50(v48, v49);
    if ((v51 & 1) == 0)
    {
      v24 = (void (*)(uint64_t, uint64_t))v52[115];
      v22 = v52[114];
      v23 = v52[112];
      v26 = v52[105];
      v25 = v52[104];
      v27 = v52[103];
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation already rsvp-ed by user. This is out-dated invite.", 0x3DuLL, 1);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v22);
      gpklog(_:type:fileID:line:subsystem:)();
      v24(v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v52 + 31));
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v52[78] + 8))(2);
    }
    v7 = v52[125];
    v33 = (void (*)(uint64_t, uint64_t))v52[115];
    v31 = v52[114];
    v32 = v52[112];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("New invitation received from a group from which the user is removed", 0x43uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v31);
    gpklog(_:type:fileID:line:subsystem:)();
    v33(v31, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    DaemonGroupManager.groupStore()();
    if (!v7)
    {
      v28 = v52[54];
      v29 = v52[55];
      __swift_project_boxed_opaque_existential_1(v52 + 51, v28);
      dispatch thunk of GPKGroup.groupID.getter();
      v30 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 + 56) + **(int **)(v29 + 56));
      v8 = (_QWORD *)swift_task_alloc();
      v52[127] = v8;
      *v8 = v52[78];
      v8[1] = DaemonGroupManager.processInvitation(_:from:invitationID:);
      return v30(v52[108], v28, v29);
    }
    v17 = v52[105];
    v16 = v52[104];
    v18 = v52[103];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v52 + 31));
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v52 + 41));
    v6 = v52[125];
    v34 = v52[91];
    swift_retain();
    outlined init with copy of Client(v34 + 16, (uint64_t)(v52 + 46));
    ServiceBuilder.groupService(for:)((uint64_t)(v52 + 46), v52 + 2);
    if (!v6)
    {
      v19 = v52[87];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v52 + 46));
      swift_release();
      v10 = (uint64_t *)(v19 + *(int *)(type metadata accessor for InvitationIDSMessage() + 28));
      v21 = *v10;
      v52[129] = *v10;
      v20 = v10[1];
      v52[130] = v20;
      outlined copy of Data._Representation(v21, v20);
      v11 = (_QWORD *)swift_task_alloc();
      v52[131] = v11;
      *v11 = v52[78];
      v11[1] = DaemonGroupManager.processInvitation(_:from:invitationID:);
      return GroupService.validateInvitationBlob(_:userID:)(v21, v20, v52[105]);
    }
    v14 = v52[105];
    v13 = v52[104];
    v15 = v52[103];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v52 + 46));
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v52 + 31));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v12 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v52[78] + 8))(v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 624) = *v1;
  *(_QWORD *)(v2 + 1024) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4 + 992))(*(_QWORD *)(v4 + 848), *(_QWORD *)(v4 + 832));
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;

  v15 = (void (*)(uint64_t, uint64_t))v0[115];
  v13 = v0[114];
  v14 = v0[112];
  v0[78] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 51));
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Old group deleted in preparation to process the new invitation", 0x3EuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
  gpklog(_:type:fileID:line:subsystem:)();
  v15(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v1 = v0[128];
  v16 = v0[91];
  swift_retain();
  outlined init with copy of Client(v16 + 16, (uint64_t)(v0 + 46));
  ServiceBuilder.groupService(for:)((uint64_t)(v0 + 46), v0 + 2);
  if (v1)
  {
    v7 = v12[105];
    v6 = v12[104];
    v8 = v12[103];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 46));
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 31));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v5 = swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v12[78] + 8))(v5);
  }
  else
  {
    v9 = v12[87];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 46));
    swift_release();
    v2 = (uint64_t *)(v9 + *(int *)(type metadata accessor for InvitationIDSMessage() + 28));
    v11 = *v2;
    v12[129] = *v2;
    v10 = v2[1];
    v12[130] = v10;
    outlined copy of Data._Representation(v11, v10);
    v3 = (_QWORD *)swift_task_alloc();
    v12[131] = v3;
    *v3 = v12[78];
    v3[1] = DaemonGroupManager.processInvitation(_:from:invitationID:);
    return GroupService.validateInvitationBlob(_:userID:)(v11, v10, v12[105]);
  }
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  char v29;
  uint64_t v30;
  char v31;

  v1 = *(_BYTE *)(v0 + 1097);
  v31 = v1;
  *(_QWORD *)(v0 + 624) = v0;
  *(_BYTE *)(v0 + 1096) = v1 & 1;
  *(_QWORD *)(v0 + 560) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 568) = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("New Invitation: Invitation signature validation result: ", 0x38uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  if ((v31 & 1) != 0)
  {
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Valid", 5uLL, 1);
    object = v6._object;
    countAndFlagsBits = v6._countAndFlagsBits;
  }
  else
  {
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid", 7uLL, 1);
    object = v7._object;
    countAndFlagsBits = v7._countAndFlagsBits;
  }
  v29 = *(_BYTE *)(v30 + 1097);
  v28 = *(void (**)(uint64_t, uint64_t))(v30 + 920);
  v26 = *(_QWORD *)(v30 + 912);
  v27 = *(_QWORD *)(v30 + 896);
  *(_QWORD *)(v30 + 576) = countAndFlagsBits;
  *(_QWORD *)(v30 + 584) = object;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v26);
  gpklog(_:type:fileID:line:subsystem:)();
  v28(v26, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
  {
    v9 = *(_QWORD *)(v30 + 1056);
    v19 = DaemonGroupManager.constructGroup(from:invitationID:fromID:)(*(_QWORD *)(v30 + 696), *(_QWORD *)(v30 + 720), *(_QWORD *)(v30 + 704), *(_QWORD *)(v30 + 712));
    *(_QWORD *)(v30 + 1064) = v19;
    if (!v9)
    {
      swift_retain();
      *(_QWORD *)(v30 + 680) = v19;
      v16 = *(_QWORD *)(v30 + 272);
      v17 = *(_QWORD *)(v30 + 280);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v30 + 248), v16);
      v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 8) + **(int **)(v17 + 8));
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v30 + 1072) = v10;
      *v10 = *(_QWORD *)(v30 + 624);
      v10[1] = DaemonGroupManager.processInvitation(_:from:invitationID:);
      return v18(v19, v16, v17);
    }
    v15 = *(_QWORD *)(v30 + 840);
    v13 = *(_QWORD *)(v30 + 832);
    v14 = *(_QWORD *)(v30 + 824);
    outlined destroy of GroupService(v30 + 16);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v15, v14);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v30 + 248);
  }
  else
  {
    v25 = *(_QWORD *)(v30 + 840);
    v23 = *(_QWORD *)(v30 + 832);
    v24 = *(_QWORD *)(v30 + 824);
    v22 = *(_QWORD *)(v30 + 752);
    v20 = *(_QWORD *)(v30 + 744);
    v21 = *(_QWORD *)(v30 + 736);
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104))(v22, *MEMORY[0x24BE3DE18], v21);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    outlined destroy of GroupService(v30 + 16);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v24);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v30 + 248);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v12 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v30 + 624) + 8))(v12);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[135];
  v5 = (void (*)(uint64_t, uint64_t))v0[115];
  v3 = v0[114];
  v4 = v0[112];
  v8 = v0[105];
  v6 = v0[104];
  v7 = v0[103];
  v0[78] = v0;
  swift_retain();
  v0[85] = v2;
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("New Invitation: Invitation stored to local database - Done", 0x3AuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
  gpklog(_:type:fileID:line:subsystem:)();
  v5(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  ClientMessageBroadcaster.receivedGroupInvite(group:)(v2);
  swift_release();
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("New Invitation: Invitation broadcasted to clients - Done", 0x38uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
  gpklog(_:type:fileID:line:subsystem:)();
  v5(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of GroupService((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 31));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0[78] + 8))(0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  _QWORD *v11;
  void *v12;

  v12 = (void *)v0[119];
  v1 = v0[111];
  v2 = v0[107];
  v3 = v0[106];
  v0[78] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);

  v0[83] = 0;
  if (v0[83])
  {
    outlined destroy of GPKGroup?();
    v10 = (void (*)(uint64_t, uint64_t))v11[115];
    v8 = v11[114];
    v9 = v11[112];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation already processed and stored in local database, so skipping this one.", 0x50uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v8);
    gpklog(_:type:fileID:line:subsystem:)();
    v10(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v11 + 31));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v11[78] + 8))(1);
  }
  else
  {
    outlined destroy of GPKGroup?();
    v6 = v11[91];
    swift_retain();
    outlined init with copy of Client(v6 + 16, (uint64_t)(v11 + 36));
    v7 = ServiceBuilder.userLookupService(for:)((uint64_t)(v11 + 36));
    v11[120] = v7;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v11 + 36));
    swift_release();
    v11[84] = v7;
    v5 = (_QWORD *)swift_task_alloc();
    v11[121] = v5;
    *v5 = v11[78];
    v5[1] = DaemonGroupManager.processInvitation(_:from:invitationID:);
    return GroupKitUserLookupManager.userID(for:)(v11[102], v11[88], v11[89]);
  }
}

{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = (void *)v0[122];
  v23 = v0[104];
  v25 = v0[103];
  v24 = v0[102];
  v0[78] = v0;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v24, 1, 1, v25);
  if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(v0[104] + 48))(v0[102], 1, v0[103]) == 1)
  {
    v11 = (void (*)(uint64_t, uint64_t))v22[115];
    v9 = v22[114];
    v10 = v22[112];
    v8 = v22[89];
    v7 = v22[88];
    outlined destroy of GPKUserID?(v22[102]);
    v22[66] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v22[67] = v4;
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation received from a non-groupkit user: ", 0x2EuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    v22[68] = v7;
    v22[69] = v8;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
    gpklog(_:type:fileID:line:subsystem:)();
    v11(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v22 + 31));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v22[78] + 8))(1);
  }
  else
  {
    v21 = (void (*)(uint64_t, uint64_t))v22[115];
    v19 = v22[114];
    v20 = v22[112];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v22[104] + 32))(v22[105], v22[102], v22[103]);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("New Invitation: Sender verification - Done", 0x2AuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v19);
    gpklog(_:type:fileID:line:subsystem:)();
    v21(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    DaemonGroupManager.groupStore()();
    v14 = (void (*)(uint64_t, uint64_t, uint64_t))v22[116];
    v15 = v22[110];
    v13 = v22[106];
    v12 = v22[87];
    v16 = v22[44];
    v17 = v22[45];
    __swift_project_boxed_opaque_existential_1(v22 + 41, v16);
    v14(v15, v12, v13);
    v18 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 + 16) + **(int **)(v17 + 16));
    v2 = (_QWORD *)swift_task_alloc();
    v22[123] = v2;
    *v2 = v22[78];
    v2[1] = DaemonGroupManager.processInvitation(_:from:invitationID:);
    return v18(v22[110], v16, v17);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[110];
  v2 = v0[107];
  v3 = v0[106];
  v7 = v0[105];
  v6 = v0[104];
  v8 = v0[103];
  v0[78] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 41));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 31));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v4 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[78] + 8))(v4);
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (void (*)(uint64_t, uint64_t))v0[126];
  v2 = v0[108];
  v3 = v0[106];
  v7 = v0[105];
  v6 = v0[104];
  v8 = v0[103];
  v0[78] = v0;
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 51));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 31));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v4 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[78] + 8))(v4);
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[130];
  v2 = v0[129];
  v7 = v0[105];
  v5 = v0[104];
  v6 = v0[103];
  v0[78] = v0;
  outlined consume of Data._Representation(v2, v1);
  outlined destroy of GroupService((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 31));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v3 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[78] + 8))(v3);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v0[105];
  v3 = v0[104];
  v4 = v0[103];
  v0[78] = v0;
  swift_release();
  swift_release();
  outlined destroy of GroupService((uint64_t)(v0 + 2));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 31));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v1 = swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[78] + 8))(v1);
}

uint64_t DaemonGroupManager.processInvitation(_:from:invitationID:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v5 = (_QWORD *)(*v2 + 16);
  v3[78] = *v2;
  v3[118] = a1;
  v3[119] = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5[105] + 8))(v5[109], v5[104]);
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v8;

  v3 = (_QWORD *)*v2;
  v8 = (_QWORD *)(*v2 + 16);
  v3[78] = *v2;
  v3[124] = a1;
  v3[125] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = v8[108];
    v5 = v8[104];
    v6 = *(void (**)(uint64_t, uint64_t))(v8[105] + 8);
    v8[124] = v6;
    v6(v4, v5);
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[78] = *v2;
  v3[135] = a1;
  v3[136] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.processInvitation(_:from:invitationID:)(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *v2;
  v5 = *v2 + 16;
  *(_QWORD *)(v3 + 624) = *v2;
  *(_BYTE *)(v3 + 1097) = a1;
  *(_QWORD *)(v3 + 1056) = v1;
  swift_task_dealloc();
  if (!v1)
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 1016), *(_QWORD *)(v5 + 1024));
  return swift_task_switch();
}

uint64_t DaemonGroupManager.constructGroup(from:invitationID:fromID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  int *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v88 = a1;
  v87 = a2;
  v84 = a3;
  v85 = a4;
  v108 = 0;
  v107 = 0;
  v105 = 0;
  v106 = 0;
  v104 = 0;
  v100 = 0;
  v99 = 0;
  v97 = 0;
  v98 = 0;
  v96 = 0;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v65 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v66 = (char *)&v25 - v65;
  v78 = 0;
  v67 = type metadata accessor for GPKGroup.JoinState();
  v68 = *(_QWORD *)(v67 - 8);
  v69 = (*(_QWORD *)(v68 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v78);
  v70 = (char *)&v25 - v69;
  v71 = type metadata accessor for GPKGroupID();
  v72 = *(_QWORD *)(v71 - 8);
  v73 = (*(_QWORD *)(v72 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v78);
  v74 = (char *)&v25 - v73;
  v75 = type metadata accessor for GKCrypto_GroupBlob();
  v76 = (*(_QWORD *)(*(_QWORD *)(v75 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v78);
  v77 = (uint64_t)&v25 - v76;
  v79 = type metadata accessor for GroupBlobEnvelope();
  v80 = (*(_QWORD *)(*(_QWORD *)(v79 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v78);
  v81 = (uint64_t)&v25 - v80;
  v82 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v83 = (uint64_t)&v25 - v82;
  v8 = type metadata accessor for InternalErrorCode();
  v9 = v86;
  v89 = v8;
  v90 = *(_QWORD *)(v8 - 8);
  v91 = (*(_QWORD *)(v90 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v88);
  v92 = (char *)&v25 - v91;
  v108 = v10;
  v107 = v11;
  v105 = v12;
  v106 = v13;
  v104 = v4;
  DaemonGroupManager.userStore()();
  v93 = v9;
  v94 = v9;
  if (v9)
  {
    v50 = v94;
  }
  else
  {
    v61 = v102;
    v60 = v103;
    __swift_project_boxed_opaque_existential_1(&v101, v102);
    v14 = v93;
    v15 = (*(uint64_t (**)(uint64_t))(v60 + 40))(v61);
    v62 = v14;
    v63 = v15;
    v64 = v14;
    if (v14)
    {
      v27 = v64;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v101);
      v50 = v27;
    }
    else
    {
      v51 = v63;
      v100 = v63;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v101);
      v55 = 0;
      v54 = (int *)type metadata accessor for InvitationIDSMessage();
      v52 = *(_QWORD *)(v88 + v54[5]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v53 = DaemonGroupManager.constructMembers(from:meUser:adminHandle:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v99 = v53;
      v16 = type metadata accessor for GPKMember();
      v59 = MEMORY[0x242634AC0](v53, v16);
      v57 = *(_QWORD *)(v88 + v54[5]);
      swift_bridgeObjectRetain();
      v56 = type metadata accessor for GPKUserID();
      v17 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
      v58 = MEMORY[0x2426347F0](v57, v56, MEMORY[0x24BEE0D00], v17);
      swift_bridgeObjectRelease();
      if (v59 == v58)
      {
        v18 = v77;
        outlined init with copy of GroupBlobEnvelope(v88 + v54[8], v83);
        outlined init with copy of GKCrypto_GroupBlob(v83, v18);
        outlined destroy of GroupBlobEnvelope(v83);
        v42 = lazy protocol witness table accessor for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob();
        default argument 0 of Message.serializedData(partial:)();
        v19 = v62;
        v20 = Message.serializedData(partial:)();
        v43 = v19;
        v44 = v20;
        v45 = v21;
        v46 = v19;
        if (!v19)
        {
          v40 = v45;
          v39 = v44;
          outlined destroy of GKCrypto_GroupBlob(v77);
          v97 = v39;
          v98 = v40;
          v30 = 0;
          type metadata accessor for GPKGroup();
          swift_bridgeObjectRetain();
          v22 = (uint64_t *)(v88 + v54[6]);
          v28 = *v22;
          v29 = v22[1];
          swift_bridgeObjectRetain();
          v41 = GPKGroup.__allocating_init(members:groupDomain:)();
          v96 = v41;
          (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v74, v88, v71);
          GPKGroup.setGroupID(_:)();
          (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v71);
          (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v70, *MEMORY[0x24BE3E4B0], v67);
          GPKGroup.setJoinState(_:)();
          (*(void (**)(char *, uint64_t))(v68 + 8))(v70, v67);
          v32 = type metadata accessor for UUID();
          v31 = *(_QWORD *)(v32 - 8);
          (*(void (**)(char *, uint64_t))(v31 + 16))(v66, v87);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v66, 0, 1, v32);
          dispatch thunk of GPKGroup.invitationID.setter();
          v23 = (uint64_t *)(v88 + v54[7]);
          v33 = *v23;
          v34 = v23[1];
          outlined copy of Data._Representation(v33, v34);
          dispatch thunk of GPKGroup.invitationBlob.setter();
          swift_bridgeObjectRetain();
          dispatch thunk of GPKGroup.setInvitationSenderHandle(_:)();
          swift_bridgeObjectRelease();
          outlined copy of Data._Representation(v39, v40);
          dispatch thunk of GPKGroup.groupBlob.setter();
          outlined init with copy of GroupBlobEnvelope(v88 + v54[8], v81);
          v35 = *(_DWORD *)(v81 + *(int *)(v79 + 20));
          outlined destroy of GroupBlobEnvelope(v81);
          v38 = &v95;
          v95 = v35;
          v36 = lazy protocol witness table accessor for type Int64 and conformance Int64();
          v37 = lazy protocol witness table accessor for type Int64 and conformance Int64();
          lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          SignedInteger<>.init<A>(_:)();
          dispatch thunk of GPKGroup.invitationGroupVersion.setter();
          outlined consume of Data._Representation(v39, v40);
          swift_bridgeObjectRelease();
          swift_release();
          return v41;
        }
        v26 = v46;
        outlined destroy of GKCrypto_GroupBlob(v77);
        swift_bridgeObjectRelease();
        swift_release();
        v50 = v26;
      }
      else
      {
        v47 = 0;
        type metadata accessor for InternalError();
        (*(void (**)(char *, _QWORD, uint64_t))(v90 + 104))(v92, *MEMORY[0x24BE3DE40], v89);
        v49 = InternalError.__allocating_init(_:internalInfo:)();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        v50 = v49;
      }
    }
  }
  return v48;
}

uint64_t DaemonGroupManager.constructMembers(from:meUser:adminHandle:)()
{
  uint64_t v1;

  swift_retain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : String]);
  type metadata accessor for GPKMember();
  lazy protocol witness table accessor for type [GPKUserID : String] and conformance [A : B]();
  v1 = Sequence.compactMap<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t closure #1 in DaemonGroupManager.constructMembers(from:meUser:adminHandle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v44 = a1;
  v54 = a2;
  v55 = a3;
  v52 = a5;
  v53 = a6;
  v70 = 0;
  v68 = 0;
  v69 = 0;
  v67 = 0;
  v65 = 0;
  v66 = 0;
  v64 = 0;
  v58 = 0;
  v57 = 0;
  v38 = 0;
  v34 = type metadata accessor for GPKMember.InviteStatus();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = (*(_QWORD *)(v35 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v37 = (char *)&v18 - v36;
  v39 = type metadata accessor for GPKMemberRole();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v38);
  v42 = (char *)&v18 - v41;
  v47 = type metadata accessor for GPKUserID();
  v45 = *(_QWORD *)(v47 - 8);
  v43 = (*(_QWORD *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)&v18 - v43;
  v70 = v7;
  v68 = v8;
  v69 = v9;
  v67 = a4;
  v65 = v10;
  v66 = v11;
  GPKUser.userID.getter();
  v48 = GPKUserID.hexString.getter();
  v50 = v12;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  GPKUserID.hexString.getter();
  v49 = v13;
  v51 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v64 = v51 & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v63[0] = v52;
  v63[1] = v53;
  v59 = v54;
  v60 = v55;
  outlined init with copy of String?(v63, &v61);
  if (v60)
  {
    outlined init with copy of String?(&v59, v56);
    if (v62)
    {
      v27 = v56[0];
      v30 = v56[1];
      swift_bridgeObjectRetain();
      v31 = &v59;
      v28 = v61;
      v29 = v62;
      swift_bridgeObjectRetain();
      v32 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of String?();
      v33 = v32;
      goto LABEL_7;
    }
    outlined destroy of String();
    goto LABEL_9;
  }
  if (v62)
  {
LABEL_9:
    outlined destroy of (String?, String?)();
    v33 = 0;
    goto LABEL_7;
  }
  outlined destroy of String?();
  v33 = 1;
LABEL_7:
  v26 = v33;
  swift_bridgeObjectRelease();
  v58 = v26 & 1;
  v23 = 0;
  type metadata accessor for GPKUser();
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v46, v44, v47);
  v22 = MEMORY[0x24BEE0D00];
  v20 = _allocateUninitializedArray<A>(_:)();
  v21 = v14;
  swift_bridgeObjectRetain();
  v15 = v21;
  v16 = v55;
  *v21 = v54;
  v15[1] = v16;
  _finalizeUninitializedArray<A>(_:)();
  v24 = GPKUser.__allocating_init(userID:handles:isMe:)();
  v57 = v24;
  v25 = type metadata accessor for GPKMember();
  swift_bridgeObjectRetain();
  if ((v26 & 1) != 0)
    (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v42, *MEMORY[0x24BE3DAB8], v39);
  else
    (*(void (**)(char *, _QWORD, uint64_t))(v40 + 104))(v42, *MEMORY[0x24BE3DAC0], v39);
  if ((v26 & 1) != 0)
    (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v37, *MEMORY[0x24BE3E588], v34);
  else
    (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v37, *MEMORY[0x24BE3E580], v34);
  swift_retain();
  v19 = GPKMember.__allocating_init(handle:role:inviteStatus:user:)();
  swift_release();
  return v19;
}

uint64_t partial apply for closure #1 in DaemonGroupManager.constructMembers(from:meUser:adminHandle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return closure #1 in DaemonGroupManager.constructMembers(from:meUser:adminHandle:)(a1, a2, a3, v3[2], v3[3], v3[4]);
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed GPKUserID, @guaranteed String) -> (@owned GPKMember?)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: GPKUserID, value: String));
  result = a1();
  *a2 = result;
  return result;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed GPKUserID, @guaranteed String) -> (@owned GPKMember?)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@in_guaranteed GPKUserID, @guaranteed String) -> (@owned GPKMember?)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t DaemonGroupManager.handleEncryptDataMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[142] = v1;
  v2[141] = a1;
  v2[137] = v2;
  v2[138] = 0;
  v2[139] = 0;
  v2[140] = 0;
  v3 = type metadata accessor for GPKMemberRole();
  v2[143] = v3;
  v2[144] = *(_QWORD *)(v3 - 8);
  v2[145] = swift_task_alloc();
  v4 = type metadata accessor for GPKUserID();
  v2[146] = v4;
  v2[147] = *(_QWORD *)(v4 - 8);
  v2[148] = swift_task_alloc();
  v5 = type metadata accessor for GPKGroupID();
  v2[149] = v5;
  v2[150] = *(_QWORD *)(v5 - 8);
  v2[151] = swift_task_alloc();
  v2[138] = a1;
  v2[139] = v1;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.handleEncryptDataMessage(message:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v0 + 1096) = v0;
  DaemonGroupManager.userStore()();
  v9 = *(_QWORD *)(v11 + 1000);
  v8 = *(_QWORD *)(v11 + 1008);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v11 + 976), v9);
  v10 = (*(uint64_t (**)(uint64_t))(v8 + 40))(v9);
  *(_QWORD *)(v11 + 1216) = v10;
  v3 = *(_QWORD *)(v11 + 1136);
  *(_QWORD *)(v11 + 1120) = v10;
  __swift_destroy_boxed_opaque_existential_1(v11 + 976);
  v4 = *(_QWORD *)(v3 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v4 + 16, v11 + 16);
  swift_release();
  outlined init with copy of CryptographyServiceProviding(v11 + 456, v11 + 1016);
  outlined destroy of Dependencies((id *)(v11 + 16));
  v5 = *(_QWORD *)(v11 + 1040);
  v6 = *(_QWORD *)(v11 + 1048);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v11 + 1016), v5);
  EncryptDataMessage.groupID.getter();
  GPKUser.userID.getter();
  v7 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 56) + **(int **)(v6 + 56));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v11 + 1224) = v1;
  *v1 = *(_QWORD *)(v11 + 1096);
  v1[1] = DaemonGroupManager.handleEncryptDataMessage(message:);
  return v7(v11 + 1056, *(_QWORD *)(v11 + 1208), *(_QWORD *)(v11 + 1184), v5, v6);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *v1;
  v7 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 1096) = *v1;
  *(_QWORD *)(v2 + 1232) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v5 = v7[149];
    v4 = v7[148];
    v6 = v7[147];
    (*(void (**)(_QWORD, _QWORD))(v7[145] + 8))(v7[146], v7[144]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0[154];
  v20 = v0[145];
  v0[137] = v0;
  v15 = v0[130];
  v16 = v0[131];
  __swift_project_boxed_opaque_existential_1(v0 + 127, v15);
  v24 = EncryptDataMessage.message.getter();
  v17 = v2;
  v18 = EncryptDataMessage.associatedData.getter();
  v19 = v3;
  EncryptDataMessage.role.getter();
  v21 = EncryptDataMessage.entitlementID.getter();
  v22 = v4;
  v23 = EncryptDataMessage.keyDiversifier.getter();
  v25 = v5;
  v26 = (*(uint64_t (**)(_QWORD *, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v16 + 224))(v0 + 132, v24, v17, v18, v19, v20, v21, v22, v23, v5, v15, v16);
  v27 = v6;
  if (v1)
  {
    v9 = v14[145];
    v8 = v14[144];
    v10 = v14[143];
    outlined consume of Data._Representation(v23, v25);
    outlined consume of Data._Representation(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    outlined consume of Data._Representation(v18, v19);
    outlined consume of Data._Representation(v24, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v14 + 132));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v14 + 127));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(v14[137] + 8))();
  }
  else
  {
    v13 = v14[145];
    v11 = v14[144];
    v12 = v14[143];
    outlined consume of Data._Representation(v23, v25);
    outlined consume of Data._Representation(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
    outlined consume of Data._Representation(v18, v19);
    outlined consume of Data._Representation(v24, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v14 + 132));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v14 + 127));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v14[137] + 8))(v26, v27);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v0[151];
  v5 = v0[150];
  v7 = v0[149];
  v1 = v0[148];
  v2 = v0[147];
  v3 = v0[146];
  v0[137] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 127));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[137] + 8))();
}

uint64_t DaemonGroupManager.handleDecryptDataMessage(message:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[142] = v1;
  v2[141] = a1;
  v2[137] = v2;
  v2[138] = 0;
  v2[139] = 0;
  v2[140] = 0;
  v3 = type metadata accessor for GPKUserID();
  v2[143] = v3;
  v2[144] = *(_QWORD *)(v3 - 8);
  v2[145] = swift_task_alloc();
  v4 = type metadata accessor for GPKGroupID();
  v2[146] = v4;
  v2[147] = *(_QWORD *)(v4 - 8);
  v2[148] = swift_task_alloc();
  v2[138] = a1;
  v2[139] = v1;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.handleDecryptDataMessage(message:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v0 + 1096) = v0;
  DaemonGroupManager.userStore()();
  v9 = *(_QWORD *)(v11 + 1000);
  v8 = *(_QWORD *)(v11 + 1008);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v11 + 976), v9);
  v10 = (*(uint64_t (**)(uint64_t))(v8 + 40))(v9);
  *(_QWORD *)(v11 + 1192) = v10;
  v3 = *(_QWORD *)(v11 + 1136);
  *(_QWORD *)(v11 + 1120) = v10;
  __swift_destroy_boxed_opaque_existential_1(v11 + 976);
  v4 = *(_QWORD *)(v3 + 56);
  swift_retain();
  outlined init with copy of Dependencies(v4 + 16, v11 + 16);
  swift_release();
  outlined init with copy of CryptographyServiceProviding(v11 + 456, v11 + 1016);
  outlined destroy of Dependencies((id *)(v11 + 16));
  v5 = *(_QWORD *)(v11 + 1040);
  v6 = *(_QWORD *)(v11 + 1048);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v11 + 1016), v5);
  DecryptDataMessage.groupID.getter();
  GPKUser.userID.getter();
  v7 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 + 56) + **(int **)(v6 + 56));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v11 + 1200) = v1;
  *v1 = *(_QWORD *)(v11 + 1096);
  v1[1] = DaemonGroupManager.handleDecryptDataMessage(message:);
  return v7(v11 + 1056, *(_QWORD *)(v11 + 1184), *(_QWORD *)(v11 + 1160), v5, v6);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *v1;
  v7 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v2 + 1096) = *v1;
  *(_QWORD *)(v2 + 1208) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v5 = v7[146];
    v4 = v7[145];
    v6 = v7[144];
    (*(void (**)(_QWORD, _QWORD))(v7[142] + 8))(v7[143], v7[141]);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0[151];
  v0[137] = v0;
  v9 = v0[131];
  __swift_project_boxed_opaque_existential_1(v0 + 127, v0[130]);
  v16 = DecryptDataMessage.cipherText.getter();
  v10 = v2;
  v11 = DecryptDataMessage.associatedData.getter();
  v12 = v3;
  v13 = DecryptDataMessage.entitlementID.getter();
  v14 = v4;
  v15 = DecryptDataMessage.keyDiversifier.getter();
  v17 = v5;
  v18 = (*(uint64_t (**)(_QWORD *, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))(v9 + 232))(v0 + 132, v16, v10, v11, v12, v13, v14);
  v19 = v6;
  outlined consume of Data._Representation(v15, v17);
  outlined consume of Data._Representation(v13, v14);
  outlined consume of Data._Representation(v11, v12);
  outlined consume of Data._Representation(v16, v10);
  __swift_destroy_boxed_opaque_existential_1(v8 + 1056);
  __swift_destroy_boxed_opaque_existential_1(v8 + 1016);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)())(*(_QWORD *)(v8 + 1096) + 8))();
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 + 1096) + 8))(v18, v19);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v0[148];
  v5 = v0[147];
  v7 = v0[146];
  v1 = v0[145];
  v2 = v0[144];
  v3 = v0[143];
  v0[137] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 127));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[137] + 8))();
}

uint64_t DaemonGroupManager.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  return v2;
}

uint64_t DaemonGroupManager.__deallocating_deinit()
{
  DaemonGroupManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t DaemonGroupManager.peerMessagingService(_:didReceiveInvitation:from:invitationID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v11;

  v6[16] = a4;
  v6[15] = a3;
  v6[8] = v6;
  v6[9] = 0;
  v6[10] = 0;
  v6[2] = 0;
  v6[3] = 0;
  v6[11] = 0;
  v6[12] = 0;
  v6[13] = 0;
  v7 = type metadata accessor for LogSubsystem();
  v6[17] = v7;
  v6[18] = *(_QWORD *)(v7 - 8);
  v6[19] = swift_task_alloc();
  v6[9] = a1;
  v6[10] = a2;
  v6[2] = a3;
  v6[3] = a4;
  v6[11] = a5;
  v6[12] = v5;
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v11 + 160) = v8;
  *v8 = *(_QWORD *)(v11 + 64);
  v8[1] = DaemonGroupManager.peerMessagingService(_:didReceiveInvitation:from:invitationID:);
  return DaemonGroupManager.processInvitation(_:from:invitationID:)(a2, a3, a4, a5);
}

_QWORD *DaemonGroupManager.peerMessagingService(_:didReceiveInvitation:from:invitationID:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v6;

  v3 = *v2;
  *(_QWORD *)(v3 + 64) = *v2;
  v6 = (_QWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 168) = v1;
  swift_task_dealloc();
  if (v1)
    return (_QWORD *)swift_task_switch();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr, _QWORD))(*v6 + 8))(v6, a1);
}

uint64_t DaemonGroupManager.peerMessagingService(_:didReceiveInvitation:from:invitationID:)()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v12 = (void *)v0[21];
  v10 = v0[19];
  v9 = v0[18];
  v11 = v0[17];
  v8 = v0[16];
  v7 = v0[15];
  v0[8] = v0;
  v1 = v12;
  v0[13] = v12;
  v0[4] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[5] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occurred when attempting to process a group invitation from ", 0x42uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v0[6] = v7;
  v0[7] = v8;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(": ", 2uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  v0[14] = v12;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[8] + 8))(1);
}

uint64_t DaemonGroupManager.peerMessagingService(_:didReceiveRSVPResponse:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 184) = v2;
  *(_QWORD *)(v3 + 176) = a2;
  *(_QWORD *)(v3 + 80) = v3;
  *(_QWORD *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_BYTE *)(v3 + 368) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  v4 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v3 + 192) = v4;
  *(_QWORD *)(v3 + 200) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 208) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)(v3 + 216) = swift_task_alloc();
  *(_QWORD *)(v3 + 224) = type metadata accessor for RSVPResponseIDSMessage();
  *(_QWORD *)(v3 + 232) = swift_task_alloc();
  v5 = type metadata accessor for GPKGroupID();
  *(_QWORD *)(v3 + 240) = v5;
  *(_QWORD *)(v3 + 248) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 256) = swift_task_alloc();
  *(_QWORD *)(v3 + 264) = swift_task_alloc();
  v6 = type metadata accessor for GPKGroup.JoinState();
  *(_QWORD *)(v3 + 272) = v6;
  *(_QWORD *)(v3 + 280) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 288) = swift_task_alloc();
  *(_QWORD *)(v3 + 296) = swift_task_alloc();
  *(_QWORD *)(v3 + 88) = a1;
  *(_QWORD *)(v3 + 96) = a2;
  *(_QWORD *)(v3 + 104) = v2;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.peerMessagingService(_:didReceiveRSVPResponse:)()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 264);
  v10 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 80) = v0;
  (*(void (**)(void))(v4 + 16))();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v5, *MEMORY[0x24BE3E4A8], v7);
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v9 = == infix<A>(_:_:)();
  *(_BYTE *)(v0 + 369) = v9 & 1;
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v5, v7);
  v8(v6, v7);
  *(_BYTE *)(v0 + 368) = v9 & 1;
  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  *(_QWORD *)(v0 + 304) = v1;
  v1(v11, v12, v13);
  v2 = (_QWORD *)swift_task_alloc();
  v14[39] = v2;
  *v2 = v14[10];
  v2[1] = DaemonGroupManager.peerMessagingService(_:didReceiveRSVPResponse:);
  return DaemonGroupManager.refreshGroupWithServer(groupID:)(v14[33]);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[41];
  v2 = v0[40];
  v9 = v0[29];
  v8 = v0[22];
  v0[10] = v0;
  v0[16] = v2;
  v0[18] = dispatch thunk of GPKGroup.members.getter();
  outlined init with copy of RSVPResponseIDSMessage(v8, v9);
  *(_QWORD *)(swift_task_alloc() + 16) = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  result = Sequence.first(where:)();
  if (!v1)
  {
    v6 = v7[29];
    swift_task_dealloc();
    outlined destroy of RSVPResponseIDSMessage(v6);
    outlined destroy of [GPKMember]();
    v4 = v7[17];
    v7[42] = v4;
    v7[19] = v4;
    v5 = (_QWORD *)swift_task_alloc();
    v7[43] = v5;
    *v5 = v7[10];
    v5[1] = DaemonGroupManager.peerMessagingService(_:didReceiveRSVPResponse:);
    return DaemonGroupManager.performMemberRequests(for:)(v7[40]);
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[44];
  v7 = v0[42];
  v0[10] = v0;
  v0[20] = v1;
  swift_retain();
  if (v7)
  {
    v5 = *(_QWORD *)(v6 + 336);
    v3 = *(_QWORD *)(v6 + 352);
    v4 = *(_BYTE *)(v6 + 369);
    *(_QWORD *)(v6 + 168) = v5;
    swift_retain();
    ClientMessageBroadcaster.memberResponsedToInvite(for:isAccepted:from:)(v3, v4 & 1, v5);
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v6 + 80) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t *v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;

  v1 = v0[33];
  v2 = v0[31];
  v3 = v0[30];
  v0[10] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v28 = (void *)v0[41];
  v31 = v0[28];
  v33 = (void *)v0[27];
  v32 = v0[22];
  v4 = v28;
  v0[14] = v28;
  v0[2] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[3] = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occurred when attempting to refresh the group after rsvp-response received. From: ", 0x58uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(v32 + *(int *)(v31 + 20));
  v29 = *v7;
  v30 = v7[1];
  swift_bridgeObjectRetain();
  v0[4] = v29;
  v0[5] = v30;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", invitation: ", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  outlined init with copy of UUID?((const void *)(v32 + *(int *)(v31 + 28)), v33);
  v34 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v35 + 48))(v33, 1) == 1)
  {
    outlined destroy of UUID?(*(_QWORD *)(v27 + 216));
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v22 = *(_QWORD *)(v27 + 216);
    v23 = UUID.uuidString.getter();
    v24 = v9;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v22, v34);
    v25 = v23;
    v26 = v24;
  }
  *(_QWORD *)(v27 + 48) = v25;
  *(_QWORD *)(v27 + 56) = v26;
  if (*(_QWORD *)(v27 + 56))
  {
    v36 = *(Swift::String *)(v27 + 48);
  }
  else
  {
    v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
    outlined destroy of String?();
  }
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 304);
  v17 = *(_QWORD *)(v27 + 256);
  v16 = *(_QWORD *)(v27 + 248);
  v18 = *(_QWORD *)(v27 + 240);
  v20 = *(_QWORD *)(v27 + 208);
  v19 = *(_QWORD *)(v27 + 200);
  v21 = *(_QWORD *)(v27 + 192);
  v14 = *(_QWORD *)(v27 + 176);
  *(Swift::String *)(v27 + 64) = v36;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", groupID: ", 0xBuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v10);
  swift_bridgeObjectRelease();
  v15(v17, v14, v18);
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", error: ", 9uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v27 + 120) = v28;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v27 + 80) + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t *v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;

  v0[10] = v0;
  swift_release();
  swift_release();
  v25 = (void *)v0[45];
  v28 = v0[28];
  v30 = (void *)v0[27];
  v29 = v0[22];
  v1 = v25;
  v0[14] = v25;
  v0[2] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[3] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occurred when attempting to refresh the group after rsvp-response received. From: ", 0x58uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v4 = (uint64_t *)(v29 + *(int *)(v28 + 20));
  v26 = *v4;
  v27 = v4[1];
  swift_bridgeObjectRetain();
  v0[4] = v26;
  v0[5] = v27;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", invitation: ", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  outlined init with copy of UUID?((const void *)(v29 + *(int *)(v28 + 28)), v30);
  v31 = type metadata accessor for UUID();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(void *, uint64_t))(v32 + 48))(v30, 1) == 1)
  {
    outlined destroy of UUID?(*(_QWORD *)(v24 + 216));
    v22 = 0;
    v23 = 0;
  }
  else
  {
    v19 = *(_QWORD *)(v24 + 216);
    v20 = UUID.uuidString.getter();
    v21 = v6;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v19, v31);
    v22 = v20;
    v23 = v21;
  }
  *(_QWORD *)(v24 + 48) = v22;
  *(_QWORD *)(v24 + 56) = v23;
  if (*(_QWORD *)(v24 + 56))
  {
    v33 = *(Swift::String *)(v24 + 48);
  }
  else
  {
    v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
    outlined destroy of String?();
  }
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 304);
  v14 = *(_QWORD *)(v24 + 256);
  v13 = *(_QWORD *)(v24 + 248);
  v15 = *(_QWORD *)(v24 + 240);
  v17 = *(_QWORD *)(v24 + 208);
  v16 = *(_QWORD *)(v24 + 200);
  v18 = *(_QWORD *)(v24 + 192);
  v11 = *(_QWORD *)(v24 + 176);
  *(Swift::String *)(v24 + 64) = v33;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", groupID: ", 0xBuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  v12(v14, v11, v15);
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", error: ", 9uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v24 + 120) = v25;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v17);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v24 + 80) + 8))();
}

uint64_t DaemonGroupManager.peerMessagingService(_:didReceiveRSVPResponse:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[10] = *v2;
  v3 += 10;
  v5 = v3 - 8;
  v3[30] = a1;
  v3[31] = v1;
  swift_task_dealloc();
  if (!v1)
    (*(void (**)(_QWORD, _QWORD))(v5[29] + 8))(v5[31], v5[28]);
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[10] = *v2;
  v3[44] = a1;
  v3[45] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in DaemonGroupManager.peerMessagingService(_:didReceiveRSVPResponse:)()
{
  char v1;

  dispatch thunk of GPKMember.handle.getter();
  type metadata accessor for RSVPResponseIDSMessage();
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t partial apply for closure #1 in DaemonGroupManager.peerMessagingService(_:didReceiveRSVPResponse:)()
{
  return closure #1 in DaemonGroupManager.peerMessagingService(_:didReceiveRSVPResponse:)() & 1;
}

uint64_t DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[34] = v2;
  v3[33] = a2;
  v3[18] = v3;
  v3[19] = 0;
  v3[20] = 0;
  v3[21] = 0;
  v3[22] = 0;
  v3[25] = 0;
  v3[26] = 0;
  v3[27] = 0;
  v3[30] = 0;
  v4 = type metadata accessor for LogSubsystem();
  v3[35] = v4;
  v3[36] = *(_QWORD *)(v4 - 8);
  v3[37] = swift_task_alloc();
  v3[38] = type metadata accessor for GKCrypto_GroupBlob();
  v3[39] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
  v3[40] = swift_task_alloc();
  v5 = type metadata accessor for GroupBlobEnvelope();
  v3[41] = v5;
  v3[42] = *(_QWORD *)(v5 - 8);
  v3[43] = swift_task_alloc();
  v6 = type metadata accessor for GPKGroup.JoinState();
  v3[44] = v6;
  v3[45] = *(_QWORD *)(v6 - 8);
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  v7 = type metadata accessor for GPKGroupID();
  v3[48] = v7;
  v3[49] = *(_QWORD *)(v7 - 8);
  v3[50] = swift_task_alloc();
  v3[51] = swift_task_alloc();
  v3[52] = swift_task_alloc();
  v3[19] = a1;
  v3[20] = a2;
  v3[21] = v2;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:)()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD, uint64_t, uint64_t);
  _QWORD *v11;

  *(_QWORD *)(v0 + 144) = v0;
  DaemonGroupManager.groupStore()();
  v7 = v11[52];
  v4 = v11[49];
  v6 = v11[48];
  v5 = v11[33];
  v8 = v11[5];
  v9 = v11[6];
  __swift_project_boxed_opaque_existential_1(v11 + 2, v8);
  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v11[53] = v1;
  v1(v7, v5, v6);
  v10 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 + 16) + **(int **)(v9 + 16));
  v2 = (_QWORD *)swift_task_alloc();
  v11[54] = v2;
  *v2 = v11[18];
  v2[1] = DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:);
  return v10(v11[52], v8, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t updated;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  char v42;
  _QWORD *v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 440);
  *(_QWORD *)(v0 + 144) = v0;
  if (!v1)
  {
    v16 = (void (*)(uint64_t, uint64_t))v43[57];
    v15 = (void (*)(uint64_t, uint64_t, uint64_t))v43[53];
    v17 = v43[50];
    v18 = v43[48];
    v22 = v43[37];
    v21 = v43[36];
    v23 = v43[35];
    v14 = v43[33];
    v43[12] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v43[13] = v10;
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("got group update for group not stored in my database ", 0x35uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    v15(v17, v14, v18);
    v19 = GPKGroupID.hexString.getter();
    v20 = v12;
    v16(v17, v18);
    v43[14] = v19;
    v43[15] = v20;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v22);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v43 + 2));
    goto LABEL_14;
  }
  v36 = v43[55];
  v39 = v43[47];
  v38 = v43[46];
  v37 = v43[45];
  v40 = v43[44];
  v43[22] = v36;
  dispatch thunk of GPKGroup.joinState.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v38, *MEMORY[0x24BE3E4A8], v40);
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v42 = == infix<A>(_:_:)();
  v41 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  v41(v38, v40);
  v41(v39, v40);
  if ((v42 & 1) == 0)
  {
    v25 = v43[37];
    v24 = v43[36];
    v26 = v43[35];
    v43[16] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v43[17] = v7;
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("got group update for a not-joined group ", 0x28uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    v43[23] = v36;
    type metadata accessor for GPKGroup();
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v25);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v43 + 2));
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v43[18] + 8))();
  }
  v34 = v43[33];
  updated = type metadata accessor for MembershipUpdateIDSMessage();
  v43[58] = updated;
  v35 = *(_QWORD *)(v34 + *(int *)(updated + 24));
  swift_bridgeObjectRetain();
  if (v35)
  {
    v3 = v43[56];
    v43[32] = v35;
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : String]);
    v32 = type metadata accessor for GPKMember();
    v4 = lazy protocol witness table accessor for type [GPKUserID : String] and conformance [A : B]();
    result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:), 0, v31, v32, MEMORY[0x24BEE4078], v4, MEMORY[0x24BEE40A8], v33);
    if (v3)
      return result;
    outlined destroy of [GPKUserID : String]();
    v29 = 0;
    v30 = result;
  }
  else
  {
    v29 = v43[56];
    v30 = 0;
  }
  v43[24] = v30;
  if (v43[24])
  {
    v44 = v43[24];
  }
  else
  {
    type metadata accessor for GPKMember();
    v44 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [GPKMember]?();
  }
  v27 = v43[34];
  v43[59] = v44;
  v43[25] = v44;
  swift_retain();
  outlined init with copy of Client(v27 + 16, (uint64_t)(v43 + 7));
  v28 = ServiceBuilder.userLookupService(for:)((uint64_t)(v43 + 7));
  v43[60] = v28;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v43 + 7));
  swift_release();
  if (v29)
  {
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v43 + 2));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v43[18] + 8))();
  }
  else
  {
    v43[26] = v28;
    v6 = (_QWORD *)swift_task_alloc();
    v43[61] = v6;
    *v6 = v43[18];
    v6[1] = DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:);
    return GroupKitUserLookupManager.resolveUsers(for:)(v44);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 144) = *v1;
  *(_QWORD *)(v2 + 496) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = v0[58];
  v21 = v0[42];
  v22 = v0[41];
  v2 = (_QWORD *)v0[40];
  v23 = v2;
  v3 = v0[33];
  v0[18] = v0;
  outlined init with copy of GroupBlobEnvelope?((_QWORD *)(v3 + *(int *)(v1 + 36)), v2);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v23, 1, v22) == 1)
  {
    v11 = *(_QWORD *)(v20 + 296);
    v10 = *(_QWORD *)(v20 + 288);
    v12 = *(_QWORD *)(v20 + 280);
    outlined destroy of GroupBlobEnvelope?(*(_QWORD *)(v20 + 320));
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group blob envelop and groupBlob does not exists", 0x30uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v11);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v20 + 424))(*(_QWORD *)(v20 + 408), *(_QWORD *)(v20 + 264), *(_QWORD *)(v20 + 384));
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v20 + 528) = v8;
    *v8 = *(_QWORD *)(v20 + 144);
    v8[1] = DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:);
    return DaemonGroupManager.refreshGroupWithServer(groupID:)(*(_QWORD *)(v20 + 408));
  }
  else
  {
    v4 = *(_QWORD *)(v20 + 496);
    v19 = *(_QWORD *)(v20 + 344);
    v5 = *(_QWORD *)(v20 + 312);
    outlined init with take of GroupBlobEnvelope(*(_QWORD *)(v20 + 320), v19);
    outlined init with copy of GKCrypto_GroupBlob(v19, v5);
    lazy protocol witness table accessor for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob();
    default argument 0 of Message.serializedData(partial:)();
    Message.serializedData(partial:)();
    if (v4)
    {
      v9 = *(_QWORD *)(v20 + 344);
      outlined destroy of GKCrypto_GroupBlob(*(_QWORD *)(v20 + 312));
      outlined destroy of GroupBlobEnvelope(v9);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v20 + 16);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(*(_QWORD *)(v20 + 144) + 8))();
    }
    else
    {
      v18 = *(_QWORD *)(v20 + 440);
      v14 = *(_QWORD *)(v20 + 344);
      v13 = *(_QWORD *)(v20 + 328);
      outlined destroy of GKCrypto_GroupBlob(*(_QWORD *)(v20 + 312));
      dispatch thunk of GPKGroup.groupBlob.setter();
      *(_DWORD *)(v20 + 584) = *(_DWORD *)(v14 + *(int *)(v13 + 20));
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      SignedInteger<>.init<A>(_:)();
      dispatch thunk of GPKGroup.invitationGroupVersion.setter();
      v15 = *(_QWORD *)(v20 + 40);
      v16 = *(_QWORD *)(v20 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v20 + 16), v15);
      v17 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 + 40) + **(int **)(v16 + 40));
      v6 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v20 + 504) = v6;
      *v6 = *(_QWORD *)(v20 + 144);
      v6[1] = DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:);
      return v17(v18, 0, v15, v16);
    }
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = *(_QWORD *)(v0 + 344);
  *(_QWORD *)(v0 + 144) = v0;
  swift_release();
  outlined destroy of GroupBlobEnvelope(v3);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 424))(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 384));
  v1 = (_QWORD *)swift_task_alloc();
  v4[66] = v1;
  *v1 = v4[18];
  v1[1] = DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:);
  return DaemonGroupManager.refreshGroupWithServer(groupID:)(v4[51]);
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[67];
  v0[18] = v0;
  v0[27] = v1;
  v5 = v0[27];
  v0[69] = v5;
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 560) = v2;
  *v2 = *(_QWORD *)(v4 + 144);
  v2[1] = DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:);
  return DaemonGroupManager.performMemberRequests(for:)(v5);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0[71];
  v10 = v0[58];
  v11 = v0[33];
  v0[18] = v0;
  v0[27] = v1;
  swift_release();
  v12 = *(_QWORD *)(v11 + *(int *)(v10 + 24));
  swift_bridgeObjectRetain();
  v0[28] = v12;
  if (v0[28])
  {
    v13 = v9[28];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GPKUserID, String));
    _allocateUninitializedArray<A>(_:)();
    type metadata accessor for GPKUserID();
    lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
    v13 = Dictionary.init(dictionaryLiteral:)();
    outlined destroy of [GPKUserID : String]?();
  }
  v2 = v9[72];
  v9[29] = v13;
  v6 = swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v9 + 27;
  v7 = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = partial apply for closure #2 in DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:);
  *(_QWORD *)(v7 + 24) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : String]);
  type metadata accessor for GPKMember();
  lazy protocol witness table accessor for type [GPKUserID : String] and conformance [A : B]();
  result = Sequence.compactMap<A>(_:)();
  v8 = result;
  if (!v2)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    outlined destroy of [GPKUserID : String]();
    v9[30] = v8;
    swift_retain();
    v5 = v9[27];
    swift_retain();
    type metadata accessor for GPKMemberRemoval();
    v4 = _allocateUninitializedArray<A>(_:)();
    ClientMessageBroadcaster.receivedGroupUpdate(group:addedMembers:removedMembers:deliveredSilently:)(v5, v8, v4, 0);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v9 + 2));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v9[18] + 8))();
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[52];
  v2 = v0[49];
  v3 = v0[48];
  v0[18] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[18] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 144) = v0;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 144) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 344);
  *(_QWORD *)(v0 + 144) = v0;
  outlined destroy of GroupBlobEnvelope(v1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 144) + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = (void (*)(uint64_t, uint64_t))v0[57];
  v2 = v0[51];
  v3 = v0[48];
  v0[18] = v0;
  v1(v2, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[18] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 144) = v0;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 144) + 8))();
}

uint64_t DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v8;

  v3 = (_QWORD *)*v2;
  v3[18] = *v2;
  v3 += 18;
  v8 = v3 - 16;
  v3[37] = a1;
  v3[38] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = v8[50];
    v5 = v8[46];
    v6 = *(void (**)(uint64_t, uint64_t))(v8[47] + 8);
    v8[55] = v6;
    v6(v4, v5);
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[18] = *v2;
  v3[64] = a1;
  v3[65] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[18] = *v2;
  v3 += 18;
  v5 = v3 - 16;
  v3[49] = a1;
  v3[50] = v1;
  swift_task_dealloc();
  if (!v1)
    ((void (*)(_QWORD, _QWORD))v5[55])(v5[49], v5[46]);
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[18] = *v2;
  v3 += 18;
  v3[53] = a1;
  v3[54] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

uint64_t closure #1 in DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v22 = a2;
  v11 = a1;
  v23 = 0;
  v8 = 0;
  v14 = type metadata accessor for GPKMemberRole();
  v13 = *(_QWORD *)(v14 - 8);
  v6 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v5 - v6;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: GPKUserID, value: String));
  v7 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v8);
  v20 = (char *)&v5 - v7;
  v23 = v2;
  type metadata accessor for GPKMember();
  v10 = *(int *)(v12 + 48);
  v9 = *(int *)(v12 + 48);
  v19 = type metadata accessor for GPKUserID();
  v18 = *(_QWORD *)(v19 - 8);
  (*(void (**)(char *, uint64_t))(v18 + 16))(v20, v11);
  outlined init with copy of String((_QWORD *)(v11 + v9), &v20[v10]);
  v3 = &v20[*(int *)(v12 + 48)];
  v15 = *(_QWORD *)v3;
  v16 = *((_QWORD *)v3 + 1);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v17, *MEMORY[0x24BE3DAB8], v14);
  v21 = GPKMember.__allocating_init(handle:role:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v19);
  result = v21;
  *v22 = v21;
  return result;
}

uint64_t closure #2 in DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:)()
{
  uint64_t v1;

  swift_retain();
  dispatch thunk of GPKGroup.members.getter();
  swift_release();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Sequence.first(where:)();
  swift_bridgeObjectRelease();
  outlined destroy of [GPKMember]();
  return v1;
}

uint64_t partial apply for closure #2 in DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:)()
{
  return closure #2 in DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:)();
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed GPKUserID, @guaranteed String) -> (@owned GPKMember?)partial apply@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@in_guaranteed GPKUserID, @guaranteed String) -> (@owned GPKMember?)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t closure #1 in closure #2 in DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:)()
{
  char v1;

  dispatch thunk of GPKMember.handle.getter();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t DaemonGroupManager.peerMessagingService(_:didReceiveGroupEvent:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[16] = v4;
  v5[15] = a4;
  v5[14] = a3;
  v5[13] = a2;
  v5[12] = a1;
  v5[6] = v5;
  v5[7] = 0;
  v5[8] = 0;
  v5[2] = 0;
  v5[3] = 0;
  v5[9] = 0;
  v5[10] = 0;
  v6 = type metadata accessor for LogSubsystem();
  v5[17] = v6;
  v5[18] = *(_QWORD *)(v6 - 8);
  v5[19] = swift_task_alloc();
  v7 = type metadata accessor for GPKGroupID();
  v5[20] = v7;
  v5[21] = *(_QWORD *)(v7 - 8);
  v5[22] = swift_task_alloc();
  v5[7] = a1;
  v5[8] = a2;
  v5[2] = a3;
  v5[3] = a4;
  v5[9] = v4;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.peerMessagingService(_:didReceiveGroupEvent:from:)()
{
  uint64_t v0;
  _BYTE *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;

  v1 = *(_BYTE **)(v0 + 104);
  *(_QWORD *)(v0 + 48) = v0;
  v6 = *v1;
  if (*v1)
  {
    v3 = (_QWORD *)swift_task_alloc();
    if (v6 == 1)
    {
      v5[25] = v3;
      *v3 = v5[6];
      v3[1] = DaemonGroupManager.peerMessagingService(_:didReceiveGroupEvent:from:);
      return DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:)(v5[13], v5[14], v5[15], v5[12]);
    }
    else
    {
      v5[27] = v3;
      *v3 = v5[6];
      v3[1] = DaemonGroupManager.peerMessagingService(_:didReceiveGroupEvent:from:);
      return DaemonGroupManager.processRemovedFromGroupEvent(_:from:peerMessagingService:)(v5[13], v5[14], v5[15], v5[12]);
    }
  }
  else
  {
    v2 = (_QWORD *)swift_task_alloc();
    v5[23] = v2;
    *v2 = v5[6];
    v2[1] = DaemonGroupManager.peerMessagingService(_:didReceiveGroupEvent:from:);
    return DaemonGroupManager.processMetadataUpdateEvent(_:from:)(v5[13], v5[14], v5[15]);
  }
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v0[6] = v0;
  v15 = (void *)v0[24];
  v10 = v0[22];
  v9 = v0[21];
  v11 = v0[20];
  v13 = v0[19];
  v12 = v0[18];
  v14 = v0[17];
  v8 = v0[13];
  v1 = v15;
  v0[10] = v15;
  v0[4] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[5] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occured when processing group deletion message: ", 0x36uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for GroupEventIDSMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v8 + *(int *)(v4 + 20), v11);
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", 2uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v0[11] = v15;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[6] + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v0[6] = v0;
  v15 = (void *)v0[26];
  v10 = v0[22];
  v9 = v0[21];
  v11 = v0[20];
  v13 = v0[19];
  v12 = v0[18];
  v14 = v0[17];
  v8 = v0[13];
  v1 = v15;
  v0[10] = v15;
  v0[4] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[5] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occured when processing group deletion message: ", 0x36uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for GroupEventIDSMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v8 + *(int *)(v4 + 20), v11);
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", 2uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v0[11] = v15;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[6] + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v0[6] = v0;
  v15 = (void *)v0[28];
  v10 = v0[22];
  v9 = v0[21];
  v11 = v0[20];
  v13 = v0[19];
  v12 = v0[18];
  v14 = v0[17];
  v8 = v0[13];
  v1 = v15;
  v0[10] = v15;
  v0[4] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[5] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error occured when processing group deletion message: ", 0x36uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for GroupEventIDSMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v8 + *(int *)(v4 + 20), v11);
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", ", 2uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v0[11] = v15;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[6] + 8))();
}

_QWORD *DaemonGroupManager.peerMessagingService(_:didReceiveGroupEvent:from:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = *v1;
  v4 = (_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 192) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = *v1;
  v4 = (_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 208) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = *v1;
  v4 = (_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 224) = v0;
  swift_task_dealloc();
  if (v0)
    return (_QWORD *)swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v4 + 8))(v4);
}

uint64_t DaemonGroupManager.processMetadataUpdateEvent(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[57] = v3;
  v4[56] = a3;
  v4[55] = a2;
  v4[54] = a1;
  v4[44] = v4;
  v4[45] = 0;
  v4[34] = 0;
  v4[35] = 0;
  v4[46] = 0;
  v4[47] = 0;
  v4[49] = 0;
  v4[50] = 0;
  memset(v4 + 2, 0, 0x88uLL);
  v4[51] = 0;
  v4[53] = 0;
  v5 = type metadata accessor for GPKMemberRole();
  v4[58] = v5;
  v4[59] = *(_QWORD *)(v5 - 8);
  v4[60] = swift_task_alloc();
  v6 = type metadata accessor for GPKGroup.JoinState();
  v4[61] = v6;
  v4[62] = *(_QWORD *)(v6 - 8);
  v4[63] = swift_task_alloc();
  v4[64] = swift_task_alloc();
  v7 = type metadata accessor for GPKGroupID();
  v4[65] = v7;
  v4[66] = *(_QWORD *)(v7 - 8);
  v4[67] = swift_task_alloc();
  v4[68] = swift_task_alloc();
  v8 = type metadata accessor for LogSubsystem();
  v4[69] = v8;
  v4[70] = *(_QWORD *)(v8 - 8);
  v4[71] = swift_task_alloc();
  v4[45] = a1;
  v4[34] = a2;
  v4[35] = a3;
  v4[46] = v3;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.processMetadataUpdateEvent(_:from:)()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = v0[71];
  v15 = v0[70];
  v17 = v0[69];
  v0[44] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Processing metadata update message", 0x22uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v16);
  gpklog(_:type:fileID:line:subsystem:)();
  v1 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v0[72] = v1;
  v1(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  DaemonGroupManager.groupStore()();
  v10 = v14[68];
  v8 = v14[66];
  v9 = v14[65];
  v7 = v14[54];
  v11 = v14[22];
  v12 = v14[23];
  __swift_project_boxed_opaque_existential_1(v14 + 19, v11);
  v2 = type metadata accessor for GroupEventIDSMessage();
  v14[73] = v2;
  v3 = v7 + *(int *)(v2 + 20);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v14[74] = v4;
  v4(v10, v3, v9);
  v13 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 16) + **(int **)(v12 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  v14[75] = v5;
  *v5 = v14[44];
  v5[1] = DaemonGroupManager.processMetadataUpdateEvent(_:from:);
  return v13(v14[68], v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  char v41;
  _QWORD *v42;

  v1 = *(_QWORD *)(v0 + 608);
  *(_QWORD *)(v0 + 352) = v0;
  if (!v1)
  {
    v16 = (void (*)(uint64_t, uint64_t))v42[78];
    v15 = (void (*)(uint64_t, uint64_t, uint64_t))v42[74];
    v13 = v42[73];
    v23 = (void (*)(uint64_t, uint64_t))v42[72];
    v21 = v42[71];
    v22 = v42[69];
    v17 = v42[67];
    v18 = v42[65];
    v14 = v42[54];
    v42[36] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v42[37] = v9;
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Got group update for group not stored in my database ", 0x35uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v10);
    swift_bridgeObjectRelease();
    v15(v17, v14 + *(int *)(v13 + 20), v18);
    v19 = GPKGroupID.hexString.getter();
    v20 = v11;
    v16(v17, v18);
    v42[38] = v19;
    v42[39] = v20;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
    gpklog(_:type:fileID:line:subsystem:)();
    v23(v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v42 + 19));
    goto LABEL_7;
  }
  v35 = v42[76];
  v38 = v42[64];
  v37 = v42[63];
  v36 = v42[62];
  v39 = v42[61];
  v42[47] = v35;
  dispatch thunk of GPKGroup.joinState.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v36 + 104))(v37, *MEMORY[0x24BE3E4A8], v39);
  lazy protocol witness table accessor for type GPKGroup.JoinState and conformance GPKGroup.JoinState();
  v41 = == infix<A>(_:_:)();
  v40 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
  v40(v37, v39);
  v40(v38, v39);
  if ((v41 & 1) == 0)
  {
    v26 = (void (*)(uint64_t, uint64_t))v42[72];
    v24 = v42[71];
    v25 = v42[69];
    v42[40] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v42[41] = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Got group update for a not-joined group ", 0x28uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    v42[48] = v35;
    type metadata accessor for GPKGroup();
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v24);
    gpklog(_:type:fileID:line:subsystem:)();
    v26(v24, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v42 + 19));
LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v42[44] + 8))();
  }
  v2 = v42[77];
  v31 = v42[60];
  v29 = v42[59];
  v30 = v42[58];
  v33 = v42[57];
  v42[79] = type metadata accessor for GPKMember();
  swift_bridgeObjectRetain();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v31, *MEMORY[0x24BE3DAB8], v30);
  v32 = GPKMember.__allocating_init(handle:role:)();
  v42[80] = v32;
  v42[49] = v32;
  swift_retain();
  outlined init with copy of Client(v33 + 16, (uint64_t)(v42 + 24));
  v34 = ServiceBuilder.userLookupService(for:)((uint64_t)(v42 + 24));
  v42[81] = v34;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v42 + 24));
  swift_release();
  if (v2)
  {
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v42 + 19));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v42[44] + 8))();
  }
  else
  {
    v42[50] = v34;
    v27 = _allocateUninitializedArray<A>(_:)();
    v28 = v3;
    swift_retain();
    *v28 = v32;
    _finalizeUninitializedArray<A>(_:)();
    v42[82] = v27;
    v4 = (_QWORD *)swift_task_alloc();
    v42[83] = v4;
    *v4 = v42[44];
    v4[1] = DaemonGroupManager.processMetadataUpdateEvent(_:from:);
    return GroupKitUserLookupManager.resolveUsers(for:)(v27);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 352) = *v1;
  *(_QWORD *)(v2 + 672) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = v0[84];
  v6 = v0[57];
  v0[44] = v0;
  swift_retain();
  outlined init with copy of Client(v6 + 16, (uint64_t)(v0 + 29));
  ServiceBuilder.metadataService(for:)((uint64_t)(v0 + 29), v0 + 2);
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v5 + 29));
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v5 + 19));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v5[44] + 8))();
  }
  else
  {
    v4 = v5[76];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v5 + 29));
    swift_release();
    v2 = (_QWORD *)swift_task_alloc();
    v5[85] = v2;
    *v2 = v5[44];
    v2[1] = DaemonGroupManager.processMetadataUpdateEvent(_:from:);
    return MetadataService.fetchMetaData(for:)(v4);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v0[44] = v0;
  v18 = v0[86];
  v0[88] = v18;
  v0[51] = v18;
  v0[42] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[43] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Metadata fetched from server: ", 0x1EuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (v18)
  {
    v3 = type metadata accessor for GPKMetadata();
    v14 = MEMORY[0x242634AC0](v18, v3);
    swift_bridgeObjectRelease();
    v15 = v14;
    v16 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 1;
  }
  if ((v16 & 1) != 0)
    v19 = 0;
  else
    v19 = v15;
  v13 = v17[76];
  v9 = (void (*)(uint64_t, uint64_t))v17[72];
  v7 = v17[71];
  v8 = v17[69];
  v17[52] = v19;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v17[22];
  v11 = v17[23];
  __swift_project_boxed_opaque_existential_1(v17 + 19, v10);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 40) + **(int **)(v11 + 40));
  v5 = (_QWORD *)swift_task_alloc();
  v17[89] = v5;
  *v5 = v17[44];
  v5[1] = DaemonGroupManager.processMetadataUpdateEvent(_:from:);
  return v12(v13, v18, v10, v11);
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = v0[90];
  v4 = (void (*)(uint64_t, uint64_t))v0[72];
  v2 = v0[71];
  v3 = v0[69];
  v0[44] = v0;
  v0[53] = v7;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Updated metada stored in local storage", 0x26uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v2);
  gpklog(_:type:fileID:line:subsystem:)();
  v4(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  v6 = _allocateUninitializedArray<A>(_:)();
  type metadata accessor for GPKMemberRemoval();
  v5 = _allocateUninitializedArray<A>(_:)();
  ClientMessageBroadcaster.receivedGroupUpdate(group:addedMembers:removedMembers:deliveredSilently:)(v7, v6, v5, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of MetadataService((uint64_t)(v0 + 2));
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 19));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[44] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[68];
  v2 = v0[66];
  v3 = v0[65];
  v0[44] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 19));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[44] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 352) = v0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 352) + 8))();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;

  v1 = (void *)v0[87];
  v0[44] = v0;

  v0[88] = 0;
  v0[51] = 0;
  v0[42] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[43] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Metadata fetched from server: ", 0x1EuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v13 = v14[76];
  v9 = (void (*)(uint64_t, uint64_t))v14[72];
  v7 = v14[71];
  v8 = v14[69];
  v14[52] = 0;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
  gpklog(_:type:fileID:line:subsystem:)();
  v9(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v14[22];
  v11 = v14[23];
  __swift_project_boxed_opaque_existential_1(v14 + 19, v10);
  v12 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + 40) + **(int **)(v11 + 40));
  v5 = (_QWORD *)swift_task_alloc();
  v14[89] = v5;
  *v5 = v14[44];
  v5[1] = DaemonGroupManager.processMetadataUpdateEvent(_:from:);
  return v12(v13, 0, v10, v11);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 352) = v0;
  swift_bridgeObjectRelease();
  outlined destroy of MetadataService(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 352) + 8))();
}

uint64_t DaemonGroupManager.processMetadataUpdateEvent(_:from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v8;

  v3 = (_QWORD *)*v2;
  v8 = (_QWORD *)(*v2 + 16);
  v3[44] = *v2;
  v3[76] = a1;
  v3[77] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = v8[66];
    v5 = v8[63];
    v6 = *(void (**)(uint64_t, uint64_t))(v8[64] + 8);
    v8[76] = v6;
    v6(v4, v5);
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[44] = *v2;
  v3[86] = a1;
  v3[87] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[44] = *v2;
  v3[90] = a1;
  v3[91] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[42] = v4;
  v5[41] = a4;
  v5[40] = a1;
  v5[35] = v5;
  v5[36] = 0;
  v5[33] = 0;
  v5[34] = 0;
  v5[37] = 0;
  v5[38] = 0;
  memset(v5 + 2, 0, 0xCAuLL);
  type metadata accessor for GroupEventIDSMessage();
  v5[43] = swift_task_alloc();
  v6 = type metadata accessor for LogSubsystem();
  v5[44] = v6;
  v5[45] = *(_QWORD *)(v6 - 8);
  v5[46] = swift_task_alloc();
  v5[36] = a1;
  v5[33] = a2;
  v5[34] = a3;
  v5[37] = a4;
  v5[38] = v4;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 352);
  v9 = *(_BYTE **)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 328);
  v7 = *(_BYTE **)(v0 + 320);
  *(_QWORD *)(v0 + 280) = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Processing group deletion message", 0x21uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  *(_QWORD *)(v0 + 224) = 0;
  *(_QWORD *)(v0 + 232) = 0;
  *(_QWORD *)(v0 + 240) = 0;
  *(_QWORD *)(v0 + 248) = 0;
  *(_QWORD *)(v0 + 256) = 0;
  ServiceBuilder.metrics(client:)((_QWORD *)(v0 + 224), (_WORD *)(v0 + 16));
  outlined destroy of Client?(v0 + 224);
  swift_release();
  swift_retain();
  outlined init with copy of GroupEventIDSMessage(v7, v9);
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 376) = v12;
  v12[2] = v8;
  v12[3] = v9;
  v12[4] = v10;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v11 + 384) = v1;
  v2 = type metadata accessor for GPKGroup();
  *v1 = *(_QWORD *)(v11 + 280);
  v1[1] = DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:);
  return Metrics.callAsFunction<A>(_:worker:)(v11 + 312, 8, (uint64_t)&async function pointer to partial apply for closure #1 in DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:), (uint64_t)v12, v2, (uint64_t)&protocol witness table for GPKGroup);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v5 = *v1 + 16;
  *(_QWORD *)(v2 + 280) = *v1;
  *(_QWORD *)(v2 + 392) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 328);
    swift_task_dealloc();
    swift_release();
    outlined destroy of GroupEventIDSMessage(v4);
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 280) = v0;
  swift_release();
  outlined destroy of Metrics(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 280) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 344);
  *(_QWORD *)(v0 + 280) = v0;
  swift_task_dealloc();
  swift_release();
  outlined destroy of GroupEventIDSMessage(v2);
  swift_release();
  outlined destroy of Metrics(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 280) + 8))();
}

uint64_t DaemonGroupManager.processRemovedFromGroupEvent(_:from:peerMessagingService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[22] = v4;
  v5[21] = a4;
  v5[20] = a1;
  v5[13] = v5;
  v5[14] = 0;
  v5[7] = 0;
  v5[8] = 0;
  v5[15] = 0;
  v5[16] = 0;
  v5[17] = 0;
  v5[18] = 0;
  v6 = type metadata accessor for GPKGroup.JoinState();
  v5[23] = v6;
  v5[24] = *(_QWORD *)(v6 - 8);
  v5[25] = swift_task_alloc();
  v7 = type metadata accessor for GPKGroupID();
  v5[26] = v7;
  v5[27] = *(_QWORD *)(v7 - 8);
  v5[28] = swift_task_alloc();
  v5[29] = swift_task_alloc();
  v5[30] = swift_task_alloc();
  v8 = type metadata accessor for LogSubsystem();
  v5[31] = v8;
  v5[32] = *(_QWORD *)(v8 - 8);
  v5[33] = swift_task_alloc();
  v5[14] = a1;
  v5[7] = a2;
  v5[8] = a3;
  v5[15] = a4;
  v5[16] = v4;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.processRemovedFromGroupEvent(_:from:peerMessagingService:)()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = v0[33];
  v15 = v0[32];
  v17 = v0[31];
  v0[13] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Processing removed from group message", 0x25uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v16);
  gpklog(_:type:fileID:line:subsystem:)();
  v1 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v0[34] = v1;
  v1(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  DaemonGroupManager.groupStore()();
  v10 = v14[30];
  v8 = v14[27];
  v9 = v14[26];
  v7 = v14[20];
  v11 = v14[5];
  v12 = v14[6];
  __swift_project_boxed_opaque_existential_1(v14 + 2, v11);
  v2 = type metadata accessor for GroupEventIDSMessage();
  v14[35] = v2;
  v3 = v7 + *(int *)(v2 + 20);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v14[36] = v4;
  v4(v10, v3, v9);
  v13 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 + 16) + **(int **)(v12 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  v14[37] = v5;
  *v5 = v14[13];
  v5[1] = DaemonGroupManager.processRemovedFromGroupEvent(_:from:peerMessagingService:);
  return v13(v14[30], v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 304);
  *(_QWORD *)(v0 + 104) = v0;
  if (v1)
  {
    v17 = *(_QWORD *)(v18 + 304);
    v10 = *(void (**)(uint64_t, uint64_t))(v18 + 272);
    v8 = *(_QWORD *)(v18 + 264);
    v9 = *(_QWORD *)(v18 + 248);
    v12 = *(_QWORD *)(v18 + 200);
    v11 = *(_QWORD *)(v18 + 192);
    v13 = *(_QWORD *)(v18 + 184);
    swift_retain();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v18 + 136) = v17;
    *(_QWORD *)(v18 + 88) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v18 + 96) = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Found a group: ", 0xFuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v18 + 152) = v17;
    type metadata accessor for GPKGroup();
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    swift_release();
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v8);
    gpklog(_:type:fileID:line:subsystem:)();
    v10(v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v12, *MEMORY[0x24BE3E4B8], v13);
    GPKGroup.setJoinState(_:)();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    swift_release();
    v14 = *(_QWORD *)(v18 + 40);
    v15 = *(_QWORD *)(v18 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v18 + 16), v14);
    v16 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 + 40) + **(int **)(v15 + 40));
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v18 + 328) = v5;
    *v5 = *(_QWORD *)(v18 + 104);
    v5[1] = DaemonGroupManager.processRemovedFromGroupEvent(_:from:peerMessagingService:);
    return v16(v17, 0, v14, v15);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v18 + 288))(*(_QWORD *)(v18 + 232), *(_QWORD *)(v18 + 160) + *(int *)(*(_QWORD *)(v18 + 280) + 20), *(_QWORD *)(v18 + 208));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v18 + 352) = v7;
    *v7 = *(_QWORD *)(v18 + 104);
    v7[1] = DaemonGroupManager.processRemovedFromGroupEvent(_:from:peerMessagingService:);
    return DaemonGroupManager.deleteInvitation(with:peerMessagingService:)(*(_QWORD *)(v18 + 232), *(_QWORD *)(v18 + 168));
  }
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v2 = v0[42];
  v5 = (void (*)(uint64_t, uint64_t))v0[34];
  v3 = v0[33];
  v4 = v0[31];
  v0[13] = v0;
  swift_retain();
  v0[17] = v2;
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group marked as removed", 0x17uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
  gpklog(_:type:fileID:line:subsystem:)();
  v5(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  ClientMessageBroadcaster.removedFromGroup(group:)(v2);
  swift_release();
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Membership removal message broadcasted to subscribers", 0x35uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
  gpklog(_:type:fileID:line:subsystem:)();
  v5(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[13] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  _QWORD *v18;

  v1 = v0[45];
  v0[13] = v0;
  v0[18] = v1;
  if (v1)
  {
    v17 = (void (*)(uint64_t, uint64_t))v18[34];
    v15 = v18[33];
    v16 = v18[31];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation deleted from local store", 0x23uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v15);
    gpklog(_:type:fileID:line:subsystem:)();
    v17(v15, v16);
  }
  else
  {
    v11 = (void (*)(uint64_t, uint64_t))v18[40];
    v8 = (void (*)(uint64_t, uint64_t, uint64_t))v18[36];
    v6 = v18[35];
    v14 = (void (*)(uint64_t, uint64_t))v18[34];
    v12 = v18[33];
    v13 = v18[31];
    v9 = v18[28];
    v10 = v18[26];
    v7 = v18[20];
    v18[9] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v18[10] = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No group or invitation found when processing group deletion message: ", 0x45uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    v8(v9, v7 + *(int *)(v6 + 20), v10);
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v11(v9, v10);
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
    gpklog(_:type:fileID:line:subsystem:)();
    v14(v12, v13);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v18 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v18[13] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[30];
  v2 = v0[27];
  v3 = v0[26];
  v0[13] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[13] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = v0;
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 104) + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = (void (*)(uint64_t, uint64_t))v0[40];
  v2 = v0[29];
  v3 = v0[26];
  v0[13] = v0;
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[13] + 8))();
}

uint64_t DaemonGroupManager.processRemovedFromGroupEvent(_:from:peerMessagingService:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v8;

  v3 = (_QWORD *)*v2;
  v3[13] = *v2;
  v3 += 13;
  v8 = v3 - 11;
  v3[25] = a1;
  v3[26] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = v8[28];
    v5 = v8[24];
    v6 = *(void (**)(uint64_t, uint64_t))(v8[25] + 8);
    v8[38] = v6;
    v6(v4, v5);
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[13] = *v2;
  v3 += 13;
  v3[29] = a1;
  v3[30] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[13] = *v2;
  v3 += 13;
  v5 = v3 - 11;
  v3[32] = a1;
  v3[33] = v1;
  swift_task_dealloc();
  if (!v1)
    ((void (*)(_QWORD, _QWORD))v5[38])(v5[27], v5[24]);
  return swift_task_switch();
}

uint64_t closure #1 in DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[21] = a4;
  v4[20] = a3;
  v4[19] = a2;
  v4[18] = a1;
  v4[11] = v4;
  v4[12] = 0;
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v4[16] = 0;
  v5 = type metadata accessor for InternalErrorCode();
  v4[22] = v5;
  v4[23] = *(_QWORD *)(v5 - 8);
  v4[24] = swift_task_alloc();
  v6 = type metadata accessor for GPKGroup.JoinState();
  v4[25] = v6;
  v4[26] = *(_QWORD *)(v6 - 8);
  v4[27] = swift_task_alloc();
  v7 = type metadata accessor for LogSubsystem();
  v4[28] = v7;
  v4[29] = *(_QWORD *)(v7 - 8);
  v4[30] = swift_task_alloc();
  v8 = type metadata accessor for GPKGroupID();
  v4[31] = v8;
  v4[32] = *(_QWORD *)(v8 - 8);
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[12] = a2;
  v4[13] = a3;
  v4[14] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD, uint64_t, uint64_t);
  _QWORD *v13;

  *(_QWORD *)(v0 + 88) = v0;
  DaemonGroupManager.groupStore()();
  v9 = v13[35];
  v7 = v13[32];
  v8 = v13[31];
  v6 = v13[20];
  v10 = v13[5];
  v11 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v10);
  v1 = type metadata accessor for GroupEventIDSMessage();
  v13[36] = v1;
  v2 = v6 + *(int *)(v1 + 20);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v13[37] = v3;
  v3(v9, v2, v8);
  v12 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 + 16) + **(int **)(v11 + 16));
  v4 = (_QWORD *)swift_task_alloc();
  v13[38] = v4;
  *v4 = v13[11];
  v4[1] = closure #1 in DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:);
  return v12(v13[35], v10, v11);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 88) = v0;
  if (v1)
  {
    v18 = *(_QWORD *)(v19 + 312);
    v10 = *(_QWORD *)(v19 + 240);
    v9 = *(_QWORD *)(v19 + 232);
    v11 = *(_QWORD *)(v19 + 224);
    v13 = *(_QWORD *)(v19 + 216);
    v12 = *(_QWORD *)(v19 + 208);
    v14 = *(_QWORD *)(v19 + 200);
    swift_retain();
    swift_retain();
    swift_retain();
    *(_QWORD *)(v19 + 120) = v18;
    *(_QWORD *)(v19 + 72) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v19 + 80) = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Found a group: ", 0xFuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v19 + 136) = v18;
    type metadata accessor for GPKGroup();
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    swift_release();
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
    gpklog(_:type:fileID:line:subsystem:)();
    v5 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    *(_QWORD *)(v19 + 360) = v5;
    v5(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v13, *MEMORY[0x24BE3E4D8], v14);
    GPKGroup.setJoinState(_:)();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    swift_release();
    v15 = *(_QWORD *)(v19 + 40);
    v16 = *(_QWORD *)(v19 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v19 + 16), v15);
    v17 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 + 40) + **(int **)(v16 + 40));
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v19 + 368) = v6;
    *v6 = *(_QWORD *)(v19 + 88);
    v6[1] = closure #1 in DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:);
    return v17(v18, 0, v15, v16);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v19 + 296))(*(_QWORD *)(v19 + 272), *(_QWORD *)(v19 + 160) + *(int *)(*(_QWORD *)(v19 + 288) + 20), *(_QWORD *)(v19 + 248));
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v19 + 336) = v8;
    *v8 = *(_QWORD *)(v19 + 88);
    v8[1] = closure #1 in DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:);
    return DaemonGroupManager.deleteInvitation(with:peerMessagingService:)(*(_QWORD *)(v19 + 272), *(_QWORD *)(v19 + 168));
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  _QWORD *v9;

  v1 = v0[47];
  v8 = (void (*)(uint64_t, uint64_t))v0[45];
  v5 = (void (*)(uint64_t, uint64_t))v0[41];
  v3 = v0[33];
  v4 = v0[31];
  v6 = v0[30];
  v7 = v0[28];
  v9 = (_QWORD *)v0[18];
  v0[11] = v0;
  swift_retain();
  v0[15] = v1;
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group marked as destroyed", 0x19uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
  gpklog(_:type:fileID:line:subsystem:)();
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  dispatch thunk of GPKGroup.groupID.getter();
  swift_release();
  ClientMessageBroadcaster.groupDeleted(groupID:)(v3);
  v5(v3, v4);
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Delete group broadcasted to subscribers", 0x27uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
  gpklog(_:type:fileID:line:subsystem:)();
  v8(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v9 = v0[15];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[11] + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v1 = *(_QWORD *)(v0 + 344);
  *(_QWORD *)(v0 + 88) = v0;
  if (v1)
  {
    v21 = v23[43];
    v19 = v23[30];
    v18 = v23[29];
    v20 = v23[28];
    v22 = (_QWORD *)v23[18];
    v23[16] = v21;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation deleted", 0x12uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v19);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    *v22 = v21;
    swift_release();
  }
  else
  {
    v11 = (void (*)(uint64_t, uint64_t))v23[41];
    v8 = (void (*)(uint64_t, uint64_t, uint64_t))v23[37];
    v6 = v23[36];
    v9 = v23[33];
    v10 = v23[31];
    v13 = v23[30];
    v12 = v23[29];
    v14 = v23[28];
    v17 = v23[24];
    v15 = v23[23];
    v16 = v23[22];
    v7 = v23[20];
    v23[7] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v23[8] = v3;
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("No group or invitation found when processing group deletion message: ", 0x45uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    v8(v9, v7 + *(int *)(v6 + 20), v10);
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v11(v9, v10);
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x24BE3DCF8], v16);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v23 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v23[11] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[35];
  v2 = v0[32];
  v3 = v0[31];
  v0[11] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[11] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 88) = v0;
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 88) + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = (void (*)(uint64_t, uint64_t))v0[41];
  v2 = v0[34];
  v3 = v0[31];
  v0[11] = v0;
  v1(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[11] + 8))();
}

uint64_t closure #1 in DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v8;

  v3 = (_QWORD *)*v2;
  v3[11] = *v2;
  v3 += 11;
  v8 = v3 - 9;
  v3[28] = a1;
  v3[29] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = v8[33];
    v5 = v8[29];
    v6 = *(void (**)(uint64_t, uint64_t))(v8[30] + 8);
    v8[39] = v6;
    v6(v4, v5);
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v3[11] = *v2;
  v3 += 11;
  v5 = v3 - 9;
  v3[32] = a1;
  v3[33] = v1;
  swift_task_dealloc();
  if (!v1)
    ((void (*)(_QWORD, _QWORD))v5[39])(v5[32], v5[29]);
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[11] = *v2;
  v3 += 11;
  v3[36] = a1;
  v3[37] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:);
  return closure #1 in DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:)(a1, v5, v6, v7);
}

uint64_t partial apply for closure #1 in DaemonGroupManager.processGroupDeleteEvent(_:from:peerMessagingService:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t DaemonGroupManager.deleteInvitation(with:peerMessagingService:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[17] = v2;
  v3[16] = a2;
  v3[15] = a1;
  v3[9] = v3;
  v3[10] = 0;
  v3[11] = 0;
  v3[12] = 0;
  v3[13] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3[18] = swift_task_alloc();
  v4 = type metadata accessor for UUID();
  v3[19] = v4;
  v3[20] = *(_QWORD *)(v4 - 8);
  v3[21] = swift_task_alloc();
  v5 = type metadata accessor for GPKGroupID();
  v3[22] = v5;
  v3[23] = *(_QWORD *)(v5 - 8);
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v6 = type metadata accessor for LogSubsystem();
  v3[26] = v6;
  v3[27] = *(_QWORD *)(v6 - 8);
  v3[28] = swift_task_alloc();
  v3[10] = a1;
  v3[11] = a2;
  v3[12] = v2;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.deleteInvitation(with:peerMessagingService:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD, uint64_t, uint64_t);
  _QWORD *v6;

  *(_QWORD *)(v0 + 72) = v0;
  DaemonGroupManager.invitationStore()();
  v3 = v6[5];
  v4 = v6[6];
  __swift_project_boxed_opaque_existential_1(v6 + 2, v3);
  v5 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + **(int **)(v4 + 16));
  v1 = (_QWORD *)swift_task_alloc();
  v6[29] = v1;
  *v1 = v6[9];
  v1[1] = DaemonGroupManager.deleteInvitation(with:peerMessagingService:);
  return v5(v6[15], v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, uint64_t, uint64_t);
  _QWORD *v15;

  v1 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 72) = v0;
  if (v1)
  {
    v8 = v15[30];
    v10 = v15[28];
    v9 = v15[27];
    v11 = v15[26];
    v15[13] = v8;
    v15[7] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v15[8] = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Found an invitation: ", 0x15uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    v15[14] = v8;
    type metadata accessor for GPKGroup();
    lazy protocol witness table accessor for type GPKGroup and conformance GPKGroup();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
    gpklog(_:type:fileID:line:subsystem:)();
    v5 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v15[32] = v5;
    v5(v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = v15[5];
    v13 = v15[6];
    __swift_project_boxed_opaque_existential_1(v15 + 2, v12);
    dispatch thunk of GPKGroup.groupID.getter();
    v14 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 + 40) + **(int **)(v13 + 40));
    v6 = (_QWORD *)swift_task_alloc();
    v15[33] = v6;
    *v6 = v15[9];
    v6[1] = DaemonGroupManager.deleteInvitation(with:peerMessagingService:);
    return v14(v15[25], v12, v13);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v15 + 2));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v15[9] + 8))(0);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v7;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = *v1;
  v2 += 72;
  v7 = (_QWORD *)(v2 - 56);
  *(_QWORD *)(v2 + 200) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v3 = v7[23];
    v4 = v7[20];
    v5 = *(void (**)(uint64_t, uint64_t))(v7[21] + 8);
    v7[33] = v5;
    v5(v3, v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = (void (*)(uint64_t, uint64_t))v0[32];
  v16 = v0[28];
  v17 = v0[26];
  v19 = v0[20];
  v21 = v0[19];
  v20 = v0[18];
  v0[9] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation deleted from local store", 0x23uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v16);
  gpklog(_:type:fileID:line:subsystem:)();
  v18(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  dispatch thunk of GPKGroup.invitationID.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v20, 1, v21) == 1)
  {
    outlined destroy of UUID?(v15[18]);
  }
  else
  {
    v11 = (void (*)(uint64_t, uint64_t))v15[32];
    v9 = v15[28];
    v10 = v15[26];
    v13 = v15[21];
    v12 = v15[20];
    v14 = v15[19];
    (*(void (**)(void))(v12 + 32))();
    PeerMessagingService.deleteInvitation(with:)(v13);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invitation deleted from ids service", 0x23uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
    gpklog(_:type:fileID:line:subsystem:)();
    v11(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  }
  v4 = (void (*)(uint64_t, uint64_t))v15[35];
  v7 = (void (*)(uint64_t, uint64_t))v15[32];
  v8 = v15[30];
  v5 = v15[28];
  v6 = v15[26];
  v2 = v15[24];
  v3 = v15[22];
  swift_retain();
  dispatch thunk of GPKGroup.groupID.getter();
  ClientMessageBroadcaster.invitationDeleted(groupID:)(v2);
  v4(v2, v3);
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Delete invitation broadcasted to subscribers", 0x2CuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/DaemonGroupManager.swift", 0x25uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  v7(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v15 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v15[9] + 8))(v8);
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 72) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 72) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[25];
  v2 = v0[23];
  v3 = v0[22];
  v0[9] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(v0[9] + 8))();
}

uint64_t DaemonGroupManager.deleteInvitation(with:peerMessagingService:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[9] = *v2;
  v3[30] = a1;
  v3[31] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t protocol witness for PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveInvitation:from:invitationID:) in conformance DaemonGroupManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  *(_QWORD *)(v5 + 16) = v5;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = protocol witness for PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveInvitation:from:invitationID:) in conformance DaemonGroupManager;
  return DaemonGroupManager.peerMessagingService(_:didReceiveInvitation:from:invitationID:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveInvitation:from:invitationID:) in conformance DaemonGroupManager(unsigned int a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t protocol witness for PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveRSVPResponse:) in conformance DaemonGroupManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveRSVPResponse:) in conformance DaemonGroupManager;
  return DaemonGroupManager.peerMessagingService(_:didReceiveRSVPResponse:)(a1, a2);
}

uint64_t protocol witness for PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveRSVPResponse:) in conformance DaemonGroupManager()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t protocol witness for PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveGroupMembershipUpdate:) in conformance DaemonGroupManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveGroupMembershipUpdate:) in conformance DaemonGroupManager;
  return DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:)(a1, a2);
}

_QWORD *protocol witness for PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveGroupMembershipUpdate:) in conformance DaemonGroupManager()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveGroupEvent:from:) in conformance DaemonGroupManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 16) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = protocol witness for PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveGroupEvent:from:) in conformance DaemonGroupManager;
  return DaemonGroupManager.peerMessagingService(_:didReceiveGroupEvent:from:)(a1, a2, a3, a4);
}

uint64_t protocol witness for PeerMessagingServiceDelegate.peerMessagingService(_:didReceiveGroupEvent:from:) in conformance DaemonGroupManager()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t DaemonGroupManager.fetchMemberKey(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[32] = v2;
  v3[31] = a2;
  v3[30] = a1;
  v3[27] = v3;
  v3[28] = 0;
  v3[29] = 0;
  memset(v3 + 2, 0, 0xA0uLL);
  v3[28] = a2;
  v3[29] = v2;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.fetchMemberKey(with:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 216) = v0;
  swift_retain();
  outlined init with copy of Client(v4 + 16, v0 + 176);
  ServiceBuilder.memberKeyFetcher(for:)(v0 + 176, v0 + 16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v3 + 22));
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v3[33] = v1;
  *v1 = v3[27];
  v1[1] = DaemonGroupManager.fetchMemberKey(with:);
  return MemberKeyFetcher.fetchKey(with:)(v3[30], v3[31]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 216) = *v1;
  *(_QWORD *)(v2 + 272) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = v0;
  outlined destroy of MemberKeyFetcher(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 216) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = v0;
  outlined destroy of MemberKeyFetcher(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 216) + 8))();
}

uint64_t outlined destroy of MemberKeyFetcher(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  return a1;
}

uint64_t DaemonGroupManager.fetchGroupKey(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[32] = v2;
  v3[31] = a2;
  v3[30] = a1;
  v3[27] = v3;
  v3[28] = 0;
  v3[29] = 0;
  memset(v3 + 2, 0, 0xA0uLL);
  v3[28] = a2;
  v3[29] = v2;
  return swift_task_switch();
}

uint64_t DaemonGroupManager.fetchGroupKey(with:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 216) = v0;
  swift_retain();
  outlined init with copy of Client(v4 + 16, v0 + 176);
  ServiceBuilder.groupKeyFetcher(for:)(v0 + 176, v0 + 16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v3 + 22));
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v3[33] = v1;
  *v1 = v3[27];
  v1[1] = DaemonGroupManager.fetchGroupKey(with:);
  return GroupKeyFetcher.fetchKey(with:)(v3[30], v3[31]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 216) = *v1;
  *(_QWORD *)(v2 + 272) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = v0;
  outlined destroy of GroupKeyFetcher(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 216) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = v0;
  outlined destroy of GroupKeyFetcher(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 216) + 8))();
}

uint64_t outlined destroy of GroupKeyFetcher(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  return a1;
}

uint64_t DaemonGroupManager.fetchAllUsers()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = v0;
  DaemonGroupManager.userStore()();
  if (v1)
    return v3;
  v5 = v8;
  v4 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  v6 = (*(uint64_t (**)(uint64_t))(v4 + 32))(v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v6;
}

uint64_t type metadata accessor for DaemonGroupManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for DaemonGroupManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DaemonGroupManager.__allocating_init(client:builder:clientMessageBroadcaster:maxRetries:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t partial apply for closure #1 in closure #2 in DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:)()
{
  return closure #1 in closure #2 in DaemonGroupManager.peerMessagingService(_:didReceiveGroupMembershipUpdate:)() & 1;
}

uint64_t partial apply for closure #1 in closure #1 in DaemonGroupManager.reject(groupID:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in closure #1 in DaemonGroupManager.reject(groupID:);
  return closure #1 in closure #1 in DaemonGroupManager.reject(groupID:)(a1, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in DaemonGroupManager.reject(groupID:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D4E6D48()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in DaemonGroupManager.reject(groupID:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in DaemonGroupManager.reject(groupID:)(a1, (_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:);
  return closure #1 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:)(a1, v5, v6, v7, v8, v9);
}

uint64_t partial apply for closure #1 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D4E6E9C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in DaemonGroupManager.accept(groupID:serviceName:)(a1, (_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #4 in DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #4 in DaemonGroupManager.updateGroup(_:encryptedMetaData:exisingStoredGroup:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t dispatch thunk of IdentityServiceUtils.deconstruct(fromID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of IdentityServiceUtils.refreshIDStatus(forDestinations:listenerID:serviceName:queue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v8 + 16) = v8;
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 + 16) + **(int **)(a8 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v9;
  *v9 = *(_QWORD *)(v8 + 16);
  v9[1] = dispatch thunk of IdentityServiceUtils.refreshIDStatus(forDestinations:listenerID:serviceName:queue:);
  return v18(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of IdentityServiceUtils.refreshIDStatus(forDestinations:listenerID:serviceName:queue:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t static NSPredicate.predicateForJoinState(_:)()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v4 = type metadata accessor for NSExpression();
  swift_getKeyPath();
  v9 = (void *)NSExpression.init<A, B>(forKeyPath:)();
  GPKGroup.JoinState.rawValue.getter();
  v5 = String.init<A>(describing:)();
  v7 = v0;
  type metadata accessor for NSPredicate();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%@ == %@", 8uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  _allocateUninitializedArray<A>(_:)();
  v6 = v1;
  v2 = v9;
  v6[3] = v4;
  v6[4] = lazy protocol witness table accessor for type NSExpression and conformance NSObject();
  *v6 = v9;
  swift_bridgeObjectRetain();
  v6[8] = MEMORY[0x24BEE0D00];
  v6[9] = lazy protocol witness table accessor for type String and conformance String();
  v6[5] = v5;
  v6[6] = v7;
  _finalizeUninitializedArray<A>(_:)();
  v8 = NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v8;
}

char *keypath_get_selector_joinState()
{
  return sel_joinState;
}

void key path getter for Group.joinState : Group(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = objc_msgSend(v3, sel_joinState);

}

void key path setter for Group.joinState : Group(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  objc_msgSend(v3, sel_setJoinState_, v4);

}

uint64_t static NSPredicate.predicateForGroupMode(_:invitation:)()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  type metadata accessor for NSExpression();
  swift_getKeyPath();
  v8 = (void *)NSExpression.init<A, B>(forKeyPath:)();
  GPKGroup.Mode.rawValue.getter();
  v4 = String.init<A>(describing:)();
  v6 = v0;
  type metadata accessor for NSPredicate();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%@ == %@", 8uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  _allocateUninitializedArray<A>(_:)();
  v5 = v1;
  v2 = v8;
  v5[3] = type metadata accessor for NSExpression();
  v5[4] = lazy protocol witness table accessor for type NSExpression and conformance NSObject();
  *v5 = v8;
  swift_bridgeObjectRetain();
  v5[8] = MEMORY[0x24BEE0D00];
  v5[9] = lazy protocol witness table accessor for type String and conformance String();
  v5[5] = v4;
  v5[6] = v6;
  _finalizeUninitializedArray<A>(_:)();
  v7 = NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

char *keypath_get_selector_groupMode()
{
  return sel_groupMode;
}

void key path getter for Invitation.groupMode : Invitation(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = objc_msgSend(v3, sel_groupMode);

}

void key path setter for Invitation.groupMode : Invitation(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  objc_msgSend(v3, sel_setGroupMode_, v4);

}

void key path getter for Group.groupMode : Group(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = objc_msgSend(v3, sel_groupMode);

}

void key path setter for Group.groupMode : Group(uint64_t *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  objc_msgSend(v3, sel_setGroupMode_, v4);

}

uint64_t static NSPredicate.predicateForGroupDomain(_:invitation:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  id v3;
  _QWORD *v5;
  uint64_t v6;
  void *v9;

  type metadata accessor for NSExpression();
  swift_getKeyPath();
  v9 = (void *)NSExpression.init<A, B>(forKeyPath:)();
  swift_bridgeObjectRetain();
  type metadata accessor for NSPredicate();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%@ == %@", 8uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  _allocateUninitializedArray<A>(_:)();
  v5 = v2;
  v3 = v9;
  v5[3] = type metadata accessor for NSExpression();
  v5[4] = lazy protocol witness table accessor for type NSExpression and conformance NSObject();
  *v5 = v9;
  swift_bridgeObjectRetain();
  v5[8] = MEMORY[0x24BEE0D00];
  v5[9] = lazy protocol witness table accessor for type String and conformance String();
  v5[5] = a1;
  v5[6] = a2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v6;
}

char *keypath_get_selector_groupDomain()
{
  return sel_groupDomain;
}

void key path getter for Invitation.groupDomain : Invitation(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v9;
  id v10;

  v9 = *a1;
  v2 = *a1;
  v10 = objc_msgSend(v9, sel_groupDomain);
  if (v10)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v3;

    v6 = v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *a2 = v6;
  a2[1] = v7;

}

void key path setter for Invitation.groupDomain : Invitation(_QWORD *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v9[2];

  outlined init with copy of String?(a1, v9);
  v6 = v9[0];
  v8 = v9[1];
  v7 = *a2;
  v2 = *a2;
  if (v8)
  {
    v4 = MEMORY[0x2426348B0](v6);
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setGroupDomain_, v4);
  }
  else
  {
    objc_msgSend(v7, sel_setGroupDomain_, 0);
  }

}

void key path getter for Group.groupDomain : Group(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v9;
  id v10;

  v9 = *a1;
  v2 = *a1;
  v10 = objc_msgSend(v9, sel_groupDomain);
  if (v10)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v3;

    v6 = v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *a2 = v6;
  a2[1] = v7;

}

void key path setter for Group.groupDomain : Group(_QWORD *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v9[2];

  outlined init with copy of String?(a1, v9);
  v6 = v9[0];
  v8 = v9[1];
  v7 = *a2;
  v2 = *a2;
  if (v8)
  {
    v4 = MEMORY[0x2426348B0](v6);
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setGroupDomain_, v4);
  }
  else
  {
    objc_msgSend(v7, sel_setGroupDomain_, 0);
  }

}

uint64_t static NSPredicate.predicateForGroupID(_:invitation:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  unint64_t v9;
  id v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[2];
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v31 = a1;
  v30 = a2;
  v41 = 0;
  v40 = 0;
  v39 = 0;
  v38 = 0;
  v36 = 0;
  v37 = 0;
  v32 = type metadata accessor for UUID();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)v17 - v34;
  v41 = v3;
  v40 = v4 & 1;
  v39 = v2;
  type metadata accessor for NSExpression();
  swift_getKeyPath();
  v38 = (id)NSExpression.init<A, B>(forKeyPath:)();
  if ((v30 & 1) != 0)
  {
    v28 = GPKGroupID.hexString.getter();
    v29 = v5;
  }
  else
  {
    GPKGroupID.uuid.getter();
    v26 = UUID.uuidString.getter();
    v27 = v6;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
    v28 = v26;
    v29 = v27;
  }
  v24 = v29;
  v19 = v28;
  v36 = v28;
  v37 = v29;
  v17[1] = 0;
  type metadata accessor for NSPredicate();
  v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%@ == %@", 8uLL, 1);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v22 = _allocateUninitializedArray<A>(_:)();
  v20 = v7;
  v18 = v38;
  v8 = v38;
  v20[3] = type metadata accessor for NSExpression();
  v9 = lazy protocol witness table accessor for type NSExpression and conformance NSObject();
  v10 = v18;
  v11 = v20;
  v20[4] = v9;
  *v11 = v10;
  swift_bridgeObjectRetain();
  v20[8] = MEMORY[0x24BEE0D00];
  v12 = lazy protocol witness table accessor for type String and conformance String();
  v13 = v19;
  v14 = v20;
  v15 = v24;
  v20[9] = v12;
  v14[5] = v13;
  v14[6] = v15;
  _finalizeUninitializedArray<A>(_:)();
  v25 = NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v25;
}

void key path getter for Invitation.groupID : Invitation(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v9;
  id v10;

  v9 = *a1;
  v2 = *a1;
  v10 = objc_msgSend(v9, sel_groupID);
  if (v10)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v3;

    v6 = v4;
    v7 = v5;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *a2 = v6;
  a2[1] = v7;

}

void key path setter for Invitation.groupID : Invitation(_QWORD *a1, id *a2)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD v9[2];

  outlined init with copy of String?(a1, v9);
  v6 = v9[0];
  v8 = v9[1];
  v7 = *a2;
  v2 = *a2;
  if (v8)
  {
    v4 = MEMORY[0x2426348B0](v6);
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setGroupID_, v4);
  }
  else
  {
    objc_msgSend(v7, sel_setGroupID_, 0);
  }

}

uint64_t InitGPKUpdateGroupRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t *InitGPKUpdateGroupRequest.Response.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t inited;

  inited = type metadata accessor for InitGPKUpdateGroupRequest.Response();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(inited + 20)), a1);
}

uint64_t type metadata accessor for InitGPKUpdateGroupRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for InitGPKUpdateGroupRequest.Response;
  if (!type metadata singleton initialization cache for InitGPKUpdateGroupRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

BOOL static InitGPKUpdateGroupRequest.Response.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t InitGPKUpdateGroupRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t InitGPKUpdateGroupRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t InitGPKUpdateGroupRequest.Response.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t InitGPKUpdateGroupRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKUpdateGroupRequest.Response.CodingKeys, &type metadata for InitGPKUpdateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKUpdateGroupRequest.Response.CodingKeys, &type metadata for InitGPKUpdateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKUpdateGroupRequest.Response.CodingKeys, &type metadata for InitGPKUpdateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKUpdateGroupRequest.Response.CodingKeys, &type metadata for InitGPKUpdateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKUpdateGroupRequest.Response.CodingKeys, &type metadata for InitGPKUpdateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t InitGPKUpdateGroupRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t InitGPKUpdateGroupRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InitGPKUpdateGroupRequest.Response.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static InitGPKUpdateGroupRequest.Response.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance InitGPKUpdateGroupRequest.Response.CodingKeys()
{
  return InitGPKUpdateGroupRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InitGPKUpdateGroupRequest.Response.CodingKeys()
{
  return InitGPKUpdateGroupRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InitGPKUpdateGroupRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InitGPKUpdateGroupRequest.Response.CodingKeys()
{
  _BYTE *v0;

  return InitGPKUpdateGroupRequest.Response.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InitGPKUpdateGroupRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitGPKUpdateGroupRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InitGPKUpdateGroupRequest.Response.CodingKeys()
{
  return InitGPKUpdateGroupRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance InitGPKUpdateGroupRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitGPKUpdateGroupRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InitGPKUpdateGroupRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InitGPKUpdateGroupRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InitGPKUpdateGroupRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD v31[2];
  char v32;
  uint64_t v33;
  _QWORD *v34;

  v15 = a1;
  v34 = 0;
  v33 = 0;
  v25 = type metadata accessor for GPKGroupID();
  v21 = *(_QWORD *)(v25 - 8);
  v14 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v7 - v14;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InitGPKUpdateGroupRequest.Response.CodingKeys>);
  v16 = *(_QWORD *)(v24 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v7 - v17;
  v34 = v2;
  v33 = v1;
  v18 = v2[3];
  v19 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v18);
  lazy protocol witness table accessor for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v27, v22, v25);
  v23 = &v32;
  v32 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v28 = v3;
  v29 = v3;
  if (v3)
  {
    v7[2] = v29;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    v4 = (uint64_t *)(v22 + *(int *)(type metadata accessor for InitGPKUpdateGroupRequest.Response() + 20));
    v8 = *v4;
    v9 = v4[1];
    outlined copy of Data._Representation(v8, v9);
    v11 = v31;
    v31[0] = v8;
    v31[1] = v9;
    v10 = &v30;
    v30 = 1;
    lazy protocol witness table accessor for type Nonce and conformance Nonce();
    v5 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = v5;
    v13 = v5;
    if (v5)
      v7[1] = v13;
    outlined destroy of Nonce((uint64_t)v31);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
}

uint64_t InitGPKUpdateGroupRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t inited;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  char v47;

  v23 = a2;
  v32 = a1;
  v46 = 0;
  v28 = 0;
  v24 = type metadata accessor for GPKGroupID();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v12 - v26;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InitGPKUpdateGroupRequest.Response.CodingKeys>);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v36 = (char *)&v12 - v31;
  inited = type metadata accessor for InitGPKUpdateGroupRequest.Response();
  v34 = (*(_QWORD *)(*(_QWORD *)(inited - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v35 = (uint64_t)&v12 - v34;
  v47 = 0;
  v46 = v2;
  v38 = v2[3];
  v39 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v38);
  lazy protocol witness table accessor for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys();
  v3 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v40 = v3;
  v41 = v3;
  if (v3)
  {
    v15 = v41;
  }
  else
  {
    v20 = &v45;
    v45 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v4;
    v22 = v4;
    if (v4)
    {
      v14 = v22;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v14;
    }
    else
    {
      v16 = 1;
      v47 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v35, v27, v24);
      v17 = &v42;
      v42 = v16;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v5 = v21;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v18 = v5;
      v19 = v5;
      if (!v5)
      {
        v6 = v29;
        v7 = v36;
        v8 = v30;
        v9 = v44;
        v10 = (_QWORD *)(v35 + *(int *)(inited + 20));
        v47 = 3;
        *v10 = v43;
        v10[1] = v9;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v6);
        outlined init with copy of InitGPKUpdateGroupRequest.Response(v35, v23);
        __swift_destroy_boxed_opaque_existential_1(v32);
        return outlined destroy of InitGPKUpdateGroupRequest.Response(v35);
      }
      v13 = v19;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v13;
    }
  }
  v12 = v15;
  result = __swift_destroy_boxed_opaque_existential_1(v32);
  if ((v47 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v35, v24);
  return result;
}

uint64_t outlined init with copy of InitGPKUpdateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(type metadata accessor for InitGPKUpdateGroupRequest.Response() + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  outlined copy of Data._Representation(v7, v8);
  result = a2;
  v4 = (uint64_t *)(a2 + v6);
  *v4 = v7;
  v4[1] = v8;
  return result;
}

uint64_t outlined destroy of InitGPKUpdateGroupRequest.Response(uint64_t a1)
{
  uint64_t v1;
  uint64_t inited;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  inited = type metadata accessor for InitGPKUpdateGroupRequest.Response();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(inited + 20)), *(_QWORD *)(a1 + *(int *)(inited + 20) + 8));
  return a1;
}

uint64_t InitGPKUpdateGroupRequest.Response.init(groupId:nonce:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  v8 = *a2;
  v9 = a2[1];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a3, a1);
  result = type metadata accessor for InitGPKUpdateGroupRequest.Response();
  v5 = (_QWORD *)(a3 + *(int *)(result + 20));
  *v5 = v8;
  v5[1] = v9;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InitGPKUpdateGroupRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InitGPKUpdateGroupRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InitGPKUpdateGroupRequest.Response(uint64_t a1)
{
  return InitGPKUpdateGroupRequest.Response.encode(to:)(a1);
}

void variable initialization expression of InitGPKUpdateGroupRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t InitGPKUpdateGroupRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t InitGPKUpdateGroupRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*InitGPKUpdateGroupRequest.bodyContent.modify())()
{
  return InitGPKUpdateGroupRequest.bodyContent.modify;
}

uint64_t InitGPKUpdateGroupRequest.init(groupID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  v14 = a1;
  memset(v15, 0, sizeof(v15));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v8 = v2;
  v3 = HTTPBodyKey.groupID.unsafeMutableAddressor();
  outlined init with copy of String(v3, v8);
  v4 = GPKGroupID.hexString.getter();
  v8[5] = MEMORY[0x24BEE0D00];
  v8[2] = v4;
  v8[3] = v5;
  _finalizeUninitializedArray<A>(_:)();
  v13 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(_QWORD *)&v11 = v13;
  outlined assign with take of Any?(&v11, (uint64_t)v15);
  swift_bridgeObjectRelease();
  outlined init with copy of InitGPKUpdateGroupRequest((uint64_t)v15, a2);
  v6 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1);
  return outlined destroy of InitGPKUpdateGroupRequest((uint64_t)v15);
}

uint64_t outlined init with copy of InitGPKUpdateGroupRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t outlined destroy of InitGPKUpdateGroupRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t InitGPKUpdateGroupRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initUpdateGroup.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in InitGPKUpdateGroupRequest()
{
  return lazy protocol witness table accessor for type InitGPKUpdateGroupRequest.Response and conformance InitGPKUpdateGroupRequest.Response();
}

unint64_t lazy protocol witness table accessor for type InitGPKUpdateGroupRequest.Response and conformance InitGPKUpdateGroupRequest.Response()
{
  uint64_t inited;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response and conformance InitGPKUpdateGroupRequest.Response;
  if (!lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response and conformance InitGPKUpdateGroupRequest.Response)
  {
    inited = type metadata accessor for InitGPKUpdateGroupRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for InitGPKUpdateGroupRequest.Response, inited);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InitGPKUpdateGroupRequest.Response and conformance InitGPKUpdateGroupRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance InitGPKUpdateGroupRequest()
{
  return InitGPKUpdateGroupRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance InitGPKUpdateGroupRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance InitGPKUpdateGroupRequest@<X0>(uint64_t a1@<X8>)
{
  return InitGPKUpdateGroupRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance InitGPKUpdateGroupRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for InitGPKUpdateGroupRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for InitGPKUpdateGroupRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for InitGPKUpdateGroupRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for InitGPKUpdateGroupRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for InitGPKUpdateGroupRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InitGPKUpdateGroupRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InitGPKUpdateGroupRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitGPKUpdateGroupRequest()
{
  return &type metadata for InitGPKUpdateGroupRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for InitGPKUpdateGroupRequest.Response(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v14;

  v14 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v14 & 0x20000) != 0)
  {
    v9 = *a2;
    swift_retain();
    *a1 = v9;
    return *a1 + ((v14 + 16) & ~(unint64_t)v14);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v7 = (_QWORD *)((char *)a1 + *(int *)(a3 + 20));
    v4 = (uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v6 = *v4;
    v8 = v4[1];
    outlined copy of Data._Representation(*v4, v8);
    *v7 = v6;
    v7[1] = v8;
    return (unint64_t)a1;
  }
}

uint64_t destroy for InitGPKUpdateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for InitGPKUpdateGroupRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a2 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  result = a1;
  v5 = (uint64_t *)(a1 + v8);
  *v5 = v9;
  v5[1] = v10;
  return result;
}

uint64_t assignWithCopy for InitGPKUpdateGroupRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v10 = *(int *)(a3 + 20);
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a2 + v10 + 8);
  outlined copy of Data._Representation(v11, v12);
  v4 = (uint64_t *)(a1 + v10);
  v5 = *(_QWORD *)(a1 + v10);
  v6 = *(_QWORD *)(a1 + v10 + 8);
  *v4 = v11;
  v4[1] = v12;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

__n128 initializeWithTake for InitGPKUpdateGroupRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = *(__n128 *)(a2 + *(int *)(a3 + 20));
  *(__n128 *)(a1 + *(int *)(a3 + 20)) = result;
  return result;
}

uint64_t assignWithTake for InitGPKUpdateGroupRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + *(int *)(a3 + 20));
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitGPKUpdateGroupRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4E9BDC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for InitGPKUpdateGroupRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D4E9CD8(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 12)
  {
    v5 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v5 = 0;
    v5[1] = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for InitGPKUpdateGroupRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for InitGPKUpdateGroupRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for InitGPKUpdateGroupRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for InitGPKUpdateGroupRequest.Response.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for InitGPKUpdateGroupRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InitGPKUpdateGroupRequest.Response.CodingKeys()
{
  return &type metadata for InitGPKUpdateGroupRequest.Response.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in InitGPKUpdateGroupRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in InitGPKUpdateGroupRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in InitGPKUpdateGroupRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitGPKUpdateGroupRequest.Response.CodingKeys and conformance InitGPKUpdateGroupRequest.Response.CodingKeys();
}

Swift::Double *hardTTLDefaultValue.unsafeMutableAddressor()
{
  return &hardTTLDefaultValue;
}

Swift::Double *softTTLDefaultValue.unsafeMutableAddressor()
{
  return &softTTLDefaultValue;
}

uint64_t GroupKitUserLookupManager.userStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserStore(v1 + 16, a1);
}

uint64_t GroupKitUserLookupManager.keyDistributionService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of KeyDistributionServiceProviding(v1 + 56, a1);
}

uint64_t GroupKitUserLookupManager.dateFactory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DateFactory(v1 + 96, a1);
}

double GroupKitUserLookupManager.hardTTL.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 136);
}

double GroupKitUserLookupManager.softTTL.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 144);
}

uint64_t GroupKitUserLookupManager.featureFlags.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of FeatureChecking(v1 + 152, a1);
}

double default argument 4 of GroupKitUserLookupManager.init(userStore:keyDistributionService:dateFactory:featureFlags:hardTTL:softTTL:)()
{
  return 604800.0;
}

double default argument 5 of GroupKitUserLookupManager.init(userStore:keyDistributionService:dateFactory:featureFlags:hardTTL:softTTL:)()
{
  return 28800.0;
}

uint64_t GroupKitUserLookupManager.__allocating_init(userStore:keyDistributionService:dateFactory:featureFlags:hardTTL:softTTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  swift_allocObject();
  return GroupKitUserLookupManager.init(userStore:keyDistributionService:dateFactory:featureFlags:hardTTL:softTTL:)(a1, a2, a3, a4, a5, a6);
}

uint64_t GroupKitUserLookupManager.init(userStore:keyDistributionService:dateFactory:featureFlags:hardTTL:softTTL:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  double *v6;
  uint64_t v14;
  _BYTE v15[40];
  _BYTE v16[40];
  _BYTE v17[40];
  _BYTE v18[40];
  double *v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a1;
  v24 = a2;
  v23 = a3;
  v22 = a4;
  v21 = a5;
  v20 = a6;
  v19 = v6;
  outlined init with copy of UserStore(a1, (uint64_t)v18);
  outlined init with take of UserStore(v18, v6 + 2);
  outlined init with copy of KeyDistributionServiceProviding(a2, (uint64_t)v17);
  outlined init with take of KeyDistributionServiceProviding(v17, v6 + 7);
  outlined init with copy of DateFactory(a3, (uint64_t)v16);
  outlined init with take of DateFactory(v16, v6 + 12);
  outlined init with copy of FeatureChecking(a4, (uint64_t)v15);
  outlined init with take of FeatureChecking(v15, v6 + 19);
  v6[17] = a5;
  v6[18] = a6;
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v14;
}

BOOL GroupKitUserLookupManager.isKeyRegistered.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v9;
  Builtin::Word v10;
  void *v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  Swift::String v19;
  uint64_t v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t countAndFlagsBits;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  void *v34;
  void *object;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  char v46[8];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = 0;
  v44 = 0;
  v32 = type metadata accessor for LogSubsystem();
  v30 = *(_QWORD *)(v32 - 8);
  v25 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v31 = (uint64_t)&v9 - v25;
  v49 = v0;
  v26 = 1;
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Check if key registered", 0x17uLL, 1);
  countAndFlagsBits = v1._countAndFlagsBits;
  object = v1._object;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, v26 & 1);
  v29 = v2._countAndFlagsBits;
  v34 = v2._object;
  v28 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v31);
  gpklog(_:type:fileID:line:subsystem:)();
  v33 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v33(v31, v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = v46;
  outlined init with copy of UserStore(v0 + 16, (uint64_t)v46);
  v38 = v47;
  v37 = v48;
  __swift_project_boxed_opaque_existential_1(v36, v47);
  v39 = (*(uint64_t (**)(uint64_t))(v37 + 40))(v38);
  v40 = 0;
  v23 = v39;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v24 = v23;
  v45 = v23;
  v22 = v23 != 0;
  v21 = v22;
  outlined destroy of GPKUser?();
  v16 = 1;
  v44 = v21;
  v10 = 19;
  v3 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v13 = &v42;
  v42 = v3;
  v43 = v4;
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Is key registered: ", v10, v16 & 1);
  v11 = v5._object;
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  v41 = v21 & v16;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v16 & 1);
  v12 = v6._object;
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  v15 = v42;
  v14 = v43;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v17 = String.init(stringInterpolation:)();
  v20 = v7;
  v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, v16 & 1);
  v18 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v31);
  gpklog(_:type:fileID:line:subsystem:)();
  v33(v31, v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t GroupKitUserLookupManager.resolve(handles:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 40) = v3;
  *v3 = *(_QWORD *)(v5 + 16);
  v3[1] = GroupKitUserLookupManager.resolve(handles:);
  return GroupKitUserLookupManager.resolve(handles:ignoreCache:)(a1, 0);
}

_QWORD *GroupKitUserLookupManager.resolve(handles:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = *v3;
  v7 = (_QWORD *)(v4 + 16);
  v5 = swift_task_dealloc();
  if (v2)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v5);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*v7 + 8))(v7, a1, a2);
}

uint64_t GroupKitUserLookupManager.resolve(handles:ignoreCache:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 504) = v2;
  *(_BYTE *)(v3 + 665) = a2 & 1;
  *(_QWORD *)(v3 + 496) = a1;
  *(_QWORD *)(v3 + 408) = v3;
  *(_QWORD *)(v3 + 416) = 0;
  *(_BYTE *)(v3 + 664) = 0;
  *(_QWORD *)(v3 + 424) = 0;
  *(_QWORD *)(v3 + 432) = 0;
  *(_QWORD *)(v3 + 440) = 0;
  memset((void *)(v3 + 96), 0, 0x28uLL);
  *(_QWORD *)(v3 + 464) = 0;
  *(_QWORD *)(v3 + 480) = 0;
  memset((void *)(v3 + 136), 0, 0x28uLL);
  *(_QWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  type metadata accessor for KeyFetchResult();
  *(_QWORD *)(v3 + 512) = swift_task_alloc();
  *(_QWORD *)(v3 + 520) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  *(_QWORD *)(v3 + 528) = swift_task_alloc();
  *(_QWORD *)(v3 + 536) = swift_task_alloc();
  *(_QWORD *)(v3 + 544) = type metadata accessor for KeyFetchType();
  *(_QWORD *)(v3 + 552) = swift_task_alloc();
  *(_QWORD *)(v3 + 560) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: KeyFetchType, value: Result<KeyFetchResult, Error>)?);
  *(_QWORD *)(v3 + 568) = swift_task_alloc();
  *(_QWORD *)(v3 + 576) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  *(_QWORD *)(v3 + 584) = swift_task_alloc();
  v4 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v3 + 592) = v4;
  *(_QWORD *)(v3 + 600) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 608) = swift_task_alloc();
  *(_QWORD *)(v3 + 416) = a1;
  *(_BYTE *)(v3 + 664) = a2 & 1;
  *(_QWORD *)(v3 + 424) = v2;
  return swift_task_switch();
}

uint64_t GroupKitUserLookupManager.resolve(handles:ignoreCache:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  unint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = v0[62];
  v0[51] = v0;
  swift_bridgeObjectRetain();
  v0[54] = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, GPKUserID));
  _allocateUninitializedArray<A>(_:)();
  v30 = type metadata accessor for GPKUserID();
  v0[77] = v30;
  v0[55] = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  Set.makeIterator()();
  memcpy(v0 + 12, v0 + 7, 0x28uLL);
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>.Iterator);
    Set.Iterator.next()();
    v27 = *(_QWORD *)(v29 + 216);
    v28 = *(_QWORD *)(v29 + 224);
    if (!v28)
      break;
    v1 = *(_QWORD *)(v29 + 504);
    *(_QWORD *)(v29 + 312) = v27;
    *(_QWORD *)(v29 + 320) = v28;
    outlined init with copy of UserStore(v1 + 16, v29 + 176);
    v24 = *(_QWORD *)(v29 + 200);
    v25 = *(_QWORD *)(v29 + 208);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v29 + 176), v24);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v27, v28, v24);
    __swift_destroy_boxed_opaque_existential_1(v29 + 176);
    if (v26)
    {
      v21 = *(_QWORD *)(v29 + 608);
      v20 = *(_QWORD *)(v29 + 600);
      v22 = *(_QWORD *)(v29 + 592);
      v23 = *(_QWORD *)(v29 + 584);
      *(_QWORD *)(v29 + 488) = v26;
      *(_QWORD *)(v29 + 328) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v29 + 336) = v2;
      v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Existing user found in local database with available status: ", 0x3DuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v3);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v29 + 344) = v27;
      *(_QWORD *)(v29 + 352) = v28;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      GPKUser.userID.getter();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v23, 0, 1);
      *(_QWORD *)(v29 + 360) = v27;
      *(_QWORD *)(v29 + 368) = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKUserID]);
      Dictionary.subscript.setter();
      *(_QWORD *)(v29 + 392) = v27;
      *(_QWORD *)(v29 + 400) = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
      Set.remove(_:)();
      swift_bridgeObjectRelease();
      swift_release();
    }
    swift_bridgeObjectRelease();
  }
  v17 = *(_QWORD *)(v29 + 544);
  outlined destroy of Set<String>.Iterator();
  v15 = *(_QWORD *)(v29 + 432);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v29 + 448) = v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  *(_QWORD *)(v29 + 624) = v16;
  v5 = lazy protocol witness table accessor for type Set<String> and conformance Set<A>();
  v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GroupKitUserLookupManager.resolve(handles:ignoreCache:), 0, v16, v17, MEMORY[0x24BEE4078], v5, MEMORY[0x24BEE40A8], v18);
  v12 = *(_QWORD *)(v29 + 608);
  v11 = *(_QWORD *)(v29 + 600);
  v13 = *(_QWORD *)(v29 + 592);
  outlined destroy of Set<String>();
  *(_QWORD *)(v29 + 456) = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType]);
  *(_QWORD *)(v29 + 632) = lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  lazy protocol witness table accessor for type [KeyFetchType] and conformance [A]();
  v14 = Set.init<A>(_:)();
  *(_QWORD *)(v29 + 640) = v14;
  *(_QWORD *)(v29 + 464) = v14;
  *(_QWORD *)(v29 + 232) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v29 + 240) = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Handles to fetch from lookup services ", 0x26uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v29 + 472) = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<KeyFetchType>);
  lazy protocol witness table accessor for type Set<KeyFetchType> and conformance Set<A>();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v29 + 648) = v9;
  *v9 = *(_QWORD *)(v29 + 408);
  v9[1] = GroupKitUserLookupManager.resolve(handles:ignoreCache:);
  return GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)(v14, *(_BYTE *)(v29 + 665) & 1);
}

{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t *v3;
  id *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0[82];
  v0[51] = v0;
  v0[60] = v1;
  swift_bridgeObjectRetain();
  Dictionary.makeIterator()();
  memcpy(v0 + 17, v0 + 2, 0x28uLL);
  while (1)
  {
    v21 = *(char **)(v23 + 576);
    v20 = *(char **)(v23 + 568);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>].Iterator);
    Dictionary.Iterator.next()();
    outlined init with take of (key: KeyFetchType, value: Result<KeyFetchResult, Error>)?(v20, v21);
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: KeyFetchType, value: Result<KeyFetchResult, Error>));
    if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1) == 1)
      break;
    v2 = *(char **)(v23 + 576);
    v18 = *(_QWORD **)(v23 + 560);
    v19 = *(_QWORD **)(v23 + 552);
    v16 = *(char **)(v23 + 536);
    v17 = &v2[*(int *)(v22 + 48)];
    outlined init with take of KeyFetchType(v2, v18);
    outlined init with take of Result<KeyFetchResult, Error>(v17, v16);
    outlined init with copy of KeyFetchType(v18, v19);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v3 = *(uint64_t **)(v23 + 552);
      v4 = *(id **)(v23 + 536);
      v15 = *(_QWORD **)(v23 + 528);
      v13 = *v3;
      v14 = v3[1];
      *(_QWORD *)(v23 + 248) = *v3;
      *(_QWORD *)(v23 + 256) = v14;
      outlined init with copy of Result<KeyFetchResult, Error>(v4, v15);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined destroy of Result<KeyFetchResult, Error>(*(id **)(v23 + 528));
      }
      else
      {
        v10 = *(_QWORD *)(v23 + 616);
        v11 = *(_QWORD *)(v23 + 584);
        v12 = *(_QWORD *)(v23 + 512);
        outlined init with take of KeyFetchResult(*(_QWORD *)(v23 + 528), v12);
        swift_bridgeObjectRetain();
        v9 = *(_QWORD *)(v10 - 8);
        (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v11, v12);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v10);
        *(_QWORD *)(v23 + 264) = v13;
        *(_QWORD *)(v23 + 272) = v14;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKUserID]);
        Dictionary.subscript.setter();
        *(_QWORD *)(v23 + 296) = v13;
        *(_QWORD *)(v23 + 304) = v14;
        Set.remove(_:)();
        swift_bridgeObjectRelease();
        outlined destroy of KeyFetchResult(v12);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of KeyFetchType(*(_QWORD *)(v23 + 552));
    }
    v8 = *(_QWORD *)(v23 + 560);
    outlined destroy of Result<KeyFetchResult, Error>(*(id **)(v23 + 536));
    outlined destroy of KeyFetchType(v8);
  }
  outlined destroy of [KeyFetchType : Result<KeyFetchResult, Error>].Iterator();
  v6 = *(_QWORD *)(v23 + 440);
  swift_bridgeObjectRetain();
  v7 = *(_QWORD *)(v23 + 432);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [String : GPKUserID]();
  outlined destroy of Set<String>();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 + 408) + 8))(v6, v7);
}

uint64_t GroupKitUserLookupManager.resolve(handles:ignoreCache:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 408) = *v1;
  *(_QWORD *)(v3 + 656) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Set<String>.Iterator()
{
  outlined consume of Set<String>.Iterator._Variant();
}

uint64_t outlined consume of Set<String>.Iterator._Variant()
{
  return swift_release();
}

uint64_t closure #1 in GroupKitUserLookupManager.resolve(handles:ignoreCache:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  *a2 = v3;
  a2[1] = v4;
  type metadata accessor for KeyFetchType();
  return swift_storeEnumTagMultiPayload();
}

unint64_t lazy protocol witness table accessor for type [KeyFetchType] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [KeyFetchType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [KeyFetchType] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [KeyFetchType]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [KeyFetchType] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [KeyFetchType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [KeyFetchType] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [KeyFetchType]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [KeyFetchType] and conformance [A]);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type Set<KeyFetchType> and conformance Set<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Set<KeyFetchType> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<KeyFetchType> and conformance Set<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<KeyFetchType>);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE1730], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Set<KeyFetchType> and conformance Set<A>);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Set<KeyFetchType> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<KeyFetchType> and conformance Set<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<KeyFetchType>);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE1728], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Set<KeyFetchType> and conformance Set<A>);
    return v1;
  }
  return v3;
}

uint64_t GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 296) = v2;
  *(_BYTE *)(v3 + 457) = a2 & 1;
  *(_QWORD *)(v3 + 288) = a1;
  *(_QWORD *)(v3 + 176) = v3;
  *(_QWORD *)(v3 + 184) = 0;
  *(_BYTE *)(v3 + 456) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 264) = 0;
  memset((void *)(v3 + 56), 0, 0x28uLL);
  *(_QWORD *)(v3 + 272) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v3 + 304) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>?);
  *(_QWORD *)(v3 + 312) = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  *(_QWORD *)(v3 + 320) = v4;
  *(_QWORD *)(v3 + 328) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 336) = swift_task_alloc();
  *(_QWORD *)(v3 + 344) = type metadata accessor for KeyFetchType();
  *(_QWORD *)(v3 + 352) = swift_task_alloc();
  *(_QWORD *)(v3 + 360) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: KeyFetchType, value: Result<KeyFetchResult, Error>)?);
  *(_QWORD *)(v3 + 368) = swift_task_alloc();
  *(_QWORD *)(v3 + 376) = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v3 + 384) = v5;
  *(_QWORD *)(v3 + 392) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 400) = swift_task_alloc();
  *(_QWORD *)(v3 + 184) = a1;
  *(_BYTE *)(v3 + 456) = a2 & 1;
  *(_QWORD *)(v3 + 192) = v2;
  return swift_task_switch();
}

uint64_t GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  char v32;

  v29 = *(_QWORD *)(v0 + 400);
  v28 = *(_QWORD *)(v0 + 392);
  v30 = *(_QWORD *)(v0 + 384);
  v32 = *(_BYTE *)(v0 + 457);
  v27 = *(_QWORD *)(v0 + 288);
  *(_QWORD *)(v0 + 176) = v0;
  *(_QWORD *)(v0 + 96) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 104) = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fetching keys for items ", 0x18uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 200) = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<KeyFetchType>);
  lazy protocol witness table accessor for type Set<KeyFetchType> and conformance Set<A>();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v29);
  gpklog(_:type:fileID:line:subsystem:)();
  v31 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  *(_QWORD *)(v0 + 408) = v31;
  v31(v29, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v32 & 1) != 0)
  {
    v24 = v26[50];
    v25 = v26[48];
    v23 = v26[36];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (KeyFetchType, Result<KeyFetchResult, Error>));
    _allocateUninitializedArray<A>(_:)();
    lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
    v26[26] = Dictionary.init(dictionaryLiteral:)();
    _allocateUninitializedArray<A>(_:)();
    v26[27] = Set.init(arrayLiteral:)();
    swift_bridgeObjectRetain();
    v26[28] = v23;
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Ignoring cached keys, refreshing from server", 0x2CuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v24);
    gpklog(_:type:fileID:line:subsystem:)();
    v31(v24, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v26[26] = GroupKitUserLookupManager.getCachedKeys(for:)(v26[36]);
    v26[27] = v4;
    v26[28] = v5;
  }
  v20 = v26[50];
  v21 = v26[48];
  v26[14] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v26[15] = v6;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("found cached keys: ", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  v17 = v26[26];
  swift_bridgeObjectRetain();
  v26[29] = v17;
  v26[52] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>]);
  v26[53] = lazy protocol witness table accessor for type [KeyFetchType : Result<KeyFetchResult, Error>] and conformance [A : B]();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [KeyFetchType : Result<KeyFetchResult, Error>]();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
  gpklog(_:type:fileID:line:subsystem:)();
  v31(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26[16] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v26[17] = v9;
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("itemsToBackgroundRefresh: ", 0x1AuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v10);
  swift_bridgeObjectRelease();
  v18 = v26[27];
  swift_bridgeObjectRetain();
  v26[30] = v18;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of Set<KeyFetchType>();
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
  gpklog(_:type:fileID:line:subsystem:)();
  v31(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26[18] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v26[19] = v12;
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("itemsToImmediatelyRefresh: ", 0x1BuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease();
  v19 = v26[28];
  swift_bridgeObjectRetain();
  v26[31] = v19;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of Set<KeyFetchType>();
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
  gpklog(_:type:fileID:line:subsystem:)();
  v31(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of [KeyFetchType : Result<KeyFetchResult, Error>](v26 + 26, v26 + 32);
  v22 = v26[28];
  v26[54] = v22;
  swift_bridgeObjectRetain();
  v15 = (_QWORD *)swift_task_alloc();
  v26[55] = v15;
  *v15 = v26[22];
  v15[1] = GroupKitUserLookupManager.fetchKeys(for:ignoreCache:);
  return GroupKitUserLookupManager.fetchKeysFromServer(for:)(v22);
}

{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0[56];
  v0[22] = v0;
  v0[33] = v1;
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  Dictionary.makeIterator()();
  memcpy(v0 + 7, v0 + 2, 0x28uLL);
  while (1)
  {
    v26 = *(char **)(v28 + 376);
    v25 = *(char **)(v28 + 368);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>].Iterator);
    Dictionary.Iterator.next()();
    outlined init with take of (key: KeyFetchType, value: Result<KeyFetchResult, Error>)?(v25, v26);
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: KeyFetchType, value: Result<KeyFetchResult, Error>));
    if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1) == 1)
      break;
    v2 = *(char **)(v28 + 376);
    v24 = *(_QWORD **)(v28 + 360);
    v22 = *(_QWORD **)(v28 + 352);
    v23 = *(char **)(v28 + 336);
    v19 = *(_QWORD *)(v28 + 328);
    v20 = *(_QWORD *)(v28 + 320);
    v21 = *(_QWORD **)(v28 + 312);
    v18 = &v2[*(int *)(v27 + 48)];
    outlined init with take of KeyFetchType(v2, v24);
    outlined init with take of Result<KeyFetchResult, Error>(v18, v23);
    outlined init with copy of KeyFetchType(v24, v22);
    outlined init with copy of Result<KeyFetchResult, Error>((id *)v23, v21);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, v20);
    Dictionary.subscript.setter();
    GroupKitUserLookupManager.cacheResult(_:for:)((id *)v23, v24);
    v17 = *(_QWORD *)(v28 + 360);
    outlined destroy of Result<KeyFetchResult, Error>(*(id **)(v28 + 336));
    outlined destroy of KeyFetchType(v17);
  }
  v12 = *(void (**)(uint64_t, uint64_t))(v28 + 408);
  v14 = *(_QWORD *)(v28 + 400);
  v11 = *(_QWORD *)(v28 + 384);
  v15 = *(_QWORD *)(v28 + 304);
  v9 = *(_QWORD *)(v28 + 296);
  outlined destroy of [KeyFetchType : Result<KeyFetchResult, Error>].Iterator();
  v13 = *(_QWORD *)(v28 + 216);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v28 + 272) = v13;
  v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v15, 1);
  swift_bridgeObjectRetain();
  swift_retain();
  v4 = (_QWORD *)swift_allocObject();
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = v13;
  v4[5] = v9;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v15, (uint64_t)&async function pointer to partial apply for closure #1 in GroupKitUserLookupManager.fetchKeys(for:ignoreCache:), (uint64_t)v4, MEMORY[0x24BEE4AE0] + 8);
  swift_release();
  *(_QWORD *)(v28 + 160) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v28 + 168) = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("final results fetching keys ", 0x1CuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v28 + 256);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v28 + 280) = v10;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [KeyFetchType : Result<KeyFetchResult, Error>]();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
  gpklog(_:type:fileID:line:subsystem:)();
  v12(v14, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v28 + 256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [KeyFetchType : Result<KeyFetchResult, Error>]();
  outlined destroy of Set<KeyFetchType>();
  outlined destroy of Set<KeyFetchType>();
  outlined destroy of [KeyFetchType : Result<KeyFetchResult, Error>]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v28 + 176) + 8))(v16);
}

uint64_t GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 176) = *v1;
  *(_QWORD *)(v3 + 448) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

char *outlined init with take of (key: KeyFetchType, value: Result<KeyFetchResult, Error>)?(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *__dst;
  char *__src;
  uint64_t v9;
  uint64_t Type;
  uint64_t v13;
  uint64_t v14;

  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: KeyFetchType, value: Result<KeyFetchResult, Error>));
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 48))(a1, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: KeyFetchType, value: Result<KeyFetchResult, Error>)?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    Type = type metadata accessor for KeyFetchType();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(Type - 8) + 64));
    }
    else
    {
      v2 = type metadata accessor for GPKUserID();
      (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
      swift_storeEnumTagMultiPayload();
    }
    __dst = &a2[*(int *)(v13 + 48)];
    __src = &a1[*(int *)(v13 + 48)];
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v3 = type metadata accessor for GPKUserID();
      (*(void (**)(char *, char *))(*(_QWORD *)(v3 - 8) + 32))(__dst, __src);
      v4 = type metadata accessor for KeyFetchResult();
      memcpy(&__dst[*(int *)(v4 + 20)], &__src[*(int *)(v4 + 20)], 0x88uLL);
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  return a2;
}

char *outlined init with take of Result<KeyFetchResult, Error>(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v2 = type metadata accessor for GPKUserID();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
    v3 = type metadata accessor for KeyFetchResult();
    memcpy(&a2[*(int *)(v3 + 20)], &a1[*(int *)(v3 + 20)], 0x88uLL);
    swift_storeEnumTagMultiPayload();
  }
  return a2;
}

id *outlined destroy of Result<KeyFetchResult, Error>(id *a1)
{
  uint64_t v1;
  char *v3;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {

  }
  else
  {
    v1 = type metadata accessor for GPKUserID();
    (*(void (**)(id *))(*(_QWORD *)(v1 - 8) + 8))(a1);
    v3 = (char *)a1 + *(int *)(type metadata accessor for KeyFetchResult() + 20);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(*((_QWORD *)v3 + 2), *((_QWORD *)v3 + 3));
    outlined consume of Data._Representation(*((_QWORD *)v3 + 4), *((_QWORD *)v3 + 5));
    outlined consume of Data._Representation(*((_QWORD *)v3 + 6), *((_QWORD *)v3 + 7));
    outlined consume of Data._Representation(*((_QWORD *)v3 + 8), *((_QWORD *)v3 + 9));
    swift_bridgeObjectRelease();
    if ((*((_QWORD *)v3 + 14) & 0xF000000000000000) != 0xF000000000000000)
      outlined consume of Data._Representation(*((_QWORD *)v3 + 13), *((_QWORD *)v3 + 14));
    swift_bridgeObjectRelease();
  }
  return a1;
}

_QWORD *outlined init with copy of Result<KeyFetchResult, Error>(id *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = *a1;
    v4 = *a1;
    *a2 = v6;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v2 = type metadata accessor for GPKUserID();
    (*(void (**)(_QWORD *, id *))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
    v3 = type metadata accessor for KeyFetchResult();
    v19 = (char *)a2 + *(int *)(v3 + 20);
    v21 = (char *)a1 + *(int *)(v3 + 20);
    *(_QWORD *)v19 = *(_QWORD *)v21;
    v10 = *((_QWORD *)v21 + 1);
    swift_bridgeObjectRetain();
    *((_QWORD *)v19 + 1) = v10;
    v11 = *((_QWORD *)v21 + 2);
    v12 = *((_QWORD *)v21 + 3);
    outlined copy of Data._Representation(v11, v12);
    *((_QWORD *)v19 + 2) = v11;
    *((_QWORD *)v19 + 3) = v12;
    v13 = *((_QWORD *)v21 + 4);
    v14 = *((_QWORD *)v21 + 5);
    outlined copy of Data._Representation(v13, v14);
    *((_QWORD *)v19 + 4) = v13;
    *((_QWORD *)v19 + 5) = v14;
    v15 = *((_QWORD *)v21 + 6);
    v16 = *((_QWORD *)v21 + 7);
    outlined copy of Data._Representation(v15, v16);
    *((_QWORD *)v19 + 6) = v15;
    *((_QWORD *)v19 + 7) = v16;
    v17 = *((_QWORD *)v21 + 8);
    v18 = *((_QWORD *)v21 + 9);
    outlined copy of Data._Representation(v17, v18);
    *((_QWORD *)v19 + 8) = v17;
    *((_QWORD *)v19 + 9) = v18;
    *((_DWORD *)v19 + 20) = *((_DWORD *)v21 + 20);
    *((_QWORD *)v19 + 11) = *((_QWORD *)v21 + 11);
    v20 = *((_QWORD *)v21 + 12);
    swift_bridgeObjectRetain();
    *((_QWORD *)v19 + 12) = v20;
    if ((*((_QWORD *)v21 + 14) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(v19 + 104) = *(_OWORD *)(v21 + 104);
    }
    else
    {
      v8 = *((_QWORD *)v21 + 13);
      v9 = *((_QWORD *)v21 + 14);
      outlined copy of Data._Representation(v8, v9);
      *((_QWORD *)v19 + 13) = v8;
      *((_QWORD *)v19 + 14) = v9;
    }
    *((_QWORD *)v19 + 15) = *((_QWORD *)v21 + 15);
    v7 = *((_QWORD *)v21 + 16);
    swift_bridgeObjectRetain();
    *((_QWORD *)v19 + 16) = v7;
    swift_storeEnumTagMultiPayload();
  }
  return a2;
}

uint64_t outlined init with take of KeyFetchResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  v3 = type metadata accessor for KeyFetchResult();
  memcpy((void *)(a2 + *(int *)(v3 + 20)), (const void *)(a1 + *(int *)(v3 + 20)), 0x88uLL);
  return a2;
}

uint64_t outlined destroy of KeyFetchResult(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v4 = *(int *)(type metadata accessor for KeyFetchResult() + 20);
  v5 = a1 + v4;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
  outlined consume of Data._Representation(*(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56));
  outlined consume of Data._Representation(*(_QWORD *)(v5 + 64), *(_QWORD *)(v5 + 72));
  swift_bridgeObjectRelease();
  if ((*(_QWORD *)(a1 + v4 + 112) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v4 + 104), *(_QWORD *)(a1 + v4 + 112));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t GroupKitUserLookupManager.resolveUsers(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[57] = v1;
  v2[56] = a1;
  v2[35] = v2;
  v2[36] = 0;
  v2[37] = 0;
  v2[39] = 0;
  v2[19] = 0;
  v2[20] = 0;
  v2[42] = 0;
  v2[45] = 0;
  v2[47] = 0;
  memset(v2 + 7, 0, 0x28uLL);
  v2[25] = 0;
  v2[26] = 0;
  v2[51] = 0;
  v2[52] = 0;
  v2[53] = 0;
  v2[55] = 0;
  v3 = type metadata accessor for InternalErrorCode();
  v2[58] = v3;
  v2[59] = *(_QWORD *)(v3 - 8);
  v2[60] = swift_task_alloc();
  type metadata accessor for KeyFetchResult();
  v2[61] = swift_task_alloc();
  v2[62] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  v2[63] = swift_task_alloc();
  v2[64] = swift_task_alloc();
  v2[65] = type metadata accessor for KeyFetchType();
  v2[66] = swift_task_alloc();
  v2[67] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: KeyFetchType, value: Result<KeyFetchResult, Error>)?);
  v2[68] = swift_task_alloc();
  v2[69] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v2[70] = swift_task_alloc();
  v2[71] = swift_task_alloc();
  v4 = type metadata accessor for LogSubsystem();
  v2[72] = v4;
  v2[73] = *(_QWORD *)(v4 - 8);
  v2[74] = swift_task_alloc();
  v2[36] = a1;
  v2[37] = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 280) = *v1;
  *(_QWORD *)(v3 + 640) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GroupKitUserLookupManager.resolveUsers(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;

  v38 = v0[74];
  v37 = v0[73];
  v39 = v0[72];
  v41 = v0[56];
  v0[35] = v0;
  v0[17] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[18] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Beginning to resolve users for members ", 0x27uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[38] = v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMember]);
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v38);
  gpklog(_:type:fileID:line:subsystem:)();
  v40 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  v0[75] = v40;
  v40(v38, v39);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[76] = type metadata accessor for GPKMember();
  v0[39] = Dictionary.init()();
  swift_bridgeObjectRetain();
  v0[40] = v41;
  lazy protocol witness table accessor for type [GPKMember] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[GPKMember]>);
    IndexingIterator.next()();
    v35 = v36[41];
    if (!v35)
      break;
    v32 = v36[71];
    v36[53] = v35;
    dispatch thunk of GPKMember.userID.getter();
    v33 = type metadata accessor for GPKUserID();
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v34 + 48))(v32, 1) == 1)
    {
      outlined destroy of GPKUserID?(v36[71]);
      outlined init with copy of UserStore(v36[57] + 16, (uint64_t)(v36 + 12));
      v30 = v36[16];
      __swift_project_boxed_opaque_existential_1(v36 + 12, v36[15]);
      v4 = dispatch thunk of GPKMember.handle.getter();
      v31 = (*(uint64_t (**)(uint64_t))(v30 + 16))(v4);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v36 + 12));
      if (v31)
      {
        v27 = v36[74];
        v28 = v36[72];
        v29 = v36[70];
        v36[55] = v31;
        v36[31] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v36[32] = v5;
        v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Existing user found in local database with available status: ", 0x3DuLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v6);
        swift_bridgeObjectRelease();
        v36[33] = dispatch thunk of GPKMember.handle.getter();
        v36[34] = v7;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String();
        v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v27);
        gpklog(_:type:fileID:line:subsystem:)();
        v40(v27, v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        GPKUser.userID.getter();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v29, 0, 1, v33);
        dispatch thunk of GPKMember.userID.setter();
        swift_release();
      }
      else
      {
        v25 = dispatch thunk of GPKMember.handle.getter();
        v26 = v9;
        swift_retain();
        v36[54] = v35;
        v36[29] = v25;
        v36[30] = v26;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember]);
        Dictionary.subscript.setter();
      }
      swift_release();
    }
    else
    {
      outlined destroy of GPKUserID?(v36[71]);
      swift_release();
    }
  }
  v22 = v36[65];
  outlined destroy of IndexingIterator<[GPKMember]>();
  v36[42] = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  v20 = swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36[43] = v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : GPKMember].Keys);
  v10 = lazy protocol witness table accessor for type [String : GPKMember].Keys and conformance [A : B].Keys();
  v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GroupKitUserLookupManager.resolveUsers(for:), 0, v21, v22, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v23);
  v16 = v36[74];
  v17 = v36[72];
  outlined destroy of [String : GPKMember].Keys();
  v36[44] = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType]);
  v36[77] = lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  lazy protocol witness table accessor for type [KeyFetchType] and conformance [A]();
  v19 = Set.init<A>(_:)();
  v36[78] = v19;
  v36[45] = v19;
  v36[21] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v36[22] = v11;
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Handles to fetch from lookup services ", 0x26uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease();
  v36[46] = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<KeyFetchType>);
  lazy protocol witness table accessor for type Set<KeyFetchType> and conformance Set<A>();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v16);
  gpklog(_:type:fileID:line:subsystem:)();
  v40(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = default argument 1 of GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)();
  v14 = (_QWORD *)swift_task_alloc();
  v36[79] = v14;
  *v14 = v36[35];
  v14[1] = GroupKitUserLookupManager.resolveUsers(for:);
  return GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)(v19, v18 & 1);
}

{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t *v3;
  id *v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v1 = v0[80];
  v0[35] = v0;
  v0[47] = v1;
  swift_bridgeObjectRetain();
  Dictionary.makeIterator()();
  memcpy(v0 + 7, v0 + 2, 0x28uLL);
  while (1)
  {
    v38 = *(char **)(v40 + 552);
    v37 = *(char **)(v40 + 544);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>].Iterator);
    Dictionary.Iterator.next()();
    outlined init with take of (key: KeyFetchType, value: Result<KeyFetchResult, Error>)?(v37, v38);
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: KeyFetchType, value: Result<KeyFetchResult, Error>));
    if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v38, 1) == 1)
      break;
    v2 = *(char **)(v40 + 552);
    v35 = *(_QWORD **)(v40 + 536);
    v36 = *(_QWORD **)(v40 + 528);
    v33 = *(char **)(v40 + 512);
    v34 = &v2[*(int *)(v39 + 48)];
    outlined init with take of KeyFetchType(v2, v35);
    outlined init with take of Result<KeyFetchResult, Error>(v34, v33);
    outlined init with copy of KeyFetchType(v35, v36);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v3 = *(uint64_t **)(v40 + 528);
      v30 = *v3;
      v31 = v3[1];
      *(_QWORD *)(v40 + 200) = *v3;
      *(_QWORD *)(v40 + 208) = v31;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v40 + 216) = v30;
      *(_QWORD *)(v40 + 224) = v31;
      MEMORY[0x24263485C]();
      outlined destroy of String();
      v32 = *(_QWORD *)(v40 + 400);
      if (v32)
      {
        v4 = *(id **)(v40 + 512);
        v29 = *(_QWORD **)(v40 + 504);
        *(_QWORD *)(v40 + 408) = v32;
        outlined init with copy of Result<KeyFetchResult, Error>(v4, v29);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v24 = **(id **)(v40 + 504);
          swift_bridgeObjectRetain();
          specialized Array.append(_:)();

        }
        else
        {
          v27 = *(_QWORD *)(v40 + 560);
          v28 = *(_QWORD *)(v40 + 488);
          outlined init with take of KeyFetchResult(*(_QWORD *)(v40 + 504), v28);
          *(_QWORD *)(v40 + 416) = v28;
          v26 = type metadata accessor for GPKUserID();
          v25 = *(_QWORD *)(v26 - 8);
          (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v27, v28);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v26);
          dispatch thunk of GPKMember.userID.setter();
          outlined destroy of KeyFetchResult(v28);
        }
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      outlined destroy of KeyFetchType(*(_QWORD *)(v40 + 528));
    }
    v23 = *(_QWORD *)(v40 + 536);
    outlined destroy of Result<KeyFetchResult, Error>(*(id **)(v40 + 512));
    outlined destroy of KeyFetchType(v23);
  }
  v19 = *(void (**)(uint64_t, uint64_t))(v40 + 600);
  v17 = *(_QWORD *)(v40 + 592);
  v18 = *(_QWORD *)(v40 + 576);
  outlined destroy of [KeyFetchType : Result<KeyFetchResult, Error>].Iterator();
  *(_QWORD *)(v40 + 184) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v40 + 192) = v5;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unavailable handles: ", 0x15uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v40 + 336);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v40 + 384) = v16;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [String]();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v17);
  gpklog(_:type:fileID:line:subsystem:)();
  v19(v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v40 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(_QWORD *)(v40 + 392) = v21;
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v22 = Collection.isEmpty.getter();
  outlined destroy of [String]();
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
  {
    v15 = *(_QWORD *)(v40 + 480);
    v11 = *(_QWORD *)(v40 + 472);
    v12 = *(_QWORD *)(v40 + 464);
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v15, *MEMORY[0x24BE3DE38], v12);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
    _allocateUninitializedArray<A>(_:)();
    v13 = v8;
    *v8 = static InternalErrorKey.memberHandles.getter();
    v13[1] = v9;
    v14 = *(_QWORD *)(v40 + 336);
    swift_bridgeObjectRetain();
    v13[5] = v20;
    v13[2] = v14;
    _finalizeUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [String]();
  outlined destroy of [String : GPKMember]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v40 + 280) + 8))();
}

uint64_t closure #1 in GroupKitUserLookupManager.resolveUsers(for:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  *a2 = v3;
  a2[1] = v4;
  type metadata accessor for KeyFetchType();
  return swift_storeEnumTagMultiPayload();
}

uint64_t default argument 1 of GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)()
{
  return 0;
}

uint64_t GroupKitUserLookupManager.checkAvailability(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[32] = v1;
  v2[31] = a1;
  v2[16] = v2;
  v2[17] = 0;
  v2[18] = 0;
  v2[20] = 0;
  v2[21] = 0;
  v2[26] = 0;
  v2[28] = 0;
  v2[8] = 0;
  v2[9] = 0;
  v2[12] = 0;
  v2[13] = 0;
  v2[17] = a1;
  v2[18] = v1;
  return swift_task_switch();
}

uint64_t GroupKitUserLookupManager.checkAvailability(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v1 = v0[31];
  v0[16] = v0;
  v0[19] = v1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v0[33] = v7;
  v8 = type metadata accessor for GPKMember();
  v10 = lazy protocol witness table accessor for type [String] and conformance [A]();
  v0[34] = v10;
  v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GroupKitUserLookupManager.checkAvailability(for:), 0, v7, v8, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v9);
  v0[35] = v11;
  v2 = v6[31];
  v6[20] = v11;
  v6[22] = v2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Bool));
  v6[23] = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #2 in GroupKitUserLookupManager.checkAvailability(for:), 0, v7, v3, MEMORY[0x24BEE4078], v10, MEMORY[0x24BEE40A8], v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(String, Bool)]);
  lazy protocol witness table accessor for type [(String, Bool)] and conformance [A]();
  v6[21] = Dictionary.init<A>(uniqueKeysWithValues:)();
  v4 = (_QWORD *)swift_task_alloc();
  v6[36] = v4;
  *v4 = v6[16];
  v4[1] = GroupKitUserLookupManager.checkAvailability(for:);
  return GroupKitUserLookupManager.resolveUsers(for:)(v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 128) = *v1;
  *(_QWORD *)(v2 + 296) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 128) = v0;
  v2 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRetain();
  outlined destroy of [String : Bool]();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 128) + 8))(v2);
}

{
  _QWORD *v0;
  id v1;
  id v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v14 = (void *)v0[37];
  v0[16] = v0;
  v1 = v14;
  v0[24] = v14;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  type metadata accessor for InternalError();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v12 = *(void **)(v13 + 200);
    *(_QWORD *)(v13 + 208) = v12;
    v2 = v12;
    v11 = objc_msgSend(v12, sel_userInfo);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(_QWORD *)(v13 + 48) = static InternalErrorKey.memberHandles.getter();
    *(_QWORD *)(v13 + 56) = v3;
    MEMORY[0x24263485C]();
    outlined destroy of String();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v13 + 40))
    {
      if ((swift_dynamicCast() & 1) != 0)
        v10 = *(_QWORD *)(v13 + 240);
      else
        v10 = 0;

      v9 = v10;
    }
    else
    {

      outlined destroy of Any?(v13 + 16);
      v9 = 0;
    }
    *(_QWORD *)(v13 + 216) = v9;
    if (*(_QWORD *)(v13 + 216))
    {
      v15 = *(_QWORD *)(v13 + 216);
    }
    else
    {
      v15 = _allocateUninitializedArray<A>(_:)();
      outlined destroy of [String]?();
    }
    *(_QWORD *)(v13 + 224) = v15;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v13 + 232) = v15;
    Collection<>.makeIterator()();
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
      IndexingIterator.next()();
      v7 = *(_QWORD *)(v13 + 80);
      v8 = *(_QWORD *)(v13 + 88);
      if (!v8)
        break;
      *(_QWORD *)(v13 + 96) = v7;
      *(_QWORD *)(v13 + 104) = v8;
      swift_bridgeObjectRetain();
      *(_BYTE *)(v13 + 304) = 0;
      *(_QWORD *)(v13 + 112) = v7;
      *(_QWORD *)(v13 + 120) = v8;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Bool]);
      Dictionary.subscript.setter();
      swift_bridgeObjectRelease();
    }
    v5 = *(id *)(v13 + 296);
    outlined destroy of IndexingIterator<[String]>();
    swift_bridgeObjectRelease();

    v6 = *(_QWORD *)(v13 + 168);
    swift_bridgeObjectRetain();
    outlined destroy of [String : Bool]();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 128) + 8))(v6);
  }
  else
  {

    outlined destroy of [String : Bool]();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)())(*(_QWORD *)(v13 + 128) + 8))();
  }
}

uint64_t closure #1 in GroupKitUserLookupManager.checkAvailability(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  _QWORD v4[2];
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v11 = a2;
  v4[0] = a1;
  v12 = 0;
  v13 = 0;
  v4[1] = 0;
  v7 = type metadata accessor for GPKMemberRole();
  v6 = *(_QWORD *)(v7 - 8);
  v5 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v10 = (char *)v4 - v5;
  v8 = *v2;
  v9 = v2[1];
  v12 = v8;
  v13 = v9;
  type metadata accessor for GPKMember();
  swift_bridgeObjectRetain();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v10, *MEMORY[0x24BE3DAB8], v7);
  result = GPKMember.__allocating_init(handle:role:)();
  *v11 = result;
  return result;
}

uint64_t closure #2 in GroupKitUserLookupManager.checkAvailability(for:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  result = swift_bridgeObjectRetain();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t GroupKitUserLookupManager.userID(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[21] = v3;
  v4[20] = a3;
  v4[19] = a2;
  v4[18] = a1;
  v4[14] = v4;
  v4[12] = 0;
  v4[13] = 0;
  v4[15] = 0;
  v4[16] = 0;
  v4[17] = 0;
  v5 = type metadata accessor for GPKMemberRole();
  v4[22] = v5;
  v4[23] = *(_QWORD *)(v5 - 8);
  v4[24] = swift_task_alloc();
  v4[12] = a2;
  v4[13] = a3;
  v4[15] = v3;
  return swift_task_switch();
}

uint64_t GroupKitUserLookupManager.userID(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0[21];
  v14 = v0[20];
  v17 = v0[19];
  v0[14] = v0;
  outlined init with copy of UserStore(v1 + 16, (uint64_t)(v0 + 2));
  v15 = v0[5];
  v16 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v15);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v17, v14, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v13 + 2));
  if (v18)
  {
    v12 = v13[18];
    v13[17] = v18;
    GPKUser.userID.getter();
    v2 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v12, 0, 1);
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v13[14] + 8))();
  }
  else
  {
    v8 = v13[24];
    v6 = v13[23];
    v7 = v13[22];
    type metadata accessor for GPKMember();
    swift_bridgeObjectRetain();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BE3DAB8], v7);
    v10 = GPKMember.__allocating_init(handle:role:)();
    v13[25] = v10;
    v13[16] = v10;
    v9 = _allocateUninitializedArray<A>(_:)();
    v11 = v4;
    swift_retain();
    *v11 = v10;
    _finalizeUninitializedArray<A>(_:)();
    v13[26] = v9;
    v5 = (_QWORD *)swift_task_alloc();
    v13[27] = v5;
    *v5 = v13[14];
    v5[1] = GroupKitUserLookupManager.userID(for:);
    return GroupKitUserLookupManager.resolveUsers(for:)(v9);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 112) = *v1;
  *(_QWORD *)(v2 + 224) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0[28];
  v2 = v0[21];
  v7 = v0[20];
  v10 = v0[19];
  v0[14] = v0;
  outlined init with copy of UserStore(v2 + 16, (uint64_t)(v0 + 7));
  v8 = v0[10];
  v9 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v7, v8);
  if (!v1)
  {
    v5 = *(_QWORD *)(v6 + 144);
    GPKUser.userID.getter();
    swift_release();
    v3 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v5, 0, 1);
  }
  __swift_destroy_boxed_opaque_existential_1(v6 + 56);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v6 + 112) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 112) = v0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 112) + 8))();
}

uint64_t GroupKitUserLookupManager.keyForUserID(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[11] = v1;
  v2[10] = a1;
  v2[6] = v2;
  v2[7] = 0;
  v2[8] = 0;
  v2[9] = 0;
  v2[4] = 0;
  v2[5] = 0;
  v3 = type metadata accessor for InternalErrorCode();
  v2[12] = v3;
  v2[13] = *(_QWORD *)(v3 - 8);
  v2[14] = swift_task_alloc();
  v4 = type metadata accessor for GPKUserID();
  v2[15] = v4;
  v2[16] = *(_QWORD *)(v4 - 8);
  v2[17] = swift_task_alloc();
  v2[7] = a1;
  v2[8] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[6] = *v2;
  v3 += 6;
  v3[15] = a1;
  v3[16] = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t GroupKitUserLookupManager.keyForUserID(_:)()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = v0[16];
  v7 = v0[15];
  v6 = v0[10];
  v0[6] = v0;
  v8 = _allocateUninitializedArray<A>(_:)();
  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[18] = v1;
  v1(v2, v6, v7);
  _finalizeUninitializedArray<A>(_:)();
  v0[19] = v8;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 160) = v3;
  *v3 = *(_QWORD *)(v9 + 48);
  v3[1] = GroupKitUserLookupManager.keyForUserID(_:);
  return GroupKitUserLookupManager.keysForUserIDs(_:)(v8);
}

{
  _QWORD *v0;
  void (*v1)(void);
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = v0[21];
  v1 = (void (*)(void))v0[18];
  v11 = v0[17];
  v10 = v0[15];
  v0[6] = v0;
  v0[9] = v9;
  v1();
  v2 = lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  MEMORY[0x24263485C](v11, v9, v10, MEMORY[0x24BDCDDE8], v2);
  v12 = v0[2];
  v13 = v0[3];
  if ((v13 & 0xF000000000000000) == 0xF000000000000000)
  {
    v7 = v8[14];
    v5 = v8[13];
    v6 = v8[12];
    (*(void (**)(_QWORD, _QWORD))(v8[16] + 8))(v8[17], v8[15]);
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BE3DCD0], v6);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)())(v8[6] + 8))();
  }
  else
  {
    v3 = v8[16];
    v8[4] = v12;
    v8[5] = v13;
    (*(void (**)(void))(v3 + 8))();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8[6] + 8))(v12, v13);
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = v0;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v0 + 48) + 8))();
}

uint64_t GroupKitUserLookupManager.keysForUserIDs(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[61] = v1;
  v2[60] = a1;
  v2[50] = v2;
  v2[51] = 0;
  v2[52] = 0;
  v2[55] = 0;
  v2[58] = 0;
  v2[59] = 0;
  memset(v2 + 41, 0, 0x28uLL);
  v3 = type metadata accessor for GPKUserID();
  v2[62] = v3;
  v2[63] = *(_QWORD *)(v3 - 8);
  v2[64] = swift_task_alloc();
  v2[65] = type metadata accessor for KeyFetchResult();
  v2[66] = swift_task_alloc();
  v2[67] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  v2[68] = swift_task_alloc();
  v2[69] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: KeyFetchType, value: Result<KeyFetchResult, Error>)?);
  v2[70] = swift_task_alloc();
  v2[71] = swift_task_alloc();
  v4 = type metadata accessor for LogSubsystem();
  v2[72] = v4;
  v2[73] = *(_QWORD *)(v4 - 8);
  v2[74] = swift_task_alloc();
  v2[51] = a1;
  v2[52] = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 400) = *v1;
  *(_QWORD *)(v3 + 640) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GroupKitUserLookupManager.keysForUserIDs(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  _QWORD *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Type;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v15 = v0[60];
  v0[50] = v0;
  v0[46] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[47] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UserLookupManager retrieving public key info for userIDs ", 0x39uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[53] = v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID]);
  v18 = lazy protocol witness table accessor for type [GPKUserID] and conformance [A]();
  v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in GroupKitUserLookupManager.keysForUserIDs(_:), 0, v16, MEMORY[0x24BEE0D00], MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v17);
  v9 = v14[74];
  v8 = v14[73];
  v10 = v14[72];
  v11 = v14[60];
  v14[54] = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of [String]();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type GPKUserID and conformance GPKUserID();
  v14[55] = Dictionary.init()();
  v14[56] = v11;
  Type = type metadata accessor for KeyFetchType();
  v14[75] = Type;
  v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #2 in GroupKitUserLookupManager.keysForUserIDs(_:), 0, v16, Type, MEMORY[0x24BEE4078], v18, MEMORY[0x24BEE40A8], v17);
  v14[76] = 0;
  v14[57] = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType]);
  v14[77] = lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  lazy protocol witness table accessor for type [KeyFetchType] and conformance [A]();
  v7 = Set.init<A>(_:)();
  v14[78] = v7;
  v14[58] = v7;
  v6 = default argument 1 of GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)();
  v4 = (_QWORD *)swift_task_alloc();
  v14[79] = v4;
  *v4 = v14[50];
  v4[1] = GroupKitUserLookupManager.keysForUserIDs(_:);
  return GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)(v7, v6 & 1);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0[80];
  v0[50] = v0;
  v0[59] = v1;
  swift_bridgeObjectRetain();
  Dictionary.makeIterator()();
  memcpy(v0 + 41, v0 + 36, 0x28uLL);
  v29 = v0[76];
  while (1)
  {
    v26 = *(char **)(v28 + 568);
    v25 = *(char **)(v28 + 560);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>].Iterator);
    Dictionary.Iterator.next()();
    outlined init with take of (key: KeyFetchType, value: Result<KeyFetchResult, Error>)?(v25, v26);
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: KeyFetchType, value: Result<KeyFetchResult, Error>));
    if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1) == 1)
    {
      outlined destroy of [KeyFetchType : Result<KeyFetchResult, Error>].Iterator();
      v10 = *(_QWORD *)(v28 + 440);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of [GPKUserID : Data]();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v28 + 400) + 8))(v10);
    }
    v22 = *(char **)(v28 + 552);
    v23 = *(_QWORD **)(v28 + 544);
    outlined init with take of Result<KeyFetchResult, Error>((char *)(*(_QWORD *)(v28 + 568) + *(int *)(v27 + 48)), v22);
    outlined init with copy of Result<KeyFetchResult, Error>((id *)v22, v23);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of Result<KeyFetchResult, Error>(*(id **)(v28 + 544));
      v20 = v29;
      v21 = v24;
      goto LABEL_7;
    }
    v17 = *(_QWORD *)(v28 + 528);
    v16 = *(_QWORD *)(v28 + 520);
    v15 = *(_QWORD *)(v28 + 512);
    v13 = *(_QWORD *)(v28 + 504);
    v14 = *(_QWORD *)(v28 + 496);
    outlined init with take of KeyFetchResult(*(_QWORD *)(v28 + 544), v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v15, v17, v14);
    memcpy((void *)(v28 + 16), (const void *)(v17 + *(int *)(v16 + 20)), 0x88uLL);
    outlined retain of UserKeyInfo((_QWORD *)(v28 + 16));
    memcpy((void *)(v28 + 152), (const void *)(v28 + 16), 0x88uLL);
    v18 = UserKeyInfo.serializedForCrypto()();
    v19 = v2;
    if (v29)
      break;
    v12 = *(_QWORD *)(v28 + 528);
    outlined destroy of UserKeyInfo(v28 + 152);
    *(_QWORD *)(v28 + 384) = v18;
    *(_QWORD *)(v28 + 392) = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKUserID : Data]);
    Dictionary.subscript.setter();
    outlined destroy of KeyFetchResult(v12);
    v20 = 0;
    v21 = 0;
LABEL_7:
    v11 = *(id **)(v28 + 552);
    outlined destroy of KeyFetchType(*(_QWORD *)(v28 + 568));
    outlined destroy of Result<KeyFetchResult, Error>(v11);
    v29 = v20;
    v24 = v21;
  }
  v6 = *(_QWORD *)(v28 + 568);
  v7 = *(id **)(v28 + 552);
  v8 = *(_QWORD *)(v28 + 528);
  v9 = *(_QWORD *)(v28 + 512);
  v4 = *(_QWORD *)(v28 + 504);
  v5 = *(_QWORD *)(v28 + 496);
  outlined destroy of UserKeyInfo(v28 + 152);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v5);
  outlined destroy of KeyFetchResult(v8);
  outlined destroy of KeyFetchType(v6);
  outlined destroy of Result<KeyFetchResult, Error>(v7);
  outlined destroy of [KeyFetchType : Result<KeyFetchResult, Error>].Iterator();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [GPKUserID : Data]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)())(*(_QWORD *)(v28 + 400) + 8))();
}

uint64_t closure #1 in GroupKitUserLookupManager.keysForUserIDs(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v2;

  result = GPKUserID.hexString.getter();
  *a1 = result;
  a1[1] = v2;
  return result;
}

uint64_t closure #2 in GroupKitUserLookupManager.keysForUserIDs(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKUserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  type metadata accessor for KeyFetchType();
  return swift_storeEnumTagMultiPayload();
}

uint64_t GroupKitUserLookupManager.getCachedKeys(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  unsigned int v43;
  id v44;
  void *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  _BYTE *v64;
  unsigned int v65;
  _QWORD *v66;
  _QWORD *v67;
  const void *v68;
  void *object;
  _QWORD *v70;
  void *v71;
  void *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  Swift::String v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  void *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t Type;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE v142[136];
  _QWORD v143[2];
  uint64_t v144;
  uint64_t v145;
  const void *v146;
  _QWORD v147[17];
  _BYTE v148[24];
  uint64_t v149;
  uint64_t v150;
  id v151;
  _BYTE v152[24];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;

  v133 = a1;
  v171 = 0;
  v170 = 0;
  v169 = 0;
  v167 = 0;
  v166 = 0;
  v165 = 0;
  v163 = 0;
  v162 = 0;
  v161 = 0;
  v160 = 0;
  v158 = 0;
  v159 = 0;
  v155 = 0;
  v156 = 0;
  v151 = 0;
  v168 = 0;
  v146 = 0;
  v117 = 0;
  v93 = type metadata accessor for InternalErrorCode();
  v94 = *(_QWORD *)(v93 - 8);
  v95 = (*(_QWORD *)(v94 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v93);
  v96 = (char *)&v36 - v95;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v97 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v98 = (uint64_t)&v36 - v97;
  v99 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v117);
  v100 = (uint64_t *)((char *)&v36 - v99);
  v101 = type metadata accessor for LogSubsystem();
  v102 = *(_QWORD *)(v101 - 8);
  v103 = (*(_QWORD *)(v102 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v117);
  v104 = (uint64_t)&v36 - v103;
  v105 = type metadata accessor for Date();
  v106 = *(_QWORD *)(v105 - 8);
  v107 = (*(_QWORD *)(v106 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v105);
  v108 = (uint64_t)&v36 - v107;
  v171 = (char *)&v36 - v107;
  v109 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v110 = (uint64_t)&v36 - v109;
  v170 = (char *)&v36 - v109;
  v111 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CachedKeyInfo?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v117);
  v112 = (uint64_t)&v36 - v111;
  v113 = type metadata accessor for CachedKeyInfo();
  v114 = *(_QWORD *)(v113 - 8);
  v115 = (*(_QWORD *)(v114 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v117);
  v116 = (uint64_t)&v36 - v115;
  v169 = (char *)&v36 - v115;
  v118 = type metadata accessor for GPKUserID();
  v119 = *(_QWORD *)(v118 - 8);
  v120 = (*(_QWORD *)(v119 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v117);
  v121 = (uint64_t)&v36 - v120;
  v122 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v123 = (char *)&v36 - v122;
  v168 = (char *)&v36 - v122;
  Type = type metadata accessor for KeyFetchType();
  v124 = *(_QWORD *)(Type - 8);
  v125 = (*(_QWORD *)(v124 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](Type);
  v126 = (uint64_t *)((char *)&v36 - v125);
  v127 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6);
  v128 = (uint64_t *)((char *)&v36 - v127);
  v129 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8]((char *)&v36 - v127);
  v130 = (uint64_t *)((char *)&v36 - v129);
  v131 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v132 = (uint64_t *)((char *)&v36 - v131);
  v167 = (char *)&v36 - v131;
  v134 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyFetchType?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = MEMORY[0x24BDAC7A8](v136);
  v135 = (char *)&v36 - v134;
  v166 = v12;
  v165 = v11;
  v164 = v12;
  swift_retain();
  v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<KeyFetchType>);
  v13 = lazy protocol witness table accessor for type Set<KeyFetchType> and conformance Set<A>();
  v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in GroupKitUserLookupManager.getCachedKeys(for:), v136, v137, Type, MEMORY[0x24BEE4078], v13, MEMORY[0x24BEE40A8], v139);
  v140 = 0;
  v141 = v14;
  v90 = v14;
  swift_release();
  v163 = v90;
  v87 = lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  v162 = Set.init()();
  v161 = Set.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (KeyFetchType, Result<KeyFetchResult, Error>));
  v88 = _allocateUninitializedArray<A>(_:)();
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  v160 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  v157 = v90;
  v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType]);
  lazy protocol witness table accessor for type [KeyFetchType] and conformance [A]();
  Collection<>.makeIterator()();
  v92 = 0;
  while (1)
  {
    v86 = v92;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[KeyFetchType]>);
    IndexingIterator.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v135, 1, Type) == 1)
      break;
    outlined init with take of KeyFetchType(v135, v132);
    outlined init with copy of KeyFetchType(v132, v130);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v26 = v86;
      v60 = *v130;
      v57 = v130[1];
      v155 = v60;
      v156 = v57;
      v56 = v152;
      outlined init with copy of UserStore(v136 + 16, (uint64_t)v152);
      v58 = v153;
      v59 = v154;
      __swift_project_boxed_opaque_existential_1(v56, v153);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 72))(v60, v57, v58);
      v61 = v26;
      v62 = v26;
      if (v26)
      {
        v37 = v62;
        v38 = 0;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
        swift_bridgeObjectRelease();
        v42 = v37;
        v41 = v38;
        goto LABEL_25;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v98, 1, v105) == 1)
      {
        outlined destroy of Date?(v98);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
        swift_bridgeObjectRetain();
        v31 = v126;
        v32 = v57;
        *v126 = v60;
        v31[1] = v32;
        swift_storeEnumTagMultiPayload();
        Set.insert(_:)();
        outlined destroy of KeyFetchType((uint64_t)v128);
        goto LABEL_21;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 32))(v108, v98, v105);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
      if (!GroupKitUserLookupManager.hasExpired(_:)(v108))
      {
        if (GroupKitUserLookupManager.shouldBackgroundRefresh(_:)(v108))
        {
          swift_bridgeObjectRetain();
          v29 = v126;
          v30 = v57;
          *v126 = v60;
          v29[1] = v30;
          swift_storeEnumTagMultiPayload();
          Set.insert(_:)();
          outlined destroy of KeyFetchType((uint64_t)v128);
        }
        outlined init with copy of KeyFetchType(v132, v128);
        v54 = 0;
        type metadata accessor for InternalError();
        (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v96, *MEMORY[0x24BE3DCD0], v93);
        *v100 = InternalError.__allocating_init(_:internalInfo:)();
        v55 = 1;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t *, _QWORD, _QWORD))(*(_QWORD *)(v89 - 8) + 56))(v100, 0, v55);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>]);
        Dictionary.subscript.setter();
        (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v108, v105);
LABEL_21:
        swift_bridgeObjectRelease();
        v63 = v61;
LABEL_22:
        v53 = v63;
        goto LABEL_23;
      }
      swift_bridgeObjectRetain();
      v27 = v126;
      v28 = v57;
      *v126 = v60;
      v27[1] = v28;
      swift_storeEnumTagMultiPayload();
      Set.insert(_:)();
      outlined destroy of KeyFetchType((uint64_t)v128);
      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v108, v105);
      swift_bridgeObjectRelease();
      outlined destroy of KeyFetchType((uint64_t)v132);
      v92 = v61;
    }
    else
    {
      v15 = v86;
      (*(void (**)(char *, uint64_t *, uint64_t))(v119 + 32))(v123, v130, v118);
      v168 = v123;
      v81 = v148;
      outlined init with copy of UserStore(v136 + 16, (uint64_t)v148);
      v82 = v149;
      v83 = v150;
      __swift_project_boxed_opaque_existential_1(v81, v149);
      (*(void (**)(char *, uint64_t))(v83 + 56))(v123, v82);
      v84 = v15;
      v85 = v15;
      if (v15)
      {
        v39 = v85;
        v40 = 0;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v148);
        (*(void (**)(char *, uint64_t))(v119 + 8))(v123, v118);
        v42 = v39;
        v41 = v40;
LABEL_25:
        v45 = v41;
        v44 = v42;
        v34 = v42;
        v151 = v44;
        outlined init with copy of KeyFetchType(v132, v128);
        v35 = v44;
        *v100 = (uint64_t)v44;
        v43 = 1;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t *, _QWORD, _QWORD))(*(_QWORD *)(v89 - 8) + 56))(v100, 0, v43);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>]);
        Dictionary.subscript.setter();

        v53 = v45;
LABEL_23:
        v52 = v53;
        outlined destroy of KeyFetchType((uint64_t)v132);
        v92 = v52;
      }
      else
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113) == 1)
        {
          outlined destroy of CachedKeyInfo?(v112);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v148);
          (*(void (**)(_QWORD *, char *, uint64_t))(v119 + 16))(v126, v123, v118);
          swift_storeEnumTagMultiPayload();
          Set.insert(_:)();
          outlined destroy of KeyFetchType((uint64_t)v128);
LABEL_12:
          v25 = v84;
          (*(void (**)(char *, uint64_t))(v119 + 8))(v123, v118);
          v63 = v25;
          goto LABEL_22;
        }
        outlined init with take of CachedKeyInfo(v112, v116);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v148);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 16))(v110, v116, v105);
        v68 = (const void *)(v116 + *(int *)(v113 + 20));
        v67 = v147;
        memcpy(v147, v68, sizeof(v147));
        v146 = v68;
        outlined retain of UserKeyInfo(v147);
        v16 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v73 = &v144;
        v144 = v16;
        v145 = v17;
        v76 = 1;
        v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("found cached key for ", 0x15uLL, 1);
        object = v18._object;
        DefaultStringInterpolation.appendLiteral(_:)(v18);
        swift_bridgeObjectRelease();
        v19 = GPKUserID.hexString.getter();
        v70 = v143;
        v143[0] = v19;
        v143[1] = v20;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String();
        v21 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(". lastFetchDate: ", 0x11uLL, v76 & 1);
        v71 = v21._object;
        DefaultStringInterpolation.appendLiteral(_:)(v21);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type Date and conformance Date();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v22 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v76 & 1);
        v72 = v22._object;
        DefaultStringInterpolation.appendLiteral(_:)(v22);
        swift_bridgeObjectRelease();
        v75 = v144;
        v74 = v145;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        v77 = String.init(stringInterpolation:)();
        v80 = v23;
        v79 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, v76 & 1);
        v78 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v104);
        gpklog(_:type:fileID:line:subsystem:)();
        (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v104, v101);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (!GroupKitUserLookupManager.hasExpired(_:)(v110))
        {
          if (GroupKitUserLookupManager.shouldBackgroundRefresh(_:)(v110))
          {
            (*(void (**)(_QWORD *, char *, uint64_t))(v119 + 16))(v126, v123, v118);
            swift_storeEnumTagMultiPayload();
            Set.insert(_:)();
            outlined destroy of KeyFetchType((uint64_t)v128);
          }
          outlined init with copy of KeyFetchType(v132, v128);
          (*(void (**)(uint64_t, char *, uint64_t))(v119 + 16))(v121, v123, v118);
          v66 = v147;
          outlined retain of UserKeyInfo(v147);
          v64 = v142;
          memcpy(v142, v66, sizeof(v142));
          KeyFetchResult.init(userID:keyInfo:)(v121, v142, (uint64_t)v100);
          v65 = 0;
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v100, v65, 1);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>]);
          Dictionary.subscript.setter();
          outlined release of UserKeyInfo(v66);
          (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v110, v105);
          outlined destroy of CachedKeyInfo(v116);
          goto LABEL_12;
        }
        v24 = v84;
        (*(void (**)(_QWORD *, char *, uint64_t))(v119 + 16))(v126, v123, v118);
        swift_storeEnumTagMultiPayload();
        Set.insert(_:)();
        outlined destroy of KeyFetchType((uint64_t)v128);
        outlined release of UserKeyInfo(v147);
        (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v110, v105);
        outlined destroy of CachedKeyInfo(v116);
        (*(void (**)(char *, uint64_t))(v119 + 8))(v123, v118);
        outlined destroy of KeyFetchType((uint64_t)v132);
        v92 = v24;
      }
    }
  }
  outlined destroy of IndexingIterator<[KeyFetchType]>();
  v46 = &v160;
  v49 = v160;
  swift_bridgeObjectRetain();
  v48 = &v162;
  v50 = v162;
  swift_bridgeObjectRetain();
  v47 = &v161;
  v51 = v161;
  swift_bridgeObjectRetain();
  outlined destroy of [KeyFetchType : Result<KeyFetchResult, Error>]();
  outlined destroy of Set<KeyFetchType>();
  outlined destroy of Set<KeyFetchType>();
  swift_bridgeObjectRelease();
  return v49;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Set<KeyFetchType>()
{
  swift_bridgeObjectRelease();
}

uint64_t GroupKitUserLookupManager.fetchKeysFromServer(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[26] = v1;
  v2[25] = a1;
  v2[19] = v2;
  v2[20] = 0;
  v2[21] = 0;
  v2[23] = 0;
  v3 = type metadata accessor for LogSubsystem();
  v2[27] = v3;
  v2[28] = *(_QWORD *)(v3 - 8);
  v2[29] = swift_task_alloc();
  v2[20] = a1;
  v2[21] = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[19] = *v2;
  v3[33] = a1;
  v3[34] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t GroupKitUserLookupManager.fetchKeysFromServer(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  char v14;

  v1 = v0[26];
  v0[19] = v0;
  outlined init with copy of FeatureChecking(v1 + 152, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  v14 = dispatch thunk of FeatureChecking.shouldUseMultiUserLookup.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if ((v14 & 1) != 0)
  {
    v13[30] = type metadata accessor for KeyFetchType();
    v13[31] = lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
    if ((Set.isEmpty.getter() & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (KeyFetchType, Result<KeyFetchResult, Error>));
      _allocateUninitializedArray<A>(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
      v12 = Dictionary.init(dictionaryLiteral:)();
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v13[19] + 8))(v12);
    }
    else
    {
      outlined init with copy of KeyDistributionServiceProviding(v13[26] + 56, (uint64_t)(v13 + 7));
      v9 = v13[10];
      v10 = v13[11];
      __swift_project_boxed_opaque_existential_1(v13 + 7, v9);
      v11 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 + 24) + **(int **)(v10 + 24));
      v3 = (_QWORD *)swift_task_alloc();
      v13[32] = v3;
      *v3 = v13[19];
      v3[1] = GroupKitUserLookupManager.fetchKeysFromServer(for:);
      return v11(v13[25], v9, v10);
    }
  }
  else
  {
    v6 = v13[26];
    v5 = v13[25];
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>]);
    swift_bridgeObjectRetain();
    swift_retain();
    v7 = swift_task_alloc();
    v13[35] = v7;
    *(_QWORD *)(v7 + 16) = v5;
    *(_QWORD *)(v7 + 24) = v6;
    default argument 1 of withTaskGroup<A, B>(of:returning:isolation:body:)(v8, v8);
    v4 = (_QWORD *)swift_task_alloc();
    v13[36] = v4;
    *v4 = v13[19];
    v4[1] = GroupKitUserLookupManager.fetchKeysFromServer(for:);
    return withTaskGroup<A, B>(of:returning:isolation:body:)();
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 152) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  v2 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 152) + 8))(v2);
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 152) = *(_QWORD *)v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 152) = v0;
  v2 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 152) + 8))(v2);
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v10 = (void *)v0[34];
  v8 = v0[29];
  v7 = v0[28];
  v9 = v0[27];
  v0[19] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v1 = v10;
  v0[23] = v10;
  v0[15] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[16] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("caught error fetching keys ", 0x1BuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v0[17] = Error.localizedDescription.getter();
  v0[18] = v4;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v8);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (KeyFetchType, Result<KeyFetchResult, Error>));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  v11 = Dictionary.init(dictionaryLiteral:)();

  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0[19] + 8))(v11);
}

uint64_t GroupKitUserLookupManager.cacheResult(_:for:)(id *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  _QWORD *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t result;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  void (*v48)(char *, uint64_t);
  int v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id *v56;
  void *v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  void (*v83)(char *, uint64_t, uint64_t);
  _QWORD *v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  unint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  void *object;
  _QWORD *v110;
  uint64_t Type;
  void *v112;
  Builtin::Word v113;
  uint64_t v114;
  void *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t countAndFlagsBits;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  _QWORD *v132;
  id *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  void *v137;
  _BYTE v138[24];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE v144[136];
  _BYTE v145[24];
  uint64_t v146;
  uint64_t v147;
  const void *v148;
  _QWORD v149[17];
  _BYTE v150[24];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  void *v156;
  id v157;
  void *v158;
  _BYTE v159[24];
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;

  v133 = a1;
  v110 = a2;
  v169 = 0;
  v168 = 0;
  v167 = 0;
  v166 = 0;
  v165 = 0;
  v164 = 0;
  v155 = 0;
  v153 = 0;
  v154 = 0;
  v148 = 0;
  v142 = 0;
  v143 = 0;
  v141 = 0;
  v113 = 0;
  v86 = type metadata accessor for InternalErrorCode();
  v87 = *(_QWORD *)(v86 - 8);
  v88 = (*(_QWORD *)(v87 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](0);
  v89 = (char *)&v31 - v88;
  v90 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v3);
  v91 = (char *)&v31 - v90;
  Type = type metadata accessor for KeyFetchType();
  v92 = (*(_QWORD *)(*(_QWORD *)(Type - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v113);
  v93 = (uint64_t *)((char *)&v31 - v92);
  v94 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5);
  v95 = (uint64_t *)((char *)&v31 - v94);
  v96 = type metadata accessor for GPKUserID();
  v97 = *(_QWORD *)(v96 - 8);
  v98 = (*(_QWORD *)(v97 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v96);
  v99 = (char *)&v31 - v98;
  v100 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v31 - v98);
  v101 = (char *)&v31 - v100;
  v169 = (char *)&v31 - v100;
  v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  v102 = (*(_QWORD *)(*(_QWORD *)(v136 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v113);
  v131 = (char *)&v31 - v102;
  v103 = type metadata accessor for KeyFetchResult();
  v104 = (*(_QWORD *)(*(_QWORD *)(v103 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v113);
  v134 = (uint64_t)&v31 - v104;
  v168 = (char *)&v31 - v104;
  v105 = type metadata accessor for Date();
  v106 = *(_QWORD *)(v105 - 8);
  v107 = (*(_QWORD *)(v106 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v113);
  v128 = (char *)&v31 - v107;
  v167 = (char *)&v31 - v107;
  v125 = type metadata accessor for LogSubsystem();
  v123 = *(_QWORD *)(v125 - 8);
  v108 = (*(_QWORD *)(v123 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v133);
  v124 = (uint64_t)&v31 - v108;
  v166 = v8;
  v165 = v9;
  v164 = v2;
  v10 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v116 = &v162;
  v162 = v10;
  v163 = v11;
  v119 = 1;
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("caching public key result ", 0x1AuLL, 1);
  object = v12._object;
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" -> ", 4uLL, v119 & 1);
  v112 = v13._object;
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v113, v119 & 1);
  v115 = v14._object;
  DefaultStringInterpolation.appendLiteral(_:)(v14);
  v15 = v114;
  swift_bridgeObjectRelease();
  v118 = v162;
  v117 = v163;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v120 = String.init(stringInterpolation:)();
  v127 = v16;
  v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, v119 & 1);
  countAndFlagsBits = v17._countAndFlagsBits;
  v126 = v17._object;
  v121 = default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v124);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v124, v125);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v132 = v159;
  outlined init with copy of DateFactory(v15 + 96, (uint64_t)v159);
  v130 = v160;
  v129 = v161;
  __swift_project_boxed_opaque_existential_1(v132, v160);
  (*(void (**)(uint64_t))(v129 + 8))(v130);
  v18 = v131;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v132);
  outlined init with copy of Result<KeyFetchResult, Error>(v133, v18);
  v19 = v135;
  _ss6ResultOsRi_zrlE3getxyq_YKF(v136, (uint64_t)&v158, v134);
  v137 = v19;
  if (v19)
  {
    v51 = v158;
    v50 = 0;
    goto LABEL_9;
  }
  v83 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 16);
  v83(v101, v134, v96);
  v85 = (const void *)(v134 + *(int *)(v103 + 20));
  v84 = v149;
  memcpy(v149, v85, sizeof(v149));
  v148 = v85;
  outlined retain of UserKeyInfo(v149);
  outlined init with copy of KeyFetchType(v110, v95);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v67 = *v95;
    v69 = v95[1];
    v142 = v67;
    v143 = v69;
    v76 = type metadata accessor for GPKUser();
    v83(v99, (uint64_t)v101, v96);
    v72 = 1;
    v70 = MEMORY[0x24BEE0D00];
    v66 = _allocateUninitializedArray<A>(_:)();
    v68 = v20;
    swift_bridgeObjectRetain();
    v21 = v68;
    v22 = v69;
    *v68 = v67;
    v21[1] = v22;
    _finalizeUninitializedArray<A>(_:)();
    v74 = GPKUser.__allocating_init(userID:handles:isMe:)();
    v141 = v74;
    v71 = v138;
    outlined init with copy of UserStore(v114 + 16, (uint64_t)v138);
    v77 = v139;
    v78 = v140;
    __swift_project_boxed_opaque_existential_1(v71, v139);
    v73 = _allocateUninitializedArray<A>(_:)();
    v75 = v23;
    swift_retain();
    v24 = v73;
    *v75 = v74;
    _finalizeUninitializedArray<A>(_:)();
    v25 = v137;
    v79 = v24;
    (*(void (**)(void))(v78 + 24))();
    v80 = v25;
    v81 = v25;
    if (v25)
    {
      v35 = v81;
      v36 = 0;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
      swift_release();
      swift_bridgeObjectRelease();
      outlined release of UserKeyInfo(v149);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v101, v96);
      outlined destroy of KeyFetchResult(v134);
      v51 = v35;
      v50 = v36;
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
    swift_release();
    swift_bridgeObjectRelease();
    v82 = v80;
  }
  else
  {
    outlined destroy of KeyFetchType((uint64_t)v95);
    v82 = v137;
  }
  v60 = v82;
  v59 = v145;
  outlined init with copy of UserStore(v114 + 16, (uint64_t)v145);
  v62 = v146;
  v63 = v147;
  __swift_project_boxed_opaque_existential_1(v59, v146);
  v26 = v60;
  v61 = v144;
  memcpy(v144, v149, sizeof(v144));
  (*(void (**)(char *, char *, _BYTE *, uint64_t))(v63 + 64))(v101, v128, v144, v62);
  v64 = v26;
  v65 = v26;
  if (!v26)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
    outlined release of UserKeyInfo(v149);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v101, v96);
    outlined destroy of KeyFetchResult(v134);
    v58 = v64;
LABEL_8:
    v57 = v58;
    return (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v128, v105);
  }
  v33 = v65;
  v34 = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
  outlined release of UserKeyInfo(v149);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v101, v96);
  outlined destroy of KeyFetchResult(v134);
  v51 = v33;
  v50 = v34;
LABEL_9:
  v52 = v50;
  v53 = v51;
  v28 = v51;
  v56 = &v157;
  v157 = v53;
  v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v55 = 0;
  type metadata accessor for InternalError();
  if ((swift_dynamicCast() & 1) != 0)
  {
    v47 = v156;
    InternalError.internalCode.getter();
    (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v89, *MEMORY[0x24BE3DD38], v86);
    lazy protocol witness table accessor for type InternalErrorCode and conformance InternalErrorCode();
    v49 = == infix<A>(_:_:)();
    v48 = *(void (**)(char *, uint64_t))(v87 + 8);
    v48(v89, v86);
    v48(v91, v86);
    if ((v49 & 1) != 0)
    {
      v155 = v47;
      outlined init with copy of KeyFetchType(v110, v93);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v44 = *v93;
        v41 = v93[1];
        v153 = v44;
        v154 = v41;
        v40 = v150;
        outlined init with copy of UserStore(v114 + 16, (uint64_t)v150);
        v42 = v151;
        v43 = v152;
        __swift_project_boxed_opaque_existential_1(v40, v151);
        v29 = v52;
        (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(v43 + 80))(v44, v41, v128, v42);
        v45 = v29;
        v46 = v29;
        if (v29)
        {
          v31 = v46;
          v32 = 0;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v150);

          v39 = v32;
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v150);
          v39 = v45;
        }
        v37 = v39;
        swift_bridgeObjectRelease();

        v58 = v37;
        goto LABEL_8;
      }
      outlined destroy of KeyFetchType((uint64_t)v93);
      v30 = v47;
      swift_willThrow();

      result = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v128, v105);
      v38 = v47;
    }
    else
    {

      result = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v128, v105);
      v38 = v53;
    }
  }
  else
  {

    result = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v128, v105);
    v38 = v53;
  }
  return result;
}

uint64_t closure #1 in GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[20] = a5;
  v5[19] = a4;
  v5[14] = v5;
  v5[15] = 0;
  v5[16] = 0;
  v5[18] = 0;
  memset(v5 + 7, 0, 0x28uLL);
  v5[21] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  v5[22] = swift_task_alloc();
  v5[23] = type metadata accessor for KeyFetchType();
  v5[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: KeyFetchType, value: Result<KeyFetchResult, Error>)?);
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  v6 = type metadata accessor for LogSubsystem();
  v5[27] = v6;
  v5[28] = *(_QWORD *)(v6 - 8);
  v5[29] = swift_task_alloc();
  v5[15] = a4;
  v5[16] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = v0[29];
  v7 = v0[28];
  v9 = v0[27];
  v6 = v0[19];
  v0[14] = v0;
  v0[12] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[13] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("background refreshing public keys for users ", 0x2CuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[17] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<KeyFetchType>);
  lazy protocol witness table accessor for type Set<KeyFetchType> and conformance Set<A>();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v8);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)swift_task_alloc();
  v10[30] = v4;
  *v4 = v10[14];
  v4[1] = closure #1 in GroupKitUserLookupManager.fetchKeys(for:ignoreCache:);
  return GroupKitUserLookupManager.fetchKeysFromServer(for:)(v10[19]);
}

{
  _QWORD *v0;
  uint64_t v1;
  char *v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0[31];
  v0[14] = v0;
  v0[18] = v1;
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  Dictionary.makeIterator()();
  memcpy(v0 + 7, v0 + 2, 0x28uLL);
  while (1)
  {
    v9 = *(char **)(v11 + 208);
    v8 = *(char **)(v11 + 200);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>].Iterator);
    Dictionary.Iterator.next()();
    outlined init with take of (key: KeyFetchType, value: Result<KeyFetchResult, Error>)?(v8, v9);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: KeyFetchType, value: Result<KeyFetchResult, Error>));
    if ((*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1) == 1)
      break;
    v3 = *(char **)(v11 + 208);
    v6 = *(_QWORD **)(v11 + 192);
    v7 = *(char **)(v11 + 176);
    v5 = &v3[*(int *)(v10 + 48)];
    outlined init with take of KeyFetchType(v3, v6);
    outlined init with take of Result<KeyFetchResult, Error>(v5, v7);
    GroupKitUserLookupManager.cacheResult(_:for:)((id *)v7, v6);
    v4 = *(_QWORD *)(v11 + 192);
    outlined destroy of Result<KeyFetchResult, Error>(*(id **)(v11 + 176));
    outlined destroy of KeyFetchType(v4);
  }
  outlined destroy of [KeyFetchType : Result<KeyFetchResult, Error>].Iterator();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v11 + 112) + 8))();
}

uint64_t closure #1 in GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v3 + 112) = *v1;
  *(_QWORD *)(v3 + 248) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23D4F3E30()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in GroupKitUserLookupManager.fetchKeys(for:ignoreCache:);
  return closure #1 in GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in GroupKitUserLookupManager.fetchKeys(for:ignoreCache:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t _ss6ResultOsRi_zrlE3getxyq_YKF@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  if (swift_getEnumCaseMultiPayload() != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 32))(a3, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 32))(a2, v3);
  result = _stdlib_isOSVersionAtLeast_AEIC(_:_:_:)(0x12uLL, 0, 0);
  if ((result & 1) != 0)
    return swift_willThrowTypedImpl();
  return result;
}

void *closure #1 in GroupKitUserLookupManager.getCachedKeys(for:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *result;
  void *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t Type;
  uint64_t *v33;
  uint64_t v34;
  _BYTE v35[24];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v27 = a3;
  v30 = a1;
  v29 = a2;
  v41 = 0;
  v40 = 0;
  v38 = 0;
  v39 = 0;
  v34 = 0;
  Type = type metadata accessor for KeyFetchType();
  v31 = (*(_QWORD *)(*(_QWORD *)(Type - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v33 = (uint64_t *)((char *)&v8 - v31);
  v41 = (_QWORD *)MEMORY[0x24BDAC7A8](v30);
  v40 = v3;
  outlined init with copy of KeyFetchType(v41, (id *)((char *)&v8 - v31));
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v22 = *v33;
    v19 = v33[1];
    v38 = v22;
    v39 = v19;
    v18 = v35;
    outlined init with copy of UserStore(v29 + 16, (uint64_t)v35);
    v20 = v36;
    v21 = v37;
    __swift_project_boxed_opaque_existential_1(v18, v36);
    v6 = v28;
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v22, v19, v20);
    v23 = v6;
    v24 = v7;
    v25 = v6;
    if (v6)
    {
      v8 = v25;
      v9 = 0;
      v10 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);

      v16 = v9;
      v17 = v10;
    }
    else
    {
      v15 = v24;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      v16 = v15;
      v17 = v23;
    }
    v13 = v17;
    v14 = v16;
    if (v16)
    {
      v12 = v14;
      v11 = v14;
      v34 = v14;
      GPKUser.userID.getter();
      swift_storeEnumTagMultiPayload();
      swift_release();
    }
    else
    {
      outlined init with copy of KeyFetchType(v30, v27);
    }
    swift_bridgeObjectRelease();
    result = v13;
    v26 = v13;
  }
  else
  {
    outlined init with copy of KeyFetchType(v30, v27);
    v4 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t *))(*(_QWORD *)(v4 - 8) + 8))(v33);
    result = v28;
    v26 = v28;
  }
  return result;
}

void *partial apply for closure #1 in GroupKitUserLookupManager.getCachedKeys(for:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  return closure #1 in GroupKitUserLookupManager.getCachedKeys(for:)(a1, v3, a2);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[KeyFetchType]>()
{
  swift_bridgeObjectRelease();
}

BOOL GroupKitUserLookupManager.hasExpired(_:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BOOL4 v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v8 = a1;
  v19 = 0;
  v18 = 0;
  v17 = 0;
  v12 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v12 - 8);
  v4 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = (char *)&v4 - v4;
  v19 = (char *)&v4 - v4;
  v18 = MEMORY[0x24BDAC7A8](v8);
  v17 = v1;
  v7 = v14;
  outlined init with copy of DateFactory(v1 + 96, (uint64_t)v14);
  v6 = v15;
  v5 = v16;
  __swift_project_boxed_opaque_existential_1(v7, v15);
  (*(void (**)(uint64_t))(v5 + 8))(v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  Date.timeIntervalSince(_:)();
  v13 = *(double *)(v9 + 136) < v2;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v11, v12);
  return v13;
}

BOOL GroupKitUserLookupManager.shouldBackgroundRefresh(_:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BOOL4 v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v8 = a1;
  v19 = 0;
  v18 = 0;
  v17 = 0;
  v12 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v12 - 8);
  v4 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = (char *)&v4 - v4;
  v19 = (char *)&v4 - v4;
  v18 = MEMORY[0x24BDAC7A8](v8);
  v17 = v1;
  v7 = v14;
  outlined init with copy of DateFactory(v1 + 96, (uint64_t)v14);
  v6 = v15;
  v5 = v16;
  __swift_project_boxed_opaque_existential_1(v7, v15);
  (*(void (**)(uint64_t))(v5 + 8))(v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  Date.timeIntervalSince(_:)();
  v13 = *(double *)(v9 + 144) < v2;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v11, v12);
  return v13;
}

uint64_t outlined init with take of CachedKeyInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
  v3 = type metadata accessor for CachedKeyInfo();
  memcpy((void *)(a2 + *(int *)(v3 + 20)), (const void *)(a1 + *(int *)(v3 + 20)), 0x88uLL);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v0 = type metadata accessor for Date();
    v1 = MEMORY[0x242635504](MEMORY[0x24BDCE988], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    return v1;
  }
  return v3;
}

uint64_t closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t Type;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[25] = a4;
  v4[24] = a3;
  v4[23] = a2;
  v4[22] = a1;
  v4[14] = v4;
  v4[15] = 0;
  v4[16] = 0;
  v4[17] = 0;
  v4[19] = 0;
  memset(v4 + 7, 0, 0x28uLL);
  v4[21] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[26] = swift_task_alloc();
  Type = type metadata accessor for KeyFetchType();
  v4[27] = Type;
  v6 = *(_QWORD *)(Type - 8);
  v4[28] = v6;
  v4[29] = *(_QWORD *)(v6 + 64);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<[KeyFetchType : Result<KeyFetchResult, Error>]>.Iterator);
  v4[32] = v7;
  v4[33] = *(_QWORD *)(v7 - 8);
  v4[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyFetchType?);
  v4[35] = swift_task_alloc();
  v8 = type metadata accessor for LogSubsystem();
  v4[36] = v8;
  v4[37] = *(_QWORD *)(v8 - 8);
  v4[38] = swift_task_alloc();
  v4[15] = a2;
  v4[16] = a3;
  v4[17] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = v0[38];
  v20 = v0[37];
  v22 = v0[36];
  v23 = v0[24];
  v0[14] = v0;
  v0[12] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[13] = v1;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("fetching user public keys from server for items ", 0x30uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  v0[18] = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<KeyFetchType>);
  lazy protocol witness table accessor for type Set<KeyFetchType> and conformance Set<A>();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v21);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (KeyFetchType, Result<KeyFetchResult, Error>));
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  v0[19] = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  Set.makeIterator()();
  memcpy(v0 + 7, v0 + 2, 0x28uLL);
  while (1)
  {
    v17 = *(_QWORD *)(v19 + 280);
    v16 = *(_QWORD *)(v19 + 224);
    v18 = *(_QWORD *)(v19 + 216);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<KeyFetchType>.Iterator);
    Set.Iterator.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v18) == 1)
      break;
    v15 = *(_QWORD **)(v19 + 248);
    v11 = *(_QWORD **)(v19 + 240);
    v9 = *(_QWORD *)(v19 + 232);
    v8 = *(_QWORD *)(v19 + 224);
    v14 = *(_QWORD *)(v19 + 208);
    v12 = *(_QWORD *)(v19 + 200);
    outlined init with take of KeyFetchType(*(const void **)(v19 + 280), v15);
    v6 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v14, 1);
    outlined init with copy of KeyFetchType(v15, v11);
    swift_retain();
    v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    outlined init with take of KeyFetchType(v11, (void *)(v13 + v10));
    *(_QWORD *)(v13 + ((v10 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = v12;
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<[KeyFetchType : Result<KeyFetchResult, Error>]>);
    _sScG7addTask8priority9operationyScPSg_xyYaYAcntF(v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:), v13, v7);
    outlined destroy of TaskPriority?(v14);
    outlined destroy of KeyFetchType((uint64_t)v15);
  }
  outlined destroy of Set<KeyFetchType>.Iterator();
  *(_QWORD *)(v19 + 312) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [KeyFetchType : Result<KeyFetchResult, Error>]);
  TaskGroup.makeAsyncIterator()();
  *(_QWORD *)(v19 + 320) = 0;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v19 + 328) = v4;
  *v4 = *(_QWORD *)(v19 + 112);
  v4[1] = closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:);
  return TaskGroup.Iterator.next(isolation:)();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 112) = *(_QWORD *)v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)(v0 + 112) = v0;
  v6 = *(_QWORD *)(v0 + 160);
  if (v6)
  {
    v1 = v5[40];
    v5[21] = v6;
    swift_bridgeObjectRetain();
    result = Dictionary.merge(_:uniquingKeysWith:)();
    if (!v1)
    {
      swift_bridgeObjectRelease();
      v5[40] = 0;
      v3 = (_QWORD *)swift_task_alloc();
      v5[41] = v3;
      *v3 = v5[14];
      v3[1] = closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:);
      return TaskGroup.Iterator.next(isolation:)();
    }
  }
  else
  {
    v4 = (_QWORD *)v5[22];
    (*(void (**)(void))(v5[33] + 8))();
    *v4 = v5[19];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v5[14] + 8))();
  }
  return result;
}

uint64_t partial apply for closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 16) = v3;
  v7 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = partial apply for closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:);
  return closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:)(a1, a2, v7, v8);
}

uint64_t partial apply for closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t closure #1 in closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[97] = a5;
  v5[96] = a4;
  v5[95] = a1;
  v5[89] = v5;
  v5[90] = 0;
  v5[91] = 0;
  v5[83] = 0;
  v5[84] = 0;
  v5[92] = 0;
  v5[94] = 0;
  v6 = type metadata accessor for LogSubsystem();
  v5[98] = v6;
  v5[99] = *(_QWORD *)(v6 - 8);
  v5[100] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GPKUserID?);
  v5[101] = swift_task_alloc();
  v5[102] = swift_task_alloc();
  v7 = type metadata accessor for GPKUserID();
  v5[103] = v7;
  v5[104] = *(_QWORD *)(v7 - 8);
  v5[105] = swift_task_alloc();
  v5[106] = swift_task_alloc();
  v5[107] = swift_task_alloc();
  v5[108] = swift_task_alloc();
  v5[109] = type metadata accessor for KeyFetchType();
  v5[110] = swift_task_alloc();
  v5[111] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<KeyFetchResult, Error>);
  v5[112] = swift_task_alloc();
  v5[113] = swift_task_alloc();
  v5[90] = a4;
  v5[91] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v26;

  v1 = (_QWORD *)v0[110];
  v2 = (_QWORD *)v0[96];
  v0[89] = v0;
  outlined init with copy of KeyFetchType(v2, v1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = (uint64_t *)v26[110];
    v10 = v26[104];
    v11 = v26[103];
    v12 = v26[101];
    v7 = v26[97];
    v13 = *v6;
    v8 = *v6;
    v14 = v6[1];
    v26[117] = v14;
    v26[83] = v8;
    v26[84] = v14;
    outlined init with copy of KeyDistributionServiceProviding(v7 + 56, (uint64_t)(v26 + 70));
    v15 = v26[73];
    v16 = v26[74];
    __swift_project_boxed_opaque_existential_1(v26 + 70, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v12, 1, 1, v11);
    swift_bridgeObjectRetain();
    v17 = (uint64_t (*)(_QWORD, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 + 16)
                                                                                               + **(int **)(v16 + 16));
    v9 = (_QWORD *)swift_task_alloc();
    v26[118] = v9;
    *v9 = v26[89];
    v9[1] = closure #1 in closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:);
    return v17(v26[105], v26 + 2, v26[101], v13, v14, v15, v16);
  }
  else
  {
    v19 = v26[108];
    v20 = v26[104];
    v21 = v26[103];
    v22 = v26[102];
    v18 = v26[97];
    (*(void (**)(void))(v20 + 32))();
    v26[94] = v19;
    outlined init with copy of KeyDistributionServiceProviding(v18 + 56, (uint64_t)(v26 + 75));
    v23 = v26[78];
    v24 = v26[79];
    __swift_project_boxed_opaque_existential_1(v26 + 75, v23);
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    v26[114] = v3;
    v3(v22, v19, v21);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, v21);
    v25 = (uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 + 16)
                                                                                             + **(int **)(v24 + 16));
    v4 = (_QWORD *)swift_task_alloc();
    v26[115] = v4;
    *v4 = v26[89];
    v4[1] = closure #1 in closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:);
    return v25(v26[107], v26 + 36, v26[102], 0, 0, v23, v24);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 712) = *v1;
  *(_QWORD *)(v2 + 928) = v0;
  swift_task_dealloc();
  if (!v0)
    outlined destroy of GPKUserID?(*(_QWORD *)(v4 + 800));
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  id *v17;
  _BYTE v18[136];

  v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[114];
  v6 = (char *)v0[113];
  v5 = (char *)v0[112];
  v9 = v0[108];
  v8 = v0[107];
  v4 = v0[106];
  v7 = v0[104];
  v10 = v0[103];
  v0[89] = v0;
  memcpy(v0 + 53, v0 + 36, 0x88uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 75));
  v3(v4, v8, v10);
  outlined retain of UserKeyInfo(v0 + 53);
  memcpy(v18, v0 + 53, sizeof(v18));
  KeyFetchResult.init(userID:keyInfo:)(v4, v18, (uint64_t)v5);
  swift_storeEnumTagMultiPayload();
  outlined init with take of Result<KeyFetchResult, Error>(v5, v6);
  outlined release of UserKeyInfo(v0 + 53);
  v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v11(v8, v10);
  v11(v9, v10);
  v17 = (id *)v0[113];
  v12 = (_QWORD *)v0[96];
  v16 = (uint64_t *)v0[95];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (KeyFetchType, Result<KeyFetchResult, Error>));
  _allocateUninitializedArray<A>(_:)();
  v14 = v1;
  v13 = *(int *)(v15 + 48);
  outlined init with copy of KeyFetchType(v12, v1);
  outlined init with copy of Result<KeyFetchResult, Error>(v17, (_QWORD *)((char *)v14 + v13));
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  *v16 = Dictionary.init(dictionaryLiteral:)();
  outlined destroy of Result<KeyFetchResult, Error>(v17);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[89] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v5 = *v1 + 16;
  *(_QWORD *)(v2 + 712) = *v1;
  *(_QWORD *)(v2 + 952) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_QWORD *)(v5 + 792);
    swift_bridgeObjectRelease();
    outlined destroy of GPKUserID?(v4);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  id *v14;
  _BYTE __dst[272];

  v5 = (char *)v0[113];
  v4 = (char *)v0[112];
  v3 = v0[106];
  v8 = v0[105];
  v6 = v0[104];
  v7 = v0[103];
  v0[89] = v0;
  memcpy(v0 + 19, v0 + 2, 0x88uLL);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 70));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v8, v7);
  outlined retain of UserKeyInfo(v0 + 19);
  memcpy(__dst, v0 + 19, 0x88uLL);
  KeyFetchResult.init(userID:keyInfo:)(v3, __dst, (uint64_t)v4);
  swift_storeEnumTagMultiPayload();
  outlined init with take of Result<KeyFetchResult, Error>(v4, v5);
  outlined release of UserKeyInfo(v0 + 19);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  swift_bridgeObjectRelease();
  v14 = (id *)v0[113];
  v9 = (_QWORD *)v0[96];
  v13 = (uint64_t *)v0[95];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (KeyFetchType, Result<KeyFetchResult, Error>));
  _allocateUninitializedArray<A>(_:)();
  v11 = v1;
  v10 = *(int *)(v12 + 48);
  outlined init with copy of KeyFetchType(v9, v1);
  outlined init with copy of Result<KeyFetchResult, Error>(v14, (_QWORD *)((char *)v11 + v10));
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  *v13 = Dictionary.init(dictionaryLiteral:)();
  outlined destroy of Result<KeyFetchResult, Error>(v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[89] + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  id v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  id *v25;

  v12 = v0[108];
  v11 = v0[104];
  v13 = v0[103];
  v1 = v0[102];
  v0[89] = v0;
  outlined destroy of GPKUserID?(v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 75));
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  v19 = (id)v0[116];
  v18 = (char *)v0[113];
  v17 = (char *)v0[112];
  v15 = v0[100];
  v14 = v0[99];
  v16 = v0[98];
  v2 = v19;
  v0[92] = v19;
  v0[85] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[86] = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("error fetching key for item ", 0x1CuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" - ", 3uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v0[87] = Error.localizedDescription.getter();
  v0[88] = v6;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v15);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v19;
  *(_QWORD *)v17 = v19;
  swift_storeEnumTagMultiPayload();
  outlined init with take of Result<KeyFetchResult, Error>(v17, v18);

  v25 = (id *)v0[113];
  v20 = (_QWORD *)v0[96];
  v24 = (uint64_t *)v0[95];
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (KeyFetchType, Result<KeyFetchResult, Error>));
  _allocateUninitializedArray<A>(_:)();
  v22 = v9;
  v21 = *(int *)(v23 + 48);
  outlined init with copy of KeyFetchType(v20, v9);
  outlined init with copy of Result<KeyFetchResult, Error>(v25, (_QWORD *)((char *)v22 + v21));
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  *v24 = Dictionary.init(dictionaryLiteral:)();
  outlined destroy of Result<KeyFetchResult, Error>(v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[89] + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  id v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  id *v22;

  v10 = v0[101];
  v0[89] = v0;
  swift_bridgeObjectRelease();
  outlined destroy of GPKUserID?(v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 70));
  swift_bridgeObjectRelease();
  v16 = (id)v0[119];
  v15 = (char *)v0[113];
  v14 = (char *)v0[112];
  v12 = v0[100];
  v11 = v0[99];
  v13 = v0[98];
  v1 = v16;
  v0[92] = v16;
  v0[85] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[86] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("error fetching key for item ", 0x1CuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" - ", 3uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v0[87] = Error.localizedDescription.getter();
  v0[88] = v5;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/UserLookupManager.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v16;
  *(_QWORD *)v14 = v16;
  swift_storeEnumTagMultiPayload();
  outlined init with take of Result<KeyFetchResult, Error>(v14, v15);

  v22 = (id *)v0[113];
  v17 = (_QWORD *)v0[96];
  v21 = (uint64_t *)v0[95];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (KeyFetchType, Result<KeyFetchResult, Error>));
  _allocateUninitializedArray<A>(_:)();
  v19 = v8;
  v18 = *(int *)(v20 + 48);
  outlined init with copy of KeyFetchType(v17, v8);
  outlined init with copy of Result<KeyFetchResult, Error>(v22, (_QWORD *)((char *)v19 + v18));
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type KeyFetchType and conformance KeyFetchType();
  *v21 = Dictionary.init(dictionaryLiteral:)();
  outlined destroy of Result<KeyFetchResult, Error>(v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[89] + 8))();
}

uint64_t _sScG7addTask8priority9operationyScPSg_xyYaYAcntF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD v46[5];

  v38 = a1;
  v34 = a2;
  v35 = a3;
  v36 = a4;
  v39 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v38);
  v40 = (uint64_t)&v13 - v39;
  outlined init with copy of TaskPriority?(v4, (char *)&v13 - v39);
  v41 = type metadata accessor for TaskPriority();
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v42 + 48))(v40, 1) == 1)
  {
    v32 = 0;
    outlined destroy of TaskPriority?(v40);
    v33 = v32;
  }
  else
  {
    v31 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
    v33 = v31;
  }
  v28 = v33 | 0x3100;
  v30 = *(_QWORD *)(v35 + 16);
  v29 = *(_QWORD *)(v35 + 24);
  swift_unknownObjectRetain();
  if (v30)
  {
    v26 = v30;
    v27 = v29;
    v20 = v29;
    v21 = v30;
    swift_getObjectType();
    v22 = dispatch thunk of Actor.unownedExecutor.getter();
    v23 = v5;
    swift_unknownObjectRelease();
    v24 = v22;
    v25 = v23;
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  v15 = v25;
  v14 = v24;
  v16 = 0;
  v13 = *v37;
  v6 = (_QWORD *)swift_allocObject();
  v7 = v34;
  v8 = v35;
  v9 = v14;
  v10 = v15;
  v11 = v16;
  v17 = v6;
  v18 = *(_QWORD *)(v36 + 16);
  v46[4] = v18;
  v6[2] = v18;
  v6[3] = v7;
  v6[4] = v8;
  v19 = v11;
  if (v9 != 0 || v10 != 0)
  {
    v46[0] = 0;
    v46[1] = 0;
    v46[2] = v14;
    v46[3] = v15;
    v19 = v46;
  }
  v43 = 1;
  v44 = v19;
  v45 = v13;
  swift_task_create();
  return swift_release();
}

_QWORD *closure #2 in closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:)@<X0>(id *a1@<X1>, _QWORD *a2@<X8>)
{
  return outlined init with copy of Result<KeyFetchResult, Error>(a1, a2);
}

uint64_t default argument 1 of withTaskGroup<A, B>(of:returning:isolation:body:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t GroupKitUserLookupManager.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 152);
  return v2;
}

uint64_t GroupKitUserLookupManager.__deallocating_deinit()
{
  GroupKitUserLookupManager.deinit();
  return swift_deallocClassInstance();
}

BOOL protocol witness for UserLookupManager.isKeyRegistered.getter in conformance GroupKitUserLookupManager()
{
  return GroupKitUserLookupManager.isKeyRegistered.getter();
}

uint64_t protocol witness for UserLookupManager.resolve(handles:) in conformance GroupKitUserLookupManager(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for UserLookupManager.resolve(handles:) in conformance GroupKitUserLookupManager;
  return GroupKitUserLookupManager.resolve(handles:)(a1);
}

_QWORD *protocol witness for UserLookupManager.resolve(handles:) in conformance GroupKitUserLookupManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = *v3;
  v7 = (_QWORD *)(v4 + 16);
  v5 = swift_task_dealloc();
  if (v2)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v5);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*v7 + 8))(v7, a1, a2);
}

uint64_t protocol witness for UserLookupManager.resolve(handles:ignoreCache:) in conformance GroupKitUserLookupManager(uint64_t a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = protocol witness for UserLookupManager.resolve(handles:ignoreCache:) in conformance GroupKitUserLookupManager;
  return GroupKitUserLookupManager.resolve(handles:ignoreCache:)(a1, a2 & 1);
}

_QWORD *protocol witness for UserLookupManager.resolve(handles:ignoreCache:) in conformance GroupKitUserLookupManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = *v3;
  v7 = (_QWORD *)(v4 + 16);
  v5 = swift_task_dealloc();
  if (v2)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v5);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*v7 + 8))(v7, a1, a2);
}

uint64_t protocol witness for UserLookupManager.resolveUsers(for:) in conformance GroupKitUserLookupManager(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for UserLookupManager.resolveUsers(for:) in conformance GroupKitUserLookupManager;
  return GroupKitUserLookupManager.resolveUsers(for:)(a1);
}

_QWORD *protocol witness for UserLookupManager.resolveUsers(for:) in conformance GroupKitUserLookupManager()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for UserLookupManager.checkAvailability(for:) in conformance GroupKitUserLookupManager(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for UserLookupManager.checkAvailability(for:) in conformance GroupKitUserLookupManager;
  return GroupKitUserLookupManager.checkAvailability(for:)(a1);
}

_QWORD *protocol witness for UserLookupManager.checkAvailability(for:) in conformance GroupKitUserLookupManager(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t protocol witness for UserLookupManager.userID(for:) in conformance GroupKitUserLookupManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v3 + 16) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = protocol witness for UserLookupManager.userID(for:) in conformance GroupKitUserLookupManager;
  return GroupKitUserLookupManager.userID(for:)(a1, a2, a3);
}

_QWORD *protocol witness for UserLookupManager.userID(for:) in conformance GroupKitUserLookupManager()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t protocol witness for UserLookupManager.keyForUserID(_:) in conformance GroupKitUserLookupManager(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for UserLookupManager.keyForUserID(_:) in conformance GroupKitUserLookupManager;
  return GroupKitUserLookupManager.keyForUserID(_:)(a1);
}

_QWORD *protocol witness for UserLookupManager.keyForUserID(_:) in conformance GroupKitUserLookupManager(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *v3;
  *(_QWORD *)(v4 + 16) = *v3;
  v7 = (_QWORD *)(v4 + 16);
  v5 = swift_task_dealloc();
  if (v2)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v5);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*v7 + 8))(v7, a1, a2);
}

uint64_t protocol witness for UserLookupManager.keysForUserIDs(_:) in conformance GroupKitUserLookupManager(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = *(_QWORD *)(v1 + 16);
  v2[1] = protocol witness for UserLookupManager.keysForUserIDs(_:) in conformance GroupKitUserLookupManager;
  return GroupKitUserLookupManager.keysForUserIDs(_:)(a1);
}

_QWORD *protocol witness for UserLookupManager.keysForUserIDs(_:) in conformance GroupKitUserLookupManager(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;

  v3 = *v2;
  *(_QWORD *)(v3 + 16) = *v2;
  v7 = (_QWORD *)(v3 + 16);
  v4 = swift_task_dealloc();
  if (v1)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, v4);
  else
    return (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(*v7 + 8))(v7, a1);
}

uint64_t dispatch thunk of UserLookupManager.isKeyRegistered.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() & 1;
}

uint64_t dispatch thunk of UserLookupManager.resolve(handles:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 16) + **(int **)(a3 + 16));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of UserLookupManager.resolve(handles:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of UserLookupManager.resolve(handles:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 16) = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 8))(a1, a2);
}

uint64_t dispatch thunk of UserLookupManager.resolve(handles:ignoreCache:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v10)(uint64_t, _QWORD, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = v4;
  v10 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a4 + 24) + **(int **)(a4 + 24));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = dispatch thunk of UserLookupManager.resolve(handles:ignoreCache:);
  return v10(a1, a2 & 1, a3, a4);
}

uint64_t dispatch thunk of UserLookupManager.resolve(handles:ignoreCache:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 16) = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 8))(a1, a2);
}

uint64_t dispatch thunk of UserLookupManager.resolveUsers(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 32) + **(int **)(a3 + 32));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of UserLookupManager.resolveUsers(for:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of UserLookupManager.resolveUsers(for:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of UserLookupManager.checkAvailability(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 40) + **(int **)(a3 + 40));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of UserLookupManager.checkAvailability(for:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of UserLookupManager.checkAvailability(for:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t dispatch thunk of UserLookupManager.userID(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 48) + **(int **)(a5 + 48));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = dispatch thunk of UserLookupManager.userID(for:);
  return v12(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of UserLookupManager.userID(for:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t dispatch thunk of UserLookupManager.keyForUserID(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 56) + **(int **)(a3 + 56));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of UserLookupManager.keyForUserID(_:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of UserLookupManager.keyForUserID(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 16) = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 16) + 8))(a1, a2);
}

uint64_t dispatch thunk of UserLookupManager.keysForUserIDs(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 + 64) + **(int **)(a3 + 64));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 24) = v4;
  *v4 = *(_QWORD *)(v3 + 16);
  v4[1] = dispatch thunk of UserLookupManager.keysForUserIDs(_:);
  return v8(a1, a2, a3);
}

uint64_t dispatch thunk of UserLookupManager.keysForUserIDs(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(*v1 + 16) = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 8))(a1);
}

uint64_t type metadata accessor for GroupKitUserLookupManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for GroupKitUserLookupManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GroupKitUserLookupManager.__allocating_init(userStore:keyDistributionService:dateFactory:featureFlags:hardTTL:softTTL:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0__0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

Builtin::Int1 __swiftcall _stdlib_isOSVersionAtLeast_AEIC(_:_:_:)(Builtin::Word a1, Builtin::Word a2, Builtin::Word a3)
{
  return __isPlatformVersionAtLeast(2, a1, a2, a3) != 0;
}

uint64_t sub_23D4F7AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v0 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for KeyFetchType() - 8) + 80);
  v4 = (v0 + 32) & ~v0;
  swift_unknownObjectRelease();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = type metadata accessor for GPKUserID();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3 + v4);
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v2 + 16) = v2;
  v3 = *(_QWORD *)(type metadata accessor for KeyFetchType() - 8);
  v8 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + ((v8 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = *(_QWORD *)(v2 + 16);
  v4[1] = partial apply for closure #1 in closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:);
  return closure #1 in closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:)(a1, v6, v7, v1 + v8, v9);
}

uint64_t partial apply for closure #1 in closure #1 in GroupKitUserLookupManager.fetchKeysFromServer(for:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

void *outlined init with copy of TaskPriority?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTR(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTQ0_;
  return v5(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D4F7EB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int *v5;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(int **)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTu))(a1, v5);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTATQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23D4F800C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTA_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int *v5;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(int **)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0__0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu))(a1, v5);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0__0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t DeviceUnlockReadinessCheck.deviceInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DeviceInfoProviding(v1, a1);
}

uint64_t DeviceUnlockReadinessCheck.checkReadiness()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[9] = v0;
  v1[7] = v1;
  v1[8] = 0;
  v2 = type metadata accessor for InternalErrorCode();
  v1[10] = v2;
  v1[11] = *(_QWORD *)(v2 - 8);
  v1[12] = swift_task_alloc();
  v3 = type metadata accessor for LogSubsystem();
  v1[13] = v3;
  v1[14] = *(_QWORD *)(v3 - 8);
  v1[15] = swift_task_alloc();
  v1[8] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v1 = v0[9];
  v0[7] = v0;
  outlined init with copy of DeviceInfoProviding(v1, (uint64_t)(v0 + 2));
  v11 = v0[5];
  v10 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v11);
  v12 = (*(uint64_t (**)(uint64_t))(v10 + 8))(v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if ((v12 & 1) == 0)
  {
    v7 = v9[15];
    v3 = v9[14];
    v4 = v9[13];
    v8 = v9[12];
    v5 = v9[11];
    v6 = v9[10];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Device is not unlocked after a reboot.", 0x26uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ReadinessChecker.swift", 0x23uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x24BE3DDF0], v6);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v9[7] + 8))();
}

void *DeviceUnlockReadinessCheck.init(deviceInfo:)@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  return outlined init with take of DeviceInfoProviding(a1, a2);
}

uint64_t protocol witness for ReadinessChecking.checkReadiness() in conformance DeviceUnlockReadinessCheck()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ReadinessChecking.checkReadiness() in conformance DeviceUnlockReadinessCheck;
  return DeviceUnlockReadinessCheck.checkReadiness()();
}

_QWORD *protocol witness for ReadinessChecking.checkReadiness() in conformance DeviceUnlockReadinessCheck()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t FeatureReadinessCheck.featureFlags.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of FeatureChecking(v1, a1);
}

uint64_t FeatureReadinessCheck.checkReadiness()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[9] = v0;
  v1[7] = v1;
  v1[8] = 0;
  v2 = type metadata accessor for InternalErrorCode();
  v1[10] = v2;
  v1[11] = *(_QWORD *)(v2 - 8);
  v1[12] = swift_task_alloc();
  v3 = type metadata accessor for LogSubsystem();
  v1[13] = v3;
  v1[14] = *(_QWORD *)(v3 - 8);
  v1[15] = swift_task_alloc();
  v1[8] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;

  v1 = v0[9];
  v0[7] = v0;
  outlined init with copy of FeatureChecking(v1, (uint64_t)(v0 + 2));
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  v10 = dispatch thunk of FeatureChecking.isGroupKitEnabled.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  if ((v10 & 1) == 0)
  {
    v7 = v9[15];
    v3 = v9[14];
    v4 = v9[13];
    v8 = v9[12];
    v5 = v9[11];
    v6 = v9[10];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Groupkit is disabled", 0x14uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ReadinessChecker.swift", 0x23uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v7);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x24BE3DC90], v6);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v9[7] + 8))();
}

void *FeatureReadinessCheck.init(featureFlags:)@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  return outlined init with take of FeatureChecking(a1, a2);
}

uint64_t protocol witness for ReadinessChecking.checkReadiness() in conformance FeatureReadinessCheck()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ReadinessChecking.checkReadiness() in conformance FeatureReadinessCheck;
  return FeatureReadinessCheck.checkReadiness()();
}

_QWORD *protocol witness for ReadinessChecking.checkReadiness() in conformance FeatureReadinessCheck()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t AccountReadinessCheck.accountManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DaemonAccountManagerProtocol(v1, a1);
}

uint64_t AccountReadinessCheck.featureFlags.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of FeatureChecking(v1 + 40, a1);
}

uint64_t AccountReadinessCheck.checkReadiness()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 168) = v0;
  *(_QWORD *)(v1 + 152) = v1;
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_BYTE *)(v1 + 224) = 0;
  v2 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v1 + 176) = v2;
  *(_QWORD *)(v1 + 184) = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v1 + 192) = swift_task_alloc();
  v3 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v1 + 200) = v3;
  *(_QWORD *)(v1 + 208) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v1 + 216) = swift_task_alloc();
  *(_QWORD *)(v1 + 160) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v1 = v0[21];
  v0[19] = v0;
  outlined init with copy of DaemonAccountManagerProtocol(v1, (uint64_t)(v0 + 2));
  v25 = v0[5];
  v24 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v25);
  v26 = (*(uint64_t (**)(uint64_t))(v24 + 8))(v25);
  v27 = v2;
  __swift_destroy_boxed_opaque_existential_1(v23 + 16);
  *(_QWORD *)(v23 + 136) = v26;
  *(_QWORD *)(v23 + 144) = v27;
  if (v27)
  {
    outlined init with copy of FeatureChecking(*(_QWORD *)(v23 + 168) + 40, v23 + 56);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v23 + 56), *(_QWORD *)(v23 + 80));
    v22 = dispatch thunk of FeatureChecking.shouldIgnoreEligibilityCheck.getter();
    __swift_destroy_boxed_opaque_existential_1(v23 + 56);
    if ((v22 & 1) != 0)
    {
      v14 = *(_QWORD *)(v23 + 216);
      v13 = *(_QWORD *)(v23 + 208);
      v15 = *(_QWORD *)(v23 + 200);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ignoreEligibilityCheck feature flag is set. returning true from isEligibleToUseGroupKit", 0x57uLL, 1);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ReadinessChecker.swift", 0x23uLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v23 + 224) = 1;
    }
    else
    {
      outlined init with copy of DaemonAccountManagerProtocol(*(_QWORD *)(v23 + 168), v23 + 96);
      v11 = *(_QWORD *)(v23 + 120);
      v10 = *(_QWORD *)(v23 + 128);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v23 + 96), v11);
      v12 = (*(uint64_t (**)(uint64_t))(v10 + 40))(v11);
      __swift_destroy_boxed_opaque_existential_1(v23 + 96);
      if ((v12 & 1) == 2)
        v28 = 0;
      else
        v28 = v12 & 1;
      *(_BYTE *)(v23 + 224) = v28 & 1;
    }
    if ((*(_BYTE *)(v23 + 224) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(*(_QWORD *)(v23 + 152) + 8))();
    }
    v5 = *(_QWORD *)(v23 + 216);
    v4 = *(_QWORD *)(v23 + 208);
    v6 = *(_QWORD *)(v23 + 200);
    v9 = *(_QWORD *)(v23 + 192);
    v7 = *(_QWORD *)(v23 + 184);
    v8 = *(_QWORD *)(v23 + 176);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("User not eligible to use groupkit.", 0x22uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ReadinessChecker.swift", 0x23uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x24BE3DDD0], v8);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = *(_QWORD *)(v23 + 216);
    v16 = *(_QWORD *)(v23 + 208);
    v18 = *(_QWORD *)(v23 + 200);
    v21 = *(_QWORD *)(v23 + 192);
    v19 = *(_QWORD *)(v23 + 184);
    v20 = *(_QWORD *)(v23 + 176);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("User not eligible to use groupkit.", 0x22uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ReadinessChecker.swift", 0x23uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v17);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x24BE3DCD8], v20);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v23 + 152) + 8))();
}

void *AccountReadinessCheck.init(accountManager:featureFlags:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of DaemonAccountManagerProtocol(a1, (void *)a3);
  return outlined init with take of FeatureChecking(a2, (void *)(a3 + 40));
}

uint64_t protocol witness for ReadinessChecking.checkReadiness() in conformance AccountReadinessCheck()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ReadinessChecking.checkReadiness() in conformance AccountReadinessCheck;
  return AccountReadinessCheck.checkReadiness()();
}

_QWORD *protocol witness for ReadinessChecking.checkReadiness() in conformance AccountReadinessCheck()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t ManateeReadinessCheck.securityService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of SecurityServiceProviding(v1 + 16, a1);
}

uint64_t variable initialization expression of ManateeReadinessCheck.cachedResult()
{
  return 0;
}

uint64_t ManateeReadinessCheck.cachedResult.getter()
{
  uint64_t v0;
  char v2;

  swift_beginAccess();
  v2 = *(_BYTE *)(v0 + 56);
  swift_endAccess();
  return v2 & 1;
}

uint64_t ManateeReadinessCheck.cachedResult.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 56) = a1 & 1;
  return swift_endAccess();
}

uint64_t ManateeReadinessCheck.__allocating_init(securityService:)(uint64_t a1)
{
  swift_allocObject();
  return ManateeReadinessCheck.init(securityService:)(a1);
}

uint64_t ManateeReadinessCheck.init(securityService:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  _BYTE v5[40];
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = v1;
  *(_BYTE *)(v1 + 56) = 0;
  outlined init with copy of SecurityServiceProviding(a1, (uint64_t)v5);
  outlined init with take of SecurityServiceProviding(v5, (void *)(v1 + 16));
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v4;
}

uint64_t ManateeReadinessCheck.checkReadiness()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[18] = v0;
  v1[16] = v1;
  v1[17] = 0;
  v2 = type metadata accessor for InternalErrorCode();
  v1[19] = v2;
  v1[20] = *(_QWORD *)(v2 - 8);
  v1[21] = swift_task_alloc();
  v3 = type metadata accessor for LogSubsystem();
  v1[22] = v3;
  v1[23] = *(_QWORD *)(v3 - 8);
  v1[24] = swift_task_alloc();
  v4 = type metadata accessor for GPKFeatureAvailability();
  v1[25] = v4;
  v1[26] = *(_QWORD *)(v4 - 8);
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  v1[17] = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD, uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  char v8;

  v7 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 128) = v0;
  swift_beginAccess();
  v8 = *(_BYTE *)(v7 + 56);
  swift_endAccess();
  if ((v8 & 1) != 0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v6[16] + 8))();
  }
  else
  {
    outlined init with copy of SecurityServiceProviding(v6[18] + 16, (uint64_t)(v6 + 2));
    v3 = v6[5];
    v4 = v6[6];
    __swift_project_boxed_opaque_existential_1(v6 + 2, v3);
    v5 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 + 8) + **(int **)(v4 + 8));
    v2 = (_QWORD *)swift_task_alloc();
    v6[29] = v2;
    *v2 = v6[16];
    v2[1] = ManateeReadinessCheck.checkReadiness();
    return v5(v6[28], v3, v4);
  }
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 128) = *(_QWORD *)v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  char v29;

  v27 = v0[27];
  v25 = v0[26];
  v26 = v0[25];
  v0[16] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  v24 = *(void (**)(void))(v25 + 104);
  ((void (*)(uint64_t, _QWORD, uint64_t))v24)(v27, *MEMORY[0x24BE3E090], v26);
  lazy protocol witness table accessor for type GPKFeatureAvailability and conformance GPKFeatureAvailability();
  v29 = dispatch thunk of static Equatable.== infix(_:_:)();
  v28 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v28(v27, v26);
  if ((v29 & 1) != 0)
  {
    v11 = v23[27];
    v10 = v23[25];
    v13 = v23[18];
    v24();
    lazy protocol witness table accessor for type GPKFeatureAvailability and conformance GPKFeatureAvailability();
    v12 = == infix<A>(_:_:)();
    v28(v11, v10);
    swift_beginAccess();
    *(_BYTE *)(v13 + 56) = v12 & 1;
    swift_endAccess();
    swift_beginAccess();
    v14 = *(_BYTE *)(v13 + 56);
    swift_endAccess();
    if ((v14 & 1) != 0)
    {
      v28(v23[28], v23[25]);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v23[16] + 8))();
    }
    v8 = v23[28];
    v9 = v23[25];
    v3 = v23[24];
    v2 = v23[23];
    v4 = v23[22];
    v7 = v23[21];
    v5 = v23[20];
    v6 = v23[19];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("End-to-End encryption not available.", 0x24uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ReadinessChecker.swift", 0x23uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BE3DE30], v6);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    v28(v8, v9);
  }
  else
  {
    v21 = v23[28];
    v22 = v23[25];
    v16 = v23[24];
    v15 = v23[23];
    v17 = v23[22];
    v20 = v23[21];
    v18 = v23[20];
    v19 = v23[19];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("End-to-End encryption not available.", 0x24uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ReadinessChecker.swift", 0x23uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v16);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x24BE3DE30], v19);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    v28(v21, v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v23[16] + 8))();
}

unint64_t lazy protocol witness table accessor for type GPKFeatureAvailability and conformance GPKFeatureAvailability()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKFeatureAvailability and conformance GPKFeatureAvailability;
  if (!lazy protocol witness table cache variable for type GPKFeatureAvailability and conformance GPKFeatureAvailability)
  {
    v0 = type metadata accessor for GPKFeatureAvailability();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E0A8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKFeatureAvailability and conformance GPKFeatureAvailability);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type GPKFeatureAvailability and conformance GPKFeatureAvailability;
  if (!lazy protocol witness table cache variable for type GPKFeatureAvailability and conformance GPKFeatureAvailability)
  {
    v0 = type metadata accessor for GPKFeatureAvailability();
    v1 = MEMORY[0x242635504](MEMORY[0x24BE3E0B0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type GPKFeatureAvailability and conformance GPKFeatureAvailability);
    return v1;
  }
  return v3;
}

uint64_t ManateeReadinessCheck.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v2;
}

uint64_t ManateeReadinessCheck.__deallocating_deinit()
{
  ManateeReadinessCheck.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ReadinessChecking.checkReadiness() in conformance ManateeReadinessCheck()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ReadinessChecking.checkReadiness() in conformance ManateeReadinessCheck;
  return ManateeReadinessCheck.checkReadiness()();
}

_QWORD *protocol witness for ReadinessChecking.checkReadiness() in conformance ManateeReadinessCheck()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t URLBagReadinessCheck.bag.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_unknownObjectRetain();
  return v2;
}

uint64_t variable initialization expression of URLBagReadinessCheck.cachedResult()
{
  return 0;
}

uint64_t URLBagReadinessCheck.cachedResult.getter()
{
  uint64_t v0;
  char v2;

  swift_beginAccess();
  v2 = *(_BYTE *)(v0 + 24);
  swift_endAccess();
  return v2 & 1;
}

uint64_t URLBagReadinessCheck.cachedResult.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 24) = a1 & 1;
  return swift_endAccess();
}

uint64_t URLBagReadinessCheck.__allocating_init(bag:)(uint64_t a1)
{
  swift_allocObject();
  return URLBagReadinessCheck.init(bag:)(a1);
}

uint64_t URLBagReadinessCheck.init(bag:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;

  *(_BYTE *)(v1 + 24) = 0;
  swift_unknownObjectRetain();
  *(_QWORD *)(v1 + 16) = a1;
  swift_unknownObjectRelease();
  return v4;
}

uint64_t URLBagReadinessCheck.checkReadiness()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[19] = v0;
  v1[16] = v1;
  v1[17] = 0;
  v1[10] = 0;
  v1[11] = 0;
  v2 = type metadata accessor for InternalErrorCode();
  v1[20] = v2;
  v1[21] = *(_QWORD *)(v2 - 8);
  v1[22] = swift_task_alloc();
  v3 = type metadata accessor for LogSubsystem();
  v1[23] = v3;
  v1[24] = *(_QWORD *)(v3 - 8);
  v1[25] = swift_task_alloc();
  v1[17] = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;

  v16 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 128) = v0;
  swift_beginAccess();
  v17 = *(_BYTE *)(v16 + 24);
  swift_endAccess();
  if ((v17 & 1) == 0)
  {
    v14 = *URLBagKey.allCases.unsafeMutableAddressor();
    swift_bridgeObjectRetain();
    v15[18] = v14;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    Sequence.first(where:)();
    swift_release();
    outlined destroy of [String]();
    v12 = v15[8];
    v13 = v15[9];
    if (v13)
    {
      v10 = v15[25];
      v6 = v15[24];
      v7 = v15[23];
      v11 = v15[22];
      v8 = v15[21];
      v9 = v15[20];
      v15[10] = v12;
      v15[11] = v13;
      v15[12] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v15[13] = v1;
      v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("URL missing in the URL bag for key ", 0x23uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v2);
      swift_bridgeObjectRelease();
      v15[14] = v12;
      v15[15] = v13;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ReadinessChecker.swift", 0x23uLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
      gpklog(_:type:fileID:line:subsystem:)();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v11, *MEMORY[0x24BE3DD48], v9);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v15[16] + 8))();
    }
    v5 = v15[19];
    swift_beginAccess();
    *(_BYTE *)(v5 + 24) = 1;
    swift_endAccess();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v15[16] + 8))();
}

BOOL closure #1 in URLBagReadinessCheck.checkReadiness()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BOOL4 v5;
  _BOOL4 v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v14 = a1;
  v13 = a2;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v9 = type metadata accessor for URL();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v5 - v11;
  v15 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (uint64_t)&v5 - v15;
  v17 = *v2;
  v18 = v2[1];
  v23 = v17;
  v24 = v18;
  v22 = v3;
  v19 = *(id *)(v3 + 16);
  swift_unknownObjectRetain();
  swift_getObjectType();
  swift_bridgeObjectRetain();
  v20 = (id)MEMORY[0x2426348B0](v17, v18);
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v19, sel_urlAtKey_, v20);

  if (v21)
  {
    v8 = v21;
    v7 = v21;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v16, v12, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);

  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v16, 1, 1, v9);
  }
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1;
  v5 = v6;
  outlined destroy of URL?(v16);
  swift_unknownObjectRelease();
  return v5;
}

BOOL partial apply for closure #1 in URLBagReadinessCheck.checkReadiness()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in URLBagReadinessCheck.checkReadiness()(a1, v1);
}

uint64_t URLBagReadinessCheck.deinit()
{
  uint64_t v1;

  swift_unknownObjectRelease();
  return v1;
}

uint64_t URLBagReadinessCheck.__deallocating_deinit()
{
  URLBagReadinessCheck.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ReadinessChecking.checkReadiness() in conformance URLBagReadinessCheck()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ReadinessChecking.checkReadiness() in conformance URLBagReadinessCheck;
  return URLBagReadinessCheck.checkReadiness()();
}

_QWORD *protocol witness for ReadinessChecking.checkReadiness() in conformance URLBagReadinessCheck()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t LocalStoreLoader.store.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Store(v1, a1);
}

uint64_t LocalStoreLoader.checkReadiness()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[9] = v0;
  v1[7] = v1;
  v1[8] = 0;
  v1[8] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v1 = v0[9];
  v0[7] = v0;
  outlined init with copy of Store(v1, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 16) + **(int **)(v5 + 16));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 80) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = LocalStoreLoader.checkReadiness();
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 56) + 8))();
}

void *LocalStoreLoader.init(store:)@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  return outlined init with take of Store(a1, a2);
}

uint64_t protocol witness for ReadinessChecking.checkReadiness() in conformance LocalStoreLoader()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ReadinessChecking.checkReadiness() in conformance LocalStoreLoader;
  return LocalStoreLoader.checkReadiness()();
}

_QWORD *protocol witness for ReadinessChecking.checkReadiness() in conformance LocalStoreLoader()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t CloudStoreLoader.store.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Store(v1, a1);
}

uint64_t CloudStoreLoader.checkReadiness()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[9] = v0;
  v1[7] = v1;
  v1[8] = 0;
  v1[8] = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v1 = v0[9];
  v0[7] = v0;
  outlined init with copy of Store(v1, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 24) + **(int **)(v5 + 24));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 80) = v2;
  *v2 = *(_QWORD *)(v4 + 56);
  v2[1] = CloudStoreLoader.checkReadiness();
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = *v1;
  *(_QWORD *)(v2 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 8))();
}

{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 56) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 56) + 8))();
}

void *CloudStoreLoader.init(store:)@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  return outlined init with take of Store(a1, a2);
}

uint64_t protocol witness for ReadinessChecking.checkReadiness() in conformance CloudStoreLoader()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ReadinessChecking.checkReadiness() in conformance CloudStoreLoader;
  return CloudStoreLoader.checkReadiness()();
}

_QWORD *protocol witness for ReadinessChecking.checkReadiness() in conformance CloudStoreLoader()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t ServiceReadinessChecker.checkList.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ServiceReadinessChecker.metrics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Metrics(v1 + 8, a1);
}

uint64_t ServiceReadinessChecker.onReady.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 216);
  outlined copy of (@escaping @callee_guaranteed @async () -> (@error @owned Error))?(v2);
  return v2;
}

uint64_t outlined copy of (@escaping @callee_guaranteed @async () -> (@error @owned Error))?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t ServiceReadinessChecker.checkReadiness()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 576) = v0;
  *(_QWORD *)(v1 + 528) = v1;
  *(_QWORD *)(v1 + 536) = 0;
  *(_BYTE *)(v1 + 218) = 0;
  *(_QWORD *)(v1 + 512) = 0;
  *(_QWORD *)(v1 + 520) = 0;
  *(_QWORD *)(v1 + 552) = 0;
  *(_QWORD *)(v1 + 560) = 0;
  *(_QWORD *)(v1 + 568) = 0;
  v2 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v1 + 584) = v2;
  *(_QWORD *)(v1 + 592) = *(_QWORD *)(v2 - 8);
  *(_QWORD *)(v1 + 600) = swift_task_alloc();
  v3 = type metadata accessor for Date();
  *(_QWORD *)(v1 + 608) = v3;
  *(_QWORD *)(v1 + 616) = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v1 + 624) = swift_task_alloc();
  *(_QWORD *)(v1 + 632) = swift_task_alloc();
  *(_QWORD *)(v1 + 536) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  double v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  v23 = *(uint64_t **)(v0 + 576);
  *(_QWORD *)(v0 + 528) = v0;
  Date.init()();
  *(_BYTE *)(v0 + 218) = 1;
  v24 = *v23;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 544) = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ReadinessChecking]);
  lazy protocol witness table accessor for type [ReadinessChecking] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[ReadinessChecking]>);
  IndexingIterator.next()();
  if (*(_QWORD *)(v0 + 456))
  {
    outlined init with take of ReadinessChecking((const void *)(v22 + 432), (void *)(v22 + 472));
    v21 = *(_QWORD *)(v22 + 496);
    v19 = *(_QWORD *)(v22 + 504);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v22 + 472), v21);
    v20 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v19 + 8) + **(int **)(v19 + 8));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v22 + 640) = v1;
    *v1 = *(_QWORD *)(v22 + 528);
    v1[1] = ServiceReadinessChecker.checkReadiness();
    return v20(v21, v19);
  }
  v14 = *(_QWORD *)(v22 + 624);
  v13 = *(_QWORD *)(v22 + 616);
  v15 = *(_QWORD *)(v22 + 608);
  v16 = *(_QWORD *)(v22 + 576);
  outlined destroy of IndexingIterator<[ReadinessChecking]>();
  Date.init()();
  Date.timeIntervalSince(_:)();
  v17 = v3;
  v4 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(_QWORD *)(v22 + 656) = v4;
  v4(v14, v15);
  *(Swift::Double *)(v22 + 552) = v17;
  outlined init with copy of Metrics(v16 + 8, v22 + 16);
  v18 = default argument 2 of Metrics.callAsFunction(_:duration:eventInfo:)();
  Metrics.callAsFunction(_:duration:eventInfo:)(GroupKitCore_Metrics_Event_deviceReadiness, v17, (Swift::OpaquePointer)v18);
  swift_bridgeObjectRelease();
  outlined destroy of Metrics(v22 + 16);
  if ((*(_BYTE *)(v22 + 218) & 1) != 0)
  {
    v5 = *(_QWORD *)(v22 + 576);
    v6 = *(_QWORD *)(v5 + 216);
    v12 = (int *)v6;
    *(_QWORD *)(v22 + 664) = *(_QWORD *)(v5 + 224);
    outlined copy of (@escaping @callee_guaranteed @async () -> (@error @owned Error))?(v6);
    if (v12)
    {
      v11 = (uint64_t (*)(void))((char *)v12 + *v12);
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v22 + 672) = v7;
      *v7 = *(_QWORD *)(v22 + 528);
      v7[1] = ServiceReadinessChecker.checkReadiness();
      return v11();
    }
    v9 = *(_QWORD *)(v22 + 600);
    v8 = *(_QWORD *)(v22 + 592);
    v10 = *(_QWORD *)(v22 + 584);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Device is ready to perform GroupKit operations", 0x32uLL, 0);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ReadinessChecker.swift", 0x23uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void))(v22 + 656))();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v22 + 528) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 528) = *v1;
  *(_QWORD *)(v2 + 648) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  double v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v0 + 528) = v0;
  *(_BYTE *)(v22 + 218) = (*(_BYTE *)(v0 + 218) & 1) != 0;
  __swift_destroy_boxed_opaque_existential_1(v22 + 472);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[ReadinessChecking]>);
  IndexingIterator.next()();
  if (*(_QWORD *)(v22 + 456))
  {
    outlined init with take of ReadinessChecking((const void *)(v22 + 432), (void *)(v22 + 472));
    v21 = *(_QWORD *)(v22 + 496);
    v19 = *(_QWORD *)(v22 + 504);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v22 + 472), v21);
    v20 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v19 + 8) + **(int **)(v19 + 8));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v22 + 640) = v1;
    *v1 = *(_QWORD *)(v22 + 528);
    v1[1] = ServiceReadinessChecker.checkReadiness();
    return v20(v21, v19);
  }
  v14 = *(_QWORD *)(v22 + 624);
  v13 = *(_QWORD *)(v22 + 616);
  v15 = *(_QWORD *)(v22 + 608);
  v16 = *(_QWORD *)(v22 + 576);
  outlined destroy of IndexingIterator<[ReadinessChecking]>();
  Date.init()();
  Date.timeIntervalSince(_:)();
  v17 = v3;
  v4 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(_QWORD *)(v22 + 656) = v4;
  v4(v14, v15);
  *(Swift::Double *)(v22 + 552) = v17;
  outlined init with copy of Metrics(v16 + 8, v22 + 16);
  v18 = default argument 2 of Metrics.callAsFunction(_:duration:eventInfo:)();
  Metrics.callAsFunction(_:duration:eventInfo:)(GroupKitCore_Metrics_Event_deviceReadiness, v17, (Swift::OpaquePointer)v18);
  swift_bridgeObjectRelease();
  outlined destroy of Metrics(v22 + 16);
  if ((*(_BYTE *)(v22 + 218) & 1) != 0)
  {
    v5 = *(_QWORD *)(v22 + 576);
    v6 = *(_QWORD *)(v5 + 216);
    v12 = (int *)v6;
    *(_QWORD *)(v22 + 664) = *(_QWORD *)(v5 + 224);
    outlined copy of (@escaping @callee_guaranteed @async () -> (@error @owned Error))?(v6);
    if (v12)
    {
      v11 = (uint64_t (*)(void))((char *)v12 + *v12);
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v22 + 672) = v7;
      *v7 = *(_QWORD *)(v22 + 528);
      v7[1] = ServiceReadinessChecker.checkReadiness();
      return v11();
    }
    v9 = *(_QWORD *)(v22 + 600);
    v8 = *(_QWORD *)(v22 + 592);
    v10 = *(_QWORD *)(v22 + 584);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Device is ready to perform GroupKit operations", 0x32uLL, 0);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ReadinessChecker.swift", 0x23uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void))(v22 + 656))();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v22 + 528) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 528) = *v1;
  *(_QWORD *)(v2 + 680) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v0 + 528) = v0;
  swift_release();
  v3 = *(_QWORD *)(v0 + 600);
  v2 = *(_QWORD *)(v0 + 592);
  v4 = *(_QWORD *)(v0 + 584);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Device is ready to perform GroupKit operations", 0x32uLL, 0);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/ReadinessChecker.swift", 0x23uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(void))(v0 + 656))();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 528) + 8))();
}

{
  double *v0;
  void *v1;
  id v2;
  double v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = (void *)*((_QWORD *)v0 + 81);
  v9 = *((_QWORD *)v0 + 79);
  v6 = *((_QWORD *)v0 + 78);
  v5 = *((_QWORD *)v0 + 77);
  v10 = *((_QWORD *)v0 + 76);
  v7 = *((_QWORD *)v0 + 72);
  *((_QWORD *)v0 + 66) = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 59));
  outlined destroy of IndexingIterator<[ReadinessChecking]>();
  v2 = v1;
  *((_QWORD *)v0 + 70) = v1;
  Date.init()();
  Date.timeIntervalSince(_:)();
  v8 = v3;
  v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v11(v6, v10);
  v0[71] = v8;
  outlined init with copy of Metrics(v7 + 8, (uint64_t)(v0 + 28));
  Metrics.callAsFunction(error:for:duration:)(v1, 5, v8);
  outlined destroy of Metrics((uint64_t)(v0 + 28));
  swift_willThrow();

  v11(v9, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*((_QWORD *)v0 + 66) + 8))();
}

{
  _QWORD *v0;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);

  v4 = (void (*)(uint64_t, uint64_t))v0[82];
  v2 = v0[79];
  v3 = v0[76];
  v0[66] = v0;
  swift_release();
  v4(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[66] + 8))();
}

unint64_t lazy protocol witness table accessor for type [ReadinessChecking] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [ReadinessChecking] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ReadinessChecking] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ReadinessChecking]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [ReadinessChecking] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[ReadinessChecking]>()
{
  swift_bridgeObjectRelease();
}

void *ServiceReadinessChecker.init(checkList:metrics:onReady:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *result;

  *a5 = a1;
  result = memcpy(a5 + 1, a2, 0xCAuLL);
  a5[27] = a3;
  a5[28] = a4;
  return result;
}

uint64_t protocol witness for ReadinessChecking.checkReadiness() in conformance ServiceReadinessChecker()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 16) = v0;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = *(_QWORD *)(v0 + 16);
  v1[1] = protocol witness for ReadinessChecking.checkReadiness() in conformance ServiceReadinessChecker;
  return ServiceReadinessChecker.checkReadiness()();
}

_QWORD *protocol witness for ReadinessChecking.checkReadiness() in conformance ServiceReadinessChecker()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t dispatch thunk of ReadinessChecking.checkReadiness()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v6)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(a2 + 8) + **(int **)(a2 + 8));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = dispatch thunk of ReadinessChecking.checkReadiness();
  return v6(a1, a2);
}

uint64_t dispatch thunk of ReadinessChecking.checkReadiness()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for DeviceUnlockReadinessCheck(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for DeviceUnlockReadinessCheck(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for DeviceUnlockReadinessCheck(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  (**(void (***)(void))(v2 - 8))();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithCopy for DeviceUnlockReadinessCheck(uint64_t a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
}

void *assignWithTake for DeviceUnlockReadinessCheck(void *a1, const void *a2)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceUnlockReadinessCheck(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceUnlockReadinessCheck(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 40) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 40) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceUnlockReadinessCheck()
{
  return &type metadata for DeviceUnlockReadinessCheck;
}

uint64_t initializeBufferWithCopyOfBuffer for FeatureReadinessCheck(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for FeatureReadinessCheck(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for FeatureReadinessCheck(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  (**(void (***)(void))(v2 - 8))();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithCopy for FeatureReadinessCheck(uint64_t a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
}

void *assignWithTake for FeatureReadinessCheck(void *a1, const void *a2)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureReadinessCheck(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureReadinessCheck(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 40) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 40) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureReadinessCheck()
{
  return &type metadata for FeatureReadinessCheck;
}

uint64_t initializeBufferWithCopyOfBuffer for AccountReadinessCheck(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for AccountReadinessCheck(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

_QWORD *initializeWithCopy for AccountReadinessCheck(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

uint64_t assignWithCopy for AccountReadinessCheck(uint64_t a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, a2 + 5);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy80_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for AccountReadinessCheck(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  memcpy((void *)a1, (const void *)a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountReadinessCheck(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccountReadinessCheck(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 80) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 80) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountReadinessCheck()
{
  return &type metadata for AccountReadinessCheck;
}

uint64_t type metadata accessor for ManateeReadinessCheck()
{
  return objc_opt_self();
}

uint64_t method lookup function for ManateeReadinessCheck()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ManateeReadinessCheck.__allocating_init(securityService:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for URLBagReadinessCheck()
{
  return objc_opt_self();
}

uint64_t method lookup function for URLBagReadinessCheck()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of URLBagReadinessCheck.__allocating_init(bag:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t initializeBufferWithCopyOfBuffer for LocalStoreLoader(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for LocalStoreLoader(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for LocalStoreLoader(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  (**(void (***)(void))(v2 - 8))();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithCopy for LocalStoreLoader(uint64_t a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
}

void *assignWithTake for LocalStoreLoader(void *a1, const void *a2)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalStoreLoader(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalStoreLoader(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 40) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 40) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocalStoreLoader()
{
  return &type metadata for LocalStoreLoader;
}

uint64_t initializeBufferWithCopyOfBuffer for CloudStoreLoader(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CloudStoreLoader(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t initializeWithCopy for CloudStoreLoader(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  (**(void (***)(void))(v2 - 8))();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> assignWithCopy for CloudStoreLoader(uint64_t a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
}

void *assignWithTake for CloudStoreLoader(void *a1, const void *a2)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  memcpy(a1, a2, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudStoreLoader(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudStoreLoader(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 40) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 40) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudStoreLoader()
{
  return &type metadata for CloudStoreLoader;
}

uint64_t initializeBufferWithCopyOfBuffer for ServiceReadinessChecker(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for ServiceReadinessChecker(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  if (*(_QWORD *)(a1 + 112))
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 216))
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for ServiceReadinessChecker(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)a1 = v11;
  v2 = a2[4];
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = a2[5];
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a1 + 8, (uint64_t)(a2 + 1));
  v3 = a2[9];
  *(_QWORD *)(a1 + 72) = v3;
  *(_QWORD *)(a1 + 80) = a2[10];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 48, (uint64_t)(a2 + 6));
  if (a2[14])
  {
    v4 = a2[14];
    *(_QWORD *)(a1 + 112) = v4;
    *(_QWORD *)(a1 + 120) = a2[15];
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 88, (uint64_t)(a2 + 11));
  }
  else
  {
    memcpy((void *)(a1 + 88), a2 + 11, 0x28uLL);
  }
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = a2[20];
  v8 = a2[21];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 168) = v8;
  *(_QWORD *)(a1 + 176) = a2[22];
  v9 = a2[23];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 184) = v9;
  *(_QWORD *)(a1 + 192) = a2[24];
  v10 = a2[25];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 200) = v10;
  *(_WORD *)(a1 + 208) = *((_WORD *)a2 + 104);
  if (a2[27])
  {
    v6 = a2[27];
    v7 = a2[28];
    swift_retain();
    *(_QWORD *)(a1 + 216) = v6;
    *(_QWORD *)(a1 + 224) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  }
  return a1;
}

uint64_t assignWithCopy for ServiceReadinessChecker(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)a1 = v11;
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 8, a2 + 1);
  __swift_assign_boxed_opaque_existential_1(a1 + 48, a2 + 6);
  if (*(_QWORD *)(a1 + 112))
  {
    if (a2[14])
    {
      __swift_assign_boxed_opaque_existential_1(a1 + 88, a2 + 11);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 88);
      memcpy((void *)(a1 + 88), a2 + 11, 0x28uLL);
    }
  }
  else if (a2[14])
  {
    v2 = a2[14];
    *(_QWORD *)(a1 + 112) = v2;
    *(_QWORD *)(a1 + 120) = a2[15];
    (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a1 + 88, (uint64_t)(a2 + 11));
  }
  else
  {
    memcpy((void *)(a1 + 88), a2 + 11, 0x28uLL);
  }
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_BYTE *)(a1 + 144) = a2[18] & 1;
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = a2[20];
  v8 = a2[21];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 168) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = a2[22];
  v9 = a2[23];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 184) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = a2[24];
  v10 = a2[25];
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 200) = v10;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 208) = *((_WORD *)a2 + 104);
  if (*(_QWORD *)(a1 + 216))
  {
    if (a2[27])
    {
      v6 = a2[27];
      v7 = a2[28];
      swift_retain();
      *(_QWORD *)(a1 + 216) = v6;
      *(_QWORD *)(a1 + 224) = v7;
      swift_release();
    }
    else
    {
      swift_release();
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
    }
  }
  else if (a2[27])
  {
    v4 = a2[27];
    v5 = a2[28];
    swift_retain();
    *(_QWORD *)(a1 + 216) = v4;
    *(_QWORD *)(a1 + 224) = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  }
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy232_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0xE8uLL);
}

uint64_t assignWithTake for ServiceReadinessChecker(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x28uLL);
  if (*(_QWORD *)(a1 + 112))
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  memcpy((void *)(a1 + 88), (const void *)(a2 + 88), 0x38uLL);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144) & 1;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  if (*(_QWORD *)(a1 + 216))
  {
    if (*(_QWORD *)(a2 + 216))
    {
      v2 = *(_QWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
      *(_QWORD *)(a1 + 224) = v2;
      swift_release();
    }
    else
    {
      swift_release();
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    }
  }
  else if (*(_QWORD *)(a2 + 216))
  {
    v3 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 224) = v3;
  }
  else
  {
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ServiceReadinessChecker(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 232))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)a1))
        v3 = *(_QWORD *)a1;
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for ServiceReadinessChecker(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 29;
  if (a2 < 0)
  {
    result[27] = 0;
    result[26] = 0;
    result[25] = 0;
    result[24] = 0;
    result[23] = 0;
    result[22] = 0;
    result[21] = 0;
    result[20] = 0;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[28] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      *result = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ServiceReadinessChecker()
{
  return &type metadata for ServiceReadinessChecker;
}

uint64_t CompleteGPKFetchGroupsRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

_QWORD *CompleteGPKFetchGroupsRequest.Response.groupBlob.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for CompleteGPKFetchGroupsRequest.Response();
  return outlined init with copy of GroupBlobEnvelope?((_QWORD *)(v1 + *(int *)(v2 + 20)), a1);
}

uint64_t type metadata accessor for CompleteGPKFetchGroupsRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteGPKFetchGroupsRequest.Response;
  if (!type metadata singleton initialization cache for CompleteGPKFetchGroupsRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t CompleteGPKFetchGroupsRequest.Response.groupDigest.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompleteGPKFetchGroupsRequest.Response() + 24));
  swift_bridgeObjectRetain();
  return v2;
}

BOOL static CompleteGPKFetchGroupsRequest.Response.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t CompleteGPKFetchGroupsRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteGPKFetchGroupsRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 0;
LABEL_8:
    swift_bridgeObjectRelease();
    return v5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupBlob", 9uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 1;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupDigest", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v5 = 2;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t CompleteGPKFetchGroupsRequest.Response.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t CompleteGPKFetchGroupsRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKFetchGroupsRequest.Response.CodingKeys, &type metadata for CompleteGPKFetchGroupsRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKFetchGroupsRequest.Response.CodingKeys, &type metadata for CompleteGPKFetchGroupsRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKFetchGroupsRequest.Response.CodingKeys, &type metadata for CompleteGPKFetchGroupsRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKFetchGroupsRequest.Response.CodingKeys, &type metadata for CompleteGPKFetchGroupsRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKFetchGroupsRequest.Response.CodingKeys, &type metadata for CompleteGPKFetchGroupsRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteGPKFetchGroupsRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CompleteGPKFetchGroupsRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupBlob", 9uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupDigest", 0xBuLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys(char *a1, char *a2)
{
  return static CompleteGPKFetchGroupsRequest.Response.CodingKeys.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys()
{
  return CompleteGPKFetchGroupsRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys()
{
  return CompleteGPKFetchGroupsRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys()
{
  char *v0;

  return CompleteGPKFetchGroupsRequest.Response.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteGPKFetchGroupsRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys()
{
  return CompleteGPKFetchGroupsRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteGPKFetchGroupsRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteGPKFetchGroupsRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  _QWORD *v44;

  v25 = a1;
  v44 = 0;
  v43 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
  v22 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v23 = (_QWORD *)((char *)v9 - v22);
  v35 = type metadata accessor for GPKGroupID();
  v31 = *(_QWORD *)(v35 - 8);
  v24 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)v9 - v24;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteGPKFetchGroupsRequest.Response.CodingKeys>);
  v26 = *(_QWORD *)(v34 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)v9 - v27;
  v44 = v3;
  v43 = v1;
  v28 = v3[3];
  v29 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v28);
  lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v37, v32, v35);
  v33 = &v42;
  v42 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v4 = v36;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v38 = v4;
  v39 = v4;
  if (v4)
  {
    v10 = v39;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v37, v35);
    result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v30, v34);
    v11 = v10;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v37, v35);
    v17 = 0;
    v16 = type metadata accessor for CompleteGPKFetchGroupsRequest.Response();
    outlined init with copy of GroupBlobEnvelope?((_QWORD *)(v32 + *(int *)(v16 + 20)), v23);
    v18 = &v41;
    v41 = 1;
    v19 = type metadata accessor for GroupBlobEnvelope();
    lazy protocol witness table accessor for type GroupBlobEnvelope and conformance GroupBlobEnvelope();
    v5 = v38;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v20 = v5;
    v21 = v5;
    if (v5)
    {
      v9[2] = v21;
      outlined destroy of GroupBlobEnvelope?((uint64_t)v23);
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v30, v34);
    }
    else
    {
      outlined destroy of GroupBlobEnvelope?((uint64_t)v23);
      v6 = v20;
      v7 = (uint64_t *)(v32 + *(int *)(v16 + 24));
      v12 = *v7;
      v13 = v7[1];
      swift_bridgeObjectRetain();
      v40 = 2;
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      v14 = v6;
      v15 = v6;
      if (v6)
        v9[1] = v15;
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v30, v34);
    }
  }
  return result;
}

uint64_t CompleteGPKFetchGroupsRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t result;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  _QWORD *v58;
  char v59;

  v34 = a2;
  v45 = a1;
  v58 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
  v35 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v36 = (_DWORD *)((char *)v17 - v35);
  v41 = 0;
  v37 = type metadata accessor for GPKGroupID();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = (*(_QWORD *)(v38 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)v17 - v39;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteGPKFetchGroupsRequest.Response.CodingKeys>);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = (*(_QWORD *)(v43 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v41);
  v49 = (char *)v17 - v44;
  v46 = type metadata accessor for CompleteGPKFetchGroupsRequest.Response();
  v47 = (*(_QWORD *)(*(_QWORD *)(v46 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v45);
  v48 = (uint64_t)v17 - v47;
  v59 = 0;
  v58 = v3;
  v51 = v3[3];
  v52 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v51);
  lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys();
  v4 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v53 = v4;
  v54 = v4;
  if (v4)
  {
    v21 = v54;
  }
  else
  {
    v31 = &v57;
    v57 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v5 = v53;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v32 = v5;
    v33 = v5;
    if (v5)
    {
      v20 = v33;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v42);
      v21 = v20;
    }
    else
    {
      v26 = 1;
      v59 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v48, v40, v37);
      v28 = type metadata accessor for GroupBlobEnvelope();
      v27 = &v56;
      v56 = v26;
      lazy protocol witness table accessor for type GroupBlobEnvelope and conformance GroupBlobEnvelope();
      v6 = v32;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v29 = v6;
      v30 = v6;
      if (v6)
      {
        v19 = v30;
        (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v42);
        v21 = v19;
      }
      else
      {
        v7 = (_DWORD *)(v48 + *(int *)(v46 + 20));
        v59 = 3;
        outlined init with take of GroupBlobEnvelope?(v36, v7);
        v8 = v29;
        v55 = 2;
        v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
        v22 = v8;
        v23 = v9;
        v24 = v10;
        v25 = v8;
        if (!v8)
        {
          v11 = v42;
          v12 = v49;
          v13 = v43;
          v14 = v24;
          v15 = (uint64_t *)(v48 + *(int *)(v46 + 24));
          v59 = 7;
          *v15 = v23;
          v15[1] = v14;
          (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v11);
          outlined init with copy of CompleteGPKFetchGroupsRequest.Response(v48, v34);
          __swift_destroy_boxed_opaque_existential_1(v45);
          return outlined destroy of CompleteGPKFetchGroupsRequest.Response(v48);
        }
        v18 = v25;
        (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v42);
        v21 = v18;
      }
    }
  }
  v17[1] = v21;
  result = __swift_destroy_boxed_opaque_existential_1(v45);
  if ((v59 & 1) != 0)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v48, v37);
  if ((v59 & 2) != 0)
    return outlined destroy of GroupBlobEnvelope?(v48 + *(int *)(v46 + 20));
  return result;
}

uint64_t outlined init with copy of CompleteGPKFetchGroupsRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  _QWORD *v42;
  int *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v49 = type metadata accessor for CompleteGPKFetchGroupsRequest.Response();
  v50 = *(int *)(v49 + 20);
  v52 = type metadata accessor for GroupBlobEnvelope();
  v53 = *(_QWORD *)(v52 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v53 + 48))(a1 + v50, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy((void *)(a2 + v50), (const void *)(a1 + v50), *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v42 = (_QWORD *)(a2 + v50);
    *(_DWORD *)(a2 + v50) = *(_DWORD *)(a1 + v50);
    v34 = *(_QWORD *)(a1 + v50 + 8);
    v35 = *(_QWORD *)(a1 + v50 + 16);
    outlined copy of Data._Representation(v34, v35);
    v42[1] = v34;
    v42[2] = v35;
    v36 = *(_QWORD *)(a1 + v50 + 24);
    v37 = *(_QWORD *)(a1 + v50 + 32);
    outlined copy of Data._Representation(v36, v37);
    v42[3] = v36;
    v42[4] = v37;
    v43 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v39 = a2 + v50 + v43[7];
    v38 = a1 + v50 + v43[7];
    v40 = type metadata accessor for UnknownStorage();
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
    ((void (*)(uint64_t, uint64_t))v41)(v39, v38);
    v44 = (_QWORD *)(a2 + v50 + v43[8]);
    v45 = (uint64_t *)(a1 + v50 + v43[8]);
    v46 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v47 + 48))(v45, 1))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      v33 = *v45;
      swift_bridgeObjectRetain();
      *v44 = v33;
      v41((char *)v44 + *(int *)(v46 + 20), (char *)v45 + *(int *)(v46 + 20), v40);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    __dst = (_QWORD *)(a2 + v50 + v43[9]);
    __src = (uint64_t *)(a1 + v50 + v43[9]);
    v31 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v32 + 48))(__src, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v21 = *__src;
      v22 = __src[1];
      outlined copy of Data._Representation(*__src, v22);
      *__dst = v21;
      __dst[1] = v22;
      v23 = __src[2];
      v24 = __src[3];
      outlined copy of Data._Representation(v23, v24);
      __dst[2] = v23;
      __dst[3] = v24;
      v25 = __src[4];
      v26 = __src[5];
      outlined copy of Data._Representation(v25, v26);
      __dst[4] = v25;
      __dst[5] = v26;
      v27 = __src[6];
      v28 = __src[7];
      outlined copy of Data._Representation(v27, v28);
      __dst[6] = v27;
      __dst[7] = v28;
      v41((char *)__dst + *(int *)(v31 + 32), (char *)__src + *(int *)(v31 + 32), v40);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(__dst, 0, 1, v31);
    }
    v17 = (_QWORD *)(a2 + v50 + v43[10]);
    v18 = (uint64_t *)(a1 + v50 + v43[10]);
    v19 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v20 + 48))(v18, 1))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      v11 = *v18;
      v12 = v18[1];
      outlined copy of Data._Representation(*v18, v12);
      *v17 = v11;
      v17[1] = v12;
      v13 = v18[2];
      v14 = v18[3];
      outlined copy of Data._Representation(v13, v14);
      v17[2] = v13;
      v17[3] = v14;
      v15 = v18[4];
      v16 = v18[5];
      outlined copy of Data._Representation(v15, v16);
      v17[4] = v15;
      v17[5] = v16;
      v41((char *)v17 + *(int *)(v19 + 28), (char *)v18 + *(int *)(v19 + 28), v40);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(_DWORD *)(a2 + v50 + *(int *)(v52 + 20)) = *(_DWORD *)(a1 + v50 + *(int *)(v52 + 20));
    (*(void (**)(void))(v53 + 56))();
  }
  v7 = *(int *)(v49 + 24);
  v9 = a2 + v7;
  *(_QWORD *)(a2 + v7) = *(_QWORD *)(a1 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  swift_bridgeObjectRetain();
  result = a2;
  *(_QWORD *)(v9 + 8) = v10;
  return result;
}

uint64_t outlined destroy of CompleteGPKFetchGroupsRequest.Response(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v14 = *(int *)(type metadata accessor for CompleteGPKFetchGroupsRequest.Response() + 20);
  v2 = type metadata accessor for GroupBlobEnvelope();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1 + v14, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v14 + 8), *(_QWORD *)(a1 + v14 + 16));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v14 + 24), *(_QWORD *)(a1 + v14 + 32));
    v11 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v8 = a1 + v14 + v11[7];
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v10(v8);
    v12 = a1 + v14 + v11[8];
    v13 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1))
    {
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v10)(v12 + *(int *)(v13 + 20), v9);
    }
    v6 = a1 + v14 + v11[9];
    v7 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
      outlined consume of Data._Representation(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
      outlined consume of Data._Representation(*(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56));
      ((void (*)(uint64_t, uint64_t))v10)(v6 + *(int *)(v7 + 32), v9);
    }
    v4 = a1 + v14 + v11[10];
    v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
      outlined consume of Data._Representation(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
      ((void (*)(uint64_t, uint64_t))v10)(v4 + *(int *)(v5 + 28), v9);
    }
  }
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t CompleteGPKFetchGroupsRequest.Response.init(groupId:groupBlob:groupDigest:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v13;

  v5 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a5, a1);
  v13 = type metadata accessor for CompleteGPKFetchGroupsRequest.Response();
  outlined init with take of GroupBlobEnvelope?(a2, (_DWORD *)(a5 + *(int *)(v13 + 20)));
  result = v13;
  v7 = (_QWORD *)(a5 + *(int *)(v13 + 24));
  *v7 = a3;
  v7[1] = a4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompleteGPKFetchGroupsRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CompleteGPKFetchGroupsRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteGPKFetchGroupsRequest.Response(uint64_t a1)
{
  return CompleteGPKFetchGroupsRequest.Response.encode(to:)(a1);
}

void variable initialization expression of CompleteGPKFetchGroupsRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t CompleteGPKFetchGroupsRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t CompleteGPKFetchGroupsRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*CompleteGPKFetchGroupsRequest.bodyContent.modify())()
{
  return CompleteGPKFetchGroupsRequest.bodyContent.modify;
}

uint64_t CompleteGPKFetchGroupsRequest.Body.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t *CompleteGPKFetchGroupsRequest.Body.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for CompleteGPKFetchGroupsRequest.Body();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(v2 + 20)), a1);
}

uint64_t type metadata accessor for CompleteGPKFetchGroupsRequest.Body()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteGPKFetchGroupsRequest.Body;
  if (!type metadata singleton initialization cache for CompleteGPKFetchGroupsRequest.Body)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t CompleteGPKFetchGroupsRequest.Body.signature.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for CompleteGPKFetchGroupsRequest.Body() + 24);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t CompleteGPKFetchGroupsRequest.Body.verificationKey.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for CompleteGPKFetchGroupsRequest.Body() + 28);
  v3 = *(_QWORD *)v1;
  outlined copy of Data._Representation(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v3;
}

uint64_t CompleteGPKFetchGroupsRequest.Body.isDigestOnly.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + *(int *)(type metadata accessor for CompleteGPKFetchGroupsRequest.Body() + 32)) & 1;
}

void static CompleteGPKFetchGroupsRequest.Body.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D5000C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D500120
                                                                                       + *((int *)qword_23D500198 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D500130()
{
  uint64_t v1;

  return v1 == 0;
}

void CompleteGPKFetchGroupsRequest.Body.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D5001FC()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteGPKFetchGroupsRequest.Body.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  unsigned __int8 v7;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 0;
LABEL_12:
    swift_bridgeObjectRelease();
    return v7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 1;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signature", 9uLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 2;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("verificationKey", 0xFuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 3;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("isDigestOnly", 0xCuLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v7 = 4;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 5;
}

uint64_t CompleteGPKFetchGroupsRequest.Body.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t CompleteGPKFetchGroupsRequest.Body.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKFetchGroupsRequest.Body.CodingKeys, &type metadata for CompleteGPKFetchGroupsRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKFetchGroupsRequest.Body.CodingKeys, &type metadata for CompleteGPKFetchGroupsRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKFetchGroupsRequest.Body.CodingKeys, &type metadata for CompleteGPKFetchGroupsRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKFetchGroupsRequest.Body.CodingKeys, &type metadata for CompleteGPKFetchGroupsRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKFetchGroupsRequest.Body.CodingKeys, &type metadata for CompleteGPKFetchGroupsRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteGPKFetchGroupsRequest.Body.CodingKeys.intValue.getter()
{
  return 0;
}

void CompleteGPKFetchGroupsRequest.Body.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D50070C()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys(char *a1)
{
  char v1;

  static CompleteGPKFetchGroupsRequest.Body.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys()
{
  return CompleteGPKFetchGroupsRequest.Body.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys(uint64_t a1)
{
  char *v1;

  CompleteGPKFetchGroupsRequest.Body.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys()
{
  char *v0;

  CompleteGPKFetchGroupsRequest.Body.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteGPKFetchGroupsRequest.Body.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys()
{
  return CompleteGPKFetchGroupsRequest.Body.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteGPKFetchGroupsRequest.Body.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteGPKFetchGroupsRequest.Body.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  _QWORD v56[2];
  char v57;
  _QWORD v58[2];
  char v59;
  _QWORD v60[2];
  char v61;
  uint64_t v62;
  _QWORD *v63;

  v39 = a1;
  v63 = 0;
  v62 = 0;
  v49 = type metadata accessor for GPKGroupID();
  v45 = *(_QWORD *)(v49 - 8);
  v38 = (*(_QWORD *)(v45 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v49);
  v51 = (char *)v13 - v38;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteGPKFetchGroupsRequest.Body.CodingKeys>);
  v40 = *(_QWORD *)(v48 - 8);
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v39);
  v44 = (char *)v13 - v41;
  v63 = v2;
  v62 = v1;
  v42 = v2[3];
  v43 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v42);
  lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v51, v46, v49);
  v47 = &v61;
  v61 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v50;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v52 = v3;
  v53 = v3;
  if (v3)
  {
    v16 = v53;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v51, v49);
    result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v44, v48);
    v17 = v16;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v51, v49);
    v31 = (int *)type metadata accessor for CompleteGPKFetchGroupsRequest.Body();
    v4 = (uint64_t *)(v46 + v31[5]);
    v32 = *v4;
    v33 = v4[1];
    outlined copy of Data._Representation(v32, v33);
    v35 = v60;
    v60[0] = v32;
    v60[1] = v33;
    v34 = &v59;
    v59 = 1;
    lazy protocol witness table accessor for type Nonce and conformance Nonce();
    v5 = v52;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v36 = v5;
    v37 = v5;
    if (v5)
    {
      v15 = v37;
      outlined destroy of Nonce((uint64_t)v60);
      result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v44, v48);
      v17 = v15;
    }
    else
    {
      outlined destroy of Nonce((uint64_t)v60);
      v6 = (uint64_t *)(v46 + v31[6]);
      v24 = *v6;
      v25 = v6[1];
      outlined copy of Data._Representation(v24, v25);
      v27 = v58;
      v58[0] = v24;
      v58[1] = v25;
      v26 = &v57;
      v57 = 2;
      v7 = lazy protocol witness table accessor for type Data and conformance Data();
      v8 = v36;
      v28 = v7;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v29 = v8;
      v30 = v8;
      if (v8)
      {
        v14 = v30;
        outlined destroy of Data((uint64_t)v58);
        result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v44, v48);
        v17 = v14;
      }
      else
      {
        outlined destroy of Data((uint64_t)v58);
        v9 = (uint64_t *)(v46 + v31[7]);
        v20 = *v9;
        v21 = v9[1];
        outlined copy of Data._Representation(v20, v21);
        v10 = v29;
        v56[0] = v20;
        v56[1] = v21;
        v55 = 3;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v22 = v10;
        v23 = v10;
        if (v10)
        {
          v13[1] = v23;
          outlined destroy of Data((uint64_t)v56);
          return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v44, v48);
        }
        else
        {
          outlined destroy of Data((uint64_t)v56);
          v11 = v22;
          v54 = 4;
          KeyedEncodingContainer.encode(_:forKey:)();
          v18 = v11;
          v19 = v11;
          if (v11)
            v13[0] = v19;
          return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v44, v48);
        }
      }
    }
  }
  return result;
}

void CompleteGPKFetchGroupsRequest.Body.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  char v70;

  v39 = a2;
  v48 = a1;
  v69 = 0;
  v44 = 0;
  v40 = type metadata accessor for GPKGroupID();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = (*(_QWORD *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40);
  v43 = (char *)v18 - v42;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteGPKFetchGroupsRequest.Body.CodingKeys>);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = (*(_QWORD *)(v46 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v44);
  v52 = (char *)v18 - v47;
  v49 = (int *)type metadata accessor for CompleteGPKFetchGroupsRequest.Body();
  v50 = (*(_QWORD *)(*((_QWORD *)v49 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v48);
  v51 = (uint64_t)v18 - v50;
  v70 = 0;
  v69 = v2;
  v54 = v2[3];
  v55 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v54);
  lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys();
  v3 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v56 = v3;
  v57 = v3;
  if (v3)
  {
    v22 = v57;
  }
  else
  {
    v36 = &v68;
    v68 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v56;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v37 = v4;
    v38 = v4;
    if (v4)
    {
      v21 = v38;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v45);
      v22 = v21;
    }
    else
    {
      v32 = 1;
      v70 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v51, v43, v40);
      v33 = &v65;
      v65 = v32;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v5 = v37;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v34 = v5;
      v35 = v5;
      if (v5)
      {
        v20 = v35;
        (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v45);
        v22 = v20;
      }
      else
      {
        v6 = v67;
        v7 = (_QWORD *)(v51 + v49[5]);
        v70 = 3;
        *v7 = v66;
        v7[1] = v6;
        v28 = &v62;
        v62 = 2;
        v8 = lazy protocol witness table accessor for type Data and conformance Data();
        v9 = v34;
        v29 = v8;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v30 = v9;
        v31 = v9;
        if (!v9)
        {
          v10 = v64;
          v11 = (_QWORD *)(v51 + v49[6]);
          v70 = 7;
          *v11 = v63;
          v11[1] = v10;
          v59 = 3;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v26 = 0;
          v27 = 0;
          v12 = v61;
          v13 = (_QWORD *)(v51 + v49[7]);
          v70 = 15;
          *v13 = v60;
          v13[1] = v12;
          v58 = 4;
          v14 = KeyedDecodingContainer.decode(_:forKey:)();
          v23 = 0;
          v24 = v14;
          v25 = 0;
          v15 = v45;
          v16 = v52;
          v17 = v46;
          *(_BYTE *)(v51 + v49[8]) = v24 & 1;
          (*(void (**)(char *, uint64_t))(v17 + 8))(v16, v15);
          outlined init with copy of CompleteGPKFetchGroupsRequest.Body(v51, v39);
          __swift_destroy_boxed_opaque_existential_1(v48);
          outlined destroy of CompleteGPKFetchGroupsRequest.Body(v51);
          return;
        }
        v19 = v31;
        (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v45);
        v22 = v19;
      }
    }
  }
  v18[0] = v22;
  __swift_destroy_boxed_opaque_existential_1(v48);
  if ((v70 & 1) != 0)
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v51, v40);
  if ((v70 & 2) != 0)
    outlined destroy of Nonce(v51 + v49[5]);
  if ((v70 & 4) != 0)
    outlined destroy of Data(v51 + v49[6]);
  if ((v70 & 8) != 0)
    outlined destroy of Data(v51 + v49[7]);
}

uint64_t outlined init with copy of CompleteGPKFetchGroupsRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v16 = (int *)type metadata accessor for CompleteGPKFetchGroupsRequest.Body();
  v7 = v16[5];
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  outlined copy of Data._Representation(v8, v9);
  v3 = (uint64_t *)(a2 + v7);
  *v3 = v8;
  v3[1] = v9;
  v10 = v16[6];
  v11 = *(_QWORD *)(a1 + v10);
  v12 = *(_QWORD *)(a1 + v10 + 8);
  outlined copy of Data._Representation(v11, v12);
  v4 = (uint64_t *)(a2 + v10);
  *v4 = v11;
  v4[1] = v12;
  v13 = v16[7];
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  outlined copy of Data._Representation(v14, v15);
  result = a2;
  v6 = (uint64_t *)(a2 + v13);
  *v6 = v14;
  v6[1] = v15;
  *(_BYTE *)(a2 + v16[8]) = *(_BYTE *)(a1 + v16[8]);
  return result;
}

uint64_t outlined destroy of CompleteGPKFetchGroupsRequest.Body(uint64_t a1)
{
  uint64_t v1;
  int *v3;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v3 = (int *)type metadata accessor for CompleteGPKFetchGroupsRequest.Body();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[5]), *(_QWORD *)(a1 + v3[5] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[6]), *(_QWORD *)(a1 + v3[6] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v3[7]), *(_QWORD *)(a1 + v3[7] + 8));
  return a1;
}

int *CompleteGPKFetchGroupsRequest.Body.init(groupId:nonce:signature:verificationKey:isDigestOnly:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  int *result;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = *a2;
  v15 = a2[1];
  v8 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a8, a1);
  result = (int *)type metadata accessor for CompleteGPKFetchGroupsRequest.Body();
  v10 = (_QWORD *)(a8 + result[5]);
  *v10 = v14;
  v10[1] = v15;
  v11 = (_QWORD *)(a8 + result[6]);
  *v11 = a3;
  v11[1] = a4;
  v12 = (_QWORD *)(a8 + result[7]);
  *v12 = a5;
  v12[1] = a6;
  *(_BYTE *)(a8 + result[8]) = a7 & 1;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance CompleteGPKFetchGroupsRequest.Body(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CompleteGPKFetchGroupsRequest.Body.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteGPKFetchGroupsRequest.Body(uint64_t a1)
{
  return CompleteGPKFetchGroupsRequest.Body.encode(to:)(a1);
}

uint64_t CompleteGPKFetchGroupsRequest.init(groupID:nonce:signature:verificationKey:isDigestOnly:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  char *v63;

  v22 = a8;
  v27 = a1;
  v28 = a2;
  v33 = a3;
  v34 = a4;
  v35 = a5;
  v36 = a6;
  v37 = a7;
  v63 = 0;
  v61 = 0u;
  v62 = 0u;
  v60 = 0;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v51 = 0;
  v38 = 0;
  v40 = type metadata accessor for DictionaryEncoder.DataEncodingStrategy();
  v39 = *(_QWORD *)(v40 - 8);
  v23 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v41 = (char *)v19 - v23;
  v26 = type metadata accessor for GPKGroupID();
  v25 = *(_QWORD *)(v26 - 8);
  v24 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v38);
  v31 = (uint64_t)v19 - v24;
  v43 = type metadata accessor for CompleteGPKFetchGroupsRequest.Body();
  v8 = MEMORY[0x24BDAC7A8](v31);
  v45 = (uint64_t)v19 - v9;
  v63 = (char *)v19 - v9;
  v60 = v10;
  v29 = *v28;
  v30 = v28[1];
  v58 = v29;
  v59 = v30;
  v56 = v33;
  v57 = v11;
  v54 = v12;
  v55 = v13;
  v53 = v14 & 1;
  v61 = 0uLL;
  v62 = 0uLL;
  (*(void (**)(double))(v15 + 16))(v8);
  outlined copy of Data._Representation(v29, v30);
  v32 = v52;
  v52[0] = v29;
  v52[1] = v30;
  outlined copy of Data._Representation(v33, v34);
  outlined copy of Data._Representation(v35, v36);
  CompleteGPKFetchGroupsRequest.Body.init(groupId:nonce:signature:verificationKey:isDigestOnly:)(v31, v32, v33, v34, v35, v36, v37 & 1, v45);
  type metadata accessor for DictionaryEncoder();
  v42 = DictionaryEncoder.__allocating_init()();
  v51 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v41, *MEMORY[0x24BDFC528], v40);
  dispatch thunk of DictionaryEncoder.dataEncodingStrategy.setter();
  lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Body and conformance CompleteGPKFetchGroupsRequest.Body();
  v16 = v44;
  v17 = dispatch thunk of DictionaryEncoder.encode<A>(_:)();
  v46 = v16;
  v47 = v17;
  v48 = v16;
  if (v16)
  {
    v19[1] = v48;
    swift_release();
    outlined destroy of CompleteGPKFetchGroupsRequest.Body(v45);
    outlined consume of Data._Representation(v35, v36);
    outlined consume of Data._Representation(v33, v34);
    outlined consume of Data._Representation(v29, v30);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
    return outlined destroy of CompleteGPKFetchGroupsRequest((uint64_t)&v61);
  }
  else
  {
    v20 = v47;
    v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    *(_QWORD *)&v49 = v20;
    v21 = &v61;
    outlined assign with take of Any?(&v49, (uint64_t)&v61);
    swift_release();
    outlined destroy of CompleteGPKFetchGroupsRequest.Body(v45);
    outlined init with copy of CompleteGPKFetchGroupsRequest((uint64_t)v21, v22);
    outlined consume of Data._Representation(v35, v36);
    outlined consume of Data._Representation(v33, v34);
    outlined consume of Data._Representation(v29, v30);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
    return outlined destroy of CompleteGPKFetchGroupsRequest((uint64_t)v21);
  }
}

unint64_t lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Body and conformance CompleteGPKFetchGroupsRequest.Body()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body and conformance CompleteGPKFetchGroupsRequest.Body;
  if (!lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body and conformance CompleteGPKFetchGroupsRequest.Body)
  {
    v0 = type metadata accessor for CompleteGPKFetchGroupsRequest.Body();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKFetchGroupsRequest.Body, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Body and conformance CompleteGPKFetchGroupsRequest.Body);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of CompleteGPKFetchGroupsRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t outlined init with copy of CompleteGPKFetchGroupsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t CompleteGPKFetchGroupsRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeFetchGroupBlob.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in CompleteGPKFetchGroupsRequest()
{
  return lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Response and conformance CompleteGPKFetchGroupsRequest.Response();
}

unint64_t lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Response and conformance CompleteGPKFetchGroupsRequest.Response()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response and conformance CompleteGPKFetchGroupsRequest.Response;
  if (!lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response and conformance CompleteGPKFetchGroupsRequest.Response)
  {
    v0 = type metadata accessor for CompleteGPKFetchGroupsRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKFetchGroupsRequest.Response, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKFetchGroupsRequest.Response and conformance CompleteGPKFetchGroupsRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance CompleteGPKFetchGroupsRequest()
{
  return CompleteGPKFetchGroupsRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance CompleteGPKFetchGroupsRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance CompleteGPKFetchGroupsRequest@<X0>(uint64_t a1@<X8>)
{
  return CompleteGPKFetchGroupsRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance CompleteGPKFetchGroupsRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for CompleteGPKFetchGroupsRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for CompleteGPKFetchGroupsRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for CompleteGPKFetchGroupsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for CompleteGPKFetchGroupsRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for CompleteGPKFetchGroupsRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteGPKFetchGroupsRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CompleteGPKFetchGroupsRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompleteGPKFetchGroupsRequest()
{
  return &type metadata for CompleteGPKFetchGroupsRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteGPKFetchGroupsRequest.Response(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *);
  int *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v57;

  v57 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v57 & 0x20000) != 0)
  {
    v52 = *a2;
    swift_retain();
    *a1 = v52;
    return *a1 + ((v57 + 16) & ~(unint64_t)v57);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v48 = (_QWORD *)((char *)a1 + *(int *)(a3 + 20));
    v49 = (uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v50 = type metadata accessor for GroupBlobEnvelope();
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v51 + 48))(v49, 1))
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v48 = *(_DWORD *)v49;
      v35 = v49[1];
      v36 = v49[2];
      outlined copy of Data._Representation(v35, v36);
      v48[1] = v35;
      v48[2] = v36;
      v37 = v49[3];
      v38 = v49[4];
      outlined copy of Data._Representation(v37, v38);
      v48[3] = v37;
      v48[4] = v38;
      v43 = (int *)type metadata accessor for GKCrypto_GroupBlob();
      v40 = (char *)v48 + v43[7];
      v39 = (char *)v49 + v43[7];
      v41 = type metadata accessor for UnknownStorage();
      v42 = *(void (**)(char *, char *))(*(_QWORD *)(v41 - 8) + 16);
      v42(v40, v39);
      v44 = (_QWORD *)((char *)v48 + v43[8]);
      v45 = (_QWORD *)((char *)v49 + v43[8]);
      v46 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v47 + 48))(v45, 1))
      {
        v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      }
      else
      {
        v34 = *v45;
        swift_bridgeObjectRetain();
        *v44 = v34;
        ((void (*)(char *, char *, uint64_t))v42)((char *)v44 + *(int *)(v46 + 20), (char *)v45 + *(int *)(v46 + 20), v41);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      }
      __dst = (_QWORD *)((char *)v48 + v43[9]);
      __src = (_QWORD *)((char *)v49 + v43[9]);
      v32 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
      v33 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v33 + 48))(__src, 1))
      {
        v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
      }
      else
      {
        v22 = *__src;
        v23 = __src[1];
        outlined copy of Data._Representation(*__src, v23);
        *__dst = v22;
        __dst[1] = v23;
        v24 = __src[2];
        v25 = __src[3];
        outlined copy of Data._Representation(v24, v25);
        __dst[2] = v24;
        __dst[3] = v25;
        v26 = __src[4];
        v27 = __src[5];
        outlined copy of Data._Representation(v26, v27);
        __dst[4] = v26;
        __dst[5] = v27;
        v28 = __src[6];
        v29 = __src[7];
        outlined copy of Data._Representation(v28, v29);
        __dst[6] = v28;
        __dst[7] = v29;
        ((void (*)(char *, char *, uint64_t))v42)((char *)__dst + *(int *)(v32 + 32), (char *)__src + *(int *)(v32 + 32), v41);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
      }
      v18 = (_QWORD *)((char *)v48 + v43[10]);
      v19 = (_QWORD *)((char *)v49 + v43[10]);
      v20 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v21 + 48))(v19, 1))
      {
        v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      }
      else
      {
        v12 = *v19;
        v13 = v19[1];
        outlined copy of Data._Representation(*v19, v13);
        *v18 = v12;
        v18[1] = v13;
        v14 = v19[2];
        v15 = v19[3];
        outlined copy of Data._Representation(v14, v15);
        v18[2] = v14;
        v18[3] = v15;
        v16 = v19[4];
        v17 = v19[5];
        outlined copy of Data._Representation(v16, v17);
        v18[4] = v16;
        v18[5] = v17;
        ((void (*)(char *, char *, uint64_t))v42)((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v41);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      *(_DWORD *)((char *)v48 + *(int *)(v50 + 20)) = *(_DWORD *)((char *)v49 + *(int *)(v50 + 20));
      (*(void (**)(void))(v51 + 56))();
    }
    v8 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    *(_QWORD *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v10 + 1) = v11;
    return (unint64_t)a1;
  }
}

uint64_t destroy for CompleteGPKFetchGroupsRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  v16 = *(int *)(a2 + 20);
  v3 = type metadata accessor for GroupBlobEnvelope();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(a1 + v16, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v16 + 8), *(_QWORD *)(a1 + v16 + 16));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + v16 + 24), *(_QWORD *)(a1 + v16 + 32));
    v12 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v9 = a1 + v16 + v12[7];
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v11(v9);
    v13 = a1 + v16 + v12[8];
    v14 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1))
    {
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v11)(v13 + *(int *)(v14 + 20), v10);
    }
    v7 = a1 + v16 + v12[9];
    v8 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24));
      outlined consume of Data._Representation(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40));
      outlined consume of Data._Representation(*(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 56));
      ((void (*)(uint64_t, uint64_t))v11)(v7 + *(int *)(v8 + 32), v10);
    }
    v5 = a1 + v16 + v12[10];
    v6 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
      ((void (*)(uint64_t, uint64_t))v11)(v5 + *(int *)(v6 + 28), v10);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CompleteGPKFetchGroupsRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  _QWORD *v43;
  int *v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v51 = *(int *)(a3 + 20);
  v53 = type metadata accessor for GroupBlobEnvelope();
  v54 = *(_QWORD *)(v53 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v54 + 48))(a2 + v51, 1))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy((void *)(a1 + v51), (const void *)(a2 + v51), *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v43 = (_QWORD *)(a1 + v51);
    *(_DWORD *)(a1 + v51) = *(_DWORD *)(a2 + v51);
    v35 = *(_QWORD *)(a2 + v51 + 8);
    v36 = *(_QWORD *)(a2 + v51 + 16);
    outlined copy of Data._Representation(v35, v36);
    v43[1] = v35;
    v43[2] = v36;
    v37 = *(_QWORD *)(a2 + v51 + 24);
    v38 = *(_QWORD *)(a2 + v51 + 32);
    outlined copy of Data._Representation(v37, v38);
    v43[3] = v37;
    v43[4] = v38;
    v44 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v40 = a1 + v51 + v44[7];
    v39 = a2 + v51 + v44[7];
    v41 = type metadata accessor for UnknownStorage();
    v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
    ((void (*)(uint64_t, uint64_t))v42)(v40, v39);
    v45 = (_QWORD *)(a1 + v51 + v44[8]);
    v46 = (uint64_t *)(a2 + v51 + v44[8]);
    v47 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v48 + 48))(v46, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      v34 = *v46;
      swift_bridgeObjectRetain();
      *v45 = v34;
      v42((char *)v45 + *(int *)(v47 + 20), (char *)v46 + *(int *)(v47 + 20), v41);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    __dst = (_QWORD *)(a1 + v51 + v44[9]);
    __src = (uint64_t *)(a2 + v51 + v44[9]);
    v32 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v33 + 48))(__src, 1))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      v22 = *__src;
      v23 = __src[1];
      outlined copy of Data._Representation(*__src, v23);
      *__dst = v22;
      __dst[1] = v23;
      v24 = __src[2];
      v25 = __src[3];
      outlined copy of Data._Representation(v24, v25);
      __dst[2] = v24;
      __dst[3] = v25;
      v26 = __src[4];
      v27 = __src[5];
      outlined copy of Data._Representation(v26, v27);
      __dst[4] = v26;
      __dst[5] = v27;
      v28 = __src[6];
      v29 = __src[7];
      outlined copy of Data._Representation(v28, v29);
      __dst[6] = v28;
      __dst[7] = v29;
      v42((char *)__dst + *(int *)(v32 + 32), (char *)__src + *(int *)(v32 + 32), v41);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
    }
    v18 = (_QWORD *)(a1 + v51 + v44[10]);
    v19 = (uint64_t *)(a2 + v51 + v44[10]);
    v20 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v21 + 48))(v19, 1))
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v12 = *v19;
      v13 = v19[1];
      outlined copy of Data._Representation(*v19, v13);
      *v18 = v12;
      v18[1] = v13;
      v14 = v19[2];
      v15 = v19[3];
      outlined copy of Data._Representation(v14, v15);
      v18[2] = v14;
      v18[3] = v15;
      v16 = v19[4];
      v17 = v19[5];
      outlined copy of Data._Representation(v16, v17);
      v18[4] = v16;
      v18[5] = v17;
      v42((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v41);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    *(_DWORD *)(a1 + v51 + *(int *)(v53 + 20)) = *(_DWORD *)(a2 + v51 + *(int *)(v53 + 20));
    (*(void (**)(void))(v54 + 56))();
  }
  v8 = *(int *)(a3 + 24);
  v10 = a1 + v8;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v11 = *(_QWORD *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(v10 + 8) = v11;
  return result;
}

uint64_t assignWithCopy for CompleteGPKFetchGroupsRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  _QWORD *v68;
  int *v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int (*v90)(uint64_t *, uint64_t, uint64_t);
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *__src;
  _QWORD *__dst;
  uint64_t v109;
  uint64_t v110;
  unsigned int (*v111)(uint64_t *, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, char *, uint64_t);
  _QWORD *v123;
  int *v124;
  uint64_t *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int (*v129)(uint64_t *, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  unsigned int (*v136)(uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v132 = *(int *)(a3 + 20);
  v134 = type metadata accessor for GroupBlobEnvelope();
  v135 = *(_QWORD *)(v134 - 8);
  v136 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v136)(a1 + v132, 1))
  {
    if (v136(a2 + v132, 1, v134))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
      memcpy((void *)(a1 + v132), (const void *)(a2 + v132), *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v68 = (_QWORD *)(a1 + v132);
      *(_DWORD *)(a1 + v132) = *(_DWORD *)(a2 + v132);
      v60 = *(_QWORD *)(a2 + v132 + 8);
      v61 = *(_QWORD *)(a2 + v132 + 16);
      outlined copy of Data._Representation(v60, v61);
      v68[1] = v60;
      v68[2] = v61;
      v62 = *(_QWORD *)(a2 + v132 + 24);
      v63 = *(_QWORD *)(a2 + v132 + 32);
      outlined copy of Data._Representation(v62, v63);
      v68[3] = v62;
      v68[4] = v63;
      v69 = (int *)type metadata accessor for GKCrypto_GroupBlob();
      v65 = a1 + v132 + v69[7];
      v64 = a2 + v132 + v69[7];
      v66 = type metadata accessor for UnknownStorage();
      v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16);
      ((void (*)(uint64_t, uint64_t))v67)(v65, v64);
      v70 = (_QWORD *)(a1 + v132 + v69[8]);
      v71 = (uint64_t *)(a2 + v132 + v69[8]);
      v72 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
      v73 = *(_QWORD *)(v72 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v73 + 48))(v71, 1))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v59 = *v71;
        swift_bridgeObjectRetain();
        *v70 = v59;
        v67((char *)v70 + *(int *)(v72 + 20), (char *)v71 + *(int *)(v72 + 20), v66);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
      }
      v55 = (_QWORD *)(a1 + v132 + v69[9]);
      v56 = (uint64_t *)(a2 + v132 + v69[9]);
      v57 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
      v58 = *(_QWORD *)(v57 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v58 + 48))(v56, 1))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        v47 = *v56;
        v48 = v56[1];
        outlined copy of Data._Representation(*v56, v48);
        *v55 = v47;
        v55[1] = v48;
        v49 = v56[2];
        v50 = v56[3];
        outlined copy of Data._Representation(v49, v50);
        v55[2] = v49;
        v55[3] = v50;
        v51 = v56[4];
        v52 = v56[5];
        outlined copy of Data._Representation(v51, v52);
        v55[4] = v51;
        v55[5] = v52;
        v53 = v56[6];
        v54 = v56[7];
        outlined copy of Data._Representation(v53, v54);
        v55[6] = v53;
        v55[7] = v54;
        v67((char *)v55 + *(int *)(v57 + 32), (char *)v56 + *(int *)(v57 + 32), v66);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
      }
      v43 = (_QWORD *)(a1 + v132 + v69[10]);
      v44 = (uint64_t *)(a2 + v132 + v69[10]);
      v45 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
      v46 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v46 + 48))(v44, 1))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v37 = *v44;
        v38 = v44[1];
        outlined copy of Data._Representation(*v44, v38);
        *v43 = v37;
        v43[1] = v38;
        v39 = v44[2];
        v40 = v44[3];
        outlined copy of Data._Representation(v39, v40);
        v43[2] = v39;
        v43[3] = v40;
        v41 = v44[4];
        v42 = v44[5];
        outlined copy of Data._Representation(v41, v42);
        v43[4] = v41;
        v43[5] = v42;
        v67((char *)v43 + *(int *)(v45 + 28), (char *)v44 + *(int *)(v45 + 28), v66);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      *(_DWORD *)(a1 + v132 + *(int *)(v134 + 20)) = *(_DWORD *)(a2 + v132 + *(int *)(v134 + 20));
      (*(void (**)(void))(v135 + 56))();
    }
  }
  else if (v136(a2 + v132, 1, v134))
  {
    outlined destroy of GroupBlobEnvelope(a1 + v132);
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy((void *)(a1 + v132), (const void *)(a2 + v132), *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v123 = (_QWORD *)(a1 + v132);
    *(_DWORD *)(a1 + v132) = *(_DWORD *)(a2 + v132);
    v114 = *(_QWORD *)(a2 + v132 + 8);
    v115 = *(_QWORD *)(a2 + v132 + 16);
    outlined copy of Data._Representation(v114, v115);
    v4 = *(_QWORD *)(a1 + v132 + 8);
    v5 = *(_QWORD *)(a1 + v132 + 16);
    v123[1] = v114;
    v123[2] = v115;
    outlined consume of Data._Representation(v4, v5);
    v116 = *(_QWORD *)(a2 + v132 + 24);
    v117 = *(_QWORD *)(a2 + v132 + 32);
    outlined copy of Data._Representation(v116, v117);
    v6 = *(_QWORD *)(a1 + v132 + 24);
    v7 = *(_QWORD *)(a1 + v132 + 32);
    v123[3] = v116;
    v123[4] = v117;
    outlined consume of Data._Representation(v6, v7);
    v124 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v119 = a1 + v132 + v124[7];
    v118 = a2 + v132 + v124[7];
    v120 = type metadata accessor for UnknownStorage();
    v121 = *(_QWORD *)(v120 - 8);
    v122 = *(void (**)(char *, char *, uint64_t))(v121 + 24);
    ((void (*)(uint64_t, uint64_t))v122)(v119, v118);
    v126 = (_QWORD *)(a1 + v132 + v124[8]);
    v125 = (uint64_t *)(a2 + v132 + v124[8]);
    v127 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v128 = *(_QWORD *)(v127 - 8);
    v129 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v128 + 48);
    if (((unsigned int (*)(_QWORD *, uint64_t))v129)(v126, 1))
    {
      if (v129(v125, 1, v127))
      {
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
        memcpy(v126, v125, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        v112 = *v125;
        swift_bridgeObjectRetain();
        *v126 = v112;
        (*(void (**)(char *, char *, uint64_t))(v121 + 16))((char *)v126 + *(int *)(v127 + 20), (char *)v125 + *(int *)(v127 + 20), v120);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v128 + 56))(v126, 0, 1, v127);
      }
    }
    else if (v129(v125, 1, v127))
    {
      outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v126);
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v126, v125, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v113 = *v125;
      swift_bridgeObjectRetain();
      *v126 = v113;
      swift_bridgeObjectRelease();
      v122((char *)v126 + *(int *)(v127 + 20), (char *)v125 + *(int *)(v127 + 20), v120);
    }
    __dst = (_QWORD *)(a1 + v132 + v124[9]);
    __src = (uint64_t *)(a2 + v132 + v124[9]);
    v109 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v110 = *(_QWORD *)(v109 - 8);
    v111 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v110 + 48);
    if (((unsigned int (*)(_QWORD *, uint64_t))v111)(__dst, 1))
    {
      if (v111(__src, 1, v109))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v91 = *__src;
        v92 = __src[1];
        outlined copy of Data._Representation(*__src, v92);
        *__dst = v91;
        __dst[1] = v92;
        v93 = __src[2];
        v94 = __src[3];
        outlined copy of Data._Representation(v93, v94);
        __dst[2] = v93;
        __dst[3] = v94;
        v95 = __src[4];
        v96 = __src[5];
        outlined copy of Data._Representation(v95, v96);
        __dst[4] = v95;
        __dst[5] = v96;
        v97 = __src[6];
        v98 = __src[7];
        outlined copy of Data._Representation(v97, v98);
        __dst[6] = v97;
        __dst[7] = v98;
        (*(void (**)(char *, char *, uint64_t))(v121 + 16))((char *)__dst + *(int *)(v109 + 32), (char *)__src + *(int *)(v109 + 32), v120);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v110 + 56))(__dst, 0, 1, v109);
      }
    }
    else if (v111(__src, 1, v109))
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)__dst);
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v99 = *__src;
      v100 = __src[1];
      outlined copy of Data._Representation(*__src, v100);
      v10 = *__dst;
      v11 = __dst[1];
      *__dst = v99;
      __dst[1] = v100;
      outlined consume of Data._Representation(v10, v11);
      v101 = __src[2];
      v102 = __src[3];
      outlined copy of Data._Representation(v101, v102);
      v12 = __dst[2];
      v13 = __dst[3];
      __dst[2] = v101;
      __dst[3] = v102;
      outlined consume of Data._Representation(v12, v13);
      v103 = __src[4];
      v104 = __src[5];
      outlined copy of Data._Representation(v103, v104);
      v14 = __dst[4];
      v15 = __dst[5];
      __dst[4] = v103;
      __dst[5] = v104;
      outlined consume of Data._Representation(v14, v15);
      v105 = __src[6];
      v106 = __src[7];
      outlined copy of Data._Representation(v105, v106);
      v16 = __dst[6];
      v17 = __dst[7];
      __dst[6] = v105;
      __dst[7] = v106;
      outlined consume of Data._Representation(v16, v17);
      v122((char *)__dst + *(int *)(v109 + 32), (char *)__src + *(int *)(v109 + 32), v120);
    }
    v87 = (_QWORD *)(a1 + v132 + v124[10]);
    v86 = (uint64_t *)(a2 + v132 + v124[10]);
    v88 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v89 = *(_QWORD *)(v88 - 8);
    v90 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v89 + 48);
    if (((unsigned int (*)(_QWORD *, uint64_t))v90)(v87, 1))
    {
      if (v90(v86, 1, v88))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
        memcpy(v87, v86, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v74 = *v86;
        v75 = v86[1];
        outlined copy of Data._Representation(*v86, v75);
        *v87 = v74;
        v87[1] = v75;
        v76 = v86[2];
        v77 = v86[3];
        outlined copy of Data._Representation(v76, v77);
        v87[2] = v76;
        v87[3] = v77;
        v78 = v86[4];
        v79 = v86[5];
        outlined copy of Data._Representation(v78, v79);
        v87[4] = v78;
        v87[5] = v79;
        (*(void (**)(char *, char *, uint64_t))(v121 + 16))((char *)v87 + *(int *)(v88 + 28), (char *)v86 + *(int *)(v88 + 28), v120);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v87, 0, 1, v88);
      }
    }
    else if (v90(v86, 1, v88))
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v87);
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v87, v86, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v80 = *v86;
      v81 = v86[1];
      outlined copy of Data._Representation(*v86, v81);
      v20 = *v87;
      v21 = v87[1];
      *v87 = v80;
      v87[1] = v81;
      outlined consume of Data._Representation(v20, v21);
      v82 = v86[2];
      v83 = v86[3];
      outlined copy of Data._Representation(v82, v83);
      v22 = v87[2];
      v23 = v87[3];
      v87[2] = v82;
      v87[3] = v83;
      outlined consume of Data._Representation(v22, v23);
      v84 = v86[4];
      v85 = v86[5];
      outlined copy of Data._Representation(v84, v85);
      v24 = v87[4];
      v25 = v87[5];
      v87[4] = v84;
      v87[5] = v85;
      outlined consume of Data._Representation(v24, v25);
      v122((char *)v87 + *(int *)(v88 + 28), (char *)v86 + *(int *)(v88 + 28), v120);
    }
    *(_DWORD *)(a1 + v132 + *(int *)(v134 + 20)) = *(_DWORD *)(a2 + v132 + *(int *)(v134 + 20));
  }
  v33 = *(int *)(a3 + 24);
  v35 = a1 + v33;
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  v36 = *(_QWORD *)(a2 + v33 + 8);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v35 + 8) = v36;
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for CompleteGPKFetchGroupsRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *__dst;
  _OWORD *__src;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  v29 = *(int *)(a3 + 20);
  v31 = type metadata accessor for GroupBlobEnvelope();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v32 + 48))(a2 + v29, 1))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy((void *)(a1 + v29), (const void *)(a2 + v29), *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v21 = a1 + v29;
    *(_DWORD *)v21 = *(_DWORD *)(a2 + v29);
    *(_OWORD *)(v21 + 8) = *(_OWORD *)(a2 + v29 + 8);
    *(_OWORD *)(v21 + 24) = *(_OWORD *)(a2 + v29 + 24);
    v22 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v18 = a1 + v29 + v22[7];
    v17 = a2 + v29 + v22[7];
    v19 = type metadata accessor for UnknownStorage();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
    ((void (*)(uint64_t, uint64_t))v20)(v18, v17);
    v23 = (_QWORD *)(a1 + v29 + v22[8]);
    v24 = (_QWORD *)(a2 + v29 + v22[8]);
    v25 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v26 + 48))(v24, 1))
    {
      v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      *v23 = *v24;
      v20((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v19);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    __dst = (_OWORD *)(a1 + v29 + v22[9]);
    __src = (_OWORD *)(a2 + v29 + v22[9]);
    v15 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(v16 + 48))(__src, 1))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      __dst[2] = __src[2];
      __dst[3] = __src[3];
      v20((char *)__dst + *(int *)(v15 + 32), (char *)__src + *(int *)(v15 + 32), v19);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    v9 = (_OWORD *)(a1 + v29 + v22[10]);
    v10 = (_OWORD *)(a2 + v29 + v22[10]);
    v11 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(v12 + 48))(v10, 1))
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      *v9 = *v10;
      v9[1] = v10[1];
      v9[2] = v10[2];
      v20((char *)v9 + *(int *)(v11 + 28), (char *)v10 + *(int *)(v11 + 28), v19);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(_DWORD *)(a1 + v29 + *(int *)(v31 + 20)) = *(_DWORD *)(a2 + v29 + *(int *)(v31 + 20));
    (*(void (**)(void))(v32 + 56))();
  }
  result = *(__n128 *)(a2 + *(int *)(a3 + 24));
  *(__n128 *)(a1 + *(int *)(a3 + 24)) = result;
  return result;
}

uint64_t assignWithTake for CompleteGPKFetchGroupsRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _OWORD *v45;
  _OWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  int *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(_OWORD *, uint64_t, uint64_t);
  _OWORD *__src;
  _OWORD *__dst;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(_OWORD *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  int *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(_QWORD *, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v87 = *(int *)(a3 + 20);
  v89 = type metadata accessor for GroupBlobEnvelope();
  v90 = *(_QWORD *)(v89 - 8);
  v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v91)(a1 + v87, 1))
  {
    if (v91(a2 + v87, 1, v89))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
      memcpy((void *)(a1 + v87), (const void *)(a2 + v87), *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v57 = a1 + v87;
      *(_DWORD *)v57 = *(_DWORD *)(a2 + v87);
      *(_OWORD *)(v57 + 8) = *(_OWORD *)(a2 + v87 + 8);
      *(_OWORD *)(v57 + 24) = *(_OWORD *)(a2 + v87 + 24);
      v58 = (int *)type metadata accessor for GKCrypto_GroupBlob();
      v54 = a1 + v87 + v58[7];
      v53 = a2 + v87 + v58[7];
      v55 = type metadata accessor for UnknownStorage();
      v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32);
      ((void (*)(uint64_t, uint64_t))v56)(v54, v53);
      v59 = (_QWORD *)(a1 + v87 + v58[8]);
      v60 = (_QWORD *)(a2 + v87 + v58[8]);
      v61 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
      v62 = *(_QWORD *)(v61 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t))(v62 + 48))(v60, 1))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        *v59 = *v60;
        v56((char *)v59 + *(int *)(v61 + 20), (char *)v60 + *(int *)(v61 + 20), v55);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
      }
      v49 = (_OWORD *)(a1 + v87 + v58[9]);
      v50 = (_OWORD *)(a2 + v87 + v58[9]);
      v51 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
      v52 = *(_QWORD *)(v51 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t))(v52 + 48))(v50, 1))
      {
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        *v49 = *v50;
        v49[1] = v50[1];
        v49[2] = v50[2];
        v49[3] = v50[3];
        v56((char *)v49 + *(int *)(v51 + 32), (char *)v50 + *(int *)(v51 + 32), v55);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      }
      v45 = (_OWORD *)(a1 + v87 + v58[10]);
      v46 = (_OWORD *)(a2 + v87 + v58[10]);
      v47 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
      v48 = *(_QWORD *)(v47 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t))(v48 + 48))(v46, 1))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        *v45 = *v46;
        v45[1] = v46[1];
        v45[2] = v46[2];
        v56((char *)v45 + *(int *)(v47 + 28), (char *)v46 + *(int *)(v47 + 28), v55);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      *(_DWORD *)(a1 + v87 + *(int *)(v89 + 20)) = *(_DWORD *)(a2 + v87 + *(int *)(v89 + 20));
      (*(void (**)(void))(v90 + 56))();
    }
  }
  else if (v91(a2 + v87, 1, v89))
  {
    outlined destroy of GroupBlobEnvelope(a1 + v87);
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    memcpy((void *)(a1 + v87), (const void *)(a2 + v87), *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v78 = a1 + v87;
    *(_DWORD *)v78 = *(_DWORD *)(a2 + v87);
    v4 = *(_QWORD *)(a2 + v87 + 16);
    v5 = *(_QWORD *)(a1 + v87 + 8);
    v6 = *(_QWORD *)(a1 + v87 + 16);
    *(_QWORD *)(v78 + 8) = *(_QWORD *)(a2 + v87 + 8);
    *(_QWORD *)(v78 + 16) = v4;
    outlined consume of Data._Representation(v5, v6);
    v7 = *(_QWORD *)(a2 + v87 + 32);
    v8 = *(_QWORD *)(a1 + v87 + 24);
    v9 = *(_QWORD *)(a1 + v87 + 32);
    *(_QWORD *)(v78 + 24) = *(_QWORD *)(a2 + v87 + 24);
    *(_QWORD *)(v78 + 32) = v7;
    outlined consume of Data._Representation(v8, v9);
    v79 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v74 = a1 + v87 + v79[7];
    v73 = a2 + v87 + v79[7];
    v75 = type metadata accessor for UnknownStorage();
    v76 = *(_QWORD *)(v75 - 8);
    v77 = *(void (**)(char *, char *, uint64_t))(v76 + 40);
    ((void (*)(uint64_t, uint64_t))v77)(v74, v73);
    v81 = (_QWORD *)(a1 + v87 + v79[8]);
    v80 = (_QWORD *)(a2 + v87 + v79[8]);
    v82 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v83 = *(_QWORD *)(v82 - 8);
    v84 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v83 + 48);
    if (((unsigned int (*)(_QWORD *, uint64_t))v84)(v81, 1))
    {
      if (v84(v80, 1, v82))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
        memcpy(v81, v80, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        *v81 = *v80;
        (*(void (**)(char *, char *, uint64_t))(v76 + 32))((char *)v81 + *(int *)(v82 + 20), (char *)v80 + *(int *)(v82 + 20), v75);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v81, 0, 1, v82);
      }
    }
    else if (v84(v80, 1, v82))
    {
      outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v81);
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v81, v80, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      *v81 = *v80;
      swift_bridgeObjectRelease();
      v77((char *)v81 + *(int *)(v82 + 20), (char *)v80 + *(int *)(v82 + 20), v75);
    }
    __dst = (_OWORD *)(a1 + v87 + v79[9]);
    __src = (_OWORD *)(a2 + v87 + v79[9]);
    v70 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v71 = *(_QWORD *)(v70 - 8);
    v72 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v71 + 48);
    if (((unsigned int (*)(_OWORD *, uint64_t))v72)(__dst, 1))
    {
      if (v72(__src, 1, v70))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        *__dst = *__src;
        __dst[1] = __src[1];
        __dst[2] = __src[2];
        __dst[3] = __src[3];
        (*(void (**)(char *, char *, uint64_t))(v76 + 32))((char *)__dst + *(int *)(v70 + 32), (char *)__src + *(int *)(v70 + 32), v75);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v71 + 56))(__dst, 0, 1, v70);
      }
    }
    else if (v72(__src, 1, v70))
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)__dst);
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v12 = *((_QWORD *)__src + 1);
      v13 = *(_QWORD *)__dst;
      v14 = *((_QWORD *)__dst + 1);
      *(_QWORD *)__dst = *(_QWORD *)__src;
      *((_QWORD *)__dst + 1) = v12;
      outlined consume of Data._Representation(v13, v14);
      v15 = *((_QWORD *)__src + 3);
      v16 = *((_QWORD *)__dst + 2);
      v17 = *((_QWORD *)__dst + 3);
      *((_QWORD *)__dst + 2) = *((_QWORD *)__src + 2);
      *((_QWORD *)__dst + 3) = v15;
      outlined consume of Data._Representation(v16, v17);
      v18 = *((_QWORD *)__src + 5);
      v19 = *((_QWORD *)__dst + 4);
      v20 = *((_QWORD *)__dst + 5);
      *((_QWORD *)__dst + 4) = *((_QWORD *)__src + 4);
      *((_QWORD *)__dst + 5) = v18;
      outlined consume of Data._Representation(v19, v20);
      v21 = *((_QWORD *)__src + 7);
      v22 = *((_QWORD *)__dst + 6);
      v23 = *((_QWORD *)__dst + 7);
      *((_QWORD *)__dst + 6) = *((_QWORD *)__src + 6);
      *((_QWORD *)__dst + 7) = v21;
      outlined consume of Data._Representation(v22, v23);
      v77((char *)__dst + *(int *)(v70 + 32), (char *)__src + *(int *)(v70 + 32), v75);
    }
    v64 = (_OWORD *)(a1 + v87 + v79[10]);
    v63 = (_OWORD *)(a2 + v87 + v79[10]);
    v65 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v66 = *(_QWORD *)(v65 - 8);
    v67 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v66 + 48);
    if (((unsigned int (*)(_OWORD *, uint64_t))v67)(v64, 1))
    {
      if (v67(v63, 1, v65))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
        memcpy(v64, v63, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        *v64 = *v63;
        v64[1] = v63[1];
        v64[2] = v63[2];
        (*(void (**)(char *, char *, uint64_t))(v76 + 32))((char *)v64 + *(int *)(v65 + 28), (char *)v63 + *(int *)(v65 + 28), v75);
        (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v64, 0, 1, v65);
      }
    }
    else if (v67(v63, 1, v65))
    {
      outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v64);
      v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v64, v63, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v26 = *((_QWORD *)v63 + 1);
      v27 = *(_QWORD *)v64;
      v28 = *((_QWORD *)v64 + 1);
      *(_QWORD *)v64 = *(_QWORD *)v63;
      *((_QWORD *)v64 + 1) = v26;
      outlined consume of Data._Representation(v27, v28);
      v29 = *((_QWORD *)v63 + 3);
      v30 = *((_QWORD *)v64 + 2);
      v31 = *((_QWORD *)v64 + 3);
      *((_QWORD *)v64 + 2) = *((_QWORD *)v63 + 2);
      *((_QWORD *)v64 + 3) = v29;
      outlined consume of Data._Representation(v30, v31);
      v32 = *((_QWORD *)v63 + 5);
      v33 = *((_QWORD *)v64 + 4);
      v34 = *((_QWORD *)v64 + 5);
      *((_QWORD *)v64 + 4) = *((_QWORD *)v63 + 4);
      *((_QWORD *)v64 + 5) = v32;
      outlined consume of Data._Representation(v33, v34);
      v77((char *)v64 + *(int *)(v65 + 28), (char *)v63 + *(int *)(v65 + 28), v75);
    }
    *(_DWORD *)(a1 + v87 + *(int *)(v89 + 20)) = *(_DWORD *)(a2 + v87 + *(int *)(v89 + 20));
  }
  v42 = *(int *)(a3 + 24);
  v43 = (_QWORD *)(a1 + v42);
  *v43 = *(_QWORD *)(a2 + v42);
  v43[1] = *(_QWORD *)(a2 + v42 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteGPKFetchGroupsRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D50553C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v12;
  uint64_t v13;

  v12 = type metadata accessor for GPKGroupID();
  v13 = *(_QWORD *)(v12 - 8);
  if (a2 == *(_DWORD *)(v13 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v13 + 48))(a1, a2, v12);
  }
  else
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
    v7 = *(_QWORD *)(v6 - 8);
    if (a2 == *(_DWORD *)(v7 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
    }
    else if (a2 == 2147483646)
    {
      v5 = -1;
      if (*(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) < 0x100000000uLL)
        v5 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
      v3 = v5 - 1;
      if (v5 - 1 < 0)
        v3 = -1;
      return (v3 + 1);
    }
    else
    {
      __break(1u);
    }
  }
  return v8;
}

uint64_t storeEnumTagSinglePayload for CompleteGPKFetchGroupsRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5056AC(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a3 == *(_DWORD *)(v11 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v11 + 56))(a1, a2, a2, v10);
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupBlobEnvelope?);
  v5 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v5 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  if (a3 == 2147483646)
    *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for CompleteGPKFetchGroupsRequest.Response()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    v3 = type metadata accessor for GroupBlobEnvelope?();
    if (v1 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v3;
}

uint64_t getEnumTagSinglePayload for CompleteGPKFetchGroupsRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteGPKFetchGroupsRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for CompleteGPKFetchGroupsRequest.Response.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteGPKFetchGroupsRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteGPKFetchGroupsRequest.Response.CodingKeys()
{
  return &type metadata for CompleteGPKFetchGroupsRequest.Response.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteGPKFetchGroupsRequest.Body(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v22;

  v22 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v22 & 0x20000) != 0)
  {
    v17 = *a2;
    swift_retain();
    *a1 = v17;
    return *a1 + ((v22 + 16) & ~(unint64_t)v22);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v9 = (_QWORD *)((char *)a1 + a3[5]);
    v4 = (_QWORD *)((char *)a2 + a3[5]);
    v8 = *v4;
    v10 = v4[1];
    outlined copy of Data._Representation(*v4, v10);
    *v9 = v8;
    v9[1] = v10;
    v12 = (_QWORD *)((char *)a1 + a3[6]);
    v5 = (_QWORD *)((char *)a2 + a3[6]);
    v11 = *v5;
    v13 = v5[1];
    outlined copy of Data._Representation(*v5, v13);
    *v12 = v11;
    v12[1] = v13;
    v15 = (_QWORD *)((char *)a1 + a3[7]);
    v6 = (_QWORD *)((char *)a2 + a3[7]);
    v14 = *v6;
    v16 = v6[1];
    outlined copy of Data._Representation(*v6, v16);
    *v15 = v14;
    v15[1] = v16;
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    return (unint64_t)a1;
  }
}

uint64_t destroy for CompleteGPKFetchGroupsRequest.Body(uint64_t a1, int *a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
}

uint64_t initializeWithCopy for CompleteGPKFetchGroupsRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v8 = a3[5];
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a2 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  v4 = (uint64_t *)(a1 + v8);
  *v4 = v9;
  v4[1] = v10;
  v11 = a3[6];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a2 + v11 + 8);
  outlined copy of Data._Representation(v12, v13);
  v5 = (uint64_t *)(a1 + v11);
  *v5 = v12;
  v5[1] = v13;
  v14 = a3[7];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a2 + v14 + 8);
  outlined copy of Data._Representation(v15, v16);
  result = a1;
  v7 = (uint64_t *)(a1 + v14);
  *v7 = v15;
  v7[1] = v16;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return result;
}

uint64_t assignWithCopy for CompleteGPKFetchGroupsRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v14 = a3[5];
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a2 + v14 + 8);
  outlined copy of Data._Representation(v15, v16);
  v4 = (uint64_t *)(a1 + v14);
  v5 = *(_QWORD *)(a1 + v14);
  v6 = *(_QWORD *)(a1 + v14 + 8);
  *v4 = v15;
  v4[1] = v16;
  outlined consume of Data._Representation(v5, v6);
  v17 = a3[6];
  v18 = *(_QWORD *)(a2 + v17);
  v19 = *(_QWORD *)(a2 + v17 + 8);
  outlined copy of Data._Representation(v18, v19);
  v7 = (uint64_t *)(a1 + v17);
  v8 = *(_QWORD *)(a1 + v17);
  v9 = *(_QWORD *)(a1 + v17 + 8);
  *v7 = v18;
  v7[1] = v19;
  outlined consume of Data._Representation(v8, v9);
  v20 = a3[7];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a2 + v20 + 8);
  outlined copy of Data._Representation(v21, v22);
  v10 = (uint64_t *)(a1 + v20);
  v11 = *(_QWORD *)(a1 + v20);
  v12 = *(_QWORD *)(a1 + v20 + 8);
  *v10 = v21;
  v10[1] = v22;
  outlined consume of Data._Representation(v11, v12);
  result = a1;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]) & 1;
  return result;
}

__n128 initializeWithTake for CompleteGPKFetchGroupsRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  result = *(__n128 *)(a2 + a3[7]);
  *(__n128 *)(a1 + a3[7]) = result;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return result;
}

uint64_t assignWithTake for CompleteGPKFetchGroupsRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + a3[5]);
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + a3[5]);
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  v10 = (uint64_t *)(a2 + a3[6]);
  v11 = *v10;
  v12 = v10[1];
  v13 = (uint64_t *)(a1 + a3[6]);
  v14 = *v13;
  v15 = v13[1];
  *v13 = v11;
  v13[1] = v12;
  outlined consume of Data._Representation(v14, v15);
  v16 = (uint64_t *)(a2 + a3[7]);
  v17 = *v16;
  v18 = v16[1];
  v19 = (uint64_t *)(a1 + a3[7]);
  v20 = *v19;
  v21 = v19[1];
  *v19 = v17;
  v19[1] = v18;
  outlined consume of Data._Representation(v20, v21);
  result = a1;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]) & 1;
  return result;
}

uint64_t getEnumTagSinglePayload for CompleteGPKFetchGroupsRequest.Body()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D506374(uint64_t a1, unsigned int a2, uint64_t a3)
{
  char v4;
  int v5;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 254)
  {
    v4 = *(_BYTE *)(a1 + *(int *)(a3 + 32));
    v5 = -1;
    if ((v4 & 0xFE) != 0)
      v5 = v4 & 1 | ((v4 & 0xFE) - 2) & 0x7FFFFFFF;
    return (v5 + 1);
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for CompleteGPKFetchGroupsRequest.Body()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D50647C(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GPKGroupID();
  v9 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v9 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1, a2, a2, result);
  if (a3 == 254)
    *(_BYTE *)(a1 + *(int *)(a4 + 32)) = (a2 - 1) & 1 | (2 * (((a2 - 1) >> 1) + 1));
  else
    __break(1u);
  return result;
}

uint64_t type metadata completion function for CompleteGPKFetchGroupsRequest.Body()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for CompleteGPKFetchGroupsRequest.Body.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFB)
      goto LABEL_15;
    v7 = ((a2 + 4) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 5;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteGPKFetchGroupsRequest.Body.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFB)
  {
    v5 = ((a3 + 4) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFB)
  {
    v4 = ((a2 - 252) >> 8) + 1;
    *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for CompleteGPKFetchGroupsRequest.Body.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteGPKFetchGroupsRequest.Body.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteGPKFetchGroupsRequest.Body.CodingKeys()
{
  return &type metadata for CompleteGPKFetchGroupsRequest.Body.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteGPKFetchGroupsRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteGPKFetchGroupsRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteGPKFetchGroupsRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Body.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteGPKFetchGroupsRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteGPKFetchGroupsRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteGPKFetchGroupsRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteGPKFetchGroupsRequest.Response.CodingKeys and conformance CompleteGPKFetchGroupsRequest.Response.CodingKeys();
}

uint64_t GroupKeyFetcher.client.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Client(v1, a1);
}

uint64_t GroupKeyFetcher.userStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of UserStore(v1 + 40, a1);
}

uint64_t GroupKeyFetcher.groupStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GroupStore(v1 + 80, a1);
}

uint64_t GroupKeyFetcher.cryptoKeyService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CryptoKeyProviding(v1 + 120, a1);
}

uint64_t GroupKeyFetcher.fetchKey(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[33] = v2;
  v3[32] = a2;
  v3[31] = a1;
  v3[26] = v3;
  v3[27] = 0;
  v3[28] = 0;
  memset(v3 + 2, 0, 0x38uLL);
  v3[29] = 0;
  v3[30] = 0;
  v4 = type metadata accessor for InternalErrorCode();
  v3[34] = v4;
  v3[35] = *(_QWORD *)(v4 - 8);
  v3[36] = swift_task_alloc();
  v5 = type metadata accessor for GPKGroupKeyRequest.RequestedKey();
  v3[37] = v5;
  v3[38] = *(_QWORD *)(v5 - 8);
  v3[39] = swift_task_alloc();
  v6 = type metadata accessor for GPKGroupID();
  v3[40] = v6;
  v3[41] = *(_QWORD *)(v6 - 8);
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v7 = type metadata accessor for LogSubsystem();
  v3[44] = v7;
  v3[45] = *(_QWORD *)(v7 - 8);
  v3[46] = swift_task_alloc();
  v3[27] = a2;
  v3[28] = v2;
  return swift_task_switch();
}

uint64_t GroupKeyFetcher.fetchKey(with:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD, uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;

  v13 = v0[46];
  v12 = v0[45];
  v14 = v0[44];
  v16 = v0[33];
  v0[26] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Received group key request", 0x1AuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v13);
  gpklog(_:type:fileID:line:subsystem:)();
  v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v0[47] = v15;
  v15(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of Client(v16, (uint64_t)(v0 + 9));
  KeyPrivilegeChecker.init(client:)(v0 + 9, v0 + 2);
  if (KeyPrivilegeChecker.hasPrivilege()())
  {
    outlined init with copy of GroupStore(v11[33] + 80, (uint64_t)(v11 + 14));
    v8 = v11[17];
    v9 = v11[18];
    __swift_project_boxed_opaque_existential_1(v11 + 14, v8);
    GPKGroupKeyRequest.groupID.getter();
    v10 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 + 16) + **(int **)(v9 + 16));
    v1 = (_QWORD *)swift_task_alloc();
    v11[48] = v1;
    *v1 = v11[26];
    v1[1] = GroupKeyFetcher.fetchKey(with:);
    return v10(v11[43], v8, v9);
  }
  else
  {
    v3 = v11[46];
    v4 = v11[44];
    v7 = v11[36];
    v5 = v11[35];
    v6 = v11[34];
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Client doesn't have privilage for fetching group keys", 0x35uLL, 1);
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v3);
    gpklog(_:type:fileID:line:subsystem:)();
    v15(v3, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BE3DC80], v6);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    outlined destroy of KeyPrivilegeChecker((uint64_t)(v11 + 2));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v11[26] + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v1 = *(_QWORD *)(v0 + 392);
  *(_QWORD *)(v0 + 208) = v0;
  if (v1)
  {
    v37 = v42[49];
    v2 = v42[50];
    v38 = v42[33];
    v42[29] = v37;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v42 + 14));
    outlined init with copy of UserStore(v38 + 40, (uint64_t)(v42 + 19));
    v40 = v42[22];
    v39 = v42[23];
    __swift_project_boxed_opaque_existential_1(v42 + 19, v40);
    v41 = (*(uint64_t (**)(uint64_t))(v39 + 40))(v40);
    v42[52] = v41;
    if (v2)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v42 + 19));
      swift_release();
      outlined destroy of KeyPrivilegeChecker((uint64_t)(v42 + 2));
    }
    else
    {
      v34 = v42[39];
      v33 = v42[38];
      v35 = v42[37];
      v42[30] = v41;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v42 + 19));
      GPKGroupKeyRequest.requestedKey.getter();
      v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 88))(v34, v35);
      if (v36 == *MEMORY[0x24BE3DF38])
      {
        v31 = GPKGroupKeyRequest.serviceName.getter();
        v32 = v3;
        v42[53] = v3;
        v4 = (_QWORD *)swift_task_alloc();
        v42[54] = v4;
        *v4 = v42[26];
        v4[1] = GroupKeyFetcher.fetchKey(with:);
        return GroupKeyFetcher.fetchLatestKey(for:meUser:serviceName:)(v42[31], v37, v41, v31, v32);
      }
      if (v36 == *MEMORY[0x24BE3DF30])
      {
        v29 = GPKGroupKeyRequest.serviceName.getter();
        v30 = v6;
        v42[56] = v6;
        v7 = (_QWORD *)swift_task_alloc();
        v42[57] = v7;
        *v7 = v42[26];
        v7[1] = GroupKeyFetcher.fetchKey(with:);
        return GroupKeyFetcher.fetchHistoricalKeys(for:meUser:serviceName:)(v42[31], v37, v41, v29, v30);
      }
      v22 = (void (*)(uint64_t, uint64_t))v42[47];
      v20 = v42[46];
      v21 = v42[44];
      v27 = v42[39];
      v26 = v42[38];
      v28 = v42[37];
      v25 = v42[36];
      v23 = v42[35];
      v24 = v42[34];
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Invalid group key request received", 0x22uLL, 1);
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v20);
      gpklog(_:type:fileID:line:subsystem:)();
      v22(v20, v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v23 + 104))(v25, *MEMORY[0x24BE3DD18], v24);
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
      swift_release();
      swift_release();
      outlined destroy of KeyPrivilegeChecker((uint64_t)(v42 + 2));
    }
  }
  else
  {
    v13 = (void (*)(uint64_t, uint64_t))v42[51];
    v16 = (void (*)(uint64_t, uint64_t))v42[47];
    v14 = v42[46];
    v15 = v42[44];
    v11 = v42[42];
    v12 = v42[40];
    v19 = v42[36];
    v17 = v42[35];
    v18 = v42[34];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v42 + 14));
    v42[24] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v42[25] = v8;
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Group not found: ", 0x11uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    GPKGroupKeyRequest.groupID.getter();
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v13(v11, v12);
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
    gpklog(_:type:fileID:line:subsystem:)();
    v16(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x24BE3DCF8], v18);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    outlined destroy of KeyPrivilegeChecker((uint64_t)(v42 + 2));
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v42[26] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 208) = *v1;
  *(_QWORD *)(v2 + 440) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = v0;
  swift_release();
  swift_release();
  outlined destroy of KeyPrivilegeChecker(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 208) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 208) = *v1;
  *(_QWORD *)(v2 + 464) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = v0;
  swift_release();
  swift_release();
  outlined destroy of KeyPrivilegeChecker(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 208) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[43];
  v2 = v0[41];
  v3 = v0[40];
  v0[26] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 14));
  outlined destroy of KeyPrivilegeChecker((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[26] + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = v0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of KeyPrivilegeChecker(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 208) + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = v0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of KeyPrivilegeChecker(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 208) + 8))();
}

uint64_t GroupKeyFetcher.fetchKey(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  _QWORD *v8;

  v3 = (_QWORD *)*v2;
  v3[26] = *v2;
  v3 += 26;
  v8 = v3 - 24;
  v3[23] = a1;
  v3[24] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v4 = v8[41];
    v5 = v8[38];
    v6 = *(void (**)(uint64_t, uint64_t))(v8[39] + 8);
    v8[49] = v6;
    v6(v4, v5);
  }
  return swift_task_switch();
}

uint64_t GroupKeyFetcher.fetchLatestKey(for:meUser:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6[23] = v5;
  v6[22] = a5;
  v6[21] = a4;
  v6[20] = a3;
  v6[19] = a2;
  v6[18] = a1;
  v6[14] = v6;
  v6[15] = 0;
  v6[16] = 0;
  v6[10] = 0;
  v6[11] = 0;
  v6[17] = 0;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  v7 = type metadata accessor for InternalErrorCode();
  v6[24] = v7;
  v6[25] = *(_QWORD *)(v7 - 8);
  v6[26] = swift_task_alloc();
  v8 = type metadata accessor for GPKGroupKey.RawKey.Key();
  v6[27] = v8;
  v6[28] = *(_QWORD *)(v8 - 8);
  v6[29] = swift_task_alloc();
  v9 = type metadata accessor for GPKGroupKey.RawKey();
  v6[30] = v9;
  v6[31] = *(_QWORD *)(v9 - 8);
  v6[32] = swift_task_alloc();
  v10 = type metadata accessor for VersionedKeyData();
  v6[33] = v10;
  v6[34] = *(_QWORD *)(v10 - 8);
  v6[35] = swift_task_alloc();
  v11 = type metadata accessor for GPKUserID();
  v6[36] = v11;
  v6[37] = *(_QWORD *)(v11 - 8);
  v6[38] = swift_task_alloc();
  v12 = type metadata accessor for GPKGroupID();
  v6[39] = v12;
  v6[40] = *(_QWORD *)(v12 - 8);
  v6[41] = swift_task_alloc();
  v6[42] = swift_task_alloc();
  v13 = type metadata accessor for LogSubsystem();
  v6[43] = v13;
  v6[44] = *(_QWORD *)(v13 - 8);
  v6[45] = swift_task_alloc();
  v6[15] = a2;
  v6[16] = a3;
  v6[10] = a4;
  v6[11] = a5;
  v6[17] = v5;
  return swift_task_switch();
}

uint64_t GroupKeyFetcher.fetchLatestKey(for:meUser:serviceName:)()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  v5 = v0[45];
  v4 = v0[44];
  v6 = v0[43];
  v7 = v0[23];
  v0[14] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Fetching latest group key from crypto", 0x25uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  v1 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[46] = v1;
  v1(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of CryptoKeyProviding(v7 + 120, (uint64_t)(v0 + 2));
  v9 = v0[5];
  v10 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v9);
  dispatch thunk of GPKGroup.groupID.getter();
  GPKUser.userID.getter();
  v11 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 + 16)
                                                                                 + **(int **)(v10 + 16));
  v2 = (_QWORD *)swift_task_alloc();
  v8[47] = v2;
  *v2 = v8[14];
  v2[1] = GroupKeyFetcher.fetchLatestKey(for:meUser:serviceName:);
  return v11(v8[42], v8[38], v8[21], v8[22], v9, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 408);
  *(_QWORD *)(v0 + 112) = v0;
  if ((v1 & 0xF000000000000000) == 0xF000000000000000)
  {
    v8 = *(void (**)(uint64_t, uint64_t))(v30 + 416);
    v11 = *(void (**)(uint64_t, uint64_t))(v30 + 368);
    v9 = *(_QWORD *)(v30 + 360);
    v10 = *(_QWORD *)(v30 + 344);
    v6 = *(_QWORD *)(v30 + 328);
    v7 = *(_QWORD *)(v30 + 312);
    v14 = *(_QWORD *)(v30 + 208);
    v12 = *(_QWORD *)(v30 + 200);
    v13 = *(_QWORD *)(v30 + 192);
    __swift_destroy_boxed_opaque_existential_1(v30 + 16);
    *(_QWORD *)(v30 + 96) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v30 + 104) = v3;
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Latest key not found for group: ", 0x20uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    dispatch thunk of GPKGroup.groupID.getter();
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v8(v6, v7);
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
    gpklog(_:type:fileID:line:subsystem:)();
    v11(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BE3DD58], v13);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
  }
  else
  {
    v25 = *(_QWORD *)(v30 + 408);
    v24 = *(_QWORD *)(v30 + 400);
    v18 = *(void (**)(uint64_t, uint64_t))(v30 + 368);
    v26 = *(_QWORD *)(v30 + 360);
    v17 = *(_QWORD *)(v30 + 344);
    v27 = *(_QWORD *)(v30 + 280);
    v22 = *(_QWORD *)(v30 + 272);
    v23 = *(_QWORD *)(v30 + 264);
    v28 = *(_QWORD *)(v30 + 256);
    v20 = *(_QWORD *)(v30 + 248);
    v21 = *(_QWORD *)(v30 + 240);
    v29 = *(_QWORD *)(v30 + 232);
    v15 = *(_QWORD *)(v30 + 224);
    v16 = *(_QWORD *)(v30 + 216);
    v19 = *(_QWORD *)(v30 + 144);
    *(_DWORD *)(v30 + 56) = *(_QWORD *)(v30 + 392);
    *(_QWORD *)(v30 + 64) = v24;
    *(_QWORD *)(v30 + 72) = v25;
    __swift_destroy_boxed_opaque_existential_1(v30 + 16);
    outlined copy of Data._Representation(v24, v25);
    VersionedKeyData.init(version:data:isCurrent:)();
    dispatch thunk of GPKGroup.groupID.getter();
    dispatch thunk of GPKGroup.version.getter();
    swift_bridgeObjectRetain();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v29, v27, v23);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v29, *MEMORY[0x24BE3D9F8], v16);
    GPKGroupKey.RawKey.init(groupID:groupVersion:serviceName:key:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Latest group key returned successfully.", 0x2BuLL, 0);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v26);
    gpklog(_:type:fileID:line:subsystem:)();
    v18(v26, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v28, v21);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v28, v21);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v27, v23);
    outlined consume of Data._Representation(v24, v25);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v30 + 112) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v0[42];
  v5 = v0[40];
  v7 = v0[39];
  v1 = v0[38];
  v2 = v0[37];
  v3 = v0[36];
  v0[14] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[14] + 8))();
}

uint64_t GroupKeyFetcher.fetchLatestKey(for:meUser:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = (_QWORD *)*v4;
  v5[14] = *v4;
  v5 += 14;
  v11 = v5 - 12;
  v5[34] = v3;
  v5[35] = a1;
  v5[36] = a2;
  v5[37] = a3;
  swift_task_dealloc();
  if (!v3)
  {
    v9 = v11[40];
    v8 = v11[38];
    v10 = v11[37];
    (*(void (**)(_QWORD, _QWORD))(v11[35] + 8))(v11[36], v11[34]);
    v6 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v11[50] = v6;
    v6(v9, v10);
  }
  return swift_task_switch();
}

uint64_t GroupKeyFetcher.fetchHistoricalKeys(for:meUser:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6[36] = v5;
  v6[35] = a5;
  v6[34] = a4;
  v6[33] = a3;
  v6[32] = a2;
  v6[31] = a1;
  v6[21] = v6;
  v6[22] = 0;
  v6[23] = 0;
  v6[15] = 0;
  v6[16] = 0;
  v6[24] = 0;
  v6[25] = 0;
  v6[26] = 0;
  v6[12] = 0;
  v6[13] = 0;
  v6[14] = 0;
  v7 = type metadata accessor for GPKGroupKey.RawKey.Key();
  v6[37] = v7;
  v6[38] = *(_QWORD *)(v7 - 8);
  v6[39] = swift_task_alloc();
  v8 = type metadata accessor for GPKGroupKey.RawKey();
  v6[40] = v8;
  v6[41] = *(_QWORD *)(v8 - 8);
  v6[42] = swift_task_alloc();
  v9 = type metadata accessor for InternalErrorCode();
  v6[43] = v9;
  v6[44] = *(_QWORD *)(v9 - 8);
  v6[45] = swift_task_alloc();
  v10 = type metadata accessor for VersionedKeyData();
  v6[46] = v10;
  v6[47] = *(_QWORD *)(v10 - 8);
  v6[48] = swift_task_alloc();
  v6[49] = swift_task_alloc();
  v11 = type metadata accessor for GPKUserID();
  v6[50] = v11;
  v6[51] = *(_QWORD *)(v11 - 8);
  v6[52] = swift_task_alloc();
  v6[53] = swift_task_alloc();
  v12 = type metadata accessor for GPKGroupID();
  v6[54] = v12;
  v6[55] = *(_QWORD *)(v12 - 8);
  v6[56] = swift_task_alloc();
  v6[57] = swift_task_alloc();
  v6[58] = swift_task_alloc();
  v13 = type metadata accessor for LogSubsystem();
  v6[59] = v13;
  v6[60] = *(_QWORD *)(v13 - 8);
  v6[61] = swift_task_alloc();
  v6[22] = a2;
  v6[23] = a3;
  v6[15] = a4;
  v6[16] = a5;
  v6[24] = v5;
  return swift_task_switch();
}

uint64_t GroupKeyFetcher.fetchHistoricalKeys(for:meUser:serviceName:)()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);

  v5 = v0[61];
  v4 = v0[60];
  v6 = v0[59];
  v7 = v0[36];
  v0[21] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Fetching historical group keys from crypto", 0x2AuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v5);
  gpklog(_:type:fileID:line:subsystem:)();
  v1 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[62] = v1;
  v1(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of CryptoKeyProviding(v7 + 120, (uint64_t)(v0 + 2));
  v9 = v0[5];
  v10 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v9);
  dispatch thunk of GPKGroup.groupID.getter();
  GPKUser.userID.getter();
  v11 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 + 24)
                                                                                 + **(int **)(v10 + 24));
  v2 = (_QWORD *)swift_task_alloc();
  v8[63] = v2;
  *v2 = v8[21];
  v2[1] = GroupKeyFetcher.fetchHistoricalKeys(for:meUser:serviceName:);
  return v11(v8[58], v8[53], v8[34], v8[35], v9, v10);
}

{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0[65];
  v13 = v0[64];
  v12 = (void (*)(uint64_t, uint64_t))v0[62];
  v10 = v0[61];
  v11 = v0[59];
  v17 = v0[46];
  v0[21] = v0;
  v0[25] = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Historical group keys(excluding current) fetched.", 0x31uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v10);
  gpklog(_:type:fileID:line:subsystem:)();
  v12(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[28] = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(version: UInt32, data: Data)]);
  lazy protocol witness table accessor for type [(version: UInt32, data: Data)] and conformance [A]();
  Sequence.enumerated()();
  v0[29] = v0[27];
  swift_bridgeObjectRetain();
  v14 = swift_task_alloc();
  *(_QWORD *)(v14 + 16) = v13;
  v15 = swift_task_alloc();
  *(_QWORD *)(v15 + 16) = partial apply for closure #1 in GroupKeyFetcher.fetchHistoricalKeys(for:meUser:serviceName:);
  *(_QWORD *)(v15 + 24) = v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[(version: UInt32, data: Data)]>);
  v2 = lazy protocol witness table accessor for type EnumeratedSequence<[(version: UInt32, data: Data)]> and conformance EnumeratedSequence<A>();
  result = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UInt32, @guaranteed Data) -> (@out VersionedKeyData), v15, v16, v17, MEMORY[0x24BEE4078], v2, MEMORY[0x24BEE40A8], v18);
  v19 = result;
  if (!v1)
  {
    v5 = v9[36];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    outlined destroy of EnumeratedSequence<[(version: UInt32, data: Data)]>();
    v9[26] = v19;
    outlined init with copy of CryptoKeyProviding(v5 + 120, (uint64_t)(v9 + 7));
    v6 = v9[10];
    v7 = v9[11];
    __swift_project_boxed_opaque_existential_1(v9 + 7, v6);
    dispatch thunk of GPKGroup.groupID.getter();
    GPKUser.userID.getter();
    v8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 + 16)
                                                                                  + **(int **)(v7 + 16));
    v4 = (_QWORD *)swift_task_alloc();
    v9[68] = v4;
    *v4 = v9[21];
    v4[1] = GroupKeyFetcher.fetchHistoricalKeys(for:meUser:serviceName:);
    return v8(v9[57], v9[52], v9[34], v9[35], v6, v7);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;

  v1 = *(_QWORD *)(v0 + 576);
  *(_QWORD *)(v0 + 168) = v0;
  if ((v1 & 0xF000000000000000) == 0xF000000000000000)
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v58 + 536);
    v14 = *(void (**)(uint64_t, uint64_t))(v58 + 496);
    v12 = *(_QWORD *)(v58 + 488);
    v13 = *(_QWORD *)(v58 + 472);
    v9 = *(_QWORD *)(v58 + 448);
    v10 = *(_QWORD *)(v58 + 432);
    v17 = *(_QWORD *)(v58 + 360);
    v15 = *(_QWORD *)(v58 + 352);
    v16 = *(_QWORD *)(v58 + 344);
    __swift_destroy_boxed_opaque_existential_1(v58 + 56);
    *(_QWORD *)(v58 + 136) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v58 + 144) = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Latest key not found for group: ", 0x20uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    dispatch thunk of GPKGroup.groupID.getter();
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v11(v9, v10);
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v12);
    gpklog(_:type:fileID:line:subsystem:)();
    v14(v12, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x24BE3DD58], v16);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    outlined destroy of [VersionedKeyData]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v51 = *(_QWORD *)(v58 + 576);
    v50 = *(_QWORD *)(v58 + 568);
    v49 = *(void (**)(uint64_t, uint64_t))(v58 + 496);
    v47 = *(_QWORD *)(v58 + 488);
    v48 = *(_QWORD *)(v58 + 472);
    v53 = *(_QWORD *)(v58 + 392);
    v55 = *(_QWORD *)(v58 + 384);
    v52 = *(_QWORD *)(v58 + 376);
    v54 = *(_QWORD *)(v58 + 368);
    *(_DWORD *)(v58 + 96) = *(_QWORD *)(v58 + 560);
    *(_QWORD *)(v58 + 104) = v50;
    *(_QWORD *)(v58 + 112) = v51;
    __swift_destroy_boxed_opaque_existential_1(v58 + 56);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Historical group keys(excluding current) fetched.", 0x31uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v47);
    gpklog(_:type:fileID:line:subsystem:)();
    v49(v47, v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined copy of Data._Representation(v50, v51);
    VersionedKeyData.init(version:data:isCurrent:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v55, v53, v54);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [VersionedKeyData]);
    Array.append(_:)();
    v56 = *(_QWORD *)(v58 + 208);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v58 + 240) = v56;
    lazy protocol witness table accessor for type [VersionedKeyData] and conformance [A]();
    v57 = Collection.isEmpty.getter();
    outlined destroy of [VersionedKeyData]();
    swift_bridgeObjectRelease();
    if ((v57 & 1) == 0)
    {
      v28 = *(_QWORD *)(v58 + 576);
      v27 = *(_QWORD *)(v58 + 568);
      v21 = *(void (**)(uint64_t, uint64_t))(v58 + 496);
      v29 = *(_QWORD *)(v58 + 488);
      v20 = *(_QWORD *)(v58 + 472);
      v30 = *(_QWORD *)(v58 + 392);
      v25 = *(_QWORD *)(v58 + 376);
      v26 = *(_QWORD *)(v58 + 368);
      v31 = *(_QWORD *)(v58 + 336);
      v23 = *(_QWORD *)(v58 + 328);
      v24 = *(_QWORD *)(v58 + 320);
      v32 = *(_QWORD **)(v58 + 312);
      v19 = *(_QWORD *)(v58 + 304);
      v22 = *(_QWORD *)(v58 + 248);
      dispatch thunk of GPKGroup.groupID.getter();
      dispatch thunk of GPKGroup.version.getter();
      swift_bridgeObjectRetain();
      v18 = *(_QWORD *)(v58 + 208);
      swift_bridgeObjectRetain();
      *v32 = v18;
      (*(void (**)(void))(v19 + 104))();
      GPKGroupKey.RawKey.init(groupID:groupVersion:serviceName:key:)();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("✅ Historical group keys returned successfully.", 0x30uLL, 0);
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v29);
      gpklog(_:type:fileID:line:subsystem:)();
      v21(v29, v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v31, v24);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v31, v24);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v30, v26);
      outlined consume of Data._Representation(v27, v28);
      outlined destroy of [VersionedKeyData]();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(*(_QWORD *)(v58 + 168) + 8))();
    }
    v46 = *(_QWORD *)(v58 + 576);
    v45 = *(_QWORD *)(v58 + 568);
    v35 = *(void (**)(uint64_t, uint64_t))(v58 + 536);
    v38 = *(void (**)(uint64_t, uint64_t))(v58 + 496);
    v36 = *(_QWORD *)(v58 + 488);
    v37 = *(_QWORD *)(v58 + 472);
    v33 = *(_QWORD *)(v58 + 448);
    v34 = *(_QWORD *)(v58 + 432);
    v43 = *(_QWORD *)(v58 + 392);
    v42 = *(_QWORD *)(v58 + 376);
    v44 = *(_QWORD *)(v58 + 368);
    v41 = *(_QWORD *)(v58 + 360);
    v39 = *(_QWORD *)(v58 + 352);
    v40 = *(_QWORD *)(v58 + 344);
    *(_QWORD *)(v58 + 152) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v58 + 160) = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Keys not found for group: ", 0x1AuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    swift_bridgeObjectRelease();
    dispatch thunk of GPKGroup.groupID.getter();
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v35(v33, v34);
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/GroupKeyFetcher.swift", 0x22uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v36);
    gpklog(_:type:fileID:line:subsystem:)();
    v38(v36, v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v39 + 104))(v41, *MEMORY[0x24BE3DD58], v40);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
    outlined consume of Data._Representation(v45, v46);
    outlined destroy of [VersionedKeyData]();
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v58 + 168) + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = v0[58];
  v5 = v0[55];
  v7 = v0[54];
  v1 = v0[53];
  v2 = v0[51];
  v3 = v0[50];
  v0[21] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[21] + 8))();
}

{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v7 = (void (*)(uint64_t, uint64_t))v0[67];
  v1 = (void (*)(uint64_t, uint64_t))v0[66];
  v5 = v0[57];
  v6 = v0[54];
  v2 = v0[52];
  v3 = v0[50];
  v0[21] = v0;
  v1(v2, v3);
  v7(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  outlined destroy of [VersionedKeyData]();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[21] + 8))();
}

uint64_t GroupKeyFetcher.fetchHistoricalKeys(for:meUser:serviceName:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = (_QWORD *)*v2;
  v3[21] = *v2;
  v3 += 21;
  v12 = v3 - 19;
  v3[43] = a1;
  v3[44] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v10 = v12[56];
    v9 = v12[53];
    v11 = v12[52];
    v4 = v12[51];
    v5 = v12[48];
    v6 = *(void (**)(uint64_t, uint64_t))(v12[49] + 8);
    v12[64] = v6;
    v6(v4, v5);
    v7 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v12[65] = v7;
    v7(v10, v11);
  }
  return swift_task_switch();
}

uint64_t GroupKeyFetcher.fetchHistoricalKeys(for:meUser:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  _QWORD *v10;

  v5 = (_QWORD *)*v4;
  v5[21] = *v4;
  v5 += 21;
  v10 = v5 - 19;
  v5[48] = v3;
  v5[49] = a1;
  v5[50] = a2;
  v5[51] = a3;
  swift_task_dealloc();
  if (!v3)
  {
    v9 = (void (*)(uint64_t, uint64_t))v10[65];
    v7 = v10[55];
    v8 = v10[52];
    ((void (*)(_QWORD, _QWORD))v10[64])(v10[50], v10[48]);
    v9(v7, v8);
  }
  return swift_task_switch();
}

uint64_t closure #1 in GroupKeyFetcher.fetchHistoricalKeys(for:meUser:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;

  outlined copy of Data._Representation(a3, a4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (version: UInt32, data: Data));
  result = MEMORY[0x242634AC0](a5, v5);
  if (!__OFSUB__(result, 1))
    return VersionedKeyData.init(version:data:isCurrent:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in GroupKeyFetcher.fetchHistoricalKeys(for:meUser:serviceName:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;

  return closure #1 in GroupKeyFetcher.fetchHistoricalKeys(for:meUser:serviceName:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t thunk for @callee_guaranteed (@unowned Int, @unowned UInt32, @guaranteed Data) -> (@out VersionedKeyData)(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  return a2(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UInt32, @guaranteed Data) -> (@out VersionedKeyData)(uint64_t a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@unowned Int, @unowned UInt32, @guaranteed Data) -> (@out VersionedKeyData)(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16));
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  void (*v34)(char *, char *);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  uint64_t AssociatedTypeWitness;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  Swift::Int v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v34 = a1;
  v35 = a2;
  v79 = a3;
  v71 = a4;
  v36 = a5;
  v78 = a6;
  v38 = a8;
  v39 = "Fatal error";
  v40 = "Index out of bounds";
  v41 = "Swift/Collection.swift";
  v42 = "Range requires lowerBound <= upperBound";
  v43 = "Swift/Range.swift";
  v44 = "Index out of range";
  v45 = "Unexpectedly found nil while unwrapping an Optional value";
  v46 = "Swift/Sequence.swift";
  v86 = a3;
  v85 = a4;
  v84 = a5;
  v47 = *(_QWORD *)(a5 - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1);
  v49 = (char *)&v21 - v48;
  v50 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v21 - v48);
  v51 = (char *)&v21 - v50;
  v52 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v21 - v50);
  v53 = (char *)&v21 - v52;
  v54 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v21 - v52);
  v55 = (char *)&v21 - v54;
  v57 = MEMORY[0x24BEE0E28];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v72 = 0;
  v58 = type metadata accessor for Optional();
  v60 = *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64);
  v59 = (v60 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v72);
  v61 = (char *)&v21 - v59;
  v62 = (v60 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v63 = (uint64_t)&v21 - v62;
  v64 = *(_QWORD *)(v12 - 8);
  v65 = (*(_QWORD *)(v64 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v13);
  v66 = (char *)&v21 - v65;
  v75 = *(_QWORD *)(v14 - 8);
  v67 = (*(_QWORD *)(v75 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v74 = (char *)&v21 - v67;
  v68 = swift_getAssociatedTypeWitness();
  v69 = *(_QWORD *)(v68 - 8);
  v70 = (*(_QWORD *)(v69 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v79);
  v77 = (char *)&v21 - v70;
  v80 = dispatch thunk of Sequence.underestimatedCount.getter();
  v83 = Array.init()();
  v73 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v80);
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v74, v76, v79);
  dispatch thunk of Sequence.makeIterator()();
  result = v80;
  if (v80 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_32:
    __break(1u);
    return result;
  }
  v32 = 0;
  for (i = v37; ; i = v22)
  {
    v30 = i;
    v31 = v32;
    if (v32 == v80)
      goto LABEL_16;
    if (v31 < 0 || v31 >= v80)
      goto LABEL_15;
    v81 = v31;
    if (v80 < 0)
      goto LABEL_14;
    if (v31 >= v80)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_14:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      v81 = 0;
      v82 = 1;
      v28 = v31;
      goto LABEL_17;
    }
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      goto LABEL_32;
    v82 = 0;
    v28 = v29;
LABEL_17:
    v27 = v28;
    if ((v82 & 1) != 0)
      break;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v61, 1, AssociatedTypeWitness) == 1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v20 = v30;
    v34(v61, v49);
    v22 = v20;
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v69 + 8))(v77, v68);
      outlined destroy of ContiguousArray<A1>();
      (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v38, v49, v36);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v61, AssociatedTypeWitness);
      return v21;
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v61, AssociatedTypeWitness);
    ContiguousArray.append(_:)();
    result = v22;
    v32 = v27;
  }
  for (j = v30; ; j = v23)
  {
    v25 = j;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v63, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v69 + 8))(v77, v68);
      outlined destroy of A.Element?(v63, AssociatedTypeWitness);
      v24 = v83;
      swift_retain();
      swift_release();
      return v24;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v66, v63, AssociatedTypeWitness);
    v18 = v25;
    v34(v66, v51);
    v23 = v18;
    if (v18)
      break;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v66, AssociatedTypeWitness);
    ContiguousArray.append(_:)();
  }
  (*(void (**)(char *, uint64_t))(v64 + 8))(v66, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v77, v68);
  outlined destroy of ContiguousArray<A1>();
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v38, v51, v36);
  return v21;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [VersionedKeyData]()
{
  swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type [VersionedKeyData] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [VersionedKeyData] and conformance [A];
  if (!lazy protocol witness table cache variable for type [VersionedKeyData] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [VersionedKeyData]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [VersionedKeyData] and conformance [A]);
    return v1;
  }
  return v3;
}

void *GroupKeyFetcher.init(client:userStore:groupStore:cryptoKeyService:)@<X0>(const void *a1@<X0>, const void *a2@<X1>, const void *a3@<X2>, const void *a4@<X3>, uint64_t a5@<X8>)
{
  outlined init with take of Client(a1, (void *)a5);
  outlined init with take of UserStore(a2, (void *)(a5 + 40));
  outlined init with take of GroupStore(a3, (void *)(a5 + 80));
  return outlined init with take of CryptoKeyProviding(a4, (void *)(a5 + 120));
}

uint64_t initializeBufferWithCopyOfBuffer for GroupKeyFetcher(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for GroupKeyFetcher(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 120);
}

_QWORD *initializeWithCopy for GroupKeyFetcher(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a2[3];
  a1[3] = v2;
  a1[4] = a2[4];
  (**(void (***)(void))(v2 - 8))();
  v3 = a2[8];
  a1[8] = v3;
  a1[9] = a2[9];
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v4 = a2[13];
  a1[13] = v4;
  a1[14] = a2[14];
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 10), (uint64_t)(a2 + 10));
  v5 = a2[18];
  a1[18] = v5;
  a1[19] = a2[19];
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)(a1 + 15), (uint64_t)(a2 + 15));
  return a1;
}

uint64_t assignWithCopy for GroupKeyFetcher(uint64_t a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 40, a2 + 5);
  __swift_assign_boxed_opaque_existential_1(a1 + 80, a2 + 10);
  __swift_assign_boxed_opaque_existential_1(a1 + 120, a2 + 15);
  return a1;
}

uint64_t assignWithTake for GroupKeyFetcher(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  memcpy((void *)a1, (const void *)a2, 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 80);
  memcpy((void *)(a1 + 80), (const void *)(a2 + 80), 0x28uLL);
  __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  memcpy((void *)(a1 + 120), (const void *)(a2 + 120), 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupKeyFetcher(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 160))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 24)))
        v3 = *(_QWORD *)(a1 + 24);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for GroupKeyFetcher(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 20;
  if (a2 < 0)
  {
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      result[3] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupKeyFetcher()
{
  return &type metadata for GroupKeyFetcher;
}

uint64_t outlined destroy of A.Element?(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  return a1;
}

uint64_t CompleteGPKUpdateGroupRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t static CompleteGPKUpdateGroupRequest.Response.CodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t CompleteGPKUpdateGroupRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

BOOL CompleteGPKUpdateGroupRequest.Response.CodingKeys.init(stringValue:)()
{
  char v1;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v1 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0;
}

uint64_t CompleteGPKUpdateGroupRequest.Response.CodingKeys.init(intValue:)()
{
  return 1;
}

uint64_t CompleteGPKUpdateGroupRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKUpdateGroupRequest.Response.CodingKeys, &type metadata for CompleteGPKUpdateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKUpdateGroupRequest.Response.CodingKeys, &type metadata for CompleteGPKUpdateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKUpdateGroupRequest.Response.CodingKeys, &type metadata for CompleteGPKUpdateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKUpdateGroupRequest.Response.CodingKeys, &type metadata for CompleteGPKUpdateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKUpdateGroupRequest.Response.CodingKeys, &type metadata for CompleteGPKUpdateGroupRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteGPKUpdateGroupRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t CompleteGPKUpdateGroupRequest.Response.CodingKeys.stringValue.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  return static CompleteGPKUpdateGroupRequest.Response.CodingKeys.== infix(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  return CompleteGPKUpdateGroupRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  return CompleteGPKUpdateGroupRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  return CompleteGPKUpdateGroupRequest.Response.CodingKeys.stringValue.getter();
}

BOOL protocol witness for CodingKey.init(stringValue:) in conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = CompleteGPKUpdateGroupRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  return CompleteGPKUpdateGroupRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteGPKUpdateGroupRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteGPKUpdateGroupRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[2];
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = a1;
  v22 = 0;
  v21 = 0;
  v16 = type metadata accessor for GPKGroupID();
  v13 = *(_QWORD *)(v16 - 8);
  v6 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v5 - v6;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteGPKUpdateGroupRequest.Response.CodingKeys>);
  v8 = *(_QWORD *)(v15 - 8);
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v5 - v9;
  v22 = v2;
  v21 = v1;
  v10 = v2[3];
  v11 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v10);
  lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v14, v16);
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v17;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v19 = v3;
  v20 = v3;
  if (v3)
    v5[1] = v20;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v15);
}

uint64_t CompleteGPKUpdateGroupRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v11 = a2;
  v20 = a1;
  v29 = 0;
  v16 = 0;
  v12 = type metadata accessor for GPKGroupID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v6 - v14;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteGPKUpdateGroupRequest.Response.CodingKeys>);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v23 = (char *)v6 - v19;
  v21 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for CompleteGPKUpdateGroupRequest.Response() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (uint64_t)v6 - v21;
  v29 = v2;
  v25 = v2[3];
  v26 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v25);
  lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys();
  v3 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v27 = v3;
  v28 = v3;
  if (v3)
  {
    v8 = v28;
  }
  else
  {
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v4;
    v10 = v4;
    if (!v4)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22, v15, v12);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
      outlined init with copy of CompleteGPKUpdateGroupRequest.Response(v22, v11);
      __swift_destroy_boxed_opaque_existential_1(v20);
      return outlined destroy of CompleteGPKUpdateGroupRequest.Response(v22);
    }
    v7 = v10;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    v8 = v7;
  }
  v6[1] = v8;
  return __swift_destroy_boxed_opaque_existential_1(v20);
}

uint64_t type metadata accessor for CompleteGPKUpdateGroupRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteGPKUpdateGroupRequest.Response;
  if (!type metadata singleton initialization cache for CompleteGPKUpdateGroupRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t outlined init with copy of CompleteGPKUpdateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of CompleteGPKUpdateGroupRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  return a1;
}

uint64_t CompleteGPKUpdateGroupRequest.Response.init(groupId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a2, a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompleteGPKUpdateGroupRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CompleteGPKUpdateGroupRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteGPKUpdateGroupRequest.Response(uint64_t a1)
{
  return CompleteGPKUpdateGroupRequest.Response.encode(to:)(a1);
}

uint64_t CompleteGPKUpdateGroupRequest.Body.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t CompleteGPKUpdateGroupRequest.Body.bundleId.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompleteGPKUpdateGroupRequest.Body() + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for CompleteGPKUpdateGroupRequest.Body()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteGPKUpdateGroupRequest.Body;
  if (!type metadata singleton initialization cache for CompleteGPKUpdateGroupRequest.Body)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t *CompleteGPKUpdateGroupRequest.Body.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for CompleteGPKUpdateGroupRequest.Body();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(v2 + 24)), a1);
}

uint64_t CompleteGPKUpdateGroupRequest.Body.groupBlob.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for CompleteGPKUpdateGroupRequest.Body();
  return outlined init with copy of GroupBlobEnvelope(v1 + *(int *)(v2 + 28), a1);
}

uint64_t CompleteGPKUpdateGroupRequest.Body.rsvpResponseBlob.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompleteGPKUpdateGroupRequest.Body() + 32));
  swift_bridgeObjectRetain();
  return v2;
}

_QWORD *CompleteGPKUpdateGroupRequest.Body.signedUserRsvpBlob.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for CompleteGPKUpdateGroupRequest.Body();
  return outlined init with copy of GKCrypto_SignedRSVP?((_QWORD *)(v1 + *(int *)(v2 + 36)), a1);
}

_QWORD *outlined init with copy of GKCrypto_SignedRSVP?(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *);
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;

  v23 = type metadata accessor for GKCrypto_SignedRSVP();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(v24 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *(_DWORD *)a2 = *(_DWORD *)a1;
    v11 = a1[1];
    v12 = a1[2];
    outlined copy of Data._Representation(v11, v12);
    a2[1] = v11;
    a2[2] = v12;
    v14 = (char *)a2 + *(int *)(v23 + 24);
    v13 = (char *)a1 + *(int *)(v23 + 24);
    v15 = type metadata accessor for UnknownStorage();
    v16 = *(void (**)(char *, char *))(*(_QWORD *)(v15 - 8) + 16);
    v16(v14, v13);
    v17 = (_DWORD *)((char *)a2 + *(int *)(v23 + 28));
    v18 = (_DWORD *)((char *)a1 + *(int *)(v23 + 28));
    v19 = type metadata accessor for GKCrypto_RSVP();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t))(v20 + 48))(v18, 1))
    {
      v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
    }
    else
    {
      *v17 = *v18;
      *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
      *((_BYTE *)v17 + 16) = *((_BYTE *)v18 + 16);
      v5 = *((_QWORD *)v18 + 3);
      v6 = *((_QWORD *)v18 + 4);
      outlined copy of Data._Representation(v5, v6);
      *((_QWORD *)v17 + 3) = v5;
      *((_QWORD *)v17 + 4) = v6;
      v7 = *((_QWORD *)v18 + 5);
      v8 = *((_QWORD *)v18 + 6);
      outlined copy of Data._Representation(v7, v8);
      *((_QWORD *)v17 + 5) = v7;
      *((_QWORD *)v17 + 6) = v8;
      v9 = *((_QWORD *)v18 + 7);
      v10 = *((_QWORD *)v18 + 8);
      outlined copy of Data._Representation(v9, v10);
      *((_QWORD *)v17 + 7) = v9;
      *((_QWORD *)v17 + 8) = v10;
      ((void (*)(char *, char *, uint64_t))v16)((char *)v17 + *(int *)(v19 + 36), (char *)v18 + *(int *)(v19 + 36), v15);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v24 + 56))(a2, 0, 1, v23);
  }
  return a2;
}

_DWORD *CompleteGPKUpdateGroupRequest.Body.memberSeedBlob.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for CompleteGPKUpdateGroupRequest.Body();
  return outlined init with copy of GKCrypto_SeedBlob?((_DWORD *)(v1 + *(int *)(v2 + 40)), a1);
}

_DWORD *outlined init with copy of GKCrypto_SeedBlob?(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v15;
  uint64_t v16;

  v15 = type metadata accessor for GKCrypto_SeedBlob();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t))(v16 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    v5 = *((_QWORD *)a1 + 1);
    v6 = *((_QWORD *)a1 + 2);
    outlined copy of Data._Representation(v5, v6);
    *((_QWORD *)a2 + 1) = v5;
    *((_QWORD *)a2 + 2) = v6;
    v7 = *((_QWORD *)a1 + 3);
    v8 = *((_QWORD *)a1 + 4);
    outlined copy of Data._Representation(v7, v8);
    *((_QWORD *)a2 + 3) = v7;
    *((_QWORD *)a2 + 4) = v8;
    v9 = *((_QWORD *)a1 + 5);
    v10 = *((_QWORD *)a1 + 6);
    outlined copy of Data._Representation(v9, v10);
    *((_QWORD *)a2 + 5) = v9;
    *((_QWORD *)a2 + 6) = v10;
    a2[14] = a1[14];
    *((_QWORD *)a2 + 8) = *((_QWORD *)a1 + 8);
    *((_BYTE *)a2 + 72) = *((_BYTE *)a1 + 72);
    v12 = (char *)a2 + *(int *)(v15 + 40);
    v11 = (char *)a1 + *(int *)(v15 + 40);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 16))(v12, v11);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v15);
  }
  return a2;
}

_DWORD *CompleteGPKUpdateGroupRequest.Body.adminSeedBlob.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for CompleteGPKUpdateGroupRequest.Body();
  return outlined init with copy of GKCrypto_SeedBlob?((_DWORD *)(v1 + *(int *)(v2 + 44)), a1);
}

uint64_t CompleteGPKUpdateGroupRequest.Body.groupMetadataBlob.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = v0 + *(int *)(type metadata accessor for CompleteGPKUpdateGroupRequest.Body() + 48);
  v3 = *(_QWORD *)v1;
  outlined copy of MetaDataServerBlob?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  return v3;
}

uint64_t outlined copy of MetaDataServerBlob?(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return outlined copy of Data?(a3, a4);
  }
  return result;
}

void static CompleteGPKUpdateGroupRequest.Body.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D50C9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23D50CA80
                                                                                       + *((int *)qword_23D50CB38 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23D50CA90()
{
  uint64_t v1;

  return v1 == 0;
}

void CompleteGPKUpdateGroupRequest.Body.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23D50CBAC()
{
  return Hasher.combine<A>(_:)();
}

uint64_t CompleteGPKUpdateGroupRequest.Body.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unsigned __int8 v11;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v10 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 0;
LABEL_20:
    swift_bridgeObjectRelease();
    return v11;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("bundleId", 8uLL, 1);
  swift_bridgeObjectRetain();
  v9 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 1;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v8 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 2;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupBlob", 9uLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 3;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpResponseBlob", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 4;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("signedUserRsvpBlob", 0x12uLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 5;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("memberSeedBlob", 0xEuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 6;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("adminSeedBlob", 0xDuLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 7;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupMetadataBlob", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v11 = 8;
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 9;
}

uint64_t CompleteGPKUpdateGroupRequest.Body.CodingKeys.init(intValue:)()
{
  return 9;
}

uint64_t CompleteGPKUpdateGroupRequest.Body.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKUpdateGroupRequest.Body.CodingKeys, &type metadata for CompleteGPKUpdateGroupRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKUpdateGroupRequest.Body.CodingKeys, &type metadata for CompleteGPKUpdateGroupRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKUpdateGroupRequest.Body.CodingKeys, &type metadata for CompleteGPKUpdateGroupRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKUpdateGroupRequest.Body.CodingKeys, &type metadata for CompleteGPKUpdateGroupRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKUpdateGroupRequest.Body.CodingKeys, &type metadata for CompleteGPKUpdateGroupRequest.Body.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t CompleteGPKUpdateGroupRequest.Body.CodingKeys.intValue.getter()
{
  return 0;
}

void CompleteGPKUpdateGroupRequest.Body.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23D50D35C()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys(char *a1)
{
  char v1;

  static CompleteGPKUpdateGroupRequest.Body.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys()
{
  return CompleteGPKUpdateGroupRequest.Body.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys(uint64_t a1)
{
  char *v1;

  CompleteGPKUpdateGroupRequest.Body.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys()
{
  char *v0;

  CompleteGPKUpdateGroupRequest.Body.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteGPKUpdateGroupRequest.Body.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys()
{
  return CompleteGPKUpdateGroupRequest.Body.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompleteGPKUpdateGroupRequest.Body.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys()
{
  lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t CompleteGPKUpdateGroupRequest.Body.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _DWORD *v69;
  unint64_t v70;
  _DWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  _QWORD v95[4];
  char v96;
  char v97;
  char v98;
  char v99;
  uint64_t v100;
  char v101;
  char v102;
  _QWORD v103[2];
  char v104;
  char v105;
  uint64_t v106;
  _QWORD *v107;

  v79 = a1;
  v107 = 0;
  v106 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
  v68 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v69 = (_DWORD *)((char *)v21 - v68);
  v70 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v21 - v68);
  v71 = (_DWORD *)((char *)v21 - v70);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
  v72 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v73 = (_QWORD *)((char *)v21 - v72);
  v74 = 0;
  v75 = type metadata accessor for GroupBlobEnvelope();
  v76 = (*(_QWORD *)(*(_QWORD *)(v75 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v74);
  v77 = (uint64_t)v21 - v76;
  v89 = type metadata accessor for GPKGroupID();
  v85 = *(_QWORD *)(v89 - 8);
  v78 = (*(_QWORD *)(v85 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v89);
  v91 = (char *)v21 - v78;
  v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompleteGPKUpdateGroupRequest.Body.CodingKeys>);
  v80 = *(_QWORD *)(v88 - 8);
  v81 = (*(_QWORD *)(v80 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v79);
  v84 = (char *)v21 - v81;
  v107 = v5;
  v106 = v1;
  v82 = v5[3];
  v83 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v82);
  lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v91, v86, v89);
  v87 = &v105;
  v105 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v6 = v90;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v92 = v6;
  v93 = v6;
  if (v6)
  {
    v28 = v93;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v91, v89);
    result = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v84, v88);
    v29 = v28;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v85 + 8))(v91, v89);
    v7 = type metadata accessor for CompleteGPKUpdateGroupRequest.Body();
    v8 = v92;
    v63 = (int *)v7;
    v9 = (uint64_t *)(v86 + *(int *)(v7 + 20));
    v64 = *v9;
    v65 = v9[1];
    swift_bridgeObjectRetain();
    v104 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v66 = v8;
    v67 = v8;
    if (v8)
    {
      v27 = v67;
      swift_bridgeObjectRelease();
      result = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v84, v88);
      v29 = v27;
    }
    else
    {
      swift_bridgeObjectRelease();
      v10 = (uint64_t *)(v86 + v63[6]);
      v57 = *v10;
      v58 = v10[1];
      outlined copy of Data._Representation(v57, v58);
      v60 = v103;
      v103[0] = v57;
      v103[1] = v58;
      v59 = &v102;
      v102 = 2;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v11 = v66;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      v61 = v11;
      v62 = v11;
      if (v11)
      {
        v26 = v62;
        outlined destroy of Nonce((uint64_t)v103);
        result = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v84, v88);
        v29 = v26;
      }
      else
      {
        outlined destroy of Nonce((uint64_t)v103);
        outlined init with copy of GroupBlobEnvelope(v86 + v63[7], v77);
        v54 = &v101;
        v101 = 3;
        lazy protocol witness table accessor for type GroupBlobEnvelope and conformance GroupBlobEnvelope();
        v12 = v61;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v55 = v12;
        v56 = v12;
        if (v12)
        {
          v25 = v56;
          outlined destroy of GroupBlobEnvelope(v77);
          result = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v84, v88);
          v29 = v25;
        }
        else
        {
          outlined destroy of GroupBlobEnvelope(v77);
          v49 = *(_QWORD *)(v86 + v63[8]);
          swift_bridgeObjectRetain();
          v51 = &v100;
          v100 = v49;
          v50 = &v99;
          v99 = 4;
          lazy protocol witness table accessor for type RSVPResponseBlobEnvelope and conformance RSVPResponseBlobEnvelope();
          v13 = v55;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v52 = v13;
          v53 = v13;
          if (v13)
          {
            v24 = v53;
            outlined destroy of RSVPResponseBlobEnvelope();
            result = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v84, v88);
            v29 = v24;
          }
          else
          {
            outlined destroy of RSVPResponseBlobEnvelope();
            outlined init with copy of GKCrypto_SignedRSVP?((_QWORD *)(v86 + v63[9]), v73);
            v45 = &v98;
            v98 = 5;
            v46 = type metadata accessor for GKCrypto_SignedRSVP();
            lazy protocol witness table accessor for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP();
            v14 = v52;
            KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
            v47 = v14;
            v48 = v14;
            if (v14)
            {
              v23 = v48;
              outlined destroy of GKCrypto_SignedRSVP?((uint64_t)v73);
              result = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v84, v88);
              v29 = v23;
            }
            else
            {
              outlined destroy of GKCrypto_SignedRSVP?((uint64_t)v73);
              outlined init with copy of GKCrypto_SeedBlob?((_DWORD *)(v86 + v63[10]), v71);
              v40 = &v97;
              v97 = 6;
              v41 = type metadata accessor for GKCrypto_SeedBlob();
              v15 = lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob();
              v16 = v47;
              v42 = v15;
              KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
              v43 = v16;
              v44 = v16;
              if (v16)
              {
                v22 = v44;
                outlined destroy of GKCrypto_SeedBlob?((uint64_t)v71);
                result = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v84, v88);
                v29 = v22;
              }
              else
              {
                outlined destroy of GKCrypto_SeedBlob?((uint64_t)v71);
                outlined init with copy of GKCrypto_SeedBlob?((_DWORD *)(v86 + v63[11]), v69);
                v17 = v43;
                v96 = 7;
                KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
                v38 = v17;
                v39 = v17;
                if (v17)
                {
                  v21[2] = v39;
                  outlined destroy of GKCrypto_SeedBlob?((uint64_t)v69);
                  return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v84, v88);
                }
                else
                {
                  outlined destroy of GKCrypto_SeedBlob?((uint64_t)v69);
                  v18 = (uint64_t *)(v86 + v63[12]);
                  v30 = *v18;
                  v31 = v18[1];
                  v32 = v18[2];
                  v33 = v18[3];
                  outlined copy of MetaDataServerBlob?(v30, v31, v32, v33);
                  v35 = v95;
                  v95[0] = v30;
                  v95[1] = v31;
                  v95[2] = v32;
                  v95[3] = v33;
                  v34 = &v94;
                  v94 = 8;
                  lazy protocol witness table accessor for type MetaDataServerBlob and conformance MetaDataServerBlob();
                  v19 = v38;
                  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
                  v36 = v19;
                  v37 = v19;
                  if (v19)
                    v21[1] = v37;
                  outlined destroy of MetaDataServerBlob?(v95);
                  return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v84, v88);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RSVPResponseBlobEnvelope and conformance RSVPResponseBlobEnvelope()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope and conformance RSVPResponseBlobEnvelope;
  if (!lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope and conformance RSVPResponseBlobEnvelope)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseBlobEnvelope, &type metadata for RSVPResponseBlobEnvelope);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope and conformance RSVPResponseBlobEnvelope);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope and conformance RSVPResponseBlobEnvelope;
  if (!lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope and conformance RSVPResponseBlobEnvelope)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for RSVPResponseBlobEnvelope, &type metadata for RSVPResponseBlobEnvelope);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type RSVPResponseBlobEnvelope and conformance RSVPResponseBlobEnvelope);
    return v0;
  }
  return v2;
}

uint64_t outlined destroy of GKCrypto_SignedRSVP?(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = type metadata accessor for GKCrypto_SignedRSVP();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v2 = a1 + *(int *)(v8 + 24);
    v3 = type metadata accessor for UnknownStorage();
    v4 = *(void (**)(uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v4(v2);
    v5 = a1 + *(int *)(v8 + 28);
    v6 = type metadata accessor for GKCrypto_RSVP();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48));
      outlined consume of Data._Representation(*(_QWORD *)(v5 + 56), *(_QWORD *)(v5 + 64));
      ((void (*)(uint64_t, uint64_t))v4)(v5 + *(int *)(v6 + 36), v3);
    }
  }
  return a1;
}

uint64_t outlined destroy of GKCrypto_SeedBlob?(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for GKCrypto_SeedBlob();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v3 = a1 + *(int *)(v5 + 40);
    v1 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v3);
  }
  return a1;
}

_QWORD *outlined destroy of MetaDataServerBlob?(_QWORD *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    if ((a1[3] & 0xF000000000000000) != 0xF000000000000000)
      outlined consume of Data._Representation(a1[2], a1[3]);
  }
  return a1;
}

uint64_t CompleteGPKUpdateGroupRequest.Body.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _DWORD *v79;
  unint64_t v80;
  _DWORD *v81;
  unint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int *v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  char v111;
  char v112;
  char v113;
  uint64_t v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char v120;
  _QWORD *v121;
  __int16 v122;

  v77 = a2;
  v95 = a1;
  v121 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
  v78 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2);
  v79 = (_DWORD *)((char *)&v36 - v78);
  v80 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v36 - v78);
  v81 = (_DWORD *)((char *)&v36 - v80);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
  v82 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4);
  v83 = (_DWORD *)((char *)&v36 - v82);
  v91 = 0;
  v84 = type metadata accessor for GroupBlobEnvelope();
  v85 = (*(_QWORD *)(*(_QWORD *)(v84 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v91);
  v86 = (uint64_t)&v36 - v85;
  v87 = type metadata accessor for GPKGroupID();
  v88 = *(_QWORD *)(v87 - 8);
  v89 = (*(_QWORD *)(v88 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v87);
  v90 = (char *)&v36 - v89;
  v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompleteGPKUpdateGroupRequest.Body.CodingKeys>);
  v93 = *(_QWORD *)(v92 - 8);
  v94 = (*(_QWORD *)(v93 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v91);
  v99 = (char *)&v36 - v94;
  v96 = (int *)type metadata accessor for CompleteGPKUpdateGroupRequest.Body();
  v97 = (*(_QWORD *)(*((_QWORD *)v96 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v95);
  v98 = (uint64_t)&v36 - v97;
  v122 = 0;
  v121 = v5;
  v101 = v5[3];
  v102 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v101);
  lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys();
  v6 = v100;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v103 = v6;
  v104 = v6;
  if (v6)
  {
    v46 = v104;
  }
  else
  {
    v74 = &v120;
    v120 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v7 = v103;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v75 = v7;
    v76 = v7;
    if (v7)
    {
      v45 = v76;
      (*(void (**)(char *, uint64_t))(v93 + 8))(v99, v92);
      v46 = v45;
    }
    else
    {
      v122 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v88 + 32))(v98, v90, v87);
      v8 = v75;
      v119 = 1;
      v9 = KeyedDecodingContainer.decode(_:forKey:)();
      v70 = v8;
      v71 = v9;
      v72 = v10;
      v73 = v8;
      if (v8)
      {
        v44 = v73;
        (*(void (**)(char *, uint64_t))(v93 + 8))(v99, v92);
        v46 = v44;
      }
      else
      {
        v11 = v72;
        v12 = (uint64_t *)(v98 + v96[5]);
        v122 = 3;
        *v12 = v71;
        v12[1] = v11;
        v67 = &v116;
        v116 = 2;
        lazy protocol witness table accessor for type Nonce and conformance Nonce();
        v13 = v70;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        v68 = v13;
        v69 = v13;
        if (v13)
        {
          v43 = v69;
          (*(void (**)(char *, uint64_t))(v93 + 8))(v99, v92);
          v46 = v43;
        }
        else
        {
          v14 = v118;
          v15 = (_QWORD *)(v98 + v96[6]);
          v122 = 7;
          *v15 = v117;
          v15[1] = v14;
          v64 = &v115;
          v115 = 3;
          lazy protocol witness table accessor for type GroupBlobEnvelope and conformance GroupBlobEnvelope();
          v16 = v68;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          v65 = v16;
          v66 = v16;
          if (v16)
          {
            v42 = v66;
            (*(void (**)(char *, uint64_t))(v93 + 8))(v99, v92);
            v46 = v42;
          }
          else
          {
            v17 = v98 + v96[7];
            v122 = 15;
            outlined init with take of GroupBlobEnvelope(v86, v17);
            v61 = &v113;
            v113 = 4;
            lazy protocol witness table accessor for type RSVPResponseBlobEnvelope and conformance RSVPResponseBlobEnvelope();
            v18 = v65;
            KeyedDecodingContainer.decode<A>(_:forKey:)();
            v62 = v18;
            v63 = v18;
            if (v18)
            {
              v41 = v63;
              (*(void (**)(char *, uint64_t))(v93 + 8))(v99, v92);
              v46 = v41;
            }
            else
            {
              v19 = v96[8];
              v122 = 31;
              *(_QWORD *)(v98 + v19) = v114;
              v58 = type metadata accessor for GKCrypto_SignedRSVP();
              v57 = &v112;
              v112 = 5;
              lazy protocol witness table accessor for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP();
              v20 = v62;
              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
              v59 = v20;
              v60 = v20;
              if (v20)
              {
                v40 = v60;
                (*(void (**)(char *, uint64_t))(v93 + 8))(v99, v92);
                v46 = v40;
              }
              else
              {
                v21 = (_DWORD *)(v98 + v96[9]);
                v122 = 63;
                outlined init with take of GKCrypto_SignedRSVP?(v83, v21);
                v53 = type metadata accessor for GKCrypto_SeedBlob();
                v52 = &v111;
                v111 = 6;
                v22 = lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob();
                v23 = v59;
                v54 = v22;
                KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                v55 = v23;
                v56 = v23;
                if (v23)
                {
                  v39 = v56;
                  (*(void (**)(char *, uint64_t))(v93 + 8))(v99, v92);
                  v46 = v39;
                }
                else
                {
                  v24 = (_DWORD *)(v98 + v96[10]);
                  v122 = 127;
                  outlined init with take of GKCrypto_SeedBlob?(v81, v24);
                  v25 = v55;
                  v110 = 7;
                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                  v50 = v25;
                  v51 = v25;
                  if (v25)
                  {
                    v38 = v51;
                    (*(void (**)(char *, uint64_t))(v93 + 8))(v99, v92);
                    v46 = v38;
                  }
                  else
                  {
                    v26 = (_DWORD *)(v98 + v96[11]);
                    v122 = 255;
                    outlined init with take of GKCrypto_SeedBlob?(v79, v26);
                    v47 = &v105;
                    v105 = 8;
                    lazy protocol witness table accessor for type MetaDataServerBlob and conformance MetaDataServerBlob();
                    v27 = v50;
                    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                    v48 = v27;
                    v49 = v27;
                    if (!v27)
                    {
                      v28 = v92;
                      v29 = v99;
                      v30 = v93;
                      v31 = v107;
                      v32 = v108;
                      v33 = v109;
                      v34 = (_QWORD *)(v98 + v96[12]);
                      v122 = 511;
                      *v34 = v106;
                      v34[1] = v31;
                      v34[2] = v32;
                      v34[3] = v33;
                      (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v28);
                      outlined init with copy of CompleteGPKUpdateGroupRequest.Body(v98, v77);
                      __swift_destroy_boxed_opaque_existential_1(v95);
                      return outlined destroy of CompleteGPKUpdateGroupRequest.Body(v98);
                    }
                    v37 = v49;
                    (*(void (**)(char *, uint64_t))(v93 + 8))(v99, v92);
                    v46 = v37;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v36 = v46;
  result = __swift_destroy_boxed_opaque_existential_1(v95);
  if ((v122 & 1) != 0)
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 8))(v98, v87);
  if ((v122 & 2) != 0)
  {
    result = v98 + v96[5];
    outlined destroy of String();
  }
  if ((v122 & 4) != 0)
  {
    result = v98 + v96[6];
    outlined destroy of Nonce(result);
  }
  if ((v122 & 8) != 0)
    result = outlined destroy of GroupBlobEnvelope(v98 + v96[7]);
  if ((v122 & 0x10) != 0)
  {
    result = v98 + v96[8];
    outlined destroy of RSVPResponseBlobEnvelope();
  }
  if ((v122 & 0x20) != 0)
    result = outlined destroy of GKCrypto_SignedRSVP?(v98 + v96[9]);
  if ((v122 & 0x40) != 0)
    result = outlined destroy of GKCrypto_SeedBlob?(v98 + v96[10]);
  if ((v122 & 0x80) != 0)
    return outlined destroy of GKCrypto_SeedBlob?(v98 + v96[11]);
  return result;
}

_DWORD *outlined init with take of GKCrypto_SignedRSVP?(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *);
  _DWORD *__dst;
  _DWORD *__src;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;

  v15 = type metadata accessor for GKCrypto_SignedRSVP();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t))(v16 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 2);
    v6 = (char *)a2 + *(int *)(v15 + 24);
    v5 = (char *)a1 + *(int *)(v15 + 24);
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(char *, char *))(*(_QWORD *)(v7 - 8) + 32);
    v8(v6, v5);
    __dst = (_DWORD *)((char *)a2 + *(int *)(v15 + 28));
    __src = (_DWORD *)((char *)a1 + *(int *)(v15 + 28));
    v11 = type metadata accessor for GKCrypto_RSVP();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t))(v12 + 48))(__src, 1))
    {
      v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
    }
    else
    {
      *__dst = *__src;
      *((_QWORD *)__dst + 1) = *((_QWORD *)__src + 1);
      *((_BYTE *)__dst + 16) = *((_BYTE *)__src + 16);
      *(_OWORD *)(__dst + 6) = *(_OWORD *)(__src + 6);
      *(_OWORD *)(__dst + 10) = *(_OWORD *)(__src + 10);
      *(_OWORD *)(__dst + 14) = *(_OWORD *)(__src + 14);
      ((void (*)(char *, char *, uint64_t))v8)((char *)__dst + *(int *)(v11 + 36), (char *)__src + *(int *)(v11 + 36), v7);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v15);
  }
  return a2;
}

_DWORD *outlined init with take of GKCrypto_SeedBlob?(_DWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  char *v6;
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for GKCrypto_SeedBlob();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t))(v10 + 48))(a1, 1))
  {
    v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    *(_OWORD *)(a2 + 2) = *(_OWORD *)(a1 + 2);
    *(_OWORD *)(a2 + 6) = *(_OWORD *)(a1 + 6);
    *(_OWORD *)(a2 + 10) = *(_OWORD *)(a1 + 10);
    a2[14] = a1[14];
    *((_QWORD *)a2 + 8) = *((_QWORD *)a1 + 8);
    *((_BYTE *)a2 + 72) = *((_BYTE *)a1 + 72);
    v6 = (char *)a2 + *(int *)(v9 + 40);
    v5 = (char *)a1 + *(int *)(v9 + 40);
    v2 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *))(*(_QWORD *)(v2 - 8) + 32))(v6, v5);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
  }
  return a2;
}

uint64_t outlined init with copy of CompleteGPKUpdateGroupRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(void);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int *v86;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  int *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v86 = (int *)type metadata accessor for CompleteGPKUpdateGroupRequest.Body();
  v3 = (_QWORD *)(a1 + v86[5]);
  v81 = (_QWORD *)(a2 + v86[5]);
  *v81 = *v3;
  v82 = v3[1];
  swift_bridgeObjectRetain();
  v81[1] = v82;
  v83 = v86[6];
  v84 = *(_QWORD *)(a1 + v83);
  v85 = *(_QWORD *)(a1 + v83 + 8);
  outlined copy of Data._Representation(v84, v85);
  v4 = (uint64_t *)(a2 + v83);
  *v4 = v84;
  v4[1] = v85;
  v89 = v86[7];
  v94 = (_QWORD *)(a2 + v89);
  *(_DWORD *)(a2 + v89) = *(_DWORD *)(a1 + v89);
  v90 = *(_QWORD *)(a1 + v89 + 8);
  v91 = *(_QWORD *)(a1 + v89 + 16);
  outlined copy of Data._Representation(v90, v91);
  v94[1] = v90;
  v94[2] = v91;
  v92 = *(_QWORD *)(a1 + v89 + 24);
  v93 = *(_QWORD *)(a1 + v89 + 32);
  outlined copy of Data._Representation(v92, v93);
  v94[3] = v92;
  v94[4] = v93;
  v98 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v95 = v98[7];
  v96 = type metadata accessor for UnknownStorage();
  v97 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16);
  ((void (*)(uint64_t, uint64_t))v97)(a2 + v89 + v95, a1 + v89 + v95);
  v99 = v98[8];
  v100 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v101 = *(_QWORD *)(v100 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v101 + 48))(a1 + v89 + v99, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a2 + v89 + v99), (const void *)(a1 + v89 + v99), *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v79 = (char *)(a1 + v89 + v99);
    v78 = *(_QWORD *)v79;
    swift_bridgeObjectRetain();
    v80 = (char *)(a2 + v89 + v99);
    *(_QWORD *)v80 = v78;
    v97(&v80[*(int *)(v100 + 20)], &v79[*(int *)(v100 + 20)], v96);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v80, 0, 1, v100);
  }
  __dst = (_QWORD *)(a2 + v89 + v98[9]);
  __src = (uint64_t *)(a1 + v89 + v98[9]);
  v76 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v77 = *(_QWORD *)(v76 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v77 + 48))(__src, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v66 = *__src;
    v67 = __src[1];
    outlined copy of Data._Representation(*__src, v67);
    *__dst = v66;
    __dst[1] = v67;
    v68 = __src[2];
    v69 = __src[3];
    outlined copy of Data._Representation(v68, v69);
    __dst[2] = v68;
    __dst[3] = v69;
    v70 = __src[4];
    v71 = __src[5];
    outlined copy of Data._Representation(v70, v71);
    __dst[4] = v70;
    __dst[5] = v71;
    v72 = __src[6];
    v73 = __src[7];
    outlined copy of Data._Representation(v72, v73);
    __dst[6] = v72;
    __dst[7] = v73;
    v97((char *)__dst + *(int *)(v76 + 32), (char *)__src + *(int *)(v76 + 32), v96);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v77 + 56))(__dst, 0, 1, v76);
  }
  v62 = (_QWORD *)(a2 + v89 + v98[10]);
  v63 = (uint64_t *)(a1 + v89 + v98[10]);
  v64 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v65 = *(_QWORD *)(v64 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v65 + 48))(v63, 1))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v56 = *v63;
    v57 = v63[1];
    outlined copy of Data._Representation(*v63, v57);
    *v62 = v56;
    v62[1] = v57;
    v58 = v63[2];
    v59 = v63[3];
    outlined copy of Data._Representation(v58, v59);
    v62[2] = v58;
    v62[3] = v59;
    v60 = v63[4];
    v61 = v63[5];
    outlined copy of Data._Representation(v60, v61);
    v62[4] = v60;
    v62[5] = v61;
    v97((char *)v62 + *(int *)(v64 + 28), (char *)v63 + *(int *)(v64 + 28), v96);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
  }
  v8 = type metadata accessor for GroupBlobEnvelope();
  *(_DWORD *)(a2 + v89 + *(int *)(v8 + 20)) = *(_DWORD *)(a1 + v89 + *(int *)(v8 + 20));
  v50 = v86[8];
  v51 = *(_QWORD *)(a1 + v50);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a2 + v50) = v51;
  v52 = (_QWORD *)(a2 + v86[9]);
  v53 = (_QWORD *)(a1 + v86[9]);
  v54 = type metadata accessor for GKCrypto_SignedRSVP();
  v55 = *(_QWORD *)(v54 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(v55 + 48))(v53, 1))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    *(_DWORD *)v52 = *(_DWORD *)v53;
    v44 = v53[1];
    v45 = v53[2];
    outlined copy of Data._Representation(v44, v45);
    v52[1] = v44;
    v52[2] = v45;
    v97((char *)v52 + *(int *)(v54 + 24), (char *)v53 + *(int *)(v54 + 24), v96);
    v46 = (_DWORD *)((char *)v52 + *(int *)(v54 + 28));
    v47 = (_DWORD *)((char *)v53 + *(int *)(v54 + 28));
    v48 = type metadata accessor for GKCrypto_RSVP();
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t))(v49 + 48))(v47, 1))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      *v46 = *v47;
      *((_QWORD *)v46 + 1) = *((_QWORD *)v47 + 1);
      *((_BYTE *)v46 + 16) = *((_BYTE *)v47 + 16);
      v38 = *((_QWORD *)v47 + 3);
      v39 = *((_QWORD *)v47 + 4);
      outlined copy of Data._Representation(v38, v39);
      *((_QWORD *)v46 + 3) = v38;
      *((_QWORD *)v46 + 4) = v39;
      v40 = *((_QWORD *)v47 + 5);
      v41 = *((_QWORD *)v47 + 6);
      outlined copy of Data._Representation(v40, v41);
      *((_QWORD *)v46 + 5) = v40;
      *((_QWORD *)v46 + 6) = v41;
      v42 = *((_QWORD *)v47 + 7);
      v43 = *((_QWORD *)v47 + 8);
      outlined copy of Data._Representation(v42, v43);
      *((_QWORD *)v46 + 7) = v42;
      *((_QWORD *)v46 + 8) = v43;
      v97((char *)v46 + *(int *)(v48 + 36), (char *)v47 + *(int *)(v48 + 36), v96);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  v33 = (_DWORD *)(a2 + v86[10]);
  v34 = (_DWORD *)(a1 + v86[10]);
  v35 = type metadata accessor for GKCrypto_SeedBlob();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(unsigned int (**)(void))(v36 + 48);
  if (((unsigned int (*)(_DWORD *, uint64_t))v37)(v34, 1))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v33 = *v34;
    v27 = *((_QWORD *)v34 + 1);
    v28 = *((_QWORD *)v34 + 2);
    outlined copy of Data._Representation(v27, v28);
    *((_QWORD *)v33 + 1) = v27;
    *((_QWORD *)v33 + 2) = v28;
    v29 = *((_QWORD *)v34 + 3);
    v30 = *((_QWORD *)v34 + 4);
    outlined copy of Data._Representation(v29, v30);
    *((_QWORD *)v33 + 3) = v29;
    *((_QWORD *)v33 + 4) = v30;
    v31 = *((_QWORD *)v34 + 5);
    v32 = *((_QWORD *)v34 + 6);
    outlined copy of Data._Representation(v31, v32);
    *((_QWORD *)v33 + 5) = v31;
    *((_QWORD *)v33 + 6) = v32;
    v33[14] = v34[14];
    *((_QWORD *)v33 + 8) = *((_QWORD *)v34 + 8);
    *((_BYTE *)v33 + 72) = *((_BYTE *)v34 + 72);
    v97((char *)v33 + *(int *)(v35 + 40), (char *)v34 + *(int *)(v35 + 40), v96);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v25 = (_DWORD *)(a2 + v86[11]);
  v26 = (_DWORD *)(a1 + v86[11]);
  if (v37())
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *v25 = *v26;
    v19 = *((_QWORD *)v26 + 1);
    v20 = *((_QWORD *)v26 + 2);
    outlined copy of Data._Representation(v19, v20);
    *((_QWORD *)v25 + 1) = v19;
    *((_QWORD *)v25 + 2) = v20;
    v21 = *((_QWORD *)v26 + 3);
    v22 = *((_QWORD *)v26 + 4);
    outlined copy of Data._Representation(v21, v22);
    *((_QWORD *)v25 + 3) = v21;
    *((_QWORD *)v25 + 4) = v22;
    v23 = *((_QWORD *)v26 + 5);
    v24 = *((_QWORD *)v26 + 6);
    outlined copy of Data._Representation(v23, v24);
    *((_QWORD *)v25 + 5) = v23;
    *((_QWORD *)v25 + 6) = v24;
    v25[14] = v26[14];
    *((_QWORD *)v25 + 8) = *((_QWORD *)v26 + 8);
    *((_BYTE *)v25 + 72) = *((_BYTE *)v26 + 72);
    v97((char *)v25 + *(int *)(v35 + 40), (char *)v26 + *(int *)(v35 + 40), v96);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v25, 0, 1, v35);
  }
  v17 = a2 + v86[12];
  v18 = a1 + v86[12];
  if (*(_QWORD *)(v18 + 8))
  {
    *(_DWORD *)v17 = *(_DWORD *)v18;
    v16 = *(_QWORD *)(v18 + 8);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v17 + 8) = v16;
    if ((*(_QWORD *)(v18 + 24) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(v17 + 16) = *(_OWORD *)(v18 + 16);
    }
    else
    {
      v14 = *(_QWORD *)(v18 + 16);
      v15 = *(_QWORD *)(v18 + 24);
      outlined copy of Data._Representation(v14, v15);
      *(_QWORD *)(v17 + 16) = v14;
      *(_QWORD *)(v17 + 24) = v15;
    }
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 16) = *(_OWORD *)(v18 + 16);
  }
  return a2;
}

uint64_t outlined destroy of CompleteGPKUpdateGroupRequest.Body(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  int *v22;
  uint64_t v23;
  uint64_t v24;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  v16 = (int *)type metadata accessor for CompleteGPKUpdateGroupRequest.Body();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v16[6]), *(_QWORD *)(a1 + v16[6] + 8));
  v18 = v16[7];
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v18 + 8), *(_QWORD *)(a1 + v18 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v18 + 24), *(_QWORD *)(a1 + v18 + 32));
  v22 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v19 = v22[7];
  v20 = type metadata accessor for UnknownStorage();
  v21 = *(void (**)(uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v21(a1 + v18 + v19);
  v23 = v22[8];
  v24 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(a1 + v18 + v23, 1))
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v21)(a1 + v18 + v23 + *(int *)(v24 + 20), v20);
  }
  v14 = a1 + v18 + v22[9];
  v15 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 56));
    ((void (*)(uint64_t, uint64_t))v21)(v14 + *(int *)(v15 + 32), v20);
  }
  v12 = a1 + v18 + v22[10];
  v13 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v12, *(_QWORD *)(v12 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40));
    ((void (*)(uint64_t, uint64_t))v21)(v12 + *(int *)(v13 + 28), v20);
  }
  swift_bridgeObjectRelease();
  v10 = a1 + v16[9];
  v11 = type metadata accessor for GKCrypto_SignedRSVP();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16));
    ((void (*)(uint64_t, uint64_t))v21)(v10 + *(int *)(v11 + 24), v20);
    v8 = v10 + *(int *)(v11 + 28);
    v9 = type metadata accessor for GKCrypto_RSVP();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32));
      outlined consume of Data._Representation(*(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 48));
      outlined consume of Data._Representation(*(_QWORD *)(v8 + 56), *(_QWORD *)(v8 + 64));
      ((void (*)(uint64_t, uint64_t))v21)(v8 + *(int *)(v9 + 36), v20);
    }
  }
  v5 = a1 + v16[10];
  v6 = type metadata accessor for GKCrypto_SeedBlob();
  v7 = *(unsigned int (**)(void))(*(_QWORD *)(v6 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v7)(v5, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48));
    ((void (*)(uint64_t, uint64_t))v21)(v5 + *(int *)(v6 + 40), v20);
  }
  v4 = a1 + v16[11];
  if (!v7())
  {
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48));
    ((void (*)(uint64_t, uint64_t))v21)(v4 + *(int *)(v6 + 40), v20);
  }
  v3 = (_QWORD *)(a1 + v16[12]);
  if (v3[1])
  {
    swift_bridgeObjectRelease();
    if ((v3[3] & 0xF000000000000000) != 0xF000000000000000)
      outlined consume of Data._Representation(v3[2], v3[3]);
  }
  return a1;
}

int *CompleteGPKUpdateGroupRequest.Body.init(groupId:bundleId:nonce:groupBlob:rsvpResponseBlob:signedUserRsvpBlob:memberSeedBlob:adminSeedBlob:groupMetadataBlob:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _DWORD *a7@<X6>, _DWORD *a8@<X7>, uint64_t a9@<X8>, _DWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *result;
  _QWORD *v18;
  uint64_t v21;
  uint64_t v22;
  int *v29;

  v21 = *a4;
  v22 = a4[1];
  v14 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a9, a1);
  v29 = (int *)type metadata accessor for CompleteGPKUpdateGroupRequest.Body();
  v15 = (_QWORD *)(a9 + v29[5]);
  *v15 = a2;
  v15[1] = a3;
  v16 = (_QWORD *)(a9 + v29[6]);
  *v16 = v21;
  v16[1] = v22;
  outlined init with take of GroupBlobEnvelope(a5, a9 + v29[7]);
  *(_QWORD *)(a9 + v29[8]) = a6;
  outlined init with take of GKCrypto_SignedRSVP?(a7, (_DWORD *)(a9 + v29[9]));
  outlined init with take of GKCrypto_SeedBlob?(a8, (_DWORD *)(a9 + v29[10]));
  outlined init with take of GKCrypto_SeedBlob?(a10, (_DWORD *)(a9 + v29[11]));
  result = v29;
  v18 = (_QWORD *)(a9 + v29[12]);
  *v18 = a11;
  v18[1] = a12;
  v18[2] = a13;
  v18[3] = a14;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CompleteGPKUpdateGroupRequest.Body@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CompleteGPKUpdateGroupRequest.Body.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CompleteGPKUpdateGroupRequest.Body(uint64_t a1)
{
  return CompleteGPKUpdateGroupRequest.Body.encode(to:)(a1);
}

void variable initialization expression of CompleteGPKUpdateGroupRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t CompleteGPKUpdateGroupRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t CompleteGPKUpdateGroupRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*CompleteGPKUpdateGroupRequest.bodyContent.modify())()
{
  return CompleteGPKUpdateGroupRequest.bodyContent.modify;
}

uint64_t CompleteGPKUpdateGroupRequest.groupBlobEnvelope.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for CompleteGPKUpdateGroupRequest();
  return outlined init with copy of GroupBlobEnvelope(v1 + *(int *)(v2 + 20), a1);
}

uint64_t type metadata accessor for CompleteGPKUpdateGroupRequest()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for CompleteGPKUpdateGroupRequest;
  if (!type metadata singleton initialization cache for CompleteGPKUpdateGroupRequest)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t CompleteGPKUpdateGroupRequest.groupBlobEnvelope.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v5[1] = 0;
  v5[0] = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GroupBlobEnvelope() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v6 = (uint64_t)v5 - v5[0];
  outlined init with copy of GroupBlobEnvelope(v2, (uint64_t)v5 - v5[0]);
  v3 = type metadata accessor for CompleteGPKUpdateGroupRequest();
  outlined assign with take of GroupBlobEnvelope(v6, v1 + *(int *)(v3 + 20));
  return outlined destroy of GroupBlobEnvelope(v7);
}

uint64_t outlined assign with take of GroupBlobEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  _OWORD *v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(_OWORD *, uint64_t, uint64_t);
  _OWORD *__src;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(_OWORD *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  int *v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = v7;
  outlined consume of Data._Representation(v8, v9);
  v54 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v49 = v54[7];
  v51 = type metadata accessor for UnknownStorage();
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(void (**)(uint64_t, uint64_t))(v52 + 40);
  v53(a2 + v49, a1 + v49);
  v55 = v54[8];
  v57 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v59)(a2 + v55, 1))
  {
    if (v59(a1 + v55, 1, v57))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy((void *)(a2 + v55), (const void *)(a1 + v55), *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      *(_QWORD *)(a2 + v55) = *(_QWORD *)(a1 + v55);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(a2 + v55 + *(int *)(v57 + 20), a1 + v55 + *(int *)(v57 + 20), v51);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(a2 + v55, 0, 1, v57);
    }
  }
  else if (v59(a1 + v55, 1, v57))
  {
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys(a2 + v55);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a2 + v55), (const void *)(a1 + v55), *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    *(_QWORD *)(a2 + v55) = *(_QWORD *)(a1 + v55);
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t, uint64_t))v53)(a2 + v55 + *(int *)(v57 + 20), a1 + v55 + *(int *)(v57 + 20), v51);
  }
  v45 = (_OWORD *)(a2 + v54[9]);
  __src = (_OWORD *)(a1 + v54[9]);
  v46 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v47 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v48)(v45, 1))
  {
    if (v48(__src, 1, v46))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(v45, __src, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *v45 = *__src;
      v45[1] = __src[1];
      v45[2] = __src[2];
      v45[3] = __src[3];
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))((char *)v45 + *(int *)(v46 + 32), (char *)__src + *(int *)(v46 + 32), v51);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v45, 0, 1, v46);
    }
  }
  else if (v48(__src, 1, v46))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v45);
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(v45, __src, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v12 = *((_QWORD *)__src + 1);
    v13 = *(_QWORD *)v45;
    v14 = *((_QWORD *)v45 + 1);
    *(_QWORD *)v45 = *(_QWORD *)__src;
    *((_QWORD *)v45 + 1) = v12;
    outlined consume of Data._Representation(v13, v14);
    v15 = *((_QWORD *)__src + 3);
    v16 = *((_QWORD *)v45 + 2);
    v17 = *((_QWORD *)v45 + 3);
    *((_QWORD *)v45 + 2) = *((_QWORD *)__src + 2);
    *((_QWORD *)v45 + 3) = v15;
    outlined consume of Data._Representation(v16, v17);
    v18 = *((_QWORD *)__src + 5);
    v19 = *((_QWORD *)v45 + 4);
    v20 = *((_QWORD *)v45 + 5);
    *((_QWORD *)v45 + 4) = *((_QWORD *)__src + 4);
    *((_QWORD *)v45 + 5) = v18;
    outlined consume of Data._Representation(v19, v20);
    v21 = *((_QWORD *)__src + 7);
    v22 = *((_QWORD *)v45 + 6);
    v23 = *((_QWORD *)v45 + 7);
    *((_QWORD *)v45 + 6) = *((_QWORD *)__src + 6);
    *((_QWORD *)v45 + 7) = v21;
    outlined consume of Data._Representation(v22, v23);
    ((void (*)(char *, char *, uint64_t))v53)((char *)v45 + *(int *)(v46 + 32), (char *)__src + *(int *)(v46 + 32), v51);
  }
  v40 = (_OWORD *)(a2 + v54[10]);
  v39 = (_OWORD *)(a1 + v54[10]);
  v41 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v42 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v43)(v40, 1))
  {
    if (v43(v39, 1, v41))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v40, v39, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      *v40 = *v39;
      v40[1] = v39[1];
      v40[2] = v39[2];
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))((char *)v40 + *(int *)(v41 + 28), (char *)v39 + *(int *)(v41 + 28), v51);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v40, 0, 1, v41);
    }
  }
  else if (v43(v39, 1, v41))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v40);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v40, v39, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v26 = *((_QWORD *)v39 + 1);
    v27 = *(_QWORD *)v40;
    v28 = *((_QWORD *)v40 + 1);
    *(_QWORD *)v40 = *(_QWORD *)v39;
    *((_QWORD *)v40 + 1) = v26;
    outlined consume of Data._Representation(v27, v28);
    v29 = *((_QWORD *)v39 + 3);
    v30 = *((_QWORD *)v40 + 2);
    v31 = *((_QWORD *)v40 + 3);
    *((_QWORD *)v40 + 2) = *((_QWORD *)v39 + 2);
    *((_QWORD *)v40 + 3) = v29;
    outlined consume of Data._Representation(v30, v31);
    v32 = *((_QWORD *)v39 + 5);
    v33 = *((_QWORD *)v40 + 4);
    v34 = *((_QWORD *)v40 + 5);
    *((_QWORD *)v40 + 4) = *((_QWORD *)v39 + 4);
    *((_QWORD *)v40 + 5) = v32;
    outlined consume of Data._Representation(v33, v34);
    ((void (*)(char *, char *, uint64_t))v53)((char *)v40 + *(int *)(v41 + 28), (char *)v39 + *(int *)(v41 + 28), v51);
  }
  v37 = type metadata accessor for GroupBlobEnvelope();
  result = a2;
  *(_DWORD *)(a2 + *(int *)(v37 + 20)) = *(_DWORD *)(a1 + *(int *)(v37 + 20));
  return result;
}

uint64_t (*CompleteGPKUpdateGroupRequest.groupBlobEnvelope.modify())()
{
  type metadata accessor for CompleteGPKUpdateGroupRequest();
  return CompleteGPKUpdateGroupRequest.groupBlobEnvelope.modify;
}

uint64_t CompleteGPKUpdateGroupRequest.init(groupID:nonce:serverUpdateBlobs:bundleID:newGroupVersion:signer:encryptor:unencryptedMetadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String *v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  Swift::String *v63;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  Swift::String *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  char *v82;
  uint64_t countAndFlagsBits;
  Builtin::Word v84;
  void *object;
  Swift::String *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _BYTE *v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  Swift::OpaquePointer v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t updated;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  _DWORD *v167;
  unint64_t v168;
  _DWORD *v169;
  unint64_t v170;
  _DWORD *v171;
  unint64_t v172;
  _DWORD *v173;
  unint64_t v174;
  _DWORD *v175;
  unint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  int v210;
  char *v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _BYTE v216[40];
  uint64_t v217;
  unint64_t v218;
  _BYTE v219[40];
  _BYTE v220[40];
  _QWORD v221[2];
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  uint64_t v225;
  _QWORD v226[2];
  Swift::String v227;
  _QWORD v228[4];
  _QWORD v229[4];
  uint64_t v230;
  _QWORD v231[2];
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  _QWORD v238[2];
  uint64_t v239;
  _QWORD v240[2];
  void *rawValue;
  _QWORD v242[2];
  int v243;
  _QWORD v244[5];
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  char v255;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;

  v146 = a9;
  v198 = a1;
  v194 = a2;
  v195 = a3;
  v189 = a4;
  v190 = a5;
  v191 = a6;
  v192 = a7;
  v193 = a8;
  v199 = a10;
  v262 = 0;
  v261 = 0;
  v260 = 0;
  v259 = 0;
  v258 = 0;
  v257 = 0;
  v256 = 0;
  v254 = 0;
  v252 = 0;
  v253 = 0;
  v251 = 0;
  v249 = 0;
  v250 = 0;
  v248 = 0;
  v247 = 0;
  v246 = 0;
  v245 = 0;
  v243 = 0;
  rawValue = 0;
  v232 = 0;
  v230 = 0;
  v223 = 0;
  v217 = 0;
  v218 = 0;
  v185 = 0;
  v147 = type metadata accessor for CompleteGPKUpdateGroupRequest.Body();
  v148 = (*(_QWORD *)(*(_QWORD *)(v147 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v149 = (uint64_t)v64 - v148;
  v262 = (char *)v64 - v148;
  v150 = type metadata accessor for DictionaryEncoder.DataEncodingStrategy();
  v151 = *(_QWORD *)(v150 - 8);
  v152 = (*(_QWORD *)(v151 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v185);
  v153 = (char *)v64 - v152;
  updated = type metadata accessor for CompleteUpdateMetaDataRequest.Body();
  v155 = (*(_QWORD *)(*(_QWORD *)(updated - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v185);
  v156 = (uint64_t)v64 - v155;
  v157 = type metadata accessor for GPKGroupID();
  v158 = *(_QWORD *)(v157 - 8);
  v159 = (*(_QWORD *)(v158 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v185);
  v160 = (uint64_t)v64 - v159;
  v161 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v162 = (uint64_t)v64 - v161;
  v163 = type metadata accessor for CompleteUpdateMetaDataRequest();
  v164 = (*(_QWORD *)(*(_QWORD *)(v163 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v163);
  v165 = (uint64_t)v64 - v164;
  v261 = (char *)v64 - v164;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
  v166 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12);
  v167 = (_DWORD *)((char *)v64 - v166);
  v168 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v64 - v166);
  v169 = (_DWORD *)((char *)v64 - v168);
  v170 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v64 - v168);
  v171 = (_DWORD *)((char *)v64 - v170);
  v260 = (char *)v64 - v170;
  v172 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v16);
  v173 = (_DWORD *)((char *)v64 - v172);
  v259 = (char *)v64 - v172;
  v174 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v185);
  v175 = (_DWORD *)((char *)v64 - v174);
  v176 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18);
  v177 = (_QWORD *)((char *)v64 - v176);
  v178 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v20);
  v179 = (_QWORD *)((char *)v64 - v178);
  v258 = (char *)v64 - v178;
  v180 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for GroupBlobEnvelope() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v185);
  v181 = (uint64_t)v64 - v180;
  v182 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for BinaryDecodingOptions() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v185);
  v183 = (char *)v64 - v182;
  v184 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v22);
  v211 = (char *)v64 - v184;
  v205 = type metadata accessor for GKCrypto_GroupBlob();
  v186 = (*(_QWORD *)(*(_QWORD *)(v205 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v185);
  v187 = (uint64_t)v64 - v186;
  v188 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v206 = (uint64_t)v64 - v188;
  v257 = (char *)v64 - v188;
  v196 = type metadata accessor for CompleteGPKUpdateGroupRequest();
  v197 = (*(_QWORD *)(*(_QWORD *)(v196 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v195);
  v25 = (_QWORD *)((char *)v64 - v197);
  v200 = v25;
  v256 = (char *)v64 - v197;
  v255 = 0;
  v254 = v198;
  v201 = *v26;
  v202 = v26[1];
  v252 = v201;
  v253 = v202;
  v251 = v27;
  v249 = v28;
  v250 = v29;
  v248 = v30;
  v247 = v31;
  v246 = v32;
  v245 = v199;
  v255 = 1;
  *v25 = 0;
  v25[1] = 0;
  v25[2] = 0;
  v25[3] = 0;
  v204 = v27[3];
  v203 = v27[4];
  __swift_project_boxed_opaque_existential_1(v27, v204);
  v207 = (*(uint64_t (**)(uint64_t))(v203 + 8))(v204);
  v208 = v33;
  v209 = v244;
  memset(v244, 0, sizeof(v244));
  v212 = lazy protocol witness table accessor for type GKCrypto_GroupBlob and conformance GKCrypto_GroupBlob();
  v210 = default argument 2 of Message.init(serializedData:extensions:partial:options:)();
  default argument 3 of Message.init(serializedData:extensions:partial:options:)();
  v34 = v213;
  Message.init(serializedData:extensions:partial:options:)();
  v214 = v34;
  v215 = v34;
  if (v34)
  {
    v71 = v215;
    goto LABEL_30;
  }
  v243 = v191;
  outlined init with copy of GKCrypto_GroupBlob(v206, v187);
  GroupBlobEnvelope.init(groupBlob:groupVersion:)(v187, v191, v181);
  v35 = (uint64_t)v200 + *(int *)(v196 + 20);
  v255 = 3;
  outlined init with take of GroupBlobEnvelope(v181, v35);
  v140 = v195[3];
  v139 = v195[4];
  __swift_project_boxed_opaque_existential_1(v195, v140);
  v242[1] = (*(uint64_t (**)(uint64_t))(v139 + 16))(v140);
  v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  v142 = type metadata accessor for GKCrypto_RSVPResponse();
  v143 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v36 = lazy protocol witness table accessor for type [Data] and conformance [A]();
  v37 = v214;
  v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in CompleteGPKUpdateGroupRequest.init(groupID:nonce:serverUpdateBlobs:bundleID:newGroupVersion:signer:encryptor:unencryptedMetadata:), 0, v141, v142, v143, v36, MEMORY[0x24BEE3F20], (uint64_t)v242);
  v144 = v37;
  v145 = (void *)v38;
  if (v37)
  {
    v70 = v242[0];
    outlined destroy of [Data]();
    outlined destroy of GKCrypto_GroupBlob(v206);
    v71 = v70;
    goto LABEL_30;
  }
  v134._rawValue = v145;
  outlined destroy of [Data]();
  rawValue = v134._rawValue;
  v136 = v195[3];
  v135 = v195[4];
  __swift_project_boxed_opaque_existential_1(v195, v136);
  v137 = (*(uint64_t (**)(uint64_t))(v135 + 40))(v136);
  v138 = v39;
  if ((v39 & 0xF000000000000000) == 0xF000000000000000)
  {
    v40 = type metadata accessor for GKCrypto_SignedRSVP();
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v177, 1);
    outlined init with take of GKCrypto_SignedRSVP?(v177, v179);
    v131 = v144;
  }
  else
  {
    v132 = v137;
    v133 = v138;
    v125 = v138;
    v124 = v137;
    v217 = v137;
    v218 = v138;
    v123 = type metadata accessor for GKCrypto_SignedRSVP();
    outlined copy of Data._Representation(v124, v125);
    v126 = v216;
    memset(v216, 0, sizeof(v216));
    v128 = lazy protocol witness table accessor for type GKCrypto_SignedRSVP and conformance GKCrypto_SignedRSVP();
    v127 = default argument 2 of Message.init(serializedData:extensions:partial:options:)();
    default argument 3 of Message.init(serializedData:extensions:partial:options:)();
    v41 = v144;
    Message.init(serializedData:extensions:partial:options:)();
    v129 = v41;
    v130 = v41;
    if (v41)
    {
      v69 = v130;
      outlined consume of Data._Representation(v124, v125);
      swift_bridgeObjectRelease();
      outlined destroy of GKCrypto_GroupBlob(v206);
      v71 = v69;
      goto LABEL_30;
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)(v123 - 8) + 56))(v175, 0, 1);
    outlined init with take of GKCrypto_SignedRSVP?(v175, v179);
    outlined consume of Data._Representation(v124, v125);
    v131 = v129;
  }
  v120 = v131;
  v118 = v195[3];
  v117 = v195[4];
  __swift_project_boxed_opaque_existential_1(v195, v118);
  v240[0] = (*(uint64_t (**)(uint64_t))(v117 + 24))(v118);
  v240[1] = v42;
  v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  v43 = type metadata accessor for GKCrypto_SeedBlob();
  v44 = v120;
  v121 = v43;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))closure #2 in CompleteGPKUpdateGroupRequest.init(groupID:nonce:serverUpdateBlobs:bundleID:newGroupVersion:signer:encryptor:unencryptedMetadata:), 0, v119, v143, v43, (uint64_t)&v239, (uint64_t)v173);
  v122 = v44;
  if (v44)
  {
    v68 = v239;
    outlined destroy of Data?((uint64_t)v240);
    outlined destroy of GKCrypto_SignedRSVP?((uint64_t)v179);
    swift_bridgeObjectRelease();
    outlined destroy of GKCrypto_GroupBlob(v206);
    v71 = v68;
    goto LABEL_30;
  }
  outlined destroy of Data?((uint64_t)v240);
  v115 = v195[3];
  v114 = v195[4];
  __swift_project_boxed_opaque_existential_1(v195, v115);
  v45 = (*(uint64_t (**)(uint64_t))(v114 + 32))(v115);
  v46 = v122;
  v238[0] = v45;
  v238[1] = v47;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))closure #3 in CompleteGPKUpdateGroupRequest.init(groupID:nonce:serverUpdateBlobs:bundleID:newGroupVersion:signer:encryptor:unencryptedMetadata:), 0, v119, v143, v121, (uint64_t)&v237, (uint64_t)v171);
  v116 = v46;
  if (v46)
  {
    v67 = v237;
    outlined destroy of Data?((uint64_t)v238);
    outlined destroy of GKCrypto_SeedBlob?((uint64_t)v173);
    outlined destroy of GKCrypto_SignedRSVP?((uint64_t)v179);
    swift_bridgeObjectRelease();
    outlined destroy of GKCrypto_GroupBlob(v206);
    v71 = v67;
    goto LABEL_30;
  }
  outlined destroy of Data?((uint64_t)v238);
  v233 = 0;
  v234 = 0;
  v235 = 0;
  v236 = 0;
  swift_bridgeObjectRetain();
  if (v199)
  {
    v113 = v199;
    v108 = v199;
    v223 = v199;
    swift_bridgeObjectRetain();
    v110 = &v222;
    v222 = v108;
    v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GPKMetadata]);
    lazy protocol witness table accessor for type [GPKMetadata] and conformance [A]();
    v111 = Collection.isEmpty.getter();
    outlined destroy of [GPKMetadata]();
    if ((v111 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v112 = v116;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 16))(v162, v198, v157);
      result = outlined copy of Data._Representation(v201, v202);
      v221[0] = v201;
      v221[1] = v202;
      v107 = v191 - 1;
      if (!v191)
      {
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain();
      v103 = v220;
      outlined init with copy of GroupEncrypting(v193, (uint64_t)v220);
      v104 = v219;
      outlined init with copy of GroupSigning(v192, (uint64_t)v219);
      v49 = v116;
      CompleteUpdateMetaDataRequest.init(groupID:nonce:groupVersion:unencryptedMetadata:encryptor:signer:)(v162, (uint64_t)v221, v107, v108, v103, v104, v165);
      v105 = v49;
      v106 = v49;
      if (v49)
      {
        v66 = v106;
        swift_bridgeObjectRelease();
        outlined destroy of MetaDataServerBlob?(&v233);
        outlined destroy of GKCrypto_SeedBlob?((uint64_t)v171);
        outlined destroy of GKCrypto_SeedBlob?((uint64_t)v173);
        outlined destroy of GKCrypto_SignedRSVP?((uint64_t)v179);
        swift_bridgeObjectRelease();
        outlined destroy of GKCrypto_GroupBlob(v206);
        v71 = v66;
        goto LABEL_30;
      }
      outlined init with copy of CompleteUpdateMetaDataRequest.Body(v165 + *(int *)(v163 + 20), v156);
      v50 = (_QWORD *)(v156 + *(int *)(updated + 28));
      v99 = *(unsigned int *)v50;
      v100 = v50[1];
      v101 = v50[2];
      v102 = v50[3];
      swift_bridgeObjectRetain();
      outlined copy of Data?(v101, v102);
      outlined destroy of CompleteUpdateMetaDataRequest.Body(v156);
      v51 = v233;
      v52 = v234;
      v53 = v235;
      v54 = v236;
      v233 = v99;
      v234 = v100;
      v235 = v101;
      v236 = v102;
      outlined consume of MetaDataServerBlob?(v51, v52, v53, v54);
      outlined destroy of CompleteUpdateMetaDataRequest(v165);
      swift_bridgeObjectRelease();
      v112 = v105;
    }
  }
  else
  {
    v112 = v116;
  }
  v95 = v112;
  type metadata accessor for DictionaryEncoder();
  v88 = DictionaryEncoder.__allocating_init()();
  v232 = v88;
  (*(void (**)(char *, _QWORD, uint64_t))(v151 + 104))(v153, *MEMORY[0x24BDFC528], v150);
  dispatch thunk of DictionaryEncoder.dataEncodingStrategy.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 16))(v160, v198, v157);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v201, v202);
  v93 = v231;
  v231[0] = v201;
  v231[1] = v202;
  outlined init with copy of GroupBlobEnvelope((uint64_t)v200 + *(int *)(v196 + 20), v181);
  swift_bridgeObjectRetain();
  v94 = RSVPResponseBlobEnvelope.init(rsvpResponses:)(v134).rsvpResponses._rawValue;
  outlined init with copy of GKCrypto_SignedRSVP?(v179, v177);
  outlined init with copy of GKCrypto_SeedBlob?(v173, v169);
  outlined init with copy of GKCrypto_SeedBlob?(v171, v167);
  v89 = v233;
  v90 = v234;
  v91 = v235;
  v92 = v236;
  outlined copy of MetaDataServerBlob?(v233, v234, v235, v236);
  CompleteGPKUpdateGroupRequest.Body.init(groupId:bundleId:nonce:groupBlob:rsvpResponseBlob:signedUserRsvpBlob:memberSeedBlob:adminSeedBlob:groupMetadataBlob:)(v160, v189, v190, v93, v181, (uint64_t)v94, v177, v169, v149, v167, v89, v90, v91, v92);
  lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Body and conformance CompleteGPKUpdateGroupRequest.Body();
  v55 = v95;
  v56 = dispatch thunk of DictionaryEncoder.encode<A>(_:)();
  v96 = v55;
  v97 = v56;
  v98 = v55;
  if (!v55)
  {
    v87 = v97;
    swift_bridgeObjectRetain();
    v230 = v87;
    v82 = "rsvpResponseBlob";
    v84 = 16;
    v81 = 1;
    v57 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpResponseBlob", 0x10uLL, 1);
    countAndFlagsBits = v57._countAndFlagsBits;
    object = v57._object;
    v58 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v82, v84, v81 & 1);
    v86 = &v227;
    v227 = v58;
    MEMORY[0x24263485C](v228);
    outlined destroy of String();
    swift_bridgeObjectRelease();
    if (v228[3])
    {
      outlined init with take of Any((uint64_t)v228, (uint64_t)v229);
    }
    else
    {
      v78 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
      v79 = _allocateUninitializedArray<A>(_:)();
      v77 = v59;
      v60 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("rsvpResponses", 0xDuLL, 1);
      *v77 = v60;
      v76 = specialized _allocateUninitializedArray<A>(_:)();
      v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
      v62 = v76;
      v63 = v77;
      v77[2]._object = (void *)v61;
      v63[1]._countAndFlagsBits = v62;
      _finalizeUninitializedArray<A>(_:)();
      v80 = Dictionary.init(dictionaryLiteral:)();
      v229[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      v229[0] = v80;
      outlined destroy of Any?((uint64_t)v228);
    }
    v72 = v226;
    v226[0] = countAndFlagsBits;
    v226[1] = object;
    v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    v75 = &v230;
    Dictionary.subscript.setter();
    v74 = v230;
    swift_bridgeObjectRetain();
    v225 = v73;
    *(_QWORD *)&v224 = v74;
    outlined assign with take of Any?(&v224, (uint64_t)v200);
    outlined destroy of [String : Any]();
    outlined destroy of CompleteGPKUpdateGroupRequest.Body(v149);
    swift_release();
    outlined destroy of MetaDataServerBlob?(&v233);
    outlined destroy of GKCrypto_SeedBlob?((uint64_t)v171);
    outlined destroy of GKCrypto_SeedBlob?((uint64_t)v173);
    outlined destroy of GKCrypto_SignedRSVP?((uint64_t)v179);
    swift_bridgeObjectRelease();
    outlined destroy of GKCrypto_GroupBlob(v206);
    outlined init with copy of CompleteGPKUpdateGroupRequest((uint64_t)v200, v146);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v193);
    __swift_destroy_boxed_opaque_existential_1(v192);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v195);
    outlined consume of Data._Representation(v201, v202);
    (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v198, v157);
    return outlined destroy of CompleteGPKUpdateGroupRequest((uint64_t)v200);
  }
  v65 = v98;
  outlined destroy of CompleteGPKUpdateGroupRequest.Body(v149);
  swift_release();
  outlined destroy of MetaDataServerBlob?(&v233);
  outlined destroy of GKCrypto_SeedBlob?((uint64_t)v171);
  outlined destroy of GKCrypto_SeedBlob?((uint64_t)v173);
  outlined destroy of GKCrypto_SignedRSVP?((uint64_t)v179);
  swift_bridgeObjectRelease();
  outlined destroy of GKCrypto_GroupBlob(v206);
  v71 = v65;
LABEL_30:
  v64[1] = v71;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v193);
  __swift_destroy_boxed_opaque_existential_1(v192);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v195);
  outlined consume of Data._Representation(v201, v202);
  (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v198, v157);
  result = outlined destroy of Any?((uint64_t)v200);
  if ((v255 & 2) != 0)
    return outlined destroy of GroupBlobEnvelope((uint64_t)v200 + *(int *)(v196 + 20));
  return result;
}

uint64_t default argument 2 of Message.init(serializedData:extensions:partial:options:)()
{
  return 0;
}

uint64_t default argument 3 of Message.init(serializedData:extensions:partial:options:)()
{
  return BinaryDecodingOptions.init()();
}

uint64_t closure #1 in CompleteGPKUpdateGroupRequest.init(groupID:nonce:serverUpdateBlobs:bundleID:newGroupVersion:signer:encryptor:unencryptedMetadata:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  uint64_t v22;
  unint64_t v23;

  v11 = a3;
  v8 = a1;
  v7 = a2;
  v22 = 0;
  v23 = 0;
  v9 = 0;
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for BinaryDecodingOptions() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (char *)&v6 - v10;
  v12 = *v3;
  v13 = v3[1];
  v22 = v12;
  v23 = v13;
  type metadata accessor for GKCrypto_RSVPResponse();
  outlined copy of Data._Representation(v12, v13);
  v14 = v21;
  memset(v21, 0, sizeof(v21));
  v17 = lazy protocol witness table accessor for type GKCrypto_RSVPResponse and conformance GKCrypto_RSVPResponse();
  v15 = default argument 2 of Message.init(serializedData:extensions:partial:options:)();
  default argument 3 of Message.init(serializedData:extensions:partial:options:)();
  v4 = v18;
  result = Message.init(serializedData:extensions:partial:options:)();
  v19 = v4;
  v20 = v4;
  if (v4)
    *v7 = v20;
  return result;
}

uint64_t closure #2 in CompleteGPKUpdateGroupRequest.init(groupID:nonce:serverUpdateBlobs:bundleID:newGroupVersion:signer:encryptor:unencryptedMetadata:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  uint64_t v22;
  unint64_t v23;

  v11 = a3;
  v8 = a1;
  v7 = a2;
  v22 = 0;
  v23 = 0;
  v9 = 0;
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for BinaryDecodingOptions() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (char *)&v6 - v10;
  v12 = *v3;
  v13 = v3[1];
  v22 = v12;
  v23 = v13;
  type metadata accessor for GKCrypto_SeedBlob();
  outlined copy of Data._Representation(v12, v13);
  v14 = v21;
  memset(v21, 0, sizeof(v21));
  v17 = lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob();
  v15 = default argument 2 of Message.init(serializedData:extensions:partial:options:)();
  default argument 3 of Message.init(serializedData:extensions:partial:options:)();
  v4 = v18;
  result = Message.init(serializedData:extensions:partial:options:)();
  v19 = v4;
  v20 = v4;
  if (v4)
    *v7 = v20;
  return result;
}

uint64_t closure #3 in CompleteGPKUpdateGroupRequest.init(groupID:nonce:serverUpdateBlobs:bundleID:newGroupVersion:signer:encryptor:unencryptedMetadata:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  uint64_t v22;
  unint64_t v23;

  v11 = a3;
  v8 = a1;
  v7 = a2;
  v22 = 0;
  v23 = 0;
  v9 = 0;
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for BinaryDecodingOptions() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v16 = (char *)&v6 - v10;
  v12 = *v3;
  v13 = v3[1];
  v22 = v12;
  v23 = v13;
  type metadata accessor for GKCrypto_SeedBlob();
  outlined copy of Data._Representation(v12, v13);
  v14 = v21;
  memset(v21, 0, sizeof(v21));
  v17 = lazy protocol witness table accessor for type GKCrypto_SeedBlob and conformance GKCrypto_SeedBlob();
  v15 = default argument 2 of Message.init(serializedData:extensions:partial:options:)();
  default argument 3 of Message.init(serializedData:extensions:partial:options:)();
  v4 = v18;
  result = Message.init(serializedData:extensions:partial:options:)();
  v19 = v4;
  v20 = v4;
  if (v4)
    *v7 = v20;
  return result;
}

unint64_t lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Body and conformance CompleteGPKUpdateGroupRequest.Body()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body and conformance CompleteGPKUpdateGroupRequest.Body;
  if (!lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body and conformance CompleteGPKUpdateGroupRequest.Body)
  {
    v0 = type metadata accessor for CompleteGPKUpdateGroupRequest.Body();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKUpdateGroupRequest.Body, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Body and conformance CompleteGPKUpdateGroupRequest.Body);
    return v1;
  }
  return v3;
}

uint64_t outlined init with copy of CompleteGPKUpdateGroupRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  int *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  v3 = type metadata accessor for CompleteGPKUpdateGroupRequest();
  v40 = a2 + *(int *)(v3 + 20);
  v42 = a1 + *(int *)(v3 + 20);
  *(_DWORD *)v40 = *(_DWORD *)v42;
  v32 = *(_QWORD *)(v42 + 8);
  v33 = *(_QWORD *)(v42 + 16);
  outlined copy of Data._Representation(v32, v33);
  *(_QWORD *)(v40 + 8) = v32;
  *(_QWORD *)(v40 + 16) = v33;
  v34 = *(_QWORD *)(v42 + 24);
  v35 = *(_QWORD *)(v42 + 32);
  outlined copy of Data._Representation(v34, v35);
  *(_QWORD *)(v40 + 24) = v34;
  *(_QWORD *)(v40 + 32) = v35;
  v41 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v37 = v40 + v41[7];
  v36 = v42 + v41[7];
  v38 = type metadata accessor for UnknownStorage();
  v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
  ((void (*)(uint64_t, uint64_t))v39)(v37, v36);
  v43 = (_QWORD *)(v40 + v41[8]);
  v44 = (uint64_t *)(v42 + v41[8]);
  v45 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v46 + 48))(v44, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    v31 = *v44;
    swift_bridgeObjectRetain();
    *v43 = v31;
    v39((char *)v43 + *(int *)(v45 + 20), (char *)v44 + *(int *)(v45 + 20), v38);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  __dst = (_QWORD *)(v40 + v41[9]);
  __src = (uint64_t *)(v42 + v41[9]);
  v29 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v30 + 48))(__src, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v19 = *__src;
    v20 = __src[1];
    outlined copy of Data._Representation(*__src, v20);
    *__dst = v19;
    __dst[1] = v20;
    v21 = __src[2];
    v22 = __src[3];
    outlined copy of Data._Representation(v21, v22);
    __dst[2] = v21;
    __dst[3] = v22;
    v23 = __src[4];
    v24 = __src[5];
    outlined copy of Data._Representation(v23, v24);
    __dst[4] = v23;
    __dst[5] = v24;
    v25 = __src[6];
    v26 = __src[7];
    outlined copy of Data._Representation(v25, v26);
    __dst[6] = v25;
    __dst[7] = v26;
    v39((char *)__dst + *(int *)(v29 + 32), (char *)__src + *(int *)(v29 + 32), v38);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
  }
  v15 = (_QWORD *)(v40 + v41[10]);
  v16 = (uint64_t *)(v42 + v41[10]);
  v17 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v18 + 48))(v16, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v9 = *v16;
    v10 = v16[1];
    outlined copy of Data._Representation(*v16, v10);
    *v15 = v9;
    v15[1] = v10;
    v11 = v16[2];
    v12 = v16[3];
    outlined copy of Data._Representation(v11, v12);
    v15[2] = v11;
    v15[3] = v12;
    v13 = v16[4];
    v14 = v16[5];
    outlined copy of Data._Representation(v13, v14);
    v15[4] = v13;
    v15[5] = v14;
    v39((char *)v15 + *(int *)(v17 + 28), (char *)v16 + *(int *)(v17 + 28), v38);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v7 = type metadata accessor for GroupBlobEnvelope();
  result = a2;
  *(_DWORD *)(v40 + *(int *)(v7 + 20)) = *(_DWORD *)(v42 + *(int *)(v7 + 20));
  return result;
}

uint64_t outlined destroy of CompleteGPKUpdateGroupRequest(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  v10 = a1 + *(int *)(type metadata accessor for CompleteGPKUpdateGroupRequest() + 20);
  outlined consume of Data._Representation(*(_QWORD *)(v10 + 8), *(_QWORD *)(v10 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32));
  v9 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v6 = v10 + v9[7];
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6);
  v11 = v10 + v9[8];
  v12 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1))
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v8)(v11 + *(int *)(v12 + 20), v7);
  }
  v4 = v10 + v9[9];
  v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56));
    ((void (*)(uint64_t, uint64_t))v8)(v4 + *(int *)(v5 + 32), v7);
  }
  v2 = v10 + v9[10];
  v3 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
    ((void (*)(uint64_t, uint64_t))v8)(v2 + *(int *)(v3 + 28), v7);
  }
  return a1;
}

uint64_t outlined init with copy of GroupEncrypting(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t outlined init with copy of GroupSigning(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t outlined consume of MetaDataServerBlob?(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return outlined consume of Data?(a3, a4);
  }
  return result;
}

uint64_t CompleteGPKUpdateGroupRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.completeUpdateGroup.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in CompleteGPKUpdateGroupRequest()
{
  return lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Response and conformance CompleteGPKUpdateGroupRequest.Response();
}

unint64_t lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Response and conformance CompleteGPKUpdateGroupRequest.Response()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response and conformance CompleteGPKUpdateGroupRequest.Response;
  if (!lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response and conformance CompleteGPKUpdateGroupRequest.Response)
  {
    v0 = type metadata accessor for CompleteGPKUpdateGroupRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for CompleteGPKUpdateGroupRequest.Response, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CompleteGPKUpdateGroupRequest.Response and conformance CompleteGPKUpdateGroupRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance CompleteGPKUpdateGroupRequest()
{
  return CompleteGPKUpdateGroupRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance CompleteGPKUpdateGroupRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance CompleteGPKUpdateGroupRequest@<X0>(uint64_t a1@<X8>)
{
  return CompleteGPKUpdateGroupRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance CompleteGPKUpdateGroupRequest()
{
  return NetworkRequest.contentType.getter();
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteGPKUpdateGroupRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  _QWORD *v41;
  int *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v53;

  v53 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v53 & 0x20000) != 0)
  {
    v48 = *a2;
    swift_retain();
    *(_QWORD *)a1 = v48;
    return *(_QWORD *)a1 + ((v53 + 16) & ~(unint64_t)v53);
  }
  else
  {
    if (a2[3])
    {
      v3 = a2[3];
      *(_QWORD *)(a1 + 24) = v3;
      (**(void (***)(void))(v3 - 8))();
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    }
    v4 = *(int *)(a3 + 20);
    v41 = (_QWORD *)(a1 + v4);
    v43 = (uint64_t)a2 + v4;
    *(_DWORD *)(a1 + v4) = *(_DWORD *)((char *)a2 + v4);
    v33 = *(uint64_t *)((char *)a2 + v4 + 8);
    v34 = *(uint64_t *)((char *)a2 + v4 + 16);
    outlined copy of Data._Representation(v33, v34);
    v41[1] = v33;
    v41[2] = v34;
    v35 = *(_QWORD *)(v43 + 24);
    v36 = *(_QWORD *)(v43 + 32);
    outlined copy of Data._Representation(v35, v36);
    v41[3] = v35;
    v41[4] = v36;
    v42 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v38 = (char *)v41 + v42[7];
    v37 = v43 + v42[7];
    v39 = type metadata accessor for UnknownStorage();
    v40 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
    v40(v38, v37);
    v44 = (_QWORD *)((char *)v41 + v42[8]);
    v45 = (uint64_t *)(v43 + v42[8]);
    v46 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v47 + 48))(v45, 1))
    {
      v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      v32 = *v45;
      swift_bridgeObjectRetain();
      *v44 = v32;
      ((void (*)(char *, char *, uint64_t))v40)((char *)v44 + *(int *)(v46 + 20), (char *)v45 + *(int *)(v46 + 20), v39);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
    }
    __dst = (_QWORD *)((char *)v41 + v42[9]);
    __src = (uint64_t *)(v43 + v42[9]);
    v30 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v31 + 48))(__src, 1))
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v20 = *__src;
      v21 = __src[1];
      outlined copy of Data._Representation(*__src, v21);
      *__dst = v20;
      __dst[1] = v21;
      v22 = __src[2];
      v23 = __src[3];
      outlined copy of Data._Representation(v22, v23);
      __dst[2] = v22;
      __dst[3] = v23;
      v24 = __src[4];
      v25 = __src[5];
      outlined copy of Data._Representation(v24, v25);
      __dst[4] = v24;
      __dst[5] = v25;
      v26 = __src[6];
      v27 = __src[7];
      outlined copy of Data._Representation(v26, v27);
      __dst[6] = v26;
      __dst[7] = v27;
      ((void (*)(char *, char *, uint64_t))v40)((char *)__dst + *(int *)(v30 + 32), (char *)__src + *(int *)(v30 + 32), v39);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
    }
    v16 = (_QWORD *)((char *)v41 + v42[10]);
    v17 = (uint64_t *)(v43 + v42[10]);
    v18 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v19 + 48))(v17, 1))
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v10 = *v17;
      v11 = v17[1];
      outlined copy of Data._Representation(*v17, v11);
      *v16 = v10;
      v16[1] = v11;
      v12 = v17[2];
      v13 = v17[3];
      outlined copy of Data._Representation(v12, v13);
      v16[2] = v12;
      v16[3] = v13;
      v14 = v17[4];
      v15 = v17[5];
      outlined copy of Data._Representation(v14, v15);
      v16[4] = v14;
      v16[5] = v15;
      ((void (*)(char *, char *, uint64_t))v40)((char *)v16 + *(int *)(v18 + 28), (char *)v17 + *(int *)(v18 + 28), v39);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v8 = type metadata accessor for GroupBlobEnvelope();
    *(_DWORD *)((char *)v41 + *(int *)(v8 + 20)) = *(_DWORD *)(v43 + *(int *)(v8 + 20));
    return a1;
  }
}

uint64_t destroy for CompleteGPKUpdateGroupRequest(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  v11 = a1 + *(int *)(a2 + 20);
  outlined consume of Data._Representation(*(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(v11 + 24), *(_QWORD *)(v11 + 32));
  v10 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v7 = v11 + v10[7];
  v8 = type metadata accessor for UnknownStorage();
  v9 = *(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7);
  v12 = v11 + v10[8];
  v13 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1))
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v9)(v12 + *(int *)(v13 + 20), v8);
  }
  v5 = v11 + v10[9];
  v6 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 56));
    ((void (*)(uint64_t, uint64_t))v9)(v5 + *(int *)(v6 + 32), v8);
  }
  v3 = v11 + v10[10];
  v4 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1);
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v3 + *(int *)(v4 + 28), v8);
  }
  return result;
}

uint64_t initializeWithCopy for CompleteGPKUpdateGroupRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  _QWORD *v41;
  int *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;

  if (*(_QWORD *)(a2 + 24))
  {
    v3 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    (**(void (***)(void))(v3 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v4 = *(int *)(a3 + 20);
  v41 = (_QWORD *)(a1 + v4);
  v43 = a2 + v4;
  *(_DWORD *)(a1 + v4) = *(_DWORD *)(a2 + v4);
  v33 = *(_QWORD *)(a2 + v4 + 8);
  v34 = *(_QWORD *)(a2 + v4 + 16);
  outlined copy of Data._Representation(v33, v34);
  v41[1] = v33;
  v41[2] = v34;
  v35 = *(_QWORD *)(v43 + 24);
  v36 = *(_QWORD *)(v43 + 32);
  outlined copy of Data._Representation(v35, v36);
  v41[3] = v35;
  v41[4] = v36;
  v42 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v38 = (char *)v41 + v42[7];
  v37 = v43 + v42[7];
  v39 = type metadata accessor for UnknownStorage();
  v40 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
  v40(v38, v37);
  v44 = (_QWORD *)((char *)v41 + v42[8]);
  v45 = (uint64_t *)(v43 + v42[8]);
  v46 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v47 + 48))(v45, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v32 = *v45;
    swift_bridgeObjectRetain();
    *v44 = v32;
    ((void (*)(char *, char *, uint64_t))v40)((char *)v44 + *(int *)(v46 + 20), (char *)v45 + *(int *)(v46 + 20), v39);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  __dst = (_QWORD *)((char *)v41 + v42[9]);
  __src = (uint64_t *)(v43 + v42[9]);
  v30 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v31 + 48))(__src, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v20 = *__src;
    v21 = __src[1];
    outlined copy of Data._Representation(*__src, v21);
    *__dst = v20;
    __dst[1] = v21;
    v22 = __src[2];
    v23 = __src[3];
    outlined copy of Data._Representation(v22, v23);
    __dst[2] = v22;
    __dst[3] = v23;
    v24 = __src[4];
    v25 = __src[5];
    outlined copy of Data._Representation(v24, v25);
    __dst[4] = v24;
    __dst[5] = v25;
    v26 = __src[6];
    v27 = __src[7];
    outlined copy of Data._Representation(v26, v27);
    __dst[6] = v26;
    __dst[7] = v27;
    ((void (*)(char *, char *, uint64_t))v40)((char *)__dst + *(int *)(v30 + 32), (char *)__src + *(int *)(v30 + 32), v39);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
  }
  v16 = (_QWORD *)((char *)v41 + v42[10]);
  v17 = (uint64_t *)(v43 + v42[10]);
  v18 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v19 + 48))(v17, 1))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v10 = *v17;
    v11 = v17[1];
    outlined copy of Data._Representation(*v17, v11);
    *v16 = v10;
    v16[1] = v11;
    v12 = v17[2];
    v13 = v17[3];
    outlined copy of Data._Representation(v12, v13);
    v16[2] = v12;
    v16[3] = v13;
    v14 = v17[4];
    v15 = v17[5];
    outlined copy of Data._Representation(v14, v15);
    v16[4] = v14;
    v16[5] = v15;
    ((void (*)(char *, char *, uint64_t))v40)((char *)v16 + *(int *)(v18 + 28), (char *)v17 + *(int *)(v18 + 28), v39);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v8 = type metadata accessor for GroupBlobEnvelope();
  result = a1;
  *(_DWORD *)((char *)v41 + *(int *)(v8 + 20)) = *(_DWORD *)(v43 + *(int *)(v8 + 20));
  return result;
}

uint64_t assignWithCopy for CompleteGPKUpdateGroupRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *__src;
  _QWORD *__dst;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t *, uint64_t, uint64_t);
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  _QWORD *v80;
  int *v81;
  uint64_t v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t *, uint64_t, uint64_t);

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v3 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    (**(void (***)(void))(v3 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v4 = *(int *)(a3 + 20);
  v80 = (_QWORD *)(a1 + v4);
  v82 = a2 + v4;
  *(_DWORD *)(a1 + v4) = *(_DWORD *)(a2 + v4);
  v71 = *(_QWORD *)(a2 + v4 + 8);
  v72 = *(_QWORD *)(a2 + v4 + 16);
  outlined copy of Data._Representation(v71, v72);
  v5 = v80[1];
  v6 = v80[2];
  v80[1] = v71;
  v80[2] = v72;
  outlined consume of Data._Representation(v5, v6);
  v73 = *(_QWORD *)(v82 + 24);
  v74 = *(_QWORD *)(v82 + 32);
  outlined copy of Data._Representation(v73, v74);
  v7 = v80[3];
  v8 = v80[4];
  v80[3] = v73;
  v80[4] = v74;
  outlined consume of Data._Representation(v7, v8);
  v81 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v76 = (char *)v80 + v81[7];
  v75 = v82 + v81[7];
  v77 = type metadata accessor for UnknownStorage();
  v78 = *(_QWORD *)(v77 - 8);
  v79 = *(void (**)(char *, uint64_t))(v78 + 24);
  v79(v76, v75);
  v84 = (_QWORD *)((char *)v80 + v81[8]);
  v83 = (uint64_t *)(v82 + v81[8]);
  v85 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v86 = *(_QWORD *)(v85 - 8);
  v87 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v86 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v87)(v84, 1))
  {
    if (v87(v83, 1, v85))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v84, v83, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v69 = *v83;
      swift_bridgeObjectRetain();
      *v84 = v69;
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))((char *)v84 + *(int *)(v85 + 20), (char *)v83 + *(int *)(v85 + 20), v77);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v84, 0, 1, v85);
    }
  }
  else if (v87(v83, 1, v85))
  {
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v84);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(v84, v83, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v70 = *v83;
    swift_bridgeObjectRetain();
    *v84 = v70;
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v79)((char *)v84 + *(int *)(v85 + 20), (char *)v83 + *(int *)(v85 + 20), v77);
  }
  v65 = (_QWORD *)((char *)v80 + v81[9]);
  v64 = (uint64_t *)(v82 + v81[9]);
  v66 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v67 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v68)(v65, 1))
  {
    if (v68(v64, 1, v66))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(v65, v64, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v48 = *v64;
      v49 = v64[1];
      outlined copy of Data._Representation(*v64, v49);
      *v65 = v48;
      v65[1] = v49;
      v50 = v64[2];
      v51 = v64[3];
      outlined copy of Data._Representation(v50, v51);
      v65[2] = v50;
      v65[3] = v51;
      v52 = v64[4];
      v53 = v64[5];
      outlined copy of Data._Representation(v52, v53);
      v65[4] = v52;
      v65[5] = v53;
      v54 = v64[6];
      v55 = v64[7];
      outlined copy of Data._Representation(v54, v55);
      v65[6] = v54;
      v65[7] = v55;
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))((char *)v65 + *(int *)(v66 + 32), (char *)v64 + *(int *)(v66 + 32), v77);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v65, 0, 1, v66);
    }
  }
  else if (v68(v64, 1, v66))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v65);
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(v65, v64, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v56 = *v64;
    v57 = v64[1];
    outlined copy of Data._Representation(*v64, v57);
    v11 = *v65;
    v12 = v65[1];
    *v65 = v56;
    v65[1] = v57;
    outlined consume of Data._Representation(v11, v12);
    v58 = v64[2];
    v59 = v64[3];
    outlined copy of Data._Representation(v58, v59);
    v13 = v65[2];
    v14 = v65[3];
    v65[2] = v58;
    v65[3] = v59;
    outlined consume of Data._Representation(v13, v14);
    v60 = v64[4];
    v61 = v64[5];
    outlined copy of Data._Representation(v60, v61);
    v15 = v65[4];
    v16 = v65[5];
    v65[4] = v60;
    v65[5] = v61;
    outlined consume of Data._Representation(v15, v16);
    v62 = v64[6];
    v63 = v64[7];
    outlined copy of Data._Representation(v62, v63);
    v17 = v65[6];
    v18 = v65[7];
    v65[6] = v62;
    v65[7] = v63;
    outlined consume of Data._Representation(v17, v18);
    ((void (*)(char *, char *, uint64_t))v79)((char *)v65 + *(int *)(v66 + 32), (char *)v64 + *(int *)(v66 + 32), v77);
  }
  __dst = (_QWORD *)((char *)v80 + v81[10]);
  __src = (uint64_t *)(v82 + v81[10]);
  v45 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v46 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v47)(__dst, 1))
  {
    if (v47(__src, 1, v45))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v31 = *__src;
      v32 = __src[1];
      outlined copy of Data._Representation(*__src, v32);
      *__dst = v31;
      __dst[1] = v32;
      v33 = __src[2];
      v34 = __src[3];
      outlined copy of Data._Representation(v33, v34);
      __dst[2] = v33;
      __dst[3] = v34;
      v35 = __src[4];
      v36 = __src[5];
      outlined copy of Data._Representation(v35, v36);
      __dst[4] = v35;
      __dst[5] = v36;
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))((char *)__dst + *(int *)(v45 + 28), (char *)__src + *(int *)(v45 + 28), v77);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v45);
    }
  }
  else if (v47(__src, 1, v45))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)__dst);
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v37 = *__src;
    v38 = __src[1];
    outlined copy of Data._Representation(*__src, v38);
    v21 = *__dst;
    v22 = __dst[1];
    *__dst = v37;
    __dst[1] = v38;
    outlined consume of Data._Representation(v21, v22);
    v39 = __src[2];
    v40 = __src[3];
    outlined copy of Data._Representation(v39, v40);
    v23 = __dst[2];
    v24 = __dst[3];
    __dst[2] = v39;
    __dst[3] = v40;
    outlined consume of Data._Representation(v23, v24);
    v41 = __src[4];
    v42 = __src[5];
    outlined copy of Data._Representation(v41, v42);
    v25 = __dst[4];
    v26 = __dst[5];
    __dst[4] = v41;
    __dst[5] = v42;
    outlined consume of Data._Representation(v25, v26);
    ((void (*)(char *, char *, uint64_t))v79)((char *)__dst + *(int *)(v45 + 28), (char *)__src + *(int *)(v45 + 28), v77);
  }
  v29 = type metadata accessor for GroupBlobEnvelope();
  result = a1;
  *(_DWORD *)((char *)v80 + *(int *)(v29 + 20)) = *(_DWORD *)(v82 + *(int *)(v29 + 20));
  return result;
}

_OWORD *initializeWithTake for CompleteGPKUpdateGroupRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *result;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *__dst;
  char *__src;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *);
  char *v21;
  int *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = *(int *)(a3 + 20);
  v21 = (char *)a1 + v3;
  v23 = (char *)a2 + v3;
  *(_DWORD *)v21 = *(_DWORD *)((char *)a2 + v3);
  *(_OWORD *)(v21 + 8) = *(_OWORD *)((char *)a2 + v3 + 8);
  *(_OWORD *)(v21 + 24) = *(_OWORD *)((char *)a2 + v3 + 24);
  v22 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v18 = &v21[v22[7]];
  v17 = &v23[v22[7]];
  v19 = type metadata accessor for UnknownStorage();
  v20 = *(void (**)(char *, char *))(*(_QWORD *)(v19 - 8) + 32);
  v20(v18, v17);
  v24 = &v21[v22[8]];
  v25 = &v23[v22[8]];
  v26 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v27 + 48))(v25, 1))
  {
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v24 = *(_QWORD *)v25;
    ((void (*)(char *, char *, uint64_t))v20)(&v24[*(int *)(v26 + 20)], &v25[*(int *)(v26 + 20)], v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  __dst = &v21[v22[9]];
  __src = &v23[v22[9]];
  v15 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v16 + 48))(__src, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)__src;
    *((_OWORD *)__dst + 1) = *((_OWORD *)__src + 1);
    *((_OWORD *)__dst + 2) = *((_OWORD *)__src + 2);
    *((_OWORD *)__dst + 3) = *((_OWORD *)__src + 3);
    ((void (*)(char *, char *, uint64_t))v20)(&__dst[*(int *)(v15 + 32)], &__src[*(int *)(v15 + 32)], v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v9 = &v21[v22[10]];
  v10 = &v23[v22[10]];
  v11 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v12 + 48))(v10, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    ((void (*)(char *, char *, uint64_t))v20)(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v7 = type metadata accessor for GroupBlobEnvelope();
  result = a1;
  *(_DWORD *)&v21[*(int *)(v7 + 20)] = *(_DWORD *)&v23[*(int *)(v7 + 20)];
  return result;
}

uint64_t assignWithTake for CompleteGPKUpdateGroupRequest(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  char *v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  char *__src;
  _OWORD *__dst;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *);
  uint64_t v54;
  int *v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int (*v61)(char *, uint64_t, uint64_t);

  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  v3 = *(int *)(a3 + 20);
  v54 = a1 + v3;
  v56 = (char *)a2 + v3;
  *(_DWORD *)v54 = *(_DWORD *)((char *)a2 + v3);
  v4 = *(_QWORD *)((char *)a2 + v3 + 16);
  v5 = *(_QWORD *)(a1 + v3 + 8);
  v6 = *(_QWORD *)(a1 + v3 + 16);
  *(_QWORD *)(v54 + 8) = *(_QWORD *)((char *)a2 + v3 + 8);
  *(_QWORD *)(v54 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  v7 = *((_QWORD *)v56 + 4);
  v8 = *(_QWORD *)(v54 + 24);
  v9 = *(_QWORD *)(v54 + 32);
  *(_QWORD *)(v54 + 24) = *((_QWORD *)v56 + 3);
  *(_QWORD *)(v54 + 32) = v7;
  outlined consume of Data._Representation(v8, v9);
  v55 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v50 = v54 + v55[7];
  v49 = &v56[v55[7]];
  v51 = type metadata accessor for UnknownStorage();
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(void (**)(uint64_t, char *))(v52 + 40);
  v53(v50, v49);
  v58 = (_QWORD *)(v54 + v55[8]);
  v57 = &v56[v55[8]];
  v59 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v61)(v58, 1))
  {
    if (v61(v57, 1, v59))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v58, v57, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      *v58 = *(_QWORD *)v57;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))((char *)v58 + *(int *)(v59 + 20), &v57[*(int *)(v59 + 20)], v51);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v58, 0, 1, v59);
    }
  }
  else if (v61(v57, 1, v59))
  {
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v58);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(v58, v57, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    *v58 = *(_QWORD *)v57;
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v53)((char *)v58 + *(int *)(v59 + 20), &v57[*(int *)(v59 + 20)], v51);
  }
  __dst = (_OWORD *)(v54 + v55[9]);
  __src = &v56[v55[9]];
  v46 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v48)(__dst, 1))
  {
    if (v48(__src, 1, v46))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *__dst = *(_OWORD *)__src;
      __dst[1] = *((_OWORD *)__src + 1);
      __dst[2] = *((_OWORD *)__src + 2);
      __dst[3] = *((_OWORD *)__src + 3);
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))((char *)__dst + *(int *)(v46 + 32), &__src[*(int *)(v46 + 32)], v51);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v46);
    }
  }
  else if (v48(__src, 1, v46))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)__dst);
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v12 = *((_QWORD *)__src + 1);
    v13 = *(_QWORD *)__dst;
    v14 = *((_QWORD *)__dst + 1);
    *(_QWORD *)__dst = *(_QWORD *)__src;
    *((_QWORD *)__dst + 1) = v12;
    outlined consume of Data._Representation(v13, v14);
    v15 = *((_QWORD *)__src + 3);
    v16 = *((_QWORD *)__dst + 2);
    v17 = *((_QWORD *)__dst + 3);
    *((_QWORD *)__dst + 2) = *((_QWORD *)__src + 2);
    *((_QWORD *)__dst + 3) = v15;
    outlined consume of Data._Representation(v16, v17);
    v18 = *((_QWORD *)__src + 5);
    v19 = *((_QWORD *)__dst + 4);
    v20 = *((_QWORD *)__dst + 5);
    *((_QWORD *)__dst + 4) = *((_QWORD *)__src + 4);
    *((_QWORD *)__dst + 5) = v18;
    outlined consume of Data._Representation(v19, v20);
    v21 = *((_QWORD *)__src + 7);
    v22 = *((_QWORD *)__dst + 6);
    v23 = *((_QWORD *)__dst + 7);
    *((_QWORD *)__dst + 6) = *((_QWORD *)__src + 6);
    *((_QWORD *)__dst + 7) = v21;
    outlined consume of Data._Representation(v22, v23);
    ((void (*)(char *, char *, uint64_t))v53)((char *)__dst + *(int *)(v46 + 32), &__src[*(int *)(v46 + 32)], v51);
  }
  v40 = (_OWORD *)(v54 + v55[10]);
  v39 = &v56[v55[10]];
  v41 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v43)(v40, 1))
  {
    if (v43(v39, 1, v41))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v40, v39, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      *v40 = *(_OWORD *)v39;
      v40[1] = *((_OWORD *)v39 + 1);
      v40[2] = *((_OWORD *)v39 + 2);
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))((char *)v40 + *(int *)(v41 + 28), &v39[*(int *)(v41 + 28)], v51);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v40, 0, 1, v41);
    }
  }
  else if (v43(v39, 1, v41))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v40);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v40, v39, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v26 = *((_QWORD *)v39 + 1);
    v27 = *(_QWORD *)v40;
    v28 = *((_QWORD *)v40 + 1);
    *(_QWORD *)v40 = *(_QWORD *)v39;
    *((_QWORD *)v40 + 1) = v26;
    outlined consume of Data._Representation(v27, v28);
    v29 = *((_QWORD *)v39 + 3);
    v30 = *((_QWORD *)v40 + 2);
    v31 = *((_QWORD *)v40 + 3);
    *((_QWORD *)v40 + 2) = *((_QWORD *)v39 + 2);
    *((_QWORD *)v40 + 3) = v29;
    outlined consume of Data._Representation(v30, v31);
    v32 = *((_QWORD *)v39 + 5);
    v33 = *((_QWORD *)v40 + 4);
    v34 = *((_QWORD *)v40 + 5);
    *((_QWORD *)v40 + 4) = *((_QWORD *)v39 + 4);
    *((_QWORD *)v40 + 5) = v32;
    outlined consume of Data._Representation(v33, v34);
    ((void (*)(char *, char *, uint64_t))v53)((char *)v40 + *(int *)(v41 + 28), &v39[*(int *)(v41 + 28)], v51);
  }
  v37 = type metadata accessor for GroupBlobEnvelope();
  result = a1;
  *(_DWORD *)(v54 + *(int *)(v37 + 20)) = *(_DWORD *)&v56[*(int *)(v37 + 20)];
  return result;
}

uint64_t getEnumTagSinglePayload for CompleteGPKUpdateGroupRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5154F8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;

  if (a2 == 2147483646)
  {
    v8 = -1;
    if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
      v8 = *(_QWORD *)(a1 + 24);
    v3 = v8 - 1;
    if (v8 - 1 < 0)
      v3 = -1;
    return (v3 + 1);
  }
  else
  {
    v5 = type metadata accessor for GroupBlobEnvelope();
    v6 = *(_QWORD *)(v5 - 8);
    if (a2 == *(_DWORD *)(v6 + 84))
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v6 + 48))(a1 + *(int *)(a3 + 20), a2, v5);
    else
      __break(1u);
  }
  return v7;
}

uint64_t storeEnumTagSinglePayload for CompleteGPKUpdateGroupRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D515608(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 24) = a2;
  }
  else
  {
    result = type metadata accessor for GroupBlobEnvelope();
    v4 = *(_QWORD *)(result - 8);
    if (a3 == *(_DWORD *)(v4 + 84))
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 56))(v5 + *(int *)(a4 + 20), a2, a2, result);
    else
      __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for CompleteGPKUpdateGroupRequest()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GroupBlobEnvelope();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t initializeBufferWithCopyOfBuffer for CompleteGPKUpdateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (**(uint64_t (***)(uint64_t, uint64_t))(v2 - 8))(a1, a2);
}

uint64_t destroy for CompleteGPKUpdateGroupRequest.Response(uint64_t a1)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
}

uint64_t initializeWithCopy for CompleteGPKUpdateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, a2);
  return a1;
}

uint64_t assignWithCopy for CompleteGPKUpdateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 24))(a1, a2);
  return a1;
}

uint64_t initializeWithTake for CompleteGPKUpdateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, a2);
  return a1;
}

uint64_t assignWithTake for CompleteGPKUpdateGroupRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 40))(a1, a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteGPKUpdateGroupRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D515918(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for CompleteGPKUpdateGroupRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D515974(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

uint64_t type metadata completion function for CompleteGPKUpdateGroupRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for CompleteGPKUpdateGroupRequest.Response.CodingKeys(unsigned __int8 *a1, int a2)
{
  int v2;
  int v4;
  int v5;
  int v6;

  if (a2)
  {
    v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v6 = v2;
    }
    if (v6 == 1)
    {
      v5 = *a1;
    }
    else if (v6 == 2)
    {
      v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      v5 = *(_DWORD *)a1;
    }
    if (v5)
      v4 = v5 - 1;
    else
      v4 = -1;
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteGPKUpdateGroupRequest.Response.CodingKeys(_BYTE *result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v5 = 0;
  if (a3)
  {
    v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v4 = v3;
    }
    v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)result = a2;
      }
      else
      {
        *(_DWORD *)result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  return &type metadata for CompleteGPKUpdateGroupRequest.Response.CodingKeys;
}

unint64_t initializeBufferWithCopyOfBuffer for CompleteGPKUpdateGroupRequest.Body(_QWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(void);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *__dst;
  char *__src;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *);
  _QWORD *v94;
  int *v95;
  char *v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v106;

  v106 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v106 & 0x20000) != 0)
  {
    v101 = *a2;
    swift_retain();
    *a1 = v101;
    return *a1 + ((v106 + 16) & ~(unint64_t)v106);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v4 = a3[5];
    v81 = (char *)a1 + v4;
    *(_QWORD *)((char *)a1 + v4) = *(uint64_t *)((char *)a2 + v4);
    v82 = *(uint64_t *)((char *)a2 + v4 + 8);
    swift_bridgeObjectRetain();
    *((_QWORD *)v81 + 1) = v82;
    v84 = (_QWORD *)((char *)a1 + a3[6]);
    v5 = (uint64_t *)((char *)a2 + a3[6]);
    v83 = *v5;
    v85 = v5[1];
    outlined copy of Data._Representation(*v5, v85);
    *v84 = v83;
    v84[1] = v85;
    v6 = a3[7];
    v94 = (_QWORD *)((char *)a1 + v6);
    v96 = (char *)a2 + v6;
    *(_DWORD *)((char *)a1 + v6) = *(_DWORD *)((char *)a2 + v6);
    v86 = *(uint64_t *)((char *)a2 + v6 + 8);
    v87 = *(uint64_t *)((char *)a2 + v6 + 16);
    outlined copy of Data._Representation(v86, v87);
    v94[1] = v86;
    v94[2] = v87;
    v88 = *((_QWORD *)v96 + 3);
    v89 = *((_QWORD *)v96 + 4);
    outlined copy of Data._Representation(v88, v89);
    v94[3] = v88;
    v94[4] = v89;
    v95 = (int *)type metadata accessor for GKCrypto_GroupBlob();
    v91 = (char *)v94 + v95[7];
    v90 = &v96[v95[7]];
    v92 = type metadata accessor for UnknownStorage();
    v93 = *(void (**)(char *, char *))(*(_QWORD *)(v92 - 8) + 16);
    v93(v91, v90);
    v97 = (_QWORD *)((char *)v94 + v95[8]);
    v98 = &v96[v95[8]];
    v99 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
    v100 = *(_QWORD *)(v99 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v100 + 48))(v98, 1))
    {
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v80 = *(_QWORD *)v98;
      swift_bridgeObjectRetain();
      *v97 = v80;
      ((void (*)(char *, char *, uint64_t))v93)((char *)v97 + *(int *)(v99 + 20), &v98[*(int *)(v99 + 20)], v92);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
    }
    __dst = (_QWORD *)((char *)v94 + v95[9]);
    __src = &v96[v95[9]];
    v78 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
    v79 = *(_QWORD *)(v78 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v79 + 48))(__src, 1))
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v68 = *(_QWORD *)__src;
      v69 = *((_QWORD *)__src + 1);
      outlined copy of Data._Representation(*(_QWORD *)__src, v69);
      *__dst = v68;
      __dst[1] = v69;
      v70 = *((_QWORD *)__src + 2);
      v71 = *((_QWORD *)__src + 3);
      outlined copy of Data._Representation(v70, v71);
      __dst[2] = v70;
      __dst[3] = v71;
      v72 = *((_QWORD *)__src + 4);
      v73 = *((_QWORD *)__src + 5);
      outlined copy of Data._Representation(v72, v73);
      __dst[4] = v72;
      __dst[5] = v73;
      v74 = *((_QWORD *)__src + 6);
      v75 = *((_QWORD *)__src + 7);
      outlined copy of Data._Representation(v74, v75);
      __dst[6] = v74;
      __dst[7] = v75;
      ((void (*)(char *, char *, uint64_t))v93)((char *)__dst + *(int *)(v78 + 32), &__src[*(int *)(v78 + 32)], v92);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v79 + 56))(__dst, 0, 1, v78);
    }
    v64 = (_QWORD *)((char *)v94 + v95[10]);
    v65 = &v96[v95[10]];
    v66 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
    v67 = *(_QWORD *)(v66 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v67 + 48))(v65, 1))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v58 = *(_QWORD *)v65;
      v59 = *((_QWORD *)v65 + 1);
      outlined copy of Data._Representation(*(_QWORD *)v65, v59);
      *v64 = v58;
      v64[1] = v59;
      v60 = *((_QWORD *)v65 + 2);
      v61 = *((_QWORD *)v65 + 3);
      outlined copy of Data._Representation(v60, v61);
      v64[2] = v60;
      v64[3] = v61;
      v62 = *((_QWORD *)v65 + 4);
      v63 = *((_QWORD *)v65 + 5);
      outlined copy of Data._Representation(v62, v63);
      v64[4] = v62;
      v64[5] = v63;
      ((void (*)(char *, char *, uint64_t))v93)((char *)v64 + *(int *)(v66 + 28), &v65[*(int *)(v66 + 28)], v92);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
    }
    v10 = type metadata accessor for GroupBlobEnvelope();
    *(_DWORD *)((char *)v94 + *(int *)(v10 + 20)) = *(_DWORD *)&v96[*(int *)(v10 + 20)];
    v52 = a3[8];
    v53 = *(uint64_t *)((char *)a2 + v52);
    swift_bridgeObjectRetain();
    *(_QWORD *)((char *)a1 + v52) = v53;
    v54 = (_QWORD *)((char *)a1 + a3[9]);
    v55 = (uint64_t *)((char *)a2 + a3[9]);
    v56 = type metadata accessor for GKCrypto_SignedRSVP();
    v57 = *(_QWORD *)(v56 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t))(v57 + 48))(v55, 1))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v54 = *(_DWORD *)v55;
      v46 = v55[1];
      v47 = v55[2];
      outlined copy of Data._Representation(v46, v47);
      v54[1] = v46;
      v54[2] = v47;
      ((void (*)(char *, char *, uint64_t))v93)((char *)v54 + *(int *)(v56 + 24), (char *)v55 + *(int *)(v56 + 24), v92);
      v48 = (_DWORD *)((char *)v54 + *(int *)(v56 + 28));
      v49 = (_DWORD *)((char *)v55 + *(int *)(v56 + 28));
      v50 = type metadata accessor for GKCrypto_RSVP();
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(v51 + 48))(v49, 1))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        *v48 = *v49;
        *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
        *((_BYTE *)v48 + 16) = *((_BYTE *)v49 + 16);
        v40 = *((_QWORD *)v49 + 3);
        v41 = *((_QWORD *)v49 + 4);
        outlined copy of Data._Representation(v40, v41);
        *((_QWORD *)v48 + 3) = v40;
        *((_QWORD *)v48 + 4) = v41;
        v42 = *((_QWORD *)v49 + 5);
        v43 = *((_QWORD *)v49 + 6);
        outlined copy of Data._Representation(v42, v43);
        *((_QWORD *)v48 + 5) = v42;
        *((_QWORD *)v48 + 6) = v43;
        v44 = *((_QWORD *)v49 + 7);
        v45 = *((_QWORD *)v49 + 8);
        outlined copy of Data._Representation(v44, v45);
        *((_QWORD *)v48 + 7) = v44;
        *((_QWORD *)v48 + 8) = v45;
        ((void (*)(char *, char *, uint64_t))v93)((char *)v48 + *(int *)(v50 + 36), (char *)v49 + *(int *)(v50 + 36), v92);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
    }
    v35 = (_DWORD *)((char *)a1 + a3[10]);
    v36 = (_DWORD *)((char *)a2 + a3[10]);
    v37 = type metadata accessor for GKCrypto_SeedBlob();
    v38 = *(_QWORD *)(v37 - 8);
    v39 = *(unsigned int (**)(void))(v38 + 48);
    if (((unsigned int (*)(_DWORD *, uint64_t))v39)(v36, 1))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      *v35 = *v36;
      v29 = *((_QWORD *)v36 + 1);
      v30 = *((_QWORD *)v36 + 2);
      outlined copy of Data._Representation(v29, v30);
      *((_QWORD *)v35 + 1) = v29;
      *((_QWORD *)v35 + 2) = v30;
      v31 = *((_QWORD *)v36 + 3);
      v32 = *((_QWORD *)v36 + 4);
      outlined copy of Data._Representation(v31, v32);
      *((_QWORD *)v35 + 3) = v31;
      *((_QWORD *)v35 + 4) = v32;
      v33 = *((_QWORD *)v36 + 5);
      v34 = *((_QWORD *)v36 + 6);
      outlined copy of Data._Representation(v33, v34);
      *((_QWORD *)v35 + 5) = v33;
      *((_QWORD *)v35 + 6) = v34;
      v35[14] = v36[14];
      *((_QWORD *)v35 + 8) = *((_QWORD *)v36 + 8);
      *((_BYTE *)v35 + 72) = *((_BYTE *)v36 + 72);
      ((void (*)(char *, char *, uint64_t))v93)((char *)v35 + *(int *)(v37 + 40), (char *)v36 + *(int *)(v37 + 40), v92);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    v27 = (_DWORD *)((char *)a1 + a3[11]);
    v28 = (_DWORD *)((char *)a2 + a3[11]);
    if (v39())
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      *v27 = *v28;
      v21 = *((_QWORD *)v28 + 1);
      v22 = *((_QWORD *)v28 + 2);
      outlined copy of Data._Representation(v21, v22);
      *((_QWORD *)v27 + 1) = v21;
      *((_QWORD *)v27 + 2) = v22;
      v23 = *((_QWORD *)v28 + 3);
      v24 = *((_QWORD *)v28 + 4);
      outlined copy of Data._Representation(v23, v24);
      *((_QWORD *)v27 + 3) = v23;
      *((_QWORD *)v27 + 4) = v24;
      v25 = *((_QWORD *)v28 + 5);
      v26 = *((_QWORD *)v28 + 6);
      outlined copy of Data._Representation(v25, v26);
      *((_QWORD *)v27 + 5) = v25;
      *((_QWORD *)v27 + 6) = v26;
      v27[14] = v28[14];
      *((_QWORD *)v27 + 8) = *((_QWORD *)v28 + 8);
      *((_BYTE *)v27 + 72) = *((_BYTE *)v28 + 72);
      ((void (*)(char *, char *, uint64_t))v93)((char *)v27 + *(int *)(v37 + 40), (char *)v28 + *(int *)(v37 + 40), v92);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v27, 0, 1, v37);
    }
    v19 = (char *)a1 + a3[12];
    v20 = (char *)a2 + a3[12];
    if (*((_QWORD *)v20 + 1))
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      v18 = *((_QWORD *)v20 + 1);
      swift_bridgeObjectRetain();
      *((_QWORD *)v19 + 1) = v18;
      if ((*((_QWORD *)v20 + 3) & 0xF000000000000000) == 0xF000000000000000)
      {
        *((_OWORD *)v19 + 1) = *((_OWORD *)v20 + 1);
      }
      else
      {
        v16 = *((_QWORD *)v20 + 2);
        v17 = *((_QWORD *)v20 + 3);
        outlined copy of Data._Representation(v16, v17);
        *((_QWORD *)v19 + 2) = v16;
        *((_QWORD *)v19 + 3) = v17;
      }
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      *((_OWORD *)v19 + 1) = *((_OWORD *)v20 + 1);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for CompleteGPKUpdateGroupRequest.Body(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  int *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  v19 = a2[7];
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v19 + 8), *(_QWORD *)(a1 + v19 + 16));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v19 + 24), *(_QWORD *)(a1 + v19 + 32));
  v23 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v20 = v23[7];
  v21 = type metadata accessor for UnknownStorage();
  v22 = *(void (**)(uint64_t))(*(_QWORD *)(v21 - 8) + 8);
  v22(a1 + v19 + v20);
  v24 = v23[8];
  v25 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(a1 + v19 + v24, 1))
  {
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v22)(a1 + v19 + v24 + *(int *)(v25 + 20), v21);
  }
  v15 = a1 + v19 + v23[9];
  v16 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v15, *(_QWORD *)(v15 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v15 + 16), *(_QWORD *)(v15 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v15 + 32), *(_QWORD *)(v15 + 40));
    outlined consume of Data._Representation(*(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56));
    ((void (*)(uint64_t, uint64_t))v22)(v15 + *(int *)(v16 + 32), v21);
  }
  v13 = a1 + v19 + v23[10];
  v14 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)v13, *(_QWORD *)(v13 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24));
    outlined consume of Data._Representation(*(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40));
    ((void (*)(uint64_t, uint64_t))v22)(v13 + *(int *)(v14 + 28), v21);
  }
  swift_bridgeObjectRelease();
  v11 = a1 + a2[9];
  v12 = type metadata accessor for GKCrypto_SignedRSVP();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(v11 + 8), *(_QWORD *)(v11 + 16));
    ((void (*)(uint64_t, uint64_t))v22)(v11 + *(int *)(v12 + 24), v21);
    v9 = v11 + *(int *)(v12 + 28);
    v10 = type metadata accessor for GKCrypto_RSVP();
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1))
    {
      outlined consume of Data._Representation(*(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32));
      outlined consume of Data._Representation(*(_QWORD *)(v9 + 40), *(_QWORD *)(v9 + 48));
      outlined consume of Data._Representation(*(_QWORD *)(v9 + 56), *(_QWORD *)(v9 + 64));
      ((void (*)(uint64_t, uint64_t))v22)(v9 + *(int *)(v10 + 36), v21);
    }
  }
  v6 = a1 + a2[10];
  v7 = type metadata accessor for GKCrypto_SeedBlob();
  v8 = *(uint64_t (**)(void))(*(_QWORD *)(v7 - 8) + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v8)(v6, 1))
  {
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32));
    outlined consume of Data._Representation(*(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 48));
    ((void (*)(uint64_t, uint64_t))v22)(v6 + *(int *)(v7 + 40), v21);
  }
  v5 = a1 + a2[11];
  result = v8();
  if (!(_DWORD)result)
  {
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32));
    outlined consume of Data._Representation(*(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48));
    result = ((uint64_t (*)(uint64_t, uint64_t))v22)(v5 + *(int *)(v7 + 40), v21);
  }
  v4 = (_QWORD *)(a1 + a2[12]);
  if (v4[1])
  {
    result = swift_bridgeObjectRelease();
    if ((v4[3] & 0xF000000000000000) != 0xF000000000000000)
      return outlined consume of Data._Representation(v4[2], v4[3]);
  }
  return result;
}

uint64_t initializeWithCopy for CompleteGPKUpdateGroupRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(void);
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *__dst;
  uint64_t *__src;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  int *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v4 = (_QWORD *)(a2 + a3[5]);
  v82 = (_QWORD *)(a1 + a3[5]);
  *v82 = *v4;
  v83 = v4[1];
  swift_bridgeObjectRetain();
  v82[1] = v83;
  v84 = a3[6];
  v85 = *(_QWORD *)(a2 + v84);
  v86 = *(_QWORD *)(a2 + v84 + 8);
  outlined copy of Data._Representation(v85, v86);
  v5 = (uint64_t *)(a1 + v84);
  *v5 = v85;
  v5[1] = v86;
  v90 = a3[7];
  v95 = (_QWORD *)(a1 + v90);
  *(_DWORD *)(a1 + v90) = *(_DWORD *)(a2 + v90);
  v91 = *(_QWORD *)(a2 + v90 + 8);
  v92 = *(_QWORD *)(a2 + v90 + 16);
  outlined copy of Data._Representation(v91, v92);
  v95[1] = v91;
  v95[2] = v92;
  v93 = *(_QWORD *)(a2 + v90 + 24);
  v94 = *(_QWORD *)(a2 + v90 + 32);
  outlined copy of Data._Representation(v93, v94);
  v95[3] = v93;
  v95[4] = v94;
  v99 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v96 = v99[7];
  v97 = type metadata accessor for UnknownStorage();
  v98 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
  ((void (*)(uint64_t, uint64_t))v98)(a1 + v90 + v96, a2 + v90 + v96);
  v100 = v99[8];
  v101 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v102 = *(_QWORD *)(v101 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v102 + 48))(a2 + v90 + v100, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a1 + v90 + v100), (const void *)(a2 + v90 + v100), *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v80 = (char *)(a2 + v90 + v100);
    v79 = *(_QWORD *)v80;
    swift_bridgeObjectRetain();
    v81 = (char *)(a1 + v90 + v100);
    *(_QWORD *)v81 = v79;
    v98(&v81[*(int *)(v101 + 20)], &v80[*(int *)(v101 + 20)], v97);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v81, 0, 1, v101);
  }
  __dst = (_QWORD *)(a1 + v90 + v99[9]);
  __src = (uint64_t *)(a2 + v90 + v99[9]);
  v77 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v78 = *(_QWORD *)(v77 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v78 + 48))(__src, 1))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    v67 = *__src;
    v68 = __src[1];
    outlined copy of Data._Representation(*__src, v68);
    *__dst = v67;
    __dst[1] = v68;
    v69 = __src[2];
    v70 = __src[3];
    outlined copy of Data._Representation(v69, v70);
    __dst[2] = v69;
    __dst[3] = v70;
    v71 = __src[4];
    v72 = __src[5];
    outlined copy of Data._Representation(v71, v72);
    __dst[4] = v71;
    __dst[5] = v72;
    v73 = __src[6];
    v74 = __src[7];
    outlined copy of Data._Representation(v73, v74);
    __dst[6] = v73;
    __dst[7] = v74;
    v98((char *)__dst + *(int *)(v77 + 32), (char *)__src + *(int *)(v77 + 32), v97);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v78 + 56))(__dst, 0, 1, v77);
  }
  v63 = (_QWORD *)(a1 + v90 + v99[10]);
  v64 = (uint64_t *)(a2 + v90 + v99[10]);
  v65 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v66 = *(_QWORD *)(v65 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v66 + 48))(v64, 1))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v57 = *v64;
    v58 = v64[1];
    outlined copy of Data._Representation(*v64, v58);
    *v63 = v57;
    v63[1] = v58;
    v59 = v64[2];
    v60 = v64[3];
    outlined copy of Data._Representation(v59, v60);
    v63[2] = v59;
    v63[3] = v60;
    v61 = v64[4];
    v62 = v64[5];
    outlined copy of Data._Representation(v61, v62);
    v63[4] = v61;
    v63[5] = v62;
    v98((char *)v63 + *(int *)(v65 + 28), (char *)v64 + *(int *)(v65 + 28), v97);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
  }
  v9 = type metadata accessor for GroupBlobEnvelope();
  *(_DWORD *)(a1 + v90 + *(int *)(v9 + 20)) = *(_DWORD *)(a2 + v90 + *(int *)(v9 + 20));
  v51 = a3[8];
  v52 = *(_QWORD *)(a2 + v51);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + v51) = v52;
  v53 = (_QWORD *)(a1 + a3[9]);
  v54 = (_QWORD *)(a2 + a3[9]);
  v55 = type metadata accessor for GKCrypto_SignedRSVP();
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t))(v56 + 48))(v54, 1))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *(_DWORD *)v53 = *(_DWORD *)v54;
    v45 = v54[1];
    v46 = v54[2];
    outlined copy of Data._Representation(v45, v46);
    v53[1] = v45;
    v53[2] = v46;
    v98((char *)v53 + *(int *)(v55 + 24), (char *)v54 + *(int *)(v55 + 24), v97);
    v47 = (_DWORD *)((char *)v53 + *(int *)(v55 + 28));
    v48 = (_DWORD *)((char *)v54 + *(int *)(v55 + 28));
    v49 = type metadata accessor for GKCrypto_RSVP();
    v50 = *(_QWORD *)(v49 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t))(v50 + 48))(v48, 1))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      *v47 = *v48;
      *((_QWORD *)v47 + 1) = *((_QWORD *)v48 + 1);
      *((_BYTE *)v47 + 16) = *((_BYTE *)v48 + 16);
      v39 = *((_QWORD *)v48 + 3);
      v40 = *((_QWORD *)v48 + 4);
      outlined copy of Data._Representation(v39, v40);
      *((_QWORD *)v47 + 3) = v39;
      *((_QWORD *)v47 + 4) = v40;
      v41 = *((_QWORD *)v48 + 5);
      v42 = *((_QWORD *)v48 + 6);
      outlined copy of Data._Representation(v41, v42);
      *((_QWORD *)v47 + 5) = v41;
      *((_QWORD *)v47 + 6) = v42;
      v43 = *((_QWORD *)v48 + 7);
      v44 = *((_QWORD *)v48 + 8);
      outlined copy of Data._Representation(v43, v44);
      *((_QWORD *)v47 + 7) = v43;
      *((_QWORD *)v47 + 8) = v44;
      v98((char *)v47 + *(int *)(v49 + 36), (char *)v48 + *(int *)(v49 + 36), v97);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  v34 = (_DWORD *)(a1 + a3[10]);
  v35 = (_DWORD *)(a2 + a3[10]);
  v36 = type metadata accessor for GKCrypto_SeedBlob();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(unsigned int (**)(void))(v37 + 48);
  if (((unsigned int (*)(_DWORD *, uint64_t))v38)(v35, 1))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *v34 = *v35;
    v28 = *((_QWORD *)v35 + 1);
    v29 = *((_QWORD *)v35 + 2);
    outlined copy of Data._Representation(v28, v29);
    *((_QWORD *)v34 + 1) = v28;
    *((_QWORD *)v34 + 2) = v29;
    v30 = *((_QWORD *)v35 + 3);
    v31 = *((_QWORD *)v35 + 4);
    outlined copy of Data._Representation(v30, v31);
    *((_QWORD *)v34 + 3) = v30;
    *((_QWORD *)v34 + 4) = v31;
    v32 = *((_QWORD *)v35 + 5);
    v33 = *((_QWORD *)v35 + 6);
    outlined copy of Data._Representation(v32, v33);
    *((_QWORD *)v34 + 5) = v32;
    *((_QWORD *)v34 + 6) = v33;
    v34[14] = v35[14];
    *((_QWORD *)v34 + 8) = *((_QWORD *)v35 + 8);
    *((_BYTE *)v34 + 72) = *((_BYTE *)v35 + 72);
    v98((char *)v34 + *(int *)(v36 + 40), (char *)v35 + *(int *)(v36 + 40), v97);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  v26 = (_DWORD *)(a1 + a3[11]);
  v27 = (_DWORD *)(a2 + a3[11]);
  if (v38())
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *v26 = *v27;
    v20 = *((_QWORD *)v27 + 1);
    v21 = *((_QWORD *)v27 + 2);
    outlined copy of Data._Representation(v20, v21);
    *((_QWORD *)v26 + 1) = v20;
    *((_QWORD *)v26 + 2) = v21;
    v22 = *((_QWORD *)v27 + 3);
    v23 = *((_QWORD *)v27 + 4);
    outlined copy of Data._Representation(v22, v23);
    *((_QWORD *)v26 + 3) = v22;
    *((_QWORD *)v26 + 4) = v23;
    v24 = *((_QWORD *)v27 + 5);
    v25 = *((_QWORD *)v27 + 6);
    outlined copy of Data._Representation(v24, v25);
    *((_QWORD *)v26 + 5) = v24;
    *((_QWORD *)v26 + 6) = v25;
    v26[14] = v27[14];
    *((_QWORD *)v26 + 8) = *((_QWORD *)v27 + 8);
    *((_BYTE *)v26 + 72) = *((_BYTE *)v27 + 72);
    v98((char *)v26 + *(int *)(v36 + 40), (char *)v27 + *(int *)(v36 + 40), v97);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v26, 0, 1, v36);
  }
  v18 = a1 + a3[12];
  v19 = a2 + a3[12];
  if (*(_QWORD *)(v19 + 8))
  {
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v17 = *(_QWORD *)(v19 + 8);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v18 + 8) = v17;
    if ((*(_QWORD *)(v19 + 24) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(v18 + 16) = *(_OWORD *)(v19 + 16);
    }
    else
    {
      v15 = *(_QWORD *)(v19 + 16);
      v16 = *(_QWORD *)(v19 + 24);
      outlined copy of Data._Representation(v15, v16);
      *(_QWORD *)(v18 + 16) = v15;
      *(_QWORD *)(v18 + 24) = v16;
    }
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
    *(_OWORD *)(v18 + 16) = *(_OWORD *)(v19 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for CompleteGPKUpdateGroupRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _DWORD *v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int (*v105)(_DWORD *, uint64_t, uint64_t);
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void (*v114)(char *, char *, uint64_t);
  _DWORD *v115;
  _DWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _DWORD *v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int (*v137)(_DWORD *, uint64_t, uint64_t);
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int (*v144)(_QWORD *, uint64_t, uint64_t);
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int (*v161)(uint64_t *, uint64_t, uint64_t);
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t *__src;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int (*v182)(uint64_t *, uint64_t, uint64_t);
  uint64_t v183;
  char *v184;
  char *v185;
  void *__dst;
  uint64_t v187;
  _QWORD *v188;
  uint64_t *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(uint64_t, uint64_t);
  int *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int (*v212)(uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v4 = (_QWORD *)(a2 + a3[5]);
  v190 = (_QWORD *)(a1 + a3[5]);
  *v190 = *v4;
  v191 = v4[1];
  swift_bridgeObjectRetain();
  v190[1] = v191;
  swift_bridgeObjectRelease();
  v192 = a3[6];
  v193 = *(_QWORD *)(a2 + v192);
  v194 = *(_QWORD *)(a2 + v192 + 8);
  outlined copy of Data._Representation(v193, v194);
  v5 = (uint64_t *)(a1 + v192);
  v6 = *(_QWORD *)(a1 + v192);
  v7 = *(_QWORD *)(a1 + v192 + 8);
  *v5 = v193;
  v5[1] = v194;
  outlined consume of Data._Representation(v6, v7);
  v198 = a3[7];
  v208 = (_QWORD *)(a1 + v198);
  *(_DWORD *)(a1 + v198) = *(_DWORD *)(a2 + v198);
  v199 = *(_QWORD *)(a2 + v198 + 8);
  v200 = *(_QWORD *)(a2 + v198 + 16);
  outlined copy of Data._Representation(v199, v200);
  v8 = *(_QWORD *)(a1 + v198 + 8);
  v9 = *(_QWORD *)(a1 + v198 + 16);
  v208[1] = v199;
  v208[2] = v200;
  outlined consume of Data._Representation(v8, v9);
  v201 = *(_QWORD *)(a2 + v198 + 24);
  v202 = *(_QWORD *)(a2 + v198 + 32);
  outlined copy of Data._Representation(v201, v202);
  v10 = *(_QWORD *)(a1 + v198 + 24);
  v11 = *(_QWORD *)(a1 + v198 + 32);
  v208[3] = v201;
  v208[4] = v202;
  outlined consume of Data._Representation(v10, v11);
  v207 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v203 = v207[7];
  v204 = type metadata accessor for UnknownStorage();
  v205 = *(_QWORD *)(v204 - 8);
  v206 = *(void (**)(uint64_t, uint64_t))(v205 + 24);
  v206(a1 + v198 + v203, a2 + v198 + v203);
  v209 = v207[8];
  v210 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v211 = *(_QWORD *)(v210 - 8);
  v212 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v211 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v212)(a1 + v198 + v209, 1))
  {
    if (v212(a2 + v198 + v209, 1, v210))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy((void *)(a1 + v198 + v209), (const void *)(a2 + v198 + v209), *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v184 = (char *)(a2 + v198 + v209);
      v183 = *(_QWORD *)v184;
      swift_bridgeObjectRetain();
      v185 = (char *)(a1 + v198 + v209);
      *(_QWORD *)v185 = v183;
      (*(void (**)(char *, char *, uint64_t))(v205 + 16))(&v185[*(int *)(v210 + 20)], &v184[*(int *)(v210 + 20)], v204);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v211 + 56))(v185, 0, 1, v210);
    }
  }
  else if (v212(a2 + v198 + v209, 1, v210))
  {
    __dst = (void *)(a1 + v198 + v209);
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)__dst);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(__dst, (const void *)(a2 + v198 + v209), *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v189 = (uint64_t *)(a2 + v198 + v209);
    v187 = *v189;
    swift_bridgeObjectRetain();
    v188 = (_QWORD *)(a1 + v198 + v209);
    *v188 = v187;
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v206)((char *)v188 + *(int *)(v210 + 20), (char *)v189 + *(int *)(v210 + 20), v204);
  }
  v179 = (_QWORD *)(a1 + v198 + v207[9]);
  __src = (uint64_t *)(a2 + v198 + v207[9]);
  v180 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v181 = *(_QWORD *)(v180 - 8);
  v182 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v181 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v182)(v179, 1))
  {
    if (v182(__src, 1, v180))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(v179, __src, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      v162 = *__src;
      v163 = __src[1];
      outlined copy of Data._Representation(*__src, v163);
      *v179 = v162;
      v179[1] = v163;
      v164 = __src[2];
      v165 = __src[3];
      outlined copy of Data._Representation(v164, v165);
      v179[2] = v164;
      v179[3] = v165;
      v166 = __src[4];
      v167 = __src[5];
      outlined copy of Data._Representation(v166, v167);
      v179[4] = v166;
      v179[5] = v167;
      v168 = __src[6];
      v169 = __src[7];
      outlined copy of Data._Representation(v168, v169);
      v179[6] = v168;
      v179[7] = v169;
      (*(void (**)(char *, char *, uint64_t))(v205 + 16))((char *)v179 + *(int *)(v180 + 32), (char *)__src + *(int *)(v180 + 32), v204);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v181 + 56))(v179, 0, 1, v180);
    }
  }
  else if (v182(__src, 1, v180))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v179);
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(v179, __src, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v170 = *__src;
    v171 = __src[1];
    outlined copy of Data._Representation(*__src, v171);
    v14 = *v179;
    v15 = v179[1];
    *v179 = v170;
    v179[1] = v171;
    outlined consume of Data._Representation(v14, v15);
    v172 = __src[2];
    v173 = __src[3];
    outlined copy of Data._Representation(v172, v173);
    v16 = v179[2];
    v17 = v179[3];
    v179[2] = v172;
    v179[3] = v173;
    outlined consume of Data._Representation(v16, v17);
    v174 = __src[4];
    v175 = __src[5];
    outlined copy of Data._Representation(v174, v175);
    v18 = v179[4];
    v19 = v179[5];
    v179[4] = v174;
    v179[5] = v175;
    outlined consume of Data._Representation(v18, v19);
    v176 = __src[6];
    v177 = __src[7];
    outlined copy of Data._Representation(v176, v177);
    v20 = v179[6];
    v21 = v179[7];
    v179[6] = v176;
    v179[7] = v177;
    outlined consume of Data._Representation(v20, v21);
    ((void (*)(char *, char *, uint64_t))v206)((char *)v179 + *(int *)(v180 + 32), (char *)__src + *(int *)(v180 + 32), v204);
  }
  v158 = (_QWORD *)(a1 + v198 + v207[10]);
  v157 = (uint64_t *)(a2 + v198 + v207[10]);
  v159 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v160 = *(_QWORD *)(v159 - 8);
  v161 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v160 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v161)(v158, 1))
  {
    if (v161(v157, 1, v159))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(v158, v157, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v145 = *v157;
      v146 = v157[1];
      outlined copy of Data._Representation(*v157, v146);
      *v158 = v145;
      v158[1] = v146;
      v147 = v157[2];
      v148 = v157[3];
      outlined copy of Data._Representation(v147, v148);
      v158[2] = v147;
      v158[3] = v148;
      v149 = v157[4];
      v150 = v157[5];
      outlined copy of Data._Representation(v149, v150);
      v158[4] = v149;
      v158[5] = v150;
      (*(void (**)(char *, char *, uint64_t))(v205 + 16))((char *)v158 + *(int *)(v159 + 28), (char *)v157 + *(int *)(v159 + 28), v204);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v160 + 56))(v158, 0, 1, v159);
    }
  }
  else if (v161(v157, 1, v159))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)v158);
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v158, v157, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v151 = *v157;
    v152 = v157[1];
    outlined copy of Data._Representation(*v157, v152);
    v24 = *v158;
    v25 = v158[1];
    *v158 = v151;
    v158[1] = v152;
    outlined consume of Data._Representation(v24, v25);
    v153 = v157[2];
    v154 = v157[3];
    outlined copy of Data._Representation(v153, v154);
    v26 = v158[2];
    v27 = v158[3];
    v158[2] = v153;
    v158[3] = v154;
    outlined consume of Data._Representation(v26, v27);
    v155 = v157[4];
    v156 = v157[5];
    outlined copy of Data._Representation(v155, v156);
    v28 = v158[4];
    v29 = v158[5];
    v158[4] = v155;
    v158[5] = v156;
    outlined consume of Data._Representation(v28, v29);
    ((void (*)(char *, char *, uint64_t))v206)((char *)v158 + *(int *)(v159 + 28), (char *)v157 + *(int *)(v159 + 28), v204);
  }
  v32 = type metadata accessor for GroupBlobEnvelope();
  *(_DWORD *)(a1 + v198 + *(int *)(v32 + 20)) = *(_DWORD *)(a2 + v198 + *(int *)(v32 + 20));
  v138 = (_QWORD *)(a1 + a3[8]);
  v139 = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  *v138 = v139;
  swift_bridgeObjectRelease();
  v141 = (_QWORD *)(a1 + a3[9]);
  v140 = (_QWORD *)(a2 + a3[9]);
  v142 = type metadata accessor for GKCrypto_SignedRSVP();
  v143 = *(_QWORD *)(v142 - 8);
  v144 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v143 + 48);
  if (((unsigned int (*)(_QWORD *, uint64_t))v144)(v141, 1))
  {
    if (v144(v140, 1, v142))
    {
      v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
      memcpy(v141, v140, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v141 = *(_DWORD *)v140;
      v112 = v140[1];
      v113 = v140[2];
      outlined copy of Data._Representation(v112, v113);
      v141[1] = v112;
      v141[2] = v113;
      v114 = *(void (**)(char *, char *, uint64_t))(v205 + 16);
      v114((char *)v141 + *(int *)(v142 + 24), (char *)v140 + *(int *)(v142 + 24), v204);
      v115 = (_DWORD *)((char *)v141 + *(int *)(v142 + 28));
      v116 = (_DWORD *)((char *)v140 + *(int *)(v142 + 28));
      v117 = type metadata accessor for GKCrypto_RSVP();
      v118 = *(_QWORD *)(v117 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(v118 + 48))(v116, 1))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
        memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        *v115 = *v116;
        *((_QWORD *)v115 + 1) = *((_QWORD *)v116 + 1);
        *((_BYTE *)v115 + 16) = *((_BYTE *)v116 + 16);
        v106 = *((_QWORD *)v116 + 3);
        v107 = *((_QWORD *)v116 + 4);
        outlined copy of Data._Representation(v106, v107);
        *((_QWORD *)v115 + 3) = v106;
        *((_QWORD *)v115 + 4) = v107;
        v108 = *((_QWORD *)v116 + 5);
        v109 = *((_QWORD *)v116 + 6);
        outlined copy of Data._Representation(v108, v109);
        *((_QWORD *)v115 + 5) = v108;
        *((_QWORD *)v115 + 6) = v109;
        v110 = *((_QWORD *)v116 + 7);
        v111 = *((_QWORD *)v116 + 8);
        outlined copy of Data._Representation(v110, v111);
        *((_QWORD *)v115 + 7) = v110;
        *((_QWORD *)v115 + 8) = v111;
        v114((char *)v115 + *(int *)(v117 + 36), (char *)v116 + *(int *)(v117 + 36), v204);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v115, 0, 1, v117);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v143 + 56))(v141, 0, 1, v142);
    }
  }
  else if (v144(v140, 1, v142))
  {
    outlined destroy of GKCrypto_SignedRSVP((uint64_t)v141);
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
    memcpy(v141, v140, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    *(_DWORD *)v141 = *(_DWORD *)v140;
    v131 = v140[1];
    v132 = v140[2];
    outlined copy of Data._Representation(v131, v132);
    v33 = v141[1];
    v34 = v141[2];
    v141[1] = v131;
    v141[2] = v132;
    outlined consume of Data._Representation(v33, v34);
    ((void (*)(char *, char *, uint64_t))v206)((char *)v141 + *(int *)(v142 + 24), (char *)v140 + *(int *)(v142 + 24), v204);
    v134 = (_DWORD *)((char *)v141 + *(int *)(v142 + 28));
    v133 = (_DWORD *)((char *)v140 + *(int *)(v142 + 28));
    v135 = type metadata accessor for GKCrypto_RSVP();
    v136 = *(_QWORD *)(v135 - 8);
    v137 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v136 + 48);
    if (((unsigned int (*)(_DWORD *, uint64_t))v137)(v134, 1))
    {
      if (v137(v133, 1, v135))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
        memcpy(v134, v133, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        *v134 = *v133;
        *((_QWORD *)v134 + 1) = *((_QWORD *)v133 + 1);
        *((_BYTE *)v134 + 16) = *((_BYTE *)v133 + 16);
        v119 = *((_QWORD *)v133 + 3);
        v120 = *((_QWORD *)v133 + 4);
        outlined copy of Data._Representation(v119, v120);
        *((_QWORD *)v134 + 3) = v119;
        *((_QWORD *)v134 + 4) = v120;
        v121 = *((_QWORD *)v133 + 5);
        v122 = *((_QWORD *)v133 + 6);
        outlined copy of Data._Representation(v121, v122);
        *((_QWORD *)v134 + 5) = v121;
        *((_QWORD *)v134 + 6) = v122;
        v123 = *((_QWORD *)v133 + 7);
        v124 = *((_QWORD *)v133 + 8);
        outlined copy of Data._Representation(v123, v124);
        *((_QWORD *)v134 + 7) = v123;
        *((_QWORD *)v134 + 8) = v124;
        (*(void (**)(char *, char *, uint64_t))(v205 + 16))((char *)v134 + *(int *)(v135 + 36), (char *)v133 + *(int *)(v135 + 36), v204);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v134, 0, 1, v135);
      }
    }
    else if (v137(v133, 1, v135))
    {
      outlined destroy of GKCrypto_RSVP((uint64_t)v134);
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      memcpy(v134, v133, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      *v134 = *v133;
      *((_QWORD *)v134 + 1) = *((_QWORD *)v133 + 1);
      *((_BYTE *)v134 + 16) = *((_BYTE *)v133 + 16);
      v125 = *((_QWORD *)v133 + 3);
      v126 = *((_QWORD *)v133 + 4);
      outlined copy of Data._Representation(v125, v126);
      v35 = *((_QWORD *)v134 + 3);
      v36 = *((_QWORD *)v134 + 4);
      *((_QWORD *)v134 + 3) = v125;
      *((_QWORD *)v134 + 4) = v126;
      outlined consume of Data._Representation(v35, v36);
      v127 = *((_QWORD *)v133 + 5);
      v128 = *((_QWORD *)v133 + 6);
      outlined copy of Data._Representation(v127, v128);
      v37 = *((_QWORD *)v134 + 5);
      v38 = *((_QWORD *)v134 + 6);
      *((_QWORD *)v134 + 5) = v127;
      *((_QWORD *)v134 + 6) = v128;
      outlined consume of Data._Representation(v37, v38);
      v129 = *((_QWORD *)v133 + 7);
      v130 = *((_QWORD *)v133 + 8);
      outlined copy of Data._Representation(v129, v130);
      v39 = *((_QWORD *)v134 + 7);
      v40 = *((_QWORD *)v134 + 8);
      *((_QWORD *)v134 + 7) = v129;
      *((_QWORD *)v134 + 8) = v130;
      outlined consume of Data._Representation(v39, v40);
      ((void (*)(char *, char *, uint64_t))v206)((char *)v134 + *(int *)(v135 + 36), (char *)v133 + *(int *)(v135 + 36), v204);
    }
  }
  v102 = (_DWORD *)(a1 + a3[10]);
  v101 = (_DWORD *)(a2 + a3[10]);
  v103 = type metadata accessor for GKCrypto_SeedBlob();
  v104 = *(_QWORD *)(v103 - 8);
  v105 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v104 + 48);
  if (((unsigned int (*)(_DWORD *, uint64_t))v105)(v102, 1))
  {
    if (v105(v101, 1, v103))
    {
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
      memcpy(v102, v101, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      *v102 = *v101;
      v89 = *((_QWORD *)v101 + 1);
      v90 = *((_QWORD *)v101 + 2);
      outlined copy of Data._Representation(v89, v90);
      *((_QWORD *)v102 + 1) = v89;
      *((_QWORD *)v102 + 2) = v90;
      v91 = *((_QWORD *)v101 + 3);
      v92 = *((_QWORD *)v101 + 4);
      outlined copy of Data._Representation(v91, v92);
      *((_QWORD *)v102 + 3) = v91;
      *((_QWORD *)v102 + 4) = v92;
      v93 = *((_QWORD *)v101 + 5);
      v94 = *((_QWORD *)v101 + 6);
      outlined copy of Data._Representation(v93, v94);
      *((_QWORD *)v102 + 5) = v93;
      *((_QWORD *)v102 + 6) = v94;
      v102[14] = v101[14];
      *((_QWORD *)v102 + 8) = *((_QWORD *)v101 + 8);
      *((_BYTE *)v102 + 72) = *((_BYTE *)v101 + 72);
      (*(void (**)(char *, char *, uint64_t))(v205 + 16))((char *)v102 + *(int *)(v103 + 40), (char *)v101 + *(int *)(v103 + 40), v204);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v102, 0, 1, v103);
    }
  }
  else if (v105(v101, 1, v103))
  {
    outlined destroy of GKCrypto_SeedBlob((uint64_t)v102);
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
    memcpy(v102, v101, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    *v102 = *v101;
    v95 = *((_QWORD *)v101 + 1);
    v96 = *((_QWORD *)v101 + 2);
    outlined copy of Data._Representation(v95, v96);
    v46 = *((_QWORD *)v102 + 1);
    v47 = *((_QWORD *)v102 + 2);
    *((_QWORD *)v102 + 1) = v95;
    *((_QWORD *)v102 + 2) = v96;
    outlined consume of Data._Representation(v46, v47);
    v97 = *((_QWORD *)v101 + 3);
    v98 = *((_QWORD *)v101 + 4);
    outlined copy of Data._Representation(v97, v98);
    v48 = *((_QWORD *)v102 + 3);
    v49 = *((_QWORD *)v102 + 4);
    *((_QWORD *)v102 + 3) = v97;
    *((_QWORD *)v102 + 4) = v98;
    outlined consume of Data._Representation(v48, v49);
    v99 = *((_QWORD *)v101 + 5);
    v100 = *((_QWORD *)v101 + 6);
    outlined copy of Data._Representation(v99, v100);
    v50 = *((_QWORD *)v102 + 5);
    v51 = *((_QWORD *)v102 + 6);
    *((_QWORD *)v102 + 5) = v99;
    *((_QWORD *)v102 + 6) = v100;
    outlined consume of Data._Representation(v50, v51);
    v102[14] = v101[14];
    *((_QWORD *)v102 + 8) = *((_QWORD *)v101 + 8);
    *((_BYTE *)v102 + 72) = *((_BYTE *)v101 + 72);
    ((void (*)(char *, char *, uint64_t))v206)((char *)v102 + *(int *)(v103 + 40), (char *)v101 + *(int *)(v103 + 40), v204);
  }
  v87 = (_DWORD *)(a1 + a3[11]);
  v88 = (_DWORD *)(a2 + a3[11]);
  if (((unsigned int (*)(void))v105)())
  {
    if (v105(v88, 1, v103))
    {
      v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
      memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    }
    else
    {
      *v87 = *v88;
      v75 = *((_QWORD *)v88 + 1);
      v76 = *((_QWORD *)v88 + 2);
      outlined copy of Data._Representation(v75, v76);
      *((_QWORD *)v87 + 1) = v75;
      *((_QWORD *)v87 + 2) = v76;
      v77 = *((_QWORD *)v88 + 3);
      v78 = *((_QWORD *)v88 + 4);
      outlined copy of Data._Representation(v77, v78);
      *((_QWORD *)v87 + 3) = v77;
      *((_QWORD *)v87 + 4) = v78;
      v79 = *((_QWORD *)v88 + 5);
      v80 = *((_QWORD *)v88 + 6);
      outlined copy of Data._Representation(v79, v80);
      *((_QWORD *)v87 + 5) = v79;
      *((_QWORD *)v87 + 6) = v80;
      v87[14] = v88[14];
      *((_QWORD *)v87 + 8) = *((_QWORD *)v88 + 8);
      *((_BYTE *)v87 + 72) = *((_BYTE *)v88 + 72);
      (*(void (**)(char *, char *, uint64_t))(v205 + 16))((char *)v87 + *(int *)(v103 + 40), (char *)v88 + *(int *)(v103 + 40), v204);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v87, 0, 1, v103);
    }
  }
  else if (v105(v88, 1, v103))
  {
    outlined destroy of GKCrypto_SeedBlob((uint64_t)v87);
    v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    *v87 = *v88;
    v81 = *((_QWORD *)v88 + 1);
    v82 = *((_QWORD *)v88 + 2);
    outlined copy of Data._Representation(v81, v82);
    v54 = *((_QWORD *)v87 + 1);
    v55 = *((_QWORD *)v87 + 2);
    *((_QWORD *)v87 + 1) = v81;
    *((_QWORD *)v87 + 2) = v82;
    outlined consume of Data._Representation(v54, v55);
    v83 = *((_QWORD *)v88 + 3);
    v84 = *((_QWORD *)v88 + 4);
    outlined copy of Data._Representation(v83, v84);
    v56 = *((_QWORD *)v87 + 3);
    v57 = *((_QWORD *)v87 + 4);
    *((_QWORD *)v87 + 3) = v83;
    *((_QWORD *)v87 + 4) = v84;
    outlined consume of Data._Representation(v56, v57);
    v85 = *((_QWORD *)v88 + 5);
    v86 = *((_QWORD *)v88 + 6);
    outlined copy of Data._Representation(v85, v86);
    v58 = *((_QWORD *)v87 + 5);
    v59 = *((_QWORD *)v87 + 6);
    *((_QWORD *)v87 + 5) = v85;
    *((_QWORD *)v87 + 6) = v86;
    outlined consume of Data._Representation(v58, v59);
    v87[14] = v88[14];
    *((_QWORD *)v87 + 8) = *((_QWORD *)v88 + 8);
    *((_BYTE *)v87 + 72) = *((_BYTE *)v88 + 72);
    ((void (*)(char *, char *, uint64_t))v206)((char *)v87 + *(int *)(v103 + 40), (char *)v88 + *(int *)(v103 + 40), v204);
  }
  v73 = a1 + a3[12];
  v74 = a2 + a3[12];
  if (*(_QWORD *)(v73 + 8))
  {
    if (*(_QWORD *)(v74 + 8))
    {
      *(_DWORD *)v73 = *(_DWORD *)v74;
      v72 = *(_QWORD *)(v74 + 8);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v73 + 8) = v72;
      swift_bridgeObjectRelease();
      if ((*(_QWORD *)(v73 + 24) & 0xF000000000000000) == 0xF000000000000000)
      {
        if ((*(_QWORD *)(v74 + 24) & 0xF000000000000000) == 0xF000000000000000)
        {
          *(_OWORD *)(v73 + 16) = *(_OWORD *)(v74 + 16);
        }
        else
        {
          v68 = *(_QWORD *)(v74 + 16);
          v69 = *(_QWORD *)(v74 + 24);
          outlined copy of Data._Representation(v68, v69);
          *(_QWORD *)(v73 + 16) = v68;
          *(_QWORD *)(v73 + 24) = v69;
        }
      }
      else if ((*(_QWORD *)(v74 + 24) & 0xF000000000000000) == 0xF000000000000000)
      {
        outlined destroy of Data(v73 + 16);
        *(_OWORD *)(v73 + 16) = *(_OWORD *)(v74 + 16);
      }
      else
      {
        v70 = *(_QWORD *)(v74 + 16);
        v71 = *(_QWORD *)(v74 + 24);
        outlined copy of Data._Representation(v70, v71);
        v62 = *(_QWORD *)(v73 + 16);
        v63 = *(_QWORD *)(v73 + 24);
        *(_QWORD *)(v73 + 16) = v70;
        *(_QWORD *)(v73 + 24) = v71;
        outlined consume of Data._Representation(v62, v63);
      }
    }
    else
    {
      outlined destroy of MetaDataServerBlob(v73);
      *(_OWORD *)v73 = *(_OWORD *)v74;
      *(_OWORD *)(v73 + 16) = *(_OWORD *)(v74 + 16);
    }
  }
  else if (*(_QWORD *)(v74 + 8))
  {
    *(_DWORD *)v73 = *(_DWORD *)v74;
    v67 = *(_QWORD *)(v74 + 8);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v73 + 8) = v67;
    if ((*(_QWORD *)(v74 + 24) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(v73 + 16) = *(_OWORD *)(v74 + 16);
    }
    else
    {
      v65 = *(_QWORD *)(v74 + 16);
      v66 = *(_QWORD *)(v74 + 24);
      outlined copy of Data._Representation(v65, v66);
      *(_QWORD *)(v73 + 16) = v65;
      *(_QWORD *)(v73 + 24) = v66;
    }
  }
  else
  {
    *(_OWORD *)v73 = *(_OWORD *)v74;
    *(_OWORD *)(v73 + 16) = *(_OWORD *)(v74 + 16);
  }
  return a1;
}

uint64_t initializeWithTake for CompleteGPKUpdateGroupRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v14;
  _OWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(void);
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *__dst;
  _OWORD *__src;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v43 = a3[7];
  v44 = a1 + v43;
  *(_DWORD *)v44 = *(_DWORD *)(a2 + v43);
  *(_OWORD *)(v44 + 8) = *(_OWORD *)(a2 + v43 + 8);
  *(_OWORD *)(v44 + 24) = *(_OWORD *)(a2 + v43 + 24);
  v48 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v45 = v48[7];
  v46 = type metadata accessor for UnknownStorage();
  v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32);
  ((void (*)(uint64_t, uint64_t))v47)(a1 + v43 + v45, a2 + v43 + v45);
  v49 = v48[8];
  v50 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v51 + 48))(a2 + v43 + v49, 1))
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy((void *)(a1 + v43 + v49), (const void *)(a2 + v43 + v49), *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v4 = (char *)(a2 + v43 + v49);
    v39 = (char *)(a1 + v43 + v49);
    *(_QWORD *)v39 = *(_QWORD *)v4;
    v47(&v39[*(int *)(v50 + 20)], &v4[*(int *)(v50 + 20)], v46);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v39, 0, 1, v50);
  }
  __dst = (_OWORD *)(a1 + v43 + v48[9]);
  __src = (_OWORD *)(a2 + v43 + v48[9]);
  v37 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v38 + 48))(__src, 1))
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *__dst = *__src;
    __dst[1] = __src[1];
    __dst[2] = __src[2];
    __dst[3] = __src[3];
    v47((char *)__dst + *(int *)(v37 + 32), (char *)__src + *(int *)(v37 + 32), v46);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
  }
  v31 = (_OWORD *)(a1 + v43 + v48[10]);
  v32 = (_OWORD *)(a2 + v43 + v48[10]);
  v33 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v34 + 48))(v32, 1))
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    *v31 = *v32;
    v31[1] = v32[1];
    v31[2] = v32[2];
    v47((char *)v31 + *(int *)(v33 + 28), (char *)v32 + *(int *)(v33 + 28), v46);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  v8 = type metadata accessor for GroupBlobEnvelope();
  *(_DWORD *)(a1 + v43 + *(int *)(v8 + 20)) = *(_DWORD *)(a2 + v43 + *(int *)(v8 + 20));
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v27 = (_DWORD *)(a1 + a3[9]);
  v28 = (_DWORD *)(a2 + a3[9]);
  v29 = type metadata accessor for GKCrypto_SignedRSVP();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t))(v30 + 48))(v28, 1))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    *v27 = *v28;
    *(_OWORD *)(v27 + 2) = *(_OWORD *)(v28 + 2);
    v47((char *)v27 + *(int *)(v29 + 24), (char *)v28 + *(int *)(v29 + 24), v46);
    v23 = (_DWORD *)((char *)v27 + *(int *)(v29 + 28));
    v24 = (_DWORD *)((char *)v28 + *(int *)(v29 + 28));
    v25 = type metadata accessor for GKCrypto_RSVP();
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t))(v26 + 48))(v24, 1))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      *v23 = *v24;
      *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);
      *((_BYTE *)v23 + 16) = *((_BYTE *)v24 + 16);
      *(_OWORD *)(v23 + 6) = *(_OWORD *)(v24 + 6);
      *(_OWORD *)(v23 + 10) = *(_OWORD *)(v24 + 10);
      *(_OWORD *)(v23 + 14) = *(_OWORD *)(v24 + 14);
      v47((char *)v23 + *(int *)(v25 + 36), (char *)v24 + *(int *)(v25 + 36), v46);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v18 = (_DWORD *)(a1 + a3[10]);
  v19 = (_DWORD *)(a2 + a3[10]);
  v20 = type metadata accessor for GKCrypto_SeedBlob();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(void))(v21 + 48);
  if (((unsigned int (*)(_DWORD *, uint64_t))v22)(v19, 1))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    *(_OWORD *)(v18 + 2) = *(_OWORD *)(v19 + 2);
    *(_OWORD *)(v18 + 6) = *(_OWORD *)(v19 + 6);
    *(_OWORD *)(v18 + 10) = *(_OWORD *)(v19 + 10);
    v18[14] = v19[14];
    *((_QWORD *)v18 + 8) = *((_QWORD *)v19 + 8);
    *((_BYTE *)v18 + 72) = *((_BYTE *)v19 + 72);
    v47((char *)v18 + *(int *)(v20 + 40), (char *)v19 + *(int *)(v20 + 40), v46);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v16 = (_DWORD *)(a1 + a3[11]);
  v17 = (_DWORD *)(a2 + a3[11]);
  if (v22())
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    *(_OWORD *)(v16 + 2) = *(_OWORD *)(v17 + 2);
    *(_OWORD *)(v16 + 6) = *(_OWORD *)(v17 + 6);
    *(_OWORD *)(v16 + 10) = *(_OWORD *)(v17 + 10);
    v16[14] = v17[14];
    *((_QWORD *)v16 + 8) = *((_QWORD *)v17 + 8);
    *((_BYTE *)v16 + 72) = *((_BYTE *)v17 + 72);
    v47((char *)v16 + *(int *)(v20 + 40), (char *)v17 + *(int *)(v20 + 40), v46);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v16, 0, 1, v20);
  }
  v14 = (_OWORD *)(a1 + a3[12]);
  v15 = (_OWORD *)(a2 + a3[12]);
  *v14 = *v15;
  v14[1] = v15[1];
  return a1;
}

uint64_t assignWithTake for CompleteGPKUpdateGroupRequest.Body(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int (*v98)(_DWORD *, uint64_t, uint64_t);
  void (*v99)(char *, char *, uint64_t);
  _DWORD *v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(_DWORD *, uint64_t, uint64_t);
  _DWORD *v109;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int (*v113)(_DWORD *, uint64_t, uint64_t);
  _OWORD *__src;
  _OWORD *__dst;
  uint64_t v116;
  uint64_t v117;
  unsigned int (*v118)(_OWORD *, uint64_t, uint64_t);
  _OWORD *v119;
  _OWORD *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int (*v123)(_OWORD *, uint64_t, uint64_t);
  char *v124;
  void *v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t);
  int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int (*v141)(uint64_t, uint64_t, uint64_t);

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (_QWORD *)(a2 + a3[5]);
  v5 = (_QWORD *)(a1 + a3[5]);
  *v5 = *v4;
  v5[1] = v4[1];
  swift_bridgeObjectRelease();
  v6 = (uint64_t *)(a2 + a3[6]);
  v7 = *v6;
  v8 = v6[1];
  v9 = (uint64_t *)(a1 + a3[6]);
  v10 = *v9;
  v11 = v9[1];
  *v9 = v7;
  v9[1] = v8;
  outlined consume of Data._Representation(v10, v11);
  v131 = a3[7];
  v137 = a1 + v131;
  *(_DWORD *)v137 = *(_DWORD *)(a2 + v131);
  v12 = *(_QWORD *)(a2 + v131 + 16);
  v13 = *(_QWORD *)(a1 + v131 + 8);
  v14 = *(_QWORD *)(a1 + v131 + 16);
  *(_QWORD *)(v137 + 8) = *(_QWORD *)(a2 + v131 + 8);
  *(_QWORD *)(v137 + 16) = v12;
  outlined consume of Data._Representation(v13, v14);
  v15 = *(_QWORD *)(a2 + v131 + 32);
  v16 = *(_QWORD *)(a1 + v131 + 24);
  v17 = *(_QWORD *)(a1 + v131 + 32);
  *(_QWORD *)(v137 + 24) = *(_QWORD *)(a2 + v131 + 24);
  *(_QWORD *)(v137 + 32) = v15;
  outlined consume of Data._Representation(v16, v17);
  v136 = (int *)type metadata accessor for GKCrypto_GroupBlob();
  v132 = v136[7];
  v133 = type metadata accessor for UnknownStorage();
  v134 = *(_QWORD *)(v133 - 8);
  v135 = *(void (**)(uint64_t, uint64_t))(v134 + 40);
  v135(a1 + v131 + v132, a2 + v131 + v132);
  v138 = v136[8];
  v139 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys();
  v140 = *(_QWORD *)(v139 - 8);
  v141 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t))v141)(a1 + v131 + v138, 1))
  {
    if (v141(a2 + v131 + v138, 1, v139))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
      memcpy((void *)(a1 + v131 + v138), (const void *)(a2 + v131 + v138), *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v19 = (char *)(a2 + v131 + v138);
      v124 = (char *)(a1 + v131 + v138);
      *(_QWORD *)v124 = *(_QWORD *)v19;
      (*(void (**)(char *, char *, uint64_t))(v134 + 32))(&v124[*(int *)(v139 + 20)], &v19[*(int *)(v139 + 20)], v133);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v140 + 56))(v124, 0, 1, v139);
    }
  }
  else if (v141(a2 + v131 + v138, 1, v139))
  {
    v125 = (void *)(a1 + v131 + v138);
    outlined destroy of GKCrypto_GroupBlob.RandomizedVerificationKeys((uint64_t)v125);
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.RandomizedVerificationKeys?);
    memcpy(v125, (const void *)(a2 + v131 + v138), *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v127 = (_QWORD *)(a2 + v131 + v138);
    v126 = (_QWORD *)(a1 + v131 + v138);
    *v126 = *v127;
    swift_bridgeObjectRelease();
    ((void (*)(char *, char *, uint64_t))v135)((char *)v126 + *(int *)(v139 + 20), (char *)v127 + *(int *)(v139 + 20), v133);
  }
  v120 = (_OWORD *)(a1 + v131 + v136[9]);
  v119 = (_OWORD *)(a2 + v131 + v136[9]);
  v121 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys();
  v122 = *(_QWORD *)(v121 - 8);
  v123 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v122 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v123)(v120, 1))
  {
    if (v123(v119, 1, v121))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
      memcpy(v120, v119, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      *v120 = *v119;
      v120[1] = v119[1];
      v120[2] = v119[2];
      v120[3] = v119[3];
      (*(void (**)(char *, char *, uint64_t))(v134 + 32))((char *)v120 + *(int *)(v121 + 32), (char *)v119 + *(int *)(v121 + 32), v133);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v122 + 56))(v120, 0, 1, v121);
    }
  }
  else if (v123(v119, 1, v121))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobPublicKeys((uint64_t)v120);
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobPublicKeys?);
    memcpy(v120, v119, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v21 = *((_QWORD *)v119 + 1);
    v22 = *(_QWORD *)v120;
    v23 = *((_QWORD *)v120 + 1);
    *(_QWORD *)v120 = *(_QWORD *)v119;
    *((_QWORD *)v120 + 1) = v21;
    outlined consume of Data._Representation(v22, v23);
    v24 = *((_QWORD *)v119 + 3);
    v25 = *((_QWORD *)v120 + 2);
    v26 = *((_QWORD *)v120 + 3);
    *((_QWORD *)v120 + 2) = *((_QWORD *)v119 + 2);
    *((_QWORD *)v120 + 3) = v24;
    outlined consume of Data._Representation(v25, v26);
    v27 = *((_QWORD *)v119 + 5);
    v28 = *((_QWORD *)v120 + 4);
    v29 = *((_QWORD *)v120 + 5);
    *((_QWORD *)v120 + 4) = *((_QWORD *)v119 + 4);
    *((_QWORD *)v120 + 5) = v27;
    outlined consume of Data._Representation(v28, v29);
    v30 = *((_QWORD *)v119 + 7);
    v31 = *((_QWORD *)v120 + 6);
    v32 = *((_QWORD *)v120 + 7);
    *((_QWORD *)v120 + 6) = *((_QWORD *)v119 + 6);
    *((_QWORD *)v120 + 7) = v30;
    outlined consume of Data._Representation(v31, v32);
    ((void (*)(char *, char *, uint64_t))v135)((char *)v120 + *(int *)(v121 + 32), (char *)v119 + *(int *)(v121 + 32), v133);
  }
  __dst = (_OWORD *)(a1 + v131 + v136[10]);
  __src = (_OWORD *)(a2 + v131 + v136[10]);
  v116 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures();
  v117 = *(_QWORD *)(v116 - 8);
  v118 = *(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v117 + 48);
  if (((unsigned int (*)(_OWORD *, uint64_t))v118)(__dst, 1))
  {
    if (v118(__src, 1, v116))
    {
      v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
      memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      *__dst = *__src;
      __dst[1] = __src[1];
      __dst[2] = __src[2];
      (*(void (**)(char *, char *, uint64_t))(v134 + 32))((char *)__dst + *(int *)(v116 + 28), (char *)__src + *(int *)(v116 + 28), v133);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v117 + 56))(__dst, 0, 1, v116);
    }
  }
  else if (v118(__src, 1, v116))
  {
    outlined destroy of GKCrypto_GroupBlob.GroupBlobSignatures((uint64_t)__dst);
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_GroupBlob.GroupBlobSignatures?);
    memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v35 = *((_QWORD *)__src + 1);
    v36 = *(_QWORD *)__dst;
    v37 = *((_QWORD *)__dst + 1);
    *(_QWORD *)__dst = *(_QWORD *)__src;
    *((_QWORD *)__dst + 1) = v35;
    outlined consume of Data._Representation(v36, v37);
    v38 = *((_QWORD *)__src + 3);
    v39 = *((_QWORD *)__dst + 2);
    v40 = *((_QWORD *)__dst + 3);
    *((_QWORD *)__dst + 2) = *((_QWORD *)__src + 2);
    *((_QWORD *)__dst + 3) = v38;
    outlined consume of Data._Representation(v39, v40);
    v41 = *((_QWORD *)__src + 5);
    v42 = *((_QWORD *)__dst + 4);
    v43 = *((_QWORD *)__dst + 5);
    *((_QWORD *)__dst + 4) = *((_QWORD *)__src + 4);
    *((_QWORD *)__dst + 5) = v41;
    outlined consume of Data._Representation(v42, v43);
    ((void (*)(char *, char *, uint64_t))v135)((char *)__dst + *(int *)(v116 + 28), (char *)__src + *(int *)(v116 + 28), v133);
  }
  v46 = type metadata accessor for GroupBlobEnvelope();
  *(_DWORD *)(a1 + v131 + *(int *)(v46 + 20)) = *(_DWORD *)(a2 + v131 + *(int *)(v46 + 20));
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  v110 = (_DWORD *)(a1 + a3[9]);
  v109 = (_DWORD *)(a2 + a3[9]);
  v111 = type metadata accessor for GKCrypto_SignedRSVP();
  v112 = *(_QWORD *)(v111 - 8);
  v113 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v112 + 48);
  if (((unsigned int (*)(_DWORD *, uint64_t))v113)(v110, 1))
  {
    if (v113(v109, 1, v111))
    {
      v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
      memcpy(v110, v109, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      *v110 = *v109;
      *(_OWORD *)(v110 + 2) = *(_OWORD *)(v109 + 2);
      v99 = *(void (**)(char *, char *, uint64_t))(v134 + 32);
      v99((char *)v110 + *(int *)(v111 + 24), (char *)v109 + *(int *)(v111 + 24), v133);
      v100 = (_DWORD *)((char *)v110 + *(int *)(v111 + 28));
      v101 = (_DWORD *)((char *)v109 + *(int *)(v111 + 28));
      v102 = type metadata accessor for GKCrypto_RSVP();
      v103 = *(_QWORD *)(v102 - 8);
      if ((*(unsigned int (**)(_DWORD *, uint64_t))(v103 + 48))(v101, 1))
      {
        v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
        memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        *v100 = *v101;
        *((_QWORD *)v100 + 1) = *((_QWORD *)v101 + 1);
        *((_BYTE *)v100 + 16) = *((_BYTE *)v101 + 16);
        *(_OWORD *)(v100 + 6) = *(_OWORD *)(v101 + 6);
        *(_OWORD *)(v100 + 10) = *(_OWORD *)(v101 + 10);
        *(_OWORD *)(v100 + 14) = *(_OWORD *)(v101 + 14);
        v99((char *)v100 + *(int *)(v102 + 36), (char *)v101 + *(int *)(v102 + 36), v133);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v100, 0, 1, v102);
      }
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v110, 0, 1, v111);
    }
  }
  else if (v113(v109, 1, v111))
  {
    outlined destroy of GKCrypto_SignedRSVP((uint64_t)v110);
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
    memcpy(v110, v109, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    *v110 = *v109;
    v47 = *((_QWORD *)v109 + 2);
    v48 = *((_QWORD *)v110 + 1);
    v49 = *((_QWORD *)v110 + 2);
    *((_QWORD *)v110 + 1) = *((_QWORD *)v109 + 1);
    *((_QWORD *)v110 + 2) = v47;
    outlined consume of Data._Representation(v48, v49);
    ((void (*)(char *, char *, uint64_t))v135)((char *)v110 + *(int *)(v111 + 24), (char *)v109 + *(int *)(v111 + 24), v133);
    v105 = (_DWORD *)((char *)v110 + *(int *)(v111 + 28));
    v104 = (_DWORD *)((char *)v109 + *(int *)(v111 + 28));
    v106 = type metadata accessor for GKCrypto_RSVP();
    v107 = *(_QWORD *)(v106 - 8);
    v108 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v107 + 48);
    if (((unsigned int (*)(_DWORD *, uint64_t))v108)(v105, 1))
    {
      if (v108(v104, 1, v106))
      {
        v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
        memcpy(v105, v104, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        *v105 = *v104;
        *((_QWORD *)v105 + 1) = *((_QWORD *)v104 + 1);
        *((_BYTE *)v105 + 16) = *((_BYTE *)v104 + 16);
        *(_OWORD *)(v105 + 6) = *(_OWORD *)(v104 + 6);
        *(_OWORD *)(v105 + 10) = *(_OWORD *)(v104 + 10);
        *(_OWORD *)(v105 + 14) = *(_OWORD *)(v104 + 14);
        (*(void (**)(char *, char *, uint64_t))(v134 + 32))((char *)v105 + *(int *)(v106 + 36), (char *)v104 + *(int *)(v106 + 36), v133);
        (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v107 + 56))(v105, 0, 1, v106);
      }
    }
    else if (v108(v104, 1, v106))
    {
      outlined destroy of GKCrypto_RSVP((uint64_t)v105);
      v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_RSVP?);
      memcpy(v105, v104, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      *v105 = *v104;
      *((_QWORD *)v105 + 1) = *((_QWORD *)v104 + 1);
      *((_BYTE *)v105 + 16) = *((_BYTE *)v104 + 16);
      v50 = *((_QWORD *)v104 + 4);
      v51 = *((_QWORD *)v105 + 3);
      v52 = *((_QWORD *)v105 + 4);
      *((_QWORD *)v105 + 3) = *((_QWORD *)v104 + 3);
      *((_QWORD *)v105 + 4) = v50;
      outlined consume of Data._Representation(v51, v52);
      v53 = *((_QWORD *)v104 + 6);
      v54 = *((_QWORD *)v105 + 5);
      v55 = *((_QWORD *)v105 + 6);
      *((_QWORD *)v105 + 5) = *((_QWORD *)v104 + 5);
      *((_QWORD *)v105 + 6) = v53;
      outlined consume of Data._Representation(v54, v55);
      v56 = *((_QWORD *)v104 + 8);
      v57 = *((_QWORD *)v105 + 7);
      v58 = *((_QWORD *)v105 + 8);
      *((_QWORD *)v105 + 7) = *((_QWORD *)v104 + 7);
      *((_QWORD *)v105 + 8) = v56;
      outlined consume of Data._Representation(v57, v58);
      ((void (*)(char *, char *, uint64_t))v135)((char *)v105 + *(int *)(v106 + 36), (char *)v104 + *(int *)(v106 + 36), v133);
    }
  }
  v95 = (_DWORD *)(a1 + a3[10]);
  v94 = (_DWORD *)(a2 + a3[10]);
  v96 = type metadata accessor for GKCrypto_SeedBlob();
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v97 + 48);
  if (((unsigned int (*)(_DWORD *, uint64_t))v98)(v95, 1))
  {
    if (v98(v94, 1, v96))
    {
      v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
      memcpy(v95, v94, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    else
    {
      *v95 = *v94;
      *(_OWORD *)(v95 + 2) = *(_OWORD *)(v94 + 2);
      *(_OWORD *)(v95 + 6) = *(_OWORD *)(v94 + 6);
      *(_OWORD *)(v95 + 10) = *(_OWORD *)(v94 + 10);
      v95[14] = v94[14];
      *((_QWORD *)v95 + 8) = *((_QWORD *)v94 + 8);
      *((_BYTE *)v95 + 72) = *((_BYTE *)v94 + 72);
      (*(void (**)(char *, char *, uint64_t))(v134 + 32))((char *)v95 + *(int *)(v96 + 40), (char *)v94 + *(int *)(v96 + 40), v133);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v95, 0, 1, v96);
    }
  }
  else if (v98(v94, 1, v96))
  {
    outlined destroy of GKCrypto_SeedBlob((uint64_t)v95);
    v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
    memcpy(v95, v94, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    *v95 = *v94;
    v64 = *((_QWORD *)v94 + 2);
    v65 = *((_QWORD *)v95 + 1);
    v66 = *((_QWORD *)v95 + 2);
    *((_QWORD *)v95 + 1) = *((_QWORD *)v94 + 1);
    *((_QWORD *)v95 + 2) = v64;
    outlined consume of Data._Representation(v65, v66);
    v67 = *((_QWORD *)v94 + 4);
    v68 = *((_QWORD *)v95 + 3);
    v69 = *((_QWORD *)v95 + 4);
    *((_QWORD *)v95 + 3) = *((_QWORD *)v94 + 3);
    *((_QWORD *)v95 + 4) = v67;
    outlined consume of Data._Representation(v68, v69);
    v70 = *((_QWORD *)v94 + 6);
    v71 = *((_QWORD *)v95 + 5);
    v72 = *((_QWORD *)v95 + 6);
    *((_QWORD *)v95 + 5) = *((_QWORD *)v94 + 5);
    *((_QWORD *)v95 + 6) = v70;
    outlined consume of Data._Representation(v71, v72);
    v95[14] = v94[14];
    *((_QWORD *)v95 + 8) = *((_QWORD *)v94 + 8);
    *((_BYTE *)v95 + 72) = *((_BYTE *)v94 + 72);
    ((void (*)(char *, char *, uint64_t))v135)((char *)v95 + *(int *)(v96 + 40), (char *)v94 + *(int *)(v96 + 40), v133);
  }
  v92 = (_DWORD *)(a1 + a3[11]);
  v93 = (_DWORD *)(a2 + a3[11]);
  if (((unsigned int (*)(void))v98)())
  {
    if (v98(v93, 1, v96))
    {
      v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    }
    else
    {
      *v92 = *v93;
      *(_OWORD *)(v92 + 2) = *(_OWORD *)(v93 + 2);
      *(_OWORD *)(v92 + 6) = *(_OWORD *)(v93 + 6);
      *(_OWORD *)(v92 + 10) = *(_OWORD *)(v93 + 10);
      v92[14] = v93[14];
      *((_QWORD *)v92 + 8) = *((_QWORD *)v93 + 8);
      *((_BYTE *)v92 + 72) = *((_BYTE *)v93 + 72);
      (*(void (**)(char *, char *, uint64_t))(v134 + 32))((char *)v92 + *(int *)(v96 + 40), (char *)v93 + *(int *)(v96 + 40), v133);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v92, 0, 1, v96);
    }
  }
  else if (v98(v93, 1, v96))
  {
    outlined destroy of GKCrypto_SeedBlob((uint64_t)v92);
    v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
  }
  else
  {
    *v92 = *v93;
    v75 = *((_QWORD *)v93 + 2);
    v76 = *((_QWORD *)v92 + 1);
    v77 = *((_QWORD *)v92 + 2);
    *((_QWORD *)v92 + 1) = *((_QWORD *)v93 + 1);
    *((_QWORD *)v92 + 2) = v75;
    outlined consume of Data._Representation(v76, v77);
    v78 = *((_QWORD *)v93 + 4);
    v79 = *((_QWORD *)v92 + 3);
    v80 = *((_QWORD *)v92 + 4);
    *((_QWORD *)v92 + 3) = *((_QWORD *)v93 + 3);
    *((_QWORD *)v92 + 4) = v78;
    outlined consume of Data._Representation(v79, v80);
    v81 = *((_QWORD *)v93 + 6);
    v82 = *((_QWORD *)v92 + 5);
    v83 = *((_QWORD *)v92 + 6);
    *((_QWORD *)v92 + 5) = *((_QWORD *)v93 + 5);
    *((_QWORD *)v92 + 6) = v81;
    outlined consume of Data._Representation(v82, v83);
    v92[14] = v93[14];
    *((_QWORD *)v92 + 8) = *((_QWORD *)v93 + 8);
    *((_BYTE *)v92 + 72) = *((_BYTE *)v93 + 72);
    ((void (*)(char *, char *, uint64_t))v135)((char *)v92 + *(int *)(v96 + 40), (char *)v93 + *(int *)(v96 + 40), v133);
  }
  v90 = a1 + a3[12];
  v91 = a2 + a3[12];
  if (*(_QWORD *)(v90 + 8))
  {
    if (*(_QWORD *)(v91 + 8))
    {
      *(_DWORD *)v90 = *(_DWORD *)v91;
      *(_QWORD *)(v90 + 8) = *(_QWORD *)(v91 + 8);
      swift_bridgeObjectRelease();
      if ((*(_QWORD *)(v90 + 24) & 0xF000000000000000) == 0xF000000000000000)
      {
        *(_OWORD *)(v90 + 16) = *(_OWORD *)(v91 + 16);
      }
      else if ((*(_QWORD *)(v91 + 24) & 0xF000000000000000) == 0xF000000000000000)
      {
        outlined destroy of Data(v90 + 16);
        *(_OWORD *)(v90 + 16) = *(_OWORD *)(v91 + 16);
      }
      else
      {
        v86 = *(_QWORD *)(v91 + 24);
        v87 = *(_QWORD *)(v90 + 16);
        v88 = *(_QWORD *)(v90 + 24);
        *(_QWORD *)(v90 + 16) = *(_QWORD *)(v91 + 16);
        *(_QWORD *)(v90 + 24) = v86;
        outlined consume of Data._Representation(v87, v88);
      }
    }
    else
    {
      outlined destroy of MetaDataServerBlob(v90);
      *(_OWORD *)v90 = *(_OWORD *)v91;
      *(_OWORD *)(v90 + 16) = *(_OWORD *)(v91 + 16);
    }
  }
  else
  {
    *(_OWORD *)v90 = *(_OWORD *)v91;
    *(_OWORD *)(v90 + 16) = *(_OWORD *)(v91 + 16);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CompleteGPKUpdateGroupRequest.Body()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D51B0DC(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v15;
  uint64_t v16;

  v15 = type metadata accessor for GPKGroupID();
  v16 = *(_QWORD *)(v15 - 8);
  if (a2 == *(_DWORD *)(v16 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v16 + 48))(a1, a2, v15);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v10 = -1;
    if (*(_QWORD *)(a1 + a3[5] + 8) < 0x100000000uLL)
      v10 = *(_QWORD *)(a1 + a3[5] + 8);
    return (v10 + 1);
  }
  else
  {
    v8 = type metadata accessor for GroupBlobEnvelope();
    v9 = *(_QWORD *)(v8 - 8);
    if (a2 == *(_DWORD *)(v9 + 84))
    {
      return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v9 + 48))(a1 + a3[7], a2, v8);
    }
    else
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
      v7 = *(_QWORD *)(v6 - 8);
      if (a2 == *(_DWORD *)(v7 + 84))
      {
        return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1 + a3[9], a2, v6);
      }
      else
      {
        v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
        v5 = *(_QWORD *)(v4 - 8);
        if (a2 == *(_DWORD *)(v5 + 84))
          return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v5 + 48))(a1 + a3[10], a2, v4);
        else
          __break(1u);
      }
    }
  }
  return v11;
}

uint64_t storeEnumTagSinglePayload for CompleteGPKUpdateGroupRequest.Body()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D51B2E8(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;

  result = type metadata accessor for GPKGroupID();
  v14 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v14 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v14 + 56))(a1, a2, a2, result);
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + a4[5] + 8) = a2 - 1;
  }
  else
  {
    v8 = type metadata accessor for GroupBlobEnvelope();
    v9 = *(_QWORD *)(v8 - 8);
    if (a3 == *(_DWORD *)(v9 + 84))
    {
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v9 + 56))(a1 + a4[7], a2, a2, v8);
    }
    else
    {
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SignedRSVP?);
      v7 = *(_QWORD *)(v6 - 8);
      if (a3 == *(_DWORD *)(v7 + 84))
      {
        return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v7 + 56))(a1 + a4[9], a2, a2, v6);
      }
      else
      {
        result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GKCrypto_SeedBlob?);
        v5 = *(_QWORD *)(result - 8);
        if (a3 == *(_DWORD *)(v5 + 84))
          return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(a1 + a4[10], a2, a2, result);
        else
          __break(1u);
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for CompleteGPKUpdateGroupRequest.Body()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;

  v5 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    v5 = type metadata accessor for GroupBlobEnvelope();
    if (v1 <= 0x3F)
    {
      v5 = type metadata accessor for GKCrypto_SignedRSVP?();
      if (v2 <= 0x3F)
      {
        v5 = type metadata accessor for GKCrypto_SeedBlob?();
        if (v3 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return v5;
}

uint64_t type metadata accessor for GKCrypto_SignedRSVP?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GKCrypto_SignedRSVP?;
  if (!lazy cache variable for type metadata for GKCrypto_SignedRSVP?)
  {
    type metadata accessor for GKCrypto_SignedRSVP();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GKCrypto_SignedRSVP?);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for GKCrypto_SeedBlob?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for GKCrypto_SeedBlob?;
  if (!lazy cache variable for type metadata for GKCrypto_SeedBlob?)
  {
    type metadata accessor for GKCrypto_SeedBlob();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for GKCrypto_SeedBlob?);
      return v1;
    }
  }
  return v4;
}

uint64_t getEnumTagSinglePayload for CompleteGPKUpdateGroupRequest.Body.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF7)
      goto LABEL_15;
    v7 = ((a2 + 8) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 247;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 9;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for CompleteGPKUpdateGroupRequest.Body.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF7)
  {
    v5 = ((a3 + 8) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF7)
  {
    v4 = ((a2 - 248) >> 8) + 1;
    *result = a2 + 8;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 8;
  }
  return result;
}

uint64_t getEnumTag for CompleteGPKUpdateGroupRequest.Body.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for CompleteGPKUpdateGroupRequest.Body.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CompleteGPKUpdateGroupRequest.Body.CodingKeys()
{
  return &type metadata for CompleteGPKUpdateGroupRequest.Body.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteGPKUpdateGroupRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteGPKUpdateGroupRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteGPKUpdateGroupRequest.Body.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Body.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Body.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in CompleteGPKUpdateGroupRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type CompleteGPKUpdateGroupRequest.Response.CodingKeys and conformance CompleteGPKUpdateGroupRequest.Response.CodingKeys();
}

GroupKitCore::ErrorResponse::CodingKeys_optional __swiftcall ErrorResponse.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v6;
  GroupKitCore::ErrorResponse::CodingKeys_optional v7;

  v1 = _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)v2 = "ec";
  *(_QWORD *)(v2 + 8) = 2;
  *(_BYTE *)(v2 + 16) = 2;
  *(_QWORD *)(v2 + 24) = "em";
  *(_QWORD *)(v2 + 32) = 2;
  *(_BYTE *)(v2 + 40) = 2;
  *(_QWORD *)(v2 + 48) = "delay";
  *(_QWORD *)(v2 + 56) = 5;
  *(_BYTE *)(v2 + 64) = 2;
  _finalizeUninitializedArray<A>(_:)();
  v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = GroupKitCore_ErrorResponse_CodingKeys_errorCode;
LABEL_8:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = GroupKitCore_ErrorResponse_CodingKeys_errorMessage;
      goto LABEL_8;
    case 2:
      v7.value = GroupKitCore_ErrorResponse_CodingKeys_delay;
      goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  return (GroupKitCore::ErrorResponse::CodingKeys_optional)3;
}

GroupKitCore::ErrorResponse::CodingKeys_optional __swiftcall ErrorResponse.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  GroupKitCore::ErrorResponse::CodingKeys_optional v4;

  swift_bridgeObjectRetain();
  v4.value = ErrorResponse.CodingKeys.init(rawValue:)(stringValue).value;
  swift_bridgeObjectRelease();
  if (v4.value == GroupKitCore_ErrorResponse_CodingKeys_unknownDefault)
    return (GroupKitCore::ErrorResponse::CodingKeys_optional)3;
  else
    return v4;
}

GroupKitCore::ErrorResponse::CodingKeys_optional __swiftcall ErrorResponse.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (GroupKitCore::ErrorResponse::CodingKeys_optional)3;
}

uint64_t ErrorResponse.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ErrorResponse.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ec", 2uLL, 1)._countAndFlagsBits;
  if (a1 == 1)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("em", 2uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("delay", 5uLL, 1)._countAndFlagsBits;
}

uint64_t ErrorResponse.CodingKeys.stringValue.getter(char a1)
{
  return ErrorResponse.CodingKeys.rawValue.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ErrorResponse.CodingKeys()
{
  lazy protocol witness table accessor for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ErrorResponse.CodingKeys()
{
  lazy protocol witness table accessor for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ErrorResponse.CodingKeys()
{
  lazy protocol witness table accessor for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance ErrorResponse.CodingKeys()
{
  lazy protocol witness table accessor for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys();
  return RawRepresentable<>._rawHashValue(seed:)();
}

GroupKitCore::ErrorResponse::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ErrorResponse.CodingKeys@<W0>(Swift::String *a1@<X0>, GroupKitCore::ErrorResponse::CodingKeys_optional *a2@<X8>)
{
  GroupKitCore::ErrorResponse::CodingKeys_optional result;

  result.value = ErrorResponse.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ErrorResponse.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v3;

  result = ErrorResponse.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ErrorResponse.CodingKeys()
{
  char *v0;

  return ErrorResponse.CodingKeys.stringValue.getter(*v0);
}

GroupKitCore::ErrorResponse::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ErrorResponse.CodingKeys@<W0>(uint64_t a1@<X0>, GroupKitCore::ErrorResponse::CodingKeys_optional *a2@<X8>)
{
  GroupKitCore::ErrorResponse::CodingKeys_optional result;

  result.value = ErrorResponse.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ErrorResponse.CodingKeys()
{
  return ErrorResponse.CodingKeys.intValue.getter();
}

GroupKitCore::ErrorResponse::CodingKeys_optional protocol witness for CodingKey.init(intValue:) in conformance ErrorResponse.CodingKeys@<W0>(Swift::Int a1@<X0>, GroupKitCore::ErrorResponse::CodingKeys_optional *a2@<X8>)
{
  GroupKitCore::ErrorResponse::CodingKeys_optional result;

  result.value = ErrorResponse.CodingKeys.init(intValue:)(a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ErrorResponse.CodingKeys()
{
  lazy protocol witness table accessor for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ErrorResponse.CodingKeys()
{
  lazy protocol witness table accessor for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ErrorResponse.errorCode.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ErrorResponse.errorMessage.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ErrorResponse.delay.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t ErrorResponse.asError.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v35 = 0;
  v34 = 0;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InternalErrorCode?);
  v22 = (*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v1);
  v31 = (uint64_t)&v15 - v22;
  v32 = type metadata accessor for InternalErrorCode();
  v30 = *(_QWORD *)(v32 - 8);
  v23 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v24 = (char *)&v15 - v23;
  v25 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v15 - v23);
  v26 = (char *)&v15 - v25;
  v35 = (char *)&v15 - v25;
  v34 = v0;
  v38 = *v0;
  v29 = &v33;
  v33 = v38;
  v27 = lazy protocol witness table accessor for type Int and conformance Int();
  v28 = lazy protocol witness table accessor for type Int and conformance Int();
  lazy protocol witness table accessor for type Int64 and conformance Int64();
  SignedInteger<>.init<A>(_:)();
  InternalErrorCode.init(rawValue:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v32) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v26, *MEMORY[0x24BE3DC88], v32);
    outlined destroy of InternalErrorCode?(v31);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v26, v31, v32);
  }
  type metadata accessor for InternalError();
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v24, v26, v32);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  v18 = _allocateUninitializedArray<A>(_:)();
  v16 = v3;
  v4 = static InternalErrorKey.serverErrorCode.getter();
  v5 = v21;
  v7 = v6;
  v8 = v16;
  *v16 = v4;
  v8[1] = v7;
  v37 = *v5;
  v8[5] = MEMORY[0x24BEE4008];
  v8[2] = v37;
  v9 = static InternalErrorKey.serverErrorMessage.getter();
  v10 = v21;
  v11 = v16;
  v16[6] = v9;
  v11[7] = v12;
  v36 = *(_OWORD *)(v10 + 1);
  outlined retain of String();
  v13 = v16;
  v19 = MEMORY[0x24BEE0D00];
  v16[11] = MEMORY[0x24BEE0D00];
  *((_OWORD *)v13 + 4) = v36;
  _finalizeUninitializedArray<A>(_:)();
  Dictionary.init(dictionaryLiteral:)();
  v20 = InternalError.__allocating_init(_:internalInfo:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v26, v32);
  return v20;
}

uint64_t outlined destroy of InternalErrorCode?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for InternalErrorCode();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined retain of String()
{
  swift_bridgeObjectRetain();
}

uint64_t ErrorResponse.init(errorCode:errorMessage:delay:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5 & 1;
  return result;
}

_QWORD *ErrorResponse.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t *v15;
  _QWORD v16[6];
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD v52[3];
  char v53;
  char v54;

  v36 = a2;
  v37 = a1;
  v50 = 0;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ErrorResponse.CodingKeys>);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v37);
  v41 = (char *)v16 - v40;
  v54 = 0;
  v50 = v2;
  v43 = v2[3];
  v44 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v43);
  lazy protocol witness table accessor for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys();
  v3 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v45 = v3;
  v46 = v3;
  if (v3)
  {
    v16[5] = v46;
    v16[1] = v46;
    result = (_QWORD *)__swift_destroy_boxed_opaque_existential_1(v37);
    if ((v54 & 2) != 0)
    {
      result = v52;
      outlined destroy of String();
    }
  }
  else
  {
    v49 = 0;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    v33 = 0;
    v34 = v4;
    v35 = 0;
    v28 = v4;
    v51 = v4;
    v48 = 1;
    v5 = KeyedDecodingContainer.decode(_:forKey:)();
    v29 = 0;
    v30 = v5;
    v31 = v6;
    v32 = 0;
    v22 = v6;
    v21 = v5;
    v23 = 2;
    v54 = 2;
    swift_bridgeObjectRetain();
    v52[0] = v21;
    v52[1] = v22;
    v47 = v23;
    v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v24 = 0;
    v25 = v7;
    v26 = v8;
    v27 = 0;
    v19 = v8;
    v18 = v7;
    v17 = &v51;
    v52[2] = v7;
    v20 = 1;
    v53 = v8 & 1;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
    __swift_destroy_boxed_opaque_existential_1(v37);
    result = v17;
    outlined destroy of ErrorResponse();
    v10 = v21;
    v11 = v22;
    v12 = v18;
    v13 = v19;
    v14 = v20;
    v15 = v36;
    *v36 = v28;
    v15[1] = v10;
    v15[2] = v11;
    v15[3] = v12;
    *((_BYTE *)v15 + 32) = v13 & 1 & v14;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for ErrorResponse.CodingKeys, &type metadata for ErrorResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for ErrorResponse.CodingKeys, &type metadata for ErrorResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for ErrorResponse.CodingKeys, &type metadata for ErrorResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for ErrorResponse.CodingKeys, &type metadata for ErrorResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for ErrorResponse.CodingKeys, &type metadata for ErrorResponse.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ErrorResponse()
{
  swift_bridgeObjectRelease();
}

unint64_t base witness table accessor for Equatable in ErrorResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys();
}

unint64_t base witness table accessor for CustomDebugStringConvertible in ErrorResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in ErrorResponse.CodingKeys()
{
  return lazy protocol witness table accessor for type ErrorResponse.CodingKeys and conformance ErrorResponse.CodingKeys();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance ErrorResponse@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t __src[5];

  result = ErrorResponse.init(from:)(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x21uLL);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ErrorResponse(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for ErrorResponse()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ErrorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return result;
}

uint64_t assignWithCopy for ErrorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  result = a1;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy33_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x21uLL);
}

uint64_t assignWithTake for ErrorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  result = a1;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return result;
}

uint64_t getEnumTagSinglePayload for ErrorResponse(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 33))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 16)))
        v3 = *(_QWORD *)(a1 + 16);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ErrorResponse(uint64_t result, int a2, int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 33);
  if (a2 < 0)
  {
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 + 0x80000000;
    *(_BYTE *)(result + 32) = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      *(_QWORD *)(result + 16) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ErrorResponse()
{
  return &type metadata for ErrorResponse;
}

uint64_t getEnumTagSinglePayload for ErrorResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for ErrorResponse.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for ErrorResponse.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for ErrorResponse.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ErrorResponse.CodingKeys()
{
  return &type metadata for ErrorResponse.CodingKeys;
}

uint64_t InitFetchRSVPQueueRequest.Response.groupId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  v1 = type metadata accessor for GPKGroupID();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1);
}

uint64_t *InitFetchRSVPQueueRequest.Response.nonce.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t RSVPQueue;

  RSVPQueue = type metadata accessor for InitFetchRSVPQueueRequest.Response();
  return outlined init with copy of Nonce((uint64_t *)(v1 + *(int *)(RSVPQueue + 20)), a1);
}

uint64_t type metadata accessor for InitFetchRSVPQueueRequest.Response()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for InitFetchRSVPQueueRequest.Response;
  if (!type metadata singleton initialization cache for InitFetchRSVPQueueRequest.Response)
    return swift_getSingletonMetadata();
  return v1;
}

BOOL static InitFetchRSVPQueueRequest.Response.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t InitFetchRSVPQueueRequest.Response.CodingKeys.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t InitFetchRSVPQueueRequest.Response.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
LABEL_6:
    swift_bridgeObjectRelease();
    return v4 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v4 = 1;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t InitFetchRSVPQueueRequest.Response.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t InitFetchRSVPQueueRequest.Response.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchRSVPQueueRequest.Response.CodingKeys, &type metadata for InitFetchRSVPQueueRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchRSVPQueueRequest.Response.CodingKeys, &type metadata for InitFetchRSVPQueueRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchRSVPQueueRequest.Response.CodingKeys, &type metadata for InitFetchRSVPQueueRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchRSVPQueueRequest.Response.CodingKeys, &type metadata for InitFetchRSVPQueueRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys;
  if (!lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchRSVPQueueRequest.Response.CodingKeys, &type metadata for InitFetchRSVPQueueRequest.Response.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t InitFetchRSVPQueueRequest.Response.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t InitFetchRSVPQueueRequest.Response.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nonce", 5uLL, 1)._countAndFlagsBits;
  else
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("groupId", 7uLL, 1)._countAndFlagsBits;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InitFetchRSVPQueueRequest.Response.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  return static InitFetchRSVPQueueRequest.Response.CodingKeys.== infix(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance InitFetchRSVPQueueRequest.Response.CodingKeys()
{
  return InitFetchRSVPQueueRequest.Response.CodingKeys.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InitFetchRSVPQueueRequest.Response.CodingKeys()
{
  return InitFetchRSVPQueueRequest.Response.CodingKeys.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InitFetchRSVPQueueRequest.Response.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InitFetchRSVPQueueRequest.Response.CodingKeys()
{
  _BYTE *v0;

  return InitFetchRSVPQueueRequest.Response.CodingKeys.stringValue.getter(*v0 & 1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InitFetchRSVPQueueRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitFetchRSVPQueueRequest.Response.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance InitFetchRSVPQueueRequest.Response.CodingKeys()
{
  return InitFetchRSVPQueueRequest.Response.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance InitFetchRSVPQueueRequest.Response.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = InitFetchRSVPQueueRequest.Response.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InitFetchRSVPQueueRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InitFetchRSVPQueueRequest.Response.CodingKeys()
{
  lazy protocol witness table accessor for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t InitFetchRSVPQueueRequest.Response.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD v31[2];
  char v32;
  uint64_t v33;
  _QWORD *v34;

  v15 = a1;
  v34 = 0;
  v33 = 0;
  v25 = type metadata accessor for GPKGroupID();
  v21 = *(_QWORD *)(v25 - 8);
  v14 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)v7 - v14;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InitFetchRSVPQueueRequest.Response.CodingKeys>);
  v16 = *(_QWORD *)(v24 - 8);
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v7 - v17;
  v34 = v2;
  v33 = v1;
  v18 = v2[3];
  v19 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v18);
  lazy protocol witness table accessor for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v27, v22, v25);
  v23 = &v32;
  v32 = 0;
  lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
  v3 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  v28 = v3;
  v29 = v3;
  if (v3)
  {
    v7[2] = v29;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v25);
    v4 = (uint64_t *)(v22 + *(int *)(type metadata accessor for InitFetchRSVPQueueRequest.Response() + 20));
    v8 = *v4;
    v9 = v4[1];
    outlined copy of Data._Representation(v8, v9);
    v11 = v31;
    v31[0] = v8;
    v31[1] = v9;
    v10 = &v30;
    v30 = 1;
    lazy protocol witness table accessor for type Nonce and conformance Nonce();
    v5 = v28;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = v5;
    v13 = v5;
    if (v5)
      v7[1] = v13;
    outlined destroy of Nonce((uint64_t)v31);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v24);
  }
}

uint64_t InitFetchRSVPQueueRequest.Response.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t RSVPQueue;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  char v47;

  v23 = a2;
  v32 = a1;
  v46 = 0;
  v28 = 0;
  v24 = type metadata accessor for GPKGroupID();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v12 - v26;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InitFetchRSVPQueueRequest.Response.CodingKeys>);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v28);
  v36 = (char *)&v12 - v31;
  RSVPQueue = type metadata accessor for InitFetchRSVPQueueRequest.Response();
  v34 = (*(_QWORD *)(*(_QWORD *)(RSVPQueue - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v32);
  v35 = (uint64_t)&v12 - v34;
  v47 = 0;
  v46 = v2;
  v38 = v2[3];
  v39 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v38);
  lazy protocol witness table accessor for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys();
  v3 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v40 = v3;
  v41 = v3;
  if (v3)
  {
    v15 = v41;
  }
  else
  {
    v20 = &v45;
    v45 = 0;
    lazy protocol witness table accessor for type GPKGroupID and conformance GPKGroupID();
    v4 = v40;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v4;
    v22 = v4;
    if (v4)
    {
      v14 = v22;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v14;
    }
    else
    {
      v16 = 1;
      v47 = 1;
      (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v35, v27, v24);
      v17 = &v42;
      v42 = v16;
      lazy protocol witness table accessor for type Nonce and conformance Nonce();
      v5 = v21;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v18 = v5;
      v19 = v5;
      if (!v5)
      {
        v6 = v29;
        v7 = v36;
        v8 = v30;
        v9 = v44;
        v10 = (_QWORD *)(v35 + *(int *)(RSVPQueue + 20));
        v47 = 3;
        *v10 = v43;
        v10[1] = v9;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v6);
        outlined init with copy of InitFetchRSVPQueueRequest.Response(v35, v23);
        __swift_destroy_boxed_opaque_existential_1(v32);
        return outlined destroy of InitFetchRSVPQueueRequest.Response(v35);
      }
      v13 = v19;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v29);
      v15 = v13;
    }
  }
  v12 = v15;
  result = __swift_destroy_boxed_opaque_existential_1(v32);
  if ((v47 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v35, v24);
  return result;
}

uint64_t outlined init with copy of InitFetchRSVPQueueRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a2, a1);
  v6 = *(int *)(type metadata accessor for InitFetchRSVPQueueRequest.Response() + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  outlined copy of Data._Representation(v7, v8);
  result = a2;
  v4 = (uint64_t *)(a2 + v6);
  *v4 = v7;
  v4[1] = v8;
  return result;
}

uint64_t outlined destroy of InitFetchRSVPQueueRequest.Response(uint64_t a1)
{
  uint64_t v1;
  uint64_t RSVPQueue;

  v1 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v1 - 8) + 8))(a1);
  RSVPQueue = type metadata accessor for InitFetchRSVPQueueRequest.Response();
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(RSVPQueue + 20)), *(_QWORD *)(a1 + *(int *)(RSVPQueue + 20) + 8));
  return a1;
}

uint64_t InitFetchRSVPQueueRequest.Response.init(groupId:nonce:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  v8 = *a2;
  v9 = a2[1];
  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a3, a1);
  result = type metadata accessor for InitFetchRSVPQueueRequest.Response();
  v5 = (_QWORD *)(a3 + *(int *)(result + 20));
  *v5 = v8;
  v5[1] = v9;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance InitFetchRSVPQueueRequest.Response@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InitFetchRSVPQueueRequest.Response.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InitFetchRSVPQueueRequest.Response(uint64_t a1)
{
  return InitFetchRSVPQueueRequest.Response.encode(to:)(a1);
}

void variable initialization expression of InitFetchRSVPQueueRequest.bodyContent(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

uint64_t InitFetchRSVPQueueRequest.bodyContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Any?(v1, a1);
}

uint64_t InitFetchRSVPQueueRequest.bodyContent.setter(uint64_t a1)
{
  uint64_t v2;
  _OWORD v4[2];

  outlined init with copy of Any?(a1, (uint64_t)v4);
  outlined assign with take of Any?(v4, v2);
  return outlined destroy of Any?(a1);
}

uint64_t (*InitFetchRSVPQueueRequest.bodyContent.modify())()
{
  return InitFetchRSVPQueueRequest.bodyContent.modify;
}

uint64_t InitFetchRSVPQueueRequest.init(groupID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  v14 = a1;
  memset(v15, 0, sizeof(v15));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v8 = v2;
  v3 = HTTPBodyKey.groupID.unsafeMutableAddressor();
  outlined init with copy of String(v3, v8);
  v4 = GPKGroupID.hexString.getter();
  v8[5] = MEMORY[0x24BEE0D00];
  v8[2] = v4;
  v8[3] = v5;
  _finalizeUninitializedArray<A>(_:)();
  v13 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
  *(_QWORD *)&v11 = v13;
  outlined assign with take of Any?(&v11, (uint64_t)v15);
  swift_bridgeObjectRelease();
  outlined init with copy of InitFetchRSVPQueueRequest((uint64_t)v15, a2);
  v6 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1);
  return outlined destroy of InitFetchRSVPQueueRequest((uint64_t)v15);
}

uint64_t outlined init with copy of InitFetchRSVPQueueRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    v2 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a2 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  }
  return a2;
}

uint64_t outlined destroy of InitFetchRSVPQueueRequest(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t InitFetchRSVPQueueRequest.urlBagKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)URLBagKey.initFetchRSVPQueue.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t associated type witness table accessor for NetworkRequest.Response : Decodable in InitFetchRSVPQueueRequest()
{
  return lazy protocol witness table accessor for type InitFetchRSVPQueueRequest.Response and conformance InitFetchRSVPQueueRequest.Response();
}

unint64_t lazy protocol witness table accessor for type InitFetchRSVPQueueRequest.Response and conformance InitFetchRSVPQueueRequest.Response()
{
  uint64_t RSVPQueue;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response and conformance InitFetchRSVPQueueRequest.Response;
  if (!lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response and conformance InitFetchRSVPQueueRequest.Response)
  {
    RSVPQueue = type metadata accessor for InitFetchRSVPQueueRequest.Response();
    v1 = MEMORY[0x242635504](&protocol conformance descriptor for InitFetchRSVPQueueRequest.Response, RSVPQueue);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type InitFetchRSVPQueueRequest.Response and conformance InitFetchRSVPQueueRequest.Response);
    return v1;
  }
  return v3;
}

uint64_t protocol witness for NetworkRequest.urlBagKey.getter in conformance InitFetchRSVPQueueRequest()
{
  return InitFetchRSVPQueueRequest.urlBagKey.getter();
}

uint64_t protocol witness for NetworkRequest.httpMethod.getter in conformance InitFetchRSVPQueueRequest()
{
  return NetworkRequest.httpMethod.getter();
}

uint64_t protocol witness for NetworkRequest.bodyContent.getter in conformance InitFetchRSVPQueueRequest@<X0>(uint64_t a1@<X8>)
{
  return InitFetchRSVPQueueRequest.bodyContent.getter(a1);
}

uint64_t protocol witness for NetworkRequest.contentType.getter in conformance InitFetchRSVPQueueRequest()
{
  return NetworkRequest.contentType.getter();
}

uint64_t initializeBufferWithCopyOfBuffer for InitFetchRSVPQueueRequest(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for InitFetchRSVPQueueRequest(uint64_t result)
{
  if (*(_QWORD *)(result + 24))
    return __swift_destroy_boxed_opaque_existential_0(result);
  return result;
}

uint64_t initializeWithCopy for InitFetchRSVPQueueRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for InitFetchRSVPQueueRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      __swift_assign_boxed_opaque_existential_0(a1, (uint64_t *)a2);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_0(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
  }
  else if (*(_QWORD *)(a2 + 24))
  {
    v2 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v2;
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t assignWithTake for InitFetchRSVPQueueRequest(uint64_t a1, _OWORD *a2)
{
  if (*(_QWORD *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InitFetchRSVPQueueRequest(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 > 0x7FFFFFFE && *(_BYTE *)(a1 + 32))
    {
      v5 = *(_QWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (*(_QWORD *)(a1 + 24) < 0x100000000uLL)
        v4 = *(_QWORD *)(a1 + 24);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InitFetchRSVPQueueRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFE;
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFE)
    {
      if (v3)
        *(_BYTE *)(result + 32) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for InitFetchRSVPQueueRequest()
{
  return &type metadata for InitFetchRSVPQueueRequest;
}

unint64_t initializeBufferWithCopyOfBuffer for InitFetchRSVPQueueRequest.Response(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int v14;

  v14 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v14 & 0x20000) != 0)
  {
    v9 = *a2;
    swift_retain();
    *a1 = v9;
    return *a1 + ((v14 + 16) & ~(unint64_t)v14);
  }
  else
  {
    v3 = type metadata accessor for GPKGroupID();
    (*(void (**)(_QWORD *, uint64_t *))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
    v7 = (_QWORD *)((char *)a1 + *(int *)(a3 + 20));
    v4 = (uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v6 = *v4;
    v8 = v4[1];
    outlined copy of Data._Representation(*v4, v8);
    *v7 = v6;
    v7[1] = v8;
    return (unint64_t)a1;
  }
}

uint64_t destroy for InitFetchRSVPQueueRequest.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for InitFetchRSVPQueueRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, a2);
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a2 + v8 + 8);
  outlined copy of Data._Representation(v9, v10);
  result = a1;
  v5 = (uint64_t *)(a1 + v8);
  *v5 = v9;
  v5[1] = v10;
  return result;
}

uint64_t assignWithCopy for InitFetchRSVPQueueRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 24))(a1, a2);
  v10 = *(int *)(a3 + 20);
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a2 + v10 + 8);
  outlined copy of Data._Representation(v11, v12);
  v4 = (uint64_t *)(a1 + v10);
  v5 = *(_QWORD *)(a1 + v10);
  v6 = *(_QWORD *)(a1 + v10 + 8);
  *v4 = v11;
  v4[1] = v12;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

__n128 initializeWithTake for InitFetchRSVPQueueRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32))(a1, a2);
  result = *(__n128 *)(a2 + *(int *)(a3 + 20));
  *(__n128 *)(a1 + *(int *)(a3 + 20)) = result;
  return result;
}

uint64_t assignWithTake for InitFetchRSVPQueueRequest.Response(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v3 = type metadata accessor for GPKGroupID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(a1, a2);
  v4 = (uint64_t *)(a2 + *(int *)(a3 + 20));
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(a1 + *(int *)(a3 + 20));
  v8 = *v7;
  v9 = v7[1];
  *v7 = v5;
  v7[1] = v6;
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitFetchRSVPQueueRequest.Response()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D51F4B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;

  v10 = type metadata accessor for GPKGroupID();
  v11 = *(_QWORD *)(v10 - 8);
  if (a2 == *(_DWORD *)(v11 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v11 + 48))(a1, a2, v10);
  }
  else if (a2 == 12)
  {
    v3 = HIBYTE(*(_QWORD *)(a1 + *(int *)(a3 + 20) + 8)) >> 4;
    v4 = 15 - (((4 * v3) | (v3 >> 2)) & 0xF);
    if (v4 >= 0xC)
      v4 = -1;
    return v4 + 1;
  }
  else
  {
    __break(1u);
  }
  return v6;
}

uint64_t storeEnumTagSinglePayload for InitFetchRSVPQueueRequest.Response()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D51F5B4(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v10;

  result = type metadata accessor for GPKGroupID();
  v10 = *(_QWORD *)(result - 8);
  if (a3 == *(_DWORD *)(v10 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v10 + 56))(a1, a2, a2, result);
  if (a3 == 12)
  {
    v5 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v5 = 0;
    v5[1] = (unint64_t)(((~(a2 - 1) & 0xF) >> 2) | (4 * (~(a2 - 1) & 0xF))) << 60;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata completion function for InitFetchRSVPQueueRequest.Response()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for GPKGroupID();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for InitFetchRSVPQueueRequest.Response.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFE)
      goto LABEL_15;
    v7 = ((a2 + 1) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 2;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for InitFetchRSVPQueueRequest.Response.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFE)
  {
    v5 = ((a3 + 1) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFE)
  {
    v4 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for InitFetchRSVPQueueRequest.Response.CodingKeys(_BYTE *a1)
{
  return *a1 & 1;
}

_BYTE *destructiveInjectEnumTag for InitFetchRSVPQueueRequest.Response.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for InitFetchRSVPQueueRequest.Response.CodingKeys()
{
  return &type metadata for InitFetchRSVPQueueRequest.Response.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in InitFetchRSVPQueueRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in InitFetchRSVPQueueRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys();
}

unint64_t base witness table accessor for Equatable in InitFetchRSVPQueueRequest.Response.CodingKeys()
{
  return lazy protocol witness table accessor for type InitFetchRSVPQueueRequest.Response.CodingKeys and conformance InitFetchRSVPQueueRequest.Response.CodingKeys();
}

uint64_t GPKGroupID.serverHash.getter()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = GPKGroupID.data.getter();
  v3 = v0;
  v4 = Data.serverHash.getter(v2, v0);
  outlined consume of Data._Representation(v2, v3);
  return v4;
}

uint64_t Data.serverHash.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;

  v27 = a1;
  v26 = a2;
  v17 = "Fatal error";
  v18 = "Unexpectedly found nil while unwrapping an Optional value";
  v19 = "GroupKitCore/GroupKit+Crypto.swift";
  v37 = 0;
  v38 = 0;
  v21 = 0;
  v33 = type metadata accessor for String.Encoding();
  v30 = *(_QWORD *)(v33 - 8);
  v20 = (*(_QWORD *)(v30 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v31 = (char *)v9 - v20;
  v22 = type metadata accessor for SHA256Digest();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)v9 - v24;
  v37 = v2;
  v38 = v3;
  v28 = type metadata accessor for SHA256();
  v29 = Data.hexString.getter();
  v34 = v4;
  static String.Encoding.utf8.getter();
  default argument 1 of String.data(using:allowLossyConversion:)();
  v32 = String.data(using:allowLossyConversion:)();
  v35 = v5;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v33);
  swift_bridgeObjectRelease();
  if ((v35 & 0xF000000000000000) == 0xF000000000000000)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v15 = v32;
    v16 = v35;
  }
  v10 = v36;
  v36[0] = v15;
  v36[1] = v16;
  v9[1] = lazy protocol witness table accessor for type SHA256 and conformance SHA256();
  lazy protocol witness table accessor for type Data and conformance Data();
  static HashFunction.hash<A>(data:)();
  outlined destroy of Data((uint64_t)v10);
  lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest();
  v11 = Digest.data.getter();
  v12 = v6;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  v13 = Data.hexString.getter();
  v14 = v7;
  outlined consume of Data._Representation(v11, v12);
  return v13;
}

uint64_t Digest.bytes.getter()
{
  Digest.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[UInt8]>);
  lazy protocol witness table accessor for type IndexingIterator<[UInt8]> and conformance IndexingIterator<A>();
  return Array.init<A>(_:)();
}

uint64_t Digest.data.getter()
{
  Digest.bytes.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [UInt8] and conformance [A]();
  return Data.init<A>(_:)();
}

uint64_t default argument 1 of String.data(using:allowLossyConversion:)()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SHA256 and conformance SHA256;
  if (!lazy protocol witness table cache variable for type SHA256 and conformance SHA256)
  {
    v0 = type metadata accessor for SHA256();
    v1 = MEMORY[0x242635504](MEMORY[0x24BDC6AE8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest;
  if (!lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest)
  {
    v0 = type metadata accessor for SHA256Digest();
    v1 = MEMORY[0x242635504](MEMORY[0x24BDC62E8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<[UInt8]> and conformance IndexingIterator<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type IndexingIterator<[UInt8]> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<[UInt8]> and conformance IndexingIterator<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for IndexingIterator<[UInt8]>);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE2C10], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<[UInt8]> and conformance IndexingIterator<A>);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [UInt8] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t String.utf8toHexHash.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v14 = a1;
  v13 = a2;
  v27 = 0;
  v28 = 0;
  v11 = 0;
  v20 = type metadata accessor for SHA256Digest();
  v18 = *(_QWORD *)(v20 - 8);
  v12 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0);
  v19 = (char *)&v11 - v12;
  v27 = v2;
  v28 = v3;
  type metadata accessor for SHA256();
  v4 = MEMORY[0x242634964](v14, v13);
  v15 = v26;
  v26[0] = v4;
  v26[1] = v5;
  lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
  v6 = Data.init<A>(_:)();
  v17 = v25;
  v25[0] = v6;
  v25[1] = v7;
  v16 = lazy protocol witness table accessor for type SHA256 and conformance SHA256();
  lazy protocol witness table accessor for type Data and conformance Data();
  static HashFunction.hash<A>(data:)();
  outlined destroy of Data((uint64_t)v17);
  lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest();
  v21 = Digest.data.getter();
  v22 = v8;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v20);
  v23 = Data.hexString.getter();
  v24 = v9;
  outlined consume of Data._Representation(v21, v22);
  return v23;
}

uint64_t NetworkingService.session.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of NetworkingSession(v1 + 16, a1);
}

uint64_t NetworkingService.urlBag.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 56);
  swift_unknownObjectRetain();
  return v2;
}

uint64_t NetworkingService.transformers.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v2;
}

double NetworkingService.timeoutInterval.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 72);
}

uint64_t NetworkingService.accountStore.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AccountStore(v1 + 80, a1);
}

uint64_t NetworkingService.maxRetries.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t variable initialization expression of NetworkingService.clientIdentifier()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t countAndFlagsBits;

  v6 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v7 = objc_msgSend(v6, sel_bundleIdentifier);
  if (v7)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v3 = v0;

    v4 = v2;
    v5 = v3;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }

  if (v5)
    return v4;
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd", 0x13uLL, 1)._countAndFlagsBits;
  outlined destroy of String?();
  return countAndFlagsBits;
}

uint64_t NetworkingService.clientIdentifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t NetworkingService.clientIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*NetworkingService.clientIdentifier.modify())()
{
  swift_beginAccess();
  return NetworkingService.clientIdentifier.modify;
}

uint64_t NetworkingService.clientIdentifier.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of NetworkingService.httpSuccessRange()
{
  return 200;
}

uint64_t variable initialization expression of NetworkingService.backoffDelayHTTPCode()
{
  return 401;
}

uint64_t variable initialization expression of NetworkingService.httpUnauthorized()
{
  return 401;
}

uint64_t variable initialization expression of NetworkingService.httpNotFound()
{
  return 404;
}

double default argument 3 of NetworkingService.init(session:urlBag:transformers:timeoutInterval:accountStore:maxRetries:)()
{
  return 30.0;
}

uint64_t NetworkingService.__allocating_init(session:urlBag:transformers:timeoutInterval:accountStore:maxRetries:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  swift_allocObject();
  return NetworkingService.init(session:urlBag:transformers:timeoutInterval:accountStore:maxRetries:)(a1, a2, a3, a4, a5, a6);
}

uint64_t NetworkingService.init(session:urlBag:transformers:timeoutInterval:accountStore:maxRetries:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  void *v6;
  void *object;
  Swift::String v9;
  Swift::String v10;
  uint64_t v17;
  id v18;
  id v19;
  _BYTE v20[40];
  _BYTE v21[40];
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v24 = 0;
  v30 = a1;
  v29 = a2;
  v28 = a3;
  v27 = a6;
  v26 = a4;
  v25 = a5;
  v18 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v19 = objc_msgSend(v18, sel_bundleIdentifier);
  if (v19)
  {
    v9._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9._object = v6;

    v10 = v9;
  }
  else
  {
    v10 = (Swift::String)0;
  }

  v22 = v10;
  if (v10._object)
  {
    v23 = v22;
  }
  else
  {
    v23 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.groupkitd", 0x13uLL, 1);
    outlined destroy of String?();
  }
  object = v23._object;
  *(_QWORD *)(v17 + 128) = v23._countAndFlagsBits;
  *(_QWORD *)(v17 + 136) = object;
  *(_QWORD *)(v17 + 144) = 200;
  *(_QWORD *)(v17 + 152) = 299;
  *(_QWORD *)(v17 + 160) = 401;
  *(_QWORD *)(v17 + 168) = 401;
  *(_QWORD *)(v17 + 176) = 404;
  *(Swift::String *)(v17 + 184) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ShouldForce", 0xBuLL, 1);
  *(Swift::String *)(v17 + 200) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ShouldAvoidUI", 0xDuLL, 1);
  outlined init with copy of NetworkingSession(a1, (uint64_t)v21);
  outlined init with take of NetworkingSession(v21, (void *)(v17 + 16));
  swift_unknownObjectRetain();
  *(_QWORD *)(v17 + 56) = a2;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v17 + 64) = a3;
  *(double *)(v17 + 72) = a6;
  outlined init with copy of AccountStore(a4, (uint64_t)v20);
  outlined init with take of AccountStore(v20, (void *)(v17 + 80));
  *(_QWORD *)(v17 + 120) = a5;
  __swift_destroy_boxed_opaque_existential_1(a4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v17;
}

uint64_t variable initialization expression of NetworkingService.renewCredentialsShouldForceKey()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ShouldForce", 0xBuLL, 1)._countAndFlagsBits;
}

uint64_t variable initialization expression of NetworkingService.renewCredentialsShouldAvoidUIKey()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ShouldAvoidUI", 0xDuLL, 1)._countAndFlagsBits;
}

uint64_t NetworkingService.send<A>(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v5 + 1120) = v4;
  *(_QWORD *)(v5 + 1112) = a4;
  *(_QWORD *)(v5 + 1104) = a3;
  *(_QWORD *)(v5 + 1096) = a2;
  *(_QWORD *)(v5 + 1088) = a1;
  *(_QWORD *)(v5 + 872) = v5;
  *(_QWORD *)(v5 + 880) = 0;
  *(_QWORD *)(v5 + 888) = 0;
  *(_QWORD *)(v5 + 360) = 0;
  *(_QWORD *)(v5 + 368) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_QWORD *)(v5 + 304) = 0;
  *(_QWORD *)(v5 + 904) = 0;
  *(_QWORD *)(v5 + 920) = 0;
  *(_QWORD *)(v5 + 928) = 0;
  *(_QWORD *)(v5 + 680) = 0;
  *(_QWORD *)(v5 + 688) = 0;
  *(_QWORD *)(v5 + 1008) = 0;
  *(_QWORD *)(v5 + 1024) = 0;
  *(_QWORD *)(v5 + 1032) = 0;
  *(_QWORD *)(v5 + 1048) = 0;
  *(_BYTE *)(v5 + 1440) = 0;
  *(_QWORD *)(v5 + 808) = 0;
  *(_QWORD *)(v5 + 816) = 0;
  *(_QWORD *)(v5 + 824) = 0;
  *(_QWORD *)(v5 + 832) = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(_QWORD *)(v5 + 1128) = AssociatedTypeWitness;
  *(_QWORD *)(v5 + 1136) = *(_QWORD *)(AssociatedTypeWitness - 8);
  *(_QWORD *)(v5 + 1144) = swift_task_alloc();
  *(_QWORD *)(v5 + 1152) = swift_task_alloc();
  v7 = type metadata accessor for DictionaryDecoder.DataDecodingStrategy();
  *(_QWORD *)(v5 + 1160) = v7;
  *(_QWORD *)(v5 + 1168) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 1176) = swift_task_alloc();
  v8 = type metadata accessor for ContinuousClock();
  *(_QWORD *)(v5 + 1184) = v8;
  *(_QWORD *)(v5 + 1192) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 1200) = swift_task_alloc();
  v9 = type metadata accessor for InternalErrorCode();
  *(_QWORD *)(v5 + 1208) = v9;
  *(_QWORD *)(v5 + 1216) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 1224) = swift_task_alloc();
  type metadata accessor for String.Encoding();
  *(_QWORD *)(v5 + 1232) = swift_task_alloc();
  v10 = type metadata accessor for URLRequest();
  *(_QWORD *)(v5 + 1240) = v10;
  *(_QWORD *)(v5 + 1248) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 1256) = swift_task_alloc();
  v11 = type metadata accessor for LogSubsystem();
  *(_QWORD *)(v5 + 1264) = v11;
  *(_QWORD *)(v5 + 1272) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 1280) = swift_task_alloc();
  *(_QWORD *)(v5 + 880) = a2;
  *(_QWORD *)(v5 + 888) = v4;
  return swift_task_switch();
}

uint64_t NetworkingService.send<A>(request:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  void (*v7)(uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  void (*v9)(uint64_t *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v15 = v0[160];
  v14 = v0[159];
  v16 = v0[158];
  v17 = v0[139];
  v19 = v0[138];
  v18 = v0[137];
  v0[109] = (uint64_t)v0;
  v12 = (*(uint64_t (**)(void))(v17 + 24))();
  v13 = v1;
  v0[161] = v12;
  v0[162] = v1;
  v0[45] = v12;
  v0[46] = v1;
  v0[47] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[48] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Performing network request with key: ", 0x25uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v0[49] = v12;
  v0[50] = v13;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
  v5 = *MEMORY[0x24BE3DA98];
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 104);
  v0[163] = (uint64_t)v6;
  v6(v15, v5, v16);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  gpklog(_:type:fileID:line:subsystem:)();
  v7 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v0[164] = (uint64_t)v7;
  v7(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v0[51] = 0;
  v0[52] = 0xF000000000000000;
  v0[112] = 0;
  v0[5] = v19;
  v0[6] = v17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  v9 = *(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
  v0[165] = (uint64_t)v9;
  v9(boxed_opaque_existential_1, v18);
  v20 = (_QWORD *)swift_task_alloc();
  v0[166] = (uint64_t)v20;
  *v20 = v0[109];
  v20[1] = NetworkingService.send<A>(request:);
  return NetworkingService.buildURLRequest(for:)(v0[157], v11 + 16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1 + 16;
  *(_QWORD *)(v2 + 872) = *v1;
  *(_QWORD *)(v2 + 1336) = v0;
  swift_task_dealloc();
  if (!v0)
    __swift_destroy_boxed_opaque_existential_1(v4);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD, uint64_t, uint64_t);
  _QWORD *v26;
  void (*v27)(uint64_t, _QWORD, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, _QWORD, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  *(_QWORD *)(v0 + 872) = v0;
  v41 = URLRequest.allHTTPHeaderFields.getter();
  if (v41)
  {
    v1 = *(_QWORD *)(v40 + 1336);
    *(_QWORD *)(v40 + 1080) = v41;
    v39 = swift_task_alloc();
    *(_QWORD *)(v39 + 16) = closure #1 in NetworkingService.send<A>(request:);
    *(_QWORD *)(v39 + 24) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance [A : B]();
    result = Sequence.forEach(_:)();
    if (v1)
      return result;
    swift_task_dealloc();
    outlined destroy of [String : String]();
  }
  v37 = URLRequest.httpBody.getter();
  v38 = v3;
  if ((v3 & 0xF000000000000000) != 0xF000000000000000)
  {
    *(_QWORD *)(v40 + 808) = v37;
    *(_QWORD *)(v40 + 816) = v3;
    static String.Encoding.utf8.getter();
    v35 = String.init(data:encoding:)();
    v36 = v4;
    if (v4)
    {
      v34 = *(void (**)(uint64_t, uint64_t))(v40 + 1312);
      v31 = *(void (**)(uint64_t, _QWORD, uint64_t))(v40 + 1304);
      v32 = *(_QWORD *)(v40 + 1280);
      v33 = *(_QWORD *)(v40 + 1264);
      *(_QWORD *)(v40 + 824) = v35;
      *(_QWORD *)(v40 + 832) = v4;
      *(_QWORD *)(v40 + 840) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v40 + 848) = v5;
      v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HTTP Body: ", 0xBuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v6);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v40 + 856) = v35;
      *(_QWORD *)(v40 + 864) = v36;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
      v31(v32, *MEMORY[0x24BE3DA98], v33);
      default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
      gpklog(_:type:fileID:line:subsystem:)();
      v34(v32, v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v37, v38);
      goto LABEL_9;
    }
    outlined consume of Data._Representation(v37, v38);
  }
  v30 = *(void (**)(uint64_t, uint64_t))(v40 + 1312);
  v27 = *(void (**)(uint64_t, _QWORD, uint64_t))(v40 + 1304);
  v28 = *(_QWORD *)(v40 + 1280);
  v29 = *(_QWORD *)(v40 + 1264);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HTTP Body: empty", 0x10uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
  v27(v28, *MEMORY[0x24BE3DA98], v29);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  gpklog(_:type:fileID:line:subsystem:)();
  v30(v28, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_9:
  if (*(uint64_t *)(*(_QWORD *)(v40 + 1120) + 120) < 0)
    return _assertionFailure(_:_:file:line:flags:)();
  *(_QWORD *)(v40 + 288) = specialized Collection<>.makeIterator()();
  *(_QWORD *)(v40 + 296) = v8;
  *(_QWORD *)(v40 + 304) = v9;
  specialized IndexingIterator.next()();
  if ((v10 & 1) != 0)
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v40 + 1312);
    v14 = *(_QWORD *)(v40 + 1280);
    v15 = *(_QWORD *)(v40 + 1264);
    v21 = *(_QWORD *)(v40 + 1256);
    v20 = *(_QWORD *)(v40 + 1248);
    v22 = *(_QWORD *)(v40 + 1240);
    v19 = *(_QWORD *)(v40 + 1224);
    v17 = *(_QWORD *)(v40 + 1216);
    v18 = *(_QWORD *)(v40 + 1208);
    *(_QWORD *)(v40 + 424) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v40 + 432) = v11;
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("hit max retry count for request ", 0x20uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v14);
    gpklog(_:type:fileID:line:subsystem:)();
    v16(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x24BE3DCC8], v18);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    outlined destroy of NSURLResponse?((id *)(v40 + 896));
    outlined destroy of Data?(v40 + 408);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v40 + 872) + 8))();
  }
  else
  {
    outlined init with copy of NetworkingSession(*(_QWORD *)(v40 + 1120) + 16, v40 + 56);
    v23 = *(_QWORD *)(v40 + 80);
    v24 = *(_QWORD *)(v40 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v40 + 56), v23);
    v25 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 + 8) + **(int **)(v24 + 8));
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v40 + 1344) = v26;
    *v26 = *(_QWORD *)(v40 + 872);
    v26[1] = NetworkingService.send<A>(request:);
    return v25(*(_QWORD *)(v40 + 1256), v23, v24);
  }
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  id v53;
  id v54;
  uint64_t v55;
  void (*v56)(uint64_t, _QWORD, uint64_t);
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, _QWORD, uint64_t);
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, _QWORD, uint64_t);
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t *, uint64_t, uint64_t);
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, _QWORD, uint64_t);
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  void (*v111)(uint64_t, _QWORD, uint64_t);
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  unint64_t v131;
  uint64_t (*v132)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v133;
  void (*v134)(uint64_t, _QWORD, uint64_t);
  uint64_t v135;
  uint64_t v136;
  void (*v137)(uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  id v145;
  void *v146;
  Class isa;
  id v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, _QWORD, uint64_t);
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int *v167;
  void (*v168)(uint64_t, _QWORD, uint64_t);
  uint64_t v169;
  uint64_t v170;
  void (*v171)(uint64_t, uint64_t);
  uint64_t v172;
  id v173;
  void *v174;
  void *v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(uint64_t, _QWORD, uint64_t);
  uint64_t v184;
  uint64_t v185;
  void (*v186)(uint64_t, uint64_t);
  void *v187;

  v187 = (void *)v0[172];
  v1 = v0[171];
  v180 = v1;
  v2 = v0[170];
  v179 = v2;
  v186 = (void (*)(uint64_t, uint64_t))v0[164];
  v183 = (void (*)(uint64_t, _QWORD, uint64_t))v0[163];
  v182 = v0[162];
  v181 = v0[161];
  v184 = v0[160];
  v185 = v0[158];
  v0[109] = v0;
  outlined copy of Data?(v2, v1);
  v3 = v0[51];
  v4 = v0[52];
  v0[51] = v179;
  v0[52] = v180;
  outlined consume of Data?(v3, v4);
  v5 = v187;
  v6 = (void *)v0[112];
  v0[112] = v187;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  v0[61] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[62] = v7;
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Received response for network request with key: ", 0x30uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  v0[63] = v181;
  v0[64] = v182;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
  v183(v184, *MEMORY[0x24BE3DA98], v185);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  gpklog(_:type:fileID:line:subsystem:)();
  v186(v184, v185);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v187)
  {
    v176 = *(void **)(v178 + 1376);
    objc_opt_self();
    v177 = swift_dynamicCastObjCClass();
    if (v177)
    {
      v175 = (void *)v177;
    }
    else
    {

      v175 = 0;
    }
    v174 = v175;
  }
  else
  {
    v174 = 0;
  }
  *(_QWORD *)(v178 + 1384) = v174;
  if (v174)
  {
    v171 = *(void (**)(uint64_t, uint64_t))(v178 + 1312);
    v168 = *(void (**)(uint64_t, _QWORD, uint64_t))(v178 + 1304);
    v169 = *(_QWORD *)(v178 + 1280);
    v170 = *(_QWORD *)(v178 + 1264);
    v172 = *(_QWORD *)(v178 + 1120);
    *(_QWORD *)(v178 + 920) = v174;
    v173 = objc_msgSend(v174, sel_statusCode);
    *(_QWORD *)(v178 + 1392) = v173;
    *(_QWORD *)(v178 + 928) = v173;
    *(_QWORD *)(v178 + 552) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v178 + 560) = v10;
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Response statusCode: ", 0x15uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v178 + 936) = v173;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
    v167 = (unsigned int *)MEMORY[0x24BE3DA98];
    v168(v169, *MEMORY[0x24BE3DA98], v170);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    gpklog(_:type:fileID:line:subsystem:)();
    v171(v169, v170);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v178 + 568) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v178 + 576) = v13;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Response headers: ", 0x12uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    v164 = objc_msgSend(v174, sel_allHeaderFields);
    *(_QWORD *)(v178 + 944) = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    lazy protocol witness table accessor for type [AnyHashable : Any] and conformance [A : B]();
    v165 = String.init<A>(describing:)();
    v166 = v15;

    *(_QWORD *)(v178 + 584) = v165;
    *(_QWORD *)(v178 + 592) = v166;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
    v168(v169, *v167, v170);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    gpklog(_:type:fileID:line:subsystem:)();
    v171(v169, v170);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v173 == *(id *)(v172 + 168))
    {
      outlined consume of Data?(*(_QWORD *)(v178 + 1360), *(_QWORD *)(v178 + 1368));
      v163 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v178 + 1400) = v163;
      *v163 = *(_QWORD *)(v178 + 872);
      v163[1] = NetworkingService.send<A>(request:);
      return NetworkingService.renewCredentials(statusCode:)(v178 + 169, (uint64_t)v173);
    }
    if (v173 == *(id *)(*(_QWORD *)(v178 + 1120) + 176))
    {
      v154 = *(void (**)(uint64_t, uint64_t))(v178 + 1312);
      v151 = *(void (**)(uint64_t, _QWORD, uint64_t))(v178 + 1304);
      v162 = *(_QWORD *)(v178 + 1296);
      v150 = *(_QWORD *)(v178 + 1288);
      v152 = *(_QWORD *)(v178 + 1280);
      v153 = *(_QWORD *)(v178 + 1264);
      v160 = *(_QWORD *)(v178 + 1256);
      v159 = *(_QWORD *)(v178 + 1248);
      v161 = *(_QWORD *)(v178 + 1240);
      v158 = *(_QWORD *)(v178 + 1224);
      v155 = *(_QWORD *)(v178 + 1216);
      v156 = *(_QWORD *)(v178 + 1208);
      outlined consume of Data?(*(_QWORD *)(v178 + 1360), *(_QWORD *)(v178 + 1368));
      *(_QWORD *)(v178 + 776) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      *(_QWORD *)(v178 + 784) = v18;
      v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("404 for key: ", 0xDuLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v19);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v178 + 792) = v150;
      *(_QWORD *)(v178 + 800) = v162;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      static os_log_type_t.error.getter();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
      v151(v152, *MEMORY[0x24BE3DA98], v153);
      gpklog(_:type:fileID:line:subsystem:)();
      v154(v152, v153);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for InternalError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v155 + 104))(v158, *MEMORY[0x24BE3DCC0], v156);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
      _allocateUninitializedArray<A>(_:)();
      v157 = v21;
      *v21 = static InternalErrorKey.httpStatusCode.getter();
      v157[1] = v22;
      v157[5] = MEMORY[0x24BEE1768];
      v157[2] = (uint64_t)v173;
      _finalizeUninitializedArray<A>(_:)();
      Dictionary.init(dictionaryLiteral:)();
      InternalError.__allocating_init(_:internalInfo:)();
      swift_willThrow();

      (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v160, v161);
      outlined destroy of NSURLResponse?((id *)(v178 + 896));
      outlined destroy of Data?(v178 + 408);
      swift_bridgeObjectRelease();
    }
    else
    {
      v149 = *(_QWORD *)(v178 + 1120);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Int>);
      v23 = *(_QWORD *)(v149 + 152);
      *(_QWORD *)(v178 + 600) = *(_QWORD *)(v149 + 144);
      *(_QWORD *)(v178 + 608) = v23;
      *(_QWORD *)(v178 + 952) = v173;
      lazy protocol witness table accessor for type ClosedRange<Int> and conformance ClosedRange<A>();
      if ((static RangeExpression.~= infix(_:_:)() & 1) != 0)
      {
        if ((*(_QWORD *)(v178 + 1368) & 0xF000000000000000) == 0xF000000000000000)
        {
          v85 = *(void (**)(uint64_t, uint64_t))(v178 + 1312);
          v82 = *(void (**)(uint64_t, _QWORD, uint64_t))(v178 + 1304);
          v92 = *(_QWORD *)(v178 + 1296);
          v81 = *(_QWORD *)(v178 + 1288);
          v83 = *(_QWORD *)(v178 + 1280);
          v84 = *(_QWORD *)(v178 + 1264);
          v90 = *(_QWORD *)(v178 + 1256);
          v89 = *(_QWORD *)(v178 + 1248);
          v91 = *(_QWORD *)(v178 + 1240);
          v88 = *(_QWORD *)(v178 + 1224);
          v86 = *(_QWORD *)(v178 + 1216);
          v87 = *(_QWORD *)(v178 + 1208);
          *(_QWORD *)(v178 + 648) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
          *(_QWORD *)(v178 + 656) = v41;
          v42 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Response data is nil for key: ", 0x1EuLL, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v42);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v178 + 664) = v81;
          *(_QWORD *)(v178 + 672) = v92;
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          v43 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v43);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          outlined destroy of DefaultStringInterpolation();
          String.init(stringInterpolation:)();
          static os_log_type_t.error.getter();
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
          v82(v83, *MEMORY[0x24BE3DA98], v84);
          gpklog(_:type:fileID:line:subsystem:)();
          v85(v83, v84);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for InternalError();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v86 + 104))(v88, *MEMORY[0x24BE3DE28], v87);
          InternalError.__allocating_init(_:internalInfo:)();
          swift_willThrow();

          (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v90, v91);
          outlined destroy of NSURLResponse?((id *)(v178 + 896));
          outlined destroy of Data?(v178 + 408);
          swift_bridgeObjectRelease();
        }
        else
        {
          v143 = *(_QWORD *)(v178 + 1368);
          v144 = *(_QWORD *)(v178 + 1360);
          *(_QWORD *)(v178 + 680) = v144;
          *(_QWORD *)(v178 + 688) = v143;
          *(_QWORD *)(v178 + 976) = 0;
          v145 = (id)objc_opt_self();
          outlined copy of Data._Representation(v144, v143);
          isa = Data._bridgeToObjectiveC()().super.isa;
          outlined consume of Data._Representation(v144, v143);
          type metadata accessor for NSJSONReadingOptions();
          _allocateUninitializedArray<A>(_:)();
          lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
          SetAlgebra<>.init(arrayLiteral:)();
          v24 = *(_QWORD *)(v178 + 984);
          *(_QWORD *)(v178 + 992) = *(_QWORD *)(v178 + 976);
          v148 = objc_msgSend(v145, sel_JSONObjectWithData_options_error_, isa, v24, v178 + 992);
          v146 = *(void **)(v178 + 992);
          v25 = v146;
          v26 = *(void **)(v178 + 976);
          *(_QWORD *)(v178 + 976) = v146;

          if (v148)
          {
            _bridgeAnyObjectToAny(_:)();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
            if ((swift_dynamicCast() & 1) != 0)
              v142 = *(_QWORD *)(v178 + 1072);
            else
              v142 = 0;
            swift_unknownObjectRelease();
            v140 = *(void **)(v178 + 1352);
            v141 = v142;
          }
          else
          {
            v53 = *(id *)(v178 + 976);
            v54 = (id)_convertNSErrorToError(_:)();

            swift_willThrow();
            v140 = 0;
            v141 = 0;
          }
          *(_QWORD *)(v178 + 1000) = v141;
          if (*(_QWORD *)(v178 + 1000))
          {
            *(_QWORD *)(v178 + 968) = *(_QWORD *)(v178 + 1000);
          }
          else
          {
            *(_QWORD *)(v178 + 968) = Dictionary.init()();
            outlined destroy of [String : Any]?();
          }
          v137 = *(void (**)(uint64_t, uint64_t))(v178 + 1312);
          v134 = *(void (**)(uint64_t, _QWORD, uint64_t))(v178 + 1304);
          v135 = *(_QWORD *)(v178 + 1280);
          v136 = *(_QWORD *)(v178 + 1264);
          v138 = *(_QWORD *)(v178 + 968);
          *(_QWORD *)(v178 + 1416) = v138;
          *(_QWORD *)(v178 + 1008) = v138;
          *(_QWORD *)(v178 + 696) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
          *(_QWORD *)(v178 + 704) = v27;
          v28 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Response body: ", 0xFuLL, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v28);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v178 + 1016) = v138;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
          lazy protocol witness table accessor for type [String : Any] and conformance [A : B]();
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          v29 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v29);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          outlined destroy of DefaultStringInterpolation();
          String.init(stringInterpolation:)();
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
          v134(v135, *MEMORY[0x24BE3DA98], v136);
          default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
          gpklog(_:type:fileID:line:subsystem:)();
          v137(v135, v136);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v30 = NetworkingService.backoffDelay(response:statusCode:)(v138, (uint64_t)v173);
          v139 = v30;
          if ((v31 & 1) == 0)
          {
            v130 = *(void (**)(uint64_t, uint64_t))(v178 + 1312);
            v128 = *(_QWORD *)(v178 + 1280);
            v129 = *(_QWORD *)(v178 + 1264);
            *(_QWORD *)(v178 + 1048) = v30;
            *(_QWORD *)(v178 + 744) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
            *(_QWORD *)(v178 + 752) = v32;
            v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Server requested client delay. waiting ", 0x27uLL, 1);
            DefaultStringInterpolation.appendLiteral(_:)(v33);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v178 + 1056) = v139;
            DefaultStringInterpolation.appendInterpolation<A>(_:)();
            v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" seconds, then re-sending the request", 0x25uLL, 1);
            DefaultStringInterpolation.appendLiteral(_:)(v34);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            outlined destroy of DefaultStringInterpolation();
            String.init(stringInterpolation:)();
            String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
            default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
            default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v128);
            gpklog(_:type:fileID:line:subsystem:)();
            v130(v128, v129);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v178 + 1064) = v139;
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            *(_QWORD *)(v178 + 760) = static Duration.seconds<A>(_:)();
            *(_QWORD *)(v178 + 768) = v35;
            *(_QWORD *)(v178 + 336) = 0;
            *(_QWORD *)(v178 + 344) = 0;
            *(_BYTE *)(v178 + 352) = 1;
            v131 = lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock();
            default argument 2 of static Task<>.sleep<A>(for:tolerance:clock:)();
            v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to static Task<>.sleep<A>(for:tolerance:clock:)
                                                                                       + async function pointer to static Task<>.sleep<A>(for:tolerance:clock:));
            v133 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v178 + 1424) = v133;
            *v133 = *(_QWORD *)(v178 + 872);
            v133[1] = NetworkingService.send<A>(request:);
            return v132(v178 + 760, v178 + 336, *(_QWORD *)(v178 + 1200), *(_QWORD *)(v178 + 1184), v131);
          }
          v127 = *(_QWORD *)(v178 + 1176);
          v125 = *(_QWORD *)(v178 + 1168);
          v126 = *(_QWORD *)(v178 + 1160);
          type metadata accessor for DictionaryDecoder();
          *(_QWORD *)(v178 + 1024) = DictionaryDecoder.__allocating_init()();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v125 + 104))(v127, *MEMORY[0x24BDFC4E8], v126);
          dispatch thunk of DictionaryDecoder.dataDecodingStrategy.setter();
          lazy protocol witness table accessor for type ErrorResponse and conformance ErrorResponse();
          dispatch thunk of DictionaryDecoder.decode<A>(_:from:)();
          if (v140)
          {

            v120 = 0;
            v121 = 0;
            v122 = 0;
            v123 = 0;
            v124 = 0;
          }
          else
          {
            v120 = *(_QWORD *)(v178 + 176);
            v121 = *(_QWORD *)(v178 + 184);
            v122 = *(_QWORD *)(v178 + 192);
            v123 = *(_QWORD *)(v178 + 200);
            v124 = *(_BYTE *)(v178 + 208) & 1;
          }
          if (!v122)
          {
            v109 = *(void (**)(uint64_t, uint64_t))(v178 + 1312);
            v106 = *(void (**)(uint64_t, _QWORD, uint64_t))(v178 + 1304);
            v107 = *(_QWORD *)(v178 + 1280);
            v108 = *(_QWORD *)(v178 + 1264);
            String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Server returned success response", 0x20uLL, 1);
            String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
            v106(v107, *MEMORY[0x24BE3DA98], v108);
            default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
            gpklog(_:type:fileID:line:subsystem:)();
            v109(v107, v108);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
            dispatch thunk of DictionaryDecoder.decode<A>(_:from:)();
            v100 = *(_QWORD *)(v178 + 1368);
            v99 = *(_QWORD *)(v178 + 1360);
            v95 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v178 + 1320);
            v103 = *(_QWORD *)(v178 + 1256);
            v101 = *(_QWORD *)(v178 + 1248);
            v102 = *(_QWORD *)(v178 + 1240);
            v104 = *(_QWORD *)(v178 + 1152);
            v105 = *(_QWORD *)(v178 + 1144);
            v97 = *(_QWORD *)(v178 + 1136);
            v98 = *(_QWORD *)(v178 + 1128);
            v39 = *(_QWORD *)(v178 + 1112);
            v94 = *(_QWORD *)(v178 + 1104);
            v93 = *(_QWORD *)(v178 + 1096);
            v96 = *(char **)(v178 + 1088);
            *(_QWORD *)(v178 + 120) = v94;
            *(_QWORD *)(v178 + 128) = v39;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v178 + 96));
            v95(boxed_opaque_existential_1, v93, v94);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v105, v104, v98);
            NetworkResponse.init(request:response:statusCode:)((const void *)(v178 + 96), v105, (uint64_t)v173, v98, AssociatedConformanceWitness, v96);
            (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v104, v98);
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of Data._Representation(v99, v100);

            (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v103, v102);
            outlined destroy of NSURLResponse?((id *)(v178 + 896));
            outlined destroy of Data?(v178 + 408);
            swift_bridgeObjectRelease();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            return (*(uint64_t (**)(void))(*(_QWORD *)(v178 + 872) + 8))();
          }
          v116 = *(_QWORD *)(v178 + 1368);
          v115 = *(_QWORD *)(v178 + 1360);
          v114 = *(void (**)(uint64_t, uint64_t))(v178 + 1312);
          v111 = *(void (**)(uint64_t, _QWORD, uint64_t))(v178 + 1304);
          v112 = *(_QWORD *)(v178 + 1280);
          v113 = *(_QWORD *)(v178 + 1264);
          v118 = *(_QWORD *)(v178 + 1256);
          v117 = *(_QWORD *)(v178 + 1248);
          v119 = *(_QWORD *)(v178 + 1240);
          *(_QWORD *)(v178 + 136) = v120;
          *(_QWORD *)(v178 + 144) = v121;
          *(_QWORD *)(v178 + 152) = v122;
          *(_QWORD *)(v178 + 160) = v123;
          *(_BYTE *)(v178 + 168) = v124 & 1;
          *(_QWORD *)(v178 + 728) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
          *(_QWORD *)(v178 + 736) = v36;
          v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error response from server: ", 0x1CuLL, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v37);
          swift_bridgeObjectRelease();
          memcpy((void *)(v178 + 216), (const void *)(v178 + 136), 0x21uLL);
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          v38 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
          DefaultStringInterpolation.appendLiteral(_:)(v38);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          outlined destroy of DefaultStringInterpolation();
          String.init(stringInterpolation:)();
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
          v111(v112, *MEMORY[0x24BE3DA98], v113);
          default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
          gpklog(_:type:fileID:line:subsystem:)();
          v114(v112, v113);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ErrorResponse.asError.getter();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of Data._Representation(v115, v116);

          (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v118, v119);
          outlined destroy of NSURLResponse?((id *)(v178 + 896));
          outlined destroy of Data?(v178 + 408);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v71 = *(void (**)(uint64_t, uint64_t))(v178 + 1312);
        v68 = *(void (**)(uint64_t, _QWORD, uint64_t))(v178 + 1304);
        v80 = *(_QWORD *)(v178 + 1296);
        v67 = *(_QWORD *)(v178 + 1288);
        v69 = *(_QWORD *)(v178 + 1280);
        v70 = *(_QWORD *)(v178 + 1264);
        v78 = *(_QWORD *)(v178 + 1256);
        v77 = *(_QWORD *)(v178 + 1248);
        v79 = *(_QWORD *)(v178 + 1240);
        v76 = *(_QWORD *)(v178 + 1224);
        v72 = *(_QWORD *)(v178 + 1216);
        v73 = *(_QWORD *)(v178 + 1208);
        outlined consume of Data?(*(_QWORD *)(v178 + 1360), *(_QWORD *)(v178 + 1368));
        *(_QWORD *)(v178 + 616) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        *(_QWORD *)(v178 + 624) = v44;
        v45 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error response returned for network request with key: ", 0x36uLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v45);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v178 + 632) = v67;
        *(_QWORD *)(v178 + 640) = v80;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", error: ", 9uLL, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v46);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v178 + 960) = v173;
        v74 = MEMORY[0x24BEE1768];
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v47 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
        DefaultStringInterpolation.appendLiteral(_:)(v47);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
        v68(v69, *MEMORY[0x24BE3DA98], v70);
        default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
        gpklog(_:type:fileID:line:subsystem:)();
        v71(v69, v70);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for InternalError();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v72 + 104))(v76, *MEMORY[0x24BE3DCC0], v73);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
        _allocateUninitializedArray<A>(_:)();
        v75 = v48;
        *v48 = static InternalErrorKey.httpStatusCode.getter();
        v75[1] = v49;
        v75[5] = v74;
        v75[2] = (uint64_t)v173;
        _finalizeUninitializedArray<A>(_:)();
        Dictionary.init(dictionaryLiteral:)();
        InternalError.__allocating_init(_:internalInfo:)();
        swift_willThrow();

        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v78, v79);
        outlined destroy of NSURLResponse?((id *)(v178 + 896));
        outlined destroy of Data?(v178 + 408);
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    v59 = *(void (**)(uint64_t, uint64_t))(v178 + 1312);
    v56 = *(void (**)(uint64_t, _QWORD, uint64_t))(v178 + 1304);
    v66 = *(_QWORD *)(v178 + 1296);
    v55 = *(_QWORD *)(v178 + 1288);
    v57 = *(_QWORD *)(v178 + 1280);
    v58 = *(_QWORD *)(v178 + 1264);
    v64 = *(_QWORD *)(v178 + 1256);
    v63 = *(_QWORD *)(v178 + 1248);
    v65 = *(_QWORD *)(v178 + 1240);
    v62 = *(_QWORD *)(v178 + 1224);
    v60 = *(_QWORD *)(v178 + 1216);
    v61 = *(_QWORD *)(v178 + 1208);
    outlined consume of Data?(*(_QWORD *)(v178 + 1360), *(_QWORD *)(v178 + 1368));
    *(_QWORD *)(v178 + 520) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v178 + 528) = v50;
    v51 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Bad response for network request with key: ", 0x2BuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v51);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v178 + 536) = v55;
    *(_QWORD *)(v178 + 544) = v66;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v52 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
    v56(v57, *MEMORY[0x24BE3DA98], v58);
    gpklog(_:type:fileID:line:subsystem:)();
    v59(v57, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v60 + 104))(v62, *MEMORY[0x24BE3DDC8], v61);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v64, v65);
    outlined destroy of NSURLResponse?((id *)(v178 + 896));
    outlined destroy of Data?(v178 + 408);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v178 + 872) + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 872) = *v1;
  *(_QWORD *)(v2 + 1408) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_QWORD, uint64_t, uint64_t);
  _QWORD *v37;
  uint64_t v38;

  *(_QWORD *)(v0 + 872) = v0;
  v1 = *(_BYTE *)(v0 + 169);
  *(_BYTE *)(v0 + 1440) = v1;
  *(_BYTE *)(v0 + 170) = v1;
  *(_BYTE *)(v0 + 171) = 0;
  lazy protocol witness table accessor for type RenewCredentialResult and conformance RenewCredentialResult();
  if ((== infix<A>(_:_:)() & 1) != 0)
  {
    v32 = *(void (**)(uint64_t, uint64_t))(v38 + 1312);
    v30 = *(_QWORD *)(v38 + 1280);
    v31 = *(_QWORD *)(v38 + 1264);
    v33 = *(void **)(v38 + 1384);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("reauth succeeded. retrying request", 0x22uLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v30);
    gpklog(_:type:fileID:line:subsystem:)();
    v32(v30, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    specialized IndexingIterator.next()();
    if ((v3 & 1) == 0)
    {
      outlined init with copy of NetworkingSession(*(_QWORD *)(v38 + 1120) + 16, v38 + 56);
      v34 = *(_QWORD *)(v38 + 80);
      v35 = *(_QWORD *)(v38 + 88);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v38 + 56), v34);
      v36 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 + 8) + **(int **)(v35 + 8));
      v37 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v38 + 1344) = v37;
      *v37 = *(_QWORD *)(v38 + 872);
      v37[1] = NetworkingService.send<A>(request:);
      return v36(*(_QWORD *)(v38 + 1256), v34, v35);
    }
    v11 = *(void (**)(uint64_t, uint64_t))(v38 + 1312);
    v9 = *(_QWORD *)(v38 + 1280);
    v10 = *(_QWORD *)(v38 + 1264);
    v16 = *(_QWORD *)(v38 + 1256);
    v15 = *(_QWORD *)(v38 + 1248);
    v17 = *(_QWORD *)(v38 + 1240);
    v14 = *(_QWORD *)(v38 + 1224);
    v12 = *(_QWORD *)(v38 + 1216);
    v13 = *(_QWORD *)(v38 + 1208);
    *(_QWORD *)(v38 + 424) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v38 + 432) = v6;
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("hit max retry count for request ", 0x20uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
    gpklog(_:type:fileID:line:subsystem:)();
    v11(v9, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BE3DCC8], v13);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    outlined destroy of NSURLResponse?((id *)(v38 + 896));
    outlined destroy of Data?(v38 + 408);
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = *(_QWORD *)(v38 + 1392);
    v20 = *(void (**)(uint64_t, uint64_t))(v38 + 1312);
    v18 = *(_QWORD *)(v38 + 1280);
    v19 = *(_QWORD *)(v38 + 1264);
    v28 = *(_QWORD *)(v38 + 1256);
    v27 = *(_QWORD *)(v38 + 1248);
    v29 = *(_QWORD *)(v38 + 1240);
    v25 = *(_QWORD *)(v38 + 1224);
    v21 = *(_QWORD *)(v38 + 1216);
    v22 = *(_QWORD *)(v38 + 1208);
    v26 = *(id *)(v38 + 1384);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("reauth failed. throwing error", 0x1DuLL, 1);
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v18);
    gpklog(_:type:fileID:line:subsystem:)();
    v20(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v25, *MEMORY[0x24BE3DCC0], v22);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
    _allocateUninitializedArray<A>(_:)();
    v23 = v4;
    *v4 = static InternalErrorKey.httpStatusCode.getter();
    v23[1] = v5;
    v23[5] = MEMORY[0x24BEE1768];
    v23[2] = v24;
    _finalizeUninitializedArray<A>(_:)();
    Dictionary.init(dictionaryLiteral:)();
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
    outlined destroy of NSURLResponse?((id *)(v38 + 896));
    outlined destroy of Data?(v38 + 408);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v38 + 872) + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;

  v3 = *v1;
  v4 = (_QWORD *)(*v1 + 16);
  *(_QWORD *)(v3 + 872) = *v1;
  *(_QWORD *)(v3 + 1432) = v0;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(_QWORD, _QWORD))(v4[147] + 8))(v4[148], v4[146]);
  return swift_task_switch();
}

{
  _QWORD *v0;
  char v1;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD, uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;

  v22 = (void *)v0[173];
  v21 = v0[171];
  v20 = v0[170];
  v0[109] = v0;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v20, v21);

  specialized IndexingIterator.next()();
  if ((v1 & 1) != 0)
  {
    v8 = *(void (**)(uint64_t, uint64_t))(v19 + 1312);
    v6 = *(_QWORD *)(v19 + 1280);
    v7 = *(_QWORD *)(v19 + 1264);
    v13 = *(_QWORD *)(v19 + 1256);
    v12 = *(_QWORD *)(v19 + 1248);
    v14 = *(_QWORD *)(v19 + 1240);
    v11 = *(_QWORD *)(v19 + 1224);
    v9 = *(_QWORD *)(v19 + 1216);
    v10 = *(_QWORD *)(v19 + 1208);
    *(_QWORD *)(v19 + 424) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    *(_QWORD *)(v19 + 432) = v3;
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("hit max retry count for request ", 0x20uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
    default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v6);
    gpklog(_:type:fileID:line:subsystem:)();
    v8(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BE3DCC8], v10);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    outlined destroy of NSURLResponse?((id *)(v19 + 896));
    outlined destroy of Data?(v19 + 408);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(*(_QWORD *)(v19 + 872) + 8))();
  }
  else
  {
    outlined init with copy of NetworkingSession(*(_QWORD *)(v19 + 1120) + 16, v19 + 56);
    v15 = *(_QWORD *)(v19 + 80);
    v16 = *(_QWORD *)(v19 + 88);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v19 + 56), v15);
    v17 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 + 8) + **(int **)(v16 + 8));
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v19 + 1344) = v18;
    *v18 = *(_QWORD *)(v19 + 872);
    v18[1] = NetworkingService.send<A>(request:);
    return v17(*(_QWORD *)(v19 + 1256), v15, v16);
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 872) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  outlined destroy of NSURLResponse?((id *)(v0 + 896));
  outlined destroy of Data?(v0 + 408);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 872) + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 1352);
  v13 = *(void (**)(uint64_t, uint64_t))(v0 + 1312);
  v10 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1304);
  v17 = *(_QWORD *)(v0 + 1296);
  v9 = *(_QWORD *)(v0 + 1288);
  v11 = *(_QWORD *)(v0 + 1280);
  v12 = *(_QWORD *)(v0 + 1264);
  v15 = *(_QWORD *)(v0 + 1256);
  v14 = *(_QWORD *)(v0 + 1248);
  v16 = *(_QWORD *)(v0 + 1240);
  *(_QWORD *)(v0 + 872) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  v2 = v1;
  *(_QWORD *)(v0 + 904) = v1;
  *(_QWORD *)(v0 + 440) = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  *(_QWORD *)(v0 + 448) = v3;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Error performing network request with key: ", 0x2BuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 456) = v9;
  *(_QWORD *)(v0 + 464) = v17;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", error: ", 9uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  *(_QWORD *)(v0 + 472) = Error.localizedDescription.getter();
  *(_QWORD *)(v0 + 480) = v6;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  static os_log_type_t.error.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
  v10(v11, *MEMORY[0x24BE3DA98], v12);
  gpklog(_:type:fileID:line:subsystem:)();
  v13(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
  outlined destroy of NSURLResponse?((id *)(v0 + 896));
  outlined destroy of Data?(v0 + 408);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 872) + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 1384);
  v4 = *(_QWORD *)(v0 + 1256);
  v3 = *(_QWORD *)(v0 + 1248);
  v5 = *(_QWORD *)(v0 + 1240);
  *(_QWORD *)(v0 + 872) = v0;

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  outlined destroy of NSURLResponse?((id *)(v0 + 896));
  outlined destroy of Data?(v0 + 408);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 872) + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(id *)(v0 + 1384);
  v6 = *(_QWORD *)(v0 + 1368);
  v5 = *(_QWORD *)(v0 + 1360);
  v9 = *(_QWORD *)(v0 + 1256);
  v8 = *(_QWORD *)(v0 + 1248);
  v10 = *(_QWORD *)(v0 + 1240);
  v1 = *(_QWORD *)(v0 + 1200);
  v2 = *(_QWORD *)(v0 + 1192);
  v3 = *(_QWORD *)(v0 + 1184);
  *(_QWORD *)(v0 + 872) = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v5, v6);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  outlined destroy of NSURLResponse?((id *)(v0 + 896));
  outlined destroy of Data?(v0 + 408);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 872) + 8))();
}

uint64_t NetworkingService.send<A>(request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v6 = (_QWORD *)*v4;
  v6[109] = *v4;
  v6[169] = v3;
  v6[170] = a1;
  v6[171] = a2;
  v6[172] = a3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t NetworkingService.buildURLRequest(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[34] = v2;
  v3[33] = a2;
  v3[32] = a1;
  v3[27] = v3;
  v3[28] = 0;
  v3[29] = 0;
  v3[30] = 0;
  v3[25] = 0;
  v3[26] = 0;
  v4 = type metadata accessor for InternalErrorCode();
  v3[35] = v4;
  v3[36] = *(_QWORD *)(v4 - 8);
  v3[37] = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  v3[38] = v5;
  v3[39] = *(_QWORD *)(v5 - 8);
  v3[40] = swift_task_alloc();
  v6 = type metadata accessor for URLRequest();
  v3[41] = v6;
  v3[42] = *(_QWORD *)(v6 - 8);
  v3[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3[44] = swift_task_alloc();
  v7 = type metadata accessor for URL();
  v3[45] = v7;
  v3[46] = *(_QWORD *)(v7 - 8);
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  v3[28] = a2;
  v3[29] = v2;
  return swift_task_switch();
}

uint64_t NetworkingService.buildURLRequest(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  _QWORD *v8;
  id v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  Class isa;
  Class v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;

  v1 = v0[34];
  v71 = (_QWORD *)v0[33];
  v0[27] = v0;
  v74 = *(void **)(v1 + 56);
  swift_unknownObjectRetain();
  swift_getObjectType();
  v73 = v71[3];
  v72 = v71[4];
  __swift_project_boxed_opaque_existential_1(v71, v73);
  v2 = (*(uint64_t (**)(uint64_t))(v72 + 24))(v73);
  v75 = (void *)MEMORY[0x2426348B0](v2);
  swift_bridgeObjectRelease();
  v76 = objc_msgSend(v74, sel_urlAtKey_, v75);

  if (v76)
  {
    v66 = v70[47];
    v67 = v70[46];
    v68 = v70[45];
    v69 = v70[44];
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v69, v66, v68);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v67 + 56))(v69, 0, 1, v68);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v70[46] + 56))(v70[44], 1, 1, v70[45]);
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(v70[46] + 48))(v70[44], 1, v70[45]) == 1)
  {
    v19 = v70[40];
    v18 = v70[39];
    v20 = v70[38];
    v23 = v70[37];
    v21 = v70[36];
    v22 = v70[35];
    v15 = (_QWORD *)v70[33];
    outlined destroy of URL?(v70[44]);
    swift_unknownObjectRelease();
    v70[19] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v70[20] = v11;
    v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cannot find url for key ", 0x18uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v12);
    swift_bridgeObjectRelease();
    v17 = v15[3];
    v16 = v15[4];
    __swift_project_boxed_opaque_existential_1(v15, v17);
    v70[21] = (*(uint64_t (**)(uint64_t))(v16 + 24))(v17);
    v70[22] = v13;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    static os_log_type_t.error.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v19);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for InternalError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v23, *MEMORY[0x24BE3DD68], v22);
    InternalError.__allocating_init(_:internalInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v70[27] + 8))();
  }
  else
  {
    v43 = v70[48];
    v44 = v70[47];
    v41 = v70[46];
    v42 = v70[45];
    v54 = v70[34];
    v62 = (_QWORD *)v70[33];
    (*(void (**)(void))(v41 + 32))();
    swift_unknownObjectRelease();
    type metadata accessor for NSMutableURLRequest();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v44, v43, v42);
    v59 = NSMutableURLRequest.__allocating_init(url:cachePolicy:timeoutInterval:)(v44, *(double *)(v54 + 72));
    v70[49] = v59;
    v70[30] = v59;
    v46 = v62[3];
    v45 = v62[4];
    __swift_project_boxed_opaque_existential_1(v62, v46);
    v3 = (*(uint64_t (**)(uint64_t))(v45 + 32))(v46);
    v47 = (id)MEMORY[0x2426348B0](v3);
    swift_bridgeObjectRelease();
    objc_msgSend(v59, sel_setHTTPMethod_, v47);

    v49 = v62[3];
    v48 = v62[4];
    __swift_project_boxed_opaque_existential_1(v62, v49);
    v4 = (*(uint64_t (**)(uint64_t))(v48 + 48))(v49);
    v53 = (id)MEMORY[0x2426348B0](v4);
    swift_bridgeObjectRelease();
    v5 = HTTPHeaderKey.contentType.unsafeMutableAddressor();
    v50 = *(_QWORD *)v5;
    v51 = *((_QWORD *)v5 + 1);
    swift_bridgeObjectRetain();
    v52 = (id)MEMORY[0x2426348B0](v50, v51);
    swift_bridgeObjectRelease();
    objc_msgSend(v59, (SEL)0x1F35B9E6CLL, v53, v52);

    swift_beginAccess();
    v55 = *(_QWORD *)(v54 + 128);
    v56 = *(_QWORD *)(v54 + 136);
    swift_bridgeObjectRetain();
    swift_endAccess();
    v61 = (void *)MEMORY[0x2426348B0](v55, v56);
    swift_bridgeObjectRelease();
    v6 = HTTPHeaderKey.bundleID.unsafeMutableAddressor();
    v57 = *(_QWORD *)v6;
    v58 = *((_QWORD *)v6 + 1);
    swift_bridgeObjectRetain();
    v60 = (void *)MEMORY[0x2426348B0](v57, v58);
    swift_bridgeObjectRelease();
    objc_msgSend(v59, (SEL)0x1F35B9E6CLL, v61, v60);

    v64 = v62[3];
    v63 = v62[4];
    __swift_project_boxed_opaque_existential_1(v62, v64);
    (*(void (**)(uint64_t))(v63 + 40))(v64);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
    _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))closure #1 in NetworkingService.buildURLRequest(for:), 0, v7, MEMORY[0x24BEE4078], MEMORY[0x24BDCDDE8], v65, (uint64_t)(v70 + 23));
    outlined destroy of Any?((uint64_t)(v70 + 12));
    v39 = v70[23];
    v40 = v70[24];
    if ((v40 & 0xF000000000000000) == 0xF000000000000000)
    {
      v38 = 0;
    }
    else
    {
      isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v39, v40);
      v38 = isa;
    }
    v35 = v70[34];
    objc_msgSend(v59, sel_setHTTPBody_);

    v36 = *(_QWORD *)(v35 + 64);
    swift_bridgeObjectRetain();
    v70[31] = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NetworkRequestTransforming]);
    lazy protocol witness table accessor for type [NetworkRequestTransforming] and conformance [A]();
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[NetworkRequestTransforming]>);
    IndexingIterator.next()();
    if (v70[5])
    {
      outlined init with take of NetworkRequestTransforming(v70 + 2, v70 + 7);
      v32 = v70[10];
      v33 = v70[11];
      __swift_project_boxed_opaque_existential_1(v70 + 7, v32);
      v34 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 + 8) + **(int **)(v33 + 8));
      v8 = (_QWORD *)swift_task_alloc();
      v70[50] = v8;
      *v8 = v70[27];
      v8[1] = NetworkingService.buildURLRequest(for:);
      return v34(v70[49], v70[33], v32, v33);
    }
    else
    {
      v27 = (id)v70[49];
      v30 = v70[48];
      v28 = v70[46];
      v29 = v70[45];
      v31 = v70[43];
      v24 = v70[42];
      v26 = v70[41];
      v25 = v70[32];
      outlined destroy of IndexingIterator<[NetworkRequestTransforming]>();
      v10 = v27;
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v25, v31, v26);

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v70[27] + 8))();
    }
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 216) = *v1;
  *(_QWORD *)(v2 + 408) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, _QWORD, uint64_t, uint64_t);
  _QWORD *v15;

  *(_QWORD *)(v0 + 216) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[NetworkRequestTransforming]>);
  IndexingIterator.next()();
  if (*(_QWORD *)(v0 + 40))
  {
    outlined init with take of NetworkRequestTransforming(v15 + 2, v15 + 7);
    v12 = v15[10];
    v13 = v15[11];
    __swift_project_boxed_opaque_existential_1(v15 + 7, v12);
    v14 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 + 8) + **(int **)(v13 + 8));
    v1 = (_QWORD *)swift_task_alloc();
    v15[50] = v1;
    *v1 = v15[27];
    v1[1] = NetworkingService.buildURLRequest(for:);
    return v14(v15[49], v15[33], v12, v13);
  }
  else
  {
    v7 = (id)v15[49];
    v10 = v15[48];
    v8 = v15[46];
    v9 = v15[45];
    v11 = v15[43];
    v4 = v15[42];
    v6 = v15[41];
    v5 = v15[32];
    outlined destroy of IndexingIterator<[NetworkRequestTransforming]>();
    v3 = v7;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v5, v11, v6);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v15[27] + 8))();
  }
}

{
  _QWORD *v0;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (id)v0[49];
  v4 = v0[48];
  v3 = v0[46];
  v5 = v0[45];
  v0[27] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  outlined destroy of IndexingIterator<[NetworkRequestTransforming]>();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[27] + 8))();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of NSURLResponse?(id *a1)
{

}

uint64_t closure #1 in NetworkingService.send<A>(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  void *object;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Builtin::Word v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t countAndFlagsBits;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v17 = a1;
  v18 = a2;
  v20 = a3;
  v21 = a4;
  v47 = 0;
  v48 = 0;
  v45 = 0;
  v46 = 0;
  v25 = 0;
  v36 = type metadata accessor for LogSubsystem();
  v34 = *(_QWORD *)(v36 - 8);
  v16[0] = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v17);
  v35 = (char *)v16 - v16[0];
  v47 = v4;
  v48 = v5;
  v45 = v6;
  v46 = v7;
  v8 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v27 = &v43;
  v43 = v8;
  v44 = v9;
  v30 = 1;
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HTTP Header - Key: ", 0x13uLL, 1);
  v16[1] = v10._object;
  DefaultStringInterpolation.appendLiteral(_:)(v10);
  swift_bridgeObjectRelease();
  v41 = v17;
  v42 = v18;
  v22 = MEMORY[0x24BEE0D00];
  v23 = MEMORY[0x24BEE0D70];
  v24 = MEMORY[0x24BEE0D68];
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", Value:", 8uLL, v30 & 1);
  object = v11._object;
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  v39 = v20;
  v40 = v21;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v25, v30 & 1);
  v26 = v12._object;
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease();
  v29 = v43;
  v28 = v44;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v31 = String.init(stringInterpolation:)();
  v38 = v13;
  v32 = static os_log_type_t.debug.getter();
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, v30 & 1);
  countAndFlagsBits = v14._countAndFlagsBits;
  v37 = v14._object;
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v35, *MEMORY[0x24BE3DA98], v36);
  gpklog(_:type:fileID:line:subsystem:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t thunk for @callee_guaranteed (@guaranteed String, @guaranteed String) -> ()(_QWORD *a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  return a2(*a1, a1[1], a1[2], a1[3]);
}

uint64_t NetworkingService.renewCredentials(statusCode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[51] = v2;
  v3[50] = a2;
  v3[49] = a1;
  v3[44] = v3;
  v3[45] = 0;
  v3[46] = 0;
  v3[47] = 0;
  v4 = type metadata accessor for InternalErrorCode();
  v3[52] = v4;
  v3[53] = *(_QWORD *)(v4 - 8);
  v3[54] = swift_task_alloc();
  v5 = type metadata accessor for LogSubsystem();
  v3[55] = v5;
  v3[56] = *(_QWORD *)(v5 - 8);
  v3[57] = swift_task_alloc();
  v3[45] = a2;
  v3[46] = v2;
  return swift_task_switch();
}

uint64_t NetworkingService.renewCredentials(statusCode:)()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v24 = v0[57];
  v23 = v0[56];
  v25 = v0[55];
  v26 = v0[51];
  v0[44] = v0;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unauthorized request. Renewing account credentials and retrying", 0x3FuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v24);
  gpklog(_:type:fileID:line:subsystem:)();
  v1 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v0[58] = v1;
  v1(v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with copy of AccountStore(v26 + 80, (uint64_t)(v0 + 7));
  v28 = v0[10];
  v27 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v28);
  (*(void (**)(uint64_t))(v27 + 8))(v28);
  if (v0[15])
  {
    v19 = v22[51];
    outlined init with take of Account(v22 + 12, v22 + 2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v22 + 7));
    outlined init with copy of AccountStore(v19 + 80, (uint64_t)(v22 + 27));
    v20 = v22[30];
    v21 = v22[31];
    __swift_project_boxed_opaque_existential_1(v22 + 27, v20);
    (*(void (**)(_QWORD *, uint64_t))(v21 + 32))(v22 + 2, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v22 + 27));
    if (v22[25])
    {
      v12 = v22[51];
      outlined init with take of Account(v22 + 22, v22 + 17);
      outlined init with copy of AccountStore(v12 + 80, (uint64_t)(v22 + 32));
      v16 = v22[35];
      v17 = v22[36];
      __swift_project_boxed_opaque_existential_1(v22 + 32, v16);
      v22[59] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
      _allocateUninitializedArray<A>(_:)();
      v14 = v2;
      outlined init with copy of String((_QWORD *)(v12 + 184), v2);
      v13 = MEMORY[0x24BEE1328];
      v14[5] = MEMORY[0x24BEE1328];
      *((_BYTE *)v14 + 16) = 0;
      outlined init with copy of String((_QWORD *)(v12 + 200), v14 + 6);
      v14[11] = v13;
      *((_BYTE *)v14 + 64) = 1;
      _finalizeUninitializedArray<A>(_:)();
      v15 = Dictionary.init(dictionaryLiteral:)();
      v22[60] = v15;
      v18 = (uint64_t (*)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 40)
                                                                                + **(int **)(v17 + 40));
      v3 = (_QWORD *)swift_task_alloc();
      v22[61] = v3;
      *v3 = v22[44];
      v3[1] = NetworkingService.renewCredentials(statusCode:);
      return v18(v22[49], v22 + 17, v15, v16, v17);
    }
    outlined destroy of Account?((uint64_t)(v22 + 22));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v22 + 2));
  }
  else
  {
    outlined destroy of Account?((uint64_t)(v22 + 12));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v22 + 7));
  }
  v11 = v22[54];
  v7 = v22[53];
  v8 = v22[52];
  v10 = v22[50];
  type metadata accessor for InternalError();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v11, *MEMORY[0x24BE3DCC0], v8);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, Any));
  _allocateUninitializedArray<A>(_:)();
  v9 = v5;
  *v5 = static InternalErrorKey.httpStatusCode.getter();
  v9[1] = v6;
  v9[5] = MEMORY[0x24BEE1768];
  v9[2] = v10;
  _finalizeUninitializedArray<A>(_:)();
  Dictionary.init(dictionaryLiteral:)();
  InternalError.__allocating_init(_:internalInfo:)();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v22[44] + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 352) = *v1;
  *(_QWORD *)(v2 + 496) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 352) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 256);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 352) + 8))();
}

{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  v17 = (void *)v0[62];
  v11 = (void (*)(uint64_t, uint64_t))v0[58];
  v9 = v0[57];
  v10 = v0[55];
  v16 = v0[54];
  v12 = v0[53];
  v13 = v0[52];
  v15 = v0[50];
  v0[44] = v0;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 32));
  v1 = v17;
  v0[47] = v17;
  v0[40] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0[41] = v2;
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("caught error trying to re-auth ", 0x1FuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v0[42] = Error.localizedDescription.getter();
  v0[43] = v4;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, 1);
  default argument 1 of gpklog(_:type:fileID:line:subsystem:)();
  default argument 4 of gpklog(_:type:fileID:line:subsystem:)(v9);
  gpklog(_:type:fileID:line:subsystem:)();
  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for InternalError();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v16, *MEMORY[0x24BE3DCC0], v13);
  _allocateUninitializedArray<A>(_:)();
  v14 = v6;
  *v6 = static InternalErrorKey.httpStatusCode.getter();
  v14[1] = v7;
  v14[5] = MEMORY[0x24BEE1768];
  v14[2] = v15;
  _finalizeUninitializedArray<A>(_:)();
  Dictionary.init(dictionaryLiteral:)();
  InternalError.__allocating_init(_:internalInfo:)();
  swift_willThrow();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 17));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0[44] + 8))();
}

unint64_t lazy protocol witness table accessor for type ClosedRange<Int> and conformance ClosedRange<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ClosedRange<Int> and conformance ClosedRange<A>;
  if (!lazy protocol witness table cache variable for type ClosedRange<Int> and conformance ClosedRange<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ClosedRange<Int>);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE08F8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ClosedRange<Int> and conformance ClosedRange<A>);
    return v1;
  }
  return v3;
}

uint64_t NetworkingService.backoffDelay(response:statusCode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD __b[5];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v31 = a1;
  v30 = a2;
  v45 = 0;
  v44 = 0;
  v43 = 0;
  v42 = 0;
  v29 = 0;
  memset(__b, 0, 0x21uLL);
  v32 = type metadata accessor for DictionaryDecoder.DataDecodingStrategy();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v7 - v34;
  v45 = v3;
  v44 = v4;
  v43 = v2;
  if (v4 == *(_QWORD *)(v2 + 160))
  {
    v5 = v29;
    type metadata accessor for DictionaryDecoder();
    v27 = DictionaryDecoder.__allocating_init()();
    v42 = v27;
    (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v35, *MEMORY[0x24BDFC4E8], v32);
    dispatch thunk of DictionaryDecoder.dataDecodingStrategy.setter();
    lazy protocol witness table accessor for type ErrorResponse and conformance ErrorResponse();
    dispatch thunk of DictionaryDecoder.decode<A>(_:from:)();
    v28 = v5;
    v22 = v37;
    v23 = v38;
    v24 = v39;
    v25 = v40;
    v26 = v41 & 1;
    v19 = v26;
    v20 = v40;
    v21 = v39;
    __b[0] = v37;
    __b[1] = v38;
    __b[2] = v39;
    __b[3] = v40;
    LOBYTE(__b[4]) = v41 & 1;
    swift_bridgeObjectRetain();
    if (v21)
    {
      v16 = v21;
      v17 = v20;
      v18 = v19;
      v13 = v19;
      v12 = v20;
      swift_bridgeObjectRelease();
      v14 = v12;
      v15 = v13;
    }
    else
    {
      v14 = 0;
      v15 = 1;
    }
    v9 = v15;
    v8 = v14;
    swift_bridgeObjectRelease();
    swift_release();
    v10 = v8;
    v11 = v9;
  }
  else
  {
    v10 = 0;
    v11 = 1;
  }
  return v10;
}

unint64_t lazy protocol witness table accessor for type ErrorResponse and conformance ErrorResponse()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ErrorResponse and conformance ErrorResponse;
  if (!lazy protocol witness table cache variable for type ErrorResponse and conformance ErrorResponse)
  {
    v0 = MEMORY[0x242635504](&protocol conformance descriptor for ErrorResponse, &type metadata for ErrorResponse);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ErrorResponse and conformance ErrorResponse);
    return v0;
  }
  return v2;
}

uint64_t default argument 2 of static Task<>.sleep<A>(for:tolerance:clock:)()
{
  return ContinuousClock.init()();
}

unint64_t lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock;
  if (!lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock)
  {
    v0 = type metadata accessor for ContinuousClock();
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE6E20], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock);
    return v1;
  }
  return v3;
}

uint64_t static Task<>.sleep<A>(for:tolerance:clock:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v5 + 16) = v5;
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to Clock.sleep(for:tolerance:)
                                                                   + async function pointer to Clock.sleep(for:tolerance:));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v6;
  *v6 = *(_QWORD *)(v5 + 16);
  v6[1] = static Task<>.sleep<A>(for:tolerance:clock:);
  return v11(a1, a2, a4, a5);
}

_QWORD *static Task<>.sleep<A>(for:tolerance:clock:)()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed String, @guaranteed String) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@guaranteed String, @guaranteed String) -> ()(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16));
}

unint64_t type metadata accessor for NSMutableURLRequest()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSMutableURLRequest;
  if (!lazy cache variable for type metadata for NSMutableURLRequest)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    return ObjCClassMetadata;
  }
  return v2;
}

id NSMutableURLRequest.__allocating_init(url:cachePolicy:timeoutInterval:)(uint64_t a1, double a2)
{
  id v2;
  NSURL *v3;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc NSMutableURLRequest.init(url:cachePolicy:timeoutInterval:)(a1, v3, a2);
}

uint64_t closure #1 in NetworkingService.buildURLRequest(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  double v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t result;
  id v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t *v22;
  id v23;
  _BYTE v24[16];
  id v25;
  Builtin::Word v26;
  void *object;
  _QWORD *v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  Swift::String v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  id v61;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66[2];
  uint64_t v67;
  char v68[8];
  uint64_t v69;
  void *v70;
  uint64_t v71;

  v44 = a2;
  v50 = a1;
  v71 = *MEMORY[0x24BDAC8D0];
  v67 = 0;
  v65 = 0;
  v56 = 0;
  v46 = type metadata accessor for LogSubsystem();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = (*(_QWORD *)(v47 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v50);
  v49 = &v24[-v48];
  v67 = v2;
  v70 = 0;
  v58 = (id)objc_opt_self();
  v55 = v68;
  outlined init with copy of Any(v50, (uint64_t)v68);
  v53 = v69;
  v3 = __swift_project_boxed_opaque_existential_0(v55, v69);
  v52 = *(_QWORD *)(v53 - 8);
  v51 = (*(_QWORD *)(v52 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v54 = &v24[-v51];
  (*(void (**)(double))(v5 + 16))(v4);
  v60 = _bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v52 + 8))(v54, v53);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v55);
  type metadata accessor for NSJSONWritingOptions();
  v57 = _allocateUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type NSJSONWritingOptions and conformance NSJSONWritingOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  v66[0] = v70;
  v61 = objc_msgSend(v58, sel_dataWithJSONObject_options_error_, v60, v66[1], v66);
  v59 = v66[0];
  v6 = v66[0];
  v7 = v70;
  v70 = v59;

  swift_unknownObjectRelease();
  if (v61)
  {
    v43 = v61;
    v41 = v61;
    v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v44;
    v10 = v8;
    v11 = v41;
    *v44 = v10;
    v9[1] = v12;

    v42 = v45;
  }
  else
  {
    v25 = v70;
    v38 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    v39 = 0;
    v14 = v38;
    v65 = v38;
    v26 = 43;
    v15 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v30 = &v63;
    v63 = v15;
    v64 = v16;
    v33 = 1;
    v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Caught error encoding network request body ", v26, 1);
    object = v17._object;
    DefaultStringInterpolation.appendLiteral(_:)(v17);
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    v18 = Error.localizedDescription.getter();
    v28 = v62;
    v62[0] = v18;
    v62[1] = v19;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v20 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, v33 & 1);
    v29 = v20._object;
    DefaultStringInterpolation.appendLiteral(_:)(v20);
    swift_bridgeObjectRelease();
    v32 = v63;
    v31 = v64;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v34 = String.init(stringInterpolation:)();
    v37 = v21;
    v35 = static os_log_type_t.error.getter();
    v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("GroupKitCore/NetworkingService.swift", 0x24uLL, v33 & 1);
    default argument 4 of gpklog(_:type:fileID:line:subsystem:)((uint64_t)v49);
    gpklog(_:type:fileID:line:subsystem:)();
    (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v49, v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v44;
    v23 = v38;
    *v44 = 0;
    v22[1] = 0xF000000000000000;

    v42 = v39;
  }
  result = v42;
  v40 = v42;
  return result;
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  void (*v19)(char *, char *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v18 = a7;
  v19 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v25 = a6;
  v37 = a4;
  v36 = a5;
  v26 = *(_QWORD *)(a4 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7);
  v28 = (char *)v17 - v27;
  v33 = *(_QWORD *)(v8 + 16);
  v35 = v33;
  v32 = *(_QWORD *)(v33 - 8);
  v29 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9);
  v30 = (char *)v17 - v29;
  v31 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11);
  v34 = (char *)v17 - v31;
  _sxSgs5ErrorRd__Ri_d_0_r_0_lWOc(v12, (char *)v17 - v31, v13, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) == 1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 1);
    v17[1] = v24;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v30, v34, v33);
    v16 = v24;
    v19(v30, v28);
    v17[0] = v16;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v33);
    if (v16)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v25, v28, v22);
    else
      return v17[0];
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [NetworkRequestTransforming] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [NetworkRequestTransforming] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NetworkRequestTransforming] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NetworkRequestTransforming]);
    v1 = MEMORY[0x242635504](MEMORY[0x24BEE12E0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [NetworkRequestTransforming] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of IndexingIterator<[NetworkRequestTransforming]>()
{
  swift_bridgeObjectRelease();
}

void *outlined init with take of NetworkRequestTransforming(const void *a1, void *__dst)
{
  memcpy(__dst, a1, 0x28uLL);
  return __dst;
}

uint64_t NetworkingService.deinit()
{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_unknownObjectRelease();
  outlined destroy of [NetworkRequestTransforming]();
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  outlined destroy of String();
  outlined destroy of String();
  outlined destroy of String();
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [NetworkRequestTransforming]()
{
  swift_bridgeObjectRelease();
}

uint64_t NetworkingService.__deallocating_deinit()
{
  NetworkingService.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for NetworkRequesting.clientIdentifier.getter in conformance NetworkingService()
{
  return NetworkingService.clientIdentifier.getter();
}

uint64_t protocol witness for NetworkRequesting.clientIdentifier.setter in conformance NetworkingService(uint64_t a1, uint64_t a2)
{
  return NetworkingService.clientIdentifier.setter(a1, a2);
}

void (*protocol witness for NetworkRequesting.clientIdentifier.modify in conformance NetworkingService(_QWORD *a1))(void **a1, char a2)
{
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = NetworkingService.clientIdentifier.modify();
  return protocol witness for NetworkRequesting.clientIdentifier.modify in conformance NetworkingService;
}

void protocol witness for NetworkRequesting.clientIdentifier.modify in conformance NetworkingService(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for NetworkRequesting.send<A>(request:) in conformance NetworkingService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 16) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = *(_QWORD *)(v4 + 16);
  v5[1] = protocol witness for NetworkRequesting.send<A>(request:) in conformance NetworkingService;
  return NetworkingService.send<A>(request:)(a1, a2, a3, a4);
}

_QWORD *protocol witness for NetworkRequesting.send<A>(request:) in conformance NetworkingService()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *v0;
  *(_QWORD *)(v1 + 16) = *v0;
  v3 = (_QWORD *)(v1 + 16);
  swift_task_dealloc();
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v3 + 8))(v3);
}

uint64_t type metadata accessor for NetworkingService()
{
  return objc_opt_self();
}

uint64_t method lookup function for NetworkingService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NetworkingService.__allocating_init(session:urlBag:transformers:timeoutInterval:accountStore:maxRetries:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

id @nonobjc NSMutableURLRequest.init(url:cachePolicy:timeoutInterval:)@<X0>(uint64_t a1@<X0>, NSURL *a2@<X8>, double a3@<D0>)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v8;
  id v10;

  URL._bridgeToObjectiveC()(a2);
  v8 = v4;
  v10 = objc_msgSend(v3, sel_initWithURL_cachePolicy_timeoutInterval_, a3);

  v5 = type metadata accessor for URL();
  (*(void (**)(uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1);
  return v10;
}

unint64_t _sSo20NSJSONReadingOptionsVs9OptionSetSCSYWb_2()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t _sSo20NSJSONReadingOptionsVs9OptionSetSCs0D7AlgebraPWb_2()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t _sSo20NSJSONReadingOptionsVs10SetAlgebraSCSQWb_2()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

unint64_t _sSo20NSJSONReadingOptionsVs10SetAlgebraSCs25ExpressibleByArrayLiteralPWb_2()
{
  return lazy protocol witness table accessor for type NSJSONReadingOptions and conformance NSJSONReadingOptions();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

_QWORD *__swift_project_boxed_opaque_existential_0(_QWORD *result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0)
    return (_QWORD *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  return result;
}

uint64_t Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t AssociatedTypeWitness;

  v5[7] = v4;
  v5[6] = a4;
  v5[5] = a3;
  v5[4] = a2;
  v5[3] = a1;
  v5[2] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[8] = AssociatedTypeWitness;
  v5[9] = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Clock.sleep(for:tolerance:)()
{
  _QWORD *v0;
  uint64_t AssociatedConformanceWitness;
  void (*v2)(uint64_t, uint64_t);
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = v0[10];
  v6 = v0[9];
  v8 = v0[8];
  v5 = v0[3];
  v0[2] = v0;
  dispatch thunk of Clock.now.getter();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x242634E80](v5, v8, AssociatedConformanceWitness);
  v2 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v0[12] = v2;
  v2(v7, v8);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 104) = v3;
  *v3 = *(_QWORD *)(v9 + 16);
  v3[1] = Clock.sleep(for:tolerance:);
  return dispatch thunk of Clock.sleep(until:tolerance:)();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

_QWORD *Clock.sleep(for:tolerance:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v2 = *v1;
  *(_QWORD *)(v2 + 16) = *v1;
  v4 = v2 + 16;
  v5 = (_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v4 + 80))(*(_QWORD *)(v4 + 72), *(_QWORD *)(v4 + 48));
    return (_QWORD *)swift_task_switch();
  }
  else
  {
    (*(void (**)(void))(v4 + 80))();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*v5 + 8))(v5);
  }
}

